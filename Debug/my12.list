
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a548  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d664  0802a748  0802a748  0003a748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08047dac  08047dac  000606f4  2**0
                  CONTENTS
  4 .ARM          00000008  08047dac  08047dac  00057dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08047db4  08047db4  000606f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08047db4  08047db4  00057db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08047db8  08047db8  00057db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006f4  20000000  08047dbc  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002fa6c  200006f8  080484b0  000606f8  2**3
                  ALLOC
 10 ._user_heap_stack 0001e804  20030164  080484b0  00070164  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000920ac  00000000  00000000  00060722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001373e  00000000  00000000  000f27ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00053eae  00000000  00000000  00105f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037d0  00000000  00000000  00159dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000099a8  00000000  00000000  0015d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049d88  00000000  00000000  00166f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00092c15  00000000  00000000  001b0cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013a6ae  00000000  00000000  002438d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0037df83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d894  00000000  00000000  0037dfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006f8 	.word	0x200006f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0802a730 	.word	0x0802a730

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006fc 	.word	0x200006fc
 800023c:	0802a730 	.word	0x0802a730

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
 8000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 800026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000728 	.word	0x20000728
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	200007a8 	.word	0x200007a8

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	20000728 	.word	0x20000728
 8000708:	40000c00 	.word	0x40000c00
 800070c:	200007a8 	.word	0x200007a8

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f026 f872 	bl	802680c <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f009 b81b 	b.w	8009768 <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	0802a974 	.word	0x0802a974

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219b      	movs	r1, #155	; 0x9b
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f005 f888 	bl	8005868 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219d      	movs	r1, #157	; 0x9d
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f005 f87c 	bl	8005868 <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f00a f8e3 	bl	800a9ec <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219c      	movs	r1, #156	; 0x9c
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f005 f806 	bl	8005868 <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	0802a98c 	.word	0x0802a98c
 800086c:	200002b8 	.word	0x200002b8
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b7f      	ldr	r3, [pc, #508]	; (8000a8c <ADC_Conv_complete+0x200>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a80      	ldr	r2, [pc, #512]	; (8000a90 <ADC_Conv_complete+0x204>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4980      	ldr	r1, [pc, #512]	; (8000a94 <ADC_Conv_complete+0x208>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b80      	ldr	r3, [pc, #512]	; (8000a98 <ADC_Conv_complete+0x20c>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4880      	ldr	r0, [pc, #512]	; (8000a9c <ADC_Conv_complete+0x210>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681c      	ldr	r4, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b7f      	ldr	r3, [pc, #508]	; (8000aa0 <ADC_Conv_complete+0x214>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7815      	ldrb	r5, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f504 64b8 	addeq.w	r4, r4, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60e3      	str	r3, [r4, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	022b      	lsls	r3, r5, #8
 80008b6:	9505      	str	r5, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460d      	mov	r5, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <ADC_Conv_complete+0x218>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a1      	str	r1, [r4, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8000af4 <ADC_Conv_complete+0x268>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	6063      	str	r3, [r4, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8d9 3000 	ldr.w	r3, [r9]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67ab      	str	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c9 3000 	str.w	r3, [r9]
	if (sigsuppress) {
 80008f0:	4b6d      	ldr	r3, [pc, #436]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d03c      	beq.n	8000972 <ADC_Conv_complete+0xe6>
		sigsend = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c9 3000 	str.w	r3, [r9]
	if (sigsend) {
 80008fe:	f8d9 3000 	ldr.w	r3, [r9]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d02c      	beq.n	8000960 <ADC_Conv_complete+0xd4>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 8000906:	4b69      	ldr	r3, [pc, #420]	; (8000aac <ADC_Conv_complete+0x220>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	2a00      	cmp	r2, #0
 800090c:	f000 809d 	beq.w	8000a4a <ADC_Conv_complete+0x1be>
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000910:	4860      	ldr	r0, [pc, #384]	; (8000a94 <ADC_Conv_complete+0x208>)
		sigprev = 1;	// remember this trigger for next packet
 8000912:	2101      	movs	r1, #1
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000914:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 8000916:	6019      	str	r1, [r3, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000918:	440a      	add	r2, r1
		ledhang = 15;		// 15 x 10ms in Idle proc
 800091a:	4b65      	ldr	r3, [pc, #404]	; (8000ab0 <ADC_Conv_complete+0x224>)
 800091c:	210f      	movs	r1, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 800091e:	67c2      	str	r2, [r0, #124]	; 0x7c
		ledhang = 15;		// 15 x 10ms in Idle proc
 8000920:	6019      	str	r1, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 8000922:	4a64      	ldr	r2, [pc, #400]	; (8000ab4 <ADC_Conv_complete+0x228>)
 8000924:	6813      	ldr	r3, [r2, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	d10b      	bne.n	8000948 <ADC_Conv_complete+0xbc>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000930:	4961      	ldr	r1, [pc, #388]	; (8000ab8 <ADC_Conv_complete+0x22c>)
		adcbgbaseacc = 0;
 8000932:	2000      	movs	r0, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000934:	4d61      	ldr	r5, [pc, #388]	; (8000abc <ADC_Conv_complete+0x230>)
 8000936:	680b      	ldr	r3, [r1, #0]
		samplecnt = 0;
 8000938:	6010      	str	r0, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	4c60      	ldr	r4, [pc, #384]	; (8000ac0 <ADC_Conv_complete+0x234>)
		adcbgbaseacc = 0;
 800093e:	6008      	str	r0, [r1, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000940:	fba5 2303 	umull	r2, r3, r5, r3
 8000944:	0b9b      	lsrs	r3, r3, #14
 8000946:	6023      	str	r3, [r4, #0]
	if (xTaskToNotify == NULL) {
 8000948:	4b5e      	ldr	r3, [pc, #376]	; (8000ac4 <ADC_Conv_complete+0x238>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2a00      	cmp	r2, #0
 800094e:	f000 8097 	beq.w	8000a80 <ADC_Conv_complete+0x1f4>
	} else if (sigsend) {
 8000952:	f8d9 2000 	ldr.w	r2, [r9]
 8000956:	2a00      	cmp	r2, #0
 8000958:	d17c      	bne.n	8000a54 <ADC_Conv_complete+0x1c8>
}
 800095a:	b007      	add	sp, #28
 800095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <ADC_Conv_complete+0x220>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	b112      	cbz	r2, 800096c <ADC_Conv_complete+0xe0>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000966:	4a58      	ldr	r2, [pc, #352]	; (8000ac8 <ADC_Conv_complete+0x23c>)
 8000968:	2101      	movs	r1, #1
 800096a:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e7d7      	b.n	8000922 <ADC_Conv_complete+0x96>
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	469c      	mov	ip, r3
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <ADC_Conv_complete+0x240>)
 8000976:	340e      	adds	r4, #14
 8000978:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8000af8 <ADC_Conv_complete+0x26c>
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4f54      	ldr	r7, [pc, #336]	; (8000ad0 <ADC_Conv_complete+0x244>)
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	4b54      	ldr	r3, [pc, #336]	; (8000ad4 <ADC_Conv_complete+0x248>)
 8000984:	f8cd c010 	str.w	ip, [sp, #16]
 8000988:	881b      	ldrh	r3, [r3, #0]
				pretrigcnt++;
 800098a:	9400      	str	r4, [sp, #0]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800098c:	9303      	str	r3, [sp, #12]
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000990:	681d      	ldr	r5, [r3, #0]
 8000992:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	4b51      	ldr	r3, [pc, #324]	; (8000adc <ADC_Conv_complete+0x250>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b51      	ldr	r3, [pc, #324]	; (8000ae0 <ADC_Conv_complete+0x254>)
 800099c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <ADC_Conv_complete+0x258>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	9301      	str	r3, [sp, #4]
			lastmeanwindiff = abs(meanwindiff);
 80009a6:	2900      	cmp	r1, #0
			thissamp = (*adcbuf16)[i];
 80009a8:	9c00      	ldr	r4, [sp, #0]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009aa:	f00c 0a1f 	and.w	sl, ip, #31
			if (sigsend)
 80009ae:	f8d9 b000 	ldr.w	fp, [r9]
			lastmeanwindiff = abs(meanwindiff);
 80009b2:	bfb8      	it	lt
 80009b4:	4249      	neglt	r1, r1
			thissamp = (*adcbuf16)[i];
 80009b6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 80009ba:	f10c 0c01 	add.w	ip, ip, #1
			lastmeanwindiff = abs(meanwindiff);
 80009be:	b28e      	uxth	r6, r1
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c0:	9903      	ldr	r1, [sp, #12]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009c2:	4418      	add	r0, r3
			adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 80009c4:	441d      	add	r5, r3
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c6:	eb06 0e01 	add.w	lr, r6, r1
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009ca:	f838 101a 	ldrh.w	r1, [r8, sl, lsl #1]
			lastsamp[j] = thissamp;			// save last samples
 80009ce:	f828 301a 	strh.w	r3, [r8, sl, lsl #1]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009d2:	1a40      	subs	r0, r0, r1
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009d4:	f857 102a 	ldr.w	r1, [r7, sl, lsl #2]
			thissamp = (*adcbuf16)[i];
 80009d8:	9400      	str	r4, [sp, #0]
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009da:	1a52      	subs	r2, r2, r1
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009dc:	f340 114f 	sbfx	r1, r0, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009e0:	9c02      	ldr	r4, [sp, #8]
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009e2:	1a5b      	subs	r3, r3, r1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bfb8      	it	lt
 80009e8:	425b      	neglt	r3, r3
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009ea:	441a      	add	r2, r3
			meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 80009ec:	f342 114f 	sbfx	r1, r2, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f0:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
			windiff[j] = meanwindiff;	// store latest window mean of differences
 80009f4:	f847 102a 	str.w	r1, [r7, sl, lsl #2]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	eb03 0a04 	add.w	sl, r3, r4
 8000a02:	45f2      	cmp	sl, lr
 8000a04:	dd04      	ble.n	8000a10 <ADC_Conv_complete+0x184>
				pretrigcnt++;
 8000a06:	9c01      	ldr	r4, [sp, #4]
 8000a08:	3401      	adds	r4, #1
 8000a0a:	9401      	str	r4, [sp, #4]
 8000a0c:	2401      	movs	r4, #1
 8000a0e:	9404      	str	r4, [sp, #16]
			if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 8000a10:	4573      	cmp	r3, lr
 8000a12:	dd05      	ble.n	8000a20 <ADC_Conv_complete+0x194>
 8000a14:	f1bb 0f00 	cmp.w	fp, #0
 8000a18:	d102      	bne.n	8000a20 <ADC_Conv_complete+0x194>
				sigsend = 1; // the real trigger
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f8c9 3000 	str.w	r3, [r9]
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000a20:	f5bc 7f36 	cmp.w	ip, #728	; 0x2d8
 8000a24:	d1bf      	bne.n	80009a6 <ADC_Conv_complete+0x11a>
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a28:	601d      	str	r5, [r3, #0]
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000a2c:	6018      	str	r0, [r3, #0]
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <ADC_Conv_complete+0x250>)
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <ADC_Conv_complete+0x254>)
 8000a34:	8019      	strh	r1, [r3, #0]
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <ADC_Conv_complete+0x25c>)
 8000a38:	801e      	strh	r6, [r3, #0]
 8000a3a:	9b04      	ldr	r3, [sp, #16]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f43f af5e 	beq.w	80008fe <ADC_Conv_complete+0x72>
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <ADC_Conv_complete+0x258>)
 8000a44:	9a01      	ldr	r2, [sp, #4]
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e759      	b.n	80008fe <ADC_Conv_complete+0x72>
			++adcbatchid; // start a new adc batch number
 8000a4a:	9a05      	ldr	r2, [sp, #20]
 8000a4c:	4910      	ldr	r1, [pc, #64]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000a4e:	3201      	adds	r2, #1
 8000a50:	700a      	strb	r2, [r1, #0]
 8000a52:	e75d      	b.n	8000910 <ADC_Conv_complete+0x84>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a54:	4c25      	ldr	r4, [pc, #148]	; (8000aec <ADC_Conv_complete+0x260>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f017 fc95 	bl	8018388 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f43f af7a 	beq.w	800095a <ADC_Conv_complete+0xce>
 8000a66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a72:	f3bf 8f4f 	dsb	sy
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	b007      	add	sp, #28
 8000a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a80:	481b      	ldr	r0, [pc, #108]	; (8000af0 <ADC_Conv_complete+0x264>)
}
 8000a82:	b007      	add	sp, #28
 8000a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a88:	f025 bec0 	b.w	802680c <puts>
 8000a8c:	20000728 	.word	0x20000728
 8000a90:	20000714 	.word	0x20000714
 8000a94:	2000303c 	.word	0x2000303c
 8000a98:	20000784 	.word	0x20000784
 8000a9c:	20000724 	.word	0x20000724
 8000aa0:	200007a8 	.word	0x200007a8
 8000aa4:	2000078c 	.word	0x2000078c
 8000aa8:	200007a0 	.word	0x200007a0
 8000aac:	20000798 	.word	0x20000798
 8000ab0:	2000077c 	.word	0x2000077c
 8000ab4:	20000790 	.word	0x20000790
 8000ab8:	20000718 	.word	0x20000718
 8000abc:	16816817 	.word	0x16816817
 8000ac0:	2000072c 	.word	0x2000072c
 8000ac4:	20000838 	.word	0x20000838
 8000ac8:	20000794 	.word	0x20000794
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	200007b0 	.word	0x200007b0
 8000ad4:	20000002 	.word	0x20000002
 8000ad8:	20000830 	.word	0x20000830
 8000adc:	200007ac 	.word	0x200007ac
 8000ae0:	20000780 	.word	0x20000780
 8000ae4:	20000788 	.word	0x20000788
 8000ae8:	20000738 	.word	0x20000738
 8000aec:	20000834 	.word	0x20000834
 8000af0:	0802a9a4 	.word	0x0802a9a4
 8000af4:	2000079c 	.word	0x2000079c
 8000af8:	2000073c 	.word	0x2000073c

08000afc <startadc>:

void startadc() {
 8000afc:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000afe:	492b      	ldr	r1, [pc, #172]	; (8000bac <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000b00:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000b06:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b08:	4d2b      	ldr	r5, [pc, #172]	; (8000bb8 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000b0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000b0e:	f025 fe7d 	bl	802680c <puts>
	osDelay(100);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f015 fd5e 	bl	80165d4 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b18:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000b1c:	f018 f924 	bl	8018d68 <pvPortMalloc>
 8000b20:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d03d      	beq.n	8000ba2 <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000b26:	0783      	lsls	r3, r0, #30
 8000b28:	4604      	mov	r4, r0
 8000b2a:	d128      	bne.n	8000b7e <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b2c:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b30:	2155      	movs	r1, #85	; 0x55
 8000b32:	4620      	mov	r0, r4
 8000b34:	f024 fe30 	bl	8025798 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b38:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b3c:	21aa      	movs	r1, #170	; 0xaa
 8000b3e:	18a0      	adds	r0, r4, r2
 8000b40:	f024 fe2a 	bl	8025798 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b44:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b48:	481c      	ldr	r0, [pc, #112]	; (8000bbc <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b4a:	f104 0110 	add.w	r1, r4, #16
 8000b4e:	4c1c      	ldr	r4, [pc, #112]	; (8000bc0 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b50:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b54:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b58:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b5a:	f7ff fded 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <startadc+0xcc>)
 8000b60:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b64:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b66:	f008 fd51 	bl	800960c <HAL_ADC_Start>
 8000b6a:	b9b0      	cbnz	r0, 8000b9a <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <startadc+0xd4>)
 8000b6e:	f008 fd4d 	bl	800960c <HAL_ADC_Start>
 8000b72:	b970      	cbnz	r0, 8000b92 <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <startadc+0xc8>)
 8000b76:	f008 fd49 	bl	800960c <HAL_ADC_Start>
 8000b7a:	b928      	cbnz	r0, 8000b88 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <startadc+0xd8>)
 8000b80:	f025 fe44 	bl	802680c <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b84:	682c      	ldr	r4, [r5, #0]
 8000b86:	e7d1      	b.n	8000b2c <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <startadc+0xdc>)
}
 8000b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b8e:	f025 be3d 	b.w	802680c <puts>
		printf("ADC2 failed start\r\n");
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <startadc+0xe0>)
 8000b94:	f025 fe3a 	bl	802680c <puts>
 8000b98:	e7ec      	b.n	8000b74 <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <startadc+0xe4>)
 8000b9c:	f025 fe36 	bl	802680c <puts>
 8000ba0:	e7e4      	b.n	8000b6c <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000ba2:	4810      	ldr	r0, [pc, #64]	; (8000be4 <startadc+0xe8>)
 8000ba4:	f025 fe32 	bl	802680c <puts>
		for (;;)
 8000ba8:	e7fe      	b.n	8000ba8 <startadc+0xac>
 8000baa:	bf00      	nop
 8000bac:	066ff300 	.word	0x066ff300
 8000bb0:	2000303c 	.word	0x2000303c
 8000bb4:	0802a9b8 	.word	0x0802a9b8
 8000bb8:	20000784 	.word	0x20000784
 8000bbc:	20000720 	.word	0x20000720
 8000bc0:	2000071c 	.word	0x2000071c
 8000bc4:	20002198 	.word	0x20002198
 8000bc8:	20000725 	.word	0x20000725
 8000bcc:	20002228 	.word	0x20002228
 8000bd0:	200021e0 	.word	0x200021e0
 8000bd4:	0802a9f4 	.word	0x0802a9f4
 8000bd8:	0802aa54 	.word	0x0802aa54
 8000bdc:	0802aa40 	.word	0x0802aa40
 8000be0:	0802aa2c 	.word	0x0802aa2c
 8000be4:	0802a9cc 	.word	0x0802a9cc

08000be8 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000be8:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bea:	b169      	cbz	r1, 8000c08 <xcrc32+0x20>
 8000bec:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bf2:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bf6:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bfa:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000c04:	d1f5      	bne.n	8000bf2 <xcrc32+0xa>
 8000c06:	4770      	bx	lr
  unsigned int crc = init;
 8000c08:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000c0a:	4770      	bx	lr
 8000c0c:	0802aa68 	.word	0x0802aa68

08000c10 <stampboot>:
		return (0);
	}
}

// make sure the boot vector points to this running program
void stampboot() {
 8000c10:	b500      	push	{lr}
 8000c12:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options, addr;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000c14:	4668      	mov	r0, sp
 8000c16:	f00b fd75 	bl	800c704 <HAL_FLASHEx_OBGetConfig>

	addr = (uint32_t) stampboot & LOADER_BASE_MEM2; 	// where are we running this code?
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <stampboot+0x7c>)
 8000c1c:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000

	if (OBInitStruct.BootAddr0 != newadd) {
 8000c24:	9b06      	ldr	r3, [sp, #24]
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c26:	d01b      	beq.n	8000c60 <stampboot+0x50>
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c28:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
 8000c2c:	d015      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c2e:	f00b fb85 	bl	800c33c <HAL_FLASH_OB_Unlock>

		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c32:	f44f 5301 	mov.w	r3, #8256	; 0x2040
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c3a:	9306      	str	r3, [sp, #24]

		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c3c:	9b05      	ldr	r3, [sp, #20]

		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c3e:	4668      	mov	r0, sp
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c40:	9207      	str	r2, [sp, #28]
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c42:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c46:	9305      	str	r3, [sp, #20]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c48:	f00b fc84 	bl	800c554 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 8000c4c:	b9c0      	cbnz	r0, 8000c80 <stampboot+0x70>
			printf("stampboot: failed to OBProgram %d\n", res);
		}

		res = HAL_FLASH_OB_Launch();
 8000c4e:	f00b fb91 	bl	800c374 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8000c52:	b980      	cbnz	r0, 8000c76 <stampboot+0x66>
			printf("stampboot: failed to OBLaunch %d\n", res);
		}
		printf(".......re-stamped boot vector.......\n");
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <stampboot+0x80>)
 8000c56:	f025 fdd9 	bl	802680c <puts>
	}
}
 8000c5a:	b009      	add	sp, #36	; 0x24
 8000c5c:	f85d fb04 	ldr.w	pc, [sp], #4
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c64:	d0f9      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c66:	f00b fb69 	bl	800c33c <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c6e:	f44f 5201 	mov.w	r2, #8256	; 0x2040
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c72:	9306      	str	r3, [sp, #24]
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c74:	e7e2      	b.n	8000c3c <stampboot+0x2c>
			printf("stampboot: failed to OBLaunch %d\n", res);
 8000c76:	4601      	mov	r1, r0
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <stampboot+0x84>)
 8000c7a:	f025 fd2b 	bl	80266d4 <iprintf>
 8000c7e:	e7e9      	b.n	8000c54 <stampboot+0x44>
			printf("stampboot: failed to OBProgram %d\n", res);
 8000c80:	4601      	mov	r1, r0
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <stampboot+0x88>)
 8000c84:	f025 fd26 	bl	80266d4 <iprintf>
 8000c88:	e7e1      	b.n	8000c4e <stampboot+0x3e>
 8000c8a:	bf00      	nop
 8000c8c:	08000c11 	.word	0x08000c11
 8000c90:	0802aeb0 	.word	0x0802aeb0
 8000c94:	0802ae8c 	.word	0x0802ae8c
 8000c98:	0802ae68 	.word	0x0802ae68

08000c9c <printflasherr>:
void printflasherr() {
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c9e:	4d1e      	ldr	r5, [pc, #120]	; (8000d18 <printflasherr+0x7c>)
		msg = "Programming alignment";
 8000ca0:	4f1e      	ldr	r7, [pc, #120]	; (8000d1c <printflasherr+0x80>)
		msg = "Erasing Sequence";
 8000ca2:	4e1f      	ldr	r6, [pc, #124]	; (8000d20 <printflasherr+0x84>)
	err = HAL_FLASH_GetError();
 8000ca4:	f00b fb94 	bl	800c3d0 <HAL_FLASH_GetError>
	switch (err) {
 8000ca8:	1e83      	subs	r3, r0, #2
	err = HAL_FLASH_GetError();
 8000caa:	4604      	mov	r4, r0
	switch (err) {
 8000cac:	2b1e      	cmp	r3, #30
 8000cae:	d811      	bhi.n	8000cd4 <printflasherr+0x38>
 8000cb0:	e8df f003 	tbb	[pc, r3]
 8000cb4:	102f102b 	.word	0x102f102b
 8000cb8:	102d1010 	.word	0x102d1010
 8000cbc:	10101010 	.word	0x10101010
 8000cc0:	10291010 	.word	0x10291010
 8000cc4:	10101010 	.word	0x10101010
 8000cc8:	10101010 	.word	0x10101010
 8000ccc:	10101010 	.word	0x10101010
 8000cd0:	1010      	.short	0x1010
 8000cd2:	1d          	.byte	0x1d
 8000cd3:	00          	.byte	0x00
		sprintf(msg, "Unknown err 0x%0x", err);
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4913      	ldr	r1, [pc, #76]	; (8000d24 <printflasherr+0x88>)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f025 fee5 	bl	8026aa8 <siprintf>
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000cde:	4621      	mov	r1, r4
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <printflasherr+0x8c>)
 8000ce2:	f025 fcf7 	bl	80266d4 <iprintf>
	res = HAL_FLASH_Lock();
 8000ce6:	f00b fb1f 	bl	800c328 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cea:	b940      	cbnz	r0, 8000cfe <printflasherr+0x62>
}
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		msg = "Operation";
 8000cee:	490f      	ldr	r1, [pc, #60]	; (8000d2c <printflasherr+0x90>)
		printf("Flash operation failed: %s error\n", msg);
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f025 fcef 	bl	80266d4 <iprintf>
	res = HAL_FLASH_Lock();
 8000cf6:	f00b fb17 	bl	800c328 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d0f6      	beq.n	8000cec <printflasherr+0x50>
		printf("LockFlash: failed to lock\n");
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <printflasherr+0x94>)
 8000d00:	f025 fd84 	bl	802680c <puts>
		printflasherr();
 8000d04:	e7ce      	b.n	8000ca4 <printflasherr+0x8>
		msg = "Write Protected";
 8000d06:	490b      	ldr	r1, [pc, #44]	; (8000d34 <printflasherr+0x98>)
		break;
 8000d08:	e7f2      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Erasing Sequence";
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7f0      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Programming alignment";
 8000d0e:	4639      	mov	r1, r7
 8000d10:	e7ee      	b.n	8000cf0 <printflasherr+0x54>
	switch (err) {
 8000d12:	4909      	ldr	r1, [pc, #36]	; (8000d38 <printflasherr+0x9c>)
 8000d14:	e7ec      	b.n	8000cf0 <printflasherr+0x54>
 8000d16:	bf00      	nop
 8000d18:	0802af6c 	.word	0x0802af6c
 8000d1c:	0802aef8 	.word	0x0802aef8
 8000d20:	0802aee4 	.word	0x0802aee4
 8000d24:	0802af38 	.word	0x0802af38
 8000d28:	0802af4c 	.word	0x0802af4c
 8000d2c:	0802aed8 	.word	0x0802aed8
 8000d30:	0802af90 	.word	0x0802af90
 8000d34:	0802af10 	.word	0x0802af10
 8000d38:	0802af20 	.word	0x0802af20

08000d3c <WriteFlashWord.part.0>:
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d3c:	b570      	push	{r4, r5, r6, lr}
	__HAL_FLASH_ART_DISABLE();
 8000d3e:	4c1a      	ldr	r4, [pc, #104]	; (8000da8 <WriteFlashWord.part.0+0x6c>)
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d40:	4605      	mov	r5, r0
 8000d42:	460e      	mov	r6, r1
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d44:	2300      	movs	r3, #0
	__HAL_FLASH_ART_DISABLE();
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d4c:	6022      	str	r2, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d4e:	460a      	mov	r2, r1
 8000d50:	4601      	mov	r1, r0
 8000d52:	2002      	movs	r0, #2
 8000d54:	f00b fb6e 	bl	800c434 <HAL_FLASH_Program>
 8000d58:	b990      	cbnz	r0, 8000d80 <WriteFlashWord.part.0+0x44>
	__HAL_FLASH_ART_RESET();
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d60:	6023      	str	r3, [r4, #0]
	__HAL_FLASH_ART_ENABLE();
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d68:	6023      	str	r3, [r4, #0]
	if (*(uint32_t*) address != data) {
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	429e      	cmp	r6, r3
 8000d6e:	d100      	bne.n	8000d72 <WriteFlashWord.part.0+0x36>
}
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
		printf("WriteFlashWord: Failed at 0x%08x with data=%08x, read=0x%08x\n", address, data, *(uint32_t*) address);
 8000d72:	4632      	mov	r2, r6
 8000d74:	4629      	mov	r1, r5
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <WriteFlashWord.part.0+0x70>)
 8000d78:	f025 fcac 	bl	80266d4 <iprintf>
		return (HAL_ERROR);
 8000d7c:	2001      	movs	r0, #1
}
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
		printflasherr();		// deleteme
 8000d80:	f7ff ff8c 	bl	8000c9c <printflasherr>
			printflasherr();
 8000d84:	f7ff ff8a 	bl	8000c9c <printflasherr>
			printf("WriteFlashWord: failed write at 0x%0x err=0x%x\n", address, res);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <WriteFlashWord.part.0+0x74>)
 8000d8e:	f025 fca1 	bl	80266d4 <iprintf>
			__HAL_FLASH_ART_RESET();
 8000d92:	6823      	ldr	r3, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d94:	2001      	movs	r0, #1
			__HAL_FLASH_ART_RESET();
 8000d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d9a:	6023      	str	r3, [r4, #0]
			__HAL_FLASH_ART_ENABLE();
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6023      	str	r3, [r4, #0]
}
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00
 8000dac:	0802b000 	.word	0x0802b000
 8000db0:	0802afd0 	.word	0x0802afd0

08000db4 <EraseFlash>:
HAL_StatusTypeDef EraseFlash(void *memptr) {
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	4604      	mov	r4, r0
	res = HAL_FLASH_Unlock();
 8000dba:	f00b faa1 	bl	800c300 <HAL_FLASH_Unlock>
	if (res != HAL_OK) {
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d14f      	bne.n	8000e62 <EraseFlash+0xae>
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dc2:	f004 6301 	and.w	r3, r4, #135266304	; 0x8100000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dc6:	4d34      	ldr	r5, [pc, #208]	; (8000e98 <EraseFlash+0xe4>)
 8000dc8:	2202      	movs	r2, #2
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dca:	4626      	mov	r6, r4
 8000dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dd0:	612a      	str	r2, [r5, #16]
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dd2:	d041      	beq.n	8000e58 <EraseFlash+0xa4>
		EraseInitStruct.Sector = FLASH_SECTOR_8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	e9c5 3202 	strd	r3, r2, [r5, #8]
	for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000dda:	4930      	ldr	r1, [pc, #192]	; (8000e9c <EraseFlash+0xe8>)
 8000ddc:	1f23      	subs	r3, r4, #4
 8000dde:	4421      	add	r1, r4
 8000de0:	e001      	b.n	8000de6 <EraseFlash+0x32>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d006      	beq.n	8000df4 <EraseFlash+0x40>
		if (*ptr != 0xffffffff) {
 8000de6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000dea:	3201      	adds	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <EraseFlash+0x2e>
	if ((dirty) && (noterased)) {
 8000dee:	4f2c      	ldr	r7, [pc, #176]	; (8000ea0 <EraseFlash+0xec>)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b92b      	cbnz	r3, 8000e00 <EraseFlash+0x4c>
		printf("Flash erase unnecessary\n");
 8000df4:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <EraseFlash+0xf0>)
 8000df6:	f025 fd09 	bl	802680c <puts>
}
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	b003      	add	sp, #12
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e04:	f015 fbe6 	bl	80165d4 <osDelay>
		printf("Erasing Flash for %d sector(s) from %d\n", EraseInitStruct.NbSectors, EraseInitStruct.Sector);
 8000e08:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <EraseFlash+0xf4>)
 8000e0a:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 8000e0e:	f025 fc61 	bl	80266d4 <iprintf>
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2301      	movs	r3, #1
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e16:	a901      	add	r1, sp, #4
 8000e18:	481f      	ldr	r0, [pc, #124]	; (8000e98 <EraseFlash+0xe4>)
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e1a:	e9c5 2300 	strd	r2, r3, [r5]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	612b      	str	r3, [r5, #16]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e22:	f00b fcdb 	bl	800c7dc <HAL_FLASHEx_Erase>
		if (SectorError != 0xffffffff) {
 8000e26:	9901      	ldr	r1, [sp, #4]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e28:	4605      	mov	r5, r0
		if (SectorError != 0xffffffff) {
 8000e2a:	1c48      	adds	r0, r1, #1
 8000e2c:	d12d      	bne.n	8000e8a <EraseFlash+0xd6>
		if (res != HAL_OK) {
 8000e2e:	bb25      	cbnz	r5, 8000e7a <EraseFlash+0xc6>
			printf("Flash successfully erased\n");
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <EraseFlash+0xf8>)
 8000e32:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
 8000e36:	f025 fce9 	bl	802680c <puts>
			noterased = 0;
 8000e3a:	603d      	str	r5, [r7, #0]
			for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000e3c:	e001      	b.n	8000e42 <EraseFlash+0x8e>
 8000e3e:	42b4      	cmp	r4, r6
 8000e40:	d0db      	beq.n	8000dfa <EraseFlash+0x46>
 8000e42:	4631      	mov	r1, r6
				if (*ptr != 0xffffffff) {
 8000e44:	3604      	adds	r6, #4
 8000e46:	680b      	ldr	r3, [r1, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	d0f8      	beq.n	8000e3e <EraseFlash+0x8a>
				noterased = 1;
 8000e4c:	2301      	movs	r3, #1
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <EraseFlash+0xfc>)
				noterased = 1;
 8000e50:	603b      	str	r3, [r7, #0]
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e52:	f025 fc3f 	bl	80266d4 <iprintf>
 8000e56:	e7d0      	b.n	8000dfa <EraseFlash+0x46>
		EraseInitStruct.NbSectors = 6;
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8000e60:	e7bb      	b.n	8000dda <EraseFlash+0x26>
		printf("UnlockFlash: failed to unlock 0x%x\n", res);
 8000e62:	4601      	mov	r1, r0
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <EraseFlash+0x100>)
 8000e66:	f025 fc35 	bl	80266d4 <iprintf>
		printflasherr();
 8000e6a:	f7ff ff17 	bl	8000c9c <printflasherr>
		printf("EraseFlash: unlock failed\n");
 8000e6e:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <EraseFlash+0x104>)
 8000e70:	f025 fccc 	bl	802680c <puts>
		printflasherr();
 8000e74:	f7ff ff12 	bl	8000c9c <printflasherr>
 8000e78:	e7a3      	b.n	8000dc2 <EraseFlash+0xe>
			printf("EraseFlash: failed\n");
 8000e7a:	4810      	ldr	r0, [pc, #64]	; (8000ebc <EraseFlash+0x108>)
 8000e7c:	f025 fcc6 	bl	802680c <puts>
			printflasherr();
 8000e80:	f7ff ff0c 	bl	8000c9c <printflasherr>
}
 8000e84:	2000      	movs	r0, #0
 8000e86:	b003      	add	sp, #12
 8000e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Flash Erase failed sectorerror 0x%08x\n", SectorError);
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <EraseFlash+0x10c>)
 8000e8c:	f025 fc22 	bl	80266d4 <iprintf>
		if (res != HAL_OK) {
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d0cd      	beq.n	8000e30 <EraseFlash+0x7c>
 8000e94:	e7f1      	b.n	8000e7a <EraseFlash+0xc6>
 8000e96:	bf00      	nop
 8000e98:	2000083c 	.word	0x2000083c
 8000e9c:	0007fffc 	.word	0x0007fffc
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	0802b0dc 	.word	0x0802b0dc
 8000ea8:	0802b05c 	.word	0x0802b05c
 8000eac:	0802b0c0 	.word	0x0802b0c0
 8000eb0:	0802b0f4 	.word	0x0802b0f4
 8000eb4:	0802afac 	.word	0x0802afac
 8000eb8:	0802b040 	.word	0x0802b040
 8000ebc:	0802b0ac 	.word	0x0802b0ac
 8000ec0:	0802b084 	.word	0x0802b084

08000ec4 <swapboot>:

/// fix up the boot vectors in the option flash
void swapboot() {
 8000ec4:	b500      	push	{lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000ec8:	4668      	mov	r0, sp
 8000eca:	f00b fc1b 	bl	800c704 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_OB_Unlock();
 8000ece:	f00b fa35 	bl	800c33c <HAL_FLASH_OB_Unlock>

	// swap boot address (maybe)

	newadd = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;	// toggle boot segment start add
 8000ed2:	9b06      	ldr	r3, [sp, #24]
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed8:	d008      	beq.n	8000eec <swapboot+0x28>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	d009      	beq.n	8000ef8 <swapboot+0x34>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ee4:	9306      	str	r3, [sp, #24]
	}
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ee6:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 8000eea:	e007      	b.n	8000efc <swapboot+0x38>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	3301      	adds	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <swapboot+0x22>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ef2:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000ef6:	9306      	str	r3, [sp, #24]
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000

	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000efc:	9b05      	ldr	r3, [sp, #20]

	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000efe:	4668      	mov	r0, sp
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000f00:	9207      	str	r2, [sp, #28]
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000f02:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000f06:	9305      	str	r3, [sp, #20]
	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000f08:	f00b fb24 	bl	800c554 <HAL_FLASHEx_OBProgram>
	if (res != HAL_OK) {
 8000f0c:	b990      	cbnz	r0, 8000f34 <swapboot+0x70>
		printf("swapboot: failed to OBProgram %d\n", res);
	}

	res = HAL_FLASH_OB_Launch();
 8000f0e:	f00b fa31 	bl	800c374 <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000f12:	b950      	cbnz	r0, 8000f2a <swapboot+0x66>
		printf("swapboot: failed to OBLaunch %d\n", res);
	}
	printf("swapping boot....\n");
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <swapboot+0x7c>)
 8000f16:	f025 fc79 	bl	802680c <puts>
	HAL_FLASH_OB_Lock();
 8000f1a:	f00b fa21 	bl	800c360 <HAL_FLASH_OB_Lock>

	printf("swapboot ran\n");
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <swapboot+0x80>)
 8000f20:	f025 fc74 	bl	802680c <puts>
}
 8000f24:	b009      	add	sp, #36	; 0x24
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("swapboot: failed to OBLaunch %d\n", res);
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	4806      	ldr	r0, [pc, #24]	; (8000f48 <swapboot+0x84>)
 8000f2e:	f025 fbd1 	bl	80266d4 <iprintf>
 8000f32:	e7ef      	b.n	8000f14 <swapboot+0x50>
		printf("swapboot: failed to OBProgram %d\n", res);
 8000f34:	4601      	mov	r1, r0
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <swapboot+0x88>)
 8000f38:	f025 fbcc 	bl	80266d4 <iprintf>
 8000f3c:	e7e7      	b.n	8000f0e <swapboot+0x4a>
 8000f3e:	bf00      	nop
 8000f40:	0802b19c 	.word	0x0802b19c
 8000f44:	0802b1b0 	.word	0x0802b1b0
 8000f48:	0802b178 	.word	0x0802b178
 8000f4c:	0802b154 	.word	0x0802b154

08000f50 <flash_writeword>:
static void* memread() {

}

// write tp flash with data at memptr
int flash_writeword(uint32_t worddata) {
 8000f50:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef res;

	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f52:	4d10      	ldr	r5, [pc, #64]	; (8000f94 <flash_writeword+0x44>)
 8000f54:	682b      	ldr	r3, [r5, #0]
	if (((int) address < FLASH_START_ADDRESS) || ((int) address > (FLASH_END_ADDRESS))) {
 8000f56:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8000f5a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000f5e:	d20a      	bcs.n	8000f76 <flash_writeword+0x26>
 8000f60:	4604      	mov	r4, r0
 8000f62:	4601      	mov	r1, r0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fee9 	bl	8000d3c <WriteFlashWord.part.0>
	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f6a:	b938      	cbnz	r0, 8000f7c <flash_writeword+0x2c>
		printf("memwrite: WriteFlash error\n");
		return (-1);
	}
	if (*(uint32_t*) flash_memptr != worddata) {
 8000f6c:	6829      	ldr	r1, [r5, #0]
 8000f6e:	680b      	ldr	r3, [r1, #0]
 8000f70:	42a3      	cmp	r3, r4
 8000f72:	d109      	bne.n	8000f88 <flash_writeword+0x38>
		printf("memwrite: Readback error at %08x\n", flash_memptr);
		return (-1);
	}
	return (0);
}
 8000f74:	bd38      	pop	{r3, r4, r5, pc}
		printf("WriteFlash: failed address check\n");
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <flash_writeword+0x48>)
 8000f78:	f025 fc48 	bl	802680c <puts>
		printf("memwrite: WriteFlash error\n");
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <flash_writeword+0x4c>)
 8000f7e:	f025 fc45 	bl	802680c <puts>
		return (-1);
 8000f82:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
		printf("memwrite: Readback error at %08x\n", flash_memptr);
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <flash_writeword+0x50>)
 8000f8a:	f025 fba3 	bl	80266d4 <iprintf>
		return (-1);
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	2000087c 	.word	0x2000087c
 8000f98:	0802b130 	.word	0x0802b130
 8000f9c:	0802b1c0 	.word	0x0802b1c0
 8000fa0:	0802b1dc 	.word	0x0802b1dc

08000fa4 <flash_memwrite>:

// flash_memwrite - this writes an unspecified block size to Flash (with verification)
// assume mem is pointing at byte array
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile int i, j, k;
	volatile uint32_t data;
	HAL_StatusTypeDef res;
	static int lastbyte = 0;

	flash_filelength += (int) len;
 8000fa8:	4e49      	ldr	r6, [pc, #292]	; (80010d0 <flash_memwrite+0x12c>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000faa:	b085      	sub	sp, #20
//	}
//	printf("\n");
//////////////////////////////////////////////////////
#endif

	if ((!(flash_abort)) && (noterased)) {
 8000fac:	4949      	ldr	r1, [pc, #292]	; (80010d4 <flash_memwrite+0x130>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fae:	4615      	mov	r5, r2
	flash_filelength += (int) len;
 8000fb0:	6833      	ldr	r3, [r6, #0]
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fb2:	4604      	mov	r4, r0
	if ((!(flash_abort)) && (noterased)) {
 8000fb4:	680f      	ldr	r7, [r1, #0]
	flash_filelength += (int) len;
 8000fb6:	4413      	add	r3, r2
 8000fb8:	6033      	str	r3, [r6, #0]
	if ((!(flash_abort)) && (noterased)) {
 8000fba:	b92f      	cbnz	r7, 8000fc8 <flash_memwrite+0x24>
 8000fbc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80010e4 <flash_memwrite+0x140>
 8000fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d179      	bne.n	80010bc <flash_memwrite+0x118>
	}
	if (len % 2 != 0) {
		printf("memwrite: len %d chunk not multiple of 2 at %u\n", len, flash_filelength);
	}
#endif
	if (len == 0) {
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d071      	beq.n	80010b0 <flash_memwrite+0x10c>
		printf("memwrite: len %d at %u\n", len, flash_filelength);
	}


	data = 0xffffffff;		// the 32 bit word we will write
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295

	lastbyte = 0;
	if (q_index > 0) {		// some residual data from last time through here
 8000fd0:	4f41      	ldr	r7, [pc, #260]	; (80010d8 <flash_memwrite+0x134>)
	lastbyte = 0;
 8000fd2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80010e8 <flash_memwrite+0x144>
	if (q_index > 0) {		// some residual data from last time through here
 8000fd6:	6839      	ldr	r1, [r7, #0]
	data = 0xffffffff;		// the 32 bit word we will write
 8000fd8:	9303      	str	r3, [sp, #12]
	lastbyte = 0;
 8000fda:	2300      	movs	r3, #0
	if (q_index > 0) {		// some residual data from last time through here
 8000fdc:	4299      	cmp	r1, r3
	lastbyte = 0;
 8000fde:	f8c8 3000 	str.w	r3, [r8]
	if (q_index > 0) {		// some residual data from last time through here
 8000fe2:	dd1a      	ble.n	800101a <flash_memwrite+0x76>
		for (i = 0; i < q_index;) {
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	9b00      	ldr	r3, [sp, #0]
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	dd16      	ble.n	800101a <flash_memwrite+0x76>
 8000fec:	2201      	movs	r2, #1
 8000fee:	4e3b      	ldr	r6, [pc, #236]	; (80010dc <flash_memwrite+0x138>)
			data >>= 8;
 8000ff0:	9b03      	ldr	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
			lastbyte++;
 8000ff2:	4610      	mov	r0, r2
		for (i = 0; i < q_index;) {
 8000ff4:	3201      	adds	r2, #1
			data >>= 8;
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	9303      	str	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
 8000ffa:	9b00      	ldr	r3, [sp, #0]
 8000ffc:	f103 0e01 	add.w	lr, r3, #1
 8001000:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8001004:	f8cd e000 	str.w	lr, [sp]
 8001008:	9b03      	ldr	r3, [sp, #12]
 800100a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800100e:	9303      	str	r3, [sp, #12]
		for (i = 0; i < q_index;) {
 8001010:	9b00      	ldr	r3, [sp, #0]
 8001012:	4299      	cmp	r1, r3
 8001014:	dcec      	bgt.n	8000ff0 <flash_memwrite+0x4c>
 8001016:	f8c8 0000 	str.w	r0, [r8]
		}
	}

	k = len % 4;		// see if buf fits full into 32 bit words
 800101a:	f005 0303 	and.w	r3, r5, #3

	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800101e:	2600      	movs	r6, #0
	k = len % 4;		// see if buf fits full into 32 bit words
 8001020:	9302      	str	r3, [sp, #8]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001022:	9600      	str	r6, [sp, #0]
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	4419      	add	r1, r3
 8001028:	9b02      	ldr	r3, [sp, #8]
 800102a:	1aeb      	subs	r3, r5, r3
 800102c:	4299      	cmp	r1, r3
 800102e:	d229      	bcs.n	8001084 <flash_memwrite+0xe0>
 8001030:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80010ec <flash_memwrite+0x148>
		for (j = lastbyte; j < 4; j++) {
 8001034:	f8d8 3000 	ldr.w	r3, [r8]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	9b01      	ldr	r3, [sp, #4]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dc10      	bgt.n	8001062 <flash_memwrite+0xbe>
			data >>= 8;
 8001040:	9b03      	ldr	r3, [sp, #12]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	9303      	str	r3, [sp, #12]
			data |= buf[i++] << 24;
 8001046:	9b00      	ldr	r3, [sp, #0]
 8001048:	1c59      	adds	r1, r3, #1
 800104a:	5ce2      	ldrb	r2, [r4, r3]
 800104c:	9100      	str	r1, [sp, #0]
 800104e:	9b03      	ldr	r3, [sp, #12]
 8001050:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001054:	9303      	str	r3, [sp, #12]
		for (j = lastbyte; j < 4; j++) {
 8001056:	9b01      	ldr	r3, [sp, #4]
 8001058:	3301      	adds	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9b01      	ldr	r3, [sp, #4]
 800105e:	2b03      	cmp	r3, #3
 8001060:	ddee      	ble.n	8001040 <flash_memwrite+0x9c>
		patt += 4;
#endif
		lastbyte = 0;	// no more residual

		//		printf("memptr=%08x, data[%d]=%08x\n", (uint32_t) memptr, i, data);
		flash_writeword(data);
 8001062:	9803      	ldr	r0, [sp, #12]
		lastbyte = 0;	// no more residual
 8001064:	f8c8 6000 	str.w	r6, [r8]
		flash_writeword(data);
 8001068:	f7ff ff72 	bl	8000f50 <flash_writeword>
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800106c:	9800      	ldr	r0, [sp, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	9b02      	ldr	r3, [sp, #8]

		flash_memptr += 4;
 8001072:	f8d9 1000 	ldr.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001076:	4402      	add	r2, r0
 8001078:	1aeb      	subs	r3, r5, r3
		flash_memptr += 4;
 800107a:	3104      	adds	r1, #4
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800107c:	429a      	cmp	r2, r3
		flash_memptr += 4;
 800107e:	f8c9 1000 	str.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001082:	d3d7      	bcc.n	8001034 <flash_memwrite+0x90>
	}

	for (q_index = 0; i < len;) {
 8001084:	9b00      	ldr	r3, [sp, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	429d      	cmp	r5, r3
 800108a:	603a      	str	r2, [r7, #0]
 800108c:	d90c      	bls.n	80010a8 <flash_memwrite+0x104>
 800108e:	4913      	ldr	r1, [pc, #76]	; (80010dc <flash_memwrite+0x138>)
 8001090:	2301      	movs	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 8001092:	9a00      	ldr	r2, [sp, #0]
 8001094:	1c50      	adds	r0, r2, #1
 8001096:	5ca2      	ldrb	r2, [r4, r2]
 8001098:	603b      	str	r3, [r7, #0]
	for (q_index = 0; i < len;) {
 800109a:	3301      	adds	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	f841 2b04 	str.w	r2, [r1], #4
	for (q_index = 0; i < len;) {
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	42aa      	cmp	r2, r5
 80010a6:	d3f4      	bcc.n	8001092 <flash_memwrite+0xee>
	}

///	memptr += len;
//	printf("memwrite: buf=0x%0x, size=%d, size_=%d, memptr=0x%x\n",(uint32_t)buf,size,len,(uint32_t)mem);
	return ((int) len);
}
 80010a8:	4628      	mov	r0, r5
 80010aa:	b005      	add	sp, #20
 80010ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("memwrite: len %d at %u\n", len, flash_filelength);
 80010b0:	6832      	ldr	r2, [r6, #0]
 80010b2:	4629      	mov	r1, r5
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <flash_memwrite+0x13c>)
 80010b6:	f025 fb0d 	bl	80266d4 <iprintf>
 80010ba:	e787      	b.n	8000fcc <flash_memwrite+0x28>
		res = EraseFlash(flash_memptr);
 80010bc:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80010ec <flash_memwrite+0x148>
 80010c0:	f8d9 0000 	ldr.w	r0, [r9]
 80010c4:	f7ff fe76 	bl	8000db4 <EraseFlash>
		noterased = 0;
 80010c8:	f8c8 7000 	str.w	r7, [r8]
 80010cc:	e77c      	b.n	8000fc8 <flash_memwrite+0x24>
 80010ce:	bf00      	nop
 80010d0:	20000878 	.word	0x20000878
 80010d4:	20000874 	.word	0x20000874
 80010d8:	20000894 	.word	0x20000894
 80010dc:	20000884 	.word	0x20000884
 80010e0:	0802b200 	.word	0x0802b200
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000880 	.word	0x20000880
 80010ec:	2000087c 	.word	0x2000087c

080010f0 <memclose>:
	static FLASH_OBProgramInitTypeDef OBInitStruct;
	HAL_StatusTypeDef res;
	int i;

	noterased = 1;		// now assumed dirty
	if (flash_abort) {
 80010f0:	4b4e      	ldr	r3, [pc, #312]	; (800122c <memclose+0x13c>)
	noterased = 1;		// now assumed dirty
 80010f2:	2101      	movs	r1, #1
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <memclose+0x140>)
	if (flash_abort) {
 80010f6:	6818      	ldr	r0, [r3, #0]
	noterased = 1;		// now assumed dirty
 80010f8:	6011      	str	r1, [r2, #0]
	if (flash_abort) {
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d173      	bne.n	80011e6 <memclose+0xf6>
		http_downloading = NOT_LOADING;
		down_total = 0;		// unfreeze main
		return;
	}

	if (q_index > 0) {			// unfinished residual write still needed
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <memclose+0x144>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
void* memclose() {
 8001104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001108:	b084      	sub	sp, #16
	if (q_index > 0) {			// unfinished residual write still needed
 800110a:	dd0b      	ble.n	8001124 <memclose+0x34>
 800110c:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <memclose+0x148>)
 800110e:	f102 0110 	add.w	r1, r2, #16
		residual = 0;
		for (i = 0; i < 4; i++) {
			residual >>= 8;
			residual |= (q_bytes[i] << 24);
 8001112:	f852 3b04 	ldr.w	r3, [r2], #4
 8001116:	061b      	lsls	r3, r3, #24
		for (i = 0; i < 4; i++) {
 8001118:	4291      	cmp	r1, r2
			residual |= (q_bytes[i] << 24);
 800111a:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
		for (i = 0; i < 4; i++) {
 800111e:	d1f8      	bne.n	8001112 <memclose+0x22>
		}
		flash_writeword(residual);
 8001120:	f7ff ff16 	bl	8000f50 <flash_writeword>
	}

	printf("eeprom memclose: flash_load_addr=0x%08x, filelength=%d, flash_memptr=0x%0x total=%d\n", flash_load_address,
 8001124:	4e45      	ldr	r6, [pc, #276]	; (800123c <memclose+0x14c>)
 8001126:	4b46      	ldr	r3, [pc, #280]	; (8001240 <memclose+0x150>)
 8001128:	6832      	ldr	r2, [r6, #0]
 800112a:	4d46      	ldr	r5, [pc, #280]	; (8001244 <memclose+0x154>)
 800112c:	4f46      	ldr	r7, [pc, #280]	; (8001248 <memclose+0x158>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6839      	ldr	r1, [r7, #0]
 8001132:	9200      	str	r2, [sp, #0]
 8001134:	4845      	ldr	r0, [pc, #276]	; (800124c <memclose+0x15c>)
 8001136:	682a      	ldr	r2, [r5, #0]
 8001138:	f025 facc 	bl	80266d4 <iprintf>
			flash_filelength, (unsigned int) flash_memptr, down_total);
	osDelay(1000);
 800113c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001140:	f015 fa48 	bl	80165d4 <osDelay>
	res = HAL_FLASH_Lock();
 8001144:	f00b f8f0 	bl	800c328 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8001148:	4604      	mov	r4, r0
 800114a:	2800      	cmp	r0, #0
 800114c:	d152      	bne.n	80011f4 <memclose+0x104>
		printf("eeprom: flash2 failed\n");
		down_total = 0;		// unfreeze main
		return ((void*) 0);
	}

	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 800114e:	682b      	ldr	r3, [r5, #0]

// calculate the crc over a range of memory
uint32_t flash_findcrc(void *base, int length) {
	uint32_t crc, xinit = 0xffffffff;

	crc = xcrc32(base, length, xinit);
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 8001154:	f8d7 8000 	ldr.w	r8, [r7]
	crc = xcrc32(base, length, xinit);
 8001158:	4619      	mov	r1, r3
 800115a:	9303      	str	r3, [sp, #12]
 800115c:	4640      	mov	r0, r8
 800115e:	f7ff fd43 	bl	8000be8 <xcrc32>
 8001162:	4605      	mov	r5, r0
	printf("findcrc: crc=0x%08x, base=0x%08x, len=%d\n", crc, base, length);
 8001164:	9b03      	ldr	r3, [sp, #12]
 8001166:	4642      	mov	r2, r8
 8001168:	4839      	ldr	r0, [pc, #228]	; (8001250 <memclose+0x160>)
 800116a:	4629      	mov	r1, r5
 800116c:	f025 fab2 	bl	80266d4 <iprintf>
	if ((dl_filecrc != xcrc) && (dl_filecrc != 0xffffffff)) {
 8001170:	4b38      	ldr	r3, [pc, #224]	; (8001254 <memclose+0x164>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	1c53      	adds	r3, r2, #1
 8001176:	d008      	beq.n	800118a <memclose+0x9a>
 8001178:	42aa      	cmp	r2, r5
 800117a:	d006      	beq.n	800118a <memclose+0x9a>
		printf(
 800117c:	4623      	mov	r3, r4
 800117e:	4629      	mov	r1, r5
 8001180:	4835      	ldr	r0, [pc, #212]	; (8001258 <memclose+0x168>)
		down_total = 0;		// unfreeze main
 8001182:	6034      	str	r4, [r6, #0]
		printf(
 8001184:	f025 faa6 	bl	80266d4 <iprintf>
 8001188:	e027      	b.n	80011da <memclose+0xea>
		osDelay(5);
 800118a:	2005      	movs	r0, #5
 800118c:	f015 fa22 	bl	80165d4 <osDelay>
		HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8001190:	4832      	ldr	r0, [pc, #200]	; (800125c <memclose+0x16c>)
 8001192:	f00b fab7 	bl	800c704 <HAL_FLASHEx_OBGetConfig>
		HAL_FLASH_OB_Unlock();
 8001196:	f00b f8d1 	bl	800c33c <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	482f      	ldr	r0, [pc, #188]	; (800125c <memclose+0x16c>)
 800119e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011a2:	bf0b      	itete	eq
 80011a4:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80011a8:	f44f 5201 	movne.w	r2, #8256	; 0x2040
 80011ac:	f44f 5301 	moveq.w	r3, #8256	; 0x2040
 80011b0:	f44f 5300 	movne.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2040 : 0x2000;
 80011b4:	e9c0 2306 	strd	r2, r3, [r0, #24]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 80011b8:	f00b f9cc 	bl	800c554 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 80011bc:	bb78      	cbnz	r0, 800121e <memclose+0x12e>
		res = HAL_FLASH_OB_Launch();
 80011be:	f00b f8d9 	bl	800c374 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 80011c2:	bb28      	cbnz	r0, 8001210 <memclose+0x120>
		HAL_FLASH_OB_Lock();
 80011c4:	f00b f8cc 	bl	800c360 <HAL_FLASH_OB_Lock>
		printf("New FLASH image loaded; rebooting please wait 45 secs...\n");
 80011c8:	4825      	ldr	r0, [pc, #148]	; (8001260 <memclose+0x170>)
 80011ca:	f025 fb1f 	bl	802680c <puts>
		osDelay(50);
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f015 fa00 	bl	80165d4 <osDelay>
		rebootme(0);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f002 fd87 	bl	8003ce8 <rebootme>
	http_downloading = NOT_LOADING;
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <memclose+0x174>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	b004      	add	sp, #16
 80011e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		flash_abort = 0;
 80011e6:	2200      	movs	r2, #0
		http_downloading = NOT_LOADING;
 80011e8:	481e      	ldr	r0, [pc, #120]	; (8001264 <memclose+0x174>)
		down_total = 0;		// unfreeze main
 80011ea:	4914      	ldr	r1, [pc, #80]	; (800123c <memclose+0x14c>)
		flash_abort = 0;
 80011ec:	601a      	str	r2, [r3, #0]
		http_downloading = NOT_LOADING;
 80011ee:	6002      	str	r2, [r0, #0]
		down_total = 0;		// unfreeze main
 80011f0:	600a      	str	r2, [r1, #0]
}
 80011f2:	4770      	bx	lr
		printf("LockFlash: failed to lock\n");
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <memclose+0x178>)
 80011f6:	f025 fb09 	bl	802680c <puts>
		printflasherr();
 80011fa:	f7ff fd4f 	bl	8000c9c <printflasherr>
		printf("eeprom: flash2 failed\n");
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <memclose+0x17c>)
 8001200:	f025 fb04 	bl	802680c <puts>
		down_total = 0;		// unfreeze main
 8001204:	2300      	movs	r3, #0
		return ((void*) 0);
 8001206:	4618      	mov	r0, r3
		down_total = 0;		// unfreeze main
 8001208:	6033      	str	r3, [r6, #0]
}
 800120a:	b004      	add	sp, #16
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("memclose: failed to OBLaunch %d\n", res);
 8001210:	4601      	mov	r1, r0
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <memclose+0x180>)
 8001214:	f025 fa5e 	bl	80266d4 <iprintf>
			down_total = 0;		// unfreeze main
 8001218:	2300      	movs	r3, #0
 800121a:	6033      	str	r3, [r6, #0]
 800121c:	e7d2      	b.n	80011c4 <memclose+0xd4>
			printf("memclose: failed to OBProgram %d\n", res);
 800121e:	4601      	mov	r1, r0
 8001220:	4814      	ldr	r0, [pc, #80]	; (8001274 <memclose+0x184>)
 8001222:	f025 fa57 	bl	80266d4 <iprintf>
			down_total = 0;		// unfreeze main
 8001226:	2300      	movs	r3, #0
 8001228:	6033      	str	r3, [r6, #0]
 800122a:	e7c8      	b.n	80011be <memclose+0xce>
 800122c:	20000874 	.word	0x20000874
 8001230:	20000008 	.word	0x20000008
 8001234:	20000894 	.word	0x20000894
 8001238:	20000884 	.word	0x20000884
 800123c:	20001690 	.word	0x20001690
 8001240:	2000087c 	.word	0x2000087c
 8001244:	20000878 	.word	0x20000878
 8001248:	20000004 	.word	0x20000004
 800124c:	0802b218 	.word	0x0802b218
 8001250:	0802b378 	.word	0x0802b378
 8001254:	20000870 	.word	0x20000870
 8001258:	0802b288 	.word	0x0802b288
 800125c:	20000850 	.word	0x20000850
 8001260:	0802b33c 	.word	0x0802b33c
 8001264:	200018dc 	.word	0x200018dc
 8001268:	0802af90 	.word	0x0802af90
 800126c:	0802b270 	.word	0x0802b270
 8001270:	0802b318 	.word	0x0802b318
 8001274:	0802b2f4 	.word	0x0802b2f4

08001278 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <vApplicationMallocFailedHook>:
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop

08001284 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationGetIdleTaskMemory+0x18>)
{
 8001286:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001288:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800128a:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800128e:	4c04      	ldr	r4, [pc, #16]	; (80012a0 <vApplicationGetIdleTaskMemory+0x1c>)
 8001290:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8001292:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000c98 	.word	0x20000c98
 80012a0:	20000898 	.word	0x20000898

080012a4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <vApplicationGetTimerTaskMemory+0x18>)
{
 80012a6:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80012a8:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80012aa:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80012ae:	4c04      	ldr	r4, [pc, #16]	; (80012c0 <vApplicationGetTimerTaskMemory+0x1c>)
 80012b0:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 80012b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000154c 	.word	0x2000154c
 80012c0:	20000d4c 	.word	0x20000d4c

080012c4 <httpc_tcp_sent>:
	/* nothing to do here for now */
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);
	LWIP_UNUSED_ARG(len);
	return ERR_OK;
}
 80012c4:	2000      	movs	r0, #0
 80012c6:	4770      	bx	lr

080012c8 <RecvHttpHeaderCallback>:
uint32_t http_content_len = 0;
char rxbuffer[540];
char domain_name[30];
err_t error;

err_t RecvHttpHeaderCallback(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 80012c8:	9a00      	ldr	r2, [sp, #0]
//	for (i = 0; i < hdr_len; i++) {
//		putchar(buf[i]);
//	}
//	printf("\n");
	return ERR_OK;
}
 80012ca:	2000      	movs	r0, #0
	http_content_len = content_len;
 80012cc:	4b01      	ldr	r3, [pc, #4]	; (80012d4 <RecvHttpHeaderCallback+0xc>)
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20001694 	.word	0x20001694

080012d8 <httpc_get_internal_addr>:
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012d8:	b570      	push	{r4, r5, r6, lr}
	LWIP_ASSERT("req != NULL", req != NULL);
 80012da:	4604      	mov	r4, r0
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012dc:	460d      	mov	r5, r1
	LWIP_ASSERT("req != NULL", req != NULL);
 80012de:	b158      	cbz	r0, 80012f8 <httpc_get_internal_addr+0x20>
	if (&req->remote_addr != ipaddr) {
 80012e0:	1d21      	adds	r1, r4, #4
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d001      	beq.n	80012ea <httpc_get_internal_addr+0x12>
		req->remote_addr = *ipaddr;
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	6063      	str	r3, [r4, #4]
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012ea:	8922      	ldrh	r2, [r4, #8]
 80012ec:	6820      	ldr	r0, [r4, #0]
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <httpc_get_internal_addr+0x30>)
}
 80012f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012f4:	f01b bdde 	b.w	801ceb4 <tcp_connect>
	LWIP_ASSERT("req != NULL", req != NULL);
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <httpc_get_internal_addr+0x34>)
 80012fa:	f240 1299 	movw	r2, #409	; 0x199
 80012fe:	4904      	ldr	r1, [pc, #16]	; (8001310 <httpc_get_internal_addr+0x38>)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <httpc_get_internal_addr+0x3c>)
 8001302:	f025 f9e7 	bl	80266d4 <iprintf>
 8001306:	e7eb      	b.n	80012e0 <httpc_get_internal_addr+0x8>
 8001308:	08001749 	.word	0x08001749
 800130c:	0802b3a4 	.word	0x0802b3a4
 8001310:	0802b3c0 	.word	0x0802b3c0
 8001314:	0802b3cc 	.word	0x0802b3cc

08001318 <httpc_free_state>:
static err_t httpc_free_state(httpc_state_t *req) {
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4604      	mov	r4, r0
	if (req->request != NULL) {
 800131c:	6900      	ldr	r0, [r0, #16]
 800131e:	b118      	cbz	r0, 8001328 <httpc_free_state+0x10>
		pbuf_free(req->request);
 8001320:	f01b f90e 	bl	801c540 <pbuf_free>
		req->request = NULL;
 8001324:	2300      	movs	r3, #0
 8001326:	6123      	str	r3, [r4, #16]
	if (req->rx_hdrs != NULL) {
 8001328:	6960      	ldr	r0, [r4, #20]
 800132a:	b118      	cbz	r0, 8001334 <httpc_free_state+0x1c>
		pbuf_free(req->rx_hdrs);
 800132c:	f01b f908 	bl	801c540 <pbuf_free>
		req->rx_hdrs = NULL;
 8001330:	2300      	movs	r3, #0
 8001332:	6163      	str	r3, [r4, #20]
	tpcb = req->pcb;
 8001334:	6825      	ldr	r5, [r4, #0]
	mem_free(req);
 8001336:	4620      	mov	r0, r4
 8001338:	f01a f856 	bl	801b3e8 <mem_free>
	if (tpcb != NULL) {
 800133c:	b1c5      	cbz	r5, 8001370 <httpc_free_state+0x58>
		altcp_arg(tpcb, NULL);
 800133e:	2100      	movs	r1, #0
 8001340:	4628      	mov	r0, r5
 8001342:	f01b febd 	bl	801d0c0 <tcp_arg>
		altcp_recv(tpcb, NULL);
 8001346:	2100      	movs	r1, #0
 8001348:	4628      	mov	r0, r5
 800134a:	f01b febd 	bl	801d0c8 <tcp_recv>
		altcp_err(tpcb, NULL);
 800134e:	2100      	movs	r1, #0
 8001350:	4628      	mov	r0, r5
 8001352:	f01b fef1 	bl	801d138 <tcp_err>
		altcp_poll(tpcb, NULL, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	4628      	mov	r0, r5
 800135a:	4611      	mov	r1, r2
 800135c:	f01b ff0e 	bl	801d17c <tcp_poll>
		altcp_sent(tpcb, NULL);
 8001360:	4628      	mov	r0, r5
 8001362:	2100      	movs	r1, #0
 8001364:	f01b fecc 	bl	801d100 <tcp_sent>
		r = altcp_close(tpcb);
 8001368:	4628      	mov	r0, r5
 800136a:	f01c fd65 	bl	801de38 <tcp_close>
		if (r != ERR_OK) {
 800136e:	b908      	cbnz	r0, 8001374 <httpc_free_state+0x5c>
	return ERR_OK;
 8001370:	2000      	movs	r0, #0
}
 8001372:	bd38      	pop	{r3, r4, r5, pc}
			altcp_abort(tpcb);
 8001374:	4628      	mov	r0, r5
 8001376:	f01c fb67 	bl	801da48 <tcp_abort>
			return ERR_ABRT;
 800137a:	f06f 000c 	mvn.w	r0, #12
}
 800137e:	bd38      	pop	{r3, r4, r5, pc}

08001380 <HttpClientFileReceiveCallback>:

//	printf("HttpClientPageResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
	returnpage(rxbuffer, down_total, err);
}

int HttpClientFileReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001380:	b510      	push	{r4, lr}
	char *buf;
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

	if (http_downloading == FLASH_LOADING) {
 8001382:	4c08      	ldr	r4, [pc, #32]	; (80013a4 <HttpClientFileReceiveCallback+0x24>)
 8001384:	6824      	ldr	r4, [r4, #0]
 8001386:	2c01      	cmp	r4, #1
 8001388:	d003      	beq.n	8001392 <HttpClientFileReceiveCallback+0x12>
		stm_rx_callback(arg, pcb, p, err);
	} else if (http_downloading == NXT_LOADING) {
 800138a:	2c03      	cmp	r4, #3
 800138c:	d005      	beq.n	800139a <HttpClientFileReceiveCallback+0x1a>
		nxt_rx_callback(arg, pcb, p, err);
	}

	return (0);
}
 800138e:	2000      	movs	r0, #0
 8001390:	bd10      	pop	{r4, pc}
		stm_rx_callback(arg, pcb, p, err);
 8001392:	f000 fdab 	bl	8001eec <stm_rx_callback>
}
 8001396:	2000      	movs	r0, #0
 8001398:	bd10      	pop	{r4, pc}
		nxt_rx_callback(arg, pcb, p, err);
 800139a:	f004 ff25 	bl	80061e8 <nxt_rx_callback>
}
 800139e:	2000      	movs	r0, #0
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	bf00      	nop
 80013a4:	200018dc 	.word	0x200018dc

080013a8 <httpc_create_request_string.constprop.0.isra.0>:
static int httpc_create_request_string(const httpc_connection_t *settings, const char *server_name, int server_port,
 80013a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	460c      	mov	r4, r1
 80013b0:	461d      	mov	r5, r3
 80013b2:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
	if (settings->use_proxy) {
 80013b6:	b968      	cbnz	r0, 80013d4 <httpc_create_request_string.constprop.0.isra.0+0x2c>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013b8:	2900      	cmp	r1, #0
 80013ba:	d032      	beq.n	8001422 <httpc_create_request_string.constprop.0.isra.0+0x7a>
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013be:	462b      	mov	r3, r5
 80013c0:	4641      	mov	r1, r8
 80013c2:	4638      	mov	r0, r7
 80013c4:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <httpc_create_request_string.constprop.0.isra.0+0x90>)
}
 80013ca:	b004      	add	sp, #16
 80013cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013d0:	f025 bb36 	b.w	8026a40 <sniprintf>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013d4:	4616      	mov	r6, r2
 80013d6:	b1e1      	cbz	r1, 8001412 <httpc_create_request_string.constprop.0.isra.0+0x6a>
		if (server_port != HTTP_DEFAULT_PORT) {
 80013d8:	2e50      	cmp	r6, #80	; 0x50
 80013da:	d00d      	beq.n	80013f8 <httpc_create_request_string.constprop.0.isra.0+0x50>
			return snprintf(buffer, buffer_size,
 80013dc:	4623      	mov	r3, r4
 80013de:	9403      	str	r4, [sp, #12]
 80013e0:	4c14      	ldr	r4, [pc, #80]	; (8001434 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013e2:	4641      	mov	r1, r8
 80013e4:	4a15      	ldr	r2, [pc, #84]	; (800143c <httpc_create_request_string.constprop.0.isra.0+0x94>)
 80013e6:	4638      	mov	r0, r7
 80013e8:	9501      	str	r5, [sp, #4]
 80013ea:	9600      	str	r6, [sp, #0]
 80013ec:	9402      	str	r4, [sp, #8]
 80013ee:	f025 fb27 	bl	8026a40 <sniprintf>
}
 80013f2:	b004      	add	sp, #16
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013fa:	4641      	mov	r1, r8
 80013fc:	4623      	mov	r3, r4
 80013fe:	4638      	mov	r0, r7
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <httpc_create_request_string.constprop.0.isra.0+0x98>)
 8001404:	9402      	str	r4, [sp, #8]
 8001406:	9500      	str	r5, [sp, #0]
 8001408:	f025 fb1a 	bl	8026a40 <sniprintf>
}
 800140c:	b004      	add	sp, #16
 800140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8001414:	f240 12db 	movw	r2, #475	; 0x1db
 8001418:	490b      	ldr	r1, [pc, #44]	; (8001448 <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 800141a:	480c      	ldr	r0, [pc, #48]	; (800144c <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 800141c:	f025 f95a 	bl	80266d4 <iprintf>
 8001420:	e7da      	b.n	80013d8 <httpc_create_request_string.constprop.0.isra.0+0x30>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8001424:	f240 12e3 	movw	r2, #483	; 0x1e3
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 800142c:	f025 f952 	bl	80266d4 <iprintf>
 8001430:	e7c4      	b.n	80013bc <httpc_create_request_string.constprop.0.isra.0+0x14>
 8001432:	bf00      	nop
 8001434:	0802b464 	.word	0x0802b464
 8001438:	0802b4f4 	.word	0x0802b4f4
 800143c:	0802b408 	.word	0x0802b408
 8001440:	0802b49c 	.word	0x0802b49c
 8001444:	0802b3a4 	.word	0x0802b3a4
 8001448:	0802b3f4 	.word	0x0802b3f4
 800144c:	0802b3cc 	.word	0x0802b3cc

08001450 <httpc_init_connection_common.constprop.0>:
static err_t httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings,
 8001450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001454:	b085      	sub	sp, #20
 8001456:	460d      	mov	r5, r1
 8001458:	4690      	mov	r8, r2
 800145a:	461e      	mov	r6, r3
 800145c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8001460:	9003      	str	r0, [sp, #12]
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001462:	f1ba 0f00 	cmp.w	sl, #0
 8001466:	d063      	beq.n	8001530 <httpc_init_connection_common.constprop.0+0xe0>
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001468:	f04f 0900 	mov.w	r9, #0
 800146c:	4653      	mov	r3, sl
 800146e:	4632      	mov	r2, r6
 8001470:	4641      	mov	r1, r8
 8001472:	46b3      	mov	fp, r6
 8001474:	e9cd 9900 	strd	r9, r9, [sp]
 8001478:	79a8      	ldrb	r0, [r5, #6]
 800147a:	f7ff ff95 	bl	80013a8 <httpc_create_request_string.constprop.0.isra.0>
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 800147e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001482:	4607      	mov	r7, r0
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001484:	4298      	cmp	r0, r3
 8001486:	d861      	bhi.n	800154c <httpc_init_connection_common.constprop.0+0xfc>
	req = (httpc_state_t*) mem_malloc((mem_size_t) alloc_len);
 8001488:	2034      	movs	r0, #52	; 0x34
 800148a:	f01a f969 	bl	801b760 <mem_malloc>
	if (req == NULL) {
 800148e:	4604      	mov	r4, r0
 8001490:	2800      	cmp	r0, #0
 8001492:	d064      	beq.n	800155e <httpc_init_connection_common.constprop.0+0x10e>
	memset(req, 0, sizeof(httpc_state_t));
 8001494:	4649      	mov	r1, r9
 8001496:	2234      	movs	r2, #52	; 0x34
 8001498:	f024 f97e 	bl	8025798 <memset>
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 800149c:	4648      	mov	r0, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 800149e:	2364      	movs	r3, #100	; 0x64
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 80014a0:	f107 0901 	add.w	r9, r7, #1
 80014a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80014a8:	fa1f f189 	uxth.w	r1, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 80014ac:	60e3      	str	r3, [r4, #12]
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 80014ae:	f01a fe75 	bl	801c19c <pbuf_alloc>
 80014b2:	6120      	str	r0, [r4, #16]
	if (req->request == NULL) {
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d043      	beq.n	8001540 <httpc_init_connection_common.constprop.0+0xf0>
	if (req->request->next != NULL) {
 80014b8:	6803      	ldr	r3, [r0, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d140      	bne.n	8001540 <httpc_init_connection_common.constprop.0+0xf0>
	req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->pcb = altcp_new(settings->altcp_allocator);
 80014c4:	f01c fbe0 	bl	801dc88 <tcp_new>
 80014c8:	6020      	str	r0, [r4, #0]
	if (req->pcb == NULL) {
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d038      	beq.n	8001540 <httpc_init_connection_common.constprop.0+0xf0>
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014ce:	79ab      	ldrb	r3, [r5, #6]
 80014d0:	bb63      	cbnz	r3, 800152c <httpc_init_connection_common.constprop.0+0xdc>
	altcp_arg(req->pcb, req);
 80014d2:	4621      	mov	r1, r4
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014d4:	8126      	strh	r6, [r4, #8]
	altcp_arg(req->pcb, req);
 80014d6:	f01b fdf3 	bl	801d0c0 <tcp_arg>
	altcp_recv(req->pcb, httpc_tcp_recv);
 80014da:	4922      	ldr	r1, [pc, #136]	; (8001564 <httpc_init_connection_common.constprop.0+0x114>)
 80014dc:	6820      	ldr	r0, [r4, #0]
 80014de:	f01b fdf3 	bl	801d0c8 <tcp_recv>
	altcp_err(req->pcb, httpc_tcp_err);
 80014e2:	4921      	ldr	r1, [pc, #132]	; (8001568 <httpc_init_connection_common.constprop.0+0x118>)
 80014e4:	6820      	ldr	r0, [r4, #0]
 80014e6:	f01b fe27 	bl	801d138 <tcp_err>
	altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 80014ea:	2203      	movs	r2, #3
 80014ec:	491f      	ldr	r1, [pc, #124]	; (800156c <httpc_init_connection_common.constprop.0+0x11c>)
 80014ee:	6820      	ldr	r0, [r4, #0]
 80014f0:	f01b fe44 	bl	801d17c <tcp_poll>
	altcp_sent(req->pcb, httpc_tcp_sent);
 80014f4:	491e      	ldr	r1, [pc, #120]	; (8001570 <httpc_init_connection_common.constprop.0+0x120>)
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	f01b fe02 	bl	801d100 <tcp_sent>
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 80014fc:	f8cd 9004 	str.w	r9, [sp, #4]
			(char*) req->request->payload, req_len + 1);
 8001500:	6920      	ldr	r0, [r4, #16]
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8001502:	4653      	mov	r3, sl
 8001504:	465a      	mov	r2, fp
 8001506:	4641      	mov	r1, r8
 8001508:	6840      	ldr	r0, [r0, #4]
 800150a:	9000      	str	r0, [sp, #0]
 800150c:	79a8      	ldrb	r0, [r5, #6]
 800150e:	f7ff ff4b 	bl	80013a8 <httpc_create_request_string.constprop.0.isra.0>
	if (req_len2 != req_len) {
 8001512:	4287      	cmp	r7, r0
 8001514:	d11d      	bne.n	8001552 <httpc_init_connection_common.constprop.0+0x102>
	req->recv_fn = recv_fn;
 8001516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	return ERR_OK;
 8001518:	2000      	movs	r0, #0
	req->conn_settings = settings;
 800151a:	e9c4 3507 	strd	r3, r5, [r4, #28]
	req->callback_arg = callback_arg;
 800151e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001520:	6263      	str	r3, [r4, #36]	; 0x24
	*connection = req;
 8001522:	9b03      	ldr	r3, [sp, #12]
 8001524:	601c      	str	r4, [r3, #0]
}
 8001526:	b005      	add	sp, #20
 8001528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 800152c:	88ae      	ldrh	r6, [r5, #4]
 800152e:	e7d0      	b.n	80014d2 <httpc_init_connection_common.constprop.0+0x82>
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <httpc_init_connection_common.constprop.0+0x124>)
 8001532:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8001536:	4910      	ldr	r1, [pc, #64]	; (8001578 <httpc_init_connection_common.constprop.0+0x128>)
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <httpc_init_connection_common.constprop.0+0x12c>)
 800153a:	f025 f8cb 	bl	80266d4 <iprintf>
 800153e:	e793      	b.n	8001468 <httpc_init_connection_common.constprop.0+0x18>
		httpc_free_state(req);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff fee9 	bl	8001318 <httpc_free_state>
		return ERR_MEM;
 8001546:	f04f 30ff 	mov.w	r0, #4294967295
 800154a:	e7ec      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_VAL;
 800154c:	f06f 0005 	mvn.w	r0, #5
 8001550:	e7e9      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
		httpc_free_state(req);
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff fee0 	bl	8001318 <httpc_free_state>
		return ERR_VAL;
 8001558:	f06f 0005 	mvn.w	r0, #5
 800155c:	e7e3      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_MEM;
 800155e:	f04f 30ff 	mov.w	r0, #4294967295
 8001562:	e7e0      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
 8001564:	080018d9 	.word	0x080018d9
 8001568:	08001615 	.word	0x08001615
 800156c:	0800189d 	.word	0x0800189d
 8001570:	080012c5 	.word	0x080012c5
 8001574:	0802b3a4 	.word	0x0802b3a4
 8001578:	0802b544 	.word	0x0802b544
 800157c:	0802b3cc 	.word	0x0802b3cc

08001580 <HttpClientPageResultCallback>:
		err_t err) {
 8001580:	b530      	push	{r4, r5, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	if (httpc_result != HTTPC_RESULT_OK) {
 8001588:	b949      	cbnz	r1, 800159e <HttpClientPageResultCallback+0x1e>
	if (err != ERR_OK) {
 800158a:	b9d5      	cbnz	r5, 80015c2 <HttpClientPageResultCallback+0x42>
 800158c:	4c18      	ldr	r4, [pc, #96]	; (80015f0 <HttpClientPageResultCallback+0x70>)
	returnpage(rxbuffer, down_total, err);
 800158e:	462a      	mov	r2, r5
 8001590:	6821      	ldr	r1, [r4, #0]
 8001592:	4818      	ldr	r0, [pc, #96]	; (80015f4 <HttpClientPageResultCallback+0x74>)
}
 8001594:	b003      	add	sp, #12
 8001596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	returnpage(rxbuffer, down_total, err);
 800159a:	f007 bc41 	b.w	8008e20 <returnpage>
 800159e:	2909      	cmp	r1, #9
 80015a0:	460c      	mov	r4, r1
	switch (err) {
 80015a2:	d823      	bhi.n	80015ec <HttpClientPageResultCallback+0x6c>
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HttpClientPageResultCallback+0x78>)
 80015a6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 80015aa:	4611      	mov	r1, r2
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <HttpClientPageResultCallback+0x7c>)
 80015ae:	9201      	str	r2, [sp, #4]
 80015b0:	f025 f890 	bl	80266d4 <iprintf>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015b4:	9a01      	ldr	r2, [sp, #4]
 80015b6:	4621      	mov	r1, r4
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <HttpClientPageResultCallback+0x80>)
 80015ba:	f025 f88b 	bl	80266d4 <iprintf>
	if (err != ERR_OK) {
 80015be:	2d00      	cmp	r5, #0
 80015c0:	d0e4      	beq.n	800158c <HttpClientPageResultCallback+0xc>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80015c2:	f105 0310 	add.w	r3, r5, #16
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d905      	bls.n	80015d8 <HttpClientPageResultCallback+0x58>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 80015cc:	4c08      	ldr	r4, [pc, #32]	; (80015f0 <HttpClientPageResultCallback+0x70>)
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <HttpClientPageResultCallback+0x84>)
 80015d0:	6821      	ldr	r1, [r4, #0]
 80015d2:	f025 f87f 	bl	80266d4 <iprintf>
 80015d6:	e7da      	b.n	800158e <HttpClientPageResultCallback+0xe>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80015d8:	4269      	negs	r1, r5
 80015da:	4c05      	ldr	r4, [pc, #20]	; (80015f0 <HttpClientPageResultCallback+0x70>)
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HttpClientPageResultCallback+0x88>)
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <HttpClientPageResultCallback+0x8c>)
 80015e6:	f025 f875 	bl	80266d4 <iprintf>
}
 80015ea:	e7d0      	b.n	800158e <HttpClientPageResultCallback+0xe>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HttpClientPageResultCallback+0x90>)
 80015ee:	e7dc      	b.n	80015aa <HttpClientPageResultCallback+0x2a>
 80015f0:	20001690 	.word	0x20001690
 80015f4:	20001698 	.word	0x20001698
 80015f8:	0802b8d4 	.word	0x0802b8d4
 80015fc:	0802b56c 	.word	0x0802b56c
 8001600:	0802b580 	.word	0x0802b580
 8001604:	0802b5a8 	.word	0x0802b5a8
 8001608:	0802b8fc 	.word	0x0802b8fc
 800160c:	0802b5c8 	.word	0x0802b5c8
 8001610:	0802b550 	.word	0x0802b550

08001614 <httpc_tcp_err>:
static void httpc_tcp_err(void *arg, err_t err) {
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	4604      	mov	r4, r0
 8001618:	b082      	sub	sp, #8
	printf("httpc_tcp_err: %d", err);
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <httpc_tcp_err+0x38>)
static void httpc_tcp_err(void *arg, err_t err) {
 800161c:	460d      	mov	r5, r1
	printf("httpc_tcp_err: %d", err);
 800161e:	f025 f859 	bl	80266d4 <iprintf>
	if (req != NULL) {
 8001622:	b184      	cbz	r4, 8001646 <httpc_tcp_err+0x32>
		req->pcb = NULL;
 8001624:	2300      	movs	r3, #0
		if (req->conn_settings != NULL) {
 8001626:	6a22      	ldr	r2, [r4, #32]
		req->pcb = NULL;
 8001628:	6023      	str	r3, [r4, #0]
		if (req->conn_settings != NULL) {
 800162a:	b132      	cbz	r2, 800163a <httpc_tcp_err+0x26>
			if (req->conn_settings->result_fn != NULL) {
 800162c:	6896      	ldr	r6, [r2, #8]
 800162e:	b126      	cbz	r6, 800163a <httpc_tcp_err+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001630:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001632:	2104      	movs	r1, #4
 8001634:	9500      	str	r5, [sp, #0]
 8001636:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001638:	47b0      	blx	r6
		return httpc_free_state(req);
 800163a:	4620      	mov	r0, r4
}
 800163c:	b002      	add	sp, #8
 800163e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001642:	f7ff be69 	b.w	8001318 <httpc_free_state>
}
 8001646:	b002      	add	sp, #8
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	bf00      	nop
 800164c:	0802b5e8 	.word	0x0802b5e8

08001650 <HttpClientFileResultCallback>:
		err_t err) {
 8001650:	b530      	push	{r4, r5, lr}
 8001652:	460c      	mov	r4, r1
 8001654:	b083      	sub	sp, #12
 8001656:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	nxt_sendres();		// upload any residual buffer to the LCD (dont care if this is stm firmware callback)
 800165a:	f004 fd93 	bl	8006184 <nxt_sendres>
	if (httpc_result != HTTPC_RESULT_OK) {
 800165e:	b95c      	cbnz	r4, 8001678 <HttpClientFileResultCallback+0x28>
	if (err != ERR_OK) {
 8001660:	2d00      	cmp	r5, #0
 8001662:	d139      	bne.n	80016d8 <HttpClientFileResultCallback+0x88>
	if (flash_memptr != 0) {
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HttpClientFileResultCallback+0x8c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b10b      	cbz	r3, 800166e <HttpClientFileResultCallback+0x1e>
		memclose();
 800166a:	f7ff fd41 	bl	80010f0 <memclose>
	http_downloading = NOT_LOADING;		// whatever the result
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HttpClientFileResultCallback+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
}
 8001674:	b003      	add	sp, #12
 8001676:	bd30      	pop	{r4, r5, pc}
	switch (err) {
 8001678:	2c09      	cmp	r4, #9
 800167a:	d821      	bhi.n	80016c0 <HttpClientFileResultCallback+0x70>
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HttpClientFileResultCallback+0x94>)
 800167e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
	printf("clientresult: %s\n", msg);
 8001682:	4611      	mov	r1, r2
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <HttpClientFileResultCallback+0x98>)
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	f025 f824 	bl	80266d4 <iprintf>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 800168c:	4621      	mov	r1, r4
 800168e:	9a01      	ldr	r2, [sp, #4]
 8001690:	4816      	ldr	r0, [pc, #88]	; (80016ec <HttpClientFileResultCallback+0x9c>)
 8001692:	f025 f81f 	bl	80266d4 <iprintf>
		flash_memptr = 0;
 8001696:	4c11      	ldr	r4, [pc, #68]	; (80016dc <HttpClientFileResultCallback+0x8c>)
 8001698:	2100      	movs	r1, #0
		nxt_abort = 1;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HttpClientFileResultCallback+0xa0>)
 800169c:	2201      	movs	r2, #1
		flash_memptr = 0;
 800169e:	6021      	str	r1, [r4, #0]
		nxt_abort = 1;
 80016a0:	601a      	str	r2, [r3, #0]
	if (err != ERR_OK) {
 80016a2:	2d00      	cmp	r5, #0
 80016a4:	d0e3      	beq.n	800166e <HttpClientFileResultCallback+0x1e>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80016a6:	f105 0310 	add.w	r3, r5, #16
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d909      	bls.n	80016c4 <HttpClientFileResultCallback+0x74>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HttpClientFileResultCallback+0xa4>)
 80016b2:	4811      	ldr	r0, [pc, #68]	; (80016f8 <HttpClientFileResultCallback+0xa8>)
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	f025 f80d 	bl	80266d4 <iprintf>
		flash_memptr = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	6023      	str	r3, [r4, #0]
	if (flash_memptr != 0) {
 80016be:	e7d6      	b.n	800166e <HttpClientFileResultCallback+0x1e>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HttpClientFileResultCallback+0xac>)
 80016c2:	e7de      	b.n	8001682 <HttpClientFileResultCallback+0x32>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80016c4:	4269      	negs	r1, r5
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HttpClientFileResultCallback+0xb0>)
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HttpClientFileResultCallback+0xa4>)
 80016ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <HttpClientFileResultCallback+0xb4>)
 80016d2:	f024 ffff 	bl	80266d4 <iprintf>
}
 80016d6:	e7f0      	b.n	80016ba <HttpClientFileResultCallback+0x6a>
 80016d8:	4c00      	ldr	r4, [pc, #0]	; (80016dc <HttpClientFileResultCallback+0x8c>)
 80016da:	e7e4      	b.n	80016a6 <HttpClientFileResultCallback+0x56>
 80016dc:	2000087c 	.word	0x2000087c
 80016e0:	200018dc 	.word	0x200018dc
 80016e4:	0802b8d4 	.word	0x0802b8d4
 80016e8:	0802b56c 	.word	0x0802b56c
 80016ec:	0802b5fc 	.word	0x0802b5fc
 80016f0:	20003128 	.word	0x20003128
 80016f4:	20001690 	.word	0x20001690
 80016f8:	0802b5a8 	.word	0x0802b5a8
 80016fc:	0802b550 	.word	0x0802b550
 8001700:	0802b8fc 	.word	0x0802b8fc
 8001704:	0802b5c8 	.word	0x0802b5c8

08001708 <httpc_dns_found>:
static void httpc_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg) {
 8001708:	b530      	push	{r4, r5, lr}
 800170a:	4614      	mov	r4, r2
 800170c:	b083      	sub	sp, #12
	if (ipaddr != NULL) {
 800170e:	b1b1      	cbz	r1, 800173e <httpc_dns_found+0x36>
		err = httpc_get_internal_addr(req, ipaddr);
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff fde1 	bl	80012d8 <httpc_get_internal_addr>
		if (err == ERR_OK) {
 8001716:	b180      	cbz	r0, 800173a <httpc_dns_found+0x32>
		result = HTTPC_RESULT_ERR_CONNECT;
 8001718:	2102      	movs	r1, #2
	if (req != NULL) {
 800171a:	b174      	cbz	r4, 800173a <httpc_dns_found+0x32>
		if (req->conn_settings != NULL) {
 800171c:	6a23      	ldr	r3, [r4, #32]
 800171e:	b133      	cbz	r3, 800172e <httpc_dns_found+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001720:	689d      	ldr	r5, [r3, #8]
 8001722:	b125      	cbz	r5, 800172e <httpc_dns_found+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001724:	9000      	str	r0, [sp, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800172c:	47a8      	blx	r5
		return httpc_free_state(req);
 800172e:	4620      	mov	r0, r4
}
 8001730:	b003      	add	sp, #12
 8001732:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 8001736:	f7ff bdef 	b.w	8001318 <httpc_free_state>
}
 800173a:	b003      	add	sp, #12
 800173c:	bd30      	pop	{r4, r5, pc}
		result = HTTPC_RESULT_ERR_HOSTNAME;
 800173e:	2103      	movs	r1, #3
		err = ERR_ARG;
 8001740:	f06f 000f 	mvn.w	r0, #15
 8001744:	e7e9      	b.n	800171a <httpc_dns_found+0x12>
 8001746:	bf00      	nop

08001748 <httpc_tcp_connected>:
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001748:	6901      	ldr	r1, [r0, #16]
 800174a:	2301      	movs	r3, #1
 800174c:	894a      	ldrh	r2, [r1, #10]
 800174e:	6849      	ldr	r1, [r1, #4]
 8001750:	3a01      	subs	r2, #1
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001752:	b570      	push	{r4, r5, r6, lr}
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001754:	b292      	uxth	r2, r2
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001756:	b082      	sub	sp, #8
 8001758:	4604      	mov	r4, r0
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 800175a:	6800      	ldr	r0, [r0, #0]
 800175c:	f01e fa88 	bl	801fc70 <tcp_write>
	if (r != ERR_OK) {
 8001760:	4605      	mov	r5, r0
 8001762:	b948      	cbnz	r0, 8001778 <httpc_tcp_connected+0x30>
	pbuf_free(req->request);
 8001764:	6920      	ldr	r0, [r4, #16]
 8001766:	f01a feeb 	bl	801c540 <pbuf_free>
	altcp_output(req->pcb);
 800176a:	6820      	ldr	r0, [r4, #0]
	req->request = NULL;
 800176c:	6125      	str	r5, [r4, #16]
	altcp_output(req->pcb);
 800176e:	f01f f899 	bl	80208a4 <tcp_output>
}
 8001772:	4628      	mov	r0, r5
 8001774:	b002      	add	sp, #8
 8001776:	bd70      	pop	{r4, r5, r6, pc}
		if (req->conn_settings != NULL) {
 8001778:	6a23      	ldr	r3, [r4, #32]
 800177a:	b13b      	cbz	r3, 800178c <httpc_tcp_connected+0x44>
			if (req->conn_settings->result_fn != NULL) {
 800177c:	689e      	ldr	r6, [r3, #8]
 800177e:	b12e      	cbz	r6, 800178c <httpc_tcp_connected+0x44>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001780:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001782:	2300      	movs	r3, #0
 8001784:	9000      	str	r0, [sp, #0]
 8001786:	2107      	movs	r1, #7
 8001788:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800178a:	47b0      	blx	r6
		return httpc_free_state(req);
 800178c:	4620      	mov	r0, r4
}
 800178e:	b002      	add	sp, #8
 8001790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001794:	f7ff bdc0 	b.w	8001318 <httpc_free_state>

08001798 <HttpClientPageReceiveCallback>:

// build a webpage from pbufs
void HttpClientPageReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800179c:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientPageReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 800179e:	2a00      	cmp	r2, #0
 80017a0:	d048      	beq.n	8001834 <HttpClientPageReceiveCallback+0x9c>
	if (err != ERR_OK) {
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d14f      	bne.n	8001846 <HttpClientPageReceiveCallback+0xae>
 80017a6:	4688      	mov	r8, r1
 80017a8:	4617      	mov	r7, r2
 80017aa:	4614      	mov	r4, r2
 80017ac:	4d33      	ldr	r5, [pc, #204]	; (800187c <HttpClientPageReceiveCallback+0xe4>)
 80017ae:	4e34      	ldr	r6, [pc, #208]	; (8001880 <HttpClientPageReceiveCallback+0xe8>)
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80017b0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8001898 <HttpClientPageReceiveCallback+0x100>
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		buf = q->payload;
		for (i = 0; i < q->len; i++) {
 80017b4:	8963      	ldrh	r3, [r4, #10]
		buf = q->payload;
 80017b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
		for (i = 0; i < q->len; i++) {
 80017ba:	b1bb      	cbz	r3, 80017ec <HttpClientPageReceiveCallback+0x54>
 80017bc:	2300      	movs	r3, #0
//			putchar(buf[i]);
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017be:	f240 211a 	movw	r1, #538	; 0x21a
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
			} else {
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017c2:	469e      	mov	lr, r3
 80017c4:	e007      	b.n	80017d6 <HttpClientPageReceiveCallback+0x3e>
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017c6:	602a      	str	r2, [r5, #0]
 80017c8:	f81c 2003 	ldrb.w	r2, [ip, r3]
		for (i = 0; i < q->len; i++) {
 80017cc:	3301      	adds	r3, #1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017ce:	5432      	strb	r2, [r6, r0]
		for (i = 0; i < q->len; i++) {
 80017d0:	8962      	ldrh	r2, [r4, #10]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	da0a      	bge.n	80017ec <HttpClientPageReceiveCallback+0x54>
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017d6:	6828      	ldr	r0, [r5, #0]
 80017d8:	4288      	cmp	r0, r1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017da:	f100 0201 	add.w	r2, r0, #1
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017de:	d9f2      	bls.n	80017c6 <HttpClientPageReceiveCallback+0x2e>
		for (i = 0; i < q->len; i++) {
 80017e0:	3301      	adds	r3, #1
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017e2:	f886 e21b 	strb.w	lr, [r6, #539]	; 0x21b
		for (i = 0; i < q->len; i++) {
 80017e6:	8962      	ldrh	r2, [r4, #10]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	dbf4      	blt.n	80017d6 <HttpClientPageReceiveCallback+0x3e>
			}
		}

		altcp_recved(pcb, p->tot_len);
 80017ec:	8939      	ldrh	r1, [r7, #8]
 80017ee:	4640      	mov	r0, r8
 80017f0:	f01b fb26 	bl	801ce40 <tcp_recved>
		err = pbuf_free_callback(p);
 80017f4:	4638      	mov	r0, r7
 80017f6:	f017 fcd3 	bl	80191a0 <pbuf_free_callback>
		if (err != ERR_OK) {
 80017fa:	4682      	mov	sl, r0
 80017fc:	b920      	cbnz	r0, 8001808 <HttpClientPageReceiveCallback+0x70>
	for (q = p; q != NULL; q = q->next) {
 80017fe:	6824      	ldr	r4, [r4, #0]
 8001800:	2c00      	cmp	r4, #0
 8001802:	d1d7      	bne.n	80017b4 <HttpClientPageReceiveCallback+0x1c>
			putchar('!');
			printlwiperr(err);
		}
//		printf("HttpClientPageReceiveCallback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
}
 8001804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			putchar('!');
 8001808:	2021      	movs	r0, #33	; 0x21
 800180a:	f024 ff7b 	bl	8026704 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800180e:	f10a 0310 	add.w	r3, sl, #16
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b10      	cmp	r3, #16
 8001816:	d904      	bls.n	8001822 <HttpClientPageReceiveCallback+0x8a>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001818:	6829      	ldr	r1, [r5, #0]
 800181a:	481a      	ldr	r0, [pc, #104]	; (8001884 <HttpClientPageReceiveCallback+0xec>)
 800181c:	f024 ff5a 	bl	80266d4 <iprintf>
 8001820:	e7ed      	b.n	80017fe <HttpClientPageReceiveCallback+0x66>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001822:	f1ca 0100 	rsb	r1, sl, #0
 8001826:	682a      	ldr	r2, [r5, #0]
 8001828:	4817      	ldr	r0, [pc, #92]	; (8001888 <HttpClientPageReceiveCallback+0xf0>)
 800182a:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
 800182e:	f024 ff51 	bl	80266d4 <iprintf>
}
 8001832:	e7e4      	b.n	80017fe <HttpClientPageReceiveCallback+0x66>
	LWIP_ASSERT("p != NULL", p != NULL);
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <HttpClientPageReceiveCallback+0xf4>)
 8001836:	f240 421b 	movw	r2, #1051	; 0x41b
 800183a:	4915      	ldr	r1, [pc, #84]	; (8001890 <HttpClientPageReceiveCallback+0xf8>)
 800183c:	4815      	ldr	r0, [pc, #84]	; (8001894 <HttpClientPageReceiveCallback+0xfc>)
 800183e:	f024 ff49 	bl	80266d4 <iprintf>
	if (err != ERR_OK) {
 8001842:	2c00      	cmp	r4, #0
 8001844:	d0de      	beq.n	8001804 <HttpClientPageReceiveCallback+0x6c>
		putchar('^');
 8001846:	205e      	movs	r0, #94	; 0x5e
 8001848:	f024 ff5c 	bl	8026704 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800184c:	f104 0310 	add.w	r3, r4, #16
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b10      	cmp	r3, #16
 8001854:	d906      	bls.n	8001864 <HttpClientPageReceiveCallback+0xcc>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HttpClientPageReceiveCallback+0xe4>)
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <HttpClientPageReceiveCallback+0xec>)
 800185a:	6819      	ldr	r1, [r3, #0]
}
 800185c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001860:	f024 bf38 	b.w	80266d4 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001864:	4261      	negs	r1, r4
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HttpClientPageReceiveCallback+0x100>)
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HttpClientPageReceiveCallback+0xe4>)
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <HttpClientPageReceiveCallback+0xf0>)
 800186c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001870:	6812      	ldr	r2, [r2, #0]
}
 8001872:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001876:	f024 bf2d 	b.w	80266d4 <iprintf>
 800187a:	bf00      	nop
 800187c:	20001690 	.word	0x20001690
 8001880:	20001698 	.word	0x20001698
 8001884:	0802b5a8 	.word	0x0802b5a8
 8001888:	0802b5c8 	.word	0x0802b5c8
 800188c:	0802b3a4 	.word	0x0802b3a4
 8001890:	08046ce0 	.word	0x08046ce0
 8001894:	0802b3cc 	.word	0x0802b3cc
 8001898:	0802b8fc 	.word	0x0802b8fc

0800189c <httpc_tcp_poll>:
	if (req != NULL) {
 800189c:	b1d0      	cbz	r0, 80018d4 <httpc_tcp_poll+0x38>
		if (req->timeout_ticks) {
 800189e:	68c3      	ldr	r3, [r0, #12]
static err_t httpc_tcp_poll(void *arg, struct altcp_pcb *pcb) {
 80018a0:	b530      	push	{r4, r5, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	b083      	sub	sp, #12
		if (req->timeout_ticks) {
 80018a6:	b12b      	cbz	r3, 80018b4 <httpc_tcp_poll+0x18>
			req->timeout_ticks--;
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60c3      	str	r3, [r0, #12]
		if (!req->timeout_ticks) {
 80018ac:	b113      	cbz	r3, 80018b4 <httpc_tcp_poll+0x18>
}
 80018ae:	2000      	movs	r0, #0
 80018b0:	b003      	add	sp, #12
 80018b2:	bd30      	pop	{r4, r5, pc}
		if (req->conn_settings != NULL) {
 80018b4:	6a23      	ldr	r3, [r4, #32]
 80018b6:	b13b      	cbz	r3, 80018c8 <httpc_tcp_poll+0x2c>
			if (req->conn_settings->result_fn != NULL) {
 80018b8:	689d      	ldr	r5, [r3, #8]
 80018ba:	b12d      	cbz	r5, 80018c8 <httpc_tcp_poll+0x2c>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 80018bc:	2300      	movs	r3, #0
 80018be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018c0:	2105      	movs	r1, #5
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80018c6:	47a8      	blx	r5
		return httpc_free_state(req);
 80018c8:	4620      	mov	r0, r4
}
 80018ca:	b003      	add	sp, #12
 80018cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 80018d0:	f7ff bd22 	b.w	8001318 <httpc_free_state>
}
 80018d4:	2000      	movs	r0, #0
 80018d6:	4770      	bx	lr

080018d8 <httpc_tcp_recv>:
static err_t httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r) {
 80018d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018dc:	4604      	mov	r4, r0
 80018de:	b089      	sub	sp, #36	; 0x24
	if (p == NULL) {
 80018e0:	4615      	mov	r5, r2
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	f000 80e2 	beq.w	8001aac <httpc_tcp_recv+0x1d4>
	if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 80018e8:	f890 a030 	ldrb.w	sl, [r0, #48]	; 0x30
 80018ec:	460e      	mov	r6, r1
 80018ee:	461f      	mov	r7, r3
 80018f0:	f1ba 0f02 	cmp.w	sl, #2
 80018f4:	f000 80c8 	beq.w	8001a88 <httpc_tcp_recv+0x1b0>
		if (req->rx_hdrs == NULL) {
 80018f8:	6940      	ldr	r0, [r0, #20]
 80018fa:	b190      	cbz	r0, 8001922 <httpc_tcp_recv+0x4a>
			pbuf_cat(req->rx_hdrs, p);
 80018fc:	4611      	mov	r1, r2
 80018fe:	f01a fe51 	bl	801c5a4 <pbuf_cat>
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8001902:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001906:	f1ba 0f00 	cmp.w	sl, #0
 800190a:	d00e      	beq.n	800192a <httpc_tcp_recv+0x52>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 800190c:	f1ba 0f01 	cmp.w	sl, #1
 8001910:	d06e      	beq.n	80019f0 <httpc_tcp_recv+0x118>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001912:	f1ba 0f02 	cmp.w	sl, #2
 8001916:	f000 80b7 	beq.w	8001a88 <httpc_tcp_recv+0x1b0>
}
 800191a:	2000      	movs	r0, #0
 800191c:	b009      	add	sp, #36	; 0x24
 800191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			req->rx_hdrs = p;
 8001922:	6162      	str	r2, [r4, #20]
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8001924:	f1ba 0f00 	cmp.w	sl, #0
 8001928:	d1f0      	bne.n	800190c <httpc_tcp_recv+0x34>
			err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status,
 800192a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (end1 != 0xFFFF) {
 800192e:	f64f 7bff 	movw	fp, #65535	; 0xffff
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8001932:	4653      	mov	r3, sl
 8001934:	2202      	movs	r2, #2
 8001936:	4989      	ldr	r1, [pc, #548]	; (8001b5c <httpc_tcp_recv+0x284>)
 8001938:	4640      	mov	r0, r8
 800193a:	f01b f821 	bl	801c980 <pbuf_memfind>
	if (end1 != 0xFFFF) {
 800193e:	4558      	cmp	r0, fp
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8001940:	9003      	str	r0, [sp, #12]
	if (end1 != 0xFFFF) {
 8001942:	f000 8105 	beq.w	8001b50 <httpc_tcp_recv+0x278>
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001946:	4653      	mov	r3, sl
 8001948:	2201      	movs	r2, #1
 800194a:	4985      	ldr	r1, [pc, #532]	; (8001b60 <httpc_tcp_recv+0x288>)
 800194c:	4640      	mov	r0, r8
 800194e:	f01b f817 	bl	801c980 <pbuf_memfind>
		if (space1 != 0xFFFF) {
 8001952:	4558      	cmp	r0, fp
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001954:	4681      	mov	r9, r0
		if (space1 != 0xFFFF) {
 8001956:	f000 80fb 	beq.w	8001b50 <httpc_tcp_recv+0x278>
			if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0) && (pbuf_get_at(p, 6) == '.')) {
 800195a:	4651      	mov	r1, sl
 800195c:	2305      	movs	r3, #5
 800195e:	4a81      	ldr	r2, [pc, #516]	; (8001b64 <httpc_tcp_recv+0x28c>)
 8001960:	4640      	mov	r0, r8
 8001962:	f01a ffd5 	bl	801c910 <pbuf_memcmp>
 8001966:	2800      	cmp	r0, #0
 8001968:	f040 80f2 	bne.w	8001b50 <httpc_tcp_recv+0x278>
 800196c:	2106      	movs	r1, #6
 800196e:	4640      	mov	r0, r8
 8001970:	f01a ffa2 	bl	801c8b8 <pbuf_get_at>
 8001974:	282e      	cmp	r0, #46	; 0x2e
 8001976:	f040 80eb 	bne.w	8001b50 <httpc_tcp_recv+0x278>
				u16_t version = pbuf_get_at(p, 5) - '0';
 800197a:	2105      	movs	r1, #5
 800197c:	4640      	mov	r0, r8
 800197e:	f01a ff9b 	bl	801c8b8 <pbuf_get_at>
 8001982:	3830      	subs	r0, #48	; 0x30
				version |= pbuf_get_at(p, 7) - '0';
 8001984:	2107      	movs	r1, #7
				u16_t version = pbuf_get_at(p, 5) - '0';
 8001986:	fa1f fa80 	uxth.w	sl, r0
				version |= pbuf_get_at(p, 7) - '0';
 800198a:	4640      	mov	r0, r8
 800198c:	f01a ff94 	bl	801c8b8 <pbuf_get_at>
 8001990:	3830      	subs	r0, #48	; 0x30
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001992:	f109 0301 	add.w	r3, r9, #1
 8001996:	2201      	movs	r2, #1
				version |= pbuf_get_at(p, 7) - '0';
 8001998:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 800199c:	4970      	ldr	r1, [pc, #448]	; (8001b60 <httpc_tcp_recv+0x288>)
 800199e:	b29b      	uxth	r3, r3
				*http_version = version;
 80019a0:	8320      	strh	r0, [r4, #24]
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 80019a2:	4640      	mov	r0, r8
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	f01a ffeb 	bl	801c980 <pbuf_memfind>
				if (space2 != 0xFFFF) {
 80019aa:	4558      	cmp	r0, fp
 80019ac:	9b02      	ldr	r3, [sp, #8]
 80019ae:	f000 80a2 	beq.w	8001af6 <httpc_tcp_recv+0x21e>
					status_num_len = space2 - space1 - 1;
 80019b2:	eba0 0909 	sub.w	r9, r0, r9
 80019b6:	f109 39ff 	add.w	r9, r9, #4294967295
				memset(status_num, 0, sizeof(status_num));
 80019ba:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019bc:	4640      	mov	r0, r8
 80019be:	a904      	add	r1, sp, #16
				memset(status_num, 0, sizeof(status_num));
 80019c0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80019c4:	e9cd 2204 	strd	r2, r2, [sp, #16]
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019c8:	fa1f f289 	uxth.w	r2, r9
 80019cc:	f01a fe5c 	bl	801c688 <pbuf_copy_partial>
 80019d0:	4581      	cmp	r9, r0
 80019d2:	f040 80bd 	bne.w	8001b50 <httpc_tcp_recv+0x278>
					int status = atoi(status_num);
 80019d6:	a804      	add	r0, sp, #16
 80019d8:	f023 fc58 	bl	802528c <atoi>
					if ((status > 0) && (status <= 0xFFFF)) {
 80019dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80019e0:	1e42      	subs	r2, r0, #1
 80019e2:	429a      	cmp	r2, r3
 80019e4:	f200 80b4 	bhi.w	8001b50 <httpc_tcp_recv+0x278>
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019e8:	2301      	movs	r3, #1
						*http_status = (u16_t) status;
 80019ea:	8360      	strh	r0, [r4, #26]
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019ec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 80019f0:	f8d4 9014 	ldr.w	r9, [r4, #20]
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 80019f4:	2300      	movs	r3, #0
 80019f6:	2204      	movs	r2, #4
 80019f8:	495b      	ldr	r1, [pc, #364]	; (8001b68 <httpc_tcp_recv+0x290>)
 80019fa:	4648      	mov	r0, r9
 80019fc:	f01a ffc0 	bl	801c980 <pbuf_memfind>
	if (end1 < (0xFFFF - 2)) {
 8001a00:	f64f 73fc 	movw	r3, #65532	; 0xfffc
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8001a04:	4680      	mov	r8, r0
	if (end1 < (0xFFFF - 2)) {
 8001a06:	4298      	cmp	r0, r3
 8001a08:	f200 80a5 	bhi.w	8001b56 <httpc_tcp_recv+0x27e>
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
		if (content_len_hdr != 0xFFFF) {
 8001a10:	f64f 7aff 	movw	sl, #65535	; 0xffff
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a14:	2210      	movs	r2, #16
 8001a16:	4955      	ldr	r1, [pc, #340]	; (8001b6c <httpc_tcp_recv+0x294>)
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a18:	62e3      	str	r3, [r4, #44]	; 0x2c
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a1a:	4648      	mov	r0, r9
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f01a ffaf 	bl	801c980 <pbuf_memfind>
		if (content_len_hdr != 0xFFFF) {
 8001a22:	4550      	cmp	r0, sl
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a24:	4605      	mov	r5, r0
		if (content_len_hdr != 0xFFFF) {
 8001a26:	d16e      	bne.n	8001b06 <httpc_tcp_recv+0x22e>
		*total_header_len = end1 + 4;
 8001a28:	f108 0504 	add.w	r5, r8, #4
				altcp_recved(pcb, total_header_len);
 8001a2c:	4630      	mov	r0, r6
		*total_header_len = end1 + 4;
 8001a2e:	b2ad      	uxth	r5, r5
				altcp_recved(pcb, total_header_len);
 8001a30:	4629      	mov	r1, r5
 8001a32:	f01b fa05 	bl	801ce40 <tcp_recved>
				if (req->conn_settings) {
 8001a36:	6a23      	ldr	r3, [r4, #32]
 8001a38:	b1cb      	cbz	r3, 8001a6e <httpc_tcp_recv+0x196>
					if (req->conn_settings->headers_done_fn) {
 8001a3a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001a3e:	f1b8 0f00 	cmp.w	r8, #0
 8001a42:	d014      	beq.n	8001a6e <httpc_tcp_recv+0x196>
						err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs,
 8001a44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a46:	4620      	mov	r0, r4
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	6962      	ldr	r2, [r4, #20]
 8001a4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a50:	47c0      	blx	r8
						if (err != ERR_OK) {
 8001a52:	b160      	cbz	r0, 8001a6e <httpc_tcp_recv+0x196>
		if (req->conn_settings != NULL) {
 8001a54:	6a23      	ldr	r3, [r4, #32]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d037      	beq.n	8001aca <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001a5a:	689d      	ldr	r5, [r3, #8]
 8001a5c:	2d00      	cmp	r5, #0
 8001a5e:	d034      	beq.n	8001aca <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001a60:	8b63      	ldrh	r3, [r4, #26]
 8001a62:	2108      	movs	r1, #8
 8001a64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a66:	9000      	str	r0, [sp, #0]
 8001a68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a6a:	47a8      	blx	r5
 8001a6c:	e02d      	b.n	8001aca <httpc_tcp_recv+0x1f2>
				q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8001a6e:	4629      	mov	r1, r5
 8001a70:	6960      	ldr	r0, [r4, #20]
 8001a72:	f01a fd49 	bl	801c508 <pbuf_free_header>
				req->rx_hdrs = NULL;
 8001a76:	2300      	movs	r3, #0
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a78:	4605      	mov	r5, r0
				req->rx_hdrs = NULL;
 8001a7a:	6163      	str	r3, [r4, #20]
				req->parse_state = HTTPC_PARSE_RX_DATA;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a82:	2800      	cmp	r0, #0
 8001a84:	f43f af49 	beq.w	800191a <httpc_tcp_recv+0x42>
		req->rx_content_len += p->tot_len;
 8001a88:	8929      	ldrh	r1, [r5, #8]
 8001a8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a8c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
		req->rx_content_len += p->tot_len;
 8001a90:	440b      	add	r3, r1
 8001a92:	62a3      	str	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a94:	f1be 0f00 	cmp.w	lr, #0
 8001a98:	d026      	beq.n	8001ae8 <httpc_tcp_recv+0x210>
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	462a      	mov	r2, r5
 8001a9e:	4631      	mov	r1, r6
 8001aa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001aa2:	46f4      	mov	ip, lr
}
 8001aa4:	b009      	add	sp, #36	; 0x24
 8001aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001aaa:	4760      	bx	ip
		if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001aac:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d010      	beq.n	8001ad6 <httpc_tcp_recv+0x1fe>
			result = HTTPC_RESULT_ERR_CLOSED;
 8001ab4:	2104      	movs	r1, #4
		if (req->conn_settings != NULL) {
 8001ab6:	6a23      	ldr	r3, [r4, #32]
 8001ab8:	b13b      	cbz	r3, 8001aca <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001aba:	689d      	ldr	r5, [r3, #8]
 8001abc:	b12d      	cbz	r5, 8001aca <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	8b63      	ldrh	r3, [r4, #26]
 8001ac2:	9200      	str	r2, [sp, #0]
 8001ac4:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001ac8:	47a8      	blx	r5
		return httpc_free_state(req);
 8001aca:	4620      	mov	r0, r4
}
 8001acc:	b009      	add	sp, #36	; 0x24
 8001ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return httpc_free_state(req);
 8001ad2:	f7ff bc21 	b.w	8001318 <httpc_free_state>
		} else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID)
 8001ad6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001ad8:	1c4b      	adds	r3, r1, #1
 8001ada:	d012      	beq.n	8001b02 <httpc_tcp_recv+0x22a>
				&& (req->hdr_content_len != req->rx_content_len)) {
 8001adc:	6a85      	ldr	r5, [r0, #40]	; 0x28
			result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8001ade:	42a9      	cmp	r1, r5
 8001ae0:	bf14      	ite	ne
 8001ae2:	2109      	movne	r1, #9
 8001ae4:	2100      	moveq	r1, #0
 8001ae6:	e7e6      	b.n	8001ab6 <httpc_tcp_recv+0x1de>
			altcp_recved(pcb, p->tot_len);
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f01b f9a9 	bl	801ce40 <tcp_recved>
			pbuf_free(p);
 8001aee:	4628      	mov	r0, r5
 8001af0:	f01a fd26 	bl	801c540 <pbuf_free>
 8001af4:	e711      	b.n	800191a <httpc_tcp_recv+0x42>
					status_num_len = end1 - space1 - 1;
 8001af6:	9a03      	ldr	r2, [sp, #12]
 8001af8:	eba2 0909 	sub.w	r9, r2, r9
 8001afc:	f109 39ff 	add.w	r9, r9, #4294967295
 8001b00:	e75b      	b.n	80019ba <httpc_tcp_recv+0xe2>
			result = HTTPC_RESULT_OK;
 8001b02:	4611      	mov	r1, r2
 8001b04:	e7d7      	b.n	8001ab6 <httpc_tcp_recv+0x1de>
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b06:	4603      	mov	r3, r0
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4914      	ldr	r1, [pc, #80]	; (8001b5c <httpc_tcp_recv+0x284>)
 8001b0c:	4648      	mov	r0, r9
 8001b0e:	f01a ff37 	bl	801c980 <pbuf_memfind>
			if (content_len_line_end != 0xFFFF) {
 8001b12:	4550      	cmp	r0, sl
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b14:	4603      	mov	r3, r0
			if (content_len_line_end != 0xFFFF) {
 8001b16:	d087      	beq.n	8001a28 <httpc_tcp_recv+0x150>
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b18:	f64f 72f0 	movw	r2, #65520	; 0xfff0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b1c:	4648      	mov	r0, r9
 8001b1e:	a904      	add	r1, sp, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b20:	1b52      	subs	r2, r2, r5
 8001b22:	441a      	add	r2, r3
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b24:	f105 0310 	add.w	r3, r5, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b28:	b295      	uxth	r5, r2
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b2a:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b2c:	b29b      	uxth	r3, r3
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b2e:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001b32:	e9cd 2206 	strd	r2, r2, [sp, #24]
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b36:	462a      	mov	r2, r5
 8001b38:	f01a fda6 	bl	801c688 <pbuf_copy_partial>
 8001b3c:	4285      	cmp	r5, r0
 8001b3e:	f47f af73 	bne.w	8001a28 <httpc_tcp_recv+0x150>
					int len = atoi(content_len_num);
 8001b42:	a804      	add	r0, sp, #16
 8001b44:	f023 fba2 	bl	802528c <atoi>
					if ((len >= 0) && ((u32_t) len < HTTPC_CONTENT_LEN_INVALID)) {
 8001b48:	2800      	cmp	r0, #0
						*content_length = (u32_t) len;
 8001b4a:	bfa8      	it	ge
 8001b4c:	62e0      	strge	r0, [r4, #44]	; 0x2c
			if (err == ERR_OK) {
 8001b4e:	e76b      	b.n	8001a28 <httpc_tcp_recv+0x150>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001b50:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b54:	e6da      	b.n	800190c <httpc_tcp_recv+0x34>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001b56:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b5a:	e6da      	b.n	8001912 <httpc_tcp_recv+0x3a>
 8001b5c:	0802b4f0 	.word	0x0802b4f0
 8001b60:	0802dde8 	.word	0x0802dde8
 8001b64:	0802b624 	.word	0x0802b624
 8001b68:	0802b62c 	.word	0x0802b62c
 8001b6c:	0802b634 	.word	0x0802b634

08001b70 <httpc_get_file_dns>:
		altcp_recv_fn recv_fn, void *callback_arg, httpc_state_t **connection) {
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001b76:	2d00      	cmp	r5, #0
 8001b78:	bf18      	it	ne
 8001b7a:	2a00      	cmpne	r2, #0
 8001b7c:	d044      	beq.n	8001c08 <httpc_get_file_dns+0x98>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d041      	beq.n	8001c08 <httpc_get_file_dns+0x98>
	err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 8001b84:	4610      	mov	r0, r2
 8001b86:	461e      	mov	r6, r3
	return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 8001b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	9000      	str	r0, [sp, #0]
 8001b8e:	4631      	mov	r1, r6
 8001b90:	a807      	add	r0, sp, #28
 8001b92:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8001b96:	4622      	mov	r2, r4
 8001b98:	f7ff fc5a 	bl	8001450 <httpc_init_connection_common.constprop.0>
	if (err != ERR_OK) {
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	b998      	cbnz	r0, 8001bc8 <httpc_get_file_dns+0x58>
	if (settings->use_proxy) {
 8001ba0:	79b3      	ldrb	r3, [r6, #6]
 8001ba2:	b9a3      	cbnz	r3, 8001bce <httpc_get_file_dns+0x5e>
		err = httpc_get_internal_dns(req, server_name);
 8001ba4:	9e07      	ldr	r6, [sp, #28]
	LWIP_ASSERT("req != NULL", req != NULL);
 8001ba6:	b33e      	cbz	r6, 8001bf8 <httpc_get_file_dns+0x88>
	err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 8001ba8:	1d31      	adds	r1, r6, #4
 8001baa:	4633      	mov	r3, r6
 8001bac:	4620      	mov	r0, r4
 8001bae:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <httpc_get_file_dns+0xac>)
 8001bb0:	9105      	str	r1, [sp, #20]
 8001bb2:	f019 f99d 	bl	801aef0 <dns_gethostbyname>
	if (err == ERR_OK) {
 8001bb6:	9905      	ldr	r1, [sp, #20]
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b1c0      	cbz	r0, 8001bee <httpc_get_file_dns+0x7e>
	} else if (err == ERR_INPROGRESS) {
 8001bbc:	1d42      	adds	r2, r0, #5
 8001bbe:	d00d      	beq.n	8001bdc <httpc_get_file_dns+0x6c>
		httpc_free_state(req);
 8001bc0:	9807      	ldr	r0, [sp, #28]
		return err;
 8001bc2:	461d      	mov	r5, r3
		httpc_free_state(req);
 8001bc4:	f7ff fba8 	bl	8001318 <httpc_free_state>
}
 8001bc8:	4628      	mov	r0, r5
 8001bca:	b008      	add	sp, #32
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8001bce:	4631      	mov	r1, r6
 8001bd0:	9807      	ldr	r0, [sp, #28]
 8001bd2:	f7ff fb81 	bl	80012d8 <httpc_get_internal_addr>
 8001bd6:	4603      	mov	r3, r0
	if (err != ERR_OK) {
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f1      	bne.n	8001bc0 <httpc_get_file_dns+0x50>
	if (connection != NULL) {
 8001bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f2      	beq.n	8001bc8 <httpc_get_file_dns+0x58>
		*connection = req;
 8001be2:	9b07      	ldr	r3, [sp, #28]
}
 8001be4:	4628      	mov	r0, r5
		*connection = req;
 8001be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	b008      	add	sp, #32
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &req->remote_addr);
 8001bee:	4630      	mov	r0, r6
 8001bf0:	f7ff fb72 	bl	80012d8 <httpc_get_internal_addr>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	e7ef      	b.n	8001bd8 <httpc_get_file_dns+0x68>
	LWIP_ASSERT("req != NULL", req != NULL);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <httpc_get_file_dns+0xb0>)
 8001bfa:	f240 12c7 	movw	r2, #455	; 0x1c7
 8001bfe:	4909      	ldr	r1, [pc, #36]	; (8001c24 <httpc_get_file_dns+0xb4>)
 8001c00:	4809      	ldr	r0, [pc, #36]	; (8001c28 <httpc_get_file_dns+0xb8>)
 8001c02:	f024 fd67 	bl	80266d4 <iprintf>
 8001c06:	e7cf      	b.n	8001ba8 <httpc_get_file_dns+0x38>
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <httpc_get_file_dns+0xb0>)
 8001c0a:	f240 2292 	movw	r2, #658	; 0x292
 8001c0e:	4907      	ldr	r1, [pc, #28]	; (8001c2c <httpc_get_file_dns+0xbc>)
 8001c10:	f06f 050f 	mvn.w	r5, #15
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <httpc_get_file_dns+0xb8>)
 8001c16:	f024 fd5d 	bl	80266d4 <iprintf>
 8001c1a:	e7d5      	b.n	8001bc8 <httpc_get_file_dns+0x58>
 8001c1c:	08001709 	.word	0x08001709
 8001c20:	0802b3a4 	.word	0x0802b3a4
 8001c24:	0802b3c0 	.word	0x0802b3c0
 8001c28:	0802b3cc 	.word	0x0802b3cc
 8001c2c:	0802b648 	.word	0x0802b648

08001c30 <printlwiperr>:
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001c30:	f100 0310 	add.w	r3, r0, #16
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d904      	bls.n	8001c44 <printlwiperr+0x14>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <printlwiperr+0x28>)
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <printlwiperr+0x2c>)
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	f024 bd48 	b.w	80266d4 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001c44:	4241      	negs	r1, r0
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <printlwiperr+0x30>)
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <printlwiperr+0x28>)
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <printlwiperr+0x34>)
 8001c4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	f024 bd3f 	b.w	80266d4 <iprintf>
 8001c56:	bf00      	nop
 8001c58:	20001690 	.word	0x20001690
 8001c5c:	0802b5a8 	.word	0x0802b5a8
 8001c60:	0802b8fc 	.word	0x0802b8fc
 8001c64:	0802b5c8 	.word	0x0802b5c8

08001c68 <http_dlclient>:

// download a file
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection1 = &conn1;	// point to static
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <http_dlclient+0x7c>)
	settings1 = &set1;		// point to static
	memset(settings1, 0, sizeof(set1));
 8001c6e:	2500      	movs	r5, #0
	settings1 = &set1;		// point to static
 8001c70:	4c1d      	ldr	r4, [pc, #116]	; (8001ce8 <http_dlclient+0x80>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c72:	b084      	sub	sp, #16
	settings1 = &set1;		// point to static
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <http_dlclient+0x84>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c76:	460f      	mov	r7, r1
	connection1 = &conn1;	// point to static
 8001c78:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001d10 <http_dlclient+0xa8>
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c7c:	4606      	mov	r6, r0
	memset(connection1, 0, sizeof(conn1));
 8001c7e:	4629      	mov	r1, r5
 8001c80:	4618      	mov	r0, r3
	settings1 = &set1;		// point to static
 8001c82:	6014      	str	r4, [r2, #0]
	memset(connection1, 0, sizeof(conn1));
 8001c84:	2234      	movs	r2, #52	; 0x34
	connection1 = &conn1;	// point to static
 8001c86:	f8c8 3000 	str.w	r3, [r8]
	memset(settings1, 0, sizeof(set1));
 8001c8a:	6025      	str	r5, [r4, #0]
 8001c8c:	6065      	str	r5, [r4, #4]
	memset(connection1, 0, sizeof(conn1));
 8001c8e:	f023 fd83 	bl	8025798 <memset>

	settings1->use_proxy = 0;
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <http_dlclient+0x88>)
	settings1->result_fn = HttpClientFileResultCallback;

	connection1->timeout_ticks = 1;

	strcpy(domain_name, host);
 8001c94:	4639      	mov	r1, r7
	settings1->result_fn = HttpClientFileResultCallback;
 8001c96:	4f17      	ldr	r7, [pc, #92]	; (8001cf4 <http_dlclient+0x8c>)
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c98:	60e2      	str	r2, [r4, #12]
	connection1->timeout_ticks = 1;
 8001c9a:	2201      	movs	r2, #1
	settings1->result_fn = HttpClientFileResultCallback;
 8001c9c:	60a7      	str	r7, [r4, #8]
	connection1->timeout_ticks = 1;
 8001c9e:	60c2      	str	r2, [r0, #12]
	strcpy(domain_name, host);
 8001ca0:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <http_dlclient+0x90>)
 8001ca2:	f024 ffb7 	bl	8026c14 <strcpy>
	strcpy(rxbuffer, filename);
 8001ca6:	4631      	mov	r1, r6
 8001ca8:	4814      	ldr	r0, [pc, #80]	; (8001cfc <http_dlclient+0x94>)
 8001caa:	f024 ffb3 	bl	8026c14 <strcpy>

//	printf("http_dlclient: domain=%s, rxbuffer=%s, flash_add=0x%08x\n", domain_name, rxbuffer, flash_memptr);

	down_total = 0;
 8001cae:	4914      	ldr	r1, [pc, #80]	; (8001d00 <http_dlclient+0x98>)
	expectedapage = 0;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <http_dlclient+0x9c>)
 8001cb2:	4623      	mov	r3, r4
	expectedapage = 0;
 8001cb4:	4814      	ldr	r0, [pc, #80]	; (8001d08 <http_dlclient+0xa0>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cb6:	f8cd 8008 	str.w	r8, [sp, #8]
 8001cba:	9701      	str	r7, [sp, #4]
	down_total = 0;
 8001cbc:	600d      	str	r5, [r1, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cbe:	f641 7192 	movw	r1, #8082	; 0x1f92
 8001cc2:	9200      	str	r2, [sp, #0]
	expectedapage = 0;
 8001cc4:	6005      	str	r5, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cc6:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <http_dlclient+0x94>)
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <http_dlclient+0x90>)
 8001cca:	f7ff ff51 	bl	8001b70 <httpc_get_file_dns>
			HttpClientFileResultCallback, &connection1);
	if (error != HTTPC_RESULT_OK) {
 8001cce:	b910      	cbnz	r0, 8001cd6 <http_dlclient+0x6e>
		printf("httpc_get_file_dns: returned, err=%d\n", error);
	}
}
 8001cd0:	b004      	add	sp, #16
 8001cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <http_dlclient+0xa4>)
}
 8001cda:	b004      	add	sp, #16
 8001cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001ce0:	f024 bcf8 	b.w	80266d4 <iprintf>
 8001ce4:	20001600 	.word	0x20001600
 8001ce8:	200018b4 	.word	0x200018b4
 8001cec:	200018d4 	.word	0x200018d4
 8001cf0:	080012c9 	.word	0x080012c9
 8001cf4:	08001651 	.word	0x08001651
 8001cf8:	20001670 	.word	0x20001670
 8001cfc:	20001698 	.word	0x20001698
 8001d00:	20001690 	.word	0x20001690
 8001d04:	08001381 	.word	0x08001381
 8001d08:	200034c8 	.word	0x200034c8
 8001d0c:	0802b65c 	.word	0x0802b65c
 8001d10:	20001668 	.word	0x20001668

08001d14 <hc_open>:

// request a webpage
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection2 = &conn2;	// point to static
	settings2 = &set2;		// point to static
	memset(settings2, 0, sizeof(set2));
 8001d18:	2200      	movs	r2, #0
	settings2 = &set2;		// point to static
 8001d1a:	4c28      	ldr	r4, [pc, #160]	; (8001dbc <hc_open+0xa8>)
	connection2 = &conn2;	// point to static
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <hc_open+0xac>)
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d1e:	460d      	mov	r5, r1
	memset(settings2, 0, sizeof(set2));
 8001d20:	6022      	str	r2, [r4, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d22:	4611      	mov	r1, r2
	memset(settings2, 0, sizeof(set2));
 8001d24:	6062      	str	r2, [r4, #4]
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d26:	4606      	mov	r6, r0
	settings2 = &set2;		// point to static
 8001d28:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <hc_open+0xb0>)
	memset(connection2, 0, sizeof(conn2));
 8001d2a:	4618      	mov	r0, r3
	connection2 = &conn2;	// point to static
 8001d2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001de8 <hc_open+0xd4>
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d30:	b084      	sub	sp, #16
	settings2 = &set2;		// point to static
 8001d32:	6014      	str	r4, [r2, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d34:	2234      	movs	r2, #52	; 0x34
	connection2 = &conn2;	// point to static
 8001d36:	f8c8 3000 	str.w	r3, [r8]
	memset(connection2, 0, sizeof(conn2));
 8001d3a:	f023 fd2d 	bl	8025798 <memset>

	settings2->use_proxy = 0;
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d3e:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <hc_open+0xb4>)
	settings2->result_fn = HttpClientPageResultCallback;
 8001d40:	4f22      	ldr	r7, [pc, #136]	; (8001dcc <hc_open+0xb8>)
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d42:	60e2      	str	r2, [r4, #12]

	connection2->timeout_ticks = 1;
 8001d44:	2201      	movs	r2, #1
	settings2->result_fn = HttpClientPageResultCallback;
 8001d46:	60a7      	str	r7, [r4, #8]
	connection2->timeout_ticks = 1;
 8001d48:	60c2      	str	r2, [r0, #12]

	if ((isalnum(*servername) || (*servername == '/'))) {
 8001d4a:	4c21      	ldr	r4, [pc, #132]	; (8001dd0 <hc_open+0xbc>)
 8001d4c:	7833      	ldrb	r3, [r6, #0]
 8001d4e:	5ce2      	ldrb	r2, [r4, r3]
 8001d50:	0751      	lsls	r1, r2, #29
 8001d52:	d101      	bne.n	8001d58 <hc_open+0x44>
 8001d54:	2b2f      	cmp	r3, #47	; 0x2f
 8001d56:	d126      	bne.n	8001da6 <hc_open+0x92>
		strcpy(domain_name, servername);
 8001d58:	4631      	mov	r1, r6
 8001d5a:	481e      	ldr	r0, [pc, #120]	; (8001dd4 <hc_open+0xc0>)
 8001d5c:	f024 ff5a 	bl	8026c14 <strcpy>
	} else {
		strcpy(domain_name, SERVER_DESTINATION);
	}

	if ((isalnum(*page) || (*page == '/'))) {
 8001d60:	782b      	ldrb	r3, [r5, #0]
 8001d62:	5ce2      	ldrb	r2, [r4, r3]
 8001d64:	0752      	lsls	r2, r2, #29
 8001d66:	d101      	bne.n	8001d6c <hc_open+0x58>
 8001d68:	2b2f      	cmp	r3, #47	; 0x2f
 8001d6a:	d118      	bne.n	8001d9e <hc_open+0x8a>
		strcpy(rxbuffer, page);			// rxbuffer has url
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	481a      	ldr	r0, [pc, #104]	; (8001dd8 <hc_open+0xc4>)
 8001d70:	f024 ff50 	bl	8026c14 <strcpy>

//	printf("hc_open: domain=%s, rxbuffer=%s\n", domain_name, rxbuffer);

	down_total = 0;
	expectedapage = 1;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <hc_open+0xc8>)
	down_total = 0;
 8001d76:	2400      	movs	r4, #0
 8001d78:	4819      	ldr	r0, [pc, #100]	; (8001de0 <hc_open+0xcc>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d7a:	f641 7192 	movw	r1, #8082	; 0x1f92
 8001d7e:	f8cd 8008 	str.w	r8, [sp, #8]
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <hc_open+0xa8>)
 8001d84:	e9cd 2700 	strd	r2, r7, [sp]
	down_total = 0;
 8001d88:	6004      	str	r4, [r0, #0]
	expectedapage = 1;
 8001d8a:	2401      	movs	r4, #1
 8001d8c:	4815      	ldr	r0, [pc, #84]	; (8001de4 <hc_open+0xd0>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <hc_open+0xc4>)
	expectedapage = 1;
 8001d90:	6004      	str	r4, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d92:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <hc_open+0xc0>)
 8001d94:	f7ff feec 	bl	8001b70 <httpc_get_file_dns>
			HttpClientPageResultCallback, &connection2);
}
 8001d98:	b004      	add	sp, #16
 8001d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(rxbuffer, "/");
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <hc_open+0xc4>)
 8001da0:	222f      	movs	r2, #47	; 0x2f
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	e7e6      	b.n	8001d74 <hc_open+0x60>
		strcpy(domain_name, SERVER_DESTINATION);
 8001da6:	f8df c044 	ldr.w	ip, [pc, #68]	; 8001dec <hc_open+0xd8>
 8001daa:	4e0a      	ldr	r6, [pc, #40]	; (8001dd4 <hc_open+0xc0>)
 8001dac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001db0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001db2:	f8dc 3000 	ldr.w	r3, [ip]
 8001db6:	6033      	str	r3, [r6, #0]
 8001db8:	e7d2      	b.n	8001d60 <hc_open+0x4c>
 8001dba:	bf00      	nop
 8001dbc:	200018c4 	.word	0x200018c4
 8001dc0:	20001634 	.word	0x20001634
 8001dc4:	200018d8 	.word	0x200018d8
 8001dc8:	080012c9 	.word	0x080012c9
 8001dcc:	08001581 	.word	0x08001581
 8001dd0:	080474c9 	.word	0x080474c9
 8001dd4:	20001670 	.word	0x20001670
 8001dd8:	20001698 	.word	0x20001698
 8001ddc:	08001799 	.word	0x08001799
 8001de0:	20001690 	.word	0x20001690
 8001de4:	200034c8 	.word	0x200034c8
 8001de8:	2000166c 	.word	0x2000166c
 8001dec:	0802b684 	.word	0x0802b684

08001df0 <httploader>:
#include "tftp/tftp_loader.h"

int http_downloading = NOT_LOADING;

// attempt to load new firmware
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001df4:	461f      	mov	r7, r3
	volatile uint32_t addr;
	char segment;

	dl_filecrc = 0;

	addr = (uint32_t) httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <httploader+0xc0>)
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001df8:	b085      	sub	sp, #20
	dl_filecrc = 0;
 8001dfa:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8001ee4 <httploader+0xf4>
	addr = (uint32_t) httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001dfe:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e02:	4605      	mov	r5, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	4616      	mov	r6, r2
	addr = (uint32_t) httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e08:	9303      	str	r3, [sp, #12]
	dl_filecrc = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8cc 3000 	str.w	r3, [ip]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e10:	9b03      	ldr	r3, [sp, #12]
 8001e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e16:	d040      	beq.n	8001e9a <httploader+0xaa>
 8001e18:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001ee8 <httploader+0xf8>
 8001e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000

	switch (flash_load_address) {		// assign a code letter for the load address filename
	case LOADER_BASE_MEM1:
		segment = 'A';
		dl_filecrc = crc1;
		break;
 8001e20:	f04f 0941 	mov.w	r9, #65	; 0x41
		dl_filecrc = crc1;
 8001e24:	f8cc 2000 	str.w	r2, [ip]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e28:	f8c8 3000 	str.w	r3, [r8]
	default:
		printf("httploader: bad load address\n");
		return;
	}

	http_downloading = FLASH_LOADING;
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <httploader+0xc4>)
 8001e2e:	2201      	movs	r2, #1

	writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"DOWNLOADING NEW F/W\"");
 8001e30:	4821      	ldr	r0, [pc, #132]	; (8001eb8 <httploader+0xc8>)
	http_downloading = FLASH_LOADING;
 8001e32:	601a      	str	r2, [r3, #0]
	writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"DOWNLOADING NEW F/W\"");
 8001e34:	f000 fa38 	bl	80022a8 <writelcdcmd>
	writelcdcmd("xstr 5,136,470,48,2,BLACK,RED,0,1,1,\"DON'T SWITCH OFF...\"");
 8001e38:	4820      	ldr	r0, [pc, #128]	; (8001ebc <httploader+0xcc>)
 8001e3a:	f000 fa35 	bl	80022a8 <writelcdcmd>

	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n", filename, host, crc1, crc2);
 8001e3e:	4633      	mov	r3, r6
 8001e40:	4622      	mov	r2, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	9700      	str	r7, [sp, #0]
 8001e46:	481e      	ldr	r0, [pc, #120]	; (8001ec0 <httploader+0xd0>)
 8001e48:	f024 fc44 	bl	80266d4 <iprintf>

	flash_memptr = flash_load_address;
	flash_filelength = 0;

	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e4c:	481d      	ldr	r0, [pc, #116]	; (8001ec4 <httploader+0xd4>)
	flash_memptr = flash_load_address;
 8001e4e:	4e1e      	ldr	r6, [pc, #120]	; (8001ec8 <httploader+0xd8>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e50:	462a      	mov	r2, r5
	flash_memptr = flash_load_address;
 8001e52:	f8d8 1000 	ldr.w	r1, [r8]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e56:	464b      	mov	r3, r9
 8001e58:	6800      	ldr	r0, [r0, #0]
	flash_memptr = flash_load_address;
 8001e5a:	6031      	str	r1, [r6, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e5c:	9001      	str	r0, [sp, #4]
 8001e5e:	481b      	ldr	r0, [pc, #108]	; (8001ecc <httploader+0xdc>)
	flash_filelength = 0;
 8001e60:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <httploader+0xe0>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e62:	6800      	ldr	r0, [r0, #0]
 8001e64:	9000      	str	r0, [sp, #0]
	flash_filelength = 0;
 8001e66:	2000      	movs	r0, #0
 8001e68:	6008      	str	r0, [r1, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e6a:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <httploader+0xe4>)
 8001e6c:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <httploader+0xe8>)
 8001e6e:	f024 fe1b 	bl	8026aa8 <siprintf>
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename,
 8001e72:	4623      	mov	r3, r4
 8001e74:	6832      	ldr	r2, [r6, #0]
 8001e76:	4918      	ldr	r1, [pc, #96]	; (8001ed8 <httploader+0xe8>)
 8001e78:	4818      	ldr	r0, [pc, #96]	; (8001edc <httploader+0xec>)
 8001e7a:	f024 fc2b 	bl	80266d4 <iprintf>
			flash_memptr, host);
	writelcdcmd("\\r\\rDownloading new STM firmware....");
 8001e7e:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <httploader+0xf0>)
 8001e80:	f000 fa12 	bl	80022a8 <writelcdcmd>

	http_dlclient(newfilename, host, flash_memptr);
 8001e84:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <httploader+0xe8>)
 8001e86:	6832      	ldr	r2, [r6, #0]
 8001e88:	4621      	mov	r1, r4
 8001e8a:	f7ff feed 	bl	8001c68 <http_dlclient>
	osDelay(5);
 8001e8e:	2005      	movs	r0, #5
}
 8001e90:	b005      	add	sp, #20
 8001e92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	osDelay(5);
 8001e96:	f014 bb9d 	b.w	80165d4 <osDelay>
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e9a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001ee8 <httploader+0xf8>
 8001e9e:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
		break;
 8001ea2:	f04f 0949 	mov.w	r9, #73	; 0x49
		dl_filecrc = crc2;
 8001ea6:	f8cc 7000 	str.w	r7, [ip]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001eaa:	f8c8 3000 	str.w	r3, [r8]
		break;
 8001eae:	e7bd      	b.n	8001e2c <httploader+0x3c>
 8001eb0:	08001df1 	.word	0x08001df1
 8001eb4:	200018dc 	.word	0x200018dc
 8001eb8:	0802b940 	.word	0x0802b940
 8001ebc:	0802b97c 	.word	0x0802b97c
 8001ec0:	0802b9b8 	.word	0x0802b9b8
 8001ec4:	20002dfc 	.word	0x20002dfc
 8001ec8:	2000087c 	.word	0x2000087c
 8001ecc:	20002184 	.word	0x20002184
 8001ed0:	20000878 	.word	0x20000878
 8001ed4:	0802b9ec 	.word	0x0802b9ec
 8001ed8:	200018e0 	.word	0x200018e0
 8001edc:	0802ba0c 	.word	0x0802ba0c
 8001ee0:	0802ba68 	.word	0x0802ba68
 8001ee4:	20000870 	.word	0x20000870
 8001ee8:	20000004 	.word	0x20000004

08001eec <stm_rx_callback>:

// http callback for stm firmware download
// this gets called for each downloaded chunk received
//
int stm_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef0:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("stm_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8001ef2:	b362      	cbz	r2, 8001f4e <stm_rx_callback+0x62>
	if (err != ERR_OK) {
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d132      	bne.n	8001f5e <stm_rx_callback+0x72>
 8001ef8:	460f      	mov	r7, r1
 8001efa:	4615      	mov	r5, r2
 8001efc:	4614      	mov	r4, r2
 8001efe:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001f9c <stm_rx_callback+0xb0>
	for (q = p; q != NULL; q = q->next) {
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f02:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001fa0 <stm_rx_callback+0xb4>
				flash_memptr = 0;
				printf("Flash Write failed from http client\n");
				return (-1);
			}
		}
		down_total += q->len;
 8001f06:	4e20      	ldr	r6, [pc, #128]	; (8001f88 <stm_rx_callback+0x9c>)
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f08:	f8d8 b000 	ldr.w	fp, [r8]
		count += q->len;
 8001f0c:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f10:	f1bb 0f00 	cmp.w	fp, #0
 8001f14:	d10b      	bne.n	8001f2e <stm_rx_callback+0x42>
 8001f16:	f8d9 3000 	ldr.w	r3, [r9]
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001f1a:	4652      	mov	r2, sl
 8001f1c:	2101      	movs	r1, #1
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f1e:	b133      	cbz	r3, 8001f2e <stm_rx_callback+0x42>
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001f20:	6860      	ldr	r0, [r4, #4]
 8001f22:	f7ff f83f 	bl	8000fa4 <flash_memwrite>
 8001f26:	4582      	cmp	sl, r0
 8001f28:	d121      	bne.n	8001f6e <stm_rx_callback+0x82>
		down_total += q->len;
 8001f2a:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
 8001f2e:	6833      	ldr	r3, [r6, #0]

		altcp_recved(pcb, p->tot_len);
 8001f30:	4638      	mov	r0, r7
 8001f32:	8929      	ldrh	r1, [r5, #8]
		down_total += q->len;
 8001f34:	4453      	add	r3, sl
 8001f36:	6033      	str	r3, [r6, #0]
		altcp_recved(pcb, p->tot_len);
 8001f38:	f01a ff82 	bl	801ce40 <tcp_recved>
		pbuf_free(p);
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f01a faff 	bl	801c540 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 8001f42:	6824      	ldr	r4, [r4, #0]
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	d1df      	bne.n	8001f08 <stm_rx_callback+0x1c>

//		p = p->next;
//		printf("stm_rx_callback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
	return (0);
 8001f48:	2000      	movs	r0, #0
}
 8001f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LWIP_ASSERT("p != NULL", p != NULL);
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <stm_rx_callback+0xa0>)
 8001f50:	2254      	movs	r2, #84	; 0x54
 8001f52:	490f      	ldr	r1, [pc, #60]	; (8001f90 <stm_rx_callback+0xa4>)
 8001f54:	480f      	ldr	r0, [pc, #60]	; (8001f94 <stm_rx_callback+0xa8>)
 8001f56:	f024 fbbd 	bl	80266d4 <iprintf>
	if (err != ERR_OK) {
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	d0f4      	beq.n	8001f48 <stm_rx_callback+0x5c>
		putchar('#');
 8001f5e:	2023      	movs	r0, #35	; 0x23
 8001f60:	f024 fbd0 	bl	8026704 <putchar>
		printlwiperr(err);
 8001f64:	4620      	mov	r0, r4
}
 8001f66:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 8001f6a:	f7ff be61 	b.w	8001c30 <printlwiperr>
				flash_abort = 1;
 8001f6e:	2301      	movs	r3, #1
				printf("Flash Write failed from http client\n");
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <stm_rx_callback+0xac>)
				flash_memptr = 0;
 8001f72:	f8c9 b000 	str.w	fp, [r9]
				flash_abort = 1;
 8001f76:	f8c8 3000 	str.w	r3, [r8]
				printf("Flash Write failed from http client\n");
 8001f7a:	f024 fc47 	bl	802680c <puts>
				return (-1);
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f86:	bf00      	nop
 8001f88:	20001690 	.word	0x20001690
 8001f8c:	0802ba90 	.word	0x0802ba90
 8001f90:	08046ce0 	.word	0x08046ce0
 8001f94:	0802b3cc 	.word	0x0802b3cc
 8001f98:	0802baac 	.word	0x0802baac
 8001f9c:	20000874 	.word	0x20000874
 8001fa0:	2000087c 	.word	0x2000087c

08001fa4 <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8001fa4:	2300      	movs	r3, #0
int wait_armtx(void) {
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8001faa:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8001fac:	9b01      	ldr	r3, [sp, #4]
 8001fae:	2b95      	cmp	r3, #149	; 0x95
 8001fb0:	dc0d      	bgt.n	8001fce <wait_armtx+0x2a>
 8001fb2:	4c0e      	ldr	r4, [pc, #56]	; (8001fec <wait_armtx+0x48>)
 8001fb4:	e007      	b.n	8001fc6 <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8001fb6:	9b01      	ldr	r3, [sp, #4]
 8001fb8:	4403      	add	r3, r0
 8001fba:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001fbc:	f014 fb0a 	bl	80165d4 <osDelay>
	while (timeoutcnt < 150) {
 8001fc0:	9b01      	ldr	r3, [sp, #4]
 8001fc2:	2b95      	cmp	r3, #149	; 0x95
 8001fc4:	dc03      	bgt.n	8001fce <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 8001fc6:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	4283      	cmp	r3, r0
 8001fcc:	d1f3      	bne.n	8001fb6 <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	2bf9      	cmp	r3, #249	; 0xf9
 8001fd2:	dc02      	bgt.n	8001fda <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 8001fd4:	2000      	movs	r0, #0
}
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <wait_armtx+0x4c>)
 8001fdc:	f024 fc16 	bl	802680c <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <wait_armtx+0x48>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	601a      	str	r2, [r3, #0]
		return (-1);
 8001fea:	e7f4      	b.n	8001fd6 <wait_armtx+0x32>
 8001fec:	20002178 	.word	0x20002178
 8001ff0:	0802bad0 	.word	0x0802bad0

08001ff4 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_UART_TxCpltCallback+0x14>)
 8001ffa:	6802      	ldr	r2, [r0, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d000      	beq.n	8002002 <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8002000:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 8002002:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_UART_TxCpltCallback+0x18>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40005000 	.word	0x40005000
 8002010:	20002178 	.word	0x20002178

08002014 <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 8002014:	b570      	push	{r4, r5, r6, lr}
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8002016:	4c1a      	ldr	r4, [pc, #104]	; (8002080 <lcd_uart_init+0x6c>)
	lcdrxoutidx = 0;		// buffer consumer index
 8002018:	2500      	movs	r5, #0
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <lcd_uart_init+0x70>)
void lcd_uart_init(int baud) {
 800201c:	b082      	sub	sp, #8
 800201e:	4606      	mov	r6, r0
	HAL_UART_Abort(&huart5);
 8002020:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8002022:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8002024:	f011 f890 	bl	8013148 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8002028:	4620      	mov	r0, r4
 800202a:	f010 ffdb 	bl	8012fe4 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800202e:	4a16      	ldr	r2, [pc, #88]	; (8002088 <lcd_uart_init+0x74>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002030:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002032:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8002034:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002038:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800203c:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002040:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002044:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002048:	f012 f878 	bl	801413c <HAL_UART_Init>
 800204c:	b958      	cbnz	r0, 8002066 <lcd_uart_init+0x52>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <lcd_uart_init+0x78>)
 8002052:	480b      	ldr	r0, [pc, #44]	; (8002080 <lcd_uart_init+0x6c>)
 8002054:	f012 fa62 	bl	801451c <HAL_UART_Receive_DMA>
 8002058:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 800205c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002060:	b933      	cbnz	r3, 8002070 <lcd_uart_init+0x5c>
		printf("lcd_uart_init: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 8002062:	b002      	add	sp, #8
 8002064:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 8002066:	4631      	mov	r1, r6
 8002068:	4809      	ldr	r0, [pc, #36]	; (8002090 <lcd_uart_init+0x7c>)
 800206a:	f024 fb33 	bl	80266d4 <iprintf>
 800206e:	e7ee      	b.n	800204e <lcd_uart_init+0x3a>
		printf("lcd_uart_init: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002070:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <lcd_uart_init+0x80>)
}
 8002076:	b002      	add	sp, #8
 8002078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_uart_init: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 800207c:	f024 bb2a 	b.w	80266d4 <iprintf>
 8002080:	20002bc4 	.word	0x20002bc4
 8002084:	20001b38 	.word	0x20001b38
 8002088:	40005000 	.word	0x40005000
 800208c:	20001970 	.word	0x20001970
 8002090:	0802bae4 	.word	0x0802bae4
 8002094:	0802bb14 	.word	0x0802bb14

08002098 <lcd_reset>:

// send reset command to LCD  (LCD's own init will start it again at 9600)
lcd_reset() {
 8002098:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <lcd_reset+0x48>)
lcd_reset() {
 800209c:	b083      	sub	sp, #12

	txdmadone = 0;	// TX is NOT free
 800209e:	4c11      	ldr	r4, [pc, #68]	; (80020e4 <lcd_reset+0x4c>)
 80020a0:	2500      	movs	r5, #0
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80020a2:	466b      	mov	r3, sp
	txdmadone = 0;	// TX is NOT free
 80020a4:	6025      	str	r5, [r4, #0]
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80020a6:	e892 0003 	ldmia.w	r2, {r0, r1}
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020aa:	2207      	movs	r2, #7
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80020ac:	e883 0003 	stmia.w	r3, {r0, r1}
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020b0:	4619      	mov	r1, r3
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <lcd_reset+0x50>)
 80020b4:	f010 fff2 	bl	801309c <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 80020b8:	b118      	cbz	r0, 80020c2 <lcd_reset+0x2a>
 80020ba:	e00b      	b.n	80020d4 <lcd_reset+0x3c>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
	}
	while (!(txdmadone)) {
//		printf("lcd_reset: waiting for txdmadone\n");
		osDelay(1);		// wait for comms to complete
 80020bc:	2001      	movs	r0, #1
 80020be:	f014 fa89 	bl	80165d4 <osDelay>
	while (!(txdmadone)) {
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f9      	beq.n	80020bc <lcd_reset+0x24>
	}
	osDelay(500);		// give it time to reset
 80020c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020cc:	f014 fa82 	bl	80165d4 <osDelay>
}
 80020d0:	b003      	add	sp, #12
 80020d2:	bd30      	pop	{r4, r5, pc}
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80020d4:	4601      	mov	r1, r0
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <lcd_reset+0x54>)
 80020d8:	f024 fafc 	bl	80266d4 <iprintf>
 80020dc:	e7f1      	b.n	80020c2 <lcd_reset+0x2a>
 80020de:	bf00      	nop
 80020e0:	0802bb78 	.word	0x0802bb78
 80020e4:	20002178 	.word	0x20002178
 80020e8:	20002bc4 	.word	0x20002bc4
 80020ec:	0802bb48 	.word	0x0802bb48

080020f0 <lcd_baud>:

// send baudrate command to LCD
lcd_baud(int baud) {
 80020f0:	b510      	push	{r4, lr}
 80020f2:	b088      	sub	sp, #32
	HAL_StatusTypeDef stat;
	char str[32];
	int i;

	txdmadone = 0;	// TX is NOT free
 80020f4:	2300      	movs	r3, #0
 80020f6:	4c0d      	ldr	r4, [pc, #52]	; (800212c <lcd_baud+0x3c>)
lcd_baud(int baud) {
 80020f8:	4602      	mov	r2, r0
	sprintf(str, "baud=%u\xff\xff\xff", baud);
 80020fa:	490d      	ldr	r1, [pc, #52]	; (8002130 <lcd_baud+0x40>)
 80020fc:	4668      	mov	r0, sp
	txdmadone = 0;	// TX is NOT free
 80020fe:	6023      	str	r3, [r4, #0]
	sprintf(str, "baud=%u\xff\xff\xff", baud);
 8002100:	f024 fcd2 	bl	8026aa8 <siprintf>
	i = strlen(str);
 8002104:	4668      	mov	r0, sp
 8002106:	f7fe f8a5 	bl	8000254 <strlen>
 800210a:	4602      	mov	r2, r0

	stat = HAL_UART_Transmit_DMA(&huart5, str, i);		// if leading nulls on tx line
 800210c:	4669      	mov	r1, sp
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <lcd_baud+0x44>)
 8002110:	b292      	uxth	r2, r2
 8002112:	f010 ffc3 	bl	801309c <HAL_UART_Transmit_DMA>
	while (!(txdmadone)) {
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	b92b      	cbnz	r3, 8002126 <lcd_baud+0x36>
//		printf("lcd_baud: waiting for txdmadone\n");
		osDelay(1);		// wait for comms to complete
 800211a:	2001      	movs	r0, #1
 800211c:	f014 fa5a 	bl	80165d4 <osDelay>
	while (!(txdmadone)) {
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f9      	beq.n	800211a <lcd_baud+0x2a>
	}
}
 8002126:	b008      	add	sp, #32
 8002128:	bd10      	pop	{r4, pc}
 800212a:	bf00      	nop
 800212c:	20002178 	.word	0x20002178
 8002130:	0802bb80 	.word	0x0802bb80
 8002134:	20002bc4 	.word	0x20002bc4

08002138 <lcd_writeblock>:
	}
	return (stat);
}

// send a binary block to the LCD
int lcd_writeblock(uint8_t *buf, int len) {
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	4605      	mov	r5, r0
 800213c:	460e      	mov	r6, r1
	HAL_StatusTypeDef stat;
	volatile int i;
	uint32_t reg;
	uint8_t by;

	if (wait_armtx() == -1)
 800213e:	f7ff ff31 	bl	8001fa4 <wait_armtx>
 8002142:	4604      	mov	r4, r0
 8002144:	3001      	adds	r0, #1
 8002146:	d009      	beq.n	800215c <lcd_writeblock+0x24>
		return (-1);
//	printf("lcd_writeblock: %d\n", len);
	txdmadone = 0;	// TX in progress
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <lcd_writeblock+0x34>)
 800214a:	2400      	movs	r4, #0

//	myhexDump("NXT:", buf, len);

	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 800214c:	b2b2      	uxth	r2, r6
 800214e:	4629      	mov	r1, r5
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <lcd_writeblock+0x38>)
	txdmadone = 0;	// TX in progress
 8002152:	601c      	str	r4, [r3, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 8002154:	f010 ffa2 	bl	801309c <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002158:	4604      	mov	r4, r0
	if (stat != HAL_OK) {
 800215a:	b908      	cbnz	r0, 8002160 <lcd_writeblock+0x28>
	}
	return (stat);
}
 800215c:	4620      	mov	r0, r4
 800215e:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002160:	4621      	mov	r1, r4
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <lcd_writeblock+0x3c>)
 8002164:	f024 fab6 	bl	80266d4 <iprintf>
}
 8002168:	4620      	mov	r0, r4
 800216a:	bd70      	pop	{r4, r5, r6, pc}
 800216c:	20002178 	.word	0x20002178
 8002170:	20002bc4 	.word	0x20002bc4
 8002174:	0802bb8c 	.word	0x0802bb8c

08002178 <lcd_puts>:

// put a null terminated string
int lcd_puts(char *str) {
 8002178:	b530      	push	{r4, r5, lr}
 800217a:	b083      	sub	sp, #12
 800217c:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 800217e:	f7ff ff11 	bl	8001fa4 <wait_armtx>
 8002182:	4605      	mov	r5, r0
 8002184:	3001      	adds	r0, #1
 8002186:	d01d      	beq.n	80021c4 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	4813      	ldr	r0, [pc, #76]	; (80021d8 <lcd_puts+0x60>)
 800218c:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800218e:	9b01      	ldr	r3, [sp, #4]
 8002190:	5ce3      	ldrb	r3, [r4, r3]
 8002192:	b153      	cbz	r3, 80021aa <lcd_puts+0x32>
		buffer[i] = str[i];
 8002194:	9901      	ldr	r1, [sp, #4]
 8002196:	9a01      	ldr	r2, [sp, #4]
		i++;
 8002198:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 800219a:	5c61      	ldrb	r1, [r4, r1]
		i++;
 800219c:	3301      	adds	r3, #1
		buffer[i] = str[i];
 800219e:	5481      	strb	r1, [r0, r2]
		i++;
 80021a0:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80021a2:	9b01      	ldr	r3, [sp, #4]
 80021a4:	5ce3      	ldrb	r3, [r4, r3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f4      	bne.n	8002194 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 80021aa:	9901      	ldr	r1, [sp, #4]
 80021ac:	2300      	movs	r3, #0

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021ae:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 80021b0:	4c0a      	ldr	r4, [pc, #40]	; (80021dc <lcd_puts+0x64>)
	buffer[i] = '\0';
 80021b2:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021b4:	b292      	uxth	r2, r2
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <lcd_puts+0x60>)
 80021b8:	4809      	ldr	r0, [pc, #36]	; (80021e0 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 80021ba:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021bc:	f010 ff6e 	bl	801309c <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80021c0:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 80021c2:	b910      	cbnz	r0, 80021ca <lcd_puts+0x52>
	}
	return (stat);
}
 80021c4:	4628      	mov	r0, r5
 80021c6:	b003      	add	sp, #12
 80021c8:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80021ca:	4629      	mov	r1, r5
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <lcd_puts+0x6c>)
 80021ce:	f024 fa81 	bl	80266d4 <iprintf>
}
 80021d2:	4628      	mov	r0, r5
 80021d4:	b003      	add	sp, #12
 80021d6:	bd30      	pop	{r4, r5, pc}
 80021d8:	20001910 	.word	0x20001910
 80021dc:	20002178 	.word	0x20002178
 80021e0:	20002bc4 	.word	0x20002bc4
 80021e4:	0802bbc0 	.word	0x0802bbc0

080021e8 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 80021e8:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 80021ea:	2300      	movs	r3, #0
int lcd_rxdma() {
 80021ec:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <lcd_rxdma+0x64>)
	volatile int count = 0;
 80021f0:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 80021f2:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80021f4:	6953      	ldr	r3, [r2, #20]
 80021f6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80021fa:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 80021fc:	9a01      	ldr	r2, [sp, #4]
 80021fe:	2a80      	cmp	r2, #128	; 0x80
 8002200:	d016      	beq.n	8002230 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002202:	4d13      	ldr	r5, [pc, #76]	; (8002250 <lcd_rxdma+0x68>)
 8002204:	9a01      	ldr	r2, [sp, #4]
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	4293      	cmp	r3, r2
 800220a:	d00e      	beq.n	800222a <lcd_rxdma+0x42>
 800220c:	4c11      	ldr	r4, [pc, #68]	; (8002254 <lcd_rxdma+0x6c>)
 800220e:	4812      	ldr	r0, [pc, #72]	; (8002258 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8002210:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 8002212:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8002214:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 8002216:	3301      	adds	r3, #1
		count++;
 8002218:	3201      	adds	r2, #1
		return (0);
 800221a:	2b80      	cmp	r3, #128	; 0x80
		count++;
 800221c:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800221e:	9a01      	ldr	r2, [sp, #4]
		return (0);
 8002220:	bfa8      	it	ge
 8002222:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002224:	429a      	cmp	r2, r3
 8002226:	d1f3      	bne.n	8002210 <lcd_rxdma+0x28>
 8002228:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 800222a:	9800      	ldr	r0, [sp, #0]
}
 800222c:	b003      	add	sp, #12
 800222e:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 8002230:	4909      	ldr	r1, [pc, #36]	; (8002258 <lcd_rxdma+0x70>)
 8002232:	480a      	ldr	r0, [pc, #40]	; (800225c <lcd_rxdma+0x74>)
 8002234:	f012 f972 	bl	801451c <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 8002238:	b910      	cbnz	r0, 8002240 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 800223a:	2300      	movs	r3, #0
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	e7e0      	b.n	8002202 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002240:	4601      	mov	r1, r0
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <lcd_rxdma+0x78>)
 8002244:	f024 fa46 	bl	80266d4 <iprintf>
 8002248:	e7f7      	b.n	800223a <lcd_rxdma+0x52>
 800224a:	bf00      	nop
 800224c:	40026000 	.word	0x40026000
 8002250:	20001b38 	.word	0x20001b38
 8002254:	20001ab8 	.word	0x20001ab8
 8002258:	20001970 	.word	0x20001970
 800225c:	20002bc4 	.word	0x20002bc4
 8002260:	0802bbf0 	.word	0x0802bbf0

08002264 <lcd_getc>:
int lcd_getc() {
	volatile static int lastidx = 0;
	int ch;

	ch = -1;
	if (lastidx != lcdrxoutidx) {		// something there
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <lcd_getc+0x34>)
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <lcd_getc+0x38>)
 8002268:	6811      	ldr	r1, [r2, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4299      	cmp	r1, r3
 800226e:	d00f      	beq.n	8002290 <lcd_getc+0x2c>
		ch = lcdrxbuffer[lastidx];
 8002270:	6810      	ldr	r0, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002272:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 8002274:	490a      	ldr	r1, [pc, #40]	; (80022a0 <lcd_getc+0x3c>)
	if (++index >= limit)
 8002276:	3301      	adds	r3, #1
		return (0);
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	bfa8      	it	ge
 800227c:	2300      	movge	r3, #0
int lcd_getc() {
 800227e:	b410      	push	{r4}
		ch = lcdrxbuffer[lastidx];
 8002280:	4c08      	ldr	r4, [pc, #32]	; (80022a4 <lcd_getc+0x40>)
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002282:	6013      	str	r3, [r2, #0]
		rxtimeout = 100;
 8002284:	2364      	movs	r3, #100	; 0x64
		ch = lcdrxbuffer[lastidx];
 8002286:	5c20      	ldrb	r0, [r4, r0]
//  printf("lcd_getc() got %02x\n", ch);
	}

	return (ch);
}
 8002288:	f85d 4b04 	ldr.w	r4, [sp], #4
		rxtimeout = 100;
 800228c:	600b      	str	r3, [r1, #0]
}
 800228e:	4770      	bx	lr
	ch = -1;
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20001a80 	.word	0x20001a80
 800229c:	20001b38 	.word	0x20001b38
 80022a0:	20001f38 	.word	0x20001f38
 80022a4:	20001ab8 	.word	0x20001ab8

080022a8 <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 80022a8:	b510      	push	{r4, lr}
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	if (lcd_txblocked)
 80022aa:	4c0b      	ldr	r4, [pc, #44]	; (80022d8 <writelcdcmd+0x30>)
int writelcdcmd(char *str) {
 80022ac:	b098      	sub	sp, #96	; 0x60
	if (lcd_txblocked)
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	b973      	cbnz	r3, 80022d0 <writelcdcmd+0x28>
		return (-1);

	strcpy(pkt, str);
 80022b2:	4601      	mov	r1, r0
 80022b4:	4668      	mov	r0, sp
 80022b6:	f024 fc88 	bl	8026bca <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80022ba:	4908      	ldr	r1, [pc, #32]	; (80022dc <writelcdcmd+0x34>)
	strcpy(pkt, str);
 80022bc:	4602      	mov	r2, r0
	if (!(lcd_txblocked))
 80022be:	6823      	ldr	r3, [r4, #0]
	strcat(pkt, "\xff\xff\xff");
 80022c0:	6808      	ldr	r0, [r1, #0]
 80022c2:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80022c4:	b923      	cbnz	r3, 80022d0 <writelcdcmd+0x28>
		return (lcd_puts(pkt));
 80022c6:	4668      	mov	r0, sp
 80022c8:	f7ff ff56 	bl	8002178 <lcd_puts>
	else
		return (-1);
}
 80022cc:	b018      	add	sp, #96	; 0x60
 80022ce:	bd10      	pop	{r4, pc}
		return (-1);
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	e7fa      	b.n	80022cc <writelcdcmd+0x24>
 80022d6:	bf00      	nop
 80022d8:	20001a90 	.word	0x20001a90
 80022dc:	0802bb7c 	.word	0x0802bb7c

080022e0 <lcd_gps.part.0>:
	static uint32_t oldcol = 0;

	if (our_currentpage != 0)
		return;

	if (gpslocked) {
 80022e0:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <lcd_gps.part.0+0x1c0>)
void lcd_gps(void) {
 80022e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e6:	ed2d 8b04 	vpush	{d8-d9}
	if (gpslocked) {
 80022ea:	781d      	ldrb	r5, [r3, #0]
void lcd_gps(void) {
 80022ec:	b0b6      	sub	sp, #216	; 0xd8
	if (gpslocked) {
 80022ee:	2d00      	cmp	r5, #0
 80022f0:	f000 8081 	beq.w	80023f6 <lcd_gps.part.0+0x116>
		lat = statuspkt.NavPvt.lat / 10000000.0;
 80022f4:	4d6b      	ldr	r5, [pc, #428]	; (80024a4 <lcd_gps.part.0+0x1c4>)
		lon = statuspkt.NavPvt.lon / 10000000.0;
		calcLocator(gridsquare, lat, lon);
 80022f6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
		sprintf(str, "Lat: %.06f\\rLon: %.06f\\rGrid: %s", lat, lon, gridsquare);
 80022fa:	ae0e      	add	r6, sp, #56	; 0x38
	sprintf(str, "%s=\"%s\"", id, string);
 80022fc:	ac1e      	add	r4, sp, #120	; 0x78
		lat = statuspkt.NavPvt.lat / 10000000.0;
 80022fe:	ed95 7a08 	vldr	s14, [r5, #32]
		calcLocator(gridsquare, lat, lon);
 8002302:	4640      	mov	r0, r8
	volatile int result = 0;
 8002304:	2700      	movs	r7, #0
		lat = statuspkt.NavPvt.lat / 10000000.0;
 8002306:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800230a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002490 <lcd_gps.part.0+0x1b0>
 800230e:	ee87 9b06 	vdiv.f64	d9, d7, d6
		lon = statuspkt.NavPvt.lon / 10000000.0;
 8002312:	ed95 7a07 	vldr	s14, [r5, #28]
 8002316:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800231a:	ee87 8b06 	vdiv.f64	d8, d7, d6
		calcLocator(gridsquare, lat, lon);
 800231e:	eeb0 0b49 	vmov.f64	d0, d9
 8002322:	eeb0 1b48 	vmov.f64	d1, d8
 8002326:	f003 fad3 	bl	80058d0 <calcLocator>
		sprintf(str, "Lat: %.06f\\rLon: %.06f\\rGrid: %s", lat, lon, gridsquare);
 800232a:	495f      	ldr	r1, [pc, #380]	; (80024a8 <lcd_gps.part.0+0x1c8>)
 800232c:	4630      	mov	r0, r6
 800232e:	f8cd 8008 	str.w	r8, [sp, #8]
 8002332:	ec53 2b19 	vmov	r2, r3, d9
 8002336:	ed8d 8b00 	vstr	d8, [sp]
 800233a:	f024 fbb5 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800233e:	4633      	mov	r3, r6
 8002340:	4a5a      	ldr	r2, [pc, #360]	; (80024ac <lcd_gps.part.0+0x1cc>)
 8002342:	4620      	mov	r0, r4
 8002344:	495a      	ldr	r1, [pc, #360]	; (80024b0 <lcd_gps.part.0+0x1d0>)
	volatile int result = 0;
 8002346:	9705      	str	r7, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002348:	f024 fbae 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff ffab 	bl	80022a8 <writelcdcmd>
 8002352:	9005      	str	r0, [sp, #20]
	return (result);
 8002354:	9b05      	ldr	r3, [sp, #20]
		setlcdtext("t2.txt", str);

		acc = statuspkt.NavPvt.hAcc / 1000.0;

		sprintf(str,"HAcc:%.02fm\\rPres:%d.%03d",acc,pressure, pressfrac>>2);
 8002356:	4630      	mov	r0, r6
		acc = statuspkt.NavPvt.hAcc / 1000.0;
 8002358:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
		sprintf(str,"HAcc:%.02fm\\rPres:%d.%03d",acc,pressure, pressfrac>>2);
 800235c:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <lcd_gps.part.0+0x1d4>)
		acc = statuspkt.NavPvt.hAcc / 1000.0;
 800235e:	eeb8 7b47 	vcvt.f64.u32	d7, s14
		sprintf(str,"HAcc:%.02fm\\rPres:%d.%03d",acc,pressure, pressfrac>>2);
 8002362:	4955      	ldr	r1, [pc, #340]	; (80024b8 <lcd_gps.part.0+0x1d8>)
 8002364:	681b      	ldr	r3, [r3, #0]
		acc = statuspkt.NavPvt.hAcc / 1000.0;
 8002366:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8002498 <lcd_gps.part.0+0x1b8>
		sprintf(str,"HAcc:%.02fm\\rPres:%d.%03d",acc,pressure, pressfrac>>2);
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	4b52      	ldr	r3, [pc, #328]	; (80024bc <lcd_gps.part.0+0x1dc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	ec53 2b17 	vmov	r2, r3, d7
 800237c:	f024 fb94 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002380:	4633      	mov	r3, r6
 8002382:	4a4f      	ldr	r2, [pc, #316]	; (80024c0 <lcd_gps.part.0+0x1e0>)
 8002384:	4620      	mov	r0, r4
 8002386:	494a      	ldr	r1, [pc, #296]	; (80024b0 <lcd_gps.part.0+0x1d0>)
	volatile int result = 0;
 8002388:	9704      	str	r7, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 800238a:	f024 fb8d 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 800238e:	4620      	mov	r0, r4
 8002390:	f7ff ff8a 	bl	80022a8 <writelcdcmd>
 8002394:	9004      	str	r0, [sp, #16]
	return (result);
 8002396:	9b04      	ldr	r3, [sp, #16]
		setlcdtext("t2.txt", "");
		setlcdtext("t5.txt", "");
	}

	// number of satellites
	sats = statuspkt.NavPvt.numSV;
 8002398:	7eed      	ldrb	r5, [r5, #27]

	sprintf(str, "Sats:%u", sats);
 800239a:	4630      	mov	r0, r6
 800239c:	4949      	ldr	r1, [pc, #292]	; (80024c4 <lcd_gps.part.0+0x1e4>)
	sats = statuspkt.NavPvt.numSV;
 800239e:	b2ed      	uxtb	r5, r5
	sprintf(str, "Sats:%u", sats);
 80023a0:	462a      	mov	r2, r5
 80023a2:	f024 fb81 	bl	8026aa8 <siprintf>
	volatile int result = 0;
 80023a6:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 80023a8:	4633      	mov	r3, r6
 80023aa:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <lcd_gps.part.0+0x1e8>)
	volatile int result = 0;
 80023ac:	9108      	str	r1, [sp, #32]
	sprintf(str, "%s=\"%s\"", id, string);
 80023ae:	4620      	mov	r0, r4
 80023b0:	493f      	ldr	r1, [pc, #252]	; (80024b0 <lcd_gps.part.0+0x1d0>)
 80023b2:	f024 fb79 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff ff76 	bl	80022a8 <writelcdcmd>
	setlcdtext("t4.txt", str);
	if (sats < 4)
 80023bc:	2d03      	cmp	r5, #3
	result = writelcdcmd(str);
 80023be:	9008      	str	r0, [sp, #32]
	return (result);
 80023c0:	9b08      	ldr	r3, [sp, #32]
	if (sats < 4)
 80023c2:	d934      	bls.n	800242e <lcd_gps.part.0+0x14e>
		col = 0xf800;		// red
	else if (sats < 6)
 80023c4:	2d05      	cmp	r5, #5
 80023c6:	d84a      	bhi.n	800245e <lcd_gps.part.0+0x17e>
		col = 0xf6c0;		// dark yellow
	else
		col = 0xffff;		// white
	if (oldcol != col) {
 80023c8:	4f40      	ldr	r7, [pc, #256]	; (80024cc <lcd_gps.part.0+0x1ec>)
		col = 0xf6c0;		// dark yellow
 80023ca:	f24f 66c0 	movw	r6, #63168	; 0xf6c0
	if (oldcol != col) {
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	42b3      	cmp	r3, r6
 80023d2:	d132      	bne.n	800243a <lcd_gps.part.0+0x15a>
		setlcdbin("t4.pco", col);
		oldcol = col;
	}

	if (sats < 5) {
 80023d4:	2d04      	cmp	r5, #4
 80023d6:	d848      	bhi.n	800246a <lcd_gps.part.0+0x18a>
		if (vis++ & 1)
 80023d8:	4a3d      	ldr	r2, [pc, #244]	; (80024d0 <lcd_gps.part.0+0x1f0>)
 80023da:	7813      	ldrb	r3, [r2, #0]
 80023dc:	1c59      	adds	r1, r3, #1
 80023de:	07db      	lsls	r3, r3, #31
			writelcdcmd("vis t4,1");		// flashing
 80023e0:	bf4c      	ite	mi
 80023e2:	483c      	ldrmi	r0, [pc, #240]	; (80024d4 <lcd_gps.part.0+0x1f4>)
		else
			writelcdcmd("vis t4,0");
 80023e4:	483c      	ldrpl	r0, [pc, #240]	; (80024d8 <lcd_gps.part.0+0x1f8>)
		if (vis++ & 1)
 80023e6:	7011      	strb	r1, [r2, #0]
			writelcdcmd("vis t4,0");
 80023e8:	f7ff ff5e 	bl	80022a8 <writelcdcmd>
		if (oldsats != sats) {
			writelcdcmd("vis t4,1");
			oldsats = sats;
		}
	}
}
 80023ec:	b036      	add	sp, #216	; 0xd8
 80023ee:	ecbd 8b04 	vpop	{d8-d9}
 80023f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sprintf(str, "%s=\"%s\"", id, string);
 80023f6:	ac1e      	add	r4, sp, #120	; 0x78
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <lcd_gps.part.0+0x1fc>)
 80023fa:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <lcd_gps.part.0+0x1cc>)
 80023fc:	ae0e      	add	r6, sp, #56	; 0x38
 80023fe:	492c      	ldr	r1, [pc, #176]	; (80024b0 <lcd_gps.part.0+0x1d0>)
 8002400:	4620      	mov	r0, r4
	volatile int result = 0;
 8002402:	9507      	str	r5, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 8002404:	f024 fb50 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff ff4d 	bl	80022a8 <writelcdcmd>
 800240e:	9007      	str	r0, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <lcd_gps.part.0+0x1fc>)
 8002412:	4620      	mov	r0, r4
	return (result);
 8002414:	9907      	ldr	r1, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 8002416:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <lcd_gps.part.0+0x1e0>)
 8002418:	4925      	ldr	r1, [pc, #148]	; (80024b0 <lcd_gps.part.0+0x1d0>)
	volatile int result = 0;
 800241a:	9506      	str	r5, [sp, #24]
	sprintf(str, "%s=\"%s\"", id, string);
 800241c:	f024 fb44 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002420:	4620      	mov	r0, r4
 8002422:	4d20      	ldr	r5, [pc, #128]	; (80024a4 <lcd_gps.part.0+0x1c4>)
 8002424:	f7ff ff40 	bl	80022a8 <writelcdcmd>
 8002428:	9006      	str	r0, [sp, #24]
	return (result);
 800242a:	9b06      	ldr	r3, [sp, #24]
 800242c:	e7b4      	b.n	8002398 <lcd_gps.part.0+0xb8>
	if (oldcol != col) {
 800242e:	4f27      	ldr	r7, [pc, #156]	; (80024cc <lcd_gps.part.0+0x1ec>)
		col = 0xf800;		// red
 8002430:	f44f 4678 	mov.w	r6, #63488	; 0xf800
	if (oldcol != col) {
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	42b3      	cmp	r3, r6
 8002438:	d0cc      	beq.n	80023d4 <lcd_gps.part.0+0xf4>
	sprintf(buffer, "%s=%lu", id, value);
 800243a:	4633      	mov	r3, r6
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <lcd_gps.part.0+0x200>)
 800243e:	4929      	ldr	r1, [pc, #164]	; (80024e4 <lcd_gps.part.0+0x204>)
 8002440:	4620      	mov	r0, r4
 8002442:	f024 fb31 	bl	8026aa8 <siprintf>
	result = writelcdcmd(buffer);
 8002446:	4620      	mov	r0, r4
 8002448:	f7ff ff2e 	bl	80022a8 <writelcdcmd>
 800244c:	9009      	str	r0, [sp, #36]	; 0x24
	if (result == -1) {		// wait for response
 800244e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002450:	3301      	adds	r3, #1
 8002452:	d017      	beq.n	8002484 <lcd_gps.part.0+0x1a4>
	if (sats < 5) {
 8002454:	2d04      	cmp	r5, #4
	return (result);
 8002456:	9b09      	ldr	r3, [sp, #36]	; 0x24
		oldcol = col;
 8002458:	603e      	str	r6, [r7, #0]
	if (sats < 5) {
 800245a:	d9bd      	bls.n	80023d8 <lcd_gps.part.0+0xf8>
 800245c:	e005      	b.n	800246a <lcd_gps.part.0+0x18a>
	if (oldcol != col) {
 800245e:	4f1b      	ldr	r7, [pc, #108]	; (80024cc <lcd_gps.part.0+0x1ec>)
 8002460:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	42b3      	cmp	r3, r6
 8002468:	d1e7      	bne.n	800243a <lcd_gps.part.0+0x15a>
		if (oldsats != sats) {
 800246a:	4c1f      	ldr	r4, [pc, #124]	; (80024e8 <lcd_gps.part.0+0x208>)
 800246c:	7823      	ldrb	r3, [r4, #0]
 800246e:	42ab      	cmp	r3, r5
 8002470:	d0bc      	beq.n	80023ec <lcd_gps.part.0+0x10c>
			writelcdcmd("vis t4,1");
 8002472:	4818      	ldr	r0, [pc, #96]	; (80024d4 <lcd_gps.part.0+0x1f4>)
 8002474:	f7ff ff18 	bl	80022a8 <writelcdcmd>
			oldsats = sats;
 8002478:	7025      	strb	r5, [r4, #0]
}
 800247a:	b036      	add	sp, #216	; 0xd8
 800247c:	ecbd 8b04 	vpop	{d8-d9}
 8002480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8002484:	4819      	ldr	r0, [pc, #100]	; (80024ec <lcd_gps.part.0+0x20c>)
 8002486:	f024 f925 	bl	80266d4 <iprintf>
 800248a:	e7e3      	b.n	8002454 <lcd_gps.part.0+0x174>
 800248c:	f3af 8000 	nop.w
 8002490:	00000000 	.word	0x00000000
 8002494:	416312d0 	.word	0x416312d0
 8002498:	00000000 	.word	0x00000000
 800249c:	408f4000 	.word	0x408f4000
 80024a0:	200034a8 	.word	0x200034a8
 80024a4:	2000303c 	.word	0x2000303c
 80024a8:	0802bc20 	.word	0x0802bc20
 80024ac:	0802bc44 	.word	0x0802bc44
 80024b0:	0802bc4c 	.word	0x0802bc4c
 80024b4:	20003434 	.word	0x20003434
 80024b8:	0802bc54 	.word	0x0802bc54
 80024bc:	20003438 	.word	0x20003438
 80024c0:	0802bc70 	.word	0x0802bc70
 80024c4:	0802bc78 	.word	0x0802bc78
 80024c8:	0802bc80 	.word	0x0802bc80
 80024cc:	20001d48 	.word	0x20001d48
 80024d0:	2000217c 	.word	0x2000217c
 80024d4:	0802bcb0 	.word	0x0802bcb0
 80024d8:	0802bcbc 	.word	0x0802bcbc
 80024dc:	0802b630 	.word	0x0802b630
 80024e0:	0802bc88 	.word	0x0802bc88
 80024e4:	0802bc90 	.word	0x0802bc90
 80024e8:	20001d4c 	.word	0x20001d4c
 80024ec:	0802bc98 	.word	0x0802bc98

080024f0 <lcd_clearrxbuf>:
lcd_clearrxbuf() {
 80024f0:	b510      	push	{r4, lr}
	lcd_rxdma();			// clear the dma rx buffer
 80024f2:	f7ff fe79 	bl	80021e8 <lcd_rxdma>
	if (lastidx != lcdrxoutidx) {		// something there
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <lcd_clearrxbuf+0x40>)
 80024f8:	490e      	ldr	r1, [pc, #56]	; (8002534 <lcd_clearrxbuf+0x44>)
 80024fa:	6813      	ldr	r3, [r2, #0]
 80024fc:	6809      	ldr	r1, [r1, #0]
 80024fe:	428b      	cmp	r3, r1
 8002500:	d014      	beq.n	800252c <lcd_clearrxbuf+0x3c>
		ch = lcdrxbuffer[lastidx];
 8002502:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 8002504:	2464      	movs	r4, #100	; 0x64
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002506:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 8002508:	480b      	ldr	r0, [pc, #44]	; (8002538 <lcd_clearrxbuf+0x48>)
	if (++index >= limit)
 800250a:	3301      	adds	r3, #1
		rxtimeout = 100;
 800250c:	6004      	str	r4, [r0, #0]
		return (0);
 800250e:	2b80      	cmp	r3, #128	; 0x80
 8002510:	bfa8      	it	ge
 8002512:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002514:	6013      	str	r3, [r2, #0]
	while (result != -1) {
 8002516:	e006      	b.n	8002526 <lcd_clearrxbuf+0x36>
		ch = lcdrxbuffer[lastidx];
 8002518:	6813      	ldr	r3, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800251a:	6813      	ldr	r3, [r2, #0]
	if (++index >= limit)
 800251c:	3301      	adds	r3, #1
		return (0);
 800251e:	2b80      	cmp	r3, #128	; 0x80
 8002520:	bfa8      	it	ge
 8002522:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002524:	6013      	str	r3, [r2, #0]
	if (lastidx != lcdrxoutidx) {		// something there
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	4299      	cmp	r1, r3
 800252a:	d1f5      	bne.n	8002518 <lcd_clearrxbuf+0x28>
}
 800252c:	bd10      	pop	{r4, pc}
 800252e:	bf00      	nop
 8002530:	20001a80 	.word	0x20001a80
 8002534:	20001b38 	.word	0x20001b38
 8002538:	20001f38 	.word	0x20001f38

0800253c <isnexpkt>:
int isnexpkt(unsigned char buffer[], uint8_t size) {
 800253c:	b530      	push	{r4, r5, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <isnexpkt+0xd0>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8002540:	b083      	sub	sp, #12
	if (lastidx != lcdrxoutidx) {		// something there
 8002542:	4c33      	ldr	r4, [pc, #204]	; (8002610 <isnexpkt+0xd4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6822      	ldr	r2, [r4, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d05d      	beq.n	8002608 <isnexpkt+0xcc>
		ch = lcdrxbuffer[lastidx];
 800254c:	6825      	ldr	r5, [r4, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800254e:	6823      	ldr	r3, [r4, #0]
		rxtimeout = 100;
 8002550:	4a30      	ldr	r2, [pc, #192]	; (8002614 <isnexpkt+0xd8>)
	if (++index >= limit)
 8002552:	3301      	adds	r3, #1
		return (0);
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	bfa8      	it	ge
 8002558:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800255a:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 800255c:	2364      	movs	r3, #100	; 0x64
		buffer[i++] = ch;
 800255e:	4c2e      	ldr	r4, [pc, #184]	; (8002618 <isnexpkt+0xdc>)
		rxtimeout = 100;
 8002560:	6013      	str	r3, [r2, #0]
		ch = lcdrxbuffer[lastidx];
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <isnexpkt+0xe0>)
 8002564:	5d5b      	ldrb	r3, [r3, r5]
		ch = rawchar & 0xff;
 8002566:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 800256a:	7823      	ldrb	r3, [r4, #0]
 800256c:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002570:	54c5      	strb	r5, [r0, r3]
 8002572:	3301      	adds	r3, #1
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 8002574:	4d2a      	ldr	r5, [pc, #168]	; (8002620 <isnexpkt+0xe4>)
		buffer[i++] = ch;
 8002576:	b2db      	uxtb	r3, r3
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 8002578:	682d      	ldr	r5, [r5, #0]
		buffer[i++] = ch;
 800257a:	7023      	strb	r3, [r4, #0]
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 800257c:	2d03      	cmp	r5, #3
 800257e:	d02c      	beq.n	80025da <isnexpkt+0x9e>
		if (ch == 0xff) {
 8002580:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002584:	2dff      	cmp	r5, #255	; 0xff
 8002586:	d02e      	beq.n	80025e6 <isnexpkt+0xaa>
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8002588:	f89d c007 	ldrb.w	ip, [sp, #7]
 800258c:	4d25      	ldr	r5, [pc, #148]	; (8002624 <isnexpkt+0xe8>)
 800258e:	f885 c000 	strb.w	ip, [r5]
			termcnt = 0;
 8002592:	f04f 0c00 	mov.w	ip, #0
 8002596:	4d24      	ldr	r5, [pc, #144]	; (8002628 <isnexpkt+0xec>)
 8002598:	f885 c000 	strb.w	ip, [r5]
		if (i == size) { // overrun
 800259c:	428b      	cmp	r3, r1
 800259e:	d102      	bne.n	80025a6 <isnexpkt+0x6a>
			i = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 80025a4:	702b      	strb	r3, [r5, #0]
	if (rxtimeout > 0)
 80025a6:	6813      	ldr	r3, [r2, #0]
 80025a8:	b97b      	cbnz	r3, 80025ca <isnexpkt+0x8e>
		termcnt = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <isnexpkt+0xec>)
		for (i = 0; i < size; buffer[i++] = 0)
 80025ae:	4c1a      	ldr	r4, [pc, #104]	; (8002618 <isnexpkt+0xdc>)
		termcnt = 0;
 80025b0:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 80025b2:	7023      	strb	r3, [r4, #0]
 80025b4:	b119      	cbz	r1, 80025be <isnexpkt+0x82>
 80025b6:	460a      	mov	r2, r1
 80025b8:	4619      	mov	r1, r3
 80025ba:	f023 f8ed 	bl	8025798 <memset>
		i = 0;
 80025be:	2300      	movs	r3, #0
		return (-1);
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 80025c4:	7023      	strb	r3, [r4, #0]
}
 80025c6:	b003      	add	sp, #12
 80025c8:	bd30      	pop	{r4, r5, pc}
		rxtimeout--;
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6013      	str	r3, [r2, #0]
	if (rxtimeout == 0) {
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0eb      	beq.n	80025aa <isnexpkt+0x6e>
	return (-2);  // no char available
 80025d2:	f06f 0001 	mvn.w	r0, #1
}
 80025d6:	b003      	add	sp, #12
 80025d8:	bd30      	pop	{r4, r5, pc}
			if (ch == 0x05) {
 80025da:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80025de:	2d05      	cmp	r5, #5
 80025e0:	d1ce      	bne.n	8002580 <isnexpkt+0x44>
				index = i;
 80025e2:	4618      	mov	r0, r3
				return (index);
 80025e4:	e7ef      	b.n	80025c6 <isnexpkt+0x8a>
			termcnt++;
 80025e6:	4d10      	ldr	r5, [pc, #64]	; (8002628 <isnexpkt+0xec>)
 80025e8:	f895 c000 	ldrb.w	ip, [r5]
 80025ec:	f10c 0c01 	add.w	ip, ip, #1
 80025f0:	fa5f fc8c 	uxtb.w	ip, ip
			if (termcnt == 3) {
 80025f4:	f1bc 0f03 	cmp.w	ip, #3
			termcnt++;
 80025f8:	f885 c000 	strb.w	ip, [r5]
			if (termcnt == 3) {
 80025fc:	d1ce      	bne.n	800259c <isnexpkt+0x60>
				i = 0;
 80025fe:	2200      	movs	r2, #0
				index = i;
 8002600:	4618      	mov	r0, r3
				i = 0;
 8002602:	7022      	strb	r2, [r4, #0]
				termcnt = 0;
 8002604:	702a      	strb	r2, [r5, #0]
				return (index);
 8002606:	e7de      	b.n	80025c6 <isnexpkt+0x8a>
 8002608:	4a02      	ldr	r2, [pc, #8]	; (8002614 <isnexpkt+0xd8>)
 800260a:	e7cc      	b.n	80025a6 <isnexpkt+0x6a>
 800260c:	20001b38 	.word	0x20001b38
 8002610:	20001a80 	.word	0x20001a80
 8002614:	20001f38 	.word	0x20001f38
 8002618:	20001a74 	.word	0x20001a74
 800261c:	20001ab8 	.word	0x20001ab8
 8002620:	200018dc 	.word	0x200018dc
 8002624:	20001f34 	.word	0x20001f34
 8002628:	20001f64 	.word	0x20001f64

0800262c <decode_lcdtype>:
	const char next[] = { "NX" };
 800262c:	4a25      	ldr	r2, [pc, #148]	; (80026c4 <decode_lcdtype+0x98>)
 800262e:	6813      	ldr	r3, [r2, #0]
int decode_lcdtype(char *str) {
 8002630:	b570      	push	{r4, r5, r6, lr}
	const char next[] = { "NX" };
 8002632:	0c1a      	lsrs	r2, r3, #16
int decode_lcdtype(char *str) {
 8002634:	b082      	sub	sp, #8
	nex_model[i] = '\0';
 8002636:	4e24      	ldr	r6, [pc, #144]	; (80026c8 <decode_lcdtype+0x9c>)
 8002638:	2400      	movs	r4, #0
	const char next[] = { "NX" };
 800263a:	f88d 2006 	strb.w	r2, [sp, #6]
	nex_model[i] = '\0';
 800263e:	7034      	strb	r4, [r6, #0]
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002640:	7802      	ldrb	r2, [r0, #0]
	const char next[] = { "NX" };
 8002642:	f8ad 3004 	strh.w	r3, [sp, #4]
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002646:	1e53      	subs	r3, r2, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2bfd      	cmp	r3, #253	; 0xfd
 800264c:	d81a      	bhi.n	8002684 <decode_lcdtype+0x58>
 800264e:	4605      	mov	r5, r0
 8002650:	4601      	mov	r1, r0
 8002652:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8002656:	f1c0 0e01 	rsb	lr, r0, #1
 800265a:	e00b      	b.n	8002674 <decode_lcdtype+0x48>
		if (str[i++] == next[j]) {
 800265c:	f104 0308 	add.w	r3, r4, #8
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002660:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		if (str[i++] == next[j]) {
 8002664:	eb0d 0c03 	add.w	ip, sp, r3
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002668:	1e53      	subs	r3, r2, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2bfd      	cmp	r3, #253	; 0xfd
 800266e:	d809      	bhi.n	8002684 <decode_lcdtype+0x58>
		if (str[i++] == next[j]) {
 8002670:	f81c cc04 	ldrb.w	ip, [ip, #-4]
 8002674:	eb0e 0301 	add.w	r3, lr, r1
 8002678:	4594      	cmp	ip, r2
 800267a:	4618      	mov	r0, r3
 800267c:	d1ee      	bne.n	800265c <decode_lcdtype+0x30>
			if (j >= 2) {		// found N...X
 800267e:	b924      	cbnz	r4, 800268a <decode_lcdtype+0x5e>
 8002680:	2401      	movs	r4, #1
 8002682:	e7eb      	b.n	800265c <decode_lcdtype+0x30>
	return (0);
 8002684:	2000      	movs	r0, #0
}
 8002686:	b002      	add	sp, #8
 8002688:	bd70      	pop	{r4, r5, r6, pc}
				nex_model[k++] = 'M';
 800268a:	f645 024d 	movw	r2, #22605	; 0x584d
 800268e:	8032      	strh	r2, [r6, #0]
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 8002690:	5cea      	ldrb	r2, [r5, r3]
 8002692:	442b      	add	r3, r5
 8002694:	1e51      	subs	r1, r2, #1
 8002696:	b2c9      	uxtb	r1, r1
 8002698:	29fd      	cmp	r1, #253	; 0xfd
 800269a:	d80f      	bhi.n	80026bc <decode_lcdtype+0x90>
 800269c:	2a2c      	cmp	r2, #44	; 0x2c
 800269e:	d00d      	beq.n	80026bc <decode_lcdtype+0x90>
 80026a0:	4c0a      	ldr	r4, [pc, #40]	; (80026cc <decode_lcdtype+0xa0>)
 80026a2:	e001      	b.n	80026a8 <decode_lcdtype+0x7c>
 80026a4:	2a2c      	cmp	r2, #44	; 0x2c
 80026a6:	d009      	beq.n	80026bc <decode_lcdtype+0x90>
					nex_model[k++] = str[i++];
 80026a8:	eb03 000e 	add.w	r0, r3, lr
 80026ac:	f804 2f01 	strb.w	r2, [r4, #1]!
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 80026b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80026b4:	1e51      	subs	r1, r2, #1
 80026b6:	b2c9      	uxtb	r1, r1
 80026b8:	29fd      	cmp	r1, #253	; 0xfd
 80026ba:	d9f3      	bls.n	80026a4 <decode_lcdtype+0x78>
				nex_model[i] = '\0';
 80026bc:	2300      	movs	r3, #0
 80026be:	5433      	strb	r3, [r6, r0]
}
 80026c0:	b002      	add	sp, #8
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	0802bccc 	.word	0x0802bccc
 80026c8:	20001b50 	.word	0x20001b50
 80026cc:	20001b51 	.word	0x20001b51

080026d0 <lcd_gps>:
	if (our_currentpage != 0)
 80026d0:	4b02      	ldr	r3, [pc, #8]	; (80026dc <lcd_gps+0xc>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b90b      	cbnz	r3, 80026da <lcd_gps+0xa>
 80026d6:	f7ff be03 	b.w	80022e0 <lcd_gps.part.0>
}
 80026da:	4770      	bx	lr
 80026dc:	20001d4d 	.word	0x20001d4d

080026e0 <lcd_time>:
// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];
	static uint8_t oldlocked = 0xff;

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80026e0:	4a2c      	ldr	r2, [pc, #176]	; (8002794 <lcd_time+0xb4>)
 80026e2:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80026e6:	482c      	ldr	r0, [pc, #176]	; (8002798 <lcd_time+0xb8>)
 80026e8:	6813      	ldr	r3, [r2, #0]
 80026ea:	6852      	ldr	r2, [r2, #4]
 80026ec:	185b      	adds	r3, r3, r1
 80026ee:	f142 0200 	adc.w	r2, r2, #0
void lcd_time() {
 80026f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f4:	b09f      	sub	sp, #124	; 0x7c
	timeinfo = *localtime(&localepochtime);
 80026f6:	4c29      	ldr	r4, [pc, #164]	; (800279c <lcd_time+0xbc>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80026f8:	2500      	movs	r5, #0
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
	setlcdtext("t0.txt", sbuffer);

	if (gpslocked != oldlocked) {
 80026fa:	4f29      	ldr	r7, [pc, #164]	; (80027a0 <lcd_time+0xc0>)
 80026fc:	4e29      	ldr	r6, [pc, #164]	; (80027a4 <lcd_time+0xc4>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80026fe:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 8002702:	f022 fee9 	bl	80254d8 <localtime>
 8002706:	4684      	mov	ip, r0
 8002708:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800270c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800270e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002714:	f8dc 2000 	ldr.w	r2, [ip]
 8002718:	4623      	mov	r3, r4
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 800271a:	2128      	movs	r1, #40	; 0x28
 800271c:	4822      	ldr	r0, [pc, #136]	; (80027a8 <lcd_time+0xc8>)
	timeinfo = *localtime(&localepochtime);
 800271e:	f843 2920 	str.w	r2, [r3], #-32
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 8002722:	4a22      	ldr	r2, [pc, #136]	; (80027ac <lcd_time+0xcc>)
 8002724:	f024 ffb6 	bl	8027694 <strftime>
	sprintf(str, "%s=\"%s\"", id, string);
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <lcd_time+0xc8>)
 800272a:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <lcd_time+0xd0>)
 800272c:	a806      	add	r0, sp, #24
 800272e:	4921      	ldr	r1, [pc, #132]	; (80027b4 <lcd_time+0xd4>)
	volatile int result = 0;
 8002730:	9500      	str	r5, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 8002732:	f024 f9b9 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002736:	a806      	add	r0, sp, #24
 8002738:	f7ff fdb6 	bl	80022a8 <writelcdcmd>
 800273c:	9000      	str	r0, [sp, #0]
	if (gpslocked != oldlocked) {
 800273e:	783c      	ldrb	r4, [r7, #0]
	return (result);
 8002740:	9b00      	ldr	r3, [sp, #0]
	if (gpslocked != oldlocked) {
 8002742:	7833      	ldrb	r3, [r6, #0]
 8002744:	42a3      	cmp	r3, r4
 8002746:	d01b      	beq.n	8002780 <lcd_time+0xa0>
		if (gpslocked) {
 8002748:	b9e4      	cbnz	r4, 8002784 <lcd_time+0xa4>
			writelcdcmd("vis t3,0");	// hide warning
			writelcdcmd("vis t1,1");	// show date
		} else {
			writelcdcmd("vis t1,0");	// hide date
 800274a:	481b      	ldr	r0, [pc, #108]	; (80027b8 <lcd_time+0xd8>)
 800274c:	f7ff fdac 	bl	80022a8 <writelcdcmd>
			sprintf(str, "UNLOCK GPS %d", statuspkt.NavPvt.numSV);
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <lcd_time+0xdc>)
 8002752:	491b      	ldr	r1, [pc, #108]	; (80027c0 <lcd_time+0xe0>)
 8002754:	a802      	add	r0, sp, #8
 8002756:	7eda      	ldrb	r2, [r3, #27]
 8002758:	f024 f9a6 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800275c:	ab02      	add	r3, sp, #8
 800275e:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <lcd_time+0xe4>)
 8002760:	a806      	add	r0, sp, #24
 8002762:	4914      	ldr	r1, [pc, #80]	; (80027b4 <lcd_time+0xd4>)
	volatile int result = 0;
 8002764:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002766:	f024 f99f 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 800276a:	a806      	add	r0, sp, #24
 800276c:	f7ff fd9c 	bl	80022a8 <writelcdcmd>
 8002770:	4603      	mov	r3, r0
			setlcdtext("t3.txt", str);
			writelcdcmd("vis t3,1");	// show warning
 8002772:	4815      	ldr	r0, [pc, #84]	; (80027c8 <lcd_time+0xe8>)
	result = writelcdcmd(str);
 8002774:	9301      	str	r3, [sp, #4]
	return (result);
 8002776:	9b01      	ldr	r3, [sp, #4]
			writelcdcmd("vis t3,1");	// show warning
 8002778:	f7ff fd96 	bl	80022a8 <writelcdcmd>
		}
		oldlocked = gpslocked;
 800277c:	783b      	ldrb	r3, [r7, #0]
 800277e:	7033      	strb	r3, [r6, #0]
	}
}
 8002780:	b01f      	add	sp, #124	; 0x7c
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}
			writelcdcmd("vis t3,0");	// hide warning
 8002784:	4811      	ldr	r0, [pc, #68]	; (80027cc <lcd_time+0xec>)
 8002786:	f7ff fd8f 	bl	80022a8 <writelcdcmd>
			writelcdcmd("vis t1,1");	// show date
 800278a:	4811      	ldr	r0, [pc, #68]	; (80027d0 <lcd_time+0xf0>)
 800278c:	f7ff fd8c 	bl	80022a8 <writelcdcmd>
 8002790:	e7f4      	b.n	800277c <lcd_time+0x9c>
 8002792:	bf00      	nop
 8002794:	20002ef0 	.word	0x20002ef0
 8002798:	20001b48 	.word	0x20001b48
 800279c:	20001f68 	.word	0x20001f68
 80027a0:	200034a8 	.word	0x200034a8
 80027a4:	2000004c 	.word	0x2000004c
 80027a8:	20001f3c 	.word	0x20001f3c
 80027ac:	0802bcd0 	.word	0x0802bcd0
 80027b0:	0802bcdc 	.word	0x0802bcdc
 80027b4:	0802bc4c 	.word	0x0802bc4c
 80027b8:	0802bcfc 	.word	0x0802bcfc
 80027bc:	2000303c 	.word	0x2000303c
 80027c0:	0802bd08 	.word	0x0802bd08
 80027c4:	0802bd18 	.word	0x0802bd18
 80027c8:	0802bd20 	.word	0x0802bd20
 80027cc:	0802bce4 	.word	0x0802bce4
 80027d0:	0802bcf0 	.word	0x0802bcf0

080027d4 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <lcd_date+0x38>)
 80027d6:	490e      	ldr	r1, [pc, #56]	; (8002810 <lcd_date+0x3c>)
 80027d8:	69d8      	ldr	r0, [r3, #28]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80027da:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <lcd_date+0x40>)
void lcd_date() {
 80027dc:	b510      	push	{r4, lr}
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80027de:	4c0e      	ldr	r4, [pc, #56]	; (8002818 <lcd_date+0x44>)
void lcd_date() {
 80027e0:	b09a      	sub	sp, #104	; 0x68
	lastday = timeinfo.tm_yday;
 80027e2:	6008      	str	r0, [r1, #0]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80027e4:	2128      	movs	r1, #40	; 0x28
 80027e6:	4620      	mov	r0, r4
 80027e8:	f024 ff54 	bl	8027694 <strftime>
	volatile int result = 0;
 80027ec:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 80027ee:	4623      	mov	r3, r4
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <lcd_date+0x48>)
 80027f2:	490b      	ldr	r1, [pc, #44]	; (8002820 <lcd_date+0x4c>)
	volatile int result = 0;
 80027f4:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 80027f6:	a802      	add	r0, sp, #8
 80027f8:	f024 f956 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 80027fc:	a802      	add	r0, sp, #8
 80027fe:	f7ff fd53 	bl	80022a8 <writelcdcmd>
 8002802:	9001      	str	r0, [sp, #4]
	return (result);
 8002804:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", sbuffer);
}
 8002806:	b01a      	add	sp, #104	; 0x68
 8002808:	bd10      	pop	{r4, pc}
 800280a:	bf00      	nop
 800280c:	20001f68 	.word	0x20001f68
 8002810:	20001a7c 	.word	0x20001a7c
 8002814:	0802bd2c 	.word	0x0802bd2c
 8002818:	20001f3c 	.word	0x20001f3c
 800281c:	0802bd3c 	.word	0x0802bd3c
 8002820:	0802bc4c 	.word	0x0802bc4c

08002824 <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 8002824:	b570      	push	{r4, r5, r6, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 8002826:	4c9b      	ldr	r4, [pc, #620]	; (8002a94 <lcd_showvars+0x270>)
void lcd_showvars() {
 8002828:	b0c4      	sub	sp, #272	; 0x110
	switch (toggle) {
 800282a:	8823      	ldrh	r3, [r4, #0]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d827      	bhi.n	8002880 <lcd_showvars+0x5c>
 8002830:	e8df f003 	tbb	[pc, r3]
 8002834:	0228509a 	.word	0x0228509a
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 8002838:	4b97      	ldr	r3, [pc, #604]	; (8002a98 <lcd_showvars+0x274>)
 800283a:	4998      	ldr	r1, [pc, #608]	; (8002a9c <lcd_showvars+0x278>)
 800283c:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 8002840:	6808      	ldr	r0, [r1, #0]
 8002842:	9204      	str	r2, [sp, #16]
 8002844:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 8002848:	9203      	str	r2, [sp, #12]
 800284a:	f242 7234 	movw	r2, #10036	; 0x2734
 800284e:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 8002852:	2314      	movs	r3, #20
 8002854:	e9cd 2000 	strd	r2, r0, [sp]
 8002858:	2200      	movs	r2, #0
 800285a:	9102      	str	r1, [sp, #8]
 800285c:	a814      	add	r0, sp, #80	; 0x50
 800285e:	4990      	ldr	r1, [pc, #576]	; (8002aa0 <lcd_showvars+0x27c>)
	volatile int result = 0;
 8002860:	4615      	mov	r5, r2
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 8002862:	f024 f921 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002866:	ab14      	add	r3, sp, #80	; 0x50
 8002868:	4a8e      	ldr	r2, [pc, #568]	; (8002aa4 <lcd_showvars+0x280>)
 800286a:	498f      	ldr	r1, [pc, #572]	; (8002aa8 <lcd_showvars+0x284>)
 800286c:	a82c      	add	r0, sp, #176	; 0xb0
	volatile int result = 0;
 800286e:	9513      	str	r5, [sp, #76]	; 0x4c
	sprintf(str, "%s=\"%s\"", id, string);
 8002870:	f024 f91a 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002874:	a82c      	add	r0, sp, #176	; 0xb0
 8002876:	f7ff fd17 	bl	80022a8 <writelcdcmd>
 800287a:	9013      	str	r0, [sp, #76]	; 0x4c
	return (result);
 800287c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
		toggle = 0;
 800287e:	8025      	strh	r5, [r4, #0]
		break;
	}
}
 8002880:	b044      	add	sp, #272	; 0x110
 8002882:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002884:	4e89      	ldr	r6, [pc, #548]	; (8002aac <lcd_showvars+0x288>)
	volatile int result = 0;
 8002886:	2500      	movs	r5, #0
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002888:	4989      	ldr	r1, [pc, #548]	; (8002ab0 <lcd_showvars+0x28c>)
 800288a:	a814      	add	r0, sp, #80	; 0x50
 800288c:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 800288e:	f024 f90b 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002892:	ab14      	add	r3, sp, #80	; 0x50
 8002894:	4a87      	ldr	r2, [pc, #540]	; (8002ab4 <lcd_showvars+0x290>)
 8002896:	a82c      	add	r0, sp, #176	; 0xb0
 8002898:	4983      	ldr	r1, [pc, #524]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 800289a:	9512      	str	r5, [sp, #72]	; 0x48
	sprintf(str, "%s=\"%s\"", id, string);
 800289c:	f024 f904 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 80028a0:	a82c      	add	r0, sp, #176	; 0xb0
 80028a2:	f7ff fd01 	bl	80022a8 <writelcdcmd>
 80028a6:	9012      	str	r0, [sp, #72]	; 0x48
	return (result);
 80028a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 80028aa:	a814      	add	r0, sp, #80	; 0x50
 80028ac:	6e72      	ldr	r2, [r6, #100]	; 0x64
 80028ae:	4980      	ldr	r1, [pc, #512]	; (8002ab0 <lcd_showvars+0x28c>)
 80028b0:	f024 f8fa 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80028b4:	ab14      	add	r3, sp, #80	; 0x50
 80028b6:	4a80      	ldr	r2, [pc, #512]	; (8002ab8 <lcd_showvars+0x294>)
 80028b8:	a82c      	add	r0, sp, #176	; 0xb0
 80028ba:	497b      	ldr	r1, [pc, #492]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 80028bc:	9511      	str	r5, [sp, #68]	; 0x44
	sprintf(str, "%s=\"%s\"", id, string);
 80028be:	f024 f8f3 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 80028c2:	a82c      	add	r0, sp, #176	; 0xb0
 80028c4:	f7ff fcf0 	bl	80022a8 <writelcdcmd>
		toggle = 3;
 80028c8:	2303      	movs	r3, #3
	result = writelcdcmd(str);
 80028ca:	9011      	str	r0, [sp, #68]	; 0x44
		toggle = 3;
 80028cc:	8023      	strh	r3, [r4, #0]
	return (result);
 80028ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
 80028d0:	b044      	add	sp, #272	; 0x110
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 80028d4:	4e75      	ldr	r6, [pc, #468]	; (8002aac <lcd_showvars+0x288>)
	volatile int result = 0;
 80028d6:	2500      	movs	r5, #0
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 80028d8:	4975      	ldr	r1, [pc, #468]	; (8002ab0 <lcd_showvars+0x28c>)
 80028da:	a814      	add	r0, sp, #80	; 0x50
 80028dc:	7ef2      	ldrb	r2, [r6, #27]
 80028de:	f024 f8e3 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80028e2:	ab14      	add	r3, sp, #80	; 0x50
 80028e4:	4a75      	ldr	r2, [pc, #468]	; (8002abc <lcd_showvars+0x298>)
 80028e6:	a82c      	add	r0, sp, #176	; 0xb0
 80028e8:	496f      	ldr	r1, [pc, #444]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 80028ea:	9510      	str	r5, [sp, #64]	; 0x40
	sprintf(str, "%s=\"%s\"", id, string);
 80028ec:	f024 f8dc 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 80028f0:	a82c      	add	r0, sp, #176	; 0xb0
 80028f2:	f7ff fcd9 	bl	80022a8 <writelcdcmd>
 80028f6:	9010      	str	r0, [sp, #64]	; 0x40
	return (result);
 80028f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 80028fa:	a814      	add	r0, sp, #80	; 0x50
 80028fc:	6a32      	ldr	r2, [r6, #32]
 80028fe:	496c      	ldr	r1, [pc, #432]	; (8002ab0 <lcd_showvars+0x28c>)
 8002900:	f024 f8d2 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002904:	ab14      	add	r3, sp, #80	; 0x50
 8002906:	4a6e      	ldr	r2, [pc, #440]	; (8002ac0 <lcd_showvars+0x29c>)
 8002908:	a82c      	add	r0, sp, #176	; 0xb0
 800290a:	4967      	ldr	r1, [pc, #412]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 800290c:	950f      	str	r5, [sp, #60]	; 0x3c
	sprintf(str, "%s=\"%s\"", id, string);
 800290e:	f024 f8cb 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002912:	a82c      	add	r0, sp, #176	; 0xb0
 8002914:	f7ff fcc8 	bl	80022a8 <writelcdcmd>
 8002918:	900f      	str	r0, [sp, #60]	; 0x3c
	return (result);
 800291a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 800291c:	a814      	add	r0, sp, #80	; 0x50
 800291e:	69f2      	ldr	r2, [r6, #28]
 8002920:	4963      	ldr	r1, [pc, #396]	; (8002ab0 <lcd_showvars+0x28c>)
 8002922:	f024 f8c1 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002926:	ab14      	add	r3, sp, #80	; 0x50
 8002928:	4a66      	ldr	r2, [pc, #408]	; (8002ac4 <lcd_showvars+0x2a0>)
 800292a:	a82c      	add	r0, sp, #176	; 0xb0
 800292c:	495e      	ldr	r1, [pc, #376]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 800292e:	950e      	str	r5, [sp, #56]	; 0x38
	sprintf(str, "%s=\"%s\"", id, string);
 8002930:	f024 f8ba 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002934:	a82c      	add	r0, sp, #176	; 0xb0
 8002936:	f7ff fcb7 	bl	80022a8 <writelcdcmd>
 800293a:	900e      	str	r0, [sp, #56]	; 0x38
	return (result);
 800293c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 800293e:	a814      	add	r0, sp, #80	; 0x50
 8002940:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002942:	495b      	ldr	r1, [pc, #364]	; (8002ab0 <lcd_showvars+0x28c>)
 8002944:	f024 f8b0 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002948:	ab14      	add	r3, sp, #80	; 0x50
 800294a:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <lcd_showvars+0x2a4>)
 800294c:	a82c      	add	r0, sp, #176	; 0xb0
 800294e:	4956      	ldr	r1, [pc, #344]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002950:	950d      	str	r5, [sp, #52]	; 0x34
	sprintf(str, "%s=\"%s\"", id, string);
 8002952:	f024 f8a9 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002956:	a82c      	add	r0, sp, #176	; 0xb0
 8002958:	f7ff fca6 	bl	80022a8 <writelcdcmd>
		toggle = 2;
 800295c:	2302      	movs	r3, #2
	result = writelcdcmd(str);
 800295e:	900d      	str	r0, [sp, #52]	; 0x34
		toggle = 2;
 8002960:	8023      	strh	r3, [r4, #0]
	return (result);
 8002962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
 8002964:	b044      	add	sp, #272	; 0x110
 8002966:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002968:	4b58      	ldr	r3, [pc, #352]	; (8002acc <lcd_showvars+0x2a8>)
	volatile int result = 0;
 800296a:	2500      	movs	r5, #0
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800296c:	a814      	add	r0, sp, #80	; 0x50
		sprintf(str, "%d", statuspkt.uid);
 800296e:	4e4f      	ldr	r6, [pc, #316]	; (8002aac <lcd_showvars+0x288>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	0e11      	lsrs	r1, r2, #24
 8002974:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8002978:	e9cd 3100 	strd	r3, r1, [sp]
 800297c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002980:	4953      	ldr	r1, [pc, #332]	; (8002ad0 <lcd_showvars+0x2ac>)
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f024 f890 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002988:	ab14      	add	r3, sp, #80	; 0x50
 800298a:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <lcd_showvars+0x2b0>)
 800298c:	a82c      	add	r0, sp, #176	; 0xb0
 800298e:	4946      	ldr	r1, [pc, #280]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002990:	950c      	str	r5, [sp, #48]	; 0x30
	sprintf(str, "%s=\"%s\"", id, string);
 8002992:	f024 f889 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002996:	a82c      	add	r0, sp, #176	; 0xb0
 8002998:	f7ff fc86 	bl	80022a8 <writelcdcmd>
 800299c:	900c      	str	r0, [sp, #48]	; 0x30
	return (result);
 800299e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		sprintf(str, "%d", statuspkt.uid);
 80029a0:	a814      	add	r0, sp, #80	; 0x50
 80029a2:	f8b6 205c 	ldrh.w	r2, [r6, #92]	; 0x5c
 80029a6:	4942      	ldr	r1, [pc, #264]	; (8002ab0 <lcd_showvars+0x28c>)
 80029a8:	b292      	uxth	r2, r2
 80029aa:	f024 f87d 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80029ae:	ab14      	add	r3, sp, #80	; 0x50
 80029b0:	4a49      	ldr	r2, [pc, #292]	; (8002ad8 <lcd_showvars+0x2b4>)
 80029b2:	a82c      	add	r0, sp, #176	; 0xb0
 80029b4:	493c      	ldr	r1, [pc, #240]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 80029b6:	950b      	str	r5, [sp, #44]	; 0x2c
	sprintf(str, "%s=\"%s\"", id, string);
 80029b8:	f024 f876 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 80029bc:	a82c      	add	r0, sp, #176	; 0xb0
 80029be:	f7ff fc73 	bl	80022a8 <writelcdcmd>
 80029c2:	900b      	str	r0, [sp, #44]	; 0x2c
	return (result);
 80029c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		sprintf(str, "%d", statuspkt.adcpktssent);
 80029c6:	a814      	add	r0, sp, #80	; 0x50
 80029c8:	f8b6 205e 	ldrh.w	r2, [r6, #94]	; 0x5e
 80029cc:	4938      	ldr	r1, [pc, #224]	; (8002ab0 <lcd_showvars+0x28c>)
 80029ce:	b292      	uxth	r2, r2
 80029d0:	f024 f86a 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80029d4:	ab14      	add	r3, sp, #80	; 0x50
 80029d6:	4a41      	ldr	r2, [pc, #260]	; (8002adc <lcd_showvars+0x2b8>)
 80029d8:	a82c      	add	r0, sp, #176	; 0xb0
 80029da:	4933      	ldr	r1, [pc, #204]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 80029dc:	950a      	str	r5, [sp, #40]	; 0x28
	sprintf(str, "%s=\"%s\"", id, string);
 80029de:	f024 f863 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 80029e2:	a82c      	add	r0, sp, #176	; 0xb0
 80029e4:	f7ff fc60 	bl	80022a8 <writelcdcmd>
 80029e8:	900a      	str	r0, [sp, #40]	; 0x28
	return (result);
 80029ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80029ec:	a814      	add	r0, sp, #80	; 0x50
 80029ee:	4b3c      	ldr	r3, [pc, #240]	; (8002ae0 <lcd_showvars+0x2bc>)
 80029f0:	492f      	ldr	r1, [pc, #188]	; (8002ab0 <lcd_showvars+0x28c>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80029f8:	f024 f856 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80029fc:	ab14      	add	r3, sp, #80	; 0x50
 80029fe:	4a39      	ldr	r2, [pc, #228]	; (8002ae4 <lcd_showvars+0x2c0>)
 8002a00:	a82c      	add	r0, sp, #176	; 0xb0
 8002a02:	4929      	ldr	r1, [pc, #164]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002a04:	9509      	str	r5, [sp, #36]	; 0x24
	sprintf(str, "%s=\"%s\"", id, string);
 8002a06:	f024 f84f 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002a0a:	a82c      	add	r0, sp, #176	; 0xb0
 8002a0c:	f7ff fc4c 	bl	80022a8 <writelcdcmd>
 8002a10:	9009      	str	r0, [sp, #36]	; 0x24
	return (result);
 8002a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002a14:	a814      	add	r0, sp, #80	; 0x50
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <lcd_showvars+0x2c4>)
 8002a18:	4925      	ldr	r1, [pc, #148]	; (8002ab0 <lcd_showvars+0x28c>)
 8002a1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a1e:	2a00      	cmp	r2, #0
 8002a20:	bfb8      	it	lt
 8002a22:	4252      	neglt	r2, r2
 8002a24:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002a28:	f024 f83e 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002a2c:	ab14      	add	r3, sp, #80	; 0x50
 8002a2e:	4a2f      	ldr	r2, [pc, #188]	; (8002aec <lcd_showvars+0x2c8>)
 8002a30:	a82c      	add	r0, sp, #176	; 0xb0
 8002a32:	491d      	ldr	r1, [pc, #116]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002a34:	9508      	str	r5, [sp, #32]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a36:	f024 f837 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002a3a:	a82c      	add	r0, sp, #176	; 0xb0
 8002a3c:	f7ff fc34 	bl	80022a8 <writelcdcmd>
 8002a40:	9008      	str	r0, [sp, #32]
	return (result);
 8002a42:	9b08      	ldr	r3, [sp, #32]
		sprintf(str, "%d", pgagain);	// gain
 8002a44:	a814      	add	r0, sp, #80	; 0x50
 8002a46:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <lcd_showvars+0x2cc>)
 8002a48:	4919      	ldr	r1, [pc, #100]	; (8002ab0 <lcd_showvars+0x28c>)
 8002a4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a4e:	f024 f82b 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002a52:	ab14      	add	r3, sp, #80	; 0x50
 8002a54:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <lcd_showvars+0x2d0>)
 8002a56:	a82c      	add	r0, sp, #176	; 0xb0
 8002a58:	4913      	ldr	r1, [pc, #76]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002a5a:	9507      	str	r5, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a5c:	f024 f824 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002a60:	a82c      	add	r0, sp, #176	; 0xb0
 8002a62:	f7ff fc21 	bl	80022a8 <writelcdcmd>
 8002a66:	9007      	str	r0, [sp, #28]
	return (result);
 8002a68:	9b07      	ldr	r3, [sp, #28]
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 8002a6a:	a814      	add	r0, sp, #80	; 0x50
 8002a6c:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 8002a6e:	4910      	ldr	r1, [pc, #64]	; (8002ab0 <lcd_showvars+0x28c>)
 8002a70:	f024 f81a 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002a74:	ab14      	add	r3, sp, #80	; 0x50
 8002a76:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <lcd_showvars+0x2d4>)
 8002a78:	a82c      	add	r0, sp, #176	; 0xb0
 8002a7a:	490b      	ldr	r1, [pc, #44]	; (8002aa8 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002a7c:	9506      	str	r5, [sp, #24]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a7e:	f024 f813 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002a82:	a82c      	add	r0, sp, #176	; 0xb0
 8002a84:	f7ff fc10 	bl	80022a8 <writelcdcmd>
		toggle = 1;
 8002a88:	2301      	movs	r3, #1
	result = writelcdcmd(str);
 8002a8a:	9006      	str	r0, [sp, #24]
		toggle = 1;
 8002a8c:	8023      	strh	r3, [r4, #0]
	return (result);
 8002a8e:	9b06      	ldr	r3, [sp, #24]
}
 8002a90:	b044      	add	sp, #272	; 0x110
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	20001f8c 	.word	0x20001f8c
 8002a98:	1ff0f000 	.word	0x1ff0f000
 8002a9c:	20002184 	.word	0x20002184
 8002aa0:	0802bd8c 	.word	0x0802bd8c
 8002aa4:	0802bdb8 	.word	0x0802bdb8
 8002aa8:	0802bc4c 	.word	0x0802bc4c
 8002aac:	2000303c 	.word	0x2000303c
 8002ab0:	0802bdf0 	.word	0x0802bdf0
 8002ab4:	0802bc80 	.word	0x0802bc80
 8002ab8:	0802bc70 	.word	0x0802bc70
 8002abc:	0802bcdc 	.word	0x0802bcdc
 8002ac0:	0802bd3c 	.word	0x0802bd3c
 8002ac4:	0802bc44 	.word	0x0802bc44
 8002ac8:	0802bd18 	.word	0x0802bd18
 8002acc:	20002df4 	.word	0x20002df4
 8002ad0:	0802bd44 	.word	0x0802bd44
 8002ad4:	0802bd54 	.word	0x0802bd54
 8002ad8:	0802bd5c 	.word	0x0802bd5c
 8002adc:	0802bd64 	.word	0x0802bd64
 8002ae0:	2000072c 	.word	0x2000072c
 8002ae4:	0802bd6c 	.word	0x0802bd6c
 8002ae8:	20000780 	.word	0x20000780
 8002aec:	0802bd74 	.word	0x0802bd74
 8002af0:	20003430 	.word	0x20003430
 8002af4:	0802bd7c 	.word	0x0802bd7c
 8002af8:	0802bd84 	.word	0x0802bd84

08002afc <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 8002afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b00:	b0a7      	sub	sp, #156	; 0x9c
	volatile int result = 0;
 8002b02:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002b04:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <lcd_trigcharts+0x130>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 8002b06:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	sprintf(str, "%s=\"%s\"", id, string);
 8002b0a:	4a49      	ldr	r2, [pc, #292]	; (8002c30 <lcd_trigcharts+0x134>)
 8002b0c:	a80e      	add	r0, sp, #56	; 0x38
 8002b0e:	4949      	ldr	r1, [pc, #292]	; (8002c34 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b10:	9405      	str	r4, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b12:	f023 ffc9 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002b16:	a80e      	add	r0, sp, #56	; 0x38
 8002b18:	4f47      	ldr	r7, [pc, #284]	; (8002c38 <lcd_trigcharts+0x13c>)
 8002b1a:	f7ff fbc5 	bl	80022a8 <writelcdcmd>
 8002b1e:	9005      	str	r0, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b20:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <lcd_trigcharts+0x130>)
 8002b22:	a80e      	add	r0, sp, #56	; 0x38
 8002b24:	4a45      	ldr	r2, [pc, #276]	; (8002c3c <lcd_trigcharts+0x140>)
	return (result);
 8002b26:	9905      	ldr	r1, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b28:	4942      	ldr	r1, [pc, #264]	; (8002c34 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b2a:	9404      	str	r4, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b2c:	f023 ffbc 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002b30:	a80e      	add	r0, sp, #56	; 0x38
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002b32:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8002c74 <lcd_trigcharts+0x178>
	result = writelcdcmd(str);
 8002b36:	f7ff fbb7 	bl	80022a8 <writelcdcmd>
 8002b3a:	9004      	str	r0, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <lcd_trigcharts+0x144>)
 8002b3e:	a80e      	add	r0, sp, #56	; 0x38
 8002b40:	4a40      	ldr	r2, [pc, #256]	; (8002c44 <lcd_trigcharts+0x148>)
	return (result);
 8002b42:	9904      	ldr	r1, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b44:	493b      	ldr	r1, [pc, #236]	; (8002c34 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b46:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b48:	f023 ffae 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002b4c:	a80e      	add	r0, sp, #56	; 0x38
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002b4e:	4e3e      	ldr	r6, [pc, #248]	; (8002c48 <lcd_trigcharts+0x14c>)
	result = writelcdcmd(str);
 8002b50:	f7ff fbaa 	bl	80022a8 <writelcdcmd>
 8002b54:	9003      	str	r0, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b56:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <lcd_trigcharts+0x144>)
 8002b58:	a80e      	add	r0, sp, #56	; 0x38
 8002b5a:	4a3c      	ldr	r2, [pc, #240]	; (8002c4c <lcd_trigcharts+0x150>)
	return (result);
 8002b5c:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b5e:	4935      	ldr	r1, [pc, #212]	; (8002c34 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b60:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b62:	f023 ffa1 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002b66:	a80e      	add	r0, sp, #56	; 0x38
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002b68:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002c78 <lcd_trigcharts+0x17c>
	result = writelcdcmd(str);
 8002b6c:	f7ff fb9c 	bl	80022a8 <writelcdcmd>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <lcd_trigcharts+0x154>)
	result = writelcdcmd(str);
 8002b72:	9002      	str	r0, [sp, #8]
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002b74:	a806      	add	r0, sp, #24
	return (result);
 8002b76:	9a02      	ldr	r2, [sp, #8]
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002b78:	4936      	ldr	r1, [pc, #216]	; (8002c54 <lcd_trigcharts+0x158>)
 8002b7a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002b7c:	f023 ff94 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002b80:	ab06      	add	r3, sp, #24
 8002b82:	4a35      	ldr	r2, [pc, #212]	; (8002c58 <lcd_trigcharts+0x15c>)
 8002b84:	a80e      	add	r0, sp, #56	; 0x38
 8002b86:	492b      	ldr	r1, [pc, #172]	; (8002c34 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b88:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b8a:	f023 ff8d 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002b8e:	a80e      	add	r0, sp, #56	; 0x38
 8002b90:	f7ff fb8a 	bl	80022a8 <writelcdcmd>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <lcd_trigcharts+0x160>)
	result = writelcdcmd(str);
 8002b96:	9001      	str	r0, [sp, #4]
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002b98:	a806      	add	r0, sp, #24
 8002b9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b9e:	492d      	ldr	r1, [pc, #180]	; (8002c54 <lcd_trigcharts+0x158>)
 8002ba0:	2a00      	cmp	r2, #0
	return (result);
 8002ba2:	9b01      	ldr	r3, [sp, #4]
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002ba4:	bfb8      	it	lt
 8002ba6:	4252      	neglt	r2, r2
 8002ba8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002bac:	f023 ff7c 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002bb0:	ab06      	add	r3, sp, #24
 8002bb2:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <lcd_trigcharts+0x164>)
 8002bb4:	a80e      	add	r0, sp, #56	; 0x38
 8002bb6:	491f      	ldr	r1, [pc, #124]	; (8002c34 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002bb8:	9400      	str	r4, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 8002bba:	f023 ff75 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002bbe:	a80e      	add	r0, sp, #56	; 0x38
 8002bc0:	f7ff fb72 	bl	80022a8 <writelcdcmd>
 8002bc4:	4603      	mov	r3, r0
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8002bc6:	4827      	ldr	r0, [pc, #156]	; (8002c64 <lcd_trigcharts+0x168>)
	result = writelcdcmd(str);
 8002bc8:	9300      	str	r3, [sp, #0]
	return (result);
 8002bca:	9b00      	ldr	r3, [sp, #0]
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8002bcc:	f7ff fb6c 	bl	80022a8 <writelcdcmd>
	buffi = trigindex;
 8002bd0:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <lcd_trigcharts+0x16c>)
 8002bd2:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002bd4:	e01c      	b.n	8002c10 <lcd_trigcharts+0x114>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002bd6:	f819 2004 	ldrb.w	r2, [r9, r4]
 8002bda:	f023 ff65 	bl	8026aa8 <siprintf>
		writelcdcmd(str);
 8002bde:	a806      	add	r0, sp, #24
 8002be0:	f7ff fb62 	bl	80022a8 <writelcdcmd>
		osDelay(15);
 8002be4:	200f      	movs	r0, #15
 8002be6:	f013 fcf5 	bl	80165d4 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002bea:	f818 2004 	ldrb.w	r2, [r8, r4]
 8002bee:	491f      	ldr	r1, [pc, #124]	; (8002c6c <lcd_trigcharts+0x170>)
 8002bf0:	a806      	add	r0, sp, #24
 8002bf2:	f023 ff59 	bl	8026aa8 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002bf6:	3401      	adds	r4, #1
		writelcdcmd(str);
 8002bf8:	a806      	add	r0, sp, #24
 8002bfa:	f7ff fb55 	bl	80022a8 <writelcdcmd>
		osDelay(15);
 8002bfe:	200f      	movs	r0, #15
 8002c00:	f013 fce8 	bl	80165d4 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002c04:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002c08:	bfc8      	it	gt
 8002c0a:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8002c0c:	3d01      	subs	r5, #1
 8002c0e:	d007      	beq.n	8002c20 <lcd_trigcharts+0x124>
		if (our_currentpage != 2)		// impatient user
 8002c10:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002c12:	4631      	mov	r1, r6
 8002c14:	a806      	add	r0, sp, #24
		if (our_currentpage != 2)		// impatient user
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d0dd      	beq.n	8002bd6 <lcd_trigcharts+0xda>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8002c1a:	b027      	add	sp, #156	; 0x9c
 8002c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002c20:	4813      	ldr	r0, [pc, #76]	; (8002c70 <lcd_trigcharts+0x174>)
 8002c22:	f7ff fb41 	bl	80022a8 <writelcdcmd>
}
 8002c26:	b027      	add	sp, #156	; 0x9c
 8002c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c2c:	0802bdc0 	.word	0x0802bdc0
 8002c30:	0802bd18 	.word	0x0802bd18
 8002c34:	0802bc4c 	.word	0x0802bc4c
 8002c38:	20001d4d 	.word	0x20001d4d
 8002c3c:	0802bdcc 	.word	0x0802bdcc
 8002c40:	0802bdd4 	.word	0x0802bdd4
 8002c44:	0802bc80 	.word	0x0802bc80
 8002c48:	0802bde8 	.word	0x0802bde8
 8002c4c:	0802bd3c 	.word	0x0802bd3c
 8002c50:	2000303c 	.word	0x2000303c
 8002c54:	0802bdf0 	.word	0x0802bdf0
 8002c58:	0802bcdc 	.word	0x0802bcdc
 8002c5c:	20000780 	.word	0x20000780
 8002c60:	0802bc44 	.word	0x0802bc44
 8002c64:	0802bddc 	.word	0x0802bddc
 8002c68:	20001f90 	.word	0x20001f90
 8002c6c:	0802bdf4 	.word	0x0802bdf4
 8002c70:	0802be00 	.word	0x0802be00
 8002c74:	20001f94 	.word	0x20001f94
 8002c78:	20001b68 	.word	0x20001b68

08002c7c <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 8002c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002c80:	4956      	ldr	r1, [pc, #344]	; (8002ddc <lcd_trigplot+0x160>)
void lcd_trigplot() {
 8002c82:	b0a7      	sub	sp, #156	; 0x9c
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002c84:	4d56      	ldr	r5, [pc, #344]	; (8002de0 <lcd_trigplot+0x164>)
 8002c86:	680b      	ldr	r3, [r1, #0]
 8002c88:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 8002c8a:	4e56      	ldr	r6, [pc, #344]	; (8002de4 <lcd_trigplot+0x168>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002c8c:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002c8e:	4856      	ldr	r0, [pc, #344]	; (8002de8 <lcd_trigplot+0x16c>)
	val = abs(meanwindiff) & 0xfff;
 8002c90:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 8002c94:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 8002c96:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 8002c9a:	4c54      	ldr	r4, [pc, #336]	; (8002dec <lcd_trigplot+0x170>)
 8002c9c:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002c9e:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 8002ca0:	4f53      	ldr	r7, [pc, #332]	; (8002df0 <lcd_trigplot+0x174>)
 8002ca2:	bfa8      	it	ge
 8002ca4:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8002ca6:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8002ca8:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002e2c <lcd_trigplot+0x1b0>
	val = abs(meanwindiff) & 0xfff;
 8002cac:	bfb8      	it	lt
 8002cae:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 8002cb0:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8002cb4:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8002cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8002cba:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 8002cbc:	2b77      	cmp	r3, #119	; 0x77
 8002cbe:	bfa8      	it	ge
 8002cc0:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002cc2:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8002cc4:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002cc8:	d00c      	beq.n	8002ce4 <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8002cca:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 8002ccc:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8002cd0:	da03      	bge.n	8002cda <lcd_trigplot+0x5e>
	trigindex++;
 8002cd2:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8002cd4:	b027      	add	sp, #156	; 0x9c
 8002cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		trigindex = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	6023      	str	r3, [r4, #0]
}
 8002cde:	b027      	add	sp, #156	; 0x9c
 8002ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	volatile int result = 0;
 8002ce4:	f04f 0900 	mov.w	r9, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002ce8:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <lcd_trigplot+0x178>)
 8002cea:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <lcd_trigplot+0x17c>)
 8002cec:	a80e      	add	r0, sp, #56	; 0x38
 8002cee:	4943      	ldr	r1, [pc, #268]	; (8002dfc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002cf0:	f8cd 9014 	str.w	r9, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002cf4:	f023 fed8 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002cf8:	a80e      	add	r0, sp, #56	; 0x38
 8002cfa:	f7ff fad5 	bl	80022a8 <writelcdcmd>
 8002cfe:	9005      	str	r0, [sp, #20]
	return (result);
 8002d00:	9b05      	ldr	r3, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d02:	a80e      	add	r0, sp, #56	; 0x38
 8002d04:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <lcd_trigplot+0x178>)
 8002d06:	4a3e      	ldr	r2, [pc, #248]	; (8002e00 <lcd_trigplot+0x184>)
 8002d08:	493c      	ldr	r1, [pc, #240]	; (8002dfc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002d0a:	f8cd 9010 	str.w	r9, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d0e:	f023 fecb 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002d12:	a80e      	add	r0, sp, #56	; 0x38
 8002d14:	f7ff fac8 	bl	80022a8 <writelcdcmd>
 8002d18:	9004      	str	r0, [sp, #16]
	return (result);
 8002d1a:	9b04      	ldr	r3, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d1c:	a80e      	add	r0, sp, #56	; 0x38
 8002d1e:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <lcd_trigplot+0x188>)
 8002d20:	4a39      	ldr	r2, [pc, #228]	; (8002e08 <lcd_trigplot+0x18c>)
 8002d22:	4936      	ldr	r1, [pc, #216]	; (8002dfc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002d24:	f8cd 900c 	str.w	r9, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d28:	f023 febe 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002d2c:	a80e      	add	r0, sp, #56	; 0x38
 8002d2e:	f7ff fabb 	bl	80022a8 <writelcdcmd>
 8002d32:	9003      	str	r0, [sp, #12]
	return (result);
 8002d34:	9b03      	ldr	r3, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d36:	a80e      	add	r0, sp, #56	; 0x38
 8002d38:	4b32      	ldr	r3, [pc, #200]	; (8002e04 <lcd_trigplot+0x188>)
 8002d3a:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <lcd_trigplot+0x190>)
 8002d3c:	492f      	ldr	r1, [pc, #188]	; (8002dfc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002d3e:	f8cd 9008 	str.w	r9, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d42:	f023 feb1 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002d46:	a80e      	add	r0, sp, #56	; 0x38
 8002d48:	f7ff faae 	bl	80022a8 <writelcdcmd>
 8002d4c:	9002      	str	r0, [sp, #8]
	return (result);
 8002d4e:	9b02      	ldr	r3, [sp, #8]
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8002d50:	a806      	add	r0, sp, #24
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	492e      	ldr	r1, [pc, #184]	; (8002e10 <lcd_trigplot+0x194>)
 8002d56:	5cfa      	ldrb	r2, [r7, r3]
 8002d58:	f023 fea6 	bl	8026aa8 <siprintf>
		writelcdcmd(str);
 8002d5c:	a806      	add	r0, sp, #24
 8002d5e:	f7ff faa3 	bl	80022a8 <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	492b      	ldr	r1, [pc, #172]	; (8002e14 <lcd_trigplot+0x198>)
 8002d66:	a806      	add	r0, sp, #24
 8002d68:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002d6c:	f023 fe9c 	bl	8026aa8 <siprintf>
		writelcdcmd(str);
 8002d70:	a806      	add	r0, sp, #24
 8002d72:	f7ff fa99 	bl	80022a8 <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002d76:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002d78:	4927      	ldr	r1, [pc, #156]	; (8002e18 <lcd_trigplot+0x19c>)
 8002d7a:	a806      	add	r0, sp, #24
 8002d7c:	f023 fe94 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002d80:	ab06      	add	r3, sp, #24
 8002d82:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <lcd_trigplot+0x1a0>)
 8002d84:	a80e      	add	r0, sp, #56	; 0x38
 8002d86:	491d      	ldr	r1, [pc, #116]	; (8002dfc <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002d88:	f8cd 9004 	str.w	r9, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d8c:	f023 fe8c 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002d90:	a80e      	add	r0, sp, #56	; 0x38
 8002d92:	f7ff fa89 	bl	80022a8 <writelcdcmd>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002d96:	f9b6 2000 	ldrsh.w	r2, [r6]
	result = writelcdcmd(str);
 8002d9a:	9001      	str	r0, [sp, #4]
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002d9c:	a806      	add	r0, sp, #24
 8002d9e:	2a00      	cmp	r2, #0
 8002da0:	491d      	ldr	r1, [pc, #116]	; (8002e18 <lcd_trigplot+0x19c>)
	return (result);
 8002da2:	9b01      	ldr	r3, [sp, #4]
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002da4:	bfb8      	it	lt
 8002da6:	4252      	neglt	r2, r2
 8002da8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002dac:	f023 fe7c 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002db0:	4912      	ldr	r1, [pc, #72]	; (8002dfc <lcd_trigplot+0x180>)
 8002db2:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <lcd_trigplot+0x1a4>)
 8002db4:	ab06      	add	r3, sp, #24
 8002db6:	a80e      	add	r0, sp, #56	; 0x38
	volatile int result = 0;
 8002db8:	f8cd 9000 	str.w	r9, [sp]
	sprintf(str, "%s=\"%s\"", id, string);
 8002dbc:	f023 fe74 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002dc0:	a80e      	add	r0, sp, #56	; 0x38
 8002dc2:	f7ff fa71 	bl	80022a8 <writelcdcmd>
 8002dc6:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 8002dc8:	4816      	ldr	r0, [pc, #88]	; (8002e24 <lcd_trigplot+0x1a8>)
	result = writelcdcmd(str);
 8002dca:	9300      	str	r3, [sp, #0]
	return (result);
 8002dcc:	9b00      	ldr	r3, [sp, #0]
		writelcdcmd("vis t3,1");
 8002dce:	f7ff fa6b 	bl	80022a8 <writelcdcmd>
		writelcdcmd("vis t4,1");
 8002dd2:	4815      	ldr	r0, [pc, #84]	; (8002e28 <lcd_trigplot+0x1ac>)
 8002dd4:	f7ff fa68 	bl	80022a8 <writelcdcmd>
	trigindex++;
 8002dd8:	6821      	ldr	r1, [r4, #0]
 8002dda:	e776      	b.n	8002cca <lcd_trigplot+0x4e>
 8002ddc:	20001a84 	.word	0x20001a84
 8002de0:	2000303c 	.word	0x2000303c
 8002de4:	20000780 	.word	0x20000780
 8002de8:	20001d4d 	.word	0x20001d4d
 8002dec:	20001f90 	.word	0x20001f90
 8002df0:	20001f94 	.word	0x20001f94
 8002df4:	0802bdc0 	.word	0x0802bdc0
 8002df8:	0802bd18 	.word	0x0802bd18
 8002dfc:	0802bc4c 	.word	0x0802bc4c
 8002e00:	0802bdcc 	.word	0x0802bdcc
 8002e04:	0802bdd4 	.word	0x0802bdd4
 8002e08:	0802bc80 	.word	0x0802bc80
 8002e0c:	0802bd3c 	.word	0x0802bd3c
 8002e10:	0802bde8 	.word	0x0802bde8
 8002e14:	0802bdf4 	.word	0x0802bdf4
 8002e18:	0802bdf0 	.word	0x0802bdf0
 8002e1c:	0802bcdc 	.word	0x0802bcdc
 8002e20:	0802bc44 	.word	0x0802bc44
 8002e24:	0802bd20 	.word	0x0802bd20
 8002e28:	0802bcb0 	.word	0x0802bcb0
 8002e2c:	20001b68 	.word	0x20001b68

08002e30 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8002e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e34:	b0a4      	sub	sp, #144	; 0x90
	volatile int result = 0;
 8002e36:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002e38:	4b2c      	ldr	r3, [pc, #176]	; (8002eec <lcd_presscharts+0xbc>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8002e3a:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	sprintf(str, "%s=\"%s\"", id, string);
 8002e3e:	4a2c      	ldr	r2, [pc, #176]	; (8002ef0 <lcd_presscharts+0xc0>)
 8002e40:	a80c      	add	r0, sp, #48	; 0x30
 8002e42:	492c      	ldr	r1, [pc, #176]	; (8002ef4 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002e44:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e46:	f023 fe2f 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002e4a:	a80c      	add	r0, sp, #48	; 0x30
 8002e4c:	4f2a      	ldr	r7, [pc, #168]	; (8002ef8 <lcd_presscharts+0xc8>)
 8002e4e:	f7ff fa2b 	bl	80022a8 <writelcdcmd>
 8002e52:	9003      	str	r0, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <lcd_presscharts+0xbc>)
 8002e56:	a80c      	add	r0, sp, #48	; 0x30
 8002e58:	4a28      	ldr	r2, [pc, #160]	; (8002efc <lcd_presscharts+0xcc>)
	return (result);
 8002e5a:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e5c:	4925      	ldr	r1, [pc, #148]	; (8002ef4 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002e5e:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e60:	f023 fe22 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002e64:	a80c      	add	r0, sp, #48	; 0x30
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e66:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002f20 <lcd_presscharts+0xf0>
	result = writelcdcmd(str);
 8002e6a:	f7ff fa1d 	bl	80022a8 <writelcdcmd>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <lcd_presscharts+0xd0>)
 8002e70:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <lcd_presscharts+0xd4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
	result = writelcdcmd(str);
 8002e74:	9002      	str	r0, [sp, #8]
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002e76:	a804      	add	r0, sp, #16
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	089b      	lsrs	r3, r3, #2
	return (result);
 8002e7c:	9902      	ldr	r1, [sp, #8]
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002e7e:	4922      	ldr	r1, [pc, #136]	; (8002f08 <lcd_presscharts+0xd8>)
 8002e80:	f023 fe12 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002e84:	ab04      	add	r3, sp, #16
 8002e86:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <lcd_presscharts+0xdc>)
 8002e88:	a80c      	add	r0, sp, #48	; 0x30
 8002e8a:	491a      	ldr	r1, [pc, #104]	; (8002ef4 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002e8c:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002e8e:	f023 fe0b 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002e92:	a80c      	add	r0, sp, #48	; 0x30
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e94:	4e1e      	ldr	r6, [pc, #120]	; (8002f10 <lcd_presscharts+0xe0>)
	result = writelcdcmd(str);
 8002e96:	f7ff fa07 	bl	80022a8 <writelcdcmd>
 8002e9a:	4603      	mov	r3, r0
	writelcdcmd("b2.bco=123");		// normal grey
 8002e9c:	481d      	ldr	r0, [pc, #116]	; (8002f14 <lcd_presscharts+0xe4>)
	result = writelcdcmd(str);
 8002e9e:	9301      	str	r3, [sp, #4]
	return (result);
 8002ea0:	9b01      	ldr	r3, [sp, #4]
	writelcdcmd("b2.bco=123");		// normal grey
 8002ea2:	f7ff fa01 	bl	80022a8 <writelcdcmd>
	buffi = pressindex;
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <lcd_presscharts+0xe8>)
 8002ea8:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002eaa:	e010      	b.n	8002ece <lcd_presscharts+0x9e>
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002eac:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002eb0:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002eb2:	f023 fdf9 	bl	8026aa8 <siprintf>
		writelcdcmd(str);
 8002eb6:	a804      	add	r0, sp, #16
 8002eb8:	f7ff f9f6 	bl	80022a8 <writelcdcmd>
		osDelay(15);
 8002ebc:	200f      	movs	r0, #15
 8002ebe:	f013 fb89 	bl	80165d4 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002ec2:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002ec6:	bfc8      	it	gt
 8002ec8:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8002eca:	3d01      	subs	r5, #1
 8002ecc:	d007      	beq.n	8002ede <lcd_presscharts+0xae>
		if (our_currentpage != 3)		// impatient user
 8002ece:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002ed0:	4631      	mov	r1, r6
 8002ed2:	a804      	add	r0, sp, #16
		if (our_currentpage != 3)		// impatient user
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d0e9      	beq.n	8002eac <lcd_presscharts+0x7c>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8002ed8:	b024      	add	sp, #144	; 0x90
 8002eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002ede:	480f      	ldr	r0, [pc, #60]	; (8002f1c <lcd_presscharts+0xec>)
 8002ee0:	f7ff f9e2 	bl	80022a8 <writelcdcmd>
}
 8002ee4:	b024      	add	sp, #144	; 0x90
 8002ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eea:	bf00      	nop
 8002eec:	0802be10 	.word	0x0802be10
 8002ef0:	0802bd18 	.word	0x0802bd18
 8002ef4:	0802bc4c 	.word	0x0802bc4c
 8002ef8:	20001d4d 	.word	0x20001d4d
 8002efc:	0802bdcc 	.word	0x0802bdcc
 8002f00:	20003434 	.word	0x20003434
 8002f04:	20003438 	.word	0x20003438
 8002f08:	0802be1c 	.word	0x0802be1c
 8002f0c:	0802bcdc 	.word	0x0802bcdc
 8002f10:	0802bde8 	.word	0x0802bde8
 8002f14:	0802bddc 	.word	0x0802bddc
 8002f18:	20001d50 	.word	0x20001d50
 8002f1c:	0802be00 	.word	0x0802be00
 8002f20:	20001d54 	.word	0x20001d54

08002f24 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 8002f24:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8002f26:	4d31      	ldr	r5, [pc, #196]	; (8002fec <lcd_pressplot+0xc8>)
void lcd_pressplot() {
 8002f28:	b0a4      	sub	sp, #144	; 0x90
	p = pressure;
 8002f2a:	4c31      	ldr	r4, [pc, #196]	; (8002ff0 <lcd_pressplot+0xcc>)

	p = pressure * 1000 + pf;
 8002f2c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8002f30:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8002f32:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002f34:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 8002f36:	482f      	ldr	r0, [pc, #188]	; (8002ff4 <lcd_pressplot+0xd0>)
	p = pressure;
 8002f38:	9100      	str	r1, [sp, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002f3a:	9201      	str	r2, [sp, #4]
	p = pressure * 1000 + pf;
 8002f3c:	9b01      	ldr	r3, [sp, #4]
 8002f3e:	fb06 3301 	mla	r3, r6, r1, r3
 8002f42:	9300      	str	r3, [sp, #0]
	if (p < 93000)
 8002f44:	9b00      	ldr	r3, [sp, #0]
 8002f46:	4283      	cmp	r3, r0
 8002f48:	dc01      	bgt.n	8002f4e <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 8002f4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <lcd_pressplot+0xd4>)
 8002f4c:	9300      	str	r3, [sp, #0]
	if (p > 103000)
 8002f4e:	9a00      	ldr	r2, [sp, #0]
 8002f50:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <lcd_pressplot+0xd8>)
 8002f52:	429a      	cmp	r2, r3
 8002f54:	dd00      	ble.n	8002f58 <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8002f56:	9b00      	ldr	r3, [sp, #0]

	p = p - 93000;
 8002f58:	9900      	ldr	r1, [sp, #0]
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <lcd_pressplot+0xdc>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002f5c:	4a29      	ldr	r2, [pc, #164]	; (8003004 <lcd_pressplot+0xe0>)
	p = p - 93000;
 8002f5e:	440b      	add	r3, r1
 8002f60:	9300      	str	r3, [sp, #0]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	fb82 1203 	smull	r1, r2, r2, r3
 8002f68:	17db      	asrs	r3, r3, #31
 8002f6a:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8002f6e:	9302      	str	r3, [sp, #8]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8002f70:	9b02      	ldr	r3, [sp, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da01      	bge.n	8002f7a <lcd_pressplot+0x56>
		val = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	9302      	str	r3, [sp, #8]
	if (val >= 240)
 8002f7a:	9b02      	ldr	r3, [sp, #8]
 8002f7c:	2bef      	cmp	r3, #239	; 0xef
 8002f7e:	dd01      	ble.n	8002f84 <lcd_pressplot+0x60>
		val = 239;		// max Y
 8002f80:	23ef      	movs	r3, #239	; 0xef
 8002f82:	9302      	str	r3, [sp, #8]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002f84:	4920      	ldr	r1, [pc, #128]	; (8003008 <lcd_pressplot+0xe4>)
	pressvec[pressindex] = val;
 8002f86:	9a02      	ldr	r2, [sp, #8]
 8002f88:	4e20      	ldr	r6, [pc, #128]	; (800300c <lcd_pressplot+0xe8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002f8a:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8002f8c:	6833      	ldr	r3, [r6, #0]
 8002f8e:	4820      	ldr	r0, [pc, #128]	; (8003010 <lcd_pressplot+0xec>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002f90:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8002f92:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002f94:	d007      	beq.n	8002fa6 <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8002f96:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8002f98:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8002f9c:	bfa8      	it	ge
 8002f9e:	2300      	movge	r3, #0
 8002fa0:	6033      	str	r3, [r6, #0]
}
 8002fa2:	b024      	add	sp, #144	; 0x90
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	491a      	ldr	r1, [pc, #104]	; (8003014 <lcd_pressplot+0xf0>)
 8002faa:	a804      	add	r0, sp, #16
 8002fac:	f023 fd7c 	bl	8026aa8 <siprintf>
		writelcdcmd(str);
 8002fb0:	a804      	add	r0, sp, #16
 8002fb2:	f7ff f979 	bl	80022a8 <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002fb6:	682b      	ldr	r3, [r5, #0]
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	a804      	add	r0, sp, #16
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	4916      	ldr	r1, [pc, #88]	; (8003018 <lcd_pressplot+0xf4>)
 8002fc0:	f023 fd72 	bl	8026aa8 <siprintf>
	volatile int result = 0;
 8002fc4:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002fc6:	ab04      	add	r3, sp, #16
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <lcd_pressplot+0xf8>)
	volatile int result = 0;
 8002fca:	9103      	str	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fcc:	a80c      	add	r0, sp, #48	; 0x30
 8002fce:	4914      	ldr	r1, [pc, #80]	; (8003020 <lcd_pressplot+0xfc>)
 8002fd0:	f023 fd6a 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8002fd4:	a80c      	add	r0, sp, #48	; 0x30
 8002fd6:	f7ff f967 	bl	80022a8 <writelcdcmd>
 8002fda:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 8002fdc:	4811      	ldr	r0, [pc, #68]	; (8003024 <lcd_pressplot+0x100>)
	result = writelcdcmd(str);
 8002fde:	9303      	str	r3, [sp, #12]
	return (result);
 8002fe0:	9b03      	ldr	r3, [sp, #12]
		writelcdcmd("vis t3,1");
 8002fe2:	f7ff f961 	bl	80022a8 <writelcdcmd>
	pressindex++;
 8002fe6:	6833      	ldr	r3, [r6, #0]
 8002fe8:	e7d5      	b.n	8002f96 <lcd_pressplot+0x72>
 8002fea:	bf00      	nop
 8002fec:	20003434 	.word	0x20003434
 8002ff0:	20003438 	.word	0x20003438
 8002ff4:	00016b47 	.word	0x00016b47
 8002ff8:	00016b48 	.word	0x00016b48
 8002ffc:	00019258 	.word	0x00019258
 8003000:	fffe94b8 	.word	0xfffe94b8
 8003004:	63e7063f 	.word	0x63e7063f
 8003008:	20001d4d 	.word	0x20001d4d
 800300c:	20001d50 	.word	0x20001d50
 8003010:	20001d54 	.word	0x20001d54
 8003014:	0802bde8 	.word	0x0802bde8
 8003018:	0802be1c 	.word	0x0802be1c
 800301c:	0802bcdc 	.word	0x0802bcdc
 8003020:	0802bc4c 	.word	0x0802bc4c
 8003024:	0802bd20 	.word	0x0802bd20

08003028 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8003028:	b510      	push	{r4, lr}
	unsigned char str[48];

	osDelay(100);
 800302a:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 800302c:	b0a8      	sub	sp, #160	; 0xa0
	osDelay(100);
 800302e:	f013 fad1 	bl	80165d4 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8003032:	4b19      	ldr	r3, [pc, #100]	; (8003098 <lcd_controls+0x70>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d001      	beq.n	800303e <lcd_controls+0x16>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 800303a:	b028      	add	sp, #160	; 0xa0
 800303c:	bd10      	pop	{r4, pc}
	volatile int result = 0;
 800303e:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <lcd_controls+0x74>)
 8003042:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <lcd_controls+0x78>)
 8003044:	a810      	add	r0, sp, #64	; 0x40
 8003046:	4917      	ldr	r1, [pc, #92]	; (80030a4 <lcd_controls+0x7c>)
	volatile int result = 0;
 8003048:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 800304a:	f023 fd2d 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 800304e:	a810      	add	r0, sp, #64	; 0x40
 8003050:	f7ff f92a 	bl	80022a8 <writelcdcmd>
 8003054:	9003      	str	r0, [sp, #12]
	return (result);
 8003056:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8003058:	a810      	add	r0, sp, #64	; 0x40
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <lcd_controls+0x80>)
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <lcd_controls+0x84>)
 800305e:	4911      	ldr	r1, [pc, #68]	; (80030a4 <lcd_controls+0x7c>)
	volatile int result = 0;
 8003060:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8003062:	f023 fd21 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8003066:	a810      	add	r0, sp, #64	; 0x40
 8003068:	f7ff f91e 	bl	80022a8 <writelcdcmd>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 800306c:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <lcd_controls+0x88>)
	result = writelcdcmd(str);
 800306e:	9002      	str	r0, [sp, #8]
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8003070:	a804      	add	r0, sp, #16
 8003072:	4910      	ldr	r1, [pc, #64]	; (80030b4 <lcd_controls+0x8c>)
	return (result);
 8003074:	9b02      	ldr	r3, [sp, #8]
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8003076:	f023 fd17 	bl	8026aa8 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800307a:	ab04      	add	r3, sp, #16
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <lcd_controls+0x90>)
 800307e:	4909      	ldr	r1, [pc, #36]	; (80030a4 <lcd_controls+0x7c>)
 8003080:	a810      	add	r0, sp, #64	; 0x40
	volatile int result = 0;
 8003082:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8003084:	f023 fd10 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8003088:	a810      	add	r0, sp, #64	; 0x40
 800308a:	f7ff f90d 	bl	80022a8 <writelcdcmd>
 800308e:	9001      	str	r0, [sp, #4]
	return (result);
 8003090:	9b01      	ldr	r3, [sp, #4]
}
 8003092:	b028      	add	sp, #160	; 0xa0
 8003094:	bd10      	pop	{r4, pc}
 8003096:	bf00      	nop
 8003098:	20001d4d 	.word	0x20001d4d
 800309c:	0802be28 	.word	0x0802be28
 80030a0:	0802bcdc 	.word	0x0802bcdc
 80030a4:	0802bc4c 	.word	0x0802bc4c
 80030a8:	0802be30 	.word	0x0802be30
 80030ac:	0802bd3c 	.word	0x0802bd3c
 80030b0:	20003530 	.word	0x20003530
 80030b4:	0802be38 	.word	0x0802be38
 80030b8:	0802bd18 	.word	0x0802bd18

080030bc <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 80030bc:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 80030be:	4c23      	ldr	r4, [pc, #140]	; (800314c <lcd_pagechange+0x90>)
lcd_pagechange(uint8_t newpage) {
 80030c0:	b09a      	sub	sp, #104	; 0x68
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 80030c2:	7823      	ldrb	r3, [r4, #0]
 80030c4:	4283      	cmp	r3, r0
 80030c6:	d009      	beq.n	80030dc <lcd_pagechange+0x20>
	our_currentpage = newpage;
 80030c8:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 80030ca:	2805      	cmp	r0, #5
 80030cc:	d83a      	bhi.n	8003144 <lcd_pagechange+0x88>
 80030ce:	e8df f000 	tbb	[pc, r0]
 80030d2:	030f      	.short	0x030f
 80030d4:	0509332d 	.word	0x0509332d
		lcd_showvars();		// display vars on the lcd
 80030d8:	f7ff fba4 	bl	8002824 <lcd_showvars>
	return (our_currentpage);
 80030dc:	7820      	ldrb	r0, [r4, #0]
 80030de:	b2c0      	uxtb	r0, r0
}
 80030e0:	b01a      	add	sp, #104	; 0x68
 80030e2:	bd10      	pop	{r4, pc}
		lcd_controls();
 80030e4:	f7ff ffa0 	bl	8003028 <lcd_controls>
	return (our_currentpage);
 80030e8:	7820      	ldrb	r0, [r4, #0]
 80030ea:	b2c0      	uxtb	r0, r0
}
 80030ec:	b01a      	add	sp, #104	; 0x68
 80030ee:	bd10      	pop	{r4, pc}
		lcd_time();
 80030f0:	f7ff faf6 	bl	80026e0 <lcd_time>
	lastday = timeinfo.tm_yday;
 80030f4:	4b16      	ldr	r3, [pc, #88]	; (8003150 <lcd_pagechange+0x94>)
 80030f6:	4917      	ldr	r1, [pc, #92]	; (8003154 <lcd_pagechange+0x98>)
 80030f8:	69d8      	ldr	r0, [r3, #28]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80030fa:	4a17      	ldr	r2, [pc, #92]	; (8003158 <lcd_pagechange+0x9c>)
	lastday = timeinfo.tm_yday;
 80030fc:	6008      	str	r0, [r1, #0]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 80030fe:	2128      	movs	r1, #40	; 0x28
 8003100:	4816      	ldr	r0, [pc, #88]	; (800315c <lcd_pagechange+0xa0>)
 8003102:	f024 fac7 	bl	8027694 <strftime>
	volatile int result = 0;
 8003106:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <lcd_pagechange+0xa0>)
 800310a:	a802      	add	r0, sp, #8
 800310c:	4a14      	ldr	r2, [pc, #80]	; (8003160 <lcd_pagechange+0xa4>)
	volatile int result = 0;
 800310e:	9101      	str	r1, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8003110:	4914      	ldr	r1, [pc, #80]	; (8003164 <lcd_pagechange+0xa8>)
 8003112:	f023 fcc9 	bl	8026aa8 <siprintf>
	result = writelcdcmd(str);
 8003116:	a802      	add	r0, sp, #8
 8003118:	f7ff f8c6 	bl	80022a8 <writelcdcmd>
 800311c:	9001      	str	r0, [sp, #4]
	return (result);
 800311e:	9b01      	ldr	r3, [sp, #4]
	if (our_currentpage != 0)
 8003120:	7823      	ldrb	r3, [r4, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1da      	bne.n	80030dc <lcd_pagechange+0x20>
 8003126:	f7ff f8db 	bl	80022e0 <lcd_gps.part.0>
 800312a:	e7d7      	b.n	80030dc <lcd_pagechange+0x20>
		lcd_trigcharts();		// display chart
 800312c:	f7ff fce6 	bl	8002afc <lcd_trigcharts>
	return (our_currentpage);
 8003130:	7820      	ldrb	r0, [r4, #0]
 8003132:	b2c0      	uxtb	r0, r0
}
 8003134:	b01a      	add	sp, #104	; 0x68
 8003136:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8003138:	f7ff fe7a 	bl	8002e30 <lcd_presscharts>
	return (our_currentpage);
 800313c:	7820      	ldrb	r0, [r4, #0]
 800313e:	b2c0      	uxtb	r0, r0
}
 8003140:	b01a      	add	sp, #104	; 0x68
 8003142:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8003144:	4808      	ldr	r0, [pc, #32]	; (8003168 <lcd_pagechange+0xac>)
 8003146:	f023 fb61 	bl	802680c <puts>
		break;
 800314a:	e7c7      	b.n	80030dc <lcd_pagechange+0x20>
 800314c:	20001d4d 	.word	0x20001d4d
 8003150:	20001f68 	.word	0x20001f68
 8003154:	20001a7c 	.word	0x20001a7c
 8003158:	0802bd2c 	.word	0x0802bd2c
 800315c:	20001f3c 	.word	0x20001f3c
 8003160:	0802bd3c 	.word	0x0802bd3c
 8003164:	0802bc4c 	.word	0x0802bc4c
 8003168:	0802be50 	.word	0x0802be50

0800316c <lcd_init>:

// try to set the baud to 230400
// only assumes it could be at 9600 to begin with
lcd_init(int rqbaud) {
 800316c:	b570      	push	{r4, r5, r6, lr}
	lcduart_error = HAL_UART_ERROR_NONE;
 800316e:	4d16      	ldr	r5, [pc, #88]	; (80031c8 <lcd_init+0x5c>)
 8003170:	2600      	movs	r6, #0
lcd_init(int rqbaud) {
 8003172:	4604      	mov	r4, r0
	lcduart_error = HAL_UART_ERROR_NONE;
 8003174:	602e      	str	r6, [r5, #0]

	lcd_reset();		// command LCD reset at the current baudrate - it should switch to 9600
 8003176:	f7fe ff8f 	bl	8002098 <lcd_reset>
	lcd_baud(9600);  // command LCD to 9600 from current (unknown) speed
 800317a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800317e:	f7fe ffb7 	bl	80020f0 <lcd_baud>
	lcd_uart_init(9600); // then change our uart baud to match
 8003182:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003186:	f7fe ff45 	bl	8002014 <lcd_uart_init>
	lcd_reset();	// command LCD reset at the current baudrate - it should switch to 9600
 800318a:	f7fe ff85 	bl	8002098 <lcd_reset>
	lcd_baud(9600);  // reset LCD (might be 2nd time or not)
 800318e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003192:	f7fe ffad 	bl	80020f0 <lcd_baud>
	osDelay(600);
 8003196:	f44f 7016 	mov.w	r0, #600	; 0x258
 800319a:	f013 fa1b 	bl	80165d4 <osDelay>

	lcd_baud(rqbaud);  //  LCD *should* return in rqbuad baud
 800319e:	4620      	mov	r0, r4
 80031a0:	f7fe ffa6 	bl	80020f0 <lcd_baud>
	osDelay(600);
 80031a4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80031a8:	f013 fa14 	bl	80165d4 <osDelay>
	lcd_uart_init(rqbaud); // then change our baud to match
 80031ac:	4620      	mov	r0, r4
 80031ae:	f7fe ff31 	bl	8002014 <lcd_uart_init>

	osDelay(600);
 80031b2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80031b6:	f013 fa0d 	bl	80165d4 <osDelay>
	lcduart_error = HAL_UART_ERROR_NONE;
 80031ba:	602e      	str	r6, [r5, #0]
//	printf("nxt_baud:\n");
	writelcdcmd("page 0");
 80031bc:	4803      	ldr	r0, [pc, #12]	; (80031cc <lcd_init+0x60>)
}
 80031be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	writelcdcmd("page 0");
 80031c2:	f7ff b871 	b.w	80022a8 <writelcdcmd>
 80031c6:	bf00      	nop
 80031c8:	20001b40 	.word	0x20001b40
 80031cc:	0802be64 	.word	0x0802be64

080031d0 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 80031d0:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 80031d2:	4d45      	ldr	r5, [pc, #276]	; (80032e8 <processnex+0x118>)
void processnex() {		// process Nextion - called at regular intervals
 80031d4:	b08a      	sub	sp, #40	; 0x28
	switch (lcduart_error) {
 80031d6:	682b      	ldr	r3, [r5, #0]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d05a      	beq.n	8003292 <processnex+0xc2>
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d053      	beq.n	8003288 <processnex+0xb8>
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d03c      	beq.n	800325e <processnex+0x8e>
 80031e4:	4c41      	ldr	r4, [pc, #260]	; (80032ec <processnex+0x11c>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80031e6:	2600      	movs	r6, #0
 80031e8:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d03f      	beq.n	8003270 <processnex+0xa0>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d06c      	beq.n	80032d0 <processnex+0x100>
	if (lcd_initflag == 3) {	// uart only
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d056      	beq.n	80032aa <processnex+0xda>
	lcd_rxdma();		// get any new characters received
 80031fc:	f7fe fff4 	bl	80021e8 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8003200:	f000 f90a 	bl	8003418 <lcd_event_process>
	if (dimtimer > 50000) {
 8003204:	4a3a      	ldr	r2, [pc, #232]	; (80032f0 <processnex+0x120>)
 8003206:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 800320a:	9000      	str	r0, [sp, #0]
	if (dimtimer > 50000) {
 800320c:	6813      	ldr	r3, [r2, #0]
 800320e:	428b      	cmp	r3, r1
 8003210:	d903      	bls.n	800321a <processnex+0x4a>
		dimtimer--;
 8003212:	3b01      	subs	r3, #1
 8003214:	6013      	str	r3, [r2, #0]
}
 8003216:	b00a      	add	sp, #40	; 0x28
 8003218:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 4)));		// - 62.5% dim
 800321a:	4836      	ldr	r0, [pc, #216]	; (80032f4 <processnex+0x124>)
		dimtimer = 60000;
 800321c:	f64e 2560 	movw	r5, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 4)));		// - 62.5% dim
 8003220:	6801      	ldr	r1, [r0, #0]
 8003222:	6804      	ldr	r4, [r0, #0]
 8003224:	6803      	ldr	r3, [r0, #0]
		dimtimer = 60000;
 8003226:	6015      	str	r5, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 4)));		// - 62.5% dim
 8003228:	111b      	asrs	r3, r3, #4
 800322a:	eb03 0364 	add.w	r3, r3, r4, asr #1
 800322e:	1aca      	subs	r2, r1, r3
		if (i < 2)
 8003230:	2a01      	cmp	r2, #1
 8003232:	dd35      	ble.n	80032a0 <processnex+0xd0>
 8003234:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 4)));		// - 62.5% dim
 8003236:	4930      	ldr	r1, [pc, #192]	; (80032f8 <processnex+0x128>)
 8003238:	4613      	mov	r3, r2
 800323a:	bf28      	it	cs
 800323c:	2363      	movcs	r3, #99	; 0x63
 800323e:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8003240:	4a2e      	ldr	r2, [pc, #184]	; (80032fc <processnex+0x12c>)
 8003242:	a802      	add	r0, sp, #8
 8003244:	492e      	ldr	r1, [pc, #184]	; (8003300 <processnex+0x130>)
 8003246:	f023 fc2f 	bl	8026aa8 <siprintf>
	result = writelcdcmd(buffer);
 800324a:	a802      	add	r0, sp, #8
 800324c:	f7ff f82c 	bl	80022a8 <writelcdcmd>
 8003250:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 8003252:	9b01      	ldr	r3, [sp, #4]
 8003254:	3301      	adds	r3, #1
 8003256:	d043      	beq.n	80032e0 <processnex+0x110>
	return (result);
 8003258:	9b01      	ldr	r3, [sp, #4]
}
 800325a:	b00a      	add	sp, #40	; 0x28
 800325c:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 800325e:	4c23      	ldr	r4, [pc, #140]	; (80032ec <processnex+0x11c>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003260:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 8003262:	4828      	ldr	r0, [pc, #160]	; (8003304 <processnex+0x134>)
 8003264:	f023 fad2 	bl	802680c <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 8003268:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d1bf      	bne.n	80031f0 <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 8003270:	4825      	ldr	r0, [pc, #148]	; (8003308 <processnex+0x138>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8003272:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8003274:	f023 faca 	bl	802680c <puts>
		lcd_init(230400);		// try to reset LCD
 8003278:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 800327c:	f7ff ff76 	bl	800316c <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8003280:	2302      	movs	r3, #2
 8003282:	6023      	str	r3, [r4, #0]
}
 8003284:	b00a      	add	sp, #40	; 0x28
 8003286:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 8003288:	4820      	ldr	r0, [pc, #128]	; (800330c <processnex+0x13c>)
 800328a:	4c18      	ldr	r4, [pc, #96]	; (80032ec <processnex+0x11c>)
 800328c:	f023 fabe 	bl	802680c <puts>
 8003290:	e7a9      	b.n	80031e6 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 8003292:	481f      	ldr	r0, [pc, #124]	; (8003310 <processnex+0x140>)
 8003294:	f023 faba 	bl	802680c <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 8003298:	4c14      	ldr	r4, [pc, #80]	; (80032ec <processnex+0x11c>)
 800329a:	2301      	movs	r3, #1
 800329c:	6023      	str	r3, [r4, #0]
		break;
 800329e:	e7a2      	b.n	80031e6 <processnex+0x16>
			i = 2;	// prevent black
 80032a0:	2202      	movs	r2, #2
 80032a2:	4915      	ldr	r1, [pc, #84]	; (80032f8 <processnex+0x128>)
 80032a4:	4613      	mov	r3, r2
 80032a6:	600a      	str	r2, [r1, #0]
 80032a8:	e7ca      	b.n	8003240 <processnex+0x70>
		printf("processnex: calling lcd_uart_init(230400)\n");
 80032aa:	481a      	ldr	r0, [pc, #104]	; (8003314 <processnex+0x144>)
		lcduart_error = HAL_UART_ERROR_NONE;
 80032ac:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 80032ae:	f023 faad 	bl	802680c <puts>
		lcd_uart_init(230400);
 80032b2:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80032b6:	f7fe fead 	bl	8002014 <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 80032ba:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80032be:	f7ff ff55 	bl	800316c <lcd_init>
		osDelay(100);
 80032c2:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 80032c4:	6026      	str	r6, [r4, #0]
}
 80032c6:	b00a      	add	sp, #40	; 0x28
 80032c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 80032cc:	f013 b982 	b.w	80165d4 <osDelay>
		osDelay(500);
 80032d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032d4:	f013 f97e 	bl	80165d4 <osDelay>
		lcd_initflag = 3;
 80032d8:	2303      	movs	r3, #3
 80032da:	6023      	str	r3, [r4, #0]
}
 80032dc:	b00a      	add	sp, #40	; 0x28
 80032de:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80032e0:	480d      	ldr	r0, [pc, #52]	; (8003318 <processnex+0x148>)
 80032e2:	f023 f9f7 	bl	80266d4 <iprintf>
 80032e6:	e7b7      	b.n	8003258 <processnex+0x88>
 80032e8:	20001b40 	.word	0x20001b40
 80032ec:	20001a8c 	.word	0x20001a8c
 80032f0:	2000000c 	.word	0x2000000c
 80032f4:	20000018 	.word	0x20000018
 80032f8:	20001a78 	.word	0x20001a78
 80032fc:	0802bcc8 	.word	0x0802bcc8
 8003300:	0802bc90 	.word	0x0802bc90
 8003304:	0802be6c 	.word	0x0802be6c
 8003308:	0802bea4 	.word	0x0802bea4
 800330c:	0802be90 	.word	0x0802be90
 8003310:	0802be7c 	.word	0x0802be7c
 8003314:	0802becc 	.word	0x0802becc
 8003318:	0802bc98 	.word	0x0802bc98

0800331c <lcd_getlack>:
uint8_t lcd_getlack() {
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (lcdstatus == 0xff) {
 800331e:	4d12      	ldr	r5, [pc, #72]	; (8003368 <lcd_getlack+0x4c>)
	processnex();
 8003320:	f7ff ff56 	bl	80031d0 <processnex>
	while (lcdstatus == 0xff) {
 8003324:	782b      	ldrb	r3, [r5, #0]
 8003326:	2bff      	cmp	r3, #255	; 0xff
 8003328:	d11a      	bne.n	8003360 <lcd_getlack+0x44>
 800332a:	b2df      	uxtb	r7, r3
 800332c:	4c0f      	ldr	r4, [pc, #60]	; (800336c <lcd_getlack+0x50>)
		if (trys > 1500) {
 800332e:	f240 56dc 	movw	r6, #1500	; 0x5dc
 8003332:	e007      	b.n	8003344 <lcd_getlack+0x28>
		trys++;
 8003334:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8003336:	f013 f94d 	bl	80165d4 <osDelay>
		processnex();
 800333a:	f7ff ff49 	bl	80031d0 <processnex>
	while (lcdstatus == 0xff) {
 800333e:	782b      	ldrb	r3, [r5, #0]
 8003340:	2bff      	cmp	r3, #255	; 0xff
 8003342:	d10d      	bne.n	8003360 <lcd_getlack+0x44>
		if (trys > 1500) {
 8003344:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003346:	2001      	movs	r0, #1
		if (trys > 1500) {
 8003348:	42b3      	cmp	r3, r6
		trys++;
 800334a:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1500) {
 800334e:	d9f1      	bls.n	8003334 <lcd_getlack+0x18>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8003350:	4807      	ldr	r0, [pc, #28]	; (8003370 <lcd_getlack+0x54>)
 8003352:	f023 f9bf 	bl	80266d4 <iprintf>
			trys = 0;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4638      	mov	r0, r7
			trys = 0;
 800335a:	6023      	str	r3, [r4, #0]
			lcdstatus = 0;
 800335c:	702b      	strb	r3, [r5, #0]
}
 800335e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (lcdstatus);
 8003360:	782f      	ldrb	r7, [r5, #0]
 8003362:	b2ff      	uxtb	r7, r7
}
 8003364:	4638      	mov	r0, r7
 8003366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003368:	20001b3c 	.word	0x20001b3c
 800336c:	20002174 	.word	0x20002174
 8003370:	0802bef8 	.word	0x0802bef8

08003374 <getlcdpage>:
int getlcdpage(void) {
 8003374:	b5f0      	push	{r4, r5, r6, r7, lr}
	lcd_txblocked = 1;		// stop others sending to the LCD
 8003376:	2301      	movs	r3, #1
 8003378:	4e21      	ldr	r6, [pc, #132]	; (8003400 <getlcdpage+0x8c>)
	strcpy(pkt, str);
 800337a:	4c22      	ldr	r4, [pc, #136]	; (8003404 <getlcdpage+0x90>)
int getlcdpage(void) {
 800337c:	b09b      	sub	sp, #108	; 0x6c
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800337e:	2096      	movs	r0, #150	; 0x96
	lcd_txblocked = 1;		// stop others sending to the LCD
 8003380:	6033      	str	r3, [r6, #0]
	strcat(pkt, "\xff\xff\xff");
 8003382:	4d21      	ldr	r5, [pc, #132]	; (8003408 <getlcdpage+0x94>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8003384:	f013 f926 	bl	80165d4 <osDelay>
	lcdstatus = 0xff;
 8003388:	4b20      	ldr	r3, [pc, #128]	; (800340c <getlcdpage+0x98>)
 800338a:	22ff      	movs	r2, #255	; 0xff
	strcpy(pkt, str);
 800338c:	e894 0003 	ldmia.w	r4, {r0, r1}
	lcdstatus = 0xff;
 8003390:	701a      	strb	r2, [r3, #0]
	strcpy(pkt, str);
 8003392:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 8003394:	6828      	ldr	r0, [r5, #0]
	strcpy(pkt, str);
 8003396:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 800339a:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 800339e:	a802      	add	r0, sp, #8
 80033a0:	f7fe feea 	bl	8002178 <lcd_puts>
	result = intwritelcdcmd("sendme");
 80033a4:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 80033a6:	9b01      	ldr	r3, [sp, #4]
 80033a8:	3301      	adds	r3, #1
 80033aa:	d025      	beq.n	80033f8 <getlcdpage+0x84>
	result = lcd_getlack();		// wait for a response
 80033ac:	f7ff ffb6 	bl	800331c <lcd_getlack>
 80033b0:	9001      	str	r0, [sp, #4]
	while (result == -1) {	// try again
 80033b2:	9b01      	ldr	r3, [sp, #4]
 80033b4:	3301      	adds	r3, #1
 80033b6:	d11a      	bne.n	80033ee <getlcdpage+0x7a>
	strcat(pkt, "\xff\xff\xff");
 80033b8:	682d      	ldr	r5, [r5, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 80033ba:	4f15      	ldr	r7, [pc, #84]	; (8003410 <getlcdpage+0x9c>)
 80033bc:	e005      	b.n	80033ca <getlcdpage+0x56>
		result = lcd_getlack();		// wait for a response
 80033be:	f7ff ffad 	bl	800331c <lcd_getlack>
 80033c2:	9001      	str	r0, [sp, #4]
	while (result == -1) {	// try again
 80033c4:	9b01      	ldr	r3, [sp, #4]
 80033c6:	3301      	adds	r3, #1
 80033c8:	d111      	bne.n	80033ee <getlcdpage+0x7a>
	strcat(pkt, "\xff\xff\xff");
 80033ca:	f8cd 500e 	str.w	r5, [sp, #14]
	strcpy(pkt, str);
 80033ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033d2:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 80033d4:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 80033d6:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 80033da:	f7fe fecd 	bl	8002178 <lcd_puts>
		result = intwritelcdcmd("sendme");
 80033de:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 80033e0:	9b01      	ldr	r3, [sp, #4]
 80033e2:	3301      	adds	r3, #1
 80033e4:	d1eb      	bne.n	80033be <getlcdpage+0x4a>
			printf("getlcdpage2: Cmd failed\n\r");
 80033e6:	4638      	mov	r0, r7
 80033e8:	f023 f974 	bl	80266d4 <iprintf>
 80033ec:	e7e7      	b.n	80033be <getlcdpage+0x4a>
	lcd_txblocked = 0;		// allow others sending to the LCD
 80033ee:	2300      	movs	r3, #0
 80033f0:	6033      	str	r3, [r6, #0]
	return (result);
 80033f2:	9801      	ldr	r0, [sp, #4]
}
 80033f4:	b01b      	add	sp, #108	; 0x6c
 80033f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("getlcdpage: sendme failed\n");
 80033f8:	4806      	ldr	r0, [pc, #24]	; (8003414 <getlcdpage+0xa0>)
 80033fa:	f023 fa07 	bl	802680c <puts>
 80033fe:	e7d5      	b.n	80033ac <getlcdpage+0x38>
 8003400:	20001a90 	.word	0x20001a90
 8003404:	0802bf28 	.word	0x0802bf28
 8003408:	0802bb7c 	.word	0x0802bb7c
 800340c:	20001b3c 	.word	0x20001b3c
 8003410:	0802bf4c 	.word	0x0802bf4c
 8003414:	0802bf30 	.word	0x0802bf30

08003418 <lcd_event_process>:
int lcd_event_process(void) {
 8003418:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 800341a:	4c8d      	ldr	r4, [pc, #564]	; (8003650 <lcd_event_process+0x238>)
int lcd_event_process(void) {
 800341c:	b08d      	sub	sp, #52	; 0x34
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 800341e:	2160      	movs	r1, #96	; 0x60
 8003420:	4620      	mov	r0, r4
 8003422:	f7ff f88b 	bl	800253c <isnexpkt>
 8003426:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8003428:	9b01      	ldr	r3, [sp, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	dd27      	ble.n	800347e <lcd_event_process+0x66>
		lcdstatus = eventbuffer[0];
 800342e:	7821      	ldrb	r1, [r4, #0]
 8003430:	4b88      	ldr	r3, [pc, #544]	; (8003654 <lcd_event_process+0x23c>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8003432:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8003434:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8003436:	d91e      	bls.n	8003476 <lcd_event_process+0x5e>
			switch (eventbuffer[0]) {
 8003438:	2924      	cmp	r1, #36	; 0x24
 800343a:	f000 80d5 	beq.w	80035e8 <lcd_event_process+0x1d0>
 800343e:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8003442:	b2da      	uxtb	r2, r3
 8003444:	2a25      	cmp	r2, #37	; 0x25
 8003446:	d81d      	bhi.n	8003484 <lcd_event_process+0x6c>
 8003448:	2b25      	cmp	r3, #37	; 0x25
 800344a:	d81b      	bhi.n	8003484 <lcd_event_process+0x6c>
 800344c:	e8df f003 	tbb	[pc, r3]
 8003450:	6c961aa2 	.word	0x6c961aa2
 8003454:	1a1a1a1a 	.word	0x1a1a1a1a
 8003458:	1a1a1a1a 	.word	0x1a1a1a1a
 800345c:	1aae1a1a 	.word	0x1aae1a1a
 8003460:	1a1a1a1a 	.word	0x1a1a1a1a
 8003464:	1a1a1a1a 	.word	0x1a1a1a1a
 8003468:	1a1a1a1a 	.word	0x1a1a1a1a
 800346c:	1a1a1a1a 	.word	0x1a1a1a1a
 8003470:	1a1a1a1a 	.word	0x1a1a1a1a
 8003474:	671a      	.short	0x671a
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8003476:	2901      	cmp	r1, #1
 8003478:	d123      	bne.n	80034c2 <lcd_event_process+0xaa>
}
 800347a:	b00d      	add	sp, #52	; 0x34
 800347c:	bd30      	pop	{r4, r5, pc}
		return (result);		// 0 = nothing found, -1 = timeout, -2=no char
 800347e:	9801      	ldr	r0, [sp, #4]
}
 8003480:	b00d      	add	sp, #52	; 0x34
 8003482:	bd30      	pop	{r4, r5, pc}
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8003484:	4874      	ldr	r0, [pc, #464]	; (8003658 <lcd_event_process+0x240>)
 8003486:	f023 f925 	bl	80266d4 <iprintf>
				i = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	9304      	str	r3, [sp, #16]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 800348e:	9b04      	ldr	r3, [sp, #16]
 8003490:	5ce3      	ldrb	r3, [r4, r3]
 8003492:	2bff      	cmp	r3, #255	; 0xff
 8003494:	d00f      	beq.n	80034b6 <lcd_event_process+0x9e>
					printf(" 0x%02x", eventbuffer[i++]);
 8003496:	4d71      	ldr	r5, [pc, #452]	; (800365c <lcd_event_process+0x244>)
 8003498:	e009      	b.n	80034ae <lcd_event_process+0x96>
 800349a:	9b04      	ldr	r3, [sp, #16]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	5ce1      	ldrb	r1, [r4, r3]
 80034a0:	9204      	str	r2, [sp, #16]
 80034a2:	f023 f917 	bl	80266d4 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 80034a6:	9b04      	ldr	r3, [sp, #16]
 80034a8:	5ce3      	ldrb	r3, [r4, r3]
 80034aa:	2bff      	cmp	r3, #255	; 0xff
 80034ac:	d003      	beq.n	80034b6 <lcd_event_process+0x9e>
 80034ae:	9b04      	ldr	r3, [sp, #16]
					printf(" 0x%02x", eventbuffer[i++]);
 80034b0:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 80034b2:	2b5f      	cmp	r3, #95	; 0x5f
 80034b4:	d9f1      	bls.n	800349a <lcd_event_process+0x82>
				printf("\n");
 80034b6:	200a      	movs	r0, #10
 80034b8:	f023 f924 	bl	8026704 <putchar>
				return (-1);
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	e7db      	b.n	800347a <lcd_event_process+0x62>
				printf("Nextion reported: ");
 80034c2:	4867      	ldr	r0, [pc, #412]	; (8003660 <lcd_event_process+0x248>)
 80034c4:	f023 f906 	bl	80266d4 <iprintf>
				switch (eventbuffer[0]) {
 80034c8:	7821      	ldrb	r1, [r4, #0]
 80034ca:	2924      	cmp	r1, #36	; 0x24
 80034cc:	f200 8091 	bhi.w	80035f2 <lcd_event_process+0x1da>
 80034d0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80034d4:	011d0122 	.word	0x011d0122
 80034d8:	008f0118 	.word	0x008f0118
 80034dc:	010e008f 	.word	0x010e008f
 80034e0:	008f008f 	.word	0x008f008f
 80034e4:	008f008f 	.word	0x008f008f
 80034e8:	008f008f 	.word	0x008f008f
 80034ec:	008f008f 	.word	0x008f008f
 80034f0:	008f008f 	.word	0x008f008f
 80034f4:	008f008f 	.word	0x008f008f
 80034f8:	008f0106 	.word	0x008f0106
 80034fc:	008f008f 	.word	0x008f008f
 8003500:	008f008f 	.word	0x008f008f
 8003504:	008f008f 	.word	0x008f008f
 8003508:	008f00fe 	.word	0x008f00fe
 800350c:	008f00f8 	.word	0x008f00f8
 8003510:	008f00f2 	.word	0x008f00f2
 8003514:	008f00ec 	.word	0x008f00ec
 8003518:	00b8008f 	.word	0x00b8008f
 800351c:	00b2      	.short	0x00b2
				printf("Nextion returned 0x88 - Ready!\n");
 800351e:	4851      	ldr	r0, [pc, #324]	; (8003664 <lcd_event_process+0x24c>)
 8003520:	f023 f974 	bl	802680c <puts>
			return (0);
 8003524:	2000      	movs	r0, #0
				break;
 8003526:	e7a8      	b.n	800347a <lcd_event_process+0x62>
				setlcddim(lcdbright);
 8003528:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <lcd_event_process+0x250>)
	dimtimer = DIMTIME;
 800352a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800352e:	4a4f      	ldr	r2, [pc, #316]	; (800366c <lcd_event_process+0x254>)
	sprintf(buffer, "%s=%lu", id, value);
 8003530:	a804      	add	r0, sp, #16
				setlcddim(lcdbright);
 8003532:	681b      	ldr	r3, [r3, #0]
	dimtimer = DIMTIME;
 8003534:	6011      	str	r1, [r2, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8003536:	2b63      	cmp	r3, #99	; 0x63
 8003538:	4a4d      	ldr	r2, [pc, #308]	; (8003670 <lcd_event_process+0x258>)
 800353a:	494e      	ldr	r1, [pc, #312]	; (8003674 <lcd_event_process+0x25c>)
 800353c:	bf28      	it	cs
 800353e:	2363      	movcs	r3, #99	; 0x63
 8003540:	f023 fab2 	bl	8026aa8 <siprintf>
	result = writelcdcmd(buffer);
 8003544:	a804      	add	r0, sp, #16
 8003546:	f7fe feaf 	bl	80022a8 <writelcdcmd>
 800354a:	9003      	str	r0, [sp, #12]
	if (result == -1) {		// wait for response
 800354c:	9b03      	ldr	r3, [sp, #12]
 800354e:	3301      	adds	r3, #1
 8003550:	d06e      	beq.n	8003630 <lcd_event_process+0x218>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8003552:	7860      	ldrb	r0, [r4, #1]
	return (result);
 8003554:	9b03      	ldr	r3, [sp, #12]
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8003556:	f7ff fdb1 	bl	80030bc <lcd_pagechange>
 800355a:	2800      	cmp	r0, #0
 800355c:	db05      	blt.n	800356a <lcd_event_process+0x152>
 800355e:	7860      	ldrb	r0, [r4, #1]
 8003560:	f7ff fdac 	bl	80030bc <lcd_pagechange>
 8003564:	2805      	cmp	r0, #5
 8003566:	f340 80e0 	ble.w	800372a <lcd_event_process+0x312>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 800356a:	7860      	ldrb	r0, [r4, #1]
 800356c:	f7ff fda6 	bl	80030bc <lcd_pagechange>
 8003570:	4601      	mov	r1, r0
 8003572:	4841      	ldr	r0, [pc, #260]	; (8003678 <lcd_event_process+0x260>)
 8003574:	f023 f8ae 	bl	80266d4 <iprintf>
			return (0);
 8003578:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 800357a:	e77e      	b.n	800347a <lcd_event_process+0x62>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 800357c:	78e3      	ldrb	r3, [r4, #3]
 800357e:	78a2      	ldrb	r2, [r4, #2]
 8003580:	7861      	ldrb	r1, [r4, #1]
 8003582:	483e      	ldr	r0, [pc, #248]	; (800367c <lcd_event_process+0x264>)
 8003584:	f023 f8a6 	bl	80266d4 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8003588:	7863      	ldrb	r3, [r4, #1]
 800358a:	2b04      	cmp	r3, #4
 800358c:	d037      	beq.n	80035fe <lcd_event_process+0x1e6>
			return (0);
 800358e:	2000      	movs	r0, #0
}
 8003590:	b00d      	add	sp, #52	; 0x34
 8003592:	bd30      	pop	{r4, r5, pc}
				decode_lcdtype(eventbuffer);
 8003594:	482e      	ldr	r0, [pc, #184]	; (8003650 <lcd_event_process+0x238>)
 8003596:	f7ff f849 	bl	800262c <decode_lcdtype>
				if (nex_model[0] != '\0') {
 800359a:	4939      	ldr	r1, [pc, #228]	; (8003680 <lcd_event_process+0x268>)
 800359c:	780b      	ldrb	r3, [r1, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f5      	beq.n	800358e <lcd_event_process+0x176>
					printf("Nextion LCD Model: %s\n", nex_model);
 80035a2:	4838      	ldr	r0, [pc, #224]	; (8003684 <lcd_event_process+0x26c>)
 80035a4:	f023 f896 	bl	80266d4 <iprintf>
			return (0);
 80035a8:	2000      	movs	r0, #0
 80035aa:	e766      	b.n	800347a <lcd_event_process+0x62>
	if ((str[0] == 0x71) && (str[5] = 0xff) && (str[6] == 0xff) && (str[7] == 0xff)) {
 80035ac:	79a3      	ldrb	r3, [r4, #6]
 80035ae:	22ff      	movs	r2, #255	; 0xff
 80035b0:	79e1      	ldrb	r1, [r4, #7]
 80035b2:	7162      	strb	r2, [r4, #5]
 80035b4:	400b      	ands	r3, r1
 80035b6:	4293      	cmp	r3, r2
 80035b8:	f040 80b4 	bne.w	8003724 <lcd_event_process+0x30c>
 80035bc:	4a24      	ldr	r2, [pc, #144]	; (8003650 <lcd_event_process+0x238>)
	number = 0;
 80035be:	2100      	movs	r1, #0
 80035c0:	1d10      	adds	r0, r2, #4
			number = number | (str[i] << 24);
 80035c2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80035c6:	061b      	lsls	r3, r3, #24
		for (i = 1; i < 5; i++) {
 80035c8:	4290      	cmp	r0, r2
			number = number | (str[i] << 24);
 80035ca:	ea43 2121 	orr.w	r1, r3, r1, asr #8
		for (i = 1; i < 5; i++) {
 80035ce:	d1f8      	bne.n	80035c2 <lcd_event_process+0x1aa>
				if (nex_model[0] != '\0') {
 80035d0:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <lcd_event_process+0x268>)
				lcd_sys0 = decode_int(eventbuffer);
 80035d2:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <lcd_event_process+0x270>)
				if (nex_model[0] != '\0') {
 80035d4:	7812      	ldrb	r2, [r2, #0]
				lcd_sys0 = decode_int(eventbuffer);
 80035d6:	6019      	str	r1, [r3, #0]
				if (nex_model[0] != '\0') {
 80035d8:	2a00      	cmp	r2, #0
 80035da:	d0d8      	beq.n	800358e <lcd_event_process+0x176>
					printf("Nextion LCD's Firmware build: 0x%0x\n", lcd_sys0);
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	482b      	ldr	r0, [pc, #172]	; (800368c <lcd_event_process+0x274>)
 80035e0:	f023 f878 	bl	80266d4 <iprintf>
			return (0);
 80035e4:	2000      	movs	r0, #0
 80035e6:	e748      	b.n	800347a <lcd_event_process+0x62>
				printf("Serial Buffer Overflow!\n");
 80035e8:	4829      	ldr	r0, [pc, #164]	; (8003690 <lcd_event_process+0x278>)
 80035ea:	f023 f90f 	bl	802680c <puts>
				return (1);
 80035ee:	2001      	movs	r0, #1
 80035f0:	e743      	b.n	800347a <lcd_event_process+0x62>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 80035f2:	4828      	ldr	r0, [pc, #160]	; (8003694 <lcd_event_process+0x27c>)
 80035f4:	f023 f86e 	bl	80266d4 <iprintf>
				return (-1);		// some kindof error
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80035fc:	e73d      	b.n	800347a <lcd_event_process+0x62>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 80035fe:	78a3      	ldrb	r3, [r4, #2]
 8003600:	2b06      	cmp	r3, #6
 8003602:	f000 80b1 	beq.w	8003768 <lcd_event_process+0x350>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8003606:	2b08      	cmp	r3, #8
 8003608:	f000 80d1 	beq.w	80037ae <lcd_event_process+0x396>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 800360c:	2b02      	cmp	r3, #2
 800360e:	f000 809a 	beq.w	8003746 <lcd_event_process+0x32e>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8003612:	2b03      	cmp	r3, #3
 8003614:	d1bb      	bne.n	800358e <lcd_event_process+0x176>
					if (eventbuffer[3] == 1) 		// sound on
 8003616:	78e3      	ldrb	r3, [r4, #3]
 8003618:	4a1f      	ldr	r2, [pc, #124]	; (8003698 <lcd_event_process+0x280>)
 800361a:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 800361e:	481f      	ldr	r0, [pc, #124]	; (800369c <lcd_event_process+0x284>)
					if (eventbuffer[3] == 1) 		// sound on
 8003620:	fab3 f383 	clz	r3, r3
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8003628:	f023 f8f0 	bl	802680c <puts>
			return (0);
 800362c:	2000      	movs	r0, #0
 800362e:	e724      	b.n	800347a <lcd_event_process+0x62>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8003630:	481b      	ldr	r0, [pc, #108]	; (80036a0 <lcd_event_process+0x288>)
 8003632:	f023 f84f 	bl	80266d4 <iprintf>
 8003636:	e78c      	b.n	8003552 <lcd_event_process+0x13a>
					printf("Ser Buffer overflow\n");
 8003638:	481a      	ldr	r0, [pc, #104]	; (80036a4 <lcd_event_process+0x28c>)
 800363a:	f023 f8e7 	bl	802680c <puts>
				return (-1);		// some kindof error
 800363e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8003642:	e71a      	b.n	800347a <lcd_event_process+0x62>
					printf("Variable name too long\n");
 8003644:	4818      	ldr	r0, [pc, #96]	; (80036a8 <lcd_event_process+0x290>)
 8003646:	f023 f8e1 	bl	802680c <puts>
				return (-1);		// some kindof error
 800364a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800364e:	e714      	b.n	800347a <lcd_event_process+0x62>
 8003650:	200019f0 	.word	0x200019f0
 8003654:	20001b3c 	.word	0x20001b3c
 8003658:	0802c188 	.word	0x0802c188
 800365c:	0802c1bc 	.word	0x0802c1bc
 8003660:	0802bf68 	.word	0x0802bf68
 8003664:	0802c0e0 	.word	0x0802c0e0
 8003668:	20000018 	.word	0x20000018
 800366c:	2000000c 	.word	0x2000000c
 8003670:	0802bcc8 	.word	0x0802bcc8
 8003674:	0802bc90 	.word	0x0802bc90
 8003678:	0802c158 	.word	0x0802c158
 800367c:	0802c100 	.word	0x0802c100
 8003680:	20001b50 	.word	0x20001b50
 8003684:	0802c0a0 	.word	0x0802c0a0
 8003688:	20000014 	.word	0x20000014
 800368c:	0802c0b8 	.word	0x0802c0b8
 8003690:	0802c088 	.word	0x0802c088
 8003694:	0802c070 	.word	0x0802c070
 8003698:	200002ac 	.word	0x200002ac
 800369c:	0802c14c 	.word	0x0802c14c
 80036a0:	0802bc98 	.word	0x0802bc98
 80036a4:	0802bfb8 	.word	0x0802bfb8
 80036a8:	0802bfa0 	.word	0x0802bfa0
					printf("Invalid escape char\n");
 80036ac:	4849      	ldr	r0, [pc, #292]	; (80037d4 <lcd_event_process+0x3bc>)
 80036ae:	f023 f8ad 	bl	802680c <puts>
				return (-1);		// some kindof error
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80036b6:	e6e0      	b.n	800347a <lcd_event_process+0x62>
					printf("Invalid number of parameters\n");
 80036b8:	4847      	ldr	r0, [pc, #284]	; (80037d8 <lcd_event_process+0x3c0>)
 80036ba:	f023 f8a7 	bl	802680c <puts>
				return (-1);		// some kindof error
 80036be:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80036c2:	e6da      	b.n	800347a <lcd_event_process+0x62>
					printf("Attribute assignment failed\n");
 80036c4:	4845      	ldr	r0, [pc, #276]	; (80037dc <lcd_event_process+0x3c4>)
 80036c6:	f023 f8a1 	bl	802680c <puts>
				return (-1);		// some kindof error
 80036ca:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80036ce:	e6d4      	b.n	800347a <lcd_event_process+0x62>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 80036d0:	4843      	ldr	r0, [pc, #268]	; (80037e0 <lcd_event_process+0x3c8>)
 80036d2:	f023 f89b 	bl	802680c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 80036d6:	f7ff fe4d 	bl	8003374 <getlcdpage>
				return (-1);		// some kindof error
 80036da:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80036de:	e6cc      	b.n	800347a <lcd_event_process+0x62>
					printf("Invalid waveform ID\n");
 80036e0:	4840      	ldr	r0, [pc, #256]	; (80037e4 <lcd_event_process+0x3cc>)
 80036e2:	f023 f893 	bl	802680c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 80036e6:	f7ff fe45 	bl	8003374 <getlcdpage>
				return (-1);		// some kindof error
 80036ea:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80036ee:	e6c4      	b.n	800347a <lcd_event_process+0x62>
					if (http_downloading == NXT_LOADING) {	// return code 0x05 is good - block rcv'd
 80036f0:	4b3d      	ldr	r3, [pc, #244]	; (80037e8 <lcd_event_process+0x3d0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d121      	bne.n	800373c <lcd_event_process+0x324>
						nxt_blocksacked++;
 80036f8:	4a3c      	ldr	r2, [pc, #240]	; (80037ec <lcd_event_process+0x3d4>)
					return (0);
 80036fa:	2000      	movs	r0, #0
						nxt_blocksacked++;
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e6ba      	b.n	800347a <lcd_event_process+0x62>
					printf("Invalid Component ID\n");
 8003704:	483a      	ldr	r0, [pc, #232]	; (80037f0 <lcd_event_process+0x3d8>)
 8003706:	f023 f881 	bl	802680c <puts>
					return (0);
 800370a:	2000      	movs	r0, #0
 800370c:	e6b5      	b.n	800347a <lcd_event_process+0x62>
					printf("Successful execution\n");
 800370e:	4839      	ldr	r0, [pc, #228]	; (80037f4 <lcd_event_process+0x3dc>)
 8003710:	f023 f87c 	bl	802680c <puts>
					return (0);
 8003714:	2000      	movs	r0, #0
 8003716:	e6b0      	b.n	800347a <lcd_event_process+0x62>
					printf("Invalid command\n");
 8003718:	4837      	ldr	r0, [pc, #220]	; (80037f8 <lcd_event_process+0x3e0>)
 800371a:	f023 f877 	bl	802680c <puts>
				return (-1);		// some kindof error
 800371e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8003722:	e6aa      	b.n	800347a <lcd_event_process+0x62>
		return (0xffffffff);
 8003724:	f04f 31ff 	mov.w	r1, #4294967295
 8003728:	e752      	b.n	80035d0 <lcd_event_process+0x1b8>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 800372a:	7860      	ldrb	r0, [r4, #1]
 800372c:	f7ff fcc6 	bl	80030bc <lcd_pagechange>
 8003730:	4603      	mov	r3, r0
 8003732:	4a32      	ldr	r2, [pc, #200]	; (80037fc <lcd_event_process+0x3e4>)
			return (0);
 8003734:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8003736:	b2db      	uxtb	r3, r3
 8003738:	7013      	strb	r3, [r2, #0]
 800373a:	e69e      	b.n	800347a <lcd_event_process+0x62>
						printf("NXT Error 0x05\n");
 800373c:	4830      	ldr	r0, [pc, #192]	; (8003800 <lcd_event_process+0x3e8>)
 800373e:	f023 f865 	bl	802680c <puts>
					return (0);
 8003742:	2000      	movs	r0, #0
 8003744:	e699      	b.n	800347a <lcd_event_process+0x62>
					if (eventbuffer[3] == 1) 		// sound on
 8003746:	78e3      	ldrb	r3, [r4, #3]
 8003748:	4a2e      	ldr	r2, [pc, #184]	; (8003804 <lcd_event_process+0x3ec>)
 800374a:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 800374e:	482e      	ldr	r0, [pc, #184]	; (8003808 <lcd_event_process+0x3f0>)
					if (eventbuffer[3] == 1) 		// sound on
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8003758:	f023 f858 	bl	802680c <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 800375c:	7863      	ldrb	r3, [r4, #1]
 800375e:	2b04      	cmp	r3, #4
 8003760:	f47f af15 	bne.w	800358e <lcd_event_process+0x176>
 8003764:	78a3      	ldrb	r3, [r4, #2]
 8003766:	e754      	b.n	8003612 <lcd_event_process+0x1fa>
					lcdbright = eventbuffer[3];
 8003768:	4b28      	ldr	r3, [pc, #160]	; (800380c <lcd_event_process+0x3f4>)
 800376a:	78e2      	ldrb	r2, [r4, #3]
 800376c:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2a0d      	cmp	r2, #13
 8003772:	dc01      	bgt.n	8003778 <lcd_event_process+0x360>
						lcdbright = 14;		// prevent black
 8003774:	220e      	movs	r2, #14
 8003776:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8003778:	681b      	ldr	r3, [r3, #0]
	dimtimer = DIMTIME;
 800377a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800377e:	4a24      	ldr	r2, [pc, #144]	; (8003810 <lcd_event_process+0x3f8>)
	sprintf(buffer, "%s=%lu", id, value);
 8003780:	a804      	add	r0, sp, #16
 8003782:	2b63      	cmp	r3, #99	; 0x63
	dimtimer = DIMTIME;
 8003784:	6011      	str	r1, [r2, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8003786:	bf28      	it	cs
 8003788:	2363      	movcs	r3, #99	; 0x63
 800378a:	4a22      	ldr	r2, [pc, #136]	; (8003814 <lcd_event_process+0x3fc>)
 800378c:	4922      	ldr	r1, [pc, #136]	; (8003818 <lcd_event_process+0x400>)
 800378e:	f023 f98b 	bl	8026aa8 <siprintf>
	result = writelcdcmd(buffer);
 8003792:	a804      	add	r0, sp, #16
 8003794:	f7fe fd88 	bl	80022a8 <writelcdcmd>
 8003798:	9002      	str	r0, [sp, #8]
	if (result == -1) {		// wait for response
 800379a:	9b02      	ldr	r3, [sp, #8]
 800379c:	3301      	adds	r3, #1
 800379e:	d014      	beq.n	80037ca <lcd_event_process+0x3b2>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 80037a0:	7863      	ldrb	r3, [r4, #1]
	return (result);
 80037a2:	9a02      	ldr	r2, [sp, #8]
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	f47f aef2 	bne.w	800358e <lcd_event_process+0x176>
 80037aa:	78a3      	ldrb	r3, [r4, #2]
 80037ac:	e72b      	b.n	8003606 <lcd_event_process+0x1ee>
					printf("Reboot touch\n");
 80037ae:	481b      	ldr	r0, [pc, #108]	; (800381c <lcd_event_process+0x404>)
 80037b0:	f023 f82c 	bl	802680c <puts>
					osDelay(100);
 80037b4:	2064      	movs	r0, #100	; 0x64
 80037b6:	f012 ff0d 	bl	80165d4 <osDelay>
					rebootme();
 80037ba:	f000 fa95 	bl	8003ce8 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 80037be:	7863      	ldrb	r3, [r4, #1]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	f47f aee4 	bne.w	800358e <lcd_event_process+0x176>
 80037c6:	78a3      	ldrb	r3, [r4, #2]
 80037c8:	e720      	b.n	800360c <lcd_event_process+0x1f4>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80037ca:	4815      	ldr	r0, [pc, #84]	; (8003820 <lcd_event_process+0x408>)
 80037cc:	f022 ff82 	bl	80266d4 <iprintf>
 80037d0:	e7e6      	b.n	80037a0 <lcd_event_process+0x388>
 80037d2:	bf00      	nop
 80037d4:	0802bfec 	.word	0x0802bfec
 80037d8:	0802bfcc 	.word	0x0802bfcc
 80037dc:	0802c000 	.word	0x0802c000
 80037e0:	0802bf8c 	.word	0x0802bf8c
 80037e4:	0802c01c 	.word	0x0802c01c
 80037e8:	200018dc 	.word	0x200018dc
 80037ec:	2000312c 	.word	0x2000312c
 80037f0:	0802c048 	.word	0x0802c048
 80037f4:	0802c030 	.word	0x0802c030
 80037f8:	0802bf7c 	.word	0x0802bf7c
 80037fc:	20001a88 	.word	0x20001a88
 8003800:	0802c060 	.word	0x0802c060
 8003804:	200002b2 	.word	0x200002b2
 8003808:	0802c140 	.word	0x0802c140
 800380c:	20000018 	.word	0x20000018
 8003810:	2000000c 	.word	0x2000000c
 8003814:	0802bcc8 	.word	0x0802bcc8
 8003818:	0802bc90 	.word	0x0802bc90
 800381c:	0802c130 	.word	0x0802c130
 8003820:	0802bc98 	.word	0x0802bc98

08003824 <lcd_getid>:
int lcd_getid(void) {
 8003824:	b510      	push	{r4, lr}
	lcd_txblocked = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	4c11      	ldr	r4, [pc, #68]	; (8003870 <lcd_getid+0x4c>)
int lcd_getid(void) {
 800382a:	b098      	sub	sp, #96	; 0x60
	lcd_txblocked = 0;
 800382c:	6023      	str	r3, [r4, #0]
	lcd_clearrxbuf();
 800382e:	f7fe fe5f 	bl	80024f0 <lcd_clearrxbuf>
	strcpy(pkt, str);
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <lcd_getid+0x50>)
	lcdstatus = 0xff;
 8003834:	20ff      	movs	r0, #255	; 0xff
 8003836:	4910      	ldr	r1, [pc, #64]	; (8003878 <lcd_getid+0x54>)
	strcat(pkt, "\xff\xff\xff");
 8003838:	4a10      	ldr	r2, [pc, #64]	; (800387c <lcd_getid+0x58>)
	lcdstatus = 0xff;
 800383a:	7008      	strb	r0, [r1, #0]
	strcpy(pkt, str);
 800383c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003840:	9000      	str	r0, [sp, #0]
 8003842:	0c0b      	lsrs	r3, r1, #16
	strcat(pkt, "\xff\xff\xff");
 8003844:	6810      	ldr	r0, [r2, #0]
	strcpy(pkt, str);
 8003846:	f8ad 1004 	strh.w	r1, [sp, #4]
	strcat(pkt, "\xff\xff\xff");
 800384a:	f8cd 0007 	str.w	r0, [sp, #7]
	return (lcd_puts(pkt));
 800384e:	4668      	mov	r0, sp
	strcpy(pkt, str);
 8003850:	f88d 3006 	strb.w	r3, [sp, #6]
	return (lcd_puts(pkt));
 8003854:	f7fe fc90 	bl	8002178 <lcd_puts>
	if (result == -1) {		// send err
 8003858:	3001      	adds	r0, #1
 800385a:	d005      	beq.n	8003868 <lcd_getid+0x44>
	result = lcd_getlack();		// wait for a response
 800385c:	f7ff fd5e 	bl	800331c <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003860:	2300      	movs	r3, #0
 8003862:	6023      	str	r3, [r4, #0]
}
 8003864:	b018      	add	sp, #96	; 0x60
 8003866:	bd10      	pop	{r4, pc}
		printf("getid: Cmd failed\n\r");
 8003868:	4805      	ldr	r0, [pc, #20]	; (8003880 <lcd_getid+0x5c>)
 800386a:	f022 ff33 	bl	80266d4 <iprintf>
 800386e:	e7f5      	b.n	800385c <lcd_getid+0x38>
 8003870:	20001a90 	.word	0x20001a90
 8003874:	0802c1c4 	.word	0x0802c1c4
 8003878:	20001b3c 	.word	0x20001b3c
 800387c:	0802bb7c 	.word	0x0802bb7c
 8003880:	0802c1cc 	.word	0x0802c1cc

08003884 <lcd_putsys0>:
void lcd_putsys0(uint32_t value) {
 8003884:	b530      	push	{r4, r5, lr}
	lcd_txblocked = 1;
 8003886:	2301      	movs	r3, #1
void lcd_putsys0(uint32_t value) {
 8003888:	b087      	sub	sp, #28
	lcd_txblocked = 1;
 800388a:	4c0b      	ldr	r4, [pc, #44]	; (80038b8 <lcd_putsys0+0x34>)
	lcd_txblocked = 0;
 800388c:	2500      	movs	r5, #0
void lcd_putsys0(uint32_t value) {
 800388e:	9001      	str	r0, [sp, #4]
	lcd_txblocked = 1;
 8003890:	6023      	str	r3, [r4, #0]
	lcd_clearrxbuf();
 8003892:	f7fe fe2d 	bl	80024f0 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <lcd_putsys0+0x38>)
 8003898:	21ff      	movs	r1, #255	; 0xff
	sprintf(cmd, "sys0=0x%08x", value);
 800389a:	9a01      	ldr	r2, [sp, #4]
 800389c:	a802      	add	r0, sp, #8
	lcdstatus = 0xff;
 800389e:	7019      	strb	r1, [r3, #0]
	sprintf(cmd, "sys0=0x%08x", value);
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <lcd_putsys0+0x3c>)
 80038a2:	f023 f901 	bl	8026aa8 <siprintf>
	writelcdcmd(cmd);
 80038a6:	a802      	add	r0, sp, #8
	lcd_txblocked = 0;
 80038a8:	6025      	str	r5, [r4, #0]
	writelcdcmd(cmd);
 80038aa:	f7fe fcfd 	bl	80022a8 <writelcdcmd>
	result = lcd_getlack();		// wait for a response (none expected)
 80038ae:	f7ff fd35 	bl	800331c <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 80038b2:	6025      	str	r5, [r4, #0]
}
 80038b4:	b007      	add	sp, #28
 80038b6:	bd30      	pop	{r4, r5, pc}
 80038b8:	20001a90 	.word	0x20001a90
 80038bc:	20001b3c 	.word	0x20001b3c
 80038c0:	0802c204 	.word	0x0802c204

080038c4 <lcd_startdl>:
void lcd_startdl(int filesize) {
 80038c4:	b530      	push	{r4, r5, lr}
	lcd_txblocked = 1;
 80038c6:	4c0c      	ldr	r4, [pc, #48]	; (80038f8 <lcd_startdl+0x34>)
void lcd_startdl(int filesize) {
 80038c8:	b08b      	sub	sp, #44	; 0x2c
	lcd_txblocked = 1;
 80038ca:	2501      	movs	r5, #1
void lcd_startdl(int filesize) {
 80038cc:	9001      	str	r0, [sp, #4]
	lcd_txblocked = 1;
 80038ce:	6025      	str	r5, [r4, #0]
	lcd_clearrxbuf();
 80038d0:	f7fe fe0e 	bl	80024f0 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <lcd_startdl+0x38>)
 80038d6:	21ff      	movs	r1, #255	; 0xff
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 80038d8:	9a01      	ldr	r2, [sp, #4]
 80038da:	a802      	add	r0, sp, #8
	lcdstatus = 0xff;
 80038dc:	7019      	strb	r1, [r3, #0]
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 80038de:	4908      	ldr	r1, [pc, #32]	; (8003900 <lcd_startdl+0x3c>)
 80038e0:	f023 f8e2 	bl	8026aa8 <siprintf>
	lcd_txblocked = 0;
 80038e4:	2300      	movs	r3, #0
	writelcdcmd(cmd);
 80038e6:	a802      	add	r0, sp, #8
	lcd_txblocked = 0;
 80038e8:	6023      	str	r3, [r4, #0]
	writelcdcmd(cmd);
 80038ea:	f7fe fcdd 	bl	80022a8 <writelcdcmd>
	result = lcd_getlack();		// wait for a response
 80038ee:	f7ff fd15 	bl	800331c <lcd_getlack>
	lcd_txblocked = 1;		// keep LCD sending blocked
 80038f2:	6025      	str	r5, [r4, #0]
}
 80038f4:	b00b      	add	sp, #44	; 0x2c
 80038f6:	bd30      	pop	{r4, r5, pc}
 80038f8:	20001a90 	.word	0x20001a90
 80038fc:	20001b3c 	.word	0x20001b3c
 8003900:	0802c210 	.word	0x0802c210

08003904 <lcd_starting>:

// display starting up items
lcd_starting() {
 8003904:	b530      	push	{r4, r5, lr}
 8003906:	b097      	sub	sp, #92	; 0x5c
	static int i = 0;
	char str[82] = { "empty" };

	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
	switch (i & 3) {
 8003908:	4d2f      	ldr	r5, [pc, #188]	; (80039c8 <lcd_starting+0xc4>)
	char str[82] = { "empty" };
 800390a:	224c      	movs	r2, #76	; 0x4c
 800390c:	2100      	movs	r1, #0
 800390e:	f10d 000a 	add.w	r0, sp, #10
	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003912:	4c2e      	ldr	r4, [pc, #184]	; (80039cc <lcd_starting+0xc8>)
	char str[82] = { "empty" };
 8003914:	f021 ff40 	bl	8025798 <memset>
	switch (i & 3) {
 8003918:	682b      	ldr	r3, [r5, #0]
	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 800391a:	f10d 0c04 	add.w	ip, sp, #4
	switch (i & 3) {
 800391e:	f003 0e03 	and.w	lr, r3, #3
	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003924:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800392a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800392e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
	switch (i & 3) {
 8003932:	f1be 0f02 	cmp.w	lr, #2
	strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003936:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800393a:	f82c 3b02 	strh.w	r3, [ip], #2
 800393e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8003942:	f88c 3000 	strb.w	r3, [ip]
	switch (i & 3) {
 8003946:	d034      	beq.n	80039b2 <lcd_starting+0xae>
 8003948:	f1be 0f03 	cmp.w	lr, #3
 800394c:	d026      	beq.n	800399c <lcd_starting+0x98>
 800394e:	f1be 0f01 	cmp.w	lr, #1
 8003952:	d01b      	beq.n	800398c <lcd_starting+0x88>
	case 0:
		writelcdcmd(strcat(str, ".\""));
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <lcd_starting+0xcc>)
 8003956:	a801      	add	r0, sp, #4
 8003958:	881a      	ldrh	r2, [r3, #0]
 800395a:	789b      	ldrb	r3, [r3, #2]
 800395c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8003960:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8003964:	f7fe fca0 	bl	80022a8 <writelcdcmd>
		break;
	case 3:
		writelcdcmd(strcat(str, "....\""));
		break;
	}
	i++;
 8003968:	682b      	ldr	r3, [r5, #0]
	osDelay(250);
 800396a:	20fa      	movs	r0, #250	; 0xfa
	i++;
 800396c:	3301      	adds	r3, #1
 800396e:	602b      	str	r3, [r5, #0]
	osDelay(250);
 8003970:	f012 fe30 	bl	80165d4 <osDelay>

	if (!(netif_is_link_up(&gnetif))) {
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <lcd_starting+0xd0>)
 8003976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800397a:	075b      	lsls	r3, r3, #29
 800397c:	d501      	bpl.n	8003982 <lcd_starting+0x7e>
	writelcdcmd("ref 0");		// refresh screen

	lcduart_error = HAL_UART_ERROR_NONE;
	writelcdcmd("page 0");
#endif
}
 800397e:	b017      	add	sp, #92	; 0x5c
 8003980:	bd30      	pop	{r4, r5, pc}
		writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 8003982:	4815      	ldr	r0, [pc, #84]	; (80039d8 <lcd_starting+0xd4>)
 8003984:	f7fe fc90 	bl	80022a8 <writelcdcmd>
}
 8003988:	b017      	add	sp, #92	; 0x5c
 800398a:	bd30      	pop	{r4, r5, pc}
		writelcdcmd(strcat(str, "..\""));
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <lcd_starting+0xd8>)
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	f8cd 0032 	str.w	r0, [sp, #50]	; 0x32
 8003994:	a801      	add	r0, sp, #4
 8003996:	f7fe fc87 	bl	80022a8 <writelcdcmd>
		break;
 800399a:	e7e5      	b.n	8003968 <lcd_starting+0x64>
		writelcdcmd(strcat(str, "....\""));
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <lcd_starting+0xdc>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	889b      	ldrh	r3, [r3, #4]
 80039a2:	f8cd 0032 	str.w	r0, [sp, #50]	; 0x32
 80039a6:	a801      	add	r0, sp, #4
 80039a8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80039ac:	f7fe fc7c 	bl	80022a8 <writelcdcmd>
		break;
 80039b0:	e7da      	b.n	8003968 <lcd_starting+0x64>
		writelcdcmd(strcat(str, "...\""));
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <lcd_starting+0xe0>)
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	791b      	ldrb	r3, [r3, #4]
 80039b8:	f8cd 0032 	str.w	r0, [sp, #50]	; 0x32
 80039bc:	a801      	add	r0, sp, #4
 80039be:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 80039c2:	f7fe fc71 	bl	80022a8 <writelcdcmd>
		break;
 80039c6:	e7cf      	b.n	8003968 <lcd_starting+0x64>
 80039c8:	20001a70 	.word	0x20001a70
 80039cc:	0802c228 	.word	0x0802c228
 80039d0:	0802c258 	.word	0x0802c258
 80039d4:	2000359c 	.word	0x2000359c
 80039d8:	0802c270 	.word	0x0802c270
 80039dc:	0802c25c 	.word	0x0802c25c
 80039e0:	0802c268 	.word	0x0802c268
 80039e4:	0802c260 	.word	0x0802c260

080039e8 <init_nextion>:

init_nextion() {
	int i;
	char str[82] = { "empty" };
 80039e8:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <init_nextion+0xe0>)
 80039ea:	224c      	movs	r2, #76	; 0x4c
init_nextion() {
 80039ec:	b570      	push	{r4, r5, r6, lr}
	char str[82] = { "empty" };
 80039ee:	e893 0003 	ldmia.w	r3, {r0, r1}
init_nextion() {
 80039f2:	b0b0      	sub	sp, #192	; 0xc0

	lcduart_error = HAL_UART_ERROR_NONE;
 80039f4:	2400      	movs	r4, #0
 80039f6:	4e35      	ldr	r6, [pc, #212]	; (8003acc <init_nextion+0xe4>)
	char str[82] = { "empty" };
 80039f8:	9003      	str	r0, [sp, #12]
 80039fa:	f10d 0012 	add.w	r0, sp, #18
 80039fe:	f8ad 1010 	strh.w	r1, [sp, #16]
 8003a02:	4621      	mov	r1, r4
 8003a04:	f021 fec8 	bl	8025798 <memset>

	lcd_init(230400);
 8003a08:	f44f 3061 	mov.w	r0, #230400	; 0x38400
	osDelay(300);
	lcd_txblocked = 0;
 8003a0c:	4d30      	ldr	r5, [pc, #192]	; (8003ad0 <init_nextion+0xe8>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003a0e:	6034      	str	r4, [r6, #0]
	lcd_init(230400);
 8003a10:	f7ff fbac 	bl	800316c <lcd_init>
	osDelay(300);
 8003a14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a18:	f012 fddc 	bl	80165d4 <osDelay>
	writelcdcmd("cls BLACK");
 8003a1c:	482d      	ldr	r0, [pc, #180]	; (8003ad4 <init_nextion+0xec>)
	lcd_txblocked = 0;
 8003a1e:	602c      	str	r4, [r5, #0]
	writelcdcmd("cls BLACK");
 8003a20:	f7fe fc42 	bl	80022a8 <writelcdcmd>
	osDelay(300);
 8003a24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a28:	f012 fdd4 	bl	80165d4 <osDelay>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8003a2c:	f242 7334 	movw	r3, #10036	; 0x2734
 8003a30:	4622      	mov	r2, r4
 8003a32:	4929      	ldr	r1, [pc, #164]	; (8003ad8 <init_nextion+0xf0>)
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	a803      	add	r0, sp, #12
 8003a38:	2314      	movs	r3, #20
 8003a3a:	f023 f835 	bl	8026aa8 <siprintf>
	BUILD);
	lcduart_error = HAL_UART_ERROR_NONE;
	writelcdcmd(str);
 8003a3e:	a803      	add	r0, sp, #12
	lcduart_error = HAL_UART_ERROR_NONE;
 8003a40:	6034      	str	r4, [r6, #0]
	writelcdcmd(str);
 8003a42:	f7fe fc31 	bl	80022a8 <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;

	osDelay(500);
 8003a46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	lcduart_error = HAL_UART_ERROR_NONE;
 8003a4a:	6034      	str	r4, [r6, #0]
	osDelay(500);
 8003a4c:	f012 fdc2 	bl	80165d4 <osDelay>
	lcd_txblocked = 0;
 8003a50:	602c      	str	r4, [r5, #0]
	lcd_clearrxbuf();
 8003a52:	f7fe fd4d 	bl	80024f0 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003a56:	4c21      	ldr	r4, [pc, #132]	; (8003adc <init_nextion+0xf4>)
	strcpy(pkt, str);
 8003a58:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <init_nextion+0xf8>)
	lcdstatus = 0xff;
 8003a5a:	21ff      	movs	r1, #255	; 0xff
	strcat(pkt, "\xff\xff\xff");
 8003a5c:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <init_nextion+0xfc>)
	lcdstatus = 0xff;
 8003a5e:	7021      	strb	r1, [r4, #0]
	strcpy(pkt, str);
 8003a60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a64:	9018      	str	r0, [sp, #96]	; 0x60
 8003a66:	0c0b      	lsrs	r3, r1, #16
	strcat(pkt, "\xff\xff\xff");
 8003a68:	6810      	ldr	r0, [r2, #0]
	strcpy(pkt, str);
 8003a6a:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
	strcat(pkt, "\xff\xff\xff");
 8003a6e:	f8cd 0067 	str.w	r0, [sp, #103]	; 0x67
	return (lcd_puts(pkt));
 8003a72:	a818      	add	r0, sp, #96	; 0x60
	strcpy(pkt, str);
 8003a74:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
	return (lcd_puts(pkt));
 8003a78:	f7fe fb7e 	bl	8002178 <lcd_puts>
	if (result == -1) {		// send err
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d01a      	beq.n	8003ab6 <init_nextion+0xce>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003a80:	2600      	movs	r6, #0
	result = lcd_getlack();		// wait for a response
 8003a82:	f7ff fc4b 	bl	800331c <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003a86:	602e      	str	r6, [r5, #0]
	lcd_getid();		// in the background
	processnex();
 8003a88:	f7ff fba2 	bl	80031d0 <processnex>

	osDelay(100);
 8003a8c:	2064      	movs	r0, #100	; 0x64
 8003a8e:	f012 fda1 	bl	80165d4 <osDelay>
	lcd_txblocked = 0;
 8003a92:	602e      	str	r6, [r5, #0]
	lcd_clearrxbuf();
 8003a94:	f7fe fd2c 	bl	80024f0 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003a98:	23ff      	movs	r3, #255	; 0xff
	result = writelcdcmd("get sys0");
 8003a9a:	4813      	ldr	r0, [pc, #76]	; (8003ae8 <init_nextion+0x100>)
	lcdstatus = 0xff;
 8003a9c:	7023      	strb	r3, [r4, #0]
	result = writelcdcmd("get sys0");
 8003a9e:	f7fe fc03 	bl	80022a8 <writelcdcmd>
	if (result == -1) {		// send err
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d00b      	beq.n	8003abe <init_nextion+0xd6>
	result = lcd_getlack();		// wait for a response
 8003aa6:	f7ff fc39 	bl	800331c <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003aaa:	2300      	movs	r3, #0
 8003aac:	602b      	str	r3, [r5, #0]
	lcd_getsys0();
	processnex();
 8003aae:	f7ff fb8f 	bl	80031d0 <processnex>

}
 8003ab2:	b030      	add	sp, #192	; 0xc0
 8003ab4:	bd70      	pop	{r4, r5, r6, pc}
		printf("getid: Cmd failed\n\r");
 8003ab6:	480d      	ldr	r0, [pc, #52]	; (8003aec <init_nextion+0x104>)
 8003ab8:	f022 fe0c 	bl	80266d4 <iprintf>
 8003abc:	e7e0      	b.n	8003a80 <init_nextion+0x98>
		printf("getsys0: Cmd failed\n\r");
 8003abe:	480c      	ldr	r0, [pc, #48]	; (8003af0 <init_nextion+0x108>)
 8003ac0:	f022 fe08 	bl	80266d4 <iprintf>
 8003ac4:	e7ef      	b.n	8003aa6 <init_nextion+0xbe>
 8003ac6:	bf00      	nop
 8003ac8:	0802a748 	.word	0x0802a748
 8003acc:	20001b40 	.word	0x20001b40
 8003ad0:	20001a90 	.word	0x20001a90
 8003ad4:	0802c2ac 	.word	0x0802c2ac
 8003ad8:	0802c2b8 	.word	0x0802c2b8
 8003adc:	20001b3c 	.word	0x20001b3c
 8003ae0:	0802c1c4 	.word	0x0802c1c4
 8003ae4:	0802bb7c 	.word	0x0802bb7c
 8003ae8:	0802c1e0 	.word	0x0802c1e0
 8003aec:	0802c1cc 	.word	0x0802c1cc
 8003af0:	0802c1ec 	.word	0x0802c1ec

08003af4 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8003af4:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2107      	movs	r1, #7
 8003afa:	2026      	movs	r0, #38	; 0x26
 8003afc:	f006 f85a 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b00:	2026      	movs	r0, #38	; 0x26
 8003b02:	f006 f8a1 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2106      	movs	r1, #6
 8003b0a:	2047      	movs	r0, #71	; 0x47
 8003b0c:	f006 f852 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b10:	2047      	movs	r0, #71	; 0x47
 8003b12:	f006 f899 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2106      	movs	r1, #6
 8003b1a:	2012      	movs	r0, #18
 8003b1c:	f006 f84a 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003b20:	2012      	movs	r0, #18
 8003b22:	f006 f891 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2106      	movs	r1, #6
 8003b2a:	2028      	movs	r0, #40	; 0x28
 8003b2c:	f006 f842 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b30:	2028      	movs	r0, #40	; 0x28
 8003b32:	f006 f889 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8003b36:	202d      	movs	r0, #45	; 0x2d
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	f006 f83a 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003b40:	202d      	movs	r0, #45	; 0x2d
}
 8003b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003b46:	f006 b87f 	b.w	8009c48 <HAL_NVIC_EnableIRQ>
 8003b4a:	bf00      	nop

08003b4c <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8003b4c:	4801      	ldr	r0, [pc, #4]	; (8003b54 <netif_status_callbk_fn+0x8>)
 8003b4e:	f022 be5d 	b.w	802680c <puts>
 8003b52:	bf00      	nop
 8003b54:	0802c308 	.word	0x0802c308

08003b58 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8003b58:	4801      	ldr	r0, [pc, #4]	; (8003b60 <Callback01+0x8>)
 8003b5a:	f022 be57 	b.w	802680c <puts>
 8003b5e:	bf00      	nop
 8003b60:	0802c320 	.word	0x0802c320

08003b64 <_write>:
	if (file == 1) {
 8003b64:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8003b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b68:	460c      	mov	r4, r1
 8003b6a:	4617      	mov	r7, r2
	if (file == 1) {
 8003b6c:	d00e      	beq.n	8003b8c <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b6e:	2a00      	cmp	r2, #0
 8003b70:	dd0a      	ble.n	8003b88 <_write+0x24>
 8003b72:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8003b74:	4d0b      	ldr	r5, [pc, #44]	; (8003ba4 <_write+0x40>)
 8003b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b7a:	230a      	movs	r3, #10
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f010 fa34 	bl	8013fec <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b84:	42a6      	cmp	r6, r4
 8003b86:	d1f6      	bne.n	8003b76 <_write+0x12>
}
 8003b88:	4638      	mov	r0, r7
 8003b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	ddfb      	ble.n	8003b88 <_write+0x24>
 8003b90:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8003b92:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003b96:	f001 fe69 	bl	800586c <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003b9a:	42ac      	cmp	r4, r5
 8003b9c:	d1f9      	bne.n	8003b92 <_write+0x2e>
}
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20002bc4 	.word	0x20002bc4

08003ba8 <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003ba8:	4b10      	ldr	r3, [pc, #64]	; (8003bec <crc_rom+0x44>)
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003baa:	4811      	ldr	r0, [pc, #68]	; (8003bf0 <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003bac:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <crc_rom+0x4c>)
 8003bb2:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <crc_rom+0x50>)
 8003bb4:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003bb6:	bf2c      	ite	cs
 8003bb8:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 8003bbc:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003bc0:	1a9b      	subs	r3, r3, r2
	romcrc = xcrc32(base, length, xinit);
 8003bc2:	f04f 32ff 	mov.w	r2, #4294967295
crc_rom() {
 8003bc6:	b510      	push	{r4, lr}
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003bc8:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 8003bca:	460c      	mov	r4, r1
crc_rom() {
 8003bcc:	b082      	sub	sp, #8
	romcrc = xcrc32(base, length, xinit);
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	f7fd f808 	bl	8000be8 <xcrc32>
	printf("         CRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003bd8:	9b01      	ldr	r3, [sp, #4]
	romcrc = xcrc32(base, length, xinit);
 8003bda:	4601      	mov	r1, r0
	printf("         CRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003bdc:	4622      	mov	r2, r4
 8003bde:	4807      	ldr	r0, [pc, #28]	; (8003bfc <crc_rom+0x54>)
}
 8003be0:	b002      	add	sp, #8
 8003be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("         CRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003be6:	f022 bd75 	b.w	80266d4 <iprintf>
 8003bea:	bf00      	nop
 8003bec:	08003af5 	.word	0x08003af5
 8003bf0:	200006f4 	.word	0x200006f4
 8003bf4:	08047dbc 	.word	0x08047dbc
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	0802c32c 	.word	0x0802c32c

08003c00 <err_leds>:
err_leds(int why) {
 8003c00:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003c02:	4e37      	ldr	r6, [pc, #220]	; (8003ce0 <err_leds+0xe0>)
err_leds(int why) {
 8003c04:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 8003c06:	4d37      	ldr	r5, [pc, #220]	; (8003ce4 <err_leds+0xe4>)
 8003c08:	1e44      	subs	r4, r0, #1
		switch (why) {
 8003c0a:	2c07      	cmp	r4, #7
 8003c0c:	d80f      	bhi.n	8003c2e <err_leds+0x2e>
 8003c0e:	e8df f004 	tbb	[pc, r4]
 8003c12:	5c51      	.short	0x5c51
 8003c14:	25303b46 	.word	0x25303b46
 8003c18:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f009 f90c 	bl	800ce3c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c28:	4630      	mov	r0, r6
 8003c2a:	f009 f907 	bl	800ce3c <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	9b01      	ldr	r3, [sp, #4]
 8003c34:	42ab      	cmp	r3, r5
 8003c36:	dae8      	bge.n	8003c0a <err_leds+0xa>
 8003c38:	9b01      	ldr	r3, [sp, #4]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	9b01      	ldr	r3, [sp, #4]
 8003c40:	42ab      	cmp	r3, r5
 8003c42:	dbf9      	blt.n	8003c38 <err_leds+0x38>
 8003c44:	e7e1      	b.n	8003c0a <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003c46:	4630      	mov	r0, r6
 8003c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c4c:	f009 f8f6 	bl	800ce3c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c54:	4630      	mov	r0, r6
 8003c56:	f009 f8f1 	bl	800ce3c <HAL_GPIO_TogglePin>
			break;
 8003c5a:	e7e8      	b.n	8003c2e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c62:	f009 f8eb 	bl	800ce3c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f009 f8e6 	bl	800ce3c <HAL_GPIO_TogglePin>
			break;
 8003c70:	e7dd      	b.n	8003c2e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003c72:	4630      	mov	r0, r6
 8003c74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c78:	f009 f8e0 	bl	800ce3c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003c7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c80:	4630      	mov	r0, r6
 8003c82:	f009 f8db 	bl	800ce3c <HAL_GPIO_TogglePin>
			break;
 8003c86:	e7d2      	b.n	8003c2e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c8e:	f009 f8d5 	bl	800ce3c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c96:	4630      	mov	r0, r6
 8003c98:	f009 f8d0 	bl	800ce3c <HAL_GPIO_TogglePin>
			break;
 8003c9c:	e7c7      	b.n	8003c2e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ca4:	f009 f8ca 	bl	800ce3c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003ca8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cac:	4630      	mov	r0, r6
 8003cae:	f009 f8c5 	bl	800ce3c <HAL_GPIO_TogglePin>
			break;
 8003cb2:	e7bc      	b.n	8003c2e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cba:	f009 f8bf 	bl	800ce3c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	f009 f8ba 	bl	800ce3c <HAL_GPIO_TogglePin>
			break;
 8003cc8:	e7b1      	b.n	8003c2e <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cd0:	f009 f8b4 	bl	800ce3c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cd8:	4630      	mov	r0, r6
 8003cda:	f009 f8af 	bl	800ce3c <HAL_GPIO_TogglePin>
			break;
 8003cde:	e7a6      	b.n	8003c2e <err_leds+0x2e>
 8003ce0:	40020c00 	.word	0x40020c00
 8003ce4:	003567e0 	.word	0x003567e0

08003ce8 <rebootme>:
void rebootme(int why) {
 8003ce8:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cea:	b672      	cpsid	i
		err_leds(why);
 8003cec:	f7ff ff88 	bl	8003c00 <err_leds>

08003cf0 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003cf0:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8003cf4:	074a      	lsls	r2, r1, #29
 8003cf6:	d502      	bpl.n	8003cfe <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8003cf8:	4809      	ldr	r0, [pc, #36]	; (8003d20 <netif_link_callbk_fn+0x30>)
 8003cfa:	f022 bceb 	b.w	80266d4 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 8003cfe:	b510      	push	{r4, lr}
 8003d00:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8003d02:	4808      	ldr	r0, [pc, #32]	; (8003d24 <netif_link_callbk_fn+0x34>)
 8003d04:	f022 fce6 	bl	80266d4 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8003d08:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003d0c:	075b      	lsls	r3, r3, #29
 8003d0e:	d500      	bpl.n	8003d12 <netif_link_callbk_fn+0x22>
}
 8003d10:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 8003d12:	4805      	ldr	r0, [pc, #20]	; (8003d28 <netif_link_callbk_fn+0x38>)
 8003d14:	f022 fd7a 	bl	802680c <puts>
			rebootme(1);
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f7ff ffe5 	bl	8003ce8 <rebootme>
 8003d1e:	bf00      	nop
 8003d20:	0802c358 	.word	0x0802c358
 8003d24:	0802c378 	.word	0x0802c378
 8003d28:	0802c398 	.word	0x0802c398

08003d2c <StarLPTask>:
	char str[82] = { "empty" };
 8003d2c:	4b4f      	ldr	r3, [pc, #316]	; (8003e6c <StarLPTask+0x140>)
 8003d2e:	224c      	movs	r2, #76	; 0x4c
void StarLPTask(void const *argument) {
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8003d34:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 8003d38:	b09f      	sub	sp, #124	; 0x7c
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003d3a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8003ebc <StarLPTask+0x190>
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003d3e:	4f4c      	ldr	r7, [pc, #304]	; (8003e70 <StarLPTask+0x144>)
	char str[82] = { "empty" };
 8003d40:	9009      	str	r0, [sp, #36]	; 0x24
 8003d42:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8003d46:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	f021 fd24 	bl	8025798 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003d50:	2200      	movs	r2, #0
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003d52:	2101      	movs	r1, #1
 8003d54:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003d56:	f8c9 2078 	str.w	r2, [r9, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003d5a:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8003d5e:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003d62:	f012 ff2f 	bl	8016bc4 <xQueueGenericCreate>
 8003d66:	6038      	str	r0, [r7, #0]
	if (consolerxq == NULL) {
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	f000 840d 	beq.w	8004588 <StarLPTask+0x85c>
	strcpy(udp_target, SERVER_DESTINATION);
 8003d6e:	4c41      	ldr	r4, [pc, #260]	; (8003e74 <StarLPTask+0x148>)
 8003d70:	4e41      	ldr	r6, [pc, #260]	; (8003e78 <StarLPTask+0x14c>)
	if (http_downloading) {		// don't go further
 8003d72:	4d42      	ldr	r5, [pc, #264]	; (8003e7c <StarLPTask+0x150>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d76:	6030      	str	r0, [r6, #0]
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	60f3      	str	r3, [r6, #12]
 8003d7c:	6071      	str	r1, [r6, #4]
 8003d7e:	60b2      	str	r2, [r6, #8]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003d80:	2201      	movs	r2, #1
 8003d82:	493f      	ldr	r1, [pc, #252]	; (8003e80 <StarLPTask+0x154>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003d84:	6130      	str	r0, [r6, #16]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003d86:	483f      	ldr	r0, [pc, #252]	; (8003e84 <StarLPTask+0x158>)
 8003d88:	f010 fb4e 	bl	8014428 <HAL_UART_Receive_IT>
	osDelay(10);
 8003d8c:	200a      	movs	r0, #10
 8003d8e:	f012 fc21 	bl	80165d4 <osDelay>
	if (http_downloading) {		// don't go further
 8003d92:	682b      	ldr	r3, [r5, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f040 8390 	bne.w	80044ba <StarLPTask+0x78e>
	while (main_init_done == 0)	 {
 8003d9a:	4c3b      	ldr	r4, [pc, #236]	; (8003e88 <StarLPTask+0x15c>)
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	b943      	cbnz	r3, 8003db2 <StarLPTask+0x86>
		HAL_IWDG_Refresh(&hiwdg);
 8003da0:	4d3a      	ldr	r5, [pc, #232]	; (8003e8c <StarLPTask+0x160>)
		lcd_starting();
 8003da2:	f7ff fdaf 	bl	8003904 <lcd_starting>
		HAL_IWDG_Refresh(&hiwdg);
 8003da6:	4628      	mov	r0, r5
 8003da8:	f009 feb2 	bl	800db10 <HAL_IWDG_Refresh>
	while (main_init_done == 0)	 {
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f7      	beq.n	8003da2 <StarLPTask+0x76>
	int last3min = 0;
 8003db2:	2300      	movs	r3, #0
	writelcdcmd("page 0");		// redraw page0
 8003db4:	4836      	ldr	r0, [pc, #216]	; (8003e90 <StarLPTask+0x164>)
 8003db6:	f8df b108 	ldr.w	fp, [pc, #264]	; 8003ec0 <StarLPTask+0x194>
	int last3min = 0;
 8003dba:	461e      	mov	r6, r3
 8003dbc:	9307      	str	r3, [sp, #28]
	writelcdcmd("page 0");		// redraw page0
 8003dbe:	f7fe fa73 	bl	80022a8 <writelcdcmd>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8003dc2:	4834      	ldr	r0, [pc, #208]	; (8003e94 <StarLPTask+0x168>)
 8003dc4:	f00c fc9e 	bl	8010704 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003dc8:	46b2      	mov	sl, r6
 8003dca:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <StarLPTask+0x16c>)
 8003dcc:	2201      	movs	r2, #1
	gainchanged = 0;
 8003dce:	9606      	str	r6, [sp, #24]
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003dd0:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003dd2:	482e      	ldr	r0, [pc, #184]	; (8003e8c <StarLPTask+0x160>)
		tenmstimer++;
 8003dd4:	3601      	adds	r6, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003dd6:	f009 fe9b 	bl	800db10 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8003dda:	200a      	movs	r0, #10
 8003ddc:	f012 fbfa 	bl	80165d4 <osDelay>
		globaladcnoise = abs(meanwindiff);
 8003de0:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <StarLPTask+0x170>)
 8003de2:	4a2f      	ldr	r2, [pc, #188]	; (8003ea0 <StarLPTask+0x174>)
		tenmstimer++;
 8003de4:	b2b6      	uxth	r6, r6
		globaladcnoise = abs(meanwindiff);
 8003de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfb8      	it	lt
 8003dee:	425b      	neglt	r3, r3
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8003df4:	09db      	lsrs	r3, r3, #7
 8003df6:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <StarLPTask+0x178>)
 8003df8:	3304      	adds	r3, #4
 8003dfa:	8013      	strh	r3, [r2, #0]
		if (sigsuppress) {
 8003dfc:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <StarLPTask+0x17c>)
 8003dfe:	6813      	ldr	r3, [r2, #0]
 8003e00:	b10b      	cbz	r3, 8003e06 <StarLPTask+0xda>
			sigsuppress--;		// decrement trigger suppression counter
 8003e02:	3b01      	subs	r3, #1
 8003e04:	6013      	str	r3, [r2, #0]
				agc = (agc) ? 0 : 1;
 8003e06:	4d29      	ldr	r5, [pc, #164]	; (8003eac <StarLPTask+0x180>)
				printf("AGC is ");
 8003e08:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003ec4 <StarLPTask+0x198>
		while (xQueueReceive(consolerxq, &inch, 0)) {
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003e12:	6838      	ldr	r0, [r7, #0]
 8003e14:	f013 f8da 	bl	8016fcc <xQueueReceive>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d055      	beq.n	8003ec8 <StarLPTask+0x19c>
			if (inch == 0x03) {		// control C
 8003e1c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8003e20:	2803      	cmp	r0, #3
 8003e22:	d011      	beq.n	8003e48 <StarLPTask+0x11c>
			if ((isdigit(inch)) && (agc == 0)) {
 8003e24:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <StarLPTask+0x184>)
 8003e26:	5cc3      	ldrb	r3, [r0, r3]
 8003e28:	075b      	lsls	r3, r3, #29
 8003e2a:	d501      	bpl.n	8003e30 <StarLPTask+0x104>
 8003e2c:	882b      	ldrh	r3, [r5, #0]
 8003e2e:	b113      	cbz	r3, 8003e36 <StarLPTask+0x10a>
				__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 8003e30:	f001 fd1c 	bl	800586c <__io_putchar>
 8003e34:	e7ea      	b.n	8003e0c <StarLPTask+0xe0>
				setpgagain(inch - '0');
 8003e36:	3830      	subs	r0, #48	; 0x30
 8003e38:	f002 fd6a 	bl	8006910 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 8003e3c:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8003e40:	481c      	ldr	r0, [pc, #112]	; (8003eb4 <StarLPTask+0x188>)
 8003e42:	f022 fc47 	bl	80266d4 <iprintf>
 8003e46:	e7e1      	b.n	8003e0c <StarLPTask+0xe0>
				agc = (agc) ? 0 : 1;
 8003e48:	882b      	ldrh	r3, [r5, #0]
				printf("AGC is ");
 8003e4a:	4640      	mov	r0, r8
				agc = (agc) ? 0 : 1;
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	802b      	strh	r3, [r5, #0]
				printf("AGC is ");
 8003e54:	f022 fc3e 	bl	80266d4 <iprintf>
				if (agc)
 8003e58:	882b      	ldrh	r3, [r5, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8121 	beq.w	80040a2 <StarLPTask+0x376>
					printf("ON\n");
 8003e60:	4815      	ldr	r0, [pc, #84]	; (8003eb8 <StarLPTask+0x18c>)
 8003e62:	f022 fcd3 	bl	802680c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8003e66:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8003e6a:	e7db      	b.n	8003e24 <StarLPTask+0xf8>
 8003e6c:	0802a79c 	.word	0x0802a79c
 8003e70:	2000218c 	.word	0x2000218c
 8003e74:	0802b684 	.word	0x0802b684
 8003e78:	20003530 	.word	0x20003530
 8003e7c:	200018dc 	.word	0x200018dc
 8003e80:	20002188 	.word	0x20002188
 8003e84:	20002a38 	.word	0x20002a38
 8003e88:	20002de4 	.word	0x20002de4
 8003e8c:	2000268c 	.word	0x2000268c
 8003e90:	0802be64 	.word	0x0802be64
 8003e94:	200029ec 	.word	0x200029ec
 8003e98:	20002de0 	.word	0x20002de0
 8003e9c:	20000780 	.word	0x20000780
 8003ea0:	20000730 	.word	0x20000730
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	200007a0 	.word	0x200007a0
 8003eac:	2000004e 	.word	0x2000004e
 8003eb0:	080474c9 	.word	0x080474c9
 8003eb4:	0802c40c 	.word	0x0802c40c
 8003eb8:	0802c404 	.word	0x0802c404
 8003ebc:	2000303c 	.word	0x2000303c
 8003ec0:	20002e14 	.word	0x20002e14
 8003ec4:	0802c3fc 	.word	0x0802c3fc
		if (!(ledsenabled)) {
 8003ec8:	4ba6      	ldr	r3, [pc, #664]	; (8004164 <StarLPTask+0x438>)
 8003eca:	4604      	mov	r4, r0
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80ed 	beq.w	80040ae <StarLPTask+0x382>
		} else if (ledhang) {	// trigger led
 8003ed4:	4aa4      	ldr	r2, [pc, #656]	; (8004168 <StarLPTask+0x43c>)
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80e8 	beq.w	80040ae <StarLPTask+0x382>
			ledhang--;
 8003ede:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ee4:	48a1      	ldr	r0, [pc, #644]	; (800416c <StarLPTask+0x440>)
			ledhang--;
 8003ee6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f008 ff8d 	bl	800ce08 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8003eee:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 8003ef2:	f8db 3000 	ldr.w	r3, [fp]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	f040 80e6 	bne.w	80040c8 <StarLPTask+0x39c>
		processnex();		// process Nextion
 8003efc:	f7ff f968 	bl	80031d0 <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8003f00:	4a9b      	ldr	r2, [pc, #620]	; (8004170 <StarLPTask+0x444>)
 8003f02:	1cf3      	adds	r3, r6, #3
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	4a9a      	ldr	r2, [pc, #616]	; (8004174 <StarLPTask+0x448>)
 8003f0a:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 8003f0e:	d31e      	bcc.n	8003f4e <StarLPTask+0x222>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8003f10:	4c99      	ldr	r4, [pc, #612]	; (8004178 <StarLPTask+0x44c>)
 8003f12:	f8d9 107c 	ldr.w	r1, [r9, #124]	; 0x7c
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f103 0219 	add.w	r2, r3, #25
 8003f1c:	4291      	cmp	r1, r2
 8003f1e:	f200 821f 	bhi.w	8004360 <StarLPTask+0x634>
				if (jabbertimeout) {
 8003f22:	4a96      	ldr	r2, [pc, #600]	; (800417c <StarLPTask+0x450>)
 8003f24:	6813      	ldr	r3, [r2, #0]
 8003f26:	b10b      	cbz	r3, 8003f2c <StarLPTask+0x200>
					jabbertimeout--;		// de-arm count
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 8003f2c:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8003f30:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 8003f32:	9b06      	ldr	r3, [sp, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8235 	beq.w	80043a4 <StarLPTask+0x678>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8003f3a:	4b91      	ldr	r3, [pc, #580]	; (8004180 <StarLPTask+0x454>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 81e5 	beq.w	800430e <StarLPTask+0x5e2>
 8003f44:	4b8f      	ldr	r3, [pc, #572]	; (8004184 <StarLPTask+0x458>)
			} else if (lcd_currentpage == 1) {
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f000 8280 	beq.w	800444e <StarLPTask+0x722>
				lcd_showvars();
 8003f4e:	4a8e      	ldr	r2, [pc, #568]	; (8004188 <StarLPTask+0x45c>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8003f50:	f106 030b 	add.w	r3, r6, #11
				lcd_showvars();
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8003f58:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8003f62:	f080 80f1 	bcs.w	8004148 <StarLPTask+0x41c>
			lcd_trigplot();		// update lcd trigger and noise plots
 8003f66:	4a88      	ldr	r2, [pc, #544]	; (8004188 <StarLPTask+0x45c>)
		if ((tenmstimer + 50) % 100 == 0) {		// every second	- offset
 8003f68:	f106 0332 	add.w	r3, r6, #50	; 0x32
			lcd_trigplot();		// update lcd trigger and noise plots
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 50) % 100 == 0) {		// every second	- offset
 8003f70:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003f74:	3a01      	subs	r2, #1
 8003f76:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8003f7a:	f080 80e2 	bcs.w	8004142 <StarLPTask+0x416>
			lcd_gps();		// display the GPS on the LCD page 0
 8003f7e:	4a83      	ldr	r2, [pc, #524]	; (800418c <StarLPTask+0x460>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8003f80:	f106 031b 	add.w	r3, r6, #27
			lcd_gps();		// display the GPS on the LCD page 0
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8003f88:	4a81      	ldr	r2, [pc, #516]	; (8004190 <StarLPTask+0x464>)
 8003f8a:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 8003f8e:	d31a      	bcc.n	8003fc6 <StarLPTask+0x29a>
			if (agc) {
 8003f90:	4b80      	ldr	r3, [pc, #512]	; (8004194 <StarLPTask+0x468>)
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 81b8 	beq.w	800430a <StarLPTask+0x5de>
				trigsin10sec = trigs - prevtrigs;
 8003f9a:	4c7f      	ldr	r4, [pc, #508]	; (8004198 <StarLPTask+0x46c>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003f9c:	4d7f      	ldr	r5, [pc, #508]	; (800419c <StarLPTask+0x470>)
				trigsin10sec = trigs - prevtrigs;
 8003f9e:	f8db 2000 	ldr.w	r2, [fp]
 8003fa2:	6823      	ldr	r3, [r4, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003fa4:	8829      	ldrh	r1, [r5, #0]
				trigsin10sec = trigs - prevtrigs;
 8003fa6:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8004200 <StarLPTask+0x4d4>
 8003faa:	1ad3      	subs	r3, r2, r3
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003fac:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 8003fae:	f8c8 3000 	str.w	r3, [r8]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003fb2:	d802      	bhi.n	8003fba <StarLPTask+0x28e>
					if (trigsin10sec < MINTRIGS10S)
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f240 8276 	bls.w	80044a6 <StarLPTask+0x77a>
				if (trigsin10sec > MAXTRIGS10S)
 8003fba:	2b0a      	cmp	r3, #10
 8003fbc:	f200 824a 	bhi.w	8004454 <StarLPTask+0x728>
			gainchanged = 0;
 8003fc0:	2300      	movs	r3, #0
				prevtrigs = trigs;
 8003fc2:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 8003fc4:	9306      	str	r3, [sp, #24]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 8003fc6:	f640 338c 	movw	r3, #2956	; 0xb8c
 8003fca:	429e      	cmp	r6, r3
 8003fcc:	d945      	bls.n	800405a <StarLPTask+0x32e>
			if (gpsgood == 0) {	// gps is not talking to us
 8003fce:	4c74      	ldr	r4, [pc, #464]	; (80041a0 <StarLPTask+0x474>)
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 81f9 	beq.w	80043ca <StarLPTask+0x69e>
				gpsbadcount = 0;
 8003fd8:	4b72      	ldr	r3, [pc, #456]	; (80041a4 <StarLPTask+0x478>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
			if (psensor == MPL115A2) {
 8003fde:	4b72      	ldr	r3, [pc, #456]	; (80041a8 <StarLPTask+0x47c>)
			gpsgood = 0;			// reset the good flag
 8003fe0:	2200      	movs	r2, #0
			if (psensor == MPL115A2) {
 8003fe2:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 8003fe4:	6022      	str	r2, [r4, #0]
			if (psensor == MPL115A2) {
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	f000 8228 	beq.w	800443c <StarLPTask+0x710>
			} else if (psensor == MPL3115A2) {
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	f000 8247 	beq.w	8004480 <StarLPTask+0x754>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8003ff2:	4b6e      	ldr	r3, [pc, #440]	; (80041ac <StarLPTask+0x480>)
			tenmstimer = 0;
 8003ff4:	2600      	movs	r6, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8003ff6:	f8b9 105c 	ldrh.w	r1, [r9, #92]	; 0x5c
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b289      	uxth	r1, r1
 8003ffe:	486c      	ldr	r0, [pc, #432]	; (80041b0 <StarLPTask+0x484>)
 8004000:	0e1a      	lsrs	r2, r3, #24
 8004002:	9202      	str	r2, [sp, #8]
 8004004:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004008:	9201      	str	r2, [sp, #4]
 800400a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800400e:	b2db      	uxtb	r3, r3
 8004010:	9200      	str	r2, [sp, #0]
 8004012:	f242 7234 	movw	r2, #10036	; 0x2734
 8004016:	f022 fb5d 	bl	80266d4 <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 800401a:	4b66      	ldr	r3, [pc, #408]	; (80041b4 <StarLPTask+0x488>)
 800401c:	4a66      	ldr	r2, [pc, #408]	; (80041b8 <StarLPTask+0x48c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8db 1000 	ldr.w	r1, [fp]
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	4864      	ldr	r0, [pc, #400]	; (80041bc <StarLPTask+0x490>)
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	9304      	str	r3, [sp, #16]
 800402e:	4b64      	ldr	r3, [pc, #400]	; (80041c0 <StarLPTask+0x494>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <StarLPTask+0x498>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	9303      	str	r3, [sp, #12]
 800403c:	4b62      	ldr	r3, [pc, #392]	; (80041c8 <StarLPTask+0x49c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	4b56      	ldr	r3, [pc, #344]	; (800419c <StarLPTask+0x470>)
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	4b60      	ldr	r3, [pc, #384]	; (80041cc <StarLPTask+0x4a0>)
 800404a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800404e:	4b60      	ldr	r3, [pc, #384]	; (80041d0 <StarLPTask+0x4a4>)
 8004050:	9305      	str	r3, [sp, #20]
 8004052:	4b60      	ldr	r3, [pc, #384]	; (80041d4 <StarLPTask+0x4a8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 fb3d 	bl	80266d4 <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 800405a:	f10a 0315 	add.w	r3, sl, #21
 800405e:	4a5e      	ldr	r2, [pc, #376]	; (80041d8 <StarLPTask+0x4ac>)
 8004060:	b29b      	uxth	r3, r3
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	4a5d      	ldr	r2, [pc, #372]	; (80041dc <StarLPTask+0x4b0>)
 8004068:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 800406c:	d30b      	bcc.n	8004086 <StarLPTask+0x35a>
 800406e:	9b07      	ldr	r3, [sp, #28]
 8004070:	459a      	cmp	sl, r3
 8004072:	d008      	beq.n	8004086 <StarLPTask+0x35a>
			if (boosttrys > 0)	// timer for boost gain oscillating
 8004074:	4a5a      	ldr	r2, [pc, #360]	; (80041e0 <StarLPTask+0x4b4>)
 8004076:	8813      	ldrh	r3, [r2, #0]
 8004078:	b10b      	cbz	r3, 800407e <StarLPTask+0x352>
				boosttrys--;
 800407a:	3b01      	subs	r3, #1
 800407c:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();	// add a point to the pressure plot
 800407e:	f7fe ff51 	bl	8002f24 <lcd_pressplot>
 8004082:	f8cd a01c 	str.w	sl, [sp, #28]
		if (onesectimer > 900) {			// 15 mins
 8004086:	f240 3385 	movw	r3, #901	; 0x385
 800408a:	459a      	cmp	sl, r3
 800408c:	f47f aea1 	bne.w	8003dd2 <StarLPTask+0xa6>
			requestapisn();			//update s/n and udp target (reboot on fail)
 8004090:	f005 f8d6 	bl	8009240 <requestapisn>
			if (lcdupneeded()) {
 8004094:	f002 fa2a 	bl	80064ec <lcdupneeded>
 8004098:	2800      	cmp	r0, #0
 800409a:	f040 8219 	bne.w	80044d0 <StarLPTask+0x7a4>
			onesectimer = 0;
 800409e:	4682      	mov	sl, r0
 80040a0:	e697      	b.n	8003dd2 <StarLPTask+0xa6>
					printf("OFF\n");
 80040a2:	4850      	ldr	r0, [pc, #320]	; (80041e4 <StarLPTask+0x4b8>)
 80040a4:	f022 fbb2 	bl	802680c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 80040a8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 80040ac:	e6ba      	b.n	8003e24 <StarLPTask+0xf8>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80040ae:	2200      	movs	r2, #0
 80040b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040b4:	482d      	ldr	r0, [pc, #180]	; (800416c <StarLPTask+0x440>)
 80040b6:	f008 fea7 	bl	800ce08 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 80040ba:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 80040be:	f8db 3000 	ldr.w	r3, [fp]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	f43f af1a 	beq.w	8003efc <StarLPTask+0x1d0>
			if (soundenabled) {
 80040c8:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <StarLPTask+0x4bc>)
			trigs = statuspkt.trigcount;
 80040ca:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
			if (soundenabled) {
 80040ce:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 80040d0:	f8cb 2000 	str.w	r2, [fp]
			if (soundenabled) {
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 818c 	bne.w	80043f2 <StarLPTask+0x6c6>
 80040da:	4d44      	ldr	r5, [pc, #272]	; (80041ec <StarLPTask+0x4c0>)
				printf("sem wait 1a\n");
 80040dc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8004204 <StarLPTask+0x4d8>
 80040e0:	e002      	b.n	80040e8 <StarLPTask+0x3bc>
 80040e2:	4640      	mov	r0, r8
 80040e4:	f022 fb92 	bl	802680c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80040e8:	2101      	movs	r1, #1
 80040ea:	6828      	ldr	r0, [r5, #0]
 80040ec:	f013 f836 	bl	801715c <xQueueSemaphoreTake>
 80040f0:	2801      	cmp	r0, #1
 80040f2:	d1f6      	bne.n	80040e2 <StarLPTask+0x3b6>
			strcpy(str, ctime(&epochtime));		// ctime
 80040f4:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 80040f8:	483d      	ldr	r0, [pc, #244]	; (80041f0 <StarLPTask+0x4c4>)
 80040fa:	f021 f8cb 	bl	8025294 <ctime>
 80040fe:	4601      	mov	r1, r0
 8004100:	4640      	mov	r0, r8
 8004102:	f022 fd62 	bl	8026bca <stpcpy>
			i = 0;
 8004106:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 8004108:	eba0 0008 	sub.w	r0, r0, r8
 800410c:	4939      	ldr	r1, [pc, #228]	; (80041f4 <StarLPTask+0x4c8>)
 800410e:	e008      	b.n	8004122 <StarLPTask+0x3f6>
				if ((str[i] != '\n') && (str[i] != '\r'))
 8004110:	f818 2003 	ldrb.w	r2, [r8, r3]
 8004114:	2a0a      	cmp	r2, #10
 8004116:	d003      	beq.n	8004120 <StarLPTask+0x3f4>
 8004118:	2a0d      	cmp	r2, #13
 800411a:	d001      	beq.n	8004120 <StarLPTask+0x3f4>
					trigtimestr[n++] = str[i];
 800411c:	550a      	strb	r2, [r1, r4]
 800411e:	3401      	adds	r4, #1
				i++;
 8004120:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 8004122:	4283      	cmp	r3, r0
 8004124:	d3f4      	bcc.n	8004110 <StarLPTask+0x3e4>
			trigtimestr[n] = '\0';
 8004126:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004128:	6828      	ldr	r0, [r5, #0]
			trigtimestr[n] = '\0';
 800412a:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800412c:	461a      	mov	r2, r3
 800412e:	4619      	mov	r1, r3
 8004130:	f012 fd7a 	bl	8016c28 <xQueueGenericSend>
 8004134:	2801      	cmp	r0, #1
 8004136:	f43f aee1 	beq.w	8003efc <StarLPTask+0x1d0>
				printf("semaphore 1a release failed\n");
 800413a:	482f      	ldr	r0, [pc, #188]	; (80041f8 <StarLPTask+0x4cc>)
 800413c:	f022 fb66 	bl	802680c <puts>
 8004140:	e6dc      	b.n	8003efc <StarLPTask+0x1d0>
			lcd_gps();		// display the GPS on the LCD page 0
 8004142:	f7fe fac5 	bl	80026d0 <lcd_gps>
 8004146:	e71a      	b.n	8003f7e <StarLPTask+0x252>
			if (ledsenabled)
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <StarLPTask+0x438>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800414a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800414e:	4807      	ldr	r0, [pc, #28]	; (800416c <StarLPTask+0x440>)
			if (ledsenabled)
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	2a00      	cmp	r2, #0
 8004154:	f000 8166 	beq.w	8004424 <StarLPTask+0x6f8>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8004158:	f008 fe70 	bl	800ce3c <HAL_GPIO_TogglePin>
 800415c:	4d23      	ldr	r5, [pc, #140]	; (80041ec <StarLPTask+0x4c0>)
				printf("sem wait 1b\n");
 800415e:	4c27      	ldr	r4, [pc, #156]	; (80041fc <StarLPTask+0x4d0>)
 8004160:	e055      	b.n	800420e <StarLPTask+0x4e2>
 8004162:	bf00      	nop
 8004164:	200002ac 	.word	0x200002ac
 8004168:	2000077c 	.word	0x2000077c
 800416c:	40020c00 	.word	0x40020c00
 8004170:	cccccccd 	.word	0xcccccccd
 8004174:	19999999 	.word	0x19999999
 8004178:	20002dd4 	.word	0x20002dd4
 800417c:	20000734 	.word	0x20000734
 8004180:	20001a8c 	.word	0x20001a8c
 8004184:	20001a88 	.word	0x20001a88
 8004188:	c28f5c29 	.word	0xc28f5c29
 800418c:	26e978d5 	.word	0x26e978d5
 8004190:	00418937 	.word	0x00418937
 8004194:	2000004e 	.word	0x2000004e
 8004198:	20002e00 	.word	0x20002e00
 800419c:	20000002 	.word	0x20000002
 80041a0:	20002efc 	.word	0x20002efc
 80041a4:	20002194 	.word	0x20002194
 80041a8:	2000343c 	.word	0x2000343c
 80041ac:	20002df4 	.word	0x20002df4
 80041b0:	0802c61c 	.word	0x0802c61c
 80041b4:	20003444 	.word	0x20003444
 80041b8:	10624dd3 	.word	0x10624dd3
 80041bc:	0802c638 	.word	0x0802c638
 80041c0:	20003434 	.word	0x20003434
 80041c4:	20003440 	.word	0x20003440
 80041c8:	20003438 	.word	0x20003438
 80041cc:	20003430 	.word	0x20003430
 80041d0:	20000090 	.word	0x20000090
 80041d4:	20000730 	.word	0x20000730
 80041d8:	a4fa4fa5 	.word	0xa4fa4fa5
 80041dc:	016c16c1 	.word	0x016c16c1
 80041e0:	200033b0 	.word	0x200033b0
 80041e4:	0802c408 	.word	0x0802c408
 80041e8:	200002b2 	.word	0x200002b2
 80041ec:	20002e0c 	.word	0x20002e0c
 80041f0:	20002ef0 	.word	0x20002ef0
 80041f4:	20000278 	.word	0x20000278
 80041f8:	0802c43c 	.word	0x0802c43c
 80041fc:	0802c468 	.word	0x0802c468
 8004200:	20002e18 	.word	0x20002e18
 8004204:	0802c430 	.word	0x0802c430
 8004208:	4620      	mov	r0, r4
 800420a:	f022 faff 	bl	802680c <puts>
			while (!(xSemaphoreTake(
 800420e:	2101      	movs	r1, #1
 8004210:	6828      	ldr	r0, [r5, #0]
 8004212:	f012 ffa3 	bl	801715c <xQueueSemaphoreTake>
 8004216:	2801      	cmp	r0, #1
 8004218:	d1f6      	bne.n	8004208 <StarLPTask+0x4dc>
			strcpy(str, ctime(&epochtime));
 800421a:	48b0      	ldr	r0, [pc, #704]	; (80044dc <StarLPTask+0x7b0>)
 800421c:	f021 f83a 	bl	8025294 <ctime>
 8004220:	aa09      	add	r2, sp, #36	; 0x24
 8004222:	4601      	mov	r1, r0
 8004224:	4610      	mov	r0, r2
 8004226:	f022 fcd0 	bl	8026bca <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800422a:	aa09      	add	r2, sp, #36	; 0x24
			sprintf(nowtimestr, "\"%s\"", str);
 800422c:	49ac      	ldr	r1, [pc, #688]	; (80044e0 <StarLPTask+0x7b4>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800422e:	1a80      	subs	r0, r0, r2
 8004230:	f100 0378 	add.w	r3, r0, #120	; 0x78
 8004234:	eb0d 0003 	add.w	r0, sp, r3
 8004238:	2300      	movs	r3, #0
 800423a:	f800 3c55 	strb.w	r3, [r0, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 800423e:	48a9      	ldr	r0, [pc, #676]	; (80044e4 <StarLPTask+0x7b8>)
 8004240:	f022 fc32 	bl	8026aa8 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8004244:	4ba8      	ldr	r3, [pc, #672]	; (80044e8 <StarLPTask+0x7bc>)
 8004246:	4aa9      	ldr	r2, [pc, #676]	; (80044ec <StarLPTask+0x7c0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	49a8      	ldr	r1, [pc, #672]	; (80044f0 <StarLPTask+0x7c4>)
 800424e:	48a9      	ldr	r0, [pc, #676]	; (80044f4 <StarLPTask+0x7c8>)
 8004250:	f022 fc2a 	bl	8026aa8 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8004254:	4ba8      	ldr	r3, [pc, #672]	; (80044f8 <StarLPTask+0x7cc>)
 8004256:	4aa9      	ldr	r2, [pc, #676]	; (80044fc <StarLPTask+0x7d0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	49a4      	ldr	r1, [pc, #656]	; (80044f0 <StarLPTask+0x7c4>)
 800425e:	48a8      	ldr	r0, [pc, #672]	; (8004500 <StarLPTask+0x7d4>)
 8004260:	f022 fc22 	bl	8026aa8 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8004264:	4ba7      	ldr	r3, [pc, #668]	; (8004504 <StarLPTask+0x7d8>)
			sprintf(statstr,
 8004266:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800426a:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 800426e:	49a6      	ldr	r1, [pc, #664]	; (8004508 <StarLPTask+0x7dc>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8004270:	2b00      	cmp	r3, #0
			sprintf(statstr,
 8004272:	48a6      	ldr	r0, [pc, #664]	; (800450c <StarLPTask+0x7e0>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8004274:	bfb8      	it	lt
 8004276:	425b      	neglt	r3, r3
			sprintf(statstr,
 8004278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	4ba4      	ldr	r3, [pc, #656]	; (8004510 <StarLPTask+0x7e4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	4ba2      	ldr	r3, [pc, #648]	; (8004514 <StarLPTask+0x7e8>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	9303      	str	r3, [sp, #12]
 800428e:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	4ba0      	ldr	r3, [pc, #640]	; (8004518 <StarLPTask+0x7ec>)
 8004296:	f022 fc07 	bl	8026aa8 <siprintf>
			if (gpslocked) {
 800429a:	4ba0      	ldr	r3, [pc, #640]	; (800451c <StarLPTask+0x7f0>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80b1 	beq.w	8004406 <StarLPTask+0x6da>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 80042a4:	f899 201b 	ldrb.w	r2, [r9, #27]
 80042a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80042ac:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80042b0:	489b      	ldr	r0, [pc, #620]	; (8004520 <StarLPTask+0x7f4>)
 80042b2:	9100      	str	r1, [sp, #0]
 80042b4:	499b      	ldr	r1, [pc, #620]	; (8004524 <StarLPTask+0x7f8>)
 80042b6:	f022 fbf7 	bl	8026aa8 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80042ba:	2300      	movs	r3, #0
 80042bc:	6828      	ldr	r0, [r5, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	4619      	mov	r1, r3
 80042c2:	f012 fcb1 	bl	8016c28 <xQueueGenericSend>
 80042c6:	2801      	cmp	r0, #1
 80042c8:	d002      	beq.n	80042d0 <StarLPTask+0x5a4>
				printf("semaphore 1b release failed\n");
 80042ca:	4897      	ldr	r0, [pc, #604]	; (8004528 <StarLPTask+0x7fc>)
 80042cc:	f022 fa9e 	bl	802680c <puts>
			onesectimer++;
 80042d0:	f10a 0301 	add.w	r3, sl, #1
				printf("sem wait 1c\n");
 80042d4:	4c95      	ldr	r4, [pc, #596]	; (800452c <StarLPTask+0x800>)
			onesectimer++;
 80042d6:	fa1f fa83 	uxth.w	sl, r3
			while (!(xSemaphoreTake(ssicontentHandle,
 80042da:	e002      	b.n	80042e2 <StarLPTask+0x5b6>
				printf("sem wait 1c\n");
 80042dc:	4620      	mov	r0, r4
 80042de:	f022 fa95 	bl	802680c <puts>
			while (!(xSemaphoreTake(ssicontentHandle,
 80042e2:	2119      	movs	r1, #25
 80042e4:	6828      	ldr	r0, [r5, #0]
 80042e6:	f012 ff39 	bl	801715c <xQueueSemaphoreTake>
 80042ea:	2801      	cmp	r0, #1
 80042ec:	d1f6      	bne.n	80042dc <StarLPTask+0x5b0>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 80042ee:	2300      	movs	r3, #0
 80042f0:	6828      	ldr	r0, [r5, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	4619      	mov	r1, r3
 80042f6:	f012 fc97 	bl	8016c28 <xQueueGenericSend>
 80042fa:	2801      	cmp	r0, #1
 80042fc:	d002      	beq.n	8004304 <StarLPTask+0x5d8>
				printf("semaphore 1c release failed\n");
 80042fe:	488c      	ldr	r0, [pc, #560]	; (8004530 <StarLPTask+0x804>)
 8004300:	f022 fa84 	bl	802680c <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 8004304:	f7fe fcba 	bl	8002c7c <lcd_trigplot>
 8004308:	e62d      	b.n	8003f66 <StarLPTask+0x23a>
			gainchanged = 0;
 800430a:	9306      	str	r3, [sp, #24]
 800430c:	e65b      	b.n	8003fc6 <StarLPTask+0x29a>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 800430e:	4c89      	ldr	r4, [pc, #548]	; (8004534 <StarLPTask+0x808>)
 8004310:	8823      	ldrh	r3, [r4, #0]
 8004312:	4553      	cmp	r3, sl
 8004314:	4b88      	ldr	r3, [pc, #544]	; (8004538 <StarLPTask+0x80c>)
 8004316:	f43f ae16 	beq.w	8003f46 <StarLPTask+0x21a>
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	2a00      	cmp	r2, #0
 800431e:	f47f ae12 	bne.w	8003f46 <StarLPTask+0x21a>
				timeinfo = *localtime(&localepochtime);
 8004322:	4886      	ldr	r0, [pc, #536]	; (800453c <StarLPTask+0x810>)
 8004324:	f021 f8d8 	bl	80254d8 <localtime>
 8004328:	4d85      	ldr	r5, [pc, #532]	; (8004540 <StarLPTask+0x814>)
 800432a:	4684      	mov	ip, r0
 800432c:	46ae      	mov	lr, r5
 800432e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004332:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004336:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800433a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800433e:	f8dc 3000 	ldr.w	r3, [ip]
				lastsec = onesectimer;
 8004342:	f8a4 a000 	strh.w	sl, [r4]
				timeinfo = *localtime(&localepochtime);
 8004346:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();		// display the clock on the LCD page 0
 800434a:	f7fe f9c9 	bl	80026e0 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 800434e:	4b7d      	ldr	r3, [pc, #500]	; (8004544 <StarLPTask+0x818>)
 8004350:	69ea      	ldr	r2, [r5, #28]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	f43f adfa 	beq.w	8003f4e <StarLPTask+0x222>
					lcd_date();
 800435a:	f7fe fa3b 	bl	80027d4 <lcd_date>
 800435e:	e5f6      	b.n	8003f4e <StarLPTask+0x222>
				statuspkt.jabcnt++;
 8004360:	f8b9 2086 	ldrh.w	r2, [r9, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8004364:	4878      	ldr	r0, [pc, #480]	; (8004548 <StarLPTask+0x81c>)
				statuspkt.jabcnt++;
 8004366:	3201      	adds	r2, #1
 8004368:	b292      	uxth	r2, r2
 800436a:	f8a9 2086 	strh.w	r2, [r9, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 800436e:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8004370:	f8d9 107c 	ldr.w	r1, [r9, #124]	; 0x7c
 8004374:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 8004376:	4b75      	ldr	r3, [pc, #468]	; (800454c <StarLPTask+0x820>)
 8004378:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 800437a:	f022 f9ab 	bl	80266d4 <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 800437e:	4b74      	ldr	r3, [pc, #464]	; (8004550 <StarLPTask+0x824>)
 8004380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004384:	b93b      	cbnz	r3, 8004396 <StarLPTask+0x66a>
					if (trigthresh < 4095)
 8004386:	4a63      	ldr	r2, [pc, #396]	; (8004514 <StarLPTask+0x7e8>)
 8004388:	f640 71fe 	movw	r1, #4094	; 0xffe
 800438c:	8813      	ldrh	r3, [r2, #0]
 800438e:	428b      	cmp	r3, r1
 8004390:	d801      	bhi.n	8004396 <StarLPTask+0x66a>
						trigthresh++;
 8004392:	3301      	adds	r3, #1
 8004394:	8013      	strh	r3, [r2, #0]
				if (agc) {
 8004396:	4b6f      	ldr	r3, [pc, #444]	; (8004554 <StarLPTask+0x828>)
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d179      	bne.n	8004492 <StarLPTask+0x766>
				jabtrigcnt = statuspkt.trigcount;
 800439e:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 80043a2:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 80043a4:	4b6c      	ldr	r3, [pc, #432]	; (8004558 <StarLPTask+0x82c>)
 80043a6:	4a6d      	ldr	r2, [pc, #436]	; (800455c <StarLPTask+0x830>)
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	6813      	ldr	r3, [r2, #0]
 80043ac:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	dd3b      	ble.n	800442a <StarLPTask+0x6fe>
					if (trigthresh < 4095)
 80043b2:	4858      	ldr	r0, [pc, #352]	; (8004514 <StarLPTask+0x7e8>)
 80043b4:	f640 74fe 	movw	r4, #4094	; 0xffe
 80043b8:	8803      	ldrh	r3, [r0, #0]
 80043ba:	42a3      	cmp	r3, r4
 80043bc:	d801      	bhi.n	80043c2 <StarLPTask+0x696>
						trigthresh++;
 80043be:	3301      	adds	r3, #1
 80043c0:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 80043c2:	2300      	movs	r3, #0
 80043c4:	6011      	str	r1, [r2, #0]
 80043c6:	9306      	str	r3, [sp, #24]
 80043c8:	e5b7      	b.n	8003f3a <StarLPTask+0x20e>
				printf("GPS serial comms problem?\n");
 80043ca:	4865      	ldr	r0, [pc, #404]	; (8004560 <StarLPTask+0x834>)
 80043cc:	f022 fa1e 	bl	802680c <puts>
				if (gpsbadcount++ > 9) {
 80043d0:	4a64      	ldr	r2, [pc, #400]	; (8004564 <StarLPTask+0x838>)
 80043d2:	6813      	ldr	r3, [r2, #0]
 80043d4:	1c59      	adds	r1, r3, #1
 80043d6:	2b09      	cmp	r3, #9
 80043d8:	6011      	str	r1, [r2, #0]
 80043da:	f77f ae00 	ble.w	8003fde <StarLPTask+0x2b2>
					printf("GPS bad - rebooting...\n");
 80043de:	4862      	ldr	r0, [pc, #392]	; (8004568 <StarLPTask+0x83c>)
 80043e0:	f022 fa14 	bl	802680c <puts>
					osDelay(3000);
 80043e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80043e8:	f012 f8f4 	bl	80165d4 <osDelay>
					rebootme(5);
 80043ec:	2005      	movs	r0, #5
 80043ee:	f7ff fc7b 	bl	8003ce8 <rebootme>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80043f2:	2308      	movs	r3, #8
 80043f4:	4a5d      	ldr	r2, [pc, #372]	; (800456c <StarLPTask+0x840>)
 80043f6:	2100      	movs	r1, #0
 80043f8:	485d      	ldr	r0, [pc, #372]	; (8004570 <StarLPTask+0x844>)
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004400:	f005 fd30 	bl	8009e64 <HAL_DAC_Start_DMA>
 8004404:	e669      	b.n	80040da <StarLPTask+0x3ae>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 8004406:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8004584 <StarLPTask+0x858>
 800440a:	4c45      	ldr	r4, [pc, #276]	; (8004520 <StarLPTask+0x7f4>)
 800440c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004412:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004418:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800441c:	f844 0b04 	str.w	r0, [r4], #4
 8004420:	8021      	strh	r1, [r4, #0]
 8004422:	e74a      	b.n	80042ba <StarLPTask+0x58e>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 8004424:	f008 fcf0 	bl	800ce08 <HAL_GPIO_WritePin>
 8004428:	e698      	b.n	800415c <StarLPTask+0x430>
				if (n == 0) {		// no triggers in last 100mS
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1c9      	bne.n	80043c2 <StarLPTask+0x696>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 800442e:	4839      	ldr	r0, [pc, #228]	; (8004514 <StarLPTask+0x7e8>)
 8004430:	8803      	ldrh	r3, [r0, #0]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d9c5      	bls.n	80043c2 <StarLPTask+0x696>
						trigthresh--;
 8004436:	3b01      	subs	r3, #1
 8004438:	8003      	strh	r3, [r0, #0]
 800443a:	e7c2      	b.n	80043c2 <StarLPTask+0x696>
				if (getpressure115() != HAL_OK) {
 800443c:	f002 fb7a 	bl	8006b34 <getpressure115>
 8004440:	2800      	cmp	r0, #0
 8004442:	f43f add6 	beq.w	8003ff2 <StarLPTask+0x2c6>
					printf("MPL115A2 error\n\r");
 8004446:	484b      	ldr	r0, [pc, #300]	; (8004574 <StarLPTask+0x848>)
 8004448:	f022 f944 	bl	80266d4 <iprintf>
 800444c:	e5d1      	b.n	8003ff2 <StarLPTask+0x2c6>
				lcd_showvars();
 800444e:	f7fe f9e9 	bl	8002824 <lcd_showvars>
 8004452:	e57c      	b.n	8003f4e <StarLPTask+0x222>
					gainchanged = bumppga(-1);
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	f002 fb26 	bl	8006aa8 <bumppga>
 800445c:	b203      	sxth	r3, r0
 800445e:	9306      	str	r3, [sp, #24]
				prevtrigs = trigs;
 8004460:	f8db 3000 	ldr.w	r3, [fp]
 8004464:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8004466:	9b06      	ldr	r3, [sp, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f77f adac 	ble.w	8003fc6 <StarLPTask+0x29a>
					if (trigthresh < (4095 - 10))
 800446e:	882b      	ldrh	r3, [r5, #0]
 8004470:	f640 72f4 	movw	r2, #4084	; 0xff4
 8004474:	4293      	cmp	r3, r2
 8004476:	f63f ada6 	bhi.w	8003fc6 <StarLPTask+0x29a>
						trigthresh += 5;
 800447a:	3305      	adds	r3, #5
 800447c:	802b      	strh	r3, [r5, #0]
 800447e:	e5a2      	b.n	8003fc6 <StarLPTask+0x29a>
				if (getpressure3115() != HAL_OK) {
 8004480:	f002 fc06 	bl	8006c90 <getpressure3115>
 8004484:	2800      	cmp	r0, #0
 8004486:	f43f adb4 	beq.w	8003ff2 <StarLPTask+0x2c6>
					printf("MPL3115A2 error\n\r");
 800448a:	483b      	ldr	r0, [pc, #236]	; (8004578 <StarLPTask+0x84c>)
 800448c:	f022 f922 	bl	80266d4 <iprintf>
 8004490:	e5af      	b.n	8003ff2 <StarLPTask+0x2c6>
					gainchanged = bumppga(-1);	// decrease gain
 8004492:	f04f 30ff 	mov.w	r0, #4294967295
 8004496:	f002 fb07 	bl	8006aa8 <bumppga>
 800449a:	b203      	sxth	r3, r0
 800449c:	9306      	str	r3, [sp, #24]
				jabtrigcnt = statuspkt.trigcount;
 800449e:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 80044a2:	6023      	str	r3, [r4, #0]
 80044a4:	e545      	b.n	8003f32 <StarLPTask+0x206>
						gainchanged = bumppga(1);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f002 fafe 	bl	8006aa8 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 80044ac:	f8d8 3000 	ldr.w	r3, [r8]
 80044b0:	2b0a      	cmp	r3, #10
 80044b2:	d8cf      	bhi.n	8004454 <StarLPTask+0x728>
						gainchanged = bumppga(1);
 80044b4:	b203      	sxth	r3, r0
 80044b6:	9306      	str	r3, [sp, #24]
 80044b8:	e7d2      	b.n	8004460 <StarLPTask+0x734>
			HAL_IWDG_Refresh(&hiwdg);
 80044ba:	4c30      	ldr	r4, [pc, #192]	; (800457c <StarLPTask+0x850>)
			osDelay(10);
 80044bc:	200a      	movs	r0, #10
 80044be:	f012 f889 	bl	80165d4 <osDelay>
			HAL_IWDG_Refresh(&hiwdg);
 80044c2:	4620      	mov	r0, r4
 80044c4:	f009 fb24 	bl	800db10 <HAL_IWDG_Refresh>
		while (http_downloading)  {
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f6      	bne.n	80044bc <StarLPTask+0x790>
 80044ce:	e464      	b.n	8003d9a <StarLPTask+0x6e>
				printf("LCD update required, wait for reboot and download..\n");
 80044d0:	482b      	ldr	r0, [pc, #172]	; (8004580 <StarLPTask+0x854>)
 80044d2:	f022 f99b 	bl	802680c <puts>
				rebootme(0);
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7ff fc06 	bl	8003ce8 <rebootme>
 80044dc:	20002ef0 	.word	0x20002ef0
 80044e0:	0802c474 	.word	0x0802c474
 80044e4:	20000090 	.word	0x20000090
 80044e8:	20003444 	.word	0x20003444
 80044ec:	20003440 	.word	0x20003440
 80044f0:	0802c47c 	.word	0x0802c47c
 80044f4:	2000026c 	.word	0x2000026c
 80044f8:	20003434 	.word	0x20003434
 80044fc:	20003438 	.word	0x20003438
 8004500:	200000b0 	.word	0x200000b0
 8004504:	20000780 	.word	0x20000780
 8004508:	0802c484 	.word	0x0802c484
 800450c:	20000164 	.word	0x20000164
 8004510:	2000072c 	.word	0x2000072c
 8004514:	20000002 	.word	0x20000002
 8004518:	20000278 	.word	0x20000278
 800451c:	200034a8 	.word	0x200034a8
 8004520:	20000050 	.word	0x20000050
 8004524:	0802c52c 	.word	0x0802c52c
 8004528:	0802c57c 	.word	0x0802c57c
 800452c:	0802c598 	.word	0x0802c598
 8004530:	0802c5a4 	.word	0x0802c5a4
 8004534:	20000010 	.word	0x20000010
 8004538:	20001a88 	.word	0x20001a88
 800453c:	20001b48 	.word	0x20001b48
 8004540:	20001f68 	.word	0x20001f68
 8004544:	20001a7c 	.word	0x20001a7c
 8004548:	0802c458 	.word	0x0802c458
 800454c:	20000734 	.word	0x20000734
 8004550:	20003430 	.word	0x20003430
 8004554:	2000004e 	.word	0x2000004e
 8004558:	20000788 	.word	0x20000788
 800455c:	20002ddc 	.word	0x20002ddc
 8004560:	0802c5c0 	.word	0x0802c5c0
 8004564:	20002194 	.word	0x20002194
 8004568:	0802c5dc 	.word	0x0802c5dc
 800456c:	0802c9dc 	.word	0x0802c9dc
 8004570:	20002294 	.word	0x20002294
 8004574:	0802c5f4 	.word	0x0802c5f4
 8004578:	0802c608 	.word	0x0802c608
 800457c:	2000268c 	.word	0x2000268c
 8004580:	0802c698 	.word	0x0802c698
 8004584:	0802c554 	.word	0x0802c554
 8004588:	4604      	mov	r4, r0
		printf("Console Rx Queue not created... rebooting...\n");
 800458a:	4803      	ldr	r0, [pc, #12]	; (8004598 <StarLPTask+0x86c>)
 800458c:	f022 f93e 	bl	802680c <puts>
		rebootme(0);
 8004590:	4620      	mov	r0, r4
 8004592:	f7ff fba9 	bl	8003ce8 <rebootme>
 8004596:	bf00      	nop
 8004598:	0802c3cc 	.word	0x0802c3cc

0800459c <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 800459c:	2100      	movs	r1, #0
 800459e:	f005 bcfd 	b.w	8009f9c <HAL_DAC_Stop_DMA>
 80045a2:	bf00      	nop

080045a4 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 80045a4:	b538      	push	{r3, r4, r5, lr}
	if (htim->Instance == TIM2) {
 80045a6:	6803      	ldr	r3, [r0, #0]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 80045ae:	4a15      	ldr	r2, [pc, #84]	; (8004604 <HAL_TIM_IC_CaptureCallback+0x60>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d021      	beq.n	80045f8 <HAL_TIM_IC_CaptureCallback+0x54>
}
 80045b4:	bd38      	pop	{r3, r4, r5, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 80045b6:	4c14      	ldr	r4, [pc, #80]	; (8004608 <HAL_TIM_IC_CaptureCallback+0x64>)
 80045b8:	4b14      	ldr	r3, [pc, #80]	; (800460c <HAL_TIM_IC_CaptureCallback+0x68>)
 80045ba:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 80045bc:	4a14      	ldr	r2, [pc, #80]	; (8004610 <HAL_TIM_IC_CaptureCallback+0x6c>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 80045be:	3101      	adds	r1, #1
 80045c0:	4814      	ldr	r0, [pc, #80]	; (8004614 <HAL_TIM_IC_CaptureCallback+0x70>)
		if (!(ledsenabled)) {
 80045c2:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 80045c4:	fba3 5301 	umull	r5, r3, r3, r1
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80045ce:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 80045d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 80045d6:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 80045d8:	480f      	ldr	r0, [pc, #60]	; (8004618 <HAL_TIM_IC_CaptureCallback+0x74>)
		if (!(ledsenabled)) {
 80045da:	b152      	cbz	r2, 80045f2 <HAL_TIM_IC_CaptureCallback+0x4e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80045dc:	f008 fc2e 	bl	800ce3c <HAL_GPIO_TogglePin>
		diff = lastcap;
 80045e0:	4d0e      	ldr	r5, [pc, #56]	; (800461c <HAL_TIM_IC_CaptureCallback+0x78>)
		statuspkt.clktrim = movavg(diff);
 80045e2:	6828      	ldr	r0, [r5, #0]
 80045e4:	f001 f960 	bl	80058a8 <movavg>
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80045e8:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_TIM_IC_CaptureCallback+0x7c>)
		statuspkt.clktrim = movavg(diff);
 80045ea:	65a0      	str	r0, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	602b      	str	r3, [r5, #0]
}
 80045f0:	bd38      	pop	{r3, r4, r5, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 80045f2:	f008 fc09 	bl	800ce08 <HAL_GPIO_WritePin>
 80045f6:	e7f3      	b.n	80045e0 <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 80045f8:	480a      	ldr	r0, [pc, #40]	; (8004624 <HAL_TIM_IC_CaptureCallback+0x80>)
}
 80045fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("Timer4 callback\n");
 80045fe:	f022 b905 	b.w	802680c <puts>
 8004602:	bf00      	nop
 8004604:	40000800 	.word	0x40000800
 8004608:	2000303c 	.word	0x2000303c
 800460c:	88888889 	.word	0x88888889
 8004610:	200002ac 	.word	0x200002ac
 8004614:	2000078c 	.word	0x2000078c
 8004618:	40020c00 	.word	0x40020c00
 800461c:	20002dd8 	.word	0x20002dd8
 8004620:	200007a4 	.word	0x200007a4
 8004624:	0802c6cc 	.word	0x0802c6cc

08004628 <getboardpcb>:
void getboardpcb() {
 8004628:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 800462a:	2101      	movs	r1, #1
 800462c:	4804      	ldr	r0, [pc, #16]	; (8004640 <getboardpcb+0x18>)
 800462e:	f008 fbd9 	bl	800cde4 <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 8004632:	2800      	cmp	r0, #0
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <getboardpcb+0x1c>)
 8004636:	bf0c      	ite	eq
 8004638:	2216      	moveq	r2, #22
 800463a:	220b      	movne	r2, #11
 800463c:	601a      	str	r2, [r3, #0]
}
 800463e:	bd08      	pop	{r3, pc}
 8004640:	40020800 	.word	0x40020800
 8004644:	20002184 	.word	0x20002184

08004648 <uart2_rxdone>:
void uart2_rxdone() {
 8004648:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 800464a:	4807      	ldr	r0, [pc, #28]	; (8004668 <uart2_rxdone+0x20>)
 800464c:	2300      	movs	r3, #0
 800464e:	4907      	ldr	r1, [pc, #28]	; (800466c <uart2_rxdone+0x24>)
 8004650:	461a      	mov	r2, r3
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	f012 fbe8 	bl	8016e28 <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8004658:	2201      	movs	r2, #1
 800465a:	4904      	ldr	r1, [pc, #16]	; (800466c <uart2_rxdone+0x24>)
 800465c:	4804      	ldr	r0, [pc, #16]	; (8004670 <uart2_rxdone+0x28>)
}
 800465e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8004662:	f00f bee1 	b.w	8014428 <HAL_UART_Receive_IT>
 8004666:	bf00      	nop
 8004668:	2000218c 	.word	0x2000218c
 800466c:	20002188 	.word	0x20002188
 8004670:	20002a38 	.word	0x20002a38

08004674 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8004674:	4a25      	ldr	r2, [pc, #148]	; (800470c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004676:	6803      	ldr	r3, [r0, #0]
 8004678:	4293      	cmp	r3, r2
 800467a:	d029      	beq.n	80046d0 <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 800467c:	4a24      	ldr	r2, [pc, #144]	; (8004710 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d02d      	beq.n	80046de <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d02c      	beq.n	80046e2 <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8004688:	4a22      	ldr	r2, [pc, #136]	; (8004714 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d030      	beq.n	80046f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 800468e:	4a22      	ldr	r2, [pc, #136]	; (8004718 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d005      	beq.n	80046a0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8004694:	4a21      	ldr	r2, [pc, #132]	; (800471c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01f      	beq.n	80046da <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 800469a:	4821      	ldr	r0, [pc, #132]	; (8004720 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800469c:	f022 b8b6 	b.w	802680c <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80046a0:	b510      	push	{r4, lr}
		t1sec++;
 80046a2:	4920      	ldr	r1, [pc, #128]	; (8004724 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 80046a4:	4c20      	ldr	r4, [pc, #128]	; (8004728 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 80046a6:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 80046a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 80046aa:	4820      	ldr	r0, [pc, #128]	; (800472c <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 80046ac:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 80046ae:	3301      	adds	r3, #1
		if (netup)
 80046b0:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 80046b2:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 80046b4:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 80046b6:	b110      	cbz	r0, 80046be <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 80046b8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80046ba:	3301      	adds	r3, #1
 80046bc:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 80046be:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	b9c3      	cbnz	r3, 80046f6 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 80046c4:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 80046c6:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 80046c8:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 80046ca:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 80046ce:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	3301      	adds	r3, #1
 80046d6:	6013      	str	r3, [r2, #0]
		return;
 80046d8:	4770      	bx	lr
		HAL_IncTick();
 80046da:	f004 be07 	b.w	80092ec <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 80046de:	f7fc b8d5 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80046e4:	4b15      	ldr	r3, [pc, #84]	; (800473c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80046e6:	4816      	ldr	r0, [pc, #88]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80046e8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	f021 bff2 	b.w	80266d4 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 80046f0:	4814      	ldr	r0, [pc, #80]	; (8004744 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80046f2:	f022 b88b 	b.w	802680c <puts>
			statuspkt.gpsuptime++;
 80046f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80046f8:	3301      	adds	r3, #1
 80046fa:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 80046fc:	f001 f94c 	bl	8005998 <calcepoch32>
				epochvalid = 1;
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004702:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8004704:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8004708:	701a      	strb	r2, [r3, #0]
}
 800470a:	bd10      	pop	{r4, pc}
 800470c:	40002000 	.word	0x40002000
 8004710:	40000c00 	.word	0x40000c00
 8004714:	40000400 	.word	0x40000400
 8004718:	40001000 	.word	0x40001000
 800471c:	40001800 	.word	0x40001800
 8004720:	0802c76c 	.word	0x0802c76c
 8004724:	20002e10 	.word	0x20002e10
 8004728:	2000303c 	.word	0x2000303c
 800472c:	20000782 	.word	0x20000782
 8004730:	200034a8 	.word	0x200034a8
 8004734:	200034a0 	.word	0x200034a0
 8004738:	20002e04 	.word	0x20002e04
 800473c:	200007a4 	.word	0x200007a4
 8004740:	0802c72c 	.word	0x0802c72c
 8004744:	0802c750 	.word	0x0802c750

08004748 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8004748:	4c02      	ldr	r4, [pc, #8]	; (8004754 <Error_Handler+0xc>)
void Error_Handler(void) {
 800474a:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 800474c:	4620      	mov	r0, r4
 800474e:	f022 f85d 	bl	802680c <puts>
	while (1) {
 8004752:	e7fb      	b.n	800474c <Error_Handler+0x4>
 8004754:	0802c794 	.word	0x0802c794

08004758 <SystemClock_Config>:
void SystemClock_Config(void) {
 8004758:	b530      	push	{r4, r5, lr}
 800475a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800475c:	2234      	movs	r2, #52	; 0x34
 800475e:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004760:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004762:	a807      	add	r0, sp, #28
 8004764:	f021 f818 	bl	8025798 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004768:	2300      	movs	r3, #0
 800476a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800476e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004772:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 8004774:	f009 ff5c 	bl	800e630 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 8004778:	4a20      	ldr	r2, [pc, #128]	; (80047fc <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800477a:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800477c:	4b20      	ldr	r3, [pc, #128]	; (8004800 <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 800477e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004780:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004784:	6411      	str	r1, [r2, #64]	; 0x40
 8004786:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004788:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800478c:	9200      	str	r2, [sp, #0]
 800478e:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004796:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8004798:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800479a:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800479c:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800479e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047a2:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 80047a4:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a6:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ac:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047ae:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80047b2:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80047b8:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 80047ba:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047bc:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 80047be:	23d8      	movs	r3, #216	; 0xd8
 80047c0:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80047c4:	2306      	movs	r3, #6
 80047c6:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80047c8:	f009 ff74 	bl	800e6b4 <HAL_RCC_OscConfig>
 80047cc:	b9a0      	cbnz	r0, 80047f8 <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80047ce:	f009 ff37 	bl	800e640 <HAL_PWREx_EnableOverDrive>
 80047d2:	4603      	mov	r3, r0
 80047d4:	b980      	cbnz	r0, 80047f8 <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047d6:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047d8:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80047dc:	a802      	add	r0, sp, #8
 80047de:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047e0:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047e8:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047ec:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80047ee:	f00a fa37 	bl	800ec60 <HAL_RCC_ClockConfig>
 80047f2:	b908      	cbnz	r0, 80047f8 <SystemClock_Config+0xa0>
}
 80047f4:	b015      	add	sp, #84	; 0x54
 80047f6:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80047f8:	f7ff ffa6 	bl	8004748 <Error_Handler>
 80047fc:	40023800 	.word	0x40023800
 8004800:	40007000 	.word	0x40007000

08004804 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 8004804:	b510      	push	{r4, lr}
 8004806:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8004808:	228c      	movs	r2, #140	; 0x8c
 800480a:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800480c:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800480e:	a801      	add	r0, sp, #4
 8004810:	f020 ffc2 	bl	8025798 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004814:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004816:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800481a:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800481c:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800481e:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8004820:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004824:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8004826:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8004828:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800482a:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800482c:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800482e:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8004832:	f00a fb7b 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 8004836:	b908      	cbnz	r0, 800483c <PeriphCommonClock_Config+0x38>
}
 8004838:	b024      	add	sp, #144	; 0x90
 800483a:	bd10      	pop	{r4, pc}
		Error_Handler();
 800483c:	f7ff ff84 	bl	8004748 <Error_Handler>

08004840 <main>:
int main(void) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b0dc      	sub	sp, #368	; 0x170
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{

	__ASM volatile ("dsb 0xF":::"memory");
 8004844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004848:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800484c:	4bc2      	ldr	r3, [pc, #776]	; (8004b58 <main+0x318>)
 800484e:	2400      	movs	r4, #0
 8004850:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 8004854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004858:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004862:	615a      	str	r2, [r3, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8004864:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004868:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800486c:	4dbb      	ldr	r5, [pc, #748]	; (8004b5c <main+0x31c>)
	HAL_Init();
 800486e:	f004 fd2b 	bl	80092c8 <HAL_Init>
	SystemClock_Config();
 8004872:	f7ff ff71 	bl	8004758 <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004876:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 8004878:	f7ff ffc4 	bl	8004804 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800487c:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800487e:	4622      	mov	r2, r4
 8004880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004884:	48b6      	ldr	r0, [pc, #728]	; (8004b60 <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004886:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800488a:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800488c:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 8004890:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004894:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 8004898:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800489c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800489e:	f043 0310 	orr.w	r3, r3, #16
 80048a2:	632b      	str	r3, [r5, #48]	; 0x30
 80048a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	9303      	str	r3, [sp, #12]
 80048ac:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80048ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	632b      	str	r3, [r5, #48]	; 0x30
 80048b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80048c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048c2:	f043 0320 	orr.w	r3, r3, #32
 80048c6:	632b      	str	r3, [r5, #48]	; 0x30
 80048c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	9305      	str	r3, [sp, #20]
 80048d0:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80048d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d8:	632b      	str	r3, [r5, #48]	; 0x30
 80048da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	9306      	str	r3, [sp, #24]
 80048e2:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80048e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	632b      	str	r3, [r5, #48]	; 0x30
 80048ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	9307      	str	r3, [sp, #28]
 80048f4:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80048f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	632b      	str	r3, [r5, #48]	; 0x30
 80048fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	9308      	str	r3, [sp, #32]
 8004906:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8004908:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800490a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490e:	632b      	str	r3, [r5, #48]	; 0x30
 8004910:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	9309      	str	r3, [sp, #36]	; 0x24
 8004918:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800491a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800491c:	f043 0308 	orr.w	r3, r3, #8
 8004920:	632b      	str	r3, [r5, #48]	; 0x30
 8004922:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	930a      	str	r3, [sp, #40]	; 0x28
 800492a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800492c:	f008 fa6c 	bl	800ce08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8004930:	4622      	mov	r2, r4
 8004932:	f644 0181 	movw	r1, #18561	; 0x4881
 8004936:	488b      	ldr	r0, [pc, #556]	; (8004b64 <main+0x324>)
 8004938:	f008 fa66 	bl	800ce08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 800493c:	4622      	mov	r2, r4
 800493e:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 8004942:	4889      	ldr	r0, [pc, #548]	; (8004b68 <main+0x328>)
 8004944:	f008 fa60 	bl	800ce08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 8004948:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800494c:	4887      	ldr	r0, [pc, #540]	; (8004b6c <main+0x32c>)
 800494e:	2201      	movs	r2, #1
 8004950:	f008 fa5a 	bl	800ce08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004954:	4622      	mov	r2, r4
 8004956:	2144      	movs	r1, #68	; 0x44
 8004958:	4885      	ldr	r0, [pc, #532]	; (8004b70 <main+0x330>)
 800495a:	f008 fa55 	bl	800ce08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 800495e:	4622      	mov	r2, r4
 8004960:	2102      	movs	r1, #2
 8004962:	4882      	ldr	r0, [pc, #520]	; (8004b6c <main+0x32c>)
 8004964:	f008 fa50 	bl	800ce08 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8004968:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800496c:	a955      	add	r1, sp, #340	; 0x154
 800496e:	487e      	ldr	r0, [pc, #504]	; (8004b68 <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8004970:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004972:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004976:	f007 ff9b 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800497a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800497e:	a955      	add	r1, sp, #340	; 0x154
 8004980:	487c      	ldr	r0, [pc, #496]	; (8004b74 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004982:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004984:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800498a:	f007 ff91 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 800498e:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004992:	a955      	add	r1, sp, #340	; 0x154
 8004994:	4872      	ldr	r0, [pc, #456]	; (8004b60 <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8004996:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800499c:	f007 ff88 	bl	800c8b0 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 80049a0:	a955      	add	r1, sp, #340	; 0x154
 80049a2:	486f      	ldr	r0, [pc, #444]	; (8004b60 <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 80049a4:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049a8:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ac:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 80049b0:	f007 ff7e 	bl	800c8b0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049b4:	a955      	add	r1, sp, #340	; 0x154
 80049b6:	486f      	ldr	r0, [pc, #444]	; (8004b74 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049b8:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049ba:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049be:	f007 ff77 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80049c2:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c4:	a955      	add	r1, sp, #340	; 0x154
 80049c6:	486c      	ldr	r0, [pc, #432]	; (8004b78 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80049c8:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ca:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ce:	f007 ff6f 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80049d2:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d6:	a955      	add	r1, sp, #340	; 0x154
 80049d8:	4862      	ldr	r0, [pc, #392]	; (8004b64 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80049da:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049dc:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e2:	f007 ff65 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80049e6:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e8:	a955      	add	r1, sp, #340	; 0x154
 80049ea:	485e      	ldr	r0, [pc, #376]	; (8004b64 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80049ec:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f2:	f007 ff5d 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 80049f6:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049fa:	a955      	add	r1, sp, #340	; 0x154
 80049fc:	485c      	ldr	r0, [pc, #368]	; (8004b70 <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 80049fe:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a04:	f007 ff54 	bl	800c8b0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a08:	a955      	add	r1, sp, #340	; 0x154
 8004a0a:	4857      	ldr	r0, [pc, #348]	; (8004b68 <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0c:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a0e:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a12:	f007 ff4d 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004a16:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a1a:	a955      	add	r1, sp, #340	; 0x154
 8004a1c:	4852      	ldr	r0, [pc, #328]	; (8004b68 <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004a1e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004a20:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a24:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004a26:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a2e:	f007 ff3f 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004a32:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a36:	a955      	add	r1, sp, #340	; 0x154
 8004a38:	484c      	ldr	r0, [pc, #304]	; (8004b6c <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004a3a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a40:	f007 ff36 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004a44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a48:	a955      	add	r1, sp, #340	; 0x154
 8004a4a:	4848      	ldr	r0, [pc, #288]	; (8004b6c <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004a4c:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a4e:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a54:	f007 ff2c 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004a58:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a5a:	a955      	add	r1, sp, #340	; 0x154
 8004a5c:	4844      	ldr	r0, [pc, #272]	; (8004b70 <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004a5e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a60:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a66:	f007 ff23 	bl	800c8b0 <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004a6a:	a955      	add	r1, sp, #340	; 0x154
 8004a6c:	4840      	ldr	r0, [pc, #256]	; (8004b70 <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004a6e:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004a76:	f007 ff1b 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a7e:	a955      	add	r1, sp, #340	; 0x154
 8004a80:	483c      	ldr	r0, [pc, #240]	; (8004b74 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004a82:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a88:	f007 ff12 	bl	800c8b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a90:	a955      	add	r1, sp, #340	; 0x154
 8004a92:	4839      	ldr	r0, [pc, #228]	; (8004b78 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a94:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a96:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004a98:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9c:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa0:	f007 ff06 	bl	800c8b0 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004aa4:	a955      	add	r1, sp, #340	; 0x154
 8004aa6:	4831      	ldr	r0, [pc, #196]	; (8004b6c <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aa8:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aac:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004ab0:	f007 fefe 	bl	800c8b0 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004ab4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004ab6:	4639      	mov	r1, r7
 8004ab8:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004abe:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004ac0:	632b      	str	r3, [r5, #48]	; 0x30
 8004ac2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004acc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ad2:	632b      	str	r3, [r5, #48]	; 0x30
 8004ad4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 8004ad6:	4d29      	ldr	r5, [pc, #164]	; (8004b7c <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004adc:	9302      	str	r3, [sp, #8]
 8004ade:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004ae0:	f005 f868 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004ae4:	200b      	movs	r0, #11
 8004ae6:	f005 f8af 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8004aea:	4622      	mov	r2, r4
 8004aec:	2106      	movs	r1, #6
 8004aee:	4650      	mov	r0, sl
 8004af0:	f005 f860 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004af4:	4650      	mov	r0, sl
 8004af6:	f005 f8a7 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8004afa:	4622      	mov	r2, r4
 8004afc:	2106      	movs	r1, #6
 8004afe:	2010      	movs	r0, #16
 8004b00:	f005 f858 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004b04:	2010      	movs	r0, #16
 8004b06:	f005 f89f 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	2011      	movs	r0, #17
 8004b10:	f005 f850 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004b14:	2011      	movs	r0, #17
 8004b16:	f005 f897 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	4639      	mov	r1, r7
 8004b1e:	202f      	movs	r0, #47	; 0x2f
 8004b20:	f005 f848 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004b24:	202f      	movs	r0, #47	; 0x2f
 8004b26:	f005 f88f 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	2106      	movs	r1, #6
 8004b2e:	2039      	movs	r0, #57	; 0x39
 8004b30:	f005 f840 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004b34:	2039      	movs	r0, #57	; 0x39
 8004b36:	f005 f887 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	203c      	movs	r0, #60	; 0x3c
 8004b40:	f005 f838 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004b44:	203c      	movs	r0, #60	; 0x3c
 8004b46:	f005 f87f 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	4639      	mov	r1, r7
 8004b4e:	2045      	movs	r0, #69	; 0x45
 8004b50:	f005 f830 	bl	8009bb4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004b54:	2045      	movs	r0, #69	; 0x45
 8004b56:	e013      	b.n	8004b80 <main+0x340>
 8004b58:	e000ed00 	.word	0xe000ed00
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40021400 	.word	0x40021400
 8004b64:	40020400 	.word	0x40020400
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40020c00 	.word	0x40020c00
 8004b70:	40021800 	.word	0x40021800
 8004b74:	40020800 	.word	0x40020800
 8004b78:	40020000 	.word	0x40020000
 8004b7c:	40004400 	.word	0x40004400
 8004b80:	f005 f862 	bl	8009c48 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8004b84:	48bd      	ldr	r0, [pc, #756]	; (8004e7c <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 8004b86:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004b8e:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004b92:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 8004b94:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004b98:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004b9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b9e:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ba2:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004ba6:	f00f fce1 	bl	801456c <HAL_RS485Ex_Init>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	f040 844a 	bne.w	8005444 <main+0xc04>
	hadc1.Instance = ADC1;
 8004bb0:	4cb3      	ldr	r4, [pc, #716]	; (8004e80 <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004bb2:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8004bb6:	4bb3      	ldr	r3, [pc, #716]	; (8004e84 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8004bb8:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004bba:	9045      	str	r0, [sp, #276]	; 0x114
 8004bbc:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004bbe:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004bc0:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004bc2:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004bc6:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004bc8:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004bca:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8004bcc:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 8004bce:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8004bd0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004bd4:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004bd8:	4bab      	ldr	r3, [pc, #684]	; (8004e88 <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8004bda:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004bde:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004be2:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004be4:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004be6:	f004 fba5 	bl	8009334 <HAL_ADC_Init>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	f040 842a 	bne.w	8005444 <main+0xc04>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8004bf4:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004bf6:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8004bf8:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004bfa:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f004 ff58 	bl	8009ab4 <HAL_ADCEx_MultiModeConfigChannel>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	f040 841d 	bne.w	8005444 <main+0xc04>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004c0a:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004c0c:	a945      	add	r1, sp, #276	; 0x114
 8004c0e:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004c10:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004c14:	f004 fe5a 	bl	80098cc <HAL_ADC_ConfigChannel>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	f040 8413 	bne.w	8005444 <main+0xc04>
	hadc2.Instance = ADC2;
 8004c1e:	4c9b      	ldr	r4, [pc, #620]	; (8004e8c <main+0x64c>)
 8004c20:	4b9b      	ldr	r3, [pc, #620]	; (8004e90 <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004c22:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004c24:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c28:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8004c2a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004c2e:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8004c30:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8004c32:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8004c34:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004c36:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 8004c3a:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004c3e:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8004c42:	4620      	mov	r0, r4
 8004c44:	f004 fb76 	bl	8009334 <HAL_ADC_Init>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	f040 83fb 	bne.w	8005444 <main+0xc04>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004c4e:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004c50:	a941      	add	r1, sp, #260	; 0x104
 8004c52:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004c54:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004c58:	f004 fe38 	bl	80098cc <HAL_ADC_ConfigChannel>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	f040 83f1 	bne.w	8005444 <main+0xc04>
	hadc3.Instance = ADC3;
 8004c62:	4c8c      	ldr	r4, [pc, #560]	; (8004e94 <main+0x654>)
 8004c64:	4b8c      	ldr	r3, [pc, #560]	; (8004e98 <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004c66:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004c68:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c6c:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8004c6e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004c72:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8004c74:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8004c76:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8004c78:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004c7a:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8004c7e:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004c82:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8004c86:	4620      	mov	r0, r4
 8004c88:	f004 fb54 	bl	8009334 <HAL_ADC_Init>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	f040 83d9 	bne.w	8005444 <main+0xc04>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004c92:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004c94:	a93d      	add	r1, sp, #244	; 0xf4
 8004c96:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004c98:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004c9c:	f004 fe16 	bl	80098cc <HAL_ADC_ConfigChannel>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	f040 83cf 	bne.w	8005444 <main+0xc04>
	hrng.Instance = RNG;
 8004ca6:	487d      	ldr	r0, [pc, #500]	; (8004e9c <main+0x65c>)
 8004ca8:	4b7d      	ldr	r3, [pc, #500]	; (8004ea0 <main+0x660>)
 8004caa:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8004cac:	f00a fe1e 	bl	800f8ec <HAL_RNG_Init>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	f040 83c7 	bne.w	8005444 <main+0xc04>
	htim6.Instance = TIM6;
 8004cb6:	4b7b      	ldr	r3, [pc, #492]	; (8004ea4 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 8004cb8:	f642 2230 	movw	r2, #10800	; 0x2a30
 8004cbc:	497a      	ldr	r1, [pc, #488]	; (8004ea8 <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004cbe:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cc0:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cc2:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 8004cc6:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 8004cca:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004cce:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004cd2:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 8004cd4:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004cd6:	f00c fbf9 	bl	80114cc <HAL_TIM_Base_Init>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	f040 83b2 	bne.w	8005444 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004ce0:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8004ce2:	a91f      	add	r1, sp, #124	; 0x7c
 8004ce4:	486f      	ldr	r0, [pc, #444]	; (8004ea4 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004ce6:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8004cec:	f00e f858 	bl	8012da0 <HAL_TIMEx_MasterConfigSynchronization>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	f040 83a7 	bne.w	8005444 <main+0xc04>
	htim3.Instance = TIM3;
 8004cf6:	4c6d      	ldr	r4, [pc, #436]	; (8004eac <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 8004cf8:	f642 2330 	movw	r3, #10800	; 0x2a30
 8004cfc:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8004ed0 <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d00:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004d02:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004d04:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004d06:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d08:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d0a:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d0c:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d0e:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 8004d10:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 8004d14:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004d18:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8004d1c:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8004d20:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004d24:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d28:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004d2c:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 8004d2e:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004d30:	f00c fbcc 	bl	80114cc <HAL_TIM_Base_Init>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	f040 8385 	bne.w	8005444 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d3a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004d3e:	a939      	add	r1, sp, #228	; 0xe4
 8004d40:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d42:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004d44:	f00b fe58 	bl	80109f8 <HAL_TIM_ConfigClockSource>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	f040 837b 	bne.w	8005444 <main+0xc04>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f00c fd58 	bl	8011804 <HAL_TIM_PWM_Init>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	f040 8375 	bne.w	8005444 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d5a:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004d5c:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d5e:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004d60:	4620      	mov	r0, r4
 8004d62:	f00e f81d 	bl	8012da0 <HAL_TIMEx_MasterConfigSynchronization>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	f040 836c 	bne.w	8005444 <main+0xc04>
	sConfigOC.Pulse = 10;
 8004d6c:	230a      	movs	r3, #10
 8004d6e:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d72:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004d74:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d76:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004d78:	a955      	add	r1, sp, #340	; 0x154
 8004d7a:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 8004d7c:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004d80:	f00d f8be 	bl	8011f00 <HAL_TIM_PWM_ConfigChannel>
 8004d84:	4605      	mov	r5, r0
 8004d86:	2800      	cmp	r0, #0
 8004d88:	f040 835c 	bne.w	8005444 <main+0xc04>
	HAL_TIM_MspPostInit(&htim3);
 8004d8c:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8004d8e:	4c48      	ldr	r4, [pc, #288]	; (8004eb0 <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 8004d90:	f002 fe74 	bl	8007a7c <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 8004d94:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004d96:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d98:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 8004d9a:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 8004d9c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004da0:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 8004da2:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004da4:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004da8:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004dac:	f00c fb8e 	bl	80114cc <HAL_TIM_Base_Init>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f040 8347 	bne.w	8005444 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004db6:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004db8:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8004dba:	a919      	add	r1, sp, #100	; 0x64
 8004dbc:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004dbe:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8004dc0:	f00d ffee 	bl	8012da0 <HAL_TIMEx_MasterConfigSynchronization>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	f040 833d 	bne.w	8005444 <main+0xc04>
	htim1.Instance = TIM1;
 8004dca:	4c3b      	ldr	r4, [pc, #236]	; (8004eb8 <main+0x678>)
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dce:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 8004dd0:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 8004dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004dd6:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 8004dd8:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004dda:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 8004dde:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de2:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 8004de6:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004dea:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8004dee:	4620      	mov	r0, r4
 8004df0:	f00c fb6c 	bl	80114cc <HAL_TIM_Base_Init>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	f040 8325 	bne.w	8005444 <main+0xc04>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004dfa:	a935      	add	r1, sp, #212	; 0xd4
 8004dfc:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dfe:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004e00:	f00b fdfa 	bl	80109f8 <HAL_TIM_ConfigClockSource>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	f040 831d 	bne.w	8005444 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e0a:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004e0c:	a916      	add	r1, sp, #88	; 0x58
 8004e0e:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e10:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004e12:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004e16:	f00d ffc3 	bl	8012da0 <HAL_TIMEx_MasterConfigSynchronization>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f040 8311 	bne.w	8005444 <main+0xc04>
	hcrc.Instance = CRC;
 8004e22:	4827      	ldr	r0, [pc, #156]	; (8004ec0 <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004e24:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004e26:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004e28:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004e2a:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 8004e2e:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <main+0x684>)
 8004e30:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8004e32:	f004 ff37 	bl	8009ca4 <HAL_CRC_Init>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f040 8304 	bne.w	8005444 <main+0xc04>
	htim2.Instance = TIM2;
 8004e3c:	4c22      	ldr	r4, [pc, #136]	; (8004ec8 <main+0x688>)
 8004e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004e42:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004e44:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 8004e46:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 8004e48:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004e4a:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004e4c:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004e4e:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004e50:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e52:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e54:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e56:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 8004e58:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004e5a:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004e5e:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8004e62:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004e66:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e6a:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e6e:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004e72:	4620      	mov	r0, r4
 8004e74:	f00c fb2a 	bl	80114cc <HAL_TIM_Base_Init>
 8004e78:	e02c      	b.n	8004ed4 <main+0x694>
 8004e7a:	bf00      	nop
 8004e7c:	20002a38 	.word	0x20002a38
 8004e80:	20002198 	.word	0x20002198
 8004e84:	40012000 	.word	0x40012000
 8004e88:	0f000001 	.word	0x0f000001
 8004e8c:	200021e0 	.word	0x200021e0
 8004e90:	40012100 	.word	0x40012100
 8004e94:	20002228 	.word	0x20002228
 8004e98:	40012200 	.word	0x40012200
 8004e9c:	2000269c 	.word	0x2000269c
 8004ea0:	50060800 	.word	0x50060800
 8004ea4:	200029a0 	.word	0x200029a0
 8004ea8:	40001000 	.word	0x40001000
 8004eac:	200028bc 	.word	0x200028bc
 8004eb0:	200029ec 	.word	0x200029ec
 8004eb4:	40001400 	.word	0x40001400
 8004eb8:	200027d8 	.word	0x200027d8
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	20002270 	.word	0x20002270
 8004ec4:	40023000 	.word	0x40023000
 8004ec8:	20002870 	.word	0x20002870
 8004ecc:	ee6b2800 	.word	0xee6b2800
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	f040 82b5 	bne.w	8005444 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004ede:	a92d      	add	r1, sp, #180	; 0xb4
 8004ee0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ee2:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004ee4:	f00b fd88 	bl	80109f8 <HAL_TIM_ConfigClockSource>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	f040 82ab 	bne.w	8005444 <main+0xc04>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f00c fd56 	bl	80119a0 <HAL_TIM_IC_Init>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	f040 82a5 	bne.w	8005444 <main+0xc04>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004efa:	2704      	movs	r7, #4
 8004efc:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004efe:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004f00:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8004f02:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004f04:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004f06:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004f0a:	f00c f84f 	bl	8010fac <HAL_TIM_SlaveConfigSynchro>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	f040 8298 	bne.w	8005444 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f14:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8004f16:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f18:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f00d ff40 	bl	8012da0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f20:	4602      	mov	r2, r0
 8004f22:	2800      	cmp	r0, #0
 8004f24:	f040 828e 	bne.w	8005444 <main+0xc04>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004f28:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004f2a:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 8004f2e:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004f32:	4620      	mov	r0, r4
 8004f34:	f00d fa04 	bl	8012340 <HAL_TIM_IC_ConfigChannel>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	f040 8283 	bne.w	8005444 <main+0xc04>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004f3e:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8004f40:	463a      	mov	r2, r7
 8004f42:	a931      	add	r1, sp, #196	; 0xc4
 8004f44:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004f46:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8004f48:	f00d f9fa 	bl	8012340 <HAL_TIM_IC_ConfigChannel>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	f040 8279 	bne.w	8005444 <main+0xc04>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8004f52:	a931      	add	r1, sp, #196	; 0xc4
 8004f54:	4620      	mov	r0, r4
 8004f56:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004f58:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8004f5a:	f00d f9f1 	bl	8012340 <HAL_TIM_IC_ConfigChannel>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	f040 8270 	bne.w	8005444 <main+0xc04>
	huart6.Instance = USART6;
 8004f64:	48c1      	ldr	r0, [pc, #772]	; (800526c <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004f66:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 8004f68:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 8004f6c:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 8004f6e:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f70:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8004f72:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8004f74:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f78:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 8004f7c:	4bbc      	ldr	r3, [pc, #752]	; (8005270 <main+0xa30>)
 8004f7e:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004f82:	2310      	movs	r3, #16
 8004f84:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f8a:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8004f8c:	f00f f8d6 	bl	801413c <HAL_UART_Init>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	f040 8257 	bne.w	8005444 <main+0xc04>
	hdac.Instance = DAC;
 8004f96:	4cb7      	ldr	r4, [pc, #732]	; (8005274 <main+0xa34>)
 8004f98:	4bb7      	ldr	r3, [pc, #732]	; (8005278 <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8004f9a:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8004f9e:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 8004fa0:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8004fa2:	f004 ff3b 	bl	8009e1c <HAL_DAC_Init>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f040 824b 	bne.w	8005444 <main+0xc04>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8004fae:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004fb4:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8004fb6:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8004fb8:	f005 f88c 	bl	800a0d4 <HAL_DAC_ConfigChannel>
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	f040 8240 	bne.w	8005444 <main+0xc04>
	MX_FATFS_Init();
 8004fc4:	f010 f92e 	bl	8015224 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 8004fc8:	4cac      	ldr	r4, [pc, #688]	; (800527c <main+0xa3c>)
 8004fca:	4bad      	ldr	r3, [pc, #692]	; (8005280 <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004fcc:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 8004fce:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 8004fd0:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 8004fd2:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004fd6:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 8004fd8:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 8004fdc:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fde:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 8004fe0:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004fe4:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fe8:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004fea:	f008 f941 	bl	800d270 <HAL_I2C_Init>
 8004fee:	4601      	mov	r1, r0
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	f040 8227 	bne.w	8005444 <main+0xc04>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f008 fc92 	bl	800d920 <HAL_I2CEx_ConfigAnalogFilter>
 8004ffc:	4601      	mov	r1, r0
 8004ffe:	2800      	cmp	r0, #0
 8005000:	f040 8220 	bne.w	8005444 <main+0xc04>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8005004:	4620      	mov	r0, r4
 8005006:	f008 fcdd 	bl	800d9c4 <HAL_I2CEx_ConfigDigitalFilter>
 800500a:	4603      	mov	r3, r0
 800500c:	2800      	cmp	r0, #0
 800500e:	f040 8219 	bne.w	8005444 <main+0xc04>
	huart4.Instance = UART4;
 8005012:	489c      	ldr	r0, [pc, #624]	; (8005284 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 8005014:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8005018:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800501c:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800501e:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8005020:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8005024:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005028:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 800502c:	4b96      	ldr	r3, [pc, #600]	; (8005288 <main+0xa48>)
 800502e:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8005032:	f00f f883 	bl	801413c <HAL_UART_Init>
 8005036:	4603      	mov	r3, r0
 8005038:	2800      	cmp	r0, #0
 800503a:	f040 8203 	bne.w	8005444 <main+0xc04>
	huart5.Instance = UART5;
 800503e:	4893      	ldr	r0, [pc, #588]	; (800528c <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005040:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 8005044:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005048:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800504c:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005050:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 8005052:	4b8f      	ldr	r3, [pc, #572]	; (8005290 <main+0xa50>)
 8005054:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8005056:	f00f f871 	bl	801413c <HAL_UART_Init>
 800505a:	4602      	mov	r2, r0
 800505c:	2800      	cmp	r0, #0
 800505e:	f040 81f1 	bne.w	8005444 <main+0xc04>
	huart3.Instance = USART3;
 8005062:	488c      	ldr	r0, [pc, #560]	; (8005294 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8005064:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 8005066:	4b8c      	ldr	r3, [pc, #560]	; (8005298 <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 8005068:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 800506a:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800506c:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 800506e:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8005070:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005074:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005078:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800507c:	f00f f90c 	bl	8014298 <HAL_MultiProcessor_Init>
 8005080:	4603      	mov	r3, r0
 8005082:	2800      	cmp	r0, #0
 8005084:	f040 81de 	bne.w	8005444 <main+0xc04>
	hspi4.Instance = SPI4;
 8005088:	4884      	ldr	r0, [pc, #528]	; (800529c <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800508a:	4a85      	ldr	r2, [pc, #532]	; (80052a0 <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800508c:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800508e:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005092:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005096:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800509a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800509e:	f44f 7382 	mov.w	r3, #260	; 0x104
 80050a2:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80050a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050aa:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 80050ac:	2307      	movs	r3, #7
 80050ae:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80050b0:	2308      	movs	r3, #8
 80050b2:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 80050b4:	f00a fd50 	bl	800fb58 <HAL_SPI_Init>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f040 81c3 	bne.w	8005444 <main+0xc04>
	hspi3.Instance = SPI3;
 80050be:	4879      	ldr	r0, [pc, #484]	; (80052a4 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 80050c0:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80050c2:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c6:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80050c8:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 80050ca:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80050cc:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 80050ce:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80050d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80050d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80050d8:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80050dc:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 80050e0:	4b71      	ldr	r3, [pc, #452]	; (80052a8 <main+0xa68>)
 80050e2:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80050e4:	f00a fd38 	bl	800fb58 <HAL_SPI_Init>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2800      	cmp	r0, #0
 80050ec:	f040 81aa 	bne.w	8005444 <main+0xc04>
	hspi2.Instance = SPI2;
 80050f0:	486e      	ldr	r0, [pc, #440]	; (80052ac <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80050f2:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80052dc <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80050f6:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f8:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80050fa:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80050fc:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 80050fe:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005100:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005104:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8005108:	f44f 7382 	mov.w	r3, #260	; 0x104
 800510c:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8005110:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005114:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005116:	2338      	movs	r3, #56	; 0x38
 8005118:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800511a:	2308      	movs	r3, #8
 800511c:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800511e:	f00a fd1b 	bl	800fb58 <HAL_SPI_Init>
 8005122:	2800      	cmp	r0, #0
 8005124:	f040 818e 	bne.w	8005444 <main+0xc04>
	hi2c4.Instance = I2C4;
 8005128:	4c61      	ldr	r4, [pc, #388]	; (80052b0 <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800512a:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 800512c:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <main+0xa74>)
 800512e:	4f62      	ldr	r7, [pc, #392]	; (80052b8 <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 8005130:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005132:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005134:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 8005136:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800513a:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 800513e:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 8005140:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8005144:	f008 f894 	bl	800d270 <HAL_I2C_Init>
 8005148:	4601      	mov	r1, r0
 800514a:	2800      	cmp	r0, #0
 800514c:	f040 817a 	bne.w	8005444 <main+0xc04>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8005150:	4620      	mov	r0, r4
 8005152:	f008 fbe5 	bl	800d920 <HAL_I2CEx_ConfigAnalogFilter>
 8005156:	4601      	mov	r1, r0
 8005158:	2800      	cmp	r0, #0
 800515a:	f040 8173 	bne.w	8005444 <main+0xc04>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 800515e:	4620      	mov	r0, r4
 8005160:	f008 fc30 	bl	800d9c4 <HAL_I2CEx_ConfigDigitalFilter>
 8005164:	2800      	cmp	r0, #0
 8005166:	f040 816d 	bne.w	8005444 <main+0xc04>
	hi2c2.Instance = I2C2;
 800516a:	4c54      	ldr	r4, [pc, #336]	; (80052bc <main+0xa7c>)
 800516c:	4b54      	ldr	r3, [pc, #336]	; (80052c0 <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800516e:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 8005170:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 8005172:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 8005174:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 8005178:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800517c:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8005180:	4620      	mov	r0, r4
 8005182:	f008 f875 	bl	800d270 <HAL_I2C_Init>
 8005186:	4601      	mov	r1, r0
 8005188:	2800      	cmp	r0, #0
 800518a:	f040 815b 	bne.w	8005444 <main+0xc04>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800518e:	4620      	mov	r0, r4
 8005190:	f008 fbc6 	bl	800d920 <HAL_I2CEx_ConfigAnalogFilter>
 8005194:	4601      	mov	r1, r0
 8005196:	2800      	cmp	r0, #0
 8005198:	f040 8154 	bne.w	8005444 <main+0xc04>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 800519c:	4620      	mov	r0, r4
 800519e:	f008 fc11 	bl	800d9c4 <HAL_I2CEx_ConfigDigitalFilter>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f040 814e 	bne.w	8005444 <main+0xc04>
	htim4.Instance = TIM4;
 80051a8:	4c46      	ldr	r4, [pc, #280]	; (80052c4 <main+0xa84>)
 80051aa:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80051ac:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 80051ae:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 80051b0:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80051b4:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 80051b6:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051b8:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80051ba:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051bc:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80051be:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051c0:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80051c2:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80051c6:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 80051ca:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 80051ce:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051d2:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80051d6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80051da:	4620      	mov	r0, r4
 80051dc:	f00c f976 	bl	80114cc <HAL_TIM_Base_Init>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	f040 812f 	bne.w	8005444 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80051ea:	a929      	add	r1, sp, #164	; 0xa4
 80051ec:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051ee:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80051f0:	f00b fc02 	bl	80109f8 <HAL_TIM_ConfigClockSource>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	f040 8125 	bne.w	8005444 <main+0xc04>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 80051fa:	4620      	mov	r0, r4
 80051fc:	f00c fa34 	bl	8011668 <HAL_TIM_OC_Init>
 8005200:	2800      	cmp	r0, #0
 8005202:	f040 811f 	bne.w	8005444 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8005206:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005208:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800520a:	a910      	add	r1, sp, #64	; 0x40
 800520c:	482d      	ldr	r0, [pc, #180]	; (80052c4 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800520e:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8005210:	f00d fdc6 	bl	8012da0 <HAL_TIMEx_MasterConfigSynchronization>
 8005214:	2800      	cmp	r0, #0
 8005216:	f040 8115 	bne.w	8005444 <main+0xc04>
	sConfigOC.Pulse = 550;
 800521a:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800521e:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005220:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8005222:	2208      	movs	r2, #8
 8005224:	a94e      	add	r1, sp, #312	; 0x138
 8005226:	4827      	ldr	r0, [pc, #156]	; (80052c4 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8005228:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 800522a:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800522c:	f00c fcea 	bl	8011c04 <HAL_TIM_OC_ConfigChannel>
 8005230:	2800      	cmp	r0, #0
 8005232:	f040 8107 	bne.w	8005444 <main+0xc04>
	HAL_TIM_MspPostInit(&htim4);
 8005236:	4823      	ldr	r0, [pc, #140]	; (80052c4 <main+0xa84>)
 8005238:	f002 fc20 	bl	8007a7c <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 800523c:	4823      	ldr	r0, [pc, #140]	; (80052cc <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 800523e:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8005242:	4f23      	ldr	r7, [pc, #140]	; (80052d0 <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 8005244:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8005248:	2306      	movs	r3, #6
 800524a:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 800524e:	f008 fc09 	bl	800da64 <HAL_IWDG_Init>
 8005252:	4603      	mov	r3, r0
 8005254:	2800      	cmp	r0, #0
 8005256:	f040 80f5 	bne.w	8005444 <main+0xc04>
	htim14.Instance = TIM14;
 800525a:	481e      	ldr	r0, [pc, #120]	; (80052d4 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800525c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005260:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 8005262:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <main+0xa98>)
 8005264:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 8005266:	f642 2330 	movw	r3, #10800	; 0x2a30
 800526a:	e039      	b.n	80052e0 <main+0xaa0>
 800526c:	20002c48 	.word	0x20002c48
 8005270:	40011400 	.word	0x40011400
 8005274:	20002294 	.word	0x20002294
 8005278:	40007400 	.word	0x40007400
 800527c:	200025a8 	.word	0x200025a8
 8005280:	40005400 	.word	0x40005400
 8005284:	20002b40 	.word	0x20002b40
 8005288:	40004c00 	.word	0x40004c00
 800528c:	20002bc4 	.word	0x20002bc4
 8005290:	40005000 	.word	0x40005000
 8005294:	20002abc 	.word	0x20002abc
 8005298:	40004800 	.word	0x40004800
 800529c:	20002774 	.word	0x20002774
 80052a0:	40013400 	.word	0x40013400
 80052a4:	20002710 	.word	0x20002710
 80052a8:	40003c00 	.word	0x40003c00
 80052ac:	200026ac 	.word	0x200026ac
 80052b0:	20002640 	.word	0x20002640
 80052b4:	40006000 	.word	0x40006000
 80052b8:	20404768 	.word	0x20404768
 80052bc:	200025f4 	.word	0x200025f4
 80052c0:	40005800 	.word	0x40005800
 80052c4:	20002908 	.word	0x20002908
 80052c8:	40000800 	.word	0x40000800
 80052cc:	2000268c 	.word	0x2000268c
 80052d0:	40003000 	.word	0x40003000
 80052d4:	20002824 	.word	0x20002824
 80052d8:	40002000 	.word	0x40002000
 80052dc:	40003800 	.word	0x40003800
 80052e0:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 80052e6:	f00c f8f1 	bl	80114cc <HAL_TIM_Base_Init>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	f040 80aa 	bne.w	8005444 <main+0xc04>
	htim5.Instance = TIM5;
 80052f0:	4f55      	ldr	r7, [pc, #340]	; (8005448 <main+0xc08>)
	htim5.Init.Period = 4;
 80052f2:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 80052f4:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800547c <main+0xc3c>
	htim5.Init.Period = 4;
 80052f8:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 80052fc:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052fe:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005300:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005302:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 8005304:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005308:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 800530c:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005310:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8005314:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 8005316:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 800531a:	f00c f8d7 	bl	80114cc <HAL_TIM_Base_Init>
 800531e:	2800      	cmp	r0, #0
 8005320:	f040 8090 	bne.w	8005444 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005324:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8005328:	a925      	add	r1, sp, #148	; 0x94
 800532a:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800532c:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800532e:	f00b fb63 	bl	80109f8 <HAL_TIM_ConfigClockSource>
 8005332:	4603      	mov	r3, r0
 8005334:	2800      	cmp	r0, #0
 8005336:	f040 8085 	bne.w	8005444 <main+0xc04>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 800533a:	4638      	mov	r0, r7
 800533c:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800533e:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005340:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8005342:	f00d fd2d 	bl	8012da0 <HAL_TIMEx_MasterConfigSynchronization>
 8005346:	4603      	mov	r3, r0
 8005348:	2800      	cmp	r0, #0
 800534a:	d17b      	bne.n	8005444 <main+0xc04>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 800534c:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 8005350:	483e      	ldr	r0, [pc, #248]	; (800544c <main+0xc0c>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8005352:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 8005356:	493e      	ldr	r1, [pc, #248]	; (8005450 <main+0xc10>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8005358:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 800535c:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 800535e:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005362:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 8005364:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8005368:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800536c:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 8005370:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005374:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8005378:	f00e fee0 	bl	801413c <HAL_UART_Init>
 800537c:	4603      	mov	r3, r0
 800537e:	2800      	cmp	r0, #0
 8005380:	d160      	bne.n	8005444 <main+0xc04>
	huart7.Instance = UART7;
 8005382:	4834      	ldr	r0, [pc, #208]	; (8005454 <main+0xc14>)
	huart7.Init.BaudRate = 115200;
 8005384:	4a34      	ldr	r2, [pc, #208]	; (8005458 <main+0xc18>)
	huart7.Init.Parity = UART_PARITY_NONE;
 8005386:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005388:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800538a:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800538c:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 800538e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005392:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 8005396:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800539a:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 800539e:	230c      	movs	r3, #12
 80053a0:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 80053a2:	f00e fecb 	bl	801413c <HAL_UART_Init>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d14c      	bne.n	8005444 <main+0xc04>
	osMutexDef(myMutex01);
 80053aa:	2600      	movs	r6, #0
	MX_NVIC_Init();
 80053ac:	f7fe fba2 	bl	8003af4 <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80053b0:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 80053b2:	4c2a      	ldr	r4, [pc, #168]	; (800545c <main+0xc1c>)
	osMutexDef(myMutex01);
 80053b4:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80053b8:	f011 f936 	bl	8016628 <osMutexCreate>
 80053bc:	4b28      	ldr	r3, [pc, #160]	; (8005460 <main+0xc20>)
 80053be:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80053c0:	2101      	movs	r1, #1
 80053c2:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80053c4:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80053c8:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 80053ca:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80053ce:	f011 f987 	bl	80166e0 <osSemaphoreCreate>
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <main+0xc24>)
 80053d4:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80053d6:	2101      	movs	r1, #1
 80053d8:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 80053da:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80053dc:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80053de:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 80053e0:	4b21      	ldr	r3, [pc, #132]	; (8005468 <main+0xc28>)
 80053e2:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80053e4:	f011 f8fe 	bl	80165e4 <osTimerCreate>
 80053e8:	4b20      	ldr	r3, [pc, #128]	; (800546c <main+0xc2c>)
 80053ea:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 80053ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80053f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	f011 f9ec 	bl	80167d4 <osMessageCreate>
 80053fc:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <main+0xc30>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80053fe:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8005400:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8005402:	6018      	str	r0, [r3, #0]
	cycleleds();
 8005404:	f001 fa12 	bl	800682c <cycleleds>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8005408:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800540a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800540c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005410:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005414:	4631      	mov	r1, r6
 8005416:	a84e      	add	r0, sp, #312	; 0x138
 8005418:	f011 f8aa 	bl	8016570 <osThreadCreate>
 800541c:	4b15      	ldr	r3, [pc, #84]	; (8005474 <main+0xc34>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 800541e:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005420:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8005422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005426:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800542a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 800542e:	4631      	mov	r1, r6
 8005430:	a855      	add	r0, sp, #340	; 0x154
 8005432:	f011 f89d 	bl	8016570 <osThreadCreate>
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <main+0xc38>)
 8005438:	6018      	str	r0, [r3, #0]
	vTaskSuspend(LPTaskHandle);			// don't allow it to autostart
 800543a:	f012 fa57 	bl	80178ec <vTaskSuspend>
	osKernelStart();
 800543e:	f011 f889 	bl	8016554 <osKernelStart>
	while (1) {
 8005442:	e7fe      	b.n	8005442 <main+0xc02>
		Error_Handler();
 8005444:	f7ff f980 	bl	8004748 <Error_Handler>
 8005448:	20002954 	.word	0x20002954
 800544c:	20002d50 	.word	0x20002d50
 8005450:	40007c00 	.word	0x40007c00
 8005454:	20002ccc 	.word	0x20002ccc
 8005458:	40007800 	.word	0x40007800
 800545c:	0802a7f0 	.word	0x0802a7f0
 8005460:	20002de8 	.word	0x20002de8
 8005464:	20002e0c 	.word	0x20002e0c
 8005468:	08003b59 	.word	0x08003b59
 800546c:	20002df0 	.word	0x20002df0
 8005470:	20002dec 	.word	0x20002dec
 8005474:	20002190 	.word	0x20002190
 8005478:	20002180 	.word	0x20002180
 800547c:	40000c00 	.word	0x40000c00

08005480 <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 8005480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005484:	b087      	sub	sp, #28
	MX_USB_DEVICE_Init();
 8005486:	f01f fc6d 	bl	8024d64 <MX_USB_DEVICE_Init>
	MX_LWIP_Init();
 800548a:	f00f feef 	bl	801526c <MX_LWIP_Init>
	if ((i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 800548e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005492:	48bd      	ldr	r0, [pc, #756]	; (8005788 <StartDefaultTask+0x308>)
 8005494:	f007 fca6 	bl	800cde4 <HAL_GPIO_ReadPin>
 8005498:	2801      	cmp	r0, #1
 800549a:	f000 814c 	beq.w	8005736 <StartDefaultTask+0x2b6>
		stampboot();	// make sure this runing program is in the boot vector (debug can avoid it)
 800549e:	f7fb fbb7 	bl	8000c10 <stampboot>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 80054a2:	4dba      	ldr	r5, [pc, #744]	; (800578c <StartDefaultTask+0x30c>)
	getboardpcb();		// find our daughterboard
 80054a4:	f7ff f8c0 	bl	8004628 <getboardpcb>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 80054a8:	f8df 839c 	ldr.w	r8, [pc, #924]	; 8005848 <StartDefaultTask+0x3c8>
 80054ac:	2714      	movs	r7, #20
	printf("%s----------------------------------------------------------------------------\n", str);
 80054ae:	49b8      	ldr	r1, [pc, #736]	; (8005790 <StartDefaultTask+0x310>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 80054b0:	f242 7634 	movw	r6, #10036	; 0x2734
	printf("%s----------------------------------------------------------------------------\n", str);
 80054b4:	48b7      	ldr	r0, [pc, #732]	; (8005794 <StartDefaultTask+0x314>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 80054b6:	2400      	movs	r4, #0
	printf("%s----------------------------------------------------------------------------\n", str);
 80054b8:	f021 f90c 	bl	80266d4 <iprintf>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 80054bc:	f8d8 0000 	ldr.w	r0, [r8]
 80054c0:	f505 6184 	add.w	r1, r5, #1056	; 0x420
 80054c4:	c90e      	ldmia	r1, {r1, r2, r3}
 80054c6:	9003      	str	r0, [sp, #12]
 80054c8:	9400      	str	r4, [sp, #0]
 80054ca:	48b3      	ldr	r0, [pc, #716]	; (8005798 <StartDefaultTask+0x318>)
 80054cc:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80054d0:	f021 f900 	bl	80266d4 <iprintf>
	crc_rom();
 80054d4:	f7fe fb68 	bl	8003ba8 <crc_rom>
	printf("%s----------------------------------------------------------------------------\n", str);
 80054d8:	49b0      	ldr	r1, [pc, #704]	; (800579c <StartDefaultTask+0x31c>)
 80054da:	48ae      	ldr	r0, [pc, #696]	; (8005794 <StartDefaultTask+0x314>)
 80054dc:	f021 f8fa 	bl	80266d4 <iprintf>
	cycleleds();
 80054e0:	f001 f9a4 	bl	800682c <cycleleds>
	init_nextion();			// initilise the LCD display
 80054e4:	f7fe fa80 	bl	80039e8 <init_nextion>
	if (!(netif_is_link_up(&gnetif))) {
 80054e8:	4bad      	ldr	r3, [pc, #692]	; (80057a0 <StartDefaultTask+0x320>)
 80054ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ee:	075b      	lsls	r3, r3, #29
 80054f0:	d41e      	bmi.n	8005530 <StartDefaultTask+0xb0>
		printf("LAN interface appears disconnected\n\r");
 80054f2:	48ac      	ldr	r0, [pc, #688]	; (80057a4 <StartDefaultTask+0x324>)
 80054f4:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80054f6:	4dac      	ldr	r5, [pc, #688]	; (80057a8 <StartDefaultTask+0x328>)
		printf("LAN interface appears disconnected\n\r");
 80054f8:	f021 f8ec 	bl	80266d4 <iprintf>
			osDelay(50);
 80054fc:	2032      	movs	r0, #50	; 0x32
 80054fe:	f011 f869 	bl	80165d4 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8005502:	2201      	movs	r2, #1
 8005504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005508:	4628      	mov	r0, r5
 800550a:	f007 fc7d 	bl	800ce08 <HAL_GPIO_WritePin>
			osDelay(50);
 800550e:	2032      	movs	r0, #50	; 0x32
 8005510:	f011 f860 	bl	80165d4 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8005514:	2200      	movs	r2, #0
 8005516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800551a:	4628      	mov	r0, r5
 800551c:	f007 fc74 	bl	800ce08 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8005520:	3c01      	subs	r4, #1
 8005522:	d1eb      	bne.n	80054fc <StartDefaultTask+0x7c>
		printf("************* REBOOTING **************\n");
 8005524:	48a1      	ldr	r0, [pc, #644]	; (80057ac <StartDefaultTask+0x32c>)
 8005526:	f021 f971 	bl	802680c <puts>
		rebootme(0);
 800552a:	4620      	mov	r0, r4
 800552c:	f7fe fbdc 	bl	8003ce8 <rebootme>
	netif = netif_default;
 8005530:	4b9f      	ldr	r3, [pc, #636]	; (80057b0 <StartDefaultTask+0x330>)
 8005532:	f8df 9318 	ldr.w	r9, [pc, #792]	; 800584c <StartDefaultTask+0x3cc>
 8005536:	6818      	ldr	r0, [r3, #0]
	globalfreeze = 0;		// Allow UDP streaming
 8005538:	4b9e      	ldr	r3, [pc, #632]	; (80057b4 <StartDefaultTask+0x334>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 800553a:	499f      	ldr	r1, [pc, #636]	; (80057b8 <StartDefaultTask+0x338>)
	globalfreeze = 0;		// Allow UDP streaming
 800553c:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 800553e:	f8c9 0000 	str.w	r0, [r9]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8005542:	f016 fcd3 	bl	801beec <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8005546:	499d      	ldr	r1, [pc, #628]	; (80057bc <StartDefaultTask+0x33c>)
 8005548:	f8d9 0000 	ldr.w	r0, [r9]
 800554c:	f016 fc8a 	bl	801be64 <netif_set_status_callback>
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 8005550:	4b9b      	ldr	r3, [pc, #620]	; (80057c0 <StartDefaultTask+0x340>)
 8005552:	f64f 62ed 	movw	r2, #65261	; 0xfeed
	statuspkt.bconf |= (circuitboardpcb << 8);
 8005556:	f8d8 0000 	ldr.w	r0, [r8]
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 800555a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	statuspkt.adctrigoff = TRIG_THRES;
 800555e:	2264      	movs	r2, #100	; 0x64
	statuspkt.majorversion = MAJORVERSION;
 8005560:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8005564:	f883 7071 	strb.w	r7, [r3, #113]	; 0x71
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 8005568:	f8a3 6084 	strh.w	r6, [r3, #132]	; 0x84
	statuspkt.udppknum = 0;
 800556c:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 800556e:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8005570:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8005572:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8005574:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8005578:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 800557c:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 800557e:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 8005580:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8005584:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8005588:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800558c:	f041 0101 	orr.w	r1, r1, #1
 8005590:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 8005594:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8005598:	498a      	ldr	r1, [pc, #552]	; (80057c4 <StartDefaultTask+0x344>)
	statuspkt.bconf |= (circuitboardpcb << 8);
 800559a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800559e:	488a      	ldr	r0, [pc, #552]	; (80057c8 <StartDefaultTask+0x348>)
	statuspkt.bconf |= (circuitboardpcb << 8);
 80055a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80055a4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055a8:	b292      	uxth	r2, r2
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80055aa:	9201      	str	r2, [sp, #4]
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80055ac:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80055b0:	9202      	str	r2, [sp, #8]
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80055b2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
	t2cap[0] = 44444444;
 80055b6:	4a85      	ldr	r2, [pc, #532]	; (80057cc <StartDefaultTask+0x34c>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80055b8:	9303      	str	r3, [sp, #12]
	t2cap[0] = 44444444;
 80055ba:	4b85      	ldr	r3, [pc, #532]	; (80057d0 <StartDefaultTask+0x350>)
 80055bc:	601a      	str	r2, [r3, #0]
	newbuild = BUILDNO;				// init to the same
 80055be:	4b85      	ldr	r3, [pc, #532]	; (80057d4 <StartDefaultTask+0x354>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80055c0:	4a85      	ldr	r2, [pc, #532]	; (80057d8 <StartDefaultTask+0x358>)
	newbuild = BUILDNO;				// init to the same
 80055c2:	601e      	str	r6, [r3, #0]
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80055c4:	4b85      	ldr	r3, [pc, #532]	; (80057dc <StartDefaultTask+0x35c>)
 80055c6:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80055ca:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 80055d4:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 80055d8:	f021 fa66 	bl	8026aa8 <siprintf>
	initsplat();
 80055dc:	f001 fdd8 	bl	8007190 <initsplat>
	stat = setupneo();
 80055e0:	f000 fb0e 	bl	8005c00 <setupneo>
	if (stat != HAL_OK) {
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f040 80a9 	bne.w	800573c <StartDefaultTask+0x2bc>
	printf("Setting up timers\n");
 80055ea:	487d      	ldr	r0, [pc, #500]	; (80057e0 <StartDefaultTask+0x360>)
 80055ec:	f021 f90e 	bl	802680c <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 80055f0:	2300      	movs	r3, #0
 80055f2:	487c      	ldr	r0, [pc, #496]	; (80057e4 <StartDefaultTask+0x364>)
 80055f4:	461a      	mov	r2, r3
 80055f6:	4619      	mov	r1, r3
 80055f8:	6800      	ldr	r0, [r0, #0]
 80055fa:	f011 fb15 	bl	8016c28 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 80055fe:	487a      	ldr	r0, [pc, #488]	; (80057e8 <StartDefaultTask+0x368>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8005600:	4c7a      	ldr	r4, [pc, #488]	; (80057ec <StartDefaultTask+0x36c>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8005602:	f00b f937 	bl	8010874 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8005606:	2200      	movs	r2, #0
 8005608:	6820      	ldr	r0, [r4, #0]
 800560a:	4611      	mov	r1, r2
 800560c:	f00d f85c 	bl	80126c8 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8005610:	2200      	movs	r2, #0
 8005612:	2104      	movs	r1, #4
 8005614:	6820      	ldr	r0, [r4, #0]
 8005616:	f00d f857 	bl	80126c8 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 800561a:	2200      	movs	r2, #0
 800561c:	210c      	movs	r1, #12
 800561e:	6820      	ldr	r0, [r4, #0]
 8005620:	f00d f852 	bl	80126c8 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8005624:	2100      	movs	r1, #0
 8005626:	4620      	mov	r0, r4
 8005628:	f00d fa9c 	bl	8012b64 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 800562c:	2104      	movs	r1, #4
 800562e:	4620      	mov	r0, r4
 8005630:	f00d fa98 	bl	8012b64 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8005634:	210c      	movs	r1, #12
 8005636:	4620      	mov	r0, r4
 8005638:	f00d fa94 	bl	8012b64 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 800563c:	2301      	movs	r3, #1
 800563e:	4a64      	ldr	r2, [pc, #400]	; (80057d0 <StartDefaultTask+0x350>)
 8005640:	2108      	movs	r1, #8
 8005642:	4620      	mov	r0, r4
 8005644:	f00d f89e 	bl	8012784 <HAL_TIM_IC_Start_DMA>
 8005648:	b128      	cbz	r0, 8005656 <StartDefaultTask+0x1d6>
		printf("TIM_Base_Start_DMA err %i", err);
 800564a:	4601      	mov	r1, r0
 800564c:	4868      	ldr	r0, [pc, #416]	; (80057f0 <StartDefaultTask+0x370>)
 800564e:	f021 f841 	bl	80266d4 <iprintf>
		Error_Handler();
 8005652:	f7ff f879 	bl	8004748 <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	2201      	movs	r2, #1
 800565a:	2108      	movs	r1, #8
	myip = ip.addr;
 800565c:	4c65      	ldr	r4, [pc, #404]	; (80057f4 <StartDefaultTask+0x374>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 800565e:	f00d f833 	bl	80126c8 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8005662:	f8d9 3000 	ldr.w	r3, [r9]
	ip = dhcp->offered_ip_addr;
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 800566a:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 800566c:	2b00      	cmp	r3, #0
 800566e:	d069      	beq.n	8005744 <StartDefaultTask+0x2c4>
	printf("*****************************************\n");
 8005670:	4861      	ldr	r0, [pc, #388]	; (80057f8 <StartDefaultTask+0x378>)
 8005672:	f021 f8cb 	bl	802680c <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8005676:	6821      	ldr	r1, [r4, #0]
 8005678:	4860      	ldr	r0, [pc, #384]	; (80057fc <StartDefaultTask+0x37c>)
 800567a:	0e0a      	lsrs	r2, r1, #24
 800567c:	f3c1 4307 	ubfx	r3, r1, #16, #8
	if (http_downloading) {
 8005680:	4c5f      	ldr	r4, [pc, #380]	; (8005800 <StartDefaultTask+0x380>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8005682:	9200      	str	r2, [sp, #0]
 8005684:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005688:	b2c9      	uxtb	r1, r1
 800568a:	f021 f823 	bl	80266d4 <iprintf>
	printf("*****************************************\n");
 800568e:	485a      	ldr	r0, [pc, #360]	; (80057f8 <StartDefaultTask+0x378>)
 8005690:	f021 f8bc 	bl	802680c <puts>
	HAL_IWDG_Refresh(&hiwdg);						// refresh the hardware watchdog reset system timer
 8005694:	485b      	ldr	r0, [pc, #364]	; (8005804 <StartDefaultTask+0x384>)
 8005696:	f008 fa3b 	bl	800db10 <HAL_IWDG_Refresh>
	initialapisn();									// get initial s/n and UDP target from http server; reboots if fails
 800569a:	f003 fd4b 	bl	8009134 <initialapisn>
	osDelay(3000);		// wait for server to populate us (ZZZ)
 800569e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80056a2:	f010 ff97 	bl	80165d4 <osDelay>
	if (http_downloading) {
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d154      	bne.n	8005756 <StartDefaultTask+0x2d6>
	nxt_update();		// check if LCD needs updating
 80056ac:	f000 ff42 	bl	8006534 <nxt_update>
	if (http_downloading) {
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d163      	bne.n	800577e <StartDefaultTask+0x2fe>
	osDelay(3000);		// wait for server to respond
 80056b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
	uip = locateudp();
 80056ba:	4d53      	ldr	r5, [pc, #332]	; (8005808 <StartDefaultTask+0x388>)
	osDelay(3000);		// wait for server to respond
 80056bc:	f010 ff8a 	bl	80165d4 <osDelay>
	vTaskResume(LPTaskHandle);		// allow it to start
 80056c0:	4b52      	ldr	r3, [pc, #328]	; (800580c <StartDefaultTask+0x38c>)
	while (lptask_init_done == 0)
 80056c2:	4c53      	ldr	r4, [pc, #332]	; (8005810 <StartDefaultTask+0x390>)
	vTaskResume(LPTaskHandle);		// allow it to start
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f012 f9a1 	bl	8017a0c <vTaskResume>
	printf("Starting httpd web server\n");
 80056ca:	4852      	ldr	r0, [pc, #328]	; (8005814 <StartDefaultTask+0x394>)
 80056cc:	f021 f89e 	bl	802680c <puts>
	httpd_init();		// start the www server
 80056d0:	f014 fe7a 	bl	801a3c8 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 80056d4:	f003 fb32 	bl	8008d3c <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 80056d8:	484f      	ldr	r0, [pc, #316]	; (8005818 <StartDefaultTask+0x398>)
 80056da:	f021 f897 	bl	802680c <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80056de:	2008      	movs	r0, #8
 80056e0:	4a4e      	ldr	r2, [pc, #312]	; (800581c <StartDefaultTask+0x39c>)
 80056e2:	2100      	movs	r1, #0
 80056e4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80056e8:	9000      	str	r0, [sp, #0]
 80056ea:	484d      	ldr	r0, [pc, #308]	; (8005820 <StartDefaultTask+0x3a0>)
 80056ec:	f004 fbba 	bl	8009e64 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 80056f0:	484c      	ldr	r0, [pc, #304]	; (8005824 <StartDefaultTask+0x3a4>)
 80056f2:	f00b f807 	bl	8010704 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80056f6:	f012 fcc7 	bl	8018088 <xTaskGetCurrentTaskHandle>
 80056fa:	4b4b      	ldr	r3, [pc, #300]	; (8005828 <StartDefaultTask+0x3a8>)
 80056fc:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 80056fe:	f002 ffd1 	bl	80086a4 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8005702:	4b4a      	ldr	r3, [pc, #296]	; (800582c <StartDefaultTask+0x3ac>)
 8005704:	2201      	movs	r2, #1
	uip = locateudp();
 8005706:	6028      	str	r0, [r5, #0]
	printf("Waiting for lptask to start\n");
 8005708:	4849      	ldr	r0, [pc, #292]	; (8005830 <StartDefaultTask+0x3b0>)
	main_init_done = 1; // let lptask now main has initialised
 800570a:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 800570c:	f021 f87e 	bl	802680c <puts>
	while (lptask_init_done == 0)
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	b92b      	cbnz	r3, 8005720 <StartDefaultTask+0x2a0>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8005714:	2064      	movs	r0, #100	; 0x64
 8005716:	f010 ff5d 	bl	80165d4 <osDelay>
	while (lptask_init_done == 0)
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f9      	beq.n	8005714 <StartDefaultTask+0x294>
	startadc();		// start the ADC DMA loop
 8005720:	f7fb f9ec 	bl	8000afc <startadc>
		startudp(uip);	// should never return
 8005724:	6828      	ldr	r0, [r5, #0]
 8005726:	f002 fff3 	bl	8008710 <startudp>
		printf("UDP stream exited!!!\n\r");
 800572a:	4842      	ldr	r0, [pc, #264]	; (8005834 <StartDefaultTask+0x3b4>)
 800572c:	f020 ffd2 	bl	80266d4 <iprintf>
		rebootme(4);
 8005730:	2004      	movs	r0, #4
 8005732:	f7fe fad9 	bl	8003ce8 <rebootme>
		swapboot();	//  swap the boot vector
 8005736:	f7fb fbc5 	bl	8000ec4 <swapboot>
 800573a:	e6b2      	b.n	80054a2 <StartDefaultTask+0x22>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 800573c:	483e      	ldr	r0, [pc, #248]	; (8005838 <StartDefaultTask+0x3b8>)
 800573e:	f020 ffc9 	bl	80266d4 <iprintf>
 8005742:	e752      	b.n	80055ea <StartDefaultTask+0x16a>
		printf("***** DHCP Failed ******\n");
 8005744:	483d      	ldr	r0, [pc, #244]	; (800583c <StartDefaultTask+0x3bc>)
 8005746:	f021 f861 	bl	802680c <puts>
		osDelay(200);
 800574a:	20c8      	movs	r0, #200	; 0xc8
 800574c:	f010 ff42 	bl	80165d4 <osDelay>
		rebootme(1);
 8005750:	2001      	movs	r0, #1
 8005752:	f7fe fac9 	bl	8003ce8 <rebootme>
		printf("STM Downloading...\n");
 8005756:	483a      	ldr	r0, [pc, #232]	; (8005840 <StartDefaultTask+0x3c0>)
			HAL_IWDG_Refresh(&hiwdg);
 8005758:	4d2a      	ldr	r5, [pc, #168]	; (8005804 <StartDefaultTask+0x384>)
		printf("STM Downloading...\n");
 800575a:	f021 f857 	bl	802680c <puts>
		while (http_downloading) {
 800575e:	e006      	b.n	800576e <StartDefaultTask+0x2ee>
			HAL_IWDG_Refresh(&hiwdg);
 8005760:	4628      	mov	r0, r5
 8005762:	f008 f9d5 	bl	800db10 <HAL_IWDG_Refresh>
			osDelay(1000);
 8005766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800576a:	f010 ff33 	bl	80165d4 <osDelay>
		while (http_downloading) {
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f5      	bne.n	8005760 <StartDefaultTask+0x2e0>
		osDelay(5000);		// allow time for it to get to reboot if its going to
 8005774:	f241 3088 	movw	r0, #5000	; 0x1388
 8005778:	f010 ff2c 	bl	80165d4 <osDelay>
 800577c:	e796      	b.n	80056ac <StartDefaultTask+0x22c>
		printf("LCD Downloading...\n");
 800577e:	4831      	ldr	r0, [pc, #196]	; (8005844 <StartDefaultTask+0x3c4>)
			HAL_IWDG_Refresh(&hiwdg);
 8005780:	4d20      	ldr	r5, [pc, #128]	; (8005804 <StartDefaultTask+0x384>)
		printf("LCD Downloading...\n");
 8005782:	f021 f843 	bl	802680c <puts>
		while (http_downloading) {
 8005786:	e06a      	b.n	800585e <StartDefaultTask+0x3de>
 8005788:	40020800 	.word	0x40020800
 800578c:	1ff0f000 	.word	0x1ff0f000
 8005790:	0802c7ac 	.word	0x0802c7ac
 8005794:	0802c6dc 	.word	0x0802c6dc
 8005798:	0802c7b0 	.word	0x0802c7b0
 800579c:	0802b630 	.word	0x0802b630
 80057a0:	2000359c 	.word	0x2000359c
 80057a4:	0802c7f0 	.word	0x0802c7f0
 80057a8:	40020c00 	.word	0x40020c00
 80057ac:	0802c818 	.word	0x0802c818
 80057b0:	2002e48c 	.word	0x2002e48c
 80057b4:	200034a4 	.word	0x200034a4
 80057b8:	08003cf1 	.word	0x08003cf1
 80057bc:	08003b4d 	.word	0x08003b4d
 80057c0:	2000303c 	.word	0x2000303c
 80057c4:	0802c840 	.word	0x0802c840
 80057c8:	200000c0 	.word	0x200000c0
 80057cc:	02a62b1c 	.word	0x02a62b1c
 80057d0:	200007a4 	.word	0x200007a4
 80057d4:	20002dfc 	.word	0x20002dfc
 80057d8:	200034b4 	.word	0x200034b4
 80057dc:	20003530 	.word	0x20003530
 80057e0:	0802c8a8 	.word	0x0802c8a8
 80057e4:	20002e0c 	.word	0x20002e0c
 80057e8:	200029a0 	.word	0x200029a0
 80057ec:	20002870 	.word	0x20002870
 80057f0:	0802c8bc 	.word	0x0802c8bc
 80057f4:	20002df4 	.word	0x20002df4
 80057f8:	0802c8f4 	.word	0x0802c8f4
 80057fc:	0802c920 	.word	0x0802c920
 8005800:	200018dc 	.word	0x200018dc
 8005804:	2000268c 	.word	0x2000268c
 8005808:	20002e1c 	.word	0x20002e1c
 800580c:	20002180 	.word	0x20002180
 8005810:	20002de0 	.word	0x20002de0
 8005814:	0802c95c 	.word	0x0802c95c
 8005818:	0802c978 	.word	0x0802c978
 800581c:	0802c9dc 	.word	0x0802c9dc
 8005820:	20002294 	.word	0x20002294
 8005824:	200029ec 	.word	0x200029ec
 8005828:	20000838 	.word	0x20000838
 800582c:	20002de4 	.word	0x20002de4
 8005830:	0802c994 	.word	0x0802c994
 8005834:	0802c9c4 	.word	0x0802c9c4
 8005838:	0802c888 	.word	0x0802c888
 800583c:	0802c8d8 	.word	0x0802c8d8
 8005840:	0802c948 	.word	0x0802c948
 8005844:	0802c9b0 	.word	0x0802c9b0
 8005848:	20002184 	.word	0x20002184
 800584c:	20002df8 	.word	0x20002df8
			HAL_IWDG_Refresh(&hiwdg);
 8005850:	4628      	mov	r0, r5
 8005852:	f008 f95d 	bl	800db10 <HAL_IWDG_Refresh>
			osDelay(1000);
 8005856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800585a:	f010 febb 	bl	80165d4 <osDelay>
		while (http_downloading) {
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f5      	bne.n	8005850 <StartDefaultTask+0x3d0>
 8005864:	e727      	b.n	80056b6 <StartDefaultTask+0x236>
 8005866:	bf00      	nop

08005868 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop

0800586c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 800586c:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 800586e:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8005870:	b083      	sub	sp, #12
 8005872:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8005874:	d009      	beq.n	800588a <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8005876:	230a      	movs	r3, #10
 8005878:	2201      	movs	r2, #1
 800587a:	a901      	add	r1, sp, #4
 800587c:	4808      	ldr	r0, [pc, #32]	; (80058a0 <__io_putchar+0x34>)
 800587e:	f00e fbb5 	bl	8013fec <HAL_UART_Transmit>

	return ch;
	}
}
 8005882:	9801      	ldr	r0, [sp, #4]
 8005884:	b003      	add	sp, #12
 8005886:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 800588a:	4603      	mov	r3, r0
 800588c:	2202      	movs	r2, #2
 800588e:	4905      	ldr	r1, [pc, #20]	; (80058a4 <__io_putchar+0x38>)
 8005890:	4803      	ldr	r0, [pc, #12]	; (80058a0 <__io_putchar+0x34>)
 8005892:	f00e fbab 	bl	8013fec <HAL_UART_Transmit>
}
 8005896:	9801      	ldr	r0, [sp, #4]
 8005898:	b003      	add	sp, #12
 800589a:	f85d fb04 	ldr.w	pc, [sp], #4
 800589e:	bf00      	nop
 80058a0:	20002a38 	.word	0x20002a38
 80058a4:	0802b4f0 	.word	0x0802b4f0

080058a8 <movavg>:
}


// moving avg, used by:-
// clktrim
uint32_t movavg(uint32_t new) {
 80058a8:	b410      	push	{r4}
 80058aa:	4c08      	ldr	r4, [pc, #32]	; (80058cc <movavg+0x24>)
	static uint32_t data[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int i;
	uint32_t sum = 0;
 80058ac:	2100      	movs	r1, #0
 80058ae:	4623      	mov	r3, r4
 80058b0:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c

	for (i = 0; i < 15; i++) {
		data[i] = data[i + 1];		// old data is low index
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 80058ba:	4563      	cmp	r3, ip
		sum += data[i];
 80058bc:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 80058be:	d1f9      	bne.n	80058b4 <movavg+0xc>
	}
	data[15] = new;		// new data at the end
	sum += new;
 80058c0:	4401      	add	r1, r0
	data[15] = new;		// new data at the end
 80058c2:	63e0      	str	r0, [r4, #60]	; 0x3c

	return (sum >> 4);
}
 80058c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c8:	0908      	lsrs	r0, r1, #4
 80058ca:	4770      	bx	lr
 80058cc:	20002e20 	.word	0x20002e20

080058d0 <calcLocator>:
void calcLocator(char *dst, double lat, double lon) {
  int o1, o2, o3;
  int a1, a2, a3;
  double remainder;
  // longitude
  remainder = lon + 180.0;
 80058d0:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005988 <calcLocator+0xb8>
  o1 = (int)(remainder / 20.0);
 80058d4:	eeb3 2b04 	vmov.f64	d2, #52	; 0x41a00000  20.0
  dst[1] = (char)a1 + 'A';
  dst[2] = (char)o2 + '0';
  dst[3] = (char)a2 + '0';
  dst[4] = (char)o3 + 'A';
  dst[5] = (char)a3 + 'A';
  dst[6] = (char)0;
 80058d8:	2300      	movs	r3, #0
  a1 = (int)(remainder / 10.0);
 80058da:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
  remainder = lon + 180.0;
 80058de:	ee31 1b07 	vadd.f64	d1, d1, d7
  dst[6] = (char)0;
 80058e2:	7183      	strb	r3, [r0, #6]
  o2 = (int)(remainder / 2.0);
 80058e4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
  remainder = remainder - 2.0 * (double)o2;
 80058e8:	eeb0 3b00 	vmov.f64	d3, #0	; 0x40000000  2.0
  o3 = (int)(12.0 * remainder);
 80058ec:	eeb2 4b08 	vmov.f64	d4, #40	; 0x41400000  12.0
  remainder = lat + 90.0;
 80058f0:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8005990 <calcLocator+0xc0>
void calcLocator(char *dst, double lat, double lon) {
 80058f4:	ed2d 8b02 	vpush	{d8}
  remainder = lat + 90.0;
 80058f8:	ee30 0b06 	vadd.f64	d0, d0, d6
  o1 = (int)(remainder / 20.0);
 80058fc:	ee81 6b02 	vdiv.f64	d6, d1, d2
 8005900:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  remainder = remainder - (double)o1 * 20.0;
 8005904:	eeb8 8bc6 	vcvt.f64.s32	d8, s12
  dst[0] = (char)o1 + 'A';
 8005908:	ee16 3a10 	vmov	r3, s12
  a1 = (int)(remainder / 10.0);
 800590c:	ee80 6b05 	vdiv.f64	d6, d0, d5
  dst[0] = (char)o1 + 'A';
 8005910:	3341      	adds	r3, #65	; 0x41
 8005912:	7003      	strb	r3, [r0, #0]
  remainder = remainder - (double)o1 * 20.0;
 8005914:	eea8 1b42 	vfms.f64	d1, d8, d2
}
 8005918:	ecbd 8b02 	vpop	{d8}
  o2 = (int)(remainder / 2.0);
 800591c:	ee21 7b07 	vmul.f64	d7, d1, d7
 8005920:	eebd 7bc7 	vcvt.s32.f64	s14, d7
  remainder = remainder - 2.0 * (double)o2;
 8005924:	eeb8 2bc7 	vcvt.f64.s32	d2, s14
  dst[2] = (char)o2 + '0';
 8005928:	ee17 3a10 	vmov	r3, s14
  a3 = (int)(24.0 * remainder);
 800592c:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
  dst[2] = (char)o2 + '0';
 8005930:	3330      	adds	r3, #48	; 0x30
  remainder = remainder - 2.0 * (double)o2;
 8005932:	eea2 1b43 	vfms.f64	d1, d2, d3
  dst[2] = (char)o2 + '0';
 8005936:	7083      	strb	r3, [r0, #2]
  a1 = (int)(remainder / 10.0);
 8005938:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  dst[1] = (char)a1 + 'A';
 800593c:	ee16 3a10 	vmov	r3, s12
  o3 = (int)(12.0 * remainder);
 8005940:	ee21 1b04 	vmul.f64	d1, d1, d4
  dst[1] = (char)a1 + 'A';
 8005944:	3341      	adds	r3, #65	; 0x41
 8005946:	7043      	strb	r3, [r0, #1]
  remainder = remainder - (double)a1 * 10.0;
 8005948:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 800594c:	eea4 0b45 	vfms.f64	d0, d4, d5
  o3 = (int)(12.0 * remainder);
 8005950:	eebd 1bc1 	vcvt.s32.f64	s2, d1
  dst[4] = (char)o3 + 'A';
 8005954:	ee11 3a10 	vmov	r3, s2
 8005958:	3341      	adds	r3, #65	; 0x41
  a2 = (int)(remainder);
 800595a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
  dst[4] = (char)o3 + 'A';
 800595e:	7103      	strb	r3, [r0, #4]
  remainder = remainder - (double)a2;
 8005960:	eeb8 5be6 	vcvt.f64.s32	d5, s13
  dst[3] = (char)a2 + '0';
 8005964:	ee16 3a90 	vmov	r3, s13
 8005968:	3330      	adds	r3, #48	; 0x30
  remainder = remainder - (double)a2;
 800596a:	ee30 0b45 	vsub.f64	d0, d0, d5
  dst[3] = (char)a2 + '0';
 800596e:	70c3      	strb	r3, [r0, #3]
  a3 = (int)(24.0 * remainder);
 8005970:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005974:	eebd 0bc0 	vcvt.s32.f64	s0, d0
  dst[5] = (char)a3 + 'A';
 8005978:	ee10 3a10 	vmov	r3, s0
 800597c:	3341      	adds	r3, #65	; 0x41
 800597e:	7143      	strb	r3, [r0, #5]
}
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	f3af 8000 	nop.w
 8005988:	00000000 	.word	0x00000000
 800598c:	40668000 	.word	0x40668000
 8005990:	00000000 	.word	0x00000000
 8005994:	40568000 	.word	0x40568000

08005998 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005998:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <calcepoch32+0x40>)
 800599a:	4810      	ldr	r0, [pc, #64]	; (80059dc <calcepoch32+0x44>)
 800599c:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 800599e:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80059a0:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80059a4:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80059a6:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80059a8:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80059aa:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80059ac:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80059b0:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80059b2:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80059b4:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80059b6:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 80059b8:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 80059ba:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 80059bc:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 80059be:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 80059c2:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 80059c4:	f01f ffc8 	bl	8025958 <mktime>
 80059c8:	4a05      	ldr	r2, [pc, #20]	; (80059e0 <calcepoch32+0x48>)
 80059ca:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 80059cc:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 80059d0:	e9c2 3100 	strd	r3, r1, [r2]
}
 80059d4:	4418      	add	r0, r3
 80059d6:	bd10      	pop	{r4, pc}
 80059d8:	2000303c 	.word	0x2000303c
 80059dc:	20003010 	.word	0x20003010
 80059e0:	20002ef0 	.word	0x20002ef0

080059e4 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 80059e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e8:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 80059ea:	b33a      	cbz	r2, 8005a3c <printPacket+0x58>
 80059ec:	4607      	mov	r7, r0
 80059ee:	4616      	mov	r6, r2
 80059f0:	1e4d      	subs	r5, r1, #1
 80059f2:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 80059f4:	f8df a054 	ldr.w	sl, [pc, #84]	; 8005a4c <printPacket+0x68>
 80059f8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8005a50 <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 80059fc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005a54 <printPacket+0x70>
 8005a00:	e013      	b.n	8005a2a <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 8005a02:	f8da 1000 	ldr.w	r1, [sl]
 8005a06:	1c4b      	adds	r3, r1, #1
 8005a08:	f8ca 3000 	str.w	r3, [sl]
 8005a0c:	f020 fe62 	bl	80266d4 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005a10:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 8005a12:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005a16:	4641      	mov	r1, r8
 8005a18:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 8005a1a:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8005a1c:	f021 f844 	bl	8026aa8 <siprintf>
		printf(temp);
 8005a20:	a801      	add	r0, sp, #4
 8005a22:	f020 fe57 	bl	80266d4 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005a26:	42a6      	cmp	r6, r4
 8005a28:	d008      	beq.n	8005a3c <printPacket+0x58>
		if (i % 16 == 0) {
 8005a2a:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 8005a2e:	463a      	mov	r2, r7
 8005a30:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 8005a32:	d0e6      	beq.n	8005a02 <printPacket+0x1e>
			printf(" ");
 8005a34:	2020      	movs	r0, #32
 8005a36:	f020 fe65 	bl	8026704 <putchar>
 8005a3a:	e7e9      	b.n	8005a10 <printPacket+0x2c>
	}
	printf("\n\r");
 8005a3c:	4802      	ldr	r0, [pc, #8]	; (8005a48 <printPacket+0x64>)
 8005a3e:	f020 fe49 	bl	80266d4 <iprintf>
}
 8005a42:	b002      	add	sp, #8
 8005a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a48:	0802c9d8 	.word	0x0802c9d8
 8005a4c:	20002ee4 	.word	0x20002ee4
 8005a50:	0802d0dc 	.word	0x0802d0dc
 8005a54:	0802d0e8 	.word	0x0802d0e8

08005a58 <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8005a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005a5c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005afc <disableNmea+0xa4>
void disableNmea() {
 8005a60:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8005a62:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005a64:	4f24      	ldr	r7, [pc, #144]	; (8005af8 <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005a66:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8005a6a:	f10d 0904 	add.w	r9, sp, #4
 8005a6e:	ad04      	add	r5, sp, #16
 8005a70:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005a74:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005a78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005a7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005a80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005a84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005a88:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8005a8c:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005a90:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8005a94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a98:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8005a9c:	f829 2b02 	strh.w	r2, [r9], #2
 8005aa0:	0c12      	lsrs	r2, r2, #16
 8005aa2:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 8005aa6:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 8005aaa:	7829      	ldrb	r1, [r5, #0]
 8005aac:	786a      	ldrb	r2, [r5, #1]
 8005aae:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 8005ab2:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 8005ab4:	f88d 100a 	strb.w	r1, [sp, #10]
 8005ab8:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 8005abc:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8005ac0:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8005ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac8:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 8005aca:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 8005acc:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 8005ad0:	44e6      	add	lr, ip
 8005ad2:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 8005ad6:	d1f5      	bne.n	8005ac4 <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005ad8:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005ada:	2364      	movs	r3, #100	; 0x64
 8005adc:	220b      	movs	r2, #11
 8005ade:	a901      	add	r1, sp, #4
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	f88d c00d 	strb.w	ip, [sp, #13]
 8005ae6:	f88d e00e 	strb.w	lr, [sp, #14]
 8005aea:	f00e fa7f 	bl	8013fec <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005aee:	4545      	cmp	r5, r8
 8005af0:	d1d9      	bne.n	8005aa6 <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 8005af2:	b00f      	add	sp, #60	; 0x3c
 8005af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005af8:	20002f84 	.word	0x20002f84
 8005afc:	0802a858 	.word	0x0802a858

08005b00 <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b00:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 8005b02:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b04:	db1c      	blt.n	8005b40 <isGoodChecksum+0x40>
 8005b06:	4910      	ldr	r1, [pc, #64]	; (8005b48 <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 8005b0e:	4613      	mov	r3, r2
 8005b10:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 8005b12:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005b16:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b18:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 8005b1a:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8005b1c:	441a      	add	r2, r3
 8005b1e:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b20:	d1f7      	bne.n	8005b12 <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8005b22:	490a      	ldr	r1, [pc, #40]	; (8005b4c <isGoodChecksum+0x4c>)
 8005b24:	4408      	add	r0, r1
 8005b26:	7981      	ldrb	r1, [r0, #6]
 8005b28:	4299      	cmp	r1, r3
 8005b2a:	d002      	beq.n	8005b32 <isGoodChecksum+0x32>
 8005b2c:	2000      	movs	r0, #0
}
 8005b2e:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8005b32:	79c0      	ldrb	r0, [r0, #7]
 8005b34:	1a80      	subs	r0, r0, r2
 8005b36:	fab0 f080 	clz	r0, r0
 8005b3a:	0940      	lsrs	r0, r0, #5
}
 8005b3c:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 8005b40:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 8005b42:	4613      	mov	r3, r2
 8005b44:	e7ed      	b.n	8005b22 <isGoodChecksum+0x22>
 8005b46:	bf00      	nop
 8005b48:	20002e65 	.word	0x20002e65
 8005b4c:	20002e64 	.word	0x20002e64

08005b50 <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8005b50:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8005b52:	4c25      	ldr	r4, [pc, #148]	; (8005be8 <IsPacketReady+0x98>)
 8005b54:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d814      	bhi.n	8005b84 <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 8005b5a:	4a24      	ldr	r2, [pc, #144]	; (8005bec <IsPacketReady+0x9c>)
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	5cd2      	ldrb	r2, [r2, r3]
 8005b60:	4282      	cmp	r2, r0
 8005b62:	d00a      	beq.n	8005b7a <IsPacketReady+0x2a>
 8005b64:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <IsPacketReady+0xa0>)
 8005b66:	5cd2      	ldrb	r2, [r2, r3]
 8005b68:	4282      	cmp	r2, r0
 8005b6a:	d006      	beq.n	8005b7a <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4921      	ldr	r1, [pc, #132]	; (8005bf4 <IsPacketReady+0xa4>)
			p = 0;
 8005b70:	4613      	mov	r3, r2
			len = 0;
 8005b72:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8005b74:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8005b76:	70e3      	strb	r3, [r4, #3]
}
 8005b78:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <IsPacketReady+0xa8>)
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	5450      	strb	r0, [r2, r1]
 8005b82:	e7f7      	b.n	8005b74 <IsPacketReady+0x24>
		if (p < 6) {
 8005b84:	2b05      	cmp	r3, #5
 8005b86:	d917      	bls.n	8005bb8 <IsPacketReady+0x68>
		if (p == 6) {
 8005b88:	2b06      	cmp	r3, #6
 8005b8a:	d01b      	beq.n	8005bc4 <IsPacketReady+0x74>
 8005b8c:	4d19      	ldr	r5, [pc, #100]	; (8005bf4 <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 8005b8e:	682a      	ldr	r2, [r5, #0]
 8005b90:	4619      	mov	r1, r3
 8005b92:	3207      	adds	r2, #7
 8005b94:	429a      	cmp	r2, r3
 8005b96:	dbed      	blt.n	8005b74 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005b98:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 8005b9a:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 8005b9c:	4e16      	ldr	r6, [pc, #88]	; (8005bf8 <IsPacketReady+0xa8>)
 8005b9e:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 8005ba0:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 8005ba2:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d1e5      	bne.n	8005b74 <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 8005ba8:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 8005baa:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 8005bac:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 8005bae:	f7ff ffa7 	bl	8005b00 <isGoodChecksum>
 8005bb2:	b998      	cbnz	r0, 8005bdc <IsPacketReady+0x8c>
				p = 0;
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	e7dd      	b.n	8005b74 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005bb8:	490f      	ldr	r1, [pc, #60]	; (8005bf8 <IsPacketReady+0xa8>)
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	54c8      	strb	r0, [r1, r3]
			return (0);
 8005bbe:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 8005bc0:	70e2      	strb	r2, [r4, #3]
}
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 8005bc4:	490c      	ldr	r1, [pc, #48]	; (8005bf8 <IsPacketReady+0xa8>)
 8005bc6:	794d      	ldrb	r5, [r1, #5]
 8005bc8:	790a      	ldrb	r2, [r1, #4]
 8005bca:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8005bce:	4d09      	ldr	r5, [pc, #36]	; (8005bf4 <IsPacketReady+0xa4>)
 8005bd0:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 8005bd2:	682a      	ldr	r2, [r5, #0]
 8005bd4:	2a7f      	cmp	r2, #127	; 0x7f
 8005bd6:	d9da      	bls.n	8005b8e <IsPacketReady+0x3e>
				return 0;
 8005bd8:	2000      	movs	r0, #0
}
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <IsPacketReady+0xac>)
 8005bde:	2201      	movs	r2, #1
					return len;
 8005be0:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 8005be2:	601a      	str	r2, [r3, #0]
}
 8005be4:	bd70      	pop	{r4, r5, r6, pc}
 8005be6:	bf00      	nop
 8005be8:	20000298 	.word	0x20000298
 8005bec:	0802d2d8 	.word	0x0802d2d8
 8005bf0:	0802d2dc 	.word	0x0802d2dc
 8005bf4:	20003008 	.word	0x20003008
 8005bf8:	20002e64 	.word	0x20002e64
 8005bfc:	20002efc 	.word	0x20002efc

08005c00 <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005c00:	4b74      	ldr	r3, [pc, #464]	; (8005dd4 <setupneo+0x1d4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 8005c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c08:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005c0a:	f000 80ba 	beq.w	8005d82 <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 8005c0e:	2284      	movs	r2, #132	; 0x84
 8005c10:	4971      	ldr	r1, [pc, #452]	; (8005dd8 <setupneo+0x1d8>)
 8005c12:	4872      	ldr	r0, [pc, #456]	; (8005ddc <setupneo+0x1dc>)
 8005c14:	f01f fd98 	bl	8025748 <memcpy>
		gpsuarttx = huart6;
 8005c18:	2284      	movs	r2, #132	; 0x84
 8005c1a:	496f      	ldr	r1, [pc, #444]	; (8005dd8 <setupneo+0x1d8>)
 8005c1c:	4870      	ldr	r0, [pc, #448]	; (8005de0 <setupneo+0x1e0>)
 8005c1e:	f01f fd93 	bl	8025748 <memcpy>
		GPSUARTRX = USART6;
 8005c22:	4b70      	ldr	r3, [pc, #448]	; (8005de4 <setupneo+0x1e4>)
 8005c24:	4a70      	ldr	r2, [pc, #448]	; (8005de8 <setupneo+0x1e8>)
 8005c26:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4970      	ldr	r1, [pc, #448]	; (8005dec <setupneo+0x1ec>)
 8005c2c:	486b      	ldr	r0, [pc, #428]	; (8005ddc <setupneo+0x1dc>)
 8005c2e:	f00e fc75 	bl	801451c <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8005c32:	4607      	mov	r7, r0
 8005c34:	2800      	cmp	r0, #0
 8005c36:	f040 809d 	bne.w	8005d74 <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8005c3a:	f7ff ff0d 	bl	8005a58 <disableNmea>
	osDelay(500);
 8005c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c42:	f010 fcc7 	bl	80165d4 <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8005c46:	4b6a      	ldr	r3, [pc, #424]	; (8005df0 <setupneo+0x1f0>)
 8005c48:	ae01      	add	r6, sp, #4
 8005c4a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005c4e:	4d69      	ldr	r5, [pc, #420]	; (8005df4 <setupneo+0x1f4>)
 8005c50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c54:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 8005c58:	4867      	ldr	r0, [pc, #412]	; (8005df8 <setupneo+0x1f8>)
 8005c5a:	f020 fdd7 	bl	802680c <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005c5e:	2364      	movs	r3, #100	; 0x64
 8005c60:	2208      	movs	r2, #8
 8005c62:	4631      	mov	r1, r6
 8005c64:	485e      	ldr	r0, [pc, #376]	; (8005de0 <setupneo+0x1e0>)
 8005c66:	f00e f9c1 	bl	8013fec <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005c6a:	e004      	b.n	8005c76 <setupneo+0x76>
		i++;
		osDelay(1);
 8005c6c:	f010 fcb2 	bl	80165d4 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005c70:	3c01      	subs	r4, #1
 8005c72:	f000 80a5 	beq.w	8005dc0 <setupneo+0x1c0>
 8005c76:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 8005c78:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f6      	beq.n	8005c6c <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005c7e:	4c5f      	ldr	r4, [pc, #380]	; (8005dfc <setupneo+0x1fc>)
 8005c80:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 8005c82:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005c8a:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005c8e:	2364      	movs	r3, #100	; 0x64
 8005c90:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005c92:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005c96:	4852      	ldr	r0, [pc, #328]	; (8005de0 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005c98:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	f00e f9a5 	bl	8013fec <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 8005ca2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005ca6:	f010 fc95 	bl	80165d4 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8005caa:	4855      	ldr	r0, [pc, #340]	; (8005e00 <setupneo+0x200>)
 8005cac:	f020 fd12 	bl	80266d4 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005cb0:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8005cb4:	46b4      	mov	ip, r6
 8005cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cb8:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005cbc:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 8005cbe:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005cc2:	220e      	movs	r2, #14
 8005cc4:	2364      	movs	r3, #100	; 0x64
 8005cc6:	4846      	ldr	r0, [pc, #280]	; (8005de0 <setupneo+0x1e0>)
 8005cc8:	f00e f990 	bl	8013fec <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 8005ccc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005cd0:	f010 fc80 	bl	80165d4 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8005cd4:	484b      	ldr	r0, [pc, #300]	; (8005e04 <setupneo+0x204>)
 8005cd6:	f020 fd99 	bl	802680c <puts>
	byte packet[] = { 0xB5, // sync char 1
 8005cda:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 8005cde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ce4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cea:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005cee:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8005cf0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	222c      	movs	r2, #44	; 0x2c
 8005cf8:	4839      	ldr	r0, [pc, #228]	; (8005de0 <setupneo+0x1e0>)
 8005cfa:	f00e f977 	bl	8013fec <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 8005cfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d02:	f010 fc67 	bl	80165d4 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8005d06:	4840      	ldr	r0, [pc, #256]	; (8005e08 <setupneo+0x208>)
 8005d08:	f020 fce4 	bl	80266d4 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005d0c:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 8005d10:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d12:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005d14:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 8005d16:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d18:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005d1c:	f82c 2b02 	strh.w	r2, [ip], #2
 8005d20:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d22:	4631      	mov	r1, r6
 8005d24:	482e      	ldr	r0, [pc, #184]	; (8005de0 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 8005d26:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d2a:	220b      	movs	r2, #11
 8005d2c:	f00e f95e 	bl	8013fec <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 8005d30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d34:	f010 fc4e 	bl	80165d4 <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005d38:	46b4      	mov	ip, r6
 8005d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005d46:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d4a:	2364      	movs	r3, #100	; 0x64
 8005d4c:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005d4e:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d52:	4631      	mov	r1, r6
 8005d54:	4822      	ldr	r0, [pc, #136]	; (8005de0 <setupneo+0x1e0>)
 8005d56:	f00e f949 	bl	8013fec <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 8005d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d5e:	f010 fc39 	bl	80165d4 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8005d62:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <setupneo+0x20c>)
 8005d64:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 8005d66:	482a      	ldr	r0, [pc, #168]	; (8005e10 <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8005d68:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8005d6a:	f020 fcb3 	bl	80266d4 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8005d6e:	4638      	mov	r0, r7
 8005d70:	b00d      	add	sp, #52	; 0x34
 8005d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8005d74:	4601      	mov	r1, r0
 8005d76:	4827      	ldr	r0, [pc, #156]	; (8005e14 <setupneo+0x214>)
 8005d78:	f020 fcac 	bl	80266d4 <iprintf>
}
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	b00d      	add	sp, #52	; 0x34
 8005d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 8005d82:	4c25      	ldr	r4, [pc, #148]	; (8005e18 <setupneo+0x218>)
 8005d84:	4620      	mov	r0, r4
 8005d86:	f00d fac5 	bl	8013314 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f00d f92a 	bl	8012fe4 <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 8005d90:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8005d94:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 8005d96:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8005d98:	f00e f9d0 	bl	801413c <HAL_UART_Init>
 8005d9c:	b968      	cbnz	r0, 8005dba <setupneo+0x1ba>
		gpsuartrx = huart8;
 8005d9e:	2284      	movs	r2, #132	; 0x84
 8005da0:	491e      	ldr	r1, [pc, #120]	; (8005e1c <setupneo+0x21c>)
 8005da2:	480e      	ldr	r0, [pc, #56]	; (8005ddc <setupneo+0x1dc>)
 8005da4:	f01f fcd0 	bl	8025748 <memcpy>
		gpsuarttx = huart7;
 8005da8:	2284      	movs	r2, #132	; 0x84
 8005daa:	491b      	ldr	r1, [pc, #108]	; (8005e18 <setupneo+0x218>)
 8005dac:	480c      	ldr	r0, [pc, #48]	; (8005de0 <setupneo+0x1e0>)
 8005dae:	f01f fccb 	bl	8025748 <memcpy>
		GPSUARTRX = UART8;
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <setupneo+0x1e4>)
 8005db4:	4a1a      	ldr	r2, [pc, #104]	; (8005e20 <setupneo+0x220>)
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e736      	b.n	8005c28 <setupneo+0x28>
			Error_Handler();
 8005dba:	f7fe fcc5 	bl	8004748 <Error_Handler>
 8005dbe:	e7ee      	b.n	8005d9e <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 8005dc0:	4818      	ldr	r0, [pc, #96]	; (8005e24 <setupneo+0x224>)
 8005dc2:	f020 fd23 	bl	802680c <puts>
		osDelay(200);
 8005dc6:	20c8      	movs	r0, #200	; 0xc8
 8005dc8:	f010 fc04 	bl	80165d4 <osDelay>
		rebootme(2);
 8005dcc:	2002      	movs	r0, #2
 8005dce:	f7fd ff8b 	bl	8003ce8 <rebootme>
 8005dd2:	e754      	b.n	8005c7e <setupneo+0x7e>
 8005dd4:	20002184 	.word	0x20002184
 8005dd8:	20002c48 	.word	0x20002c48
 8005ddc:	20002f00 	.word	0x20002f00
 8005de0:	20002f84 	.word	0x20002f84
 8005de4:	20002e60 	.word	0x20002e60
 8005de8:	40011400 	.word	0x40011400
 8005dec:	20003034 	.word	0x20003034
 8005df0:	0802a850 	.word	0x0802a850
 8005df4:	2000300c 	.word	0x2000300c
 8005df8:	0802d0f0 	.word	0x0802d0f0
 8005dfc:	0802a838 	.word	0x0802a838
 8005e00:	0802d130 	.word	0x0802d130
 8005e04:	0802d160 	.word	0x0802d160
 8005e08:	0802d188 	.word	0x0802d188
 8005e0c:	2000303c 	.word	0x2000303c
 8005e10:	0802d1ac 	.word	0x0802d1ac
 8005e14:	0802d108 	.word	0x0802d108
 8005e18:	20002ccc 	.word	0x20002ccc
 8005e1c:	20002d50 	.word	0x20002d50
 8005e20:	40007c00 	.word	0x40007c00
 8005e24:	0802d1d4 	.word	0x0802d1d4

08005e28 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8005e28:	4a2a      	ldr	r2, [pc, #168]	; (8005ed4 <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005e2a:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	6803      	ldr	r3, [r0, #0]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d011      	beq.n	8005e58 <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8005e34:	4a28      	ldr	r2, [pc, #160]	; (8005ed8 <HAL_UART_RxCpltCallback+0xb0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d024      	beq.n	8005e84 <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8005e3a:	4a28      	ldr	r2, [pc, #160]	; (8005edc <HAL_UART_RxCpltCallback+0xb4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d025      	beq.n	8005e8c <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 8005e40:	4a27      	ldr	r2, [pc, #156]	; (8005ee0 <HAL_UART_RxCpltCallback+0xb8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 8005e46:	4827      	ldr	r0, [pc, #156]	; (8005ee4 <HAL_UART_RxCpltCallback+0xbc>)
}
 8005e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 8005e4c:	f020 bcde 	b.w	802680c <puts>
}
 8005e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 8005e54:	f7fe bbf8 	b.w	8004648 <uart2_rxdone>
		data = rxdatabuf[0];
 8005e58:	4923      	ldr	r1, [pc, #140]	; (8005ee8 <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 8005e5a:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8005e5c:	4b23      	ldr	r3, [pc, #140]	; (8005eec <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 8005e5e:	4a24      	ldr	r2, [pc, #144]	; (8005ef0 <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 8005e60:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 8005e62:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 8005e64:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 8005e66:	f7ff fe73 	bl	8005b50 <IsPacketReady>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	dd1c      	ble.n	8005ea8 <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 8005e6e:	2854      	cmp	r0, #84	; 0x54
 8005e70:	d01b      	beq.n	8005eaa <HAL_UART_RxCpltCallback+0x82>
 8005e72:	2864      	cmp	r0, #100	; 0x64
 8005e74:	d00e      	beq.n	8005e94 <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8005e76:	b2c2      	uxtb	r2, r0
 8005e78:	491e      	ldr	r1, [pc, #120]	; (8005ef4 <HAL_UART_RxCpltCallback+0xcc>)
 8005e7a:	481f      	ldr	r0, [pc, #124]	; (8005ef8 <HAL_UART_RxCpltCallback+0xd0>)
}
 8005e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8005e80:	f7ff bdb0 	b.w	80059e4 <printPacket>
}
 8005e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 8005e88:	f7fc b8b4 	b.w	8001ff4 <uart5_rxdone>
}
 8005e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 8005e90:	f001 b874 	b.w	8006f7c <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 8005e94:	4b19      	ldr	r3, [pc, #100]	; (8005efc <HAL_UART_RxCpltCallback+0xd4>)
 8005e96:	481a      	ldr	r0, [pc, #104]	; (8005f00 <HAL_UART_RxCpltCallback+0xd8>)
 8005e98:	f1a3 020a 	sub.w	r2, r3, #10
 8005e9c:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8005ea0:	f020 fc18 	bl	80266d4 <iprintf>
				neoispresent = 1;
 8005ea4:	4b17      	ldr	r3, [pc, #92]	; (8005f04 <HAL_UART_RxCpltCallback+0xdc>)
 8005ea6:	601c      	str	r4, [r3, #0]
}
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8005eaa:	4d17      	ldr	r5, [pc, #92]	; (8005f08 <HAL_UART_RxCpltCallback+0xe0>)
 8005eac:	224e      	movs	r2, #78	; 0x4e
 8005eae:	4917      	ldr	r1, [pc, #92]	; (8005f0c <HAL_UART_RxCpltCallback+0xe4>)
 8005eb0:	1d28      	adds	r0, r5, #4
 8005eb2:	f01f fc49 	bl	8025748 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8005eb6:	f7ff fd6f 	bl	8005998 <calcepoch32>
 8005eba:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 8005ebe:	7e6b      	ldrb	r3, [r5, #25]
 8005ec0:	f013 0301 	ands.w	r3, r3, #1
 8005ec4:	d002      	beq.n	8005ecc <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <HAL_UART_RxCpltCallback+0xe8>)
 8005ec8:	701c      	strb	r4, [r3, #0]
}
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 8005ecc:	4a10      	ldr	r2, [pc, #64]	; (8005f10 <HAL_UART_RxCpltCallback+0xe8>)
 8005ece:	7013      	strb	r3, [r2, #0]
}
 8005ed0:	bd38      	pop	{r3, r4, r5, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20002e60 	.word	0x20002e60
 8005ed8:	40005000 	.word	0x40005000
 8005edc:	40011400 	.word	0x40011400
 8005ee0:	40004400 	.word	0x40004400
 8005ee4:	0802d248 	.word	0x0802d248
 8005ee8:	20003034 	.word	0x20003034
 8005eec:	20002ee8 	.word	0x20002ee8
 8005ef0:	20002ef8 	.word	0x20002ef8
 8005ef4:	20002e64 	.word	0x20002e64
 8005ef8:	0802d22c 	.word	0x0802d22c
 8005efc:	20002e92 	.word	0x20002e92
 8005f00:	0802d200 	.word	0x0802d200
 8005f04:	2000300c 	.word	0x2000300c
 8005f08:	2000303c 	.word	0x2000303c
 8005f0c:	20002e6a 	.word	0x20002e6a
 8005f10:	200034a8 	.word	0x200034a8

08005f14 <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005f14:	4926      	ldr	r1, [pc, #152]	; (8005fb0 <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005f16:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005f1a:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005f1c:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005f1e:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005f20:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8005f22:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005f24:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005f26:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005f28:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005f2a:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005f2c:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8005f2e:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005f30:	d02b      	beq.n	8005f8a <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8005f32:	4920      	ldr	r1, [pc, #128]	; (8005fb4 <HAL_UART_ErrorCallback+0xa0>)
 8005f34:	428b      	cmp	r3, r1
 8005f36:	d00f      	beq.n	8005f58 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8005f38:	491f      	ldr	r1, [pc, #124]	; (8005fb8 <HAL_UART_ErrorCallback+0xa4>)
 8005f3a:	428b      	cmp	r3, r1
 8005f3c:	d000      	beq.n	8005f40 <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8005f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 8005f40:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8005f44:	481d      	ldr	r0, [pc, #116]	; (8005fbc <HAL_UART_ErrorCallback+0xa8>)
 8005f46:	f020 fbc5 	bl	80266d4 <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 8005f50:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 8005f52:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8005f54:	621d      	str	r5, [r3, #32]
}
 8005f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 8005f58:	4a19      	ldr	r2, [pc, #100]	; (8005fc0 <HAL_UART_ErrorCallback+0xac>)
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	d1ee      	bne.n	8005f3e <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 8005f60:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8005f64:	4a17      	ldr	r2, [pc, #92]	; (8005fc4 <HAL_UART_ErrorCallback+0xb0>)
 8005f66:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8005f68:	69da      	ldr	r2, [r3, #28]
 8005f6a:	0710      	lsls	r0, r2, #28
 8005f6c:	d500      	bpl.n	8005f70 <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 8005f6e:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_UART_ErrorCallback+0xa0>)
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	0751      	lsls	r1, r2, #29
 8005f76:	d501      	bpl.n	8005f7c <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 8005f78:	2204      	movs	r2, #4
 8005f7a:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <HAL_UART_ErrorCallback+0xa0>)
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	0792      	lsls	r2, r2, #30
 8005f82:	d5dc      	bpl.n	8005f3e <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 8005f84:	2202      	movs	r2, #2
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 8005f8a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8005f8e:	480e      	ldr	r0, [pc, #56]	; (8005fc8 <HAL_UART_ErrorCallback+0xb4>)
 8005f90:	f020 fba0 	bl	80266d4 <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8005f94:	462a      	mov	r2, r5
 8005f96:	490d      	ldr	r1, [pc, #52]	; (8005fcc <HAL_UART_ErrorCallback+0xb8>)
 8005f98:	480d      	ldr	r0, [pc, #52]	; (8005fd0 <HAL_UART_ErrorCallback+0xbc>)
 8005f9a:	f00e fabf 	bl	801451c <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 8005f9e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8005fa2:	d0cc      	beq.n	8005f3e <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8005fa4:	4601      	mov	r1, r0
 8005fa6:	480b      	ldr	r0, [pc, #44]	; (8005fd4 <HAL_UART_ErrorCallback+0xc0>)
}
 8005fa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8005fac:	f020 bb92 	b.w	80266d4 <iprintf>
 8005fb0:	20002e60 	.word	0x20002e60
 8005fb4:	40005000 	.word	0x40005000
 8005fb8:	40011400 	.word	0x40011400
 8005fbc:	0802d2ac 	.word	0x0802d2ac
 8005fc0:	20001a8c 	.word	0x20001a8c
 8005fc4:	20001b40 	.word	0x20001b40
 8005fc8:	0802d260 	.word	0x0802d260
 8005fcc:	20003034 	.word	0x20003034
 8005fd0:	20002f00 	.word	0x20002f00
 8005fd4:	0802d280 	.word	0x0802d280

08005fd8 <decnxtmodel>:
static int residual = 0;	// left over unsent to LCD bytes when block size overflowed
static int bytesinblocksent = 0; 		// byte count into current block
static char nxtbuffer[NXDL_BUFF_SIZE];
int nxt_abort = 0;			// 1 == abort

int decnxtmodel(char *nex_model) {
 8005fd8:	b510      	push	{r4, lr}
	char lcdmod;

	lcdmod = 'Z';

	if (!(strncmp(nex_model, "MX4832T035", 10))) {
 8005fda:	220a      	movs	r2, #10
 8005fdc:	4918      	ldr	r1, [pc, #96]	; (8006040 <decnxtmodel+0x68>)
int decnxtmodel(char *nex_model) {
 8005fde:	4604      	mov	r4, r0
	if (!(strncmp(nex_model, "MX4832T035", 10))) {
 8005fe0:	f021 fb5a 	bl	8027698 <strncmp>
 8005fe4:	b138      	cbz	r0, 8005ff6 <decnxtmodel+0x1e>
		lcdmod = 'A';
	} else if (!(strncmp(nex_model, "MX4832F035", 10))) {
 8005fe6:	220a      	movs	r2, #10
 8005fe8:	4916      	ldr	r1, [pc, #88]	; (8006044 <decnxtmodel+0x6c>)
 8005fea:	4620      	mov	r0, r4
 8005fec:	f021 fb54 	bl	8027698 <strncmp>
 8005ff0:	b918      	cbnz	r0, 8005ffa <decnxtmodel+0x22>
 8005ff2:	2042      	movs	r0, #66	; 0x42
		lcdmod = 'E';
	} else if (!(strncmp(nex_model, "MX3224F028", 10))) {
		lcdmod = 'F';
	}
	return (lcdmod);
}
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	2041      	movs	r0, #65	; 0x41
 8005ff8:	bd10      	pop	{r4, pc}
	} else if (!(strncmp(nex_model, "MX4832K035", 10))) {
 8005ffa:	220a      	movs	r2, #10
 8005ffc:	4912      	ldr	r1, [pc, #72]	; (8006048 <decnxtmodel+0x70>)
 8005ffe:	4620      	mov	r0, r4
 8006000:	f021 fb4a 	bl	8027698 <strncmp>
 8006004:	b168      	cbz	r0, 8006022 <decnxtmodel+0x4a>
	} else if (!(strncmp(nex_model, "MX4024K032", 10))) {
 8006006:	220a      	movs	r2, #10
 8006008:	4910      	ldr	r1, [pc, #64]	; (800604c <decnxtmodel+0x74>)
 800600a:	4620      	mov	r0, r4
 800600c:	f021 fb44 	bl	8027698 <strncmp>
 8006010:	b148      	cbz	r0, 8006026 <decnxtmodel+0x4e>
	} else if (!(strncmp(nex_model, "MX4024T032", 10))) {
 8006012:	220a      	movs	r2, #10
 8006014:	490e      	ldr	r1, [pc, #56]	; (8006050 <decnxtmodel+0x78>)
 8006016:	4620      	mov	r0, r4
 8006018:	f021 fb3e 	bl	8027698 <strncmp>
 800601c:	b928      	cbnz	r0, 800602a <decnxtmodel+0x52>
 800601e:	2045      	movs	r0, #69	; 0x45
}
 8006020:	bd10      	pop	{r4, pc}
 8006022:	2043      	movs	r0, #67	; 0x43
 8006024:	bd10      	pop	{r4, pc}
 8006026:	2044      	movs	r0, #68	; 0x44
 8006028:	bd10      	pop	{r4, pc}
	} else if (!(strncmp(nex_model, "MX3224F028", 10))) {
 800602a:	220a      	movs	r2, #10
 800602c:	4909      	ldr	r1, [pc, #36]	; (8006054 <decnxtmodel+0x7c>)
 800602e:	4620      	mov	r0, r4
 8006030:	f021 fb32 	bl	8027698 <strncmp>
 8006034:	2800      	cmp	r0, #0
 8006036:	bf14      	ite	ne
 8006038:	205a      	movne	r0, #90	; 0x5a
 800603a:	2046      	moveq	r0, #70	; 0x46
}
 800603c:	bd10      	pop	{r4, pc}
 800603e:	bf00      	nop
 8006040:	0802d2e0 	.word	0x0802d2e0
 8006044:	0802d2ec 	.word	0x0802d2ec
 8006048:	0802d2f8 	.word	0x0802d2f8
 800604c:	0802d304 	.word	0x0802d304
 8006050:	0802d310 	.word	0x0802d310
 8006054:	0802d31c 	.word	0x0802d31c

08006058 <nxt_loader>:
	int i;
	char lcdmod;

//	printf("nextionloader:  fliename=%s, host=%s, len=%u\n", filename, host, nxtfilesize);

	if ((nxtfilesize == 0) || (nxtfilesize == -1)) {
 8006058:	1e53      	subs	r3, r2, #1
 800605a:	3303      	adds	r3, #3
int nxt_loader(char filename[], char host[], uint32_t nxtfilesize) {
 800605c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006060:	b083      	sub	sp, #12
	if ((nxtfilesize == 0) || (nxtfilesize == -1)) {
 8006062:	d86d      	bhi.n	8006140 <nxt_loader+0xe8>

		printf("nxt_loader: nxt file length was bad\n");
		return (-1);
	}

	if (filename[0] == 0) {
 8006064:	7803      	ldrb	r3, [r0, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d064      	beq.n	8006134 <nxt_loader+0xdc>

		printf("nxt_loader: nxt file name was bad\n");
		return (-1);
	}

	if (host[0] == 0) {
 800606a:	780b      	ldrb	r3, [r1, #0]
 800606c:	460f      	mov	r7, r1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d05a      	beq.n	8006128 <nxt_loader+0xd0>

		printf("nxt_loader: nxt host name was bad\n");
		return (-1);
	}

	lcdmod = decnxtmodel(nex_model);
 8006072:	4836      	ldr	r0, [pc, #216]	; (800614c <nxt_loader+0xf4>)
 8006074:	4690      	mov	r8, r2

	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 8006076:	4d36      	ldr	r5, [pc, #216]	; (8006150 <nxt_loader+0xf8>)
	lcdmod = decnxtmodel(nex_model);
 8006078:	f7ff ffae 	bl	8005fd8 <decnxtmodel>
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 800607c:	2202      	movs	r2, #2
	sprintf(newfilename, "/firmware/%s-%c%u.tft", lcdfile, lcdmod, srvlcdbld);
 800607e:	b2c3      	uxtb	r3, r0
 8006080:	4934      	ldr	r1, [pc, #208]	; (8006154 <nxt_loader+0xfc>)
	printf("Attempting to download Nextion firmware %s from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, host);
	osDelay(100);

	nxt_abort = 0;
	nxt_blocksacked = 0;
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 8006082:	f640 34b8 	movw	r4, #3000	; 0xbb8
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 8006086:	602a      	str	r2, [r5, #0]
	sprintf(newfilename, "/firmware/%s-%c%u.tft", lcdfile, lcdmod, srvlcdbld);
 8006088:	4a33      	ldr	r2, [pc, #204]	; (8006158 <nxt_loader+0x100>)
 800608a:	4834      	ldr	r0, [pc, #208]	; (800615c <nxt_loader+0x104>)
 800608c:	6812      	ldr	r2, [r2, #0]
	nxt_abort = 0;
 800608e:	4e34      	ldr	r6, [pc, #208]	; (8006160 <nxt_loader+0x108>)
	sprintf(newfilename, "/firmware/%s-%c%u.tft", lcdfile, lcdmod, srvlcdbld);
 8006090:	9200      	str	r2, [sp, #0]
 8006092:	4a34      	ldr	r2, [pc, #208]	; (8006164 <nxt_loader+0x10c>)
 8006094:	f020 fd08 	bl	8026aa8 <siprintf>
	printf("Attempting to download Nextion firmware %s from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, host);
 8006098:	463a      	mov	r2, r7
 800609a:	4930      	ldr	r1, [pc, #192]	; (800615c <nxt_loader+0x104>)
 800609c:	4832      	ldr	r0, [pc, #200]	; (8006168 <nxt_loader+0x110>)
 800609e:	f020 fb19 	bl	80266d4 <iprintf>
	osDelay(100);
 80060a2:	2064      	movs	r0, #100	; 0x64
 80060a4:	f010 fa96 	bl	80165d4 <osDelay>
	nxt_blocksacked = 0;
 80060a8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8006180 <nxt_loader+0x128>
	nxt_abort = 0;
 80060ac:	2200      	movs	r2, #0
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 80060ae:	4639      	mov	r1, r7
 80060b0:	482a      	ldr	r0, [pc, #168]	; (800615c <nxt_loader+0x104>)
	nxt_abort = 0;
 80060b2:	6032      	str	r2, [r6, #0]
	nxt_blocksacked = 0;
 80060b4:	f8c9 2000 	str.w	r2, [r9]
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 80060b8:	f7fb fdd6 	bl	8001c68 <http_dlclient>

	for (i = 0; i < 3000; i++) {
 80060bc:	e003      	b.n	80060c6 <nxt_loader+0x6e>
		osDelay(1);
		if ((http_downloading != NXT_PRELOADING) || (nxt_abort)) {
 80060be:	6833      	ldr	r3, [r6, #0]
 80060c0:	bb53      	cbnz	r3, 8006118 <nxt_loader+0xc0>
	for (i = 0; i < 3000; i++) {
 80060c2:	3c01      	subs	r4, #1
 80060c4:	d008      	beq.n	80060d8 <nxt_loader+0x80>
		osDelay(1);
 80060c6:	2001      	movs	r0, #1
 80060c8:	f010 fa84 	bl	80165d4 <osDelay>
		if ((http_downloading != NXT_PRELOADING) || (nxt_abort)) {
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d0f5      	beq.n	80060be <nxt_loader+0x66>
			break;
		}		// see if file downloader returned an error before starting LCD upload
	}
	if ((nxt_abort) || (http_downloading == NOT_LOADING)) {
 80060d2:	6832      	ldr	r2, [r6, #0]
 80060d4:	bb02      	cbnz	r2, 8006118 <nxt_loader+0xc0>
 80060d6:	b1fb      	cbz	r3, 8006118 <nxt_loader+0xc0>
		printf("nxt_loader: Server aborted before sending NXT file\n");
		http_downloading = NOT_LOADING;
		return (-1);
	}
	http_downloading = NXT_LOADING;
 80060d8:	2303      	movs	r3, #3
	lcd_startdl(nxtfilesize);	// put LCD into its download new user firmware mode
 80060da:	4640      	mov	r0, r8
	http_downloading = NXT_LOADING;
 80060dc:	602b      	str	r3, [r5, #0]
	lcd_startdl(nxtfilesize);	// put LCD into its download new user firmware mode
 80060de:	f7fd fbf1 	bl	80038c4 <lcd_startdl>
	osDelay(600);				// wait > half a second for LCD to Ack
 80060e2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80060e6:	f010 fa75 	bl	80165d4 <osDelay>
	if (nxt_blocksacked) {		// LCD acks the start, its now in DL mode
 80060ea:	f8d9 4000 	ldr.w	r4, [r9]
 80060ee:	b93c      	cbnz	r4, 8006100 <nxt_loader+0xa8>
		nxt_blocksacked = 0;		// reset counter
		http_dlclient(newfilename, host, (void*) 0);
	} else {
		http_downloading = NOT_LOADING;
		printf("nextionloader: Nextion download not acked start\n");
 80060f0:	481e      	ldr	r0, [pc, #120]	; (800616c <nxt_loader+0x114>)
		http_downloading = NOT_LOADING;
 80060f2:	602c      	str	r4, [r5, #0]
		printf("nextionloader: Nextion download not acked start\n");
 80060f4:	f020 fb8a 	bl	802680c <puts>

	// wait for transfer to complete
	// unblock http client

	return (0);
}
 80060f8:	4620      	mov	r0, r4
 80060fa:	b003      	add	sp, #12
 80060fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nxt_blocksacked = 0;		// reset counter
 8006100:	2200      	movs	r2, #0
		http_dlclient(newfilename, host, (void*) 0);
 8006102:	4639      	mov	r1, r7
 8006104:	4815      	ldr	r0, [pc, #84]	; (800615c <nxt_loader+0x104>)
	return (0);
 8006106:	4614      	mov	r4, r2
		nxt_blocksacked = 0;		// reset counter
 8006108:	f8c9 2000 	str.w	r2, [r9]
		http_dlclient(newfilename, host, (void*) 0);
 800610c:	f7fb fdac 	bl	8001c68 <http_dlclient>
}
 8006110:	4620      	mov	r0, r4
 8006112:	b003      	add	sp, #12
 8006114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("nxt_loader: Server aborted before sending NXT file\n");
 8006118:	4815      	ldr	r0, [pc, #84]	; (8006170 <nxt_loader+0x118>)
		return (-1);
 800611a:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: Server aborted before sending NXT file\n");
 800611e:	f020 fb75 	bl	802680c <puts>
		http_downloading = NOT_LOADING;
 8006122:	2300      	movs	r3, #0
 8006124:	602b      	str	r3, [r5, #0]
		return (-1);
 8006126:	e7e7      	b.n	80060f8 <nxt_loader+0xa0>
		printf("nxt_loader: nxt host name was bad\n");
 8006128:	4812      	ldr	r0, [pc, #72]	; (8006174 <nxt_loader+0x11c>)
		return (-1);
 800612a:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt host name was bad\n");
 800612e:	f020 fb6d 	bl	802680c <puts>
		return (-1);
 8006132:	e7e1      	b.n	80060f8 <nxt_loader+0xa0>
		printf("nxt_loader: nxt file name was bad\n");
 8006134:	4810      	ldr	r0, [pc, #64]	; (8006178 <nxt_loader+0x120>)
		return (-1);
 8006136:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt file name was bad\n");
 800613a:	f020 fb67 	bl	802680c <puts>
		return (-1);
 800613e:	e7db      	b.n	80060f8 <nxt_loader+0xa0>
		printf("nxt_loader: nxt file length was bad\n");
 8006140:	480e      	ldr	r0, [pc, #56]	; (800617c <nxt_loader+0x124>)
		return (-1);
 8006142:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt file length was bad\n");
 8006146:	f020 fb61 	bl	802680c <puts>
		return (-1);
 800614a:	e7d5      	b.n	80060f8 <nxt_loader+0xa0>
 800614c:	20001b50 	.word	0x20001b50
 8006150:	200018dc 	.word	0x200018dc
 8006154:	0802d394 	.word	0x0802d394
 8006158:	20002e08 	.word	0x20002e08
 800615c:	200030e0 	.word	0x200030e0
 8006160:	20003128 	.word	0x20003128
 8006164:	20001a94 	.word	0x20001a94
 8006168:	0802d3ac 	.word	0x0802d3ac
 800616c:	0802d438 	.word	0x0802d438
 8006170:	0802d404 	.word	0x0802d404
 8006174:	0802d370 	.word	0x0802d370
 8006178:	0802d34c 	.word	0x0802d34c
 800617c:	0802d328 	.word	0x0802d328
 8006180:	2000312c 	.word	0x2000312c

08006184 <nxt_sendres>:

// send residual buffer to the LCD
// gets called from rx_callback and from rx_complete
int nxt_sendres() {
 8006184:	b570      	push	{r4, r5, r6, lr}
	int res = 0;

	if ((residual) && (nxt_abort == 0)) {				// residual data from last call to send first
 8006186:	4d13      	ldr	r5, [pc, #76]	; (80061d4 <nxt_sendres+0x50>)
 8006188:	682c      	ldr	r4, [r5, #0]
 800618a:	b11c      	cbz	r4, 8006194 <nxt_sendres+0x10>
 800618c:	4e12      	ldr	r6, [pc, #72]	; (80061d8 <nxt_sendres+0x54>)
 800618e:	6833      	ldr	r3, [r6, #0]
 8006190:	b123      	cbz	r3, 800619c <nxt_sendres+0x18>
	int res = 0;
 8006192:	2400      	movs	r4, #0
		} else {
			while (txdmadone == 0)		// tx in progress
				osDelay(1);
		}
	}
	residual = 0;
 8006194:	2300      	movs	r3, #0
	return (res);
}
 8006196:	4620      	mov	r0, r4
	residual = 0;
 8006198:	602b      	str	r3, [r5, #0]
}
 800619a:	bd70      	pop	{r4, r5, r6, pc}
		if ((res = lcd_writeblock(nxtbuffer, residual)) == -1) {
 800619c:	4621      	mov	r1, r4
 800619e:	480f      	ldr	r0, [pc, #60]	; (80061dc <nxt_sendres+0x58>)
 80061a0:	f7fb ffca 	bl	8002138 <lcd_writeblock>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	4604      	mov	r4, r0
 80061a8:	d00d      	beq.n	80061c6 <nxt_sendres+0x42>
			while (txdmadone == 0)		// tx in progress
 80061aa:	4e0d      	ldr	r6, [pc, #52]	; (80061e0 <nxt_sendres+0x5c>)
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <nxt_sendres+0x10>
				osDelay(1);
 80061b2:	2001      	movs	r0, #1
 80061b4:	f010 fa0e 	bl	80165d4 <osDelay>
			while (txdmadone == 0)		// tx in progress
 80061b8:	6833      	ldr	r3, [r6, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f9      	beq.n	80061b2 <nxt_sendres+0x2e>
	residual = 0;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4620      	mov	r0, r4
	residual = 0;
 80061c2:	602b      	str	r3, [r5, #0]
}
 80061c4:	bd70      	pop	{r4, r5, r6, pc}
			printf("nxt_sendres: failed\n");
 80061c6:	4807      	ldr	r0, [pc, #28]	; (80061e4 <nxt_sendres+0x60>)
 80061c8:	f020 fb20 	bl	802680c <puts>
			nxt_abort = 1;
 80061cc:	2301      	movs	r3, #1
 80061ce:	6033      	str	r3, [r6, #0]
 80061d0:	e7e0      	b.n	8006194 <nxt_sendres+0x10>
 80061d2:	bf00      	nop
 80061d4:	2000338c 	.word	0x2000338c
 80061d8:	20003128 	.word	0x20003128
 80061dc:	20003130 	.word	0x20003130
 80061e0:	20002178 	.word	0x20002178
 80061e4:	0802d468 	.word	0x0802d468

080061e8 <nxt_rx_callback>:
//#define lcd_writeblock(nxtbuffer, residual) printf("%d ",residual)

// http callback for Nextion firmware download
// this gets called for each downloaded chunk received
//
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *buf;
	struct pbuf *q;
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 80061ec:	2000      	movs	r0, #0
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 80061ee:	461c      	mov	r4, r3
	static int blockssent = 0;
	static int qlentot = 0, tot_sent = 0;

//	printf("nxt_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 80061f0:	4690      	mov	r8, r2
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 80061f2:	ed2d 8b02 	vpush	{d8}
 80061f6:	b089      	sub	sp, #36	; 0x24
 80061f8:	ee08 1a10 	vmov	s16, r1
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 80061fc:	9005      	str	r0, [sp, #20]
 80061fe:	9006      	str	r0, [sp, #24]
	LWIP_ASSERT("p != NULL", p != NULL);
 8006200:	2a00      	cmp	r2, #0
 8006202:	f000 80f0 	beq.w	80063e6 <nxt_rx_callback+0x1fe>
	if (err != ERR_OK) {
 8006206:	2c00      	cmp	r4, #0
 8006208:	f040 80e2 	bne.w	80063d0 <nxt_rx_callback+0x1e8>
		return;
	}

//	printf("nxt_rx_callback1: nxt_abort=%d, blockssent=%d, nxt_blocksacked=%d, q->len=%d\n", nxt_abort, blockssent,	nxt_blocksacked, p->len);

	if (nxt_abort) {
 800620c:	f8df b268 	ldr.w	fp, [pc, #616]	; 8006478 <nxt_rx_callback+0x290>
 8006210:	f8db 3000 	ldr.w	r3, [fp]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d152      	bne.n	80062be <nxt_rx_callback+0xd6>
		http_downloading = NOT_LOADING;
	}

	if (http_downloading == NXT_PRELOADING) {
 8006218:	4b86      	ldr	r3, [pc, #536]	; (8006434 <nxt_rx_callback+0x24c>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	2a02      	cmp	r2, #2
 800621e:	d101      	bne.n	8006224 <nxt_rx_callback+0x3c>
		http_downloading = NXT_LOADING;
 8006220:	2203      	movs	r2, #3
 8006222:	601a      	str	r2, [r3, #0]
	}

	i = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	9302      	str	r3, [sp, #8]

	for (q = p; q != NULL; q = q->next) {
 8006228:	f1b8 0f00 	cmp.w	r8, #0
 800622c:	f000 80bb 	beq.w	80063a6 <nxt_rx_callback+0x1be>
 8006230:	4b81      	ldr	r3, [pc, #516]	; (8006438 <nxt_rx_callback+0x250>)
 8006232:	4644      	mov	r4, r8
 8006234:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800647c <nxt_rx_callback+0x294>
 8006238:	4d80      	ldr	r5, [pc, #512]	; (800643c <nxt_rx_callback+0x254>)
 800623a:	f1c3 0a02 	rsb	sl, r3, #2
 800623e:	4e80      	ldr	r6, [pc, #512]	; (8006440 <nxt_rx_callback+0x258>)
 8006240:	e023      	b.n	800628a <nxt_rx_callback+0xa2>
			if (nxt_sendres() == -1) {	// send residual (if any)
				return (-1);		// abort will now be set
			}
		}

		pktlen = q->len;
 8006242:	9303      	str	r3, [sp, #12]

		if ((pktlen + bytesinblocksent) > 4096) {	// will we will overflow the 4096 boundary?
 8006244:	6832      	ldr	r2, [r6, #0]
 8006246:	9b03      	ldr	r3, [sp, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	f300 8084 	bgt.w	800635a <nxt_rx_callback+0x172>
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
				nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
			}

		} else {
			len = pktlen;		// just try to send what we have got
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	9306      	str	r3, [sp, #24]
		}

		tot_sent += len;
 8006256:	682b      	ldr	r3, [r5, #0]
 8006258:	9a06      	ldr	r2, [sp, #24]
 800625a:	4413      	add	r3, r2
		if (nxt_abort == 0) {
 800625c:	f8db 2000 	ldr.w	r2, [fp]
		tot_sent += len;
 8006260:	602b      	str	r3, [r5, #0]
		if (nxt_abort == 0) {
 8006262:	2a00      	cmp	r2, #0
 8006264:	d02e      	beq.n	80062c4 <nxt_rx_callback+0xdc>
				blockssent++;
			}
		}

//		printf("nxt_rx_5: blk=%d, down_total=%d, tot_sent=%d, qlentot=%d\n", blockssent, down_total, tot_sent, qlentot);
		down_total += q->len;		// downloaded but not necessarily all sent to lcd
 8006266:	4a77      	ldr	r2, [pc, #476]	; (8006444 <nxt_rx_callback+0x25c>)
		altcp_recved(pcb, p->tot_len);
 8006268:	ee18 0a10 	vmov	r0, s16
		down_total += q->len;		// downloaded but not necessarily all sent to lcd
 800626c:	8963      	ldrh	r3, [r4, #10]
 800626e:	6817      	ldr	r7, [r2, #0]
		altcp_recved(pcb, p->tot_len);
 8006270:	f8b8 1008 	ldrh.w	r1, [r8, #8]
		down_total += q->len;		// downloaded but not necessarily all sent to lcd
 8006274:	443b      	add	r3, r7
 8006276:	6013      	str	r3, [r2, #0]
		altcp_recved(pcb, p->tot_len);
 8006278:	f016 fde2 	bl	801ce40 <tcp_recved>
		pbuf_free(p);
 800627c:	4640      	mov	r0, r8
 800627e:	f016 f95f 	bl	801c540 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 8006282:	6824      	ldr	r4, [r4, #0]
 8006284:	2c00      	cmp	r4, #0
 8006286:	f000 808e 	beq.w	80063a6 <nxt_rx_callback+0x1be>
		qlentot += q->len;
 800628a:	8963      	ldrh	r3, [r4, #10]
 800628c:	f8d9 2000 	ldr.w	r2, [r9]
 8006290:	441a      	add	r2, r3
 8006292:	f8c9 2000 	str.w	r2, [r9]
		tlen = q->tot_len;
 8006296:	8922      	ldrh	r2, [r4, #8]
 8006298:	9205      	str	r2, [sp, #20]
		if (residual > 0) {
 800629a:	4a6b      	ldr	r2, [pc, #428]	; (8006448 <nxt_rx_callback+0x260>)
		len = q->len;
 800629c:	9306      	str	r3, [sp, #24]
		if (residual > 0) {
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	ddce      	ble.n	8006242 <nxt_rx_callback+0x5a>
			tot_sent += residual;
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	4413      	add	r3, r2
 80062a8:	602b      	str	r3, [r5, #0]
			bytesinblocksent += residual;
 80062aa:	6833      	ldr	r3, [r6, #0]
 80062ac:	4413      	add	r3, r2
 80062ae:	6033      	str	r3, [r6, #0]
			if (nxt_sendres() == -1) {	// send residual (if any)
 80062b0:	f7ff ff68 	bl	8006184 <nxt_sendres>
 80062b4:	1c42      	adds	r2, r0, #1
 80062b6:	f000 809d 	beq.w	80063f4 <nxt_rx_callback+0x20c>
		pktlen = q->len;
 80062ba:	8963      	ldrh	r3, [r4, #10]
 80062bc:	e7c1      	b.n	8006242 <nxt_rx_callback+0x5a>
		http_downloading = NOT_LOADING;
 80062be:	4b5d      	ldr	r3, [pc, #372]	; (8006434 <nxt_rx_callback+0x24c>)
 80062c0:	601c      	str	r4, [r3, #0]
	if (http_downloading == NXT_PRELOADING) {
 80062c2:	e7af      	b.n	8006224 <nxt_rx_callback+0x3c>
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 80062c4:	9906      	ldr	r1, [sp, #24]
 80062c6:	6860      	ldr	r0, [r4, #4]
 80062c8:	f7fb ff36 	bl	8002138 <lcd_writeblock>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	d103      	bne.n	80062e0 <nxt_rx_callback+0xf8>
 80062d8:	e093      	b.n	8006402 <nxt_rx_callback+0x21a>
				osDelay(1);
 80062da:	2001      	movs	r0, #1
 80062dc:	f010 f97a 	bl	80165d4 <osDelay>
			while (txdmadone == 0)		// tx in progress
 80062e0:	4b5a      	ldr	r3, [pc, #360]	; (800644c <nxt_rx_callback+0x264>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0f8      	beq.n	80062da <nxt_rx_callback+0xf2>
			bytesinblocksent += len;
 80062e8:	6832      	ldr	r2, [r6, #0]
 80062ea:	9b06      	ldr	r3, [sp, #24]
 80062ec:	4413      	add	r3, r2
			if (bytesinblocksent > 4096) {
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
			bytesinblocksent += len;
 80062f2:	6033      	str	r3, [r6, #0]
			if (bytesinblocksent > 4096) {
 80062f4:	dc52      	bgt.n	800639c <nxt_rx_callback+0x1b4>
			if (bytesinblocksent == 4096) {
 80062f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fa:	d1b4      	bne.n	8006266 <nxt_rx_callback+0x7e>
				lcd_rxdma();		// get any new characters received
 80062fc:	f7fb ff74 	bl	80021e8 <lcd_rxdma>
				for (i = 0; i < 2000; i++) {
 8006300:	2300      	movs	r3, #0
 8006302:	9302      	str	r3, [sp, #8]
 8006304:	9b02      	ldr	r3, [sp, #8]
 8006306:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800630a:	db07      	blt.n	800631c <nxt_rx_callback+0x134>
 800630c:	e052      	b.n	80063b4 <nxt_rx_callback+0x1cc>
 800630e:	9b02      	ldr	r3, [sp, #8]
 8006310:	3301      	adds	r3, #1
 8006312:	9302      	str	r3, [sp, #8]
 8006314:	9b02      	ldr	r3, [sp, #8]
 8006316:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800631a:	da4b      	bge.n	80063b4 <nxt_rx_callback+0x1cc>
					ch = lcd_getc();
 800631c:	f7fb ffa2 	bl	8002264 <lcd_getc>
 8006320:	4603      	mov	r3, r0
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 8006322:	484b      	ldr	r0, [pc, #300]	; (8006450 <nxt_rx_callback+0x268>)
					ch = lcd_getc();
 8006324:	9307      	str	r3, [sp, #28]
					if (ch >= 0) {
 8006326:	9b07      	ldr	r3, [sp, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	db05      	blt.n	8006338 <nxt_rx_callback+0x150>
						if (ch == 0x05) {
 800632c:	9b07      	ldr	r3, [sp, #28]
 800632e:	2b05      	cmp	r3, #5
 8006330:	d040      	beq.n	80063b4 <nxt_rx_callback+0x1cc>
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 8006332:	9907      	ldr	r1, [sp, #28]
 8006334:	f020 f9ce 	bl	80266d4 <iprintf>
					osDelay(1);
 8006338:	2001      	movs	r0, #1
 800633a:	f010 f94b 	bl	80165d4 <osDelay>
					lcd_rxdma();		// get any new characters received
 800633e:	f7fb ff53 	bl	80021e8 <lcd_rxdma>
					if (i == 1999) {
 8006342:	9a02      	ldr	r2, [sp, #8]
 8006344:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8006348:	429a      	cmp	r2, r3
 800634a:	d1e0      	bne.n	800630e <nxt_rx_callback+0x126>
						printf("MISSED ACK\n");
 800634c:	4841      	ldr	r0, [pc, #260]	; (8006454 <nxt_rx_callback+0x26c>)
 800634e:	f020 fa5d 	bl	802680c <puts>
						ch = -1;
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	e7d9      	b.n	800630e <nxt_rx_callback+0x126>
			len = 4096 - bytesinblocksent;		// we only have to send len this time
 800635a:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
			buf = q->payload;
 800635e:	6860      	ldr	r0, [r4, #4]
			len = 4096 - bytesinblocksent;		// we only have to send len this time
 8006360:	9206      	str	r2, [sp, #24]
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8006362:	9b06      	ldr	r3, [sp, #24]
 8006364:	9302      	str	r3, [sp, #8]
 8006366:	9a02      	ldr	r2, [sp, #8]
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	429a      	cmp	r2, r3
 800636c:	f6bf af73 	bge.w	8006256 <nxt_rx_callback+0x6e>
 8006370:	4b35      	ldr	r3, [pc, #212]	; (8006448 <nxt_rx_callback+0x260>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	4b30      	ldr	r3, [pc, #192]	; (8006438 <nxt_rx_callback+0x250>)
 8006376:	3a01      	subs	r2, #1
 8006378:	441a      	add	r2, r3
				nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 800637a:	9b02      	ldr	r3, [sp, #8]
 800637c:	eb0a 0c02 	add.w	ip, sl, r2
 8006380:	5cc1      	ldrb	r1, [r0, r3]
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8006382:	9b02      	ldr	r3, [sp, #8]
				nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 8006384:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8006388:	3301      	adds	r3, #1
 800638a:	9302      	str	r3, [sp, #8]
 800638c:	9902      	ldr	r1, [sp, #8]
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	4299      	cmp	r1, r3
 8006392:	dbf2      	blt.n	800637a <nxt_rx_callback+0x192>
 8006394:	4b2c      	ldr	r3, [pc, #176]	; (8006448 <nxt_rx_callback+0x260>)
 8006396:	f8c3 c000 	str.w	ip, [r3]
 800639a:	e75c      	b.n	8006256 <nxt_rx_callback+0x6e>
				printf("BLOCK OVERRUN\n");
 800639c:	482e      	ldr	r0, [pc, #184]	; (8006458 <nxt_rx_callback+0x270>)
 800639e:	f020 fa35 	bl	802680c <puts>
			if (bytesinblocksent == 4096) {
 80063a2:	6833      	ldr	r3, [r6, #0]
 80063a4:	e7a7      	b.n	80062f6 <nxt_rx_callback+0x10e>
	}
//		p = p->next;
//		printf("nxt_rx_4: len=%d, tot=%d qlentot=%d\n",  len, down_total, qlentot);
	return (0);
 80063a6:	2200      	movs	r2, #0
}
 80063a8:	4610      	mov	r0, r2
 80063aa:	b009      	add	sp, #36	; 0x24
 80063ac:	ecbd 8b02 	vpop	{d8}
 80063b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (ch < 0) {		// error
 80063b4:	9b07      	ldr	r3, [sp, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	db31      	blt.n	800641e <nxt_rx_callback+0x236>
					nxt_blocksacked++;
 80063ba:	4928      	ldr	r1, [pc, #160]	; (800645c <nxt_rx_callback+0x274>)
				bytesinblocksent = 0;		// start new block
 80063bc:	2300      	movs	r3, #0
				blockssent++;
 80063be:	4a28      	ldr	r2, [pc, #160]	; (8006460 <nxt_rx_callback+0x278>)
				bytesinblocksent = 0;		// start new block
 80063c0:	6033      	str	r3, [r6, #0]
					nxt_blocksacked++;
 80063c2:	680b      	ldr	r3, [r1, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	600b      	str	r3, [r1, #0]
				blockssent++;
 80063c8:	6813      	ldr	r3, [r2, #0]
 80063ca:	3301      	adds	r3, #1
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e74a      	b.n	8006266 <nxt_rx_callback+0x7e>
		putchar('@');
 80063d0:	2040      	movs	r0, #64	; 0x40
 80063d2:	f020 f997 	bl	8026704 <putchar>
		printlwiperr(err);
 80063d6:	4620      	mov	r0, r4
}
 80063d8:	b009      	add	sp, #36	; 0x24
 80063da:	ecbd 8b02 	vpop	{d8}
 80063de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 80063e2:	f7fb bc25 	b.w	8001c30 <printlwiperr>
	LWIP_ASSERT("p != NULL", p != NULL);
 80063e6:	4b1f      	ldr	r3, [pc, #124]	; (8006464 <nxt_rx_callback+0x27c>)
 80063e8:	22a3      	movs	r2, #163	; 0xa3
 80063ea:	491f      	ldr	r1, [pc, #124]	; (8006468 <nxt_rx_callback+0x280>)
 80063ec:	481f      	ldr	r0, [pc, #124]	; (800646c <nxt_rx_callback+0x284>)
 80063ee:	f020 f971 	bl	80266d4 <iprintf>
 80063f2:	e708      	b.n	8006206 <nxt_rx_callback+0x1e>
 80063f4:	4602      	mov	r2, r0
}
 80063f6:	4610      	mov	r0, r2
 80063f8:	b009      	add	sp, #36	; 0x24
 80063fa:	ecbd 8b02 	vpop	{d8}
 80063fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				printf("NXT Write1 failed from http client\n");
 8006402:	9001      	str	r0, [sp, #4]
 8006404:	481a      	ldr	r0, [pc, #104]	; (8006470 <nxt_rx_callback+0x288>)
 8006406:	f020 fa01 	bl	802680c <puts>
				return (-1);
 800640a:	9a01      	ldr	r2, [sp, #4]
				nxt_abort = 1;
 800640c:	2301      	movs	r3, #1
}
 800640e:	4610      	mov	r0, r2
				nxt_abort = 1;
 8006410:	f8cb 3000 	str.w	r3, [fp]
}
 8006414:	b009      	add	sp, #36	; 0x24
 8006416:	ecbd 8b02 	vpop	{d8}
 800641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return (-1);
 800641e:	f04f 32ff 	mov.w	r2, #4294967295
					nxt_abort = 1;
 8006422:	2301      	movs	r3, #1
					printf("ABORT ERR ON ACK\n");
 8006424:	4813      	ldr	r0, [pc, #76]	; (8006474 <nxt_rx_callback+0x28c>)
					return (-1);
 8006426:	9201      	str	r2, [sp, #4]
					nxt_abort = 1;
 8006428:	f8cb 3000 	str.w	r3, [fp]
					printf("ABORT ERR ON ACK\n");
 800642c:	f020 f9ee 	bl	802680c <puts>
					return (-1);
 8006430:	9a01      	ldr	r2, [sp, #4]
 8006432:	e7b9      	b.n	80063a8 <nxt_rx_callback+0x1c0>
 8006434:	200018dc 	.word	0x200018dc
 8006438:	20003130 	.word	0x20003130
 800643c:	20003390 	.word	0x20003390
 8006440:	200030dc 	.word	0x200030dc
 8006444:	20001690 	.word	0x20001690
 8006448:	2000338c 	.word	0x2000338c
 800644c:	20002178 	.word	0x20002178
 8006450:	0802d4cc 	.word	0x0802d4cc
 8006454:	0802d4e0 	.word	0x0802d4e0
 8006458:	0802d4bc 	.word	0x0802d4bc
 800645c:	2000312c 	.word	0x2000312c
 8006460:	200030d8 	.word	0x200030d8
 8006464:	0802d47c 	.word	0x0802d47c
 8006468:	08046ce0 	.word	0x08046ce0
 800646c:	0802b3cc 	.word	0x0802b3cc
 8006470:	0802d498 	.word	0x0802d498
 8006474:	0802d4ec 	.word	0x0802d4ec
 8006478:	20003128 	.word	0x20003128
 800647c:	20003388 	.word	0x20003388

08006480 <nxt_check>:

// Get Nextion version and see if we are current
int nxt_check() {
 8006480:	b510      	push	{r4, lr}
	int res;

	if (nex_model[0] == '\0') {
 8006482:	4c16      	ldr	r4, [pc, #88]	; (80064dc <nxt_check+0x5c>)
 8006484:	7823      	ldrb	r3, [r4, #0]
 8006486:	b14b      	cbz	r3, 800649c <nxt_check+0x1c>
		if (nex_model[0] == '\0')
			return (-1);
	}

// find LCD sys0 value
	if ((lcd_sys0 & 0xffff == 0) || ((lcd_sys0 & 0xffff) == 0xffff)) {
 8006488:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <nxt_check+0x60>)
 800648a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	6813      	ldr	r3, [r2, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	428b      	cmp	r3, r1
 8006496:	d01b      	beq.n	80064d0 <nxt_check+0x50>
		printf("LCD's stored buildno was invalid\n");
		return (-2);
	}
	return (lcd_sys0);
 8006498:	6810      	ldr	r0, [r2, #0]
}
 800649a:	bd10      	pop	{r4, pc}
		lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 800649c:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80064a0:	f7fc fe64 	bl	800316c <lcd_init>
		lcd_getid();	// try again to read its model number etc
 80064a4:	f7fd f9be 	bl	8003824 <lcd_getid>
		printf("nxt_check: Trying to reset the LCD\n");
 80064a8:	480e      	ldr	r0, [pc, #56]	; (80064e4 <nxt_check+0x64>)
 80064aa:	f020 f9af 	bl	802680c <puts>
		osDelay(1500);
 80064ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80064b2:	f010 f88f 	bl	80165d4 <osDelay>
		lcd_init(230400);  // reset LCD to normal speed
 80064b6:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80064ba:	f7fc fe57 	bl	800316c <lcd_init>
		osDelay(100);
 80064be:	2064      	movs	r0, #100	; 0x64
 80064c0:	f010 f888 	bl	80165d4 <osDelay>
		if (nex_model[0] == '\0')
 80064c4:	7823      	ldrb	r3, [r4, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1de      	bne.n	8006488 <nxt_check+0x8>
			return (-1);
 80064ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80064ce:	bd10      	pop	{r4, pc}
		printf("LCD's stored buildno was invalid\n");
 80064d0:	4805      	ldr	r0, [pc, #20]	; (80064e8 <nxt_check+0x68>)
 80064d2:	f020 f99b 	bl	802680c <puts>
		return (-2);
 80064d6:	f06f 0001 	mvn.w	r0, #1
}
 80064da:	bd10      	pop	{r4, pc}
 80064dc:	20001b50 	.word	0x20001b50
 80064e0:	20000014 	.word	0x20000014
 80064e4:	0802d500 	.word	0x0802d500
 80064e8:	0802d524 	.word	0x0802d524

080064ec <lcdupneeded>:

int lcdupneeded() {
	if (srvlcdbld) {		// not 0 from the server
 80064ec:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <lcdupneeded+0x34>)
int lcdupneeded() {
 80064ee:	b510      	push	{r4, lr}
	if (srvlcdbld) {		// not 0 from the server
 80064f0:	681c      	ldr	r4, [r3, #0]
 80064f2:	b184      	cbz	r4, 8006516 <lcdupneeded+0x2a>
		if ((lcd_sys0 & 0xffff) != srvlcdbld) 	{ // this LCD doesent match the build presented by the server
 80064f4:	4a0b      	ldr	r2, [pc, #44]	; (8006524 <lcdupneeded+0x38>)
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	429c      	cmp	r4, r3
 80064fc:	d006      	beq.n	800650c <lcdupneeded+0x20>
			printf("LCD server build %d, lcd has %d\n",srvlcdbld,lcd_sys0);
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	4621      	mov	r1, r4
 8006502:	4809      	ldr	r0, [pc, #36]	; (8006528 <lcdupneeded+0x3c>)
 8006504:	f020 f8e6 	bl	80266d4 <iprintf>
			return (1);
 8006508:	2001      	movs	r0, #1
		printf("LCD firmware matched\n");
	} else {
		printf("LCD firmware match bypassed\n");
	}
	return (0);
}
 800650a:	bd10      	pop	{r4, pc}
		printf("LCD firmware matched\n");
 800650c:	4807      	ldr	r0, [pc, #28]	; (800652c <lcdupneeded+0x40>)
 800650e:	f020 f97d 	bl	802680c <puts>
	return (0);
 8006512:	2000      	movs	r0, #0
}
 8006514:	bd10      	pop	{r4, pc}
		printf("LCD firmware match bypassed\n");
 8006516:	4806      	ldr	r0, [pc, #24]	; (8006530 <lcdupneeded+0x44>)
 8006518:	f020 f978 	bl	802680c <puts>
	return (0);
 800651c:	4620      	mov	r0, r4
}
 800651e:	bd10      	pop	{r4, pc}
 8006520:	20002e08 	.word	0x20002e08
 8006524:	20000014 	.word	0x20000014
 8006528:	0802d548 	.word	0x0802d548
 800652c:	0802d56c 	.word	0x0802d56c
 8006530:	0802d584 	.word	0x0802d584

08006534 <nxt_update>:

///  Check if LCD needs updating and update it if so
nxt_update() {
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t lcdbld;
	int i;


	if (nxt_check() == -1) {		// we could not identify LCD
 8006536:	f7ff ffa3 	bl	8006480 <nxt_check>
 800653a:	3001      	adds	r0, #1
 800653c:	d04e      	beq.n	80065dc <nxt_update+0xa8>
		printf("nxt_update: LCD not identified\n");
	} else {
		if (srvlcdbld == -2) {		// LCD user firmware might be corrupted
 800653e:	4c2c      	ldr	r4, [pc, #176]	; (80065f0 <nxt_update+0xbc>)
 8006540:	6821      	ldr	r1, [r4, #0]
 8006542:	1c8b      	adds	r3, r1, #2
 8006544:	d04f      	beq.n	80065e6 <nxt_update+0xb2>
	if (srvlcdbld) {		// not 0 from the server
 8006546:	2900      	cmp	r1, #0
 8006548:	d044      	beq.n	80065d4 <nxt_update+0xa0>
		if ((lcd_sys0 & 0xffff) != srvlcdbld) 	{ // this LCD doesent match the build presented by the server
 800654a:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <nxt_update+0xc0>)
 800654c:	6813      	ldr	r3, [r2, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	4299      	cmp	r1, r3
 8006552:	d106      	bne.n	8006562 <nxt_update+0x2e>
		printf("LCD firmware matched\n");
 8006554:	4828      	ldr	r0, [pc, #160]	; (80065f8 <nxt_update+0xc4>)
 8006556:	f020 f959 	bl	802680c <puts>
				osDelay(400);
				lcd_putsys0(srvlcdbld);//  write back this new lcd build ver (NON VOLATILE IN LCD) twice for luck
			}
			lcd_txblocked = 0;		// unblock LCD sending blocked
		} else {
			http_downloading = NOT_LOADING;
 800655a:	4b28      	ldr	r3, [pc, #160]	; (80065fc <nxt_update+0xc8>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8006560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			printf("LCD server build %d, lcd has %d\n",srvlcdbld,lcd_sys0);
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	4826      	ldr	r0, [pc, #152]	; (8006600 <nxt_update+0xcc>)
 8006566:	f020 f8b5 	bl	80266d4 <iprintf>
			if (nxt_loader(lcdfile, loaderhost, lcdlen) == 0) {		// valid source file
 800656a:	4b26      	ldr	r3, [pc, #152]	; (8006604 <nxt_update+0xd0>)
 800656c:	4926      	ldr	r1, [pc, #152]	; (8006608 <nxt_update+0xd4>)
 800656e:	4827      	ldr	r0, [pc, #156]	; (800660c <nxt_update+0xd8>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	f7ff fd71 	bl	8006058 <nxt_loader>
 8006576:	bb48      	cbnz	r0, 80065cc <nxt_update+0x98>
				while ((http_downloading) && (nxt_abort == 0)) {
 8006578:	4d20      	ldr	r5, [pc, #128]	; (80065fc <nxt_update+0xc8>)
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	b16b      	cbz	r3, 800659a <nxt_update+0x66>
 800657e:	4f24      	ldr	r7, [pc, #144]	; (8006610 <nxt_update+0xdc>)
					HAL_IWDG_Refresh(&hiwdg);
 8006580:	4e24      	ldr	r6, [pc, #144]	; (8006614 <nxt_update+0xe0>)
 8006582:	e006      	b.n	8006592 <nxt_update+0x5e>
 8006584:	f007 fac4 	bl	800db10 <HAL_IWDG_Refresh>
					osDelay(5);
 8006588:	2005      	movs	r0, #5
 800658a:	f010 f823 	bl	80165d4 <osDelay>
				while ((http_downloading) && (nxt_abort == 0)) {
 800658e:	682b      	ldr	r3, [r5, #0]
 8006590:	b11b      	cbz	r3, 800659a <nxt_update+0x66>
 8006592:	683b      	ldr	r3, [r7, #0]
					HAL_IWDG_Refresh(&hiwdg);
 8006594:	4630      	mov	r0, r6
				while ((http_downloading) && (nxt_abort == 0)) {
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f4      	beq.n	8006584 <nxt_update+0x50>
				osDelay(2000);
 800659a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800659e:	f010 f819 	bl	80165d4 <osDelay>
				printf("Attempting LCD re-sync\n");
 80065a2:	481d      	ldr	r0, [pc, #116]	; (8006618 <nxt_update+0xe4>)
 80065a4:	f020 f932 	bl	802680c <puts>
				lcd_init(230400);	// resync hardware
 80065a8:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80065ac:	f7fc fdde 	bl	800316c <lcd_init>
				osDelay(400);
 80065b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80065b4:	f010 f80e 	bl	80165d4 <osDelay>
				lcd_putsys0(srvlcdbld);//  write back this new lcd build ver (NON VOLATILE IN LCD)
 80065b8:	6820      	ldr	r0, [r4, #0]
 80065ba:	f7fd f963 	bl	8003884 <lcd_putsys0>
				osDelay(400);
 80065be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80065c2:	f010 f807 	bl	80165d4 <osDelay>
				lcd_putsys0(srvlcdbld);//  write back this new lcd build ver (NON VOLATILE IN LCD) twice for luck
 80065c6:	6820      	ldr	r0, [r4, #0]
 80065c8:	f7fd f95c 	bl	8003884 <lcd_putsys0>
			lcd_txblocked = 0;		// unblock LCD sending blocked
 80065cc:	4b13      	ldr	r3, [pc, #76]	; (800661c <nxt_update+0xe8>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
}
 80065d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("LCD firmware match bypassed\n");
 80065d4:	4812      	ldr	r0, [pc, #72]	; (8006620 <nxt_update+0xec>)
 80065d6:	f020 f919 	bl	802680c <puts>
 80065da:	e7be      	b.n	800655a <nxt_update+0x26>
		printf("nxt_update: LCD not identified\n");
 80065dc:	4811      	ldr	r0, [pc, #68]	; (8006624 <nxt_update+0xf0>)
}
 80065de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("nxt_update: LCD not identified\n");
 80065e2:	f020 b913 	b.w	802680c <puts>
			printf("LCD firmware corrupted?\n");
 80065e6:	4810      	ldr	r0, [pc, #64]	; (8006628 <nxt_update+0xf4>)
 80065e8:	f020 f910 	bl	802680c <puts>
	if (srvlcdbld) {		// not 0 from the server
 80065ec:	6821      	ldr	r1, [r4, #0]
 80065ee:	e7aa      	b.n	8006546 <nxt_update+0x12>
 80065f0:	20002e08 	.word	0x20002e08
 80065f4:	20000014 	.word	0x20000014
 80065f8:	0802d56c 	.word	0x0802d56c
 80065fc:	200018dc 	.word	0x200018dc
 8006600:	0802d548 	.word	0x0802d548
 8006604:	20001ab4 	.word	0x20001ab4
 8006608:	2000001c 	.word	0x2000001c
 800660c:	20001a94 	.word	0x20001a94
 8006610:	20003128 	.word	0x20003128
 8006614:	2000268c 	.word	0x2000268c
 8006618:	0802d5d8 	.word	0x0802d5d8
 800661c:	20001a90 	.word	0x20001a90
 8006620:	0802d584 	.word	0x0802d584
 8006624:	0802d5a0 	.word	0x0802d5a0
 8006628:	0802d5c0 	.word	0x0802d5c0
 800662c:	ffffffff 	.word	0xffffffff

08006630 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8006630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006634:	ed2d 8b02 	vpush	{d8}
 8006638:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 800663a:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 800663c:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 800663e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8006642:	ae0c      	add	r6, sp, #48	; 0x30
 8006644:	4f6e      	ldr	r7, [pc, #440]	; (8006800 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8006646:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8006828 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 800664a:	f00f ffc3 	bl	80165d4 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 800664e:	2301      	movs	r3, #1
 8006650:	9600      	str	r6, [sp, #0]
 8006652:	b2aa      	uxth	r2, r5
 8006654:	21c1      	movs	r1, #193	; 0xc1
 8006656:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 8006658:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 800665a:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800665e:	f007 f86d 	bl	800d73c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006662:	4604      	mov	r4, r0
 8006664:	2800      	cmp	r0, #0
 8006666:	f040 80a6 	bne.w	80067b6 <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 800666a:	3501      	adds	r5, #1
 800666c:	2d04      	cmp	r5, #4
 800666e:	d1ee      	bne.n	800664e <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8006670:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 8006674:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8006678:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 800667c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8006680:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8006684:	485f      	ldr	r0, [pc, #380]	; (8006804 <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 8006686:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800668a:	495f      	ldr	r1, [pc, #380]	; (8006808 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 800668c:	0992      	lsrs	r2, r2, #6
	t = tr;
 800668e:	099c      	lsrs	r4, r3, #6
	p = pr;
 8006690:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8006694:	4a5d      	ldr	r2, [pc, #372]	; (800680c <getpressure115.part.0+0x1dc>)
	t = tr;
 8006696:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 800669a:	119d      	asrs	r5, r3, #6
	p = pr;
 800669c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 80066a0:	2400      	movs	r4, #0
	t = tr;
 80066a2:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80066a6:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 80066aa:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 80066ae:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80066b2:	ed9d 7b08 	vldr	d7, [sp, #32]
 80066b6:	ed91 4b00 	vldr	d4, [r1]
 80066ba:	4955      	ldr	r1, [pc, #340]	; (8006810 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 80066bc:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80066be:	eea1 4b07 	vfma.f64	d4, d1, d7
 80066c2:	ed91 6b00 	vldr	d6, [r1]
 80066c6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80066ca:	ed92 0b00 	vldr	d0, [r2]
 80066ce:	eeb0 7b46 	vmov.f64	d7, d6
 80066d2:	ed9d 2b08 	vldr	d2, [sp, #32]
 80066d6:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80066da:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 80067d0 <getpressure115.part.0+0x1a0>
 80066de:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80067d8 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80066e2:	eea0 7b02 	vfma.f64	d7, d0, d2
 80066e6:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80066ea:	ed9d 6b06 	vldr	d6, [sp, #24]
 80066ee:	eea6 5b03 	vfma.f64	d5, d6, d3
 80066f2:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 80066f6:	ed9d 0b06 	vldr	d0, [sp, #24]
 80066fa:	f020 f937 	bl	802696c <modf>
	t = tr * -0.1706 + 112.27; //C
 80066fe:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8006702:	4944      	ldr	r1, [pc, #272]	; (8006814 <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006704:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 8006708:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 800670c:	4b42      	ldr	r3, [pc, #264]	; (8006818 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 800670e:	2264      	movs	r2, #100	; 0x64
 8006710:	4842      	ldr	r0, [pc, #264]	; (800681c <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 8006712:	ed9f 2b33 	vldr	d2, [pc, #204]	; 80067e0 <getpressure115.part.0+0x1b0>
 8006716:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80067e8 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 800671a:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 800671e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8006722:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80067f0 <getpressure115.part.0+0x1c0>
 8006726:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 800672a:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800672e:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 8006732:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006736:	ed9f 2b30 	vldr	d2, [pc, #192]	; 80067f8 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800673a:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 800673e:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 8006742:	4b37      	ldr	r3, [pc, #220]	; (8006820 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 8006744:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8006748:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800674c:	4935      	ldr	r1, [pc, #212]	; (8006824 <getpressure115.part.0+0x1f4>)
	temperature = t;
 800674e:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 8006752:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006756:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 800675a:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800675e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006762:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 8006766:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800676a:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 800676e:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006772:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 8006776:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800677a:	feb8 7b47 	vrinta.f64	d7, d7
 800677e:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 8006782:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006786:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800678a:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 800678e:	ee16 3a10 	vmov	r3, s12
 8006792:	fb02 f303 	mul.w	r3, r2, r3
 8006796:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006798:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 800679c:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800679e:	ee17 2a10 	vmov	r2, s14
}
 80067a2:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067a4:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 80067a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067ac:	b00f      	add	sp, #60	; 0x3c
 80067ae:	ecbd 8b02 	vpop	{d8}
 80067b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80067b6:	4648      	mov	r0, r9
 80067b8:	4621      	mov	r1, r4
 80067ba:	f01f ff8b 	bl	80266d4 <iprintf>
			if (i == 3)
 80067be:	2d03      	cmp	r5, #3
 80067c0:	f47f af53 	bne.w	800666a <getpressure115.part.0+0x3a>
}
 80067c4:	4620      	mov	r0, r4
 80067c6:	b00f      	add	sp, #60	; 0x3c
 80067c8:	ecbd 8b02 	vpop	{d8}
 80067cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067d0:	04411044 	.word	0x04411044
 80067d4:	3fb04411 	.word	0x3fb04411
 80067d8:	00000000 	.word	0x00000000
 80067dc:	40490000 	.word	0x40490000
 80067e0:	86594af5 	.word	0x86594af5
 80067e4:	bfc5d638 	.word	0xbfc5d638
 80067e8:	ae147ae1 	.word	0xae147ae1
 80067ec:	405c1147 	.word	0x405c1147
 80067f0:	00000000 	.word	0x00000000
 80067f4:	40590000 	.word	0x40590000
 80067f8:	00000000 	.word	0x00000000
 80067fc:	40af4000 	.word	0x40af4000
 8006800:	200025a8 	.word	0x200025a8
 8006804:	200033b8 	.word	0x200033b8
 8006808:	200033a0 	.word	0x200033a0
 800680c:	200033a8 	.word	0x200033a8
 8006810:	20003398 	.word	0x20003398
 8006814:	20003434 	.word	0x20003434
 8006818:	20003438 	.word	0x20003438
 800681c:	20003444 	.word	0x20003444
 8006820:	20003440 	.word	0x20003440
 8006824:	2000303c 	.word	0x2000303c
 8006828:	0802d5f0 	.word	0x0802d5f0

0800682c <cycleleds>:
void cycleleds(void) {
 800682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006830:	b084      	sub	sp, #16
	const uint16_t pattern[] = {
 8006832:	4a35      	ldr	r2, [pc, #212]	; (8006908 <cycleleds+0xdc>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8006834:	2700      	movs	r7, #0
 8006836:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800690c <cycleleds+0xe0>
 800683a:	ac01      	add	r4, sp, #4
 800683c:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 8006840:	ca07      	ldmia	r2, {r0, r1, r2}
 8006842:	4623      	mov	r3, r4
 8006844:	4626      	mov	r6, r4
 8006846:	c303      	stmia	r3!, {r0, r1}
 8006848:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800684a:	2200      	movs	r2, #0
 800684c:	f836 1b02 	ldrh.w	r1, [r6], #2
 8006850:	4640      	mov	r0, r8
 8006852:	f006 fad9 	bl	800ce08 <HAL_GPIO_WritePin>
		for (delay = 0; delay < 0x400000; delay++)
 8006856:	9700      	str	r7, [sp, #0]
 8006858:	9b00      	ldr	r3, [sp, #0]
 800685a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800685e:	da06      	bge.n	800686e <cycleleds+0x42>
 8006860:	9b00      	ldr	r3, [sp, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	9b00      	ldr	r3, [sp, #0]
 8006868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800686c:	dbf8      	blt.n	8006860 <cycleleds+0x34>
	for (i = 0; i < 5; i++) {
 800686e:	42ae      	cmp	r6, r5
 8006870:	d1eb      	bne.n	800684a <cycleleds+0x1e>
	for (delay = 0; delay < 0xC00000; delay++)
 8006872:	2300      	movs	r3, #0
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	9b00      	ldr	r3, [sp, #0]
 8006878:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800687c:	da06      	bge.n	800688c <cycleleds+0x60>
 800687e:	9b00      	ldr	r3, [sp, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	9b00      	ldr	r3, [sp, #0]
 8006886:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800688a:	dbf8      	blt.n	800687e <cycleleds+0x52>
	const uint16_t pattern[] = {
 800688c:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800688e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800690c <cycleleds+0xe0>
		for (delay = 0; delay < 0x400000; delay++)
 8006892:	2700      	movs	r7, #0
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8006894:	2201      	movs	r2, #1
 8006896:	f836 1b02 	ldrh.w	r1, [r6], #2
 800689a:	4640      	mov	r0, r8
 800689c:	f006 fab4 	bl	800ce08 <HAL_GPIO_WritePin>
		for (delay = 0; delay < 0x400000; delay++)
 80068a0:	9700      	str	r7, [sp, #0]
 80068a2:	9b00      	ldr	r3, [sp, #0]
 80068a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068a8:	da06      	bge.n	80068b8 <cycleleds+0x8c>
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	9b00      	ldr	r3, [sp, #0]
 80068b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068b6:	dbf8      	blt.n	80068aa <cycleleds+0x7e>
	for (i = 0; i < 5; i++) {
 80068b8:	42ae      	cmp	r6, r5
 80068ba:	d1eb      	bne.n	8006894 <cycleleds+0x68>
	for (delay = 0; delay < 0xC00000; delay++)
 80068bc:	2300      	movs	r3, #0
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	9b00      	ldr	r3, [sp, #0]
 80068c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068c6:	da06      	bge.n	80068d6 <cycleleds+0xaa>
 80068c8:	9b00      	ldr	r3, [sp, #0]
 80068ca:	3301      	adds	r3, #1
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	9b00      	ldr	r3, [sp, #0]
 80068d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068d4:	dbf8      	blt.n	80068c8 <cycleleds+0x9c>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80068d6:	2700      	movs	r7, #0
 80068d8:	4e0c      	ldr	r6, [pc, #48]	; (800690c <cycleleds+0xe0>)
 80068da:	2200      	movs	r2, #0
 80068dc:	f834 1b02 	ldrh.w	r1, [r4], #2
 80068e0:	4630      	mov	r0, r6
 80068e2:	f006 fa91 	bl	800ce08 <HAL_GPIO_WritePin>
		for (delay = 0; delay < 0x400000; delay++)
 80068e6:	9700      	str	r7, [sp, #0]
 80068e8:	9b00      	ldr	r3, [sp, #0]
 80068ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ee:	da06      	bge.n	80068fe <cycleleds+0xd2>
 80068f0:	9b00      	ldr	r3, [sp, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	9b00      	ldr	r3, [sp, #0]
 80068f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068fc:	dbf8      	blt.n	80068f0 <cycleleds+0xc4>
	for (i = 0; i < 5; i++) {
 80068fe:	42ac      	cmp	r4, r5
 8006900:	d1eb      	bne.n	80068da <cycleleds+0xae>
}
 8006902:	b004      	add	sp, #16
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	0802a918 	.word	0x0802a918
 800690c:	40020c00 	.word	0x40020c00

08006910 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 8006910:	b510      	push	{r4, lr}
 8006912:	4604      	mov	r4, r0
 8006914:	b082      	sub	sp, #8
	osDelay(5);
 8006916:	2005      	movs	r0, #5
 8006918:	f00f fe5c 	bl	80165d4 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800691c:	2201      	movs	r2, #1
 800691e:	2104      	movs	r1, #4
 8006920:	482e      	ldr	r0, [pc, #184]	; (80069dc <setpgagain+0xcc>)
 8006922:	f006 fa71 	bl	800ce08 <HAL_GPIO_WritePin>
	osDelay(5);
 8006926:	2005      	movs	r0, #5
 8006928:	f00f fe54 	bl	80165d4 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800692c:	2200      	movs	r2, #0
 800692e:	2104      	movs	r1, #4
 8006930:	482a      	ldr	r0, [pc, #168]	; (80069dc <setpgagain+0xcc>)
 8006932:	f006 fa69 	bl	800ce08 <HAL_GPIO_WritePin>
	osDelay(5);
 8006936:	2005      	movs	r0, #5
 8006938:	f00f fe4c 	bl	80165d4 <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 800693c:	4928      	ldr	r1, [pc, #160]	; (80069e0 <setpgagain+0xd0>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 800693e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006942:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8006944:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8006946:	4827      	ldr	r0, [pc, #156]	; (80069e4 <setpgagain+0xd4>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8006948:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800694c:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8006950:	a901      	add	r1, sp, #4
 8006952:	f009 fa5f 	bl	800fe14 <HAL_SPI_Transmit>
 8006956:	bba0      	cbnz	r0, 80069c2 <setpgagain+0xb2>
	osDelay(5);
 8006958:	2005      	movs	r0, #5
 800695a:	f00f fe3b 	bl	80165d4 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800695e:	2201      	movs	r2, #1
 8006960:	2104      	movs	r1, #4
 8006962:	481e      	ldr	r0, [pc, #120]	; (80069dc <setpgagain+0xcc>)
 8006964:	f006 fa50 	bl	800ce08 <HAL_GPIO_WritePin>
	osDelay(5);
 8006968:	2005      	movs	r0, #5
 800696a:	f00f fe33 	bl	80165d4 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800696e:	481b      	ldr	r0, [pc, #108]	; (80069dc <setpgagain+0xcc>)
 8006970:	2200      	movs	r2, #0
 8006972:	2104      	movs	r1, #4
 8006974:	f006 fa48 	bl	800ce08 <HAL_GPIO_WritePin>
	osDelay(5);
 8006978:	2005      	movs	r0, #5
 800697a:	f00f fe2b 	bl	80165d4 <osDelay>
	if (gain > 6) {		// might be a DC jump
 800697e:	2c06      	cmp	r4, #6
 8006980:	dd1c      	ble.n	80069bc <setpgagain+0xac>
		sigsuppress = 8;		// prevent trigger for a while
 8006982:	4b19      	ldr	r3, [pc, #100]	; (80069e8 <setpgagain+0xd8>)
 8006984:	2208      	movs	r2, #8
	if (gain > 7) {
 8006986:	2c07      	cmp	r4, #7
		sigsuppress = 8;		// prevent trigger for a while
 8006988:	601a      	str	r2, [r3, #0]
	if (gain > 7) {
 800698a:	d017      	beq.n	80069bc <setpgagain+0xac>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 800698c:	f244 1001 	movw	r0, #16641	; 0x4101
 8006990:	f8ad 0004 	strh.w	r0, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8006994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006998:	2201      	movs	r2, #1
 800699a:	a901      	add	r1, sp, #4
 800699c:	4811      	ldr	r0, [pc, #68]	; (80069e4 <setpgagain+0xd4>)
 800699e:	f009 fa39 	bl	800fe14 <HAL_SPI_Transmit>
 80069a2:	b9a8      	cbnz	r0, 80069d0 <setpgagain+0xc0>
	osDelay(5);
 80069a4:	2005      	movs	r0, #5
 80069a6:	f00f fe15 	bl	80165d4 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 80069aa:	2201      	movs	r2, #1
 80069ac:	2104      	movs	r1, #4
 80069ae:	480b      	ldr	r0, [pc, #44]	; (80069dc <setpgagain+0xcc>)
 80069b0:	f006 fa2a 	bl	800ce08 <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 80069b4:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <setpgagain+0xdc>)
 80069b6:	801c      	strh	r4, [r3, #0]
}
 80069b8:	b002      	add	sp, #8
 80069ba:	bd10      	pop	{r4, pc}
		pgacmd[0] = 0x4100;		// write to channel reg select ch0
 80069bc:	f44f 4082 	mov.w	r0, #16640	; 0x4100
 80069c0:	e7e6      	b.n	8006990 <setpgagain+0x80>
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 80069c2:	4601      	mov	r1, r0
 80069c4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80069c8:	4809      	ldr	r0, [pc, #36]	; (80069f0 <setpgagain+0xe0>)
 80069ca:	f01f fe83 	bl	80266d4 <iprintf>
 80069ce:	e7c3      	b.n	8006958 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 80069d0:	4601      	mov	r1, r0
 80069d2:	4808      	ldr	r0, [pc, #32]	; (80069f4 <setpgagain+0xe4>)
 80069d4:	f01f fe7e 	bl	80266d4 <iprintf>
 80069d8:	e7e4      	b.n	80069a4 <setpgagain+0x94>
 80069da:	bf00      	nop
 80069dc:	40021800 	.word	0x40021800
 80069e0:	0802da34 	.word	0x0802da34
 80069e4:	200026ac 	.word	0x200026ac
 80069e8:	200007a0 	.word	0x200007a0
 80069ec:	20003430 	.word	0x20003430
 80069f0:	0802d614 	.word	0x0802d614
 80069f4:	0802d640 	.word	0x0802d640

080069f8 <initpga>:
int initpga() {
 80069f8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80069fa:	2201      	movs	r2, #1
int initpga() {
 80069fc:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80069fe:	2104      	movs	r1, #4
 8006a00:	4826      	ldr	r0, [pc, #152]	; (8006a9c <initpga+0xa4>)
 8006a02:	f006 fa01 	bl	800ce08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8006a06:	2200      	movs	r2, #0
 8006a08:	2104      	movs	r1, #4
 8006a0a:	4824      	ldr	r0, [pc, #144]	; (8006a9c <initpga+0xa4>)
 8006a0c:	f006 f9fc 	bl	800ce08 <HAL_GPIO_WritePin>
	osDelay(50);
 8006a10:	2032      	movs	r0, #50	; 0x32
 8006a12:	f00f fddf 	bl	80165d4 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8006a16:	2201      	movs	r2, #1
 8006a18:	2104      	movs	r1, #4
 8006a1a:	4820      	ldr	r0, [pc, #128]	; (8006a9c <initpga+0xa4>)
 8006a1c:	f006 f9f4 	bl	800ce08 <HAL_GPIO_WritePin>
	osDelay(5);
 8006a20:	2005      	movs	r0, #5
 8006a22:	f00f fdd7 	bl	80165d4 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8006a26:	2200      	movs	r2, #0
 8006a28:	2104      	movs	r1, #4
 8006a2a:	481c      	ldr	r0, [pc, #112]	; (8006a9c <initpga+0xa4>)
 8006a2c:	f006 f9ec 	bl	800ce08 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 8006a30:	2000      	movs	r0, #0
 8006a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a36:	2201      	movs	r2, #1
 8006a38:	f8ad 0004 	strh.w	r0, [sp, #4]
 8006a3c:	a901      	add	r1, sp, #4
 8006a3e:	4818      	ldr	r0, [pc, #96]	; (8006aa0 <initpga+0xa8>)
 8006a40:	f009 f9e8 	bl	800fe14 <HAL_SPI_Transmit>
 8006a44:	4604      	mov	r4, r0
 8006a46:	bb08      	cbnz	r0, 8006a8c <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8006a48:	2104      	movs	r1, #4
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	4813      	ldr	r0, [pc, #76]	; (8006a9c <initpga+0xa4>)
 8006a4e:	f006 f9db 	bl	800ce08 <HAL_GPIO_WritePin>
	osDelay(5);
 8006a52:	2005      	movs	r0, #5
 8006a54:	f00f fdbe 	bl	80165d4 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8006a58:	4622      	mov	r2, r4
 8006a5a:	2104      	movs	r1, #4
 8006a5c:	480f      	ldr	r0, [pc, #60]	; (8006a9c <initpga+0xa4>)
 8006a5e:	f006 f9d3 	bl	800ce08 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8006a62:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 8006a66:	2005      	movs	r0, #5
 8006a68:	f00f fdb4 	bl	80165d4 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8006a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a70:	2201      	movs	r2, #1
 8006a72:	a901      	add	r1, sp, #4
 8006a74:	480a      	ldr	r0, [pc, #40]	; (8006aa0 <initpga+0xa8>)
 8006a76:	f8ad 4004 	strh.w	r4, [sp, #4]
 8006a7a:	f009 f9cb 	bl	800fe14 <HAL_SPI_Transmit>
 8006a7e:	4604      	mov	r4, r0
 8006a80:	b920      	cbnz	r0, 8006a8c <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 8006a82:	f7ff ff45 	bl	8006910 <setpgagain>
	return (0);
 8006a86:	4620      	mov	r0, r4
}
 8006a88:	b002      	add	sp, #8
 8006a8a:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4805      	ldr	r0, [pc, #20]	; (8006aa4 <initpga+0xac>)
 8006a90:	f01f fe20 	bl	80266d4 <iprintf>
		return (1);
 8006a94:	2001      	movs	r0, #1
}
 8006a96:	b002      	add	sp, #8
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40021800 	.word	0x40021800
 8006aa0:	200026ac 	.word	0x200026ac
 8006aa4:	0802d65c 	.word	0x0802d65c

08006aa8 <bumppga>:
int bumppga(int i) {
 8006aa8:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 8006aaa:	4d1f      	ldr	r5, [pc, #124]	; (8006b28 <bumppga+0x80>)
int bumppga(int i) {
 8006aac:	b083      	sub	sp, #12
 8006aae:	4604      	mov	r4, r0
	gain = pgagain;
 8006ab0:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 8006ab4:	b28b      	uxth	r3, r1
	gain = pgagain;
 8006ab6:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 8006ab8:	2b09      	cmp	r3, #9
 8006aba:	d827      	bhi.n	8006b0c <bumppga+0x64>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006abc:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <bumppga+0x84>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b0b      	cmp	r3, #11
 8006ac2:	d00c      	beq.n	8006ade <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8006ac4:	2c00      	cmp	r4, #0
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	da01      	bge.n	8006ace <bumppga+0x26>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dd04      	ble.n	8006ad8 <bumppga+0x30>
 8006ace:	2c00      	cmp	r4, #0
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	dd12      	ble.n	8006afa <bumppga+0x52>
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	dd10      	ble.n	8006afa <bumppga+0x52>
	return (0);
 8006ad8:	2000      	movs	r0, #0
}
 8006ada:	b003      	add	sp, #12
 8006adc:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 8006ade:	2907      	cmp	r1, #7
 8006ae0:	dd01      	ble.n	8006ae6 <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8006ae2:	2307      	movs	r3, #7
 8006ae4:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8006ae6:	2c00      	cmp	r4, #0
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	da01      	bge.n	8006af0 <bumppga+0x48>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	ddf3      	ble.n	8006ad8 <bumppga+0x30>
 8006af0:	9b01      	ldr	r3, [sp, #4]
 8006af2:	2b06      	cmp	r3, #6
 8006af4:	dd01      	ble.n	8006afa <bumppga+0x52>
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	dcee      	bgt.n	8006ad8 <bumppga+0x30>
			gain = gain + i;
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	4423      	add	r3, r4
 8006afe:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8006b00:	9801      	ldr	r0, [sp, #4]
 8006b02:	f7ff ff05 	bl	8006910 <setpgagain>
			return (i);
 8006b06:	4620      	mov	r0, r4
}
 8006b08:	b003      	add	sp, #12
 8006b0a:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 8006b0c:	4808      	ldr	r0, [pc, #32]	; (8006b30 <bumppga+0x88>)
 8006b0e:	f01f fde1 	bl	80266d4 <iprintf>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006b12:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <bumppga+0x84>)
		pgagain = 0;
 8006b14:	2200      	movs	r2, #0
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006b16:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 8006b18:	802a      	strh	r2, [r5, #0]
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006b1a:	2b0b      	cmp	r3, #11
 8006b1c:	d0e3      	beq.n	8006ae6 <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	dbd2      	blt.n	8006aca <bumppga+0x22>
 8006b24:	e7d3      	b.n	8006ace <bumppga+0x26>
 8006b26:	bf00      	nop
 8006b28:	20003430 	.word	0x20003430
 8006b2c:	20002184 	.word	0x20002184
 8006b30:	0802d678 	.word	0x0802d678

08006b34 <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 8006b34:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006b36:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 8006b38:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006b40:	f88d 000c 	strb.w	r0, [sp, #12]
 8006b44:	2302      	movs	r3, #2
 8006b46:	f88d 100d 	strb.w	r1, [sp, #13]
 8006b4a:	aa03      	add	r2, sp, #12
 8006b4c:	21c0      	movs	r1, #192	; 0xc0
 8006b4e:	4809      	ldr	r0, [pc, #36]	; (8006b74 <getpressure115+0x40>)
 8006b50:	9400      	str	r4, [sp, #0]
 8006b52:	f006 fc5f 	bl	800d414 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006b56:	b928      	cbnz	r0, 8006b64 <getpressure115+0x30>
 8006b58:	f7ff fd6a 	bl	8006630 <getpressure115.part.0>
 8006b5c:	4604      	mov	r4, r0
}
 8006b5e:	4620      	mov	r0, r4
 8006b60:	b004      	add	sp, #16
 8006b62:	bd10      	pop	{r4, pc}
 8006b64:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8006b66:	4804      	ldr	r0, [pc, #16]	; (8006b78 <getpressure115+0x44>)
 8006b68:	f01f fdb4 	bl	80266d4 <iprintf>
}
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	b004      	add	sp, #16
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	200025a8 	.word	0x200025a8
 8006b78:	0802d6b0 	.word	0x0802d6b0

08006b7c <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8006b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b80:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8006b82:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006b86:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006b8a:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 8006b8e:	ac06      	add	r4, sp, #24
 8006b90:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006b94:	4f36      	ldr	r7, [pc, #216]	; (8006c70 <initpressure115+0xf4>)
 8006b96:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8006b9a:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006b9e:	eb09 0204 	add.w	r2, r9, r4
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	9400      	str	r4, [sp, #0]
 8006ba6:	21c0      	movs	r1, #192	; 0xc0
 8006ba8:	b292      	uxth	r2, r2
 8006baa:	4638      	mov	r0, r7
 8006bac:	441c      	add	r4, r3
 8006bae:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8006bb2:	f006 fdc3 	bl	800d73c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d141      	bne.n	8006c40 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8006bbc:	45a2      	cmp	sl, r4
 8006bbe:	d1ee      	bne.n	8006b9e <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8006bc0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006bc4:	2b5a      	cmp	r3, #90	; 0x5a
 8006bc6:	d04a      	beq.n	8006c5e <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8006bc8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006bcc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006bd0:	badb      	revsh	r3, r3
 8006bd2:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8006bd6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006bda:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8006bdc:	109b      	asrs	r3, r3, #2
 8006bde:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 8006be0:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 8006be2:	ee06 2a10 	vmov	s12, r2
 8006be6:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8006bea:	ee07 3a10 	vmov	s14, r3
 8006bee:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8006bf2:	4a20      	ldr	r2, [pc, #128]	; (8006c74 <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8006bf4:	ee05 1a10 	vmov	s10, r1
 8006bf8:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006bfc:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 8006bfe:	ee04 0a10 	vmov	s8, r0
 8006c02:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8006c06:	4b1c      	ldr	r3, [pc, #112]	; (8006c78 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8006c08:	481c      	ldr	r0, [pc, #112]	; (8006c7c <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8006c0a:	491d      	ldr	r1, [pc, #116]	; (8006c80 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006c0c:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8006c10:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006c14:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8006c16:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8006c1a:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 8006c1e:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006c22:	f88d 2014 	strb.w	r2, [sp, #20]
 8006c26:	2302      	movs	r3, #2
 8006c28:	aa05      	add	r2, sp, #20
 8006c2a:	21c0      	movs	r1, #192	; 0xc0
 8006c2c:	4810      	ldr	r0, [pc, #64]	; (8006c70 <initpressure115+0xf4>)
 8006c2e:	f006 fbf1 	bl	800d414 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006c32:	b968      	cbnz	r0, 8006c50 <initpressure115+0xd4>
 8006c34:	f7ff fcfc 	bl	8006630 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8006c38:	4628      	mov	r0, r5
 8006c3a:	b008      	add	sp, #32
 8006c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8006c40:	4601      	mov	r1, r0
 8006c42:	4810      	ldr	r0, [pc, #64]	; (8006c84 <initpressure115+0x108>)
 8006c44:	f01f fd46 	bl	80266d4 <iprintf>
}
 8006c48:	4628      	mov	r0, r5
 8006c4a:	b008      	add	sp, #32
 8006c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8006c50:	480d      	ldr	r0, [pc, #52]	; (8006c88 <initpressure115+0x10c>)
 8006c52:	f01f fd3f 	bl	80266d4 <iprintf>
}
 8006c56:	4628      	mov	r0, r5
 8006c58:	b008      	add	sp, #32
 8006c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8006c5e:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8006c60:	480a      	ldr	r0, [pc, #40]	; (8006c8c <initpressure115+0x110>)
 8006c62:	f01f fd37 	bl	80266d4 <iprintf>
}
 8006c66:	4628      	mov	r0, r5
 8006c68:	b008      	add	sp, #32
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	bf00      	nop
 8006c70:	200025a8 	.word	0x200025a8
 8006c74:	200033b8 	.word	0x200033b8
 8006c78:	20003398 	.word	0x20003398
 8006c7c:	200033a0 	.word	0x200033a0
 8006c80:	200033a8 	.word	0x200033a8
 8006c84:	0802d6d4 	.word	0x0802d6d4
 8006c88:	0802d6b0 	.word	0x0802d6b0
 8006c8c:	0802d704 	.word	0x0802d704

08006c90 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8006c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c94:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8006c96:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8006c98:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006c9a:	4f46      	ldr	r7, [pc, #280]	; (8006db4 <getpressure3115+0x124>)
 8006c9c:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8006c9e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8006dd4 <getpressure3115+0x144>
	data[0] = 0x55;
 8006ca2:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8006ca6:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006ca8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8006cac:	f00f fc92 	bl	80165d4 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	21c0      	movs	r1, #192	; 0xc0
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	9600      	str	r6, [sp, #0]
 8006cba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cbe:	f006 fd3d 	bl	800d73c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d163      	bne.n	8006d90 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8006cc8:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8006ccc:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8006cce:	071b      	lsls	r3, r3, #28
 8006cd0:	d401      	bmi.n	8006cd6 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8006cd2:	2d04      	cmp	r5, #4
 8006cd4:	d1e7      	bne.n	8006ca6 <getpressure3115+0x16>
 8006cd6:	2501      	movs	r5, #1
 8006cd8:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006cda:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8006cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8006db4 <getpressure3115+0x124>
 8006ce2:	46a9      	mov	r9, r5
 8006ce4:	b2aa      	uxth	r2, r5
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	21c0      	movs	r1, #192	; 0xc0
 8006cea:	4640      	mov	r0, r8
 8006cec:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8006cee:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006cf0:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8006cf4:	f006 fd22 	bl	800d73c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d152      	bne.n	8006da4 <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8006cfe:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8006d02:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8006d04:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8006d08:	d1ec      	bne.n	8006ce4 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d0a:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8006d0e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d12:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d16:	0209      	lsls	r1, r1, #8
 8006d18:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8006d1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d24:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d28:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8006d2a:	4923      	ldr	r1, [pc, #140]	; (8006db8 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d2c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d30:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d32:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006d34:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006d36:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8006d38:	9805      	ldr	r0, [sp, #20]
 8006d3a:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 8006d3c:	4b1f      	ldr	r3, [pc, #124]	; (8006dbc <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8006d3e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8006d42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006d46:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 8006d4a:	9a04      	ldr	r2, [sp, #16]
 8006d4c:	fba3 0202 	umull	r0, r2, r3, r2
 8006d50:	0a12      	lsrs	r2, r2, #8
 8006d52:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006d54:	9a04      	ldr	r2, [sp, #16]
 8006d56:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006d5a:	4819      	ldr	r0, [pc, #100]	; (8006dc0 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006d5c:	0a1b      	lsrs	r3, r3, #8
 8006d5e:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8006d62:	4a18      	ldr	r2, [pc, #96]	; (8006dc4 <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8006d64:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006d68:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006d6e:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8006d70:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006d72:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8006d74:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8006d76:	0912      	lsrs	r2, r2, #4
 8006d78:	4813      	ldr	r0, [pc, #76]	; (8006dc8 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 8006d7a:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 8006d7e:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8006d80:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8006d82:	4a12      	ldr	r2, [pc, #72]	; (8006dcc <getpressure3115+0x13c>)
 8006d84:	fb01 f303 	mul.w	r3, r1, r3
 8006d88:	6013      	str	r3, [r2, #0]
}
 8006d8a:	b00c      	add	sp, #48	; 0x30
 8006d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8006d90:	4601      	mov	r1, r0
 8006d92:	4640      	mov	r0, r8
 8006d94:	f01f fc9e 	bl	80266d4 <iprintf>
			if (trys == 3)
 8006d98:	2d03      	cmp	r5, #3
 8006d9a:	d195      	bne.n	8006cc8 <getpressure3115+0x38>
}
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	b00c      	add	sp, #48	; 0x30
 8006da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8006da4:	4601      	mov	r1, r0
 8006da6:	480a      	ldr	r0, [pc, #40]	; (8006dd0 <getpressure3115+0x140>)
 8006da8:	f01f fc94 	bl	80266d4 <iprintf>
}
 8006dac:	4620      	mov	r0, r4
 8006dae:	b00c      	add	sp, #48	; 0x30
 8006db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db4:	200025a8 	.word	0x200025a8
 8006db8:	2000303c 	.word	0x2000303c
 8006dbc:	10624dd3 	.word	0x10624dd3
 8006dc0:	20003434 	.word	0x20003434
 8006dc4:	20003438 	.word	0x20003438
 8006dc8:	20003440 	.word	0x20003440
 8006dcc:	20003444 	.word	0x20003444
 8006dd0:	0802d754 	.word	0x0802d754
 8006dd4:	0802d72c 	.word	0x0802d72c

08006dd8 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8006dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dda:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8006ddc:	2501      	movs	r5, #1
 8006dde:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006de2:	220c      	movs	r2, #12
 8006de4:	a908      	add	r1, sp, #32
 8006de6:	462b      	mov	r3, r5
 8006de8:	4832      	ldr	r0, [pc, #200]	; (8006eb4 <initpressure3115+0xdc>)
 8006dea:	9100      	str	r1, [sp, #0]
 8006dec:	21c0      	movs	r1, #192	; 0xc0
 8006dee:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006df2:	f006 fca3 	bl	800d73c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d145      	bne.n	8006e86 <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8006dfa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006dfe:	2bc4      	cmp	r3, #196	; 0xc4
 8006e00:	d003      	beq.n	8006e0a <initpressure3115+0x32>
		return (HAL_ERROR);
 8006e02:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8006e04:	4620      	mov	r0, r4
 8006e06:	b00b      	add	sp, #44	; 0x2c
 8006e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8006e0a:	4f2b      	ldr	r7, [pc, #172]	; (8006eb8 <initpressure3115+0xe0>)
 8006e0c:	aa05      	add	r2, sp, #20
 8006e0e:	21c0      	movs	r1, #192	; 0xc0
 8006e10:	4828      	ldr	r0, [pc, #160]	; (8006eb4 <initpressure3115+0xdc>)
 8006e12:	89bb      	ldrh	r3, [r7, #12]
 8006e14:	9600      	str	r6, [sp, #0]
 8006e16:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	f006 fafa 	bl	800d414 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006e20:	4604      	mov	r4, r0
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d136      	bne.n	8006e94 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8006e26:	8a3b      	ldrh	r3, [r7, #16]
 8006e28:	aa06      	add	r2, sp, #24
 8006e2a:	21c0      	movs	r1, #192	; 0xc0
 8006e2c:	4821      	ldr	r0, [pc, #132]	; (8006eb4 <initpressure3115+0xdc>)
 8006e2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8006e32:	2302      	movs	r3, #2
 8006e34:	9600      	str	r6, [sp, #0]
 8006e36:	f006 faed 	bl	800d414 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	bb70      	cbnz	r0, 8006e9c <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8006e3e:	8aba      	ldrh	r2, [r7, #20]
 8006e40:	2302      	movs	r3, #2
 8006e42:	21c0      	movs	r1, #192	; 0xc0
 8006e44:	481b      	ldr	r0, [pc, #108]	; (8006eb4 <initpressure3115+0xdc>)
 8006e46:	f8ad 201c 	strh.w	r2, [sp, #28]
 8006e4a:	aa07      	add	r2, sp, #28
 8006e4c:	9600      	str	r6, [sp, #0]
 8006e4e:	f006 fae1 	bl	800d414 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006e52:	4604      	mov	r4, r0
 8006e54:	bb50      	cbnz	r0, 8006eac <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8006e56:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 8006e58:	2064      	movs	r0, #100	; 0x64
 8006e5a:	f00f fbbb 	bl	80165d4 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8006e5e:	462b      	mov	r3, r5
 8006e60:	9400      	str	r4, [sp, #0]
 8006e62:	462a      	mov	r2, r5
 8006e64:	21c0      	movs	r1, #192	; 0xc0
 8006e66:	4813      	ldr	r0, [pc, #76]	; (8006eb4 <initpressure3115+0xdc>)
 8006e68:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006e6c:	f006 fc66 	bl	800d73c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8006e70:	4604      	mov	r4, r0
 8006e72:	b9b8      	cbnz	r0, 8006ea4 <initpressure3115+0xcc>
	result = getpressure3115();
 8006e74:	f7ff ff0c 	bl	8006c90 <getpressure3115>
	if (result != HAL_OK) {
 8006e78:	4604      	mov	r4, r0
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d0c2      	beq.n	8006e04 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8006e7e:	480f      	ldr	r0, [pc, #60]	; (8006ebc <initpressure3115+0xe4>)
 8006e80:	f01f fc28 	bl	80266d4 <iprintf>
 8006e84:	e7be      	b.n	8006e04 <initpressure3115+0x2c>
 8006e86:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8006e88:	480d      	ldr	r0, [pc, #52]	; (8006ec0 <initpressure3115+0xe8>)
 8006e8a:	f01f fc23 	bl	80266d4 <iprintf>
}
 8006e8e:	4620      	mov	r0, r4
 8006e90:	b00b      	add	sp, #44	; 0x2c
 8006e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8006e94:	480b      	ldr	r0, [pc, #44]	; (8006ec4 <initpressure3115+0xec>)
 8006e96:	f01f fc1d 	bl	80266d4 <iprintf>
		return (result);
 8006e9a:	e7b3      	b.n	8006e04 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8006e9c:	480a      	ldr	r0, [pc, #40]	; (8006ec8 <initpressure3115+0xf0>)
 8006e9e:	f01f fc19 	bl	80266d4 <iprintf>
		return (result);
 8006ea2:	e7af      	b.n	8006e04 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8006ea4:	4809      	ldr	r0, [pc, #36]	; (8006ecc <initpressure3115+0xf4>)
 8006ea6:	f01f fc15 	bl	80266d4 <iprintf>
		return (result);
 8006eaa:	e7ab      	b.n	8006e04 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8006eac:	4808      	ldr	r0, [pc, #32]	; (8006ed0 <initpressure3115+0xf8>)
 8006eae:	f01f fc11 	bl	80266d4 <iprintf>
		return (result);
 8006eb2:	e7a7      	b.n	8006e04 <initpressure3115+0x2c>
 8006eb4:	200025a8 	.word	0x200025a8
 8006eb8:	0802a918 	.word	0x0802a918
 8006ebc:	0802d7ec 	.word	0x0802d7ec
 8006ec0:	0802d694 	.word	0x0802d694
 8006ec4:	0802d77c 	.word	0x0802d77c
 8006ec8:	0802d798 	.word	0x0802d798
 8006ecc:	0802d7d0 	.word	0x0802d7d0
 8006ed0:	0802d7b4 	.word	0x0802d7b4

08006ed4 <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 8006ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8006ed8:	4820      	ldr	r0, [pc, #128]	; (8006f5c <init_esp+0x88>)
 8006eda:	f01f fc97 	bl	802680c <puts>
	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 8006ede:	2201      	movs	r2, #1
 8006ee0:	491f      	ldr	r1, [pc, #124]	; (8006f60 <init_esp+0x8c>)
 8006ee2:	4820      	ldr	r0, [pc, #128]	; (8006f64 <init_esp+0x90>)
 8006ee4:	f00d fb1a 	bl	801451c <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8006ee8:	bb98      	cbnz	r0, 8006f52 <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8006eea:	2200      	movs	r2, #0
 8006eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ef0:	481d      	ldr	r0, [pc, #116]	; (8006f68 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8006ef2:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8006ef6:	f005 ff87 	bl	800ce08 <HAL_GPIO_WritePin>
	osDelay(20);
 8006efa:	4c1c      	ldr	r4, [pc, #112]	; (8006f6c <init_esp+0x98>)
 8006efc:	2014      	movs	r0, #20
 8006efe:	4d1c      	ldr	r5, [pc, #112]	; (8006f70 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8006f00:	4e1c      	ldr	r6, [pc, #112]	; (8006f74 <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8006f02:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8006f06:	f00f fb65 	bl	80165d4 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f10:	4815      	ldr	r0, [pc, #84]	; (8006f68 <init_esp+0x94>)
 8006f12:	f005 ff79 	bl	800ce08 <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	e006      	b.n	8006f28 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 8006f1a:	5cf0      	ldrb	r0, [r6, r3]
 8006f1c:	6021      	str	r1, [r4, #0]
 8006f1e:	f01f fbf1 	bl	8026704 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	2b60      	cmp	r3, #96	; 0x60
 8006f26:	d810      	bhi.n	8006f4a <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8006f28:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8006f2a:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d1f4      	bne.n	8006f1a <init_esp+0x46>
		osDelay(1);
 8006f30:	2001      	movs	r0, #1
 8006f32:	f00f fb4f 	bl	80165d4 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8006f36:	3f01      	subs	r7, #1
 8006f38:	d1ed      	bne.n	8006f16 <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 8006f3a:	20c8      	movs	r0, #200	; 0xc8
 8006f3c:	f00f fb4a 	bl	80165d4 <osDelay>
	printf("\n");
 8006f40:	200a      	movs	r0, #10
}
 8006f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 8006f46:	f01f bbdd 	b.w	8026704 <putchar>
			espoutindex = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f8c4 8000 	str.w	r8, [r4]
 8006f50:	e7ea      	b.n	8006f28 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 8006f52:	4809      	ldr	r0, [pc, #36]	; (8006f78 <init_esp+0xa4>)
 8006f54:	f01f fc5a 	bl	802680c <puts>
 8006f58:	e7c7      	b.n	8006eea <init_esp+0x16>
 8006f5a:	bf00      	nop
 8006f5c:	0802d80c 	.word	0x0802d80c
 8006f60:	200033c0 	.word	0x200033c0
 8006f64:	20002c48 	.word	0x20002c48
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	200033c4 	.word	0x200033c4
 8006f70:	20003428 	.word	0x20003428
 8006f74:	200033c8 	.word	0x200033c8
 8006f78:	0802d820 	.word	0x0802d820

08006f7c <uart6_rxdone>:
uart6_rxdone() {
 8006f7c:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 8006f7e:	4c0b      	ldr	r4, [pc, #44]	; (8006fac <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <uart6_rxdone+0x34>)
	i = esprxindex;
 8006f82:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 8006f84:	7819      	ldrb	r1, [r3, #0]
 8006f86:	1c6b      	adds	r3, r5, #1
 8006f88:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 8006f8a:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 8006f8c:	5551      	strb	r1, [r2, r5]
 8006f8e:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 8006f90:	d902      	bls.n	8006f98 <uart6_rxdone+0x1c>
		esprxindex = 0;
 8006f92:	2200      	movs	r2, #0
 8006f94:	4613      	mov	r3, r2
 8006f96:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 8006f98:	4a07      	ldr	r2, [pc, #28]	; (8006fb8 <uart6_rxdone+0x3c>)
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d000      	beq.n	8006fa2 <uart6_rxdone+0x26>
}
 8006fa0:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 8006fa2:	4806      	ldr	r0, [pc, #24]	; (8006fbc <uart6_rxdone+0x40>)
 8006fa4:	f01f fc32 	bl	802680c <puts>
		esprxindex = i;
 8006fa8:	6025      	str	r5, [r4, #0]
}
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	20003428 	.word	0x20003428
 8006fb0:	200033c0 	.word	0x200033c0
 8006fb4:	200033c8 	.word	0x200033c8
 8006fb8:	200033c4 	.word	0x200033c4
 8006fbc:	0802d838 	.word	0x0802d838

08006fc0 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 8006fc6:	ac02      	add	r4, sp, #8
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f01f fdfe 	bl	8026bca <stpcpy>
	strcat(txbuf, "\r\n");
 8006fce:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <esp_cmd+0x44>)
 8006fd0:	8819      	ldrh	r1, [r3, #0]
 8006fd2:	789a      	ldrb	r2, [r3, #2]
 8006fd4:	1b03      	subs	r3, r0, r4
 8006fd6:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8006fd8:	4621      	mov	r1, r4
	len = strlen(txbuf);
 8006fda:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 8006fdc:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 8006fde:	480a      	ldr	r0, [pc, #40]	; (8007008 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8006fe0:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 8006fe2:	f01f fb77 	bl	80266d4 <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 8006fe6:	9a01      	ldr	r2, [sp, #4]
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4808      	ldr	r0, [pc, #32]	; (800700c <esp_cmd+0x4c>)
 8006fec:	b292      	uxth	r2, r2
 8006fee:	f00c f855 	bl	801309c <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8006ff2:	b908      	cbnz	r0, 8006ff8 <esp_cmd+0x38>
}
 8006ff4:	b006      	add	sp, #24
 8006ff6:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8006ff8:	4601      	mov	r1, r0
 8006ffa:	4805      	ldr	r0, [pc, #20]	; (8007010 <esp_cmd+0x50>)
 8006ffc:	f01f fb6a 	bl	80266d4 <iprintf>
}
 8007000:	b006      	add	sp, #24
 8007002:	bd10      	pop	{r4, pc}
 8007004:	0802b4f0 	.word	0x0802b4f0
 8007008:	0802d854 	.word	0x0802d854
 800700c:	20002c48 	.word	0x20002c48
 8007010:	0802d868 	.word	0x0802d868

08007014 <test_esp>:
void test_esp() {
 8007014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8007018:	4813      	ldr	r0, [pc, #76]	; (8007068 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 800701a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 800701e:	f01f fbf5 	bl	802680c <puts>
	osDelay(200);
 8007022:	4c12      	ldr	r4, [pc, #72]	; (800706c <test_esp+0x58>)
 8007024:	20c8      	movs	r0, #200	; 0xc8
 8007026:	4d12      	ldr	r5, [pc, #72]	; (8007070 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8007028:	4e12      	ldr	r6, [pc, #72]	; (8007074 <test_esp+0x60>)
			espoutindex = 0;
 800702a:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 800702e:	f00f fad1 	bl	80165d4 <osDelay>
	esp_cmd(getstatus);	// send the command
 8007032:	4811      	ldr	r0, [pc, #68]	; (8007078 <test_esp+0x64>)
 8007034:	f7ff ffc4 	bl	8006fc0 <esp_cmd>
	while (espoutindex != esprxindex) {
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	e006      	b.n	800704a <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 800703c:	5cf0      	ldrb	r0, [r6, r3]
 800703e:	6021      	str	r1, [r4, #0]
 8007040:	f01f fb60 	bl	8026704 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	2b60      	cmp	r3, #96	; 0x60
 8007048:	d80a      	bhi.n	8007060 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 800704a:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 800704c:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 800704e:	429a      	cmp	r2, r3
 8007050:	d1f4      	bne.n	800703c <test_esp+0x28>
		osDelay(1);
 8007052:	2001      	movs	r0, #1
 8007054:	f00f fabe 	bl	80165d4 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 8007058:	3f01      	subs	r7, #1
 800705a:	d1ed      	bne.n	8007038 <test_esp+0x24>
}
 800705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	f8c4 8000 	str.w	r8, [r4]
 8007066:	e7f0      	b.n	800704a <test_esp+0x36>
 8007068:	0802d888 	.word	0x0802d888
 800706c:	200033c4 	.word	0x200033c4
 8007070:	20003428 	.word	0x20003428
 8007074:	200033c8 	.word	0x200033c8
 8007078:	200002a4 	.word	0x200002a4

0800707c <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 800707c:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 800707e:	4818      	ldr	r0, [pc, #96]	; (80070e0 <init_ds2485+0x64>)
void init_ds2485(void) {
 8007080:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 8007082:	f01f fbc3 	bl	802680c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 8007086:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8007088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 800708c:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 800708e:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8007092:	2303      	movs	r3, #3
 8007094:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 8007096:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 800709a:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 800709c:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80070a0:	aa02      	add	r2, sp, #8
 80070a2:	4810      	ldr	r0, [pc, #64]	; (80070e4 <init_ds2485+0x68>)
 80070a4:	f006 f9b6 	bl	800d414 <HAL_I2C_Master_Transmit>
 80070a8:	b9a8      	cbnz	r0, 80070d6 <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 80070aa:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 80070ac:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 80070b0:	f00f fa90 	bl	80165d4 <osDelay>
		data[i] = 0xA5 + i;
 80070b4:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 80070b6:	2181      	movs	r1, #129	; 0x81
 80070b8:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 80070ba:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 80070be:	aa02      	add	r2, sp, #8
 80070c0:	4808      	ldr	r0, [pc, #32]	; (80070e4 <init_ds2485+0x68>)
 80070c2:	9400      	str	r4, [sp, #0]
 80070c4:	f006 fa6e 	bl	800d5a4 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 80070c8:	4601      	mov	r1, r0
 80070ca:	b110      	cbz	r0, 80070d2 <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 80070cc:	4806      	ldr	r0, [pc, #24]	; (80070e8 <init_ds2485+0x6c>)
 80070ce:	f01f fb01 	bl	80266d4 <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 80070d2:	b006      	add	sp, #24
 80070d4:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 80070d6:	4601      	mov	r1, r0
 80070d8:	4803      	ldr	r0, [pc, #12]	; (80070e8 <init_ds2485+0x6c>)
 80070da:	f01f fafb 	bl	80266d4 <iprintf>
 80070de:	e7e4      	b.n	80070aa <init_ds2485+0x2e>
 80070e0:	0802d8b0 	.word	0x0802d8b0
 80070e4:	200025a8 	.word	0x200025a8
 80070e8:	0802d8bc 	.word	0x0802d8bc

080070ec <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4604      	mov	r4, r0
 80070f0:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 80070f2:	4821      	ldr	r0, [pc, #132]	; (8007178 <readp_ds2485+0x8c>)
 80070f4:	f01f fb8a 	bl	802680c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 80070f8:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 80070fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 80070fe:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8007100:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 8007104:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 800710a:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800710e:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 8007110:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8007114:	aa03      	add	r2, sp, #12
 8007116:	4819      	ldr	r0, [pc, #100]	; (800717c <readp_ds2485+0x90>)
 8007118:	f006 f97c 	bl	800d414 <HAL_I2C_Master_Transmit>
 800711c:	bb18      	cbnz	r0, 8007166 <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 800711e:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8007120:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 8007124:	f00f fa56 	bl	80165d4 <osDelay>
		data[i] = 0x5A + i;
 8007128:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 800712a:	b2a3      	uxth	r3, r4
 800712c:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 800712e:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8007132:	2181      	movs	r1, #129	; 0x81
 8007134:	4811      	ldr	r0, [pc, #68]	; (800717c <readp_ds2485+0x90>)
 8007136:	9500      	str	r5, [sp, #0]
 8007138:	f006 fa34 	bl	800d5a4 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 800713c:	b9b8      	cbnz	r0, 800716e <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 800713e:	4810      	ldr	r0, [pc, #64]	; (8007180 <readp_ds2485+0x94>)
 8007140:	f10d 040b 	add.w	r4, sp, #11
 8007144:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 8007148:	4d0e      	ldr	r5, [pc, #56]	; (8007184 <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 800714a:	f01f fac3 	bl	80266d4 <iprintf>
		printf("0x%02x ", data[i]);
 800714e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8007152:	4628      	mov	r0, r5
 8007154:	f01f fabe 	bl	80266d4 <iprintf>
	for (i = 0; i < 8; i++) {
 8007158:	42b4      	cmp	r4, r6
 800715a:	d1f8      	bne.n	800714e <readp_ds2485+0x62>
	}
	printf("\n");
 800715c:	200a      	movs	r0, #10
 800715e:	f01f fad1 	bl	8026704 <putchar>
}
 8007162:	b006      	add	sp, #24
 8007164:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 8007166:	4808      	ldr	r0, [pc, #32]	; (8007188 <readp_ds2485+0x9c>)
 8007168:	f01f fab4 	bl	80266d4 <iprintf>
 800716c:	e7d7      	b.n	800711e <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 800716e:	4601      	mov	r1, r0
 8007170:	4806      	ldr	r0, [pc, #24]	; (800718c <readp_ds2485+0xa0>)
 8007172:	f01f faaf 	bl	80266d4 <iprintf>
 8007176:	e7e2      	b.n	800713e <readp_ds2485+0x52>
 8007178:	0802d8e0 	.word	0x0802d8e0
 800717c:	200025a8 	.word	0x200025a8
 8007180:	0802d940 	.word	0x0802d940
 8007184:	0802d968 	.word	0x0802d968
 8007188:	0802d8f8 	.word	0x0802d8f8
 800718c:	0802d91c 	.word	0x0802d91c

08007190 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8007190:	b530      	push	{r4, r5, lr}
	int i, j, k;

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8007192:	4c46      	ldr	r4, [pc, #280]	; (80072ac <initsplat+0x11c>)
void initsplat(void) {
 8007194:	b083      	sub	sp, #12
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	2b0b      	cmp	r3, #11
 800719a:	d064      	beq.n	8007266 <initsplat+0xd6>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 800719c:	4844      	ldr	r0, [pc, #272]	; (80072b0 <initsplat+0x120>)
 800719e:	f01f fb35 	bl	802680c <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 80071a2:	4d44      	ldr	r5, [pc, #272]	; (80072b4 <initsplat+0x124>)
	initpga();
 80071a4:	f7ff fc28 	bl	80069f8 <initpga>
	osDelay(500);
 80071a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80071ac:	f00f fa12 	bl	80165d4 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 80071b0:	4841      	ldr	r0, [pc, #260]	; (80072b8 <initsplat+0x128>)
 80071b2:	f01f fa8f 	bl	80266d4 <iprintf>
	psensor = PNONE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 80071ba:	f7ff fe0d 	bl	8006dd8 <initpressure3115>
 80071be:	b9e8      	cbnz	r0, 80071fc <initsplat+0x6c>
		printf("MPL3115A2 pressure sensor present\n\r");
 80071c0:	483e      	ldr	r0, [pc, #248]	; (80072bc <initsplat+0x12c>)
 80071c2:	f01f fa87 	bl	80266d4 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 80071c6:	4a3e      	ldr	r2, [pc, #248]	; (80072c0 <initsplat+0x130>)
		psensor = MPL3115A2;
 80071c8:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 80071ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 80071ce:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 80071d0:	f043 0310 	orr.w	r3, r3, #16
 80071d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 80071d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80071dc:	f00f f9fa 	bl	80165d4 <osDelay>

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	2b16      	cmp	r3, #22
 80071e4:	d020      	beq.n	8007228 <initsplat+0x98>
		test_ds2485();
		init_esp();
		osDelay(500);
		test_esp();
		osDelay(200);
	} else if (circuitboardpcb == LIGHTNINGBOARD1) {
 80071e6:	2b15      	cmp	r3, #21
 80071e8:	d056      	beq.n	8007298 <initsplat+0x108>
		test_ds2485();
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 80071ea:	2200      	movs	r2, #0
 80071ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071f0:	4834      	ldr	r0, [pc, #208]	; (80072c4 <initsplat+0x134>)
}
 80071f2:	b003      	add	sp, #12
 80071f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 80071f8:	f005 be06 	b.w	800ce08 <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 80071fc:	f7ff fcbe 	bl	8006b7c <initpressure115>
 8007200:	bb68      	cbnz	r0, 800725e <initsplat+0xce>
			printf("MPL115A2 pressure sensor present\n\r");
 8007202:	4831      	ldr	r0, [pc, #196]	; (80072c8 <initsplat+0x138>)
 8007204:	f01f fa66 	bl	80266d4 <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 8007208:	4a2d      	ldr	r2, [pc, #180]	; (80072c0 <initsplat+0x130>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 800720a:	2101      	movs	r1, #1
	osDelay(500);
 800720c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2 << 3);
 8007210:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8007214:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 8007216:	f043 0308 	orr.w	r3, r3, #8
 800721a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 800721e:	f00f f9d9 	bl	80165d4 <osDelay>
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	2b16      	cmp	r3, #22
 8007226:	d1de      	bne.n	80071e6 <initsplat+0x56>
		huart6.Init.BaudRate = 115200;
 8007228:	4828      	ldr	r0, [pc, #160]	; (80072cc <initsplat+0x13c>)
 800722a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800722e:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 8007230:	f00c ff84 	bl	801413c <HAL_UART_Init>
 8007234:	bb68      	cbnz	r0, 8007292 <initsplat+0x102>
	init_ds2485();
 8007236:	f7ff ff21 	bl	800707c <init_ds2485>
	osDelay(80);
 800723a:	2050      	movs	r0, #80	; 0x50
 800723c:	f00f f9ca 	bl	80165d4 <osDelay>
	readp_ds2485(8);
 8007240:	2008      	movs	r0, #8
 8007242:	f7ff ff53 	bl	80070ec <readp_ds2485>
		init_esp();
 8007246:	f7ff fe45 	bl	8006ed4 <init_esp>
		osDelay(500);
 800724a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800724e:	f00f f9c1 	bl	80165d4 <osDelay>
		test_esp();
 8007252:	f7ff fedf 	bl	8007014 <test_esp>
		osDelay(200);
 8007256:	20c8      	movs	r0, #200	; 0xc8
 8007258:	f00f f9bc 	bl	80165d4 <osDelay>
 800725c:	e7c5      	b.n	80071ea <initsplat+0x5a>
			printf("NO pressure sensor present\n\r");
 800725e:	481c      	ldr	r0, [pc, #112]	; (80072d0 <initsplat+0x140>)
 8007260:	f01f fa38 	bl	80266d4 <iprintf>
 8007264:	e7b8      	b.n	80071d8 <initsplat+0x48>
		printf("Initsplat: Dual Mux\n\r");
 8007266:	481b      	ldr	r0, [pc, #108]	; (80072d4 <initsplat+0x144>)
 8007268:	f01f fa34 	bl	80266d4 <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 800726c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007270:	2301      	movs	r3, #1
 8007272:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <initsplat+0x148>)
 8007274:	9000      	str	r0, [sp, #0]
 8007276:	2188      	movs	r1, #136	; 0x88
 8007278:	4818      	ldr	r0, [pc, #96]	; (80072dc <initsplat+0x14c>)
 800727a:	f006 f8cb 	bl	800d414 <HAL_I2C_Master_Transmit>
 800727e:	b920      	cbnz	r0, 800728a <initsplat+0xfa>
		osDelay(500);
 8007280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007284:	f00f f9a6 	bl	80165d4 <osDelay>
 8007288:	e788      	b.n	800719c <initsplat+0xc>
		printf("I2C HAL returned error 1\n\r");
 800728a:	4815      	ldr	r0, [pc, #84]	; (80072e0 <initsplat+0x150>)
 800728c:	f01f fa22 	bl	80266d4 <iprintf>
 8007290:	e7f6      	b.n	8007280 <initsplat+0xf0>
			Error_Handler();
 8007292:	f7fd fa59 	bl	8004748 <Error_Handler>
 8007296:	e7ce      	b.n	8007236 <initsplat+0xa6>
	init_ds2485();
 8007298:	f7ff fef0 	bl	800707c <init_ds2485>
	osDelay(80);
 800729c:	2050      	movs	r0, #80	; 0x50
 800729e:	f00f f999 	bl	80165d4 <osDelay>
	readp_ds2485(8);
 80072a2:	2008      	movs	r0, #8
 80072a4:	f7ff ff22 	bl	80070ec <readp_ds2485>
}
 80072a8:	e79f      	b.n	80071ea <initsplat+0x5a>
 80072aa:	bf00      	nop
 80072ac:	20002184 	.word	0x20002184
 80072b0:	0802d988 	.word	0x0802d988
 80072b4:	2000343c 	.word	0x2000343c
 80072b8:	0802d9ac 	.word	0x0802d9ac
 80072bc:	0802d9cc 	.word	0x0802d9cc
 80072c0:	2000303c 	.word	0x2000303c
 80072c4:	40021000 	.word	0x40021000
 80072c8:	0802d9f0 	.word	0x0802d9f0
 80072cc:	20002c48 	.word	0x20002c48
 80072d0:	0802da14 	.word	0x0802da14
 80072d4:	0802d970 	.word	0x0802d970
 80072d8:	200002b0 	.word	0x200002b0
 80072dc:	200025a8 	.word	0x200025a8
 80072e0:	0802d694 	.word	0x0802d694

080072e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80072e4:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80072e6:	2200      	movs	r2, #0
 80072e8:	210f      	movs	r1, #15
 80072ea:	f06f 0001 	mvn.w	r0, #1
{
 80072ee:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80072f0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 80072f2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80072f4:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80072f8:	641c      	str	r4, [r3, #64]	; 0x40
 80072fa:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80072fc:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8007300:	9400      	str	r4, [sp, #0]
 8007302:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007304:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007306:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800730a:	645c      	str	r4, [r3, #68]	; 0x44
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007316:	f002 fc4d 	bl	8009bb4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800731a:	2200      	movs	r2, #0
 800731c:	2106      	movs	r1, #6
 800731e:	2005      	movs	r0, #5
 8007320:	f002 fc48 	bl	8009bb4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007324:	2005      	movs	r0, #5
 8007326:	f002 fc8f 	bl	8009c48 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800732a:	2200      	movs	r2, #0
 800732c:	2106      	movs	r1, #6
 800732e:	2005      	movs	r0, #5
 8007330:	f002 fc40 	bl	8009bb4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007334:	2005      	movs	r0, #5
 8007336:	f002 fc87 	bl	8009c48 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 800733a:	2051      	movs	r0, #81	; 0x51
 800733c:	2200      	movs	r2, #0
 800733e:	2106      	movs	r1, #6
 8007340:	f002 fc38 	bl	8009bb4 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8007344:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007346:	b002      	add	sp, #8
 8007348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800734c:	f002 bc7c 	b.w	8009c48 <HAL_NVIC_EnableIRQ>
 8007350:	40023800 	.word	0x40023800

08007354 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8007354:	4a49      	ldr	r2, [pc, #292]	; (800747c <HAL_ADC_MspInit+0x128>)
 8007356:	6803      	ldr	r3, [r0, #0]
{
 8007358:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 800735a:	4293      	cmp	r3, r2
{
 800735c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800735e:	f04f 0400 	mov.w	r4, #0
 8007362:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8007366:	9409      	str	r4, [sp, #36]	; 0x24
 8007368:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 800736c:	d007      	beq.n	800737e <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800736e:	4a44      	ldr	r2, [pc, #272]	; (8007480 <HAL_ADC_MspInit+0x12c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d045      	beq.n	8007400 <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8007374:	4a43      	ldr	r2, [pc, #268]	; (8007484 <HAL_ADC_MspInit+0x130>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d05f      	beq.n	800743a <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800737a:	b00d      	add	sp, #52	; 0x34
 800737c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800737e:	4b42      	ldr	r3, [pc, #264]	; (8007488 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007380:	2703      	movs	r7, #3
 8007382:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007384:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007388:	4840      	ldr	r0, [pc, #256]	; (800748c <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800738a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 800738e:	4e40      	ldr	r6, [pc, #256]	; (8007490 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007390:	645a      	str	r2, [r3, #68]	; 0x44
 8007392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007394:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007398:	9201      	str	r2, [sp, #4]
 800739a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800739c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	631a      	str	r2, [r3, #48]	; 0x30
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80073ac:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073ae:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80073b0:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073b4:	f005 fa7c 	bl	800c8b0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 80073b8:	4b36      	ldr	r3, [pc, #216]	; (8007494 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80073ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80073be:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 80073c0:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80073c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80073c6:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80073c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80073cc:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80073ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80073d2:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80073d4:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80073d6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80073da:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80073dc:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80073de:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80073e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80073e6:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073e8:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80073ec:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80073f0:	f002 fef2 	bl	800a1d8 <HAL_DMA_Init>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d13d      	bne.n	8007474 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80073f8:	63ae      	str	r6, [r5, #56]	; 0x38
 80073fa:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80073fc:	b00d      	add	sp, #52	; 0x34
 80073fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007400:	4b21      	ldr	r3, [pc, #132]	; (8007488 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007402:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007404:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007406:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800740e:	645a      	str	r2, [r3, #68]	; 0x44
 8007410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007412:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007416:	9203      	str	r2, [sp, #12]
 8007418:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800741a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800741c:	f042 0201 	orr.w	r2, r2, #1
 8007420:	631a      	str	r2, [r3, #48]	; 0x30
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007424:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007426:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800742a:	4818      	ldr	r0, [pc, #96]	; (800748c <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800742c:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800742e:	9304      	str	r3, [sp, #16]
 8007430:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007432:	f005 fa3d 	bl	800c8b0 <HAL_GPIO_Init>
}
 8007436:	b00d      	add	sp, #52	; 0x34
 8007438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 800743a:	4b13      	ldr	r3, [pc, #76]	; (8007488 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800743c:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800743e:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007440:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007448:	645a      	str	r2, [r3, #68]	; 0x44
 800744a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800744c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8007450:	9205      	str	r2, [sp, #20]
 8007452:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	631a      	str	r2, [r3, #48]	; 0x30
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800745e:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007460:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007464:	4809      	ldr	r0, [pc, #36]	; (800748c <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007466:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007468:	9306      	str	r3, [sp, #24]
 800746a:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800746c:	f005 fa20 	bl	800c8b0 <HAL_GPIO_Init>
}
 8007470:	b00d      	add	sp, #52	; 0x34
 8007472:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8007474:	f7fd f968 	bl	8004748 <Error_Handler>
 8007478:	e7be      	b.n	80073f8 <HAL_ADC_MspInit+0xa4>
 800747a:	bf00      	nop
 800747c:	40012000 	.word	0x40012000
 8007480:	40012100 	.word	0x40012100
 8007484:	40012200 	.word	0x40012200
 8007488:	40023800 	.word	0x40023800
 800748c:	40020000 	.word	0x40020000
 8007490:	200022a8 	.word	0x200022a8
 8007494:	40026470 	.word	0x40026470

08007498 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8007498:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <HAL_CRC_MspInit+0x28>)
 800749a:	6802      	ldr	r2, [r0, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d000      	beq.n	80074a2 <HAL_CRC_MspInit+0xa>
 80074a0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80074a2:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80074a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 80074aa:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 80074ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074b0:	631a      	str	r2, [r3, #48]	; 0x30
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80074bc:	b002      	add	sp, #8
 80074be:	4770      	bx	lr
 80074c0:	40023000 	.word	0x40023000

080074c4 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 80074c4:	4b2b      	ldr	r3, [pc, #172]	; (8007574 <HAL_DAC_MspInit+0xb0>)
 80074c6:	6802      	ldr	r2, [r0, #0]
{
 80074c8:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 80074ca:	429a      	cmp	r2, r3
{
 80074cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074ce:	f04f 0400 	mov.w	r4, #0
 80074d2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80074d6:	9405      	str	r4, [sp, #20]
 80074d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 80074dc:	d001      	beq.n	80074e2 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80074de:	b008      	add	sp, #32
 80074e0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 80074e2:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80074e6:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e8:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 80074ea:	4e23      	ldr	r6, [pc, #140]	; (8007578 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80074ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40
 80074f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074f6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80074fa:	9201      	str	r2, [sp, #4]
 80074fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007506:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007510:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007512:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007514:	4819      	ldr	r0, [pc, #100]	; (800757c <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007516:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800751a:	f005 f9c9 	bl	800c8b0 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800751e:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 8007522:	4a17      	ldr	r2, [pc, #92]	; (8007580 <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8007524:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8007526:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8007528:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 800752c:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800752e:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8007530:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8007532:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007534:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007536:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8007538:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 800753a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800753e:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007540:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007542:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8007544:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007546:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8007548:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800754a:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800754e:	f002 fe43 	bl	800a1d8 <HAL_DMA_Init>
 8007552:	b958      	cbnz	r0, 800756c <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8007554:	2200      	movs	r2, #0
 8007556:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8007558:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800755a:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800755c:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800755e:	f002 fb29 	bl	8009bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007562:	2036      	movs	r0, #54	; 0x36
 8007564:	f002 fb70 	bl	8009c48 <HAL_NVIC_EnableIRQ>
}
 8007568:	b008      	add	sp, #32
 800756a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800756c:	f7fd f8ec 	bl	8004748 <Error_Handler>
 8007570:	e7f0      	b.n	8007554 <HAL_DAC_MspInit+0x90>
 8007572:	bf00      	nop
 8007574:	40007400 	.word	0x40007400
 8007578:	20002308 	.word	0x20002308
 800757c:	40020000 	.word	0x40020000
 8007580:	40026088 	.word	0x40026088

08007584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007584:	b530      	push	{r4, r5, lr}
 8007586:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007588:	2100      	movs	r1, #0
{
 800758a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800758c:	2290      	movs	r2, #144	; 0x90
 800758e:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007590:	910b      	str	r1, [sp, #44]	; 0x2c
 8007592:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8007596:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800759a:	f01e f8fd 	bl	8025798 <memset>
  if(hi2c->Instance==I2C1)
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	4a4a      	ldr	r2, [pc, #296]	; (80076cc <HAL_I2C_MspInit+0x148>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d007      	beq.n	80075b6 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80075a6:	4a4a      	ldr	r2, [pc, #296]	; (80076d0 <HAL_I2C_MspInit+0x14c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d030      	beq.n	800760e <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 80075ac:	4a49      	ldr	r2, [pc, #292]	; (80076d4 <HAL_I2C_MspInit+0x150>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d057      	beq.n	8007662 <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80075b2:	b031      	add	sp, #196	; 0xc4
 80075b4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80075b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80075ba:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80075bc:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80075be:	f007 fcb5 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d178      	bne.n	80076b8 <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075c6:	4c44      	ldr	r4, [pc, #272]	; (80076d8 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80075c8:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075cc:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075ce:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075d2:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075d4:	f043 0302 	orr.w	r3, r3, #2
 80075d8:	6323      	str	r3, [r4, #48]	; 0x30
 80075da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80075dc:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075e0:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e4:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80075e8:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075ea:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075ec:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075f0:	483a      	ldr	r0, [pc, #232]	; (80076dc <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80075f2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075f4:	f005 f95c 	bl	800c8b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80075f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075fe:	6423      	str	r3, [r4, #64]	; 0x40
 8007600:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007606:	9302      	str	r3, [sp, #8]
 8007608:	9b02      	ldr	r3, [sp, #8]
}
 800760a:	b031      	add	sp, #196	; 0xc4
 800760c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800760e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007612:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007614:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007616:	f007 fc89 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 800761a:	2800      	cmp	r0, #0
 800761c:	d14f      	bne.n	80076be <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800761e:	4c2e      	ldr	r4, [pc, #184]	; (80076d8 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007620:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007622:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007624:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007626:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007628:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800762a:	f043 0320 	orr.w	r3, r3, #32
 800762e:	6323      	str	r3, [r4, #48]	; 0x30
 8007630:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007632:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007634:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007638:	4829      	ldr	r0, [pc, #164]	; (80076e0 <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800763a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800763c:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800763e:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007642:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007646:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007648:	f005 f932 	bl	800c8b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800764c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800764e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007652:	6423      	str	r3, [r4, #64]	; 0x40
 8007654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	9b04      	ldr	r3, [sp, #16]
}
 800765e:	b031      	add	sp, #196	; 0xc4
 8007660:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8007662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007666:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8007668:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800766a:	f007 fc5f 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 800766e:	bb48      	cbnz	r0, 80076c4 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007670:	4c19      	ldr	r4, [pc, #100]	; (80076d8 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007672:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007676:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007678:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800767a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800767c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800767e:	f043 0320 	orr.w	r3, r3, #32
 8007682:	6323      	str	r3, [r4, #48]	; 0x30
 8007684:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007686:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800768a:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800768e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007690:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007692:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007694:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007696:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800769a:	4811      	ldr	r0, [pc, #68]	; (80076e0 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800769c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800769e:	f005 f907 	bl	800c8b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80076a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076a8:	6423      	str	r3, [r4, #64]	; 0x40
 80076aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076b0:	9306      	str	r3, [sp, #24]
 80076b2:	9b06      	ldr	r3, [sp, #24]
}
 80076b4:	b031      	add	sp, #196	; 0xc4
 80076b6:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80076b8:	f7fd f846 	bl	8004748 <Error_Handler>
 80076bc:	e783      	b.n	80075c6 <HAL_I2C_MspInit+0x42>
      Error_Handler();
 80076be:	f7fd f843 	bl	8004748 <Error_Handler>
 80076c2:	e7ac      	b.n	800761e <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 80076c4:	f7fd f840 	bl	8004748 <Error_Handler>
 80076c8:	e7d2      	b.n	8007670 <HAL_I2C_MspInit+0xec>
 80076ca:	bf00      	nop
 80076cc:	40005400 	.word	0x40005400
 80076d0:	40005800 	.word	0x40005800
 80076d4:	40006000 	.word	0x40006000
 80076d8:	40023800 	.word	0x40023800
 80076dc:	40020400 	.word	0x40020400
 80076e0:	40021400 	.word	0x40021400

080076e4 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 80076e4:	4b08      	ldr	r3, [pc, #32]	; (8007708 <HAL_RNG_MspInit+0x24>)
 80076e6:	6802      	ldr	r2, [r0, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d000      	beq.n	80076ee <HAL_RNG_MspInit+0xa>
 80076ec:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <HAL_RNG_MspInit+0x28>)
{
 80076f0:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 80076f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076f8:	635a      	str	r2, [r3, #52]	; 0x34
 80076fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8007704:	b002      	add	sp, #8
 8007706:	4770      	bx	lr
 8007708:	50060800 	.word	0x50060800
 800770c:	40023800 	.word	0x40023800

08007710 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8007710:	4a52      	ldr	r2, [pc, #328]	; (800785c <HAL_SPI_MspInit+0x14c>)
 8007712:	6803      	ldr	r3, [r0, #0]
{
 8007714:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 8007716:	4293      	cmp	r3, r2
{
 8007718:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800771a:	f04f 0400 	mov.w	r4, #0
 800771e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8007722:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007726:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8007728:	d007      	beq.n	800773a <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 800772a:	4a4d      	ldr	r2, [pc, #308]	; (8007860 <HAL_SPI_MspInit+0x150>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d038      	beq.n	80077a2 <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8007730:	4a4c      	ldr	r2, [pc, #304]	; (8007864 <HAL_SPI_MspInit+0x154>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d071      	beq.n	800781a <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8007736:	b00f      	add	sp, #60	; 0x3c
 8007738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800773a:	4b4b      	ldr	r3, [pc, #300]	; (8007868 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800773c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800773e:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007740:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007744:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007746:	4849      	ldr	r0, [pc, #292]	; (800786c <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800774c:	641a      	str	r2, [r3, #64]	; 0x40
 800774e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007750:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007754:	9201      	str	r2, [sp, #4]
 8007756:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800775a:	f042 0204 	orr.w	r2, r2, #4
 800775e:	631a      	str	r2, [r3, #48]	; 0x30
 8007760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007762:	f002 0204 	and.w	r2, r2, #4
 8007766:	9202      	str	r2, [sp, #8]
 8007768:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800776a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800776c:	f042 0208 	orr.w	r2, r2, #8
 8007770:	631a      	str	r2, [r3, #48]	; 0x30
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007774:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007776:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800777a:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800777c:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007780:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007782:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007784:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007786:	f005 f893 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800778a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800778c:	a909      	add	r1, sp, #36	; 0x24
 800778e:	4838      	ldr	r0, [pc, #224]	; (8007870 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007790:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007792:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007794:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007796:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800779a:	f005 f889 	bl	800c8b0 <HAL_GPIO_Init>
}
 800779e:	b00f      	add	sp, #60	; 0x3c
 80077a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80077a2:	4b31      	ldr	r3, [pc, #196]	; (8007868 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a4:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80077a6:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077a8:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 80077aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80077ac:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077ae:	4831      	ldr	r0, [pc, #196]	; (8007874 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80077b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
 80077b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077b8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80077bc:	9204      	str	r2, [sp, #16]
 80077be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c2:	4332      	orrs	r2, r6
 80077c4:	631a      	str	r2, [r3, #48]	; 0x30
 80077c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c8:	4032      	ands	r2, r6
 80077ca:	9205      	str	r2, [sp, #20]
 80077cc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d0:	430a      	orrs	r2, r1
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077d6:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077d8:	400b      	ands	r3, r1
 80077da:	9306      	str	r3, [sp, #24]
 80077dc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80077de:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e0:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077e4:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80077e6:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077e8:	f005 f862 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80077ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077f0:	a909      	add	r1, sp, #36	; 0x24
 80077f2:	481e      	ldr	r0, [pc, #120]	; (800786c <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80077f4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f6:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80077fa:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077fe:	f005 f857 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007802:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007804:	a909      	add	r1, sp, #36	; 0x24
 8007806:	481b      	ldr	r0, [pc, #108]	; (8007874 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007808:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800780a:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800780c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800780e:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007812:	f005 f84d 	bl	800c8b0 <HAL_GPIO_Init>
}
 8007816:	b00f      	add	sp, #60	; 0x3c
 8007818:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800781c:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800781e:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007820:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007824:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007826:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800782a:	645a      	str	r2, [r3, #68]	; 0x44
 800782c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800782e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007832:	9207      	str	r2, [sp, #28]
 8007834:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007838:	f042 0210 	orr.w	r2, r2, #16
 800783c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800783e:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007842:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007844:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007848:	480b      	ldr	r0, [pc, #44]	; (8007878 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800784a:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800784c:	9308      	str	r3, [sp, #32]
 800784e:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007850:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007854:	f005 f82c 	bl	800c8b0 <HAL_GPIO_Init>
}
 8007858:	b00f      	add	sp, #60	; 0x3c
 800785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785c:	40003800 	.word	0x40003800
 8007860:	40003c00 	.word	0x40003c00
 8007864:	40013400 	.word	0x40013400
 8007868:	40023800 	.word	0x40023800
 800786c:	40020800 	.word	0x40020800
 8007870:	40020c00 	.word	0x40020c00
 8007874:	40020400 	.word	0x40020400
 8007878:	40021000 	.word	0x40021000

0800787c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800787c:	4a73      	ldr	r2, [pc, #460]	; (8007a4c <HAL_TIM_Base_MspInit+0x1d0>)
 800787e:	6803      	ldr	r3, [r0, #0]
{
 8007880:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 8007882:	4293      	cmp	r3, r2
{
 8007884:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007886:	f04f 0400 	mov.w	r4, #0
 800788a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800788e:	940d      	str	r4, [sp, #52]	; 0x34
 8007890:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 8007894:	d021      	beq.n	80078da <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789a:	d055      	beq.n	8007948 <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800789c:	4a6c      	ldr	r2, [pc, #432]	; (8007a50 <HAL_TIM_Base_MspInit+0x1d4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d027      	beq.n	80078f2 <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80078a2:	4a6c      	ldr	r2, [pc, #432]	; (8007a54 <HAL_TIM_Base_MspInit+0x1d8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d043      	beq.n	8007930 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 80078a8:	4a6b      	ldr	r2, [pc, #428]	; (8007a58 <HAL_TIM_Base_MspInit+0x1dc>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	f000 80a5 	beq.w	80079fa <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80078b0:	4a6a      	ldr	r2, [pc, #424]	; (8007a5c <HAL_TIM_Base_MspInit+0x1e0>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	f000 80b4 	beq.w	8007a20 <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 80078b8:	4a69      	ldr	r2, [pc, #420]	; (8007a60 <HAL_TIM_Base_MspInit+0x1e4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d02d      	beq.n	800791a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 80078be:	4a69      	ldr	r2, [pc, #420]	; (8007a64 <HAL_TIM_Base_MspInit+0x1e8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d114      	bne.n	80078ee <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80078c4:	4b68      	ldr	r3, [pc, #416]	; (8007a68 <HAL_TIM_Base_MspInit+0x1ec>)
 80078c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078cc:	641a      	str	r2, [r3, #64]	; 0x40
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d4:	930a      	str	r3, [sp, #40]	; 0x28
 80078d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80078d8:	e009      	b.n	80078ee <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80078da:	4b63      	ldr	r3, [pc, #396]	; (8007a68 <HAL_TIM_Base_MspInit+0x1ec>)
 80078dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	645a      	str	r2, [r3, #68]	; 0x44
 80078e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	9b01      	ldr	r3, [sp, #4]
}
 80078ee:	b011      	add	sp, #68	; 0x44
 80078f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80078f2:	4b5d      	ldr	r3, [pc, #372]	; (8007a68 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80078f4:	4622      	mov	r2, r4
 80078f6:	2106      	movs	r1, #6
 80078f8:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80078fa:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80078fc:	f044 0402 	orr.w	r4, r4, #2
 8007900:	641c      	str	r4, [r3, #64]	; 0x40
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	9305      	str	r3, [sp, #20]
 800790a:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800790c:	f002 f952 	bl	8009bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007910:	201d      	movs	r0, #29
 8007912:	f002 f999 	bl	8009c48 <HAL_NVIC_EnableIRQ>
}
 8007916:	b011      	add	sp, #68	; 0x44
 8007918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 800791a:	4b53      	ldr	r3, [pc, #332]	; (8007a68 <HAL_TIM_Base_MspInit+0x1ec>)
 800791c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800791e:	f042 0220 	orr.w	r2, r2, #32
 8007922:	641a      	str	r2, [r3, #64]	; 0x40
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	9309      	str	r3, [sp, #36]	; 0x24
 800792c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792e:	e7de      	b.n	80078ee <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007930:	4b4d      	ldr	r3, [pc, #308]	; (8007a68 <HAL_TIM_Base_MspInit+0x1ec>)
 8007932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007934:	f042 0204 	orr.w	r2, r2, #4
 8007938:	641a      	str	r2, [r3, #64]	; 0x40
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	9306      	str	r3, [sp, #24]
 8007942:	9b06      	ldr	r3, [sp, #24]
}
 8007944:	b011      	add	sp, #68	; 0x44
 8007946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007948:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800794c:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800794e:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007950:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007954:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007956:	4845      	ldr	r0, [pc, #276]	; (8007a6c <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007958:	f042 0201 	orr.w	r2, r2, #1
 800795c:	641a      	str	r2, [r3, #64]	; 0x40
 800795e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007960:	f002 0201 	and.w	r2, r2, #1
 8007964:	9202      	str	r2, [sp, #8]
 8007966:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
 8007970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007972:	f002 0201 	and.w	r2, r2, #1
 8007976:	9203      	str	r2, [sp, #12]
 8007978:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800797a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800797c:	f042 0202 	orr.w	r2, r2, #2
 8007980:	631a      	str	r2, [r3, #48]	; 0x30
 8007982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007984:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007986:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800798a:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800798c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800798e:	2320      	movs	r3, #32
 8007990:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007992:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007994:	f004 ff8c 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007998:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800799a:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800799e:	4834      	ldr	r0, [pc, #208]	; (8007a70 <HAL_TIM_Base_MspInit+0x1f4>)
 80079a0:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079a2:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80079a4:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80079a6:	4e33      	ldr	r6, [pc, #204]	; (8007a74 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079a8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079ac:	f004 ff80 	bl	800c8b0 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80079b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80079b4:	4a30      	ldr	r2, [pc, #192]	; (8007a78 <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80079b6:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80079b8:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80079ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80079be:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80079c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80079c4:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80079c6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80079ca:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80079cc:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80079ce:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80079d0:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80079d2:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80079d4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80079d8:	f002 fbfe 	bl	800a1d8 <HAL_DMA_Init>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d132      	bne.n	8007a46 <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80079e0:	2200      	movs	r2, #0
 80079e2:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 80079e4:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80079e6:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 80079e8:	62ee      	str	r6, [r5, #44]	; 0x2c
 80079ea:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80079ec:	f002 f8e2 	bl	8009bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80079f0:	201c      	movs	r0, #28
 80079f2:	f002 f929 	bl	8009c48 <HAL_NVIC_EnableIRQ>
}
 80079f6:	b011      	add	sp, #68	; 0x44
 80079f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 80079fa:	4b1b      	ldr	r3, [pc, #108]	; (8007a68 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80079fc:	4622      	mov	r2, r4
 80079fe:	2105      	movs	r1, #5
 8007a00:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007a02:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007a04:	f044 0408 	orr.w	r4, r4, #8
 8007a08:	641c      	str	r4, [r3, #64]	; 0x40
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	9307      	str	r3, [sp, #28]
 8007a12:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8007a14:	f002 f8ce 	bl	8009bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007a18:	2032      	movs	r0, #50	; 0x32
 8007a1a:	f002 f915 	bl	8009c48 <HAL_NVIC_EnableIRQ>
 8007a1e:	e766      	b.n	80078ee <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007a20:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8007a22:	4622      	mov	r2, r4
 8007a24:	2106      	movs	r1, #6
 8007a26:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007a28:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007a2a:	f044 0410 	orr.w	r4, r4, #16
 8007a2e:	641c      	str	r4, [r3, #64]	; 0x40
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	f003 0310 	and.w	r3, r3, #16
 8007a36:	9308      	str	r3, [sp, #32]
 8007a38:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8007a3a:	f002 f8bb 	bl	8009bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007a3e:	2036      	movs	r0, #54	; 0x36
 8007a40:	f002 f902 	bl	8009c48 <HAL_NVIC_EnableIRQ>
 8007a44:	e753      	b.n	80078ee <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 8007a46:	f7fc fe7f 	bl	8004748 <Error_Handler>
 8007a4a:	e7c9      	b.n	80079e0 <HAL_TIM_Base_MspInit+0x164>
 8007a4c:	40010000 	.word	0x40010000
 8007a50:	40000400 	.word	0x40000400
 8007a54:	40000800 	.word	0x40000800
 8007a58:	40000c00 	.word	0x40000c00
 8007a5c:	40001000 	.word	0x40001000
 8007a60:	40001400 	.word	0x40001400
 8007a64:	40002000 	.word	0x40002000
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	40020000 	.word	0x40020000
 8007a70:	40020400 	.word	0x40020400
 8007a74:	20002368 	.word	0x20002368
 8007a78:	40026028 	.word	0x40026028

08007a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8007a7c:	491d      	ldr	r1, [pc, #116]	; (8007af4 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a7e:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8007a80:	6802      	ldr	r2, [r0, #0]
{
 8007a82:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8007a84:	428a      	cmp	r2, r1
{
 8007a86:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a88:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007a8c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007a90:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8007a92:	d004      	beq.n	8007a9e <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8007a94:	4b18      	ldr	r3, [pc, #96]	; (8007af8 <HAL_TIM_MspPostInit+0x7c>)
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d016      	beq.n	8007ac8 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007a9a:	b008      	add	sp, #32
 8007a9c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a9e:	4b17      	ldr	r3, [pc, #92]	; (8007afc <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007aa0:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aa2:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007aa4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aa8:	f042 0204 	orr.w	r2, r2, #4
 8007aac:	631a      	str	r2, [r3, #48]	; 0x30
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007ab0:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ab2:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ab6:	4812      	ldr	r0, [pc, #72]	; (8007b00 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab8:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007abe:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ac0:	f004 fef6 	bl	800c8b0 <HAL_GPIO_Init>
}
 8007ac4:	b008      	add	sp, #32
 8007ac6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ac8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007acc:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007ace:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ad2:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad6:	4322      	orrs	r2, r4
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8007ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007adc:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ade:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ae0:	4808      	ldr	r0, [pc, #32]	; (8007b04 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae2:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ae4:	9302      	str	r3, [sp, #8]
 8007ae6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007ae8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aea:	f004 fee1 	bl	800c8b0 <HAL_GPIO_Init>
}
 8007aee:	b008      	add	sp, #32
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	bf00      	nop
 8007af4:	40000400 	.word	0x40000400
 8007af8:	40000800 	.word	0x40000800
 8007afc:	40023800 	.word	0x40023800
 8007b00:	40020800 	.word	0x40020800
 8007b04:	40020400 	.word	0x40020400

08007b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0c:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b0e:	2100      	movs	r1, #0
{
 8007b10:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b12:	2290      	movs	r2, #144	; 0x90
 8007b14:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b16:	9117      	str	r1, [sp, #92]	; 0x5c
 8007b18:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8007b1c:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b20:	f01d fe3a 	bl	8025798 <memset>
  if(huart->Instance==UART4)
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	4aa2      	ldr	r2, [pc, #648]	; (8007db0 <HAL_UART_MspInit+0x2a8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d070      	beq.n	8007c0e <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8007b2c:	4aa1      	ldr	r2, [pc, #644]	; (8007db4 <HAL_UART_MspInit+0x2ac>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	f000 80c1 	beq.w	8007cb6 <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8007b34:	4aa0      	ldr	r2, [pc, #640]	; (8007db8 <HAL_UART_MspInit+0x2b0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	f000 815e 	beq.w	8007df8 <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8007b3c:	4a9f      	ldr	r2, [pc, #636]	; (8007dbc <HAL_UART_MspInit+0x2b4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00e      	beq.n	8007b60 <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8007b42:	4a9f      	ldr	r2, [pc, #636]	; (8007dc0 <HAL_UART_MspInit+0x2b8>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	f000 818e 	beq.w	8007e66 <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8007b4a:	4a9e      	ldr	r2, [pc, #632]	; (8007dc4 <HAL_UART_MspInit+0x2bc>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	f000 81b4 	beq.w	8007eba <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8007b52:	4a9d      	ldr	r2, [pc, #628]	; (8007dc8 <HAL_UART_MspInit+0x2c0>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	f000 81df 	beq.w	8007f18 <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007b5a:	b03c      	add	sp, #240	; 0xf0
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8007b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b64:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8007b66:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b68:	f007 f9e0 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	f040 8261 	bne.w	8008034 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8007b72:	4b96      	ldr	r3, [pc, #600]	; (8007dcc <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007b74:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b76:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007b78:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 8007b7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7c:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b7e:	4894      	ldr	r0, [pc, #592]	; (8007dd0 <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8007b80:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007b84:	6419      	str	r1, [r3, #64]	; 0x40
 8007b86:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007b88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007b8c:	910a      	str	r1, [sp, #40]	; 0x28
 8007b8e:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007b90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b92:	f041 0110 	orr.w	r1, r1, #16
 8007b96:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b98:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007b9c:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007b9e:	f003 0310 	and.w	r3, r3, #16
 8007ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba6:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007baa:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bae:	f004 fe7f 	bl	800c8b0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bb2:	4887      	ldr	r0, [pc, #540]	; (8007dd0 <HAL_UART_MspInit+0x2c8>)
 8007bb4:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007bb6:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb8:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007bbc:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bc0:	f004 fe76 	bl	800c8b0 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8007bc4:	4d83      	ldr	r5, [pc, #524]	; (8007dd4 <HAL_UART_MspInit+0x2cc>)
 8007bc6:	4a84      	ldr	r2, [pc, #528]	; (8007dd8 <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8007bc8:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8007bcc:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8007bce:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8007bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8007bda:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007be0:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007be2:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007be6:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007bea:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8007bee:	f002 faf3 	bl	800a1d8 <HAL_DMA_Init>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f040 8221 	bne.w	800803a <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2103      	movs	r1, #3
 8007bfc:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8007bfe:	6725      	str	r5, [r4, #112]	; 0x70
 8007c00:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8007c02:	f001 ffd7 	bl	8009bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8007c06:	2053      	movs	r0, #83	; 0x53
 8007c08:	f002 f81e 	bl	8009c48 <HAL_NVIC_EnableIRQ>
 8007c0c:	e7a5      	b.n	8007b5a <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c12:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007c14:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c16:	f007 f989 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	f040 8179 	bne.w	8007f12 <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8007c20:	4b6a      	ldr	r3, [pc, #424]	; (8007dcc <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c22:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c24:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c26:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8007c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007c2a:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c2c:	a913      	add	r1, sp, #76	; 0x4c
 8007c2e:	486b      	ldr	r0, [pc, #428]	; (8007ddc <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8007c30:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007c34:	641a      	str	r2, [r3, #64]	; 0x40
 8007c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c38:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8007c3c:	9201      	str	r2, [sp, #4]
 8007c3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
 8007c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c4a:	f002 0201 	and.w	r2, r2, #1
 8007c4e:	9202      	str	r2, [sp, #8]
 8007c50:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c54:	433a      	orrs	r2, r7
 8007c56:	631a      	str	r2, [r3, #48]	; 0x30
 8007c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c5a:	403a      	ands	r2, r7
 8007c5c:	9203      	str	r2, [sp, #12]
 8007c5e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c62:	f042 0204 	orr.w	r2, r2, #4
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c6a:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c6c:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007c70:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8007c74:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c78:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8007c7a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c7c:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c80:	f004 fe16 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c88:	a913      	add	r1, sp, #76	; 0x4c
 8007c8a:	4855      	ldr	r0, [pc, #340]	; (8007de0 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007c8c:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c8e:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007c92:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c96:	f004 fe0b 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c9e:	a913      	add	r1, sp, #76	; 0x4c
 8007ca0:	4850      	ldr	r0, [pc, #320]	; (8007de4 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca2:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007ca4:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007ca6:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ca8:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cac:	f004 fe00 	bl	800c8b0 <HAL_GPIO_Init>
}
 8007cb0:	b03c      	add	sp, #240	; 0xf0
 8007cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007cba:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007cbc:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007cbe:	f007 f935 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f040 81b0 	bne.w	8008028 <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007cc8:	4b40      	ldr	r3, [pc, #256]	; (8007dcc <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cca:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ccc:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007cce:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8007cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cd4:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cd8:	a913      	add	r1, sp, #76	; 0x4c
 8007cda:	4841      	ldr	r0, [pc, #260]	; (8007de0 <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8007cdc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8007ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ce4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007ce8:	9205      	str	r2, [sp, #20]
 8007cea:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cee:	4332      	orrs	r2, r6
 8007cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8007cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf4:	4032      	ands	r2, r6
 8007cf6:	9206      	str	r2, [sp, #24]
 8007cf8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cfc:	f042 0204 	orr.w	r2, r2, #4
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d04:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	9307      	str	r3, [sp, #28]
 8007d0c:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d0e:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d10:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d14:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d18:	f004 fdca 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d1c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d1e:	4831      	ldr	r0, [pc, #196]	; (8007de4 <HAL_UART_MspInit+0x2dc>)
 8007d20:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d22:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d24:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d26:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007d28:	4e2f      	ldr	r6, [pc, #188]	; (8007de8 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007d2a:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007d2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d30:	f004 fdbe 	bl	800c8b0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007d34:	4a2d      	ldr	r2, [pc, #180]	; (8007dec <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007d36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007d3a:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d3c:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007d3e:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007d44:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007d46:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d4a:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007d4c:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007d50:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d54:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007d58:	f002 fa3e 	bl	800a1d8 <HAL_DMA_Init>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	f040 8160 	bne.w	8008022 <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007d62:	4d23      	ldr	r5, [pc, #140]	; (8007df0 <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8007d64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007d68:	4922      	ldr	r1, [pc, #136]	; (8007df4 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d6a:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8007d6c:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007d72:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d74:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007d76:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8007d78:	6726      	str	r6, [r4, #112]	; 0x70
 8007d7a:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d7c:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d7e:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d80:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d82:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d84:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d86:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d88:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007d8c:	f002 fa24 	bl	800a1d8 <HAL_DMA_Init>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f040 8143 	bne.w	800801c <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8007d96:	2200      	movs	r2, #0
 8007d98:	2107      	movs	r1, #7
 8007d9a:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8007d9c:	66e5      	str	r5, [r4, #108]	; 0x6c
 8007d9e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8007da0:	f001 ff08 	bl	8009bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007da4:	2035      	movs	r0, #53	; 0x35
 8007da6:	f001 ff4f 	bl	8009c48 <HAL_NVIC_EnableIRQ>
}
 8007daa:	b03c      	add	sp, #240	; 0xf0
 8007dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db0:	40004c00 	.word	0x40004c00
 8007db4:	40005000 	.word	0x40005000
 8007db8:	40007800 	.word	0x40007800
 8007dbc:	40007c00 	.word	0x40007c00
 8007dc0:	40004400 	.word	0x40004400
 8007dc4:	40004800 	.word	0x40004800
 8007dc8:	40011400 	.word	0x40011400
 8007dcc:	40023800 	.word	0x40023800
 8007dd0:	40021000 	.word	0x40021000
 8007dd4:	20002488 	.word	0x20002488
 8007dd8:	400260a0 	.word	0x400260a0
 8007ddc:	40020000 	.word	0x40020000
 8007de0:	40020400 	.word	0x40020400
 8007de4:	40020800 	.word	0x40020800
 8007de8:	200023c8 	.word	0x200023c8
 8007dec:	40026010 	.word	0x40026010
 8007df0:	20002428 	.word	0x20002428
 8007df4:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8007df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007dfc:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8007dfe:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e00:	f007 f894 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	f040 8112 	bne.w	800802e <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 8007e0a:	4b8f      	ldr	r3, [pc, #572]	; (8008048 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007e0c:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007e0e:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e10:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8007e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007e14:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e16:	488d      	ldr	r0, [pc, #564]	; (800804c <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8007e18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8007e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007e24:	9208      	str	r2, [sp, #32]
 8007e26:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e2a:	f042 0220 	orr.w	r2, r2, #32
 8007e2e:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e30:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007e34:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e36:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e38:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e3c:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e3e:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e40:	9309      	str	r3, [sp, #36]	; 0x24
 8007e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007e44:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e48:	f004 fd32 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007e4c:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e4e:	a913      	add	r1, sp, #76	; 0x4c
 8007e50:	487e      	ldr	r0, [pc, #504]	; (800804c <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e52:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007e54:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007e56:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007e58:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e5c:	f004 fd28 	bl	800c8b0 <HAL_GPIO_Init>
}
 8007e60:	b03c      	add	sp, #240	; 0xf0
 8007e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007e66:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e68:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007e6a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e6c:	f007 f85e 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f040 80e5 	bne.w	8008040 <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007e76:	4b74      	ldr	r3, [pc, #464]	; (8008048 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e78:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007e7a:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e7c:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8007e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e80:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8007e82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e86:	641a      	str	r2, [r3, #64]	; 0x40
 8007e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e8a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007e8e:	920c      	str	r2, [sp, #48]	; 0x30
 8007e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e94:	f042 0208 	orr.w	r2, r2, #8
 8007e98:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e9a:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e9e:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ea0:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ea4:	486a      	ldr	r0, [pc, #424]	; (8008050 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007ea6:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ea8:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007eaa:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007eac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007eae:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007eb0:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007eb4:	f004 fcfc 	bl	800c8b0 <HAL_GPIO_Init>
 8007eb8:	e64f      	b.n	8007b5a <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007eba:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ebe:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007ec0:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ec2:	f007 f833 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f040 809c 	bne.w	8008004 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007ecc:	4b5e      	ldr	r3, [pc, #376]	; (8008048 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ece:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007ed0:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed4:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8007ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ed8:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8007eda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007ede:	641a      	str	r2, [r3, #64]	; 0x40
 8007ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ee2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8007ee6:	920e      	str	r2, [sp, #56]	; 0x38
 8007ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eec:	f042 0208 	orr.w	r2, r2, #8
 8007ef0:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ef2:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ef6:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ef8:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007efc:	4854      	ldr	r0, [pc, #336]	; (8008050 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007efe:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f00:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f02:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f06:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f08:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f0c:	f004 fcd0 	bl	800c8b0 <HAL_GPIO_Init>
 8007f10:	e623      	b.n	8007b5a <HAL_UART_MspInit+0x52>
      Error_Handler();
 8007f12:	f7fc fc19 	bl	8004748 <Error_Handler>
 8007f16:	e683      	b.n	8007c20 <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8007f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f1c:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8007f1e:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f20:	f007 f804 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d176      	bne.n	8008016 <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007f28:	4b47      	ldr	r3, [pc, #284]	; (8008048 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007f2a:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f2c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2e:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 8007f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f32:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f34:	4847      	ldr	r0, [pc, #284]	; (8008054 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8007f36:	f042 0220 	orr.w	r2, r2, #32
 8007f3a:	645a      	str	r2, [r3, #68]	; 0x44
 8007f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f3e:	f002 0220 	and.w	r2, r2, #32
 8007f42:	9210      	str	r2, [sp, #64]	; 0x40
 8007f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f48:	f042 0204 	orr.w	r2, r2, #4
 8007f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f50:	f002 0204 	and.w	r2, r2, #4
 8007f54:	9211      	str	r2, [sp, #68]	; 0x44
 8007f56:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f60:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007f62:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f64:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f66:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007f68:	9312      	str	r3, [sp, #72]	; 0x48
 8007f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f6c:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f70:	a913      	add	r1, sp, #76	; 0x4c
 8007f72:	f004 fc9d 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f76:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007f78:	4837      	ldr	r0, [pc, #220]	; (8008058 <HAL_UART_MspInit+0x550>)
 8007f7a:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f7c:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f82:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007f84:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007f86:	4e35      	ldr	r6, [pc, #212]	; (800805c <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f88:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007f8c:	f004 fc90 	bl	800c8b0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007f90:	4a33      	ldr	r2, [pc, #204]	; (8008060 <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007f92:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007f96:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007f98:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007fa4:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007faa:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007fae:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007fb2:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007fb6:	f002 f90f 	bl	800a1d8 <HAL_DMA_Init>
 8007fba:	bb48      	cbnz	r0, 8008010 <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007fbc:	4d29      	ldr	r5, [pc, #164]	; (8008064 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8007fbe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007fc2:	4929      	ldr	r1, [pc, #164]	; (8008068 <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fc4:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8007fc6:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007fcc:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007fce:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007fd0:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007fd2:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007fd4:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007fd6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fda:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007fdc:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007fde:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007fe0:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007fe2:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007fe4:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007fe6:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8007fe8:	6726      	str	r6, [r4, #112]	; 0x70
 8007fea:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007fec:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007ff0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ff4:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007ff8:	f002 f8ee 	bl	800a1d8 <HAL_DMA_Init>
 8007ffc:	b928      	cbnz	r0, 800800a <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8007ffe:	66e5      	str	r5, [r4, #108]	; 0x6c
 8008000:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8008002:	e5aa      	b.n	8007b5a <HAL_UART_MspInit+0x52>
      Error_Handler();
 8008004:	f7fc fba0 	bl	8004748 <Error_Handler>
 8008008:	e760      	b.n	8007ecc <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 800800a:	f7fc fb9d 	bl	8004748 <Error_Handler>
 800800e:	e7f6      	b.n	8007ffe <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 8008010:	f7fc fb9a 	bl	8004748 <Error_Handler>
 8008014:	e7d2      	b.n	8007fbc <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 8008016:	f7fc fb97 	bl	8004748 <Error_Handler>
 800801a:	e785      	b.n	8007f28 <HAL_UART_MspInit+0x420>
      Error_Handler();
 800801c:	f7fc fb94 	bl	8004748 <Error_Handler>
 8008020:	e6b9      	b.n	8007d96 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8008022:	f7fc fb91 	bl	8004748 <Error_Handler>
 8008026:	e69c      	b.n	8007d62 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8008028:	f7fc fb8e 	bl	8004748 <Error_Handler>
 800802c:	e64c      	b.n	8007cc8 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 800802e:	f7fc fb8b 	bl	8004748 <Error_Handler>
 8008032:	e6ea      	b.n	8007e0a <HAL_UART_MspInit+0x302>
      Error_Handler();
 8008034:	f7fc fb88 	bl	8004748 <Error_Handler>
 8008038:	e59b      	b.n	8007b72 <HAL_UART_MspInit+0x6a>
      Error_Handler();
 800803a:	f7fc fb85 	bl	8004748 <Error_Handler>
 800803e:	e5db      	b.n	8007bf8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8008040:	f7fc fb82 	bl	8004748 <Error_Handler>
 8008044:	e717      	b.n	8007e76 <HAL_UART_MspInit+0x36e>
 8008046:	bf00      	nop
 8008048:	40023800 	.word	0x40023800
 800804c:	40021400 	.word	0x40021400
 8008050:	40020c00 	.word	0x40020c00
 8008054:	40020800 	.word	0x40020800
 8008058:	40021800 	.word	0x40021800
 800805c:	200024e8 	.word	0x200024e8
 8008060:	40026428 	.word	0x40026428
 8008064:	20002548 	.word	0x20002548
 8008068:	400264a0 	.word	0x400264a0

0800806c <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 800806c:	4a4f      	ldr	r2, [pc, #316]	; (80081ac <HAL_UART_MspDeInit+0x140>)
 800806e:	6803      	ldr	r3, [r0, #0]
 8008070:	4293      	cmp	r3, r2
{
 8008072:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8008074:	d025      	beq.n	80080c2 <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 8008076:	4a4e      	ldr	r2, [pc, #312]	; (80081b0 <HAL_UART_MspDeInit+0x144>)
 8008078:	4604      	mov	r4, r0
 800807a:	4293      	cmp	r3, r2
 800807c:	d038      	beq.n	80080f0 <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 800807e:	4a4d      	ldr	r2, [pc, #308]	; (80081b4 <HAL_UART_MspDeInit+0x148>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d050      	beq.n	8008126 <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 8008084:	4a4c      	ldr	r2, [pc, #304]	; (80081b8 <HAL_UART_MspDeInit+0x14c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d009      	beq.n	800809e <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800808a:	4a4c      	ldr	r2, [pc, #304]	; (80081bc <HAL_UART_MspDeInit+0x150>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d056      	beq.n	800813e <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8008090:	4a4b      	ldr	r2, [pc, #300]	; (80081c0 <HAL_UART_MspDeInit+0x154>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d062      	beq.n	800815c <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8008096:	4a4b      	ldr	r2, [pc, #300]	; (80081c4 <HAL_UART_MspDeInit+0x158>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d06c      	beq.n	8008176 <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800809c:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 800809e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 80080a2:	2103      	movs	r1, #3
 80080a4:	4848      	ldr	r0, [pc, #288]	; (80081c8 <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 80080a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80080a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080ac:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 80080ae:	f004 fda5 	bl	800cbfc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80080b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80080b4:	f002 fa3c 	bl	800a530 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 80080b8:	2053      	movs	r0, #83	; 0x53
}
 80080ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 80080be:	f001 bdd7 	b.w	8009c70 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 80080c2:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 80080c6:	f248 0101 	movw	r1, #32769	; 0x8001
 80080ca:	4840      	ldr	r0, [pc, #256]	; (80081cc <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 80080cc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80080ce:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80080d2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 80080d4:	f004 fd92 	bl	800cbfc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 80080d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080dc:	483c      	ldr	r0, [pc, #240]	; (80081d0 <HAL_UART_MspDeInit+0x164>)
 80080de:	f004 fd8d 	bl	800cbfc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80080e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080e6:	483b      	ldr	r0, [pc, #236]	; (80081d4 <HAL_UART_MspDeInit+0x168>)
}
 80080e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80080ec:	f004 bd86 	b.w	800cbfc <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 80080f0:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80080f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080f8:	4835      	ldr	r0, [pc, #212]	; (80081d0 <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 80080fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80080fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008100:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8008102:	f004 fd7b 	bl	800cbfc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8008106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800810a:	4832      	ldr	r0, [pc, #200]	; (80081d4 <HAL_UART_MspDeInit+0x168>)
 800810c:	f004 fd76 	bl	800cbfc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8008110:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008112:	f002 fa0d 	bl	800a530 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8008116:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008118:	f002 fa0a 	bl	800a530 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 800811c:	2035      	movs	r0, #53	; 0x35
}
 800811e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8008122:	f001 bda5 	b.w	8009c70 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 8008126:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 800812a:	21c0      	movs	r1, #192	; 0xc0
 800812c:	482a      	ldr	r0, [pc, #168]	; (80081d8 <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 800812e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008130:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8008134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 8008138:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 800813a:	f004 bd5f 	b.w	800cbfc <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 800813e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8008142:	4826      	ldr	r0, [pc, #152]	; (80081dc <HAL_UART_MspDeInit+0x170>)
 8008144:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 8008146:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008148:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800814c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 800814e:	f004 fd55 	bl	800cbfc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8008152:	2026      	movs	r0, #38	; 0x26
}
 8008154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8008158:	f001 bd8a 	b.w	8009c70 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 800815c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8008160:	f44f 7140 	mov.w	r1, #768	; 0x300
 8008164:	481d      	ldr	r0, [pc, #116]	; (80081dc <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8008166:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 800816c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8008170:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8008172:	f004 bd43 	b.w	800cbfc <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 8008176:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 800817a:	2140      	movs	r1, #64	; 0x40
 800817c:	4815      	ldr	r0, [pc, #84]	; (80081d4 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 800817e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008180:	f023 0320 	bic.w	r3, r3, #32
 8008184:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8008186:	f004 fd39 	bl	800cbfc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800818a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800818e:	4814      	ldr	r0, [pc, #80]	; (80081e0 <HAL_UART_MspDeInit+0x174>)
 8008190:	f004 fd34 	bl	800cbfc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8008194:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008196:	f002 f9cb 	bl	800a530 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800819a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800819c:	f002 f9c8 	bl	800a530 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80081a0:	2047      	movs	r0, #71	; 0x47
}
 80081a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80081a6:	f001 bd63 	b.w	8009c70 <HAL_NVIC_DisableIRQ>
 80081aa:	bf00      	nop
 80081ac:	40004c00 	.word	0x40004c00
 80081b0:	40005000 	.word	0x40005000
 80081b4:	40007800 	.word	0x40007800
 80081b8:	40007c00 	.word	0x40007c00
 80081bc:	40004400 	.word	0x40004400
 80081c0:	40004800 	.word	0x40004800
 80081c4:	40011400 	.word	0x40011400
 80081c8:	40021000 	.word	0x40021000
 80081cc:	40020000 	.word	0x40020000
 80081d0:	40020400 	.word	0x40020400
 80081d4:	40020800 	.word	0x40020800
 80081d8:	40021400 	.word	0x40021400
 80081dc:	40020c00 	.word	0x40020c00
 80081e0:	40021800 	.word	0x40021800

080081e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081e4:	b530      	push	{r4, r5, lr}
 80081e6:	4601      	mov	r1, r0
 80081e8:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 80081ea:	2200      	movs	r2, #0
 80081ec:	202b      	movs	r0, #43	; 0x2b
 80081ee:	f001 fce1 	bl	8009bb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80081f2:	202b      	movs	r0, #43	; 0x2b
 80081f4:	f001 fd28 	bl	8009c48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 80081f8:	4b15      	ldr	r3, [pc, #84]	; (8008250 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80081fa:	a901      	add	r1, sp, #4
 80081fc:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 80081fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8008200:	4c14      	ldr	r4, [pc, #80]	; (8008254 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8008202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008206:	4d14      	ldr	r5, [pc, #80]	; (8008258 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8008208:	641a      	str	r2, [r3, #64]	; 0x40
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	9302      	str	r3, [sp, #8]
 8008212:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008214:	f006 fe68 	bl	800eee8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008218:	f006 fe46 	bl	800eea8 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 800821c:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800821e:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 8008220:	490e      	ldr	r1, [pc, #56]	; (800825c <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 8008222:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8008224:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008226:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008228:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 800822c:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 8008230:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008232:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8008234:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008236:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 8008238:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 800823a:	f009 f947 	bl	80114cc <HAL_TIM_Base_Init>
 800823e:	b110      	cbz	r0, 8008246 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 8008240:	2001      	movs	r0, #1
}
 8008242:	b009      	add	sp, #36	; 0x24
 8008244:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 8008246:	4620      	mov	r0, r4
 8008248:	f008 fb14 	bl	8010874 <HAL_TIM_Base_Start_IT>
}
 800824c:	b009      	add	sp, #36	; 0x24
 800824e:	bd30      	pop	{r4, r5, pc}
 8008250:	40023800 	.word	0x40023800
 8008254:	20003448 	.word	0x20003448
 8008258:	431bde83 	.word	0x431bde83
 800825c:	40001800 	.word	0x40001800

08008260 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop

08008264 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008264:	e7fe      	b.n	8008264 <HardFault_Handler>
 8008266:	bf00      	nop

08008268 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008268:	e7fe      	b.n	8008268 <MemManage_Handler>
 800826a:	bf00      	nop

0800826c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800826c:	e7fe      	b.n	800826c <BusFault_Handler>
 800826e:	bf00      	nop

08008270 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008270:	e7fe      	b.n	8008270 <UsageFault_Handler>
 8008272:	bf00      	nop

08008274 <RCC_IRQHandler>:
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop

08008278 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008278:	4801      	ldr	r0, [pc, #4]	; (8008280 <DMA1_Stream0_IRQHandler+0x8>)
 800827a:	f002 bac5 	b.w	800a808 <HAL_DMA_IRQHandler>
 800827e:	bf00      	nop
 8008280:	200023c8 	.word	0x200023c8

08008284 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8008284:	4801      	ldr	r0, [pc, #4]	; (800828c <DMA1_Stream1_IRQHandler+0x8>)
 8008286:	f002 babf 	b.w	800a808 <HAL_DMA_IRQHandler>
 800828a:	bf00      	nop
 800828c:	20002368 	.word	0x20002368

08008290 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8008290:	4801      	ldr	r0, [pc, #4]	; (8008298 <DMA1_Stream5_IRQHandler+0x8>)
 8008292:	f002 bab9 	b.w	800a808 <HAL_DMA_IRQHandler>
 8008296:	bf00      	nop
 8008298:	20002308 	.word	0x20002308

0800829c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800829c:	4801      	ldr	r0, [pc, #4]	; (80082a4 <DMA1_Stream6_IRQHandler+0x8>)
 800829e:	f002 bab3 	b.w	800a808 <HAL_DMA_IRQHandler>
 80082a2:	bf00      	nop
 80082a4:	20002488 	.word	0x20002488

080082a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80082a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80082aa:	4805      	ldr	r0, [pc, #20]	; (80082c0 <ADC_IRQHandler+0x18>)
 80082ac:	f001 fa5e 	bl	800976c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80082b0:	4804      	ldr	r0, [pc, #16]	; (80082c4 <ADC_IRQHandler+0x1c>)
 80082b2:	f001 fa5b 	bl	800976c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80082b6:	4804      	ldr	r0, [pc, #16]	; (80082c8 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80082b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 80082bc:	f001 ba56 	b.w	800976c <HAL_ADC_IRQHandler>
 80082c0:	20002198 	.word	0x20002198
 80082c4:	200021e0 	.word	0x200021e0
 80082c8:	20002228 	.word	0x20002228

080082cc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80082cc:	4801      	ldr	r0, [pc, #4]	; (80082d4 <TIM2_IRQHandler+0x8>)
 80082ce:	f008 bf75 	b.w	80111bc <HAL_TIM_IRQHandler>
 80082d2:	bf00      	nop
 80082d4:	20002870 	.word	0x20002870

080082d8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <TIM3_IRQHandler+0x8>)
 80082da:	f008 bf6f 	b.w	80111bc <HAL_TIM_IRQHandler>
 80082de:	bf00      	nop
 80082e0:	200028bc 	.word	0x200028bc

080082e4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <USART2_IRQHandler+0x8>)
 80082e6:	f00b b9ed 	b.w	80136c4 <HAL_UART_IRQHandler>
 80082ea:	bf00      	nop
 80082ec:	20002a38 	.word	0x20002a38

080082f0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80082f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80082f4:	f004 bdba 	b.w	800ce6c <HAL_GPIO_EXTI_IRQHandler>

080082f8 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80082f8:	4801      	ldr	r0, [pc, #4]	; (8008300 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 80082fa:	f008 bf5f 	b.w	80111bc <HAL_TIM_IRQHandler>
 80082fe:	bf00      	nop
 8008300:	20003448 	.word	0x20003448

08008304 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008304:	4801      	ldr	r0, [pc, #4]	; (800830c <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8008306:	f008 bf59 	b.w	80111bc <HAL_TIM_IRQHandler>
 800830a:	bf00      	nop
 800830c:	20002824 	.word	0x20002824

08008310 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <DMA1_Stream7_IRQHandler+0x8>)
 8008312:	f002 ba79 	b.w	800a808 <HAL_DMA_IRQHandler>
 8008316:	bf00      	nop
 8008318:	20002428 	.word	0x20002428

0800831c <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <TIM5_IRQHandler+0x8>)
 800831e:	f008 bf4d 	b.w	80111bc <HAL_TIM_IRQHandler>
 8008322:	bf00      	nop
 8008324:	20002954 	.word	0x20002954

08008328 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <UART5_IRQHandler+0x8>)
 800832a:	f00b b9cb 	b.w	80136c4 <HAL_UART_IRQHandler>
 800832e:	bf00      	nop
 8008330:	20002bc4 	.word	0x20002bc4

08008334 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8008334:	4804      	ldr	r0, [pc, #16]	; (8008348 <TIM6_DAC_IRQHandler+0x14>)
{
 8008336:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 8008338:	f001 fe98 	bl	800a06c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800833c:	4803      	ldr	r0, [pc, #12]	; (800834c <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800833e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8008342:	f008 bf3b 	b.w	80111bc <HAL_TIM_IRQHandler>
 8008346:	bf00      	nop
 8008348:	20002294 	.word	0x20002294
 800834c:	200029a0 	.word	0x200029a0

08008350 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <DMA2_Stream1_IRQHandler+0x8>)
 8008352:	f002 ba59 	b.w	800a808 <HAL_DMA_IRQHandler>
 8008356:	bf00      	nop
 8008358:	200024e8 	.word	0x200024e8

0800835c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <DMA2_Stream4_IRQHandler+0x8>)
 800835e:	f002 ba53 	b.w	800a808 <HAL_DMA_IRQHandler>
 8008362:	bf00      	nop
 8008364:	200022a8 	.word	0x200022a8

08008368 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <ETH_IRQHandler+0x8>)
 800836a:	f003 b9d1 	b.w	800b710 <HAL_ETH_IRQHandler>
 800836e:	bf00      	nop
 8008370:	2000668c 	.word	0x2000668c

08008374 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <OTG_FS_IRQHandler+0x8>)
 8008376:	f005 bc97 	b.w	800dca8 <HAL_PCD_IRQHandler>
 800837a:	bf00      	nop
 800837c:	2002fd28 	.word	0x2002fd28

08008380 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8008380:	4801      	ldr	r0, [pc, #4]	; (8008388 <DMA2_Stream6_IRQHandler+0x8>)
 8008382:	f002 ba41 	b.w	800a808 <HAL_DMA_IRQHandler>
 8008386:	bf00      	nop
 8008388:	20002548 	.word	0x20002548

0800838c <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800838c:	4801      	ldr	r0, [pc, #4]	; (8008394 <USART6_IRQHandler+0x8>)
 800838e:	f00b b999 	b.w	80136c4 <HAL_UART_IRQHandler>
 8008392:	bf00      	nop
 8008394:	20002c48 	.word	0x20002c48

08008398 <FPU_IRQHandler>:
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop

0800839c <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800839c:	4801      	ldr	r0, [pc, #4]	; (80083a4 <UART8_IRQHandler+0x8>)
 800839e:	f00b b991 	b.w	80136c4 <HAL_UART_IRQHandler>
 80083a2:	bf00      	nop
 80083a4:	20002d50 	.word	0x20002d50

080083a8 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 80083a8:	2001      	movs	r0, #1
 80083aa:	4770      	bx	lr

080083ac <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <_kill+0xc>)
 80083ae:	2216      	movs	r2, #22
	return -1;
}
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80083b4:	601a      	str	r2, [r3, #0]
}
 80083b6:	4770      	bx	lr
 80083b8:	2003013c 	.word	0x2003013c

080083bc <_exit>:
	errno = EINVAL;
 80083bc:	4b01      	ldr	r3, [pc, #4]	; (80083c4 <_exit+0x8>)
 80083be:	2216      	movs	r2, #22
 80083c0:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 80083c2:	e7fe      	b.n	80083c2 <_exit+0x6>
 80083c4:	2003013c 	.word	0x2003013c

080083c8 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80083c8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80083ca:	1e16      	subs	r6, r2, #0
 80083cc:	dd07      	ble.n	80083de <_read+0x16>
 80083ce:	460c      	mov	r4, r1
 80083d0:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 80083d2:	f3af 8000 	nop.w
 80083d6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80083da:	42a5      	cmp	r5, r4
 80083dc:	d1f9      	bne.n	80083d2 <_read+0xa>
	}

	return len;
}
 80083de:	4630      	mov	r0, r6
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
 80083e2:	bf00      	nop

080083e4 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 80083e4:	f04f 30ff 	mov.w	r0, #4294967295
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 80083ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80083f0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80083f2:	604b      	str	r3, [r1, #4]
}
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop

080083f8 <_isatty>:

int _isatty(int file) {
	return 1;
}
 80083f8:	2001      	movs	r0, #1
 80083fa:	4770      	bx	lr

080083fc <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 80083fc:	2000      	movs	r0, #0
 80083fe:	4770      	bx	lr

08008400 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8008400:	490d      	ldr	r1, [pc, #52]	; (8008438 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 8008402:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8008404:	4a0d      	ldr	r2, [pc, #52]	; (800843c <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8008406:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8008408:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800840a:	4c0d      	ldr	r4, [pc, #52]	; (8008440 <_sbrk+0x40>)
 800840c:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 800840e:	b170      	cbz	r0, 800842e <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8008410:	4403      	add	r3, r0
 8008412:	4293      	cmp	r3, r2
 8008414:	d803      	bhi.n	800841e <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 8008416:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 800841a:	600b      	str	r3, [r1, #0]
}
 800841c:	4770      	bx	lr
		errno = ENOMEM;
 800841e:	4b09      	ldr	r3, [pc, #36]	; (8008444 <_sbrk+0x44>)
 8008420:	220c      	movs	r2, #12
		return (void*) -1;
 8008422:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008426:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 800842a:	601a      	str	r2, [r3, #0]
}
 800842c:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 800842e:	4c06      	ldr	r4, [pc, #24]	; (8008448 <_sbrk+0x48>)
 8008430:	4620      	mov	r0, r4
 8008432:	600c      	str	r4, [r1, #0]
 8008434:	e7ec      	b.n	8008410 <_sbrk+0x10>
 8008436:	bf00      	nop
 8008438:	20003498 	.word	0x20003498
 800843c:	20080000 	.word	0x20080000
 8008440:	00007800 	.word	0x00007800
 8008444:	2003013c 	.word	0x2003013c
 8008448:	20030168 	.word	0x20030168

0800844c <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800844c:	4a0f      	ldr	r2, [pc, #60]	; (800848c <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 800844e:	4b10      	ldr	r3, [pc, #64]	; (8008490 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008450:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8008454:	490f      	ldr	r1, [pc, #60]	; (8008494 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008456:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 800845a:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800845c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 8008460:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 8008462:	6818      	ldr	r0, [r3, #0]
 8008464:	f040 0001 	orr.w	r0, r0, #1
 8008468:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 800846a:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8008470:	4809      	ldr	r0, [pc, #36]	; (8008498 <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8008472:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8008474:	6058      	str	r0, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8008476:	6819      	ldr	r1, [r3, #0]
#else
  extern unsigned int* _progstart;

//	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//	SCB->VTOR = 0x8100000 | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008478:	4808      	ldr	r0, [pc, #32]	; (800849c <SystemInit+0x50>)
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 800847a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800847e:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8008480:	60dc      	str	r4, [r3, #12]

#endif
}
 8008482:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008486:	6090      	str	r0, [r2, #8]
}
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	e000ed00 	.word	0xe000ed00
 8008490:	40023800 	.word	0x40023800
 8008494:	fef6ffff 	.word	0xfef6ffff
 8008498:	24003010 	.word	0x24003010
 800849c:	08000000 	.word	0x08000000

080084a0 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 80084a0:	680b      	ldr	r3, [r1, #0]
 80084a2:	4a03      	ldr	r2, [pc, #12]	; (80084b0 <dnsfound+0x10>)
		ip_ready = -1;
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bf08      	it	eq
 80084a8:	f04f 33ff 	moveq.w	r3, #4294967295
 80084ac:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 80084ae:	4770      	bx	lr
 80084b0:	200034ac 	.word	0x200034ac

080084b4 <myreboot>:
void myreboot(char *msg) {
 80084b4:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 80084b6:	480a      	ldr	r0, [pc, #40]	; (80084e0 <myreboot+0x2c>)
void myreboot(char *msg) {
 80084b8:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 80084ba:	f01e f90b 	bl	80266d4 <iprintf>
	osDelay(2000);
 80084be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80084c2:	f00e f887 	bl	80165d4 <osDelay>
	__ASM volatile ("dsb 0xF":::"memory");
 80084c6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80084ca:	4906      	ldr	r1, [pc, #24]	; (80084e4 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80084cc:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80084ce:	68ca      	ldr	r2, [r1, #12]
 80084d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60cb      	str	r3, [r1, #12]
 80084d8:	f3bf 8f4f 	dsb	sy
    __NOP();
 80084dc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80084de:	e7fd      	b.n	80084dc <myreboot+0x28>
 80084e0:	0802da58 	.word	0x0802da58
 80084e4:	e000ed00 	.word	0xe000ed00
 80084e8:	05fa0004 	.word	0x05fa0004

080084ec <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 80084ec:	b500      	push	{lr}
 80084ee:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 80084f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80084f4:	4a16      	ldr	r2, [pc, #88]	; (8008550 <sendudp+0x64>)
 80084f6:	f019 f857 	bl	80215a8 <udp_sendto>
 80084fa:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 80084fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008502:	b943      	cbnz	r3, 8008516 <sendudp+0x2a>
 8008504:	b25a      	sxtb	r2, r3
		busycount = 0;
 8008506:	4b13      	ldr	r3, [pc, #76]	; (8008554 <sendudp+0x68>)
 8008508:	601a      	str	r2, [r3, #0]
	return (err);
 800850a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800850e:	b240      	sxtb	r0, r0
 8008510:	b003      	add	sp, #12
 8008512:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 8008516:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800851a:	480f      	ldr	r0, [pc, #60]	; (8008558 <sendudp+0x6c>)
 800851c:	b249      	sxtb	r1, r1
 800851e:	f01e f8d9 	bl	80266d4 <iprintf>
		vTaskDelay(100); //some delay!
 8008522:	2064      	movs	r0, #100	; 0x64
 8008524:	f00f fc88 	bl	8017e38 <vTaskDelay>
		if (err == ERR_MEM) {
 8008528:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800852c:	2bff      	cmp	r3, #255	; 0xff
 800852e:	d00c      	beq.n	800854a <sendudp+0x5e>
		if (err == ERR_USE) {
 8008530:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008534:	2bf8      	cmp	r3, #248	; 0xf8
 8008536:	d1e8      	bne.n	800850a <sendudp+0x1e>
			if (busycount++ > 10)
 8008538:	4a06      	ldr	r2, [pc, #24]	; (8008554 <sendudp+0x68>)
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	1c59      	adds	r1, r3, #1
 800853e:	2b0a      	cmp	r3, #10
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	dde2      	ble.n	800850a <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8008544:	4805      	ldr	r0, [pc, #20]	; (800855c <sendudp+0x70>)
 8008546:	f7ff ffb5 	bl	80084b4 <myreboot>
			myreboot("sendudp: out of mem");
 800854a:	4805      	ldr	r0, [pc, #20]	; (8008560 <sendudp+0x74>)
 800854c:	f7ff ffb2 	bl	80084b4 <myreboot>
 8008550:	200034c4 	.word	0x200034c4
 8008554:	2000349c 	.word	0x2000349c
 8008558:	0802da6c 	.word	0x0802da6c
 800855c:	0802da94 	.word	0x0802da94
 8008560:	0802da80 	.word	0x0802da80

08008564 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008564:	4b25      	ldr	r3, [pc, #148]	; (80085fc <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8008566:	4684      	mov	ip, r0
 8008568:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800856a:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 800856e:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008570:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008574:	4c22      	ldr	r4, [pc, #136]	; (8008600 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8008576:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008578:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800857a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800857e:	4c21      	ldr	r4, [pc, #132]	; (8008604 <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008580:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008584:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8008588:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800858c:	4c1e      	ldr	r4, [pc, #120]	; (8008608 <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800858e:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008592:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008596:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800859a:	4a1c      	ldr	r2, [pc, #112]	; (800860c <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800859c:	bfc8      	it	gt
 800859e:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085a2:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 80085a6:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80085a8:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085ac:	1a9b      	subs	r3, r3, r2
 80085ae:	4d18      	ldr	r5, [pc, #96]	; (8008610 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80085b0:	4a18      	ldr	r2, [pc, #96]	; (8008614 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80085b6:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085b8:	bfb8      	it	lt
 80085ba:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80085bc:	6f66      	ldr	r6, [r4, #116]	; 0x74
 80085be:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085c0:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80085c2:	4d15      	ldr	r5, [pc, #84]	; (8008618 <sendstatus+0xb4>)
 80085c4:	b292      	uxth	r2, r2
 80085c6:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085c8:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80085cc:	432a      	orrs	r2, r5
 80085ce:	4d13      	ldr	r5, [pc, #76]	; (800861c <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085d0:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80085d2:	4035      	ands	r5, r6
 80085d4:	432a      	orrs	r2, r5
 80085d6:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80085d8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 80085dc:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 80085de:	4a10      	ldr	r2, [pc, #64]	; (8008620 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 80085e0:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 80085e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80085e8:	f7ff ff80 	bl	80084ec <sendudp>
 80085ec:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	6023      	str	r3, [r4, #0]
}
 80085f6:	b002      	add	sp, #8
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
 80085fa:	bf00      	nop
 80085fc:	20000780 	.word	0x20000780
 8008600:	2000072c 	.word	0x2000072c
 8008604:	20003430 	.word	0x20003430
 8008608:	2000303c 	.word	0x2000303c
 800860c:	20000738 	.word	0x20000738
 8008610:	20000002 	.word	0x20000002
 8008614:	20000734 	.word	0x20000734
 8008618:	20000714 	.word	0x20000714
 800861c:	ffff0000 	.word	0xffff0000
 8008620:	200034c4 	.word	0x200034c4

08008624 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	4604      	mov	r4, r0
 8008628:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 800862a:	4818      	ldr	r0, [pc, #96]	; (800868c <dnslookup+0x68>)
 800862c:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 800862e:	4e18      	ldr	r6, [pc, #96]	; (8008690 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 8008630:	f01e f850 	bl	80266d4 <iprintf>
	ip_ready = 0;
 8008634:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8008636:	4620      	mov	r0, r4
 8008638:	4a16      	ldr	r2, [pc, #88]	; (8008694 <dnslookup+0x70>)
 800863a:	4639      	mov	r1, r7
	ip_ready = 0;
 800863c:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 800863e:	f012 fc57 	bl	801aef0 <dns_gethostbyname>
 8008642:	4604      	mov	r4, r0

	switch (err) {
 8008644:	3005      	adds	r0, #5
 8008646:	d005      	beq.n	8008654 <dnslookup+0x30>
 8008648:	b114      	cbz	r4, 8008650 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 800864a:	4813      	ldr	r0, [pc, #76]	; (8008698 <dnslookup+0x74>)
 800864c:	f01e f842 	bl	80266d4 <iprintf>
		break;
	}
	return (err);
}
 8008650:	4620      	mov	r0, r4
 8008652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8008654:	4811      	ldr	r0, [pc, #68]	; (800869c <dnslookup+0x78>)
 8008656:	2514      	movs	r5, #20
 8008658:	f01e f83c 	bl	80266d4 <iprintf>
		for (i = 0; i < 20; i++) {
 800865c:	e001      	b.n	8008662 <dnslookup+0x3e>
 800865e:	3d01      	subs	r5, #1
 8008660:	d0f3      	beq.n	800864a <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 8008662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008666:	f00d ffb5 	bl	80165d4 <osDelay>
			printf(".");
 800866a:	202e      	movs	r0, #46	; 0x2e
 800866c:	f01e f84a 	bl	8026704 <putchar>
			if (ip_ready) {
 8008670:	6833      	ldr	r3, [r6, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0f3      	beq.n	800865e <dnslookup+0x3a>
				if (ip_ready == -1) {
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	d002      	beq.n	8008680 <dnslookup+0x5c>
				return (ERR_OK);
 800867a:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 800867c:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 800867e:	e7e7      	b.n	8008650 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 8008680:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8008682:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 8008686:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8008688:	e7e2      	b.n	8008650 <dnslookup+0x2c>
 800868a:	bf00      	nop
 800868c:	0802dab0 	.word	0x0802dab0
 8008690:	200034ac 	.word	0x200034ac
 8008694:	080084a1 	.word	0x080084a1
 8008698:	0802daec 	.word	0x0802daec
 800869c:	0802dac4 	.word	0x0802dac4
 80086a0:	0802dae0 	.word	0x0802dae0

080086a4 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 80086a4:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 80086a6:	4914      	ldr	r1, [pc, #80]	; (80086f8 <locateudp+0x54>)
{
 80086a8:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 80086aa:	4814      	ldr	r0, [pc, #80]	; (80086fc <locateudp+0x58>)
 80086ac:	f01e f812 	bl	80266d4 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 80086b0:	4913      	ldr	r1, [pc, #76]	; (8008700 <locateudp+0x5c>)
 80086b2:	4811      	ldr	r0, [pc, #68]	; (80086f8 <locateudp+0x54>)
 80086b4:	f7ff ffb6 	bl	8008624 <dnslookup>
 80086b8:	b240      	sxtb	r0, r0
 80086ba:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 80086be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80086c2:	b9a3      	cbnz	r3, 80086ee <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 80086c4:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 80086c6:	490f      	ldr	r1, [pc, #60]	; (8008704 <locateudp+0x60>)
	ip = udpdestip.addr;
 80086c8:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 80086ca:	480f      	ldr	r0, [pc, #60]	; (8008708 <locateudp+0x64>)
 80086cc:	0e22      	lsrs	r2, r4, #24
 80086ce:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80086d2:	e9cd 3200 	strd	r3, r2, [sp]
 80086d6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80086da:	b2e2      	uxtb	r2, r4
 80086dc:	f01e f9e4 	bl	8026aa8 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 80086e0:	4909      	ldr	r1, [pc, #36]	; (8008708 <locateudp+0x64>)
 80086e2:	480a      	ldr	r0, [pc, #40]	; (800870c <locateudp+0x68>)
 80086e4:	f01d fff6 	bl	80266d4 <iprintf>
	return (ip);
}
 80086e8:	4620      	mov	r0, r4
 80086ea:	b004      	add	sp, #16
 80086ec:	bd10      	pop	{r4, pc}
		rebootme(3);
 80086ee:	2003      	movs	r0, #3
 80086f0:	f7fb fafa 	bl	8003ce8 <rebootme>
 80086f4:	e7e6      	b.n	80086c4 <locateudp+0x20>
 80086f6:	bf00      	nop
 80086f8:	20003530 	.word	0x20003530
 80086fc:	0802db10 	.word	0x0802db10
 8008700:	200034c4 	.word	0x200034c4
 8008704:	0802db30 	.word	0x0802db30
 8008708:	200034b4 	.word	0x200034b4
 800870c:	0802db40 	.word	0x0802db40

08008710 <startudp>:

void startudp(uint32_t ip) {
 8008710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	ed2d 8b02 	vpush	{d8}
 8008718:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800871a:	f00f fcb5 	bl	8018088 <xTaskGetCurrentTaskHandle>
 800871e:	4b75      	ldr	r3, [pc, #468]	; (80088f4 <startudp+0x1e4>)
 8008720:	4602      	mov	r2, r0
	osDelay(1000);
 8008722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8008726:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8008728:	f00d ff54 	bl	80165d4 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 800872c:	f019 f808 	bl	8021740 <udp_new>
	if (pcb == NULL) {
 8008730:	2800      	cmp	r0, #0
 8008732:	f000 80ce 	beq.w	80088d2 <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8008736:	f241 3288 	movw	r2, #5000	; 0x1388
 800873a:	496f      	ldr	r1, [pc, #444]	; (80088f8 <startudp+0x1e8>)
 800873c:	ee08 0a10 	vmov	s16, r0
 8008740:	f018 fdae 	bl	80212a0 <udp_bind>
 8008744:	4605      	mov	r5, r0
 8008746:	2800      	cmp	r0, #0
 8008748:	f040 80bf 	bne.w	80088ca <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 800874c:	2241      	movs	r2, #65	; 0x41
 800874e:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8008752:	2036      	movs	r0, #54	; 0x36
 8008754:	f013 fd22 	bl	801c19c <pbuf_alloc>

	if (p1 == NULL) {
 8008758:	9000      	str	r0, [sp, #0]
 800875a:	2800      	cmp	r0, #0
 800875c:	f000 80bd 	beq.w	80088da <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8008760:	4c66      	ldr	r4, [pc, #408]	; (80088fc <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8008762:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8008766:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8008768:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 800876e:	2241      	movs	r2, #65	; 0x41
 8008770:	f013 fd14 	bl	801c19c <pbuf_alloc>
	if (p2 == NULL) {
 8008774:	9001      	str	r0, [sp, #4]
 8008776:	2800      	cmp	r0, #0
 8008778:	f000 80b7 	beq.w	80088ea <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 800877c:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800877e:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8008780:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8008782:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8008784:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8008788:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800878a:	2201      	movs	r2, #1
 800878c:	f013 fd06 	bl	801c19c <pbuf_alloc>
	if (ps == NULL) {
 8008790:	ee08 0a90 	vmov	s17, r0
 8008794:	2800      	cmp	r0, #0
 8008796:	f000 80aa 	beq.w	80088ee <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 800879a:	4c59      	ldr	r4, [pc, #356]	; (8008900 <startudp+0x1f0>)
 800879c:	4f59      	ldr	r7, [pc, #356]	; (8008904 <startudp+0x1f4>)
 800879e:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 80087a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80087a4:	f00d ff16 	bl	80165d4 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80087a8:	4b57      	ldr	r3, [pc, #348]	; (8008908 <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 80087aa:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 80087ac:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 80087ae:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80087b0:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80087b2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80087b6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 80087ba:	4b54      	ldr	r3, [pc, #336]	; (800890c <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 80087bc:	4854      	ldr	r0, [pc, #336]	; (8008910 <startudp+0x200>)
 80087be:	4e55      	ldr	r6, [pc, #340]	; (8008914 <startudp+0x204>)
 80087c0:	f8df b188 	ldr.w	fp, [pc, #392]	; 800894c <startudp+0x23c>
 80087c4:	f8df a188 	ldr.w	sl, [pc, #392]	; 8008950 <startudp+0x240>
 80087c8:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8008954 <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 80087cc:	4d52      	ldr	r5, [pc, #328]	; (8008918 <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 80087ce:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 80087d0:	f01e f81c 	bl	802680c <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80087d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80087d8:	2001      	movs	r0, #1
 80087da:	f00f fd9d 	bl	8018318 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 80087de:	2800      	cmp	r0, #0
 80087e0:	d05a      	beq.n	8008898 <startudp+0x188>
			sigsend = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 80087e6:	7833      	ldrb	r3, [r6, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f3      	beq.n	80087d4 <startudp+0xc4>
 80087ec:	f8db 3000 	ldr.w	r3, [fp]
 80087f0:	f8da 2000 	ldr.w	r2, [sl]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	d1ed      	bne.n	80087d4 <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 80087f8:	4a48      	ldr	r2, [pc, #288]	; (800891c <startudp+0x20c>)
 80087fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087fe:	6812      	ldr	r2, [r2, #0]
 8008800:	2a00      	cmp	r2, #0
 8008802:	bf08      	it	eq
 8008804:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8008806:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8008808:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 800880a:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	684b      	ldr	r3, [r1, #4]
 8008810:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	684a      	ldr	r2, [r1, #4]
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	684a      	ldr	r2, [r1, #4]
 800881e:	0c1b      	lsrs	r3, r3, #16
 8008820:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 8008822:	7b89      	ldrb	r1, [r1, #14]
 8008824:	2901      	cmp	r1, #1
 8008826:	d006      	beq.n	8008836 <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8008828:	4628      	mov	r0, r5
 800882a:	f01d ff53 	bl	80266d4 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 800882e:	f899 100e 	ldrb.w	r1, [r9, #14]
 8008832:	2901      	cmp	r1, #1
 8008834:	d1f8      	bne.n	8008828 <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8008836:	f241 3388 	movw	r3, #5000	; 0x1388
 800883a:	4649      	mov	r1, r9
 800883c:	4a38      	ldr	r2, [pc, #224]	; (8008920 <startudp+0x210>)
 800883e:	ee18 0a10 	vmov	r0, s16
 8008842:	f7ff fe53 	bl	80084ec <sendudp>
 8008846:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 800884a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800884e:	3301      	adds	r3, #1
 8008850:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 8008854:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008858:	3301      	adds	r3, #1
 800885a:	b29b      	uxth	r3, r3
 800885c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	3301      	adds	r3, #1
 8008864:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 8008866:	4b2f      	ldr	r3, [pc, #188]	; (8008924 <startudp+0x214>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0b2      	beq.n	80087d4 <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 800886e:	492e      	ldr	r1, [pc, #184]	; (8008928 <startudp+0x218>)
 8008870:	ee18 2a10 	vmov	r2, s16
 8008874:	2001      	movs	r0, #1
 8008876:	780b      	ldrb	r3, [r1, #0]
 8008878:	ee18 1a90 	vmov	r1, s17
 800887c:	f7ff fe72 	bl	8008564 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8008880:	2300      	movs	r3, #0
 8008882:	4a28      	ldr	r2, [pc, #160]	; (8008924 <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8008884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008888:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 800888a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 800888e:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8008890:	f00f fd42 	bl	8018318 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8008894:	2800      	cmp	r0, #0
 8008896:	d1a4      	bne.n	80087e2 <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8008898:	4b24      	ldr	r3, [pc, #144]	; (800892c <startudp+0x21c>)
 800889a:	f8d8 2000 	ldr.w	r2, [r8]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d097      	beq.n	80087d4 <startudp+0xc4>
 80088a4:	4a22      	ldr	r2, [pc, #136]	; (8008930 <startudp+0x220>)
 80088a6:	4923      	ldr	r1, [pc, #140]	; (8008934 <startudp+0x224>)
 80088a8:	fb02 f203 	mul.w	r2, r2, r3
 80088ac:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 80088b0:	d390      	bcc.n	80087d4 <startudp+0xc4>
		talive = t1sec;
 80088b2:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 80088b6:	ee18 2a10 	vmov	r2, s16
 80088ba:	4b1b      	ldr	r3, [pc, #108]	; (8008928 <startudp+0x218>)
 80088bc:	ee18 1a90 	vmov	r1, s17
 80088c0:	2002      	movs	r0, #2
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	f7ff fe4e 	bl	8008564 <sendstatus>
 80088c8:	e784      	b.n	80087d4 <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 80088ca:	481b      	ldr	r0, [pc, #108]	; (8008938 <startudp+0x228>)
 80088cc:	f01d ff9e 	bl	802680c <puts>
		for (;;)
 80088d0:	e7fe      	b.n	80088d0 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 80088d2:	481a      	ldr	r0, [pc, #104]	; (800893c <startudp+0x22c>)
 80088d4:	f01d ff9a 	bl	802680c <puts>
		for (;;)
 80088d8:	e7fe      	b.n	80088d8 <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 80088da:	4819      	ldr	r0, [pc, #100]	; (8008940 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 80088dc:	b005      	add	sp, #20
 80088de:	ecbd 8b02 	vpop	{d8}
 80088e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 80088e6:	f01d bf91 	b.w	802680c <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 80088ea:	4816      	ldr	r0, [pc, #88]	; (8008944 <startudp+0x234>)
 80088ec:	e7f6      	b.n	80088dc <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 80088ee:	4816      	ldr	r0, [pc, #88]	; (8008948 <startudp+0x238>)
 80088f0:	e7f4      	b.n	80088dc <startudp+0x1cc>
 80088f2:	bf00      	nop
 80088f4:	20000838 	.word	0x20000838
 80088f8:	0804726c 	.word	0x0804726c
 80088fc:	20000784 	.word	0x20000784
 8008900:	2000303c 	.word	0x2000303c
 8008904:	2000079c 	.word	0x2000079c
 8008908:	dec0edfe 	.word	0xdec0edfe
 800890c:	20000782 	.word	0x20000782
 8008910:	0802dbec 	.word	0x0802dbec
 8008914:	200034a8 	.word	0x200034a8
 8008918:	0802dc20 	.word	0x0802dc20
 800891c:	20000728 	.word	0x20000728
 8008920:	200034c4 	.word	0x200034c4
 8008924:	20000794 	.word	0x20000794
 8008928:	20000714 	.word	0x20000714
 800892c:	20002e10 	.word	0x20002e10
 8008930:	eeeeeeef 	.word	0xeeeeeeef
 8008934:	02222222 	.word	0x02222222
 8008938:	0802db70 	.word	0x0802db70
 800893c:	0802db54 	.word	0x0802db54
 8008940:	0802db8c 	.word	0x0802db8c
 8008944:	0802dbac 	.word	0x0802dbac
 8008948:	0802dbcc 	.word	0x0802dbcc
 800894c:	200034a4 	.word	0x200034a4
 8008950:	20000734 	.word	0x20000734
 8008954:	200034b0 	.word	0x200034b0

08008958 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 800895a:	4b52      	ldr	r3, [pc, #328]	; (8008aa4 <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8008960:	4851      	ldr	r0, [pc, #324]	; (8008aa8 <tag_callback+0x150>)
	if (ledsenabled) {
 8008962:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8008964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 8008968:	b35a      	cbz	r2, 80089c2 <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 800896a:	f004 fa67 	bl	800ce3c <HAL_GPIO_TogglePin>
 800896e:	4c4f      	ldr	r4, [pc, #316]	; (8008aac <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8008970:	4d4f      	ldr	r5, [pc, #316]	; (8008ab0 <tag_callback+0x158>)
 8008972:	e001      	b.n	8008978 <tag_callback+0x20>
 8008974:	f01d ff4a 	bl	802680c <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8008978:	2101      	movs	r1, #1
 800897a:	6820      	ldr	r0, [r4, #0]
 800897c:	f00e fbee 	bl	801715c <xQueueSemaphoreTake>
 8008980:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8008982:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8008984:	2b01      	cmp	r3, #1
 8008986:	d1f5      	bne.n	8008974 <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8008988:	1f32      	subs	r2, r6, #4
 800898a:	2a07      	cmp	r2, #7
 800898c:	d81c      	bhi.n	80089c8 <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 800898e:	4949      	ldr	r1, [pc, #292]	; (8008ab4 <tag_callback+0x15c>)
 8008990:	4093      	lsls	r3, r2
 8008992:	780a      	ldrb	r2, [r1, #0]
 8008994:	4013      	ands	r3, r2
 8008996:	4a48      	ldr	r2, [pc, #288]	; (8008ab8 <tag_callback+0x160>)
 8008998:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 800899a:	bb5b      	cbnz	r3, 80089f4 <tag_callback+0x9c>
			strcpy(newstring, "0");
 800899c:	4b47      	ldr	r3, [pc, #284]	; (8008abc <tag_callback+0x164>)
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80089a2:	2300      	movs	r3, #0
 80089a4:	6820      	ldr	r0, [r4, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	4619      	mov	r1, r3
 80089aa:	f00e f93d 	bl	8016c28 <xQueueGenericSend>
 80089ae:	2801      	cmp	r0, #1
 80089b0:	d002      	beq.n	80089b8 <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 80089b2:	4843      	ldr	r0, [pc, #268]	; (8008ac0 <tag_callback+0x168>)
 80089b4:	f01d ff2a 	bl	802680c <puts>
	}
	return (strlen(newstring));
 80089b8:	4638      	mov	r0, r7
}
 80089ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 80089be:	f7f7 bc49 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 80089c2:	f004 fa21 	bl	800ce08 <HAL_GPIO_WritePin>
 80089c6:	e7d2      	b.n	800896e <tag_callback+0x16>
		switch (index) {
 80089c8:	2e14      	cmp	r6, #20
 80089ca:	d817      	bhi.n	80089fc <tag_callback+0xa4>
 80089cc:	e8df f006 	tbb	[pc, r6]
 80089d0:	0b655055 	.word	0x0b655055
 80089d4:	16161616 	.word	0x16161616
 80089d8:	16161616 	.word	0x16161616
 80089dc:	343d5a61 	.word	0x343d5a61
 80089e0:	464b2429 	.word	0x464b2429
 80089e4:	1c          	.byte	0x1c
 80089e5:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 80089e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80089ea:	482f      	ldr	r0, [pc, #188]	; (8008aa8 <tag_callback+0x150>)
 80089ec:	f004 f9fa 	bl	800cde4 <HAL_GPIO_ReadPin>
 80089f0:	2801      	cmp	r0, #1
 80089f2:	d1d3      	bne.n	800899c <tag_callback+0x44>
			strcpy(newstring, "1");
 80089f4:	4b33      	ldr	r3, [pc, #204]	; (8008ac4 <tag_callback+0x16c>)
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	803b      	strh	r3, [r7, #0]
 80089fa:	e7d2      	b.n	80089a2 <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 80089fc:	4632      	mov	r2, r6
 80089fe:	4932      	ldr	r1, [pc, #200]	; (8008ac8 <tag_callback+0x170>)
 8008a00:	4638      	mov	r0, r7
 8008a02:	f01e f851 	bl	8026aa8 <siprintf>
			break;
 8008a06:	e7cc      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8008a08:	4b30      	ldr	r3, [pc, #192]	; (8008acc <tag_callback+0x174>)
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bf14      	ite	ne
 8008a10:	2331      	movne	r3, #49	; 0x31
 8008a12:	2330      	moveq	r3, #48	; 0x30
 8008a14:	803b      	strh	r3, [r7, #0]
			break;
 8008a16:	e7c4      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 8008a18:	492d      	ldr	r1, [pc, #180]	; (8008ad0 <tag_callback+0x178>)
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	f01e f8fa 	bl	8026c14 <strcpy>
			break;
 8008a20:	e7bf      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8008a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008a26:	482b      	ldr	r0, [pc, #172]	; (8008ad4 <tag_callback+0x17c>)
 8008a28:	f004 f9dc 	bl	800cde4 <HAL_GPIO_ReadPin>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	bf14      	ite	ne
 8008a30:	2330      	movne	r3, #48	; 0x30
 8008a32:	2331      	moveq	r3, #49	; 0x31
 8008a34:	803b      	strh	r3, [r7, #0]
			break;
 8008a36:	e7b4      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8008a38:	4b27      	ldr	r3, [pc, #156]	; (8008ad8 <tag_callback+0x180>)
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	f013 0f04 	tst.w	r3, #4
 8008a40:	bf14      	ite	ne
 8008a42:	2331      	movne	r3, #49	; 0x31
 8008a44:	2330      	moveq	r3, #48	; 0x30
 8008a46:	803b      	strh	r3, [r7, #0]
			break;
 8008a48:	e7ab      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8008a4a:	4b23      	ldr	r3, [pc, #140]	; (8008ad8 <tag_callback+0x180>)
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	f013 0f02 	tst.w	r3, #2
 8008a52:	bf14      	ite	ne
 8008a54:	2331      	movne	r3, #49	; 0x31
 8008a56:	2330      	moveq	r3, #48	; 0x30
 8008a58:	803b      	strh	r3, [r7, #0]
			break;
 8008a5a:	e7a2      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 8008a5c:	491f      	ldr	r1, [pc, #124]	; (8008adc <tag_callback+0x184>)
 8008a5e:	4638      	mov	r0, r7
 8008a60:	f01e f8d8 	bl	8026c14 <strcpy>
			break;
 8008a64:	e79d      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 8008a66:	491e      	ldr	r1, [pc, #120]	; (8008ae0 <tag_callback+0x188>)
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f01e f8d3 	bl	8026c14 <strcpy>
			break;
 8008a6e:	e798      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 8008a70:	491c      	ldr	r1, [pc, #112]	; (8008ae4 <tag_callback+0x18c>)
 8008a72:	4638      	mov	r0, r7
 8008a74:	f01e f8ce 	bl	8026c14 <strcpy>
			break;
 8008a78:	e793      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 8008a7a:	491b      	ldr	r1, [pc, #108]	; (8008ae8 <tag_callback+0x190>)
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	f01e f8c9 	bl	8026c14 <strcpy>
			break;
 8008a82:	e78e      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8008a84:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <tag_callback+0x180>)
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	3330      	adds	r3, #48	; 0x30
 8008a8e:	803b      	strh	r3, [r7, #0]
			break;
 8008a90:	e787      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, "5");
 8008a92:	4b16      	ldr	r3, [pc, #88]	; (8008aec <tag_callback+0x194>)
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	803b      	strh	r3, [r7, #0]
			break;
 8008a98:	e783      	b.n	80089a2 <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 8008a9a:	4915      	ldr	r1, [pc, #84]	; (8008af0 <tag_callback+0x198>)
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f01e f8b9 	bl	8026c14 <strcpy>
			break;
 8008aa2:	e77e      	b.n	80089a2 <tag_callback+0x4a>
 8008aa4:	200002ac 	.word	0x200002ac
 8008aa8:	40020c00 	.word	0x40020c00
 8008aac:	20002e0c 	.word	0x20002e0c
 8008ab0:	0802dd08 	.word	0x0802dd08
 8008ab4:	200002b0 	.word	0x200002b0
 8008ab8:	200034cc 	.word	0x200034cc
 8008abc:	08046e48 	.word	0x08046e48
 8008ac0:	0802dd34 	.word	0x0802dd34
 8008ac4:	0802dae8 	.word	0x0802dae8
 8008ac8:	0802dd14 	.word	0x0802dd14
 8008acc:	2000004e 	.word	0x2000004e
 8008ad0:	200000c0 	.word	0x200000c0
 8008ad4:	40021000 	.word	0x40021000
 8008ad8:	20003430 	.word	0x20003430
 8008adc:	20000050 	.word	0x20000050
 8008ae0:	20000164 	.word	0x20000164
 8008ae4:	200000b0 	.word	0x200000b0
 8008ae8:	2000026c 	.word	0x2000026c
 8008aec:	0804522c 	.word	0x0804522c
 8008af0:	20000090 	.word	0x20000090

08008af4 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	b085      	sub	sp, #20
 8008afa:	4615      	mov	r5, r2
 8008afc:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8008afe:	220a      	movs	r2, #10
 8008b00:	a903      	add	r1, sp, #12
 8008b02:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8008b04:	4699      	mov	r9, r3
 8008b06:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8008b08:	f01e fe5e 	bl	80277c8 <strtol>
 8008b0c:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8008b0e:	4621      	mov	r1, r4
 8008b10:	462a      	mov	r2, r5
 8008b12:	4871      	ldr	r0, [pc, #452]	; (8008cd8 <httpd_cgi_handler+0x1e4>)
 8008b14:	4633      	mov	r3, r6
 8008b16:	f01d fddd 	bl	80266d4 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008b1a:	2d00      	cmp	r5, #0
 8008b1c:	dd37      	ble.n	8008b8e <httpd_cgi_handler+0x9a>
 8008b1e:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008b20:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8008d08 <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008b24:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8008d0c <httpd_cgi_handler+0x218>
		switch (j) {
 8008b28:	f1a6 030a 	sub.w	r3, r6, #10
 8008b2c:	2b0e      	cmp	r3, #14
 8008b2e:	f200 80cc 	bhi.w	8008cca <httpd_cgi_handler+0x1d6>
 8008b32:	e8df f003 	tbb	[pc, r3]
 8008b36:	9eb6      	.short	0x9eb6
 8008b38:	08080808 	.word	0x08080808
 8008b3c:	08080808 	.word	0x08080808
 8008b40:	864d6073 	.word	0x864d6073
 8008b44:	3a          	.byte	0x3a
 8008b45:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 8008b46:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8008b48:	2101      	movs	r1, #1
 8008b4a:	f1a6 000c 	sub.w	r0, r6, #12
 8008b4e:	4b63      	ldr	r3, [pc, #396]	; (8008cdc <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8008b50:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8008b52:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8008b56:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 8008b58:	2a30      	cmp	r2, #48	; 0x30
 8008b5a:	d01b      	beq.n	8008b94 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8008b5c:	781a      	ldrb	r2, [r3, #0]
 8008b5e:	4311      	orrs	r1, r2
 8008b60:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008b62:	f001 0202 	and.w	r2, r1, #2
 8008b66:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008b68:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 8008b6a:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008b6c:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008b70:	f01d fdb0 	bl	80266d4 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8008b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b78:	2301      	movs	r3, #1
 8008b7a:	4a58      	ldr	r2, [pc, #352]	; (8008cdc <httpd_cgi_handler+0x1e8>)
 8008b7c:	9100      	str	r1, [sp, #0]
 8008b7e:	2188      	movs	r1, #136	; 0x88
 8008b80:	4857      	ldr	r0, [pc, #348]	; (8008ce0 <httpd_cgi_handler+0x1ec>)
 8008b82:	f004 fc47 	bl	800d414 <HAL_I2C_Master_Transmit>
 8008b86:	b960      	cbnz	r0, 8008ba2 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008b88:	3401      	adds	r4, #1
 8008b8a:	42a5      	cmp	r5, r4
 8008b8c:	d1cc      	bne.n	8008b28 <httpd_cgi_handler+0x34>
}
 8008b8e:	b005      	add	sp, #20
 8008b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8008b94:	2101      	movs	r1, #1
 8008b96:	fa01 f600 	lsl.w	r6, r1, r0
 8008b9a:	7819      	ldrb	r1, [r3, #0]
 8008b9c:	ea21 0106 	bic.w	r1, r1, r6
 8008ba0:	e7df      	b.n	8008b62 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8008ba2:	4850      	ldr	r0, [pc, #320]	; (8008ce4 <httpd_cgi_handler+0x1f0>)
 8008ba4:	f01d fd96 	bl	80266d4 <iprintf>
 8008ba8:	e7ee      	b.n	8008b88 <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	3c01      	subs	r4, #1
 8008bae:	484e      	ldr	r0, [pc, #312]	; (8008ce8 <httpd_cgi_handler+0x1f4>)
 8008bb0:	440c      	add	r4, r1
 8008bb2:	4623      	mov	r3, r4
 8008bb4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008bb8:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008bba:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008bbc:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008bc0:	bf18      	it	ne
 8008bc2:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008bc4:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008bc6:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008bc8:	dcf3      	bgt.n	8008bb2 <httpd_cgi_handler+0xbe>
}
 8008bca:	b005      	add	sp, #20
 8008bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd0:	4e46      	ldr	r6, [pc, #280]	; (8008cec <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008bd8:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008bda:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8008bdc:	2b30      	cmp	r3, #48	; 0x30
 8008bde:	bf0c      	ite	eq
 8008be0:	f020 0001 	biceq.w	r0, r0, #1
 8008be4:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8008be8:	f7fd fe92 	bl	8006910 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008bec:	42a5      	cmp	r5, r4
 8008bee:	dcf0      	bgt.n	8008bd2 <httpd_cgi_handler+0xde>
}
 8008bf0:	b005      	add	sp, #20
 8008bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf6:	4e3d      	ldr	r6, [pc, #244]	; (8008cec <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008bfe:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c00:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8008c02:	2b30      	cmp	r3, #48	; 0x30
 8008c04:	bf0c      	ite	eq
 8008c06:	f020 0002 	biceq.w	r0, r0, #2
 8008c0a:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8008c0e:	f7fd fe7f 	bl	8006910 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c12:	42a5      	cmp	r5, r4
 8008c14:	dcf0      	bgt.n	8008bf8 <httpd_cgi_handler+0x104>
}
 8008c16:	b005      	add	sp, #20
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	4e33      	ldr	r6, [pc, #204]	; (8008cec <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008c24:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c26:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8008c28:	2b30      	cmp	r3, #48	; 0x30
 8008c2a:	bf0c      	ite	eq
 8008c2c:	f020 0004 	biceq.w	r0, r0, #4
 8008c30:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8008c34:	f7fd fe6c 	bl	8006910 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c38:	42a5      	cmp	r5, r4
 8008c3a:	dcf0      	bgt.n	8008c1e <httpd_cgi_handler+0x12a>
}
 8008c3c:	b005      	add	sp, #20
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8008c44:	4e2a      	ldr	r6, [pc, #168]	; (8008cf0 <httpd_cgi_handler+0x1fc>)
 8008c46:	e004      	b.n	8008c52 <httpd_cgi_handler+0x15e>
 8008c48:	f004 f8de 	bl	800ce08 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c4c:	42a5      	cmp	r5, r4
 8008c4e:	dd9e      	ble.n	8008b8e <httpd_cgi_handler+0x9a>
 8008c50:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8008c52:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8008c54:	2201      	movs	r2, #1
 8008c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008c5a:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8008c5c:	4423      	add	r3, r4
 8008c5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c62:	2b31      	cmp	r3, #49	; 0x31
 8008c64:	d1f0      	bne.n	8008c48 <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8008c66:	2200      	movs	r2, #0
 8008c68:	f004 f8ce 	bl	800ce08 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c6c:	42a5      	cmp	r5, r4
 8008c6e:	dcef      	bgt.n	8008c50 <httpd_cgi_handler+0x15c>
 8008c70:	e78d      	b.n	8008b8e <httpd_cgi_handler+0x9a>
 8008c72:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8008c74:	4e1f      	ldr	r6, [pc, #124]	; (8008cf4 <httpd_cgi_handler+0x200>)
 8008c76:	e004      	b.n	8008c82 <httpd_cgi_handler+0x18e>
 8008c78:	f004 f8c6 	bl	800ce08 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c7c:	42ac      	cmp	r4, r5
 8008c7e:	da86      	bge.n	8008b8e <httpd_cgi_handler+0x9a>
 8008c80:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8008c82:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8008c84:	2201      	movs	r2, #1
 8008c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008c8a:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8008c8c:	4423      	add	r3, r4
 8008c8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c92:	2b30      	cmp	r3, #48	; 0x30
 8008c94:	d1f0      	bne.n	8008c78 <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8008c96:	2200      	movs	r2, #0
 8008c98:	f004 f8b6 	bl	800ce08 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c9c:	42a5      	cmp	r5, r4
 8008c9e:	dcef      	bgt.n	8008c80 <httpd_cgi_handler+0x18c>
 8008ca0:	e775      	b.n	8008b8e <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8008ca2:	4815      	ldr	r0, [pc, #84]	; (8008cf8 <httpd_cgi_handler+0x204>)
 8008ca4:	f01d fdb2 	bl	802680c <puts>
			osDelay(500);
 8008ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008cac:	f00d fc92 	bl	80165d4 <osDelay>
 8008cb0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008cb4:	4911      	ldr	r1, [pc, #68]	; (8008cfc <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008cb6:	4b12      	ldr	r3, [pc, #72]	; (8008d00 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008cb8:	68ca      	ldr	r2, [r1, #12]
 8008cba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60cb      	str	r3, [r1, #12]
 8008cc2:	f3bf 8f4f 	dsb	sy
    __NOP();
 8008cc6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008cc8:	e7fd      	b.n	8008cc6 <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8008cca:	f8d9 1000 	ldr.w	r1, [r9]
 8008cce:	480d      	ldr	r0, [pc, #52]	; (8008d04 <httpd_cgi_handler+0x210>)
 8008cd0:	f01d fd00 	bl	80266d4 <iprintf>
			break;
 8008cd4:	e758      	b.n	8008b88 <httpd_cgi_handler+0x94>
 8008cd6:	bf00      	nop
 8008cd8:	0802dd4c 	.word	0x0802dd4c
 8008cdc:	200002b0 	.word	0x200002b0
 8008ce0:	200025a8 	.word	0x200025a8
 8008ce4:	0802d694 	.word	0x0802d694
 8008ce8:	2000004e 	.word	0x2000004e
 8008cec:	20003430 	.word	0x20003430
 8008cf0:	40021000 	.word	0x40021000
 8008cf4:	40020c00 	.word	0x40020c00
 8008cf8:	0802dd78 	.word	0x0802dd78
 8008cfc:	e000ed00 	.word	0xe000ed00
 8008d00:	05fa0004 	.word	0x05fa0004
 8008d04:	0802ddb0 	.word	0x0802ddb0
 8008d08:	2000342c 	.word	0x2000342c
 8008d0c:	0802dd94 	.word	0x0802dd94

08008d10 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8008d10:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8008d12:	4802      	ldr	r0, [pc, #8]	; (8008d1c <httpd_post_receive_data+0xc>)
 8008d14:	f01d fd7a 	bl	802680c <puts>
}
 8008d18:	2000      	movs	r0, #0
 8008d1a:	bd08      	pop	{r3, pc}
 8008d1c:	0802ddd0 	.word	0x0802ddd0

08008d20 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8008d20:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8008d22:	4802      	ldr	r0, [pc, #8]	; (8008d2c <httpd_post_begin+0xc>)
 8008d24:	f01d fd72 	bl	802680c <puts>
}
 8008d28:	2000      	movs	r0, #0
 8008d2a:	bd08      	pop	{r3, pc}
 8008d2c:	0802ddec 	.word	0x0802ddec

08008d30 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <httpd_post_finished+0x8>)
 8008d32:	f01d bd6b 	b.w	802680c <puts>
 8008d36:	bf00      	nop
 8008d38:	0802de00 	.word	0x0802de00

08008d3c <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8008d3c:	4803      	ldr	r0, [pc, #12]	; (8008d4c <init_httpd_ssi+0x10>)
 8008d3e:	2215      	movs	r2, #21
 8008d40:	4903      	ldr	r1, [pc, #12]	; (8008d50 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8008d42:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8008d44:	f011 fb88 	bl	801a458 <http_set_ssi_handler>
}
 8008d48:	bd08      	pop	{r3, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08008959 	.word	0x08008959
 8008d50:	200002bc 	.word	0x200002bc

08008d54 <parsep2>:

///////////////////////////////////////////////////////
/// parse p2 params
// return 0 for success
//////////////////////////////////////////////////////
int parsep2(char *buf, char *match, int type, void *value) {
 8008d54:	b570      	push	{r4, r5, r6, lr}
	uint32_t *val;

	i = 0;
	j = 0;
	val = value;
	while ((buf[i]) && (buf[i] != '}')) {
 8008d56:	7804      	ldrb	r4, [r0, #0]
 8008d58:	b194      	cbz	r4, 8008d80 <parsep2+0x2c>
 8008d5a:	2c7d      	cmp	r4, #125	; 0x7d
 8008d5c:	d010      	beq.n	8008d80 <parsep2+0x2c>
	j = 0;
 8008d5e:	f04f 0e00 	mov.w	lr, #0
	i = 0;
 8008d62:	4675      	mov	r5, lr
		if (buf[i++] == match[j]) {
 8008d64:	f811 600e 	ldrb.w	r6, [r1, lr]
 8008d68:	f105 0c01 	add.w	ip, r5, #1
 8008d6c:	42a6      	cmp	r6, r4
			j++;
		} else {
			j = 0;
		}
		if (j > 0) {		// started matching something
			if (buf[i] == ':') {		// end of match
 8008d6e:	f810 400c 	ldrb.w	r4, [r0, ip]
		if (buf[i++] == match[j]) {
 8008d72:	d008      	beq.n	8008d86 <parsep2+0x32>
 8008d74:	4665      	mov	r5, ip
			j = 0;
 8008d76:	f04f 0e00 	mov.w	lr, #0
	while ((buf[i]) && (buf[i] != '}')) {
 8008d7a:	b10c      	cbz	r4, 8008d80 <parsep2+0x2c>
 8008d7c:	2c7d      	cmp	r4, #125	; 0x7d
 8008d7e:	d1f1      	bne.n	8008d64 <parsep2+0x10>
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
				}
			}
		}
	}
	return (-1);
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d84:	bd70      	pop	{r4, r5, r6, pc}
			if (buf[i] == ':') {		// end of match
 8008d86:	2c3a      	cmp	r4, #58	; 0x3a
			j++;
 8008d88:	f10e 0e01 	add.w	lr, lr, #1
			if (buf[i] == ':') {		// end of match
 8008d8c:	d001      	beq.n	8008d92 <parsep2+0x3e>
		if (buf[i++] == match[j]) {
 8008d8e:	4665      	mov	r5, ip
 8008d90:	e7f3      	b.n	8008d7a <parsep2+0x26>
				if (type == 1) {		// looking for a string
 8008d92:	2a01      	cmp	r2, #1
				i++;
 8008d94:	f105 0502 	add.w	r5, r5, #2
				if (type == 1) {		// looking for a string
 8008d98:	d005      	beq.n	8008da6 <parsep2+0x52>
				} else if (type == 2) { // uint32_t base 10 string
 8008d9a:	2a02      	cmp	r2, #2
 8008d9c:	d01c      	beq.n	8008dd8 <parsep2+0x84>
				} else if (type == 3) { // uint32_t hex string
 8008d9e:	2a03      	cmp	r2, #3
 8008da0:	d024      	beq.n	8008dec <parsep2+0x98>
	while ((buf[i]) && (buf[i] != '}')) {
 8008da2:	5d44      	ldrb	r4, [r0, r5]
 8008da4:	e7e9      	b.n	8008d7a <parsep2+0x26>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.') || (buf[i] == '_'))) {
 8008da6:	5d44      	ldrb	r4, [r0, r5]
 8008da8:	1941      	adds	r1, r0, r5
 8008daa:	b37c      	cbz	r4, 8008e0c <parsep2+0xb8>
 8008dac:	1e58      	subs	r0, r3, #1
					j = 0;
 8008dae:	2200      	movs	r2, #0
 8008db0:	4e18      	ldr	r6, [pc, #96]	; (8008e14 <parsep2+0xc0>)
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.') || (buf[i] == '_'))) {
 8008db2:	5d35      	ldrb	r5, [r6, r4]
 8008db4:	076d      	lsls	r5, r5, #29
 8008db6:	d103      	bne.n	8008dc0 <parsep2+0x6c>
 8008db8:	2c5f      	cmp	r4, #95	; 0x5f
 8008dba:	bf18      	it	ne
 8008dbc:	2c2e      	cmpne	r4, #46	; 0x2e
 8008dbe:	d11f      	bne.n	8008e00 <parsep2+0xac>
						pch[j++] = buf[i++];
 8008dc0:	f800 4f01 	strb.w	r4, [r0, #1]!
 8008dc4:	3201      	adds	r2, #1
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.') || (buf[i] == '_'))) {
 8008dc6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008dca:	2c00      	cmp	r4, #0
 8008dcc:	d1f1      	bne.n	8008db2 <parsep2+0x5e>
					pch[j] = 0;
 8008dce:	4413      	add	r3, r2
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	701a      	strb	r2, [r3, #0]
}
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%u", val) == 1) ? 0 : -1);
 8008dd8:	461a      	mov	r2, r3
 8008dda:	490f      	ldr	r1, [pc, #60]	; (8008e18 <parsep2+0xc4>)
 8008ddc:	4428      	add	r0, r5
 8008dde:	f01d fe83 	bl	8026ae8 <siscanf>
 8008de2:	3801      	subs	r0, #1
 8008de4:	bf18      	it	ne
 8008de6:	f04f 30ff 	movne.w	r0, #4294967295
}
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
 8008dec:	461a      	mov	r2, r3
 8008dee:	490b      	ldr	r1, [pc, #44]	; (8008e1c <parsep2+0xc8>)
 8008df0:	4428      	add	r0, r5
 8008df2:	f01d fe79 	bl	8026ae8 <siscanf>
 8008df6:	3801      	subs	r0, #1
 8008df8:	bf18      	it	ne
 8008dfa:	f04f 30ff 	movne.w	r0, #4294967295
}
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
					return ((j > 0) ? 0 : -1);
 8008e00:	fab2 f082 	clz	r0, r2
					pch[j] = 0;
 8008e04:	4413      	add	r3, r2
					return ((j > 0) ? 0 : -1);
 8008e06:	0940      	lsrs	r0, r0, #5
 8008e08:	4240      	negs	r0, r0
 8008e0a:	e7e2      	b.n	8008dd2 <parsep2+0x7e>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.') || (buf[i] == '_'))) {
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	e7df      	b.n	8008dd2 <parsep2+0x7e>
 8008e12:	bf00      	nop
 8008e14:	080474c9 	.word	0x080474c9
 8008e18:	0802de18 	.word	0x0802de18
 8008e1c:	0802de1c 	.word	0x0802de1c

08008e20 <returnpage>:

 p2 operands (strings):-
 */

// callback with the page
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile char p2[256];
	volatile char s1[16];
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;

//	printf("returnpage:\n");
	if (expectedapage) {
 8008e24:	4e9f      	ldr	r6, [pc, #636]	; (80090a4 <returnpage+0x284>)
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008e26:	b0d2      	sub	sp, #328	; 0x148
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8008e28:	2500      	movs	r5, #0
	if (expectedapage) {
 8008e2a:	6833      	ldr	r3, [r6, #0]
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008e2c:	f8ad 100e 	strh.w	r1, [sp, #14]
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8008e30:	950c      	str	r5, [sp, #48]	; 0x30
 8008e32:	950d      	str	r5, [sp, #52]	; 0x34
		if (errorm == 0) {
 8008e34:	b103      	cbz	r3, 8008e38 <returnpage+0x18>
 8008e36:	b122      	cbz	r2, 8008e42 <returnpage+0x22>
					rebootme(0);
				}
			}
		}
	}
	expectedapage = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	6033      	str	r3, [r6, #0]
}
 8008e3c:	b052      	add	sp, #328	; 0x148
 8008e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Server replied: \"%.*s\"\n", charcount, content);
 8008e42:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8008e46:	4604      	mov	r4, r0
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008e48:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8008e4c:	af09      	add	r7, sp, #36	; 0x24
			printf("Server replied: \"%.*s\"\n", charcount, content);
 8008e4e:	4602      	mov	r2, r0
 8008e50:	b289      	uxth	r1, r1
 8008e52:	4895      	ldr	r0, [pc, #596]	; (80090a8 <returnpage+0x288>)
 8008e54:	f01d fc3e 	bl	80266d4 <iprintf>
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008e58:	4b94      	ldr	r3, [pc, #592]	; (80090ac <returnpage+0x28c>)
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	aa04      	add	r2, sp, #16
 8008e5e:	4994      	ldr	r1, [pc, #592]	; (80090b0 <returnpage+0x290>)
			s1[0] = '\0';
 8008e60:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008e64:	e9cd 7800 	strd	r7, r8, [sp]
 8008e68:	f01d fe3e 	bl	8026ae8 <siscanf>
 8008e6c:	9005      	str	r0, [sp, #20]
			if (nconv != EOF) {
 8008e6e:	9b05      	ldr	r3, [sp, #20]
 8008e70:	3301      	adds	r3, #1
 8008e72:	f000 80de 	beq.w	8009032 <returnpage+0x212>
				switch (nconv) {
 8008e76:	9b05      	ldr	r3, [sp, #20]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	f200 8100 	bhi.w	8009080 <returnpage+0x260>
 8008e80:	e8df f003 	tbb	[pc, r3]
 8008e84:	56025053 	.word	0x56025053
 8008e88:	f10d 0818 	add.w	r8, sp, #24
					if (p1 == 1) {		// reboot
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	f000 80eb 	beq.w	800906a <returnpage+0x24a>
					if (p1 == 2) {		// freeze the UDP streaming
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2b02      	cmp	r3, #2
						globalfreeze = 1;
 8008e98:	4b86      	ldr	r3, [pc, #536]	; (80090b4 <returnpage+0x294>)
					if (p1 == 2) {		// freeze the UDP streaming
 8008e9a:	f000 80e0 	beq.w	800905e <returnpage+0x23e>
						globalfreeze = 0;
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]
					if (strlen(udp_target) < 7) {					// bad url or ip address
 8008ea2:	4882      	ldr	r0, [pc, #520]	; (80090ac <returnpage+0x28c>)
 8008ea4:	f7f7 f9d6 	bl	8000254 <strlen>
 8008ea8:	2806      	cmp	r0, #6
 8008eaa:	f240 80ca 	bls.w	8009042 <returnpage+0x222>
					printf("Server -> Target UDP host: %s\n", udp_target);
 8008eae:	497f      	ldr	r1, [pc, #508]	; (80090ac <returnpage+0x28c>)
 8008eb0:	4881      	ldr	r0, [pc, #516]	; (80090b8 <returnpage+0x298>)
 8008eb2:	f01d fc0f 	bl	80266d4 <iprintf>
					if (statuspkt.uid != sn) {
 8008eb6:	4c81      	ldr	r4, [pc, #516]	; (80090bc <returnpage+0x29c>)
 8008eb8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008ebc:	9a04      	ldr	r2, [sp, #16]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d009      	beq.n	8008ed8 <returnpage+0xb8>
						statuspkt.uid = sn;
 8008ec4:	9b04      	ldr	r3, [sp, #16]
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8008ec6:	487e      	ldr	r0, [pc, #504]	; (80090c0 <returnpage+0x2a0>)
						statuspkt.uid = sn;
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8008ece:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008ed2:	b289      	uxth	r1, r1
 8008ed4:	f01d fbfe 	bl	80266d4 <iprintf>
			if (!res) {		// build changed?
 8008ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80a0 	beq.w	8009022 <returnpage+0x202>
			if ((statuspkt.uid != 0xfeed) && (newbuild != BUILDNO) && (http_downloading == NOT_LOADING)) {// the stm firmware version advertised is different to this one running now
 8008ee2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008ee6:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d0a3      	beq.n	8008e38 <returnpage+0x18>
 8008ef0:	4a74      	ldr	r2, [pc, #464]	; (80090c4 <returnpage+0x2a4>)
 8008ef2:	f242 7334 	movw	r3, #10036	; 0x2734
 8008ef6:	6812      	ldr	r2, [r2, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d09d      	beq.n	8008e38 <returnpage+0x18>
 8008efc:	4b72      	ldr	r3, [pc, #456]	; (80090c8 <returnpage+0x2a8>)
 8008efe:	681c      	ldr	r4, [r3, #0]
 8008f00:	2c00      	cmp	r4, #0
 8008f02:	d199      	bne.n	8008e38 <returnpage+0x18>
				if (lptask_init_done == 0) {		// if running, reboot before trying to load
 8008f04:	4b71      	ldr	r3, [pc, #452]	; (80090cc <returnpage+0x2ac>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f040 80a1 	bne.w	8009050 <returnpage+0x230>
					osDelay(1000);
 8008f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f12:	f00d fb5f 	bl	80165d4 <osDelay>
					httploader(fwfilename, loaderhost, crc1, crc2);
 8008f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f18:	496d      	ldr	r1, [pc, #436]	; (80090d0 <returnpage+0x2b0>)
 8008f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f1c:	486d      	ldr	r0, [pc, #436]	; (80090d4 <returnpage+0x2b4>)
 8008f1e:	f7f8 ff67 	bl	8001df0 <httploader>
 8008f22:	e789      	b.n	8008e38 <returnpage+0x18>
 8008f24:	f10d 0818 	add.w	r8, sp, #24
 8008f28:	e7bb      	b.n	8008ea2 <returnpage+0x82>
 8008f2a:	f10d 0818 	add.w	r8, sp, #24
 8008f2e:	e7c2      	b.n	8008eb6 <returnpage+0x96>
					if (p2[0] == '{') {		// its the start of enclosed params
 8008f30:	f898 3000 	ldrb.w	r3, [r8]
						res = 0;
 8008f34:	f10d 0818 	add.w	r8, sp, #24
					if (p2[0] == '{') {		// its the start of enclosed params
 8008f38:	2b7b      	cmp	r3, #123	; 0x7b
 8008f3a:	d1a7      	bne.n	8008e8c <returnpage+0x6c>
						res = 0;
 8008f3c:	2300      	movs	r3, #0
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008f3e:	2201      	movs	r2, #1
 8008f40:	4965      	ldr	r1, [pc, #404]	; (80090d8 <returnpage+0x2b8>)
 8008f42:	f10d 0049 	add.w	r0, sp, #73	; 0x49
						res = 0;
 8008f46:	f8c8 3000 	str.w	r3, [r8]
						res2 = 0;
 8008f4a:	9307      	str	r3, [sp, #28]
						res3 = 0;
 8008f4c:	9308      	str	r3, [sp, #32]
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008f4e:	4b61      	ldr	r3, [pc, #388]	; (80090d4 <returnpage+0x2b4>)
 8008f50:	f7ff ff00 	bl	8008d54 <parsep2>
 8008f54:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008f58:	2202      	movs	r2, #2
 8008f5a:	4960      	ldr	r1, [pc, #384]	; (80090dc <returnpage+0x2bc>)
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008f5c:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008f5e:	4b59      	ldr	r3, [pc, #356]	; (80090c4 <returnpage+0x2a4>)
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008f60:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008f64:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008f68:	f7ff fef4 	bl	8008d54 <parsep2>
 8008f6c:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008f70:	2203      	movs	r2, #3
 8008f72:	495b      	ldr	r1, [pc, #364]	; (80090e0 <returnpage+0x2c0>)
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008f74:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008f76:	ab0a      	add	r3, sp, #40	; 0x28
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008f78:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008f7c:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008f80:	f7ff fee8 	bl	8008d54 <parsep2>
 8008f84:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008f88:	2203      	movs	r2, #3
 8008f8a:	4956      	ldr	r1, [pc, #344]	; (80090e4 <returnpage+0x2c4>)
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008f8c:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008f8e:	ab0b      	add	r3, sp, #44	; 0x2c
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008f90:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008f94:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008f98:	f7ff fedc 	bl	8008d54 <parsep2>
 8008f9c:	f8d8 3000 	ldr.w	r3, [r8]
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	4951      	ldr	r1, [pc, #324]	; (80090e8 <returnpage+0x2c8>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008fa4:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008fa6:	4b4a      	ldr	r3, [pc, #296]	; (80090d0 <returnpage+0x2b0>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008fa8:	f8c8 0000 	str.w	r0, [r8]
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008fac:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008fb0:	f7ff fed0 	bl	8008d54 <parsep2>
 8008fb4:	9a07      	ldr	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008fb6:	ab0d      	add	r3, sp, #52	; 0x34
 8008fb8:	494c      	ldr	r1, [pc, #304]	; (80090ec <returnpage+0x2cc>)
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008fba:	4310      	orrs	r0, r2
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008fbc:	2203      	movs	r2, #3
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008fbe:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008fc0:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008fc4:	f7ff fec6 	bl	8008d54 <parsep2>
 8008fc8:	9a07      	ldr	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008fca:	ab0e      	add	r3, sp, #56	; 0x38
 8008fcc:	4948      	ldr	r1, [pc, #288]	; (80090f0 <returnpage+0x2d0>)
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008fce:	4310      	orrs	r0, r2
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008fd0:	2201      	movs	r2, #1
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008fd2:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008fd4:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008fd8:	f7ff febc 	bl	8008d54 <parsep2>
 8008fdc:	9b07      	ldr	r3, [sp, #28]
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008fde:	2201      	movs	r2, #1
 8008fe0:	4944      	ldr	r1, [pc, #272]	; (80090f4 <returnpage+0x2d4>)
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008fe2:	4318      	orrs	r0, r3
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008fe4:	4b44      	ldr	r3, [pc, #272]	; (80090f8 <returnpage+0x2d8>)
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008fe6:	9007      	str	r0, [sp, #28]
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008fe8:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008fec:	f7ff feb2 	bl	8008d54 <parsep2>
 8008ff0:	9b08      	ldr	r3, [sp, #32]
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	4941      	ldr	r1, [pc, #260]	; (80090fc <returnpage+0x2dc>)
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008ff6:	4318      	orrs	r0, r3
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 8008ff8:	4b41      	ldr	r3, [pc, #260]	; (8009100 <returnpage+0x2e0>)
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008ffa:	9008      	str	r0, [sp, #32]
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 8008ffc:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8009000:	f7ff fea8 	bl	8008d54 <parsep2>
 8009004:	9a08      	ldr	r2, [sp, #32]
 8009006:	4603      	mov	r3, r0
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 8009008:	493e      	ldr	r1, [pc, #248]	; (8009104 <returnpage+0x2e4>)
 800900a:	f10d 0049 	add.w	r0, sp, #73	; 0x49
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 800900e:	4313      	orrs	r3, r2
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 8009010:	2202      	movs	r2, #2
						res3 |= parsep2(&p2[1], "lbl", 2, &srvlcdbld);
 8009012:	9308      	str	r3, [sp, #32]
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 8009014:	4b3c      	ldr	r3, [pc, #240]	; (8009108 <returnpage+0x2e8>)
 8009016:	f7ff fe9d 	bl	8008d54 <parsep2>
 800901a:	9b08      	ldr	r3, [sp, #32]
 800901c:	4318      	orrs	r0, r3
 800901e:	9008      	str	r0, [sp, #32]
 8009020:	e734      	b.n	8008e8c <returnpage+0x6c>
				printf("Firmware: this build is %d, the server build is %d\n", BUILDNO, newbuild);
 8009022:	4b28      	ldr	r3, [pc, #160]	; (80090c4 <returnpage+0x2a4>)
 8009024:	f242 7134 	movw	r1, #10036	; 0x2734
 8009028:	4838      	ldr	r0, [pc, #224]	; (800910c <returnpage+0x2ec>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	f01d fb52 	bl	80266d4 <iprintf>
 8009030:	e757      	b.n	8008ee2 <returnpage+0xc2>
				printf("returnpage: (error returned) errno=%d\n", errorm);
 8009032:	4629      	mov	r1, r5
 8009034:	4836      	ldr	r0, [pc, #216]	; (8009110 <returnpage+0x2f0>)
 8009036:	f10d 0818 	add.w	r8, sp, #24
 800903a:	4c20      	ldr	r4, [pc, #128]	; (80090bc <returnpage+0x29c>)
 800903c:	f01d fb4a 	bl	80266d4 <iprintf>
 8009040:	e74a      	b.n	8008ed8 <returnpage+0xb8>
						strcpy(udp_target, SERVER_DESTINATION);		// default it
 8009042:	4d34      	ldr	r5, [pc, #208]	; (8009114 <returnpage+0x2f4>)
 8009044:	4c19      	ldr	r4, [pc, #100]	; (80090ac <returnpage+0x28c>)
 8009046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800904a:	682b      	ldr	r3, [r5, #0]
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	e72e      	b.n	8008eae <returnpage+0x8e>
					printf("Rebooting before loading new firmware, wait...\n");
 8009050:	4831      	ldr	r0, [pc, #196]	; (8009118 <returnpage+0x2f8>)
 8009052:	f01d fbdb 	bl	802680c <puts>
					rebootme(0);
 8009056:	4620      	mov	r0, r4
 8009058:	f7fa fe46 	bl	8003ce8 <rebootme>
 800905c:	e6ec      	b.n	8008e38 <returnpage+0x18>
						globalfreeze = 1;
 800905e:	2201      	movs	r2, #1
						printf("Server -> commands a streaming freeze\n");
 8009060:	482e      	ldr	r0, [pc, #184]	; (800911c <returnpage+0x2fc>)
						globalfreeze = 1;
 8009062:	601a      	str	r2, [r3, #0]
						printf("Server -> commands a streaming freeze\n");
 8009064:	f01d fbd2 	bl	802680c <puts>
 8009068:	e71b      	b.n	8008ea2 <returnpage+0x82>
						printf("Server -> commands a reboot...\n");
 800906a:	482d      	ldr	r0, [pc, #180]	; (8009120 <returnpage+0x300>)
 800906c:	f01d fbce 	bl	802680c <puts>
						osDelay(500);
 8009070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009074:	f00d faae 	bl	80165d4 <osDelay>
						rebootme(6);
 8009078:	2006      	movs	r0, #6
 800907a:	f7fa fe35 	bl	8003ce8 <rebootme>
 800907e:	e709      	b.n	8008e94 <returnpage+0x74>
					printf("Wrong number of params from Server -> %d\n", nconv);
 8009080:	9905      	ldr	r1, [sp, #20]
 8009082:	f10d 0818 	add.w	r8, sp, #24
 8009086:	4827      	ldr	r0, [pc, #156]	; (8009124 <returnpage+0x304>)
 8009088:	f01d fb24 	bl	80266d4 <iprintf>
					down_total = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	4a26      	ldr	r2, [pc, #152]	; (8009128 <returnpage+0x308>)
					nxt_abort = 1;
 8009090:	4926      	ldr	r1, [pc, #152]	; (800912c <returnpage+0x30c>)
					down_total = 0;
 8009092:	6013      	str	r3, [r2, #0]
					nxt_abort = 1;
 8009094:	2201      	movs	r2, #1
 8009096:	4c09      	ldr	r4, [pc, #36]	; (80090bc <returnpage+0x29c>)
 8009098:	600a      	str	r2, [r1, #0]
					flash_abort = 1;
 800909a:	4925      	ldr	r1, [pc, #148]	; (8009130 <returnpage+0x310>)
 800909c:	600a      	str	r2, [r1, #0]
					http_downloading = NOT_LOADING;
 800909e:	4a0a      	ldr	r2, [pc, #40]	; (80090c8 <returnpage+0x2a8>)
 80090a0:	6013      	str	r3, [r2, #0]
					break;
 80090a2:	e719      	b.n	8008ed8 <returnpage+0xb8>
 80090a4:	200034c8 	.word	0x200034c8
 80090a8:	0802de20 	.word	0x0802de20
 80090ac:	20003530 	.word	0x20003530
 80090b0:	0802de38 	.word	0x0802de38
 80090b4:	200034a4 	.word	0x200034a4
 80090b8:	0802dec0 	.word	0x0802dec0
 80090bc:	2000303c 	.word	0x2000303c
 80090c0:	0802dee0 	.word	0x0802dee0
 80090c4:	20002dfc 	.word	0x20002dfc
 80090c8:	200018dc 	.word	0x200018dc
 80090cc:	20002de0 	.word	0x20002de0
 80090d0:	2000001c 	.word	0x2000001c
 80090d4:	20001a50 	.word	0x20001a50
 80090d8:	0802de48 	.word	0x0802de48
 80090dc:	0802de4c 	.word	0x0802de4c
 80090e0:	0802de50 	.word	0x0802de50
 80090e4:	0802de58 	.word	0x0802de58
 80090e8:	0802de60 	.word	0x0802de60
 80090ec:	0802de64 	.word	0x0802de64
 80090f0:	0802de68 	.word	0x0802de68
 80090f4:	0802de6c 	.word	0x0802de6c
 80090f8:	20001a94 	.word	0x20001a94
 80090fc:	0802de70 	.word	0x0802de70
 8009100:	20002e08 	.word	0x20002e08
 8009104:	0802de74 	.word	0x0802de74
 8009108:	20001ab4 	.word	0x20001ab4
 800910c:	0802df54 	.word	0x0802df54
 8009110:	0802df2c 	.word	0x0802df2c
 8009114:	0802b684 	.word	0x0802b684
 8009118:	0802df88 	.word	0x0802df88
 800911c:	0802de98 	.word	0x0802de98
 8009120:	0802de78 	.word	0x0802de78
 8009124:	0802df00 	.word	0x0802df00
 8009128:	20001690 	.word	0x20001690
 800912c:	20003128 	.word	0x20003128
 8009130:	20000874 	.word	0x20000874

08009134 <initialapisn>:
	int i, j;
	char localip[24];
	char params[48];

	j = 1;
	sprintf(localip, "%d:%d:%d:%d", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8009134:	4b36      	ldr	r3, [pc, #216]	; (8009210 <initialapisn+0xdc>)
 8009136:	4937      	ldr	r1, [pc, #220]	; (8009214 <initialapisn+0xe0>)
 8009138:	681a      	ldr	r2, [r3, #0]
void initialapisn() {
 800913a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sprintf(localip, "%d:%d:%d:%d", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800913e:	0e13      	lsrs	r3, r2, #24
void initialapisn() {
 8009140:	b096      	sub	sp, #88	; 0x58
	sprintf(params, "?bld=%d\&ip=%s\&nx=%s", BUILDNO, localip, nex_model);
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);

	strcat(stmuid, params);

	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8009142:	4d35      	ldr	r5, [pc, #212]	; (8009218 <initialapisn+0xe4>)
	sprintf(localip, "%d:%d:%d:%d", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800914a:	a804      	add	r0, sp, #16
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	f01d fca8 	bl	8026aa8 <siprintf>
	sprintf(params, "?bld=%d\&ip=%s\&nx=%s", BUILDNO, localip, nex_model);
 8009158:	4830      	ldr	r0, [pc, #192]	; (800921c <initialapisn+0xe8>)
 800915a:	ab04      	add	r3, sp, #16
 800915c:	f242 7234 	movw	r2, #10036	; 0x2734
 8009160:	492f      	ldr	r1, [pc, #188]	; (8009220 <initialapisn+0xec>)
 8009162:	9000      	str	r0, [sp, #0]
 8009164:	a80a      	add	r0, sp, #40	; 0x28
 8009166:	f01d fc9f 	bl	8026aa8 <siprintf>
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800916a:	492e      	ldr	r1, [pc, #184]	; (8009224 <initialapisn+0xf0>)
 800916c:	482e      	ldr	r0, [pc, #184]	; (8009228 <initialapisn+0xf4>)
 800916e:	f8d1 3424 	ldr.w	r3, [r1, #1060]	; 0x424
 8009172:	f8d1 2420 	ldr.w	r2, [r1, #1056]	; 0x420
 8009176:	f8d1 1428 	ldr.w	r1, [r1, #1064]	; 0x428
 800917a:	9100      	str	r1, [sp, #0]
 800917c:	492b      	ldr	r1, [pc, #172]	; (800922c <initialapisn+0xf8>)
 800917e:	f01d fc93 	bl	8026aa8 <siprintf>
	strcat(stmuid, params);
 8009182:	a90a      	add	r1, sp, #40	; 0x28
 8009184:	4828      	ldr	r0, [pc, #160]	; (8009228 <initialapisn+0xf4>)
 8009186:	f01d fd29 	bl	8026bdc <strcat>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 800918a:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800918e:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8009192:	b29b      	uxth	r3, r3
 8009194:	4293      	cmp	r3, r2
 8009196:	d130      	bne.n	80091fa <initialapisn+0xc6>
	j = 1;
 8009198:	2701      	movs	r7, #1
	{
		printf("getting params from server on port %d Try=%d\n", DOWNLOAD_PORT, j);
 800919a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8009234 <initialapisn+0x100>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 800919e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8009238 <initialapisn+0x104>
 80091a2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800923c <initialapisn+0x108>
		printf("getting params from server on port %d Try=%d\n", DOWNLOAD_PORT, j);
 80091a6:	463a      	mov	r2, r7
 80091a8:	f641 7192 	movw	r1, #8082	; 0x1f92
 80091ac:	4650      	mov	r0, sl
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 80091ae:	f241 3488 	movw	r4, #5000	; 0x1388
		printf("getting params from server on port %d Try=%d\n", DOWNLOAD_PORT, j);
 80091b2:	f01d fa8f 	bl	80266d4 <iprintf>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 80091b6:	4641      	mov	r1, r8
 80091b8:	4648      	mov	r0, r9
		getpage(stmuid);		// get sn and targ
		for (i = 0; i < 5000; i++) {
			if (statuspkt.uid != 0xfeed)
 80091ba:	f64f 66ed 	movw	r6, #65261	; 0xfeed
	printf("Control Server is %s\n", SERVER_DESTINATION);
 80091be:	f01d fa89 	bl	80266d4 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 80091c2:	2300      	movs	r3, #0
 80091c4:	4918      	ldr	r1, [pc, #96]	; (8009228 <initialapisn+0xf4>)
 80091c6:	4640      	mov	r0, r8
 80091c8:	461a      	mov	r2, r3
 80091ca:	f7f8 fda3 	bl	8001d14 <hc_open>
 80091ce:	9003      	str	r0, [sp, #12]
		for (i = 0; i < 5000; i++) {
 80091d0:	e003      	b.n	80091da <initialapisn+0xa6>
				break;
			osDelay(1);
 80091d2:	f00d f9ff 	bl	80165d4 <osDelay>
		for (i = 0; i < 5000; i++) {
 80091d6:	3c01      	subs	r4, #1
 80091d8:	d005      	beq.n	80091e6 <initialapisn+0xb2>
			if (statuspkt.uid != 0xfeed)
 80091da:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
			osDelay(1);
 80091de:	2001      	movs	r0, #1
			if (statuspkt.uid != 0xfeed)
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	42b3      	cmp	r3, r6
 80091e4:	d0f5      	beq.n	80091d2 <initialapisn+0x9e>
		}
		j++;
 80091e6:	3701      	adds	r7, #1
		if (j > 5) {
 80091e8:	2f05      	cmp	r7, #5
 80091ea:	dc09      	bgt.n	8009200 <initialapisn+0xcc>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 80091ec:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 80091f0:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d0d5      	beq.n	80091a6 <initialapisn+0x72>
			printf("************* ABORTED **************\n");
			rebootme(8);
		}
	}
}
 80091fa:	b016      	add	sp, #88	; 0x58
 80091fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("************* ABORTED **************\n");
 8009200:	480b      	ldr	r0, [pc, #44]	; (8009230 <initialapisn+0xfc>)
 8009202:	f01d fb03 	bl	802680c <puts>
			rebootme(8);
 8009206:	2008      	movs	r0, #8
 8009208:	f7fa fd6e 	bl	8003ce8 <rebootme>
 800920c:	e7ee      	b.n	80091ec <initialapisn+0xb8>
 800920e:	bf00      	nop
 8009210:	20002df4 	.word	0x20002df4
 8009214:	0802dfd0 	.word	0x0802dfd0
 8009218:	2000303c 	.word	0x2000303c
 800921c:	20001b50 	.word	0x20001b50
 8009220:	0802dfdc 	.word	0x0802dfdc
 8009224:	1ff0f000 	.word	0x1ff0f000
 8009228:	200034d0 	.word	0x200034d0
 800922c:	0802dff0 	.word	0x0802dff0
 8009230:	0802e038 	.word	0x0802e038
 8009234:	0802e008 	.word	0x0802e008
 8009238:	0802b684 	.word	0x0802b684
 800923c:	0802dfb8 	.word	0x0802dfb8

08009240 <requestapisn>:

void requestapisn() {
 8009240:	b510      	push	{r4, lr}
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8009242:	4c0a      	ldr	r4, [pc, #40]	; (800926c <requestapisn+0x2c>)
void requestapisn() {
 8009244:	b082      	sub	sp, #8
	printf("updating params from server on port %d\n", DOWNLOAD_PORT);
 8009246:	f641 7192 	movw	r1, #8082	; 0x1f92
 800924a:	4809      	ldr	r0, [pc, #36]	; (8009270 <requestapisn+0x30>)
 800924c:	f01d fa42 	bl	80266d4 <iprintf>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8009250:	4621      	mov	r1, r4
 8009252:	4808      	ldr	r0, [pc, #32]	; (8009274 <requestapisn+0x34>)
 8009254:	f01d fa3e 	bl	80266d4 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8009258:	2300      	movs	r3, #0
 800925a:	4907      	ldr	r1, [pc, #28]	; (8009278 <requestapisn+0x38>)
 800925c:	4620      	mov	r0, r4
 800925e:	461a      	mov	r2, r3
 8009260:	f7f8 fd58 	bl	8001d14 <hc_open>
 8009264:	9001      	str	r0, [sp, #4]
	getpage(stmuid);		// get sn and targ
}
 8009266:	b002      	add	sp, #8
 8009268:	bd10      	pop	{r4, pc}
 800926a:	bf00      	nop
 800926c:	0802b684 	.word	0x0802b684
 8009270:	0802e060 	.word	0x0802e060
 8009274:	0802dfb8 	.word	0x0802dfb8
 8009278:	200034d0 	.word	0x200034d0

0800927c <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800927c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800927e:	e003      	b.n	8009288 <LoopCopyDataInit>

08009280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009280:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8009282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009286:	3104      	adds	r1, #4

08009288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009288:	480a      	ldr	r0, [pc, #40]	; (80092b4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800928a:	4b0b      	ldr	r3, [pc, #44]	; (80092b8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800928c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800928e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009290:	d3f6      	bcc.n	8009280 <CopyDataInit>
  ldr  r2, =_sbss
 8009292:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8009294:	e002      	b.n	800929c <LoopFillZerobss>

08009296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009298:	f842 3b04 	str.w	r3, [r2], #4

0800929c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800929c:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800929e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80092a0:	d3f9      	bcc.n	8009296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80092a2:	f7ff f8d3 	bl	800844c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80092a6:	f01c f8f3 	bl	8025490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80092aa:	f7fb fac9 	bl	8004840 <main>
  bx  lr    
 80092ae:	4770      	bx	lr
  ldr  r3, =_sidata
 80092b0:	08047dbc 	.word	0x08047dbc
  ldr  r0, =_sdata
 80092b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80092b8:	200006f4 	.word	0x200006f4
  ldr  r2, =_sbss
 80092bc:	200006f8 	.word	0x200006f8
  ldr  r3, = _ebss
 80092c0:	20030164 	.word	0x20030164

080092c4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80092c4:	e7fe      	b.n	80092c4 <CAN1_RX0_IRQHandler>
 80092c6:	Address 0x00000000080092c6 is out of bounds.


080092c8 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092c8:	4a07      	ldr	r2, [pc, #28]	; (80092e8 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092ca:	2003      	movs	r0, #3
{
 80092cc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092ce:	6813      	ldr	r3, [r2, #0]
 80092d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092d6:	f000 fc4f 	bl	8009b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80092da:	2000      	movs	r0, #0
 80092dc:	f7fe ff82 	bl	80081e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092e0:	f7fe f800 	bl	80072e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80092e4:	2000      	movs	r0, #0
 80092e6:	bd08      	pop	{r3, pc}
 80092e8:	40023c00 	.word	0x40023c00

080092ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80092ec:	4a03      	ldr	r2, [pc, #12]	; (80092fc <HAL_IncTick+0x10>)
 80092ee:	4b04      	ldr	r3, [pc, #16]	; (8009300 <HAL_IncTick+0x14>)
 80092f0:	6811      	ldr	r1, [r2, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	440b      	add	r3, r1
 80092f6:	6013      	str	r3, [r2, #0]
}
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	20003570 	.word	0x20003570
 8009300:	20000314 	.word	0x20000314

08009304 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009304:	4b01      	ldr	r3, [pc, #4]	; (800930c <HAL_GetTick+0x8>)
 8009306:	6818      	ldr	r0, [r3, #0]
}
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	20003570 	.word	0x20003570

08009310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009314:	f7ff fff6 	bl	8009304 <HAL_GetTick>
 8009318:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800931a:	1c63      	adds	r3, r4, #1
 800931c:	d002      	beq.n	8009324 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800931e:	4b04      	ldr	r3, [pc, #16]	; (8009330 <HAL_Delay+0x20>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009324:	f7ff ffee 	bl	8009304 <HAL_GetTick>
 8009328:	1b43      	subs	r3, r0, r5
 800932a:	42a3      	cmp	r3, r4
 800932c:	d3fa      	bcc.n	8009324 <HAL_Delay+0x14>
  {
  }
}
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	20000314 	.word	0x20000314

08009334 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009334:	2800      	cmp	r0, #0
 8009336:	f000 8144 	beq.w	80095c2 <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800933a:	6803      	ldr	r3, [r0, #0]
 800933c:	49a7      	ldr	r1, [pc, #668]	; (80095dc <HAL_ADC_Init+0x2a8>)
 800933e:	4aa8      	ldr	r2, [pc, #672]	; (80095e0 <HAL_ADC_Init+0x2ac>)
 8009340:	428b      	cmp	r3, r1
 8009342:	bf18      	it	ne
 8009344:	4293      	cmpne	r3, r2
{
 8009346:	b570      	push	{r4, r5, r6, lr}
 8009348:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800934a:	d003      	beq.n	8009354 <HAL_ADC_Init+0x20>
 800934c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009350:	4293      	cmp	r3, r2
 8009352:	d177      	bne.n	8009444 <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8009354:	6863      	ldr	r3, [r4, #4]
 8009356:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800935a:	d17c      	bne.n	8009456 <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800935c:	68a3      	ldr	r3, [r4, #8]
 800935e:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8009362:	f040 8082 	bne.w	800946a <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8009366:	6923      	ldr	r3, [r4, #16]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d84e      	bhi.n	800940a <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800936c:	69a3      	ldr	r3, [r4, #24]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d845      	bhi.n	80093fe <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8009372:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009374:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8009378:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 800937c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8009380:	bf18      	it	ne
 8009382:	2900      	cmpne	r1, #0
 8009384:	bf14      	ite	ne
 8009386:	2301      	movne	r3, #1
 8009388:	2300      	moveq	r3, #0
 800938a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800938e:	bf0c      	ite	eq
 8009390:	2300      	moveq	r3, #0
 8009392:	f003 0301 	andne.w	r3, r3, #1
 8009396:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 800939a:	bf0c      	ite	eq
 800939c:	2300      	moveq	r3, #0
 800939e:	f003 0301 	andne.w	r3, r3, #1
 80093a2:	b123      	cbz	r3, 80093ae <HAL_ADC_Init+0x7a>
 80093a4:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 80093a8:	2a01      	cmp	r2, #1
 80093aa:	f200 8111 	bhi.w	80095d0 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80093ae:	68e3      	ldr	r3, [r4, #12]
 80093b0:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80093b4:	d165      	bne.n	8009482 <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80093b6:	69e3      	ldr	r3, [r4, #28]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	2b0f      	cmp	r3, #15
 80093bc:	d85b      	bhi.n	8009476 <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80093be:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d830      	bhi.n	8009428 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80093c6:	6963      	ldr	r3, [r4, #20]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d835      	bhi.n	8009438 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80093cc:	f894 3020 	ldrb.w	r3, [r4, #32]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d823      	bhi.n	800941c <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093d4:	4b83      	ldr	r3, [pc, #524]	; (80095e4 <HAL_ADC_Init+0x2b0>)
 80093d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80093d8:	429a      	cmp	r2, r3
 80093da:	d004      	beq.n	80093e6 <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80093dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093de:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80093e2:	f040 80e8 	bne.w	80095b6 <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80093e6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80093e8:	2d00      	cmp	r5, #0
 80093ea:	f000 80d4 	beq.w	8009596 <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80093ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093f0:	06db      	lsls	r3, r3, #27
 80093f2:	d54c      	bpl.n	800948e <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80093f4:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 80093f6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80093f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80093fe:	f240 1151 	movw	r1, #337	; 0x151
 8009402:	4879      	ldr	r0, [pc, #484]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 8009404:	f7fc fa30 	bl	8005868 <assert_failed>
 8009408:	e7b3      	b.n	8009372 <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800940a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800940e:	4876      	ldr	r0, [pc, #472]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 8009410:	f7fc fa2a 	bl	8005868 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009414:	69a3      	ldr	r3, [r4, #24]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d9ab      	bls.n	8009372 <HAL_ADC_Init+0x3e>
 800941a:	e7f0      	b.n	80093fe <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800941c:	f240 1157 	movw	r1, #343	; 0x157
 8009420:	4871      	ldr	r0, [pc, #452]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 8009422:	f7fc fa21 	bl	8005868 <assert_failed>
 8009426:	e7d5      	b.n	80093d4 <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8009428:	f240 1155 	movw	r1, #341	; 0x155
 800942c:	486e      	ldr	r0, [pc, #440]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 800942e:	f7fc fa1b 	bl	8005868 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8009432:	6963      	ldr	r3, [r4, #20]
 8009434:	2b02      	cmp	r3, #2
 8009436:	d9c9      	bls.n	80093cc <HAL_ADC_Init+0x98>
 8009438:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800943c:	486a      	ldr	r0, [pc, #424]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 800943e:	f7fc fa13 	bl	8005868 <assert_failed>
 8009442:	e7c3      	b.n	80093cc <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009444:	f240 114d 	movw	r1, #333	; 0x14d
 8009448:	4867      	ldr	r0, [pc, #412]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 800944a:	f7fc fa0d 	bl	8005868 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8009454:	d082      	beq.n	800935c <HAL_ADC_Init+0x28>
 8009456:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800945a:	4863      	ldr	r0, [pc, #396]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 800945c:	f7fc fa04 	bl	8005868 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8009460:	68a3      	ldr	r3, [r4, #8]
 8009462:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8009466:	f43f af7e 	beq.w	8009366 <HAL_ADC_Init+0x32>
 800946a:	f240 114f 	movw	r1, #335	; 0x14f
 800946e:	485e      	ldr	r0, [pc, #376]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 8009470:	f7fc f9fa 	bl	8005868 <assert_failed>
 8009474:	e777      	b.n	8009366 <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8009476:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800947a:	485b      	ldr	r0, [pc, #364]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 800947c:	f7fc f9f4 	bl	8005868 <assert_failed>
 8009480:	e79d      	b.n	80093be <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8009482:	f240 1153 	movw	r1, #339	; 0x153
 8009486:	4858      	ldr	r0, [pc, #352]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 8009488:	f7fc f9ee 	bl	8005868 <assert_failed>
 800948c:	e793      	b.n	80093b6 <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 800948e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009490:	4b56      	ldr	r3, [pc, #344]	; (80095ec <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009492:	4a57      	ldr	r2, [pc, #348]	; (80095f0 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 8009494:	400b      	ands	r3, r1
 8009496:	f043 0302 	orr.w	r3, r3, #2
 800949a:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800949c:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800949e:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80094a0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80094a4:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80094a6:	6851      	ldr	r1, [r2, #4]
 80094a8:	6860      	ldr	r0, [r4, #4]
 80094aa:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80094ac:	484d      	ldr	r0, [pc, #308]	; (80095e4 <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80094ae:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80094b0:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80094b2:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80094b4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80094b8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80094c0:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80094c2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80094ca:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80094cc:	6859      	ldr	r1, [r3, #4]
 80094ce:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80094d0:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80094d2:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80094d4:	6899      	ldr	r1, [r3, #8]
 80094d6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80094da:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80094dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80094de:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80094e0:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80094e2:	ea42 0205 	orr.w	r2, r2, r5
 80094e6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80094e8:	d05c      	beq.n	80095a4 <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80094ea:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80094ec:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80094ee:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80094f2:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	4311      	orrs	r1, r2
 80094f8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80094fa:	6899      	ldr	r1, [r3, #8]
 80094fc:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8009500:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	432a      	orrs	r2, r5
 8009506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009508:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800950a:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800950c:	f021 0102 	bic.w	r1, r1, #2
 8009510:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8009518:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800951a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800951e:	2a00      	cmp	r2, #0
 8009520:	d051      	beq.n	80095c6 <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8009522:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009524:	3a01      	subs	r2, #1
 8009526:	2a07      	cmp	r2, #7
 8009528:	d864      	bhi.n	80095f4 <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800952a:	6859      	ldr	r1, [r3, #4]
 800952c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009530:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009532:	6859      	ldr	r1, [r3, #4]
 8009534:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8009538:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800953a:	6859      	ldr	r1, [r3, #4]
 800953c:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8009540:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8009544:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009546:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009548:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800954c:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800954e:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009550:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009552:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009554:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009558:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800955a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800955c:	6899      	ldr	r1, [r3, #8]
 800955e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8009562:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009564:	6899      	ldr	r1, [r3, #8]
 8009566:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800956a:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 800956e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009570:	6899      	ldr	r1, [r3, #8]
 8009572:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009576:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800957e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8009580:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8009582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009584:	f023 0303 	bic.w	r3, r3, #3
 8009588:	f043 0301 	orr.w	r3, r3, #1
 800958c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800958e:	2300      	movs	r3, #0
 8009590:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009594:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8009596:	4620      	mov	r0, r4
 8009598:	f7fd fedc 	bl	8007354 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800959c:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800959e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 80095a2:	e724      	b.n	80093ee <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80095aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80095ac:	689a      	ldr	r2, [r3, #8]
 80095ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80095b2:	609a      	str	r2, [r3, #8]
 80095b4:	e7a8      	b.n	8009508 <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80095b6:	f240 115b 	movw	r1, #347	; 0x15b
 80095ba:	480b      	ldr	r0, [pc, #44]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 80095bc:	f7fc f954 	bl	8005868 <assert_failed>
 80095c0:	e711      	b.n	80093e6 <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 80095c2:	2001      	movs	r0, #1
}
 80095c4:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	e7b8      	b.n	8009542 <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80095d0:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80095d4:	4804      	ldr	r0, [pc, #16]	; (80095e8 <HAL_ADC_Init+0x2b4>)
 80095d6:	f7fc f947 	bl	8005868 <assert_failed>
 80095da:	e6e8      	b.n	80093ae <HAL_ADC_Init+0x7a>
 80095dc:	40012000 	.word	0x40012000
 80095e0:	40012100 	.word	0x40012100
 80095e4:	0f000001 	.word	0x0f000001
 80095e8:	0802e088 	.word	0x0802e088
 80095ec:	ffffeefd 	.word	0xffffeefd
 80095f0:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80095f4:	f240 71ac 	movw	r1, #1964	; 0x7ac
 80095f8:	4803      	ldr	r0, [pc, #12]	; (8009608 <HAL_ADC_Init+0x2d4>)
 80095fa:	f7fc f935 	bl	8005868 <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80095fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009600:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009602:	3a01      	subs	r2, #1
 8009604:	e791      	b.n	800952a <HAL_ADC_Init+0x1f6>
 8009606:	bf00      	nop
 8009608:	0802e088 	.word	0x0802e088

0800960c <HAL_ADC_Start>:
{
 800960c:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 800960e:	2300      	movs	r3, #0
{
 8009610:	b082      	sub	sp, #8
 8009612:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8009614:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009616:	6983      	ldr	r3, [r0, #24]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d904      	bls.n	8009626 <HAL_ADC_Start+0x1a>
 800961c:	f240 21df 	movw	r1, #735	; 0x2df
 8009620:	4848      	ldr	r0, [pc, #288]	; (8009744 <HAL_ADC_Start+0x138>)
 8009622:	f7fc f921 	bl	8005868 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8009626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009628:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800962c:	d174      	bne.n	8009718 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 800962e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009632:	2b01      	cmp	r3, #1
 8009634:	d079      	beq.n	800972a <HAL_ADC_Start+0x11e>
 8009636:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009638:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 800963a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800963e:	6893      	ldr	r3, [r2, #8]
 8009640:	07d8      	lsls	r0, r3, #31
 8009642:	d414      	bmi.n	800966e <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009644:	4b40      	ldr	r3, [pc, #256]	; (8009748 <HAL_ADC_Start+0x13c>)
 8009646:	4841      	ldr	r0, [pc, #260]	; (800974c <HAL_ADC_Start+0x140>)
 8009648:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800964a:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800964c:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8009650:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009654:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8009656:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009658:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800965c:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800965e:	9b01      	ldr	r3, [sp, #4]
 8009660:	b12b      	cbz	r3, 800966e <HAL_ADC_Start+0x62>
      counter--;
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	3b01      	subs	r3, #1
 8009666:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8009668:	9b01      	ldr	r3, [sp, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1f9      	bne.n	8009662 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800966e:	6890      	ldr	r0, [r2, #8]
 8009670:	f010 0001 	ands.w	r0, r0, #1
 8009674:	d02c      	beq.n	80096d0 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 8009676:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009678:	4b35      	ldr	r3, [pc, #212]	; (8009750 <HAL_ADC_Start+0x144>)
 800967a:	400b      	ands	r3, r1
 800967c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009680:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009682:	6853      	ldr	r3, [r2, #4]
 8009684:	0559      	lsls	r1, r3, #21
 8009686:	d505      	bpl.n	8009694 <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800968a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800968e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009692:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009696:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800969a:	d02f      	beq.n	80096fc <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800969c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800969e:	f023 0306 	bic.w	r3, r3, #6
 80096a2:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80096a4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 80096a8:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80096aa:	4b2a      	ldr	r3, [pc, #168]	; (8009754 <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 80096ac:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80096b0:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80096b2:	6858      	ldr	r0, [r3, #4]
 80096b4:	f010 001f 	ands.w	r0, r0, #31
 80096b8:	d114      	bne.n	80096e4 <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80096ba:	6893      	ldr	r3, [r2, #8]
 80096bc:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80096c0:	d10e      	bne.n	80096e0 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80096c2:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 80096c4:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80096c6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80096ca:	6091      	str	r1, [r2, #8]
}
 80096cc:	b002      	add	sp, #8
 80096ce:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096d2:	f043 0310 	orr.w	r3, r3, #16
 80096d6:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096da:	f043 0301 	orr.w	r3, r3, #1
 80096de:	6463      	str	r3, [r4, #68]	; 0x44
}
 80096e0:	b002      	add	sp, #8
 80096e2:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80096e4:	481c      	ldr	r0, [pc, #112]	; (8009758 <HAL_ADC_Start+0x14c>)
 80096e6:	4282      	cmp	r2, r0
 80096e8:	d00a      	beq.n	8009700 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80096ea:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80096ec:	06db      	lsls	r3, r3, #27
 80096ee:	d402      	bmi.n	80096f6 <HAL_ADC_Start+0xea>
 80096f0:	4c1a      	ldr	r4, [pc, #104]	; (800975c <HAL_ADC_Start+0x150>)
 80096f2:	42a2      	cmp	r2, r4
 80096f4:	d01c      	beq.n	8009730 <HAL_ADC_Start+0x124>
  return HAL_OK;
 80096f6:	2000      	movs	r0, #0
}
 80096f8:	b002      	add	sp, #8
 80096fa:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80096fc:	6463      	str	r3, [r4, #68]	; 0x44
 80096fe:	e7d1      	b.n	80096a4 <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009700:	6893      	ldr	r3, [r2, #8]
 8009702:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8009706:	d103      	bne.n	8009710 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009708:	6893      	ldr	r3, [r2, #8]
 800970a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800970e:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009710:	4b10      	ldr	r3, [pc, #64]	; (8009754 <HAL_ADC_Start+0x148>)
  return HAL_OK;
 8009712:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009714:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009716:	e7e3      	b.n	80096e0 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8009718:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800971c:	4809      	ldr	r0, [pc, #36]	; (8009744 <HAL_ADC_Start+0x138>)
 800971e:	f7fc f8a3 	bl	8005868 <assert_failed>
  __HAL_LOCK(hadc);
 8009722:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009726:	2b01      	cmp	r3, #1
 8009728:	d185      	bne.n	8009636 <HAL_ADC_Start+0x2a>
 800972a:	2002      	movs	r0, #2
}
 800972c:	b002      	add	sp, #8
 800972e:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009730:	68a0      	ldr	r0, [r4, #8]
 8009732:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8009736:	d1de      	bne.n	80096f6 <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009738:	68a3      	ldr	r3, [r4, #8]
 800973a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800973e:	60a3      	str	r3, [r4, #8]
 8009740:	e7ce      	b.n	80096e0 <HAL_ADC_Start+0xd4>
 8009742:	bf00      	nop
 8009744:	0802e088 	.word	0x0802e088
 8009748:	200002b8 	.word	0x200002b8
 800974c:	431bde83 	.word	0x431bde83
 8009750:	fffff8fe 	.word	0xfffff8fe
 8009754:	40012300 	.word	0x40012300
 8009758:	40012000 	.word	0x40012000
 800975c:	40012200 	.word	0x40012200

08009760 <HAL_ADC_ConvCpltCallback>:
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop

08009764 <HAL_ADC_LevelOutOfWindowCallback>:
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop

08009768 <HAL_ADC_ErrorCallback>:
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop

0800976c <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800976c:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 800976e:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009770:	2a01      	cmp	r2, #1
{
 8009772:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8009774:	681d      	ldr	r5, [r3, #0]
{
 8009776:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8009778:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800977a:	d904      	bls.n	8009786 <HAL_ADC_IRQHandler+0x1a>
 800977c:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8009780:	4851      	ldr	r0, [pc, #324]	; (80098c8 <HAL_ADC_IRQHandler+0x15c>)
 8009782:	f7fc f871 	bl	8005868 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8009786:	69e3      	ldr	r3, [r4, #28]
 8009788:	3b01      	subs	r3, #1
 800978a:	2b0f      	cmp	r3, #15
 800978c:	f200 8086 	bhi.w	800989c <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8009790:	6963      	ldr	r3, [r4, #20]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d87c      	bhi.n	8009890 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 8009796:	07ab      	lsls	r3, r5, #30
 8009798:	d52c      	bpl.n	80097f4 <HAL_ADC_IRQHandler+0x88>
 800979a:	06b0      	lsls	r0, r6, #26
 800979c:	d52a      	bpl.n	80097f4 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800979e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097a0:	06d9      	lsls	r1, r3, #27
 80097a2:	d403      	bmi.n	80097ac <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80097a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097aa:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80097b4:	d117      	bne.n	80097e6 <HAL_ADC_IRQHandler+0x7a>
 80097b6:	69a2      	ldr	r2, [r4, #24]
 80097b8:	b9aa      	cbnz	r2, 80097e6 <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80097ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80097bc:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80097c0:	d002      	beq.n	80097c8 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80097c2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80097c4:	0552      	lsls	r2, r2, #21
 80097c6:	d40e      	bmi.n	80097e6 <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	f022 0220 	bic.w	r2, r2, #32
 80097ce:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80097d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097d6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80097d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097da:	04d8      	lsls	r0, r3, #19
 80097dc:	d403      	bmi.n	80097e6 <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80097de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097e0:	f043 0301 	orr.w	r3, r3, #1
 80097e4:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80097e6:	4620      	mov	r0, r4
 80097e8:	f7ff ffba 	bl	8009760 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	f06f 0212 	mvn.w	r2, #18
 80097f2:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80097f4:	0769      	lsls	r1, r5, #29
 80097f6:	d530      	bpl.n	800985a <HAL_ADC_IRQHandler+0xee>
 80097f8:	0632      	lsls	r2, r6, #24
 80097fa:	d52e      	bpl.n	800985a <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80097fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097fe:	06db      	lsls	r3, r3, #27
 8009800:	d403      	bmi.n	800980a <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009808:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	689a      	ldr	r2, [r3, #8]
 800980e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8009812:	d11b      	bne.n	800984c <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009816:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800981a:	d151      	bne.n	80098c0 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800981c:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800981e:	0551      	lsls	r1, r2, #21
 8009820:	d414      	bmi.n	800984c <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8009822:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009824:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8009828:	d110      	bne.n	800984c <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800982a:	69a2      	ldr	r2, [r4, #24]
 800982c:	b972      	cbnz	r2, 800984c <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009834:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8009836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800983c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800983e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009840:	05da      	lsls	r2, r3, #23
 8009842:	d403      	bmi.n	800984c <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009844:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009846:	f043 0301 	orr.w	r3, r3, #1
 800984a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800984c:	4620      	mov	r0, r4
 800984e:	f000 f92f 	bl	8009ab0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	f06f 020c 	mvn.w	r2, #12
 8009858:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800985a:	0673      	lsls	r3, r6, #25
 800985c:	d505      	bpl.n	800986a <HAL_ADC_IRQHandler+0xfe>
 800985e:	07e8      	lsls	r0, r5, #31
 8009860:	d503      	bpl.n	800986a <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	07d9      	lsls	r1, r3, #31
 8009868:	d41e      	bmi.n	80098a8 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 800986a:	06aa      	lsls	r2, r5, #26
 800986c:	d501      	bpl.n	8009872 <HAL_ADC_IRQHandler+0x106>
 800986e:	0173      	lsls	r3, r6, #5
 8009870:	d400      	bmi.n	8009874 <HAL_ADC_IRQHandler+0x108>
}
 8009872:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009874:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009876:	f06f 0520 	mvn.w	r5, #32
 800987a:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 800987c:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800987e:	f043 0302 	orr.w	r3, r3, #2
 8009882:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009884:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8009886:	f7ff ff6f 	bl	8009768 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	601d      	str	r5, [r3, #0]
}
 800988e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8009890:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8009894:	480c      	ldr	r0, [pc, #48]	; (80098c8 <HAL_ADC_IRQHandler+0x15c>)
 8009896:	f7fb ffe7 	bl	8005868 <assert_failed>
 800989a:	e77c      	b.n	8009796 <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800989c:	f240 41c2 	movw	r1, #1218	; 0x4c2
 80098a0:	4809      	ldr	r0, [pc, #36]	; (80098c8 <HAL_ADC_IRQHandler+0x15c>)
 80098a2:	f7fb ffe1 	bl	8005868 <assert_failed>
 80098a6:	e773      	b.n	8009790 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80098a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80098aa:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80098ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b0:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80098b2:	f7ff ff57 	bl	8009764 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	f06f 0201 	mvn.w	r2, #1
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	e7d4      	b.n	800986a <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80098c0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80098c2:	0550      	lsls	r0, r2, #21
 80098c4:	d4c2      	bmi.n	800984c <HAL_ADC_IRQHandler+0xe0>
 80098c6:	e7a9      	b.n	800981c <HAL_ADC_IRQHandler+0xb0>
 80098c8:	0802e088 	.word	0x0802e088

080098cc <HAL_ADC_ConfigChannel>:
{
 80098cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80098ce:	2300      	movs	r3, #0
{
 80098d0:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80098d2:	4a71      	ldr	r2, [pc, #452]	; (8009a98 <HAL_ADC_ConfigChannel+0x1cc>)
{
 80098d4:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 80098d6:	9301      	str	r3, [sp, #4]
{
 80098d8:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80098da:	680b      	ldr	r3, [r1, #0]
 80098dc:	4293      	cmp	r3, r2
 80098de:	bf18      	it	ne
 80098e0:	2b12      	cmpne	r3, #18
 80098e2:	d902      	bls.n	80098ea <HAL_ADC_ConfigChannel+0x1e>
 80098e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098e8:	d142      	bne.n	8009970 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	2b0f      	cmp	r3, #15
 80098f0:	d847      	bhi.n	8009982 <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	2b07      	cmp	r3, #7
 80098f6:	d84c      	bhi.n	8009992 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 80098f8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d051      	beq.n	80099a4 <HAL_ADC_ConfigChannel+0xd8>
 8009900:	2301      	movs	r3, #1
 8009902:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8009906:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009908:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800990a:	2809      	cmp	r0, #9
 800990c:	d94d      	bls.n	80099aa <HAL_ADC_ConfigChannel+0xde>
 800990e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8009912:	d04a      	beq.n	80099aa <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009914:	b281      	uxth	r1, r0
 8009916:	f04f 0c07 	mov.w	ip, #7
 800991a:	68de      	ldr	r6, [r3, #12]
 800991c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009920:	4f5d      	ldr	r7, [pc, #372]	; (8009a98 <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009922:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009924:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009926:	fa0c fc02 	lsl.w	ip, ip, r2
 800992a:	ea26 060c 	bic.w	r6, r6, ip
 800992e:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009930:	f000 8083 	beq.w	8009a3a <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009934:	68a6      	ldr	r6, [r4, #8]
 8009936:	4096      	lsls	r6, r2
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	4316      	orrs	r6, r2
 800993c:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 800993e:	6862      	ldr	r2, [r4, #4]
 8009940:	2a06      	cmp	r2, #6
 8009942:	d846      	bhi.n	80099d2 <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009944:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009948:	241f      	movs	r4, #31
 800994a:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800994c:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800994e:	4094      	lsls	r4, r2
 8009950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009952:	ea22 0204 	bic.w	r2, r2, r4
 8009956:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800995a:	4311      	orrs	r1, r2
 800995c:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800995e:	4a4f      	ldr	r2, [pc, #316]	; (8009a9c <HAL_ADC_ConfigChannel+0x1d0>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d048      	beq.n	80099f6 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 8009964:	2300      	movs	r3, #0
  return HAL_OK;
 8009966:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8009968:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800996c:	b003      	add	sp, #12
 800996e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8009970:	f240 618b 	movw	r1, #1675	; 0x68b
 8009974:	484a      	ldr	r0, [pc, #296]	; (8009aa0 <HAL_ADC_ConfigChannel+0x1d4>)
 8009976:	f7fb ff77 	bl	8005868 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800997a:	6863      	ldr	r3, [r4, #4]
 800997c:	3b01      	subs	r3, #1
 800997e:	2b0f      	cmp	r3, #15
 8009980:	d9b7      	bls.n	80098f2 <HAL_ADC_ConfigChannel+0x26>
 8009982:	f240 618c 	movw	r1, #1676	; 0x68c
 8009986:	4846      	ldr	r0, [pc, #280]	; (8009aa0 <HAL_ADC_ConfigChannel+0x1d4>)
 8009988:	f7fb ff6e 	bl	8005868 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800998c:	68a3      	ldr	r3, [r4, #8]
 800998e:	2b07      	cmp	r3, #7
 8009990:	d9b2      	bls.n	80098f8 <HAL_ADC_ConfigChannel+0x2c>
 8009992:	f240 618d 	movw	r1, #1677	; 0x68d
 8009996:	4842      	ldr	r0, [pc, #264]	; (8009aa0 <HAL_ADC_ConfigChannel+0x1d4>)
 8009998:	f7fb ff66 	bl	8005868 <assert_failed>
  __HAL_LOCK(hadc);
 800999c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d1ad      	bne.n	8009900 <HAL_ADC_ConfigChannel+0x34>
 80099a4:	2002      	movs	r0, #2
}
 80099a6:	b003      	add	sp, #12
 80099a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80099aa:	b281      	uxth	r1, r0
 80099ac:	f04f 0c07 	mov.w	ip, #7
 80099b0:	691e      	ldr	r6, [r3, #16]
 80099b2:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80099b6:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80099b8:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80099bc:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80099c0:	ea26 060c 	bic.w	r6, r6, ip
 80099c4:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80099c6:	691e      	ldr	r6, [r3, #16]
 80099c8:	4332      	orrs	r2, r6
 80099ca:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 80099cc:	6862      	ldr	r2, [r4, #4]
 80099ce:	2a06      	cmp	r2, #6
 80099d0:	d9b8      	bls.n	8009944 <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 80099d2:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80099d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 80099d8:	d81c      	bhi.n	8009a14 <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80099da:	3a23      	subs	r2, #35	; 0x23
 80099dc:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80099de:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80099e0:	4094      	lsls	r4, r2
 80099e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099e4:	ea22 0204 	bic.w	r2, r2, r4
 80099e8:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80099ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ec:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80099ee:	4a2b      	ldr	r2, [pc, #172]	; (8009a9c <HAL_ADC_ConfigChannel+0x1d0>)
 80099f0:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80099f2:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80099f4:	d1b6      	bne.n	8009964 <HAL_ADC_ConfigChannel+0x98>
 80099f6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80099fa:	d017      	beq.n	8009a2c <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80099fc:	2812      	cmp	r0, #18
 80099fe:	d123      	bne.n	8009a48 <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <HAL_ADC_ConfigChannel+0x1d8>)
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009a08:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009a10:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a12:	e7a7      	b.n	8009964 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009a14:	3a41      	subs	r2, #65	; 0x41
 8009a16:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009a18:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009a1a:	4094      	lsls	r4, r2
 8009a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a1e:	ea22 0204 	bic.w	r2, r2, r4
 8009a22:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a26:	4311      	orrs	r1, r2
 8009a28:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009a2a:	e798      	b.n	800995e <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8009a2c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8009a30:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009a34:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a38:	e794      	b.n	8009964 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8009a3a:	68a1      	ldr	r1, [r4, #8]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009a42:	2112      	movs	r1, #18
 8009a44:	60da      	str	r2, [r3, #12]
 8009a46:	e77a      	b.n	800993e <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a48:	4b13      	ldr	r3, [pc, #76]	; (8009a98 <HAL_ADC_ConfigChannel+0x1cc>)
 8009a4a:	4298      	cmp	r0, r3
 8009a4c:	d001      	beq.n	8009a52 <HAL_ADC_ConfigChannel+0x186>
 8009a4e:	2811      	cmp	r0, #17
 8009a50:	d188      	bne.n	8009964 <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009a52:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009a54:	4910      	ldr	r1, [pc, #64]	; (8009a98 <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009a56:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009a58:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009a5a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8009a5e:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009a66:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009a68:	f47f af7c 	bne.w	8009964 <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8009a6c:	4b0e      	ldr	r3, [pc, #56]	; (8009aa8 <HAL_ADC_ConfigChannel+0x1dc>)
 8009a6e:	4a0f      	ldr	r2, [pc, #60]	; (8009aac <HAL_ADC_ConfigChannel+0x1e0>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	fba2 2303 	umull	r2, r3, r2, r3
 8009a76:	0c9b      	lsrs	r3, r3, #18
 8009a78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8009a80:	9b01      	ldr	r3, [sp, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f43f af6e 	beq.w	8009964 <HAL_ADC_ConfigChannel+0x98>
        counter--;
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8009a8e:	9b01      	ldr	r3, [sp, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f9      	bne.n	8009a88 <HAL_ADC_ConfigChannel+0x1bc>
 8009a94:	e766      	b.n	8009964 <HAL_ADC_ConfigChannel+0x98>
 8009a96:	bf00      	nop
 8009a98:	10000012 	.word	0x10000012
 8009a9c:	40012000 	.word	0x40012000
 8009aa0:	0802e088 	.word	0x0802e088
 8009aa4:	40012300 	.word	0x40012300
 8009aa8:	200002b8 	.word	0x200002b8
 8009aac:	431bde83 	.word	0x431bde83

08009ab0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop

08009ab4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8009ab4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009ab6:	680b      	ldr	r3, [r1, #0]
{
 8009ab8:	460c      	mov	r4, r1
 8009aba:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009abc:	2b19      	cmp	r3, #25
 8009abe:	d93e      	bls.n	8009b3e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8009ac0:	f240 31af 	movw	r1, #943	; 0x3af
 8009ac4:	4829      	ldr	r0, [pc, #164]	; (8009b6c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009ac6:	f7fb fecf 	bl	8005868 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8009aca:	6863      	ldr	r3, [r4, #4]
 8009acc:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8009ad0:	d13e      	bne.n	8009b50 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8009ad2:	68a3      	ldr	r3, [r4, #8]
 8009ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009adc:	bf18      	it	ne
 8009ade:	2b00      	cmpne	r3, #0
 8009ae0:	bf14      	ite	ne
 8009ae2:	2201      	movne	r2, #1
 8009ae4:	2200      	moveq	r2, #0
 8009ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aea:	bf0c      	ite	eq
 8009aec:	2200      	moveq	r2, #0
 8009aee:	f002 0201 	andne.w	r2, r2, #1
 8009af2:	b112      	cbz	r2, 8009afa <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009af8:	d132      	bne.n	8009b60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009afa:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d02c      	beq.n	8009b5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8009b02:	4b1b      	ldr	r3, [pc, #108]	; (8009b70 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	f022 021f 	bic.w	r2, r2, #31
 8009b0a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	6821      	ldr	r1, [r4, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b1a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	6861      	ldr	r1, [r4, #4]
 8009b20:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009b22:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 8009b24:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8009b2c:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8009b2e:	68a0      	ldr	r0, [r4, #8]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8009b34:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 8009b36:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8009b38:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8009b3c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009b3e:	4a0d      	ldr	r2, [pc, #52]	; (8009b74 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8009b40:	fa22 f303 	lsr.w	r3, r2, r3
 8009b44:	07db      	lsls	r3, r3, #31
 8009b46:	d5bb      	bpl.n	8009ac0 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8009b48:	6863      	ldr	r3, [r4, #4]
 8009b4a:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8009b4e:	d0c0      	beq.n	8009ad2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009b50:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009b56:	f7fb fe87 	bl	8005868 <assert_failed>
 8009b5a:	e7ba      	b.n	8009ad2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8009b5c:	2002      	movs	r0, #2
}
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8009b60:	f240 31b1 	movw	r1, #945	; 0x3b1
 8009b64:	4801      	ldr	r0, [pc, #4]	; (8009b6c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009b66:	f7fb fe7f 	bl	8005868 <assert_failed>
 8009b6a:	e7c6      	b.n	8009afa <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009b6c:	0802e0c0 	.word	0x0802e0c0
 8009b70:	40012300 	.word	0x40012300
 8009b74:	02e602e7 	.word	0x02e602e7

08009b78 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009b78:	1ec3      	subs	r3, r0, #3
 8009b7a:	2b04      	cmp	r3, #4
{
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009b80:	d80c      	bhi.n	8009b9c <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b82:	4909      	ldr	r1, [pc, #36]	; (8009ba8 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b84:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b86:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8009b8a:	4b08      	ldr	r3, [pc, #32]	; (8009bac <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b8c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b8e:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b92:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b94:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 8009b96:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8009b98:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009b9a:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009b9c:	2191      	movs	r1, #145	; 0x91
 8009b9e:	4804      	ldr	r0, [pc, #16]	; (8009bb0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8009ba0:	f7fb fe62 	bl	8005868 <assert_failed>
 8009ba4:	e7ed      	b.n	8009b82 <HAL_NVIC_SetPriorityGrouping+0xa>
 8009ba6:	bf00      	nop
 8009ba8:	e000ed00 	.word	0xe000ed00
 8009bac:	05fa0000 	.word	0x05fa0000
 8009bb0:	0802e0fc 	.word	0x0802e0fc

08009bb4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009bb4:	2a0f      	cmp	r2, #15
{ 
 8009bb6:	b570      	push	{r4, r5, r6, lr}
 8009bb8:	4616      	mov	r6, r2
 8009bba:	4605      	mov	r5, r0
 8009bbc:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009bbe:	d836      	bhi.n	8009c2e <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009bc0:	2c0f      	cmp	r4, #15
 8009bc2:	d82f      	bhi.n	8009c24 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009bc4:	4b1c      	ldr	r3, [pc, #112]	; (8009c38 <HAL_NVIC_SetPriority+0x84>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009bcc:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009bd0:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009bd2:	2804      	cmp	r0, #4
 8009bd4:	bf28      	it	cs
 8009bd6:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009bd8:	2a06      	cmp	r2, #6
 8009bda:	d918      	bls.n	8009c0e <HAL_NVIC_SetPriority+0x5a>
 8009bdc:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009bde:	f04f 32ff 	mov.w	r2, #4294967295
 8009be2:	409a      	lsls	r2, r3
 8009be4:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009be8:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8009bec:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009bee:	fa01 f100 	lsl.w	r1, r1, r0
 8009bf2:	ea24 0401 	bic.w	r4, r4, r1
 8009bf6:	fa04 f403 	lsl.w	r4, r4, r3
 8009bfa:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8009bfe:	db09      	blt.n	8009c14 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c00:	0124      	lsls	r4, r4, #4
 8009c02:	4b0e      	ldr	r3, [pc, #56]	; (8009c3c <HAL_NVIC_SetPriority+0x88>)
 8009c04:	b2e4      	uxtb	r4, r4
 8009c06:	442b      	add	r3, r5
 8009c08:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009c0c:	bd70      	pop	{r4, r5, r6, pc}
 8009c0e:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c10:	4633      	mov	r3, r6
 8009c12:	e7e9      	b.n	8009be8 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c14:	f005 050f 	and.w	r5, r5, #15
 8009c18:	0124      	lsls	r4, r4, #4
 8009c1a:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <HAL_NVIC_SetPriority+0x8c>)
 8009c1c:	b2e4      	uxtb	r4, r4
 8009c1e:	442b      	add	r3, r5
 8009c20:	761c      	strb	r4, [r3, #24]
 8009c22:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009c24:	21aa      	movs	r1, #170	; 0xaa
 8009c26:	4807      	ldr	r0, [pc, #28]	; (8009c44 <HAL_NVIC_SetPriority+0x90>)
 8009c28:	f7fb fe1e 	bl	8005868 <assert_failed>
 8009c2c:	e7ca      	b.n	8009bc4 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009c2e:	21a9      	movs	r1, #169	; 0xa9
 8009c30:	4804      	ldr	r0, [pc, #16]	; (8009c44 <HAL_NVIC_SetPriority+0x90>)
 8009c32:	f7fb fe19 	bl	8005868 <assert_failed>
 8009c36:	e7c3      	b.n	8009bc0 <HAL_NVIC_SetPriority+0xc>
 8009c38:	e000ed00 	.word	0xe000ed00
 8009c3c:	e000e100 	.word	0xe000e100
 8009c40:	e000ecfc 	.word	0xe000ecfc
 8009c44:	0802e0fc 	.word	0x0802e0fc

08009c48 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	db08      	blt.n	8009c5e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c4c:	f000 011f 	and.w	r1, r0, #31
 8009c50:	2301      	movs	r3, #1
 8009c52:	0940      	lsrs	r0, r0, #5
 8009c54:	4a04      	ldr	r2, [pc, #16]	; (8009c68 <HAL_NVIC_EnableIRQ+0x20>)
 8009c56:	408b      	lsls	r3, r1
 8009c58:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009c5c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009c5e:	21bd      	movs	r1, #189	; 0xbd
 8009c60:	4802      	ldr	r0, [pc, #8]	; (8009c6c <HAL_NVIC_EnableIRQ+0x24>)
 8009c62:	f7fb be01 	b.w	8005868 <assert_failed>
 8009c66:	bf00      	nop
 8009c68:	e000e100 	.word	0xe000e100
 8009c6c:	0802e0fc 	.word	0x0802e0fc

08009c70 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009c70:	2800      	cmp	r0, #0
 8009c72:	db0e      	blt.n	8009c92 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c74:	0943      	lsrs	r3, r0, #5
 8009c76:	2201      	movs	r2, #1
 8009c78:	f000 001f 	and.w	r0, r0, #31
 8009c7c:	4907      	ldr	r1, [pc, #28]	; (8009c9c <HAL_NVIC_DisableIRQ+0x2c>)
 8009c7e:	3320      	adds	r3, #32
 8009c80:	fa02 f000 	lsl.w	r0, r2, r0
 8009c84:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009c88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009c8c:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009c90:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009c92:	21cd      	movs	r1, #205	; 0xcd
 8009c94:	4802      	ldr	r0, [pc, #8]	; (8009ca0 <HAL_NVIC_DisableIRQ+0x30>)
 8009c96:	f7fb bde7 	b.w	8005868 <assert_failed>
 8009c9a:	bf00      	nop
 8009c9c:	e000e100 	.word	0xe000e100
 8009ca0:	0802e0fc 	.word	0x0802e0fc

08009ca4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d075      	beq.n	8009d94 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009ca8:	4b3b      	ldr	r3, [pc, #236]	; (8009d98 <HAL_CRC_Init+0xf4>)
 8009caa:	6802      	ldr	r2, [r0, #0]
 8009cac:	429a      	cmp	r2, r3
{
 8009cae:	b510      	push	{r4, lr}
 8009cb0:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009cb2:	d003      	beq.n	8009cbc <HAL_CRC_Init+0x18>
 8009cb4:	2170      	movs	r1, #112	; 0x70
 8009cb6:	4839      	ldr	r0, [pc, #228]	; (8009d9c <HAL_CRC_Init+0xf8>)
 8009cb8:	f7fb fdd6 	bl	8005868 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009cbc:	7f63      	ldrb	r3, [r4, #29]
 8009cbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d055      	beq.n	8009d72 <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009cc6:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009cc8:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009cca:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009ccc:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009cce:	d838      	bhi.n	8009d42 <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d13d      	bne.n	8009d50 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	4a32      	ldr	r2, [pc, #200]	; (8009da0 <HAL_CRC_Init+0xfc>)
 8009cd8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009cda:	689a      	ldr	r2, [r3, #8]
 8009cdc:	f022 0218 	bic.w	r2, r2, #24
 8009ce0:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009ce2:	7963      	ldrb	r3, [r4, #5]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d83c      	bhi.n	8009d62 <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009ce8:	b1e3      	cbz	r3, 8009d24 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009cea:	6922      	ldr	r2, [r4, #16]
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009cf0:	6962      	ldr	r2, [r4, #20]
 8009cf2:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8009cf6:	d11d      	bne.n	8009d34 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009cf8:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009cfa:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009cfc:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8009d00:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d02:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009d06:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d08:	d13d      	bne.n	8009d86 <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d0a:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d0c:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d12:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d14:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d16:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d18:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d1a:	d82f      	bhi.n	8009d7c <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009d1c:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8009d1e:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8009d20:	7763      	strb	r3, [r4, #29]
}
 8009d22:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009d24:	f04f 32ff 	mov.w	r2, #4294967295
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009d2c:	6962      	ldr	r2, [r4, #20]
 8009d2e:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8009d32:	d0e1      	beq.n	8009cf8 <HAL_CRC_Init+0x54>
 8009d34:	219c      	movs	r1, #156	; 0x9c
 8009d36:	4819      	ldr	r0, [pc, #100]	; (8009d9c <HAL_CRC_Init+0xf8>)
 8009d38:	f7fb fd96 	bl	8005868 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009d3c:	6962      	ldr	r2, [r4, #20]
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	e7da      	b.n	8009cf8 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009d42:	217e      	movs	r1, #126	; 0x7e
 8009d44:	4815      	ldr	r0, [pc, #84]	; (8009d9c <HAL_CRC_Init+0xf8>)
 8009d46:	f7fb fd8f 	bl	8005868 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009d4a:	7923      	ldrb	r3, [r4, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0c1      	beq.n	8009cd4 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009d50:	4620      	mov	r0, r4
 8009d52:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009d56:	f000 f825 	bl	8009da4 <HAL_CRCEx_Polynomial_Set>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d0c1      	beq.n	8009ce2 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8009d5e:	2001      	movs	r0, #1
}
 8009d60:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009d62:	2190      	movs	r1, #144	; 0x90
 8009d64:	480d      	ldr	r0, [pc, #52]	; (8009d9c <HAL_CRC_Init+0xf8>)
 8009d66:	f7fb fd7f 	bl	8005868 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009d6a:	7963      	ldrb	r3, [r4, #5]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1bc      	bne.n	8009cea <HAL_CRC_Init+0x46>
 8009d70:	e7d8      	b.n	8009d24 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8009d72:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8009d74:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8009d76:	f7fd fb8f 	bl	8007498 <HAL_CRC_MspInit>
 8009d7a:	e7a4      	b.n	8009cc6 <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d7c:	21a5      	movs	r1, #165	; 0xa5
 8009d7e:	4807      	ldr	r0, [pc, #28]	; (8009d9c <HAL_CRC_Init+0xf8>)
 8009d80:	f7fb fd72 	bl	8005868 <assert_failed>
 8009d84:	e7ca      	b.n	8009d1c <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d86:	4805      	ldr	r0, [pc, #20]	; (8009d9c <HAL_CRC_Init+0xf8>)
 8009d88:	21a0      	movs	r1, #160	; 0xa0
 8009d8a:	f7fb fd6d 	bl	8005868 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	69a0      	ldr	r0, [r4, #24]
 8009d92:	e7ba      	b.n	8009d0a <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8009d94:	2001      	movs	r0, #1
}
 8009d96:	4770      	bx	lr
 8009d98:	40023000 	.word	0x40023000
 8009d9c:	0802e138 	.word	0x0802e138
 8009da0:	04c11db7 	.word	0x04c11db7

08009da4 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009da4:	f032 0318 	bics.w	r3, r2, #24
{
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	4616      	mov	r6, r2
 8009dac:	4605      	mov	r5, r0
 8009dae:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009db0:	d003      	beq.n	8009dba <HAL_CRCEx_Polynomial_Set+0x16>
 8009db2:	215f      	movs	r1, #95	; 0x5f
 8009db4:	4818      	ldr	r0, [pc, #96]	; (8009e18 <HAL_CRCEx_Polynomial_Set+0x74>)
 8009db6:	f7fb fd57 	bl	8005868 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009dba:	231e      	movs	r3, #30
 8009dbc:	e001      	b.n	8009dc2 <HAL_CRCEx_Polynomial_Set+0x1e>
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	d315      	bcc.n	8009dee <HAL_CRCEx_Polynomial_Set+0x4a>
 8009dc2:	fa24 fc03 	lsr.w	ip, r4, r3
 8009dc6:	f01c 0f01 	tst.w	ip, #1
 8009dca:	d0f8      	beq.n	8009dbe <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8009dcc:	2e18      	cmp	r6, #24
 8009dce:	d80f      	bhi.n	8009df0 <HAL_CRCEx_Polynomial_Set+0x4c>
 8009dd0:	e8df f006 	tbb	[pc, r6]
 8009dd4:	0e0e0e12 	.word	0x0e0e0e12
 8009dd8:	0e0e0e0e 	.word	0x0e0e0e0e
 8009ddc:	0e0e0e1b 	.word	0x0e0e0e1b
 8009de0:	0e0e0e0e 	.word	0x0e0e0e0e
 8009de4:	0e0e0e1e 	.word	0x0e0e0e1e
 8009de8:	0e0e0e0e 	.word	0x0e0e0e0e
 8009dec:	10          	.byte	0x10
 8009ded:	00          	.byte	0x00
 8009dee:	b11e      	cbz	r6, 8009df8 <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8009df0:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8009df2:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8009df4:	2b06      	cmp	r3, #6
 8009df6:	d8fb      	bhi.n	8009df0 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009df8:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009dfa:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009dfc:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009dfe:	688b      	ldr	r3, [r1, #8]
 8009e00:	f023 0318 	bic.w	r3, r3, #24
 8009e04:	4333      	orrs	r3, r6
 8009e06:	608b      	str	r3, [r1, #8]
}
 8009e08:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8009e0a:	2b0f      	cmp	r3, #15
 8009e0c:	d9f4      	bls.n	8009df8 <HAL_CRCEx_Polynomial_Set+0x54>
 8009e0e:	e7ef      	b.n	8009df0 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 8009e10:	2b07      	cmp	r3, #7
 8009e12:	d9f1      	bls.n	8009df8 <HAL_CRCEx_Polynomial_Set+0x54>
 8009e14:	e7ec      	b.n	8009df0 <HAL_CRCEx_Polynomial_Set+0x4c>
 8009e16:	bf00      	nop
 8009e18:	0802e170 	.word	0x0802e170

08009e1c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8009e1c:	b1d8      	cbz	r0, 8009e56 <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009e1e:	4b0f      	ldr	r3, [pc, #60]	; (8009e5c <HAL_DAC_Init+0x40>)
 8009e20:	6802      	ldr	r2, [r0, #0]
 8009e22:	429a      	cmp	r2, r3
{
 8009e24:	b510      	push	{r4, lr}
 8009e26:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009e28:	d004      	beq.n	8009e34 <HAL_DAC_Init+0x18>
 8009e2a:	f240 1115 	movw	r1, #277	; 0x115
 8009e2e:	480c      	ldr	r0, [pc, #48]	; (8009e60 <HAL_DAC_Init+0x44>)
 8009e30:	f7fb fd1a 	bl	8005868 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009e34:	7923      	ldrb	r3, [r4, #4]
 8009e36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009e3a:	b13b      	cbz	r3, 8009e4c <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009e3c:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e3e:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009e40:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e42:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8009e44:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009e46:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8009e48:	7122      	strb	r2, [r4, #4]
}
 8009e4a:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8009e4c:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8009e4e:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8009e50:	f7fd fb38 	bl	80074c4 <HAL_DAC_MspInit>
 8009e54:	e7f2      	b.n	8009e3c <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 8009e56:	2001      	movs	r0, #1
}
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	40007400 	.word	0x40007400
 8009e60:	0802e1ac 	.word	0x0802e1ac

08009e64 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e68:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8009e6a:	f031 0310 	bics.w	r3, r1, #16
{
 8009e6e:	460d      	mov	r5, r1
 8009e70:	4604      	mov	r4, r0
 8009e72:	4617      	mov	r7, r2
 8009e74:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 8009e76:	d16b      	bne.n	8009f50 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8009e78:	f036 0304 	bics.w	r3, r6, #4
 8009e7c:	d001      	beq.n	8009e82 <HAL_DAC_Start_DMA+0x1e>
 8009e7e:	2e08      	cmp	r6, #8
 8009e80:	d15b      	bne.n	8009f3a <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 8009e82:	7962      	ldrb	r2, [r4, #5]
 8009e84:	2a01      	cmp	r2, #1
 8009e86:	d060      	beq.n	8009f4a <HAL_DAC_Start_DMA+0xe6>
 8009e88:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009e8a:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 8009e8e:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e90:	2302      	movs	r3, #2
 8009e92:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8009e94:	bb35      	cbnz	r5, 8009ee4 <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009e96:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009e98:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009e9a:	4b39      	ldr	r3, [pc, #228]	; (8009f80 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009e9c:	4a39      	ldr	r2, [pc, #228]	; (8009f84 <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009e9e:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009ea0:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009ea4:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009ea6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009eaa:	4a37      	ldr	r2, [pc, #220]	; (8009f88 <HAL_DAC_Start_DMA+0x124>)
 8009eac:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009eae:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8009eb2:	d059      	beq.n	8009f68 <HAL_DAC_Start_DMA+0x104>
 8009eb4:	2e08      	cmp	r6, #8
 8009eb6:	d054      	beq.n	8009f62 <HAL_DAC_Start_DMA+0xfe>
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	d04f      	beq.n	8009f5c <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009ebc:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009ebe:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009ec2:	4643      	mov	r3, r8
 8009ec4:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009ec6:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8009eca:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009ece:	f000 fbe3 	bl	800a698 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8009ed6:	b330      	cbz	r0, 8009f26 <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009ed8:	6923      	ldr	r3, [r4, #16]
 8009eda:	f043 0304 	orr.w	r3, r3, #4
 8009ede:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8009ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009ee4:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8009ee6:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009ee8:	4b28      	ldr	r3, [pc, #160]	; (8009f8c <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009eea:	4a29      	ldr	r2, [pc, #164]	; (8009f90 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009eec:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009eee:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009ef2:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009ef8:	4a26      	ldr	r2, [pc, #152]	; (8009f94 <HAL_DAC_Start_DMA+0x130>)
 8009efa:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009efc:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8009f00:	d03b      	beq.n	8009f7a <HAL_DAC_Start_DMA+0x116>
 8009f02:	2e08      	cmp	r6, #8
 8009f04:	d036      	beq.n	8009f74 <HAL_DAC_Start_DMA+0x110>
 8009f06:	b396      	cbz	r6, 8009f6e <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f08:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f0a:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f0e:	4643      	mov	r3, r8
 8009f10:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f12:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8009f16:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f1a:	f000 fbbd 	bl	800a698 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8009f1e:	2300      	movs	r3, #0
 8009f20:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d1d8      	bne.n	8009ed8 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	f005 0110 	and.w	r1, r5, #16
 8009f2c:	2501      	movs	r5, #1
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	408d      	lsls	r5, r1
 8009f32:	4315      	orrs	r5, r2
 8009f34:	601d      	str	r5, [r3, #0]
}
 8009f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8009f3a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8009f3e:	4816      	ldr	r0, [pc, #88]	; (8009f98 <HAL_DAC_Start_DMA+0x134>)
 8009f40:	f7fb fc92 	bl	8005868 <assert_failed>
  __HAL_LOCK(hdac);
 8009f44:	7962      	ldrb	r2, [r4, #5]
 8009f46:	2a01      	cmp	r2, #1
 8009f48:	d19e      	bne.n	8009e88 <HAL_DAC_Start_DMA+0x24>
 8009f4a:	2002      	movs	r0, #2
}
 8009f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8009f50:	f240 210f 	movw	r1, #527	; 0x20f
 8009f54:	4810      	ldr	r0, [pc, #64]	; (8009f98 <HAL_DAC_Start_DMA+0x134>)
 8009f56:	f7fb fc87 	bl	8005868 <assert_failed>
 8009f5a:	e78d      	b.n	8009e78 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009f5c:	f10c 0208 	add.w	r2, ip, #8
        break;
 8009f60:	e7ad      	b.n	8009ebe <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009f62:	f10c 0210 	add.w	r2, ip, #16
        break;
 8009f66:	e7aa      	b.n	8009ebe <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009f68:	f10c 020c 	add.w	r2, ip, #12
        break;
 8009f6c:	e7a7      	b.n	8009ebe <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009f6e:	f10c 0214 	add.w	r2, ip, #20
        break;
 8009f72:	e7ca      	b.n	8009f0a <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009f74:	f10c 021c 	add.w	r2, ip, #28
        break;
 8009f78:	e7c7      	b.n	8009f0a <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009f7a:	f10c 0218 	add.w	r2, ip, #24
        break;
 8009f7e:	e7c4      	b.n	8009f0a <HAL_DAC_Start_DMA+0xa6>
 8009f80:	0800a02d 	.word	0x0800a02d
 8009f84:	0800a041 	.word	0x0800a041
 8009f88:	0800a051 	.word	0x0800a051
 8009f8c:	0800a1a5 	.word	0x0800a1a5
 8009f90:	0800a1b5 	.word	0x0800a1b5
 8009f94:	0800a1c1 	.word	0x0800a1c1
 8009f98:	0802e1ac 	.word	0x0802e1ac

08009f9c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009f9c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8009f9e:	f031 0310 	bics.w	r3, r1, #16
{
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 8009fa6:	d11e      	bne.n	8009fe6 <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009fa8:	6803      	ldr	r3, [r0, #0]
 8009faa:	f001 0e10 	and.w	lr, r1, #16
 8009fae:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009fb2:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 8009fba:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009fbe:	ea20 000c 	bic.w	r0, r0, ip
 8009fc2:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	ea22 0201 	bic.w	r2, r2, r1
 8009fca:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009fcc:	bb05      	cbnz	r5, 800a010 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8009fce:	68a0      	ldr	r0, [r4, #8]
 8009fd0:	f000 fbbe 	bl	800a750 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009fd4:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8009fd6:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009fd8:	6813      	ldr	r3, [r2, #0]
 8009fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fde:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	7123      	strb	r3, [r4, #4]
}
 8009fe4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8009fe6:	f240 218f 	movw	r1, #655	; 0x28f
 8009fea:	480f      	ldr	r0, [pc, #60]	; (800a028 <HAL_DAC_Stop_DMA+0x8c>)
 8009fec:	f7fb fc3c 	bl	8005868 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009ff0:	f005 0510 	and.w	r5, r5, #16
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 8009ffa:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 800a000:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a002:	ea22 0200 	bic.w	r2, r2, r0
 800a006:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800a008:	681d      	ldr	r5, [r3, #0]
 800a00a:	ea25 0501 	bic.w	r5, r5, r1
 800a00e:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800a010:	68e0      	ldr	r0, [r4, #12]
 800a012:	f000 fb9d 	bl	800a750 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a016:	6822      	ldr	r2, [r4, #0]
}
 800a018:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a01a:	6813      	ldr	r3, [r2, #0]
 800a01c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a020:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800a022:	2301      	movs	r3, #1
 800a024:	7123      	strb	r3, [r4, #4]
}
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	0802e1ac 	.word	0x0802e1ac

0800a02c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a02c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a02e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a030:	4620      	mov	r0, r4
 800a032:	f7fa fab3 	bl	800459c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a036:	2301      	movs	r3, #1
 800a038:	7123      	strb	r3, [r4, #4]
}
 800a03a:	bd10      	pop	{r4, pc}

0800a03c <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop

0800a040 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a040:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a042:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a044:	f7ff fffa 	bl	800a03c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a048:	bd08      	pop	{r3, pc}
 800a04a:	bf00      	nop

0800a04c <HAL_DAC_ErrorCallbackCh1>:
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop

0800a050 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a050:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a052:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a054:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a056:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a058:	f043 0304 	orr.w	r3, r3, #4
 800a05c:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a05e:	f7ff fff5 	bl	800a04c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a062:	2301      	movs	r3, #1
 800a064:	7123      	strb	r3, [r4, #4]
}
 800a066:	bd10      	pop	{r4, pc}

0800a068 <HAL_DAC_DMAUnderrunCallbackCh1>:
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop

0800a06c <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800a06c:	6803      	ldr	r3, [r0, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	0491      	lsls	r1, r2, #18
{
 800a072:	b510      	push	{r4, lr}
 800a074:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800a076:	d502      	bpl.n	800a07e <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800a078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a07a:	0492      	lsls	r2, r2, #18
 800a07c:	d418      	bmi.n	800a0b0 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	0091      	lsls	r1, r2, #2
 800a082:	d502      	bpl.n	800a08a <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800a084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a086:	0092      	lsls	r2, r2, #2
 800a088:	d400      	bmi.n	800a08c <HAL_DAC_IRQHandler+0x20>
}
 800a08a:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 800a08c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800a08e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800a092:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800a094:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800a096:	6922      	ldr	r2, [r4, #16]
 800a098:	f042 0202 	orr.w	r2, r2, #2
 800a09c:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800a09e:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800a0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a0aa:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800a0ac:	f000 b878 	b.w	800a1a0 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 800a0b0:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800a0b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800a0b6:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800a0b8:	6902      	ldr	r2, [r0, #16]
 800a0ba:	f042 0201 	orr.w	r2, r2, #1
 800a0be:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800a0c0:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a0c8:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800a0ca:	f7ff ffcd 	bl	800a068 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	e7d5      	b.n	800a07e <HAL_DAC_IRQHandler+0x12>
 800a0d2:	bf00      	nop

0800a0d4 <HAL_DAC_ConfigChannel>:
{
 800a0d4:	b570      	push	{r4, r5, r6, lr}
 800a0d6:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800a0d8:	6808      	ldr	r0, [r1, #0]
{
 800a0da:	4616      	mov	r6, r2
 800a0dc:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800a0de:	f020 0308 	bic.w	r3, r0, #8
 800a0e2:	f020 0204 	bic.w	r2, r0, #4
 800a0e6:	2b24      	cmp	r3, #36	; 0x24
 800a0e8:	bf18      	it	ne
 800a0ea:	2a00      	cmpne	r2, #0
 800a0ec:	f020 0210 	bic.w	r2, r0, #16
 800a0f0:	bf14      	ite	ne
 800a0f2:	2301      	movne	r3, #1
 800a0f4:	2300      	moveq	r3, #0
 800a0f6:	283c      	cmp	r0, #60	; 0x3c
 800a0f8:	bf0c      	ite	eq
 800a0fa:	2300      	moveq	r3, #0
 800a0fc:	f003 0301 	andne.w	r3, r3, #1
 800a100:	2a0c      	cmp	r2, #12
 800a102:	bf0c      	ite	eq
 800a104:	2300      	moveq	r3, #0
 800a106:	f003 0301 	andne.w	r3, r3, #1
 800a10a:	b11b      	cbz	r3, 800a114 <HAL_DAC_ConfigChannel+0x40>
 800a10c:	f020 0020 	bic.w	r0, r0, #32
 800a110:	2814      	cmp	r0, #20
 800a112:	d137      	bne.n	800a184 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800a114:	686b      	ldr	r3, [r5, #4]
 800a116:	f033 0302 	bics.w	r3, r3, #2
 800a11a:	d12d      	bne.n	800a178 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 800a11c:	f036 0310 	bics.w	r3, r6, #16
 800a120:	d120      	bne.n	800a164 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 800a122:	7963      	ldrb	r3, [r4, #5]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d025      	beq.n	800a174 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a128:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 800a12c:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a12e:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 800a132:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800a134:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a136:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800a13a:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 800a13e:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800a140:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 800a142:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a144:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a146:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 800a14a:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a14c:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a14e:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 800a150:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a152:	4082      	lsls	r2, r0
 800a154:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 800a156:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a158:	ea23 0302 	bic.w	r3, r3, r2
 800a15c:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800a15e:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 800a160:	7165      	strb	r5, [r4, #5]
}
 800a162:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800a164:	f240 31a6 	movw	r1, #934	; 0x3a6
 800a168:	4809      	ldr	r0, [pc, #36]	; (800a190 <HAL_DAC_ConfigChannel+0xbc>)
 800a16a:	f7fb fb7d 	bl	8005868 <assert_failed>
  __HAL_LOCK(hdac);
 800a16e:	7963      	ldrb	r3, [r4, #5]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d1d9      	bne.n	800a128 <HAL_DAC_ConfigChannel+0x54>
 800a174:	2002      	movs	r0, #2
}
 800a176:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800a178:	f240 31a5 	movw	r1, #933	; 0x3a5
 800a17c:	4804      	ldr	r0, [pc, #16]	; (800a190 <HAL_DAC_ConfigChannel+0xbc>)
 800a17e:	f7fb fb73 	bl	8005868 <assert_failed>
 800a182:	e7cb      	b.n	800a11c <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800a184:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800a188:	4801      	ldr	r0, [pc, #4]	; (800a190 <HAL_DAC_ConfigChannel+0xbc>)
 800a18a:	f7fb fb6d 	bl	8005868 <assert_failed>
 800a18e:	e7c1      	b.n	800a114 <HAL_DAC_ConfigChannel+0x40>
 800a190:	0802e1ac 	.word	0x0802e1ac

0800a194 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop

0800a198 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop

0800a19c <HAL_DACEx_ErrorCallbackCh2>:
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop

0800a1a0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop

0800a1a4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a1a4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1a6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7ff fff3 	bl	800a194 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	7123      	strb	r3, [r4, #4]
}
 800a1b2:	bd10      	pop	{r4, pc}

0800a1b4 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a1b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a1b6:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a1b8:	f7ff ffee 	bl	800a198 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a1bc:	bd08      	pop	{r3, pc}
 800a1be:	bf00      	nop

0800a1c0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a1c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1c2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a1c4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a1c6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a1c8:	f043 0304 	orr.w	r3, r3, #4
 800a1cc:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a1ce:	f7ff ffe5 	bl	800a19c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	7123      	strb	r3, [r4, #4]
}
 800a1d6:	bd10      	pop	{r4, pc}

0800a1d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800a1dc:	f7ff f892 	bl	8009304 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a1e0:	2c00      	cmp	r4, #0
 800a1e2:	f000 8156 	beq.w	800a492 <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a1e6:	6822      	ldr	r2, [r4, #0]
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	4bad      	ldr	r3, [pc, #692]	; (800a4a0 <HAL_DMA_Init+0x2c8>)
 800a1ec:	49ad      	ldr	r1, [pc, #692]	; (800a4a4 <HAL_DMA_Init+0x2cc>)
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	bf18      	it	ne
 800a1f2:	428a      	cmpne	r2, r1
 800a1f4:	f101 0118 	add.w	r1, r1, #24
 800a1f8:	bf14      	ite	ne
 800a1fa:	2301      	movne	r3, #1
 800a1fc:	2300      	moveq	r3, #0
 800a1fe:	428a      	cmp	r2, r1
 800a200:	bf0c      	ite	eq
 800a202:	2300      	moveq	r3, #0
 800a204:	f003 0301 	andne.w	r3, r3, #1
 800a208:	3118      	adds	r1, #24
 800a20a:	428a      	cmp	r2, r1
 800a20c:	bf0c      	ite	eq
 800a20e:	2300      	moveq	r3, #0
 800a210:	f003 0301 	andne.w	r3, r3, #1
 800a214:	3118      	adds	r1, #24
 800a216:	428a      	cmp	r2, r1
 800a218:	bf0c      	ite	eq
 800a21a:	2300      	moveq	r3, #0
 800a21c:	f003 0301 	andne.w	r3, r3, #1
 800a220:	3118      	adds	r1, #24
 800a222:	428a      	cmp	r2, r1
 800a224:	bf0c      	ite	eq
 800a226:	2300      	moveq	r3, #0
 800a228:	f003 0301 	andne.w	r3, r3, #1
 800a22c:	3118      	adds	r1, #24
 800a22e:	428a      	cmp	r2, r1
 800a230:	bf0c      	ite	eq
 800a232:	2300      	moveq	r3, #0
 800a234:	f003 0301 	andne.w	r3, r3, #1
 800a238:	3118      	adds	r1, #24
 800a23a:	428a      	cmp	r2, r1
 800a23c:	bf0c      	ite	eq
 800a23e:	2300      	moveq	r3, #0
 800a240:	f003 0301 	andne.w	r3, r3, #1
 800a244:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800a248:	428a      	cmp	r2, r1
 800a24a:	bf0c      	ite	eq
 800a24c:	2300      	moveq	r3, #0
 800a24e:	f003 0301 	andne.w	r3, r3, #1
 800a252:	3118      	adds	r1, #24
 800a254:	428a      	cmp	r2, r1
 800a256:	bf0c      	ite	eq
 800a258:	2300      	moveq	r3, #0
 800a25a:	f003 0301 	andne.w	r3, r3, #1
 800a25e:	3118      	adds	r1, #24
 800a260:	428a      	cmp	r2, r1
 800a262:	bf0c      	ite	eq
 800a264:	2300      	moveq	r3, #0
 800a266:	f003 0301 	andne.w	r3, r3, #1
 800a26a:	3118      	adds	r1, #24
 800a26c:	428a      	cmp	r2, r1
 800a26e:	bf0c      	ite	eq
 800a270:	2300      	moveq	r3, #0
 800a272:	f003 0301 	andne.w	r3, r3, #1
 800a276:	3118      	adds	r1, #24
 800a278:	428a      	cmp	r2, r1
 800a27a:	bf0c      	ite	eq
 800a27c:	2300      	moveq	r3, #0
 800a27e:	f003 0301 	andne.w	r3, r3, #1
 800a282:	3118      	adds	r1, #24
 800a284:	428a      	cmp	r2, r1
 800a286:	bf0c      	ite	eq
 800a288:	2300      	moveq	r3, #0
 800a28a:	f003 0301 	andne.w	r3, r3, #1
 800a28e:	3118      	adds	r1, #24
 800a290:	428a      	cmp	r2, r1
 800a292:	bf0c      	ite	eq
 800a294:	2300      	moveq	r3, #0
 800a296:	f003 0301 	andne.w	r3, r3, #1
 800a29a:	b11b      	cbz	r3, 800a2a4 <HAL_DMA_Init+0xcc>
 800a29c:	4b82      	ldr	r3, [pc, #520]	; (800a4a8 <HAL_DMA_Init+0x2d0>)
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	f040 8139 	bne.w	800a516 <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800a2a4:	6863      	ldr	r3, [r4, #4]
 800a2a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a2aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2ae:	bf18      	it	ne
 800a2b0:	2b00      	cmpne	r3, #0
 800a2b2:	bf14      	ite	ne
 800a2b4:	2201      	movne	r2, #1
 800a2b6:	2200      	moveq	r2, #0
 800a2b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2bc:	bf0c      	ite	eq
 800a2be:	2200      	moveq	r2, #0
 800a2c0:	f002 0201 	andne.w	r2, r2, #1
 800a2c4:	b11a      	cbz	r2, 800a2ce <HAL_DMA_Init+0xf6>
 800a2c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a2ca:	f040 8129 	bne.w	800a520 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800a2ce:	68a3      	ldr	r3, [r4, #8]
 800a2d0:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800a2d4:	d002      	beq.n	800a2dc <HAL_DMA_Init+0x104>
 800a2d6:	2b80      	cmp	r3, #128	; 0x80
 800a2d8:	f040 80a8 	bne.w	800a42c <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800a2dc:	68e3      	ldr	r3, [r4, #12]
 800a2de:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a2e2:	f040 80ac 	bne.w	800a43e <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800a2e6:	6923      	ldr	r3, [r4, #16]
 800a2e8:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a2ec:	f040 80b0 	bne.w	800a450 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800a2f0:	6963      	ldr	r3, [r4, #20]
 800a2f2:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a2f6:	d003      	beq.n	800a300 <HAL_DMA_Init+0x128>
 800a2f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fc:	f040 8091 	bne.w	800a422 <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800a300:	69a3      	ldr	r3, [r4, #24]
 800a302:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800a306:	d003      	beq.n	800a310 <HAL_DMA_Init+0x138>
 800a308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a30c:	f040 8084 	bne.w	800a418 <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800a310:	69e3      	ldr	r3, [r4, #28]
 800a312:	f033 0220 	bics.w	r2, r3, #32
 800a316:	d002      	beq.n	800a31e <HAL_DMA_Init+0x146>
 800a318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a31c:	d16f      	bne.n	800a3fe <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800a31e:	6a23      	ldr	r3, [r4, #32]
 800a320:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a324:	d173      	bne.n	800a40e <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800a326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a328:	f033 0204 	bics.w	r2, r3, #4
 800a32c:	d15f      	bne.n	800a3ee <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d14d      	bne.n	800a3ce <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a332:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800a334:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800a336:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 800a338:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800a33c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	f022 0201 	bic.w	r2, r2, #1
 800a346:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a348:	e006      	b.n	800a358 <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a34a:	f7fe ffdb 	bl	8009304 <HAL_GetTick>
 800a34e:	1b40      	subs	r0, r0, r5
 800a350:	2805      	cmp	r0, #5
 800a352:	f200 8082 	bhi.w	800a45a <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	07d1      	lsls	r1, r2, #31
 800a35c:	d4f5      	bmi.n	800a34a <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a35e:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 800a362:	68e1      	ldr	r1, [r4, #12]
 800a364:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a366:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 800a368:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a36a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a36c:	6921      	ldr	r1, [r4, #16]
 800a36e:	430a      	orrs	r2, r1
 800a370:	6961      	ldr	r1, [r4, #20]
 800a372:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a374:	69e1      	ldr	r1, [r4, #28]
 800a376:	4302      	orrs	r2, r0
 800a378:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a37a:	494c      	ldr	r1, [pc, #304]	; (800a4ac <HAL_DMA_Init+0x2d4>)
 800a37c:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800a37e:	6a25      	ldr	r5, [r4, #32]
 800a380:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a382:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a384:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a386:	2904      	cmp	r1, #4
 800a388:	d06e      	beq.n	800a468 <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a38a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a38c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a38e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a392:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a394:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 800a396:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a398:	4945      	ldr	r1, [pc, #276]	; (800a4b0 <HAL_DMA_Init+0x2d8>)
 800a39a:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a39c:	4845      	ldr	r0, [pc, #276]	; (800a4b4 <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a39e:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 800a3a2:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a3a4:	4a44      	ldr	r2, [pc, #272]	; (800a4b8 <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a3a6:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a3aa:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3ae:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a3b2:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3b4:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a3b8:	bf88      	it	hi
 800a3ba:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3bc:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a3be:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a3c0:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3c2:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800a3c4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3c6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800a3c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a3cc:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800a3ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d860      	bhi.n	800a496 <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800a3d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a3d6:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800a3da:	d171      	bne.n	800a4c0 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800a3dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a3de:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800a3e2:	d0a6      	beq.n	800a332 <HAL_DMA_Init+0x15a>
 800a3e4:	21c8      	movs	r1, #200	; 0xc8
 800a3e6:	4835      	ldr	r0, [pc, #212]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a3e8:	f7fb fa3e 	bl	8005868 <assert_failed>
 800a3ec:	e7a1      	b.n	800a332 <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800a3ee:	21c1      	movs	r1, #193	; 0xc1
 800a3f0:	4832      	ldr	r0, [pc, #200]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a3f2:	f7fb fa39 	bl	8005868 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800a3f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d09a      	beq.n	800a332 <HAL_DMA_Init+0x15a>
 800a3fc:	e7e7      	b.n	800a3ce <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800a3fe:	21bf      	movs	r1, #191	; 0xbf
 800a400:	482e      	ldr	r0, [pc, #184]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a402:	f7fb fa31 	bl	8005868 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800a406:	6a23      	ldr	r3, [r4, #32]
 800a408:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a40c:	d08b      	beq.n	800a326 <HAL_DMA_Init+0x14e>
 800a40e:	21c0      	movs	r1, #192	; 0xc0
 800a410:	482a      	ldr	r0, [pc, #168]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a412:	f7fb fa29 	bl	8005868 <assert_failed>
 800a416:	e786      	b.n	800a326 <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800a418:	21be      	movs	r1, #190	; 0xbe
 800a41a:	4828      	ldr	r0, [pc, #160]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a41c:	f7fb fa24 	bl	8005868 <assert_failed>
 800a420:	e776      	b.n	800a310 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800a422:	21bd      	movs	r1, #189	; 0xbd
 800a424:	4825      	ldr	r0, [pc, #148]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a426:	f7fb fa1f 	bl	8005868 <assert_failed>
 800a42a:	e769      	b.n	800a300 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800a42c:	21ba      	movs	r1, #186	; 0xba
 800a42e:	4823      	ldr	r0, [pc, #140]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a430:	f7fb fa1a 	bl	8005868 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800a434:	68e3      	ldr	r3, [r4, #12]
 800a436:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a43a:	f43f af54 	beq.w	800a2e6 <HAL_DMA_Init+0x10e>
 800a43e:	21bb      	movs	r1, #187	; 0xbb
 800a440:	481e      	ldr	r0, [pc, #120]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a442:	f7fb fa11 	bl	8005868 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800a446:	6923      	ldr	r3, [r4, #16]
 800a448:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a44c:	f43f af50 	beq.w	800a2f0 <HAL_DMA_Init+0x118>
 800a450:	21bc      	movs	r1, #188	; 0xbc
 800a452:	481a      	ldr	r0, [pc, #104]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a454:	f7fb fa08 	bl	8005868 <assert_failed>
 800a458:	e74a      	b.n	800a2f0 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a45c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800a45e:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a460:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a462:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a466:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a468:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 800a46c:	4329      	orrs	r1, r5
 800a46e:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800a470:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800a472:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800a474:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a476:	f021 0107 	bic.w	r1, r1, #7
 800a47a:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800a47c:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a480:	2d00      	cmp	r5, #0
 800a482:	d087      	beq.n	800a394 <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a484:	bb08      	cbnz	r0, 800a4ca <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 800a486:	2a01      	cmp	r2, #1
 800a488:	d040      	beq.n	800a50c <HAL_DMA_Init+0x334>
 800a48a:	f032 0202 	bics.w	r2, r2, #2
 800a48e:	d181      	bne.n	800a394 <HAL_DMA_Init+0x1bc>
 800a490:	e023      	b.n	800a4da <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 800a492:	2001      	movs	r0, #1
}
 800a494:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800a496:	21c6      	movs	r1, #198	; 0xc6
 800a498:	4808      	ldr	r0, [pc, #32]	; (800a4bc <HAL_DMA_Init+0x2e4>)
 800a49a:	f7fb f9e5 	bl	8005868 <assert_failed>
 800a49e:	e799      	b.n	800a3d4 <HAL_DMA_Init+0x1fc>
 800a4a0:	40026010 	.word	0x40026010
 800a4a4:	40026028 	.word	0x40026028
 800a4a8:	400264b8 	.word	0x400264b8
 800a4ac:	e010803f 	.word	0xe010803f
 800a4b0:	aaaaaaab 	.word	0xaaaaaaab
 800a4b4:	0802e21c 	.word	0x0802e21c
 800a4b8:	fffffc00 	.word	0xfffffc00
 800a4bc:	0802e1e4 	.word	0x0802e1e4
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800a4c0:	21c7      	movs	r1, #199	; 0xc7
 800a4c2:	481a      	ldr	r0, [pc, #104]	; (800a52c <HAL_DMA_Init+0x354>)
 800a4c4:	f7fb f9d0 	bl	8005868 <assert_failed>
 800a4c8:	e788      	b.n	800a3dc <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a4ca:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800a4ce:	d00e      	beq.n	800a4ee <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a4d0:	2a02      	cmp	r2, #2
 800a4d2:	d905      	bls.n	800a4e0 <HAL_DMA_Init+0x308>
 800a4d4:	2a03      	cmp	r2, #3
 800a4d6:	f47f af5d 	bne.w	800a394 <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4da:	01ea      	lsls	r2, r5, #7
 800a4dc:	f57f af5a 	bpl.w	800a394 <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 800a4e0:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4e2:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800a4e4:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4e6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800a4e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a4ec:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800a4ee:	2a03      	cmp	r2, #3
 800a4f0:	f63f af50 	bhi.w	800a394 <HAL_DMA_Init+0x1bc>
 800a4f4:	a001      	add	r0, pc, #4	; (adr r0, 800a4fc <HAL_DMA_Init+0x324>)
 800a4f6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800a4fa:	bf00      	nop
 800a4fc:	0800a4e1 	.word	0x0800a4e1
 800a500:	0800a4db 	.word	0x0800a4db
 800a504:	0800a4e1 	.word	0x0800a4e1
 800a508:	0800a50d 	.word	0x0800a50d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a50c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800a510:	f47f af40 	bne.w	800a394 <HAL_DMA_Init+0x1bc>
 800a514:	e7e4      	b.n	800a4e0 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a516:	21b8      	movs	r1, #184	; 0xb8
 800a518:	4804      	ldr	r0, [pc, #16]	; (800a52c <HAL_DMA_Init+0x354>)
 800a51a:	f7fb f9a5 	bl	8005868 <assert_failed>
 800a51e:	e6c1      	b.n	800a2a4 <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800a520:	21b9      	movs	r1, #185	; 0xb9
 800a522:	4802      	ldr	r0, [pc, #8]	; (800a52c <HAL_DMA_Init+0x354>)
 800a524:	f7fb f9a0 	bl	8005868 <assert_failed>
 800a528:	e6d1      	b.n	800a2ce <HAL_DMA_Init+0xf6>
 800a52a:	bf00      	nop
 800a52c:	0802e1e4 	.word	0x0802e1e4

0800a530 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800a530:	2800      	cmp	r0, #0
 800a532:	f000 8097 	beq.w	800a664 <HAL_DMA_DeInit+0x134>
{
 800a536:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800a538:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a53c:	4604      	mov	r4, r0
 800a53e:	2b02      	cmp	r3, #2
 800a540:	b2d8      	uxtb	r0, r3
 800a542:	f000 808e 	beq.w	800a662 <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a546:	6822      	ldr	r2, [r4, #0]
 800a548:	4b4b      	ldr	r3, [pc, #300]	; (800a678 <HAL_DMA_DeInit+0x148>)
 800a54a:	484c      	ldr	r0, [pc, #304]	; (800a67c <HAL_DMA_DeInit+0x14c>)
 800a54c:	494c      	ldr	r1, [pc, #304]	; (800a680 <HAL_DMA_DeInit+0x150>)
 800a54e:	429a      	cmp	r2, r3
 800a550:	bf18      	it	ne
 800a552:	4282      	cmpne	r2, r0
 800a554:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800a558:	bf14      	ite	ne
 800a55a:	2301      	movne	r3, #1
 800a55c:	2300      	moveq	r3, #0
 800a55e:	428a      	cmp	r2, r1
 800a560:	bf0c      	ite	eq
 800a562:	2300      	moveq	r3, #0
 800a564:	f003 0301 	andne.w	r3, r3, #1
 800a568:	3130      	adds	r1, #48	; 0x30
 800a56a:	4282      	cmp	r2, r0
 800a56c:	bf0c      	ite	eq
 800a56e:	2300      	moveq	r3, #0
 800a570:	f003 0301 	andne.w	r3, r3, #1
 800a574:	3030      	adds	r0, #48	; 0x30
 800a576:	428a      	cmp	r2, r1
 800a578:	bf0c      	ite	eq
 800a57a:	2300      	moveq	r3, #0
 800a57c:	f003 0301 	andne.w	r3, r3, #1
 800a580:	3130      	adds	r1, #48	; 0x30
 800a582:	4282      	cmp	r2, r0
 800a584:	bf0c      	ite	eq
 800a586:	2300      	moveq	r3, #0
 800a588:	f003 0301 	andne.w	r3, r3, #1
 800a58c:	3030      	adds	r0, #48	; 0x30
 800a58e:	428a      	cmp	r2, r1
 800a590:	bf0c      	ite	eq
 800a592:	2300      	moveq	r3, #0
 800a594:	f003 0301 	andne.w	r3, r3, #1
 800a598:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800a59c:	4282      	cmp	r2, r0
 800a59e:	bf0c      	ite	eq
 800a5a0:	2300      	moveq	r3, #0
 800a5a2:	f003 0301 	andne.w	r3, r3, #1
 800a5a6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a5aa:	428a      	cmp	r2, r1
 800a5ac:	bf0c      	ite	eq
 800a5ae:	2300      	moveq	r3, #0
 800a5b0:	f003 0301 	andne.w	r3, r3, #1
 800a5b4:	3130      	adds	r1, #48	; 0x30
 800a5b6:	4282      	cmp	r2, r0
 800a5b8:	bf0c      	ite	eq
 800a5ba:	2300      	moveq	r3, #0
 800a5bc:	f003 0301 	andne.w	r3, r3, #1
 800a5c0:	3030      	adds	r0, #48	; 0x30
 800a5c2:	428a      	cmp	r2, r1
 800a5c4:	bf0c      	ite	eq
 800a5c6:	2300      	moveq	r3, #0
 800a5c8:	f003 0301 	andne.w	r3, r3, #1
 800a5cc:	3130      	adds	r1, #48	; 0x30
 800a5ce:	4282      	cmp	r2, r0
 800a5d0:	bf0c      	ite	eq
 800a5d2:	2300      	moveq	r3, #0
 800a5d4:	f003 0301 	andne.w	r3, r3, #1
 800a5d8:	3030      	adds	r0, #48	; 0x30
 800a5da:	428a      	cmp	r2, r1
 800a5dc:	bf0c      	ite	eq
 800a5de:	2300      	moveq	r3, #0
 800a5e0:	f003 0301 	andne.w	r3, r3, #1
 800a5e4:	3130      	adds	r1, #48	; 0x30
 800a5e6:	4282      	cmp	r2, r0
 800a5e8:	bf0c      	ite	eq
 800a5ea:	2300      	moveq	r3, #0
 800a5ec:	f003 0301 	andne.w	r3, r3, #1
 800a5f0:	428a      	cmp	r2, r1
 800a5f2:	bf0c      	ite	eq
 800a5f4:	2300      	moveq	r3, #0
 800a5f6:	f003 0301 	andne.w	r3, r3, #1
 800a5fa:	b113      	cbz	r3, 800a602 <HAL_DMA_DeInit+0xd2>
 800a5fc:	4b21      	ldr	r3, [pc, #132]	; (800a684 <HAL_DMA_DeInit+0x154>)
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d132      	bne.n	800a668 <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 800a602:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a604:	b2d3      	uxtb	r3, r2
 800a606:	4920      	ldr	r1, [pc, #128]	; (800a688 <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 800a608:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a60c:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 800a60e:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 800a610:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a612:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 800a616:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 800a618:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 800a61a:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 800a61e:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a620:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 800a624:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 800a626:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 800a628:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800a62a:	f04f 0021 	mov.w	r0, #33	; 0x21
 800a62e:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a630:	4816      	ldr	r0, [pc, #88]	; (800a68c <HAL_DMA_DeInit+0x15c>)
 800a632:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a634:	4916      	ldr	r1, [pc, #88]	; (800a690 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a636:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a638:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a63c:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a640:	bf88      	it	hi
 800a642:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a644:	4082      	lsls	r2, r0
  return HAL_OK;
 800a646:	4618      	mov	r0, r3
 800a648:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a64a:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a64c:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800a64e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800a652:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 800a656:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800a65a:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 800a65e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800a662:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a664:	2001      	movs	r0, #1
}
 800a666:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a668:	f240 1149 	movw	r1, #329	; 0x149
 800a66c:	4809      	ldr	r0, [pc, #36]	; (800a694 <HAL_DMA_DeInit+0x164>)
 800a66e:	f7fb f8fb 	bl	8005868 <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	e7c5      	b.n	800a602 <HAL_DMA_DeInit+0xd2>
 800a676:	bf00      	nop
 800a678:	40026010 	.word	0x40026010
 800a67c:	40026028 	.word	0x40026028
 800a680:	40026040 	.word	0x40026040
 800a684:	400264b8 	.word	0x400264b8
 800a688:	aaaaaaab 	.word	0xaaaaaaab
 800a68c:	0802e21c 	.word	0x0802e21c
 800a690:	fffffc00 	.word	0xfffffc00
 800a694:	0802e1e4 	.word	0x0802e1e4

0800a698 <HAL_DMA_Start_IT>:
{
 800a698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a69c:	461e      	mov	r6, r3
 800a69e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6a0:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a6a4:	1e58      	subs	r0, r3, #1
 800a6a6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 800a6aa:	4688      	mov	r8, r1
 800a6ac:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a6ae:	4298      	cmp	r0, r3
 800a6b0:	d83b      	bhi.n	800a72a <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 800a6b2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d040      	beq.n	800a73c <HAL_DMA_Start_IT+0xa4>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800a6c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d005      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800a6c8:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800a6ca:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800a6cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800a6d4:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a6d6:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800a6d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6e6:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6e8:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 800a6ea:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6ec:	2b40      	cmp	r3, #64	; 0x40
 800a6ee:	d028      	beq.n	800a742 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 800a6f0:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 800a6f4:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6f6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a6f8:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800a6fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6fc:	408b      	lsls	r3, r1
 800a6fe:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a702:	682b      	ldr	r3, [r5, #0]
 800a704:	f043 0316 	orr.w	r3, r3, #22
 800a708:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a70a:	696b      	ldr	r3, [r5, #20]
 800a70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a710:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800a712:	b11a      	cbz	r2, 800a71c <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	f043 0308 	orr.w	r3, r3, #8
 800a71a:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800a71c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a71e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800a720:	f043 0301 	orr.w	r3, r3, #1
 800a724:	602b      	str	r3, [r5, #0]
}
 800a726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a72a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800a72e:	4807      	ldr	r0, [pc, #28]	; (800a74c <HAL_DMA_Start_IT+0xb4>)
 800a730:	f7fb f89a 	bl	8005868 <assert_failed>
  __HAL_LOCK(hdma);
 800a734:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d1be      	bne.n	800a6ba <HAL_DMA_Start_IT+0x22>
 800a73c:	2002      	movs	r0, #2
}
 800a73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 800a742:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800a744:	f8c5 800c 	str.w	r8, [r5, #12]
 800a748:	e7d5      	b.n	800a6f6 <HAL_DMA_Start_IT+0x5e>
 800a74a:	bf00      	nop
 800a74c:	0802e1e4 	.word	0x0802e1e4

0800a750 <HAL_DMA_Abort>:
{
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a754:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800a756:	f7fe fdd5 	bl	8009304 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a75a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d006      	beq.n	800a770 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a762:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800a764:	2300      	movs	r3, #0
    return HAL_ERROR;
 800a766:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a768:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800a76a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a76e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	4605      	mov	r5, r0
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	f022 0216 	bic.w	r2, r2, #22
 800a77a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a77c:	695a      	ldr	r2, [r3, #20]
 800a77e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a782:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a784:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a786:	b33a      	cbz	r2, 800a7d8 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	f022 0208 	bic.w	r2, r2, #8
 800a78e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	f022 0201 	bic.w	r2, r2, #1
 800a796:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a798:	e005      	b.n	800a7a6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a79a:	f7fe fdb3 	bl	8009304 <HAL_GetTick>
 800a79e:	1b43      	subs	r3, r0, r5
 800a7a0:	2b05      	cmp	r3, #5
 800a7a2:	d80f      	bhi.n	800a7c4 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f013 0301 	ands.w	r3, r3, #1
 800a7ac:	d1f5      	bne.n	800a79a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7ae:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a7b0:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800a7b2:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7b4:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800a7b6:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7b8:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800a7ba:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800a7be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a7c2:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a7c4:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a7c6:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800a7c8:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a7ca:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800a7cc:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a7ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a7d2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a7da:	2a00      	cmp	r2, #0
 800a7dc:	d1d4      	bne.n	800a788 <HAL_DMA_Abort+0x38>
 800a7de:	e7d7      	b.n	800a790 <HAL_DMA_Abort+0x40>

0800a7e0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a7e0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 800a7e4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a7e6:	2a02      	cmp	r2, #2
 800a7e8:	d003      	beq.n	800a7f2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7ea:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800a7ec:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a7f0:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800a7f2:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800a7f4:	2105      	movs	r1, #5
  return HAL_OK;
 800a7f6:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 800a7f8:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800a7fc:	6813      	ldr	r3, [r2, #0]
 800a7fe:	f023 0301 	bic.w	r3, r3, #1
 800a802:	6013      	str	r3, [r2, #0]
}
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop

0800a808 <HAL_DMA_IRQHandler>:
{
 800a808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 800a80c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 800a80e:	4b74      	ldr	r3, [pc, #464]	; (800a9e0 <HAL_DMA_IRQHandler+0x1d8>)
{
 800a810:	b082      	sub	sp, #8
 800a812:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 800a814:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 800a816:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a818:	2208      	movs	r2, #8
 800a81a:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800a81e:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a820:	409a      	lsls	r2, r3
 800a822:	4222      	tst	r2, r4
 800a824:	d004      	beq.n	800a830 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a826:	6801      	ldr	r1, [r0, #0]
 800a828:	680f      	ldr	r7, [r1, #0]
 800a82a:	0778      	lsls	r0, r7, #29
 800a82c:	f100 80ab 	bmi.w	800a986 <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a830:	2201      	movs	r2, #1
 800a832:	409a      	lsls	r2, r3
 800a834:	4222      	tst	r2, r4
 800a836:	d005      	beq.n	800a844 <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a838:	f8d8 1000 	ldr.w	r1, [r8]
 800a83c:	6949      	ldr	r1, [r1, #20]
 800a83e:	0609      	lsls	r1, r1, #24
 800a840:	f100 8099 	bmi.w	800a976 <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a844:	2204      	movs	r2, #4
 800a846:	409a      	lsls	r2, r3
 800a848:	4222      	tst	r2, r4
 800a84a:	d005      	beq.n	800a858 <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a84c:	f8d8 1000 	ldr.w	r1, [r8]
 800a850:	6809      	ldr	r1, [r1, #0]
 800a852:	078f      	lsls	r7, r1, #30
 800a854:	f100 8087 	bmi.w	800a966 <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a858:	2210      	movs	r2, #16
 800a85a:	409a      	lsls	r2, r3
 800a85c:	4222      	tst	r2, r4
 800a85e:	d004      	beq.n	800a86a <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a860:	f8d8 1000 	ldr.w	r1, [r8]
 800a864:	680f      	ldr	r7, [r1, #0]
 800a866:	0738      	lsls	r0, r7, #28
 800a868:	d468      	bmi.n	800a93c <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a86a:	2220      	movs	r2, #32
 800a86c:	409a      	lsls	r2, r3
 800a86e:	4222      	tst	r2, r4
 800a870:	d017      	beq.n	800a8a2 <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a872:	f8d8 1000 	ldr.w	r1, [r8]
 800a876:	680c      	ldr	r4, [r1, #0]
 800a878:	06e0      	lsls	r0, r4, #27
 800a87a:	d512      	bpl.n	800a8a2 <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a87c:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a87e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800a882:	2a05      	cmp	r2, #5
 800a884:	d039      	beq.n	800a8fa <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a886:	680b      	ldr	r3, [r1, #0]
 800a888:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a88c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a88e:	f000 808d 	beq.w	800a9ac <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a892:	0319      	lsls	r1, r3, #12
 800a894:	f140 8098 	bpl.w	800a9c8 <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 800a898:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800a89c:	b10b      	cbz	r3, 800a8a2 <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a8a2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d045      	beq.n	800a936 <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a8aa:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a8ae:	07da      	lsls	r2, r3, #31
 800a8b0:	d51b      	bpl.n	800a8ea <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 800a8b2:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 800a8b6:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800a8b8:	494a      	ldr	r1, [pc, #296]	; (800a9e4 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800a8ba:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800a8be:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800a8c0:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800a8c4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800a8c8:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	e002      	b.n	800a8d4 <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a8ce:	6813      	ldr	r3, [r2, #0]
 800a8d0:	07db      	lsls	r3, r3, #31
 800a8d2:	d504      	bpl.n	800a8de <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 800a8d4:	9b01      	ldr	r3, [sp, #4]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	42ab      	cmp	r3, r5
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	d9f7      	bls.n	800a8ce <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 800a8de:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800a8e0:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800a8e2:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800a8e6:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800a8ea:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800a8ee:	b313      	cbz	r3, 800a936 <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 800a8f0:	4640      	mov	r0, r8
}
 800a8f2:	b002      	add	sp, #8
 800a8f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800a8f8:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a8fa:	680a      	ldr	r2, [r1, #0]
 800a8fc:	f022 0216 	bic.w	r2, r2, #22
 800a900:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a902:	694a      	ldr	r2, [r1, #20]
 800a904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a908:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a90a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800a90e:	2a00      	cmp	r2, #0
 800a910:	d060      	beq.n	800a9d4 <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a912:	680a      	ldr	r2, [r1, #0]
 800a914:	f022 0208 	bic.w	r2, r2, #8
 800a918:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a91a:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 800a91c:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a91e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800a922:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a924:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 800a926:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 800a92a:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a92e:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1dc      	bne.n	800a8f0 <HAL_DMA_IRQHandler+0xe8>
}
 800a936:	b002      	add	sp, #8
 800a938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a93c:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a93e:	680a      	ldr	r2, [r1, #0]
 800a940:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a944:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a946:	d12a      	bne.n	800a99e <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a948:	05d7      	lsls	r7, r2, #23
 800a94a:	d403      	bmi.n	800a954 <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a94c:	680a      	ldr	r2, [r1, #0]
 800a94e:	f022 0208 	bic.w	r2, r2, #8
 800a952:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800a954:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800a958:	2a00      	cmp	r2, #0
 800a95a:	d086      	beq.n	800a86a <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 800a95c:	4640      	mov	r0, r8
 800a95e:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a960:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800a964:	e781      	b.n	800a86a <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a966:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a968:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a96c:	f042 0204 	orr.w	r2, r2, #4
 800a970:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800a974:	e770      	b.n	800a858 <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a976:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a978:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a97c:	f042 0202 	orr.w	r2, r2, #2
 800a980:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800a984:	e75e      	b.n	800a844 <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a986:	680f      	ldr	r7, [r1, #0]
 800a988:	f027 0704 	bic.w	r7, r7, #4
 800a98c:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a98e:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a990:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a994:	f042 0201 	orr.w	r2, r2, #1
 800a998:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800a99c:	e748      	b.n	800a830 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a99e:	0312      	lsls	r2, r2, #12
 800a9a0:	d5d8      	bpl.n	800a954 <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a9a2:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800a9a6:	2a00      	cmp	r2, #0
 800a9a8:	d1d8      	bne.n	800a95c <HAL_DMA_IRQHandler+0x154>
 800a9aa:	e75e      	b.n	800a86a <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a9ac:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800a9b0:	f47f af72 	bne.w	800a898 <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a9b4:	680a      	ldr	r2, [r1, #0]
 800a9b6:	f022 0210 	bic.w	r2, r2, #16
 800a9ba:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a9bc:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 800a9be:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800a9c2:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a9c6:	e767      	b.n	800a898 <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 800a9c8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f47f af66 	bne.w	800a89e <HAL_DMA_IRQHandler+0x96>
 800a9d2:	e766      	b.n	800a8a2 <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a9d4:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800a9d8:	2a00      	cmp	r2, #0
 800a9da:	d19a      	bne.n	800a912 <HAL_DMA_IRQHandler+0x10a>
 800a9dc:	e79d      	b.n	800a91a <HAL_DMA_IRQHandler+0x112>
 800a9de:	bf00      	nop
 800a9e0:	200002b8 	.word	0x200002b8
 800a9e4:	1b4e81b5 	.word	0x1b4e81b5

0800a9e8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800a9e8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800a9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f0:	9f08      	ldr	r7, [sp, #32]
 800a9f2:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a9f4:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 800a9f8:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a9fa:	1e7d      	subs	r5, r7, #1
{
 800a9fc:	4691      	mov	r9, r2
 800a9fe:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800aa00:	4285      	cmp	r5, r0
 800aa02:	d85f      	bhi.n	800aac4 <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aa04:	68a0      	ldr	r0, [r4, #8]
 800aa06:	2880      	cmp	r0, #128	; 0x80
 800aa08:	d063      	beq.n	800aad2 <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800aa0a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	f000 8090 	beq.w	800ab34 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800aa14:	2301      	movs	r3, #1
 800aa16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aa1a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d005      	beq.n	800aa2e <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aa22:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 800aa24:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800aa26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 800aa2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa2e:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800aa30:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa32:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa38:	f04f 0300 	mov.w	r3, #0
 800aa3c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800aa3e:	682b      	ldr	r3, [r5, #0]
 800aa40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa44:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800aa46:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 800aa48:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa4a:	d06a      	beq.n	800ab22 <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800aa4c:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800aa50:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aa54:	4b93      	ldr	r3, [pc, #588]	; (800aca4 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800aa56:	429d      	cmp	r5, r3
 800aa58:	d941      	bls.n	800aade <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 800aa5a:	3b48      	subs	r3, #72	; 0x48
 800aa5c:	4992      	ldr	r1, [pc, #584]	; (800aca8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800aa5e:	4a93      	ldr	r2, [pc, #588]	; (800acac <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800aa60:	429d      	cmp	r5, r3
 800aa62:	bf18      	it	ne
 800aa64:	428d      	cmpne	r5, r1
 800aa66:	bf14      	ite	ne
 800aa68:	2301      	movne	r3, #1
 800aa6a:	2300      	moveq	r3, #0
 800aa6c:	4295      	cmp	r5, r2
 800aa6e:	bf0c      	ite	eq
 800aa70:	2300      	moveq	r3, #0
 800aa72:	f003 0301 	andne.w	r3, r3, #1
 800aa76:	b11b      	cbz	r3, 800aa80 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 800aa78:	4b8d      	ldr	r3, [pc, #564]	; (800acb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800aa7a:	429d      	cmp	r5, r3
 800aa7c:	f040 812e 	bne.w	800acdc <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 800aa80:	4b8c      	ldr	r3, [pc, #560]	; (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800aa82:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aa84:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aa86:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aa88:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aa8a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aa8c:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aa8e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aa90:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aa92:	2201      	movs	r2, #1
 800aa94:	4b87      	ldr	r3, [pc, #540]	; (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800aa96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800aa98:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800aa9c:	f043 0316 	orr.w	r3, r3, #22
 800aaa0:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800aaa2:	696b      	ldr	r3, [r5, #20]
 800aaa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa8:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aaaa:	2a00      	cmp	r2, #0
 800aaac:	d03e      	beq.n	800ab2c <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 800aaae:	682b      	ldr	r3, [r5, #0]
 800aab0:	f043 0308 	orr.w	r3, r3, #8
 800aab4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 800aab6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aab8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	602b      	str	r3, [r5, #0]
}
 800aac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800aac4:	487c      	ldr	r0, [pc, #496]	; (800acb8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800aac6:	21a1      	movs	r1, #161	; 0xa1
 800aac8:	f7fa fece 	bl	8005868 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aacc:	68a0      	ldr	r0, [r4, #8]
 800aace:	2880      	cmp	r0, #128	; 0x80
 800aad0:	d19b      	bne.n	800aa0a <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800aad2:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 800aad6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800aad8:	6563      	str	r3, [r4, #84]	; 0x54
}
 800aada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aade:	4b77      	ldr	r3, [pc, #476]	; (800acbc <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800aae0:	429d      	cmp	r5, r3
 800aae2:	d929      	bls.n	800ab38 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800aae4:	3ba8      	subs	r3, #168	; 0xa8
 800aae6:	4976      	ldr	r1, [pc, #472]	; (800acc0 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800aae8:	4a70      	ldr	r2, [pc, #448]	; (800acac <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800aaea:	429d      	cmp	r5, r3
 800aaec:	bf18      	it	ne
 800aaee:	428d      	cmpne	r5, r1
 800aaf0:	bf14      	ite	ne
 800aaf2:	2301      	movne	r3, #1
 800aaf4:	2300      	moveq	r3, #0
 800aaf6:	4295      	cmp	r5, r2
 800aaf8:	bf0c      	ite	eq
 800aafa:	2300      	moveq	r3, #0
 800aafc:	f003 0301 	andne.w	r3, r3, #1
 800ab00:	b113      	cbz	r3, 800ab08 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800ab02:	4b6b      	ldr	r3, [pc, #428]	; (800acb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800ab04:	429d      	cmp	r5, r3
 800ab06:	d15a      	bne.n	800abbe <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 800ab08:	4b6a      	ldr	r3, [pc, #424]	; (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800ab0a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab0c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab0e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab10:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab12:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab14:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab16:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab18:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	4a65      	ldr	r2, [pc, #404]	; (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800ab1e:	6093      	str	r3, [r2, #8]
 800ab20:	e7ba      	b.n	800aa98 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 800ab22:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800ab26:	f8c5 800c 	str.w	r8, [r5, #12]
 800ab2a:	e793      	b.n	800aa54 <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1bd      	bne.n	800aaae <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 800ab32:	e7c0      	b.n	800aab6 <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 800ab34:	2002      	movs	r0, #2
 800ab36:	e778      	b.n	800aa2a <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab38:	4b62      	ldr	r3, [pc, #392]	; (800acc4 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 800ab3a:	429d      	cmp	r5, r3
 800ab3c:	d91f      	bls.n	800ab7e <HAL_DMAEx_MultiBufferStart_IT+0x192>
 800ab3e:	3b48      	subs	r3, #72	; 0x48
 800ab40:	495f      	ldr	r1, [pc, #380]	; (800acc0 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800ab42:	4a5a      	ldr	r2, [pc, #360]	; (800acac <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800ab44:	429d      	cmp	r5, r3
 800ab46:	bf18      	it	ne
 800ab48:	428d      	cmpne	r5, r1
 800ab4a:	bf14      	ite	ne
 800ab4c:	2301      	movne	r3, #1
 800ab4e:	2300      	moveq	r3, #0
 800ab50:	4295      	cmp	r5, r2
 800ab52:	bf0c      	ite	eq
 800ab54:	2300      	moveq	r3, #0
 800ab56:	f003 0301 	andne.w	r3, r3, #1
 800ab5a:	b11b      	cbz	r3, 800ab64 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 800ab5c:	4b54      	ldr	r3, [pc, #336]	; (800acb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800ab5e:	429d      	cmp	r5, r3
 800ab60:	f040 8152 	bne.w	800ae08 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 800ab64:	4b58      	ldr	r3, [pc, #352]	; (800acc8 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800ab66:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab68:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab6a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab6c:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab6e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab70:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab72:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab74:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ab76:	2301      	movs	r3, #1
 800ab78:	4a53      	ldr	r2, [pc, #332]	; (800acc8 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800ab7a:	60d3      	str	r3, [r2, #12]
 800ab7c:	e78c      	b.n	800aa98 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab7e:	4b50      	ldr	r3, [pc, #320]	; (800acc0 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800ab80:	4949      	ldr	r1, [pc, #292]	; (800aca8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800ab82:	4a4a      	ldr	r2, [pc, #296]	; (800acac <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800ab84:	429d      	cmp	r5, r3
 800ab86:	bf18      	it	ne
 800ab88:	428d      	cmpne	r5, r1
 800ab8a:	bf14      	ite	ne
 800ab8c:	2301      	movne	r3, #1
 800ab8e:	2300      	moveq	r3, #0
 800ab90:	4295      	cmp	r5, r2
 800ab92:	bf0c      	ite	eq
 800ab94:	2300      	moveq	r3, #0
 800ab96:	f003 0301 	andne.w	r3, r3, #1
 800ab9a:	b11b      	cbz	r3, 800aba4 <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 800ab9c:	4b44      	ldr	r3, [pc, #272]	; (800acb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800ab9e:	429d      	cmp	r5, r3
 800aba0:	f040 80be 	bne.w	800ad20 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 800aba4:	4b48      	ldr	r3, [pc, #288]	; (800acc8 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800aba6:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aba8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800abaa:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abac:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abae:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abb0:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abb2:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abb4:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800abb6:	2301      	movs	r3, #1
 800abb8:	4a43      	ldr	r2, [pc, #268]	; (800acc8 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800abba:	6093      	str	r3, [r2, #8]
 800abbc:	e76c      	b.n	800aa98 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800abbe:	3b48      	subs	r3, #72	; 0x48
 800abc0:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800abc4:	3218      	adds	r2, #24
 800abc6:	429d      	cmp	r5, r3
 800abc8:	bf18      	it	ne
 800abca:	428d      	cmpne	r5, r1
 800abcc:	bf14      	ite	ne
 800abce:	2301      	movne	r3, #1
 800abd0:	2300      	moveq	r3, #0
 800abd2:	4295      	cmp	r5, r2
 800abd4:	bf0c      	ite	eq
 800abd6:	2300      	moveq	r3, #0
 800abd8:	f003 0301 	andne.w	r3, r3, #1
 800abdc:	b11b      	cbz	r3, 800abe6 <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 800abde:	4b3b      	ldr	r3, [pc, #236]	; (800accc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800abe0:	429d      	cmp	r5, r3
 800abe2:	f040 8210 	bne.w	800b006 <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 800abe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abea:	4b39      	ldr	r3, [pc, #228]	; (800acd0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800abec:	4839      	ldr	r0, [pc, #228]	; (800acd4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800abee:	4a31      	ldr	r2, [pc, #196]	; (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abf0:	429d      	cmp	r5, r3
 800abf2:	bf18      	it	ne
 800abf4:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800abf6:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abf8:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 800abfc:	bf14      	ite	ne
 800abfe:	2301      	movne	r3, #1
 800ac00:	2300      	moveq	r3, #0
 800ac02:	4295      	cmp	r5, r2
 800ac04:	bf0c      	ite	eq
 800ac06:	2300      	moveq	r3, #0
 800ac08:	f003 0301 	andne.w	r3, r3, #1
 800ac0c:	b11b      	cbz	r3, 800ac16 <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 800ac0e:	4b2f      	ldr	r3, [pc, #188]	; (800accc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ac10:	429d      	cmp	r5, r3
 800ac12:	f040 8212 	bne.w	800b03a <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 800ac16:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac1a:	4b2d      	ldr	r3, [pc, #180]	; (800acd0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800ac1c:	482d      	ldr	r0, [pc, #180]	; (800acd4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac1e:	4925      	ldr	r1, [pc, #148]	; (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac20:	429d      	cmp	r5, r3
 800ac22:	bf18      	it	ne
 800ac24:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac26:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac28:	bf14      	ite	ne
 800ac2a:	2301      	movne	r3, #1
 800ac2c:	2300      	moveq	r3, #0
 800ac2e:	4a2a      	ldr	r2, [pc, #168]	; (800acd8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800ac30:	4295      	cmp	r5, r2
 800ac32:	bf0c      	ite	eq
 800ac34:	2300      	moveq	r3, #0
 800ac36:	f003 0301 	andne.w	r3, r3, #1
 800ac3a:	b11b      	cbz	r3, 800ac44 <HAL_DMAEx_MultiBufferStart_IT+0x258>
 800ac3c:	4b23      	ldr	r3, [pc, #140]	; (800accc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ac3e:	429d      	cmp	r5, r3
 800ac40:	f040 822b 	bne.w	800b09a <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800ac44:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac48:	4b22      	ldr	r3, [pc, #136]	; (800acd4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800ac4a:	4821      	ldr	r0, [pc, #132]	; (800acd0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac4c:	4919      	ldr	r1, [pc, #100]	; (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac4e:	429d      	cmp	r5, r3
 800ac50:	bf18      	it	ne
 800ac52:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac54:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac56:	bf14      	ite	ne
 800ac58:	2301      	movne	r3, #1
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	4a1e      	ldr	r2, [pc, #120]	; (800acd8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800ac5e:	4295      	cmp	r5, r2
 800ac60:	bf0c      	ite	eq
 800ac62:	2300      	moveq	r3, #0
 800ac64:	f003 0301 	andne.w	r3, r3, #1
 800ac68:	b11b      	cbz	r3, 800ac72 <HAL_DMAEx_MultiBufferStart_IT+0x286>
 800ac6a:	4b18      	ldr	r3, [pc, #96]	; (800accc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ac6c:	429d      	cmp	r5, r3
 800ac6e:	f040 81fc 	bne.w	800b06a <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 800ac72:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ac76:	4b17      	ldr	r3, [pc, #92]	; (800acd4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800ac78:	4815      	ldr	r0, [pc, #84]	; (800acd0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac7a:	490e      	ldr	r1, [pc, #56]	; (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ac7c:	429d      	cmp	r5, r3
 800ac7e:	bf18      	it	ne
 800ac80:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac82:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ac84:	bf14      	ite	ne
 800ac86:	2301      	movne	r3, #1
 800ac88:	2300      	moveq	r3, #0
 800ac8a:	4a13      	ldr	r2, [pc, #76]	; (800acd8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800ac8c:	4295      	cmp	r5, r2
 800ac8e:	bf0c      	ite	eq
 800ac90:	2300      	moveq	r3, #0
 800ac92:	f003 0301 	andne.w	r3, r3, #1
 800ac96:	b11b      	cbz	r3, 800aca0 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 800ac98:	4b0c      	ldr	r3, [pc, #48]	; (800accc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ac9a:	429d      	cmp	r5, r3
 800ac9c:	f040 8215 	bne.w	800b0ca <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 800aca0:	2340      	movs	r3, #64	; 0x40
 800aca2:	e73b      	b.n	800ab1c <HAL_DMAEx_MultiBufferStart_IT+0x130>
 800aca4:	40026458 	.word	0x40026458
 800aca8:	40026010 	.word	0x40026010
 800acac:	40026070 	.word	0x40026070
 800acb0:	40026470 	.word	0x40026470
 800acb4:	40026400 	.word	0x40026400
 800acb8:	0802e224 	.word	0x0802e224
 800acbc:	400260b8 	.word	0x400260b8
 800acc0:	40026410 	.word	0x40026410
 800acc4:	40026058 	.word	0x40026058
 800acc8:	40026000 	.word	0x40026000
 800accc:	40026488 	.word	0x40026488
 800acd0:	40026028 	.word	0x40026028
 800acd4:	40026428 	.word	0x40026428
 800acd8:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800acdc:	3b48      	subs	r3, #72	; 0x48
 800acde:	3118      	adds	r1, #24
 800ace0:	3218      	adds	r2, #24
 800ace2:	429d      	cmp	r5, r3
 800ace4:	bf18      	it	ne
 800ace6:	428d      	cmpne	r5, r1
 800ace8:	bf14      	ite	ne
 800acea:	2301      	movne	r3, #1
 800acec:	2300      	moveq	r3, #0
 800acee:	4295      	cmp	r5, r2
 800acf0:	bf0c      	ite	eq
 800acf2:	2300      	moveq	r3, #0
 800acf4:	f003 0301 	andne.w	r3, r3, #1
 800acf8:	b11b      	cbz	r3, 800ad02 <HAL_DMAEx_MultiBufferStart_IT+0x316>
 800acfa:	4b7d      	ldr	r3, [pc, #500]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800acfc:	429d      	cmp	r5, r3
 800acfe:	f040 8103 	bne.w	800af08 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 800ad02:	4b7c      	ldr	r3, [pc, #496]	; (800aef4 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800ad04:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad08:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad0c:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ad0e:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad12:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ad14:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ad18:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ad1a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ad1c:	2240      	movs	r2, #64	; 0x40
 800ad1e:	e6b9      	b.n	800aa94 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad20:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ad24:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800ad28:	3218      	adds	r2, #24
 800ad2a:	429d      	cmp	r5, r3
 800ad2c:	bf18      	it	ne
 800ad2e:	428d      	cmpne	r5, r1
 800ad30:	bf14      	ite	ne
 800ad32:	2301      	movne	r3, #1
 800ad34:	2300      	moveq	r3, #0
 800ad36:	4295      	cmp	r5, r2
 800ad38:	bf0c      	ite	eq
 800ad3a:	2300      	moveq	r3, #0
 800ad3c:	f003 0301 	andne.w	r3, r3, #1
 800ad40:	b11b      	cbz	r3, 800ad4a <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 800ad42:	4b6b      	ldr	r3, [pc, #428]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ad44:	429d      	cmp	r5, r3
 800ad46:	f040 81d8 	bne.w	800b0fa <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 800ad4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad4e:	4b6a      	ldr	r3, [pc, #424]	; (800aef8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800ad50:	486a      	ldr	r0, [pc, #424]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad52:	4a6b      	ldr	r2, [pc, #428]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad54:	429d      	cmp	r5, r3
 800ad56:	bf18      	it	ne
 800ad58:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad5a:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad5c:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800ad60:	bf14      	ite	ne
 800ad62:	2301      	movne	r3, #1
 800ad64:	2300      	moveq	r3, #0
 800ad66:	4295      	cmp	r5, r2
 800ad68:	bf0c      	ite	eq
 800ad6a:	2300      	moveq	r3, #0
 800ad6c:	f003 0301 	andne.w	r3, r3, #1
 800ad70:	b11b      	cbz	r3, 800ad7a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800ad72:	4b5f      	ldr	r3, [pc, #380]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ad74:	429d      	cmp	r5, r3
 800ad76:	f040 81d9 	bne.w	800b12c <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800ad7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ad7e:	4b5e      	ldr	r3, [pc, #376]	; (800aef8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800ad80:	485e      	ldr	r0, [pc, #376]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad82:	495f      	ldr	r1, [pc, #380]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ad84:	429d      	cmp	r5, r3
 800ad86:	bf18      	it	ne
 800ad88:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad8a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ad8c:	bf14      	ite	ne
 800ad8e:	2301      	movne	r3, #1
 800ad90:	2300      	moveq	r3, #0
 800ad92:	4a5c      	ldr	r2, [pc, #368]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ad94:	4295      	cmp	r5, r2
 800ad96:	bf0c      	ite	eq
 800ad98:	2300      	moveq	r3, #0
 800ad9a:	f003 0301 	andne.w	r3, r3, #1
 800ad9e:	b11b      	cbz	r3, 800ada8 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 800ada0:	4b53      	ldr	r3, [pc, #332]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ada2:	429d      	cmp	r5, r3
 800ada4:	f040 822c 	bne.w	800b200 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800ada8:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800adac:	4b53      	ldr	r3, [pc, #332]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800adae:	4852      	ldr	r0, [pc, #328]	; (800aef8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800adb0:	4953      	ldr	r1, [pc, #332]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800adb2:	429d      	cmp	r5, r3
 800adb4:	bf18      	it	ne
 800adb6:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800adb8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800adba:	bf14      	ite	ne
 800adbc:	2301      	movne	r3, #1
 800adbe:	2300      	moveq	r3, #0
 800adc0:	4a50      	ldr	r2, [pc, #320]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800adc2:	4295      	cmp	r5, r2
 800adc4:	bf0c      	ite	eq
 800adc6:	2300      	moveq	r3, #0
 800adc8:	f003 0301 	andne.w	r3, r3, #1
 800adcc:	b11b      	cbz	r3, 800add6 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800adce:	4b48      	ldr	r3, [pc, #288]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800add0:	429d      	cmp	r5, r3
 800add2:	f040 81db 	bne.w	800b18c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 800add6:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800adda:	4b47      	ldr	r3, [pc, #284]	; (800aef8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800addc:	4847      	ldr	r0, [pc, #284]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800adde:	4948      	ldr	r1, [pc, #288]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ade0:	429d      	cmp	r5, r3
 800ade2:	bf18      	it	ne
 800ade4:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ade6:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ade8:	bf14      	ite	ne
 800adea:	2301      	movne	r3, #1
 800adec:	2300      	moveq	r3, #0
 800adee:	4a45      	ldr	r2, [pc, #276]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800adf0:	4295      	cmp	r5, r2
 800adf2:	bf0c      	ite	eq
 800adf4:	2300      	moveq	r3, #0
 800adf6:	f003 0301 	andne.w	r3, r3, #1
 800adfa:	b11b      	cbz	r3, 800ae04 <HAL_DMAEx_MultiBufferStart_IT+0x418>
 800adfc:	4b3c      	ldr	r3, [pc, #240]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800adfe:	429d      	cmp	r5, r3
 800ae00:	f040 822d 	bne.w	800b25e <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800ae04:	2340      	movs	r3, #64	; 0x40
 800ae06:	e6d7      	b.n	800abb8 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ae08:	3b48      	subs	r3, #72	; 0x48
 800ae0a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800ae0e:	3218      	adds	r2, #24
 800ae10:	429d      	cmp	r5, r3
 800ae12:	bf18      	it	ne
 800ae14:	428d      	cmpne	r5, r1
 800ae16:	bf14      	ite	ne
 800ae18:	2301      	movne	r3, #1
 800ae1a:	2300      	moveq	r3, #0
 800ae1c:	4295      	cmp	r5, r2
 800ae1e:	bf0c      	ite	eq
 800ae20:	2300      	moveq	r3, #0
 800ae22:	f003 0301 	andne.w	r3, r3, #1
 800ae26:	b11b      	cbz	r3, 800ae30 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 800ae28:	4b31      	ldr	r3, [pc, #196]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae2a:	429d      	cmp	r5, r3
 800ae2c:	f040 81d0 	bne.w	800b1d0 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 800ae30:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ae34:	4b31      	ldr	r3, [pc, #196]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800ae36:	4830      	ldr	r0, [pc, #192]	; (800aef8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ae38:	4a31      	ldr	r2, [pc, #196]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ae3a:	429d      	cmp	r5, r3
 800ae3c:	bf18      	it	ne
 800ae3e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ae40:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ae42:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800ae46:	bf14      	ite	ne
 800ae48:	2301      	movne	r3, #1
 800ae4a:	2300      	moveq	r3, #0
 800ae4c:	4295      	cmp	r5, r2
 800ae4e:	bf0c      	ite	eq
 800ae50:	2300      	moveq	r3, #0
 800ae52:	f003 0301 	andne.w	r3, r3, #1
 800ae56:	b11b      	cbz	r3, 800ae60 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 800ae58:	4b25      	ldr	r3, [pc, #148]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae5a:	429d      	cmp	r5, r3
 800ae5c:	f040 817e 	bne.w	800b15c <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800ae60:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae64:	4b24      	ldr	r3, [pc, #144]	; (800aef8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800ae66:	4825      	ldr	r0, [pc, #148]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ae68:	4925      	ldr	r1, [pc, #148]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae6a:	429d      	cmp	r5, r3
 800ae6c:	bf18      	it	ne
 800ae6e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ae70:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae72:	bf14      	ite	ne
 800ae74:	2301      	movne	r3, #1
 800ae76:	2300      	moveq	r3, #0
 800ae78:	4a22      	ldr	r2, [pc, #136]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ae7a:	4295      	cmp	r5, r2
 800ae7c:	bf0c      	ite	eq
 800ae7e:	2300      	moveq	r3, #0
 800ae80:	f003 0301 	andne.w	r3, r3, #1
 800ae84:	b11b      	cbz	r3, 800ae8e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800ae86:	4b1a      	ldr	r3, [pc, #104]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae88:	429d      	cmp	r5, r3
 800ae8a:	f040 81fe 	bne.w	800b28a <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 800ae8e:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae92:	4b1a      	ldr	r3, [pc, #104]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800ae94:	4818      	ldr	r0, [pc, #96]	; (800aef8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae96:	491a      	ldr	r1, [pc, #104]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae98:	429d      	cmp	r5, r3
 800ae9a:	bf18      	it	ne
 800ae9c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae9e:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aea0:	bf14      	ite	ne
 800aea2:	2301      	movne	r3, #1
 800aea4:	2300      	moveq	r3, #0
 800aea6:	4a17      	ldr	r2, [pc, #92]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800aea8:	4295      	cmp	r5, r2
 800aeaa:	bf0c      	ite	eq
 800aeac:	2300      	moveq	r3, #0
 800aeae:	f003 0301 	andne.w	r3, r3, #1
 800aeb2:	b11b      	cbz	r3, 800aebc <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800aeb4:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800aeb6:	429d      	cmp	r5, r3
 800aeb8:	f040 81ba 	bne.w	800b230 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800aebc:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aec0:	4b0e      	ldr	r3, [pc, #56]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800aec2:	480d      	ldr	r0, [pc, #52]	; (800aef8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aec4:	490e      	ldr	r1, [pc, #56]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aec6:	429d      	cmp	r5, r3
 800aec8:	bf18      	it	ne
 800aeca:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aecc:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aece:	bf14      	ite	ne
 800aed0:	2301      	movne	r3, #1
 800aed2:	2300      	moveq	r3, #0
 800aed4:	4a0b      	ldr	r2, [pc, #44]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800aed6:	4295      	cmp	r5, r2
 800aed8:	bf0c      	ite	eq
 800aeda:	2300      	moveq	r3, #0
 800aedc:	f003 0301 	andne.w	r3, r3, #1
 800aee0:	b11b      	cbz	r3, 800aeea <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800aee2:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800aee4:	429d      	cmp	r5, r3
 800aee6:	f040 81e6 	bne.w	800b2b6 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 800aeea:	2340      	movs	r3, #64	; 0x40
 800aeec:	e644      	b.n	800ab78 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800aeee:	bf00      	nop
 800aef0:	40026488 	.word	0x40026488
 800aef4:	40026400 	.word	0x40026400
 800aef8:	40026428 	.word	0x40026428
 800aefc:	40026028 	.word	0x40026028
 800af00:	40026000 	.word	0x40026000
 800af04:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800af08:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800af0c:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800af10:	3218      	adds	r2, #24
 800af12:	429d      	cmp	r5, r3
 800af14:	bf18      	it	ne
 800af16:	428d      	cmpne	r5, r1
 800af18:	bf14      	ite	ne
 800af1a:	2301      	movne	r3, #1
 800af1c:	2300      	moveq	r3, #0
 800af1e:	4295      	cmp	r5, r2
 800af20:	bf0c      	ite	eq
 800af22:	2300      	moveq	r3, #0
 800af24:	f003 0301 	andne.w	r3, r3, #1
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 81e6 	beq.w	800b2fa <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800af2e:	4ba3      	ldr	r3, [pc, #652]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800af30:	429d      	cmp	r5, r3
 800af32:	f000 81e2 	beq.w	800b2fa <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800af36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800af3a:	4ba1      	ldr	r3, [pc, #644]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800af3c:	48a1      	ldr	r0, [pc, #644]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800af3e:	4aa2      	ldr	r2, [pc, #648]	; (800b1c8 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800af40:	429d      	cmp	r5, r3
 800af42:	bf18      	it	ne
 800af44:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800af46:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800af48:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800af4c:	bf14      	ite	ne
 800af4e:	2301      	movne	r3, #1
 800af50:	2300      	moveq	r3, #0
 800af52:	4295      	cmp	r5, r2
 800af54:	bf0c      	ite	eq
 800af56:	2300      	moveq	r3, #0
 800af58:	f003 0301 	andne.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 81c9 	beq.w	800b2f4 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800af62:	4b96      	ldr	r3, [pc, #600]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800af64:	429d      	cmp	r5, r3
 800af66:	f000 81c5 	beq.w	800b2f4 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800af6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800af6e:	4b94      	ldr	r3, [pc, #592]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800af70:	4894      	ldr	r0, [pc, #592]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800af72:	4995      	ldr	r1, [pc, #596]	; (800b1c8 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800af74:	429d      	cmp	r5, r3
 800af76:	bf18      	it	ne
 800af78:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800af7a:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800af7c:	bf14      	ite	ne
 800af7e:	2301      	movne	r3, #1
 800af80:	2300      	moveq	r3, #0
 800af82:	4a92      	ldr	r2, [pc, #584]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800af84:	4295      	cmp	r5, r2
 800af86:	bf0c      	ite	eq
 800af88:	2300      	moveq	r3, #0
 800af8a:	f003 0301 	andne.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f000 81ad 	beq.w	800b2ee <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800af94:	4b89      	ldr	r3, [pc, #548]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800af96:	429d      	cmp	r5, r3
 800af98:	f000 81a9 	beq.w	800b2ee <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800af9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800afa0:	4b87      	ldr	r3, [pc, #540]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800afa2:	4888      	ldr	r0, [pc, #544]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800afa4:	4988      	ldr	r1, [pc, #544]	; (800b1c8 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800afa6:	429d      	cmp	r5, r3
 800afa8:	bf18      	it	ne
 800afaa:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800afac:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800afae:	bf14      	ite	ne
 800afb0:	2301      	movne	r3, #1
 800afb2:	2300      	moveq	r3, #0
 800afb4:	4a85      	ldr	r2, [pc, #532]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800afb6:	4295      	cmp	r5, r2
 800afb8:	bf0c      	ite	eq
 800afba:	2300      	moveq	r3, #0
 800afbc:	f003 0301 	andne.w	r3, r3, #1
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 8191 	beq.w	800b2e8 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800afc6:	4b7d      	ldr	r3, [pc, #500]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800afc8:	429d      	cmp	r5, r3
 800afca:	f000 818d 	beq.w	800b2e8 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800afce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800afd2:	4b7b      	ldr	r3, [pc, #492]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800afd4:	487b      	ldr	r0, [pc, #492]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800afd6:	497c      	ldr	r1, [pc, #496]	; (800b1c8 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800afd8:	429d      	cmp	r5, r3
 800afda:	bf18      	it	ne
 800afdc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800afde:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800afe0:	bf14      	ite	ne
 800afe2:	2301      	movne	r3, #1
 800afe4:	2300      	moveq	r3, #0
 800afe6:	4a79      	ldr	r2, [pc, #484]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800afe8:	4295      	cmp	r5, r2
 800afea:	bf0c      	ite	eq
 800afec:	2300      	moveq	r3, #0
 800afee:	f003 0301 	andne.w	r3, r3, #1
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 8174 	beq.w	800b2e0 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800aff8:	4b70      	ldr	r3, [pc, #448]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800affa:	429d      	cmp	r5, r3
 800affc:	f000 8170 	beq.w	800b2e0 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800b000:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b004:	e546      	b.n	800aa94 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b006:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800b00a:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800b00e:	3218      	adds	r2, #24
 800b010:	429d      	cmp	r5, r3
 800b012:	bf18      	it	ne
 800b014:	428d      	cmpne	r5, r1
 800b016:	bf14      	ite	ne
 800b018:	2301      	movne	r3, #1
 800b01a:	2300      	moveq	r3, #0
 800b01c:	4295      	cmp	r5, r2
 800b01e:	bf0c      	ite	eq
 800b020:	2300      	moveq	r3, #0
 800b022:	f003 0301 	andne.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 816d 	beq.w	800b306 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800b02c:	4b63      	ldr	r3, [pc, #396]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b02e:	429d      	cmp	r5, r3
 800b030:	f000 8169 	beq.w	800b306 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800b034:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b038:	e5d7      	b.n	800abea <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b03a:	4b62      	ldr	r3, [pc, #392]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b03c:	4960      	ldr	r1, [pc, #384]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b03e:	4a63      	ldr	r2, [pc, #396]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b040:	429d      	cmp	r5, r3
 800b042:	bf18      	it	ne
 800b044:	428d      	cmpne	r5, r1
 800b046:	bf14      	ite	ne
 800b048:	2301      	movne	r3, #1
 800b04a:	2300      	moveq	r3, #0
 800b04c:	4295      	cmp	r5, r2
 800b04e:	bf0c      	ite	eq
 800b050:	2300      	moveq	r3, #0
 800b052:	f003 0301 	andne.w	r3, r3, #1
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 815b 	beq.w	800b312 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800b05c:	4b57      	ldr	r3, [pc, #348]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b05e:	429d      	cmp	r5, r3
 800b060:	f000 8157 	beq.w	800b312 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800b064:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b068:	e5d7      	b.n	800ac1a <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b06a:	4b55      	ldr	r3, [pc, #340]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b06c:	4955      	ldr	r1, [pc, #340]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b06e:	4a57      	ldr	r2, [pc, #348]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b070:	429d      	cmp	r5, r3
 800b072:	bf18      	it	ne
 800b074:	428d      	cmpne	r5, r1
 800b076:	bf14      	ite	ne
 800b078:	2301      	movne	r3, #1
 800b07a:	2300      	moveq	r3, #0
 800b07c:	4295      	cmp	r5, r2
 800b07e:	bf0c      	ite	eq
 800b080:	2300      	moveq	r3, #0
 800b082:	f003 0301 	andne.w	r3, r3, #1
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 8140 	beq.w	800b30c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800b08c:	4b4b      	ldr	r3, [pc, #300]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b08e:	429d      	cmp	r5, r3
 800b090:	f000 813c 	beq.w	800b30c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800b094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b098:	e5ed      	b.n	800ac76 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b09a:	4b49      	ldr	r3, [pc, #292]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b09c:	4949      	ldr	r1, [pc, #292]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b09e:	4a4b      	ldr	r2, [pc, #300]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b0a0:	429d      	cmp	r5, r3
 800b0a2:	bf18      	it	ne
 800b0a4:	428d      	cmpne	r5, r1
 800b0a6:	bf14      	ite	ne
 800b0a8:	2301      	movne	r3, #1
 800b0aa:	2300      	moveq	r3, #0
 800b0ac:	4295      	cmp	r5, r2
 800b0ae:	bf0c      	ite	eq
 800b0b0:	2300      	moveq	r3, #0
 800b0b2:	f003 0301 	andne.w	r3, r3, #1
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 812e 	beq.w	800b318 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800b0bc:	4b3f      	ldr	r3, [pc, #252]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b0be:	429d      	cmp	r5, r3
 800b0c0:	f000 812a 	beq.w	800b318 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800b0c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b0c8:	e5be      	b.n	800ac48 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b0ca:	4b3d      	ldr	r3, [pc, #244]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b0cc:	493d      	ldr	r1, [pc, #244]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b0ce:	4a3f      	ldr	r2, [pc, #252]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b0d0:	429d      	cmp	r5, r3
 800b0d2:	bf18      	it	ne
 800b0d4:	428d      	cmpne	r5, r1
 800b0d6:	bf14      	ite	ne
 800b0d8:	2301      	movne	r3, #1
 800b0da:	2300      	moveq	r3, #0
 800b0dc:	4295      	cmp	r5, r2
 800b0de:	bf0c      	ite	eq
 800b0e0:	2300      	moveq	r3, #0
 800b0e2:	f003 0301 	andne.w	r3, r3, #1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 810a 	beq.w	800b300 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 800b0ec:	4b33      	ldr	r3, [pc, #204]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b0ee:	429d      	cmp	r5, r3
 800b0f0:	f000 8106 	beq.w	800b300 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 800b0f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0f8:	e510      	b.n	800ab1c <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b0fa:	3b48      	subs	r3, #72	; 0x48
 800b0fc:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800b100:	3218      	adds	r2, #24
 800b102:	429d      	cmp	r5, r3
 800b104:	bf18      	it	ne
 800b106:	428d      	cmpne	r5, r1
 800b108:	bf14      	ite	ne
 800b10a:	2301      	movne	r3, #1
 800b10c:	2300      	moveq	r3, #0
 800b10e:	4295      	cmp	r5, r2
 800b110:	bf0c      	ite	eq
 800b112:	2300      	moveq	r3, #0
 800b114:	f003 0301 	andne.w	r3, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 8112 	beq.w	800b342 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800b11e:	4b27      	ldr	r3, [pc, #156]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b120:	429d      	cmp	r5, r3
 800b122:	f000 810e 	beq.w	800b342 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800b126:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b12a:	e610      	b.n	800ad4e <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b12c:	4b24      	ldr	r3, [pc, #144]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b12e:	4925      	ldr	r1, [pc, #148]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b130:	4a26      	ldr	r2, [pc, #152]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b132:	429d      	cmp	r5, r3
 800b134:	bf18      	it	ne
 800b136:	428d      	cmpne	r5, r1
 800b138:	bf14      	ite	ne
 800b13a:	2301      	movne	r3, #1
 800b13c:	2300      	moveq	r3, #0
 800b13e:	4295      	cmp	r5, r2
 800b140:	bf0c      	ite	eq
 800b142:	2300      	moveq	r3, #0
 800b144:	f003 0301 	andne.w	r3, r3, #1
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 80ee 	beq.w	800b32a <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800b14e:	4b1b      	ldr	r3, [pc, #108]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b150:	429d      	cmp	r5, r3
 800b152:	f000 80ea 	beq.w	800b32a <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800b156:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b15a:	e610      	b.n	800ad7e <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800b15c:	4b19      	ldr	r3, [pc, #100]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b15e:	4918      	ldr	r1, [pc, #96]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b160:	4a1a      	ldr	r2, [pc, #104]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b162:	429d      	cmp	r5, r3
 800b164:	bf18      	it	ne
 800b166:	428d      	cmpne	r5, r1
 800b168:	bf14      	ite	ne
 800b16a:	2301      	movne	r3, #1
 800b16c:	2300      	moveq	r3, #0
 800b16e:	4295      	cmp	r5, r2
 800b170:	bf0c      	ite	eq
 800b172:	2300      	moveq	r3, #0
 800b174:	f003 0301 	andne.w	r3, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 80e8 	beq.w	800b34e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800b17e:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b180:	429d      	cmp	r5, r3
 800b182:	f000 80e4 	beq.w	800b34e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800b186:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b18a:	e66b      	b.n	800ae64 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b18c:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b18e:	490c      	ldr	r1, [pc, #48]	; (800b1c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b190:	4a0e      	ldr	r2, [pc, #56]	; (800b1cc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b192:	429d      	cmp	r5, r3
 800b194:	bf18      	it	ne
 800b196:	428d      	cmpne	r5, r1
 800b198:	bf14      	ite	ne
 800b19a:	2301      	movne	r3, #1
 800b19c:	2300      	moveq	r3, #0
 800b19e:	4295      	cmp	r5, r2
 800b1a0:	bf0c      	ite	eq
 800b1a2:	2300      	moveq	r3, #0
 800b1a4:	f003 0301 	andne.w	r3, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 80bb 	beq.w	800b324 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800b1ae:	4b03      	ldr	r3, [pc, #12]	; (800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b1b0:	429d      	cmp	r5, r3
 800b1b2:	f000 80b7 	beq.w	800b324 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800b1b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1ba:	e60e      	b.n	800adda <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800b1bc:	400264a0 	.word	0x400264a0
 800b1c0:	40026040 	.word	0x40026040
 800b1c4:	40026440 	.word	0x40026440
 800b1c8:	40026400 	.word	0x40026400
 800b1cc:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b1d0:	3b48      	subs	r3, #72	; 0x48
 800b1d2:	3118      	adds	r1, #24
 800b1d4:	3218      	adds	r2, #24
 800b1d6:	429d      	cmp	r5, r3
 800b1d8:	bf18      	it	ne
 800b1da:	428d      	cmpne	r5, r1
 800b1dc:	bf14      	ite	ne
 800b1de:	2301      	movne	r3, #1
 800b1e0:	2300      	moveq	r3, #0
 800b1e2:	4295      	cmp	r5, r2
 800b1e4:	bf0c      	ite	eq
 800b1e6:	2300      	moveq	r3, #0
 800b1e8:	f003 0301 	andne.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 80ab 	beq.w	800b348 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b1f2:	4b5a      	ldr	r3, [pc, #360]	; (800b35c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b1f4:	429d      	cmp	r5, r3
 800b1f6:	f000 80a7 	beq.w	800b348 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b1fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b1fe:	e619      	b.n	800ae34 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b200:	4b57      	ldr	r3, [pc, #348]	; (800b360 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b202:	4958      	ldr	r1, [pc, #352]	; (800b364 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b204:	4a58      	ldr	r2, [pc, #352]	; (800b368 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b206:	429d      	cmp	r5, r3
 800b208:	bf18      	it	ne
 800b20a:	428d      	cmpne	r5, r1
 800b20c:	bf14      	ite	ne
 800b20e:	2301      	movne	r3, #1
 800b210:	2300      	moveq	r3, #0
 800b212:	4295      	cmp	r5, r2
 800b214:	bf0c      	ite	eq
 800b216:	2300      	moveq	r3, #0
 800b218:	f003 0301 	andne.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 808a 	beq.w	800b336 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800b222:	4b4e      	ldr	r3, [pc, #312]	; (800b35c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b224:	429d      	cmp	r5, r3
 800b226:	f000 8086 	beq.w	800b336 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800b22a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b22e:	e5bd      	b.n	800adac <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b230:	4b4c      	ldr	r3, [pc, #304]	; (800b364 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b232:	494b      	ldr	r1, [pc, #300]	; (800b360 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b234:	4a4c      	ldr	r2, [pc, #304]	; (800b368 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b236:	429d      	cmp	r5, r3
 800b238:	bf18      	it	ne
 800b23a:	428d      	cmpne	r5, r1
 800b23c:	bf14      	ite	ne
 800b23e:	2301      	movne	r3, #1
 800b240:	2300      	moveq	r3, #0
 800b242:	4295      	cmp	r5, r2
 800b244:	bf0c      	ite	eq
 800b246:	2300      	moveq	r3, #0
 800b248:	f003 0301 	andne.w	r3, r3, #1
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f000 8081 	beq.w	800b354 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800b252:	4b42      	ldr	r3, [pc, #264]	; (800b35c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b254:	429d      	cmp	r5, r3
 800b256:	d07d      	beq.n	800b354 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800b258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b25c:	e630      	b.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b25e:	4b40      	ldr	r3, [pc, #256]	; (800b360 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b260:	4940      	ldr	r1, [pc, #256]	; (800b364 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b262:	4a41      	ldr	r2, [pc, #260]	; (800b368 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b264:	429d      	cmp	r5, r3
 800b266:	bf18      	it	ne
 800b268:	428d      	cmpne	r5, r1
 800b26a:	bf14      	ite	ne
 800b26c:	2301      	movne	r3, #1
 800b26e:	2300      	moveq	r3, #0
 800b270:	4295      	cmp	r5, r2
 800b272:	bf0c      	ite	eq
 800b274:	2300      	moveq	r3, #0
 800b276:	f003 0301 	andne.w	r3, r3, #1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d058      	beq.n	800b330 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800b27e:	4b37      	ldr	r3, [pc, #220]	; (800b35c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b280:	429d      	cmp	r5, r3
 800b282:	d055      	beq.n	800b330 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800b284:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b288:	e496      	b.n	800abb8 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b28a:	4b35      	ldr	r3, [pc, #212]	; (800b360 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b28c:	4935      	ldr	r1, [pc, #212]	; (800b364 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b28e:	4a36      	ldr	r2, [pc, #216]	; (800b368 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b290:	429d      	cmp	r5, r3
 800b292:	bf18      	it	ne
 800b294:	428d      	cmpne	r5, r1
 800b296:	bf14      	ite	ne
 800b298:	2301      	movne	r3, #1
 800b29a:	2300      	moveq	r3, #0
 800b29c:	4295      	cmp	r5, r2
 800b29e:	bf0c      	ite	eq
 800b2a0:	2300      	moveq	r3, #0
 800b2a2:	f003 0301 	andne.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d048      	beq.n	800b33c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800b2aa:	4b2c      	ldr	r3, [pc, #176]	; (800b35c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b2ac:	429d      	cmp	r5, r3
 800b2ae:	d045      	beq.n	800b33c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800b2b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b2b4:	e5ed      	b.n	800ae92 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b2b6:	4b2a      	ldr	r3, [pc, #168]	; (800b360 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b2b8:	492a      	ldr	r1, [pc, #168]	; (800b364 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b2ba:	4a2b      	ldr	r2, [pc, #172]	; (800b368 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b2bc:	429d      	cmp	r5, r3
 800b2be:	bf18      	it	ne
 800b2c0:	428d      	cmpne	r5, r1
 800b2c2:	bf14      	ite	ne
 800b2c4:	2301      	movne	r3, #1
 800b2c6:	2300      	moveq	r3, #0
 800b2c8:	4295      	cmp	r5, r2
 800b2ca:	bf0c      	ite	eq
 800b2cc:	2300      	moveq	r3, #0
 800b2ce:	f003 0301 	andne.w	r3, r3, #1
 800b2d2:	b323      	cbz	r3, 800b31e <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800b2d4:	4b21      	ldr	r3, [pc, #132]	; (800b35c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b2d6:	429d      	cmp	r5, r3
 800b2d8:	d021      	beq.n	800b31e <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800b2da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2de:	e44b      	b.n	800ab78 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800b2e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b2e4:	f7ff bbd6 	b.w	800aa94 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b2e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b2ec:	e671      	b.n	800afd2 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b2ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b2f2:	e655      	b.n	800afa0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b2f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b2f8:	e639      	b.n	800af6e <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b2fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2fe:	e61c      	b.n	800af3a <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b304:	e40a      	b.n	800ab1c <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b30a:	e46e      	b.n	800abea <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b30c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b310:	e4b1      	b.n	800ac76 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b312:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b316:	e480      	b.n	800ac1a <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b318:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b31c:	e494      	b.n	800ac48 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b31e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b322:	e429      	b.n	800ab78 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b324:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b328:	e557      	b.n	800adda <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b32a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b32e:	e526      	b.n	800ad7e <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b334:	e440      	b.n	800abb8 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b336:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b33a:	e537      	b.n	800adac <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 800b33c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b340:	e5a7      	b.n	800ae92 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b346:	e502      	b.n	800ad4e <HAL_DMAEx_MultiBufferStart_IT+0x362>
 800b348:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b34c:	e572      	b.n	800ae34 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b34e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b352:	e587      	b.n	800ae64 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b354:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b358:	e5b2      	b.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800b35a:	bf00      	nop
 800b35c:	400264a0 	.word	0x400264a0
 800b360:	40026040 	.word	0x40026040
 800b364:	40026440 	.word	0x40026440
 800b368:	400260a0 	.word	0x400260a0

0800b36c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b370:	2900      	cmp	r1, #0
 800b372:	d15b      	bne.n	800b42c <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800b374:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800b378:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b37a:	69e3      	ldr	r3, [r4, #28]
 800b37c:	b90b      	cbnz	r3, 800b382 <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 800b37e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 800b382:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b384:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b386:	4b2e      	ldr	r3, [pc, #184]	; (800b440 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 800b388:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b38a:	402b      	ands	r3, r5
 800b38c:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800b38e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800b392:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b394:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b396:	f7fd ffbb 	bl	8009310 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800b39a:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b39c:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b39e:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800b3a0:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b3a2:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b3a4:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800b3a6:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3a8:	f7fd ffb2 	bl	8009310 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800b3ac:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b3ae:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3b2:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800b3b4:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b3b6:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800b3b8:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800b3ba:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b3bc:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800b3be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800b3c2:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800b3c4:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3c6:	f7fd ffa3 	bl	8009310 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800b3ca:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3cc:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800b3ce:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b3d0:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800b3d2:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3d4:	f7fd ff9c 	bl	8009310 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800b3d8:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b3da:	491a      	ldr	r1, [pc, #104]	; (800b444 <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 800b3dc:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 800b3e0:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b3e2:	4a19      	ldr	r2, [pc, #100]	; (800b448 <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 800b3e4:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b3e6:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3e8:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b3ea:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800b3ec:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 800b3ee:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3f0:	f7fd ff8e 	bl	8009310 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800b3f4:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3f6:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b3f8:	4a14      	ldr	r2, [pc, #80]	; (800b44c <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800b3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3fe:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b400:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800b402:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b404:	f7fd ff84 	bl	8009310 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800b408:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b40a:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800b40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b410:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 800b412:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b414:	d103      	bne.n	800b41e <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800b416:	69d9      	ldr	r1, [r3, #28]
 800b418:	4a0d      	ldr	r2, [pc, #52]	; (800b450 <ETH_MACDMAConfig+0xe4>)
 800b41a:	430a      	orrs	r2, r1
 800b41c:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b41e:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b420:	4b0c      	ldr	r3, [pc, #48]	; (800b454 <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800b422:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b424:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800b426:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800b428:	645a      	str	r2, [r3, #68]	; 0x44
}
 800b42a:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b42c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 800b430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b434:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 800b438:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800b43c:	e79d      	b.n	800b37a <ETH_MACDMAConfig+0xe>
 800b43e:	bf00      	nop
 800b440:	ff20810f 	.word	0xff20810f
 800b444:	f8de3f23 	.word	0xf8de3f23
 800b448:	02200004 	.word	0x02200004
 800b44c:	02c12080 	.word	0x02c12080
 800b450:	00010040 	.word	0x00010040
 800b454:	40028000 	.word	0x40028000

0800b458 <HAL_ETH_DMATxDescListInit>:
{
 800b458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b45c:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 800b45e:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800b462:	2801      	cmp	r0, #1
 800b464:	d03b      	beq.n	800b4de <HAL_ETH_DMATxDescListInit+0x86>
 800b466:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b46a:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 800b46c:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 800b470:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b474:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 800b478:	b31b      	cbz	r3, 800b4c2 <HAL_ETH_DMATxDescListInit+0x6a>
 800b47a:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b47c:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 800b480:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b484:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b486:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 800b48a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800b48e:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800b492:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b494:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800b496:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b498:	f1ba 0f00 	cmp.w	sl, #0
 800b49c:	d103      	bne.n	800b4a6 <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800b49e:	6817      	ldr	r7, [r2, #0]
 800b4a0:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 800b4a4:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 800b4a6:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 800b4a8:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 800b4ac:	bf34      	ite	cc
 800b4ae:	4675      	movcc	r5, lr
 800b4b0:	f102 0e20 	addcs.w	lr, r2, #32
 800b4b4:	4563      	cmp	r3, ip
 800b4b6:	60d5      	str	r5, [r2, #12]
 800b4b8:	f10c 0501 	add.w	r5, ip, #1
 800b4bc:	4672      	mov	r2, lr
 800b4be:	46ac      	mov	ip, r5
 800b4c0:	d8e3      	bhi.n	800b48a <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b4c2:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 800b4c6:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800b4c8:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ce:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 800b4d0:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 800b4d4:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800b4d6:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 800b4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 800b4de:	2002      	movs	r0, #2
}
 800b4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b4e4 <HAL_ETH_DMARxDescListInit>:
{
 800b4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e8:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 800b4ea:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800b4ee:	2801      	cmp	r0, #1
 800b4f0:	d033      	beq.n	800b55a <HAL_ETH_DMARxDescListInit+0x76>
 800b4f2:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b4f6:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 800b4f8:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 800b4fa:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b4fe:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 800b502:	b1eb      	cbz	r3, 800b540 <HAL_ETH_DMARxDescListInit+0x5c>
 800b504:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 800b506:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b50a:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b50c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b510:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 800b514:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800b518:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800b51a:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 800b51c:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800b520:	45c6      	cmp	lr, r8
 800b522:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b526:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b528:	bf34      	ite	cc
 800b52a:	4675      	movcc	r5, lr
 800b52c:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 800b530:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b532:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 800b534:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 800b536:	f10c 0501 	add.w	r5, ip, #1
 800b53a:	4672      	mov	r2, lr
 800b53c:	46ac      	mov	ip, r5
 800b53e:	d8e9      	bhi.n	800b514 <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b540:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 800b542:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800b544:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b54a:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 800b54c:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 800b550:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800b552:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 800b556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 800b55a:	2002      	movs	r0, #2
}
 800b55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b560 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800b560:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b564:	2b01      	cmp	r3, #1
 800b566:	d078      	beq.n	800b65a <HAL_ETH_TransmitFrame+0xfa>
 800b568:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b56c:	2302      	movs	r3, #2
 800b56e:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 800b570:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b574:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 800b578:	2900      	cmp	r1, #0
 800b57a:	d03c      	beq.n	800b5f6 <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b57c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b57e:	6818      	ldr	r0, [r3, #0]
 800b580:	2800      	cmp	r0, #0
 800b582:	db60      	blt.n	800b646 <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b584:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800b588:	4281      	cmp	r1, r0
{
 800b58a:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b58c:	d93c      	bls.n	800b608 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800b58e:	4c34      	ldr	r4, [pc, #208]	; (800b660 <HAL_ETH_TransmitFrame+0x100>)
 800b590:	fba4 4c01 	umull	r4, ip, r4, r1
 800b594:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800b598:	fb00 101c 	mls	r0, r0, ip, r1
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d030      	beq.n	800b602 <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 800b5a0:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800b5a4:	482f      	ldr	r0, [pc, #188]	; (800b664 <HAL_ETH_TransmitFrame+0x104>)
 800b5a6:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 800b5aa:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b5ac:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800b5b0:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 800b5b4:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b5b8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800b5bc:	e00f      	b.n	800b5de <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 800b5be:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b5c0:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 800b5c2:	d104      	bne.n	800b5ce <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b5c4:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b5c6:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b5c8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800b5cc:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b5ce:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 800b5d0:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b5d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 800b5d6:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b5d8:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b5da:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800b5dc:	d03b      	beq.n	800b656 <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800b5de:	6818      	ldr	r0, [r3, #0]
 800b5e0:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800b5e4:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 800b5e6:	2c00      	cmp	r4, #0
 800b5e8:	d1e9      	bne.n	800b5be <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b5ea:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b5ec:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b5ee:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800b5f2:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 800b5f4:	e7eb      	b.n	800b5ce <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 800b5f6:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 800b5f8:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b5fc:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 800b600:	4770      	bx	lr
  if (bufcount == 1)
 800b602:	f1bc 0f01 	cmp.w	ip, #1
 800b606:	d1cd      	bne.n	800b5a4 <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b608:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b60a:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b60e:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b610:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b614:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b616:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b618:	6819      	ldr	r1, [r3, #0]
 800b61a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b61e:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b620:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800b622:	6813      	ldr	r3, [r2, #0]
 800b624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b628:	6959      	ldr	r1, [r3, #20]
 800b62a:	0749      	lsls	r1, r1, #29
 800b62c:	d503      	bpl.n	800b636 <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b62e:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 800b630:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b632:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 800b634:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 800b636:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 800b638:	2101      	movs	r1, #1
  return HAL_OK;
 800b63a:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b63c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b640:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800b644:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b646:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 800b648:	2300      	movs	r3, #0
    return HAL_ERROR;
 800b64a:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b64c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b650:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 800b654:	4770      	bx	lr
 800b656:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b658:	e7e3      	b.n	800b622 <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 800b65a:	2002      	movs	r0, #2
}
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	ac02b00b 	.word	0xac02b00b
 800b664:	fffffa0c 	.word	0xfffffa0c

0800b668 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 800b668:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d02f      	beq.n	800b6d0 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 800b670:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b672:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b674:	4602      	mov	r2, r0
{
 800b676:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 800b678:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b67a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800b67e:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	2900      	cmp	r1, #0
 800b686:	db15      	blt.n	800b6b4 <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 800b688:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800b68a:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800b68c:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800b68e:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800b692:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b696:	d016      	beq.n	800b6c6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800b698:	6819      	ldr	r1, [r3, #0]
 800b69a:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 800b69e:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800b6a0:	d118      	bne.n	800b6d4 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800b6a2:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 800b6a4:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800b6a6:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 800b6a8:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b6aa:	6819      	ldr	r1, [r3, #0]
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	db01      	blt.n	800b6b4 <HAL_ETH_GetReceivedFrame_IT+0x4c>
 800b6b0:	2804      	cmp	r0, #4
 800b6b2:	d1ea      	bne.n	800b68a <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 800b6b4:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800b6b6:	2100      	movs	r1, #0
  return HAL_ERROR;
 800b6b8:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b6ba:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b6be:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 800b6c2:	bc30      	pop	{r4, r5}
 800b6c4:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b6c6:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b6c8:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 800b6ca:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b6cc:	6293      	str	r3, [r2, #40]	; 0x28
 800b6ce:	e7ec      	b.n	800b6aa <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 800b6d0:	2002      	movs	r0, #2
}
 800b6d2:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 800b6d4:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800b6d6:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 800b6d8:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 800b6da:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 800b6dc:	d011      	beq.n	800b702 <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b6de:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b6e0:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 800b6e2:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b6e4:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b6e6:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b6e8:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 800b6ec:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b6ee:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b6f0:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b6f2:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 800b6f4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 800b6f8:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b6fa:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 800b6fc:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 800b700:	e7df      	b.n	800b6c2 <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b702:	4618      	mov	r0, r3
 800b704:	6313      	str	r3, [r2, #48]	; 0x30
 800b706:	e7eb      	b.n	800b6e0 <HAL_ETH_GetReceivedFrame_IT+0x78>

0800b708 <HAL_ETH_TxCpltCallback>:
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop

0800b70c <HAL_ETH_ErrorCallback>:
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop

0800b710 <HAL_ETH_IRQHandler>:
{
 800b710:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800b712:	6803      	ldr	r3, [r0, #0]
{
 800b714:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800b716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b71a:	695d      	ldr	r5, [r3, #20]
 800b71c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800b720:	d125      	bne.n	800b76e <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800b722:	695a      	ldr	r2, [r3, #20]
 800b724:	07d2      	lsls	r2, r2, #31
 800b726:	d416      	bmi.n	800b756 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800b728:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b72c:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	041b      	lsls	r3, r3, #16
 800b732:	d400      	bmi.n	800b736 <HAL_ETH_IRQHandler+0x26>
}
 800b734:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 800b736:	4620      	mov	r0, r4
 800b738:	f7ff ffe8 	bl	800b70c <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 800b742:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800b748:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b74a:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b74c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b750:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800b754:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 800b756:	f7ff ffd7 	bl	800b708 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b762:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b764:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b768:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b76c:	e7dc      	b.n	800b728 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800b76e:	f009 ff4f 	bl	8015610 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800b776:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800b77c:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b77e:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b780:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b784:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b788:	e7ce      	b.n	800b728 <HAL_ETH_IRQHandler+0x18>
 800b78a:	bf00      	nop

0800b78c <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b78c:	8a03      	ldrh	r3, [r0, #16]
 800b78e:	2b20      	cmp	r3, #32
{
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	4604      	mov	r4, r0
 800b794:	460e      	mov	r6, r1
 800b796:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b798:	d834      	bhi.n	800b804 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b79a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b79e:	2b82      	cmp	r3, #130	; 0x82
 800b7a0:	d039      	beq.n	800b816 <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b7a2:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 800b7a4:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b7a6:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b7a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b7ac:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b7ae:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800b7b2:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b7b4:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b7b6:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b7ba:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800b7c0:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800b7c4:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b7c6:	f7fd fd9d 	bl	8009304 <HAL_GetTick>
 800b7ca:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b7cc:	e004      	b.n	800b7d8 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800b7ce:	6821      	ldr	r1, [r4, #0]
 800b7d0:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b7d2:	f013 0301 	ands.w	r3, r3, #1
 800b7d6:	d00d      	beq.n	800b7f4 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b7d8:	f7fd fd94 	bl	8009304 <HAL_GetTick>
 800b7dc:	1b83      	subs	r3, r0, r6
 800b7de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e2:	d3f4      	bcc.n	800b7ce <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800b7e4:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800b7e6:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b7e8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800b7ea:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b7ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b7f4:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800b7f6:	2101      	movs	r1, #1
  return HAL_OK;
 800b7f8:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b7fa:	b292      	uxth	r2, r2
 800b7fc:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800b7fe:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 800b802:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b804:	f240 5116 	movw	r1, #1302	; 0x516
 800b808:	4804      	ldr	r0, [pc, #16]	; (800b81c <HAL_ETH_ReadPHYRegister+0x90>)
 800b80a:	f7fa f82d 	bl	8005868 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b80e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b812:	2b82      	cmp	r3, #130	; 0x82
 800b814:	d1c5      	bne.n	800b7a2 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 800b816:	2002      	movs	r0, #2
}
 800b818:	bd70      	pop	{r4, r5, r6, pc}
 800b81a:	bf00      	nop
 800b81c:	0802e260 	.word	0x0802e260

0800b820 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b820:	8a03      	ldrh	r3, [r0, #16]
 800b822:	2b20      	cmp	r3, #32
{
 800b824:	b570      	push	{r4, r5, r6, lr}
 800b826:	4604      	mov	r4, r0
 800b828:	460d      	mov	r5, r1
 800b82a:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b82c:	d833      	bhi.n	800b896 <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b82e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b832:	2b42      	cmp	r3, #66	; 0x42
 800b834:	d038      	beq.n	800b8a8 <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b836:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 800b838:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b83a:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b83c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800b840:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b842:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b844:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800b848:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b84a:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b84c:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b84e:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b852:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b854:	430b      	orrs	r3, r1
 800b856:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800b858:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 800b85c:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b85e:	f7fd fd51 	bl	8009304 <HAL_GetTick>
 800b862:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b864:	e004      	b.n	800b870 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b86a:	f013 0301 	ands.w	r3, r3, #1
 800b86e:	d00d      	beq.n	800b88c <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b870:	f7fd fd48 	bl	8009304 <HAL_GetTick>
 800b874:	1b43      	subs	r3, r0, r5
 800b876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b87a:	d3f4      	bcc.n	800b866 <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 800b87c:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800b87e:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b880:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800b882:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b886:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800b88c:	2201      	movs	r2, #1
  return HAL_OK; 
 800b88e:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b890:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800b894:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b896:	f240 515e 	movw	r1, #1374	; 0x55e
 800b89a:	4804      	ldr	r0, [pc, #16]	; (800b8ac <HAL_ETH_WritePHYRegister+0x8c>)
 800b89c:	f7f9 ffe4 	bl	8005868 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b8a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b8a4:	2b42      	cmp	r3, #66	; 0x42
 800b8a6:	d1c6      	bne.n	800b836 <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800b8a8:	2002      	movs	r0, #2
}
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	0802e260 	.word	0x0802e260

0800b8b0 <HAL_ETH_Init>:
{
 800b8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800b8b2:	2300      	movs	r3, #0
{
 800b8b4:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800b8b6:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	f000 80f5 	beq.w	800baa8 <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800b8be:	6843      	ldr	r3, [r0, #4]
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	f200 809c 	bhi.w	800ba00 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800b8c8:	69a3      	ldr	r3, [r4, #24]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	f200 808f 	bhi.w	800b9ee <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800b8d0:	69e3      	ldr	r3, [r4, #28]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d873      	bhi.n	800b9be <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800b8d6:	6a23      	ldr	r3, [r4, #32]
 800b8d8:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800b8dc:	d177      	bne.n	800b9ce <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 800b8de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b8e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d07b      	beq.n	800b9e2 <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8ea:	4b91      	ldr	r3, [pc, #580]	; (800bb30 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b8ec:	4a91      	ldr	r2, [pc, #580]	; (800bb34 <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800b8f0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b8f4:	6459      	str	r1, [r3, #68]	; 0x44
 800b8f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b900:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b902:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b904:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b90c:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b90e:	6851      	ldr	r1, [r2, #4]
 800b910:	6a20      	ldr	r0, [r4, #32]
 800b912:	4301      	orrs	r1, r0
 800b914:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	f042 0201 	orr.w	r2, r2, #1
 800b91c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800b91e:	f7fd fcf1 	bl	8009304 <HAL_GetTick>
 800b922:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b924:	e005      	b.n	800b932 <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800b926:	f7fd fced 	bl	8009304 <HAL_GetTick>
 800b92a:	1b43      	subs	r3, r0, r5
 800b92c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b930:	d86f      	bhi.n	800ba12 <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800b938:	6812      	ldr	r2, [r2, #0]
 800b93a:	07d0      	lsls	r0, r2, #31
 800b93c:	d4f3      	bmi.n	800b926 <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 800b93e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800b940:	f003 faac 	bl	800ee9c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b944:	4b7c      	ldr	r3, [pc, #496]	; (800bb38 <HAL_ETH_Init+0x288>)
 800b946:	4a7d      	ldr	r2, [pc, #500]	; (800bb3c <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800b948:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b94c:	4403      	add	r3, r0
 800b94e:	4293      	cmp	r3, r2
 800b950:	d274      	bcs.n	800ba3c <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800b952:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800b956:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b95c:	2100      	movs	r1, #0
 800b95e:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800b960:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b962:	f7ff ff5d 	bl	800b820 <HAL_ETH_WritePHYRegister>
 800b966:	4605      	mov	r5, r0
 800b968:	2800      	cmp	r0, #0
 800b96a:	d15c      	bne.n	800ba26 <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 800b96c:	20ff      	movs	r0, #255	; 0xff
 800b96e:	f7fd fccf 	bl	8009310 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b972:	6863      	ldr	r3, [r4, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d178      	bne.n	800ba6a <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800b978:	68a3      	ldr	r3, [r4, #8]
 800b97a:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800b97e:	f040 809e 	bne.w	800babe <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800b982:	68e3      	ldr	r3, [r4, #12]
 800b984:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800b988:	f040 8092 	bne.w	800bab0 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800b98c:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800b98e:	08db      	lsrs	r3, r3, #3
 800b990:	2100      	movs	r1, #0
 800b992:	4620      	mov	r0, r4
 800b994:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800b998:	b292      	uxth	r2, r2
 800b99a:	f7ff ff41 	bl	800b820 <HAL_ETH_WritePHYRegister>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d141      	bne.n	800ba26 <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 800b9a2:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b9a6:	f7fd fcb3 	bl	8009310 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	f7ff fcdd 	bl	800b36c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800b9b2:	2301      	movs	r3, #1
}
 800b9b4:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800b9b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800b9ba:	b003      	add	sp, #12
 800b9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800b9be:	21e0      	movs	r1, #224	; 0xe0
 800b9c0:	485f      	ldr	r0, [pc, #380]	; (800bb40 <HAL_ETH_Init+0x290>)
 800b9c2:	f7f9 ff51 	bl	8005868 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800b9c6:	6a23      	ldr	r3, [r4, #32]
 800b9c8:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800b9cc:	d087      	beq.n	800b8de <HAL_ETH_Init+0x2e>
 800b9ce:	21e1      	movs	r1, #225	; 0xe1
 800b9d0:	485b      	ldr	r0, [pc, #364]	; (800bb40 <HAL_ETH_Init+0x290>)
 800b9d2:	f7f9 ff49 	bl	8005868 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800b9d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b9da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d183      	bne.n	800b8ea <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 800b9e2:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 800b9e4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800b9e8:	f009 fd84 	bl	80154f4 <HAL_ETH_MspInit>
 800b9ec:	e77d      	b.n	800b8ea <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800b9ee:	21df      	movs	r1, #223	; 0xdf
 800b9f0:	4853      	ldr	r0, [pc, #332]	; (800bb40 <HAL_ETH_Init+0x290>)
 800b9f2:	f7f9 ff39 	bl	8005868 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800b9f6:	69e3      	ldr	r3, [r4, #28]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	f67f af6c 	bls.w	800b8d6 <HAL_ETH_Init+0x26>
 800b9fe:	e7de      	b.n	800b9be <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800ba00:	21de      	movs	r1, #222	; 0xde
 800ba02:	484f      	ldr	r0, [pc, #316]	; (800bb40 <HAL_ETH_Init+0x290>)
 800ba04:	f7f9 ff30 	bl	8005868 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800ba08:	69a3      	ldr	r3, [r4, #24]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	f67f af60 	bls.w	800b8d0 <HAL_ETH_Init+0x20>
 800ba10:	e7ed      	b.n	800b9ee <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800ba12:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 800ba14:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 800ba16:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800ba18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800ba1c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800ba20:	4628      	mov	r0, r5
 800ba22:	b003      	add	sp, #12
 800ba24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 800ba26:	4620      	mov	r0, r4
 800ba28:	2101      	movs	r1, #1
 800ba2a:	f7ff fc9f 	bl	800b36c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800ba2e:	2301      	movs	r3, #1
      return HAL_ERROR;
 800ba30:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 800ba32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800ba36:	4628      	mov	r0, r5
 800ba38:	b003      	add	sp, #12
 800ba3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800ba3c:	4b41      	ldr	r3, [pc, #260]	; (800bb44 <HAL_ETH_Init+0x294>)
 800ba3e:	4a42      	ldr	r2, [pc, #264]	; (800bb48 <HAL_ETH_Init+0x298>)
 800ba40:	4403      	add	r3, r0
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d90e      	bls.n	800ba64 <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800ba46:	4b41      	ldr	r3, [pc, #260]	; (800bb4c <HAL_ETH_Init+0x29c>)
 800ba48:	4a41      	ldr	r2, [pc, #260]	; (800bb50 <HAL_ETH_Init+0x2a0>)
 800ba4a:	4403      	add	r3, r0
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d382      	bcc.n	800b956 <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800ba50:	4b40      	ldr	r3, [pc, #256]	; (800bb54 <HAL_ETH_Init+0x2a4>)
 800ba52:	4a41      	ldr	r2, [pc, #260]	; (800bb58 <HAL_ETH_Init+0x2a8>)
 800ba54:	4403      	add	r3, r0
 800ba56:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800ba58:	bf94      	ite	ls
 800ba5a:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800ba5e:	f045 0510 	orrhi.w	r5, r5, #16
 800ba62:	e778      	b.n	800b956 <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800ba64:	f045 050c 	orr.w	r5, r5, #12
 800ba68:	e775      	b.n	800b956 <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 800ba6a:	f7fd fc4b 	bl	8009304 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800ba6e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800ba72:	4606      	mov	r6, r0
 800ba74:	e002      	b.n	800ba7c <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800ba76:	9b00      	ldr	r3, [sp, #0]
 800ba78:	0759      	lsls	r1, r3, #29
 800ba7a:	d426      	bmi.n	800baca <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800ba7c:	466a      	mov	r2, sp
 800ba7e:	2101      	movs	r1, #1
 800ba80:	4620      	mov	r0, r4
 800ba82:	f7ff fe83 	bl	800b78c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800ba86:	f7fd fc3d 	bl	8009304 <HAL_GetTick>
 800ba8a:	1b80      	subs	r0, r0, r6
 800ba8c:	42b8      	cmp	r0, r7
 800ba8e:	d9f2      	bls.n	800ba76 <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 800ba90:	2101      	movs	r1, #1
 800ba92:	4620      	mov	r0, r4
 800ba94:	f7ff fc6a 	bl	800b36c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800ba98:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800ba9a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800ba9c:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800ba9e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800baa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800baa6:	e7bb      	b.n	800ba20 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 800baa8:	2501      	movs	r5, #1
}
 800baaa:	4628      	mov	r0, r5
 800baac:	b003      	add	sp, #12
 800baae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800bab0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800bab4:	4822      	ldr	r0, [pc, #136]	; (800bb40 <HAL_ETH_Init+0x290>)
 800bab6:	f7f9 fed7 	bl	8005868 <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800baba:	68e3      	ldr	r3, [r4, #12]
 800babc:	e766      	b.n	800b98c <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800babe:	f240 11c5 	movw	r1, #453	; 0x1c5
 800bac2:	481f      	ldr	r0, [pc, #124]	; (800bb40 <HAL_ETH_Init+0x290>)
 800bac4:	f7f9 fed0 	bl	8005868 <assert_failed>
 800bac8:	e75b      	b.n	800b982 <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800baca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bace:	2100      	movs	r1, #0
 800bad0:	4620      	mov	r0, r4
 800bad2:	f7ff fea5 	bl	800b820 <HAL_ETH_WritePHYRegister>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d1a5      	bne.n	800ba26 <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 800bada:	f7fd fc13 	bl	8009304 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800bade:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800bae2:	4606      	mov	r6, r0
 800bae4:	e002      	b.n	800baec <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800bae6:	9b00      	ldr	r3, [sp, #0]
 800bae8:	069a      	lsls	r2, r3, #26
 800baea:	d40a      	bmi.n	800bb02 <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800baec:	466a      	mov	r2, sp
 800baee:	2101      	movs	r1, #1
 800baf0:	4620      	mov	r0, r4
 800baf2:	f7ff fe4b 	bl	800b78c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800baf6:	f7fd fc05 	bl	8009304 <HAL_GetTick>
 800bafa:	1b80      	subs	r0, r0, r6
 800bafc:	42b8      	cmp	r0, r7
 800bafe:	d9f2      	bls.n	800bae6 <HAL_ETH_Init+0x236>
 800bb00:	e7c6      	b.n	800ba90 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800bb02:	466a      	mov	r2, sp
 800bb04:	2110      	movs	r1, #16
 800bb06:	4620      	mov	r0, r4
 800bb08:	f7ff fe40 	bl	800b78c <HAL_ETH_ReadPHYRegister>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d18a      	bne.n	800ba26 <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800bb10:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800bb12:	f013 0204 	ands.w	r2, r3, #4
 800bb16:	bf18      	it	ne
 800bb18:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800bb1c:	079b      	lsls	r3, r3, #30
 800bb1e:	60e2      	str	r2, [r4, #12]
 800bb20:	d501      	bpl.n	800bb26 <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800bb22:	60a0      	str	r0, [r4, #8]
 800bb24:	e741      	b.n	800b9aa <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 800bb26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb2a:	60a3      	str	r3, [r4, #8]
 800bb2c:	e73d      	b.n	800b9aa <HAL_ETH_Init+0xfa>
 800bb2e:	bf00      	nop
 800bb30:	40023800 	.word	0x40023800
 800bb34:	40013800 	.word	0x40013800
 800bb38:	feced300 	.word	0xfeced300
 800bb3c:	00e4e1c0 	.word	0x00e4e1c0
 800bb40:	0802e260 	.word	0x0802e260
 800bb44:	fde9f140 	.word	0xfde9f140
 800bb48:	017d783f 	.word	0x017d783f
 800bb4c:	fc6c7900 	.word	0xfc6c7900
 800bb50:	02625a00 	.word	0x02625a00
 800bb54:	fa0a1f00 	.word	0xfa0a1f00
 800bb58:	02faf07f 	.word	0x02faf07f

0800bb5c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800bb5c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d044      	beq.n	800bbee <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800bb64:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800bb66:	2202      	movs	r2, #2
{  
 800bb68:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800bb6a:	2601      	movs	r6, #1
{  
 800bb6c:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 800bb6e:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 800bb70:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800bb74:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800bb78:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800bb7a:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb7c:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	f042 0208 	orr.w	r2, r2, #8
 800bb84:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb8a:	f7fd fbc1 	bl	8009310 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bb8e:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb90:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800bb96:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	f042 0204 	orr.w	r2, r2, #4
 800bb9e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bba4:	f7fd fbb4 	bl	8009310 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bba8:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbaa:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bbb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800bbb4:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bbb6:	699a      	ldr	r2, [r3, #24]
 800bbb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bbbc:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbc2:	f7fd fba5 	bl	8009310 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800bbc6:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800bbc8:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 800bbca:	9a01      	ldr	r2, [sp, #4]
 800bbcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbd0:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800bbd2:	699a      	ldr	r2, [r3, #24]
 800bbd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbd8:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800bbda:	699a      	ldr	r2, [r3, #24]
 800bbdc:	f042 0202 	orr.w	r2, r2, #2
 800bbe0:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 800bbe2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bbe6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800bbea:	b004      	add	sp, #16
 800bbec:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800bbee:	2002      	movs	r0, #2
}
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop

0800bbf4 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800bbf4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d046      	beq.n	800bc8a <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bbfc:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800bbfe:	2102      	movs	r1, #2
{  
 800bc00:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc02:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 800bc06:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800bc08:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 800bc0c:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 800bc0e:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800bc12:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc14:	6991      	ldr	r1, [r2, #24]
 800bc16:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc18:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc1a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800bc1e:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800bc20:	6991      	ldr	r1, [r2, #24]
 800bc22:	f021 0102 	bic.w	r1, r1, #2
 800bc26:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800bc28:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	f022 0204 	bic.w	r2, r2, #4
 800bc30:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc36:	f7fd fb6b 	bl	8009310 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bc3a:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc3c:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bc42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800bc46:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bc48:	699a      	ldr	r2, [r3, #24]
 800bc4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bc4e:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc54:	f7fd fb5c 	bl	8009310 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800bc58:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc5a:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800bc5c:	9902      	ldr	r1, [sp, #8]
 800bc5e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800bc62:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800bc64:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	f022 0208 	bic.w	r2, r2, #8
 800bc6c:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc72:	f7fd fb4d 	bl	8009310 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bc76:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800bc78:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800bc7e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bc82:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800bc86:	b004      	add	sp, #16
 800bc88:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800bc8a:	2002      	movs	r0, #2
}
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop

0800bc90 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800bc90:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	f000 8249 	beq.w	800c12c <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bc9a:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800bc9c:	2202      	movs	r2, #2
{
 800bc9e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bca0:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800bca4:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800bca6:	f04f 0101 	mov.w	r1, #1
 800bcaa:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800bcac:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800bcb0:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bcb4:	f040 8207 	bne.w	800c0c6 <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800bcb8:	68eb      	ldr	r3, [r5, #12]
 800bcba:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800bcbe:	f040 8114 	bne.w	800beea <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800bcc2:	2c00      	cmp	r4, #0
 800bcc4:	f000 8119 	beq.w	800befa <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800bcc8:	6823      	ldr	r3, [r4, #0]
 800bcca:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800bcce:	f040 8139 	bne.w	800bf44 <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800bcd8:	f040 816b 	bne.w	800bfb2 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800bcdc:	68a3      	ldr	r3, [r4, #8]
 800bcde:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800bce2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bce6:	d002      	beq.n	800bcee <HAL_ETH_ConfigMAC+0x5e>
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f040 8221 	bne.w	800c130 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800bcee:	68e3      	ldr	r3, [r4, #12]
 800bcf0:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800bcf4:	f040 8152 	bne.w	800bf9c <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800bcf8:	6923      	ldr	r3, [r4, #16]
 800bcfa:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800bcfe:	f040 8142 	bne.w	800bf86 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bd02:	6963      	ldr	r3, [r4, #20]
 800bd04:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bd08:	f040 8132 	bne.w	800bf70 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bd0c:	69a3      	ldr	r3, [r4, #24]
 800bd0e:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bd12:	f040 8122 	bne.w	800bf5a <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800bd16:	69e3      	ldr	r3, [r4, #28]
 800bd18:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800bd1c:	f040 81a3 	bne.w	800c066 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800bd20:	6a23      	ldr	r3, [r4, #32]
 800bd22:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bd26:	f040 818e 	bne.w	800c046 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800bd2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd2c:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800bd30:	f040 8193 	bne.w	800c05a <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800bd34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd36:	f033 0310 	bics.w	r3, r3, #16
 800bd3a:	f040 8179 	bne.w	800c030 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800bd3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bd40:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800bd44:	f040 819a 	bne.w	800c07c <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800bd48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd4a:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800bd4e:	d003      	beq.n	800bd58 <HAL_ETH_ConfigMAC+0xc8>
 800bd50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd54:	f040 81d8 	bne.w	800c108 <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800bd58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd5e:	2a40      	cmp	r2, #64	; 0x40
 800bd60:	d002      	beq.n	800bd68 <HAL_ETH_ConfigMAC+0xd8>
 800bd62:	2b80      	cmp	r3, #128	; 0x80
 800bd64:	f040 81ba 	bne.w	800c0dc <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800bd68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd6a:	f033 0320 	bics.w	r3, r3, #32
 800bd6e:	f040 80de 	bne.w	800bf2e <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bd72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd74:	f033 0308 	bics.w	r3, r3, #8
 800bd78:	f040 80cf 	bne.w	800bf1a <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bd7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	f200 80a5 	bhi.w	800bece <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800bd84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bd86:	f240 4204 	movw	r2, #1028	; 0x404
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	bf18      	it	ne
 800bd8e:	2b10      	cmpne	r3, #16
 800bd90:	d003      	beq.n	800bd9a <HAL_ETH_ConfigMAC+0x10a>
 800bd92:	f033 0304 	bics.w	r3, r3, #4
 800bd96:	f040 81c3 	bne.w	800c120 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800bd9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bd9c:	f033 0202 	bics.w	r2, r3, #2
 800bda0:	d004      	beq.n	800bdac <HAL_ETH_ConfigMAC+0x11c>
 800bda2:	f240 4202 	movw	r2, #1026	; 0x402
 800bda6:	4293      	cmp	r3, r2
 800bda8:	f040 81a3 	bne.w	800c0f2 <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800bdac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bdae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdb2:	f080 816e 	bcs.w	800c092 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800bdb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bdb8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bdbc:	f040 8173 	bne.w	800c0a6 <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800bdc0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bdc2:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800bdc6:	f040 8178 	bne.w	800c0ba <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800bdca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bdcc:	f033 0308 	bics.w	r3, r3, #8
 800bdd0:	f040 8123 	bne.w	800c01a <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800bdd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdd6:	f033 0304 	bics.w	r3, r3, #4
 800bdda:	f040 8113 	bne.w	800c004 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800bdde:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bde0:	f033 0302 	bics.w	r3, r3, #2
 800bde4:	f040 8103 	bne.w	800bfee <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800bde8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bdea:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800bdee:	f040 80f3 	bne.w	800bfd8 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800bdf2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bdf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdf8:	f080 80e8 	bcs.w	800bfcc <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800bdfc:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800bdfe:	49b5      	ldr	r1, [pc, #724]	; (800c0d4 <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800be00:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800be02:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800be04:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800be06:	6860      	ldr	r0, [r4, #4]
 800be08:	4303      	orrs	r3, r0
 800be0a:	68a0      	ldr	r0, [r4, #8]
 800be0c:	4303      	orrs	r3, r0
 800be0e:	68e0      	ldr	r0, [r4, #12]
 800be10:	4303      	orrs	r3, r0
 800be12:	6920      	ldr	r0, [r4, #16]
 800be14:	4303      	orrs	r3, r0
 800be16:	6960      	ldr	r0, [r4, #20]
 800be18:	4303      	orrs	r3, r0
 800be1a:	69a0      	ldr	r0, [r4, #24]
 800be1c:	4303      	orrs	r3, r0
 800be1e:	69e0      	ldr	r0, [r4, #28]
 800be20:	4303      	orrs	r3, r0
 800be22:	6a20      	ldr	r0, [r4, #32]
 800be24:	4303      	orrs	r3, r0
 800be26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800be28:	4303      	orrs	r3, r0
 800be2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800be2c:	4303      	orrs	r3, r0
 800be2e:	68a8      	ldr	r0, [r5, #8]
 800be30:	4303      	orrs	r3, r0
 800be32:	68e8      	ldr	r0, [r5, #12]
 800be34:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800be36:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800be38:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800be3a:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800be3c:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800be3e:	f7fd fa67 	bl	8009310 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800be42:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800be44:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800be46:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800be4a:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800be4c:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800be4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be50:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800be52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be54:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800be56:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800be58:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800be5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800be5c:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800be5e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800be60:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800be62:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be64:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800be66:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800be68:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800be6a:	f7fd fa51 	bl	8009310 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800be6e:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800be70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800be72:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800be74:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800be76:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800be78:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800be7c:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800be7e:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800be80:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800be82:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800be86:	4303      	orrs	r3, r0
 800be88:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800be8a:	4303      	orrs	r3, r0
 800be8c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800be8e:	4303      	orrs	r3, r0
 800be90:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800be92:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800be94:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800be96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800be9a:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800be9c:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800be9e:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800bea0:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bea2:	f7fd fa35 	bl	8009310 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800bea6:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800bea8:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800beaa:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800beae:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800beb0:	430a      	orrs	r2, r1
 800beb2:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800beb4:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800beb6:	f7fd fa2b 	bl	8009310 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800beba:	682b      	ldr	r3, [r5, #0]
 800bebc:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800bebe:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800bec0:	2201      	movs	r2, #1
  return HAL_OK;  
 800bec2:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800bec4:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bec8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800becc:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bece:	f240 6123 	movw	r1, #1571	; 0x623
 800bed2:	4881      	ldr	r0, [pc, #516]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bed4:	f7f9 fcc8 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800bed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800beda:	f240 4204 	movw	r2, #1028	; 0x404
 800bede:	4293      	cmp	r3, r2
 800bee0:	bf18      	it	ne
 800bee2:	2b10      	cmpne	r3, #16
 800bee4:	f47f af55 	bne.w	800bd92 <HAL_ETH_ConfigMAC+0x102>
 800bee8:	e757      	b.n	800bd9a <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800beea:	f240 610e 	movw	r1, #1550	; 0x60e
 800beee:	487a      	ldr	r0, [pc, #488]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bef0:	f7f9 fcba 	bl	8005868 <assert_failed>
  if (macconf != NULL)
 800bef4:	2c00      	cmp	r4, #0
 800bef6:	f47f aee7 	bne.w	800bcc8 <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800befa:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800befc:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800befe:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800bf02:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bf04:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800bf06:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bf0a:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800bf0c:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800bf0e:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf10:	f7fd f9fe 	bl	8009310 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800bf14:	682b      	ldr	r3, [r5, #0]
 800bf16:	601c      	str	r4, [r3, #0]
 800bf18:	e7d1      	b.n	800bebe <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bf1a:	f240 6122 	movw	r1, #1570	; 0x622
 800bf1e:	486e      	ldr	r0, [pc, #440]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bf20:	f7f9 fca2 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bf24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	f67f af2c 	bls.w	800bd84 <HAL_ETH_ConfigMAC+0xf4>
 800bf2c:	e7cf      	b.n	800bece <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800bf2e:	f240 6121 	movw	r1, #1569	; 0x621
 800bf32:	4869      	ldr	r0, [pc, #420]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bf34:	f7f9 fc98 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bf38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf3a:	f033 0308 	bics.w	r3, r3, #8
 800bf3e:	f43f af1d 	beq.w	800bd7c <HAL_ETH_ConfigMAC+0xec>
 800bf42:	e7ea      	b.n	800bf1a <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800bf44:	f240 6113 	movw	r1, #1555	; 0x613
 800bf48:	4863      	ldr	r0, [pc, #396]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bf4a:	f7f9 fc8d 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bf4e:	6863      	ldr	r3, [r4, #4]
 800bf50:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800bf54:	f43f aec2 	beq.w	800bcdc <HAL_ETH_ConfigMAC+0x4c>
 800bf58:	e02b      	b.n	800bfb2 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bf5a:	f240 6119 	movw	r1, #1561	; 0x619
 800bf5e:	485e      	ldr	r0, [pc, #376]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bf60:	f7f9 fc82 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800bf64:	69e3      	ldr	r3, [r4, #28]
 800bf66:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800bf6a:	f43f aed9 	beq.w	800bd20 <HAL_ETH_ConfigMAC+0x90>
 800bf6e:	e07a      	b.n	800c066 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bf70:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800bf74:	4858      	ldr	r0, [pc, #352]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bf76:	f7f9 fc77 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bf7a:	69a3      	ldr	r3, [r4, #24]
 800bf7c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bf80:	f43f aec9 	beq.w	800bd16 <HAL_ETH_ConfigMAC+0x86>
 800bf84:	e7e9      	b.n	800bf5a <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800bf86:	f240 6117 	movw	r1, #1559	; 0x617
 800bf8a:	4853      	ldr	r0, [pc, #332]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bf8c:	f7f9 fc6c 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bf90:	6963      	ldr	r3, [r4, #20]
 800bf92:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bf96:	f43f aeb9 	beq.w	800bd0c <HAL_ETH_ConfigMAC+0x7c>
 800bf9a:	e7e9      	b.n	800bf70 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800bf9c:	f240 6116 	movw	r1, #1558	; 0x616
 800bfa0:	484d      	ldr	r0, [pc, #308]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bfa2:	f7f9 fc61 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800bfa6:	6923      	ldr	r3, [r4, #16]
 800bfa8:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800bfac:	f43f aea9 	beq.w	800bd02 <HAL_ETH_ConfigMAC+0x72>
 800bfb0:	e7e9      	b.n	800bf86 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bfb2:	f240 6114 	movw	r1, #1556	; 0x614
 800bfb6:	4848      	ldr	r0, [pc, #288]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bfb8:	f7f9 fc56 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800bfbc:	68a3      	ldr	r3, [r4, #8]
 800bfbe:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800bfc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bfc6:	f47f ae8f 	bne.w	800bce8 <HAL_ETH_ConfigMAC+0x58>
 800bfca:	e690      	b.n	800bcee <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800bfcc:	f240 612d 	movw	r1, #1581	; 0x62d
 800bfd0:	4841      	ldr	r0, [pc, #260]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bfd2:	f7f9 fc49 	bl	8005868 <assert_failed>
 800bfd6:	e711      	b.n	800bdfc <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800bfd8:	f240 612c 	movw	r1, #1580	; 0x62c
 800bfdc:	483e      	ldr	r0, [pc, #248]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bfde:	f7f9 fc43 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800bfe2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bfe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfe8:	f4ff af08 	bcc.w	800bdfc <HAL_ETH_ConfigMAC+0x16c>
 800bfec:	e7ee      	b.n	800bfcc <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800bfee:	f240 612b 	movw	r1, #1579	; 0x62b
 800bff2:	4839      	ldr	r0, [pc, #228]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800bff4:	f7f9 fc38 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800bff8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bffa:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800bffe:	f43f aef8 	beq.w	800bdf2 <HAL_ETH_ConfigMAC+0x162>
 800c002:	e7e9      	b.n	800bfd8 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800c004:	f240 612a 	movw	r1, #1578	; 0x62a
 800c008:	4833      	ldr	r0, [pc, #204]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c00a:	f7f9 fc2d 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800c00e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c010:	f033 0302 	bics.w	r3, r3, #2
 800c014:	f43f aee8 	beq.w	800bde8 <HAL_ETH_ConfigMAC+0x158>
 800c018:	e7e9      	b.n	800bfee <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800c01a:	f240 6129 	movw	r1, #1577	; 0x629
 800c01e:	482e      	ldr	r0, [pc, #184]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c020:	f7f9 fc22 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800c024:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c026:	f033 0304 	bics.w	r3, r3, #4
 800c02a:	f43f aed8 	beq.w	800bdde <HAL_ETH_ConfigMAC+0x14e>
 800c02e:	e7e9      	b.n	800c004 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800c030:	f240 611d 	movw	r1, #1565	; 0x61d
 800c034:	4828      	ldr	r0, [pc, #160]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c036:	f7f9 fc17 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800c03a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c03c:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800c040:	f43f ae82 	beq.w	800bd48 <HAL_ETH_ConfigMAC+0xb8>
 800c044:	e01a      	b.n	800c07c <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800c046:	f240 611b 	movw	r1, #1563	; 0x61b
 800c04a:	4823      	ldr	r0, [pc, #140]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c04c:	f7f9 fc0c 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800c050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c052:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800c056:	f43f ae6d 	beq.w	800bd34 <HAL_ETH_ConfigMAC+0xa4>
 800c05a:	f240 611c 	movw	r1, #1564	; 0x61c
 800c05e:	481e      	ldr	r0, [pc, #120]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c060:	f7f9 fc02 	bl	8005868 <assert_failed>
 800c064:	e666      	b.n	800bd34 <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800c066:	f240 611a 	movw	r1, #1562	; 0x61a
 800c06a:	481b      	ldr	r0, [pc, #108]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c06c:	f7f9 fbfc 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800c070:	6a23      	ldr	r3, [r4, #32]
 800c072:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c076:	f43f ae58 	beq.w	800bd2a <HAL_ETH_ConfigMAC+0x9a>
 800c07a:	e7e4      	b.n	800c046 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800c07c:	f240 611e 	movw	r1, #1566	; 0x61e
 800c080:	4815      	ldr	r0, [pc, #84]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c082:	f7f9 fbf1 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800c086:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c088:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800c08c:	f47f ae60 	bne.w	800bd50 <HAL_ETH_ConfigMAC+0xc0>
 800c090:	e662      	b.n	800bd58 <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800c092:	f240 6126 	movw	r1, #1574	; 0x626
 800c096:	4810      	ldr	r0, [pc, #64]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c098:	f7f9 fbe6 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800c09c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c09e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c0a2:	f43f ae8d 	beq.w	800bdc0 <HAL_ETH_ConfigMAC+0x130>
 800c0a6:	f240 6127 	movw	r1, #1575	; 0x627
 800c0aa:	480b      	ldr	r0, [pc, #44]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c0ac:	f7f9 fbdc 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800c0b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c0b2:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800c0b6:	f43f ae88 	beq.w	800bdca <HAL_ETH_ConfigMAC+0x13a>
 800c0ba:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800c0be:	4806      	ldr	r0, [pc, #24]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c0c0:	f7f9 fbd2 	bl	8005868 <assert_failed>
 800c0c4:	e681      	b.n	800bdca <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800c0c6:	f240 610d 	movw	r1, #1549	; 0x60d
 800c0ca:	4803      	ldr	r0, [pc, #12]	; (800c0d8 <HAL_ETH_ConfigMAC+0x448>)
 800c0cc:	f7f9 fbcc 	bl	8005868 <assert_failed>
 800c0d0:	e5f2      	b.n	800bcb8 <HAL_ETH_ConfigMAC+0x28>
 800c0d2:	bf00      	nop
 800c0d4:	ff20810f 	.word	0xff20810f
 800c0d8:	0802e260 	.word	0x0802e260
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800c0dc:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800c0e0:	4816      	ldr	r0, [pc, #88]	; (800c13c <HAL_ETH_ConfigMAC+0x4ac>)
 800c0e2:	f7f9 fbc1 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800c0e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0e8:	f033 0320 	bics.w	r3, r3, #32
 800c0ec:	f43f ae41 	beq.w	800bd72 <HAL_ETH_ConfigMAC+0xe2>
 800c0f0:	e71d      	b.n	800bf2e <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800c0f2:	f240 6125 	movw	r1, #1573	; 0x625
 800c0f6:	4811      	ldr	r0, [pc, #68]	; (800c13c <HAL_ETH_ConfigMAC+0x4ac>)
 800c0f8:	f7f9 fbb6 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800c0fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c0fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c102:	f4ff ae58 	bcc.w	800bdb6 <HAL_ETH_ConfigMAC+0x126>
 800c106:	e7c4      	b.n	800c092 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800c108:	f240 611f 	movw	r1, #1567	; 0x61f
 800c10c:	480b      	ldr	r0, [pc, #44]	; (800c13c <HAL_ETH_ConfigMAC+0x4ac>)
 800c10e:	f7f9 fbab 	bl	8005868 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800c112:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c114:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c118:	2a40      	cmp	r2, #64	; 0x40
 800c11a:	f47f ae22 	bne.w	800bd62 <HAL_ETH_ConfigMAC+0xd2>
 800c11e:	e623      	b.n	800bd68 <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800c120:	f240 6124 	movw	r1, #1572	; 0x624
 800c124:	4805      	ldr	r0, [pc, #20]	; (800c13c <HAL_ETH_ConfigMAC+0x4ac>)
 800c126:	f7f9 fb9f 	bl	8005868 <assert_failed>
 800c12a:	e636      	b.n	800bd9a <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800c12c:	2002      	movs	r0, #2
}
 800c12e:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800c130:	f240 6115 	movw	r1, #1557	; 0x615
 800c134:	4801      	ldr	r0, [pc, #4]	; (800c13c <HAL_ETH_ConfigMAC+0x4ac>)
 800c136:	f7f9 fb97 	bl	8005868 <assert_failed>
 800c13a:	e5d8      	b.n	800bcee <HAL_ETH_ConfigMAC+0x5e>
 800c13c:	0802e260 	.word	0x0802e260

0800c140 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800c140:	4b18      	ldr	r3, [pc, #96]	; (800c1a4 <FLASH_SetErrorCode+0x64>)
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	079b      	lsls	r3, r3, #30
 800c146:	d504      	bpl.n	800c152 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800c148:	4a17      	ldr	r2, [pc, #92]	; (800c1a8 <FLASH_SetErrorCode+0x68>)
 800c14a:	6993      	ldr	r3, [r2, #24]
 800c14c:	f043 0320 	orr.w	r3, r3, #32
 800c150:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800c152:	4b14      	ldr	r3, [pc, #80]	; (800c1a4 <FLASH_SetErrorCode+0x64>)
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	06d8      	lsls	r0, r3, #27
 800c158:	d504      	bpl.n	800c164 <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c15a:	4a13      	ldr	r2, [pc, #76]	; (800c1a8 <FLASH_SetErrorCode+0x68>)
 800c15c:	6993      	ldr	r3, [r2, #24]
 800c15e:	f043 0310 	orr.w	r3, r3, #16
 800c162:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800c164:	4b0f      	ldr	r3, [pc, #60]	; (800c1a4 <FLASH_SetErrorCode+0x64>)
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	0699      	lsls	r1, r3, #26
 800c16a:	d504      	bpl.n	800c176 <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c16c:	4a0e      	ldr	r2, [pc, #56]	; (800c1a8 <FLASH_SetErrorCode+0x68>)
 800c16e:	6993      	ldr	r3, [r2, #24]
 800c170:	f043 0308 	orr.w	r3, r3, #8
 800c174:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <FLASH_SetErrorCode+0x64>)
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	065a      	lsls	r2, r3, #25
 800c17c:	d504      	bpl.n	800c188 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800c17e:	4a0a      	ldr	r2, [pc, #40]	; (800c1a8 <FLASH_SetErrorCode+0x68>)
 800c180:	6993      	ldr	r3, [r2, #24]
 800c182:	f043 0304 	orr.w	r3, r3, #4
 800c186:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800c188:	4b06      	ldr	r3, [pc, #24]	; (800c1a4 <FLASH_SetErrorCode+0x64>)
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	061b      	lsls	r3, r3, #24
 800c18e:	d504      	bpl.n	800c19a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800c190:	4a05      	ldr	r2, [pc, #20]	; (800c1a8 <FLASH_SetErrorCode+0x68>)
 800c192:	6993      	ldr	r3, [r2, #24]
 800c194:	f043 0302 	orr.w	r3, r3, #2
 800c198:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800c19a:	4b02      	ldr	r3, [pc, #8]	; (800c1a4 <FLASH_SetErrorCode+0x64>)
 800c19c:	22f2      	movs	r2, #242	; 0xf2
 800c19e:	60da      	str	r2, [r3, #12]
}
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	40023c00 	.word	0x40023c00
 800c1a8:	20003574 	.word	0x20003574

0800c1ac <FLASH_Program_Byte>:
{
 800c1ac:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c1ae:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c1b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1ba:	d304      	bcc.n	800c1c6 <FLASH_Program_Byte+0x1a>
 800c1bc:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <FLASH_Program_Byte+0x44>)
 800c1be:	4403      	add	r3, r0
 800c1c0:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c1c4:	d20e      	bcs.n	800c1e4 <FLASH_Program_Byte+0x38>
  FLASH->CR &= CR_PSIZE_MASK;
 800c1c6:	4b0b      	ldr	r3, [pc, #44]	; (800c1f4 <FLASH_Program_Byte+0x48>)
 800c1c8:	691a      	ldr	r2, [r3, #16]
 800c1ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c1ce:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800c1d0:	691a      	ldr	r2, [r3, #16]
 800c1d2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c1d4:	691a      	ldr	r2, [r3, #16]
 800c1d6:	f042 0201 	orr.w	r2, r2, #1
 800c1da:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800c1dc:	7025      	strb	r5, [r4, #0]
	__ASM volatile ("dsb 0xF":::"memory");
 800c1de:	f3bf 8f4f 	dsb	sy
}
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c1e4:	f240 21ee 	movw	r1, #750	; 0x2ee
 800c1e8:	4803      	ldr	r0, [pc, #12]	; (800c1f8 <FLASH_Program_Byte+0x4c>)
 800c1ea:	f7f9 fb3d 	bl	8005868 <assert_failed>
 800c1ee:	e7ea      	b.n	800c1c6 <FLASH_Program_Byte+0x1a>
 800c1f0:	e00f1000 	.word	0xe00f1000
 800c1f4:	40023c00 	.word	0x40023c00
 800c1f8:	0802e298 	.word	0x0802e298

0800c1fc <FLASH_Program_HalfWord>:
{
 800c1fc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c1fe:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c202:	4604      	mov	r4, r0
 800c204:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c20a:	d304      	bcc.n	800c216 <FLASH_Program_HalfWord+0x1a>
 800c20c:	4b0d      	ldr	r3, [pc, #52]	; (800c244 <FLASH_Program_HalfWord+0x48>)
 800c20e:	4403      	add	r3, r0
 800c210:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c214:	d210      	bcs.n	800c238 <FLASH_Program_HalfWord+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800c216:	4b0c      	ldr	r3, [pc, #48]	; (800c248 <FLASH_Program_HalfWord+0x4c>)
 800c218:	691a      	ldr	r2, [r3, #16]
 800c21a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c21e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800c220:	691a      	ldr	r2, [r3, #16]
 800c222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c226:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c228:	691a      	ldr	r2, [r3, #16]
 800c22a:	f042 0201 	orr.w	r2, r2, #1
 800c22e:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800c230:	8025      	strh	r5, [r4, #0]
 800c232:	f3bf 8f4f 	dsb	sy
}
 800c236:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c238:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800c23c:	4803      	ldr	r0, [pc, #12]	; (800c24c <FLASH_Program_HalfWord+0x50>)
 800c23e:	f7f9 fb13 	bl	8005868 <assert_failed>
 800c242:	e7e8      	b.n	800c216 <FLASH_Program_HalfWord+0x1a>
 800c244:	e00f1000 	.word	0xe00f1000
 800c248:	40023c00 	.word	0x40023c00
 800c24c:	0802e298 	.word	0x0802e298

0800c250 <FLASH_Program_Word>:
{
 800c250:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c252:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c256:	4604      	mov	r4, r0
 800c258:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c25a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c25e:	d304      	bcc.n	800c26a <FLASH_Program_Word+0x1a>
 800c260:	4b0d      	ldr	r3, [pc, #52]	; (800c298 <FLASH_Program_Word+0x48>)
 800c262:	4403      	add	r3, r0
 800c264:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c268:	d210      	bcs.n	800c28c <FLASH_Program_Word+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800c26a:	4b0c      	ldr	r3, [pc, #48]	; (800c29c <FLASH_Program_Word+0x4c>)
 800c26c:	691a      	ldr	r2, [r3, #16]
 800c26e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c272:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800c274:	691a      	ldr	r2, [r3, #16]
 800c276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c27a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c27c:	691a      	ldr	r2, [r3, #16]
 800c27e:	f042 0201 	orr.w	r2, r2, #1
 800c282:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800c284:	6025      	str	r5, [r4, #0]
 800c286:	f3bf 8f4f 	dsb	sy
}
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c28c:	f240 21b3 	movw	r1, #691	; 0x2b3
 800c290:	4803      	ldr	r0, [pc, #12]	; (800c2a0 <FLASH_Program_Word+0x50>)
 800c292:	f7f9 fae9 	bl	8005868 <assert_failed>
 800c296:	e7e8      	b.n	800c26a <FLASH_Program_Word+0x1a>
 800c298:	e00f1000 	.word	0xe00f1000
 800c29c:	40023c00 	.word	0x40023c00
 800c2a0:	0802e298 	.word	0x0802e298

0800c2a4 <FLASH_Program_DoubleWord>:
{
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2a8:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4616      	mov	r6, r2
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2b4:	d304      	bcc.n	800c2c0 <FLASH_Program_DoubleWord+0x1c>
 800c2b6:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <FLASH_Program_DoubleWord+0x50>)
 800c2b8:	4403      	add	r3, r0
 800c2ba:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c2be:	d213      	bcs.n	800c2e8 <FLASH_Program_DoubleWord+0x44>
  FLASH->CR &= CR_PSIZE_MASK;
 800c2c0:	490d      	ldr	r1, [pc, #52]	; (800c2f8 <FLASH_Program_DoubleWord+0x54>)
 800c2c2:	690b      	ldr	r3, [r1, #16]
 800c2c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2c8:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800c2ca:	690b      	ldr	r3, [r1, #16]
 800c2cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c2d0:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c2d2:	690b      	ldr	r3, [r1, #16]
 800c2d4:	f043 0301 	orr.w	r3, r3, #1
 800c2d8:	610b      	str	r3, [r1, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c2da:	6026      	str	r6, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c2dc:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800c2e0:	6065      	str	r5, [r4, #4]
	__ASM volatile ("dsb 0xF":::"memory");
 800c2e2:	f3bf 8f4f 	dsb	sy
}
 800c2e6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2e8:	f240 218e 	movw	r1, #654	; 0x28e
 800c2ec:	4803      	ldr	r0, [pc, #12]	; (800c2fc <FLASH_Program_DoubleWord+0x58>)
 800c2ee:	f7f9 fabb 	bl	8005868 <assert_failed>
 800c2f2:	e7e5      	b.n	800c2c0 <FLASH_Program_DoubleWord+0x1c>
 800c2f4:	e00f1000 	.word	0xe00f1000
 800c2f8:	40023c00 	.word	0x40023c00
 800c2fc:	0802e298 	.word	0x0802e298

0800c300 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c300:	4b06      	ldr	r3, [pc, #24]	; (800c31c <HAL_FLASH_Unlock+0x1c>)
 800c302:	691a      	ldr	r2, [r3, #16]
 800c304:	2a00      	cmp	r2, #0
 800c306:	db01      	blt.n	800c30c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800c308:	2000      	movs	r0, #0
}
 800c30a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c30c:	4904      	ldr	r1, [pc, #16]	; (800c320 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c30e:	4a05      	ldr	r2, [pc, #20]	; (800c324 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c310:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c312:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c314:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800c316:	0fc0      	lsrs	r0, r0, #31
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	40023c00 	.word	0x40023c00
 800c320:	45670123 	.word	0x45670123
 800c324:	cdef89ab 	.word	0xcdef89ab

0800c328 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800c328:	4a03      	ldr	r2, [pc, #12]	; (800c338 <HAL_FLASH_Lock+0x10>)
}
 800c32a:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 800c32c:	6913      	ldr	r3, [r2, #16]
 800c32e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c332:	6113      	str	r3, [r2, #16]
}
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	40023c00 	.word	0x40023c00

0800c33c <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800c33c:	4b05      	ldr	r3, [pc, #20]	; (800c354 <HAL_FLASH_OB_Unlock+0x18>)
 800c33e:	695a      	ldr	r2, [r3, #20]
 800c340:	07d2      	lsls	r2, r2, #31
 800c342:	d505      	bpl.n	800c350 <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800c344:	4904      	ldr	r1, [pc, #16]	; (800c358 <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
 800c346:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800c348:	4a04      	ldr	r2, [pc, #16]	; (800c35c <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800c34a:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800c34c:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800c34e:	4770      	bx	lr
    return HAL_ERROR;
 800c350:	2001      	movs	r0, #1
}
 800c352:	4770      	bx	lr
 800c354:	40023c00 	.word	0x40023c00
 800c358:	08192a3b 	.word	0x08192a3b
 800c35c:	4c5d6e7f 	.word	0x4c5d6e7f

0800c360 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800c360:	4a03      	ldr	r2, [pc, #12]	; (800c370 <HAL_FLASH_OB_Lock+0x10>)
}
 800c362:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800c364:	6953      	ldr	r3, [r2, #20]
 800c366:	f043 0301 	orr.w	r3, r3, #1
 800c36a:	6153      	str	r3, [r2, #20]
}
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	40023c00 	.word	0x40023c00

0800c374 <HAL_FLASH_OB_Launch>:
{
 800c374:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800c376:	4c14      	ldr	r4, [pc, #80]	; (800c3c8 <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c378:	2100      	movs	r1, #0
 800c37a:	4a14      	ldr	r2, [pc, #80]	; (800c3cc <HAL_FLASH_OB_Launch+0x58>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c37c:	f24c 3650 	movw	r6, #50000	; 0xc350
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800c380:	6963      	ldr	r3, [r4, #20]
 800c382:	f043 0302 	orr.w	r3, r3, #2
 800c386:	6163      	str	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c388:	6191      	str	r1, [r2, #24]
  tickstart = HAL_GetTick();
 800c38a:	f7fc ffbb 	bl	8009304 <HAL_GetTick>
 800c38e:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c390:	e004      	b.n	800c39c <HAL_FLASH_OB_Launch+0x28>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c392:	f7fc ffb7 	bl	8009304 <HAL_GetTick>
 800c396:	1b40      	subs	r0, r0, r5
 800c398:	42b0      	cmp	r0, r6
 800c39a:	d80e      	bhi.n	800c3ba <HAL_FLASH_OB_Launch+0x46>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c39c:	68e3      	ldr	r3, [r4, #12]
 800c39e:	03db      	lsls	r3, r3, #15
 800c3a0:	d4f7      	bmi.n	800c392 <HAL_FLASH_OB_Launch+0x1e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800c3a2:	68e2      	ldr	r2, [r4, #12]
 800c3a4:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800c3a8:	d109      	bne.n	800c3be <HAL_FLASH_OB_Launch+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c3aa:	68e0      	ldr	r0, [r4, #12]
 800c3ac:	f010 0001 	ands.w	r0, r0, #1
 800c3b0:	d002      	beq.n	800c3b8 <HAL_FLASH_OB_Launch+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c3b2:	2301      	movs	r3, #1
  return HAL_OK;
 800c3b4:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c3b6:	60e3      	str	r3, [r4, #12]
}
 800c3b8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800c3ba:	2003      	movs	r0, #3
}
 800c3bc:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800c3be:	f7ff febf 	bl	800c140 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c3c2:	2001      	movs	r0, #1
}
 800c3c4:	bd70      	pop	{r4, r5, r6, pc}
 800c3c6:	bf00      	nop
 800c3c8:	40023c00 	.word	0x40023c00
 800c3cc:	20003574 	.word	0x20003574

0800c3d0 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800c3d0:	4b01      	ldr	r3, [pc, #4]	; (800c3d8 <HAL_FLASH_GetError+0x8>)
 800c3d2:	6998      	ldr	r0, [r3, #24]
}  
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	20003574 	.word	0x20003574

0800c3dc <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c3dc:	4b13      	ldr	r3, [pc, #76]	; (800c42c <FLASH_WaitForLastOperation+0x50>)
 800c3de:	2200      	movs	r2, #0
{ 
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c3e4:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c3e6:	4d12      	ldr	r5, [pc, #72]	; (800c430 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800c3e8:	f7fc ff8c 	bl	8009304 <HAL_GetTick>
 800c3ec:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c3ee:	e001      	b.n	800c3f4 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800c3f0:	1c62      	adds	r2, r4, #1
 800c3f2:	d10e      	bne.n	800c412 <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c3f4:	68eb      	ldr	r3, [r5, #12]
 800c3f6:	03db      	lsls	r3, r3, #15
 800c3f8:	d4fa      	bmi.n	800c3f0 <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800c3fa:	68ea      	ldr	r2, [r5, #12]
 800c3fc:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800c400:	d10f      	bne.n	800c422 <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c402:	68e8      	ldr	r0, [r5, #12]
 800c404:	f010 0001 	ands.w	r0, r0, #1
 800c408:	d002      	beq.n	800c410 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c40a:	2301      	movs	r3, #1
  return HAL_OK;
 800c40c:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c40e:	60eb      	str	r3, [r5, #12]
}  
 800c410:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c412:	b124      	cbz	r4, 800c41e <FLASH_WaitForLastOperation+0x42>
 800c414:	f7fc ff76 	bl	8009304 <HAL_GetTick>
 800c418:	1b80      	subs	r0, r0, r6
 800c41a:	42a0      	cmp	r0, r4
 800c41c:	d9ea      	bls.n	800c3f4 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800c41e:	2003      	movs	r0, #3
}  
 800c420:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800c422:	f7ff fe8d 	bl	800c140 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c426:	2001      	movs	r0, #1
}  
 800c428:	bd70      	pop	{r4, r5, r6, pc}
 800c42a:	bf00      	nop
 800c42c:	20003574 	.word	0x20003574
 800c430:	40023c00 	.word	0x40023c00

0800c434 <HAL_FLASH_Program>:
{
 800c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800c438:	4d23      	ldr	r5, [pc, #140]	; (800c4c8 <HAL_FLASH_Program+0x94>)
{
 800c43a:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800c43c:	7d2a      	ldrb	r2, [r5, #20]
 800c43e:	2a01      	cmp	r2, #1
 800c440:	d03a      	beq.n	800c4b8 <HAL_FLASH_Program+0x84>
 800c442:	4698      	mov	r8, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c444:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 800c446:	f04f 0301 	mov.w	r3, #1
 800c44a:	4604      	mov	r4, r0
 800c44c:	752b      	strb	r3, [r5, #20]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c44e:	d81d      	bhi.n	800c48c <HAL_FLASH_Program+0x58>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c450:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c454:	460e      	mov	r6, r1
 800c456:	f7ff ffc1 	bl	800c3dc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c45a:	b998      	cbnz	r0, 800c484 <HAL_FLASH_Program+0x50>
    switch(TypeProgram)
 800c45c:	3c01      	subs	r4, #1
 800c45e:	2c02      	cmp	r4, #2
 800c460:	d82d      	bhi.n	800c4be <HAL_FLASH_Program+0x8a>
 800c462:	e8df f004 	tbb	[pc, r4]
 800c466:	1e02      	.short	0x1e02
 800c468:	23          	.byte	0x23
 800c469:	00          	.byte	0x00
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800c46a:	b2b9      	uxth	r1, r7
 800c46c:	4630      	mov	r0, r6
 800c46e:	f7ff fec5 	bl	800c1fc <FLASH_Program_HalfWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c472:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c476:	f7ff ffb1 	bl	800c3dc <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800c47a:	4a14      	ldr	r2, [pc, #80]	; (800c4cc <HAL_FLASH_Program+0x98>)
 800c47c:	6913      	ldr	r3, [r2, #16]
 800c47e:	f023 0301 	bic.w	r3, r3, #1
 800c482:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800c484:	2300      	movs	r3, #0
 800c486:	752b      	strb	r3, [r5, #20]
}
 800c488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c48c:	4810      	ldr	r0, [pc, #64]	; (800c4d0 <HAL_FLASH_Program+0x9c>)
 800c48e:	21aa      	movs	r1, #170	; 0xaa
 800c490:	f7f9 f9ea 	bl	8005868 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c494:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c498:	f7ff ffa0 	bl	800c3dc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c49c:	2800      	cmp	r0, #0
 800c49e:	d1f1      	bne.n	800c484 <HAL_FLASH_Program+0x50>
 800c4a0:	e7e7      	b.n	800c472 <HAL_FLASH_Program+0x3e>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800c4a2:	4639      	mov	r1, r7
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7ff fed3 	bl	800c250 <FLASH_Program_Word>
        break;
 800c4aa:	e7e2      	b.n	800c472 <HAL_FLASH_Program+0x3e>
        FLASH_Program_DoubleWord(Address, Data);
 800c4ac:	463a      	mov	r2, r7
 800c4ae:	4643      	mov	r3, r8
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	f7ff fef7 	bl	800c2a4 <FLASH_Program_DoubleWord>
        break;
 800c4b6:	e7dc      	b.n	800c472 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800c4b8:	2002      	movs	r0, #2
}
 800c4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800c4be:	b2f9      	uxtb	r1, r7
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f7ff fe73 	bl	800c1ac <FLASH_Program_Byte>
        break;
 800c4c6:	e7d4      	b.n	800c472 <HAL_FLASH_Program+0x3e>
 800c4c8:	20003574 	.word	0x20003574
 800c4cc:	40023c00 	.word	0x40023c00
 800c4d0:	0802e298 	.word	0x0802e298

0800c4d4 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c4d4:	2803      	cmp	r0, #3
{
 800c4d6:	b538      	push	{r3, r4, r5, lr}
 800c4d8:	4604      	mov	r4, r0
 800c4da:	460d      	mov	r5, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c4dc:	d82f      	bhi.n	800c53e <FLASH_MassErase+0x6a>
  assert_param(IS_FLASH_BANK(Banks));
 800c4de:	1e6b      	subs	r3, r5, #1
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d81c      	bhi.n	800c51e <FLASH_MassErase+0x4a>

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800c4e4:	4b19      	ldr	r3, [pc, #100]	; (800c54c <FLASH_MassErase+0x78>)
  if(Banks == FLASH_BANK_BOTH)
 800c4e6:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
 800c4e8:	691a      	ldr	r2, [r3, #16]
 800c4ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c4ee:	611a      	str	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800c4f0:	d10e      	bne.n	800c510 <FLASH_MassErase+0x3c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800c4f2:	6919      	ldr	r1, [r3, #16]
 800c4f4:	f248 0204 	movw	r2, #32772	; 0x8004
 800c4f8:	430a      	orrs	r2, r1
 800c4fa:	611a      	str	r2, [r3, #16]
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800c4fc:	4a13      	ldr	r2, [pc, #76]	; (800c54c <FLASH_MassErase+0x78>)
 800c4fe:	6910      	ldr	r0, [r2, #16]
 800c500:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800c504:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800c508:	6110      	str	r0, [r2, #16]
 800c50a:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800c50e:	bd38      	pop	{r3, r4, r5, pc}
  else if(Banks == FLASH_BANK_2)
 800c510:	2d02      	cmp	r5, #2
 800c512:	d10e      	bne.n	800c532 <FLASH_MassErase+0x5e>
    FLASH->CR |= FLASH_CR_MER2;
 800c514:	691a      	ldr	r2, [r3, #16]
 800c516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c51a:	611a      	str	r2, [r3, #16]
 800c51c:	e7ee      	b.n	800c4fc <FLASH_MassErase+0x28>
  assert_param(IS_FLASH_BANK(Banks));
 800c51e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c522:	480b      	ldr	r0, [pc, #44]	; (800c550 <FLASH_MassErase+0x7c>)
 800c524:	f7f9 f9a0 	bl	8005868 <assert_failed>
  FLASH->CR &= CR_PSIZE_MASK;
 800c528:	4a08      	ldr	r2, [pc, #32]	; (800c54c <FLASH_MassErase+0x78>)
 800c52a:	6913      	ldr	r3, [r2, #16]
 800c52c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c530:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_MER1;    
 800c532:	4a06      	ldr	r2, [pc, #24]	; (800c54c <FLASH_MassErase+0x78>)
 800c534:	6913      	ldr	r3, [r2, #16]
 800c536:	f043 0304 	orr.w	r3, r3, #4
 800c53a:	6113      	str	r3, [r2, #16]
 800c53c:	e7de      	b.n	800c4fc <FLASH_MassErase+0x28>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c53e:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c542:	4803      	ldr	r0, [pc, #12]	; (800c550 <FLASH_MassErase+0x7c>)
 800c544:	f7f9 f990 	bl	8005868 <assert_failed>
 800c548:	e7c9      	b.n	800c4de <FLASH_MassErase+0xa>
 800c54a:	bf00      	nop
 800c54c:	40023c00 	.word	0x40023c00
 800c550:	0802e2d4 	.word	0x0802e2d4

0800c554 <HAL_FLASHEx_OBProgram>:
{
 800c554:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800c556:	4d64      	ldr	r5, [pc, #400]	; (800c6e8 <HAL_FLASHEx_OBProgram+0x194>)
 800c558:	7d2b      	ldrb	r3, [r5, #20]
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	f000 80bb 	beq.w	800c6d6 <HAL_FLASHEx_OBProgram+0x182>
 800c560:	2301      	movs	r3, #1
 800c562:	4604      	mov	r4, r0
 800c564:	752b      	strb	r3, [r5, #20]
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800c566:	6803      	ldr	r3, [r0, #0]
 800c568:	2b3f      	cmp	r3, #63	; 0x3f
 800c56a:	f200 808c 	bhi.w	800c686 <HAL_FLASHEx_OBProgram+0x132>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800c56e:	07d9      	lsls	r1, r3, #31
 800c570:	d40d      	bmi.n	800c58e <HAL_FLASHEx_OBProgram+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800c572:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c574:	079a      	lsls	r2, r3, #30
 800c576:	d42c      	bmi.n	800c5d2 <HAL_FLASHEx_OBProgram+0x7e>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800c578:	075e      	lsls	r6, r3, #29
 800c57a:	d440      	bmi.n	800c5fe <HAL_FLASHEx_OBProgram+0xaa>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800c57c:	0719      	lsls	r1, r3, #28
 800c57e:	d44f      	bmi.n	800c620 <HAL_FLASHEx_OBProgram+0xcc>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c580:	06da      	lsls	r2, r3, #27
 800c582:	d45b      	bmi.n	800c63c <HAL_FLASHEx_OBProgram+0xe8>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800c584:	069b      	lsls	r3, r3, #26
 800c586:	d46c      	bmi.n	800c662 <HAL_FLASHEx_OBProgram+0x10e>
  __HAL_UNLOCK(&pFlash);
 800c588:	2300      	movs	r3, #0
 800c58a:	752b      	strb	r3, [r5, #20]
}
 800c58c:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800c58e:	6863      	ldr	r3, [r4, #4]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d905      	bls.n	800c5a0 <HAL_FLASHEx_OBProgram+0x4c>
 800c594:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800c598:	4854      	ldr	r0, [pc, #336]	; (800c6ec <HAL_FLASHEx_OBProgram+0x198>)
 800c59a:	f7f9 f965 	bl	8005868 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c59e:	6863      	ldr	r3, [r4, #4]
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 800c5a0:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c5a2:	2b01      	cmp	r3, #1
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c5a4:	4b52      	ldr	r3, [pc, #328]	; (800c6f0 <HAL_FLASHEx_OBProgram+0x19c>)
 800c5a6:	ea03 0306 	and.w	r3, r3, r6
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c5aa:	d07f      	beq.n	800c6ac <HAL_FLASHEx_OBProgram+0x158>
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c5ac:	b903      	cbnz	r3, 800c5b0 <HAL_FLASHEx_OBProgram+0x5c>
 800c5ae:	b926      	cbnz	r6, 800c5ba <HAL_FLASHEx_OBProgram+0x66>
 800c5b0:	f240 314f 	movw	r1, #847	; 0x34f
 800c5b4:	484d      	ldr	r0, [pc, #308]	; (800c6ec <HAL_FLASHEx_OBProgram+0x198>)
 800c5b6:	f7f9 f957 	bl	8005868 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c5ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c5be:	f7ff ff0d 	bl	800c3dc <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800c5c2:	b918      	cbnz	r0, 800c5cc <HAL_FLASHEx_OBProgram+0x78>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 800c5c4:	4b4b      	ldr	r3, [pc, #300]	; (800c6f4 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c5c6:	695a      	ldr	r2, [r3, #20]
 800c5c8:	4316      	orrs	r6, r2
 800c5ca:	615e      	str	r6, [r3, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	079a      	lsls	r2, r3, #30
 800c5d0:	d5d2      	bpl.n	800c578 <HAL_FLASHEx_OBProgram+0x24>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800c5d2:	7b26      	ldrb	r6, [r4, #12]
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800c5d4:	2eaa      	cmp	r6, #170	; 0xaa
 800c5d6:	bf18      	it	ne
 800c5d8:	2e55      	cmpne	r6, #85	; 0x55
 800c5da:	d006      	beq.n	800c5ea <HAL_FLASHEx_OBProgram+0x96>
 800c5dc:	2ecc      	cmp	r6, #204	; 0xcc
 800c5de:	d004      	beq.n	800c5ea <HAL_FLASHEx_OBProgram+0x96>
 800c5e0:	f240 316e 	movw	r1, #878	; 0x36e
 800c5e4:	4841      	ldr	r0, [pc, #260]	; (800c6ec <HAL_FLASHEx_OBProgram+0x198>)
 800c5e6:	f7f9 f93f 	bl	8005868 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c5ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c5ee:	f7ff fef5 	bl	800c3dc <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800c5f2:	b908      	cbnz	r0, 800c5f8 <HAL_FLASHEx_OBProgram+0xa4>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800c5f4:	4b3f      	ldr	r3, [pc, #252]	; (800c6f4 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c5f6:	755e      	strb	r6, [r3, #21]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	075e      	lsls	r6, r3, #29
 800c5fc:	d5be      	bpl.n	800c57c <HAL_FLASHEx_OBProgram+0x28>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c5fe:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800c602:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c604:	f7ff feea 	bl	800c3dc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c608:	b938      	cbnz	r0, 800c61a <HAL_FLASHEx_OBProgram+0xc6>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c60a:	493a      	ldr	r1, [pc, #232]	; (800c6f4 <HAL_FLASHEx_OBProgram+0x1a0>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800c60c:	4b3a      	ldr	r3, [pc, #232]	; (800c6f8 <HAL_FLASHEx_OBProgram+0x1a4>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c60e:	4a3b      	ldr	r2, [pc, #236]	; (800c6fc <HAL_FLASHEx_OBProgram+0x1a8>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800c610:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c612:	694e      	ldr	r6, [r1, #20]
 800c614:	4032      	ands	r2, r6
 800c616:	4313      	orrs	r3, r2
 800c618:	614b      	str	r3, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	0719      	lsls	r1, r3, #28
 800c61e:	d5af      	bpl.n	800c580 <HAL_FLASHEx_OBProgram+0x2c>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800c620:	6926      	ldr	r6, [r4, #16]
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 800c622:	f016 0ff3 	tst.w	r6, #243	; 0xf3
 800c626:	d158      	bne.n	800c6da <HAL_FLASHEx_OBProgram+0x186>

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800c628:	4932      	ldr	r1, [pc, #200]	; (800c6f4 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c62a:	b2f6      	uxtb	r6, r6
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800c62c:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800c62e:	694a      	ldr	r2, [r1, #20]
 800c630:	f022 020c 	bic.w	r2, r2, #12
 800c634:	4332      	orrs	r2, r6
 800c636:	614a      	str	r2, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c638:	06da      	lsls	r2, r3, #27
 800c63a:	d5a3      	bpl.n	800c584 <HAL_FLASHEx_OBProgram+0x30>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800c63c:	69a6      	ldr	r6, [r4, #24]
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c63e:	f248 0313 	movw	r3, #32787	; 0x8013
 800c642:	429e      	cmp	r6, r3
 800c644:	d826      	bhi.n	800c694 <HAL_FLASHEx_OBProgram+0x140>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c646:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c64a:	f7ff fec7 	bl	800c3dc <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800c64e:	b928      	cbnz	r0, 800c65c <HAL_FLASHEx_OBProgram+0x108>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 800c650:	4a28      	ldr	r2, [pc, #160]	; (800c6f4 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c652:	4b2b      	ldr	r3, [pc, #172]	; (800c700 <HAL_FLASHEx_OBProgram+0x1ac>)
 800c654:	6991      	ldr	r1, [r2, #24]
 800c656:	400b      	ands	r3, r1
 800c658:	4333      	orrs	r3, r6
 800c65a:	6193      	str	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	069b      	lsls	r3, r3, #26
 800c660:	d592      	bpl.n	800c588 <HAL_FLASHEx_OBProgram+0x34>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 800c662:	69e4      	ldr	r4, [r4, #28]
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c664:	f248 0313 	movw	r3, #32787	; 0x8013
 800c668:	429c      	cmp	r4, r3
 800c66a:	d819      	bhi.n	800c6a0 <HAL_FLASHEx_OBProgram+0x14c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c66c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c670:	f7ff feb4 	bl	800c3dc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c674:	2800      	cmp	r0, #0
 800c676:	d187      	bne.n	800c588 <HAL_FLASHEx_OBProgram+0x34>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 800c678:	4a1e      	ldr	r2, [pc, #120]	; (800c6f4 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c67a:	6993      	ldr	r3, [r2, #24]
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c682:	6193      	str	r3, [r2, #24]
 800c684:	e780      	b.n	800c588 <HAL_FLASHEx_OBProgram+0x34>
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800c686:	f240 1125 	movw	r1, #293	; 0x125
 800c68a:	4818      	ldr	r0, [pc, #96]	; (800c6ec <HAL_FLASHEx_OBProgram+0x198>)
 800c68c:	f7f9 f8ec 	bl	8005868 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	e76c      	b.n	800c56e <HAL_FLASHEx_OBProgram+0x1a>
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c694:	f240 31a9 	movw	r1, #937	; 0x3a9
 800c698:	4814      	ldr	r0, [pc, #80]	; (800c6ec <HAL_FLASHEx_OBProgram+0x198>)
 800c69a:	f7f9 f8e5 	bl	8005868 <assert_failed>
 800c69e:	e7d2      	b.n	800c646 <HAL_FLASHEx_OBProgram+0xf2>
 800c6a0:	f240 31a9 	movw	r1, #937	; 0x3a9
 800c6a4:	4811      	ldr	r0, [pc, #68]	; (800c6ec <HAL_FLASHEx_OBProgram+0x198>)
 800c6a6:	f7f9 f8df 	bl	8005868 <assert_failed>
 800c6aa:	e7df      	b.n	800c66c <HAL_FLASHEx_OBProgram+0x118>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c6ac:	b96b      	cbnz	r3, 800c6ca <HAL_FLASHEx_OBProgram+0x176>
 800c6ae:	b166      	cbz	r6, 800c6ca <HAL_FLASHEx_OBProgram+0x176>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c6b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c6b4:	f7ff fe92 	bl	800c3dc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d187      	bne.n	800c5cc <HAL_FLASHEx_OBProgram+0x78>
    FLASH->OPTCR &= (~WRPSector);  
 800c6bc:	4a0d      	ldr	r2, [pc, #52]	; (800c6f4 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c6be:	6953      	ldr	r3, [r2, #20]
 800c6c0:	ea23 0606 	bic.w	r6, r3, r6
 800c6c4:	6156      	str	r6, [r2, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	e754      	b.n	800c574 <HAL_FLASHEx_OBProgram+0x20>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c6ca:	f240 312b 	movw	r1, #811	; 0x32b
 800c6ce:	4807      	ldr	r0, [pc, #28]	; (800c6ec <HAL_FLASHEx_OBProgram+0x198>)
 800c6d0:	f7f9 f8ca 	bl	8005868 <assert_failed>
 800c6d4:	e7ec      	b.n	800c6b0 <HAL_FLASHEx_OBProgram+0x15c>
  __HAL_LOCK(&pFlash);
 800c6d6:	2002      	movs	r0, #2
}
 800c6d8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_OB_BOR_LEVEL(Level));
 800c6da:	f44f 7162 	mov.w	r1, #904	; 0x388
 800c6de:	4803      	ldr	r0, [pc, #12]	; (800c6ec <HAL_FLASHEx_OBProgram+0x198>)
 800c6e0:	f7f9 f8c2 	bl	8005868 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	e79f      	b.n	800c628 <HAL_FLASHEx_OBProgram+0xd4>
 800c6e8:	20003574 	.word	0x20003574
 800c6ec:	0802e2d4 	.word	0x0802e2d4
 800c6f0:	f000ffff 	.word	0xf000ffff
 800c6f4:	40023c00 	.word	0x40023c00
 800c6f8:	f00000f0 	.word	0xf00000f0
 800c6fc:	0fffff0f 	.word	0x0fffff0f
 800c700:	ffff0000 	.word	0xffff0000

0800c704 <HAL_FLASHEx_OBGetConfig>:
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c704:	4a11      	ldr	r2, [pc, #68]	; (800c74c <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800c706:	213f      	movs	r1, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c708:	4b11      	ldr	r3, [pc, #68]	; (800c750 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800c70a:	6001      	str	r1, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c70c:	6951      	ldr	r1, [r2, #20]
 800c70e:	400b      	ands	r3, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800c710:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800c712:	7d51      	ldrb	r1, [r2, #21]
 800c714:	29aa      	cmp	r1, #170	; 0xaa
 800c716:	b2cb      	uxtb	r3, r1
 800c718:	d015      	beq.n	800c746 <HAL_FLASHEx_OBGetConfig+0x42>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800c71a:	7d53      	ldrb	r3, [r2, #21]
 800c71c:	2bcc      	cmp	r3, #204	; 0xcc
 800c71e:	bf0c      	ite	eq
 800c720:	22cc      	moveq	r2, #204	; 0xcc
 800c722:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800c724:	4b09      	ldr	r3, [pc, #36]	; (800c74c <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800c726:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800c728:	4a0a      	ldr	r2, [pc, #40]	; (800c754 <HAL_FLASHEx_OBGetConfig+0x50>)
 800c72a:	6959      	ldr	r1, [r3, #20]
 800c72c:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800c72e:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800c730:	695a      	ldr	r2, [r3, #20]
 800c732:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800c736:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800c738:	699a      	ldr	r2, [r3, #24]
 800c73a:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 800c73c:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800c742:	61c3      	str	r3, [r0, #28]
}
 800c744:	4770      	bx	lr
 800c746:	461a      	mov	r2, r3
 800c748:	e7ec      	b.n	800c724 <HAL_FLASHEx_OBGetConfig+0x20>
 800c74a:	bf00      	nop
 800c74c:	40023c00 	.word	0x40023c00
 800c750:	0fff0000 	.word	0x0fff0000
 800c754:	f00000f0 	.word	0xf00000f0

0800c758 <FLASH_Erase_Sector>:
  assert_param(IS_FLASH_SECTOR(Sector));
 800c758:	2817      	cmp	r0, #23
{
 800c75a:	b538      	push	{r3, r4, r5, lr}
 800c75c:	4605      	mov	r5, r0
 800c75e:	460c      	mov	r4, r1
  assert_param(IS_FLASH_SECTOR(Sector));
 800c760:	d82b      	bhi.n	800c7ba <FLASH_Erase_Sector+0x62>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c762:	2c03      	cmp	r4, #3
 800c764:	d821      	bhi.n	800c7aa <FLASH_Erase_Sector+0x52>
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c766:	b9dc      	cbnz	r4, 800c7a0 <FLASH_Erase_Sector+0x48>
  FLASH->CR &= CR_PSIZE_MASK;
 800c768:	4b1a      	ldr	r3, [pc, #104]	; (800c7d4 <FLASH_Erase_Sector+0x7c>)
  if(Sector > FLASH_SECTOR_11) 
 800c76a:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800c76c:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800c76e:	bf88      	it	hi
 800c770:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800c772:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c776:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800c778:	6919      	ldr	r1, [r3, #16]
 800c77a:	430c      	orrs	r4, r1
 800c77c:	611c      	str	r4, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c77e:	691a      	ldr	r2, [r3, #16]
 800c780:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800c784:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c786:	6918      	ldr	r0, [r3, #16]
 800c788:	ea40 05c5 	orr.w	r5, r0, r5, lsl #3
 800c78c:	f045 0502 	orr.w	r5, r5, #2
 800c790:	611d      	str	r5, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c792:	691a      	ldr	r2, [r3, #16]
 800c794:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c798:	611a      	str	r2, [r3, #16]
 800c79a:	f3bf 8f4f 	dsb	sy
}
 800c79e:	bd38      	pop	{r3, r4, r5, pc}
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c7a0:	2c01      	cmp	r4, #1
 800c7a2:	d110      	bne.n	800c7c6 <FLASH_Erase_Sector+0x6e>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c7a4:	f44f 7480 	mov.w	r4, #256	; 0x100
 800c7a8:	e7de      	b.n	800c768 <FLASH_Erase_Sector+0x10>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c7aa:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800c7ae:	480a      	ldr	r0, [pc, #40]	; (800c7d8 <FLASH_Erase_Sector+0x80>)
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c7b0:	f44f 7440 	mov.w	r4, #768	; 0x300
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c7b4:	f7f9 f858 	bl	8005868 <assert_failed>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c7b8:	e7d6      	b.n	800c768 <FLASH_Erase_Sector+0x10>
  assert_param(IS_FLASH_SECTOR(Sector));
 800c7ba:	f240 11eb 	movw	r1, #491	; 0x1eb
 800c7be:	4806      	ldr	r0, [pc, #24]	; (800c7d8 <FLASH_Erase_Sector+0x80>)
 800c7c0:	f7f9 f852 	bl	8005868 <assert_failed>
 800c7c4:	e7cd      	b.n	800c762 <FLASH_Erase_Sector+0xa>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c7c6:	2c02      	cmp	r4, #2
 800c7c8:	bf0c      	ite	eq
 800c7ca:	f44f 7400 	moveq.w	r4, #512	; 0x200
 800c7ce:	f44f 7440 	movne.w	r4, #768	; 0x300
 800c7d2:	e7c9      	b.n	800c768 <FLASH_Erase_Sector+0x10>
 800c7d4:	40023c00 	.word	0x40023c00
 800c7d8:	0802e2d4 	.word	0x0802e2d4

0800c7dc <HAL_FLASHEx_Erase>:
{
 800c7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800c7e0:	4f2f      	ldr	r7, [pc, #188]	; (800c8a0 <HAL_FLASHEx_Erase+0xc4>)
 800c7e2:	7d3b      	ldrb	r3, [r7, #20]
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d040      	beq.n	800c86a <HAL_FLASHEx_Erase+0x8e>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	4688      	mov	r8, r1
 800c7ee:	753b      	strb	r3, [r7, #20]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800c7f0:	6803      	ldr	r3, [r0, #0]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d903      	bls.n	800c7fe <HAL_FLASHEx_Erase+0x22>
 800c7f6:	21a5      	movs	r1, #165	; 0xa5
 800c7f8:	482a      	ldr	r0, [pc, #168]	; (800c8a4 <HAL_FLASHEx_Erase+0xc8>)
 800c7fa:	f7f9 f835 	bl	8005868 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c7fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c802:	f7ff fdeb 	bl	800c3dc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c806:	4606      	mov	r6, r0
 800c808:	bb50      	cbnz	r0, 800c860 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 800c80a:	f04f 33ff 	mov.w	r3, #4294967295
 800c80e:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d034      	beq.n	800c882 <HAL_FLASHEx_Erase+0xa6>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800c818:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800c81c:	442b      	add	r3, r5
 800c81e:	1e5a      	subs	r2, r3, #1
 800c820:	2a17      	cmp	r2, #23
 800c822:	d826      	bhi.n	800c872 <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c824:	429d      	cmp	r5, r3
 800c826:	d21b      	bcs.n	800c860 <HAL_FLASHEx_Erase+0x84>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800c828:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800c8a8 <HAL_FLASHEx_Erase+0xcc>
 800c82c:	e005      	b.n	800c83a <HAL_FLASHEx_Erase+0x5e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c82e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800c832:	3501      	adds	r5, #1
 800c834:	4413      	add	r3, r2
 800c836:	42ab      	cmp	r3, r5
 800c838:	d912      	bls.n	800c860 <HAL_FLASHEx_Erase+0x84>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800c83a:	4628      	mov	r0, r5
 800c83c:	7c21      	ldrb	r1, [r4, #16]
 800c83e:	f7ff ff8b 	bl	800c758 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c842:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c846:	f7ff fdc9 	bl	800c3dc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800c84a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c84e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800c852:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800c856:	2800      	cmp	r0, #0
 800c858:	d0e9      	beq.n	800c82e <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c85a:	4606      	mov	r6, r0
          *SectorError = index;
 800c85c:	f8c8 5000 	str.w	r5, [r8]
  __HAL_UNLOCK(&pFlash);
 800c860:	2300      	movs	r3, #0
}
 800c862:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
 800c864:	753b      	strb	r3, [r7, #20]
}
 800c866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800c86a:	2602      	movs	r6, #2
}
 800c86c:	4630      	mov	r0, r6
 800c86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800c872:	21c1      	movs	r1, #193	; 0xc1
 800c874:	480b      	ldr	r0, [pc, #44]	; (800c8a4 <HAL_FLASHEx_Erase+0xc8>)
 800c876:	f7f8 fff7 	bl	8005868 <assert_failed>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c87a:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800c87e:	442b      	add	r3, r5
 800c880:	e7d0      	b.n	800c824 <HAL_FLASHEx_Erase+0x48>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800c882:	6861      	ldr	r1, [r4, #4]
 800c884:	7c20      	ldrb	r0, [r4, #16]
 800c886:	f7ff fe25 	bl	800c4d4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c88a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c88e:	f7ff fda5 	bl	800c3dc <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800c892:	4a05      	ldr	r2, [pc, #20]	; (800c8a8 <HAL_FLASHEx_Erase+0xcc>)
 800c894:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <HAL_FLASHEx_Erase+0xd0>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c896:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800c898:	6911      	ldr	r1, [r2, #16]
 800c89a:	400b      	ands	r3, r1
 800c89c:	6113      	str	r3, [r2, #16]
 800c89e:	e7df      	b.n	800c860 <HAL_FLASHEx_Erase+0x84>
 800c8a0:	20003574 	.word	0x20003574
 800c8a4:	0802e2d4 	.word	0x0802e2d4
 800c8a8:	40023c00 	.word	0x40023c00
 800c8ac:	ffff7ffb 	.word	0xffff7ffb

0800c8b0 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c8b0:	4bb9      	ldr	r3, [pc, #740]	; (800cb98 <HAL_GPIO_Init+0x2e8>)
 800c8b2:	4aba      	ldr	r2, [pc, #744]	; (800cb9c <HAL_GPIO_Init+0x2ec>)
 800c8b4:	4290      	cmp	r0, r2
 800c8b6:	bf18      	it	ne
 800c8b8:	4298      	cmpne	r0, r3
{
 800c8ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c8be:	bf18      	it	ne
 800c8c0:	2301      	movne	r3, #1
{
 800c8c2:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c8c4:	bf08      	it	eq
 800c8c6:	2300      	moveq	r3, #0
{
 800c8c8:	4606      	mov	r6, r0
 800c8ca:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	d026      	beq.n	800c91e <HAL_GPIO_Init+0x6e>
 800c8d0:	4bb3      	ldr	r3, [pc, #716]	; (800cba0 <HAL_GPIO_Init+0x2f0>)
 800c8d2:	4298      	cmp	r0, r3
 800c8d4:	d023      	beq.n	800c91e <HAL_GPIO_Init+0x6e>
 800c8d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8da:	4298      	cmp	r0, r3
 800c8dc:	d01f      	beq.n	800c91e <HAL_GPIO_Init+0x6e>
 800c8de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8e2:	4298      	cmp	r0, r3
 800c8e4:	d01b      	beq.n	800c91e <HAL_GPIO_Init+0x6e>
 800c8e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8ea:	4298      	cmp	r0, r3
 800c8ec:	d017      	beq.n	800c91e <HAL_GPIO_Init+0x6e>
 800c8ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8f2:	4298      	cmp	r0, r3
 800c8f4:	d013      	beq.n	800c91e <HAL_GPIO_Init+0x6e>
 800c8f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8fa:	4298      	cmp	r0, r3
 800c8fc:	d00f      	beq.n	800c91e <HAL_GPIO_Init+0x6e>
 800c8fe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800c902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c906:	4290      	cmp	r0, r2
 800c908:	bf18      	it	ne
 800c90a:	4298      	cmpne	r0, r3
 800c90c:	d007      	beq.n	800c91e <HAL_GPIO_Init+0x6e>
 800c90e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c912:	4298      	cmp	r0, r3
 800c914:	d003      	beq.n	800c91e <HAL_GPIO_Init+0x6e>
 800c916:	21aa      	movs	r1, #170	; 0xaa
 800c918:	48a2      	ldr	r0, [pc, #648]	; (800cba4 <HAL_GPIO_Init+0x2f4>)
 800c91a:	f7f8 ffa5 	bl	8005868 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800c91e:	883b      	ldrh	r3, [r7, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 811a 	beq.w	800cb5a <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800c92c:	bf18      	it	ne
 800c92e:	2a03      	cmpne	r2, #3
 800c930:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800c934:	bf8c      	ite	hi
 800c936:	2301      	movhi	r3, #1
 800c938:	2300      	movls	r3, #0
 800c93a:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800c93e:	bf0c      	ite	eq
 800c940:	2300      	moveq	r3, #0
 800c942:	f003 0301 	andne.w	r3, r3, #1
 800c946:	3a11      	subs	r2, #17
 800c948:	2a01      	cmp	r2, #1
 800c94a:	bf94      	ite	ls
 800c94c:	2300      	movls	r3, #0
 800c94e:	f003 0301 	andhi.w	r3, r3, #1
 800c952:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800c956:	bf0c      	ite	eq
 800c958:	2300      	moveq	r3, #0
 800c95a:	f003 0301 	andne.w	r3, r3, #1
 800c95e:	b11b      	cbz	r3, 800c968 <HAL_GPIO_Init+0xb8>
 800c960:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800c964:	f040 813e 	bne.w	800cbe4 <HAL_GPIO_Init+0x334>
{
 800c968:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c96a:	f8df a260 	ldr.w	sl, [pc, #608]	; 800cbcc <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c96e:	46b8      	mov	r8, r7
 800c970:	e003      	b.n	800c97a <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800c972:	3501      	adds	r5, #1
 800c974:	2d10      	cmp	r5, #16
 800c976:	f000 80b3 	beq.w	800cae0 <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800c97a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c97c:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800c980:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c982:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800c986:	ea34 0303 	bics.w	r3, r4, r3
 800c98a:	d1f2      	bne.n	800c972 <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c98c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c990:	f001 0303 	and.w	r3, r1, #3
 800c994:	1e5a      	subs	r2, r3, #1
 800c996:	2a01      	cmp	r2, #1
 800c998:	f240 80a5 	bls.w	800cae6 <HAL_GPIO_Init+0x236>
 800c99c:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c99e:	f04f 0b03 	mov.w	fp, #3
 800c9a2:	fa0b fb07 	lsl.w	fp, fp, r7
 800c9a6:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c9aa:	2b03      	cmp	r3, #3
 800c9ac:	d025      	beq.n	800c9fa <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800c9ae:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c9b2:	2802      	cmp	r0, #2
 800c9b4:	f200 80b3 	bhi.w	800cb1e <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800c9b8:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c9ba:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c9bc:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c9be:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c9c2:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800c9c6:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c9c8:	d117      	bne.n	800c9fa <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800c9ca:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800c9ce:	280f      	cmp	r0, #15
 800c9d0:	f200 80c8 	bhi.w	800cb64 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800c9d4:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c9d6:	f005 0e07 	and.w	lr, r5, #7
 800c9da:	f04f 0c0f 	mov.w	ip, #15
 800c9de:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c9e2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800c9e6:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c9e8:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c9ec:	fa0c fe0e 	lsl.w	lr, ip, lr
 800c9f0:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c9f4:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800c9f8:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800c9fa:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c9fc:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c9fe:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ca02:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ca06:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800ca0a:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ca0c:	d0b1      	beq.n	800c972 <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca0e:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800ca12:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ca16:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ca1e:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca20:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800ca24:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800ca28:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800ca2c:	9203      	str	r2, [sp, #12]
 800ca2e:	4a5e      	ldr	r2, [pc, #376]	; (800cba8 <HAL_GPIO_Init+0x2f8>)
 800ca30:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800ca32:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ca34:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800ca36:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ca38:	40a3      	lsls	r3, r4
 800ca3a:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ca3e:	4857      	ldr	r0, [pc, #348]	; (800cb9c <HAL_GPIO_Init+0x2ec>)
 800ca40:	4286      	cmp	r6, r0
 800ca42:	d025      	beq.n	800ca90 <HAL_GPIO_Init+0x1e0>
 800ca44:	9801      	ldr	r0, [sp, #4]
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d07d      	beq.n	800cb46 <HAL_GPIO_Init+0x296>
 800ca4a:	4855      	ldr	r0, [pc, #340]	; (800cba0 <HAL_GPIO_Init+0x2f0>)
 800ca4c:	4286      	cmp	r6, r0
 800ca4e:	d07f      	beq.n	800cb50 <HAL_GPIO_Init+0x2a0>
 800ca50:	4856      	ldr	r0, [pc, #344]	; (800cbac <HAL_GPIO_Init+0x2fc>)
 800ca52:	4286      	cmp	r6, r0
 800ca54:	f000 8091 	beq.w	800cb7a <HAL_GPIO_Init+0x2ca>
 800ca58:	4855      	ldr	r0, [pc, #340]	; (800cbb0 <HAL_GPIO_Init+0x300>)
 800ca5a:	4286      	cmp	r6, r0
 800ca5c:	f000 8092 	beq.w	800cb84 <HAL_GPIO_Init+0x2d4>
 800ca60:	4854      	ldr	r0, [pc, #336]	; (800cbb4 <HAL_GPIO_Init+0x304>)
 800ca62:	4286      	cmp	r6, r0
 800ca64:	f000 80b4 	beq.w	800cbd0 <HAL_GPIO_Init+0x320>
 800ca68:	4853      	ldr	r0, [pc, #332]	; (800cbb8 <HAL_GPIO_Init+0x308>)
 800ca6a:	4286      	cmp	r6, r0
 800ca6c:	f000 80b5 	beq.w	800cbda <HAL_GPIO_Init+0x32a>
 800ca70:	4852      	ldr	r0, [pc, #328]	; (800cbbc <HAL_GPIO_Init+0x30c>)
 800ca72:	4286      	cmp	r6, r0
 800ca74:	f000 808b 	beq.w	800cb8e <HAL_GPIO_Init+0x2de>
 800ca78:	4851      	ldr	r0, [pc, #324]	; (800cbc0 <HAL_GPIO_Init+0x310>)
 800ca7a:	4286      	cmp	r6, r0
 800ca7c:	f000 80b7 	beq.w	800cbee <HAL_GPIO_Init+0x33e>
 800ca80:	4850      	ldr	r0, [pc, #320]	; (800cbc4 <HAL_GPIO_Init+0x314>)
 800ca82:	4286      	cmp	r6, r0
 800ca84:	bf0c      	ite	eq
 800ca86:	2009      	moveq	r0, #9
 800ca88:	200a      	movne	r0, #10
 800ca8a:	fa00 f404 	lsl.w	r4, r0, r4
 800ca8e:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800ca90:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800ca92:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800ca96:	4b4c      	ldr	r3, [pc, #304]	; (800cbc8 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800ca98:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800ca9a:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ca9c:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800ca9e:	4b4a      	ldr	r3, [pc, #296]	; (800cbc8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800caa0:	bf54      	ite	pl
 800caa2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800caa4:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800caa8:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800caaa:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800caac:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800caae:	4b46      	ldr	r3, [pc, #280]	; (800cbc8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cab0:	bf54      	ite	pl
 800cab2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800cab4:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cab8:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800caba:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800cabc:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800cabe:	4b42      	ldr	r3, [pc, #264]	; (800cbc8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cac0:	bf54      	ite	pl
 800cac2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800cac4:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800cac8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800caca:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800cacc:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800cace:	4a3e      	ldr	r2, [pc, #248]	; (800cbc8 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cad0:	bf54      	ite	pl
 800cad2:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800cad4:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800cad8:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800cada:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cadc:	f47f af4d 	bne.w	800c97a <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800cae0:	b005      	add	sp, #20
 800cae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800cae6:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800caea:	2803      	cmp	r0, #3
 800caec:	d820      	bhi.n	800cb30 <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800caee:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800caf0:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800caf4:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800caf8:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800cafc:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cafe:	ea20 000b 	bic.w	r0, r0, fp
 800cb02:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800cb06:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800cb0a:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800cb0c:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cb0e:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cb12:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800cb16:	40ac      	lsls	r4, r5
 800cb18:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800cb1a:	6074      	str	r4, [r6, #4]
 800cb1c:	e745      	b.n	800c9aa <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800cb1e:	21ce      	movs	r1, #206	; 0xce
 800cb20:	4820      	ldr	r0, [pc, #128]	; (800cba4 <HAL_GPIO_Init+0x2f4>)
 800cb22:	f7f8 fea1 	bl	8005868 <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800cb26:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cb2a:	f001 0303 	and.w	r3, r1, #3
 800cb2e:	e743      	b.n	800c9b8 <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800cb30:	21bd      	movs	r1, #189	; 0xbd
 800cb32:	481c      	ldr	r0, [pc, #112]	; (800cba4 <HAL_GPIO_Init+0x2f4>)
 800cb34:	f7f8 fe98 	bl	8005868 <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cb38:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800cb3c:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cb40:	f001 0303 	and.w	r3, r1, #3
 800cb44:	e7d3      	b.n	800caee <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cb46:	2001      	movs	r0, #1
 800cb48:	fa00 f404 	lsl.w	r4, r0, r4
 800cb4c:	4323      	orrs	r3, r4
 800cb4e:	e79f      	b.n	800ca90 <HAL_GPIO_Init+0x1e0>
 800cb50:	2002      	movs	r0, #2
 800cb52:	fa00 f404 	lsl.w	r4, r0, r4
 800cb56:	4323      	orrs	r3, r4
 800cb58:	e79a      	b.n	800ca90 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800cb5a:	21ab      	movs	r1, #171	; 0xab
 800cb5c:	4811      	ldr	r0, [pc, #68]	; (800cba4 <HAL_GPIO_Init+0x2f4>)
 800cb5e:	f7f8 fe83 	bl	8005868 <assert_failed>
 800cb62:	e6e0      	b.n	800c926 <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800cb64:	21db      	movs	r1, #219	; 0xdb
 800cb66:	480f      	ldr	r0, [pc, #60]	; (800cba4 <HAL_GPIO_Init+0x2f4>)
 800cb68:	f7f8 fe7e 	bl	8005868 <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cb6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800cb70:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cb74:	f001 0303 	and.w	r3, r1, #3
 800cb78:	e72c      	b.n	800c9d4 <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cb7a:	2003      	movs	r0, #3
 800cb7c:	fa00 f404 	lsl.w	r4, r0, r4
 800cb80:	4323      	orrs	r3, r4
 800cb82:	e785      	b.n	800ca90 <HAL_GPIO_Init+0x1e0>
 800cb84:	2004      	movs	r0, #4
 800cb86:	fa00 f404 	lsl.w	r4, r0, r4
 800cb8a:	4323      	orrs	r3, r4
 800cb8c:	e780      	b.n	800ca90 <HAL_GPIO_Init+0x1e0>
 800cb8e:	2007      	movs	r0, #7
 800cb90:	fa00 f404 	lsl.w	r4, r0, r4
 800cb94:	4323      	orrs	r3, r4
 800cb96:	e77b      	b.n	800ca90 <HAL_GPIO_Init+0x1e0>
 800cb98:	40020400 	.word	0x40020400
 800cb9c:	40020000 	.word	0x40020000
 800cba0:	40020800 	.word	0x40020800
 800cba4:	0802e314 	.word	0x0802e314
 800cba8:	40013800 	.word	0x40013800
 800cbac:	40020c00 	.word	0x40020c00
 800cbb0:	40021000 	.word	0x40021000
 800cbb4:	40021400 	.word	0x40021400
 800cbb8:	40021800 	.word	0x40021800
 800cbbc:	40021c00 	.word	0x40021c00
 800cbc0:	40022000 	.word	0x40022000
 800cbc4:	40022400 	.word	0x40022400
 800cbc8:	40013c00 	.word	0x40013c00
 800cbcc:	40023800 	.word	0x40023800
 800cbd0:	2005      	movs	r0, #5
 800cbd2:	fa00 f404 	lsl.w	r4, r0, r4
 800cbd6:	4323      	orrs	r3, r4
 800cbd8:	e75a      	b.n	800ca90 <HAL_GPIO_Init+0x1e0>
 800cbda:	2006      	movs	r0, #6
 800cbdc:	fa00 f404 	lsl.w	r4, r0, r4
 800cbe0:	4323      	orrs	r3, r4
 800cbe2:	e755      	b.n	800ca90 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800cbe4:	21ac      	movs	r1, #172	; 0xac
 800cbe6:	4804      	ldr	r0, [pc, #16]	; (800cbf8 <HAL_GPIO_Init+0x348>)
 800cbe8:	f7f8 fe3e 	bl	8005868 <assert_failed>
 800cbec:	e6bc      	b.n	800c968 <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cbee:	2008      	movs	r0, #8
 800cbf0:	fa00 f404 	lsl.w	r4, r0, r4
 800cbf4:	4323      	orrs	r3, r4
 800cbf6:	e74b      	b.n	800ca90 <HAL_GPIO_Init+0x1e0>
 800cbf8:	0802e314 	.word	0x0802e314

0800cbfc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cbfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800cc00:	4f6b      	ldr	r7, [pc, #428]	; (800cdb0 <HAL_GPIO_DeInit+0x1b4>)
{
 800cc02:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800cc04:	4b6b      	ldr	r3, [pc, #428]	; (800cdb4 <HAL_GPIO_DeInit+0x1b8>)
{
 800cc06:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800cc08:	42b8      	cmp	r0, r7
 800cc0a:	bf18      	it	ne
 800cc0c:	4298      	cmpne	r0, r3
 800cc0e:	bf14      	ite	ne
 800cc10:	2701      	movne	r7, #1
 800cc12:	2700      	moveq	r7, #0
 800cc14:	d027      	beq.n	800cc66 <HAL_GPIO_DeInit+0x6a>
 800cc16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc1a:	4298      	cmp	r0, r3
 800cc1c:	d023      	beq.n	800cc66 <HAL_GPIO_DeInit+0x6a>
 800cc1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc22:	4298      	cmp	r0, r3
 800cc24:	d01f      	beq.n	800cc66 <HAL_GPIO_DeInit+0x6a>
 800cc26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc2a:	4298      	cmp	r0, r3
 800cc2c:	d01b      	beq.n	800cc66 <HAL_GPIO_DeInit+0x6a>
 800cc2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc32:	4298      	cmp	r0, r3
 800cc34:	d017      	beq.n	800cc66 <HAL_GPIO_DeInit+0x6a>
 800cc36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc3a:	4298      	cmp	r0, r3
 800cc3c:	d013      	beq.n	800cc66 <HAL_GPIO_DeInit+0x6a>
 800cc3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc42:	4298      	cmp	r0, r3
 800cc44:	d00f      	beq.n	800cc66 <HAL_GPIO_DeInit+0x6a>
 800cc46:	4a5c      	ldr	r2, [pc, #368]	; (800cdb8 <HAL_GPIO_DeInit+0x1bc>)
 800cc48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4c:	4290      	cmp	r0, r2
 800cc4e:	bf18      	it	ne
 800cc50:	4298      	cmpne	r0, r3
 800cc52:	d008      	beq.n	800cc66 <HAL_GPIO_DeInit+0x6a>
 800cc54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc58:	4298      	cmp	r0, r3
 800cc5a:	d004      	beq.n	800cc66 <HAL_GPIO_DeInit+0x6a>
 800cc5c:	f240 112b 	movw	r1, #299	; 0x12b
 800cc60:	4856      	ldr	r0, [pc, #344]	; (800cdbc <HAL_GPIO_DeInit+0x1c0>)
 800cc62:	f7f8 fe01 	bl	8005868 <assert_failed>
{
 800cc66:	2300      	movs	r3, #0
 800cc68:	f8df b170 	ldr.w	fp, [pc, #368]	; 800cddc <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cc6c:	f8df a140 	ldr.w	sl, [pc, #320]	; 800cdb0 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cc70:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800cde0 <HAL_GPIO_DeInit+0x1e4>
 800cc74:	e002      	b.n	800cc7c <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800cc76:	3301      	adds	r3, #1
 800cc78:	2b10      	cmp	r3, #16
 800cc7a:	d07b      	beq.n	800cd74 <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800cc7c:	2001      	movs	r0, #1
 800cc7e:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800cc82:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800cc86:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800cc8a:	d1f4      	bne.n	800cc76 <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800cc8c:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cc90:	f003 0103 	and.w	r1, r3, #3
 800cc94:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cc98:	4554      	cmp	r4, sl
 800cc9a:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cc9c:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800cca0:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cca4:	fa0c fc01 	lsl.w	ip, ip, r1
 800cca8:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800ccac:	d01e      	beq.n	800ccec <HAL_GPIO_DeInit+0xf0>
 800ccae:	2f00      	cmp	r7, #0
 800ccb0:	d063      	beq.n	800cd7a <HAL_GPIO_DeInit+0x17e>
 800ccb2:	4843      	ldr	r0, [pc, #268]	; (800cdc0 <HAL_GPIO_DeInit+0x1c4>)
 800ccb4:	4284      	cmp	r4, r0
 800ccb6:	d063      	beq.n	800cd80 <HAL_GPIO_DeInit+0x184>
 800ccb8:	4842      	ldr	r0, [pc, #264]	; (800cdc4 <HAL_GPIO_DeInit+0x1c8>)
 800ccba:	4284      	cmp	r4, r0
 800ccbc:	d064      	beq.n	800cd88 <HAL_GPIO_DeInit+0x18c>
 800ccbe:	4842      	ldr	r0, [pc, #264]	; (800cdc8 <HAL_GPIO_DeInit+0x1cc>)
 800ccc0:	4284      	cmp	r4, r0
 800ccc2:	d065      	beq.n	800cd90 <HAL_GPIO_DeInit+0x194>
 800ccc4:	4841      	ldr	r0, [pc, #260]	; (800cdcc <HAL_GPIO_DeInit+0x1d0>)
 800ccc6:	4284      	cmp	r4, r0
 800ccc8:	d066      	beq.n	800cd98 <HAL_GPIO_DeInit+0x19c>
 800ccca:	4841      	ldr	r0, [pc, #260]	; (800cdd0 <HAL_GPIO_DeInit+0x1d4>)
 800cccc:	4284      	cmp	r4, r0
 800ccce:	d053      	beq.n	800cd78 <HAL_GPIO_DeInit+0x17c>
 800ccd0:	4840      	ldr	r0, [pc, #256]	; (800cdd4 <HAL_GPIO_DeInit+0x1d8>)
 800ccd2:	4284      	cmp	r4, r0
 800ccd4:	d064      	beq.n	800cda0 <HAL_GPIO_DeInit+0x1a4>
 800ccd6:	4838      	ldr	r0, [pc, #224]	; (800cdb8 <HAL_GPIO_DeInit+0x1bc>)
 800ccd8:	4284      	cmp	r4, r0
 800ccda:	d065      	beq.n	800cda8 <HAL_GPIO_DeInit+0x1ac>
 800ccdc:	483e      	ldr	r0, [pc, #248]	; (800cdd8 <HAL_GPIO_DeInit+0x1dc>)
 800ccde:	4284      	cmp	r4, r0
 800cce0:	bf14      	ite	ne
 800cce2:	200a      	movne	r0, #10
 800cce4:	2009      	moveq	r0, #9
 800cce6:	fa00 f101 	lsl.w	r1, r0, r1
 800ccea:	e000      	b.n	800ccee <HAL_GPIO_DeInit+0xf2>
 800ccec:	2100      	movs	r1, #0
 800ccee:	4588      	cmp	r8, r1
 800ccf0:	d11b      	bne.n	800cd2a <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ccf2:	f8d9 1000 	ldr.w	r1, [r9]
 800ccf6:	ea21 010e 	bic.w	r1, r1, lr
 800ccfa:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ccfe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd02:	ea21 010e 	bic.w	r1, r1, lr
 800cd06:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cd0a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800cd0e:	ea21 010e 	bic.w	r1, r1, lr
 800cd12:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cd16:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800cd1a:	ea21 010e 	bic.w	r1, r1, lr
 800cd1e:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800cd22:	68b1      	ldr	r1, [r6, #8]
 800cd24:	ea21 010c 	bic.w	r1, r1, ip
 800cd28:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cd2a:	0059      	lsls	r1, r3, #1
 800cd2c:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cd2e:	f003 0c07 	and.w	ip, r3, #7
 800cd32:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cd34:	fa00 f101 	lsl.w	r1, r0, r1
 800cd38:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cd3a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cd3e:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cd42:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cd46:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cd48:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800cd50:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cd52:	6a06      	ldr	r6, [r0, #32]
 800cd54:	ea26 060c 	bic.w	r6, r6, ip
 800cd58:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800cd5a:	68e0      	ldr	r0, [r4, #12]
 800cd5c:	ea20 0001 	bic.w	r0, r0, r1
 800cd60:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cd62:	6860      	ldr	r0, [r4, #4]
 800cd64:	ea20 0202 	bic.w	r2, r0, r2
 800cd68:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cd6a:	68a2      	ldr	r2, [r4, #8]
 800cd6c:	ea22 0101 	bic.w	r1, r2, r1
 800cd70:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cd72:	d183      	bne.n	800cc7c <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800cd74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cd78:	2006      	movs	r0, #6
 800cd7a:	fa00 f101 	lsl.w	r1, r0, r1
 800cd7e:	e7b6      	b.n	800ccee <HAL_GPIO_DeInit+0xf2>
 800cd80:	2002      	movs	r0, #2
 800cd82:	fa00 f101 	lsl.w	r1, r0, r1
 800cd86:	e7b2      	b.n	800ccee <HAL_GPIO_DeInit+0xf2>
 800cd88:	2003      	movs	r0, #3
 800cd8a:	fa00 f101 	lsl.w	r1, r0, r1
 800cd8e:	e7ae      	b.n	800ccee <HAL_GPIO_DeInit+0xf2>
 800cd90:	2004      	movs	r0, #4
 800cd92:	fa00 f101 	lsl.w	r1, r0, r1
 800cd96:	e7aa      	b.n	800ccee <HAL_GPIO_DeInit+0xf2>
 800cd98:	2005      	movs	r0, #5
 800cd9a:	fa00 f101 	lsl.w	r1, r0, r1
 800cd9e:	e7a6      	b.n	800ccee <HAL_GPIO_DeInit+0xf2>
 800cda0:	2007      	movs	r0, #7
 800cda2:	fa00 f101 	lsl.w	r1, r0, r1
 800cda6:	e7a2      	b.n	800ccee <HAL_GPIO_DeInit+0xf2>
 800cda8:	2008      	movs	r0, #8
 800cdaa:	fa00 f101 	lsl.w	r1, r0, r1
 800cdae:	e79e      	b.n	800ccee <HAL_GPIO_DeInit+0xf2>
 800cdb0:	40020000 	.word	0x40020000
 800cdb4:	40020400 	.word	0x40020400
 800cdb8:	40022000 	.word	0x40022000
 800cdbc:	0802e314 	.word	0x0802e314
 800cdc0:	40020800 	.word	0x40020800
 800cdc4:	40020c00 	.word	0x40020c00
 800cdc8:	40021000 	.word	0x40021000
 800cdcc:	40021400 	.word	0x40021400
 800cdd0:	40021800 	.word	0x40021800
 800cdd4:	40021c00 	.word	0x40021c00
 800cdd8:	40022400 	.word	0x40022400
 800cddc:	40013800 	.word	0x40013800
 800cde0:	40013c00 	.word	0x40013c00

0800cde4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cde8:	460c      	mov	r4, r1
 800cdea:	b129      	cbz	r1, 800cdf8 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cdec:	692b      	ldr	r3, [r5, #16]
 800cdee:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800cdf0:	bf14      	ite	ne
 800cdf2:	2001      	movne	r0, #1
 800cdf4:	2000      	moveq	r0, #0
 800cdf6:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cdf8:	f240 1177 	movw	r1, #375	; 0x177
 800cdfc:	4801      	ldr	r0, [pc, #4]	; (800ce04 <HAL_GPIO_ReadPin+0x20>)
 800cdfe:	f7f8 fd33 	bl	8005868 <assert_failed>
 800ce02:	e7f3      	b.n	800cdec <HAL_GPIO_ReadPin+0x8>
 800ce04:	0802e314 	.word	0x0802e314

0800ce08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce08:	b570      	push	{r4, r5, r6, lr}
 800ce0a:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce0c:	460c      	mov	r4, r1
{
 800ce0e:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce10:	b161      	cbz	r1, 800ce2c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800ce12:	2d01      	cmp	r5, #1
 800ce14:	d803      	bhi.n	800ce1e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800ce16:	b905      	cbnz	r5, 800ce1a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ce18:	0424      	lsls	r4, r4, #16
 800ce1a:	61b4      	str	r4, [r6, #24]
  }
}
 800ce1c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800ce1e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800ce22:	4805      	ldr	r0, [pc, #20]	; (800ce38 <HAL_GPIO_WritePin+0x30>)
 800ce24:	f7f8 fd20 	bl	8005868 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ce28:	61b4      	str	r4, [r6, #24]
}
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce2c:	f240 1197 	movw	r1, #407	; 0x197
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <HAL_GPIO_WritePin+0x30>)
 800ce32:	f7f8 fd19 	bl	8005868 <assert_failed>
 800ce36:	e7ec      	b.n	800ce12 <HAL_GPIO_WritePin+0xa>
 800ce38:	0802e314 	.word	0x0802e314

0800ce3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce40:	460c      	mov	r4, r1
 800ce42:	b141      	cbz	r1, 800ce56 <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ce44:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ce46:	ea04 0301 	and.w	r3, r4, r1
 800ce4a:	ea24 0401 	bic.w	r4, r4, r1
 800ce4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800ce52:	61ac      	str	r4, [r5, #24]
}
 800ce54:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce56:	f240 11af 	movw	r1, #431	; 0x1af
 800ce5a:	4802      	ldr	r0, [pc, #8]	; (800ce64 <HAL_GPIO_TogglePin+0x28>)
 800ce5c:	f7f8 fd04 	bl	8005868 <assert_failed>
 800ce60:	e7f0      	b.n	800ce44 <HAL_GPIO_TogglePin+0x8>
 800ce62:	bf00      	nop
 800ce64:	0802e314 	.word	0x0802e314

0800ce68 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop

0800ce6c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ce6c:	4a04      	ldr	r2, [pc, #16]	; (800ce80 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800ce6e:	6951      	ldr	r1, [r2, #20]
 800ce70:	4201      	tst	r1, r0
 800ce72:	d100      	bne.n	800ce76 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800ce74:	4770      	bx	lr
{
 800ce76:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ce78:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ce7a:	f7ff fff5 	bl	800ce68 <HAL_GPIO_EXTI_Callback>
}
 800ce7e:	bd08      	pop	{r3, pc}
 800ce80:	40013c00 	.word	0x40013c00

0800ce84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ce84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce88:	460d      	mov	r5, r1
 800ce8a:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ce8c:	4926      	ldr	r1, [pc, #152]	; (800cf28 <I2C_TransferConfig+0xa4>)
{
 800ce8e:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ce90:	4a26      	ldr	r2, [pc, #152]	; (800cf2c <I2C_TransferConfig+0xa8>)
{
 800ce92:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ce94:	6803      	ldr	r3, [r0, #0]
{
 800ce96:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	bf18      	it	ne
 800ce9c:	428b      	cmpne	r3, r1
 800ce9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cea2:	bf14      	ite	ne
 800cea4:	2201      	movne	r2, #1
 800cea6:	2200      	moveq	r2, #0
 800cea8:	428b      	cmp	r3, r1
 800ceaa:	bf0c      	ite	eq
 800ceac:	2200      	moveq	r2, #0
 800ceae:	f002 0201 	andne.w	r2, r2, #1
 800ceb2:	b112      	cbz	r2, 800ceba <I2C_TransferConfig+0x36>
 800ceb4:	4a1e      	ldr	r2, [pc, #120]	; (800cf30 <I2C_TransferConfig+0xac>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d123      	bne.n	800cf02 <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800ceba:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800cebe:	d002      	beq.n	800cec6 <I2C_TransferConfig+0x42>
 800cec0:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800cec4:	d129      	bne.n	800cf1a <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800cec6:	4b1b      	ldr	r3, [pc, #108]	; (800cf34 <I2C_TransferConfig+0xb0>)
 800cec8:	429f      	cmp	r7, r3
 800ceca:	d005      	beq.n	800ced8 <I2C_TransferConfig+0x54>
 800cecc:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800ced0:	4a19      	ldr	r2, [pc, #100]	; (800cf38 <I2C_TransferConfig+0xb4>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d000      	beq.n	800ced8 <I2C_TransferConfig+0x54>
 800ced6:	b9d7      	cbnz	r7, 800cf0e <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ced8:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cedc:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cee0:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800cee4:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800cee8:	4a14      	ldr	r2, [pc, #80]	; (800cf3c <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ceea:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800ceec:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800cef0:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cef2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800cef6:	ea27 0702 	bic.w	r7, r7, r2
 800cefa:	433b      	orrs	r3, r7
 800cefc:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cf02:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800cf06:	480e      	ldr	r0, [pc, #56]	; (800cf40 <I2C_TransferConfig+0xbc>)
 800cf08:	f7f8 fcae 	bl	8005868 <assert_failed>
 800cf0c:	e7d5      	b.n	800ceba <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800cf0e:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800cf12:	480b      	ldr	r0, [pc, #44]	; (800cf40 <I2C_TransferConfig+0xbc>)
 800cf14:	f7f8 fca8 	bl	8005868 <assert_failed>
 800cf18:	e7de      	b.n	800ced8 <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800cf1a:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800cf1e:	4808      	ldr	r0, [pc, #32]	; (800cf40 <I2C_TransferConfig+0xbc>)
 800cf20:	f7f8 fca2 	bl	8005868 <assert_failed>
 800cf24:	e7cf      	b.n	800cec6 <I2C_TransferConfig+0x42>
 800cf26:	bf00      	nop
 800cf28:	40005800 	.word	0x40005800
 800cf2c:	40005400 	.word	0x40005400
 800cf30:	40006000 	.word	0x40006000
 800cf34:	80004000 	.word	0x80004000
 800cf38:	80002000 	.word	0x80002000
 800cf3c:	03ff63ff 	.word	0x03ff63ff
 800cf40:	0802e350 	.word	0x0802e350

0800cf44 <I2C_IsErrorOccurred>:
{
 800cf44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800cf48:	6803      	ldr	r3, [r0, #0]
{
 800cf4a:	460d      	mov	r5, r1
 800cf4c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800cf4e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cf50:	f011 0110 	ands.w	r1, r1, #16
 800cf54:	d045      	beq.n	800cfe2 <I2C_IsErrorOccurred+0x9e>
 800cf56:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800cf58:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf5c:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800cf5e:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf62:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cf64:	699a      	ldr	r2, [r3, #24]
 800cf66:	0696      	lsls	r6, r2, #26
 800cf68:	f100 808d 	bmi.w	800d086 <I2C_IsErrorOccurred+0x142>
 800cf6c:	f1b9 0f00 	cmp.w	r9, #0
 800cf70:	f040 808d 	bne.w	800d08e <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800cf74:	1c6a      	adds	r2, r5, #1
 800cf76:	d152      	bne.n	800d01e <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cf78:	699a      	ldr	r2, [r3, #24]
 800cf7a:	0697      	lsls	r7, r2, #26
 800cf7c:	d5fc      	bpl.n	800cf78 <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf7e:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800cf80:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800cf82:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf86:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800cf88:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cf8a:	05d5      	lsls	r5, r2, #23
 800cf8c:	d42d      	bmi.n	800cfea <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cf8e:	0557      	lsls	r7, r2, #21
 800cf90:	d53d      	bpl.n	800d00e <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cf92:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800cf96:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cf9a:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cf9c:	0596      	lsls	r6, r2, #22
 800cf9e:	d504      	bpl.n	800cfaa <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cfa0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800cfa4:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cfa8:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cfaa:	699a      	ldr	r2, [r3, #24]
 800cfac:	0790      	lsls	r0, r2, #30
 800cfae:	d501      	bpl.n	800cfb4 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cfb4:	699a      	ldr	r2, [r3, #24]
 800cfb6:	07d2      	lsls	r2, r2, #31
 800cfb8:	d524      	bpl.n	800d004 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800cfba:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800cfbc:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800cfbe:	4835      	ldr	r0, [pc, #212]	; (800d094 <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800cfc0:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800cfc4:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfc6:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800cfc8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800cfca:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800cfcc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800cfd0:	4319      	orrs	r1, r3
 800cfd2:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cfd4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfd8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800cfdc:	4648      	mov	r0, r9
 800cfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800cfe2:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800cfe4:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cfe6:	05d5      	lsls	r5, r2, #23
 800cfe8:	d5d1      	bpl.n	800cf8e <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cfea:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800cfee:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cff2:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cff4:	0550      	lsls	r0, r2, #21
 800cff6:	d5d1      	bpl.n	800cf9c <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cff8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800cffc:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d000:	61d8      	str	r0, [r3, #28]
 800d002:	e7cb      	b.n	800cf9c <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d004:	699a      	ldr	r2, [r3, #24]
 800d006:	f042 0201 	orr.w	r2, r2, #1
 800d00a:	619a      	str	r2, [r3, #24]
 800d00c:	e7d5      	b.n	800cfba <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d00e:	0595      	lsls	r5, r2, #22
 800d010:	d4c6      	bmi.n	800cfa0 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800d012:	f1b9 0f00 	cmp.w	r9, #0
 800d016:	d1c8      	bne.n	800cfaa <I2C_IsErrorOccurred+0x66>
}
 800d018:	4648      	mov	r0, r9
 800d01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d01e:	f7fc f971 	bl	8009304 <HAL_GetTick>
 800d022:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d024:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d026:	42a8      	cmp	r0, r5
 800d028:	d801      	bhi.n	800d02e <I2C_IsErrorOccurred+0xea>
 800d02a:	2d00      	cmp	r5, #0
 800d02c:	d19a      	bne.n	800cf64 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d02e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800d030:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d034:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800d036:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d038:	040e      	lsls	r6, r1, #16
 800d03a:	d50d      	bpl.n	800d058 <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800d03c:	0441      	lsls	r1, r0, #17
 800d03e:	d40b      	bmi.n	800d058 <I2C_IsErrorOccurred+0x114>
 800d040:	2a20      	cmp	r2, #32
 800d042:	d009      	beq.n	800d058 <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d044:	685a      	ldr	r2, [r3, #4]
 800d046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d04a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800d04c:	f7fc f95a 	bl	8009304 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d050:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800d052:	4607      	mov	r7, r0
 800d054:	e000      	b.n	800d058 <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	699e      	ldr	r6, [r3, #24]
 800d05a:	f016 0620 	ands.w	r6, r6, #32
 800d05e:	d181      	bne.n	800cf64 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d060:	f7fc f950 	bl	8009304 <HAL_GetTick>
 800d064:	1bc0      	subs	r0, r0, r7
 800d066:	2819      	cmp	r0, #25
 800d068:	d9f5      	bls.n	800d056 <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d06a:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800d06c:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800d070:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d074:	f043 0320 	orr.w	r3, r3, #32
 800d078:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d07a:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d07e:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d080:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800d084:	e7e8      	b.n	800d058 <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800d086:	f1b9 0f00 	cmp.w	r9, #0
 800d08a:	f43f af78 	beq.w	800cf7e <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800d08e:	2104      	movs	r1, #4
 800d090:	e7a8      	b.n	800cfe4 <I2C_IsErrorOccurred+0xa0>
 800d092:	bf00      	nop
 800d094:	fe00e800 	.word	0xfe00e800

0800d098 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800d098:	b570      	push	{r4, r5, r6, lr}
 800d09a:	4604      	mov	r4, r0
 800d09c:	460d      	mov	r5, r1
 800d09e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d0a0:	e004      	b.n	800d0ac <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0a2:	f7ff ff4f 	bl	800cf44 <I2C_IsErrorOccurred>
 800d0a6:	b950      	cbnz	r0, 800d0be <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800d0a8:	1c6a      	adds	r2, r5, #1
 800d0aa:	d10a      	bne.n	800d0c2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d0ac:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0ae:	4632      	mov	r2, r6
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	079b      	lsls	r3, r3, #30
 800d0b8:	d5f3      	bpl.n	800d0a2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800d0ba:	2000      	movs	r0, #0
}
 800d0bc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d0be:	2001      	movs	r0, #1
}
 800d0c0:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0c2:	f7fc f91f 	bl	8009304 <HAL_GetTick>
 800d0c6:	1b80      	subs	r0, r0, r6
 800d0c8:	42a8      	cmp	r0, r5
 800d0ca:	d801      	bhi.n	800d0d0 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	d1ed      	bne.n	800d0ac <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d0d2:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0d4:	2200      	movs	r2, #0
        return HAL_ERROR;
 800d0d6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0d8:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d0da:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0de:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d0e0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d0e8:	bd70      	pop	{r4, r5, r6, pc}
 800d0ea:	bf00      	nop

0800d0ec <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0f4:	e008      	b.n	800d108 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0f6:	f7ff ff25 	bl	800cf44 <I2C_IsErrorOccurred>
 800d0fa:	b9d8      	cbnz	r0, 800d134 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0fc:	f7fc f902 	bl	8009304 <HAL_GetTick>
 800d100:	1b80      	subs	r0, r0, r6
 800d102:	42a0      	cmp	r0, r4
 800d104:	d809      	bhi.n	800d11a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800d106:	b144      	cbz	r4, 800d11a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d108:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d10a:	4632      	mov	r2, r6
 800d10c:	4621      	mov	r1, r4
 800d10e:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d110:	699b      	ldr	r3, [r3, #24]
 800d112:	069b      	lsls	r3, r3, #26
 800d114:	d5ef      	bpl.n	800d0f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800d116:	2000      	movs	r0, #0
}
 800d118:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d11a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d11c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d11e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800d120:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d122:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d124:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d128:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d12a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d12e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d132:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d134:	2001      	movs	r0, #1
}
 800d136:	bd70      	pop	{r4, r5, r6, pc}

0800d138 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800d138:	b570      	push	{r4, r5, r6, lr}
 800d13a:	4604      	mov	r4, r0
 800d13c:	460d      	mov	r5, r1
 800d13e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d140:	e00c      	b.n	800d15c <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d142:	f7ff feff 	bl	800cf44 <I2C_IsErrorOccurred>
 800d146:	b9e8      	cbnz	r0, 800d184 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d148:	6823      	ldr	r3, [r4, #0]
 800d14a:	699a      	ldr	r2, [r3, #24]
 800d14c:	0691      	lsls	r1, r2, #26
 800d14e:	d41b      	bmi.n	800d188 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d150:	f7fc f8d8 	bl	8009304 <HAL_GetTick>
 800d154:	1b80      	subs	r0, r0, r6
 800d156:	42a8      	cmp	r0, r5
 800d158:	d809      	bhi.n	800d16e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800d15a:	b145      	cbz	r5, 800d16e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d15c:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d15e:	4632      	mov	r2, r6
 800d160:	4629      	mov	r1, r5
 800d162:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	075b      	lsls	r3, r3, #29
 800d168:	d5eb      	bpl.n	800d142 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800d16a:	2000      	movs	r0, #0
}
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d16e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d170:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800d172:	2100      	movs	r1, #0
      return HAL_ERROR;
 800d174:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d176:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800d178:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d17c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d17e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800d182:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d184:	2001      	movs	r0, #1
}
 800d186:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d188:	699a      	ldr	r2, [r3, #24]
 800d18a:	0752      	lsls	r2, r2, #29
 800d18c:	d502      	bpl.n	800d194 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800d18e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d190:	2a00      	cmp	r2, #0
 800d192:	d1ea      	bne.n	800d16a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d194:	699a      	ldr	r2, [r3, #24]
 800d196:	f012 0210 	ands.w	r2, r2, #16
 800d19a:	d012      	beq.n	800d1c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d19c:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d19e:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1a0:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d1a2:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d1a4:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800d1a6:	4808      	ldr	r0, [pc, #32]	; (800d1c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1a8:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d1aa:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	4002      	ands	r2, r0
        return HAL_ERROR;
 800d1b0:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800d1b2:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800d1b4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800d1b8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d1c0:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1c2:	6462      	str	r2, [r4, #68]	; 0x44
 800d1c4:	e7ee      	b.n	800d1a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800d1c6:	bf00      	nop
 800d1c8:	fe00e800 	.word	0xfe00e800

0800d1cc <I2C_RequestMemoryRead>:
{
 800d1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d1d0:	4c26      	ldr	r4, [pc, #152]	; (800d26c <I2C_RequestMemoryRead+0xa0>)
{
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	4698      	mov	r8, r3
 800d1d6:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d1d8:	9400      	str	r4, [sp, #0]
{
 800d1da:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d1dc:	2300      	movs	r3, #0
 800d1de:	fa5f f288 	uxtb.w	r2, r8
{
 800d1e2:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d1e6:	f7ff fe4d 	bl	800ce84 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	463a      	mov	r2, r7
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	f7ff ff52 	bl	800d098 <I2C_WaitOnTXISFlagUntilTimeout>
 800d1f4:	b9e0      	cbnz	r0, 800d230 <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d1f6:	f1b8 0f01 	cmp.w	r8, #1
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	d10d      	bne.n	800d21a <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d1fe:	fa5f f389 	uxtb.w	r3, r9
 800d202:	682a      	ldr	r2, [r5, #0]
 800d204:	6293      	str	r3, [r2, #40]	; 0x28
 800d206:	e001      	b.n	800d20c <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800d208:	1c61      	adds	r1, r4, #1
 800d20a:	d116      	bne.n	800d23a <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d20c:	6993      	ldr	r3, [r2, #24]
 800d20e:	065b      	lsls	r3, r3, #25
 800d210:	d5fa      	bpl.n	800d208 <I2C_RequestMemoryRead+0x3c>
}
 800d212:	4630      	mov	r0, r6
 800d214:	b003      	add	sp, #12
 800d216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d21a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800d21e:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d220:	4621      	mov	r1, r4
 800d222:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d224:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d226:	463a      	mov	r2, r7
 800d228:	f7ff ff36 	bl	800d098 <I2C_WaitOnTXISFlagUntilTimeout>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d0e6      	beq.n	800d1fe <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800d230:	2601      	movs	r6, #1
}
 800d232:	4630      	mov	r0, r6
 800d234:	b003      	add	sp, #12
 800d236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d23a:	f7fc f863 	bl	8009304 <HAL_GetTick>
 800d23e:	1bc0      	subs	r0, r0, r7
 800d240:	4284      	cmp	r4, r0
 800d242:	d302      	bcc.n	800d24a <I2C_RequestMemoryRead+0x7e>
 800d244:	b10c      	cbz	r4, 800d24a <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d246:	682a      	ldr	r2, [r5, #0]
 800d248:	e7e0      	b.n	800d20c <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d24a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d24c:	2120      	movs	r1, #32
    return HAL_ERROR;
 800d24e:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d250:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d252:	430b      	orrs	r3, r1
}
 800d254:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800d256:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d25a:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d25c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d260:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d264:	b003      	add	sp, #12
 800d266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d26a:	bf00      	nop
 800d26c:	80002000 	.word	0x80002000

0800d270 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800d270:	2800      	cmp	r0, #0
 800d272:	f000 80c1 	beq.w	800d3f8 <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d276:	4b61      	ldr	r3, [pc, #388]	; (800d3fc <HAL_I2C_Init+0x18c>)
 800d278:	6802      	ldr	r2, [r0, #0]
 800d27a:	4961      	ldr	r1, [pc, #388]	; (800d400 <HAL_I2C_Init+0x190>)
{
 800d27c:	b510      	push	{r4, lr}
 800d27e:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d280:	4860      	ldr	r0, [pc, #384]	; (800d404 <HAL_I2C_Init+0x194>)
 800d282:	429a      	cmp	r2, r3
 800d284:	bf18      	it	ne
 800d286:	4282      	cmpne	r2, r0
 800d288:	bf14      	ite	ne
 800d28a:	2301      	movne	r3, #1
 800d28c:	2300      	moveq	r3, #0
 800d28e:	428a      	cmp	r2, r1
 800d290:	bf0c      	ite	eq
 800d292:	2300      	moveq	r3, #0
 800d294:	f003 0301 	andne.w	r3, r3, #1
 800d298:	b11b      	cbz	r3, 800d2a2 <HAL_I2C_Init+0x32>
 800d29a:	4b5b      	ldr	r3, [pc, #364]	; (800d408 <HAL_I2C_Init+0x198>)
 800d29c:	429a      	cmp	r2, r3
 800d29e:	f040 80a5 	bne.w	800d3ec <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d2a2:	68a3      	ldr	r3, [r4, #8]
 800d2a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2a8:	f080 809a 	bcs.w	800d3e0 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d2ac:	68e3      	ldr	r3, [r4, #12]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d855      	bhi.n	800d360 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d2b4:	6923      	ldr	r3, [r4, #16]
 800d2b6:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800d2ba:	d15a      	bne.n	800d372 <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d2bc:	6963      	ldr	r3, [r4, #20]
 800d2be:	2bff      	cmp	r3, #255	; 0xff
 800d2c0:	d85f      	bhi.n	800d382 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d2c2:	69a3      	ldr	r3, [r4, #24]
 800d2c4:	2b07      	cmp	r3, #7
 800d2c6:	d864      	bhi.n	800d392 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d2c8:	69e3      	ldr	r3, [r4, #28]
 800d2ca:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800d2ce:	d169      	bne.n	800d3a4 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d2d0:	6a23      	ldr	r3, [r4, #32]
 800d2d2:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800d2d6:	d16e      	bne.n	800d3b6 <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d2d8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d2dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d073      	beq.n	800d3cc <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800d2e4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d2e6:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d2e8:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d2ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d2ee:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d2f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d2f4:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800d2f6:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d2fa:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800d2fc:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d2fe:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d300:	689a      	ldr	r2, [r3, #8]
 800d302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d306:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d308:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d30a:	d065      	beq.n	800d3d8 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d30c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d310:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d312:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d314:	d102      	bne.n	800d31c <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d31a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d31c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800d31e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d322:	493a      	ldr	r1, [pc, #232]	; (800d40c <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d324:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d326:	4301      	orrs	r1, r0
 800d328:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d32a:	68d9      	ldr	r1, [r3, #12]
 800d32c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800d330:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d332:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d336:	4302      	orrs	r2, r0
 800d338:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d33c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d340:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d342:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d344:	4301      	orrs	r1, r0
  return HAL_OK;
 800d346:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d348:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d34a:	6819      	ldr	r1, [r3, #0]
 800d34c:	f041 0101 	orr.w	r1, r1, #1
 800d350:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d352:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d354:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d358:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d35a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d35e:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d360:	f240 2117 	movw	r1, #535	; 0x217
 800d364:	482a      	ldr	r0, [pc, #168]	; (800d410 <HAL_I2C_Init+0x1a0>)
 800d366:	f7f8 fa7f 	bl	8005868 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d36a:	6923      	ldr	r3, [r4, #16]
 800d36c:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800d370:	d0a4      	beq.n	800d2bc <HAL_I2C_Init+0x4c>
 800d372:	f44f 7106 	mov.w	r1, #536	; 0x218
 800d376:	4826      	ldr	r0, [pc, #152]	; (800d410 <HAL_I2C_Init+0x1a0>)
 800d378:	f7f8 fa76 	bl	8005868 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d37c:	6963      	ldr	r3, [r4, #20]
 800d37e:	2bff      	cmp	r3, #255	; 0xff
 800d380:	d99f      	bls.n	800d2c2 <HAL_I2C_Init+0x52>
 800d382:	f240 2119 	movw	r1, #537	; 0x219
 800d386:	4822      	ldr	r0, [pc, #136]	; (800d410 <HAL_I2C_Init+0x1a0>)
 800d388:	f7f8 fa6e 	bl	8005868 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d38c:	69a3      	ldr	r3, [r4, #24]
 800d38e:	2b07      	cmp	r3, #7
 800d390:	d99a      	bls.n	800d2c8 <HAL_I2C_Init+0x58>
 800d392:	f240 211a 	movw	r1, #538	; 0x21a
 800d396:	481e      	ldr	r0, [pc, #120]	; (800d410 <HAL_I2C_Init+0x1a0>)
 800d398:	f7f8 fa66 	bl	8005868 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d39c:	69e3      	ldr	r3, [r4, #28]
 800d39e:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800d3a2:	d095      	beq.n	800d2d0 <HAL_I2C_Init+0x60>
 800d3a4:	f240 211b 	movw	r1, #539	; 0x21b
 800d3a8:	4819      	ldr	r0, [pc, #100]	; (800d410 <HAL_I2C_Init+0x1a0>)
 800d3aa:	f7f8 fa5d 	bl	8005868 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d3ae:	6a23      	ldr	r3, [r4, #32]
 800d3b0:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800d3b4:	d090      	beq.n	800d2d8 <HAL_I2C_Init+0x68>
 800d3b6:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800d3ba:	4815      	ldr	r0, [pc, #84]	; (800d410 <HAL_I2C_Init+0x1a0>)
 800d3bc:	f7f8 fa54 	bl	8005868 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d3c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d3c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d18b      	bne.n	800d2e4 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800d3cc:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800d3ce:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d3d2:	f7fa f8d7 	bl	8007584 <HAL_I2C_MspInit>
 800d3d6:	e785      	b.n	800d2e4 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d3d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3dc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d3de:	e79d      	b.n	800d31c <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d3e0:	f240 2116 	movw	r1, #534	; 0x216
 800d3e4:	480a      	ldr	r0, [pc, #40]	; (800d410 <HAL_I2C_Init+0x1a0>)
 800d3e6:	f7f8 fa3f 	bl	8005868 <assert_failed>
 800d3ea:	e75f      	b.n	800d2ac <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d3ec:	f240 2115 	movw	r1, #533	; 0x215
 800d3f0:	4807      	ldr	r0, [pc, #28]	; (800d410 <HAL_I2C_Init+0x1a0>)
 800d3f2:	f7f8 fa39 	bl	8005868 <assert_failed>
 800d3f6:	e754      	b.n	800d2a2 <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800d3f8:	2001      	movs	r0, #1
}
 800d3fa:	4770      	bx	lr
 800d3fc:	40005400 	.word	0x40005400
 800d400:	40005c00 	.word	0x40005c00
 800d404:	40005800 	.word	0x40005800
 800d408:	40006000 	.word	0x40006000
 800d40c:	02008000 	.word	0x02008000
 800d410:	0802e350 	.word	0x0802e350

0800d414 <HAL_I2C_Master_Transmit>:
{
 800d414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d418:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d41a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d41e:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d420:	2b20      	cmp	r3, #32
{
 800d422:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d424:	d16d      	bne.n	800d502 <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800d426:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d42a:	4604      	mov	r4, r0
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d068      	beq.n	800d502 <HAL_I2C_Master_Transmit+0xee>
 800d430:	2301      	movs	r3, #1
 800d432:	460f      	mov	r7, r1
 800d434:	4691      	mov	r9, r2
 800d436:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d43a:	f7fb ff63 	bl	8009304 <HAL_GetTick>
 800d43e:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d440:	e004      	b.n	800d44c <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d442:	f7fb ff5f 	bl	8009304 <HAL_GetTick>
 800d446:	1b80      	subs	r0, r0, r6
 800d448:	2819      	cmp	r0, #25
 800d44a:	d85e      	bhi.n	800d50a <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d44c:	6823      	ldr	r3, [r4, #0]
 800d44e:	6999      	ldr	r1, [r3, #24]
 800d450:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800d454:	d1f5      	bne.n	800d442 <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d456:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800d458:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800d45c:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d45e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d462:	2310      	movs	r3, #16
 800d464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d468:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d46a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d46e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d470:	b29b      	uxth	r3, r3
 800d472:	2bff      	cmp	r3, #255	; 0xff
 800d474:	d86d      	bhi.n	800d552 <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800d476:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d478:	4639      	mov	r1, r7
 800d47a:	4b48      	ldr	r3, [pc, #288]	; (800d59c <HAL_I2C_Master_Transmit+0x188>)
 800d47c:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800d47e:	b292      	uxth	r2, r2
 800d480:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d482:	b2d2      	uxtb	r2, r2
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d48a:	f7ff fcfb 	bl	800ce84 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d48e:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d492:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800d496:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d498:	4632      	mov	r2, r6
 800d49a:	4629      	mov	r1, r5
 800d49c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	b1eb      	cbz	r3, 800d4de <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4a2:	f7ff fdf9 	bl	800d098 <I2C_WaitOnTXISFlagUntilTimeout>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d174      	bne.n	800d594 <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d4aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d4ac:	6821      	ldr	r1, [r4, #0]
 800d4ae:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800d4b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d4b4:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800d4b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d4b8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800d4ba:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d4bc:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800d4be:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d4c0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d4c2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d4c4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d4c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d4c8:	b292      	uxth	r2, r2
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1e3      	bne.n	800d496 <HAL_I2C_Master_Transmit+0x82>
 800d4ce:	bb6a      	cbnz	r2, 800d52c <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800d4d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4d2:	4632      	mov	r2, r6
 800d4d4:	4629      	mov	r1, r5
 800d4d6:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1e1      	bne.n	800d4a2 <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4de:	f7ff fe05 	bl	800d0ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d156      	bne.n	800d594 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d4e6:	6823      	ldr	r3, [r4, #0]
 800d4e8:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d4ea:	4d2d      	ldr	r5, [pc, #180]	; (800d5a0 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d4ec:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d4ee:	685a      	ldr	r2, [r3, #4]
 800d4f0:	402a      	ands	r2, r5
 800d4f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d4f4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d4f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d4fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d500:	e000      	b.n	800d504 <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800d502:	2002      	movs	r0, #2
}
 800d504:	b003      	add	sp, #12
 800d506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d50a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d50c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d50e:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d510:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d512:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d514:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d518:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d51a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d51e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d522:	b003      	add	sp, #12
 800d524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800d528:	1c6a      	adds	r2, r5, #1
 800d52a:	d11d      	bne.n	800d568 <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d52c:	698b      	ldr	r3, [r1, #24]
 800d52e:	061b      	lsls	r3, r3, #24
 800d530:	d5fa      	bpl.n	800d528 <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d532:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d534:	b29b      	uxth	r3, r3
 800d536:	2bff      	cmp	r3, #255	; 0xff
 800d538:	d91f      	bls.n	800d57a <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d53a:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d53e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d542:	22ff      	movs	r2, #255	; 0xff
 800d544:	4639      	mov	r1, r7
 800d546:	4620      	mov	r0, r4
 800d548:	f8cd 8000 	str.w	r8, [sp]
 800d54c:	f7ff fc9a 	bl	800ce84 <I2C_TransferConfig>
 800d550:	e7a1      	b.n	800d496 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d552:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d554:	4b11      	ldr	r3, [pc, #68]	; (800d59c <HAL_I2C_Master_Transmit+0x188>)
 800d556:	4639      	mov	r1, r7
 800d558:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d55a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d562:	f7ff fc8f 	bl	800ce84 <I2C_TransferConfig>
 800d566:	e792      	b.n	800d48e <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d568:	f7fb fecc 	bl	8009304 <HAL_GetTick>
 800d56c:	1b80      	subs	r0, r0, r6
 800d56e:	4285      	cmp	r5, r0
 800d570:	d3cb      	bcc.n	800d50a <HAL_I2C_Master_Transmit+0xf6>
 800d572:	2d00      	cmp	r5, #0
 800d574:	d0c9      	beq.n	800d50a <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d576:	6821      	ldr	r1, [r4, #0]
 800d578:	e7d8      	b.n	800d52c <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d57a:	f8cd 8000 	str.w	r8, [sp]
 800d57e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d582:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d584:	4639      	mov	r1, r7
 800d586:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800d588:	b292      	uxth	r2, r2
 800d58a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d58c:	b2d2      	uxtb	r2, r2
 800d58e:	f7ff fc79 	bl	800ce84 <I2C_TransferConfig>
 800d592:	e780      	b.n	800d496 <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800d594:	2001      	movs	r0, #1
}
 800d596:	b003      	add	sp, #12
 800d598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d59c:	80002000 	.word	0x80002000
 800d5a0:	fe00e800 	.word	0xfe00e800

0800d5a4 <HAL_I2C_Master_Receive>:
{
 800d5a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5a8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d5ae:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5b0:	2b20      	cmp	r3, #32
{
 800d5b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5b4:	f040 8088 	bne.w	800d6c8 <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800d5b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d5bc:	4604      	mov	r4, r0
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	f000 8082 	beq.w	800d6c8 <HAL_I2C_Master_Receive+0x124>
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	460f      	mov	r7, r1
 800d5c8:	4691      	mov	r9, r2
 800d5ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d5ce:	f7fb fe99 	bl	8009304 <HAL_GetTick>
 800d5d2:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5d4:	e004      	b.n	800d5e0 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5d6:	f7fb fe95 	bl	8009304 <HAL_GetTick>
 800d5da:	1b80      	subs	r0, r0, r6
 800d5dc:	2819      	cmp	r0, #25
 800d5de:	d87e      	bhi.n	800d6de <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5e0:	6823      	ldr	r3, [r4, #0]
 800d5e2:	6999      	ldr	r1, [r3, #24]
 800d5e4:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800d5e8:	d1f5      	bne.n	800d5d6 <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d5ea:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800d5ec:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800d5f0:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d5f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d5f6:	2310      	movs	r3, #16
 800d5f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5fc:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d5fe:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d602:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d604:	b29b      	uxth	r3, r3
 800d606:	2bff      	cmp	r3, #255	; 0xff
 800d608:	d878      	bhi.n	800d6fc <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800d60a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d60c:	4639      	mov	r1, r7
 800d60e:	4b49      	ldr	r3, [pc, #292]	; (800d734 <HAL_I2C_Master_Receive+0x190>)
 800d610:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800d612:	b292      	uxth	r2, r2
 800d614:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	9300      	str	r3, [sp, #0]
 800d61a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d61e:	f7ff fc31 	bl	800ce84 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d622:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d626:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800d62a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d62c:	4632      	mov	r2, r6
 800d62e:	4629      	mov	r1, r5
 800d630:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d632:	b29b      	uxth	r3, r3
 800d634:	2b00      	cmp	r3, #0
 800d636:	d035      	beq.n	800d6a4 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d638:	f7ff fd7e 	bl	800d138 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d175      	bne.n	800d72c <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d640:	6822      	ldr	r2, [r4, #0]
 800d642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d646:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d648:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d64a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d64c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800d64e:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800d650:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800d652:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800d654:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800d656:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d658:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d65a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d65c:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d65e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d660:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1e1      	bne.n	800d62a <HAL_I2C_Master_Receive+0x86>
 800d666:	2a00      	cmp	r2, #0
 800d668:	d0df      	beq.n	800d62a <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d66a:	6822      	ldr	r2, [r4, #0]
 800d66c:	e001      	b.n	800d672 <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800d66e:	1c69      	adds	r1, r5, #1
 800d670:	d12e      	bne.n	800d6d0 <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d672:	6993      	ldr	r3, [r2, #24]
 800d674:	061b      	lsls	r3, r3, #24
 800d676:	d5fa      	bpl.n	800d66e <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d678:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	2bff      	cmp	r3, #255	; 0xff
 800d67e:	d948      	bls.n	800d712 <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d684:	22ff      	movs	r2, #255	; 0xff
 800d686:	4639      	mov	r1, r7
 800d688:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d68a:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d68e:	f8cd 8000 	str.w	r8, [sp]
 800d692:	f7ff fbf7 	bl	800ce84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d696:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d698:	4632      	mov	r2, r6
 800d69a:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800d69c:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d69e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1c9      	bne.n	800d638 <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6a4:	f7ff fd22 	bl	800d0ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d13f      	bne.n	800d72c <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d6ac:	6823      	ldr	r3, [r4, #0]
 800d6ae:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d6b0:	4d21      	ldr	r5, [pc, #132]	; (800d738 <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d6b2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	402a      	ands	r2, r5
 800d6b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d6ba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d6be:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d6c2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d6c6:	e000      	b.n	800d6ca <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800d6c8:	2002      	movs	r0, #2
}
 800d6ca:	b003      	add	sp, #12
 800d6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6d0:	f7fb fe18 	bl	8009304 <HAL_GetTick>
 800d6d4:	1b80      	subs	r0, r0, r6
 800d6d6:	4285      	cmp	r5, r0
 800d6d8:	d301      	bcc.n	800d6de <HAL_I2C_Master_Receive+0x13a>
 800d6da:	2d00      	cmp	r5, #0
 800d6dc:	d1c5      	bne.n	800d66a <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6de:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d6e0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6e2:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d6e4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6e6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d6e8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6ec:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d6ee:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6f2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d6f6:	b003      	add	sp, #12
 800d6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6fc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d6fe:	4b0d      	ldr	r3, [pc, #52]	; (800d734 <HAL_I2C_Master_Receive+0x190>)
 800d700:	4639      	mov	r1, r7
 800d702:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d704:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d70c:	f7ff fbba 	bl	800ce84 <I2C_TransferConfig>
 800d710:	e787      	b.n	800d622 <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d712:	f8cd 8000 	str.w	r8, [sp]
 800d716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d71a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d71c:	4639      	mov	r1, r7
 800d71e:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800d720:	b292      	uxth	r2, r2
 800d722:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d724:	b2d2      	uxtb	r2, r2
 800d726:	f7ff fbad 	bl	800ce84 <I2C_TransferConfig>
 800d72a:	e77e      	b.n	800d62a <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800d72c:	2001      	movs	r0, #1
}
 800d72e:	b003      	add	sp, #12
 800d730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d734:	80002400 	.word	0x80002400
 800d738:	fe00e800 	.word	0xfe00e800

0800d73c <HAL_I2C_Mem_Read>:
{
 800d73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d740:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d742:	3b01      	subs	r3, #1
{
 800d744:	b083      	sub	sp, #12
 800d746:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d748:	2b01      	cmp	r3, #1
{
 800d74a:	4688      	mov	r8, r1
 800d74c:	4691      	mov	r9, r2
 800d74e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800d752:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d754:	d904      	bls.n	800d760 <HAL_I2C_Mem_Read+0x24>
 800d756:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800d75a:	486e      	ldr	r0, [pc, #440]	; (800d914 <HAL_I2C_Mem_Read+0x1d8>)
 800d75c:	f7f8 f884 	bl	8005868 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d760:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800d764:	2b20      	cmp	r3, #32
 800d766:	d17f      	bne.n	800d868 <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800d768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d075      	beq.n	800d85a <HAL_I2C_Mem_Read+0x11e>
 800d76e:	f1ba 0f00 	cmp.w	sl, #0
 800d772:	d072      	beq.n	800d85a <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800d774:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d075      	beq.n	800d868 <HAL_I2C_Mem_Read+0x12c>
 800d77c:	2301      	movs	r3, #1
 800d77e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d782:	f7fb fdbf 	bl	8009304 <HAL_GetTick>
 800d786:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d788:	e004      	b.n	800d794 <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d78a:	f7fb fdbb 	bl	8009304 <HAL_GetTick>
 800d78e:	1b80      	subs	r0, r0, r6
 800d790:	2819      	cmp	r0, #25
 800d792:	d874      	bhi.n	800d87e <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800d79c:	d1f5      	bne.n	800d78a <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800d79e:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d7a0:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800d7a2:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d7a6:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800d7a8:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d7aa:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d7b2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d7b6:	2140      	movs	r1, #64	; 0x40
 800d7b8:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d7bc:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d7be:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800d7c2:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d7c6:	f7ff fd01 	bl	800d1cc <I2C_RequestMemoryRead>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	f040 8083 	bne.w	800d8d6 <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d7d0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	2bff      	cmp	r3, #255	; 0xff
 800d7d6:	f240 808e 	bls.w	800d8f6 <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d7da:	4b4f      	ldr	r3, [pc, #316]	; (800d918 <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d7dc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d7de:	4641      	mov	r1, r8
 800d7e0:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d7e2:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d7ea:	f7ff fb4b 	bl	800ce84 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d7ee:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d7f0:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d7f4:	682a      	ldr	r2, [r5, #0]
 800d7f6:	e001      	b.n	800d7fc <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800d7f8:	1c63      	adds	r3, r4, #1
 800d7fa:	d139      	bne.n	800d870 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d7fc:	6993      	ldr	r3, [r2, #24]
 800d7fe:	0758      	lsls	r0, r3, #29
 800d800:	d5fa      	bpl.n	800d7f8 <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d802:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d804:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d806:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d808:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800d80a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800d80c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800d80e:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800d810:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800d812:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800d814:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800d816:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d818:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d81a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d81c:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d81e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d820:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d822:	b90b      	cbnz	r3, 800d828 <HAL_I2C_Mem_Read+0xec>
 800d824:	2a00      	cmp	r2, #0
 800d826:	d140      	bne.n	800d8aa <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800d828:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1e1      	bne.n	800d7f4 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d830:	4632      	mov	r2, r6
 800d832:	4621      	mov	r1, r4
 800d834:	4628      	mov	r0, r5
 800d836:	f7ff fc59 	bl	800d0ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d168      	bne.n	800d910 <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d83e:	682b      	ldr	r3, [r5, #0]
 800d840:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d842:	4c36      	ldr	r4, [pc, #216]	; (800d91c <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d844:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	4022      	ands	r2, r4
 800d84a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d84c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d850:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d854:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800d858:	e003      	b.n	800d862 <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d85a:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800d85e:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d860:	646b      	str	r3, [r5, #68]	; 0x44
}
 800d862:	b003      	add	sp, #12
 800d864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800d868:	2002      	movs	r0, #2
}
 800d86a:	b003      	add	sp, #12
 800d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d870:	f7fb fd48 	bl	8009304 <HAL_GetTick>
 800d874:	1b80      	subs	r0, r0, r6
 800d876:	4284      	cmp	r4, r0
 800d878:	d301      	bcc.n	800d87e <HAL_I2C_Mem_Read+0x142>
 800d87a:	2c00      	cmp	r4, #0
 800d87c:	d1ba      	bne.n	800d7f4 <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d87e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d880:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d882:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d884:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d886:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d888:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d88c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d88e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d892:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d896:	b003      	add	sp, #12
 800d898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d89c:	f7fb fd32 	bl	8009304 <HAL_GetTick>
 800d8a0:	1b80      	subs	r0, r0, r6
 800d8a2:	4284      	cmp	r4, r0
 800d8a4:	d3eb      	bcc.n	800d87e <HAL_I2C_Mem_Read+0x142>
 800d8a6:	2c00      	cmp	r4, #0
 800d8a8:	d0e9      	beq.n	800d87e <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d8aa:	682a      	ldr	r2, [r5, #0]
 800d8ac:	e001      	b.n	800d8b2 <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800d8ae:	1c61      	adds	r1, r4, #1
 800d8b0:	d1f4      	bne.n	800d89c <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d8b2:	6993      	ldr	r3, [r2, #24]
 800d8b4:	061b      	lsls	r3, r3, #24
 800d8b6:	d5fa      	bpl.n	800d8ae <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d8b8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	2bff      	cmp	r3, #255	; 0xff
 800d8be:	d90e      	bls.n	800d8de <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d8c0:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d8c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d8c8:	22ff      	movs	r2, #255	; 0xff
 800d8ca:	4641      	mov	r1, r8
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	9700      	str	r7, [sp, #0]
 800d8d0:	f7ff fad8 	bl	800ce84 <I2C_TransferConfig>
 800d8d4:	e7a8      	b.n	800d828 <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800d8d6:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800d8d8:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800d8dc:	e7c1      	b.n	800d862 <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d8de:	9700      	str	r7, [sp, #0]
 800d8e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d8e4:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d8e6:	4641      	mov	r1, r8
 800d8e8:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800d8ea:	b292      	uxth	r2, r2
 800d8ec:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d8ee:	b2d2      	uxtb	r2, r2
 800d8f0:	f7ff fac8 	bl	800ce84 <I2C_TransferConfig>
 800d8f4:	e798      	b.n	800d828 <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800d8f6:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d8f8:	4641      	mov	r1, r8
 800d8fa:	4b07      	ldr	r3, [pc, #28]	; (800d918 <HAL_I2C_Mem_Read+0x1dc>)
 800d8fc:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800d8fe:	b292      	uxth	r2, r2
 800d900:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d902:	b2d2      	uxtb	r2, r2
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d90a:	f7ff fabb 	bl	800ce84 <I2C_TransferConfig>
 800d90e:	e76e      	b.n	800d7ee <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800d910:	2001      	movs	r0, #1
 800d912:	e7a6      	b.n	800d862 <HAL_I2C_Mem_Read+0x126>
 800d914:	0802e350 	.word	0x0802e350
 800d918:	80002400 	.word	0x80002400
 800d91c:	fe00e800 	.word	0xfe00e800

0800d920 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d920:	4b23      	ldr	r3, [pc, #140]	; (800d9b0 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800d922:	6802      	ldr	r2, [r0, #0]
{
 800d924:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d926:	4d23      	ldr	r5, [pc, #140]	; (800d9b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800d928:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d92a:	4e23      	ldr	r6, [pc, #140]	; (800d9b8 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800d92c:	429a      	cmp	r2, r3
 800d92e:	bf18      	it	ne
 800d930:	42aa      	cmpne	r2, r5
{
 800d932:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d934:	bf14      	ite	ne
 800d936:	2301      	movne	r3, #1
 800d938:	2300      	moveq	r3, #0
 800d93a:	42b2      	cmp	r2, r6
 800d93c:	bf0c      	ite	eq
 800d93e:	2300      	moveq	r3, #0
 800d940:	f003 0301 	andne.w	r3, r3, #1
 800d944:	b113      	cbz	r3, 800d94c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800d946:	4b1d      	ldr	r3, [pc, #116]	; (800d9bc <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800d948:	429a      	cmp	r2, r3
 800d94a:	d12c      	bne.n	800d9a6 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800d94c:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800d950:	d124      	bne.n	800d99c <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d952:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d956:	2b20      	cmp	r3, #32
 800d958:	b2de      	uxtb	r6, r3
 800d95a:	d11d      	bne.n	800d998 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d95c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d960:	2b01      	cmp	r3, #1
 800d962:	d019      	beq.n	800d998 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d964:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d966:	2224      	movs	r2, #36	; 0x24
 800d968:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	f022 0201 	bic.w	r2, r2, #1
 800d972:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d97a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d97c:	6819      	ldr	r1, [r3, #0]
 800d97e:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d980:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800d982:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800d984:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	f042 0201 	orr.w	r2, r2, #1
 800d98c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800d98e:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d992:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d996:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800d998:	2002      	movs	r0, #2
}
 800d99a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800d99c:	215f      	movs	r1, #95	; 0x5f
 800d99e:	4808      	ldr	r0, [pc, #32]	; (800d9c0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800d9a0:	f7f7 ff62 	bl	8005868 <assert_failed>
 800d9a4:	e7d5      	b.n	800d952 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9a6:	215e      	movs	r1, #94	; 0x5e
 800d9a8:	4805      	ldr	r0, [pc, #20]	; (800d9c0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800d9aa:	f7f7 ff5d 	bl	8005868 <assert_failed>
 800d9ae:	e7cd      	b.n	800d94c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800d9b0:	40005400 	.word	0x40005400
 800d9b4:	40005800 	.word	0x40005800
 800d9b8:	40005c00 	.word	0x40005c00
 800d9bc:	40006000 	.word	0x40006000
 800d9c0:	0802e388 	.word	0x0802e388

0800d9c4 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9c4:	4b22      	ldr	r3, [pc, #136]	; (800da50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800d9c6:	6802      	ldr	r2, [r0, #0]
{
 800d9c8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9ca:	4d22      	ldr	r5, [pc, #136]	; (800da54 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800d9cc:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9ce:	4e22      	ldr	r6, [pc, #136]	; (800da58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	bf18      	it	ne
 800d9d4:	42aa      	cmpne	r2, r5
{
 800d9d6:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9d8:	bf14      	ite	ne
 800d9da:	2301      	movne	r3, #1
 800d9dc:	2300      	moveq	r3, #0
 800d9de:	42b2      	cmp	r2, r6
 800d9e0:	bf0c      	ite	eq
 800d9e2:	2300      	moveq	r3, #0
 800d9e4:	f003 0301 	andne.w	r3, r3, #1
 800d9e8:	b113      	cbz	r3, 800d9f0 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800d9ea:	4b1c      	ldr	r3, [pc, #112]	; (800da5c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d12a      	bne.n	800da46 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800d9f0:	2d0f      	cmp	r5, #15
 800d9f2:	d823      	bhi.n	800da3c <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d9f8:	2b20      	cmp	r3, #32
 800d9fa:	b2de      	uxtb	r6, r3
 800d9fc:	d11c      	bne.n	800da38 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9fe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800da02:	2b01      	cmp	r3, #1
 800da04:	d018      	beq.n	800da38 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da06:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800da08:	2224      	movs	r2, #36	; 0x24
 800da0a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	f022 0201 	bic.w	r2, r2, #1
 800da14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800da16:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800da18:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800da1c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da20:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800da22:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800da24:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	f042 0201 	orr.w	r2, r2, #1
 800da2c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800da2e:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800da32:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800da36:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800da38:	2002      	movs	r0, #2
}
 800da3a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800da3c:	218d      	movs	r1, #141	; 0x8d
 800da3e:	4808      	ldr	r0, [pc, #32]	; (800da60 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800da40:	f7f7 ff12 	bl	8005868 <assert_failed>
 800da44:	e7d6      	b.n	800d9f4 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da46:	218c      	movs	r1, #140	; 0x8c
 800da48:	4805      	ldr	r0, [pc, #20]	; (800da60 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800da4a:	f7f7 ff0d 	bl	8005868 <assert_failed>
 800da4e:	e7cf      	b.n	800d9f0 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800da50:	40005400 	.word	0x40005400
 800da54:	40005800 	.word	0x40005800
 800da58:	40005c00 	.word	0x40005c00
 800da5c:	40006000 	.word	0x40006000
 800da60:	0802e388 	.word	0x0802e388

0800da64 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800da64:	2800      	cmp	r0, #0
 800da66:	d04c      	beq.n	800db02 <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800da68:	6802      	ldr	r2, [r0, #0]
{
 800da6a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800da6c:	4b26      	ldr	r3, [pc, #152]	; (800db08 <HAL_IWDG_Init+0xa4>)
 800da6e:	4604      	mov	r4, r0
 800da70:	429a      	cmp	r2, r3
 800da72:	d003      	beq.n	800da7c <HAL_IWDG_Init+0x18>
 800da74:	21b5      	movs	r1, #181	; 0xb5
 800da76:	4825      	ldr	r0, [pc, #148]	; (800db0c <HAL_IWDG_Init+0xa8>)
 800da78:	f7f7 fef6 	bl	8005868 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800da7c:	6863      	ldr	r3, [r4, #4]
 800da7e:	2b06      	cmp	r3, #6
 800da80:	d835      	bhi.n	800daee <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800da82:	68a3      	ldr	r3, [r4, #8]
 800da84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da88:	d22c      	bcs.n	800dae4 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800da8a:	68e3      	ldr	r3, [r4, #12]
 800da8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da90:	d223      	bcs.n	800dada <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800da92:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800da96:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800da98:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800da9c:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800da9e:	f245 5055 	movw	r0, #21845	; 0x5555
 800daa2:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800daa4:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800daa6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800daa8:	f7fb fc2c 	bl	8009304 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800daac:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800daae:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800dab0:	68da      	ldr	r2, [r3, #12]
 800dab2:	0751      	lsls	r1, r2, #29
 800dab4:	d00a      	beq.n	800dacc <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800dab6:	f7fb fc25 	bl	8009304 <HAL_GetTick>
 800daba:	1b43      	subs	r3, r0, r5
 800dabc:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800dabe:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800dac0:	d9f6      	bls.n	800dab0 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800dac2:	68da      	ldr	r2, [r3, #12]
 800dac4:	0752      	lsls	r2, r2, #29
 800dac6:	d0f3      	beq.n	800dab0 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800dac8:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800daca:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800dacc:	6919      	ldr	r1, [r3, #16]
 800dace:	68e2      	ldr	r2, [r4, #12]
 800dad0:	4291      	cmp	r1, r2
 800dad2:	d011      	beq.n	800daf8 <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800dad4:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800dad6:	611a      	str	r2, [r3, #16]
}
 800dad8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800dada:	21b8      	movs	r1, #184	; 0xb8
 800dadc:	480b      	ldr	r0, [pc, #44]	; (800db0c <HAL_IWDG_Init+0xa8>)
 800dade:	f7f7 fec3 	bl	8005868 <assert_failed>
 800dae2:	e7d6      	b.n	800da92 <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800dae4:	21b7      	movs	r1, #183	; 0xb7
 800dae6:	4809      	ldr	r0, [pc, #36]	; (800db0c <HAL_IWDG_Init+0xa8>)
 800dae8:	f7f7 febe 	bl	8005868 <assert_failed>
 800daec:	e7cd      	b.n	800da8a <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800daee:	21b6      	movs	r1, #182	; 0xb6
 800daf0:	4806      	ldr	r0, [pc, #24]	; (800db0c <HAL_IWDG_Init+0xa8>)
 800daf2:	f7f7 feb9 	bl	8005868 <assert_failed>
 800daf6:	e7c4      	b.n	800da82 <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800daf8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800dafc:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800dafe:	601a      	str	r2, [r3, #0]
}
 800db00:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800db02:	2001      	movs	r0, #1
}
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	40003000 	.word	0x40003000
 800db0c:	0802e3c4 	.word	0x0802e3c4

0800db10 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800db10:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db12:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800db16:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	601a      	str	r2, [r3, #0]
}
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop

0800db20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800db20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db22:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800db24:	2800      	cmp	r0, #0
 800db26:	f000 809d 	beq.w	800dc64 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800db2a:	6804      	ldr	r4, [r0, #0]
 800db2c:	4605      	mov	r5, r0
 800db2e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800db32:	d003      	beq.n	800db3c <HAL_PCD_Init+0x1c>
 800db34:	4b4f      	ldr	r3, [pc, #316]	; (800dc74 <HAL_PCD_Init+0x154>)
 800db36:	429c      	cmp	r4, r3
 800db38:	f040 8081 	bne.w	800dc3e <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800db3c:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800db40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800db44:	2b00      	cmp	r3, #0
 800db46:	f000 8086 	beq.w	800dc56 <HAL_PCD_Init+0x136>
 800db4a:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800db4c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800db4e:	462e      	mov	r6, r5
 800db50:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800db52:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800db56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800db58:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800db5a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800db5e:	bf08      	it	eq
 800db60:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800db62:	f006 fe87 	bl	8014874 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800db66:	f856 eb10 	ldr.w	lr, [r6], #16
 800db6a:	46b4      	mov	ip, r6
 800db6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db78:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800db7c:	e884 0003 	stmia.w	r4, {r0, r1}
 800db80:	4670      	mov	r0, lr
 800db82:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800db86:	f006 fdb5 	bl	80146f4 <USB_CoreInit>
 800db8a:	4604      	mov	r4, r0
 800db8c:	b130      	cbz	r0, 800db9c <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800db8e:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800db90:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800db92:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800db94:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800db98:	b00b      	add	sp, #44	; 0x2c
 800db9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800db9c:	4601      	mov	r1, r0
 800db9e:	6828      	ldr	r0, [r5, #0]
 800dba0:	f006 fe70 	bl	8014884 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dba4:	6868      	ldr	r0, [r5, #4]
 800dba6:	b358      	cbz	r0, 800dc00 <HAL_PCD_Init+0xe0>
 800dba8:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800dbaa:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dbae:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800dbb0:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbb4:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800dbb8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800dbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800dbc0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbc4:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800dbc8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbcc:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dbce:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800dbd2:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dbd4:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbd8:	d3ea      	bcc.n	800dbb0 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800dbda:	2200      	movs	r2, #0
 800dbdc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbe0:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800dbe2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800dbe6:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbea:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800dbec:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbf0:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dbf2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dbf6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dbfa:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbfe:	d3ed      	bcc.n	800dbdc <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dc00:	466c      	mov	r4, sp
 800dc02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc0a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dc0e:	e884 0003 	stmia.w	r4, {r0, r1}
 800dc12:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800dc16:	6828      	ldr	r0, [r5, #0]
 800dc18:	f006 feb8 	bl	801498c <USB_DevInit>
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d1b5      	bne.n	800db8e <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800dc22:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800dc24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800dc26:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800dc2a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800dc2c:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800dc30:	d01c      	beq.n	800dc6c <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800dc32:	6828      	ldr	r0, [r5, #0]
 800dc34:	f007 fa72 	bl	801511c <USB_DevDisconnect>
}
 800dc38:	4620      	mov	r0, r4
 800dc3a:	b00b      	add	sp, #44	; 0x2c
 800dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800dc3e:	2187      	movs	r1, #135	; 0x87
 800dc40:	480d      	ldr	r0, [pc, #52]	; (800dc78 <HAL_PCD_Init+0x158>)
 800dc42:	f7f7 fe11 	bl	8005868 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dc46:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800dc4a:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dc4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f47f af7a 	bne.w	800db4a <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800dc56:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800dc58:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800dc5c:	f017 f976 	bl	8024f4c <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800dc60:	6828      	ldr	r0, [r5, #0]
 800dc62:	e773      	b.n	800db4c <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800dc64:	2401      	movs	r4, #1
}
 800dc66:	4620      	mov	r0, r4
 800dc68:	b00b      	add	sp, #44	; 0x2c
 800dc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	f000 fcc7 	bl	800e600 <HAL_PCDEx_ActivateLPM>
 800dc72:	e7de      	b.n	800dc32 <HAL_PCD_Init+0x112>
 800dc74:	40040000 	.word	0x40040000
 800dc78:	0802e400 	.word	0x0802e400

0800dc7c <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800dc7c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d00f      	beq.n	800dca4 <HAL_PCD_Start+0x28>
 800dc84:	2301      	movs	r3, #1
{
 800dc86:	b510      	push	{r4, lr}
 800dc88:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800dc8a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800dc8c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800dc90:	f006 fde8 	bl	8014864 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800dc94:	6820      	ldr	r0, [r4, #0]
 800dc96:	f007 fa31 	bl	80150fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dc9a:	2300      	movs	r3, #0

  return HAL_OK;
 800dc9c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800dc9e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800dca2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800dca4:	2002      	movs	r0, #2
}
 800dca6:	4770      	bx	lr

0800dca8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800dca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dcac:	6807      	ldr	r7, [r0, #0]
{
 800dcae:	b089      	sub	sp, #36	; 0x24
 800dcb0:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800dcb2:	4638      	mov	r0, r7
 800dcb4:	f007 fa70 	bl	8015198 <USB_GetMode>
 800dcb8:	b110      	cbz	r0, 800dcc0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800dcba:	b009      	add	sp, #36	; 0x24
 800dcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800dcc0:	4683      	mov	fp, r0
 800dcc2:	6820      	ldr	r0, [r4, #0]
 800dcc4:	f007 fa3a 	bl	801513c <USB_ReadInterrupts>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d0f6      	beq.n	800dcba <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800dccc:	6820      	ldr	r0, [r4, #0]
 800dcce:	f007 fa35 	bl	801513c <USB_ReadInterrupts>
 800dcd2:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800dcd6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800dcd8:	d003      	beq.n	800dce2 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800dcda:	6943      	ldr	r3, [r0, #20]
 800dcdc:	f003 0302 	and.w	r3, r3, #2
 800dce0:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800dce2:	f007 fa2b 	bl	801513c <USB_ReadInterrupts>
 800dce6:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dcea:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800dcec:	d012      	beq.n	800dd14 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dcee:	6983      	ldr	r3, [r0, #24]
 800dcf0:	f023 0310 	bic.w	r3, r3, #16
 800dcf4:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800dcf6:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800dcf8:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800dcfc:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	f000 8253 	beq.w	800e1ac <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800dd06:	2b06      	cmp	r3, #6
 800dd08:	f000 81b1 	beq.w	800e06e <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dd0c:	6983      	ldr	r3, [r0, #24]
 800dd0e:	f043 0310 	orr.w	r3, r3, #16
 800dd12:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800dd14:	f007 fa12 	bl	801513c <USB_ReadInterrupts>
 800dd18:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800dd1c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800dd1e:	f040 80cf 	bne.w	800dec0 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dd22:	f007 fa0b 	bl	801513c <USB_ReadInterrupts>
 800dd26:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800dd2a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dd2c:	d175      	bne.n	800de1a <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800dd2e:	f007 fa05 	bl	801513c <USB_ReadInterrupts>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	db5d      	blt.n	800ddf2 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800dd36:	6820      	ldr	r0, [r4, #0]
 800dd38:	f007 fa00 	bl	801513c <USB_ReadInterrupts>
 800dd3c:	0500      	lsls	r0, r0, #20
 800dd3e:	d44d      	bmi.n	800dddc <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800dd40:	6820      	ldr	r0, [r4, #0]
 800dd42:	f007 f9fb 	bl	801513c <USB_ReadInterrupts>
 800dd46:	0102      	lsls	r2, r0, #4
 800dd48:	d514      	bpl.n	800dd74 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800dd4a:	6822      	ldr	r2, [r4, #0]
 800dd4c:	6953      	ldr	r3, [r2, #20]
 800dd4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd52:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800dd54:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f040 8172 	bne.w	800e042 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800dd5e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800dd60:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800dd62:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800dd66:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dd68:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800dd6c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800dd70:	f017 fa5a 	bl	8025228 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800dd74:	6820      	ldr	r0, [r4, #0]
 800dd76:	f007 f9e1 	bl	801513c <USB_ReadInterrupts>
 800dd7a:	04c3      	lsls	r3, r0, #19
 800dd7c:	f100 8116 	bmi.w	800dfac <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800dd80:	6820      	ldr	r0, [r4, #0]
 800dd82:	f007 f9db 	bl	801513c <USB_ReadInterrupts>
 800dd86:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800dd8a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800dd8c:	f040 80f7 	bne.w	800df7e <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800dd90:	f007 f9d4 	bl	801513c <USB_ReadInterrupts>
 800dd94:	0707      	lsls	r7, r0, #28
 800dd96:	f100 80e9 	bmi.w	800df6c <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800dd9a:	6820      	ldr	r0, [r4, #0]
 800dd9c:	f007 f9ce 	bl	801513c <USB_ReadInterrupts>
 800dda0:	02c6      	lsls	r6, r0, #11
 800dda2:	f100 80d9 	bmi.w	800df58 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800dda6:	6820      	ldr	r0, [r4, #0]
 800dda8:	f007 f9c8 	bl	801513c <USB_ReadInterrupts>
 800ddac:	0285      	lsls	r5, r0, #10
 800ddae:	f100 80c9 	bmi.w	800df44 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ddb2:	6820      	ldr	r0, [r4, #0]
 800ddb4:	f007 f9c2 	bl	801513c <USB_ReadInterrupts>
 800ddb8:	0040      	lsls	r0, r0, #1
 800ddba:	f100 80ba 	bmi.w	800df32 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ddbe:	6820      	ldr	r0, [r4, #0]
 800ddc0:	f007 f9bc 	bl	801513c <USB_ReadInterrupts>
 800ddc4:	0741      	lsls	r1, r0, #29
 800ddc6:	f57f af78 	bpl.w	800dcba <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800ddca:	6823      	ldr	r3, [r4, #0]
 800ddcc:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ddce:	076a      	lsls	r2, r5, #29
 800ddd0:	f100 820d 	bmi.w	800e1ee <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800ddd4:	685a      	ldr	r2, [r3, #4]
 800ddd6:	432a      	orrs	r2, r5
 800ddd8:	605a      	str	r2, [r3, #4]
 800ddda:	e76e      	b.n	800dcba <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800dddc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800dde0:	07d9      	lsls	r1, r3, #31
 800dde2:	f100 8200 	bmi.w	800e1e6 <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800dde6:	6820      	ldr	r0, [r4, #0]
 800dde8:	6943      	ldr	r3, [r0, #20]
 800ddea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddee:	6143      	str	r3, [r0, #20]
 800ddf0:	e7a7      	b.n	800dd42 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ddf2:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800ddf6:	f022 0201 	bic.w	r2, r2, #1
 800ddfa:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800ddfe:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800de02:	2b01      	cmp	r3, #1
 800de04:	f000 812c 	beq.w	800e060 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800de08:	4620      	mov	r0, r4
 800de0a:	f017 f93b 	bl	8025084 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800de0e:	6820      	ldr	r0, [r4, #0]
 800de10:	6943      	ldr	r3, [r0, #20]
 800de12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de16:	6143      	str	r3, [r0, #20]
 800de18:	e78e      	b.n	800dd38 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800de1a:	f007 f99b 	bl	8015154 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800de1e:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800de20:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800de22:	f1b8 0f00 	cmp.w	r8, #0
 800de26:	d082      	beq.n	800dd2e <HAL_PCD_IRQHandler+0x86>
 800de28:	4626      	mov	r6, r4
 800de2a:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800de2e:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800de32:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800de36:	e009      	b.n	800de4c <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800de38:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800de3c:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800de40:	f106 061c 	add.w	r6, r6, #28
 800de44:	f109 0920 	add.w	r9, r9, #32
 800de48:	f000 8126 	beq.w	800e098 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800de4c:	f018 0f01 	tst.w	r8, #1
 800de50:	d0f2      	beq.n	800de38 <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800de52:	fa5f f78a 	uxtb.w	r7, sl
 800de56:	4639      	mov	r1, r7
 800de58:	f007 f98e 	bl	8015178 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800de5c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800de5e:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800de60:	d515      	bpl.n	800de8e <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800de62:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800de64:	f00a 030f 	and.w	r3, sl, #15
 800de68:	2201      	movs	r2, #1
 800de6a:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800de6c:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800de70:	ea23 0302 	bic.w	r3, r3, r2
 800de74:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800de78:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800de7a:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800de7c:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800de80:	4299      	cmp	r1, r3
 800de82:	f000 81b9 	beq.w	800e1f8 <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800de86:	4639      	mov	r1, r7
 800de88:	4620      	mov	r0, r4
 800de8a:	f017 f8bf 	bl	802500c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800de8e:	0728      	lsls	r0, r5, #28
 800de90:	d502      	bpl.n	800de98 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800de92:	2308      	movs	r3, #8
 800de94:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800de98:	06e9      	lsls	r1, r5, #27
 800de9a:	d502      	bpl.n	800dea2 <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800de9c:	2310      	movs	r3, #16
 800de9e:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800dea2:	066a      	lsls	r2, r5, #25
 800dea4:	d502      	bpl.n	800deac <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800dea6:	2340      	movs	r3, #64	; 0x40
 800dea8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800deac:	07ab      	lsls	r3, r5, #30
 800deae:	d502      	bpl.n	800deb6 <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800deb0:	2302      	movs	r3, #2
 800deb2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800deb6:	062d      	lsls	r5, r5, #24
 800deb8:	f100 80f1 	bmi.w	800e09e <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800debc:	6820      	ldr	r0, [r4, #0]
 800debe:	e7bb      	b.n	800de38 <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800dec0:	f007 f940 	bl	8015144 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800dec4:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dec6:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800dec8:	2d00      	cmp	r5, #0
 800deca:	f43f af2a 	beq.w	800dd22 <HAL_PCD_IRQHandler+0x7a>
 800dece:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800ded2:	46a2      	mov	sl, r4
      epnum = 0U;
 800ded4:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ded8:	9703      	str	r7, [sp, #12]
 800deda:	e008      	b.n	800deee <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800dedc:	086d      	lsrs	r5, r5, #1
        epnum++;
 800dede:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800dee2:	f106 0620 	add.w	r6, r6, #32
 800dee6:	f10a 0a1c 	add.w	sl, sl, #28
 800deea:	f000 80d3 	beq.w	800e094 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800deee:	07ef      	lsls	r7, r5, #31
 800def0:	d5f4      	bpl.n	800dedc <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800def2:	fa5f f788 	uxtb.w	r7, r8
 800def6:	4639      	mov	r1, r7
 800def8:	f007 f934 	bl	8015164 <USB_ReadDevOutEPInterrupt>
 800defc:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800defe:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800df00:	f019 0f01 	tst.w	r9, #1
 800df04:	f040 8135 	bne.w	800e172 <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800df08:	f019 0f08 	tst.w	r9, #8
 800df0c:	f040 8119 	bne.w	800e142 <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800df10:	f019 0f10 	tst.w	r9, #16
 800df14:	d001      	beq.n	800df1a <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800df16:	2310      	movs	r3, #16
 800df18:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800df1a:	f019 0f20 	tst.w	r9, #32
 800df1e:	d001      	beq.n	800df24 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800df20:	2320      	movs	r3, #32
 800df22:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800df24:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800df28:	d0d8      	beq.n	800dedc <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800df2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df2e:	60b3      	str	r3, [r6, #8]
 800df30:	e7d4      	b.n	800dedc <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800df32:	4620      	mov	r0, r4
 800df34:	f017 f8b2 	bl	802509c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800df38:	6820      	ldr	r0, [r4, #0]
 800df3a:	6943      	ldr	r3, [r0, #20]
 800df3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df40:	6143      	str	r3, [r0, #20]
 800df42:	e73d      	b.n	800ddc0 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800df44:	4620      	mov	r0, r4
 800df46:	2100      	movs	r1, #0
 800df48:	f017 f8a0 	bl	802508c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800df4c:	6820      	ldr	r0, [r4, #0]
 800df4e:	6943      	ldr	r3, [r0, #20]
 800df50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df54:	6143      	str	r3, [r0, #20]
 800df56:	e72d      	b.n	800ddb4 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800df58:	4620      	mov	r0, r4
 800df5a:	2100      	movs	r1, #0
 800df5c:	f017 f89a 	bl	8025094 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800df60:	6820      	ldr	r0, [r4, #0]
 800df62:	6943      	ldr	r3, [r0, #20]
 800df64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df68:	6143      	str	r3, [r0, #20]
 800df6a:	e71d      	b.n	800dda8 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800df6c:	4620      	mov	r0, r4
 800df6e:	f017 f857 	bl	8025020 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800df72:	6820      	ldr	r0, [r4, #0]
 800df74:	6943      	ldr	r3, [r0, #20]
 800df76:	f003 0308 	and.w	r3, r3, #8
 800df7a:	6143      	str	r3, [r0, #20]
 800df7c:	e70e      	b.n	800dd9c <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800df7e:	f007 f90f 	bl	80151a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800df82:	6820      	ldr	r0, [r4, #0]
 800df84:	f006 fdc0 	bl	8014b08 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800df88:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800df8a:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800df8c:	f000 ff86 	bl	800ee9c <HAL_RCC_GetHCLKFreq>
 800df90:	7b22      	ldrb	r2, [r4, #12]
 800df92:	4601      	mov	r1, r0
 800df94:	4628      	mov	r0, r5
 800df96:	f006 fbeb 	bl	8014770 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800df9a:	4620      	mov	r0, r4
 800df9c:	f017 f844 	bl	8025028 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800dfa0:	6820      	ldr	r0, [r4, #0]
 800dfa2:	6943      	ldr	r3, [r0, #20]
 800dfa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dfa8:	6143      	str	r3, [r0, #20]
 800dfaa:	e6f1      	b.n	800dd90 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800dfac:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800dfb0:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800dfb4:	2110      	movs	r1, #16
 800dfb6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800dfb8:	f023 0301 	bic.w	r3, r3, #1
 800dfbc:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800dfbe:	f006 fc97 	bl	80148f0 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dfc2:	6860      	ldr	r0, [r4, #4]
 800dfc4:	b1e0      	cbz	r0, 800e000 <HAL_PCD_IRQHandler+0x358>
 800dfc6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800dfca:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800dfce:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dfd0:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dfd4:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dfd6:	3320      	adds	r3, #32
 800dfd8:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dfda:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800dfde:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800dfe2:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dfe6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800dfea:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800dfee:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dff2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800dff6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800dffa:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dffe:	d1e6      	bne.n	800dfce <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e000:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e002:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e004:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e008:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e00a:	b9f2      	cbnz	r2, 800e04a <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e00c:	696a      	ldr	r2, [r5, #20]
 800e00e:	f242 032b 	movw	r3, #8235	; 0x202b
 800e012:	4313      	orrs	r3, r2
 800e014:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e016:	692b      	ldr	r3, [r5, #16]
 800e018:	f043 030b 	orr.w	r3, r3, #11
 800e01c:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e01e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e022:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e026:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e028:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e02c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e02e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e032:	f007 f8cb 	bl	80151cc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e036:	6820      	ldr	r0, [r4, #0]
 800e038:	6943      	ldr	r3, [r0, #20]
 800e03a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e03e:	6143      	str	r3, [r0, #20]
 800e040:	e69f      	b.n	800dd82 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800e042:	4620      	mov	r0, r4
 800e044:	f017 f806 	bl	8025054 <HAL_PCD_SuspendCallback>
 800e048:	e694      	b.n	800dd74 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e04a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800e04e:	f043 030b 	orr.w	r3, r3, #11
 800e052:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e056:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e058:	f043 030b 	orr.w	r3, r3, #11
 800e05c:	646b      	str	r3, [r5, #68]	; 0x44
 800e05e:	e7de      	b.n	800e01e <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800e060:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e062:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800e064:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e068:	f017 f8de 	bl	8025228 <HAL_PCDEx_LPM_Callback>
 800e06c:	e6cf      	b.n	800de0e <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e06e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e072:	2208      	movs	r2, #8
 800e074:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800e078:	4638      	mov	r0, r7
 800e07a:	f006 ffa9 	bl	8014fd0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e07e:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800e082:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e086:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e088:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800e08c:	440b      	add	r3, r1
 800e08e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800e092:	e63b      	b.n	800dd0c <HAL_PCD_IRQHandler+0x64>
 800e094:	9f03      	ldr	r7, [sp, #12]
 800e096:	e644      	b.n	800dd22 <HAL_PCD_IRQHandler+0x7a>
 800e098:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800e09c:	e647      	b.n	800dd2e <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800e09e:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e0a2:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800e0a6:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e0a8:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800e0aa:	f63f aec5 	bhi.w	800de38 <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e0ae:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800e0b2:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0b4:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e0b8:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800e0bc:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800e0be:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800e0c0:	428a      	cmp	r2, r1
 800e0c2:	bf28      	it	cs
 800e0c4:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e0c6:	9905      	ldr	r1, [sp, #20]
 800e0c8:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800e0ca:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e0cc:	b289      	uxth	r1, r1
 800e0ce:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800e0d2:	f0c0 80bc 	bcc.w	800e24e <HAL_PCD_IRQHandler+0x5a6>
 800e0d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e0da:	46a0      	mov	r8, r4
 800e0dc:	9c05      	ldr	r4, [sp, #20]
 800e0de:	e01a      	b.n	800e116 <HAL_PCD_IRQHandler+0x46e>
 800e0e0:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800e0e6:	4658      	mov	r0, fp
 800e0e8:	429d      	cmp	r5, r3
 800e0ea:	bf28      	it	cs
 800e0ec:	461d      	movcs	r5, r3
 800e0ee:	f898 3010 	ldrb.w	r3, [r8, #16]
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	b2ab      	uxth	r3, r5
 800e0f6:	f006 ff55 	bl	8014fa4 <USB_WritePacket>
    ep->xfer_buff  += len;
 800e0fa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e0fc:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800e0fe:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e100:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800e102:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800e104:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e106:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800e108:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e10a:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800e10e:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e110:	f0c0 8096 	bcc.w	800e240 <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e114:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800e116:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800e118:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e11c:	d3e0      	bcc.n	800e0e0 <HAL_PCD_IRQHandler+0x438>
 800e11e:	4644      	mov	r4, r8
 800e120:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e124:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e128:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e12a:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e12c:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e12e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e132:	f00a 030f 	and.w	r3, sl, #15
 800e136:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e138:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e13a:	ea23 0302 	bic.w	r3, r3, r2
 800e13e:	634b      	str	r3, [r1, #52]	; 0x34
 800e140:	e67a      	b.n	800de38 <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e142:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e144:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e148:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e14e:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e150:	485f      	ldr	r0, [pc, #380]	; (800e2d0 <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e152:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e154:	4282      	cmp	r2, r0
 800e156:	d961      	bls.n	800e21c <HAL_PCD_IRQHandler+0x574>
 800e158:	040a      	lsls	r2, r1, #16
 800e15a:	d502      	bpl.n	800e162 <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e15c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e160:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e162:	4620      	mov	r0, r4
 800e164:	f016 ff42 	bl	8024fec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e168:	6921      	ldr	r1, [r4, #16]
 800e16a:	2901      	cmp	r1, #1
 800e16c:	d07f      	beq.n	800e26e <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e16e:	6820      	ldr	r0, [r4, #0]
 800e170:	e6ce      	b.n	800df10 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e172:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800e174:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e176:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e178:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800e17c:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e17e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e182:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800e186:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800e188:	d04d      	beq.n	800e226 <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e18a:	4952      	ldr	r1, [pc, #328]	; (800e2d4 <HAL_PCD_IRQHandler+0x62c>)
 800e18c:	458c      	cmp	ip, r1
 800e18e:	d062      	beq.n	800e256 <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e190:	f1b8 0f00 	cmp.w	r8, #0
 800e194:	d104      	bne.n	800e1a0 <HAL_PCD_IRQHandler+0x4f8>
 800e196:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800e19a:	2a00      	cmp	r2, #0
 800e19c:	f000 8092 	beq.w	800e2c4 <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	4639      	mov	r1, r7
 800e1a4:	f016 ff28 	bl	8024ff8 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e1a8:	6820      	ldr	r0, [r4, #0]
 800e1aa:	e6ad      	b.n	800df08 <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e1ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e1b0:	421d      	tst	r5, r3
 800e1b2:	f43f adab 	beq.w	800dd0c <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e1b6:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e1ba:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800e1be:	4638      	mov	r0, r7
 800e1c0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e1c4:	4615      	mov	r5, r2
 800e1c6:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800e1ca:	f006 ff01 	bl	8014fd0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e1ce:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e1d2:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e1d4:	442b      	add	r3, r5
 800e1d6:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e1da:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800e1de:	442b      	add	r3, r5
 800e1e0:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800e1e4:	e592      	b.n	800dd0c <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f016 ff34 	bl	8025054 <HAL_PCD_SuspendCallback>
 800e1ec:	e5fb      	b.n	800dde6 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f016 ff58 	bl	80250a4 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800e1f4:	6823      	ldr	r3, [r4, #0]
 800e1f6:	e5ed      	b.n	800ddd4 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e1f8:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800e1fc:	4413      	add	r3, r2
 800e1fe:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e200:	f1ba 0f00 	cmp.w	sl, #0
 800e204:	f47f ae3f 	bne.w	800de86 <HAL_PCD_IRQHandler+0x1de>
 800e208:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f47f ae3b 	bne.w	800de86 <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e210:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e214:	6820      	ldr	r0, [r4, #0]
 800e216:	f006 ffd9 	bl	80151cc <USB_EP0_OutStart>
 800e21a:	e634      	b.n	800de86 <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800e21c:	4620      	mov	r0, r4
 800e21e:	f016 fee5 	bl	8024fec <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e222:	6820      	ldr	r0, [r4, #0]
 800e224:	e674      	b.n	800df10 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e226:	0719      	lsls	r1, r3, #28
 800e228:	d51c      	bpl.n	800e264 <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e22a:	4929      	ldr	r1, [pc, #164]	; (800e2d0 <HAL_PCD_IRQHandler+0x628>)
 800e22c:	458c      	cmp	ip, r1
 800e22e:	f67f ae6b 	bls.w	800df08 <HAL_PCD_IRQHandler+0x260>
 800e232:	041f      	lsls	r7, r3, #16
 800e234:	f57f ae68 	bpl.w	800df08 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e23c:	6093      	str	r3, [r2, #8]
 800e23e:	e663      	b.n	800df08 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e240:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800e242:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e244:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e248:	f8d4 b000 	ldr.w	fp, [r4]
 800e24c:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800e24e:	42ab      	cmp	r3, r5
 800e250:	f4ff adf2 	bcc.w	800de38 <HAL_PCD_IRQHandler+0x190>
 800e254:	e768      	b.n	800e128 <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e256:	0419      	lsls	r1, r3, #16
 800e258:	d4ee      	bmi.n	800e238 <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e25a:	0699      	lsls	r1, r3, #26
 800e25c:	d5a0      	bpl.n	800e1a0 <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e25e:	2120      	movs	r1, #32
 800e260:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e262:	e79d      	b.n	800e1a0 <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e264:	0699      	lsls	r1, r3, #26
 800e266:	d508      	bpl.n	800e27a <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e268:	2320      	movs	r3, #32
 800e26a:	6093      	str	r3, [r2, #8]
 800e26c:	e64c      	b.n	800df08 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e26e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e272:	6820      	ldr	r0, [r4, #0]
 800e274:	f006 ffaa 	bl	80151cc <USB_EP0_OutStart>
 800e278:	e779      	b.n	800e16e <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e27a:	f013 0f28 	tst.w	r3, #40	; 0x28
 800e27e:	f47f ae43 	bne.w	800df08 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e282:	4913      	ldr	r1, [pc, #76]	; (800e2d0 <HAL_PCD_IRQHandler+0x628>)
 800e284:	458c      	cmp	ip, r1
 800e286:	d901      	bls.n	800e28c <HAL_PCD_IRQHandler+0x5e4>
 800e288:	041b      	lsls	r3, r3, #16
 800e28a:	d4d5      	bmi.n	800e238 <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e28c:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800e28e:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e292:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800e296:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800e298:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800e29c:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800e2a0:	440a      	add	r2, r1
 800e2a2:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e2a6:	f1b8 0f00 	cmp.w	r8, #0
 800e2aa:	f47f af79 	bne.w	800e1a0 <HAL_PCD_IRQHandler+0x4f8>
 800e2ae:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800e2b2:	2a00      	cmp	r2, #0
 800e2b4:	f47f af74 	bne.w	800e1a0 <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e2b8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e2bc:	2101      	movs	r1, #1
 800e2be:	f006 ff85 	bl	80151cc <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e2c2:	e76d      	b.n	800e1a0 <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e2c4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e2c8:	4641      	mov	r1, r8
 800e2ca:	f006 ff7f 	bl	80151cc <USB_EP0_OutStart>
 800e2ce:	e767      	b.n	800e1a0 <HAL_PCD_IRQHandler+0x4f8>
 800e2d0:	4f54300a 	.word	0x4f54300a
 800e2d4:	4f54310a 	.word	0x4f54310a

0800e2d8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800e2d8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800e2dc:	2a01      	cmp	r2, #1
 800e2de:	d00e      	beq.n	800e2fe <HAL_PCD_SetAddress+0x26>
 800e2e0:	2201      	movs	r2, #1
{
 800e2e2:	b510      	push	{r4, lr}
 800e2e4:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e2e6:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800e2e8:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800e2ec:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e2f0:	f006 fef2 	bl	80150d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e2f4:	2300      	movs	r3, #0
  return HAL_OK;
 800e2f6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e2f8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e2fc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800e2fe:	2002      	movs	r0, #2
}
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop

0800e304 <HAL_PCD_EP_Open>:
{
 800e304:	b510      	push	{r4, lr}
 800e306:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800e30a:	0609      	lsls	r1, r1, #24
{
 800e30c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e30e:	d427      	bmi.n	800e360 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e310:	f04f 0c1c 	mov.w	ip, #28
 800e314:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800e318:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800e31c:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800e320:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800e324:	2000      	movs	r0, #0
 800e326:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800e32a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800e32c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e32e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800e332:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800e334:	b10a      	cbz	r2, 800e33a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800e336:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d101      	bne.n	800e342 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800e33e:	2300      	movs	r3, #0
 800e340:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800e342:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e346:	2b01      	cmp	r3, #1
 800e348:	d018      	beq.n	800e37c <HAL_PCD_EP_Open+0x78>
 800e34a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e34c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e34e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e352:	f006 fbe5 	bl	8014b20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e356:	2300      	movs	r3, #0
  return ret;
 800e358:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e35a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e35e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e360:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800e362:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e366:	fb00 400e 	mla	r0, r0, lr, r4
 800e36a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800e36e:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800e372:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e376:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800e37a:	e7d6      	b.n	800e32a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800e37c:	2002      	movs	r0, #2
}
 800e37e:	bd10      	pop	{r4, pc}

0800e380 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800e380:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e384:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e388:	f04f 011c 	mov.w	r1, #28
{
 800e38c:	b510      	push	{r4, lr}
 800e38e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e390:	d11a      	bne.n	800e3c8 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e392:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800e396:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800e39a:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e39c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e3a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e3a4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e3a8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e3aa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d019      	beq.n	800e3e6 <HAL_PCD_EP_Close+0x66>
 800e3b2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e3b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e3b6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e3ba:	f006 fbf9 	bl	8014bb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e3be:	2300      	movs	r3, #0
  return HAL_OK;
 800e3c0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e3c2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e3c6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3c8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800e3cc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800e3d0:	2001      	movs	r0, #1
 800e3d2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3d6:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e3d8:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e3dc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e3de:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d1e5      	bne.n	800e3b2 <HAL_PCD_EP_Close+0x32>
 800e3e6:	2002      	movs	r0, #2
}
 800e3e8:	bd10      	pop	{r4, pc}
 800e3ea:	bf00      	nop

0800e3ec <HAL_PCD_EP_Receive>:
{
 800e3ec:	b510      	push	{r4, lr}
 800e3ee:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e3f2:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800e3f4:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e3f8:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800e3fc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e400:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800e404:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800e408:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800e40a:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800e40e:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800e412:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800e416:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800e41a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e41c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800e41e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800e420:	bf08      	it	eq
 800e422:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e426:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e428:	b91c      	cbnz	r4, 800e432 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e42a:	f006 fd37 	bl	8014e9c <USB_EP0StartXfer>
}
 800e42e:	2000      	movs	r0, #0
 800e430:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e432:	f006 fc1b 	bl	8014c6c <USB_EPStartXfer>
}
 800e436:	2000      	movs	r0, #0
 800e438:	bd10      	pop	{r4, pc}
 800e43a:	bf00      	nop

0800e43c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e43c:	f001 010f 	and.w	r1, r1, #15
 800e440:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e444:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800e448:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop

0800e450 <HAL_PCD_EP_Transmit>:
{
 800e450:	b510      	push	{r4, lr}
 800e452:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e456:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800e458:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e45c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800e460:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e464:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800e466:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800e46a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800e46c:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800e470:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800e474:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e476:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800e47a:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800e47e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e480:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800e482:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800e484:	bf08      	it	eq
 800e486:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e48a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e48c:	b91c      	cbnz	r4, 800e496 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e48e:	f006 fd05 	bl	8014e9c <USB_EP0StartXfer>
}
 800e492:	2000      	movs	r0, #0
 800e494:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e496:	f006 fbe9 	bl	8014c6c <USB_EPStartXfer>
}
 800e49a:	2000      	movs	r0, #0
 800e49c:	bd10      	pop	{r4, pc}
 800e49e:	bf00      	nop

0800e4a0 <HAL_PCD_EP_SetStall>:
{
 800e4a0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e4a2:	6843      	ldr	r3, [r0, #4]
 800e4a4:	f001 050f 	and.w	r5, r1, #15
 800e4a8:	429d      	cmp	r5, r3
 800e4aa:	d834      	bhi.n	800e516 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800e4ac:	060b      	lsls	r3, r1, #24
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	d41d      	bmi.n	800e4ee <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800e4b2:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800e4b4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800e4b8:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800e4bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e4c0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800e4c2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e4c6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800e4ca:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e4cc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800e4ce:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800e4d0:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d01c      	beq.n	800e512 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e4d8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e4da:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e4de:	f006 fd9b 	bl	8015018 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e4e2:	b1d5      	cbz	r5, 800e51a <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800e4e4:	2300      	movs	r3, #0
  return HAL_OK;
 800e4e6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e4e8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e4ec:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4ee:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800e4f0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800e4f4:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4f6:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800e4fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4fe:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800e504:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e506:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800e508:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800e50a:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800e50e:	429a      	cmp	r2, r3
 800e510:	d1e2      	bne.n	800e4d8 <HAL_PCD_EP_SetStall+0x38>
 800e512:	2002      	movs	r0, #2
}
 800e514:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e516:	2001      	movs	r0, #1
}
 800e518:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e51a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e51e:	7c21      	ldrb	r1, [r4, #16]
 800e520:	6820      	ldr	r0, [r4, #0]
 800e522:	f006 fe53 	bl	80151cc <USB_EP0_OutStart>
 800e526:	e7dd      	b.n	800e4e4 <HAL_PCD_EP_SetStall+0x44>

0800e528 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e528:	6842      	ldr	r2, [r0, #4]
{
 800e52a:	b538      	push	{r3, r4, r5, lr}
 800e52c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e530:	4293      	cmp	r3, r2
 800e532:	d832      	bhi.n	800e59a <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800e534:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e538:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e53a:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800e53e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800e542:	d119      	bne.n	800e578 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e544:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800e548:	2000      	movs	r0, #0
 800e54a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800e54e:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e550:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e554:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800e558:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800e55a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800e55c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e560:	2b01      	cmp	r3, #1
 800e562:	d018      	beq.n	800e596 <HAL_PCD_EP_ClrStall+0x6e>
 800e564:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e566:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e568:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e56c:	f006 fd88 	bl	8015080 <USB_EPClearStall>
  return HAL_OK;
 800e570:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800e572:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800e576:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e578:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800e57c:	2001      	movs	r0, #1
 800e57e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800e582:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e584:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e586:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800e58a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800e58c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800e58e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e592:	2b01      	cmp	r3, #1
 800e594:	d1e6      	bne.n	800e564 <HAL_PCD_EP_ClrStall+0x3c>
 800e596:	2002      	movs	r0, #2
}
 800e598:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e59a:	2001      	movs	r0, #1
}
 800e59c:	bd38      	pop	{r3, r4, r5, pc}
 800e59e:	bf00      	nop

0800e5a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e5a0:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e5a2:	6804      	ldr	r4, [r0, #0]
 800e5a4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800e5a6:	b931      	cbnz	r1, 800e5b6 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e5a8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e5ac:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5b4:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e5b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800e5b8:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e5bc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800e5c0:	d00b      	beq.n	800e5da <HAL_PCDEx_SetTxFiFo+0x3a>
 800e5c2:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e5c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800e5c8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e5ca:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800e5ce:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e5d0:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800e5d2:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e5d4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800e5d8:	d3f4      	bcc.n	800e5c4 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e5da:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e5de:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e5e2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800e5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e5ea:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop

0800e5f4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e5f4:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800e5f6:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	6259      	str	r1, [r3, #36]	; 0x24
}
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop

0800e600 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e600:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800e602:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e606:	4909      	ldr	r1, [pc, #36]	; (800e62c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e608:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800e60a:	4660      	mov	r0, ip
{
 800e60c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800e60e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800e610:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800e614:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e618:	6993      	ldr	r3, [r2, #24]
}
 800e61a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e61e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e622:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e624:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e626:	4319      	orrs	r1, r3
 800e628:	6551      	str	r1, [r2, #84]	; 0x54
}
 800e62a:	4770      	bx	lr
 800e62c:	10000003 	.word	0x10000003

0800e630 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e630:	4a02      	ldr	r2, [pc, #8]	; (800e63c <HAL_PWR_EnableBkUpAccess+0xc>)
 800e632:	6813      	ldr	r3, [r2, #0]
 800e634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e638:	6013      	str	r3, [r2, #0]
}
 800e63a:	4770      	bx	lr
 800e63c:	40007000 	.word	0x40007000

0800e640 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800e640:	4b1a      	ldr	r3, [pc, #104]	; (800e6ac <HAL_PWREx_EnableOverDrive+0x6c>)
 800e642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e644:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800e648:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800e64a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800e64c:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800e64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e650:	4c17      	ldr	r4, [pc, #92]	; (800e6b0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800e652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e656:	9301      	str	r3, [sp, #4]
 800e658:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e660:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e662:	f7fa fe4f 	bl	8009304 <HAL_GetTick>
 800e666:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e668:	e005      	b.n	800e676 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e66a:	f7fa fe4b 	bl	8009304 <HAL_GetTick>
 800e66e:	1b40      	subs	r0, r0, r5
 800e670:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e674:	d817      	bhi.n	800e6a6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e676:	6863      	ldr	r3, [r4, #4]
 800e678:	03da      	lsls	r2, r3, #15
 800e67a:	d5f6      	bpl.n	800e66a <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e67c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e67e:	4d0c      	ldr	r5, [pc, #48]	; (800e6b0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e684:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800e686:	f7fa fe3d 	bl	8009304 <HAL_GetTick>
 800e68a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e68c:	e005      	b.n	800e69a <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e68e:	f7fa fe39 	bl	8009304 <HAL_GetTick>
 800e692:	1b00      	subs	r0, r0, r4
 800e694:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e698:	d805      	bhi.n	800e6a6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e69a:	686b      	ldr	r3, [r5, #4]
 800e69c:	039b      	lsls	r3, r3, #14
 800e69e:	d5f6      	bpl.n	800e68e <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800e6a0:	2000      	movs	r0, #0
}
 800e6a2:	b003      	add	sp, #12
 800e6a4:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800e6a6:	2003      	movs	r0, #3
}
 800e6a8:	b003      	add	sp, #12
 800e6aa:	bd30      	pop	{r4, r5, pc}
 800e6ac:	40023800 	.word	0x40023800
 800e6b0:	40007000 	.word	0x40007000

0800e6b4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	f000 828c 	beq.w	800ebd2 <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e6ba:	6803      	ldr	r3, [r0, #0]
 800e6bc:	2b0f      	cmp	r3, #15
{
 800e6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e6c6:	f200 8123 	bhi.w	800e910 <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e6ca:	07dd      	lsls	r5, r3, #31
 800e6cc:	d534      	bpl.n	800e738 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e6ce:	6863      	ldr	r3, [r4, #4]
 800e6d0:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800e6d4:	d003      	beq.n	800e6de <HAL_RCC_OscConfig+0x2a>
 800e6d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e6da:	f040 8175 	bne.w	800e9c8 <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e6de:	4aa3      	ldr	r2, [pc, #652]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
 800e6e0:	6893      	ldr	r3, [r2, #8]
 800e6e2:	f003 030c 	and.w	r3, r3, #12
 800e6e6:	2b04      	cmp	r3, #4
 800e6e8:	d01d      	beq.n	800e726 <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e6ea:	6893      	ldr	r3, [r2, #8]
 800e6ec:	f003 030c 	and.w	r3, r3, #12
 800e6f0:	2b08      	cmp	r3, #8
 800e6f2:	d015      	beq.n	800e720 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e6f4:	6863      	ldr	r3, [r4, #4]
 800e6f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6fa:	f000 816b 	beq.w	800e9d4 <HAL_RCC_OscConfig+0x320>
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f000 819c 	beq.w	800ea3c <HAL_RCC_OscConfig+0x388>
 800e704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e708:	4b98      	ldr	r3, [pc, #608]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	f000 822d 	beq.w	800eb6a <HAL_RCC_OscConfig+0x4b6>
 800e710:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e714:	601a      	str	r2, [r3, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e71c:	601a      	str	r2, [r3, #0]
 800e71e:	e15e      	b.n	800e9de <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e720:	6853      	ldr	r3, [r2, #4]
 800e722:	0258      	lsls	r0, r3, #9
 800e724:	d5e6      	bpl.n	800e6f4 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e726:	4b91      	ldr	r3, [pc, #580]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	0399      	lsls	r1, r3, #14
 800e72c:	d503      	bpl.n	800e736 <HAL_RCC_OscConfig+0x82>
 800e72e:	6863      	ldr	r3, [r4, #4]
 800e730:	2b00      	cmp	r3, #0
 800e732:	f000 80ff 	beq.w	800e934 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e736:	6823      	ldr	r3, [r4, #0]
 800e738:	079f      	lsls	r7, r3, #30
 800e73a:	d531      	bpl.n	800e7a0 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e73c:	68e3      	ldr	r3, [r4, #12]
 800e73e:	2b01      	cmp	r3, #1
 800e740:	f200 80fc 	bhi.w	800e93c <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e744:	6923      	ldr	r3, [r4, #16]
 800e746:	2b1f      	cmp	r3, #31
 800e748:	f200 8101 	bhi.w	800e94e <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e74c:	4b87      	ldr	r3, [pc, #540]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
 800e74e:	689a      	ldr	r2, [r3, #8]
 800e750:	f012 0f0c 	tst.w	r2, #12
 800e754:	f000 80e7 	beq.w	800e926 <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e758:	689a      	ldr	r2, [r3, #8]
 800e75a:	f002 020c 	and.w	r2, r2, #12
 800e75e:	2a08      	cmp	r2, #8
 800e760:	f000 80dd 	beq.w	800e91e <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e764:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e766:	4d81      	ldr	r5, [pc, #516]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f000 819d 	beq.w	800eaa8 <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800e76e:	682b      	ldr	r3, [r5, #0]
 800e770:	f043 0301 	orr.w	r3, r3, #1
 800e774:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e776:	f7fa fdc5 	bl	8009304 <HAL_GetTick>
 800e77a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e77c:	e005      	b.n	800e78a <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e77e:	f7fa fdc1 	bl	8009304 <HAL_GetTick>
 800e782:	1b80      	subs	r0, r0, r6
 800e784:	2802      	cmp	r0, #2
 800e786:	f200 8155 	bhi.w	800ea34 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e78a:	682b      	ldr	r3, [r5, #0]
 800e78c:	0798      	lsls	r0, r3, #30
 800e78e:	d5f6      	bpl.n	800e77e <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	6922      	ldr	r2, [r4, #16]
 800e794:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e798:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e79c:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	071a      	lsls	r2, r3, #28
 800e7a2:	d42a      	bmi.n	800e7fa <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e7a4:	075e      	lsls	r6, r3, #29
 800e7a6:	d544      	bpl.n	800e832 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800e7a8:	68a3      	ldr	r3, [r4, #8]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d906      	bls.n	800e7bc <HAL_RCC_OscConfig+0x108>
 800e7ae:	2b05      	cmp	r3, #5
 800e7b0:	d004      	beq.n	800e7bc <HAL_RCC_OscConfig+0x108>
 800e7b2:	f240 2106 	movw	r1, #518	; 0x206
 800e7b6:	486e      	ldr	r0, [pc, #440]	; (800e970 <HAL_RCC_OscConfig+0x2bc>)
 800e7b8:	f7f7 f856 	bl	8005868 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e7bc:	4b6b      	ldr	r3, [pc, #428]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
 800e7be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7c0:	00d5      	lsls	r5, r2, #3
 800e7c2:	f140 80ec 	bpl.w	800e99e <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800e7c6:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e7c8:	4e6a      	ldr	r6, [pc, #424]	; (800e974 <HAL_RCC_OscConfig+0x2c0>)
 800e7ca:	6833      	ldr	r3, [r6, #0]
 800e7cc:	05d8      	lsls	r0, r3, #23
 800e7ce:	f140 8121 	bpl.w	800ea14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e7d2:	68a3      	ldr	r3, [r4, #8]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	f000 8179 	beq.w	800eacc <HAL_RCC_OscConfig+0x418>
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f000 8144 	beq.w	800ea68 <HAL_RCC_OscConfig+0x3b4>
 800e7e0:	2b05      	cmp	r3, #5
 800e7e2:	4b62      	ldr	r3, [pc, #392]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
 800e7e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e7e6:	f000 81c8 	beq.w	800eb7a <HAL_RCC_OscConfig+0x4c6>
 800e7ea:	f022 0201 	bic.w	r2, r2, #1
 800e7ee:	671a      	str	r2, [r3, #112]	; 0x70
 800e7f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e7f2:	f022 0204 	bic.w	r2, r2, #4
 800e7f6:	671a      	str	r2, [r3, #112]	; 0x70
 800e7f8:	e16d      	b.n	800ead6 <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e7fa:	6963      	ldr	r3, [r4, #20]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	f200 80c4 	bhi.w	800e98a <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800e802:	4d5a      	ldr	r5, [pc, #360]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 80a8 	beq.w	800e95a <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800e80a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e80c:	f043 0301 	orr.w	r3, r3, #1
 800e810:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e812:	f7fa fd77 	bl	8009304 <HAL_GetTick>
 800e816:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e818:	e005      	b.n	800e826 <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e81a:	f7fa fd73 	bl	8009304 <HAL_GetTick>
 800e81e:	1b80      	subs	r0, r0, r6
 800e820:	2802      	cmp	r0, #2
 800e822:	f200 8107 	bhi.w	800ea34 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e826:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e828:	079b      	lsls	r3, r3, #30
 800e82a:	d5f6      	bpl.n	800e81a <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	075e      	lsls	r6, r3, #29
 800e830:	d4ba      	bmi.n	800e7a8 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800e832:	69a0      	ldr	r0, [r4, #24]
 800e834:	2802      	cmp	r0, #2
 800e836:	f200 80bd 	bhi.w	800e9b4 <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e83a:	2800      	cmp	r0, #0
 800e83c:	d064      	beq.n	800e908 <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e83e:	4d4b      	ldr	r5, [pc, #300]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
 800e840:	68ab      	ldr	r3, [r5, #8]
 800e842:	f003 030c 	and.w	r3, r3, #12
 800e846:	2b08      	cmp	r3, #8
 800e848:	f000 8158 	beq.w	800eafc <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e84c:	2802      	cmp	r0, #2
 800e84e:	f040 81ae 	bne.w	800ebae <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800e852:	69e3      	ldr	r3, [r4, #28]
 800e854:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800e858:	f040 81a3 	bne.w	800eba2 <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800e85c:	6a23      	ldr	r3, [r4, #32]
 800e85e:	3b02      	subs	r3, #2
 800e860:	2b3d      	cmp	r3, #61	; 0x3d
 800e862:	f200 8198 	bhi.w	800eb96 <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800e866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e868:	3b32      	subs	r3, #50	; 0x32
 800e86a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800e86e:	f200 818c 	bhi.w	800eb8a <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800e872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e874:	2b08      	cmp	r3, #8
 800e876:	f200 8172 	bhi.w	800eb5e <HAL_RCC_OscConfig+0x4aa>
 800e87a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800e87e:	fa22 f303 	lsr.w	r3, r2, r3
 800e882:	07d8      	lsls	r0, r3, #31
 800e884:	f140 816b 	bpl.w	800eb5e <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800e888:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e88a:	3b02      	subs	r3, #2
 800e88c:	2b0d      	cmp	r3, #13
 800e88e:	f200 81a8 	bhi.w	800ebe2 <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800e892:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e894:	3b02      	subs	r3, #2
 800e896:	2b05      	cmp	r3, #5
 800e898:	f200 819d 	bhi.w	800ebd6 <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e89c:	4d33      	ldr	r5, [pc, #204]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
 800e89e:	682b      	ldr	r3, [r5, #0]
 800e8a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e8a4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8a6:	f7fa fd2d 	bl	8009304 <HAL_GetTick>
 800e8aa:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e8ac:	e005      	b.n	800e8ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e8ae:	f7fa fd29 	bl	8009304 <HAL_GetTick>
 800e8b2:	1b80      	subs	r0, r0, r6
 800e8b4:	2802      	cmp	r0, #2
 800e8b6:	f200 80bd 	bhi.w	800ea34 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e8ba:	682b      	ldr	r3, [r5, #0]
 800e8bc:	0199      	lsls	r1, r3, #6
 800e8be:	d4f6      	bmi.n	800e8ae <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e8c0:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800e8c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e8c6:	430b      	orrs	r3, r1
 800e8c8:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e8ca:	4e28      	ldr	r6, [pc, #160]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e8cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800e8d0:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800e8d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e8d8:	0852      	lsrs	r2, r2, #1
 800e8da:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e8de:	3a01      	subs	r2, #1
 800e8e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800e8e6:	682b      	ldr	r3, [r5, #0]
 800e8e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e8ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e8ee:	f7fa fd09 	bl	8009304 <HAL_GetTick>
 800e8f2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e8f4:	e005      	b.n	800e902 <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e8f6:	f7fa fd05 	bl	8009304 <HAL_GetTick>
 800e8fa:	1b00      	subs	r0, r0, r4
 800e8fc:	2802      	cmp	r0, #2
 800e8fe:	f200 8099 	bhi.w	800ea34 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e902:	6833      	ldr	r3, [r6, #0]
 800e904:	019a      	lsls	r2, r3, #6
 800e906:	d5f6      	bpl.n	800e8f6 <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800e908:	2000      	movs	r0, #0
}
 800e90a:	b002      	add	sp, #8
 800e90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e910:	f240 1163 	movw	r1, #355	; 0x163
 800e914:	4816      	ldr	r0, [pc, #88]	; (800e970 <HAL_RCC_OscConfig+0x2bc>)
 800e916:	f7f6 ffa7 	bl	8005868 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e91a:	6823      	ldr	r3, [r4, #0]
 800e91c:	e6d5      	b.n	800e6ca <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	025e      	lsls	r6, r3, #9
 800e922:	f53f af1f 	bmi.w	800e764 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e926:	4b11      	ldr	r3, [pc, #68]	; (800e96c <HAL_RCC_OscConfig+0x2b8>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	079d      	lsls	r5, r3, #30
 800e92c:	d565      	bpl.n	800e9fa <HAL_RCC_OscConfig+0x346>
 800e92e:	68e3      	ldr	r3, [r4, #12]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d062      	beq.n	800e9fa <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800e934:	2001      	movs	r0, #1
}
 800e936:	b002      	add	sp, #8
 800e938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e93c:	f240 119b 	movw	r1, #411	; 0x19b
 800e940:	480b      	ldr	r0, [pc, #44]	; (800e970 <HAL_RCC_OscConfig+0x2bc>)
 800e942:	f7f6 ff91 	bl	8005868 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e946:	6923      	ldr	r3, [r4, #16]
 800e948:	2b1f      	cmp	r3, #31
 800e94a:	f67f aeff 	bls.w	800e74c <HAL_RCC_OscConfig+0x98>
 800e94e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800e952:	4807      	ldr	r0, [pc, #28]	; (800e970 <HAL_RCC_OscConfig+0x2bc>)
 800e954:	f7f6 ff88 	bl	8005868 <assert_failed>
 800e958:	e6f8      	b.n	800e74c <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800e95a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e95c:	f023 0301 	bic.w	r3, r3, #1
 800e960:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e962:	f7fa fccf 	bl	8009304 <HAL_GetTick>
 800e966:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e968:	e00b      	b.n	800e982 <HAL_RCC_OscConfig+0x2ce>
 800e96a:	bf00      	nop
 800e96c:	40023800 	.word	0x40023800
 800e970:	0802e438 	.word	0x0802e438
 800e974:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e978:	f7fa fcc4 	bl	8009304 <HAL_GetTick>
 800e97c:	1b80      	subs	r0, r0, r6
 800e97e:	2802      	cmp	r0, #2
 800e980:	d858      	bhi.n	800ea34 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e982:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e984:	079f      	lsls	r7, r3, #30
 800e986:	d4f7      	bmi.n	800e978 <HAL_RCC_OscConfig+0x2c4>
 800e988:	e750      	b.n	800e82c <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e98a:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800e98e:	4898      	ldr	r0, [pc, #608]	; (800ebf0 <HAL_RCC_OscConfig+0x53c>)
 800e990:	f7f6 ff6a 	bl	8005868 <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e994:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800e996:	4d97      	ldr	r5, [pc, #604]	; (800ebf4 <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d0de      	beq.n	800e95a <HAL_RCC_OscConfig+0x2a6>
 800e99c:	e735      	b.n	800e80a <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800e99e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800e9a0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800e9a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e9a6:	641a      	str	r2, [r3, #64]	; 0x40
 800e9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e9ae:	9301      	str	r3, [sp, #4]
 800e9b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800e9b2:	e709      	b.n	800e7c8 <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800e9b4:	488e      	ldr	r0, [pc, #568]	; (800ebf0 <HAL_RCC_OscConfig+0x53c>)
 800e9b6:	f240 214a 	movw	r1, #586	; 0x24a
 800e9ba:	f7f6 ff55 	bl	8005868 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e9be:	69a0      	ldr	r0, [r4, #24]
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	f47f af3c 	bne.w	800e83e <HAL_RCC_OscConfig+0x18a>
 800e9c6:	e79f      	b.n	800e908 <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e9c8:	f240 1169 	movw	r1, #361	; 0x169
 800e9cc:	4888      	ldr	r0, [pc, #544]	; (800ebf0 <HAL_RCC_OscConfig+0x53c>)
 800e9ce:	f7f6 ff4b 	bl	8005868 <assert_failed>
 800e9d2:	e684      	b.n	800e6de <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9d4:	4a87      	ldr	r2, [pc, #540]	; (800ebf4 <HAL_RCC_OscConfig+0x540>)
 800e9d6:	6813      	ldr	r3, [r2, #0]
 800e9d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e9dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e9de:	f7fa fc91 	bl	8009304 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9e2:	4e84      	ldr	r6, [pc, #528]	; (800ebf4 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800e9e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9e6:	e004      	b.n	800e9f2 <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e9e8:	f7fa fc8c 	bl	8009304 <HAL_GetTick>
 800e9ec:	1b40      	subs	r0, r0, r5
 800e9ee:	2864      	cmp	r0, #100	; 0x64
 800e9f0:	d820      	bhi.n	800ea34 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9f2:	6833      	ldr	r3, [r6, #0]
 800e9f4:	039a      	lsls	r2, r3, #14
 800e9f6:	d5f7      	bpl.n	800e9e8 <HAL_RCC_OscConfig+0x334>
 800e9f8:	e69d      	b.n	800e736 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e9fa:	4a7e      	ldr	r2, [pc, #504]	; (800ebf4 <HAL_RCC_OscConfig+0x540>)
 800e9fc:	6921      	ldr	r1, [r4, #16]
 800e9fe:	6813      	ldr	r3, [r2, #0]
 800ea00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ea04:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ea08:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	071a      	lsls	r2, r3, #28
 800ea0e:	f57f aec9 	bpl.w	800e7a4 <HAL_RCC_OscConfig+0xf0>
 800ea12:	e6f2      	b.n	800e7fa <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800ea14:	6833      	ldr	r3, [r6, #0]
 800ea16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea1a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800ea1c:	f7fa fc72 	bl	8009304 <HAL_GetTick>
 800ea20:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ea22:	6833      	ldr	r3, [r6, #0]
 800ea24:	05d9      	lsls	r1, r3, #23
 800ea26:	f53f aed4 	bmi.w	800e7d2 <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea2a:	f7fa fc6b 	bl	8009304 <HAL_GetTick>
 800ea2e:	1bc0      	subs	r0, r0, r7
 800ea30:	2864      	cmp	r0, #100	; 0x64
 800ea32:	d9f6      	bls.n	800ea22 <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800ea34:	2003      	movs	r0, #3
}
 800ea36:	b002      	add	sp, #8
 800ea38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ea3c:	4d6d      	ldr	r5, [pc, #436]	; (800ebf4 <HAL_RCC_OscConfig+0x540>)
 800ea3e:	682b      	ldr	r3, [r5, #0]
 800ea40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea44:	602b      	str	r3, [r5, #0]
 800ea46:	682b      	ldr	r3, [r5, #0]
 800ea48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ea4e:	f7fa fc59 	bl	8009304 <HAL_GetTick>
 800ea52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea54:	e004      	b.n	800ea60 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea56:	f7fa fc55 	bl	8009304 <HAL_GetTick>
 800ea5a:	1b80      	subs	r0, r0, r6
 800ea5c:	2864      	cmp	r0, #100	; 0x64
 800ea5e:	d8e9      	bhi.n	800ea34 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea60:	682b      	ldr	r3, [r5, #0]
 800ea62:	039b      	lsls	r3, r3, #14
 800ea64:	d4f7      	bmi.n	800ea56 <HAL_RCC_OscConfig+0x3a2>
 800ea66:	e666      	b.n	800e736 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea68:	4e62      	ldr	r6, [pc, #392]	; (800ebf4 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea6a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea6e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800ea70:	f023 0301 	bic.w	r3, r3, #1
 800ea74:	6733      	str	r3, [r6, #112]	; 0x70
 800ea76:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800ea78:	f023 0304 	bic.w	r3, r3, #4
 800ea7c:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800ea7e:	f7fa fc41 	bl	8009304 <HAL_GetTick>
 800ea82:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ea84:	e004      	b.n	800ea90 <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea86:	f7fa fc3d 	bl	8009304 <HAL_GetTick>
 800ea8a:	1bc0      	subs	r0, r0, r7
 800ea8c:	4540      	cmp	r0, r8
 800ea8e:	d8d1      	bhi.n	800ea34 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ea90:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800ea92:	079b      	lsls	r3, r3, #30
 800ea94:	d4f7      	bmi.n	800ea86 <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800ea96:	2d00      	cmp	r5, #0
 800ea98:	f43f aecb 	beq.w	800e832 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ea9c:	4a55      	ldr	r2, [pc, #340]	; (800ebf4 <HAL_RCC_OscConfig+0x540>)
 800ea9e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800eaa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eaa4:	6413      	str	r3, [r2, #64]	; 0x40
 800eaa6:	e6c4      	b.n	800e832 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800eaa8:	682b      	ldr	r3, [r5, #0]
 800eaaa:	f023 0301 	bic.w	r3, r3, #1
 800eaae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800eab0:	f7fa fc28 	bl	8009304 <HAL_GetTick>
 800eab4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eab6:	e004      	b.n	800eac2 <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eab8:	f7fa fc24 	bl	8009304 <HAL_GetTick>
 800eabc:	1b80      	subs	r0, r0, r6
 800eabe:	2802      	cmp	r0, #2
 800eac0:	d8b8      	bhi.n	800ea34 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eac2:	682b      	ldr	r3, [r5, #0]
 800eac4:	0799      	lsls	r1, r3, #30
 800eac6:	d4f7      	bmi.n	800eab8 <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	e669      	b.n	800e7a0 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eacc:	4a49      	ldr	r2, [pc, #292]	; (800ebf4 <HAL_RCC_OscConfig+0x540>)
 800eace:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800ead0:	f043 0301 	orr.w	r3, r3, #1
 800ead4:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800ead6:	f7fa fc15 	bl	8009304 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eada:	4f46      	ldr	r7, [pc, #280]	; (800ebf4 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eadc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800eae0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eae2:	e004      	b.n	800eaee <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eae4:	f7fa fc0e 	bl	8009304 <HAL_GetTick>
 800eae8:	1b80      	subs	r0, r0, r6
 800eaea:	4540      	cmp	r0, r8
 800eaec:	d8a2      	bhi.n	800ea34 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eaee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eaf0:	079a      	lsls	r2, r3, #30
 800eaf2:	d5f7      	bpl.n	800eae4 <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800eaf4:	2d00      	cmp	r5, #0
 800eaf6:	f43f ae9c 	beq.w	800e832 <HAL_RCC_OscConfig+0x17e>
 800eafa:	e7cf      	b.n	800ea9c <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eafc:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800eafe:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb00:	f43f af03 	beq.w	800e90a <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb08:	69e1      	ldr	r1, [r4, #28]
 800eb0a:	428b      	cmp	r3, r1
 800eb0c:	f47f af12 	bne.w	800e934 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eb10:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb14:	6a21      	ldr	r1, [r4, #32]
 800eb16:	428b      	cmp	r3, r1
 800eb18:	f47f af0c 	bne.w	800e934 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800eb1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800eb20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb22:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eb24:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800eb28:	f47f af04 	bne.w	800e934 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800eb2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb2e:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800eb32:	085b      	lsrs	r3, r3, #1
 800eb34:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800eb36:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800eb3a:	f47f aefb 	bne.w	800e934 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eb3e:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800eb42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800eb44:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800eb48:	f47f aef4 	bne.w	800e934 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800eb4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb4e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eb52:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800eb56:	bf14      	ite	ne
 800eb58:	2001      	movne	r0, #1
 800eb5a:	2000      	moveq	r0, #0
 800eb5c:	e6d5      	b.n	800e90a <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800eb5e:	f240 2156 	movw	r1, #598	; 0x256
 800eb62:	4823      	ldr	r0, [pc, #140]	; (800ebf0 <HAL_RCC_OscConfig+0x53c>)
 800eb64:	f7f6 fe80 	bl	8005868 <assert_failed>
 800eb68:	e68e      	b.n	800e888 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eb6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800eb6e:	601a      	str	r2, [r3, #0]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eb76:	601a      	str	r2, [r3, #0]
 800eb78:	e731      	b.n	800e9de <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb7a:	f042 0204 	orr.w	r2, r2, #4
 800eb7e:	671a      	str	r2, [r3, #112]	; 0x70
 800eb80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eb82:	f042 0201 	orr.w	r2, r2, #1
 800eb86:	671a      	str	r2, [r3, #112]	; 0x70
 800eb88:	e7a5      	b.n	800ead6 <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800eb8a:	f240 2155 	movw	r1, #597	; 0x255
 800eb8e:	4818      	ldr	r0, [pc, #96]	; (800ebf0 <HAL_RCC_OscConfig+0x53c>)
 800eb90:	f7f6 fe6a 	bl	8005868 <assert_failed>
 800eb94:	e66d      	b.n	800e872 <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800eb96:	f44f 7115 	mov.w	r1, #596	; 0x254
 800eb9a:	4815      	ldr	r0, [pc, #84]	; (800ebf0 <HAL_RCC_OscConfig+0x53c>)
 800eb9c:	f7f6 fe64 	bl	8005868 <assert_failed>
 800eba0:	e661      	b.n	800e866 <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800eba2:	f240 2153 	movw	r1, #595	; 0x253
 800eba6:	4812      	ldr	r0, [pc, #72]	; (800ebf0 <HAL_RCC_OscConfig+0x53c>)
 800eba8:	f7f6 fe5e 	bl	8005868 <assert_failed>
 800ebac:	e656      	b.n	800e85c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800ebae:	682b      	ldr	r3, [r5, #0]
 800ebb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ebb4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ebb6:	f7fa fba5 	bl	8009304 <HAL_GetTick>
 800ebba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ebbc:	e005      	b.n	800ebca <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebbe:	f7fa fba1 	bl	8009304 <HAL_GetTick>
 800ebc2:	1b00      	subs	r0, r0, r4
 800ebc4:	2802      	cmp	r0, #2
 800ebc6:	f63f af35 	bhi.w	800ea34 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ebca:	682b      	ldr	r3, [r5, #0]
 800ebcc:	019b      	lsls	r3, r3, #6
 800ebce:	d4f6      	bmi.n	800ebbe <HAL_RCC_OscConfig+0x50a>
 800ebd0:	e69a      	b.n	800e908 <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800ebd2:	2001      	movs	r0, #1
}
 800ebd4:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800ebd6:	f240 2159 	movw	r1, #601	; 0x259
 800ebda:	4805      	ldr	r0, [pc, #20]	; (800ebf0 <HAL_RCC_OscConfig+0x53c>)
 800ebdc:	f7f6 fe44 	bl	8005868 <assert_failed>
 800ebe0:	e65c      	b.n	800e89c <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800ebe2:	f240 2157 	movw	r1, #599	; 0x257
 800ebe6:	4802      	ldr	r0, [pc, #8]	; (800ebf0 <HAL_RCC_OscConfig+0x53c>)
 800ebe8:	f7f6 fe3e 	bl	8005868 <assert_failed>
 800ebec:	e651      	b.n	800e892 <HAL_RCC_OscConfig+0x1de>
 800ebee:	bf00      	nop
 800ebf0:	0802e438 	.word	0x0802e438
 800ebf4:	40023800 	.word	0x40023800

0800ebf8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ebf8:	4916      	ldr	r1, [pc, #88]	; (800ec54 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800ebfa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ebfc:	688b      	ldr	r3, [r1, #8]
 800ebfe:	f003 030c 	and.w	r3, r3, #12
 800ec02:	2b04      	cmp	r3, #4
 800ec04:	d01b      	beq.n	800ec3e <HAL_RCC_GetSysClockFreq+0x46>
 800ec06:	2b08      	cmp	r3, #8
 800ec08:	d117      	bne.n	800ec3a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ec0a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ec0c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ec0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec12:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ec14:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800ec18:	d113      	bne.n	800ec42 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec1a:	480f      	ldr	r0, [pc, #60]	; (800ec58 <HAL_RCC_GetSysClockFreq+0x60>)
 800ec1c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ec20:	fba1 0100 	umull	r0, r1, r1, r0
 800ec24:	f7f1 fbc4 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ec28:	4b0a      	ldr	r3, [pc, #40]	; (800ec54 <HAL_RCC_GetSysClockFreq+0x5c>)
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ec30:	3301      	adds	r3, #1
 800ec32:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800ec34:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ec38:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800ec3a:	4807      	ldr	r0, [pc, #28]	; (800ec58 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800ec3c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ec3e:	4807      	ldr	r0, [pc, #28]	; (800ec5c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800ec40:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec42:	4806      	ldr	r0, [pc, #24]	; (800ec5c <HAL_RCC_GetSysClockFreq+0x64>)
 800ec44:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ec48:	2300      	movs	r3, #0
 800ec4a:	fba1 0100 	umull	r0, r1, r1, r0
 800ec4e:	f7f1 fbaf 	bl	80003b0 <__aeabi_uldivmod>
 800ec52:	e7e9      	b.n	800ec28 <HAL_RCC_GetSysClockFreq+0x30>
 800ec54:	40023800 	.word	0x40023800
 800ec58:	00f42400 	.word	0x00f42400
 800ec5c:	007a1200 	.word	0x007a1200

0800ec60 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800ec60:	2800      	cmp	r0, #0
 800ec62:	f000 80f6 	beq.w	800ee52 <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ec66:	6803      	ldr	r3, [r0, #0]
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	2b0e      	cmp	r3, #14
{
 800ec6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec70:	4604      	mov	r4, r0
 800ec72:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ec74:	f200 80d6 	bhi.w	800ee24 <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ec78:	2d0f      	cmp	r5, #15
 800ec7a:	f200 80c3 	bhi.w	800ee04 <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec7e:	4a81      	ldr	r2, [pc, #516]	; (800ee84 <HAL_RCC_ClockConfig+0x224>)
 800ec80:	6813      	ldr	r3, [r2, #0]
 800ec82:	f003 030f 	and.w	r3, r3, #15
 800ec86:	42ab      	cmp	r3, r5
 800ec88:	d36f      	bcc.n	800ed6a <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ec8a:	6823      	ldr	r3, [r4, #0]
 800ec8c:	0798      	lsls	r0, r3, #30
 800ec8e:	d530      	bpl.n	800ecf2 <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec90:	0759      	lsls	r1, r3, #29
 800ec92:	d504      	bpl.n	800ec9e <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ec94:	497c      	ldr	r1, [pc, #496]	; (800ee88 <HAL_RCC_ClockConfig+0x228>)
 800ec96:	688a      	ldr	r2, [r1, #8]
 800ec98:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800ec9c:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec9e:	071a      	lsls	r2, r3, #28
 800eca0:	d504      	bpl.n	800ecac <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eca2:	4979      	ldr	r1, [pc, #484]	; (800ee88 <HAL_RCC_ClockConfig+0x228>)
 800eca4:	688a      	ldr	r2, [r1, #8]
 800eca6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800ecaa:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ecac:	68a1      	ldr	r1, [r4, #8]
 800ecae:	f021 0220 	bic.w	r2, r1, #32
 800ecb2:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800ecb6:	2a90      	cmp	r2, #144	; 0x90
 800ecb8:	bf18      	it	ne
 800ecba:	2800      	cmpne	r0, #0
 800ecbc:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800ecc0:	bf14      	ite	ne
 800ecc2:	2201      	movne	r2, #1
 800ecc4:	2200      	moveq	r2, #0
 800ecc6:	29f0      	cmp	r1, #240	; 0xf0
 800ecc8:	bf0c      	ite	eq
 800ecca:	2200      	moveq	r2, #0
 800eccc:	f002 0201 	andne.w	r2, r2, #1
 800ecd0:	28a0      	cmp	r0, #160	; 0xa0
 800ecd2:	bf0c      	ite	eq
 800ecd4:	2200      	moveq	r2, #0
 800ecd6:	f002 0201 	andne.w	r2, r2, #1
 800ecda:	b122      	cbz	r2, 800ece6 <HAL_RCC_ClockConfig+0x86>
 800ecdc:	f021 0210 	bic.w	r2, r1, #16
 800ece0:	2ac0      	cmp	r2, #192	; 0xc0
 800ece2:	f040 80b8 	bne.w	800ee56 <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ece6:	4868      	ldr	r0, [pc, #416]	; (800ee88 <HAL_RCC_ClockConfig+0x228>)
 800ece8:	6882      	ldr	r2, [r0, #8]
 800ecea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800ecee:	4311      	orrs	r1, r2
 800ecf0:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ecf2:	07df      	lsls	r7, r3, #31
 800ecf4:	d526      	bpl.n	800ed44 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ecf6:	6863      	ldr	r3, [r4, #4]
 800ecf8:	2b02      	cmp	r3, #2
 800ecfa:	f200 80a1 	bhi.w	800ee40 <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecfe:	4a62      	ldr	r2, [pc, #392]	; (800ee88 <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ed00:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed02:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ed04:	f000 8098 	beq.w	800ee38 <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ed08:	2b02      	cmp	r3, #2
 800ed0a:	f000 8091 	beq.w	800ee30 <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed0e:	0791      	lsls	r1, r2, #30
 800ed10:	d528      	bpl.n	800ed64 <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed12:	4e5d      	ldr	r6, [pc, #372]	; (800ee88 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed14:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed18:	68b2      	ldr	r2, [r6, #8]
 800ed1a:	f022 0203 	bic.w	r2, r2, #3
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800ed22:	f7fa faef 	bl	8009304 <HAL_GetTick>
 800ed26:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed28:	e005      	b.n	800ed36 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed2a:	f7fa faeb 	bl	8009304 <HAL_GetTick>
 800ed2e:	1bc0      	subs	r0, r0, r7
 800ed30:	4540      	cmp	r0, r8
 800ed32:	f200 808c 	bhi.w	800ee4e <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed36:	68b3      	ldr	r3, [r6, #8]
 800ed38:	6862      	ldr	r2, [r4, #4]
 800ed3a:	f003 030c 	and.w	r3, r3, #12
 800ed3e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800ed42:	d1f2      	bne.n	800ed2a <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ed44:	4a4f      	ldr	r2, [pc, #316]	; (800ee84 <HAL_RCC_ClockConfig+0x224>)
 800ed46:	6813      	ldr	r3, [r2, #0]
 800ed48:	f003 030f 	and.w	r3, r3, #15
 800ed4c:	42ab      	cmp	r3, r5
 800ed4e:	d91a      	bls.n	800ed86 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed50:	6813      	ldr	r3, [r2, #0]
 800ed52:	f023 030f 	bic.w	r3, r3, #15
 800ed56:	432b      	orrs	r3, r5
 800ed58:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed5a:	6813      	ldr	r3, [r2, #0]
 800ed5c:	f003 030f 	and.w	r3, r3, #15
 800ed60:	42ab      	cmp	r3, r5
 800ed62:	d010      	beq.n	800ed86 <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800ed64:	2001      	movs	r0, #1
}
 800ed66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed6a:	6813      	ldr	r3, [r2, #0]
 800ed6c:	f023 030f 	bic.w	r3, r3, #15
 800ed70:	432b      	orrs	r3, r5
 800ed72:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed74:	6813      	ldr	r3, [r2, #0]
 800ed76:	f003 030f 	and.w	r3, r3, #15
 800ed7a:	42ab      	cmp	r3, r5
 800ed7c:	d1f2      	bne.n	800ed64 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ed7e:	6823      	ldr	r3, [r4, #0]
 800ed80:	0798      	lsls	r0, r3, #30
 800ed82:	d485      	bmi.n	800ec90 <HAL_RCC_ClockConfig+0x30>
 800ed84:	e7b5      	b.n	800ecf2 <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed86:	6823      	ldr	r3, [r4, #0]
 800ed88:	075a      	lsls	r2, r3, #29
 800ed8a:	d512      	bpl.n	800edb2 <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800ed8c:	68e1      	ldr	r1, [r4, #12]
 800ed8e:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800ed92:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800ed96:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800ed9a:	bf18      	it	ne
 800ed9c:	2a00      	cmpne	r2, #0
 800ed9e:	d002      	beq.n	800eda6 <HAL_RCC_ClockConfig+0x146>
 800eda0:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800eda4:	d15f      	bne.n	800ee66 <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eda6:	4838      	ldr	r0, [pc, #224]	; (800ee88 <HAL_RCC_ClockConfig+0x228>)
 800eda8:	6882      	ldr	r2, [r0, #8]
 800edaa:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800edae:	430a      	orrs	r2, r1
 800edb0:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800edb2:	071b      	lsls	r3, r3, #28
 800edb4:	d513      	bpl.n	800edde <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800edb6:	6922      	ldr	r2, [r4, #16]
 800edb8:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800edbc:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800edc0:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800edc4:	bf18      	it	ne
 800edc6:	2b00      	cmpne	r3, #0
 800edc8:	d002      	beq.n	800edd0 <HAL_RCC_ClockConfig+0x170>
 800edca:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800edce:	d152      	bne.n	800ee76 <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800edd0:	492d      	ldr	r1, [pc, #180]	; (800ee88 <HAL_RCC_ClockConfig+0x228>)
 800edd2:	688b      	ldr	r3, [r1, #8]
 800edd4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800edd8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800eddc:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800edde:	f7ff ff0b 	bl	800ebf8 <HAL_RCC_GetSysClockFreq>
 800ede2:	4a29      	ldr	r2, [pc, #164]	; (800ee88 <HAL_RCC_ClockConfig+0x228>)
 800ede4:	4c29      	ldr	r4, [pc, #164]	; (800ee8c <HAL_RCC_ClockConfig+0x22c>)
 800ede6:	4603      	mov	r3, r0
 800ede8:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800edea:	4829      	ldr	r0, [pc, #164]	; (800ee90 <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800edec:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800edf0:	4928      	ldr	r1, [pc, #160]	; (800ee94 <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800edf2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800edf4:	5ca2      	ldrb	r2, [r4, r2]
 800edf6:	40d3      	lsrs	r3, r2
 800edf8:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800edfa:	f7f9 f9f3 	bl	80081e4 <HAL_InitTick>
  return HAL_OK;
 800edfe:	2000      	movs	r0, #0
}
 800ee00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ee04:	f240 21de 	movw	r1, #734	; 0x2de
 800ee08:	4823      	ldr	r0, [pc, #140]	; (800ee98 <HAL_RCC_ClockConfig+0x238>)
 800ee0a:	f7f6 fd2d 	bl	8005868 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee0e:	4b1d      	ldr	r3, [pc, #116]	; (800ee84 <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800ee10:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee12:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee14:	6819      	ldr	r1, [r3, #0]
 800ee16:	f021 010f 	bic.w	r1, r1, #15
 800ee1a:	430d      	orrs	r5, r1
 800ee1c:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee1e:	681b      	ldr	r3, [r3, #0]
}
 800ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ee24:	f240 21dd 	movw	r1, #733	; 0x2dd
 800ee28:	481b      	ldr	r0, [pc, #108]	; (800ee98 <HAL_RCC_ClockConfig+0x238>)
 800ee2a:	f7f6 fd1d 	bl	8005868 <assert_failed>
 800ee2e:	e723      	b.n	800ec78 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ee30:	0190      	lsls	r0, r2, #6
 800ee32:	f53f af6e 	bmi.w	800ed12 <HAL_RCC_ClockConfig+0xb2>
 800ee36:	e795      	b.n	800ed64 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee38:	0396      	lsls	r6, r2, #14
 800ee3a:	f53f af6a 	bmi.w	800ed12 <HAL_RCC_ClockConfig+0xb2>
 800ee3e:	e791      	b.n	800ed64 <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ee40:	f240 3109 	movw	r1, #777	; 0x309
 800ee44:	4814      	ldr	r0, [pc, #80]	; (800ee98 <HAL_RCC_ClockConfig+0x238>)
 800ee46:	f7f6 fd0f 	bl	8005868 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee4a:	6863      	ldr	r3, [r4, #4]
 800ee4c:	e757      	b.n	800ecfe <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800ee4e:	2003      	movs	r0, #3
 800ee50:	e789      	b.n	800ed66 <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800ee52:	2001      	movs	r0, #1
}
 800ee54:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ee56:	f240 3102 	movw	r1, #770	; 0x302
 800ee5a:	480f      	ldr	r0, [pc, #60]	; (800ee98 <HAL_RCC_ClockConfig+0x238>)
 800ee5c:	f7f6 fd04 	bl	8005868 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee60:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	e73f      	b.n	800ece6 <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800ee66:	f240 3146 	movw	r1, #838	; 0x346
 800ee6a:	480b      	ldr	r0, [pc, #44]	; (800ee98 <HAL_RCC_ClockConfig+0x238>)
 800ee6c:	f7f6 fcfc 	bl	8005868 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ee70:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	e797      	b.n	800eda6 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800ee76:	f240 314d 	movw	r1, #845	; 0x34d
 800ee7a:	4807      	ldr	r0, [pc, #28]	; (800ee98 <HAL_RCC_ClockConfig+0x238>)
 800ee7c:	f7f6 fcf4 	bl	8005868 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ee80:	6922      	ldr	r2, [r4, #16]
 800ee82:	e7a5      	b.n	800edd0 <HAL_RCC_ClockConfig+0x170>
 800ee84:	40023c00 	.word	0x40023c00
 800ee88:	40023800 	.word	0x40023800
 800ee8c:	0802da40 	.word	0x0802da40
 800ee90:	20000318 	.word	0x20000318
 800ee94:	200002b8 	.word	0x200002b8
 800ee98:	0802e438 	.word	0x0802e438

0800ee9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800ee9c:	4b01      	ldr	r3, [pc, #4]	; (800eea4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800ee9e:	6818      	ldr	r0, [r3, #0]
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	200002b8 	.word	0x200002b8

0800eea8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800eea8:	4b04      	ldr	r3, [pc, #16]	; (800eebc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800eeaa:	4905      	ldr	r1, [pc, #20]	; (800eec0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	4a05      	ldr	r2, [pc, #20]	; (800eec4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800eeb0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800eeb4:	6808      	ldr	r0, [r1, #0]
 800eeb6:	5cd3      	ldrb	r3, [r2, r3]
}
 800eeb8:	40d8      	lsrs	r0, r3
 800eeba:	4770      	bx	lr
 800eebc:	40023800 	.word	0x40023800
 800eec0:	200002b8 	.word	0x200002b8
 800eec4:	0802da50 	.word	0x0802da50

0800eec8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800eec8:	4b04      	ldr	r3, [pc, #16]	; (800eedc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800eeca:	4905      	ldr	r1, [pc, #20]	; (800eee0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	4a05      	ldr	r2, [pc, #20]	; (800eee4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800eed0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800eed4:	6808      	ldr	r0, [r1, #0]
 800eed6:	5cd3      	ldrb	r3, [r2, r3]
}
 800eed8:	40d8      	lsrs	r0, r3
 800eeda:	4770      	bx	lr
 800eedc:	40023800 	.word	0x40023800
 800eee0:	200002b8 	.word	0x200002b8
 800eee4:	0802da50 	.word	0x0802da50

0800eee8 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800eee8:	4b0e      	ldr	r3, [pc, #56]	; (800ef24 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800eeea:	220f      	movs	r2, #15
 800eeec:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800eeee:	689a      	ldr	r2, [r3, #8]
 800eef0:	f002 0203 	and.w	r2, r2, #3
 800eef4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800eef6:	689a      	ldr	r2, [r3, #8]
 800eef8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800eefc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800eefe:	689a      	ldr	r2, [r3, #8]
 800ef00:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800ef04:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	08db      	lsrs	r3, r3, #3
{
 800ef0a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ef0c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef10:	4c05      	ldr	r4, [pc, #20]	; (800ef28 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ef12:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef14:	6823      	ldr	r3, [r4, #0]
}
 800ef16:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef1a:	f003 030f 	and.w	r3, r3, #15
 800ef1e:	600b      	str	r3, [r1, #0]
}
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	40023800 	.word	0x40023800
 800ef28:	40023c00 	.word	0x40023c00

0800ef2c <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ef2c:	4a56      	ldr	r2, [pc, #344]	; (800f088 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800ef2e:	6803      	ldr	r3, [r0, #0]
 800ef30:	401a      	ands	r2, r3
{
 800ef32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef36:	4604      	mov	r4, r0
 800ef38:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ef3a:	2a00      	cmp	r2, #0
 800ef3c:	f000 833f 	beq.w	800f5be <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ef40:	f013 0601 	ands.w	r6, r3, #1
 800ef44:	d00f      	beq.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800ef46:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ef48:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800ef4c:	f040 8342 	bne.w	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ef50:	4a4e      	ldr	r2, [pc, #312]	; (800f08c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ef52:	6891      	ldr	r1, [r2, #8]
 800ef54:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800ef58:	6091      	str	r1, [r2, #8]
 800ef5a:	6891      	ldr	r1, [r2, #8]
 800ef5c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ef5e:	fab6 f686 	clz	r6, r6
 800ef62:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ef64:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ef66:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800ef6a:	d014      	beq.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800ef6c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800ef6e:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800ef72:	f040 838d 	bne.w	800f690 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ef76:	4945      	ldr	r1, [pc, #276]	; (800f08c <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ef78:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ef7c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800ef80:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800ef84:	ea42 0205 	orr.w	r2, r2, r5
 800ef88:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ef8c:	f000 831f 	beq.w	800f5ce <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ef90:	fab5 f585 	clz	r5, r5
 800ef94:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ef96:	02d9      	lsls	r1, r3, #11
 800ef98:	d514      	bpl.n	800efc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800ef9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef9c:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800efa0:	f040 837d 	bne.w	800f69e <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800efa4:	4839      	ldr	r0, [pc, #228]	; (800f08c <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800efa6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800efaa:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800efae:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800efb2:	ea42 0201 	orr.w	r2, r2, r1
 800efb6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800efba:	f000 8306 	beq.w	800f5ca <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800efbe:	2900      	cmp	r1, #0
 800efc0:	bf08      	it	eq
 800efc2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800efc4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800efc8:	bf18      	it	ne
 800efca:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800efcc:	069a      	lsls	r2, r3, #26
 800efce:	f140 8099 	bpl.w	800f104 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800efd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800efd4:	482e      	ldr	r0, [pc, #184]	; (800f090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800efd6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800efda:	bf18      	it	ne
 800efdc:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800efe0:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800efe4:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800efe8:	bf14      	ite	ne
 800efea:	2301      	movne	r3, #1
 800efec:	2300      	moveq	r3, #0
 800efee:	4287      	cmp	r7, r0
 800eff0:	bf0c      	ite	eq
 800eff2:	2300      	moveq	r3, #0
 800eff4:	f003 0301 	andne.w	r3, r3, #1
 800eff8:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800effc:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800f000:	4287      	cmp	r7, r0
 800f002:	bf0c      	ite	eq
 800f004:	2300      	moveq	r3, #0
 800f006:	f003 0301 	andne.w	r3, r3, #1
 800f00a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800f00e:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800f012:	4281      	cmp	r1, r0
 800f014:	bf0c      	ite	eq
 800f016:	2300      	moveq	r3, #0
 800f018:	f003 0301 	andne.w	r3, r3, #1
 800f01c:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800f020:	4287      	cmp	r7, r0
 800f022:	bf0c      	ite	eq
 800f024:	2300      	moveq	r3, #0
 800f026:	f003 0301 	andne.w	r3, r3, #1
 800f02a:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800f02e:	4281      	cmp	r1, r0
 800f030:	bf0c      	ite	eq
 800f032:	2300      	moveq	r3, #0
 800f034:	f003 0301 	andne.w	r3, r3, #1
 800f038:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800f03c:	4281      	cmp	r1, r0
 800f03e:	bf0c      	ite	eq
 800f040:	2300      	moveq	r3, #0
 800f042:	f003 0301 	andne.w	r3, r3, #1
 800f046:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800f04a:	4281      	cmp	r1, r0
 800f04c:	bf0c      	ite	eq
 800f04e:	2300      	moveq	r3, #0
 800f050:	f003 0301 	andne.w	r3, r3, #1
 800f054:	b12b      	cbz	r3, 800f062 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f056:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f05a:	4b0e      	ldr	r3, [pc, #56]	; (800f094 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800f05c:	429a      	cmp	r2, r3
 800f05e:	f040 8438 	bne.w	800f8d2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f062:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f064:	4f0c      	ldr	r7, [pc, #48]	; (800f098 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800f066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f068:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f06c:	641a      	str	r2, [r3, #64]	; 0x40
 800f06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f074:	9301      	str	r3, [sp, #4]
 800f076:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f07e:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f080:	f7fa f940 	bl	8009304 <HAL_GetTick>
 800f084:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f086:	e010      	b.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800f088:	1dfffff9 	.word	0x1dfffff9
 800f08c:	40023800 	.word	0x40023800
 800f090:	00020300 	.word	0x00020300
 800f094:	001c0300 	.word	0x001c0300
 800f098:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f09c:	f7fa f932 	bl	8009304 <HAL_GetTick>
 800f0a0:	eba0 0008 	sub.w	r0, r0, r8
 800f0a4:	2864      	cmp	r0, #100	; 0x64
 800f0a6:	f200 8286 	bhi.w	800f5b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	05db      	lsls	r3, r3, #23
 800f0ae:	d5f5      	bpl.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f0b0:	4fb0      	ldr	r7, [pc, #704]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f0b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f0b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f0b6:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800f0ba:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800f0be:	d011      	beq.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800f0c0:	4291      	cmp	r1, r2
 800f0c2:	d00f      	beq.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f0c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f0c6:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f0c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800f0cc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800f0d0:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f0d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800f0d4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800f0d8:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800f0da:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f0dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f0de:	07d0      	lsls	r0, r2, #31
 800f0e0:	f100 836c 	bmi.w	800f7bc <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f0e4:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800f0e8:	f000 82c9 	beq.w	800f67e <HAL_RCCEx_PeriphCLKConfig+0x752>
 800f0ec:	49a1      	ldr	r1, [pc, #644]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f0ee:	688a      	ldr	r2, [r1, #8]
 800f0f0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800f0f4:	608a      	str	r2, [r1, #8]
 800f0f6:	4a9f      	ldr	r2, [pc, #636]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f0f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f0fc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f0fe:	430b      	orrs	r3, r1
 800f100:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f102:	6823      	ldr	r3, [r4, #0]
 800f104:	06da      	lsls	r2, r3, #27
 800f106:	d510      	bpl.n	800f12a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800f108:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800f10a:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800f10e:	f040 82db 	bne.w	800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f112:	4a98      	ldr	r2, [pc, #608]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f114:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800f118:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800f11c:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800f120:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f124:	4339      	orrs	r1, r7
 800f126:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f12a:	045f      	lsls	r7, r3, #17
 800f12c:	d50f      	bpl.n	800f14e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800f12e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f130:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800f134:	d003      	beq.n	800f13e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800f136:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800f13a:	f040 8299 	bne.w	800f670 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f13e:	488d      	ldr	r0, [pc, #564]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f140:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f144:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800f148:	430a      	orrs	r2, r1
 800f14a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f14e:	0418      	lsls	r0, r3, #16
 800f150:	d50f      	bpl.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800f152:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800f154:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800f158:	d003      	beq.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800f15a:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800f15e:	f040 826a 	bne.w	800f636 <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f162:	4884      	ldr	r0, [pc, #528]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f164:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f168:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800f16c:	430a      	orrs	r2, r1
 800f16e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f172:	03d9      	lsls	r1, r3, #15
 800f174:	d50f      	bpl.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800f176:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800f178:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800f17c:	d003      	beq.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f17e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800f182:	f040 8260 	bne.w	800f646 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f186:	487b      	ldr	r0, [pc, #492]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f188:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f18c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800f190:	430a      	orrs	r2, r1
 800f192:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f196:	039a      	lsls	r2, r3, #14
 800f198:	d50f      	bpl.n	800f1ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800f19a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800f19c:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800f1a0:	d003      	beq.n	800f1aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800f1a2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800f1a6:	f040 825b 	bne.w	800f660 <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f1aa:	4872      	ldr	r0, [pc, #456]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f1ac:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f1b0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800f1b4:	430a      	orrs	r2, r1
 800f1b6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f1ba:	065f      	lsls	r7, r3, #25
 800f1bc:	d50b      	bpl.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800f1be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f1c0:	2903      	cmp	r1, #3
 800f1c2:	f200 82b3 	bhi.w	800f72c <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f1c6:	486b      	ldr	r0, [pc, #428]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f1c8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f1cc:	f022 0203 	bic.w	r2, r2, #3
 800f1d0:	430a      	orrs	r2, r1
 800f1d2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f1d6:	0618      	lsls	r0, r3, #24
 800f1d8:	d50c      	bpl.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800f1da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f1dc:	f031 020c 	bics.w	r2, r1, #12
 800f1e0:	f040 82b4 	bne.w	800f74c <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f1e4:	4863      	ldr	r0, [pc, #396]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f1e6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f1ea:	f022 020c 	bic.w	r2, r2, #12
 800f1ee:	430a      	orrs	r2, r1
 800f1f0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f1f4:	05d9      	lsls	r1, r3, #23
 800f1f6:	d50c      	bpl.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800f1f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f1fa:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800f1fe:	f040 82ad 	bne.w	800f75c <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f202:	485c      	ldr	r0, [pc, #368]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f204:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f208:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800f20c:	430a      	orrs	r2, r1
 800f20e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f212:	059a      	lsls	r2, r3, #22
 800f214:	d50c      	bpl.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800f216:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800f218:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800f21c:	f040 82a6 	bne.w	800f76c <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f220:	4854      	ldr	r0, [pc, #336]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f222:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f226:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f22a:	430a      	orrs	r2, r1
 800f22c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f230:	055f      	lsls	r7, r3, #21
 800f232:	d50c      	bpl.n	800f24e <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800f234:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f236:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800f23a:	f040 829f 	bne.w	800f77c <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f23e:	484d      	ldr	r0, [pc, #308]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f240:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f244:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f248:	430a      	orrs	r2, r1
 800f24a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f24e:	0518      	lsls	r0, r3, #20
 800f250:	d50c      	bpl.n	800f26c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800f252:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f254:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800f258:	f040 8298 	bne.w	800f78c <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f25c:	4845      	ldr	r0, [pc, #276]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f25e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f262:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f266:	430a      	orrs	r2, r1
 800f268:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f26c:	04d9      	lsls	r1, r3, #19
 800f26e:	d50c      	bpl.n	800f28a <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800f270:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f272:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800f276:	f040 8291 	bne.w	800f79c <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f27a:	483e      	ldr	r0, [pc, #248]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f27c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f280:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800f284:	430a      	orrs	r2, r1
 800f286:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f28a:	049a      	lsls	r2, r3, #18
 800f28c:	d50c      	bpl.n	800f2a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800f28e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f290:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800f294:	f040 828a 	bne.w	800f7ac <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f298:	4836      	ldr	r0, [pc, #216]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f29a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f29e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f2a2:	430a      	orrs	r2, r1
 800f2a4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f2a8:	025f      	lsls	r7, r3, #9
 800f2aa:	d50c      	bpl.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800f2ac:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800f2ae:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800f2b2:	f040 8222 	bne.w	800f6fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f2b6:	482f      	ldr	r0, [pc, #188]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f2b8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f2bc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800f2c0:	430a      	orrs	r2, r1
 800f2c2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f2c6:	0298      	lsls	r0, r3, #10
 800f2c8:	d510      	bpl.n	800f2ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800f2ca:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800f2cc:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800f2d0:	f040 821b 	bne.w	800f70a <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f2d4:	4827      	ldr	r0, [pc, #156]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800f2d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f2da:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800f2de:	bf08      	it	eq
 800f2e0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f2e2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800f2e6:	430a      	orrs	r2, r1
 800f2e8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800f2ec:	f013 0f08 	tst.w	r3, #8
 800f2f0:	bf18      	it	ne
 800f2f2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f2f4:	0359      	lsls	r1, r3, #13
 800f2f6:	d50c      	bpl.n	800f312 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800f2f8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800f2fa:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800f2fe:	f040 821d 	bne.w	800f73c <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f302:	481c      	ldr	r0, [pc, #112]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f304:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f308:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f30c:	430a      	orrs	r2, r1
 800f30e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f312:	021a      	lsls	r2, r3, #8
 800f314:	d50d      	bpl.n	800f332 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800f316:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800f31a:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800f31e:	f040 81fc 	bne.w	800f71a <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f322:	4814      	ldr	r0, [pc, #80]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f324:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f328:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f32c:	430a      	orrs	r2, r1
 800f32e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f332:	015f      	lsls	r7, r3, #5
 800f334:	d50d      	bpl.n	800f352 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800f336:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800f33a:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800f33e:	f040 81ca 	bne.w	800f6d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f342:	480c      	ldr	r0, [pc, #48]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f344:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f348:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800f34c:	430a      	orrs	r2, r1
 800f34e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f352:	0118      	lsls	r0, r3, #4
 800f354:	d510      	bpl.n	800f378 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800f356:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800f35a:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800f35e:	f040 81c3 	bne.w	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f362:	4804      	ldr	r0, [pc, #16]	; (800f374 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f364:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800f368:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800f36c:	430a      	orrs	r2, r1
 800f36e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800f372:	e001      	b.n	800f378 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800f374:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f378:	00d9      	lsls	r1, r3, #3
 800f37a:	d50d      	bpl.n	800f398 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800f37c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f380:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800f384:	f040 8198 	bne.w	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f388:	49b3      	ldr	r1, [pc, #716]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f38a:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800f38e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f392:	4313      	orrs	r3, r2
 800f394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f398:	2e01      	cmp	r6, #1
 800f39a:	d003      	beq.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800f39c:	6823      	ldr	r3, [r4, #0]
 800f39e:	019a      	lsls	r2, r3, #6
 800f3a0:	f140 8083 	bpl.w	800f4aa <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f3a4:	4eac      	ldr	r6, [pc, #688]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f3a6:	6833      	ldr	r3, [r6, #0]
 800f3a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f3ac:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3ae:	f7f9 ffa9 	bl	8009304 <HAL_GetTick>
 800f3b2:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f3b4:	e005      	b.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f3b6:	f7f9 ffa5 	bl	8009304 <HAL_GetTick>
 800f3ba:	1bc0      	subs	r0, r0, r7
 800f3bc:	2864      	cmp	r0, #100	; 0x64
 800f3be:	f200 80fa 	bhi.w	800f5b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f3c2:	6833      	ldr	r3, [r6, #0]
 800f3c4:	011b      	lsls	r3, r3, #4
 800f3c6:	d4f6      	bmi.n	800f3b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800f3c8:	6863      	ldr	r3, [r4, #4]
 800f3ca:	3b32      	subs	r3, #50	; 0x32
 800f3cc:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800f3d0:	f200 816c 	bhi.w	800f6ac <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800f3d4:	6823      	ldr	r3, [r4, #0]
 800f3d6:	07df      	lsls	r7, r3, #31
 800f3d8:	d517      	bpl.n	800f40a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f3da:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f3dc:	b9aa      	cbnz	r2, 800f40a <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f3de:	68a7      	ldr	r7, [r4, #8]
 800f3e0:	1eba      	subs	r2, r7, #2
 800f3e2:	2a05      	cmp	r2, #5
 800f3e4:	f200 820c 	bhi.w	800f800 <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f3e8:	499b      	ldr	r1, [pc, #620]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f3ea:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f3ec:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f3f0:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f3f4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800f3f8:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800f3fc:	4332      	orrs	r2, r6
 800f3fe:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800f402:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800f406:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f40a:	031e      	lsls	r6, r3, #12
 800f40c:	f100 80e9 	bmi.w	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800f410:	02d8      	lsls	r0, r3, #11
 800f412:	d504      	bpl.n	800f41e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f414:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f416:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800f41a:	f000 80e7 	beq.w	800f5ec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f41e:	01d9      	lsls	r1, r3, #7
 800f420:	d514      	bpl.n	800f44c <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f422:	6927      	ldr	r7, [r4, #16]
 800f424:	2f03      	cmp	r7, #3
 800f426:	f200 81f9 	bhi.w	800f81c <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f42a:	498b      	ldr	r1, [pc, #556]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f42c:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f42e:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f432:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f436:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800f43a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800f43e:	4332      	orrs	r2, r6
 800f440:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800f444:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800f448:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f44c:	019a      	lsls	r2, r3, #6
 800f44e:	d51a      	bpl.n	800f486 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f450:	6923      	ldr	r3, [r4, #16]
 800f452:	2b03      	cmp	r3, #3
 800f454:	f200 81dc 	bhi.w	800f810 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f458:	68a3      	ldr	r3, [r4, #8]
 800f45a:	3b02      	subs	r3, #2
 800f45c:	2b05      	cmp	r3, #5
 800f45e:	f200 81ec 	bhi.w	800f83a <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f462:	68e2      	ldr	r2, [r4, #12]
 800f464:	1e93      	subs	r3, r2, #2
 800f466:	2b0d      	cmp	r3, #13
 800f468:	f200 81e0 	bhi.w	800f82c <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f46c:	6923      	ldr	r3, [r4, #16]
 800f46e:	6861      	ldr	r1, [r4, #4]
 800f470:	041b      	lsls	r3, r3, #16
 800f472:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800f476:	68a1      	ldr	r1, [r4, #8]
 800f478:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f47c:	4976      	ldr	r1, [pc, #472]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f47e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f482:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f486:	4e74      	ldr	r6, [pc, #464]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f488:	6833      	ldr	r3, [r6, #0]
 800f48a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f48e:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f490:	f7f9 ff38 	bl	8009304 <HAL_GetTick>
 800f494:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f496:	e005      	b.n	800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f498:	f7f9 ff34 	bl	8009304 <HAL_GetTick>
 800f49c:	1bc0      	subs	r0, r0, r7
 800f49e:	2864      	cmp	r0, #100	; 0x64
 800f4a0:	f200 8089 	bhi.w	800f5b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f4a4:	6833      	ldr	r3, [r6, #0]
 800f4a6:	011b      	lsls	r3, r3, #4
 800f4a8:	d5f6      	bpl.n	800f498 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f4aa:	2d01      	cmp	r5, #1
 800f4ac:	d003      	beq.n	800f4b6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800f4ae:	2000      	movs	r0, #0
}
 800f4b0:	b003      	add	sp, #12
 800f4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800f4b6:	4d68      	ldr	r5, [pc, #416]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f4b8:	682b      	ldr	r3, [r5, #0]
 800f4ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4be:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800f4c0:	f7f9 ff20 	bl	8009304 <HAL_GetTick>
 800f4c4:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f4c6:	e004      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f4c8:	f7f9 ff1c 	bl	8009304 <HAL_GetTick>
 800f4cc:	1b80      	subs	r0, r0, r6
 800f4ce:	2864      	cmp	r0, #100	; 0x64
 800f4d0:	d871      	bhi.n	800f5b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f4d2:	682b      	ldr	r3, [r5, #0]
 800f4d4:	009f      	lsls	r7, r3, #2
 800f4d6:	d4f7      	bmi.n	800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800f4d8:	6963      	ldr	r3, [r4, #20]
 800f4da:	3b32      	subs	r3, #50	; 0x32
 800f4dc:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800f4e0:	f200 81b9 	bhi.w	800f856 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f4e4:	6823      	ldr	r3, [r4, #0]
 800f4e6:	031d      	lsls	r5, r3, #12
 800f4e8:	f140 81ad 	bpl.w	800f846 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800f4ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f4ee:	2a00      	cmp	r2, #0
 800f4f0:	f040 81a9 	bne.w	800f846 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800f4f4:	69a3      	ldr	r3, [r4, #24]
 800f4f6:	3b02      	subs	r3, #2
 800f4f8:	2b0d      	cmp	r3, #13
 800f4fa:	f200 81d5 	bhi.w	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800f4fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f500:	1e59      	subs	r1, r3, #1
 800f502:	291f      	cmp	r1, #31
 800f504:	f200 81c8 	bhi.w	800f898 <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f508:	4a53      	ldr	r2, [pc, #332]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f50a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f50e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f516:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800f51a:	4303      	orrs	r3, r0
 800f51c:	6960      	ldr	r0, [r4, #20]
 800f51e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f522:	69a0      	ldr	r0, [r4, #24]
 800f524:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f52c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f530:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800f534:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f538:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f53c:	6823      	ldr	r3, [r4, #0]
 800f53e:	0299      	lsls	r1, r3, #10
 800f540:	d504      	bpl.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x620>
 800f542:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f544:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800f548:	f000 818b 	beq.w	800f862 <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f54c:	071a      	lsls	r2, r3, #28
 800f54e:	d522      	bpl.n	800f596 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800f550:	69e3      	ldr	r3, [r4, #28]
 800f552:	3b02      	subs	r3, #2
 800f554:	2b05      	cmp	r3, #5
 800f556:	f200 8199 	bhi.w	800f88c <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800f55a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f55c:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800f560:	f040 81a8 	bne.w	800f8b4 <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f564:	4a3c      	ldr	r2, [pc, #240]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f566:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f568:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f56c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f570:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800f574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f578:	430b      	orrs	r3, r1
 800f57a:	69e1      	ldr	r1, [r4, #28]
 800f57c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800f580:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f588:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f58c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800f590:	4303      	orrs	r3, r0
 800f592:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800f596:	4c30      	ldr	r4, [pc, #192]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f59e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800f5a0:	f7f9 feb0 	bl	8009304 <HAL_GetTick>
 800f5a4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f5a6:	6823      	ldr	r3, [r4, #0]
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	d480      	bmi.n	800f4ae <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f5ac:	f7f9 feaa 	bl	8009304 <HAL_GetTick>
 800f5b0:	1b40      	subs	r0, r0, r5
 800f5b2:	2864      	cmp	r0, #100	; 0x64
 800f5b4:	d9f7      	bls.n	800f5a6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800f5b6:	2003      	movs	r0, #3
}
 800f5b8:	b003      	add	sp, #12
 800f5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f5be:	2172      	movs	r1, #114	; 0x72
 800f5c0:	4826      	ldr	r0, [pc, #152]	; (800f65c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f5c2:	f7f6 f951 	bl	8005868 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	e4ba      	b.n	800ef40 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800f5ca:	2601      	movs	r6, #1
 800f5cc:	e4fa      	b.n	800efc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800f5ce:	2500      	movs	r5, #0
      plli2sused = 1;
 800f5d0:	2601      	movs	r6, #1
 800f5d2:	e4e0      	b.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800f5d4:	2178      	movs	r1, #120	; 0x78
 800f5d6:	4821      	ldr	r0, [pc, #132]	; (800f65c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f5d8:	f7f6 f946 	bl	8005868 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f5dc:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	e4b6      	b.n	800ef50 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f5e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f5e4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800f5e8:	f47f af12 	bne.w	800f410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f5ec:	68e3      	ldr	r3, [r4, #12]
 800f5ee:	3b02      	subs	r3, #2
 800f5f0:	2b0d      	cmp	r3, #13
 800f5f2:	f200 80f7 	bhi.w	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800f5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5f8:	1e59      	subs	r1, r3, #1
 800f5fa:	291f      	cmp	r1, #31
 800f5fc:	f200 80f8 	bhi.w	800f7f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f600:	4a15      	ldr	r2, [pc, #84]	; (800f658 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f602:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f606:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800f60a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f60e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800f612:	4303      	orrs	r3, r0
 800f614:	6860      	ldr	r0, [r4, #4]
 800f616:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f61a:	68e0      	ldr	r0, [r4, #12]
 800f61c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f620:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f624:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f628:	f023 031f 	bic.w	r3, r3, #31
 800f62c:	430b      	orrs	r3, r1
 800f62e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	e6f3      	b.n	800f41e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800f636:	f240 1105 	movw	r1, #261	; 0x105
 800f63a:	4808      	ldr	r0, [pc, #32]	; (800f65c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f63c:	f7f6 f914 	bl	8005868 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f640:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	e58d      	b.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800f646:	f240 110f 	movw	r1, #271	; 0x10f
 800f64a:	4804      	ldr	r0, [pc, #16]	; (800f65c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f64c:	f7f6 f90c 	bl	8005868 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f650:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	e597      	b.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f656:	bf00      	nop
 800f658:	40023800 	.word	0x40023800
 800f65c:	0802e470 	.word	0x0802e470
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800f660:	f240 1119 	movw	r1, #281	; 0x119
 800f664:	489e      	ldr	r0, [pc, #632]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f666:	f7f6 f8ff 	bl	8005868 <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f66a:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f66c:	6823      	ldr	r3, [r4, #0]
 800f66e:	e59c      	b.n	800f1aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800f670:	21fb      	movs	r1, #251	; 0xfb
 800f672:	489b      	ldr	r0, [pc, #620]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f674:	f7f6 f8f8 	bl	8005868 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f678:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f67a:	6823      	ldr	r3, [r4, #0]
 800f67c:	e55f      	b.n	800f13e <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f67e:	4899      	ldr	r0, [pc, #612]	; (800f8e4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800f680:	4999      	ldr	r1, [pc, #612]	; (800f8e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800f682:	6882      	ldr	r2, [r0, #8]
 800f684:	4019      	ands	r1, r3
 800f686:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800f68a:	430a      	orrs	r2, r1
 800f68c:	6082      	str	r2, [r0, #8]
 800f68e:	e532      	b.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800f690:	2188      	movs	r1, #136	; 0x88
 800f692:	4893      	ldr	r0, [pc, #588]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f694:	f7f6 f8e8 	bl	8005868 <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f698:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f69a:	6823      	ldr	r3, [r4, #0]
 800f69c:	e46b      	b.n	800ef76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800f69e:	219c      	movs	r1, #156	; 0x9c
 800f6a0:	488f      	ldr	r0, [pc, #572]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6a2:	f7f6 f8e1 	bl	8005868 <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f6a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	e47b      	b.n	800efa4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800f6ac:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800f6b0:	488b      	ldr	r0, [pc, #556]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6b2:	f7f6 f8d9 	bl	8005868 <assert_failed>
 800f6b6:	e68d      	b.n	800f3d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800f6b8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800f6bc:	4888      	ldr	r0, [pc, #544]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6be:	f7f6 f8d3 	bl	8005868 <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f6c2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f6c6:	e65f      	b.n	800f388 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800f6c8:	21f1      	movs	r1, #241	; 0xf1
 800f6ca:	4885      	ldr	r0, [pc, #532]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6cc:	f7f6 f8cc 	bl	8005868 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f6d0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f6d2:	6823      	ldr	r3, [r4, #0]
 800f6d4:	e51d      	b.n	800f112 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800f6d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f6da:	4881      	ldr	r0, [pc, #516]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6dc:	f7f6 f8c4 	bl	8005868 <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f6e0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f6e4:	6823      	ldr	r3, [r4, #0]
 800f6e6:	e62c      	b.n	800f342 <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800f6e8:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800f6ec:	487c      	ldr	r0, [pc, #496]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6ee:	f7f6 f8bb 	bl	8005868 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f6f2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	e633      	b.n	800f362 <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800f6fa:	f240 1173 	movw	r1, #371	; 0x173
 800f6fe:	4878      	ldr	r0, [pc, #480]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f700:	f7f6 f8b2 	bl	8005868 <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f704:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f706:	6823      	ldr	r3, [r4, #0]
 800f708:	e5d5      	b.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800f70a:	f240 117d 	movw	r1, #381	; 0x17d
 800f70e:	4874      	ldr	r0, [pc, #464]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f710:	f7f6 f8aa 	bl	8005868 <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f714:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f716:	6823      	ldr	r3, [r4, #0]
 800f718:	e5dc      	b.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800f71a:	f240 119f 	movw	r1, #415	; 0x19f
 800f71e:	4870      	ldr	r0, [pc, #448]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f720:	f7f6 f8a2 	bl	8005868 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f724:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f728:	6823      	ldr	r3, [r4, #0]
 800f72a:	e5fa      	b.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800f72c:	f240 1123 	movw	r1, #291	; 0x123
 800f730:	486b      	ldr	r0, [pc, #428]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f732:	f7f6 f899 	bl	8005868 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f736:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	e544      	b.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800f73c:	f240 1195 	movw	r1, #405	; 0x195
 800f740:	4867      	ldr	r0, [pc, #412]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f742:	f7f6 f891 	bl	8005868 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f746:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	e5da      	b.n	800f302 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800f74c:	f240 112d 	movw	r1, #301	; 0x12d
 800f750:	4863      	ldr	r0, [pc, #396]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f752:	f7f6 f889 	bl	8005868 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f756:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f758:	6823      	ldr	r3, [r4, #0]
 800f75a:	e543      	b.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800f75c:	f240 1137 	movw	r1, #311	; 0x137
 800f760:	485f      	ldr	r0, [pc, #380]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f762:	f7f6 f881 	bl	8005868 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f766:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	e54a      	b.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800f76c:	f240 1141 	movw	r1, #321	; 0x141
 800f770:	485b      	ldr	r0, [pc, #364]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f772:	f7f6 f879 	bl	8005868 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f776:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	e551      	b.n	800f220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800f77c:	f240 114b 	movw	r1, #331	; 0x14b
 800f780:	4857      	ldr	r0, [pc, #348]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f782:	f7f6 f871 	bl	8005868 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f786:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f788:	6823      	ldr	r3, [r4, #0]
 800f78a:	e558      	b.n	800f23e <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800f78c:	f240 1155 	movw	r1, #341	; 0x155
 800f790:	4853      	ldr	r0, [pc, #332]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f792:	f7f6 f869 	bl	8005868 <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f796:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f798:	6823      	ldr	r3, [r4, #0]
 800f79a:	e55f      	b.n	800f25c <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800f79c:	f240 115f 	movw	r1, #351	; 0x15f
 800f7a0:	484f      	ldr	r0, [pc, #316]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7a2:	f7f6 f861 	bl	8005868 <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f7a6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f7a8:	6823      	ldr	r3, [r4, #0]
 800f7aa:	e566      	b.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800f7ac:	f240 1169 	movw	r1, #361	; 0x169
 800f7b0:	484b      	ldr	r0, [pc, #300]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7b2:	f7f6 f859 	bl	8005868 <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f7b6:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f7b8:	6823      	ldr	r3, [r4, #0]
 800f7ba:	e56d      	b.n	800f298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800f7bc:	f7f9 fda2 	bl	8009304 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f7c0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800f7c4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f7c6:	e006      	b.n	800f7d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f7c8:	f7f9 fd9c 	bl	8009304 <HAL_GetTick>
 800f7cc:	eba0 0008 	sub.w	r0, r0, r8
 800f7d0:	4548      	cmp	r0, r9
 800f7d2:	f63f aef0 	bhi.w	800f5b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f7d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7d8:	0799      	lsls	r1, r3, #30
 800f7da:	d5f5      	bpl.n	800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f7dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f7de:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800f7e2:	e47f      	b.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f7e4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800f7e8:	483d      	ldr	r0, [pc, #244]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7ea:	f7f6 f83d 	bl	8005868 <assert_failed>
 800f7ee:	e702      	b.n	800f5f6 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800f7f0:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800f7f4:	483a      	ldr	r0, [pc, #232]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7f6:	f7f6 f837 	bl	8005868 <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7fc:	1e59      	subs	r1, r3, #1
 800f7fe:	e6ff      	b.n	800f600 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f800:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800f804:	4836      	ldr	r0, [pc, #216]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f806:	f7f6 f82f 	bl	8005868 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f80a:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f80c:	6823      	ldr	r3, [r4, #0]
 800f80e:	e5eb      	b.n	800f3e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f810:	f44f 7105 	mov.w	r1, #532	; 0x214
 800f814:	4832      	ldr	r0, [pc, #200]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f816:	f7f6 f827 	bl	8005868 <assert_failed>
 800f81a:	e61d      	b.n	800f458 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f81c:	f240 2105 	movw	r1, #517	; 0x205
 800f820:	482f      	ldr	r0, [pc, #188]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f822:	f7f6 f821 	bl	8005868 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f826:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f828:	6823      	ldr	r3, [r4, #0]
 800f82a:	e5fe      	b.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f82c:	f240 2116 	movw	r1, #534	; 0x216
 800f830:	482b      	ldr	r0, [pc, #172]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f832:	f7f6 f819 	bl	8005868 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f836:	68e2      	ldr	r2, [r4, #12]
 800f838:	e618      	b.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f83a:	f240 2115 	movw	r1, #533	; 0x215
 800f83e:	4828      	ldr	r0, [pc, #160]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f840:	f7f6 f812 	bl	8005868 <assert_failed>
 800f844:	e60d      	b.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f846:	02d8      	lsls	r0, r3, #11
 800f848:	f57f ae79 	bpl.w	800f53e <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f84c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f84e:	2a00      	cmp	r2, #0
 800f850:	f47f ae75 	bne.w	800f53e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800f854:	e64e      	b.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800f856:	f44f 7111 	mov.w	r1, #580	; 0x244
 800f85a:	4821      	ldr	r0, [pc, #132]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f85c:	f7f6 f804 	bl	8005868 <assert_failed>
 800f860:	e640      	b.n	800f4e4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800f862:	6a20      	ldr	r0, [r4, #32]
 800f864:	2803      	cmp	r0, #3
 800f866:	d82c      	bhi.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f868:	491e      	ldr	r1, [pc, #120]	; (800f8e4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800f86a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f86e:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f872:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800f876:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800f87a:	432a      	orrs	r2, r5
 800f87c:	6965      	ldr	r5, [r4, #20]
 800f87e:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800f882:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f886:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800f88a:	e65f      	b.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800f88c:	f240 216f 	movw	r1, #623	; 0x26f
 800f890:	4813      	ldr	r0, [pc, #76]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f892:	f7f5 ffe9 	bl	8005868 <assert_failed>
 800f896:	e660      	b.n	800f55a <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800f898:	f240 214d 	movw	r1, #589	; 0x24d
 800f89c:	4810      	ldr	r0, [pc, #64]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f89e:	f7f5 ffe3 	bl	8005868 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f8a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f8a4:	1e59      	subs	r1, r3, #1
 800f8a6:	e62f      	b.n	800f508 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800f8a8:	f240 214b 	movw	r1, #587	; 0x24b
 800f8ac:	480c      	ldr	r0, [pc, #48]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8ae:	f7f5 ffdb 	bl	8005868 <assert_failed>
 800f8b2:	e624      	b.n	800f4fe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800f8b4:	480a      	ldr	r0, [pc, #40]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8b6:	f44f 711c 	mov.w	r1, #624	; 0x270
 800f8ba:	f7f5 ffd5 	bl	8005868 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f8be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f8c0:	e650      	b.n	800f564 <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800f8c2:	4807      	ldr	r0, [pc, #28]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8c4:	f44f 7118 	mov.w	r1, #608	; 0x260
 800f8c8:	f7f5 ffce 	bl	8005868 <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f8cc:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f8ce:	6823      	ldr	r3, [r4, #0]
 800f8d0:	e7ca      	b.n	800f868 <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f8d2:	21b7      	movs	r1, #183	; 0xb7
 800f8d4:	4802      	ldr	r0, [pc, #8]	; (800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8d6:	f7f5 ffc7 	bl	8005868 <assert_failed>
 800f8da:	f7ff bbc2 	b.w	800f062 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f8de:	bf00      	nop
 800f8e0:	0802e470 	.word	0x0802e470
 800f8e4:	40023800 	.word	0x40023800
 800f8e8:	0ffffcff 	.word	0x0ffffcff

0800f8ec <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f8ec:	b308      	cbz	r0, 800f932 <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800f8ee:	4b12      	ldr	r3, [pc, #72]	; (800f938 <HAL_RNG_Init+0x4c>)
 800f8f0:	6802      	ldr	r2, [r0, #0]
 800f8f2:	429a      	cmp	r2, r3
{
 800f8f4:	b510      	push	{r4, lr}
 800f8f6:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800f8f8:	d003      	beq.n	800f902 <HAL_RNG_Init+0x16>
 800f8fa:	21a3      	movs	r1, #163	; 0xa3
 800f8fc:	480f      	ldr	r0, [pc, #60]	; (800f93c <HAL_RNG_Init+0x50>)
 800f8fe:	f7f5 ffb3 	bl	8005868 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f902:	7963      	ldrb	r3, [r4, #5]
 800f904:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f908:	b173      	cbz	r3, 800f928 <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f90a:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800f90c:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f90e:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800f910:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800f914:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800f916:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800f918:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800f91a:	f043 0304 	orr.w	r3, r3, #4
 800f91e:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800f920:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f924:	60a2      	str	r2, [r4, #8]
}
 800f926:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800f928:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800f92a:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800f92c:	f7f7 feda 	bl	80076e4 <HAL_RNG_MspInit>
 800f930:	e7eb      	b.n	800f90a <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800f932:	2001      	movs	r0, #1
}
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop
 800f938:	50060800 	.word	0x50060800
 800f93c:	0802e4ac 	.word	0x0802e4ac

0800f940 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800f940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f942:	460c      	mov	r4, r1
 800f944:	4615      	mov	r5, r2
 800f946:	b083      	sub	sp, #12
 800f948:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f94a:	4425      	add	r5, r4
 800f94c:	f7f9 fcda 	bl	8009304 <HAL_GetTick>
 800f950:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800f952:	f7f9 fcd7 	bl	8009304 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f956:	4b25      	ldr	r3, [pc, #148]	; (800f9ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800f958:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800f960:	fb05 f303 	mul.w	r3, r5, r3
 800f964:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f966:	6832      	ldr	r2, [r6, #0]
 800f968:	e001      	b.n	800f96e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f96a:	1c63      	adds	r3, r4, #1
 800f96c:	d106      	bne.n	800f97c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f96e:	6893      	ldr	r3, [r2, #8]
 800f970:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800f974:	d1f9      	bne.n	800f96a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800f976:	4618      	mov	r0, r3
}
 800f978:	b003      	add	sp, #12
 800f97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f97c:	f7f9 fcc2 	bl	8009304 <HAL_GetTick>
 800f980:	1bc0      	subs	r0, r0, r7
 800f982:	42a8      	cmp	r0, r5
 800f984:	d208      	bcs.n	800f998 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800f986:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800f988:	2b00      	cmp	r3, #0
      count--;
 800f98a:	9b01      	ldr	r3, [sp, #4]
 800f98c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800f990:	bf08      	it	eq
 800f992:	2500      	moveq	r5, #0
      count--;
 800f994:	9301      	str	r3, [sp, #4]
 800f996:	e7e6      	b.n	800f966 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f998:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f99c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f99e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f9a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f9a6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9a8:	d014      	beq.n	800f9d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f9aa:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800f9ac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f9b0:	d007      	beq.n	800f9c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800f9b2:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800f9b4:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800f9b6:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800f9b8:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800f9bc:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800f9c0:	e7da      	b.n	800f978 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9c8:	601a      	str	r2, [r3, #0]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f9d0:	601a      	str	r2, [r3, #0]
 800f9d2:	e7ee      	b.n	800f9b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9d4:	68b2      	ldr	r2, [r6, #8]
 800f9d6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f9da:	d002      	beq.n	800f9e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800f9dc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f9e0:	d1e3      	bne.n	800f9aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f9e8:	601a      	str	r2, [r3, #0]
 800f9ea:	e7de      	b.n	800f9aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800f9ec:	200002b8 	.word	0x200002b8

0800f9f0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800f9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9f4:	4615      	mov	r5, r2
 800f9f6:	4698      	mov	r8, r3
 800f9f8:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f9fa:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f9fc:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800f9fe:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800fa00:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800fa04:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fa06:	f7f9 fc7d 	bl	8009304 <HAL_GetTick>
 800fa0a:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800fa0e:	f7f9 fc79 	bl	8009304 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fa12:	4b2e      	ldr	r3, [pc, #184]	; (800facc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fa14:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800fa18:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fa1a:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800fa1c:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fa1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fa22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800fa26:	0d1b      	lsrs	r3, r3, #20
 800fa28:	fb07 f303 	mul.w	r3, r7, r3
 800fa2c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800fa2e:	e00b      	b.n	800fa48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fa30:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800fa34:	d106      	bne.n	800fa44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fa36:	f899 300c 	ldrb.w	r3, [r9, #12]
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fa40:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fa44:	1c6b      	adds	r3, r5, #1
 800fa46:	d106      	bne.n	800fa56 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800fa48:	6893      	ldr	r3, [r2, #8]
 800fa4a:	4023      	ands	r3, r4
 800fa4c:	d1f0      	bne.n	800fa30 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800fa4e:	4618      	mov	r0, r3
}
 800fa50:	b003      	add	sp, #12
 800fa52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fa56:	f7f9 fc55 	bl	8009304 <HAL_GetTick>
 800fa5a:	eba0 0008 	sub.w	r0, r0, r8
 800fa5e:	42b8      	cmp	r0, r7
 800fa60:	d209      	bcs.n	800fa76 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800fa62:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800fa64:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800fa66:	2b00      	cmp	r3, #0
      count--;
 800fa68:	9b01      	ldr	r3, [sp, #4]
 800fa6a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800fa6e:	bf08      	it	eq
 800fa70:	2700      	moveq	r7, #0
      count--;
 800fa72:	9301      	str	r3, [sp, #4]
 800fa74:	e7e8      	b.n	800fa48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa76:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa7a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa7c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fa84:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa86:	d014      	beq.n	800fab2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa88:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800fa8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800fa8e:	d007      	beq.n	800faa0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800fa90:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800fa92:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800fa94:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800fa96:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800fa9a:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800fa9e:	e7d7      	b.n	800fa50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800faae:	601a      	str	r2, [r3, #0]
 800fab0:	e7ee      	b.n	800fa90 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fab2:	68b2      	ldr	r2, [r6, #8]
 800fab4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800fab8:	d002      	beq.n	800fac0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800faba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fabe:	d1e3      	bne.n	800fa88 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fac6:	601a      	str	r2, [r3, #0]
 800fac8:	e7de      	b.n	800fa88 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800faca:	bf00      	nop
 800facc:	200002b8 	.word	0x200002b8

0800fad0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fad0:	b570      	push	{r4, r5, r6, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	4613      	mov	r3, r2
 800fad6:	460e      	mov	r6, r1
 800fad8:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fada:	9201      	str	r2, [sp, #4]
 800fadc:	460a      	mov	r2, r1
 800fade:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800fae2:	f7ff ff85 	bl	800f9f0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800fae6:	9b01      	ldr	r3, [sp, #4]
 800fae8:	bb58      	cbnz	r0, 800fb42 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800faea:	4919      	ldr	r1, [pc, #100]	; (800fb50 <SPI_EndRxTxTransaction+0x80>)
 800faec:	4a19      	ldr	r2, [pc, #100]	; (800fb54 <SPI_EndRxTxTransaction+0x84>)
 800faee:	6808      	ldr	r0, [r1, #0]
 800faf0:	fba2 2000 	umull	r2, r0, r2, r0
 800faf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800faf8:	0d40      	lsrs	r0, r0, #21
 800fafa:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fafe:	686a      	ldr	r2, [r5, #4]
 800fb00:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fb04:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb06:	d107      	bne.n	800fb18 <SPI_EndRxTxTransaction+0x48>
 800fb08:	e012      	b.n	800fb30 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800fb0a:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fb0c:	682a      	ldr	r2, [r5, #0]
      count--;
 800fb0e:	3c01      	subs	r4, #1
 800fb10:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fb12:	6894      	ldr	r4, [r2, #8]
 800fb14:	0622      	lsls	r2, r4, #24
 800fb16:	d502      	bpl.n	800fb1e <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800fb18:	9c03      	ldr	r4, [sp, #12]
 800fb1a:	2c00      	cmp	r4, #0
 800fb1c:	d1f5      	bne.n	800fb0a <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb1e:	4632      	mov	r2, r6
 800fb20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fb24:	4628      	mov	r0, r5
 800fb26:	f7ff ff63 	bl	800f9f0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800fb2a:	b950      	cbnz	r0, 800fb42 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800fb2c:	b004      	add	sp, #16
 800fb2e:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb30:	461a      	mov	r2, r3
 800fb32:	4631      	mov	r1, r6
 800fb34:	4628      	mov	r0, r5
 800fb36:	9301      	str	r3, [sp, #4]
 800fb38:	f7ff ff02 	bl	800f940 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800fb3c:	9b01      	ldr	r3, [sp, #4]
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d0ed      	beq.n	800fb1e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb42:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800fb44:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb46:	f043 0320 	orr.w	r3, r3, #32
 800fb4a:	662b      	str	r3, [r5, #96]	; 0x60
}
 800fb4c:	b004      	add	sp, #16
 800fb4e:	bd70      	pop	{r4, r5, r6, pc}
 800fb50:	200002b8 	.word	0x200002b8
 800fb54:	165e9f81 	.word	0x165e9f81

0800fb58 <HAL_SPI_Init>:
  if (hspi == NULL)
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	f000 8128 	beq.w	800fdae <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fb5e:	6802      	ldr	r2, [r0, #0]
 800fb60:	4ba7      	ldr	r3, [pc, #668]	; (800fe00 <HAL_SPI_Init+0x2a8>)
 800fb62:	49a8      	ldr	r1, [pc, #672]	; (800fe04 <HAL_SPI_Init+0x2ac>)
{
 800fb64:	b570      	push	{r4, r5, r6, lr}
 800fb66:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fb68:	48a7      	ldr	r0, [pc, #668]	; (800fe08 <HAL_SPI_Init+0x2b0>)
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	bf18      	it	ne
 800fb6e:	4282      	cmpne	r2, r0
 800fb70:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800fb74:	bf14      	ite	ne
 800fb76:	2301      	movne	r3, #1
 800fb78:	2300      	moveq	r3, #0
 800fb7a:	428a      	cmp	r2, r1
 800fb7c:	bf0c      	ite	eq
 800fb7e:	2300      	moveq	r3, #0
 800fb80:	f003 0301 	andne.w	r3, r3, #1
 800fb84:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800fb88:	4282      	cmp	r2, r0
 800fb8a:	bf0c      	ite	eq
 800fb8c:	2300      	moveq	r3, #0
 800fb8e:	f003 0301 	andne.w	r3, r3, #1
 800fb92:	428a      	cmp	r2, r1
 800fb94:	bf0c      	ite	eq
 800fb96:	2300      	moveq	r3, #0
 800fb98:	f003 0301 	andne.w	r3, r3, #1
 800fb9c:	b11b      	cbz	r3, 800fba6 <HAL_SPI_Init+0x4e>
 800fb9e:	4b9b      	ldr	r3, [pc, #620]	; (800fe0c <HAL_SPI_Init+0x2b4>)
 800fba0:	429a      	cmp	r2, r3
 800fba2:	f040 80fe 	bne.w	800fda2 <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800fba6:	6863      	ldr	r3, [r4, #4]
 800fba8:	b11b      	cbz	r3, 800fbb2 <HAL_SPI_Init+0x5a>
 800fbaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fbae:	f040 80cd 	bne.w	800fd4c <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800fbb2:	68a3      	ldr	r3, [r4, #8]
 800fbb4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800fbb8:	d003      	beq.n	800fbc2 <HAL_SPI_Init+0x6a>
 800fbba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbbe:	f040 80db 	bne.w	800fd78 <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800fbc2:	68e2      	ldr	r2, [r4, #12]
 800fbc4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800fbc8:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800fbcc:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800fbd0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800fbd4:	bf18      	it	ne
 800fbd6:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800fbda:	bf14      	ite	ne
 800fbdc:	2301      	movne	r3, #1
 800fbde:	2300      	moveq	r3, #0
 800fbe0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800fbe4:	bf0c      	ite	eq
 800fbe6:	2300      	moveq	r3, #0
 800fbe8:	f003 0301 	andne.w	r3, r3, #1
 800fbec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fbf0:	bf0c      	ite	eq
 800fbf2:	2300      	moveq	r3, #0
 800fbf4:	f003 0301 	andne.w	r3, r3, #1
 800fbf8:	b12b      	cbz	r3, 800fc06 <HAL_SPI_Init+0xae>
 800fbfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fbfe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800fc02:	f040 80f7 	bne.w	800fdf4 <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800fc06:	69a3      	ldr	r3, [r4, #24]
 800fc08:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800fc0c:	d003      	beq.n	800fc16 <HAL_SPI_Init+0xbe>
 800fc0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fc12:	f040 80a1 	bne.w	800fd58 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800fc16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc18:	f033 0308 	bics.w	r3, r3, #8
 800fc1c:	f040 80a6 	bne.w	800fd6c <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fc20:	69e3      	ldr	r3, [r4, #28]
 800fc22:	f023 0318 	bic.w	r3, r3, #24
 800fc26:	2b20      	cmp	r3, #32
 800fc28:	d002      	beq.n	800fc30 <HAL_SPI_Init+0xd8>
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f040 80d6 	bne.w	800fddc <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800fc30:	6a23      	ldr	r3, [r4, #32]
 800fc32:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800fc36:	f040 80a8 	bne.w	800fd8a <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800fc3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc3c:	f033 0210 	bics.w	r2, r3, #16
 800fc40:	d17b      	bne.n	800fd3a <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d16e      	bne.n	800fd24 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800fc46:	6923      	ldr	r3, [r4, #16]
 800fc48:	f033 0302 	bics.w	r3, r3, #2
 800fc4c:	f040 80c0 	bne.w	800fdd0 <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800fc50:	6963      	ldr	r3, [r4, #20]
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d904      	bls.n	800fc60 <HAL_SPI_Init+0x108>
 800fc56:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800fc5a:	486d      	ldr	r0, [pc, #436]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fc5c:	f7f5 fe04 	bl	8005868 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fc60:	6863      	ldr	r3, [r4, #4]
 800fc62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc66:	f000 80a4 	beq.w	800fdb2 <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fc6e:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fc70:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fc74:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fc76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f000 808b 	beq.w	800fd96 <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800fc80:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800fc82:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fc84:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800fc86:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800fc8a:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fc8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800fc90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fc94:	bf8c      	ite	hi
 800fc96:	f04f 0c00 	movhi.w	ip, #0
 800fc9a:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800fc9e:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fca0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fca4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800fca8:	d16c      	bne.n	800fd84 <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fcaa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fcac:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800fcb0:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fcb2:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fcb6:	6923      	ldr	r3, [r4, #16]
 800fcb8:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800fcbc:	68a1      	ldr	r1, [r4, #8]
 800fcbe:	f003 0302 	and.w	r3, r3, #2
 800fcc2:	69a6      	ldr	r6, [r4, #24]
 800fcc4:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800fcc8:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fcca:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fccc:	431a      	orrs	r2, r3
 800fcce:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fcd0:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fcd4:	f003 0301 	and.w	r3, r3, #1
 800fcd8:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fcda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcdc:	f003 0310 	and.w	r3, r3, #16
 800fce0:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fce2:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fce4:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fce8:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800fcec:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fcf0:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fcf2:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fcf6:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fcfa:	430a      	orrs	r2, r1
 800fcfc:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fcfe:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd00:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd04:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd08:	430a      	orrs	r2, r1
 800fd0a:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fd0c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd0e:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800fd10:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd12:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fd14:	69eb      	ldr	r3, [r5, #28]
 800fd16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd1a:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fd1c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800fd1e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800fd22:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fd24:	69e3      	ldr	r3, [r4, #28]
 800fd26:	f023 0318 	bic.w	r3, r3, #24
 800fd2a:	2b20      	cmp	r3, #32
 800fd2c:	d001      	beq.n	800fd32 <HAL_SPI_Init+0x1da>
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d15a      	bne.n	800fde8 <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fd32:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fd34:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800fd38:	e799      	b.n	800fc6e <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800fd3a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800fd3e:	4834      	ldr	r0, [pc, #208]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fd40:	f7f5 fd92 	bl	8005868 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fd44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d1ec      	bne.n	800fd24 <HAL_SPI_Init+0x1cc>
 800fd4a:	e77c      	b.n	800fc46 <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800fd4c:	f240 1147 	movw	r1, #327	; 0x147
 800fd50:	482f      	ldr	r0, [pc, #188]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fd52:	f7f5 fd89 	bl	8005868 <assert_failed>
 800fd56:	e72c      	b.n	800fbb2 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800fd58:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800fd5c:	482c      	ldr	r0, [pc, #176]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fd5e:	f7f5 fd83 	bl	8005868 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800fd62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd64:	f033 0308 	bics.w	r3, r3, #8
 800fd68:	f43f af5a 	beq.w	800fc20 <HAL_SPI_Init+0xc8>
 800fd6c:	f240 114b 	movw	r1, #331	; 0x14b
 800fd70:	4827      	ldr	r0, [pc, #156]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fd72:	f7f5 fd79 	bl	8005868 <assert_failed>
 800fd76:	e753      	b.n	800fc20 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800fd78:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800fd7c:	4824      	ldr	r0, [pc, #144]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fd7e:	f7f5 fd73 	bl	8005868 <assert_failed>
 800fd82:	e71e      	b.n	800fbc2 <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fd84:	2000      	movs	r0, #0
 800fd86:	62a0      	str	r0, [r4, #40]	; 0x28
 800fd88:	e792      	b.n	800fcb0 <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800fd8a:	f240 114d 	movw	r1, #333	; 0x14d
 800fd8e:	4820      	ldr	r0, [pc, #128]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fd90:	f7f5 fd6a 	bl	8005868 <assert_failed>
 800fd94:	e751      	b.n	800fc3a <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800fd96:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800fd98:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800fd9c:	f7f7 fcb8 	bl	8007710 <HAL_SPI_MspInit>
 800fda0:	e76e      	b.n	800fc80 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fda2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800fda6:	481a      	ldr	r0, [pc, #104]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fda8:	f7f5 fd5e 	bl	8005868 <assert_failed>
 800fdac:	e6fb      	b.n	800fba6 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800fdae:	2001      	movs	r0, #1
}
 800fdb0:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fdb2:	69e3      	ldr	r3, [r4, #28]
 800fdb4:	f023 0318 	bic.w	r3, r3, #24
 800fdb8:	2b20      	cmp	r3, #32
 800fdba:	f43f af58 	beq.w	800fc6e <HAL_SPI_Init+0x116>
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f43f af55 	beq.w	800fc6e <HAL_SPI_Init+0x116>
 800fdc4:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800fdc8:	4811      	ldr	r0, [pc, #68]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fdca:	f7f5 fd4d 	bl	8005868 <assert_failed>
 800fdce:	e74e      	b.n	800fc6e <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800fdd0:	f240 1151 	movw	r1, #337	; 0x151
 800fdd4:	480e      	ldr	r0, [pc, #56]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fdd6:	f7f5 fd47 	bl	8005868 <assert_failed>
 800fdda:	e739      	b.n	800fc50 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fddc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800fde0:	480b      	ldr	r0, [pc, #44]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fde2:	f7f5 fd41 	bl	8005868 <assert_failed>
 800fde6:	e723      	b.n	800fc30 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fde8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800fdec:	4808      	ldr	r0, [pc, #32]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fdee:	f7f5 fd3b 	bl	8005868 <assert_failed>
 800fdf2:	e79e      	b.n	800fd32 <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800fdf4:	f240 1149 	movw	r1, #329	; 0x149
 800fdf8:	4805      	ldr	r0, [pc, #20]	; (800fe10 <HAL_SPI_Init+0x2b8>)
 800fdfa:	f7f5 fd35 	bl	8005868 <assert_failed>
 800fdfe:	e702      	b.n	800fc06 <HAL_SPI_Init+0xae>
 800fe00:	40013000 	.word	0x40013000
 800fe04:	40003c00 	.word	0x40003c00
 800fe08:	40003800 	.word	0x40003800
 800fe0c:	40015400 	.word	0x40015400
 800fe10:	0802e4e4 	.word	0x0802e4e4

0800fe14 <HAL_SPI_Transmit>:
{
 800fe14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe18:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fe1a:	6883      	ldr	r3, [r0, #8]
{
 800fe1c:	b082      	sub	sp, #8
 800fe1e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fe20:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800fe24:	460f      	mov	r7, r1
 800fe26:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fe28:	d171      	bne.n	800ff0e <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800fe2a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d076      	beq.n	800ff20 <HAL_SPI_Transmit+0x10c>
 800fe32:	2301      	movs	r3, #1
 800fe34:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800fe38:	f7f9 fa64 	bl	8009304 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800fe3c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800fe40:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	b2d8      	uxtb	r0, r3
 800fe46:	d009      	beq.n	800fe5c <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800fe48:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800fe4a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800fe4c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800fe4e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800fe52:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800fe56:	b002      	add	sp, #8
 800fe58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800fe5c:	2f00      	cmp	r7, #0
 800fe5e:	d0f4      	beq.n	800fe4a <HAL_SPI_Transmit+0x36>
 800fe60:	fab8 f388 	clz	r3, r8
 800fe64:	095b      	lsrs	r3, r3, #5
 800fe66:	f1b8 0f00 	cmp.w	r8, #0
 800fe6a:	d0ee      	beq.n	800fe4a <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fe6c:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fe6e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fe70:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fe74:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fe78:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fe7a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800fe7e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fe82:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800fe84:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800fe88:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe8c:	68a3      	ldr	r3, [r4, #8]
 800fe8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800fe92:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe94:	d07a      	beq.n	800ff8c <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	0652      	lsls	r2, r2, #25
 800fe9a:	d403      	bmi.n	800fea4 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fea2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fea4:	68e2      	ldr	r2, [r4, #12]
 800fea6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800feaa:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800feac:	d93c      	bls.n	800ff28 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800feae:	b112      	cbz	r2, 800feb6 <HAL_SPI_Transmit+0xa2>
 800feb0:	f1b8 0f01 	cmp.w	r8, #1
 800feb4:	d107      	bne.n	800fec6 <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800feb6:	f837 2b02 	ldrh.w	r2, [r7], #2
 800feba:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800febc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800febe:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800fec0:	3a01      	subs	r2, #1
 800fec2:	b292      	uxth	r2, r2
 800fec4:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800fec6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800fec8:	b292      	uxth	r2, r2
 800feca:	b992      	cbnz	r2, 800fef2 <HAL_SPI_Transmit+0xde>
 800fecc:	e072      	b.n	800ffb4 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fece:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fed0:	f832 1b02 	ldrh.w	r1, [r2], #2
 800fed4:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800fed6:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800feda:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800fedc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fee0:	fa1f fc8c 	uxth.w	ip, ip
 800fee4:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800fee8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800feea:	b29b      	uxth	r3, r3
 800feec:	2b00      	cmp	r3, #0
 800feee:	d061      	beq.n	800ffb4 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fef0:	6823      	ldr	r3, [r4, #0]
 800fef2:	689a      	ldr	r2, [r3, #8]
 800fef4:	0797      	lsls	r7, r2, #30
 800fef6:	d4ea      	bmi.n	800fece <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fef8:	f7f9 fa04 	bl	8009304 <HAL_GetTick>
 800fefc:	1b80      	subs	r0, r0, r6
 800fefe:	42a8      	cmp	r0, r5
 800ff00:	d301      	bcc.n	800ff06 <HAL_SPI_Transmit+0xf2>
 800ff02:	1c68      	adds	r0, r5, #1
 800ff04:	d101      	bne.n	800ff0a <HAL_SPI_Transmit+0xf6>
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	d1ee      	bne.n	800fee8 <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800ff0a:	2003      	movs	r0, #3
 800ff0c:	e79d      	b.n	800fe4a <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ff0e:	f240 313d 	movw	r1, #829	; 0x33d
 800ff12:	4838      	ldr	r0, [pc, #224]	; (800fff4 <HAL_SPI_Transmit+0x1e0>)
 800ff14:	f7f5 fca8 	bl	8005868 <assert_failed>
  __HAL_LOCK(hspi);
 800ff18:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d188      	bne.n	800fe32 <HAL_SPI_Transmit+0x1e>
 800ff20:	2002      	movs	r0, #2
}
 800ff22:	b002      	add	sp, #8
 800ff24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff28:	b112      	cbz	r2, 800ff30 <HAL_SPI_Transmit+0x11c>
 800ff2a:	f1b8 0f01 	cmp.w	r8, #1
 800ff2e:	d10b      	bne.n	800ff48 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800ff30:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ff32:	b292      	uxth	r2, r2
 800ff34:	2a01      	cmp	r2, #1
 800ff36:	d953      	bls.n	800ffe0 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ff38:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ff3c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800ff3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff40:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ff42:	3b02      	subs	r3, #2
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ff48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	b983      	cbnz	r3, 800ff70 <HAL_SPI_Transmit+0x15c>
 800ff4e:	e031      	b.n	800ffb4 <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800ff50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d922      	bls.n	800ff9e <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ff58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ff5a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800ff5e:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800ff60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff62:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ff64:	3b02      	subs	r3, #2
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ff6a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800ff6c:	b289      	uxth	r1, r1
 800ff6e:	b309      	cbz	r1, 800ffb4 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ff70:	6822      	ldr	r2, [r4, #0]
 800ff72:	6893      	ldr	r3, [r2, #8]
 800ff74:	0799      	lsls	r1, r3, #30
 800ff76:	d4eb      	bmi.n	800ff50 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff78:	f7f9 f9c4 	bl	8009304 <HAL_GetTick>
 800ff7c:	1b80      	subs	r0, r0, r6
 800ff7e:	42a8      	cmp	r0, r5
 800ff80:	d301      	bcc.n	800ff86 <HAL_SPI_Transmit+0x172>
 800ff82:	1c6b      	adds	r3, r5, #1
 800ff84:	d1c1      	bne.n	800ff0a <HAL_SPI_Transmit+0xf6>
 800ff86:	2d00      	cmp	r5, #0
 800ff88:	d1ef      	bne.n	800ff6a <HAL_SPI_Transmit+0x156>
 800ff8a:	e7be      	b.n	800ff0a <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ff9a:	601a      	str	r2, [r3, #0]
 800ff9c:	e77b      	b.n	800fe96 <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ff9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800ffa4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800ffa6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ffa8:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800ffaa:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800ffac:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800ffae:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ffb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ffb2:	e7da      	b.n	800ff6a <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ffb4:	4632      	mov	r2, r6
 800ffb6:	4629      	mov	r1, r5
 800ffb8:	4620      	mov	r0, r4
 800ffba:	f7ff fd89 	bl	800fad0 <SPI_EndRxTxTransaction>
 800ffbe:	b108      	cbz	r0, 800ffc4 <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ffc0:	2320      	movs	r3, #32
 800ffc2:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ffc4:	68a3      	ldr	r3, [r4, #8]
 800ffc6:	b933      	cbnz	r3, 800ffd6 <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ffc8:	6822      	ldr	r2, [r4, #0]
 800ffca:	9301      	str	r3, [sp, #4]
 800ffcc:	68d3      	ldr	r3, [r2, #12]
 800ffce:	9301      	str	r3, [sp, #4]
 800ffd0:	6893      	ldr	r3, [r2, #8]
 800ffd2:	9301      	str	r3, [sp, #4]
 800ffd4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ffd6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800ffd8:	3800      	subs	r0, #0
 800ffda:	bf18      	it	ne
 800ffdc:	2001      	movne	r0, #1
error:
 800ffde:	e734      	b.n	800fe4a <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ffe0:	783a      	ldrb	r2, [r7, #0]
 800ffe2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800ffe4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800ffe6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ffe8:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800ffea:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800ffec:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800ffee:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800fff0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800fff2:	e7a9      	b.n	800ff48 <HAL_SPI_Transmit+0x134>
 800fff4:	0802e4e4 	.word	0x0802e4e4

0800fff8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fff8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fffa:	4a12      	ldr	r2, [pc, #72]	; (8010044 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8010000:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010002:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8010004:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8010006:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8010008:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801000a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801000e:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8010010:	680d      	ldr	r5, [r1, #0]
 8010012:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010014:	688d      	ldr	r5, [r1, #8]
 8010016:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801001a:	4d0b      	ldr	r5, [pc, #44]	; (8010048 <TIM_OC5_SetConfig+0x50>)
 801001c:	42a8      	cmp	r0, r5
 801001e:	d00a      	beq.n	8010036 <TIM_OC5_SetConfig+0x3e>
 8010020:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010024:	42a8      	cmp	r0, r5
 8010026:	d006      	beq.n	8010036 <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010028:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 801002a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 801002c:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 801002e:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010030:	6203      	str	r3, [r0, #32]
}
 8010032:	bc30      	pop	{r4, r5}
 8010034:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010036:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801003a:	694d      	ldr	r5, [r1, #20]
 801003c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8010040:	e7f2      	b.n	8010028 <TIM_OC5_SetConfig+0x30>
 8010042:	bf00      	nop
 8010044:	fffeff8f 	.word	0xfffeff8f
 8010048:	40010000 	.word	0x40010000

0801004c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801004c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801004e:	4a12      	ldr	r2, [pc, #72]	; (8010098 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010050:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8010054:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010056:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8010058:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801005a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 801005c:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801005e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010062:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010064:	680d      	ldr	r5, [r1, #0]
 8010066:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801006a:	688d      	ldr	r5, [r1, #8]
 801006c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010070:	4d0a      	ldr	r5, [pc, #40]	; (801009c <TIM_OC6_SetConfig+0x50>)
 8010072:	42a8      	cmp	r0, r5
 8010074:	d00a      	beq.n	801008c <TIM_OC6_SetConfig+0x40>
 8010076:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801007a:	42a8      	cmp	r0, r5
 801007c:	d006      	beq.n	801008c <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801007e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010080:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8010082:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8010084:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010086:	6203      	str	r3, [r0, #32]
}
 8010088:	bc30      	pop	{r4, r5}
 801008a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 801008c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010090:	694d      	ldr	r5, [r1, #20]
 8010092:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8010096:	e7f2      	b.n	801007e <TIM_OC6_SetConfig+0x32>
 8010098:	feff8fff 	.word	0xfeff8fff
 801009c:	40010000 	.word	0x40010000

080100a0 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80100a0:	6a03      	ldr	r3, [r0, #32]
 80100a2:	f023 0301 	bic.w	r3, r3, #1
{
 80100a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80100aa:	6203      	str	r3, [r0, #32]
{
 80100ac:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 80100ae:	6a05      	ldr	r5, [r0, #32]
{
 80100b0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 80100b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80100b6:	4b27      	ldr	r3, [pc, #156]	; (8010154 <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 80100b8:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 80100bc:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 80100be:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80100c0:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 80100c2:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 80100c4:	688b      	ldr	r3, [r1, #8]
 80100c6:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80100c8:	4b23      	ldr	r3, [pc, #140]	; (8010158 <TIM_OC1_SetConfig+0xb8>)
 80100ca:	4298      	cmp	r0, r3
 80100cc:	d00b      	beq.n	80100e6 <TIM_OC1_SetConfig+0x46>
 80100ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80100d2:	4298      	cmp	r0, r3
 80100d4:	d007      	beq.n	80100e6 <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 80100d6:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80100d8:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 80100dc:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80100de:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80100e0:	6225      	str	r5, [r4, #32]
}
 80100e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80100e6:	68f3      	ldr	r3, [r6, #12]
 80100e8:	f033 0208 	bics.w	r2, r3, #8
 80100ec:	d120      	bne.n	8010130 <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 80100ee:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 80100f2:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80100f4:	69b3      	ldr	r3, [r6, #24]
 80100f6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 80100fa:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80100fe:	d11e      	bne.n	801013e <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010100:	6973      	ldr	r3, [r6, #20]
 8010102:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010106:	d106      	bne.n	8010116 <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010108:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 801010c:	69b1      	ldr	r1, [r6, #24]
 801010e:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 8010110:	ea42 0803 	orr.w	r8, r2, r3
 8010114:	e7df      	b.n	80100d6 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010116:	f641 316d 	movw	r1, #7021	; 0x1b6d
 801011a:	4810      	ldr	r0, [pc, #64]	; (801015c <TIM_OC1_SetConfig+0xbc>)
 801011c:	f7f5 fba4 	bl	8005868 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010120:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 8010124:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 8010126:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 8010128:	430a      	orrs	r2, r1
 801012a:	ea42 0803 	orr.w	r8, r2, r3
 801012e:	e7d2      	b.n	80100d6 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010130:	f641 315f 	movw	r1, #7007	; 0x1b5f
 8010134:	4809      	ldr	r0, [pc, #36]	; (801015c <TIM_OC1_SetConfig+0xbc>)
 8010136:	f7f5 fb97 	bl	8005868 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 801013a:	68f3      	ldr	r3, [r6, #12]
 801013c:	e7d7      	b.n	80100ee <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 801013e:	f641 316c 	movw	r1, #7020	; 0x1b6c
 8010142:	4806      	ldr	r0, [pc, #24]	; (801015c <TIM_OC1_SetConfig+0xbc>)
 8010144:	f7f5 fb90 	bl	8005868 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010148:	6973      	ldr	r3, [r6, #20]
 801014a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801014e:	d0db      	beq.n	8010108 <TIM_OC1_SetConfig+0x68>
 8010150:	e7e1      	b.n	8010116 <TIM_OC1_SetConfig+0x76>
 8010152:	bf00      	nop
 8010154:	fffeff8c 	.word	0xfffeff8c
 8010158:	40010000 	.word	0x40010000
 801015c:	0802e51c 	.word	0x0802e51c

08010160 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010160:	6a03      	ldr	r3, [r0, #32]
 8010162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8010166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801016a:	6203      	str	r3, [r0, #32]
{
 801016c:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 801016e:	6a05      	ldr	r5, [r0, #32]
{
 8010170:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 8010172:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010176:	4b29      	ldr	r3, [pc, #164]	; (801021c <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 8010178:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 801017c:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 801017e:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010180:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 8010182:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010184:	688b      	ldr	r3, [r1, #8]
 8010186:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801018a:	4b25      	ldr	r3, [pc, #148]	; (8010220 <TIM_OC3_SetConfig+0xc0>)
 801018c:	4298      	cmp	r0, r3
 801018e:	d00b      	beq.n	80101a8 <TIM_OC3_SetConfig+0x48>
 8010190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010194:	4298      	cmp	r0, r3
 8010196:	d007      	beq.n	80101a8 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 8010198:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 801019a:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 801019e:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80101a0:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80101a2:	6225      	str	r5, [r4, #32]
}
 80101a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80101a8:	68f3      	ldr	r3, [r6, #12]
 80101aa:	f033 0208 	bics.w	r2, r3, #8
 80101ae:	d123      	bne.n	80101f8 <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 80101b0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80101b4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80101b8:	69b3      	ldr	r3, [r6, #24]
 80101ba:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 80101be:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80101c2:	d120      	bne.n	8010206 <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80101c4:	6973      	ldr	r3, [r6, #20]
 80101c6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80101ca:	d107      	bne.n	80101dc <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80101cc:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80101d0:	69b1      	ldr	r1, [r6, #24]
 80101d2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80101d6:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 80101da:	e7dd      	b.n	8010198 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80101dc:	f641 4103 	movw	r1, #7171	; 0x1c03
 80101e0:	4810      	ldr	r0, [pc, #64]	; (8010224 <TIM_OC3_SetConfig+0xc4>)
 80101e2:	f7f5 fb41 	bl	8005868 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80101e6:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80101ea:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80101ec:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80101ee:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80101f2:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 80101f6:	e7cf      	b.n	8010198 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80101f8:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 80101fc:	4809      	ldr	r0, [pc, #36]	; (8010224 <TIM_OC3_SetConfig+0xc4>)
 80101fe:	f7f5 fb33 	bl	8005868 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010202:	68f3      	ldr	r3, [r6, #12]
 8010204:	e7d4      	b.n	80101b0 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010206:	f641 4102 	movw	r1, #7170	; 0x1c02
 801020a:	4806      	ldr	r0, [pc, #24]	; (8010224 <TIM_OC3_SetConfig+0xc4>)
 801020c:	f7f5 fb2c 	bl	8005868 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010210:	6973      	ldr	r3, [r6, #20]
 8010212:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010216:	d0d9      	beq.n	80101cc <TIM_OC3_SetConfig+0x6c>
 8010218:	e7e0      	b.n	80101dc <TIM_OC3_SetConfig+0x7c>
 801021a:	bf00      	nop
 801021c:	fffeff8c 	.word	0xfffeff8c
 8010220:	40010000 	.word	0x40010000
 8010224:	0802e51c 	.word	0x0802e51c

08010228 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010228:	6a03      	ldr	r3, [r0, #32]
 801022a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 801022e:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010230:	6203      	str	r3, [r0, #32]
{
 8010232:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 8010234:	6a06      	ldr	r6, [r0, #32]
{
 8010236:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 8010238:	6842      	ldr	r2, [r0, #4]
{
 801023a:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 801023c:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 801023e:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010242:	4b16      	ldr	r3, [pc, #88]	; (801029c <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010244:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010246:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010248:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801024c:	68ab      	ldr	r3, [r5, #8]
 801024e:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010252:	4b13      	ldr	r3, [pc, #76]	; (80102a0 <TIM_OC4_SetConfig+0x78>)
 8010254:	4298      	cmp	r0, r3
 8010256:	d00a      	beq.n	801026e <TIM_OC4_SetConfig+0x46>
 8010258:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801025c:	4298      	cmp	r0, r3
 801025e:	d006      	beq.n	801026e <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 8010260:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8010262:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8010264:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8010266:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8010268:	6226      	str	r6, [r4, #32]
}
 801026a:	b003      	add	sp, #12
 801026c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 801026e:	696b      	ldr	r3, [r5, #20]
 8010270:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 8010274:	d104      	bne.n	8010280 <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801027a:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 801027e:	e7ef      	b.n	8010260 <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010280:	f641 4141 	movw	r1, #7233	; 0x1c41
 8010284:	4807      	ldr	r0, [pc, #28]	; (80102a4 <TIM_OC4_SetConfig+0x7c>)
 8010286:	9201      	str	r2, [sp, #4]
 8010288:	f7f5 faee 	bl	8005868 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801028c:	9a01      	ldr	r2, [sp, #4]
 801028e:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010290:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010294:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8010298:	e7e2      	b.n	8010260 <TIM_OC4_SetConfig+0x38>
 801029a:	bf00      	nop
 801029c:	feff8cff 	.word	0xfeff8cff
 80102a0:	40010000 	.word	0x40010000
 80102a4:	0802e51c 	.word	0x0802e51c

080102a8 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80102a8:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80102aa:	684a      	ldr	r2, [r1, #4]
{
 80102ac:	b570      	push	{r4, r5, r6, lr}
 80102ae:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 80102b0:	6899      	ldr	r1, [r3, #8]
{
 80102b2:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80102b4:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 80102b6:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 80102ba:	4980      	ldr	r1, [pc, #512]	; (80104bc <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80102bc:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80102be:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 80102c2:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80102c6:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 80102ca:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 80102cc:	f000 8104 	beq.w	80104d8 <TIM_SlaveTimer_SetConfig+0x230>
 80102d0:	d953      	bls.n	801037a <TIM_SlaveTimer_SetConfig+0xd2>
 80102d2:	2a60      	cmp	r2, #96	; 0x60
 80102d4:	f000 816b 	beq.w	80105ae <TIM_SlaveTimer_SetConfig+0x306>
 80102d8:	2a70      	cmp	r2, #112	; 0x70
 80102da:	d151      	bne.n	8010380 <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80102dc:	4a78      	ldr	r2, [pc, #480]	; (80104c0 <TIM_SlaveTimer_SetConfig+0x218>)
 80102de:	4979      	ldr	r1, [pc, #484]	; (80104c4 <TIM_SlaveTimer_SetConfig+0x21c>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	bf18      	it	ne
 80102e4:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80102e8:	bf14      	ite	ne
 80102ea:	2201      	movne	r2, #1
 80102ec:	2200      	moveq	r2, #0
 80102ee:	428b      	cmp	r3, r1
 80102f0:	bf0c      	ite	eq
 80102f2:	2200      	moveq	r2, #0
 80102f4:	f002 0201 	andne.w	r2, r2, #1
 80102f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80102fc:	428b      	cmp	r3, r1
 80102fe:	bf0c      	ite	eq
 8010300:	2200      	moveq	r2, #0
 8010302:	f002 0201 	andne.w	r2, r2, #1
 8010306:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801030a:	428b      	cmp	r3, r1
 801030c:	bf0c      	ite	eq
 801030e:	2200      	moveq	r2, #0
 8010310:	f002 0201 	andne.w	r2, r2, #1
 8010314:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010318:	428b      	cmp	r3, r1
 801031a:	bf0c      	ite	eq
 801031c:	2200      	moveq	r2, #0
 801031e:	f002 0201 	andne.w	r2, r2, #1
 8010322:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010326:	428b      	cmp	r3, r1
 8010328:	bf0c      	ite	eq
 801032a:	2200      	moveq	r2, #0
 801032c:	f002 0201 	andne.w	r2, r2, #1
 8010330:	b11a      	cbz	r2, 801033a <TIM_SlaveTimer_SetConfig+0x92>
 8010332:	4a65      	ldr	r2, [pc, #404]	; (80104c8 <TIM_SlaveTimer_SetConfig+0x220>)
 8010334:	4293      	cmp	r3, r2
 8010336:	f040 81bb 	bne.w	80106b0 <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 801033a:	68e3      	ldr	r3, [r4, #12]
 801033c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010340:	f040 819e 	bne.w	8010680 <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8010344:	68a3      	ldr	r3, [r4, #8]
 8010346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801034a:	bf18      	it	ne
 801034c:	2b0a      	cmpne	r3, #10
 801034e:	d003      	beq.n	8010358 <TIM_SlaveTimer_SetConfig+0xb0>
 8010350:	f033 0302 	bics.w	r3, r3, #2
 8010354:	f040 81a6 	bne.w	80106a4 <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8010358:	6921      	ldr	r1, [r4, #16]
 801035a:	290f      	cmp	r1, #15
 801035c:	f200 8175 	bhi.w	801064a <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8010360:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010362:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 8010366:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010368:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 801036a:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801036c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8010370:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010372:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010376:	60ab      	str	r3, [r5, #8]
}
 8010378:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 801037a:	2a40      	cmp	r2, #64	; 0x40
 801037c:	d03a      	beq.n	80103f4 <TIM_SlaveTimer_SetConfig+0x14c>
 801037e:	d901      	bls.n	8010384 <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 8010380:	2001      	movs	r0, #1
}
 8010382:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8010384:	2a20      	cmp	r2, #32
 8010386:	d002      	beq.n	801038e <TIM_SlaveTimer_SetConfig+0xe6>
 8010388:	d930      	bls.n	80103ec <TIM_SlaveTimer_SetConfig+0x144>
 801038a:	2a30      	cmp	r2, #48	; 0x30
 801038c:	d1f8      	bne.n	8010380 <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801038e:	4a4c      	ldr	r2, [pc, #304]	; (80104c0 <TIM_SlaveTimer_SetConfig+0x218>)
 8010390:	484c      	ldr	r0, [pc, #304]	; (80104c4 <TIM_SlaveTimer_SetConfig+0x21c>)
 8010392:	4293      	cmp	r3, r2
 8010394:	bf18      	it	ne
 8010396:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801039a:	494c      	ldr	r1, [pc, #304]	; (80104cc <TIM_SlaveTimer_SetConfig+0x224>)
 801039c:	4c4c      	ldr	r4, [pc, #304]	; (80104d0 <TIM_SlaveTimer_SetConfig+0x228>)
 801039e:	bf14      	ite	ne
 80103a0:	2201      	movne	r2, #1
 80103a2:	2200      	moveq	r2, #0
 80103a4:	4283      	cmp	r3, r0
 80103a6:	bf0c      	ite	eq
 80103a8:	2200      	moveq	r2, #0
 80103aa:	f002 0201 	andne.w	r2, r2, #1
 80103ae:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80103b2:	428b      	cmp	r3, r1
 80103b4:	bf0c      	ite	eq
 80103b6:	2200      	moveq	r2, #0
 80103b8:	f002 0201 	andne.w	r2, r2, #1
 80103bc:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 80103c0:	42a3      	cmp	r3, r4
 80103c2:	bf0c      	ite	eq
 80103c4:	2200      	moveq	r2, #0
 80103c6:	f002 0201 	andne.w	r2, r2, #1
 80103ca:	4283      	cmp	r3, r0
 80103cc:	bf0c      	ite	eq
 80103ce:	2200      	moveq	r2, #0
 80103d0:	f002 0201 	andne.w	r2, r2, #1
 80103d4:	428b      	cmp	r3, r1
 80103d6:	bf0c      	ite	eq
 80103d8:	2200      	moveq	r2, #0
 80103da:	f002 0201 	andne.w	r2, r2, #1
 80103de:	b11a      	cbz	r2, 80103e8 <TIM_SlaveTimer_SetConfig+0x140>
 80103e0:	4a39      	ldr	r2, [pc, #228]	; (80104c8 <TIM_SlaveTimer_SetConfig+0x220>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	f040 816a 	bne.w	80106bc <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 80103e8:	2000      	movs	r0, #0
}
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80103ec:	f032 0210 	bics.w	r2, r2, #16
 80103f0:	d1c6      	bne.n	8010380 <TIM_SlaveTimer_SetConfig+0xd8>
 80103f2:	e7cc      	b.n	801038e <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80103f4:	4a32      	ldr	r2, [pc, #200]	; (80104c0 <TIM_SlaveTimer_SetConfig+0x218>)
 80103f6:	4933      	ldr	r1, [pc, #204]	; (80104c4 <TIM_SlaveTimer_SetConfig+0x21c>)
 80103f8:	4293      	cmp	r3, r2
 80103fa:	bf18      	it	ne
 80103fc:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010400:	bf14      	ite	ne
 8010402:	2201      	movne	r2, #1
 8010404:	2200      	moveq	r2, #0
 8010406:	428b      	cmp	r3, r1
 8010408:	bf0c      	ite	eq
 801040a:	2200      	moveq	r2, #0
 801040c:	f002 0201 	andne.w	r2, r2, #1
 8010410:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010414:	428b      	cmp	r3, r1
 8010416:	bf0c      	ite	eq
 8010418:	2200      	moveq	r2, #0
 801041a:	f002 0201 	andne.w	r2, r2, #1
 801041e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010422:	428b      	cmp	r3, r1
 8010424:	bf0c      	ite	eq
 8010426:	2200      	moveq	r2, #0
 8010428:	f002 0201 	andne.w	r2, r2, #1
 801042c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010430:	428b      	cmp	r3, r1
 8010432:	bf0c      	ite	eq
 8010434:	2200      	moveq	r2, #0
 8010436:	f002 0201 	andne.w	r2, r2, #1
 801043a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801043e:	428b      	cmp	r3, r1
 8010440:	bf0c      	ite	eq
 8010442:	2200      	moveq	r2, #0
 8010444:	f002 0201 	andne.w	r2, r2, #1
 8010448:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801044c:	428b      	cmp	r3, r1
 801044e:	bf0c      	ite	eq
 8010450:	2200      	moveq	r2, #0
 8010452:	f002 0201 	andne.w	r2, r2, #1
 8010456:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801045a:	428b      	cmp	r3, r1
 801045c:	bf0c      	ite	eq
 801045e:	2200      	moveq	r2, #0
 8010460:	f002 0201 	andne.w	r2, r2, #1
 8010464:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8010468:	428b      	cmp	r3, r1
 801046a:	bf0c      	ite	eq
 801046c:	2200      	moveq	r2, #0
 801046e:	f002 0201 	andne.w	r2, r2, #1
 8010472:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010476:	428b      	cmp	r3, r1
 8010478:	bf0c      	ite	eq
 801047a:	2200      	moveq	r2, #0
 801047c:	f002 0201 	andne.w	r2, r2, #1
 8010480:	b11a      	cbz	r2, 801048a <TIM_SlaveTimer_SetConfig+0x1e2>
 8010482:	4a14      	ldr	r2, [pc, #80]	; (80104d4 <TIM_SlaveTimer_SetConfig+0x22c>)
 8010484:	4293      	cmp	r3, r2
 8010486:	f040 8126 	bne.w	80106d6 <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 801048a:	6923      	ldr	r3, [r4, #16]
 801048c:	2b0f      	cmp	r3, #15
 801048e:	f200 80ea 	bhi.w	8010666 <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	2b05      	cmp	r3, #5
 8010496:	f43f af73 	beq.w	8010380 <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 801049a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801049c:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801049e:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 80104a0:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80104a2:	6a19      	ldr	r1, [r3, #32]
 80104a4:	f021 0101 	bic.w	r1, r1, #1
 80104a8:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80104aa:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80104ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80104b0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80104b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80104b6:	621c      	str	r4, [r3, #32]
}
 80104b8:	bd70      	pop	{r4, r5, r6, pc}
 80104ba:	bf00      	nop
 80104bc:	fffefff8 	.word	0xfffefff8
 80104c0:	40010000 	.word	0x40010000
 80104c4:	40000400 	.word	0x40000400
 80104c8:	40001800 	.word	0x40001800
 80104cc:	40000800 	.word	0x40000800
 80104d0:	40000c00 	.word	0x40000c00
 80104d4:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80104d8:	4a85      	ldr	r2, [pc, #532]	; (80106f0 <TIM_SlaveTimer_SetConfig+0x448>)
 80104da:	4986      	ldr	r1, [pc, #536]	; (80106f4 <TIM_SlaveTimer_SetConfig+0x44c>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	bf18      	it	ne
 80104e0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80104e4:	bf14      	ite	ne
 80104e6:	2201      	movne	r2, #1
 80104e8:	2200      	moveq	r2, #0
 80104ea:	428b      	cmp	r3, r1
 80104ec:	bf0c      	ite	eq
 80104ee:	2200      	moveq	r2, #0
 80104f0:	f002 0201 	andne.w	r2, r2, #1
 80104f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80104f8:	428b      	cmp	r3, r1
 80104fa:	bf0c      	ite	eq
 80104fc:	2200      	moveq	r2, #0
 80104fe:	f002 0201 	andne.w	r2, r2, #1
 8010502:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010506:	428b      	cmp	r3, r1
 8010508:	bf0c      	ite	eq
 801050a:	2200      	moveq	r2, #0
 801050c:	f002 0201 	andne.w	r2, r2, #1
 8010510:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010514:	428b      	cmp	r3, r1
 8010516:	bf0c      	ite	eq
 8010518:	2200      	moveq	r2, #0
 801051a:	f002 0201 	andne.w	r2, r2, #1
 801051e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010522:	428b      	cmp	r3, r1
 8010524:	bf0c      	ite	eq
 8010526:	2200      	moveq	r2, #0
 8010528:	f002 0201 	andne.w	r2, r2, #1
 801052c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010530:	428b      	cmp	r3, r1
 8010532:	bf0c      	ite	eq
 8010534:	2200      	moveq	r2, #0
 8010536:	f002 0201 	andne.w	r2, r2, #1
 801053a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801053e:	428b      	cmp	r3, r1
 8010540:	bf0c      	ite	eq
 8010542:	2200      	moveq	r2, #0
 8010544:	f002 0201 	andne.w	r2, r2, #1
 8010548:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 801054c:	428b      	cmp	r3, r1
 801054e:	bf0c      	ite	eq
 8010550:	2200      	moveq	r2, #0
 8010552:	f002 0201 	andne.w	r2, r2, #1
 8010556:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801055a:	428b      	cmp	r3, r1
 801055c:	bf0c      	ite	eq
 801055e:	2200      	moveq	r2, #0
 8010560:	f002 0201 	andne.w	r2, r2, #1
 8010564:	b11a      	cbz	r2, 801056e <TIM_SlaveTimer_SetConfig+0x2c6>
 8010566:	4a64      	ldr	r2, [pc, #400]	; (80106f8 <TIM_SlaveTimer_SetConfig+0x450>)
 8010568:	4293      	cmp	r3, r2
 801056a:	f040 80ba 	bne.w	80106e2 <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 801056e:	68a3      	ldr	r3, [r4, #8]
 8010570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010574:	bf18      	it	ne
 8010576:	2b0a      	cmpne	r3, #10
 8010578:	d003      	beq.n	8010582 <TIM_SlaveTimer_SetConfig+0x2da>
 801057a:	f033 0302 	bics.w	r3, r3, #2
 801057e:	f040 808b 	bne.w	8010698 <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8010582:	6926      	ldr	r6, [r4, #16]
 8010584:	2e0f      	cmp	r6, #15
 8010586:	d874      	bhi.n	8010672 <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010588:	682b      	ldr	r3, [r5, #0]
 801058a:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 801058c:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801058e:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010590:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010594:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8010598:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 801059a:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801059c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801059e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80105a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80105a4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80105a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105aa:	6219      	str	r1, [r3, #32]
}
 80105ac:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80105ae:	4a50      	ldr	r2, [pc, #320]	; (80106f0 <TIM_SlaveTimer_SetConfig+0x448>)
 80105b0:	4950      	ldr	r1, [pc, #320]	; (80106f4 <TIM_SlaveTimer_SetConfig+0x44c>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	bf18      	it	ne
 80105b6:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80105ba:	bf14      	ite	ne
 80105bc:	2201      	movne	r2, #1
 80105be:	2200      	moveq	r2, #0
 80105c0:	428b      	cmp	r3, r1
 80105c2:	bf0c      	ite	eq
 80105c4:	2200      	moveq	r2, #0
 80105c6:	f002 0201 	andne.w	r2, r2, #1
 80105ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105ce:	428b      	cmp	r3, r1
 80105d0:	bf0c      	ite	eq
 80105d2:	2200      	moveq	r2, #0
 80105d4:	f002 0201 	andne.w	r2, r2, #1
 80105d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105dc:	428b      	cmp	r3, r1
 80105de:	bf0c      	ite	eq
 80105e0:	2200      	moveq	r2, #0
 80105e2:	f002 0201 	andne.w	r2, r2, #1
 80105e6:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80105ea:	428b      	cmp	r3, r1
 80105ec:	bf0c      	ite	eq
 80105ee:	2200      	moveq	r2, #0
 80105f0:	f002 0201 	andne.w	r2, r2, #1
 80105f4:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80105f8:	428b      	cmp	r3, r1
 80105fa:	bf0c      	ite	eq
 80105fc:	2200      	moveq	r2, #0
 80105fe:	f002 0201 	andne.w	r2, r2, #1
 8010602:	b112      	cbz	r2, 801060a <TIM_SlaveTimer_SetConfig+0x362>
 8010604:	4a3d      	ldr	r2, [pc, #244]	; (80106fc <TIM_SlaveTimer_SetConfig+0x454>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d15f      	bne.n	80106ca <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 801060a:	68a3      	ldr	r3, [r4, #8]
 801060c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010610:	bf18      	it	ne
 8010612:	2b0a      	cmpne	r3, #10
 8010614:	d002      	beq.n	801061c <TIM_SlaveTimer_SetConfig+0x374>
 8010616:	f033 0302 	bics.w	r3, r3, #2
 801061a:	d137      	bne.n	801068c <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 801061c:	6926      	ldr	r6, [r4, #16]
 801061e:	2e0f      	cmp	r6, #15
 8010620:	d81a      	bhi.n	8010658 <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010622:	682b      	ldr	r3, [r5, #0]
 8010624:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010626:	6a18      	ldr	r0, [r3, #32]
 8010628:	f020 0010 	bic.w	r0, r0, #16
 801062c:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 801062e:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8010630:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010632:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010634:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010638:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801063c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8010640:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8010644:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010646:	621a      	str	r2, [r3, #32]
}
 8010648:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 801064a:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 801064e:	482c      	ldr	r0, [pc, #176]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 8010650:	f7f5 f90a 	bl	8005868 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010654:	6921      	ldr	r1, [r4, #16]
 8010656:	e683      	b.n	8010360 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8010658:	f641 511f 	movw	r1, #7455	; 0x1d1f
 801065c:	4828      	ldr	r0, [pc, #160]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 801065e:	f7f5 f903 	bl	8005868 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010662:	6926      	ldr	r6, [r4, #16]
 8010664:	e7dd      	b.n	8010622 <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8010666:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 801066a:	4825      	ldr	r0, [pc, #148]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 801066c:	f7f5 f8fc 	bl	8005868 <assert_failed>
 8010670:	e70f      	b.n	8010492 <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8010672:	f641 5111 	movw	r1, #7441	; 0x1d11
 8010676:	4822      	ldr	r0, [pc, #136]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 8010678:	f7f5 f8f6 	bl	8005868 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801067c:	6926      	ldr	r6, [r4, #16]
 801067e:	e783      	b.n	8010588 <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 8010680:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 8010684:	481e      	ldr	r0, [pc, #120]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 8010686:	f7f5 f8ef 	bl	8005868 <assert_failed>
 801068a:	e65b      	b.n	8010344 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 801068c:	f641 511e 	movw	r1, #7454	; 0x1d1e
 8010690:	481b      	ldr	r0, [pc, #108]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 8010692:	f7f5 f8e9 	bl	8005868 <assert_failed>
 8010696:	e7c1      	b.n	801061c <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8010698:	f641 5110 	movw	r1, #7440	; 0x1d10
 801069c:	4818      	ldr	r0, [pc, #96]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 801069e:	f7f5 f8e3 	bl	8005868 <assert_failed>
 80106a2:	e76e      	b.n	8010582 <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80106a4:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 80106a8:	4815      	ldr	r0, [pc, #84]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 80106aa:	f7f5 f8dd 	bl	8005868 <assert_failed>
 80106ae:	e653      	b.n	8010358 <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80106b0:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 80106b4:	4812      	ldr	r0, [pc, #72]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 80106b6:	f7f5 f8d7 	bl	8005868 <assert_failed>
 80106ba:	e63e      	b.n	801033a <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80106bc:	f641 512e 	movw	r1, #7470	; 0x1d2e
 80106c0:	480f      	ldr	r0, [pc, #60]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 80106c2:	f7f5 f8d1 	bl	8005868 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 80106c6:	2000      	movs	r0, #0
}
 80106c8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80106ca:	f641 511d 	movw	r1, #7453	; 0x1d1d
 80106ce:	480c      	ldr	r0, [pc, #48]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 80106d0:	f7f5 f8ca 	bl	8005868 <assert_failed>
 80106d4:	e799      	b.n	801060a <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80106d6:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 80106da:	4809      	ldr	r0, [pc, #36]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 80106dc:	f7f5 f8c4 	bl	8005868 <assert_failed>
 80106e0:	e6d3      	b.n	801048a <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80106e2:	f641 510f 	movw	r1, #7439	; 0x1d0f
 80106e6:	4806      	ldr	r0, [pc, #24]	; (8010700 <TIM_SlaveTimer_SetConfig+0x458>)
 80106e8:	f7f5 f8be 	bl	8005868 <assert_failed>
 80106ec:	e73f      	b.n	801056e <TIM_SlaveTimer_SetConfig+0x2c6>
 80106ee:	bf00      	nop
 80106f0:	40010000 	.word	0x40010000
 80106f4:	40000400 	.word	0x40000400
 80106f8:	40002000 	.word	0x40002000
 80106fc:	40001800 	.word	0x40001800
 8010700:	0802e51c 	.word	0x0802e51c

08010704 <HAL_TIM_Base_Start>:
{
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010708:	4b52      	ldr	r3, [pc, #328]	; (8010854 <HAL_TIM_Base_Start+0x150>)
 801070a:	4d53      	ldr	r5, [pc, #332]	; (8010858 <HAL_TIM_Base_Start+0x154>)
 801070c:	6822      	ldr	r2, [r4, #0]
 801070e:	4953      	ldr	r1, [pc, #332]	; (801085c <HAL_TIM_Base_Start+0x158>)
 8010710:	429a      	cmp	r2, r3
 8010712:	bf18      	it	ne
 8010714:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010718:	4851      	ldr	r0, [pc, #324]	; (8010860 <HAL_TIM_Base_Start+0x15c>)
 801071a:	bf14      	ite	ne
 801071c:	2301      	movne	r3, #1
 801071e:	2300      	moveq	r3, #0
 8010720:	42aa      	cmp	r2, r5
 8010722:	bf0c      	ite	eq
 8010724:	2300      	moveq	r3, #0
 8010726:	f003 0301 	andne.w	r3, r3, #1
 801072a:	428a      	cmp	r2, r1
 801072c:	bf0c      	ite	eq
 801072e:	2300      	moveq	r3, #0
 8010730:	f003 0301 	andne.w	r3, r3, #1
 8010734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010738:	4282      	cmp	r2, r0
 801073a:	bf0c      	ite	eq
 801073c:	2300      	moveq	r3, #0
 801073e:	f003 0301 	andne.w	r3, r3, #1
 8010742:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010746:	428a      	cmp	r2, r1
 8010748:	bf0c      	ite	eq
 801074a:	2300      	moveq	r3, #0
 801074c:	f003 0301 	andne.w	r3, r3, #1
 8010750:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010754:	4282      	cmp	r2, r0
 8010756:	bf0c      	ite	eq
 8010758:	2300      	moveq	r3, #0
 801075a:	f003 0301 	andne.w	r3, r3, #1
 801075e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010762:	428a      	cmp	r2, r1
 8010764:	bf0c      	ite	eq
 8010766:	2300      	moveq	r3, #0
 8010768:	f003 0301 	andne.w	r3, r3, #1
 801076c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010770:	4282      	cmp	r2, r0
 8010772:	bf0c      	ite	eq
 8010774:	2300      	moveq	r3, #0
 8010776:	f003 0301 	andne.w	r3, r3, #1
 801077a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801077e:	428a      	cmp	r2, r1
 8010780:	bf0c      	ite	eq
 8010782:	2300      	moveq	r3, #0
 8010784:	f003 0301 	andne.w	r3, r3, #1
 8010788:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 801078c:	4282      	cmp	r2, r0
 801078e:	bf0c      	ite	eq
 8010790:	2300      	moveq	r3, #0
 8010792:	f003 0301 	andne.w	r3, r3, #1
 8010796:	428a      	cmp	r2, r1
 8010798:	bf0c      	ite	eq
 801079a:	2300      	moveq	r3, #0
 801079c:	f003 0301 	andne.w	r3, r3, #1
 80107a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80107a4:	428a      	cmp	r2, r1
 80107a6:	bf0c      	ite	eq
 80107a8:	2300      	moveq	r3, #0
 80107aa:	f003 0301 	andne.w	r3, r3, #1
 80107ae:	b113      	cbz	r3, 80107b6 <HAL_TIM_Base_Start+0xb2>
 80107b0:	4b2c      	ldr	r3, [pc, #176]	; (8010864 <HAL_TIM_Base_Start+0x160>)
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d143      	bne.n	801083e <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 80107b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d13b      	bne.n	8010836 <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80107be:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80107c0:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80107c2:	4b24      	ldr	r3, [pc, #144]	; (8010854 <HAL_TIM_Base_Start+0x150>)
 80107c4:	4d24      	ldr	r5, [pc, #144]	; (8010858 <HAL_TIM_Base_Start+0x154>)
 80107c6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80107ca:	bf18      	it	ne
 80107cc:	429a      	cmpne	r2, r3
 80107ce:	4923      	ldr	r1, [pc, #140]	; (801085c <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 80107d0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80107d4:	bf0c      	ite	eq
 80107d6:	2301      	moveq	r3, #1
 80107d8:	2300      	movne	r3, #0
 80107da:	4c21      	ldr	r4, [pc, #132]	; (8010860 <HAL_TIM_Base_Start+0x15c>)
 80107dc:	42aa      	cmp	r2, r5
 80107de:	bf08      	it	eq
 80107e0:	f043 0301 	orreq.w	r3, r3, #1
 80107e4:	4820      	ldr	r0, [pc, #128]	; (8010868 <HAL_TIM_Base_Start+0x164>)
 80107e6:	428a      	cmp	r2, r1
 80107e8:	bf08      	it	eq
 80107ea:	f043 0301 	orreq.w	r3, r3, #1
 80107ee:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 80107f2:	42a2      	cmp	r2, r4
 80107f4:	bf08      	it	eq
 80107f6:	f043 0301 	orreq.w	r3, r3, #1
 80107fa:	4282      	cmp	r2, r0
 80107fc:	bf08      	it	eq
 80107fe:	f043 0301 	orreq.w	r3, r3, #1
 8010802:	428a      	cmp	r2, r1
 8010804:	bf08      	it	eq
 8010806:	f043 0301 	orreq.w	r3, r3, #1
 801080a:	b933      	cbnz	r3, 801081a <HAL_TIM_Base_Start+0x116>
 801080c:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8010810:	1a10      	subs	r0, r2, r0
 8010812:	fab0 f080 	clz	r0, r0
 8010816:	0940      	lsrs	r0, r0, #5
 8010818:	b1b8      	cbz	r0, 801084a <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801081a:	6891      	ldr	r1, [r2, #8]
 801081c:	4b13      	ldr	r3, [pc, #76]	; (801086c <HAL_TIM_Base_Start+0x168>)
 801081e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010820:	2b06      	cmp	r3, #6
 8010822:	d00a      	beq.n	801083a <HAL_TIM_Base_Start+0x136>
 8010824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010828:	d007      	beq.n	801083a <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 801082a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 801082c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 801082e:	f043 0301 	orr.w	r3, r3, #1
 8010832:	6013      	str	r3, [r2, #0]
}
 8010834:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010836:	2001      	movs	r0, #1
}
 8010838:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 801083a:	2000      	movs	r0, #0
}
 801083c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801083e:	f240 1197 	movw	r1, #407	; 0x197
 8010842:	480b      	ldr	r0, [pc, #44]	; (8010870 <HAL_TIM_Base_Start+0x16c>)
 8010844:	f7f5 f810 	bl	8005868 <assert_failed>
 8010848:	e7b5      	b.n	80107b6 <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 801084a:	6813      	ldr	r3, [r2, #0]
 801084c:	f043 0301 	orr.w	r3, r3, #1
 8010850:	6013      	str	r3, [r2, #0]
}
 8010852:	bd38      	pop	{r3, r4, r5, pc}
 8010854:	40010000 	.word	0x40010000
 8010858:	40000400 	.word	0x40000400
 801085c:	40000800 	.word	0x40000800
 8010860:	40000c00 	.word	0x40000c00
 8010864:	40002000 	.word	0x40002000
 8010868:	40010400 	.word	0x40010400
 801086c:	00010007 	.word	0x00010007
 8010870:	0802e51c 	.word	0x0802e51c

08010874 <HAL_TIM_Base_Start_IT>:
{
 8010874:	b538      	push	{r3, r4, r5, lr}
 8010876:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010878:	4b54      	ldr	r3, [pc, #336]	; (80109cc <HAL_TIM_Base_Start_IT+0x158>)
 801087a:	4d55      	ldr	r5, [pc, #340]	; (80109d0 <HAL_TIM_Base_Start_IT+0x15c>)
 801087c:	6822      	ldr	r2, [r4, #0]
 801087e:	4955      	ldr	r1, [pc, #340]	; (80109d4 <HAL_TIM_Base_Start_IT+0x160>)
 8010880:	429a      	cmp	r2, r3
 8010882:	bf18      	it	ne
 8010884:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010888:	4853      	ldr	r0, [pc, #332]	; (80109d8 <HAL_TIM_Base_Start_IT+0x164>)
 801088a:	bf14      	ite	ne
 801088c:	2301      	movne	r3, #1
 801088e:	2300      	moveq	r3, #0
 8010890:	42aa      	cmp	r2, r5
 8010892:	bf0c      	ite	eq
 8010894:	2300      	moveq	r3, #0
 8010896:	f003 0301 	andne.w	r3, r3, #1
 801089a:	428a      	cmp	r2, r1
 801089c:	bf0c      	ite	eq
 801089e:	2300      	moveq	r3, #0
 80108a0:	f003 0301 	andne.w	r3, r3, #1
 80108a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80108a8:	4282      	cmp	r2, r0
 80108aa:	bf0c      	ite	eq
 80108ac:	2300      	moveq	r3, #0
 80108ae:	f003 0301 	andne.w	r3, r3, #1
 80108b2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80108b6:	428a      	cmp	r2, r1
 80108b8:	bf0c      	ite	eq
 80108ba:	2300      	moveq	r3, #0
 80108bc:	f003 0301 	andne.w	r3, r3, #1
 80108c0:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80108c4:	4282      	cmp	r2, r0
 80108c6:	bf0c      	ite	eq
 80108c8:	2300      	moveq	r3, #0
 80108ca:	f003 0301 	andne.w	r3, r3, #1
 80108ce:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80108d2:	428a      	cmp	r2, r1
 80108d4:	bf0c      	ite	eq
 80108d6:	2300      	moveq	r3, #0
 80108d8:	f003 0301 	andne.w	r3, r3, #1
 80108dc:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80108e0:	4282      	cmp	r2, r0
 80108e2:	bf0c      	ite	eq
 80108e4:	2300      	moveq	r3, #0
 80108e6:	f003 0301 	andne.w	r3, r3, #1
 80108ea:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80108ee:	428a      	cmp	r2, r1
 80108f0:	bf0c      	ite	eq
 80108f2:	2300      	moveq	r3, #0
 80108f4:	f003 0301 	andne.w	r3, r3, #1
 80108f8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80108fc:	4282      	cmp	r2, r0
 80108fe:	bf0c      	ite	eq
 8010900:	2300      	moveq	r3, #0
 8010902:	f003 0301 	andne.w	r3, r3, #1
 8010906:	428a      	cmp	r2, r1
 8010908:	bf0c      	ite	eq
 801090a:	2300      	moveq	r3, #0
 801090c:	f003 0301 	andne.w	r3, r3, #1
 8010910:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010914:	428a      	cmp	r2, r1
 8010916:	bf0c      	ite	eq
 8010918:	2300      	moveq	r3, #0
 801091a:	f003 0301 	andne.w	r3, r3, #1
 801091e:	b113      	cbz	r3, 8010926 <HAL_TIM_Base_Start_IT+0xb2>
 8010920:	4b2e      	ldr	r3, [pc, #184]	; (80109dc <HAL_TIM_Base_Start_IT+0x168>)
 8010922:	429a      	cmp	r2, r3
 8010924:	d147      	bne.n	80109b6 <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 8010926:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801092a:	2b01      	cmp	r3, #1
 801092c:	d13f      	bne.n	80109ae <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801092e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8010930:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010932:	4b26      	ldr	r3, [pc, #152]	; (80109cc <HAL_TIM_Base_Start_IT+0x158>)
 8010934:	4d26      	ldr	r5, [pc, #152]	; (80109d0 <HAL_TIM_Base_Start_IT+0x15c>)
 8010936:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801093a:	bf18      	it	ne
 801093c:	429a      	cmpne	r2, r3
 801093e:	4825      	ldr	r0, [pc, #148]	; (80109d4 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 8010940:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010944:	bf0c      	ite	eq
 8010946:	2301      	moveq	r3, #1
 8010948:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801094a:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801094c:	42aa      	cmp	r2, r5
 801094e:	bf08      	it	eq
 8010950:	f043 0301 	orreq.w	r3, r3, #1
 8010954:	4c20      	ldr	r4, [pc, #128]	; (80109d8 <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010956:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801095a:	4282      	cmp	r2, r0
 801095c:	bf08      	it	eq
 801095e:	f043 0301 	orreq.w	r3, r3, #1
 8010962:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010966:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010968:	42a2      	cmp	r2, r4
 801096a:	bf08      	it	eq
 801096c:	f043 0301 	orreq.w	r3, r3, #1
 8010970:	491b      	ldr	r1, [pc, #108]	; (80109e0 <HAL_TIM_Base_Start_IT+0x16c>)
 8010972:	4282      	cmp	r2, r0
 8010974:	bf08      	it	eq
 8010976:	f043 0301 	orreq.w	r3, r3, #1
 801097a:	428a      	cmp	r2, r1
 801097c:	bf08      	it	eq
 801097e:	f043 0301 	orreq.w	r3, r3, #1
 8010982:	b933      	cbnz	r3, 8010992 <HAL_TIM_Base_Start_IT+0x11e>
 8010984:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8010988:	1a10      	subs	r0, r2, r0
 801098a:	fab0 f080 	clz	r0, r0
 801098e:	0940      	lsrs	r0, r0, #5
 8010990:	b1b8      	cbz	r0, 80109c2 <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010992:	6891      	ldr	r1, [r2, #8]
 8010994:	4b13      	ldr	r3, [pc, #76]	; (80109e4 <HAL_TIM_Base_Start_IT+0x170>)
 8010996:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010998:	2b06      	cmp	r3, #6
 801099a:	d00a      	beq.n	80109b2 <HAL_TIM_Base_Start_IT+0x13e>
 801099c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109a0:	d007      	beq.n	80109b2 <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 80109a2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 80109a4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80109a6:	f043 0301 	orr.w	r3, r3, #1
 80109aa:	6013      	str	r3, [r2, #0]
}
 80109ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80109ae:	2001      	movs	r0, #1
}
 80109b0:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80109b2:	2000      	movs	r0, #0
}
 80109b4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80109b6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80109ba:	480b      	ldr	r0, [pc, #44]	; (80109e8 <HAL_TIM_Base_Start_IT+0x174>)
 80109bc:	f7f4 ff54 	bl	8005868 <assert_failed>
 80109c0:	e7b1      	b.n	8010926 <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 80109c2:	6813      	ldr	r3, [r2, #0]
 80109c4:	f043 0301 	orr.w	r3, r3, #1
 80109c8:	6013      	str	r3, [r2, #0]
}
 80109ca:	bd38      	pop	{r3, r4, r5, pc}
 80109cc:	40010000 	.word	0x40010000
 80109d0:	40000400 	.word	0x40000400
 80109d4:	40000800 	.word	0x40000800
 80109d8:	40000c00 	.word	0x40000c00
 80109dc:	40002000 	.word	0x40002000
 80109e0:	40014000 	.word	0x40014000
 80109e4:	00010007 	.word	0x00010007
 80109e8:	0802e51c 	.word	0x0802e51c

080109ec <HAL_TIM_OC_MspInit>:
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop

080109f0 <HAL_TIM_PWM_MspInit>:
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop

080109f4 <HAL_TIM_IC_MspInit>:
 80109f4:	4770      	bx	lr
 80109f6:	bf00      	nop

080109f8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80109f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80109fc:	2b01      	cmp	r3, #1
 80109fe:	f000 8151 	beq.w	8010ca4 <HAL_TIM_ConfigClockSource+0x2ac>
 8010a02:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8010a04:	2302      	movs	r3, #2
{
 8010a06:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8010a08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8010a0c:	460d      	mov	r5, r1
 8010a0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8010a12:	4604      	mov	r4, r0
 8010a14:	680b      	ldr	r3, [r1, #0]
 8010a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a1a:	bf18      	it	ne
 8010a1c:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 8010a20:	bf14      	ite	ne
 8010a22:	2201      	movne	r2, #1
 8010a24:	2200      	moveq	r2, #0
 8010a26:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 8010a2a:	f002 0201 	and.w	r2, r2, #1
 8010a2e:	bf08      	it	eq
 8010a30:	2200      	moveq	r2, #0
 8010a32:	b112      	cbz	r2, 8010a3a <HAL_TIM_ConfigClockSource+0x42>
 8010a34:	2940      	cmp	r1, #64	; 0x40
 8010a36:	f040 8267 	bne.w	8010f08 <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 8010a3a:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 8010a3c:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a3e:	499a      	ldr	r1, [pc, #616]	; (8010ca8 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 8010a40:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a42:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8010a46:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8010a48:	f000 8138 	beq.w	8010cbc <HAL_TIM_ConfigClockSource+0x2c4>
 8010a4c:	d84f      	bhi.n	8010aee <HAL_TIM_ConfigClockSource+0xf6>
 8010a4e:	2b40      	cmp	r3, #64	; 0x40
 8010a50:	f000 81d7 	beq.w	8010e02 <HAL_TIM_ConfigClockSource+0x40a>
 8010a54:	f240 80a2 	bls.w	8010b9c <HAL_TIM_ConfigClockSource+0x1a4>
 8010a58:	2b50      	cmp	r3, #80	; 0x50
 8010a5a:	f040 8097 	bne.w	8010b8c <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010a5e:	4b93      	ldr	r3, [pc, #588]	; (8010cac <HAL_TIM_ConfigClockSource+0x2b4>)
 8010a60:	4993      	ldr	r1, [pc, #588]	; (8010cb0 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010a62:	429a      	cmp	r2, r3
 8010a64:	bf18      	it	ne
 8010a66:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010a6a:	bf14      	ite	ne
 8010a6c:	2301      	movne	r3, #1
 8010a6e:	2300      	moveq	r3, #0
 8010a70:	428a      	cmp	r2, r1
 8010a72:	bf0c      	ite	eq
 8010a74:	2300      	moveq	r3, #0
 8010a76:	f003 0301 	andne.w	r3, r3, #1
 8010a7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010a7e:	428a      	cmp	r2, r1
 8010a80:	bf0c      	ite	eq
 8010a82:	2300      	moveq	r3, #0
 8010a84:	f003 0301 	andne.w	r3, r3, #1
 8010a88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010a8c:	428a      	cmp	r2, r1
 8010a8e:	bf0c      	ite	eq
 8010a90:	2300      	moveq	r3, #0
 8010a92:	f003 0301 	andne.w	r3, r3, #1
 8010a96:	b11b      	cbz	r3, 8010aa0 <HAL_TIM_ConfigClockSource+0xa8>
 8010a98:	4b86      	ldr	r3, [pc, #536]	; (8010cb4 <HAL_TIM_ConfigClockSource+0x2bc>)
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	f040 8222 	bne.w	8010ee4 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010aa0:	686b      	ldr	r3, [r5, #4]
 8010aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010aa6:	bf18      	it	ne
 8010aa8:	2b0a      	cmpne	r3, #10
 8010aaa:	d003      	beq.n	8010ab4 <HAL_TIM_ConfigClockSource+0xbc>
 8010aac:	f033 0302 	bics.w	r3, r3, #2
 8010ab0:	f040 81fe 	bne.w	8010eb0 <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010ab4:	68ee      	ldr	r6, [r5, #12]
 8010ab6:	2e0f      	cmp	r6, #15
 8010ab8:	f200 8242 	bhi.w	8010f40 <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010abc:	6823      	ldr	r3, [r4, #0]
 8010abe:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8010ac0:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ac2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010ac4:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ac8:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8010acc:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010ace:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ad0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ad2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010ad4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010ad8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8010adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010ade:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010ae0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010ae2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010ae6:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8010aea:	609a      	str	r2, [r3, #8]
}
 8010aec:	e04f      	b.n	8010b8e <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010af2:	f000 812c 	beq.w	8010d4e <HAL_TIM_ConfigClockSource+0x356>
 8010af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010afa:	d17e      	bne.n	8010bfa <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8010afc:	4b6b      	ldr	r3, [pc, #428]	; (8010cac <HAL_TIM_ConfigClockSource+0x2b4>)
 8010afe:	496c      	ldr	r1, [pc, #432]	; (8010cb0 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010b00:	429a      	cmp	r2, r3
 8010b02:	bf18      	it	ne
 8010b04:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010b08:	bf14      	ite	ne
 8010b0a:	2301      	movne	r3, #1
 8010b0c:	2300      	moveq	r3, #0
 8010b0e:	428a      	cmp	r2, r1
 8010b10:	bf0c      	ite	eq
 8010b12:	2300      	moveq	r3, #0
 8010b14:	f003 0301 	andne.w	r3, r3, #1
 8010b18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b1c:	428a      	cmp	r2, r1
 8010b1e:	bf0c      	ite	eq
 8010b20:	2300      	moveq	r3, #0
 8010b22:	f003 0301 	andne.w	r3, r3, #1
 8010b26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b2a:	428a      	cmp	r2, r1
 8010b2c:	bf0c      	ite	eq
 8010b2e:	2300      	moveq	r3, #0
 8010b30:	f003 0301 	andne.w	r3, r3, #1
 8010b34:	b11b      	cbz	r3, 8010b3e <HAL_TIM_ConfigClockSource+0x146>
 8010b36:	4b5f      	ldr	r3, [pc, #380]	; (8010cb4 <HAL_TIM_ConfigClockSource+0x2bc>)
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	f040 81c5 	bne.w	8010ec8 <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010b3e:	68ab      	ldr	r3, [r5, #8]
 8010b40:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010b44:	f040 8210 	bne.w	8010f68 <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010b48:	686b      	ldr	r3, [r5, #4]
 8010b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b4e:	bf18      	it	ne
 8010b50:	2b0a      	cmpne	r3, #10
 8010b52:	d003      	beq.n	8010b5c <HAL_TIM_ConfigClockSource+0x164>
 8010b54:	f033 0302 	bics.w	r3, r3, #2
 8010b58:	f040 81a4 	bne.w	8010ea4 <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010b5c:	68ee      	ldr	r6, [r5, #12]
 8010b5e:	2e0f      	cmp	r6, #15
 8010b60:	f200 81d9 	bhi.w	8010f16 <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 8010b64:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010b66:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 8010b6a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010b6c:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010b6e:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b70:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8010b74:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010b76:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 8010b7a:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010b7c:	6893      	ldr	r3, [r2, #8]
 8010b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010b82:	6093      	str	r3, [r2, #8]
      break;
 8010b84:	e003      	b.n	8010b8e <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010b86:	f033 0110 	bics.w	r1, r3, #16
 8010b8a:	d00c      	beq.n	8010ba6 <HAL_TIM_ConfigClockSource+0x1ae>
 8010b8c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8010b8e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8010b90:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010b92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010b96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8010b9a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8010b9c:	2b20      	cmp	r3, #32
 8010b9e:	d002      	beq.n	8010ba6 <HAL_TIM_ConfigClockSource+0x1ae>
 8010ba0:	d9f1      	bls.n	8010b86 <HAL_TIM_ConfigClockSource+0x18e>
 8010ba2:	2b30      	cmp	r3, #48	; 0x30
 8010ba4:	d1f2      	bne.n	8010b8c <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8010ba6:	4941      	ldr	r1, [pc, #260]	; (8010cac <HAL_TIM_ConfigClockSource+0x2b4>)
 8010ba8:	4841      	ldr	r0, [pc, #260]	; (8010cb0 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010baa:	428a      	cmp	r2, r1
 8010bac:	bf18      	it	ne
 8010bae:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010bb2:	bf14      	ite	ne
 8010bb4:	2101      	movne	r1, #1
 8010bb6:	2100      	moveq	r1, #0
 8010bb8:	4282      	cmp	r2, r0
 8010bba:	bf0c      	ite	eq
 8010bbc:	2100      	moveq	r1, #0
 8010bbe:	f001 0101 	andne.w	r1, r1, #1
 8010bc2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8010bc6:	4282      	cmp	r2, r0
 8010bc8:	bf0c      	ite	eq
 8010bca:	2100      	moveq	r1, #0
 8010bcc:	f001 0101 	andne.w	r1, r1, #1
 8010bd0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8010bd4:	4282      	cmp	r2, r0
 8010bd6:	bf0c      	ite	eq
 8010bd8:	2100      	moveq	r1, #0
 8010bda:	f001 0101 	andne.w	r1, r1, #1
 8010bde:	b119      	cbz	r1, 8010be8 <HAL_TIM_ConfigClockSource+0x1f0>
 8010be0:	4934      	ldr	r1, [pc, #208]	; (8010cb4 <HAL_TIM_ConfigClockSource+0x2bc>)
 8010be2:	428a      	cmp	r2, r1
 8010be4:	f040 8176 	bne.w	8010ed4 <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 8010be8:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010bea:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8010bec:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010bf0:	430b      	orrs	r3, r1
 8010bf2:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8010bf6:	6093      	str	r3, [r2, #8]
}
 8010bf8:	e7c9      	b.n	8010b8e <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010bfa:	2b70      	cmp	r3, #112	; 0x70
 8010bfc:	d1c6      	bne.n	8010b8c <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010bfe:	4b2b      	ldr	r3, [pc, #172]	; (8010cac <HAL_TIM_ConfigClockSource+0x2b4>)
 8010c00:	492b      	ldr	r1, [pc, #172]	; (8010cb0 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010c02:	429a      	cmp	r2, r3
 8010c04:	bf18      	it	ne
 8010c06:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010c0a:	bf14      	ite	ne
 8010c0c:	2301      	movne	r3, #1
 8010c0e:	2300      	moveq	r3, #0
 8010c10:	428a      	cmp	r2, r1
 8010c12:	bf0c      	ite	eq
 8010c14:	2300      	moveq	r3, #0
 8010c16:	f003 0301 	andne.w	r3, r3, #1
 8010c1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c1e:	428a      	cmp	r2, r1
 8010c20:	bf0c      	ite	eq
 8010c22:	2300      	moveq	r3, #0
 8010c24:	f003 0301 	andne.w	r3, r3, #1
 8010c28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c2c:	428a      	cmp	r2, r1
 8010c2e:	bf0c      	ite	eq
 8010c30:	2300      	moveq	r3, #0
 8010c32:	f003 0301 	andne.w	r3, r3, #1
 8010c36:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010c3a:	428a      	cmp	r2, r1
 8010c3c:	bf0c      	ite	eq
 8010c3e:	2300      	moveq	r3, #0
 8010c40:	f003 0301 	andne.w	r3, r3, #1
 8010c44:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010c48:	428a      	cmp	r2, r1
 8010c4a:	bf0c      	ite	eq
 8010c4c:	2300      	moveq	r3, #0
 8010c4e:	f003 0301 	andne.w	r3, r3, #1
 8010c52:	b11b      	cbz	r3, 8010c5c <HAL_TIM_ConfigClockSource+0x264>
 8010c54:	4b18      	ldr	r3, [pc, #96]	; (8010cb8 <HAL_TIM_ConfigClockSource+0x2c0>)
 8010c56:	429a      	cmp	r2, r3
 8010c58:	f040 818c 	bne.w	8010f74 <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010c5c:	68ab      	ldr	r3, [r5, #8]
 8010c5e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010c62:	f040 817b 	bne.w	8010f5c <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010c66:	686b      	ldr	r3, [r5, #4]
 8010c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c6c:	bf18      	it	ne
 8010c6e:	2b0a      	cmpne	r3, #10
 8010c70:	d003      	beq.n	8010c7a <HAL_TIM_ConfigClockSource+0x282>
 8010c72:	f033 0302 	bics.w	r3, r3, #2
 8010c76:	f040 8121 	bne.w	8010ebc <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010c7a:	68ee      	ldr	r6, [r5, #12]
 8010c7c:	2e0f      	cmp	r6, #15
 8010c7e:	f200 8166 	bhi.w	8010f4e <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 8010c82:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010c84:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 8010c88:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c8a:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010c8c:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c8e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8010c92:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c94:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 8010c98:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8010c9a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8010ca0:	6093      	str	r3, [r2, #8]
      break;
 8010ca2:	e774      	b.n	8010b8e <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 8010ca4:	2002      	movs	r0, #2
}
 8010ca6:	4770      	bx	lr
 8010ca8:	fffe0088 	.word	0xfffe0088
 8010cac:	40010000 	.word	0x40010000
 8010cb0:	40000400 	.word	0x40000400
 8010cb4:	40010400 	.word	0x40010400
 8010cb8:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010cbc:	4bb0      	ldr	r3, [pc, #704]	; (8010f80 <HAL_TIM_ConfigClockSource+0x588>)
 8010cbe:	49b1      	ldr	r1, [pc, #708]	; (8010f84 <HAL_TIM_ConfigClockSource+0x58c>)
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	bf18      	it	ne
 8010cc4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010cc8:	bf14      	ite	ne
 8010cca:	2301      	movne	r3, #1
 8010ccc:	2300      	moveq	r3, #0
 8010cce:	428a      	cmp	r2, r1
 8010cd0:	bf0c      	ite	eq
 8010cd2:	2300      	moveq	r3, #0
 8010cd4:	f003 0301 	andne.w	r3, r3, #1
 8010cd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010cdc:	428a      	cmp	r2, r1
 8010cde:	bf0c      	ite	eq
 8010ce0:	2300      	moveq	r3, #0
 8010ce2:	f003 0301 	andne.w	r3, r3, #1
 8010ce6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010cea:	428a      	cmp	r2, r1
 8010cec:	bf0c      	ite	eq
 8010cee:	2300      	moveq	r3, #0
 8010cf0:	f003 0301 	andne.w	r3, r3, #1
 8010cf4:	b11b      	cbz	r3, 8010cfe <HAL_TIM_ConfigClockSource+0x306>
 8010cf6:	4ba4      	ldr	r3, [pc, #656]	; (8010f88 <HAL_TIM_ConfigClockSource+0x590>)
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	f040 80ff 	bne.w	8010efc <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010cfe:	686b      	ldr	r3, [r5, #4]
 8010d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d04:	bf18      	it	ne
 8010d06:	2b0a      	cmpne	r3, #10
 8010d08:	d003      	beq.n	8010d12 <HAL_TIM_ConfigClockSource+0x31a>
 8010d0a:	f033 0302 	bics.w	r3, r3, #2
 8010d0e:	f040 80c3 	bne.w	8010e98 <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010d12:	68ee      	ldr	r6, [r5, #12]
 8010d14:	2e0f      	cmp	r6, #15
 8010d16:	f200 810c 	bhi.w	8010f32 <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010d1a:	6823      	ldr	r3, [r4, #0]
 8010d1c:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d1e:	6a18      	ldr	r0, [r3, #32]
 8010d20:	f020 0010 	bic.w	r0, r0, #16
 8010d24:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8010d26:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8010d28:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010d2a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010d2c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010d30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010d34:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8010d38:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8010d3c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010d3e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010d40:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010d42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010d46:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8010d4a:	609a      	str	r2, [r3, #8]
}
 8010d4c:	e71f      	b.n	8010b8e <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010d4e:	4b8c      	ldr	r3, [pc, #560]	; (8010f80 <HAL_TIM_ConfigClockSource+0x588>)
 8010d50:	488c      	ldr	r0, [pc, #560]	; (8010f84 <HAL_TIM_ConfigClockSource+0x58c>)
 8010d52:	429a      	cmp	r2, r3
 8010d54:	bf18      	it	ne
 8010d56:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010d5a:	498c      	ldr	r1, [pc, #560]	; (8010f8c <HAL_TIM_ConfigClockSource+0x594>)
 8010d5c:	bf14      	ite	ne
 8010d5e:	2301      	movne	r3, #1
 8010d60:	2300      	moveq	r3, #0
 8010d62:	4282      	cmp	r2, r0
 8010d64:	bf0c      	ite	eq
 8010d66:	2300      	moveq	r3, #0
 8010d68:	f003 0301 	andne.w	r3, r3, #1
 8010d6c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010d70:	428a      	cmp	r2, r1
 8010d72:	bf0c      	ite	eq
 8010d74:	2300      	moveq	r3, #0
 8010d76:	f003 0301 	andne.w	r3, r3, #1
 8010d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d7e:	4282      	cmp	r2, r0
 8010d80:	bf0c      	ite	eq
 8010d82:	2300      	moveq	r3, #0
 8010d84:	f003 0301 	andne.w	r3, r3, #1
 8010d88:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010d8c:	428a      	cmp	r2, r1
 8010d8e:	bf0c      	ite	eq
 8010d90:	2300      	moveq	r3, #0
 8010d92:	f003 0301 	andne.w	r3, r3, #1
 8010d96:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010d9a:	4282      	cmp	r2, r0
 8010d9c:	bf0c      	ite	eq
 8010d9e:	2300      	moveq	r3, #0
 8010da0:	f003 0301 	andne.w	r3, r3, #1
 8010da4:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010da8:	428a      	cmp	r2, r1
 8010daa:	bf0c      	ite	eq
 8010dac:	2300      	moveq	r3, #0
 8010dae:	f003 0301 	andne.w	r3, r3, #1
 8010db2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010db6:	4282      	cmp	r2, r0
 8010db8:	bf0c      	ite	eq
 8010dba:	2300      	moveq	r3, #0
 8010dbc:	f003 0301 	andne.w	r3, r3, #1
 8010dc0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010dc4:	428a      	cmp	r2, r1
 8010dc6:	bf0c      	ite	eq
 8010dc8:	2300      	moveq	r3, #0
 8010dca:	f003 0301 	andne.w	r3, r3, #1
 8010dce:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010dd2:	4282      	cmp	r2, r0
 8010dd4:	bf0c      	ite	eq
 8010dd6:	2300      	moveq	r3, #0
 8010dd8:	f003 0301 	andne.w	r3, r3, #1
 8010ddc:	428a      	cmp	r2, r1
 8010dde:	bf0c      	ite	eq
 8010de0:	2300      	moveq	r3, #0
 8010de2:	f003 0301 	andne.w	r3, r3, #1
 8010de6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010dea:	428a      	cmp	r2, r1
 8010dec:	bf0c      	ite	eq
 8010dee:	2300      	moveq	r3, #0
 8010df0:	f003 0301 	andne.w	r3, r3, #1
 8010df4:	b11b      	cbz	r3, 8010dfe <HAL_TIM_ConfigClockSource+0x406>
 8010df6:	4b66      	ldr	r3, [pc, #408]	; (8010f90 <HAL_TIM_ConfigClockSource+0x598>)
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	f040 80cd 	bne.w	8010f98 <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 8010dfe:	2000      	movs	r0, #0
 8010e00:	e6c5      	b.n	8010b8e <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010e02:	4b5f      	ldr	r3, [pc, #380]	; (8010f80 <HAL_TIM_ConfigClockSource+0x588>)
 8010e04:	495f      	ldr	r1, [pc, #380]	; (8010f84 <HAL_TIM_ConfigClockSource+0x58c>)
 8010e06:	429a      	cmp	r2, r3
 8010e08:	bf18      	it	ne
 8010e0a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010e0e:	bf14      	ite	ne
 8010e10:	2301      	movne	r3, #1
 8010e12:	2300      	moveq	r3, #0
 8010e14:	428a      	cmp	r2, r1
 8010e16:	bf0c      	ite	eq
 8010e18:	2300      	moveq	r3, #0
 8010e1a:	f003 0301 	andne.w	r3, r3, #1
 8010e1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e22:	428a      	cmp	r2, r1
 8010e24:	bf0c      	ite	eq
 8010e26:	2300      	moveq	r3, #0
 8010e28:	f003 0301 	andne.w	r3, r3, #1
 8010e2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e30:	428a      	cmp	r2, r1
 8010e32:	bf0c      	ite	eq
 8010e34:	2300      	moveq	r3, #0
 8010e36:	f003 0301 	andne.w	r3, r3, #1
 8010e3a:	b113      	cbz	r3, 8010e42 <HAL_TIM_ConfigClockSource+0x44a>
 8010e3c:	4b52      	ldr	r3, [pc, #328]	; (8010f88 <HAL_TIM_ConfigClockSource+0x590>)
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d156      	bne.n	8010ef0 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010e42:	686b      	ldr	r3, [r5, #4]
 8010e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e48:	bf18      	it	ne
 8010e4a:	2b0a      	cmpne	r3, #10
 8010e4c:	d002      	beq.n	8010e54 <HAL_TIM_ConfigClockSource+0x45c>
 8010e4e:	f033 0302 	bics.w	r3, r3, #2
 8010e52:	d11b      	bne.n	8010e8c <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010e54:	68ee      	ldr	r6, [r5, #12]
 8010e56:	2e0f      	cmp	r6, #15
 8010e58:	d864      	bhi.n	8010f24 <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010e5a:	6823      	ldr	r3, [r4, #0]
 8010e5c:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8010e5e:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e60:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010e62:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e66:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8010e6a:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010e6c:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e6e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010e70:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010e72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010e76:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8010e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010e7c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010e7e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010e80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010e84:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8010e88:	609a      	str	r2, [r3, #8]
}
 8010e8a:	e680      	b.n	8010b8e <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010e8c:	f241 51a6 	movw	r1, #5542	; 0x15a6
 8010e90:	4840      	ldr	r0, [pc, #256]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010e92:	f7f4 fce9 	bl	8005868 <assert_failed>
 8010e96:	e7dd      	b.n	8010e54 <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010e98:	f241 5196 	movw	r1, #5526	; 0x1596
 8010e9c:	483d      	ldr	r0, [pc, #244]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010e9e:	f7f4 fce3 	bl	8005868 <assert_failed>
 8010ea2:	e736      	b.n	8010d12 <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010ea4:	f241 5173 	movw	r1, #5491	; 0x1573
 8010ea8:	483a      	ldr	r0, [pc, #232]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010eaa:	f7f4 fcdd 	bl	8005868 <assert_failed>
 8010eae:	e655      	b.n	8010b5c <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010eb0:	f241 5186 	movw	r1, #5510	; 0x1586
 8010eb4:	4837      	ldr	r0, [pc, #220]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010eb6:	f7f4 fcd7 	bl	8005868 <assert_failed>
 8010eba:	e5fb      	b.n	8010ab4 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010ebc:	f241 515b 	movw	r1, #5467	; 0x155b
 8010ec0:	4834      	ldr	r0, [pc, #208]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010ec2:	f7f4 fcd1 	bl	8005868 <assert_failed>
 8010ec6:	e6d8      	b.n	8010c7a <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8010ec8:	f241 516f 	movw	r1, #5487	; 0x156f
 8010ecc:	4831      	ldr	r0, [pc, #196]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010ece:	f7f4 fccb 	bl	8005868 <assert_failed>
 8010ed2:	e634      	b.n	8010b3e <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8010ed4:	f241 51b6 	movw	r1, #5558	; 0x15b6
 8010ed8:	482e      	ldr	r0, [pc, #184]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010eda:	f7f4 fcc5 	bl	8005868 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010ede:	6822      	ldr	r2, [r4, #0]
 8010ee0:	682b      	ldr	r3, [r5, #0]
 8010ee2:	e681      	b.n	8010be8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010ee4:	f241 5183 	movw	r1, #5507	; 0x1583
 8010ee8:	482a      	ldr	r0, [pc, #168]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010eea:	f7f4 fcbd 	bl	8005868 <assert_failed>
 8010eee:	e5d7      	b.n	8010aa0 <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010ef0:	f241 51a3 	movw	r1, #5539	; 0x15a3
 8010ef4:	4827      	ldr	r0, [pc, #156]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010ef6:	f7f4 fcb7 	bl	8005868 <assert_failed>
 8010efa:	e7a2      	b.n	8010e42 <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010efc:	f241 5193 	movw	r1, #5523	; 0x1593
 8010f00:	4824      	ldr	r0, [pc, #144]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f02:	f7f4 fcb1 	bl	8005868 <assert_failed>
 8010f06:	e6fa      	b.n	8010cfe <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8010f08:	f241 5144 	movw	r1, #5444	; 0x1544
 8010f0c:	4821      	ldr	r0, [pc, #132]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f0e:	f7f4 fcab 	bl	8005868 <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 8010f12:	682b      	ldr	r3, [r5, #0]
 8010f14:	e591      	b.n	8010a3a <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010f16:	f241 5174 	movw	r1, #5492	; 0x1574
 8010f1a:	481e      	ldr	r0, [pc, #120]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f1c:	f7f4 fca4 	bl	8005868 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010f20:	68ee      	ldr	r6, [r5, #12]
 8010f22:	e61f      	b.n	8010b64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010f24:	f241 51a7 	movw	r1, #5543	; 0x15a7
 8010f28:	481a      	ldr	r0, [pc, #104]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f2a:	f7f4 fc9d 	bl	8005868 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010f2e:	68ee      	ldr	r6, [r5, #12]
 8010f30:	e793      	b.n	8010e5a <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010f32:	f241 5197 	movw	r1, #5527	; 0x1597
 8010f36:	4817      	ldr	r0, [pc, #92]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f38:	f7f4 fc96 	bl	8005868 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010f3c:	68ee      	ldr	r6, [r5, #12]
 8010f3e:	e6ec      	b.n	8010d1a <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010f40:	f241 5187 	movw	r1, #5511	; 0x1587
 8010f44:	4813      	ldr	r0, [pc, #76]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f46:	f7f4 fc8f 	bl	8005868 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010f4a:	68ee      	ldr	r6, [r5, #12]
 8010f4c:	e5b6      	b.n	8010abc <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010f4e:	f241 515c 	movw	r1, #5468	; 0x155c
 8010f52:	4810      	ldr	r0, [pc, #64]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f54:	f7f4 fc88 	bl	8005868 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010f58:	68ee      	ldr	r6, [r5, #12]
 8010f5a:	e692      	b.n	8010c82 <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010f5c:	f241 515a 	movw	r1, #5466	; 0x155a
 8010f60:	480c      	ldr	r0, [pc, #48]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f62:	f7f4 fc81 	bl	8005868 <assert_failed>
 8010f66:	e67e      	b.n	8010c66 <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010f68:	f241 5172 	movw	r1, #5490	; 0x1572
 8010f6c:	4809      	ldr	r0, [pc, #36]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f6e:	f7f4 fc7b 	bl	8005868 <assert_failed>
 8010f72:	e5e9      	b.n	8010b48 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010f74:	f241 5157 	movw	r1, #5463	; 0x1557
 8010f78:	4806      	ldr	r0, [pc, #24]	; (8010f94 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f7a:	f7f4 fc75 	bl	8005868 <assert_failed>
 8010f7e:	e66d      	b.n	8010c5c <HAL_TIM_ConfigClockSource+0x264>
 8010f80:	40010000 	.word	0x40010000
 8010f84:	40000400 	.word	0x40000400
 8010f88:	40010400 	.word	0x40010400
 8010f8c:	40000800 	.word	0x40000800
 8010f90:	40002000 	.word	0x40002000
 8010f94:	0802e51c 	.word	0x0802e51c
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010f98:	4803      	ldr	r0, [pc, #12]	; (8010fa8 <HAL_TIM_ConfigClockSource+0x5b0>)
 8010f9a:	f241 5150 	movw	r1, #5456	; 0x1550
 8010f9e:	f7f4 fc63 	bl	8005868 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	e5f3      	b.n	8010b8e <HAL_TIM_ConfigClockSource+0x196>
 8010fa6:	bf00      	nop
 8010fa8:	0802e51c 	.word	0x0802e51c

08010fac <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010fac:	6802      	ldr	r2, [r0, #0]
{
 8010fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010fb0:	4b39      	ldr	r3, [pc, #228]	; (8011098 <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 8010fb2:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010fb4:	4f39      	ldr	r7, [pc, #228]	; (801109c <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 8010fb6:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	bf18      	it	ne
 8010fbc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010fc0:	4e37      	ldr	r6, [pc, #220]	; (80110a0 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 8010fc2:	4938      	ldr	r1, [pc, #224]	; (80110a4 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 8010fc4:	bf14      	ite	ne
 8010fc6:	2301      	movne	r3, #1
 8010fc8:	2300      	moveq	r3, #0
 8010fca:	42ba      	cmp	r2, r7
 8010fcc:	bf0c      	ite	eq
 8010fce:	2300      	moveq	r3, #0
 8010fd0:	f003 0301 	andne.w	r3, r3, #1
 8010fd4:	42b2      	cmp	r2, r6
 8010fd6:	bf0c      	ite	eq
 8010fd8:	2300      	moveq	r3, #0
 8010fda:	f003 0301 	andne.w	r3, r3, #1
 8010fde:	428a      	cmp	r2, r1
 8010fe0:	bf0c      	ite	eq
 8010fe2:	2300      	moveq	r3, #0
 8010fe4:	f003 0301 	andne.w	r3, r3, #1
 8010fe8:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010fec:	428a      	cmp	r2, r1
 8010fee:	bf0c      	ite	eq
 8010ff0:	2300      	moveq	r3, #0
 8010ff2:	f003 0301 	andne.w	r3, r3, #1
 8010ff6:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010ffa:	428a      	cmp	r2, r1
 8010ffc:	bf0c      	ite	eq
 8010ffe:	2300      	moveq	r3, #0
 8011000:	f003 0301 	andne.w	r3, r3, #1
 8011004:	b113      	cbz	r3, 801100c <HAL_TIM_SlaveConfigSynchro+0x60>
 8011006:	4b28      	ldr	r3, [pc, #160]	; (80110a8 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 8011008:	429a      	cmp	r2, r3
 801100a:	d138      	bne.n	801107e <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 801100c:	682b      	ldr	r3, [r5, #0]
 801100e:	1f1a      	subs	r2, r3, #4
 8011010:	2a03      	cmp	r2, #3
 8011012:	d902      	bls.n	801101a <HAL_TIM_SlaveConfigSynchro+0x6e>
 8011014:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8011018:	d12b      	bne.n	8011072 <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 801101a:	686b      	ldr	r3, [r5, #4]
 801101c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8011020:	2b40      	cmp	r3, #64	; 0x40
 8011022:	d000      	beq.n	8011026 <HAL_TIM_SlaveConfigSynchro+0x7a>
 8011024:	bb8b      	cbnz	r3, 801108a <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 8011026:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801102a:	2b01      	cmp	r3, #1
 801102c:	d01f      	beq.n	801106e <HAL_TIM_SlaveConfigSynchro+0xc2>
 801102e:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8011030:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8011032:	4629      	mov	r1, r5
 8011034:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 8011036:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 801103a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801103e:	f7ff f933 	bl	80102a8 <TIM_SlaveTimer_SetConfig>
 8011042:	b968      	cbnz	r0, 8011060 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8011044:	6823      	ldr	r3, [r4, #0]
 8011046:	68da      	ldr	r2, [r3, #12]
 8011048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801104c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 801104e:	68da      	ldr	r2, [r3, #12]
 8011050:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011054:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8011056:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801105a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 801105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 8011060:	2300      	movs	r3, #0
    return HAL_ERROR;
 8011062:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 8011064:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8011068:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 801106c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 801106e:	2002      	movs	r0, #2
}
 8011070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8011072:	f241 51f7 	movw	r1, #5623	; 0x15f7
 8011076:	480d      	ldr	r0, [pc, #52]	; (80110ac <HAL_TIM_SlaveConfigSynchro+0x100>)
 8011078:	f7f4 fbf6 	bl	8005868 <assert_failed>
 801107c:	e7cd      	b.n	801101a <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 801107e:	f241 51f6 	movw	r1, #5622	; 0x15f6
 8011082:	480a      	ldr	r0, [pc, #40]	; (80110ac <HAL_TIM_SlaveConfigSynchro+0x100>)
 8011084:	f7f4 fbf0 	bl	8005868 <assert_failed>
 8011088:	e7c0      	b.n	801100c <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 801108a:	f241 51f8 	movw	r1, #5624	; 0x15f8
 801108e:	4807      	ldr	r0, [pc, #28]	; (80110ac <HAL_TIM_SlaveConfigSynchro+0x100>)
 8011090:	f7f4 fbea 	bl	8005868 <assert_failed>
 8011094:	e7c7      	b.n	8011026 <HAL_TIM_SlaveConfigSynchro+0x7a>
 8011096:	bf00      	nop
 8011098:	40010000 	.word	0x40010000
 801109c:	40000400 	.word	0x40000400
 80110a0:	40000800 	.word	0x40000800
 80110a4:	40000c00 	.word	0x40000c00
 80110a8:	40001800 	.word	0x40001800
 80110ac:	0802e51c 	.word	0x0802e51c

080110b0 <HAL_TIM_OC_DelayElapsedCallback>:
 80110b0:	4770      	bx	lr
 80110b2:	bf00      	nop

080110b4 <TIM_DMACaptureCplt>:
{
 80110b4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80110b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80110b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110ba:	4283      	cmp	r3, r0
 80110bc:	d01e      	beq.n	80110fc <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80110be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80110c0:	4283      	cmp	r3, r0
 80110c2:	d00b      	beq.n	80110dc <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80110c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80110c6:	4283      	cmp	r3, r0
 80110c8:	d027      	beq.n	801111a <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80110ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80110cc:	4283      	cmp	r3, r0
 80110ce:	d02f      	beq.n	8011130 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7f3 fa67 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110d6:	2300      	movs	r3, #0
 80110d8:	7723      	strb	r3, [r4, #28]
}
 80110da:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80110dc:	2202      	movs	r2, #2
 80110de:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80110e0:	69db      	ldr	r3, [r3, #28]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d1f4      	bne.n	80110d0 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80110e6:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 80110e8:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80110ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80110ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 80110f2:	f7f3 fa57 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110f6:	2300      	movs	r3, #0
 80110f8:	7723      	strb	r3, [r4, #28]
}
 80110fa:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110fc:	2201      	movs	r2, #1
 80110fe:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8011100:	69db      	ldr	r3, [r3, #28]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1e4      	bne.n	80110d0 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011106:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 801110a:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801110c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 8011110:	f7f3 fa48 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011114:	2300      	movs	r3, #0
 8011116:	7723      	strb	r3, [r4, #28]
}
 8011118:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801111a:	2204      	movs	r2, #4
 801111c:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 801111e:	69db      	ldr	r3, [r3, #28]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d1d5      	bne.n	80110d0 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011124:	2301      	movs	r3, #1
 8011126:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801112a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 801112e:	e7cf      	b.n	80110d0 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011130:	2208      	movs	r2, #8
 8011132:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8011134:	69db      	ldr	r3, [r3, #28]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d1ca      	bne.n	80110d0 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801113a:	2301      	movs	r3, #1
 801113c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011140:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8011144:	e7c4      	b.n	80110d0 <TIM_DMACaptureCplt+0x1c>
 8011146:	bf00      	nop

08011148 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop

0801114c <TIM_DMACaptureHalfCplt>:
{
 801114c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801114e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011152:	4283      	cmp	r3, r0
 8011154:	d016      	beq.n	8011184 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011156:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011158:	4283      	cmp	r3, r0
 801115a:	d00b      	beq.n	8011174 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801115c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801115e:	4283      	cmp	r3, r0
 8011160:	d018      	beq.n	8011194 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011162:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011164:	4283      	cmp	r3, r0
 8011166:	d01d      	beq.n	80111a4 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8011168:	4620      	mov	r0, r4
 801116a:	f7ff ffed 	bl	8011148 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801116e:	2300      	movs	r3, #0
 8011170:	7723      	strb	r3, [r4, #28]
}
 8011172:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011174:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8011176:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011178:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801117a:	f7ff ffe5 	bl	8011148 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801117e:	2300      	movs	r3, #0
 8011180:	7723      	strb	r3, [r4, #28]
}
 8011182:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011184:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8011186:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011188:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801118a:	f7ff ffdd 	bl	8011148 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801118e:	2300      	movs	r3, #0
 8011190:	7723      	strb	r3, [r4, #28]
}
 8011192:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011194:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8011196:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011198:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801119a:	f7ff ffd5 	bl	8011148 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801119e:	2300      	movs	r3, #0
 80111a0:	7723      	strb	r3, [r4, #28]
}
 80111a2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111a4:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111a6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111a8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111aa:	f7ff ffcd 	bl	8011148 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111ae:	2300      	movs	r3, #0
 80111b0:	7723      	strb	r3, [r4, #28]
}
 80111b2:	bd10      	pop	{r4, pc}

080111b4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop

080111b8 <HAL_TIM_TriggerCallback>:
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop

080111bc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80111bc:	6803      	ldr	r3, [r0, #0]
 80111be:	691a      	ldr	r2, [r3, #16]
 80111c0:	0791      	lsls	r1, r2, #30
{
 80111c2:	b510      	push	{r4, lr}
 80111c4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80111c6:	d502      	bpl.n	80111ce <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80111c8:	68da      	ldr	r2, [r3, #12]
 80111ca:	0792      	lsls	r2, r2, #30
 80111cc:	d468      	bmi.n	80112a0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80111ce:	691a      	ldr	r2, [r3, #16]
 80111d0:	0752      	lsls	r2, r2, #29
 80111d2:	d502      	bpl.n	80111da <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80111d4:	68da      	ldr	r2, [r3, #12]
 80111d6:	0750      	lsls	r0, r2, #29
 80111d8:	d44f      	bmi.n	801127a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80111da:	691a      	ldr	r2, [r3, #16]
 80111dc:	0711      	lsls	r1, r2, #28
 80111de:	d502      	bpl.n	80111e6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80111e0:	68da      	ldr	r2, [r3, #12]
 80111e2:	0712      	lsls	r2, r2, #28
 80111e4:	d437      	bmi.n	8011256 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80111e6:	691a      	ldr	r2, [r3, #16]
 80111e8:	06d0      	lsls	r0, r2, #27
 80111ea:	d502      	bpl.n	80111f2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80111ec:	68da      	ldr	r2, [r3, #12]
 80111ee:	06d1      	lsls	r1, r2, #27
 80111f0:	d41e      	bmi.n	8011230 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80111f2:	691a      	ldr	r2, [r3, #16]
 80111f4:	07d2      	lsls	r2, r2, #31
 80111f6:	d502      	bpl.n	80111fe <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80111f8:	68da      	ldr	r2, [r3, #12]
 80111fa:	07d0      	lsls	r0, r2, #31
 80111fc:	d469      	bmi.n	80112d2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80111fe:	691a      	ldr	r2, [r3, #16]
 8011200:	0611      	lsls	r1, r2, #24
 8011202:	d502      	bpl.n	801120a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011204:	68da      	ldr	r2, [r3, #12]
 8011206:	0612      	lsls	r2, r2, #24
 8011208:	d46b      	bmi.n	80112e2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801120a:	691a      	ldr	r2, [r3, #16]
 801120c:	05d0      	lsls	r0, r2, #23
 801120e:	d502      	bpl.n	8011216 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011210:	68da      	ldr	r2, [r3, #12]
 8011212:	0611      	lsls	r1, r2, #24
 8011214:	d46d      	bmi.n	80112f2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011216:	691a      	ldr	r2, [r3, #16]
 8011218:	0652      	lsls	r2, r2, #25
 801121a:	d502      	bpl.n	8011222 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801121c:	68da      	ldr	r2, [r3, #12]
 801121e:	0650      	lsls	r0, r2, #25
 8011220:	d46f      	bmi.n	8011302 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011222:	691a      	ldr	r2, [r3, #16]
 8011224:	0691      	lsls	r1, r2, #26
 8011226:	d502      	bpl.n	801122e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011228:	68da      	ldr	r2, [r3, #12]
 801122a:	0692      	lsls	r2, r2, #26
 801122c:	d449      	bmi.n	80112c2 <HAL_TIM_IRQHandler+0x106>
}
 801122e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011230:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011234:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8011236:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011238:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801123a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801123c:	69db      	ldr	r3, [r3, #28]
 801123e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8011242:	d16f      	bne.n	8011324 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011244:	f7ff ff34 	bl	80110b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011248:	4620      	mov	r0, r4
 801124a:	f7ff ffb3 	bl	80111b4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801124e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011250:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011252:	7722      	strb	r2, [r4, #28]
 8011254:	e7cd      	b.n	80111f2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011256:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801125a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 801125c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801125e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011260:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011262:	69db      	ldr	r3, [r3, #28]
 8011264:	079b      	lsls	r3, r3, #30
 8011266:	d15a      	bne.n	801131e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011268:	f7ff ff22 	bl	80110b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801126c:	4620      	mov	r0, r4
 801126e:	f7ff ffa1 	bl	80111b4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011272:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011274:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011276:	7722      	strb	r2, [r4, #28]
 8011278:	e7b5      	b.n	80111e6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801127a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801127e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8011280:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011282:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011284:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011286:	699b      	ldr	r3, [r3, #24]
 8011288:	f413 7f40 	tst.w	r3, #768	; 0x300
 801128c:	d144      	bne.n	8011318 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801128e:	f7ff ff0f 	bl	80110b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011292:	4620      	mov	r0, r4
 8011294:	f7ff ff8e 	bl	80111b4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011298:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801129a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801129c:	7722      	strb	r2, [r4, #28]
 801129e:	e79c      	b.n	80111da <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80112a0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80112a4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80112a6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80112a8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80112aa:	699b      	ldr	r3, [r3, #24]
 80112ac:	0799      	lsls	r1, r3, #30
 80112ae:	d130      	bne.n	8011312 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80112b0:	f7ff fefe 	bl	80110b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112b4:	4620      	mov	r0, r4
 80112b6:	f7ff ff7d 	bl	80111b4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112ba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80112bc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112be:	7722      	strb	r2, [r4, #28]
 80112c0:	e785      	b.n	80111ce <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80112c2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80112c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80112c8:	611a      	str	r2, [r3, #16]
}
 80112ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80112ce:	f001 be53 	b.w	8012f78 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80112d2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80112d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80112d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80112da:	f7f3 f9cb 	bl	8004674 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80112de:	6823      	ldr	r3, [r4, #0]
 80112e0:	e78d      	b.n	80111fe <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80112e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80112e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80112e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80112ea:	f001 fe47 	bl	8012f7c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80112ee:	6823      	ldr	r3, [r4, #0]
 80112f0:	e78b      	b.n	801120a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80112f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80112f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80112f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80112fa:	f001 fe41 	bl	8012f80 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80112fe:	6823      	ldr	r3, [r4, #0]
 8011300:	e789      	b.n	8011216 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011302:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8011306:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011308:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801130a:	f7ff ff55 	bl	80111b8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801130e:	6823      	ldr	r3, [r4, #0]
 8011310:	e787      	b.n	8011222 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8011312:	f7f3 f947 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 8011316:	e7d0      	b.n	80112ba <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8011318:	f7f3 f944 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 801131c:	e7bc      	b.n	8011298 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 801131e:	f7f3 f941 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 8011322:	e7a6      	b.n	8011272 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8011324:	f7f3 f93e 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 8011328:	e791      	b.n	801124e <HAL_TIM_IRQHandler+0x92>
 801132a:	bf00      	nop

0801132c <HAL_TIM_ErrorCallback>:
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop

08011330 <TIM_DMAError>:
{
 8011330:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011332:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011336:	4283      	cmp	r3, r0
 8011338:	d01c      	beq.n	8011374 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801133a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801133c:	4283      	cmp	r3, r0
 801133e:	d00e      	beq.n	801135e <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011342:	4283      	cmp	r3, r0
 8011344:	d020      	beq.n	8011388 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011346:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011348:	4283      	cmp	r3, r0
 801134a:	d028      	beq.n	801139e <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 801134c:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 801134e:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 8011350:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8011354:	f7ff ffea 	bl	801132c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011358:	2300      	movs	r3, #0
 801135a:	7723      	strb	r3, [r4, #28]
}
 801135c:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801135e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011360:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 8011362:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011364:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011368:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 801136a:	f7ff ffdf 	bl	801132c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801136e:	2300      	movs	r3, #0
 8011370:	7723      	strb	r3, [r4, #28]
}
 8011372:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011374:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 8011376:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011378:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801137a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 801137e:	f7ff ffd5 	bl	801132c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011382:	2300      	movs	r3, #0
 8011384:	7723      	strb	r3, [r4, #28]
}
 8011386:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011388:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801138a:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 801138c:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801138e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011392:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8011394:	f7ff ffca 	bl	801132c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011398:	2300      	movs	r3, #0
 801139a:	7723      	strb	r3, [r4, #28]
}
 801139c:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801139e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80113a0:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 80113a2:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80113a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80113a8:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 80113aa:	f7ff ffbf 	bl	801132c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113ae:	2300      	movs	r3, #0
 80113b0:	7723      	strb	r3, [r4, #28]
}
 80113b2:	bd10      	pop	{r4, pc}

080113b4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80113b4:	4a3c      	ldr	r2, [pc, #240]	; (80114a8 <TIM_Base_SetConfig+0xf4>)
 80113b6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80113ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80113bc:	eba0 0202 	sub.w	r2, r0, r2
 80113c0:	fab2 f282 	clz	r2, r2
{
 80113c4:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80113c6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80113ca:	d010      	beq.n	80113ee <TIM_Base_SetConfig+0x3a>
 80113cc:	b97a      	cbnz	r2, 80113ee <TIM_Base_SetConfig+0x3a>
 80113ce:	4d37      	ldr	r5, [pc, #220]	; (80114ac <TIM_Base_SetConfig+0xf8>)
 80113d0:	4c37      	ldr	r4, [pc, #220]	; (80114b0 <TIM_Base_SetConfig+0xfc>)
 80113d2:	42a0      	cmp	r0, r4
 80113d4:	bf18      	it	ne
 80113d6:	42a8      	cmpne	r0, r5
 80113d8:	d12b      	bne.n	8011432 <TIM_Base_SetConfig+0x7e>
 80113da:	4c36      	ldr	r4, [pc, #216]	; (80114b4 <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80113dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80113e0:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80113e2:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 80113e4:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80113e6:	fab4 f484 	clz	r4, r4
 80113ea:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80113ec:	e008      	b.n	8011400 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 80113ee:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80113f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80113f4:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80113f6:	4c2f      	ldr	r4, [pc, #188]	; (80114b4 <TIM_Base_SetConfig+0x100>)
 80113f8:	1b04      	subs	r4, r0, r4
 80113fa:	fab4 f484 	clz	r4, r4
 80113fe:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011400:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8011402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011406:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011408:	694d      	ldr	r5, [r1, #20]
 801140a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801140e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8011410:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011412:	688b      	ldr	r3, [r1, #8]
 8011414:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011416:	680b      	ldr	r3, [r1, #0]
 8011418:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801141a:	b922      	cbnz	r2, 8011426 <TIM_Base_SetConfig+0x72>
 801141c:	b91c      	cbnz	r4, 8011426 <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 801141e:	2301      	movs	r3, #1
}
 8011420:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8011422:	6143      	str	r3, [r0, #20]
}
 8011424:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8011426:	690b      	ldr	r3, [r1, #16]
 8011428:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 801142a:	2301      	movs	r3, #1
}
 801142c:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 801142e:	6143      	str	r3, [r0, #20]
}
 8011430:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011432:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8011436:	42a0      	cmp	r0, r4
 8011438:	d024      	beq.n	8011484 <TIM_Base_SetConfig+0xd0>
 801143a:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 801143e:	42a0      	cmp	r0, r4
 8011440:	d020      	beq.n	8011484 <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011442:	4c1d      	ldr	r4, [pc, #116]	; (80114b8 <TIM_Base_SetConfig+0x104>)
 8011444:	4d1d      	ldr	r5, [pc, #116]	; (80114bc <TIM_Base_SetConfig+0x108>)
 8011446:	42a0      	cmp	r0, r4
 8011448:	bf18      	it	ne
 801144a:	42a8      	cmpne	r0, r5
 801144c:	bf0c      	ite	eq
 801144e:	2401      	moveq	r4, #1
 8011450:	2400      	movne	r4, #0
 8011452:	d027      	beq.n	80114a4 <TIM_Base_SetConfig+0xf0>
 8011454:	4e1a      	ldr	r6, [pc, #104]	; (80114c0 <TIM_Base_SetConfig+0x10c>)
 8011456:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 801145a:	42a8      	cmp	r0, r5
 801145c:	bf18      	it	ne
 801145e:	42b0      	cmpne	r0, r6
 8011460:	d0ce      	beq.n	8011400 <TIM_Base_SetConfig+0x4c>
 8011462:	4c18      	ldr	r4, [pc, #96]	; (80114c4 <TIM_Base_SetConfig+0x110>)
 8011464:	42a0      	cmp	r0, r4
 8011466:	d01d      	beq.n	80114a4 <TIM_Base_SetConfig+0xf0>
 8011468:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 801146c:	42a0      	cmp	r0, r4
 801146e:	d019      	beq.n	80114a4 <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011470:	694d      	ldr	r5, [r1, #20]
 8011472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011476:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8011478:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801147a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 801147c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801147e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011480:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011482:	e7cc      	b.n	801141e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8011484:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801148a:	4c0a      	ldr	r4, [pc, #40]	; (80114b4 <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 801148c:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801148e:	4d0e      	ldr	r5, [pc, #56]	; (80114c8 <TIM_Base_SetConfig+0x114>)
 8011490:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011492:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011494:	fab4 f484 	clz	r4, r4
 8011498:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801149c:	d0b0      	beq.n	8011400 <TIM_Base_SetConfig+0x4c>
 801149e:	2c00      	cmp	r4, #0
 80114a0:	d1ae      	bne.n	8011400 <TIM_Base_SetConfig+0x4c>
 80114a2:	e7ce      	b.n	8011442 <TIM_Base_SetConfig+0x8e>
 80114a4:	2400      	movs	r4, #0
 80114a6:	e7ab      	b.n	8011400 <TIM_Base_SetConfig+0x4c>
 80114a8:	40010000 	.word	0x40010000
 80114ac:	40000400 	.word	0x40000400
 80114b0:	40000800 	.word	0x40000800
 80114b4:	40010400 	.word	0x40010400
 80114b8:	40014400 	.word	0x40014400
 80114bc:	40014000 	.word	0x40014000
 80114c0:	40014800 	.word	0x40014800
 80114c4:	40001c00 	.word	0x40001c00
 80114c8:	40000c00 	.word	0x40000c00

080114cc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80114cc:	2800      	cmp	r0, #0
 80114ce:	f000 80b8 	beq.w	8011642 <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80114d2:	6802      	ldr	r2, [r0, #0]
 80114d4:	4b5f      	ldr	r3, [pc, #380]	; (8011654 <HAL_TIM_Base_Init+0x188>)
 80114d6:	4960      	ldr	r1, [pc, #384]	; (8011658 <HAL_TIM_Base_Init+0x18c>)
 80114d8:	429a      	cmp	r2, r3
 80114da:	bf18      	it	ne
 80114dc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 80114e0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80114e2:	bf14      	ite	ne
 80114e4:	2301      	movne	r3, #1
 80114e6:	2300      	moveq	r3, #0
 80114e8:	4604      	mov	r4, r0
 80114ea:	485c      	ldr	r0, [pc, #368]	; (801165c <HAL_TIM_Base_Init+0x190>)
 80114ec:	4282      	cmp	r2, r0
 80114ee:	bf0c      	ite	eq
 80114f0:	2300      	moveq	r3, #0
 80114f2:	f003 0301 	andne.w	r3, r3, #1
 80114f6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80114fa:	428a      	cmp	r2, r1
 80114fc:	bf0c      	ite	eq
 80114fe:	2300      	moveq	r3, #0
 8011500:	f003 0301 	andne.w	r3, r3, #1
 8011504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011508:	4282      	cmp	r2, r0
 801150a:	bf0c      	ite	eq
 801150c:	2300      	moveq	r3, #0
 801150e:	f003 0301 	andne.w	r3, r3, #1
 8011512:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011516:	428a      	cmp	r2, r1
 8011518:	bf0c      	ite	eq
 801151a:	2300      	moveq	r3, #0
 801151c:	f003 0301 	andne.w	r3, r3, #1
 8011520:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8011524:	4282      	cmp	r2, r0
 8011526:	bf0c      	ite	eq
 8011528:	2300      	moveq	r3, #0
 801152a:	f003 0301 	andne.w	r3, r3, #1
 801152e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8011532:	428a      	cmp	r2, r1
 8011534:	bf0c      	ite	eq
 8011536:	2300      	moveq	r3, #0
 8011538:	f003 0301 	andne.w	r3, r3, #1
 801153c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8011540:	4282      	cmp	r2, r0
 8011542:	bf0c      	ite	eq
 8011544:	2300      	moveq	r3, #0
 8011546:	f003 0301 	andne.w	r3, r3, #1
 801154a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801154e:	428a      	cmp	r2, r1
 8011550:	bf0c      	ite	eq
 8011552:	2300      	moveq	r3, #0
 8011554:	f003 0301 	andne.w	r3, r3, #1
 8011558:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 801155c:	4282      	cmp	r2, r0
 801155e:	bf0c      	ite	eq
 8011560:	2300      	moveq	r3, #0
 8011562:	f003 0301 	andne.w	r3, r3, #1
 8011566:	428a      	cmp	r2, r1
 8011568:	bf0c      	ite	eq
 801156a:	2300      	moveq	r3, #0
 801156c:	f003 0301 	andne.w	r3, r3, #1
 8011570:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011574:	428a      	cmp	r2, r1
 8011576:	bf0c      	ite	eq
 8011578:	2300      	moveq	r3, #0
 801157a:	f003 0301 	andne.w	r3, r3, #1
 801157e:	b113      	cbz	r3, 8011586 <HAL_TIM_Base_Init+0xba>
 8011580:	4b37      	ldr	r3, [pc, #220]	; (8011660 <HAL_TIM_Base_Init+0x194>)
 8011582:	429a      	cmp	r2, r3
 8011584:	d15f      	bne.n	8011646 <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011586:	68a3      	ldr	r3, [r4, #8]
 8011588:	f023 0210 	bic.w	r2, r3, #16
 801158c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011590:	2920      	cmp	r1, #32
 8011592:	bf18      	it	ne
 8011594:	2a00      	cmpne	r2, #0
 8011596:	d001      	beq.n	801159c <HAL_TIM_Base_Init+0xd0>
 8011598:	2b40      	cmp	r3, #64	; 0x40
 801159a:	d14c      	bne.n	8011636 <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801159c:	6923      	ldr	r3, [r4, #16]
 801159e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80115a2:	d002      	beq.n	80115aa <HAL_TIM_Base_Init+0xde>
 80115a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115a8:	d12b      	bne.n	8011602 <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80115aa:	69a3      	ldr	r3, [r4, #24]
 80115ac:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80115b0:	d130      	bne.n	8011614 <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80115b2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80115b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80115ba:	b3b3      	cbz	r3, 801162a <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80115bc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80115be:	2302      	movs	r3, #2
 80115c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80115c4:	f851 0b04 	ldr.w	r0, [r1], #4
 80115c8:	f7ff fef4 	bl	80113b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80115cc:	2301      	movs	r3, #1
  return HAL_OK;
 80115ce:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80115d0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80115d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80115d8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80115dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80115e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80115e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80115ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80115f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80115f4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80115f8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80115fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011600:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011602:	f44f 718c 	mov.w	r1, #280	; 0x118
 8011606:	4817      	ldr	r0, [pc, #92]	; (8011664 <HAL_TIM_Base_Init+0x198>)
 8011608:	f7f4 f92e 	bl	8005868 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801160c:	69a3      	ldr	r3, [r4, #24]
 801160e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011612:	d0ce      	beq.n	80115b2 <HAL_TIM_Base_Init+0xe6>
 8011614:	f240 1119 	movw	r1, #281	; 0x119
 8011618:	4812      	ldr	r0, [pc, #72]	; (8011664 <HAL_TIM_Base_Init+0x198>)
 801161a:	f7f4 f925 	bl	8005868 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 801161e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011622:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011626:	2b00      	cmp	r3, #0
 8011628:	d1c8      	bne.n	80115bc <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 801162a:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 801162c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8011630:	f7f6 f924 	bl	800787c <HAL_TIM_Base_MspInit>
 8011634:	e7c2      	b.n	80115bc <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011636:	f240 1117 	movw	r1, #279	; 0x117
 801163a:	480a      	ldr	r0, [pc, #40]	; (8011664 <HAL_TIM_Base_Init+0x198>)
 801163c:	f7f4 f914 	bl	8005868 <assert_failed>
 8011640:	e7ac      	b.n	801159c <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 8011642:	2001      	movs	r0, #1
}
 8011644:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011646:	f44f 718b 	mov.w	r1, #278	; 0x116
 801164a:	4806      	ldr	r0, [pc, #24]	; (8011664 <HAL_TIM_Base_Init+0x198>)
 801164c:	f7f4 f90c 	bl	8005868 <assert_failed>
 8011650:	e799      	b.n	8011586 <HAL_TIM_Base_Init+0xba>
 8011652:	bf00      	nop
 8011654:	40010000 	.word	0x40010000
 8011658:	40000800 	.word	0x40000800
 801165c:	40000400 	.word	0x40000400
 8011660:	40002000 	.word	0x40002000
 8011664:	0802e51c 	.word	0x0802e51c

08011668 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8011668:	2800      	cmp	r0, #0
 801166a:	f000 80b8 	beq.w	80117de <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801166e:	6802      	ldr	r2, [r0, #0]
 8011670:	4b5f      	ldr	r3, [pc, #380]	; (80117f0 <HAL_TIM_OC_Init+0x188>)
 8011672:	4960      	ldr	r1, [pc, #384]	; (80117f4 <HAL_TIM_OC_Init+0x18c>)
 8011674:	429a      	cmp	r2, r3
 8011676:	bf18      	it	ne
 8011678:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 801167c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801167e:	bf14      	ite	ne
 8011680:	2301      	movne	r3, #1
 8011682:	2300      	moveq	r3, #0
 8011684:	4604      	mov	r4, r0
 8011686:	485c      	ldr	r0, [pc, #368]	; (80117f8 <HAL_TIM_OC_Init+0x190>)
 8011688:	4282      	cmp	r2, r0
 801168a:	bf0c      	ite	eq
 801168c:	2300      	moveq	r3, #0
 801168e:	f003 0301 	andne.w	r3, r3, #1
 8011692:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011696:	428a      	cmp	r2, r1
 8011698:	bf0c      	ite	eq
 801169a:	2300      	moveq	r3, #0
 801169c:	f003 0301 	andne.w	r3, r3, #1
 80116a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80116a4:	4282      	cmp	r2, r0
 80116a6:	bf0c      	ite	eq
 80116a8:	2300      	moveq	r3, #0
 80116aa:	f003 0301 	andne.w	r3, r3, #1
 80116ae:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80116b2:	428a      	cmp	r2, r1
 80116b4:	bf0c      	ite	eq
 80116b6:	2300      	moveq	r3, #0
 80116b8:	f003 0301 	andne.w	r3, r3, #1
 80116bc:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80116c0:	4282      	cmp	r2, r0
 80116c2:	bf0c      	ite	eq
 80116c4:	2300      	moveq	r3, #0
 80116c6:	f003 0301 	andne.w	r3, r3, #1
 80116ca:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80116ce:	428a      	cmp	r2, r1
 80116d0:	bf0c      	ite	eq
 80116d2:	2300      	moveq	r3, #0
 80116d4:	f003 0301 	andne.w	r3, r3, #1
 80116d8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80116dc:	4282      	cmp	r2, r0
 80116de:	bf0c      	ite	eq
 80116e0:	2300      	moveq	r3, #0
 80116e2:	f003 0301 	andne.w	r3, r3, #1
 80116e6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80116ea:	428a      	cmp	r2, r1
 80116ec:	bf0c      	ite	eq
 80116ee:	2300      	moveq	r3, #0
 80116f0:	f003 0301 	andne.w	r3, r3, #1
 80116f4:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80116f8:	4282      	cmp	r2, r0
 80116fa:	bf0c      	ite	eq
 80116fc:	2300      	moveq	r3, #0
 80116fe:	f003 0301 	andne.w	r3, r3, #1
 8011702:	428a      	cmp	r2, r1
 8011704:	bf0c      	ite	eq
 8011706:	2300      	moveq	r3, #0
 8011708:	f003 0301 	andne.w	r3, r3, #1
 801170c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011710:	428a      	cmp	r2, r1
 8011712:	bf0c      	ite	eq
 8011714:	2300      	moveq	r3, #0
 8011716:	f003 0301 	andne.w	r3, r3, #1
 801171a:	b113      	cbz	r3, 8011722 <HAL_TIM_OC_Init+0xba>
 801171c:	4b37      	ldr	r3, [pc, #220]	; (80117fc <HAL_TIM_OC_Init+0x194>)
 801171e:	429a      	cmp	r2, r3
 8011720:	d15f      	bne.n	80117e2 <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011722:	68a3      	ldr	r3, [r4, #8]
 8011724:	f023 0210 	bic.w	r2, r3, #16
 8011728:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 801172c:	2920      	cmp	r1, #32
 801172e:	bf18      	it	ne
 8011730:	2a00      	cmpne	r2, #0
 8011732:	d001      	beq.n	8011738 <HAL_TIM_OC_Init+0xd0>
 8011734:	2b40      	cmp	r3, #64	; 0x40
 8011736:	d14c      	bne.n	80117d2 <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011738:	6923      	ldr	r3, [r4, #16]
 801173a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801173e:	d002      	beq.n	8011746 <HAL_TIM_OC_Init+0xde>
 8011740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011744:	d12b      	bne.n	801179e <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011746:	69a3      	ldr	r3, [r4, #24]
 8011748:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801174c:	d130      	bne.n	80117b0 <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801174e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011756:	b3b3      	cbz	r3, 80117c6 <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011758:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 801175a:	2302      	movs	r3, #2
 801175c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011760:	f851 0b04 	ldr.w	r0, [r1], #4
 8011764:	f7ff fe26 	bl	80113b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011768:	2301      	movs	r3, #1
  return HAL_OK;
 801176a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801176c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011770:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011774:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8011778:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801177c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011788:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801178c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011790:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011794:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011798:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 801179c:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801179e:	f240 2197 	movw	r1, #663	; 0x297
 80117a2:	4817      	ldr	r0, [pc, #92]	; (8011800 <HAL_TIM_OC_Init+0x198>)
 80117a4:	f7f4 f860 	bl	8005868 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80117a8:	69a3      	ldr	r3, [r4, #24]
 80117aa:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80117ae:	d0ce      	beq.n	801174e <HAL_TIM_OC_Init+0xe6>
 80117b0:	f44f 7126 	mov.w	r1, #664	; 0x298
 80117b4:	4812      	ldr	r0, [pc, #72]	; (8011800 <HAL_TIM_OC_Init+0x198>)
 80117b6:	f7f4 f857 	bl	8005868 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80117ba:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80117be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d1c8      	bne.n	8011758 <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 80117c6:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80117c8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80117cc:	f7ff f90e 	bl	80109ec <HAL_TIM_OC_MspInit>
 80117d0:	e7c2      	b.n	8011758 <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80117d2:	f240 2196 	movw	r1, #662	; 0x296
 80117d6:	480a      	ldr	r0, [pc, #40]	; (8011800 <HAL_TIM_OC_Init+0x198>)
 80117d8:	f7f4 f846 	bl	8005868 <assert_failed>
 80117dc:	e7ac      	b.n	8011738 <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 80117de:	2001      	movs	r0, #1
}
 80117e0:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80117e2:	f240 2195 	movw	r1, #661	; 0x295
 80117e6:	4806      	ldr	r0, [pc, #24]	; (8011800 <HAL_TIM_OC_Init+0x198>)
 80117e8:	f7f4 f83e 	bl	8005868 <assert_failed>
 80117ec:	e799      	b.n	8011722 <HAL_TIM_OC_Init+0xba>
 80117ee:	bf00      	nop
 80117f0:	40010000 	.word	0x40010000
 80117f4:	40000800 	.word	0x40000800
 80117f8:	40000400 	.word	0x40000400
 80117fc:	40002000 	.word	0x40002000
 8011800:	0802e51c 	.word	0x0802e51c

08011804 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8011804:	2800      	cmp	r0, #0
 8011806:	f000 80b8 	beq.w	801197a <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801180a:	6802      	ldr	r2, [r0, #0]
 801180c:	4b5f      	ldr	r3, [pc, #380]	; (801198c <HAL_TIM_PWM_Init+0x188>)
 801180e:	4960      	ldr	r1, [pc, #384]	; (8011990 <HAL_TIM_PWM_Init+0x18c>)
 8011810:	429a      	cmp	r2, r3
 8011812:	bf18      	it	ne
 8011814:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8011818:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801181a:	bf14      	ite	ne
 801181c:	2301      	movne	r3, #1
 801181e:	2300      	moveq	r3, #0
 8011820:	4604      	mov	r4, r0
 8011822:	485c      	ldr	r0, [pc, #368]	; (8011994 <HAL_TIM_PWM_Init+0x190>)
 8011824:	4282      	cmp	r2, r0
 8011826:	bf0c      	ite	eq
 8011828:	2300      	moveq	r3, #0
 801182a:	f003 0301 	andne.w	r3, r3, #1
 801182e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011832:	428a      	cmp	r2, r1
 8011834:	bf0c      	ite	eq
 8011836:	2300      	moveq	r3, #0
 8011838:	f003 0301 	andne.w	r3, r3, #1
 801183c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011840:	4282      	cmp	r2, r0
 8011842:	bf0c      	ite	eq
 8011844:	2300      	moveq	r3, #0
 8011846:	f003 0301 	andne.w	r3, r3, #1
 801184a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801184e:	428a      	cmp	r2, r1
 8011850:	bf0c      	ite	eq
 8011852:	2300      	moveq	r3, #0
 8011854:	f003 0301 	andne.w	r3, r3, #1
 8011858:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 801185c:	4282      	cmp	r2, r0
 801185e:	bf0c      	ite	eq
 8011860:	2300      	moveq	r3, #0
 8011862:	f003 0301 	andne.w	r3, r3, #1
 8011866:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 801186a:	428a      	cmp	r2, r1
 801186c:	bf0c      	ite	eq
 801186e:	2300      	moveq	r3, #0
 8011870:	f003 0301 	andne.w	r3, r3, #1
 8011874:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8011878:	4282      	cmp	r2, r0
 801187a:	bf0c      	ite	eq
 801187c:	2300      	moveq	r3, #0
 801187e:	f003 0301 	andne.w	r3, r3, #1
 8011882:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011886:	428a      	cmp	r2, r1
 8011888:	bf0c      	ite	eq
 801188a:	2300      	moveq	r3, #0
 801188c:	f003 0301 	andne.w	r3, r3, #1
 8011890:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8011894:	4282      	cmp	r2, r0
 8011896:	bf0c      	ite	eq
 8011898:	2300      	moveq	r3, #0
 801189a:	f003 0301 	andne.w	r3, r3, #1
 801189e:	428a      	cmp	r2, r1
 80118a0:	bf0c      	ite	eq
 80118a2:	2300      	moveq	r3, #0
 80118a4:	f003 0301 	andne.w	r3, r3, #1
 80118a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80118ac:	428a      	cmp	r2, r1
 80118ae:	bf0c      	ite	eq
 80118b0:	2300      	moveq	r3, #0
 80118b2:	f003 0301 	andne.w	r3, r3, #1
 80118b6:	b113      	cbz	r3, 80118be <HAL_TIM_PWM_Init+0xba>
 80118b8:	4b37      	ldr	r3, [pc, #220]	; (8011998 <HAL_TIM_PWM_Init+0x194>)
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d15f      	bne.n	801197e <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80118be:	68a3      	ldr	r3, [r4, #8]
 80118c0:	f023 0210 	bic.w	r2, r3, #16
 80118c4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80118c8:	2920      	cmp	r1, #32
 80118ca:	bf18      	it	ne
 80118cc:	2a00      	cmpne	r2, #0
 80118ce:	d001      	beq.n	80118d4 <HAL_TIM_PWM_Init+0xd0>
 80118d0:	2b40      	cmp	r3, #64	; 0x40
 80118d2:	d14c      	bne.n	801196e <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80118da:	d002      	beq.n	80118e2 <HAL_TIM_PWM_Init+0xde>
 80118dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118e0:	d12b      	bne.n	801193a <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80118e2:	69a3      	ldr	r3, [r4, #24]
 80118e4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80118e8:	d130      	bne.n	801194c <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80118ea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80118ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80118f2:	b3b3      	cbz	r3, 8011962 <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80118f4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80118f6:	2302      	movs	r3, #2
 80118f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80118fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8011900:	f7ff fd58 	bl	80113b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011904:	2301      	movs	r3, #1
  return HAL_OK;
 8011906:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011908:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801190c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011910:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8011914:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011918:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801191c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011924:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801192c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011930:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011934:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011938:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801193a:	f240 5132 	movw	r1, #1330	; 0x532
 801193e:	4817      	ldr	r0, [pc, #92]	; (801199c <HAL_TIM_PWM_Init+0x198>)
 8011940:	f7f3 ff92 	bl	8005868 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011944:	69a3      	ldr	r3, [r4, #24]
 8011946:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801194a:	d0ce      	beq.n	80118ea <HAL_TIM_PWM_Init+0xe6>
 801194c:	f240 5133 	movw	r1, #1331	; 0x533
 8011950:	4812      	ldr	r0, [pc, #72]	; (801199c <HAL_TIM_PWM_Init+0x198>)
 8011952:	f7f3 ff89 	bl	8005868 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011956:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801195a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1c8      	bne.n	80118f4 <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 8011962:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011964:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8011968:	f7ff f842 	bl	80109f0 <HAL_TIM_PWM_MspInit>
 801196c:	e7c2      	b.n	80118f4 <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801196e:	f240 5131 	movw	r1, #1329	; 0x531
 8011972:	480a      	ldr	r0, [pc, #40]	; (801199c <HAL_TIM_PWM_Init+0x198>)
 8011974:	f7f3 ff78 	bl	8005868 <assert_failed>
 8011978:	e7ac      	b.n	80118d4 <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 801197a:	2001      	movs	r0, #1
}
 801197c:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801197e:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 8011982:	4806      	ldr	r0, [pc, #24]	; (801199c <HAL_TIM_PWM_Init+0x198>)
 8011984:	f7f3 ff70 	bl	8005868 <assert_failed>
 8011988:	e799      	b.n	80118be <HAL_TIM_PWM_Init+0xba>
 801198a:	bf00      	nop
 801198c:	40010000 	.word	0x40010000
 8011990:	40000800 	.word	0x40000800
 8011994:	40000400 	.word	0x40000400
 8011998:	40002000 	.word	0x40002000
 801199c:	0802e51c 	.word	0x0802e51c

080119a0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80119a0:	2800      	cmp	r0, #0
 80119a2:	f000 80b8 	beq.w	8011b16 <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80119a6:	6802      	ldr	r2, [r0, #0]
 80119a8:	4b5f      	ldr	r3, [pc, #380]	; (8011b28 <HAL_TIM_IC_Init+0x188>)
 80119aa:	4960      	ldr	r1, [pc, #384]	; (8011b2c <HAL_TIM_IC_Init+0x18c>)
 80119ac:	429a      	cmp	r2, r3
 80119ae:	bf18      	it	ne
 80119b0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 80119b4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80119b6:	bf14      	ite	ne
 80119b8:	2301      	movne	r3, #1
 80119ba:	2300      	moveq	r3, #0
 80119bc:	4604      	mov	r4, r0
 80119be:	485c      	ldr	r0, [pc, #368]	; (8011b30 <HAL_TIM_IC_Init+0x190>)
 80119c0:	4282      	cmp	r2, r0
 80119c2:	bf0c      	ite	eq
 80119c4:	2300      	moveq	r3, #0
 80119c6:	f003 0301 	andne.w	r3, r3, #1
 80119ca:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80119ce:	428a      	cmp	r2, r1
 80119d0:	bf0c      	ite	eq
 80119d2:	2300      	moveq	r3, #0
 80119d4:	f003 0301 	andne.w	r3, r3, #1
 80119d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80119dc:	4282      	cmp	r2, r0
 80119de:	bf0c      	ite	eq
 80119e0:	2300      	moveq	r3, #0
 80119e2:	f003 0301 	andne.w	r3, r3, #1
 80119e6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80119ea:	428a      	cmp	r2, r1
 80119ec:	bf0c      	ite	eq
 80119ee:	2300      	moveq	r3, #0
 80119f0:	f003 0301 	andne.w	r3, r3, #1
 80119f4:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80119f8:	4282      	cmp	r2, r0
 80119fa:	bf0c      	ite	eq
 80119fc:	2300      	moveq	r3, #0
 80119fe:	f003 0301 	andne.w	r3, r3, #1
 8011a02:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8011a06:	428a      	cmp	r2, r1
 8011a08:	bf0c      	ite	eq
 8011a0a:	2300      	moveq	r3, #0
 8011a0c:	f003 0301 	andne.w	r3, r3, #1
 8011a10:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8011a14:	4282      	cmp	r2, r0
 8011a16:	bf0c      	ite	eq
 8011a18:	2300      	moveq	r3, #0
 8011a1a:	f003 0301 	andne.w	r3, r3, #1
 8011a1e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011a22:	428a      	cmp	r2, r1
 8011a24:	bf0c      	ite	eq
 8011a26:	2300      	moveq	r3, #0
 8011a28:	f003 0301 	andne.w	r3, r3, #1
 8011a2c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8011a30:	4282      	cmp	r2, r0
 8011a32:	bf0c      	ite	eq
 8011a34:	2300      	moveq	r3, #0
 8011a36:	f003 0301 	andne.w	r3, r3, #1
 8011a3a:	428a      	cmp	r2, r1
 8011a3c:	bf0c      	ite	eq
 8011a3e:	2300      	moveq	r3, #0
 8011a40:	f003 0301 	andne.w	r3, r3, #1
 8011a44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011a48:	428a      	cmp	r2, r1
 8011a4a:	bf0c      	ite	eq
 8011a4c:	2300      	moveq	r3, #0
 8011a4e:	f003 0301 	andne.w	r3, r3, #1
 8011a52:	b113      	cbz	r3, 8011a5a <HAL_TIM_IC_Init+0xba>
 8011a54:	4b37      	ldr	r3, [pc, #220]	; (8011b34 <HAL_TIM_IC_Init+0x194>)
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d15f      	bne.n	8011b1a <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011a5a:	68a3      	ldr	r3, [r4, #8]
 8011a5c:	f023 0210 	bic.w	r2, r3, #16
 8011a60:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011a64:	2920      	cmp	r1, #32
 8011a66:	bf18      	it	ne
 8011a68:	2a00      	cmpne	r2, #0
 8011a6a:	d001      	beq.n	8011a70 <HAL_TIM_IC_Init+0xd0>
 8011a6c:	2b40      	cmp	r3, #64	; 0x40
 8011a6e:	d14c      	bne.n	8011b0a <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011a70:	6923      	ldr	r3, [r4, #16]
 8011a72:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011a76:	d002      	beq.n	8011a7e <HAL_TIM_IC_Init+0xde>
 8011a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a7c:	d12b      	bne.n	8011ad6 <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011a7e:	69a3      	ldr	r3, [r4, #24]
 8011a80:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011a84:	d130      	bne.n	8011ae8 <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011a86:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011a8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011a8e:	b3b3      	cbz	r3, 8011afe <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a90:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8011a92:	2302      	movs	r3, #2
 8011a94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a98:	f851 0b04 	ldr.w	r0, [r1], #4
 8011a9c:	f7ff fc8a 	bl	80113b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011aa0:	2301      	movs	r3, #1
  return HAL_OK;
 8011aa2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011aa4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011aa8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011aac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8011ab0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011ab4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ac0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011ac4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ac8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011acc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011ad0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011ad4:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011ad6:	f240 71cc 	movw	r1, #1996	; 0x7cc
 8011ada:	4817      	ldr	r0, [pc, #92]	; (8011b38 <HAL_TIM_IC_Init+0x198>)
 8011adc:	f7f3 fec4 	bl	8005868 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011ae0:	69a3      	ldr	r3, [r4, #24]
 8011ae2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011ae6:	d0ce      	beq.n	8011a86 <HAL_TIM_IC_Init+0xe6>
 8011ae8:	f240 71cd 	movw	r1, #1997	; 0x7cd
 8011aec:	4812      	ldr	r0, [pc, #72]	; (8011b38 <HAL_TIM_IC_Init+0x198>)
 8011aee:	f7f3 febb 	bl	8005868 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011af2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011af6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d1c8      	bne.n	8011a90 <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 8011afe:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011b00:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8011b04:	f7fe ff76 	bl	80109f4 <HAL_TIM_IC_MspInit>
 8011b08:	e7c2      	b.n	8011a90 <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011b0a:	f240 71cb 	movw	r1, #1995	; 0x7cb
 8011b0e:	480a      	ldr	r0, [pc, #40]	; (8011b38 <HAL_TIM_IC_Init+0x198>)
 8011b10:	f7f3 feaa 	bl	8005868 <assert_failed>
 8011b14:	e7ac      	b.n	8011a70 <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 8011b16:	2001      	movs	r0, #1
}
 8011b18:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011b1a:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8011b1e:	4806      	ldr	r0, [pc, #24]	; (8011b38 <HAL_TIM_IC_Init+0x198>)
 8011b20:	f7f3 fea2 	bl	8005868 <assert_failed>
 8011b24:	e799      	b.n	8011a5a <HAL_TIM_IC_Init+0xba>
 8011b26:	bf00      	nop
 8011b28:	40010000 	.word	0x40010000
 8011b2c:	40000800 	.word	0x40000800
 8011b30:	40000400 	.word	0x40000400
 8011b34:	40002000 	.word	0x40002000
 8011b38:	0802e51c 	.word	0x0802e51c

08011b3c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011b3c:	6a03      	ldr	r3, [r0, #32]
 8011b3e:	f023 0310 	bic.w	r3, r3, #16
{
 8011b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011b46:	6203      	str	r3, [r0, #32]
{
 8011b48:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 8011b4a:	6a05      	ldr	r5, [r0, #32]
{
 8011b4c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 8011b4e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011b52:	4b29      	ldr	r3, [pc, #164]	; (8011bf8 <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 8011b54:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 8011b58:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011b5a:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011b5c:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011b5e:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011b62:	688b      	ldr	r3, [r1, #8]
 8011b64:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011b68:	4b24      	ldr	r3, [pc, #144]	; (8011bfc <TIM_OC2_SetConfig+0xc0>)
 8011b6a:	4298      	cmp	r0, r3
 8011b6c:	d00b      	beq.n	8011b86 <TIM_OC2_SetConfig+0x4a>
 8011b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b72:	4298      	cmp	r0, r3
 8011b74:	d007      	beq.n	8011b86 <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 8011b76:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8011b78:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8011b7c:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8011b7e:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8011b80:	6225      	str	r5, [r4, #32]
}
 8011b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011b86:	68f3      	ldr	r3, [r6, #12]
 8011b88:	f033 0208 	bics.w	r2, r3, #8
 8011b8c:	d123      	bne.n	8011bd6 <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8011b8e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011b92:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011b96:	69b3      	ldr	r3, [r6, #24]
 8011b98:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 8011b9c:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011ba0:	d120      	bne.n	8011be4 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011ba2:	6973      	ldr	r3, [r6, #20]
 8011ba4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011ba8:	d107      	bne.n	8011bba <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011baa:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011bae:	69b1      	ldr	r1, [r6, #24]
 8011bb0:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8011bb4:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8011bb8:	e7dd      	b.n	8011b76 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011bba:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 8011bbe:	4810      	ldr	r0, [pc, #64]	; (8011c00 <TIM_OC2_SetConfig+0xc4>)
 8011bc0:	f7f3 fe52 	bl	8005868 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011bc4:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011bc8:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011bca:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011bcc:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8011bd0:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8011bd4:	e7cf      	b.n	8011b76 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011bd6:	f641 31aa 	movw	r1, #7082	; 0x1baa
 8011bda:	4809      	ldr	r0, [pc, #36]	; (8011c00 <TIM_OC2_SetConfig+0xc4>)
 8011bdc:	f7f3 fe44 	bl	8005868 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011be0:	68f3      	ldr	r3, [r6, #12]
 8011be2:	e7d4      	b.n	8011b8e <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011be4:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 8011be8:	4805      	ldr	r0, [pc, #20]	; (8011c00 <TIM_OC2_SetConfig+0xc4>)
 8011bea:	f7f3 fe3d 	bl	8005868 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011bee:	6973      	ldr	r3, [r6, #20]
 8011bf0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011bf4:	d0d9      	beq.n	8011baa <TIM_OC2_SetConfig+0x6e>
 8011bf6:	e7e0      	b.n	8011bba <TIM_OC2_SetConfig+0x7e>
 8011bf8:	feff8cff 	.word	0xfeff8cff
 8011bfc:	40010000 	.word	0x40010000
 8011c00:	0802e51c 	.word	0x0802e51c

08011c04 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8011c04:	2a14      	cmp	r2, #20
{
 8011c06:	b570      	push	{r4, r5, r6, lr}
 8011c08:	4614      	mov	r4, r2
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8011c0e:	d937      	bls.n	8011c80 <HAL_TIM_OC_ConfigChannel+0x7c>
 8011c10:	2a3c      	cmp	r2, #60	; 0x3c
 8011c12:	d139      	bne.n	8011c88 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8011c14:	6833      	ldr	r3, [r6, #0]
 8011c16:	f023 0210 	bic.w	r2, r3, #16
 8011c1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8011c1e:	2a40      	cmp	r2, #64	; 0x40
 8011c20:	bf18      	it	ne
 8011c22:	2b00      	cmpne	r3, #0
 8011c24:	d003      	beq.n	8011c2e <HAL_TIM_OC_ConfigChannel+0x2a>
 8011c26:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011c2a:	f040 8138 	bne.w	8011e9e <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011c2e:	68b3      	ldr	r3, [r6, #8]
 8011c30:	f033 0302 	bics.w	r3, r3, #2
 8011c34:	d12e      	bne.n	8011c94 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8011c36:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	d033      	beq.n	8011ca6 <HAL_TIM_OC_ConfigChannel+0xa2>
 8011c3e:	2301      	movs	r3, #1
 8011c40:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8011c44:	2c14      	cmp	r4, #20
 8011c46:	d816      	bhi.n	8011c76 <HAL_TIM_OC_ConfigChannel+0x72>
 8011c48:	e8df f014 	tbh	[pc, r4, lsl #1]
 8011c4c:	0015002f 	.word	0x0015002f
 8011c50:	00150015 	.word	0x00150015
 8011c54:	00150080 	.word	0x00150080
 8011c58:	00150015 	.word	0x00150015
 8011c5c:	001500b5 	.word	0x001500b5
 8011c60:	00150015 	.word	0x00150015
 8011c64:	001500db 	.word	0x001500db
 8011c68:	00150015 	.word	0x00150015
 8011c6c:	00150101 	.word	0x00150101
 8011c70:	00150015 	.word	0x00150015
 8011c74:	010e      	.short	0x010e
 8011c76:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8011c78:	2300      	movs	r3, #0
 8011c7a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8011c7e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 8011c80:	4b98      	ldr	r3, [pc, #608]	; (8011ee4 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 8011c82:	40d3      	lsrs	r3, r2
 8011c84:	07db      	lsls	r3, r3, #31
 8011c86:	d4c5      	bmi.n	8011c14 <HAL_TIM_OC_ConfigChannel+0x10>
 8011c88:	f640 71df 	movw	r1, #4063	; 0xfdf
 8011c8c:	4896      	ldr	r0, [pc, #600]	; (8011ee8 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011c8e:	f7f3 fdeb 	bl	8005868 <assert_failed>
 8011c92:	e7bf      	b.n	8011c14 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011c94:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8011c98:	4893      	ldr	r0, [pc, #588]	; (8011ee8 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011c9a:	f7f3 fde5 	bl	8005868 <assert_failed>
  __HAL_LOCK(htim);
 8011c9e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	d1cb      	bne.n	8011c3e <HAL_TIM_OC_ConfigChannel+0x3a>
 8011ca6:	2002      	movs	r0, #2
}
 8011ca8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011caa:	6828      	ldr	r0, [r5, #0]
 8011cac:	4b8f      	ldr	r3, [pc, #572]	; (8011eec <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011cae:	4a90      	ldr	r2, [pc, #576]	; (8011ef0 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011cb0:	4298      	cmp	r0, r3
 8011cb2:	bf18      	it	ne
 8011cb4:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011cb8:	bf14      	ite	ne
 8011cba:	2301      	movne	r3, #1
 8011cbc:	2300      	moveq	r3, #0
 8011cbe:	4290      	cmp	r0, r2
 8011cc0:	bf0c      	ite	eq
 8011cc2:	2300      	moveq	r3, #0
 8011cc4:	f003 0301 	andne.w	r3, r3, #1
 8011cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011ccc:	4290      	cmp	r0, r2
 8011cce:	bf0c      	ite	eq
 8011cd0:	2300      	moveq	r3, #0
 8011cd2:	f003 0301 	andne.w	r3, r3, #1
 8011cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011cda:	4290      	cmp	r0, r2
 8011cdc:	bf0c      	ite	eq
 8011cde:	2300      	moveq	r3, #0
 8011ce0:	f003 0301 	andne.w	r3, r3, #1
 8011ce4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011ce8:	4290      	cmp	r0, r2
 8011cea:	bf0c      	ite	eq
 8011cec:	2300      	moveq	r3, #0
 8011cee:	f003 0301 	andne.w	r3, r3, #1
 8011cf2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011cf6:	4290      	cmp	r0, r2
 8011cf8:	bf0c      	ite	eq
 8011cfa:	2300      	moveq	r3, #0
 8011cfc:	f003 0301 	andne.w	r3, r3, #1
 8011d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d04:	4290      	cmp	r0, r2
 8011d06:	bf0c      	ite	eq
 8011d08:	2300      	moveq	r3, #0
 8011d0a:	f003 0301 	andne.w	r3, r3, #1
 8011d0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d12:	4290      	cmp	r0, r2
 8011d14:	bf0c      	ite	eq
 8011d16:	2300      	moveq	r3, #0
 8011d18:	f003 0301 	andne.w	r3, r3, #1
 8011d1c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8011d20:	4290      	cmp	r0, r2
 8011d22:	bf0c      	ite	eq
 8011d24:	2300      	moveq	r3, #0
 8011d26:	f003 0301 	andne.w	r3, r3, #1
 8011d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d2e:	4290      	cmp	r0, r2
 8011d30:	bf0c      	ite	eq
 8011d32:	2300      	moveq	r3, #0
 8011d34:	f003 0301 	andne.w	r3, r3, #1
 8011d38:	b11b      	cbz	r3, 8011d42 <HAL_TIM_OC_ConfigChannel+0x13e>
 8011d3a:	4b6e      	ldr	r3, [pc, #440]	; (8011ef4 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 8011d3c:	4298      	cmp	r0, r3
 8011d3e:	f040 80c9 	bne.w	8011ed4 <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011d42:	4631      	mov	r1, r6
 8011d44:	f7fe f9ac 	bl	80100a0 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011d48:	2000      	movs	r0, #0
      break;
 8011d4a:	e795      	b.n	8011c78 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011d4c:	6828      	ldr	r0, [r5, #0]
 8011d4e:	4b67      	ldr	r3, [pc, #412]	; (8011eec <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011d50:	4a67      	ldr	r2, [pc, #412]	; (8011ef0 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011d52:	4298      	cmp	r0, r3
 8011d54:	bf18      	it	ne
 8011d56:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011d5a:	bf14      	ite	ne
 8011d5c:	2301      	movne	r3, #1
 8011d5e:	2300      	moveq	r3, #0
 8011d60:	4290      	cmp	r0, r2
 8011d62:	bf0c      	ite	eq
 8011d64:	2300      	moveq	r3, #0
 8011d66:	f003 0301 	andne.w	r3, r3, #1
 8011d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d6e:	4290      	cmp	r0, r2
 8011d70:	bf0c      	ite	eq
 8011d72:	2300      	moveq	r3, #0
 8011d74:	f003 0301 	andne.w	r3, r3, #1
 8011d78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d7c:	4290      	cmp	r0, r2
 8011d7e:	bf0c      	ite	eq
 8011d80:	2300      	moveq	r3, #0
 8011d82:	f003 0301 	andne.w	r3, r3, #1
 8011d86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011d8a:	4290      	cmp	r0, r2
 8011d8c:	bf0c      	ite	eq
 8011d8e:	2300      	moveq	r3, #0
 8011d90:	f003 0301 	andne.w	r3, r3, #1
 8011d94:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011d98:	4290      	cmp	r0, r2
 8011d9a:	bf0c      	ite	eq
 8011d9c:	2300      	moveq	r3, #0
 8011d9e:	f003 0301 	andne.w	r3, r3, #1
 8011da2:	b11b      	cbz	r3, 8011dac <HAL_TIM_OC_ConfigChannel+0x1a8>
 8011da4:	4b54      	ldr	r3, [pc, #336]	; (8011ef8 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 8011da6:	4298      	cmp	r0, r3
 8011da8:	f040 808d 	bne.w	8011ec6 <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011dac:	4631      	mov	r1, r6
 8011dae:	f7ff fec5 	bl	8011b3c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011db2:	2000      	movs	r0, #0
      break;
 8011db4:	e760      	b.n	8011c78 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011db6:	6828      	ldr	r0, [r5, #0]
 8011db8:	4b4c      	ldr	r3, [pc, #304]	; (8011eec <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011dba:	4a4d      	ldr	r2, [pc, #308]	; (8011ef0 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011dbc:	4298      	cmp	r0, r3
 8011dbe:	bf18      	it	ne
 8011dc0:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011dc4:	bf14      	ite	ne
 8011dc6:	2301      	movne	r3, #1
 8011dc8:	2300      	moveq	r3, #0
 8011dca:	4290      	cmp	r0, r2
 8011dcc:	bf0c      	ite	eq
 8011dce:	2300      	moveq	r3, #0
 8011dd0:	f003 0301 	andne.w	r3, r3, #1
 8011dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011dd8:	4290      	cmp	r0, r2
 8011dda:	bf0c      	ite	eq
 8011ddc:	2300      	moveq	r3, #0
 8011dde:	f003 0301 	andne.w	r3, r3, #1
 8011de2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011de6:	4290      	cmp	r0, r2
 8011de8:	bf0c      	ite	eq
 8011dea:	2300      	moveq	r3, #0
 8011dec:	f003 0301 	andne.w	r3, r3, #1
 8011df0:	b113      	cbz	r3, 8011df8 <HAL_TIM_OC_ConfigChannel+0x1f4>
 8011df2:	4b42      	ldr	r3, [pc, #264]	; (8011efc <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8011df4:	4298      	cmp	r0, r3
 8011df6:	d15f      	bne.n	8011eb8 <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011df8:	4631      	mov	r1, r6
 8011dfa:	f7fe f9b1 	bl	8010160 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011dfe:	2000      	movs	r0, #0
      break;
 8011e00:	e73a      	b.n	8011c78 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011e02:	6828      	ldr	r0, [r5, #0]
 8011e04:	4b39      	ldr	r3, [pc, #228]	; (8011eec <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011e06:	4a3a      	ldr	r2, [pc, #232]	; (8011ef0 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011e08:	4298      	cmp	r0, r3
 8011e0a:	bf18      	it	ne
 8011e0c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011e10:	bf14      	ite	ne
 8011e12:	2301      	movne	r3, #1
 8011e14:	2300      	moveq	r3, #0
 8011e16:	4290      	cmp	r0, r2
 8011e18:	bf0c      	ite	eq
 8011e1a:	2300      	moveq	r3, #0
 8011e1c:	f003 0301 	andne.w	r3, r3, #1
 8011e20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e24:	4290      	cmp	r0, r2
 8011e26:	bf0c      	ite	eq
 8011e28:	2300      	moveq	r3, #0
 8011e2a:	f003 0301 	andne.w	r3, r3, #1
 8011e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e32:	4290      	cmp	r0, r2
 8011e34:	bf0c      	ite	eq
 8011e36:	2300      	moveq	r3, #0
 8011e38:	f003 0301 	andne.w	r3, r3, #1
 8011e3c:	b113      	cbz	r3, 8011e44 <HAL_TIM_OC_ConfigChannel+0x240>
 8011e3e:	4b2f      	ldr	r3, [pc, #188]	; (8011efc <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8011e40:	4298      	cmp	r0, r3
 8011e42:	d132      	bne.n	8011eaa <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011e44:	4631      	mov	r1, r6
 8011e46:	f7fe f9ef 	bl	8010228 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011e4a:	2000      	movs	r0, #0
      break;
 8011e4c:	e714      	b.n	8011c78 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8011e4e:	6828      	ldr	r0, [r5, #0]
 8011e50:	4b26      	ldr	r3, [pc, #152]	; (8011eec <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011e52:	4298      	cmp	r0, r3
 8011e54:	d003      	beq.n	8011e5e <HAL_TIM_OC_ConfigChannel+0x25a>
 8011e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e5a:	4298      	cmp	r0, r3
 8011e5c:	d118      	bne.n	8011e90 <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011e5e:	4631      	mov	r1, r6
 8011e60:	f7fe f8ca 	bl	800fff8 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011e64:	2000      	movs	r0, #0
      break;
 8011e66:	e707      	b.n	8011c78 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011e68:	6828      	ldr	r0, [r5, #0]
 8011e6a:	4b20      	ldr	r3, [pc, #128]	; (8011eec <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011e6c:	4298      	cmp	r0, r3
 8011e6e:	d003      	beq.n	8011e78 <HAL_TIM_OC_ConfigChannel+0x274>
 8011e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e74:	4298      	cmp	r0, r3
 8011e76:	d104      	bne.n	8011e82 <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011e78:	4631      	mov	r1, r6
 8011e7a:	f7fe f8e7 	bl	801004c <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011e7e:	2000      	movs	r0, #0
      break;
 8011e80:	e6fa      	b.n	8011c78 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011e82:	4819      	ldr	r0, [pc, #100]	; (8011ee8 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011e84:	f241 011d 	movw	r1, #4125	; 0x101d
 8011e88:	f7f3 fcee 	bl	8005868 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011e8c:	6828      	ldr	r0, [r5, #0]
 8011e8e:	e7f3      	b.n	8011e78 <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8011e90:	4815      	ldr	r0, [pc, #84]	; (8011ee8 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011e92:	f241 0113 	movw	r1, #4115	; 0x1013
 8011e96:	f7f3 fce7 	bl	8005868 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011e9a:	6828      	ldr	r0, [r5, #0]
 8011e9c:	e7df      	b.n	8011e5e <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8011e9e:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8011ea2:	4811      	ldr	r0, [pc, #68]	; (8011ee8 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011ea4:	f7f3 fce0 	bl	8005868 <assert_failed>
 8011ea8:	e6c1      	b.n	8011c2e <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011eaa:	480f      	ldr	r0, [pc, #60]	; (8011ee8 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011eac:	f241 0109 	movw	r1, #4105	; 0x1009
 8011eb0:	f7f3 fcda 	bl	8005868 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011eb4:	6828      	ldr	r0, [r5, #0]
 8011eb6:	e7c5      	b.n	8011e44 <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011eb8:	480b      	ldr	r0, [pc, #44]	; (8011ee8 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011eba:	f640 71ff 	movw	r1, #4095	; 0xfff
 8011ebe:	f7f3 fcd3 	bl	8005868 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011ec2:	6828      	ldr	r0, [r5, #0]
 8011ec4:	e798      	b.n	8011df8 <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011ec6:	4808      	ldr	r0, [pc, #32]	; (8011ee8 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011ec8:	f640 71f5 	movw	r1, #4085	; 0xff5
 8011ecc:	f7f3 fccc 	bl	8005868 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011ed0:	6828      	ldr	r0, [r5, #0]
 8011ed2:	e76b      	b.n	8011dac <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011ed4:	4804      	ldr	r0, [pc, #16]	; (8011ee8 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011ed6:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8011eda:	f7f3 fcc5 	bl	8005868 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011ede:	6828      	ldr	r0, [r5, #0]
 8011ee0:	e72f      	b.n	8011d42 <HAL_TIM_OC_ConfigChannel+0x13e>
 8011ee2:	bf00      	nop
 8011ee4:	00111111 	.word	0x00111111
 8011ee8:	0802e51c 	.word	0x0802e51c
 8011eec:	40010000 	.word	0x40010000
 8011ef0:	40000400 	.word	0x40000400
 8011ef4:	40002000 	.word	0x40002000
 8011ef8:	40001800 	.word	0x40001800
 8011efc:	40010400 	.word	0x40010400

08011f00 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8011f00:	2a14      	cmp	r2, #20
{
 8011f02:	b570      	push	{r4, r5, r6, lr}
 8011f04:	4616      	mov	r6, r2
 8011f06:	4605      	mov	r5, r0
 8011f08:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8011f0a:	d933      	bls.n	8011f74 <HAL_TIM_PWM_ConfigChannel+0x74>
 8011f0c:	2a3c      	cmp	r2, #60	; 0x3c
 8011f0e:	d135      	bne.n	8011f7c <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8011f10:	6822      	ldr	r2, [r4, #0]
 8011f12:	4b90      	ldr	r3, [pc, #576]	; (8012154 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8011f14:	4013      	ands	r3, r2
 8011f16:	2b60      	cmp	r3, #96	; 0x60
 8011f18:	d004      	beq.n	8011f24 <HAL_TIM_PWM_ConfigChannel+0x24>
 8011f1a:	f022 0210 	bic.w	r2, r2, #16
 8011f1e:	4b8e      	ldr	r3, [pc, #568]	; (8012158 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d147      	bne.n	8011fb4 <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011f24:	68a3      	ldr	r3, [r4, #8]
 8011f26:	f033 0302 	bics.w	r3, r3, #2
 8011f2a:	d13d      	bne.n	8011fa8 <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8011f2c:	6923      	ldr	r3, [r4, #16]
 8011f2e:	f033 0304 	bics.w	r3, r3, #4
 8011f32:	d12e      	bne.n	8011f92 <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8011f34:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d033      	beq.n	8011fa4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8011f42:	2e14      	cmp	r6, #20
 8011f44:	d820      	bhi.n	8011f88 <HAL_TIM_PWM_ConfigChannel+0x88>
 8011f46:	e8df f016 	tbh	[pc, r6, lsl #1]
 8011f4a:	00a7      	.short	0x00a7
 8011f4c:	001f001f 	.word	0x001f001f
 8011f50:	0115001f 	.word	0x0115001f
 8011f54:	001f001f 	.word	0x001f001f
 8011f58:	0157001f 	.word	0x0157001f
 8011f5c:	001f001f 	.word	0x001f001f
 8011f60:	0057001f 	.word	0x0057001f
 8011f64:	001f001f 	.word	0x001f001f
 8011f68:	008c001f 	.word	0x008c001f
 8011f6c:	001f001f 	.word	0x001f001f
 8011f70:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 8011f74:	4b79      	ldr	r3, [pc, #484]	; (801215c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8011f76:	40d3      	lsrs	r3, r2
 8011f78:	07db      	lsls	r3, r3, #31
 8011f7a:	d4c9      	bmi.n	8011f10 <HAL_TIM_PWM_ConfigChannel+0x10>
 8011f7c:	f241 01a7 	movw	r1, #4263	; 0x10a7
 8011f80:	4877      	ldr	r0, [pc, #476]	; (8012160 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8011f82:	f7f3 fc71 	bl	8005868 <assert_failed>
 8011f86:	e7c3      	b.n	8011f10 <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 8011f88:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8011f90:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8011f92:	f241 01aa 	movw	r1, #4266	; 0x10aa
 8011f96:	4872      	ldr	r0, [pc, #456]	; (8012160 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8011f98:	f7f3 fc66 	bl	8005868 <assert_failed>
  __HAL_LOCK(htim);
 8011f9c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d1cb      	bne.n	8011f3c <HAL_TIM_PWM_ConfigChannel+0x3c>
 8011fa4:	2002      	movs	r0, #2
}
 8011fa6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011fa8:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8011fac:	486c      	ldr	r0, [pc, #432]	; (8012160 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8011fae:	f7f3 fc5b 	bl	8005868 <assert_failed>
 8011fb2:	e7bb      	b.n	8011f2c <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8011fb4:	f241 01a8 	movw	r1, #4264	; 0x10a8
 8011fb8:	4869      	ldr	r0, [pc, #420]	; (8012160 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8011fba:	f7f3 fc55 	bl	8005868 <assert_failed>
 8011fbe:	e7b1      	b.n	8011f24 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011fc0:	6828      	ldr	r0, [r5, #0]
 8011fc2:	4b68      	ldr	r3, [pc, #416]	; (8012164 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8011fc4:	4298      	cmp	r0, r3
 8011fc6:	d004      	beq.n	8011fd2 <HAL_TIM_PWM_ConfigChannel+0xd2>
 8011fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011fcc:	4298      	cmp	r0, r3
 8011fce:	f040 814d 	bne.w	801226c <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011fd2:	4621      	mov	r1, r4
 8011fd4:	f7fe f83a 	bl	801004c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011fd8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011fda:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011fdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011fde:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8011fe2:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011fe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011fe6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8011fea:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011fee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8011ff2:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011ff4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011ff6:	e7c8      	b.n	8011f8a <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011ff8:	6828      	ldr	r0, [r5, #0]
 8011ffa:	4b5a      	ldr	r3, [pc, #360]	; (8012164 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8011ffc:	4a5a      	ldr	r2, [pc, #360]	; (8012168 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8011ffe:	4298      	cmp	r0, r3
 8012000:	bf18      	it	ne
 8012002:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8012006:	bf14      	ite	ne
 8012008:	2301      	movne	r3, #1
 801200a:	2300      	moveq	r3, #0
 801200c:	4290      	cmp	r0, r2
 801200e:	bf0c      	ite	eq
 8012010:	2300      	moveq	r3, #0
 8012012:	f003 0301 	andne.w	r3, r3, #1
 8012016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801201a:	4290      	cmp	r0, r2
 801201c:	bf0c      	ite	eq
 801201e:	2300      	moveq	r3, #0
 8012020:	f003 0301 	andne.w	r3, r3, #1
 8012024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012028:	4290      	cmp	r0, r2
 801202a:	bf0c      	ite	eq
 801202c:	2300      	moveq	r3, #0
 801202e:	f003 0301 	andne.w	r3, r3, #1
 8012032:	b11b      	cbz	r3, 801203c <HAL_TIM_PWM_ConfigChannel+0x13c>
 8012034:	4b4d      	ldr	r3, [pc, #308]	; (801216c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8012036:	4298      	cmp	r0, r3
 8012038:	f040 811f 	bne.w	801227a <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801203c:	4621      	mov	r1, r4
 801203e:	f7fe f8f3 	bl	8010228 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012042:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012044:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012046:	69d9      	ldr	r1, [r3, #28]
 8012048:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 801204c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801204e:	69d9      	ldr	r1, [r3, #28]
 8012050:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8012054:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012056:	69da      	ldr	r2, [r3, #28]
 8012058:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 801205c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801205e:	61da      	str	r2, [r3, #28]
      break;
 8012060:	e793      	b.n	8011f8a <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8012062:	6828      	ldr	r0, [r5, #0]
 8012064:	4b3f      	ldr	r3, [pc, #252]	; (8012164 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8012066:	4298      	cmp	r0, r3
 8012068:	d004      	beq.n	8012074 <HAL_TIM_PWM_ConfigChannel+0x174>
 801206a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801206e:	4298      	cmp	r0, r3
 8012070:	f040 80f5 	bne.w	801225e <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012074:	4621      	mov	r1, r4
 8012076:	f7fd ffbf 	bl	800fff8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801207a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801207c:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801207e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012080:	f041 0108 	orr.w	r1, r1, #8
 8012084:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012086:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012088:	f021 0104 	bic.w	r1, r1, #4
 801208c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801208e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012090:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8012092:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012094:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012096:	e778      	b.n	8011f8a <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8012098:	6828      	ldr	r0, [r5, #0]
 801209a:	4b32      	ldr	r3, [pc, #200]	; (8012164 <HAL_TIM_PWM_ConfigChannel+0x264>)
 801209c:	4a32      	ldr	r2, [pc, #200]	; (8012168 <HAL_TIM_PWM_ConfigChannel+0x268>)
 801209e:	4298      	cmp	r0, r3
 80120a0:	bf18      	it	ne
 80120a2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80120a6:	bf14      	ite	ne
 80120a8:	2301      	movne	r3, #1
 80120aa:	2300      	moveq	r3, #0
 80120ac:	4290      	cmp	r0, r2
 80120ae:	bf0c      	ite	eq
 80120b0:	2300      	moveq	r3, #0
 80120b2:	f003 0301 	andne.w	r3, r3, #1
 80120b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120ba:	4290      	cmp	r0, r2
 80120bc:	bf0c      	ite	eq
 80120be:	2300      	moveq	r3, #0
 80120c0:	f003 0301 	andne.w	r3, r3, #1
 80120c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120c8:	4290      	cmp	r0, r2
 80120ca:	bf0c      	ite	eq
 80120cc:	2300      	moveq	r3, #0
 80120ce:	f003 0301 	andne.w	r3, r3, #1
 80120d2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80120d6:	4290      	cmp	r0, r2
 80120d8:	bf0c      	ite	eq
 80120da:	2300      	moveq	r3, #0
 80120dc:	f003 0301 	andne.w	r3, r3, #1
 80120e0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80120e4:	4290      	cmp	r0, r2
 80120e6:	bf0c      	ite	eq
 80120e8:	2300      	moveq	r3, #0
 80120ea:	f003 0301 	andne.w	r3, r3, #1
 80120ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120f2:	4290      	cmp	r0, r2
 80120f4:	bf0c      	ite	eq
 80120f6:	2300      	moveq	r3, #0
 80120f8:	f003 0301 	andne.w	r3, r3, #1
 80120fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012100:	4290      	cmp	r0, r2
 8012102:	bf0c      	ite	eq
 8012104:	2300      	moveq	r3, #0
 8012106:	f003 0301 	andne.w	r3, r3, #1
 801210a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 801210e:	4290      	cmp	r0, r2
 8012110:	bf0c      	ite	eq
 8012112:	2300      	moveq	r3, #0
 8012114:	f003 0301 	andne.w	r3, r3, #1
 8012118:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801211c:	4290      	cmp	r0, r2
 801211e:	bf0c      	ite	eq
 8012120:	2300      	moveq	r3, #0
 8012122:	f003 0301 	andne.w	r3, r3, #1
 8012126:	b11b      	cbz	r3, 8012130 <HAL_TIM_PWM_ConfigChannel+0x230>
 8012128:	4b11      	ldr	r3, [pc, #68]	; (8012170 <HAL_TIM_PWM_ConfigChannel+0x270>)
 801212a:	4298      	cmp	r0, r3
 801212c:	f040 80ba 	bne.w	80122a4 <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012130:	4621      	mov	r1, r4
 8012132:	f7fd ffb5 	bl	80100a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012136:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012138:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801213a:	6999      	ldr	r1, [r3, #24]
 801213c:	f041 0108 	orr.w	r1, r1, #8
 8012140:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012142:	6999      	ldr	r1, [r3, #24]
 8012144:	f021 0104 	bic.w	r1, r1, #4
 8012148:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801214a:	699a      	ldr	r2, [r3, #24]
 801214c:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 801214e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012150:	619a      	str	r2, [r3, #24]
      break;
 8012152:	e71a      	b.n	8011f8a <HAL_TIM_PWM_ConfigChannel+0x8a>
 8012154:	fffeffef 	.word	0xfffeffef
 8012158:	00010040 	.word	0x00010040
 801215c:	00111111 	.word	0x00111111
 8012160:	0802e51c 	.word	0x0802e51c
 8012164:	40010000 	.word	0x40010000
 8012168:	40000400 	.word	0x40000400
 801216c:	40010400 	.word	0x40010400
 8012170:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8012174:	6828      	ldr	r0, [r5, #0]
 8012176:	4b4f      	ldr	r3, [pc, #316]	; (80122b4 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8012178:	4a4f      	ldr	r2, [pc, #316]	; (80122b8 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 801217a:	4298      	cmp	r0, r3
 801217c:	bf18      	it	ne
 801217e:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8012182:	bf14      	ite	ne
 8012184:	2301      	movne	r3, #1
 8012186:	2300      	moveq	r3, #0
 8012188:	4290      	cmp	r0, r2
 801218a:	bf0c      	ite	eq
 801218c:	2300      	moveq	r3, #0
 801218e:	f003 0301 	andne.w	r3, r3, #1
 8012192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012196:	4290      	cmp	r0, r2
 8012198:	bf0c      	ite	eq
 801219a:	2300      	moveq	r3, #0
 801219c:	f003 0301 	andne.w	r3, r3, #1
 80121a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121a4:	4290      	cmp	r0, r2
 80121a6:	bf0c      	ite	eq
 80121a8:	2300      	moveq	r3, #0
 80121aa:	f003 0301 	andne.w	r3, r3, #1
 80121ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80121b2:	4290      	cmp	r0, r2
 80121b4:	bf0c      	ite	eq
 80121b6:	2300      	moveq	r3, #0
 80121b8:	f003 0301 	andne.w	r3, r3, #1
 80121bc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80121c0:	4290      	cmp	r0, r2
 80121c2:	bf0c      	ite	eq
 80121c4:	2300      	moveq	r3, #0
 80121c6:	f003 0301 	andne.w	r3, r3, #1
 80121ca:	b113      	cbz	r3, 80121d2 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 80121cc:	4b3b      	ldr	r3, [pc, #236]	; (80122bc <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 80121ce:	4298      	cmp	r0, r3
 80121d0:	d161      	bne.n	8012296 <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80121d2:	4621      	mov	r1, r4
 80121d4:	f7ff fcb2 	bl	8011b3c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80121d8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80121da:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80121dc:	6999      	ldr	r1, [r3, #24]
 80121de:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80121e2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80121e4:	6999      	ldr	r1, [r3, #24]
 80121e6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80121ea:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80121ec:	699a      	ldr	r2, [r3, #24]
 80121ee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 80121f2:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80121f4:	619a      	str	r2, [r3, #24]
      break;
 80121f6:	e6c8      	b.n	8011f8a <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80121f8:	6828      	ldr	r0, [r5, #0]
 80121fa:	4b2e      	ldr	r3, [pc, #184]	; (80122b4 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 80121fc:	4a2e      	ldr	r2, [pc, #184]	; (80122b8 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 80121fe:	4298      	cmp	r0, r3
 8012200:	bf18      	it	ne
 8012202:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8012206:	bf14      	ite	ne
 8012208:	2301      	movne	r3, #1
 801220a:	2300      	moveq	r3, #0
 801220c:	4290      	cmp	r0, r2
 801220e:	bf0c      	ite	eq
 8012210:	2300      	moveq	r3, #0
 8012212:	f003 0301 	andne.w	r3, r3, #1
 8012216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801221a:	4290      	cmp	r0, r2
 801221c:	bf0c      	ite	eq
 801221e:	2300      	moveq	r3, #0
 8012220:	f003 0301 	andne.w	r3, r3, #1
 8012224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012228:	4290      	cmp	r0, r2
 801222a:	bf0c      	ite	eq
 801222c:	2300      	moveq	r3, #0
 801222e:	f003 0301 	andne.w	r3, r3, #1
 8012232:	b113      	cbz	r3, 801223a <HAL_TIM_PWM_ConfigChannel+0x33a>
 8012234:	4b22      	ldr	r3, [pc, #136]	; (80122c0 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 8012236:	4298      	cmp	r0, r3
 8012238:	d126      	bne.n	8012288 <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801223a:	4621      	mov	r1, r4
 801223c:	f7fd ff90 	bl	8010160 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012240:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012242:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012244:	69d9      	ldr	r1, [r3, #28]
 8012246:	f041 0108 	orr.w	r1, r1, #8
 801224a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801224c:	69d9      	ldr	r1, [r3, #28]
 801224e:	f021 0104 	bic.w	r1, r1, #4
 8012252:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012254:	69da      	ldr	r2, [r3, #28]
 8012256:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8012258:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801225a:	61da      	str	r2, [r3, #28]
      break;
 801225c:	e695      	b.n	8011f8a <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 801225e:	4819      	ldr	r0, [pc, #100]	; (80122c4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8012260:	f241 01f8 	movw	r1, #4344	; 0x10f8
 8012264:	f7f3 fb00 	bl	8005868 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012268:	6828      	ldr	r0, [r5, #0]
 801226a:	e703      	b.n	8012074 <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 801226c:	4815      	ldr	r0, [pc, #84]	; (80122c4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801226e:	f241 1109 	movw	r1, #4361	; 0x1109
 8012272:	f7f3 faf9 	bl	8005868 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012276:	6828      	ldr	r0, [r5, #0]
 8012278:	e6ab      	b.n	8011fd2 <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 801227a:	4812      	ldr	r0, [pc, #72]	; (80122c4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801227c:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8012280:	f7f3 faf2 	bl	8005868 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012284:	6828      	ldr	r0, [r5, #0]
 8012286:	e6d9      	b.n	801203c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8012288:	480e      	ldr	r0, [pc, #56]	; (80122c4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801228a:	f241 01d6 	movw	r1, #4310	; 0x10d6
 801228e:	f7f3 faeb 	bl	8005868 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012292:	6828      	ldr	r0, [r5, #0]
 8012294:	e7d1      	b.n	801223a <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8012296:	480b      	ldr	r0, [pc, #44]	; (80122c4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8012298:	f241 01c5 	movw	r1, #4293	; 0x10c5
 801229c:	f7f3 fae4 	bl	8005868 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80122a0:	6828      	ldr	r0, [r5, #0]
 80122a2:	e796      	b.n	80121d2 <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80122a4:	4807      	ldr	r0, [pc, #28]	; (80122c4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80122a6:	f241 01b4 	movw	r1, #4276	; 0x10b4
 80122aa:	f7f3 fadd 	bl	8005868 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80122ae:	6828      	ldr	r0, [r5, #0]
 80122b0:	e73e      	b.n	8012130 <HAL_TIM_PWM_ConfigChannel+0x230>
 80122b2:	bf00      	nop
 80122b4:	40010000 	.word	0x40010000
 80122b8:	40000400 	.word	0x40000400
 80122bc:	40001800 	.word	0x40001800
 80122c0:	40010400 	.word	0x40010400
 80122c4:	0802e51c 	.word	0x0802e51c

080122c8 <TIM_TI1_SetConfig>:
{
 80122c8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80122ca:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80122cc:	4e1b      	ldr	r6, [pc, #108]	; (801233c <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80122ce:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80122d2:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80122d4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80122d6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80122d8:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80122da:	d01d      	beq.n	8012318 <TIM_TI1_SetConfig+0x50>
 80122dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80122e0:	d01a      	beq.n	8012318 <TIM_TI1_SetConfig+0x50>
 80122e2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80122e6:	42b0      	cmp	r0, r6
 80122e8:	d016      	beq.n	8012318 <TIM_TI1_SetConfig+0x50>
 80122ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80122ee:	42b0      	cmp	r0, r6
 80122f0:	d012      	beq.n	8012318 <TIM_TI1_SetConfig+0x50>
 80122f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80122f6:	42b0      	cmp	r0, r6
 80122f8:	d00e      	beq.n	8012318 <TIM_TI1_SetConfig+0x50>
 80122fa:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80122fe:	42b0      	cmp	r0, r6
 8012300:	d00a      	beq.n	8012318 <TIM_TI1_SetConfig+0x50>
 8012302:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8012306:	42b0      	cmp	r0, r6
 8012308:	d006      	beq.n	8012318 <TIM_TI1_SetConfig+0x50>
 801230a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 801230e:	42b0      	cmp	r0, r6
 8012310:	d002      	beq.n	8012318 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8012312:	f044 0201 	orr.w	r2, r4, #1
 8012316:	e002      	b.n	801231e <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8012318:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 801231c:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801231e:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012320:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012324:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012328:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801232c:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801232e:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012330:	4313      	orrs	r3, r2
}
 8012332:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 8012334:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8012336:	6201      	str	r1, [r0, #32]
}
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop
 801233c:	40010000 	.word	0x40010000

08012340 <HAL_TIM_IC_ConfigChannel>:
{
 8012340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8012342:	4ba8      	ldr	r3, [pc, #672]	; (80125e4 <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 8012344:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8012346:	6801      	ldr	r1, [r0, #0]
{
 8012348:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801234a:	4fa7      	ldr	r7, [pc, #668]	; (80125e8 <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 801234c:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801234e:	4299      	cmp	r1, r3
 8012350:	bf18      	it	ne
 8012352:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 8012356:	4aa5      	ldr	r2, [pc, #660]	; (80125ec <HAL_TIM_IC_ConfigChannel+0x2ac>)
 8012358:	bf14      	ite	ne
 801235a:	2301      	movne	r3, #1
 801235c:	2300      	moveq	r3, #0
 801235e:	42b9      	cmp	r1, r7
 8012360:	bf0c      	ite	eq
 8012362:	2300      	moveq	r3, #0
 8012364:	f003 0301 	andne.w	r3, r3, #1
 8012368:	4291      	cmp	r1, r2
 801236a:	bf0c      	ite	eq
 801236c:	2300      	moveq	r3, #0
 801236e:	f003 0301 	andne.w	r3, r3, #1
 8012372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012376:	4291      	cmp	r1, r2
 8012378:	bf0c      	ite	eq
 801237a:	2300      	moveq	r3, #0
 801237c:	f003 0301 	andne.w	r3, r3, #1
 8012380:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8012384:	4291      	cmp	r1, r2
 8012386:	bf0c      	ite	eq
 8012388:	2300      	moveq	r3, #0
 801238a:	f003 0301 	andne.w	r3, r3, #1
 801238e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8012392:	4291      	cmp	r1, r2
 8012394:	bf0c      	ite	eq
 8012396:	2300      	moveq	r3, #0
 8012398:	f003 0301 	andne.w	r3, r3, #1
 801239c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80123a0:	4291      	cmp	r1, r2
 80123a2:	bf0c      	ite	eq
 80123a4:	2300      	moveq	r3, #0
 80123a6:	f003 0301 	andne.w	r3, r3, #1
 80123aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80123ae:	4291      	cmp	r1, r2
 80123b0:	bf0c      	ite	eq
 80123b2:	2300      	moveq	r3, #0
 80123b4:	f003 0301 	andne.w	r3, r3, #1
 80123b8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80123bc:	4291      	cmp	r1, r2
 80123be:	bf0c      	ite	eq
 80123c0:	2300      	moveq	r3, #0
 80123c2:	f003 0301 	andne.w	r3, r3, #1
 80123c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80123ca:	4291      	cmp	r1, r2
 80123cc:	bf0c      	ite	eq
 80123ce:	2300      	moveq	r3, #0
 80123d0:	f003 0301 	andne.w	r3, r3, #1
 80123d4:	b11b      	cbz	r3, 80123de <HAL_TIM_IC_ConfigChannel+0x9e>
 80123d6:	4b86      	ldr	r3, [pc, #536]	; (80125f0 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 80123d8:	4299      	cmp	r1, r3
 80123da:	f040 8158 	bne.w	801268e <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80123de:	6823      	ldr	r3, [r4, #0]
 80123e0:	f033 0202 	bics.w	r2, r3, #2
 80123e4:	d001      	beq.n	80123ea <HAL_TIM_IC_ConfigChannel+0xaa>
 80123e6:	2b0a      	cmp	r3, #10
 80123e8:	d11e      	bne.n	8012428 <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 80123ea:	6863      	ldr	r3, [r4, #4]
 80123ec:	3b01      	subs	r3, #1
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d823      	bhi.n	801243a <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80123f2:	68a3      	ldr	r3, [r4, #8]
 80123f4:	f033 030c 	bics.w	r3, r3, #12
 80123f8:	d128      	bne.n	801244c <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80123fa:	68e3      	ldr	r3, [r4, #12]
 80123fc:	2b0f      	cmp	r3, #15
 80123fe:	d82d      	bhi.n	801245c <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 8012400:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8012404:	2b01      	cmp	r3, #1
 8012406:	d032      	beq.n	801246e <HAL_TIM_IC_ConfigChannel+0x12e>
 8012408:	2001      	movs	r0, #1
 801240a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 801240e:	b386      	cbz	r6, 8012472 <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 8012410:	2e04      	cmp	r6, #4
 8012412:	d042      	beq.n	801249a <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 8012414:	2e08      	cmp	r6, #8
 8012416:	f000 80f3 	beq.w	8012600 <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 801241a:	2e0c      	cmp	r6, #12
 801241c:	f000 8095 	beq.w	801254a <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 8012420:	2300      	movs	r3, #0
 8012422:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8012426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8012428:	f241 0141 	movw	r1, #4161	; 0x1041
 801242c:	4871      	ldr	r0, [pc, #452]	; (80125f4 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801242e:	f7f3 fa1b 	bl	8005868 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8012432:	6863      	ldr	r3, [r4, #4]
 8012434:	3b01      	subs	r3, #1
 8012436:	2b02      	cmp	r3, #2
 8012438:	d9db      	bls.n	80123f2 <HAL_TIM_IC_ConfigChannel+0xb2>
 801243a:	f241 0142 	movw	r1, #4162	; 0x1042
 801243e:	486d      	ldr	r0, [pc, #436]	; (80125f4 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8012440:	f7f3 fa12 	bl	8005868 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8012444:	68a3      	ldr	r3, [r4, #8]
 8012446:	f033 030c 	bics.w	r3, r3, #12
 801244a:	d0d6      	beq.n	80123fa <HAL_TIM_IC_ConfigChannel+0xba>
 801244c:	f241 0143 	movw	r1, #4163	; 0x1043
 8012450:	4868      	ldr	r0, [pc, #416]	; (80125f4 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8012452:	f7f3 fa09 	bl	8005868 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8012456:	68e3      	ldr	r3, [r4, #12]
 8012458:	2b0f      	cmp	r3, #15
 801245a:	d9d1      	bls.n	8012400 <HAL_TIM_IC_ConfigChannel+0xc0>
 801245c:	f241 0144 	movw	r1, #4164	; 0x1044
 8012460:	4864      	ldr	r0, [pc, #400]	; (80125f4 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8012462:	f7f3 fa01 	bl	8005868 <assert_failed>
  __HAL_LOCK(htim);
 8012466:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801246a:	2b01      	cmp	r3, #1
 801246c:	d1cc      	bne.n	8012408 <HAL_TIM_IC_ConfigChannel+0xc8>
 801246e:	2002      	movs	r0, #2
}
 8012470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8012472:	e9d4 1200 	ldrd	r1, r2, [r4]
 8012476:	68e3      	ldr	r3, [r4, #12]
 8012478:	6828      	ldr	r0, [r5, #0]
 801247a:	f7ff ff25 	bl	80122c8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801247e:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8012480:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8012482:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8012484:	6999      	ldr	r1, [r3, #24]
 8012486:	f021 010c 	bic.w	r1, r1, #12
 801248a:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801248c:	699a      	ldr	r2, [r3, #24]
 801248e:	4322      	orrs	r2, r4
 8012490:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8012492:	2300      	movs	r3, #0
 8012494:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8012498:	e7c5      	b.n	8012426 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801249a:	682a      	ldr	r2, [r5, #0]
 801249c:	4b51      	ldr	r3, [pc, #324]	; (80125e4 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 801249e:	4952      	ldr	r1, [pc, #328]	; (80125e8 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 80124a0:	429a      	cmp	r2, r3
 80124a2:	bf18      	it	ne
 80124a4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80124a8:	bf14      	ite	ne
 80124aa:	2301      	movne	r3, #1
 80124ac:	2300      	moveq	r3, #0
 80124ae:	428a      	cmp	r2, r1
 80124b0:	bf0c      	ite	eq
 80124b2:	2300      	moveq	r3, #0
 80124b4:	f003 0301 	andne.w	r3, r3, #1
 80124b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80124bc:	428a      	cmp	r2, r1
 80124be:	bf0c      	ite	eq
 80124c0:	2300      	moveq	r3, #0
 80124c2:	f003 0301 	andne.w	r3, r3, #1
 80124c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80124ca:	428a      	cmp	r2, r1
 80124cc:	bf0c      	ite	eq
 80124ce:	2300      	moveq	r3, #0
 80124d0:	f003 0301 	andne.w	r3, r3, #1
 80124d4:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80124d8:	428a      	cmp	r2, r1
 80124da:	bf0c      	ite	eq
 80124dc:	2300      	moveq	r3, #0
 80124de:	f003 0301 	andne.w	r3, r3, #1
 80124e2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80124e6:	428a      	cmp	r2, r1
 80124e8:	bf0c      	ite	eq
 80124ea:	2300      	moveq	r3, #0
 80124ec:	f003 0301 	andne.w	r3, r3, #1
 80124f0:	b11b      	cbz	r3, 80124fa <HAL_TIM_IC_ConfigChannel+0x1ba>
 80124f2:	4b41      	ldr	r3, [pc, #260]	; (80125f8 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 80124f4:	429a      	cmp	r2, r3
 80124f6:	f040 80d7 	bne.w	80126a8 <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80124fa:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 80124fc:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80124fe:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012502:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 8012504:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012508:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801250a:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 801250c:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801250e:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8012510:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8012512:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012516:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801251a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801251e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012522:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 8012524:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8012526:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012528:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801252c:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 801252e:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8012530:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8012532:	6991      	ldr	r1, [r2, #24]
 8012534:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8012538:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801253a:	6993      	ldr	r3, [r2, #24]
 801253c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8012540:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8012542:	2300      	movs	r3, #0
 8012544:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8012548:	e76d      	b.n	8012426 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 801254a:	682b      	ldr	r3, [r5, #0]
 801254c:	4a25      	ldr	r2, [pc, #148]	; (80125e4 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 801254e:	4926      	ldr	r1, [pc, #152]	; (80125e8 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8012550:	4293      	cmp	r3, r2
 8012552:	bf18      	it	ne
 8012554:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8012558:	bf14      	ite	ne
 801255a:	2201      	movne	r2, #1
 801255c:	2200      	moveq	r2, #0
 801255e:	428b      	cmp	r3, r1
 8012560:	bf0c      	ite	eq
 8012562:	2200      	moveq	r2, #0
 8012564:	f002 0201 	andne.w	r2, r2, #1
 8012568:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801256c:	428b      	cmp	r3, r1
 801256e:	bf0c      	ite	eq
 8012570:	2200      	moveq	r2, #0
 8012572:	f002 0201 	andne.w	r2, r2, #1
 8012576:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801257a:	428b      	cmp	r3, r1
 801257c:	bf0c      	ite	eq
 801257e:	2200      	moveq	r2, #0
 8012580:	f002 0201 	andne.w	r2, r2, #1
 8012584:	b142      	cbz	r2, 8012598 <HAL_TIM_IC_ConfigChannel+0x258>
 8012586:	4a1d      	ldr	r2, [pc, #116]	; (80125fc <HAL_TIM_IC_ConfigChannel+0x2bc>)
 8012588:	4293      	cmp	r3, r2
 801258a:	d005      	beq.n	8012598 <HAL_TIM_IC_ConfigChannel+0x258>
 801258c:	f241 017a 	movw	r1, #4218	; 0x107a
 8012590:	4818      	ldr	r0, [pc, #96]	; (80125f4 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8012592:	f7f3 f969 	bl	8005868 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 8012596:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012598:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 801259a:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801259c:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80125a0:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 80125a2:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80125a6:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80125a8:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 80125aa:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80125ac:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80125ae:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80125b0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80125b4:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80125b8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80125bc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80125c0:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80125c2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 80125c4:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80125c6:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80125ca:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80125cc:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 80125ce:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80125d0:	69d9      	ldr	r1, [r3, #28]
 80125d2:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80125d6:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80125d8:	69da      	ldr	r2, [r3, #28]
 80125da:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80125de:	61da      	str	r2, [r3, #28]
 80125e0:	e71e      	b.n	8012420 <HAL_TIM_IC_ConfigChannel+0xe0>
 80125e2:	bf00      	nop
 80125e4:	40010000 	.word	0x40010000
 80125e8:	40000400 	.word	0x40000400
 80125ec:	40000800 	.word	0x40000800
 80125f0:	40002000 	.word	0x40002000
 80125f4:	0802e51c 	.word	0x0802e51c
 80125f8:	40001800 	.word	0x40001800
 80125fc:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8012600:	682b      	ldr	r3, [r5, #0]
 8012602:	4a2d      	ldr	r2, [pc, #180]	; (80126b8 <HAL_TIM_IC_ConfigChannel+0x378>)
 8012604:	492d      	ldr	r1, [pc, #180]	; (80126bc <HAL_TIM_IC_ConfigChannel+0x37c>)
 8012606:	4293      	cmp	r3, r2
 8012608:	bf18      	it	ne
 801260a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801260e:	bf14      	ite	ne
 8012610:	2201      	movne	r2, #1
 8012612:	2200      	moveq	r2, #0
 8012614:	428b      	cmp	r3, r1
 8012616:	bf0c      	ite	eq
 8012618:	2200      	moveq	r2, #0
 801261a:	f002 0201 	andne.w	r2, r2, #1
 801261e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012622:	428b      	cmp	r3, r1
 8012624:	bf0c      	ite	eq
 8012626:	2200      	moveq	r2, #0
 8012628:	f002 0201 	andne.w	r2, r2, #1
 801262c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012630:	428b      	cmp	r3, r1
 8012632:	bf0c      	ite	eq
 8012634:	2200      	moveq	r2, #0
 8012636:	f002 0201 	andne.w	r2, r2, #1
 801263a:	b112      	cbz	r2, 8012642 <HAL_TIM_IC_ConfigChannel+0x302>
 801263c:	4a20      	ldr	r2, [pc, #128]	; (80126c0 <HAL_TIM_IC_ConfigChannel+0x380>)
 801263e:	4293      	cmp	r3, r2
 8012640:	d12b      	bne.n	801269a <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012642:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 8012644:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012646:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801264a:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 801264c:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012650:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8012652:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8012654:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8012656:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8012658:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801265a:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801265e:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 8012662:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8012664:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8012668:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 801266a:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801266c:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 8012670:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8012672:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8012674:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8012676:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8012678:	69d9      	ldr	r1, [r3, #28]
 801267a:	f021 010c 	bic.w	r1, r1, #12
 801267e:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8012680:	69da      	ldr	r2, [r3, #28]
 8012682:	4322      	orrs	r2, r4
 8012684:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8012686:	2300      	movs	r3, #0
 8012688:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 801268c:	e6cb      	b.n	8012426 <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801268e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8012692:	480c      	ldr	r0, [pc, #48]	; (80126c4 <HAL_TIM_IC_ConfigChannel+0x384>)
 8012694:	f7f3 f8e8 	bl	8005868 <assert_failed>
 8012698:	e6a1      	b.n	80123de <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 801269a:	f241 016a 	movw	r1, #4202	; 0x106a
 801269e:	4809      	ldr	r0, [pc, #36]	; (80126c4 <HAL_TIM_IC_ConfigChannel+0x384>)
 80126a0:	f7f3 f8e2 	bl	8005868 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 80126a4:	682b      	ldr	r3, [r5, #0]
 80126a6:	e7cc      	b.n	8012642 <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80126a8:	f241 015a 	movw	r1, #4186	; 0x105a
 80126ac:	4805      	ldr	r0, [pc, #20]	; (80126c4 <HAL_TIM_IC_ConfigChannel+0x384>)
 80126ae:	f7f3 f8db 	bl	8005868 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 80126b2:	682a      	ldr	r2, [r5, #0]
 80126b4:	e721      	b.n	80124fa <HAL_TIM_IC_ConfigChannel+0x1ba>
 80126b6:	bf00      	nop
 80126b8:	40010000 	.word	0x40010000
 80126bc:	40000400 	.word	0x40000400
 80126c0:	40010400 	.word	0x40010400
 80126c4:	0802e51c 	.word	0x0802e51c

080126c8 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80126c8:	4b2b      	ldr	r3, [pc, #172]	; (8012778 <TIM_CCxChannelCmd+0xb0>)
 80126ca:	4298      	cmp	r0, r3
{
 80126cc:	b530      	push	{r4, r5, lr}
 80126ce:	4604      	mov	r4, r0
 80126d0:	b083      	sub	sp, #12
 80126d2:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80126d4:	d031      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 80126d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80126da:	d02e      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 80126dc:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80126e0:	4298      	cmp	r0, r3
 80126e2:	d02a      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 80126e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80126e8:	4298      	cmp	r0, r3
 80126ea:	d026      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 80126ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80126f0:	4298      	cmp	r0, r3
 80126f2:	d022      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 80126f4:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 80126f8:	4298      	cmp	r0, r3
 80126fa:	d01e      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 80126fc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8012700:	4298      	cmp	r0, r3
 8012702:	d01a      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 8012704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012708:	4298      	cmp	r0, r3
 801270a:	d016      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 801270c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012710:	4298      	cmp	r0, r3
 8012712:	d012      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 8012714:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8012718:	4298      	cmp	r0, r3
 801271a:	d00e      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 801271c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012720:	4298      	cmp	r0, r3
 8012722:	d00a      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 8012724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012728:	4298      	cmp	r0, r3
 801272a:	d006      	beq.n	801273a <TIM_CCxChannelCmd+0x72>
 801272c:	f641 6199 	movw	r1, #7833	; 0x1e99
 8012730:	4812      	ldr	r0, [pc, #72]	; (801277c <TIM_CCxChannelCmd+0xb4>)
 8012732:	9201      	str	r2, [sp, #4]
 8012734:	f7f3 f898 	bl	8005868 <assert_failed>
 8012738:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 801273a:	2d14      	cmp	r5, #20
 801273c:	d90f      	bls.n	801275e <TIM_CCxChannelCmd+0x96>
 801273e:	2d3c      	cmp	r5, #60	; 0x3c
 8012740:	d111      	bne.n	8012766 <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012742:	f005 051f 	and.w	r5, r5, #31
 8012746:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012748:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801274a:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801274c:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 801274e:	ea23 0301 	bic.w	r3, r3, r1
 8012752:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012754:	6a25      	ldr	r5, [r4, #32]
 8012756:	4315      	orrs	r5, r2
 8012758:	6225      	str	r5, [r4, #32]
}
 801275a:	b003      	add	sp, #12
 801275c:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 801275e:	4b08      	ldr	r3, [pc, #32]	; (8012780 <TIM_CCxChannelCmd+0xb8>)
 8012760:	40eb      	lsrs	r3, r5
 8012762:	07db      	lsls	r3, r3, #31
 8012764:	d4ed      	bmi.n	8012742 <TIM_CCxChannelCmd+0x7a>
 8012766:	f641 619a 	movw	r1, #7834	; 0x1e9a
 801276a:	4804      	ldr	r0, [pc, #16]	; (801277c <TIM_CCxChannelCmd+0xb4>)
 801276c:	9201      	str	r2, [sp, #4]
 801276e:	f7f3 f87b 	bl	8005868 <assert_failed>
 8012772:	9a01      	ldr	r2, [sp, #4]
 8012774:	e7e5      	b.n	8012742 <TIM_CCxChannelCmd+0x7a>
 8012776:	bf00      	nop
 8012778:	40010000 	.word	0x40010000
 801277c:	0802e51c 	.word	0x0802e51c
 8012780:	00111111 	.word	0x00111111

08012784 <HAL_TIM_IC_Start_DMA>:
{
 8012784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012788:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801278a:	460d      	mov	r5, r1
{
 801278c:	4617      	mov	r7, r2
 801278e:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012790:	2900      	cmp	r1, #0
 8012792:	f040 8087 	bne.w	80128a4 <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012796:	6803      	ldr	r3, [r0, #0]
 8012798:	4aa4      	ldr	r2, [pc, #656]	; (8012a2c <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801279a:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801279e:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80127a0:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80127a4:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80127a6:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80127aa:	d037      	beq.n	801281c <HAL_TIM_IC_Start_DMA+0x98>
 80127ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80127b0:	d034      	beq.n	801281c <HAL_TIM_IC_Start_DMA+0x98>
 80127b2:	4a9f      	ldr	r2, [pc, #636]	; (8012a30 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80127b4:	4293      	cmp	r3, r2
 80127b6:	d031      	beq.n	801281c <HAL_TIM_IC_Start_DMA+0x98>
 80127b8:	4a9e      	ldr	r2, [pc, #632]	; (8012a34 <HAL_TIM_IC_Start_DMA+0x2b0>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d066      	beq.n	801288c <HAL_TIM_IC_Start_DMA+0x108>
 80127be:	4a9e      	ldr	r2, [pc, #632]	; (8012a38 <HAL_TIM_IC_Start_DMA+0x2b4>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d063      	beq.n	801288c <HAL_TIM_IC_Start_DMA+0x108>
 80127c4:	4a9d      	ldr	r2, [pc, #628]	; (8012a3c <HAL_TIM_IC_Start_DMA+0x2b8>)
 80127c6:	4293      	cmp	r3, r2
 80127c8:	f040 80f7 	bne.w	80129ba <HAL_TIM_IC_Start_DMA+0x236>
 80127cc:	2d14      	cmp	r5, #20
 80127ce:	d862      	bhi.n	8012896 <HAL_TIM_IC_Start_DMA+0x112>
 80127d0:	4a9b      	ldr	r2, [pc, #620]	; (8012a40 <HAL_TIM_IC_Start_DMA+0x2bc>)
 80127d2:	40ea      	lsrs	r2, r5
 80127d4:	07d2      	lsls	r2, r2, #31
 80127d6:	d55e      	bpl.n	8012896 <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80127d8:	4994      	ldr	r1, [pc, #592]	; (8012a2c <HAL_TIM_IC_Start_DMA+0x2a8>)
 80127da:	4a95      	ldr	r2, [pc, #596]	; (8012a30 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80127dc:	428b      	cmp	r3, r1
 80127de:	bf18      	it	ne
 80127e0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80127e4:	bf14      	ite	ne
 80127e6:	2101      	movne	r1, #1
 80127e8:	2100      	moveq	r1, #0
 80127ea:	4293      	cmp	r3, r2
 80127ec:	bf0c      	ite	eq
 80127ee:	2100      	moveq	r1, #0
 80127f0:	f001 0101 	andne.w	r1, r1, #1
 80127f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80127f8:	4293      	cmp	r3, r2
 80127fa:	bf0c      	ite	eq
 80127fc:	2100      	moveq	r1, #0
 80127fe:	f001 0101 	andne.w	r1, r1, #1
 8012802:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012806:	4293      	cmp	r3, r2
 8012808:	bf0c      	ite	eq
 801280a:	2100      	moveq	r1, #0
 801280c:	f001 0101 	andne.w	r1, r1, #1
 8012810:	b121      	cbz	r1, 801281c <HAL_TIM_IC_Start_DMA+0x98>
 8012812:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8012816:	4293      	cmp	r3, r2
 8012818:	f040 80c5 	bne.w	80129a6 <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 801281c:	2e02      	cmp	r6, #2
 801281e:	d06a      	beq.n	80128f6 <HAL_TIM_IC_Start_DMA+0x172>
 8012820:	f1b9 0f02 	cmp.w	r9, #2
 8012824:	d067      	beq.n	80128f6 <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8012826:	2e01      	cmp	r6, #1
 8012828:	d106      	bne.n	8012838 <HAL_TIM_IC_Start_DMA+0xb4>
 801282a:	f1b9 0f01 	cmp.w	r9, #1
 801282e:	d103      	bne.n	8012838 <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 8012830:	b92f      	cbnz	r7, 801283e <HAL_TIM_IC_Start_DMA+0xba>
 8012832:	f1b8 0f00 	cmp.w	r8, #0
 8012836:	d002      	beq.n	801283e <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 8012838:	2001      	movs	r0, #1
}
 801283a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801283e:	2302      	movs	r3, #2
 8012840:	2d00      	cmp	r5, #0
 8012842:	d05b      	beq.n	80128fc <HAL_TIM_IC_Start_DMA+0x178>
 8012844:	2d04      	cmp	r5, #4
 8012846:	f000 8119 	beq.w	8012a7c <HAL_TIM_IC_Start_DMA+0x2f8>
 801284a:	2d08      	cmp	r5, #8
 801284c:	f000 8141 	beq.w	8012ad2 <HAL_TIM_IC_Start_DMA+0x34e>
 8012850:	2d0c      	cmp	r5, #12
 8012852:	f000 815d 	beq.w	8012b10 <HAL_TIM_IC_Start_DMA+0x38c>
 8012856:	2d10      	cmp	r5, #16
 8012858:	f000 812f 	beq.w	8012aba <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801285c:	4629      	mov	r1, r5
  switch (Channel)
 801285e:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012864:	2201      	movs	r2, #1
 8012866:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012868:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801286c:	f7ff ff2c 	bl	80126c8 <TIM_CCxChannelCmd>
  switch (Channel)
 8012870:	2d08      	cmp	r5, #8
 8012872:	f200 812b 	bhi.w	8012acc <HAL_TIM_IC_Start_DMA+0x348>
 8012876:	e8df f015 	tbh	[pc, r5, lsl #1]
 801287a:	010a      	.short	0x010a
 801287c:	01290129 	.word	0x01290129
 8012880:	01350129 	.word	0x01350129
 8012884:	01290129 	.word	0x01290129
 8012888:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801288c:	f035 0204 	bics.w	r2, r5, #4
 8012890:	d0a2      	beq.n	80127d8 <HAL_TIM_IC_Start_DMA+0x54>
 8012892:	2a08      	cmp	r2, #8
 8012894:	d0a0      	beq.n	80127d8 <HAL_TIM_IC_Start_DMA+0x54>
 8012896:	f640 114a 	movw	r1, #2378	; 0x94a
 801289a:	486a      	ldr	r0, [pc, #424]	; (8012a44 <HAL_TIM_IC_Start_DMA+0x2c0>)
 801289c:	f7f2 ffe4 	bl	8005868 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80128a0:	6823      	ldr	r3, [r4, #0]
 80128a2:	e799      	b.n	80127d8 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80128a4:	2904      	cmp	r1, #4
 80128a6:	f000 8090 	beq.w	80129ca <HAL_TIM_IC_Start_DMA+0x246>
 80128aa:	2908      	cmp	r1, #8
 80128ac:	f000 80e0 	beq.w	8012a70 <HAL_TIM_IC_Start_DMA+0x2ec>
 80128b0:	290c      	cmp	r1, #12
 80128b2:	d07e      	beq.n	80129b2 <HAL_TIM_IC_Start_DMA+0x22e>
 80128b4:	2910      	cmp	r1, #16
 80128b6:	f000 814a 	beq.w	8012b4e <HAL_TIM_IC_Start_DMA+0x3ca>
 80128ba:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 80128be:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80128c0:	6823      	ldr	r3, [r4, #0]
 80128c2:	4a5a      	ldr	r2, [pc, #360]	; (8012a2c <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80128c4:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80128c8:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80128ca:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80128ce:	f000 8098 	beq.w	8012a02 <HAL_TIM_IC_Start_DMA+0x27e>
 80128d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128d6:	f000 8088 	beq.w	80129ea <HAL_TIM_IC_Start_DMA+0x266>
 80128da:	4a55      	ldr	r2, [pc, #340]	; (8012a30 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80128dc:	4293      	cmp	r3, r2
 80128de:	f47f af6b 	bne.w	80127b8 <HAL_TIM_IC_Start_DMA+0x34>
 80128e2:	f035 020c 	bics.w	r2, r5, #12
 80128e6:	d099      	beq.n	801281c <HAL_TIM_IC_Start_DMA+0x98>
 80128e8:	4a57      	ldr	r2, [pc, #348]	; (8012a48 <HAL_TIM_IC_Start_DMA+0x2c4>)
 80128ea:	4293      	cmp	r3, r2
 80128ec:	d1d3      	bne.n	8012896 <HAL_TIM_IC_Start_DMA+0x112>
 80128ee:	2d00      	cmp	r5, #0
 80128f0:	f43f af72 	beq.w	80127d8 <HAL_TIM_IC_Start_DMA+0x54>
 80128f4:	e7cf      	b.n	8012896 <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 80128f6:	2002      	movs	r0, #2
}
 80128f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012900:	4629      	mov	r1, r5
 8012902:	2201      	movs	r2, #1
 8012904:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012906:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801290a:	f7ff fedd 	bl	80126c8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801290e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012910:	494e      	ldr	r1, [pc, #312]	; (8012a4c <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8012912:	4643      	mov	r3, r8
 8012914:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8012916:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012918:	494d      	ldr	r1, [pc, #308]	; (8012a50 <HAL_TIM_IC_Start_DMA+0x2cc>)
 801291a:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801291c:	494d      	ldr	r1, [pc, #308]	; (8012a54 <HAL_TIM_IC_Start_DMA+0x2d0>)
 801291e:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8012920:	6821      	ldr	r1, [r4, #0]
 8012922:	3134      	adds	r1, #52	; 0x34
 8012924:	f7f7 feb8 	bl	800a698 <HAL_DMA_Start_IT>
 8012928:	2800      	cmp	r0, #0
 801292a:	d185      	bne.n	8012838 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801292c:	6822      	ldr	r2, [r4, #0]
 801292e:	68d3      	ldr	r3, [r2, #12]
 8012930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012934:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012936:	4b3d      	ldr	r3, [pc, #244]	; (8012a2c <HAL_TIM_IC_Start_DMA+0x2a8>)
 8012938:	4c3d      	ldr	r4, [pc, #244]	; (8012a30 <HAL_TIM_IC_Start_DMA+0x2ac>)
 801293a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801293e:	bf18      	it	ne
 8012940:	429a      	cmpne	r2, r3
 8012942:	493c      	ldr	r1, [pc, #240]	; (8012a34 <HAL_TIM_IC_Start_DMA+0x2b0>)
 8012944:	bf0c      	ite	eq
 8012946:	2301      	moveq	r3, #1
 8012948:	2300      	movne	r3, #0
 801294a:	42a2      	cmp	r2, r4
 801294c:	bf08      	it	eq
 801294e:	f043 0301 	orreq.w	r3, r3, #1
 8012952:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8012956:	428a      	cmp	r2, r1
 8012958:	bf08      	it	eq
 801295a:	f043 0301 	orreq.w	r3, r3, #1
 801295e:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 8012962:	42a2      	cmp	r2, r4
 8012964:	bf08      	it	eq
 8012966:	f043 0301 	orreq.w	r3, r3, #1
 801296a:	428a      	cmp	r2, r1
 801296c:	bf08      	it	eq
 801296e:	f043 0301 	orreq.w	r3, r3, #1
 8012972:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8012976:	428a      	cmp	r2, r1
 8012978:	bf08      	it	eq
 801297a:	f043 0301 	orreq.w	r3, r3, #1
 801297e:	b913      	cbnz	r3, 8012986 <HAL_TIM_IC_Start_DMA+0x202>
 8012980:	4b35      	ldr	r3, [pc, #212]	; (8012a58 <HAL_TIM_IC_Start_DMA+0x2d4>)
 8012982:	429a      	cmp	r2, r3
 8012984:	d109      	bne.n	801299a <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012986:	6891      	ldr	r1, [r2, #8]
 8012988:	4b34      	ldr	r3, [pc, #208]	; (8012a5c <HAL_TIM_IC_Start_DMA+0x2d8>)
 801298a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801298c:	2b06      	cmp	r3, #6
 801298e:	f43f af54 	beq.w	801283a <HAL_TIM_IC_Start_DMA+0xb6>
 8012992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012996:	f43f af50 	beq.w	801283a <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 801299a:	6813      	ldr	r3, [r2, #0]
 801299c:	f043 0301 	orr.w	r3, r3, #1
 80129a0:	6013      	str	r3, [r2, #0]
}
 80129a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80129a6:	f640 114b 	movw	r1, #2379	; 0x94b
 80129aa:	4826      	ldr	r0, [pc, #152]	; (8012a44 <HAL_TIM_IC_Start_DMA+0x2c0>)
 80129ac:	f7f2 ff5c 	bl	8005868 <assert_failed>
 80129b0:	e734      	b.n	801281c <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80129b2:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 80129b6:	b2f6      	uxtb	r6, r6
 80129b8:	e782      	b.n	80128c0 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80129ba:	4a29      	ldr	r2, [pc, #164]	; (8012a60 <HAL_TIM_IC_Start_DMA+0x2dc>)
 80129bc:	4293      	cmp	r3, r2
 80129be:	d128      	bne.n	8012a12 <HAL_TIM_IC_Start_DMA+0x28e>
 80129c0:	f035 0204 	bics.w	r2, r5, #4
 80129c4:	f47f af67 	bne.w	8012896 <HAL_TIM_IC_Start_DMA+0x112>
 80129c8:	e706      	b.n	80127d8 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80129ca:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80129ce:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80129d2:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80129d4:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80129d6:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80129da:	4a14      	ldr	r2, [pc, #80]	; (8012a2c <HAL_TIM_IC_Start_DMA+0x2a8>)
 80129dc:	4293      	cmp	r3, r2
 80129de:	f43f af1d 	beq.w	801281c <HAL_TIM_IC_Start_DMA+0x98>
 80129e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80129e6:	f47f af78 	bne.w	80128da <HAL_TIM_IC_Start_DMA+0x156>
 80129ea:	f035 020c 	bics.w	r2, r5, #12
 80129ee:	f43f af15 	beq.w	801281c <HAL_TIM_IC_Start_DMA+0x98>
 80129f2:	4a1c      	ldr	r2, [pc, #112]	; (8012a64 <HAL_TIM_IC_Start_DMA+0x2e0>)
 80129f4:	4293      	cmp	r3, r2
 80129f6:	f47f af77 	bne.w	80128e8 <HAL_TIM_IC_Start_DMA+0x164>
 80129fa:	2d00      	cmp	r5, #0
 80129fc:	f43f aeec 	beq.w	80127d8 <HAL_TIM_IC_Start_DMA+0x54>
 8012a00:	e749      	b.n	8012896 <HAL_TIM_IC_Start_DMA+0x112>
 8012a02:	f025 0204 	bic.w	r2, r5, #4
 8012a06:	2a08      	cmp	r2, #8
 8012a08:	f43f af08 	beq.w	801281c <HAL_TIM_IC_Start_DMA+0x98>
 8012a0c:	2a10      	cmp	r2, #16
 8012a0e:	f43f af05 	beq.w	801281c <HAL_TIM_IC_Start_DMA+0x98>
 8012a12:	4a15      	ldr	r2, [pc, #84]	; (8012a68 <HAL_TIM_IC_Start_DMA+0x2e4>)
 8012a14:	4293      	cmp	r3, r2
 8012a16:	f43f af6a 	beq.w	80128ee <HAL_TIM_IC_Start_DMA+0x16a>
 8012a1a:	4a14      	ldr	r2, [pc, #80]	; (8012a6c <HAL_TIM_IC_Start_DMA+0x2e8>)
 8012a1c:	4293      	cmp	r3, r2
 8012a1e:	f43f af66 	beq.w	80128ee <HAL_TIM_IC_Start_DMA+0x16a>
 8012a22:	4a0d      	ldr	r2, [pc, #52]	; (8012a58 <HAL_TIM_IC_Start_DMA+0x2d4>)
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d0cb      	beq.n	80129c0 <HAL_TIM_IC_Start_DMA+0x23c>
 8012a28:	e7e3      	b.n	80129f2 <HAL_TIM_IC_Start_DMA+0x26e>
 8012a2a:	bf00      	nop
 8012a2c:	40010000 	.word	0x40010000
 8012a30:	40000400 	.word	0x40000400
 8012a34:	40000800 	.word	0x40000800
 8012a38:	40000c00 	.word	0x40000c00
 8012a3c:	40010400 	.word	0x40010400
 8012a40:	00111111 	.word	0x00111111
 8012a44:	0802e51c 	.word	0x0802e51c
 8012a48:	40002000 	.word	0x40002000
 8012a4c:	080110b5 	.word	0x080110b5
 8012a50:	0801114d 	.word	0x0801114d
 8012a54:	08011331 	.word	0x08011331
 8012a58:	40001800 	.word	0x40001800
 8012a5c:	00010007 	.word	0x00010007
 8012a60:	40014000 	.word	0x40014000
 8012a64:	40001c00 	.word	0x40001c00
 8012a68:	40014400 	.word	0x40014400
 8012a6c:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012a70:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012a74:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012a78:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012a7a:	e7ab      	b.n	80129d4 <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a7c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a80:	4629      	mov	r1, r5
 8012a82:	2201      	movs	r2, #1
 8012a84:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a8a:	f7ff fe1d 	bl	80126c8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012a8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8012a90:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012a92:	4931      	ldr	r1, [pc, #196]	; (8012b58 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8012a94:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012a96:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012a98:	4930      	ldr	r1, [pc, #192]	; (8012b5c <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012a9a:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012a9c:	4930      	ldr	r1, [pc, #192]	; (8012b60 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012a9e:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8012aa0:	6821      	ldr	r1, [r4, #0]
 8012aa2:	3138      	adds	r1, #56	; 0x38
 8012aa4:	f7f7 fdf8 	bl	800a698 <HAL_DMA_Start_IT>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	f47f aec5 	bne.w	8012838 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012aae:	6822      	ldr	r2, [r4, #0]
 8012ab0:	68d3      	ldr	r3, [r2, #12]
 8012ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012ab6:	60d3      	str	r3, [r2, #12]
      break;
 8012ab8:	e73d      	b.n	8012936 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012aba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012abe:	2201      	movs	r2, #1
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012ac4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ac8:	f7ff fdfe 	bl	80126c8 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012acc:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 8012ace:	2001      	movs	r0, #1
 8012ad0:	e731      	b.n	8012936 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012ad2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	2201      	movs	r2, #1
 8012ada:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012adc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ae0:	f7ff fdf2 	bl	80126c8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012ae4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012ae6:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012ae8:	491b      	ldr	r1, [pc, #108]	; (8012b58 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012aea:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012aec:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012aee:	491b      	ldr	r1, [pc, #108]	; (8012b5c <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012af0:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012af2:	491b      	ldr	r1, [pc, #108]	; (8012b60 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012af4:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012af6:	6821      	ldr	r1, [r4, #0]
 8012af8:	313c      	adds	r1, #60	; 0x3c
 8012afa:	f7f7 fdcd 	bl	800a698 <HAL_DMA_Start_IT>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	f47f ae9a 	bne.w	8012838 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012b04:	6822      	ldr	r2, [r4, #0]
 8012b06:	68d3      	ldr	r3, [r2, #12]
 8012b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012b0c:	60d3      	str	r3, [r2, #12]
      break;
 8012b0e:	e712      	b.n	8012936 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b14:	4629      	mov	r1, r5
 8012b16:	2201      	movs	r2, #1
 8012b18:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b1a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b1e:	f7ff fdd3 	bl	80126c8 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b22:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012b24:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b26:	490c      	ldr	r1, [pc, #48]	; (8012b58 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012b28:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b2a:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012b2c:	490b      	ldr	r1, [pc, #44]	; (8012b5c <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012b2e:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012b30:	490b      	ldr	r1, [pc, #44]	; (8012b60 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012b32:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012b34:	6821      	ldr	r1, [r4, #0]
 8012b36:	3140      	adds	r1, #64	; 0x40
 8012b38:	f7f7 fdae 	bl	800a698 <HAL_DMA_Start_IT>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	f47f ae7b 	bne.w	8012838 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012b42:	6822      	ldr	r2, [r4, #0]
 8012b44:	68d3      	ldr	r3, [r2, #12]
 8012b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012b4a:	60d3      	str	r3, [r2, #12]
      break;
 8012b4c:	e6f3      	b.n	8012936 <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012b4e:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8012b52:	b2f6      	uxtb	r6, r6
 8012b54:	e6b4      	b.n	80128c0 <HAL_TIM_IC_Start_DMA+0x13c>
 8012b56:	bf00      	nop
 8012b58:	080110b5 	.word	0x080110b5
 8012b5c:	0801114d 	.word	0x0801114d
 8012b60:	08011331 	.word	0x08011331

08012b64 <HAL_TIM_IC_Stop_DMA>:
{
 8012b64:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012b66:	4b82      	ldr	r3, [pc, #520]	; (8012d70 <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 8012b68:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012b6a:	6800      	ldr	r0, [r0, #0]
{
 8012b6c:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012b6e:	4298      	cmp	r0, r3
 8012b70:	f000 80cc 	beq.w	8012d0c <HAL_TIM_IC_Stop_DMA+0x1a8>
 8012b74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012b78:	d056      	beq.n	8012c28 <HAL_TIM_IC_Stop_DMA+0xc4>
 8012b7a:	4b7e      	ldr	r3, [pc, #504]	; (8012d74 <HAL_TIM_IC_Stop_DMA+0x210>)
 8012b7c:	4298      	cmp	r0, r3
 8012b7e:	d053      	beq.n	8012c28 <HAL_TIM_IC_Stop_DMA+0xc4>
 8012b80:	4b7d      	ldr	r3, [pc, #500]	; (8012d78 <HAL_TIM_IC_Stop_DMA+0x214>)
 8012b82:	4298      	cmp	r0, r3
 8012b84:	d050      	beq.n	8012c28 <HAL_TIM_IC_Stop_DMA+0xc4>
 8012b86:	4b7d      	ldr	r3, [pc, #500]	; (8012d7c <HAL_TIM_IC_Stop_DMA+0x218>)
 8012b88:	4298      	cmp	r0, r3
 8012b8a:	d04d      	beq.n	8012c28 <HAL_TIM_IC_Stop_DMA+0xc4>
 8012b8c:	4b7c      	ldr	r3, [pc, #496]	; (8012d80 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8012b8e:	4298      	cmp	r0, r3
 8012b90:	f000 80bc 	beq.w	8012d0c <HAL_TIM_IC_Stop_DMA+0x1a8>
 8012b94:	4b7b      	ldr	r3, [pc, #492]	; (8012d84 <HAL_TIM_IC_Stop_DMA+0x220>)
 8012b96:	4298      	cmp	r0, r3
 8012b98:	d00c      	beq.n	8012bb4 <HAL_TIM_IC_Stop_DMA+0x50>
 8012b9a:	4b7b      	ldr	r3, [pc, #492]	; (8012d88 <HAL_TIM_IC_Stop_DMA+0x224>)
 8012b9c:	4298      	cmp	r0, r3
 8012b9e:	f000 80d9 	beq.w	8012d54 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012ba2:	4b7a      	ldr	r3, [pc, #488]	; (8012d8c <HAL_TIM_IC_Stop_DMA+0x228>)
 8012ba4:	4298      	cmp	r0, r3
 8012ba6:	f000 80d5 	beq.w	8012d54 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012baa:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8012bae:	4298      	cmp	r0, r3
 8012bb0:	f040 80c9 	bne.w	8012d46 <HAL_TIM_IC_Stop_DMA+0x1e2>
 8012bb4:	f035 0304 	bics.w	r3, r5, #4
 8012bb8:	f000 80cf 	beq.w	8012d5a <HAL_TIM_IC_Stop_DMA+0x1f6>
 8012bbc:	4874      	ldr	r0, [pc, #464]	; (8012d90 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8012bbe:	f640 11e5 	movw	r1, #2533	; 0x9e5
 8012bc2:	f7f2 fe51 	bl	8005868 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012bc6:	6820      	ldr	r0, [r4, #0]
 8012bc8:	4b69      	ldr	r3, [pc, #420]	; (8012d70 <HAL_TIM_IC_Stop_DMA+0x20c>)
 8012bca:	4a6a      	ldr	r2, [pc, #424]	; (8012d74 <HAL_TIM_IC_Stop_DMA+0x210>)
 8012bcc:	4298      	cmp	r0, r3
 8012bce:	bf18      	it	ne
 8012bd0:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8012bd4:	bf14      	ite	ne
 8012bd6:	2301      	movne	r3, #1
 8012bd8:	2300      	moveq	r3, #0
 8012bda:	4290      	cmp	r0, r2
 8012bdc:	bf0c      	ite	eq
 8012bde:	2300      	moveq	r3, #0
 8012be0:	f003 0301 	andne.w	r3, r3, #1
 8012be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012be8:	4290      	cmp	r0, r2
 8012bea:	bf0c      	ite	eq
 8012bec:	2300      	moveq	r3, #0
 8012bee:	f003 0301 	andne.w	r3, r3, #1
 8012bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012bf6:	4290      	cmp	r0, r2
 8012bf8:	bf0c      	ite	eq
 8012bfa:	2300      	moveq	r3, #0
 8012bfc:	f003 0301 	andne.w	r3, r3, #1
 8012c00:	b11b      	cbz	r3, 8012c0a <HAL_TIM_IC_Stop_DMA+0xa6>
 8012c02:	4b5f      	ldr	r3, [pc, #380]	; (8012d80 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8012c04:	4298      	cmp	r0, r3
 8012c06:	f040 80a8 	bne.w	8012d5a <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	4629      	mov	r1, r5
 8012c0e:	f7ff fd5b 	bl	80126c8 <TIM_CCxChannelCmd>
  switch (Channel)
 8012c12:	2d0c      	cmp	r5, #12
 8012c14:	d80c      	bhi.n	8012c30 <HAL_TIM_IC_Stop_DMA+0xcc>
 8012c16:	e8df f005 	tbb	[pc, r5]
 8012c1a:	0b0d      	.short	0x0b0d
 8012c1c:	0b640b0b 	.word	0x0b640b0b
 8012c20:	0b4a0b0b 	.word	0x0b4a0b0b
 8012c24:	0b0b      	.short	0x0b0b
 8012c26:	22          	.byte	0x22
 8012c27:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012c28:	f035 030c 	bics.w	r3, r5, #12
 8012c2c:	d1c6      	bne.n	8012bbc <HAL_TIM_IC_Stop_DMA+0x58>
 8012c2e:	e7ec      	b.n	8012c0a <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8012c30:	2001      	movs	r0, #1
}
 8012c32:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012c34:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012c36:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012c38:	68d3      	ldr	r3, [r2, #12]
 8012c3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012c3e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012c40:	f7f7 fdce 	bl	800a7e0 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012c44:	6823      	ldr	r3, [r4, #0]
 8012c46:	f241 1211 	movw	r2, #4369	; 0x1111
 8012c4a:	6a19      	ldr	r1, [r3, #32]
 8012c4c:	4211      	tst	r1, r2
 8012c4e:	d06c      	beq.n	8012d2a <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c50:	2301      	movs	r3, #1
 8012c52:	2000      	movs	r0, #0
 8012c54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8012c5c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012c5e:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012c60:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012c62:	68d3      	ldr	r3, [r2, #12]
 8012c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c68:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012c6a:	f7f7 fdb9 	bl	800a7e0 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012c6e:	6823      	ldr	r3, [r4, #0]
 8012c70:	f241 1211 	movw	r2, #4369	; 0x1111
 8012c74:	6a19      	ldr	r1, [r3, #32]
 8012c76:	4211      	tst	r1, r2
 8012c78:	d161      	bne.n	8012d3e <HAL_TIM_IC_Stop_DMA+0x1da>
 8012c7a:	6a19      	ldr	r1, [r3, #32]
 8012c7c:	f240 4244 	movw	r2, #1092	; 0x444
 8012c80:	4211      	tst	r1, r2
 8012c82:	d15c      	bne.n	8012d3e <HAL_TIM_IC_Stop_DMA+0x1da>
 8012c84:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c86:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 8012c88:	f022 0201 	bic.w	r2, r2, #1
 8012c8c:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c8e:	d036      	beq.n	8012cfe <HAL_TIM_IC_Stop_DMA+0x19a>
 8012c90:	2d08      	cmp	r5, #8
 8012c92:	d01f      	beq.n	8012cd4 <HAL_TIM_IC_Stop_DMA+0x170>
 8012c94:	2d0c      	cmp	r5, #12
 8012c96:	d052      	beq.n	8012d3e <HAL_TIM_IC_Stop_DMA+0x1da>
 8012c98:	2d10      	cmp	r5, #16
 8012c9a:	f04f 0301 	mov.w	r3, #1
 8012c9e:	d063      	beq.n	8012d68 <HAL_TIM_IC_Stop_DMA+0x204>
 8012ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 8012cac:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012cae:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012cb0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012cb2:	68d3      	ldr	r3, [r2, #12]
 8012cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012cb8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012cba:	f7f7 fd91 	bl	800a7e0 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012cbe:	6823      	ldr	r3, [r4, #0]
 8012cc0:	f241 1211 	movw	r2, #4369	; 0x1111
 8012cc4:	6a19      	ldr	r1, [r3, #32]
 8012cc6:	4211      	tst	r1, r2
 8012cc8:	d104      	bne.n	8012cd4 <HAL_TIM_IC_Stop_DMA+0x170>
 8012cca:	6a19      	ldr	r1, [r3, #32]
 8012ccc:	f240 4244 	movw	r2, #1092	; 0x444
 8012cd0:	4211      	tst	r1, r2
 8012cd2:	d0d7      	beq.n	8012c84 <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cdc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8012ce0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012ce2:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012ce4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012ce6:	68d3      	ldr	r3, [r2, #12]
 8012ce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012cec:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012cee:	f7f7 fd77 	bl	800a7e0 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012cf2:	6823      	ldr	r3, [r4, #0]
 8012cf4:	f241 1211 	movw	r2, #4369	; 0x1111
 8012cf8:	6a19      	ldr	r1, [r3, #32]
 8012cfa:	4211      	tst	r1, r2
 8012cfc:	d00f      	beq.n	8012d1e <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cfe:	2301      	movs	r3, #1
 8012d00:	2000      	movs	r0, #0
 8012d02:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8012d0a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012d0c:	2d14      	cmp	r5, #20
 8012d0e:	f63f af55 	bhi.w	8012bbc <HAL_TIM_IC_Stop_DMA+0x58>
 8012d12:	4b20      	ldr	r3, [pc, #128]	; (8012d94 <HAL_TIM_IC_Stop_DMA+0x230>)
 8012d14:	40eb      	lsrs	r3, r5
 8012d16:	07db      	lsls	r3, r3, #31
 8012d18:	f53f af77 	bmi.w	8012c0a <HAL_TIM_IC_Stop_DMA+0xa6>
 8012d1c:	e74e      	b.n	8012bbc <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 8012d1e:	6a19      	ldr	r1, [r3, #32]
 8012d20:	f240 4244 	movw	r2, #1092	; 0x444
 8012d24:	4211      	tst	r1, r2
 8012d26:	d0ad      	beq.n	8012c84 <HAL_TIM_IC_Stop_DMA+0x120>
 8012d28:	e7e9      	b.n	8012cfe <HAL_TIM_IC_Stop_DMA+0x19a>
 8012d2a:	6a19      	ldr	r1, [r3, #32]
 8012d2c:	f240 4244 	movw	r2, #1092	; 0x444
 8012d30:	4211      	tst	r1, r2
 8012d32:	d18d      	bne.n	8012c50 <HAL_TIM_IC_Stop_DMA+0xec>
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	f022 0201 	bic.w	r2, r2, #1
 8012d3a:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d3c:	e788      	b.n	8012c50 <HAL_TIM_IC_Stop_DMA+0xec>
 8012d3e:	2301      	movs	r3, #1
 8012d40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8012d44:	e7ae      	b.n	8012ca4 <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012d46:	4b14      	ldr	r3, [pc, #80]	; (8012d98 <HAL_TIM_IC_Stop_DMA+0x234>)
 8012d48:	4298      	cmp	r0, r3
 8012d4a:	d003      	beq.n	8012d54 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012d4c:	4b13      	ldr	r3, [pc, #76]	; (8012d9c <HAL_TIM_IC_Stop_DMA+0x238>)
 8012d4e:	4298      	cmp	r0, r3
 8012d50:	f47f af34 	bne.w	8012bbc <HAL_TIM_IC_Stop_DMA+0x58>
 8012d54:	2d00      	cmp	r5, #0
 8012d56:	f47f af31 	bne.w	8012bbc <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012d5a:	480d      	ldr	r0, [pc, #52]	; (8012d90 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8012d5c:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8012d60:	f7f2 fd82 	bl	8005868 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012d64:	6820      	ldr	r0, [r4, #0]
 8012d66:	e750      	b.n	8012c0a <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d6c:	e79a      	b.n	8012ca4 <HAL_TIM_IC_Stop_DMA+0x140>
 8012d6e:	bf00      	nop
 8012d70:	40010000 	.word	0x40010000
 8012d74:	40000400 	.word	0x40000400
 8012d78:	40000800 	.word	0x40000800
 8012d7c:	40000c00 	.word	0x40000c00
 8012d80:	40010400 	.word	0x40010400
 8012d84:	40014000 	.word	0x40014000
 8012d88:	40014400 	.word	0x40014400
 8012d8c:	40014800 	.word	0x40014800
 8012d90:	0802e51c 	.word	0x0802e51c
 8012d94:	00111111 	.word	0x00111111
 8012d98:	40001c00 	.word	0x40001c00
 8012d9c:	40002000 	.word	0x40002000

08012da0 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012da0:	6802      	ldr	r2, [r0, #0]
{
 8012da2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012da6:	4b6d      	ldr	r3, [pc, #436]	; (8012f5c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 8012da8:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012daa:	4f6d      	ldr	r7, [pc, #436]	; (8012f60 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 8012dac:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012dae:	429a      	cmp	r2, r3
 8012db0:	bf18      	it	ne
 8012db2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8012db6:	4e6b      	ldr	r6, [pc, #428]	; (8012f64 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8012db8:	496b      	ldr	r1, [pc, #428]	; (8012f68 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 8012dba:	bf14      	ite	ne
 8012dbc:	2301      	movne	r3, #1
 8012dbe:	2300      	moveq	r3, #0
 8012dc0:	42ba      	cmp	r2, r7
 8012dc2:	bf0c      	ite	eq
 8012dc4:	2300      	moveq	r3, #0
 8012dc6:	f003 0301 	andne.w	r3, r3, #1
 8012dca:	42b2      	cmp	r2, r6
 8012dcc:	bf0c      	ite	eq
 8012dce:	2300      	moveq	r3, #0
 8012dd0:	f003 0301 	andne.w	r3, r3, #1
 8012dd4:	428a      	cmp	r2, r1
 8012dd6:	bf0c      	ite	eq
 8012dd8:	2300      	moveq	r3, #0
 8012dda:	f003 0301 	andne.w	r3, r3, #1
 8012dde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012de2:	428a      	cmp	r2, r1
 8012de4:	bf0c      	ite	eq
 8012de6:	2300      	moveq	r3, #0
 8012de8:	f003 0301 	andne.w	r3, r3, #1
 8012dec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012df0:	428a      	cmp	r2, r1
 8012df2:	bf0c      	ite	eq
 8012df4:	2300      	moveq	r3, #0
 8012df6:	f003 0301 	andne.w	r3, r3, #1
 8012dfa:	b11b      	cbz	r3, 8012e04 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8012dfc:	4b5b      	ldr	r3, [pc, #364]	; (8012f6c <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	f040 808c 	bne.w	8012f1c <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012e04:	682b      	ldr	r3, [r5, #0]
 8012e06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8012e0a:	2b40      	cmp	r3, #64	; 0x40
 8012e0c:	d002      	beq.n	8012e14 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	f040 808a 	bne.w	8012f28 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8012e14:	68ab      	ldr	r3, [r5, #8]
 8012e16:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8012e1a:	d173      	bne.n	8012f04 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8012e1c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8012e20:	2b01      	cmp	r3, #1
 8012e22:	d078      	beq.n	8012f16 <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012e24:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 8012e26:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012e28:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8012f5c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8012e2c:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012e2e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8012f6c <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8012e32:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012e36:	eba2 0009 	sub.w	r0, r2, r9
 8012e3a:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8012e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012e42:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 8012e46:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012e48:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 8012e4c:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012e4e:	0940      	lsrs	r0, r0, #5
 8012e50:	0949      	lsrs	r1, r1, #5
 8012e52:	ea50 0301 	orrs.w	r3, r0, r1
 8012e56:	d135      	bne.n	8012ec4 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8012e58:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012e5a:	430b      	orrs	r3, r1
 8012e5c:	4940      	ldr	r1, [pc, #256]	; (8012f60 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8012e5e:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012e62:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8012e66:	bf08      	it	eq
 8012e68:	f043 0301 	orreq.w	r3, r3, #1
 8012e6c:	428a      	cmp	r2, r1
 8012e6e:	bf08      	it	eq
 8012e70:	f043 0301 	orreq.w	r3, r3, #1
 8012e74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e78:	428a      	cmp	r2, r1
 8012e7a:	bf08      	it	eq
 8012e7c:	f043 0301 	orreq.w	r3, r3, #1
 8012e80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e84:	428a      	cmp	r2, r1
 8012e86:	bf08      	it	eq
 8012e88:	f043 0301 	orreq.w	r3, r3, #1
 8012e8c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8012e90:	428a      	cmp	r2, r1
 8012e92:	bf08      	it	eq
 8012e94:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012e98:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012e9a:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012e9c:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 8012e9e:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ea0:	b913      	cbnz	r3, 8012ea8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012ea2:	4b33      	ldr	r3, [pc, #204]	; (8012f70 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d104      	bne.n	8012eb2 <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012ea8:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012eaa:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012eae:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012eb0:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8012eb2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8012eb4:	2201      	movs	r2, #1

  return HAL_OK;
 8012eb6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8012eb8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8012ebc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8012ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012ec4:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8012ec8:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 8012ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012ed0:	bf18      	it	ne
 8012ed2:	2b00      	cmpne	r3, #0
 8012ed4:	bf14      	ite	ne
 8012ed6:	f04f 0c01 	movne.w	ip, #1
 8012eda:	f04f 0c00 	moveq.w	ip, #0
 8012ede:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012ee2:	bf0c      	ite	eq
 8012ee4:	f04f 0c00 	moveq.w	ip, #0
 8012ee8:	f00c 0c01 	andne.w	ip, ip, #1
 8012eec:	f1bc 0f00 	cmp.w	ip, #0
 8012ef0:	d002      	beq.n	8012ef8 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8012ef2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012ef6:	d11d      	bne.n	8012f34 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012ef8:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012efc:	4603      	mov	r3, r0
 8012efe:	ea47 070e 	orr.w	r7, r7, lr
 8012f02:	e7aa      	b.n	8012e5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8012f04:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8012f08:	481a      	ldr	r0, [pc, #104]	; (8012f74 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012f0a:	f7f2 fcad 	bl	8005868 <assert_failed>
  __HAL_LOCK(htim);
 8012f0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d186      	bne.n	8012e24 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8012f16:	2002      	movs	r0, #2
}
 8012f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012f1c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8012f20:	4814      	ldr	r0, [pc, #80]	; (8012f74 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012f22:	f7f2 fca1 	bl	8005868 <assert_failed>
 8012f26:	e76d      	b.n	8012e04 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012f28:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8012f2c:	4811      	ldr	r0, [pc, #68]	; (8012f74 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012f2e:	f7f2 fc9b 	bl	8005868 <assert_failed>
 8012f32:	e76f      	b.n	8012e14 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012f34:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8012f38:	480e      	ldr	r0, [pc, #56]	; (8012f74 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012f3a:	f7f2 fc95 	bl	8005868 <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8012f3e:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012f40:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f44:	eba2 0309 	sub.w	r3, r2, r9
 8012f48:	eba2 0c08 	sub.w	ip, r2, r8
 8012f4c:	4258      	negs	r0, r3
 8012f4e:	4158      	adcs	r0, r3
 8012f50:	f1dc 0100 	rsbs	r1, ip, #0
 8012f54:	eb41 010c 	adc.w	r1, r1, ip
 8012f58:	e7ce      	b.n	8012ef8 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8012f5a:	bf00      	nop
 8012f5c:	40010000 	.word	0x40010000
 8012f60:	40000400 	.word	0x40000400
 8012f64:	40000800 	.word	0x40000800
 8012f68:	40000c00 	.word	0x40000c00
 8012f6c:	40010400 	.word	0x40010400
 8012f70:	40001800 	.word	0x40001800
 8012f74:	0802e554 	.word	0x0802e554

08012f78 <HAL_TIMEx_CommutCallback>:
 8012f78:	4770      	bx	lr
 8012f7a:	bf00      	nop

08012f7c <HAL_TIMEx_BreakCallback>:
 8012f7c:	4770      	bx	lr
 8012f7e:	bf00      	nop

08012f80 <HAL_TIMEx_Break2Callback>:
 8012f80:	4770      	bx	lr
 8012f82:	bf00      	nop

08012f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012f84:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f86:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f8e:	e842 3100 	strex	r1, r3, [r2]
 8012f92:	2900      	cmp	r1, #0
 8012f94:	d1f7      	bne.n	8012f86 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f96:	f102 0308 	add.w	r3, r2, #8
 8012f9a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fa2:	f102 0c08 	add.w	ip, r2, #8
 8012fa6:	e84c 3100 	strex	r1, r3, [ip]
 8012faa:	2900      	cmp	r1, #0
 8012fac:	d1f3      	bne.n	8012f96 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012fae:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d005      	beq.n	8012fc0 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fb4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8012fb6:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012fb8:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 8012fba:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fbc:	6603      	str	r3, [r0, #96]	; 0x60
}
 8012fbe:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fc0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012fc4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fc8:	e842 3100 	strex	r1, r3, [r2]
 8012fcc:	2900      	cmp	r1, #0
 8012fce:	d0f1      	beq.n	8012fb4 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fd0:	e852 3f00 	ldrex	r3, [r2]
 8012fd4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fd8:	e842 3100 	strex	r1, r3, [r2]
 8012fdc:	2900      	cmp	r1, #0
 8012fde:	d1ef      	bne.n	8012fc0 <UART_EndRxTransfer+0x3c>
 8012fe0:	e7e8      	b.n	8012fb4 <UART_EndRxTransfer+0x30>
 8012fe2:	bf00      	nop

08012fe4 <HAL_UART_DeInit>:
  if (huart == NULL)
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	d046      	beq.n	8013076 <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8012fe8:	6802      	ldr	r2, [r0, #0]
 8012fea:	4927      	ldr	r1, [pc, #156]	; (8013088 <HAL_UART_DeInit+0xa4>)
{
 8012fec:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8012fee:	4b27      	ldr	r3, [pc, #156]	; (801308c <HAL_UART_DeInit+0xa8>)
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	4827      	ldr	r0, [pc, #156]	; (8013090 <HAL_UART_DeInit+0xac>)
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	bf18      	it	ne
 8012ff8:	4282      	cmpne	r2, r0
 8012ffa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8012ffe:	bf14      	ite	ne
 8013000:	2301      	movne	r3, #1
 8013002:	2300      	moveq	r3, #0
 8013004:	428a      	cmp	r2, r1
 8013006:	bf0c      	ite	eq
 8013008:	2300      	moveq	r3, #0
 801300a:	f003 0301 	andne.w	r3, r3, #1
 801300e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013012:	4282      	cmp	r2, r0
 8013014:	bf0c      	ite	eq
 8013016:	2300      	moveq	r3, #0
 8013018:	f003 0301 	andne.w	r3, r3, #1
 801301c:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8013020:	428a      	cmp	r2, r1
 8013022:	bf0c      	ite	eq
 8013024:	2300      	moveq	r3, #0
 8013026:	f003 0301 	andne.w	r3, r3, #1
 801302a:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 801302e:	4282      	cmp	r2, r0
 8013030:	bf0c      	ite	eq
 8013032:	2300      	moveq	r3, #0
 8013034:	f003 0301 	andne.w	r3, r3, #1
 8013038:	428a      	cmp	r2, r1
 801303a:	bf0c      	ite	eq
 801303c:	2300      	moveq	r3, #0
 801303e:	f003 0301 	andne.w	r3, r3, #1
 8013042:	b113      	cbz	r3, 801304a <HAL_UART_DeInit+0x66>
 8013044:	4b13      	ldr	r3, [pc, #76]	; (8013094 <HAL_UART_DeInit+0xb0>)
 8013046:	429a      	cmp	r2, r3
 8013048:	d117      	bne.n	801307a <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 801304a:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 801304c:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 801304e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8013050:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8013052:	6813      	ldr	r3, [r2, #0]
 8013054:	f023 0301 	bic.w	r3, r3, #1
 8013058:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 801305a:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 801305c:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 801305e:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 8013060:	f7f5 f804 	bl	800806c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013064:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 8013068:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 801306a:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 801306c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8013070:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013072:	6625      	str	r5, [r4, #96]	; 0x60
}
 8013074:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8013076:	2001      	movs	r0, #1
}
 8013078:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 801307a:	f240 2167 	movw	r1, #615	; 0x267
 801307e:	4806      	ldr	r0, [pc, #24]	; (8013098 <HAL_UART_DeInit+0xb4>)
 8013080:	f7f2 fbf2 	bl	8005868 <assert_failed>
  __HAL_UART_DISABLE(huart);
 8013084:	6822      	ldr	r2, [r4, #0]
 8013086:	e7e0      	b.n	801304a <HAL_UART_DeInit+0x66>
 8013088:	40004800 	.word	0x40004800
 801308c:	40011000 	.word	0x40011000
 8013090:	40004400 	.word	0x40004400
 8013094:	40007c00 	.word	0x40007c00
 8013098:	0802e590 	.word	0x0802e590

0801309c <HAL_UART_Transmit_DMA>:
{
 801309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 801309e:	6f87      	ldr	r7, [r0, #120]	; 0x78
 80130a0:	2f20      	cmp	r7, #32
 80130a2:	d141      	bne.n	8013128 <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 80130a4:	2900      	cmp	r1, #0
 80130a6:	d03d      	beq.n	8013124 <HAL_UART_Transmit_DMA+0x88>
 80130a8:	fab2 f682 	clz	r6, r2
 80130ac:	0976      	lsrs	r6, r6, #5
 80130ae:	2a00      	cmp	r2, #0
 80130b0:	d038      	beq.n	8013124 <HAL_UART_Transmit_DMA+0x88>
 80130b2:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 80130b4:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 80130b8:	2801      	cmp	r0, #1
 80130ba:	d035      	beq.n	8013128 <HAL_UART_Transmit_DMA+0x8c>
 80130bc:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80130be:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 80130c0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 80130c2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 80130c6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80130c8:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 80130cc:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 80130d0:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80130d4:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 80130d6:	b190      	cbz	r0, 80130fe <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80130d8:	f8df c060 	ldr.w	ip, [pc, #96]	; 801313c <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80130dc:	4613      	mov	r3, r2
 80130de:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80130e0:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80130e4:	f8df c058 	ldr.w	ip, [pc, #88]	; 8013140 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80130e8:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 80130ea:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80130ec:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80130f0:	f8df c050 	ldr.w	ip, [pc, #80]	; 8013144 <HAL_UART_Transmit_DMA+0xa8>
 80130f4:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80130f8:	f7f7 face 	bl	800a698 <HAL_DMA_Start_IT>
 80130fc:	b9b0      	cbnz	r0, 801312c <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80130fe:	6822      	ldr	r2, [r4, #0]
 8013100:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8013102:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013104:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8013106:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801310a:	f102 0308 	add.w	r3, r2, #8
 801310e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013116:	f102 0108 	add.w	r1, r2, #8
 801311a:	e841 3000 	strex	r0, r3, [r1]
 801311e:	2800      	cmp	r0, #0
 8013120:	d1f3      	bne.n	801310a <HAL_UART_Transmit_DMA+0x6e>
}
 8013122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8013124:	2001      	movs	r0, #1
}
 8013126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8013128:	2002      	movs	r0, #2
}
 801312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801312c:	2310      	movs	r3, #16
        return HAL_ERROR;
 801312e:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8013130:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013134:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8013138:	67a7      	str	r7, [r4, #120]	; 0x78
}
 801313a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801313c:	0801324d 	.word	0x0801324d
 8013140:	08013295 	.word	0x08013295
 8013144:	080132a5 	.word	0x080132a5

08013148 <HAL_UART_Abort>:
{
 8013148:	b538      	push	{r3, r4, r5, lr}
 801314a:	4604      	mov	r4, r0
 801314c:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801314e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8013152:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013156:	e843 2100 	strex	r1, r2, [r3]
 801315a:	2900      	cmp	r1, #0
 801315c:	d1f7      	bne.n	801314e <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801315e:	f103 0208 	add.w	r2, r3, #8
 8013162:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013166:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801316a:	f103 0008 	add.w	r0, r3, #8
 801316e:	e840 2100 	strex	r1, r2, [r0]
 8013172:	2900      	cmp	r1, #0
 8013174:	d1f3      	bne.n	801315e <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013176:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8013178:	2a01      	cmp	r2, #1
 801317a:	d043      	beq.n	8013204 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801317c:	6899      	ldr	r1, [r3, #8]
 801317e:	461a      	mov	r2, r3
 8013180:	0608      	lsls	r0, r1, #24
 8013182:	d42a      	bmi.n	80131da <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013184:	6899      	ldr	r1, [r3, #8]
 8013186:	0649      	lsls	r1, r1, #25
 8013188:	d514      	bpl.n	80131b4 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801318a:	f103 0208 	add.w	r2, r3, #8
 801318e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013196:	f103 0008 	add.w	r0, r3, #8
 801319a:	e840 2100 	strex	r1, r2, [r0]
 801319e:	2900      	cmp	r1, #0
 80131a0:	d1f3      	bne.n	801318a <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 80131a2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d03e      	beq.n	8013226 <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 80131a8:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80131aa:	f7f7 fad1 	bl	800a750 <HAL_DMA_Abort>
 80131ae:	2800      	cmp	r0, #0
 80131b0:	d145      	bne.n	801323e <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80131b2:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 80131b4:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80131b6:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 80131b8:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 80131ba:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 80131be:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 80131c0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80131c4:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80131c6:	6991      	ldr	r1, [r2, #24]
 80131c8:	f041 0108 	orr.w	r1, r1, #8
 80131cc:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80131ce:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80131d0:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80131d2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131d4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80131d8:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131da:	f103 0208 	add.w	r2, r3, #8
 80131de:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80131e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131e6:	f103 0008 	add.w	r0, r3, #8
 80131ea:	e840 2100 	strex	r1, r2, [r0]
 80131ee:	2900      	cmp	r1, #0
 80131f0:	d1f3      	bne.n	80131da <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 80131f2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80131f4:	b120      	cbz	r0, 8013200 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 80131f6:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80131f8:	f7f7 faaa 	bl	800a750 <HAL_DMA_Abort>
 80131fc:	b9a8      	cbnz	r0, 801322a <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131fe:	6823      	ldr	r3, [r4, #0]
 8013200:	461a      	mov	r2, r3
 8013202:	e7bf      	b.n	8013184 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013204:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8013208:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801320c:	e843 2100 	strex	r1, r2, [r3]
 8013210:	2900      	cmp	r1, #0
 8013212:	d0b3      	beq.n	801317c <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013214:	e853 2f00 	ldrex	r2, [r3]
 8013218:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801321c:	e843 2100 	strex	r1, r2, [r3]
 8013220:	2900      	cmp	r1, #0
 8013222:	d1ef      	bne.n	8013204 <HAL_UART_Abort+0xbc>
 8013224:	e7aa      	b.n	801317c <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013226:	461a      	mov	r2, r3
 8013228:	e7c4      	b.n	80131b4 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801322a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801322c:	f7f7 fbdc 	bl	800a9e8 <HAL_DMA_GetError>
 8013230:	2820      	cmp	r0, #32
 8013232:	d1e4      	bne.n	80131fe <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013234:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 8013236:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013238:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 801323c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801323e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8013240:	f7f7 fbd2 	bl	800a9e8 <HAL_DMA_GetError>
 8013244:	2820      	cmp	r0, #32
 8013246:	d1b4      	bne.n	80131b2 <HAL_UART_Abort+0x6a>
 8013248:	e7f4      	b.n	8013234 <HAL_UART_Abort+0xec>
 801324a:	bf00      	nop

0801324c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801324c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801324e:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013250:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013256:	d018      	beq.n	801328a <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8013258:	2300      	movs	r3, #0
 801325a:	6802      	ldr	r2, [r0, #0]
 801325c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013260:	f102 0308 	add.w	r3, r2, #8
 8013264:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801326c:	f102 0008 	add.w	r0, r2, #8
 8013270:	e840 3100 	strex	r1, r3, [r0]
 8013274:	2900      	cmp	r1, #0
 8013276:	d1f3      	bne.n	8013260 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013278:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801327c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013280:	e842 3100 	strex	r1, r3, [r2]
 8013284:	2900      	cmp	r1, #0
 8013286:	d1f7      	bne.n	8013278 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013288:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 801328a:	f7ee feb5 	bl	8001ff8 <HAL_UART_TxCpltCallback>
}
 801328e:	bd08      	pop	{r3, pc}

08013290 <HAL_UART_TxHalfCpltCallback>:
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop

08013294 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013294:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8013296:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8013298:	f7ff fffa 	bl	8013290 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801329c:	bd08      	pop	{r3, pc}
 801329e:	bf00      	nop

080132a0 <HAL_UART_RxHalfCpltCallback>:
 80132a0:	4770      	bx	lr
 80132a2:	bf00      	nop

080132a4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80132a4:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80132a6:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80132a8:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 80132aa:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80132ac:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80132ae:	6893      	ldr	r3, [r2, #8]
 80132b0:	061b      	lsls	r3, r3, #24
 80132b2:	d501      	bpl.n	80132b8 <UART_DMAError+0x14>
 80132b4:	2921      	cmp	r1, #33	; 0x21
 80132b6:	d00d      	beq.n	80132d4 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80132b8:	6893      	ldr	r3, [r2, #8]
 80132ba:	065b      	lsls	r3, r3, #25
 80132bc:	d501      	bpl.n	80132c2 <UART_DMAError+0x1e>
 80132be:	2c22      	cmp	r4, #34	; 0x22
 80132c0:	d016      	beq.n	80132f0 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80132c2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80132c6:	f043 0310 	orr.w	r3, r3, #16
 80132ca:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80132ce:	f7f2 fe21 	bl	8005f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80132d2:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 80132d4:	2300      	movs	r3, #0
 80132d6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132da:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80132de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132e2:	e842 3100 	strex	r1, r3, [r2]
 80132e6:	2900      	cmp	r1, #0
 80132e8:	d1f7      	bne.n	80132da <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 80132ea:	2320      	movs	r3, #32
 80132ec:	6783      	str	r3, [r0, #120]	; 0x78
}
 80132ee:	e7e3      	b.n	80132b8 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 80132f0:	2300      	movs	r3, #0
 80132f2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80132f6:	f7ff fe45 	bl	8012f84 <UART_EndRxTransfer>
 80132fa:	e7e2      	b.n	80132c2 <UART_DMAError+0x1e>

080132fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80132fc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80132fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8013300:	2300      	movs	r3, #0
 8013302:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8013306:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801330a:	f7f2 fe03 	bl	8005f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801330e:	bd08      	pop	{r3, pc}

08013310 <HAL_UART_AbortCpltCallback>:
 8013310:	4770      	bx	lr
 8013312:	bf00      	nop

08013314 <HAL_UART_Abort_IT>:
{
 8013314:	b570      	push	{r4, r5, r6, lr}
 8013316:	6803      	ldr	r3, [r0, #0]
 8013318:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801331a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801331e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013322:	e843 2100 	strex	r1, r2, [r3]
 8013326:	2900      	cmp	r1, #0
 8013328:	d1f7      	bne.n	801331a <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801332a:	f103 0208 	add.w	r2, r3, #8
 801332e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013332:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013336:	f103 0008 	add.w	r0, r3, #8
 801333a:	e840 2100 	strex	r1, r2, [r0]
 801333e:	2900      	cmp	r1, #0
 8013340:	d1f3      	bne.n	801332a <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013342:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8013344:	2a01      	cmp	r2, #1
 8013346:	d05e      	beq.n	8013406 <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 8013348:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 801334a:	2800      	cmp	r0, #0
 801334c:	d071      	beq.n	8013432 <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801334e:	689a      	ldr	r2, [r3, #8]
 8013350:	461c      	mov	r4, r3
 8013352:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8013356:	bf18      	it	ne
 8013358:	4a3b      	ldrne	r2, [pc, #236]	; (8013448 <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 801335a:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 801335c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801335e:	b129      	cbz	r1, 801336c <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013360:	689a      	ldr	r2, [r3, #8]
 8013362:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8013366:	bf18      	it	ne
 8013368:	4a38      	ldrne	r2, [pc, #224]	; (801344c <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 801336a:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801336c:	689a      	ldr	r2, [r3, #8]
 801336e:	0612      	lsls	r2, r2, #24
 8013370:	d430      	bmi.n	80133d4 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013372:	689a      	ldr	r2, [r3, #8]
 8013374:	0656      	lsls	r6, r2, #25
 8013376:	d515      	bpl.n	80133a4 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8013378:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801337a:	f103 0208 	add.w	r2, r3, #8
 801337e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013386:	f103 0008 	add.w	r0, r3, #8
 801338a:	e840 2600 	strex	r6, r2, [r0]
 801338e:	2e00      	cmp	r6, #0
 8013390:	d1f3      	bne.n	801337a <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 8013392:	2900      	cmp	r1, #0
 8013394:	d04f      	beq.n	8013436 <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013396:	4608      	mov	r0, r1
 8013398:	f7f7 fa22 	bl	800a7e0 <HAL_DMA_Abort_IT>
 801339c:	b1c0      	cbz	r0, 80133d0 <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 801339e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80133a0:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 80133a2:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 80133a4:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80133a6:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 80133a8:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 80133aa:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 80133ac:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 80133b0:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 80133b2:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 80133b6:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133b8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80133bc:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80133be:	69a2      	ldr	r2, [r4, #24]
 80133c0:	f042 0208 	orr.w	r2, r2, #8
 80133c4:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 80133c6:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 80133c8:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80133ca:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 80133cc:	f7ff ffa0 	bl	8013310 <HAL_UART_AbortCpltCallback>
}
 80133d0:	2000      	movs	r0, #0
 80133d2:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133d4:	f103 0208 	add.w	r2, r3, #8
 80133d8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80133dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133e0:	f103 0608 	add.w	r6, r3, #8
 80133e4:	e846 2400 	strex	r4, r2, [r6]
 80133e8:	2c00      	cmp	r4, #0
 80133ea:	d1f3      	bne.n	80133d4 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 80133ec:	b1e0      	cbz	r0, 8013428 <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80133ee:	f7f7 f9f7 	bl	800a7e0 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133f2:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80133f4:	b318      	cbz	r0, 801343e <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 80133f6:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133f8:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 80133fa:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133fc:	461c      	mov	r4, r3
 80133fe:	0651      	lsls	r1, r2, #25
 8013400:	d5d0      	bpl.n	80133a4 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8013402:	2401      	movs	r4, #1
 8013404:	e01e      	b.n	8013444 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013406:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801340a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801340e:	e843 2100 	strex	r1, r2, [r3]
 8013412:	2900      	cmp	r1, #0
 8013414:	d098      	beq.n	8013348 <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013416:	e853 2f00 	ldrex	r2, [r3]
 801341a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801341e:	e843 2100 	strex	r1, r2, [r3]
 8013422:	2900      	cmp	r1, #0
 8013424:	d1ef      	bne.n	8013406 <HAL_UART_Abort_IT+0xf2>
 8013426:	e78f      	b.n	8013348 <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013428:	689a      	ldr	r2, [r3, #8]
 801342a:	461c      	mov	r4, r3
 801342c:	0652      	lsls	r2, r2, #25
 801342e:	d5b9      	bpl.n	80133a4 <HAL_UART_Abort_IT+0x90>
 8013430:	e7a2      	b.n	8013378 <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8013432:	461c      	mov	r4, r3
 8013434:	e792      	b.n	801335c <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 8013436:	2c01      	cmp	r4, #1
 8013438:	d1ca      	bne.n	80133d0 <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801343a:	461c      	mov	r4, r3
 801343c:	e7b2      	b.n	80133a4 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801343e:	689a      	ldr	r2, [r3, #8]
 8013440:	0650      	lsls	r0, r2, #25
 8013442:	d5c5      	bpl.n	80133d0 <HAL_UART_Abort_IT+0xbc>
 8013444:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8013446:	e798      	b.n	801337a <HAL_UART_Abort_IT+0x66>
 8013448:	08013491 	.word	0x08013491
 801344c:	08013451 	.word	0x08013451

08013450 <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013450:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 8013452:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8013454:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 8013458:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 801345a:	b113      	cbz	r3, 8013462 <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 801345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801345e:	b103      	cbz	r3, 8013462 <UART_DMARxAbortCallback+0x12>
 8013460:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8013462:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013464:	6802      	ldr	r2, [r0, #0]
 8013466:	210f      	movs	r1, #15
{
 8013468:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 801346a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801346e:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 8013470:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013474:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013478:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801347a:	6991      	ldr	r1, [r2, #24]
 801347c:	f041 0108 	orr.w	r1, r1, #8
 8013480:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8013482:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013484:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013486:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8013488:	f7ff ff42 	bl	8013310 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801348c:	bd10      	pop	{r4, pc}
 801348e:	bf00      	nop

08013490 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013490:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 8013492:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 8013494:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 8013498:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 801349a:	b113      	cbz	r3, 80134a2 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 801349c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801349e:	b103      	cbz	r3, 80134a2 <UART_DMATxAbortCallback+0x12>
 80134a0:	4770      	bx	lr
{
 80134a2:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 80134a4:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 80134a6:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80134a8:	6801      	ldr	r1, [r0, #0]
 80134aa:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 80134ac:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 80134b0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134b4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80134b8:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 80134ba:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80134bc:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134be:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 80134c0:	f7ff ff26 	bl	8013310 <HAL_UART_AbortCpltCallback>
}
 80134c4:	bd10      	pop	{r4, pc}
 80134c6:	bf00      	nop

080134c8 <HAL_UARTEx_RxEventCallback>:
}
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop

080134cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80134cc:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80134ce:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80134d0:	2b22      	cmp	r3, #34	; 0x22
 80134d2:	d005      	beq.n	80134e0 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80134d4:	6802      	ldr	r2, [r0, #0]
 80134d6:	6993      	ldr	r3, [r2, #24]
 80134d8:	f043 0308 	orr.w	r3, r3, #8
 80134dc:	6193      	str	r3, [r2, #24]
  }
}
 80134de:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80134e0:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80134e2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80134e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80134e8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80134ea:	400b      	ands	r3, r1
 80134ec:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 80134ee:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 80134f2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80134f4:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 80134f6:	3201      	adds	r2, #1
    huart->RxXferCount--;
 80134f8:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 80134fa:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80134fc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8013500:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8013504:	b29b      	uxth	r3, r3
 8013506:	2b00      	cmp	r3, #0
 8013508:	d1e9      	bne.n	80134de <UART_RxISR_8BIT+0x12>
 801350a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801350c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013510:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013514:	e843 2100 	strex	r1, r2, [r3]
 8013518:	2900      	cmp	r1, #0
 801351a:	d1f7      	bne.n	801350c <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801351c:	f103 0208 	add.w	r2, r3, #8
 8013520:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013524:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013528:	f103 0c08 	add.w	ip, r3, #8
 801352c:	e84c 2100 	strex	r1, r2, [ip]
 8013530:	2900      	cmp	r1, #0
 8013532:	d1f3      	bne.n	801351c <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 8013534:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8013536:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8013538:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801353a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801353c:	2a01      	cmp	r2, #1
 801353e:	d112      	bne.n	8013566 <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013540:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013542:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013546:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801354a:	e843 2100 	strex	r1, r2, [r3]
 801354e:	2900      	cmp	r1, #0
 8013550:	d1f7      	bne.n	8013542 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013552:	69da      	ldr	r2, [r3, #28]
 8013554:	06d2      	lsls	r2, r2, #27
 8013556:	d501      	bpl.n	801355c <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013558:	2210      	movs	r2, #16
 801355a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801355c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8013560:	f7ff ffb2 	bl	80134c8 <HAL_UARTEx_RxEventCallback>
}
 8013564:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8013566:	f7f2 fc5f 	bl	8005e28 <HAL_UART_RxCpltCallback>
}
 801356a:	bd08      	pop	{r3, pc}

0801356c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801356c:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801356e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8013570:	2b22      	cmp	r3, #34	; 0x22
 8013572:	d005      	beq.n	8013580 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013574:	6802      	ldr	r2, [r0, #0]
 8013576:	6993      	ldr	r3, [r2, #24]
 8013578:	f043 0308 	orr.w	r3, r3, #8
 801357c:	6193      	str	r3, [r2, #24]
  }
}
 801357e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013580:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8013582:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8013588:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801358a:	ea02 020c 	and.w	r2, r2, ip
 801358e:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8013592:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8013596:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8013598:	3a01      	subs	r2, #1
 801359a:	b292      	uxth	r2, r2
 801359c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80135a0:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80135a4:	b292      	uxth	r2, r2
 80135a6:	2a00      	cmp	r2, #0
 80135a8:	d1e9      	bne.n	801357e <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135aa:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80135ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135b2:	e843 2100 	strex	r1, r2, [r3]
 80135b6:	2900      	cmp	r1, #0
 80135b8:	d1f7      	bne.n	80135aa <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135ba:	f103 0208 	add.w	r2, r3, #8
 80135be:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80135c2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135c6:	f103 0c08 	add.w	ip, r3, #8
 80135ca:	e84c 2100 	strex	r1, r2, [ip]
 80135ce:	2900      	cmp	r1, #0
 80135d0:	d1f3      	bne.n	80135ba <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 80135d2:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 80135d4:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 80135d6:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80135d8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80135da:	2a01      	cmp	r2, #1
 80135dc:	d112      	bne.n	8013604 <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135de:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135e0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80135e4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135e8:	e843 2100 	strex	r1, r2, [r3]
 80135ec:	2900      	cmp	r1, #0
 80135ee:	d1f7      	bne.n	80135e0 <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80135f0:	69da      	ldr	r2, [r3, #28]
 80135f2:	06d2      	lsls	r2, r2, #27
 80135f4:	d501      	bpl.n	80135fa <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80135f6:	2210      	movs	r2, #16
 80135f8:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80135fa:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80135fe:	f7ff ff63 	bl	80134c8 <HAL_UARTEx_RxEventCallback>
}
 8013602:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8013604:	f7f2 fc10 	bl	8005e28 <HAL_UART_RxCpltCallback>
}
 8013608:	bd08      	pop	{r3, pc}
 801360a:	bf00      	nop

0801360c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801360c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801360e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013610:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013612:	2b01      	cmp	r3, #1
 8013614:	d002      	beq.n	801361c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8013616:	f7ff fe43 	bl	80132a0 <HAL_UART_RxHalfCpltCallback>
}
 801361a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801361c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8013620:	0849      	lsrs	r1, r1, #1
 8013622:	f7ff ff51 	bl	80134c8 <HAL_UARTEx_RxEventCallback>
}
 8013626:	bd08      	pop	{r3, pc}

08013628 <UART_DMAReceiveCplt>:
{
 8013628:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801362a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801362c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801362e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013632:	d028      	beq.n	8013686 <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 8013634:	2200      	movs	r2, #0
 8013636:	6803      	ldr	r3, [r0, #0]
 8013638:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801363c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013644:	e843 2100 	strex	r1, r2, [r3]
 8013648:	2900      	cmp	r1, #0
 801364a:	d1f7      	bne.n	801363c <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801364c:	f103 0208 	add.w	r2, r3, #8
 8013650:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013654:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013658:	f103 0c08 	add.w	ip, r3, #8
 801365c:	e84c 2100 	strex	r1, r2, [ip]
 8013660:	2900      	cmp	r1, #0
 8013662:	d1f3      	bne.n	801364c <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013664:	f103 0208 	add.w	r2, r3, #8
 8013668:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801366c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013670:	f103 0c08 	add.w	ip, r3, #8
 8013674:	e84c 2100 	strex	r1, r2, [ip]
 8013678:	2900      	cmp	r1, #0
 801367a:	d1f3      	bne.n	8013664 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 801367c:	2220      	movs	r2, #32
 801367e:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013680:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8013682:	2a01      	cmp	r2, #1
 8013684:	d005      	beq.n	8013692 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013686:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013688:	2b01      	cmp	r3, #1
 801368a:	d013      	beq.n	80136b4 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 801368c:	f7f2 fbcc 	bl	8005e28 <HAL_UART_RxCpltCallback>
}
 8013690:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013692:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013696:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801369a:	e843 2100 	strex	r1, r2, [r3]
 801369e:	2900      	cmp	r1, #0
 80136a0:	d0f1      	beq.n	8013686 <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136a2:	e853 2f00 	ldrex	r2, [r3]
 80136a6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136aa:	e843 2100 	strex	r1, r2, [r3]
 80136ae:	2900      	cmp	r1, #0
 80136b0:	d1ef      	bne.n	8013692 <UART_DMAReceiveCplt+0x6a>
 80136b2:	e7e8      	b.n	8013686 <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80136b4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80136b8:	f7ff ff06 	bl	80134c8 <HAL_UARTEx_RxEventCallback>
}
 80136bc:	bd08      	pop	{r3, pc}
 80136be:	bf00      	nop

080136c0 <HAL_UARTEx_WakeupCallback>:
}
 80136c0:	4770      	bx	lr
 80136c2:	bf00      	nop

080136c4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80136c4:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80136c6:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80136ca:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80136cc:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 80136ce:	ea12 0f0c 	tst.w	r2, ip
{
 80136d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80136d8:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 80136da:	d17d      	bne.n	80137d8 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80136dc:	0697      	lsls	r7, r2, #26
 80136de:	d502      	bpl.n	80136e6 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80136e0:	068e      	lsls	r6, r1, #26
 80136e2:	f100 80f4 	bmi.w	80138ce <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80136e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80136e8:	2801      	cmp	r0, #1
 80136ea:	d024      	beq.n	8013736 <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80136ec:	02d0      	lsls	r0, r2, #11
 80136ee:	d502      	bpl.n	80136f6 <HAL_UART_IRQHandler+0x32>
 80136f0:	026f      	lsls	r7, r5, #9
 80136f2:	f100 80f1 	bmi.w	80138d8 <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80136f6:	0616      	lsls	r6, r2, #24
 80136f8:	d414      	bmi.n	8013724 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80136fa:	0650      	lsls	r0, r2, #25
 80136fc:	d501      	bpl.n	8013702 <HAL_UART_IRQHandler+0x3e>
 80136fe:	064a      	lsls	r2, r1, #25
 8013700:	d401      	bmi.n	8013706 <HAL_UART_IRQHandler+0x42>
}
 8013702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013706:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801370a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801370e:	e843 2100 	strex	r1, r2, [r3]
 8013712:	2900      	cmp	r1, #0
 8013714:	d1f7      	bne.n	8013706 <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 8013716:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 8013718:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 801371a:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 801371c:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 801371e:	f7ee fc6b 	bl	8001ff8 <HAL_UART_TxCpltCallback>
}
 8013722:	e7ee      	b.n	8013702 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8013724:	060d      	lsls	r5, r1, #24
 8013726:	d5e8      	bpl.n	80136fa <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 8013728:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801372a:	2b00      	cmp	r3, #0
 801372c:	d0e9      	beq.n	8013702 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 801372e:	4620      	mov	r0, r4
}
 8013730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8013734:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013736:	06d7      	lsls	r7, r2, #27
 8013738:	d5d8      	bpl.n	80136ec <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801373a:	06ce      	lsls	r6, r1, #27
 801373c:	d5d6      	bpl.n	80136ec <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801373e:	2210      	movs	r2, #16
 8013740:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013742:	689a      	ldr	r2, [r3, #8]
 8013744:	0655      	lsls	r5, r2, #25
 8013746:	f140 80d9 	bpl.w	80138fc <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801374a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801374c:	6802      	ldr	r2, [r0, #0]
 801374e:	6852      	ldr	r2, [r2, #4]
 8013750:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8013752:	2a00      	cmp	r2, #0
 8013754:	d0d5      	beq.n	8013702 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013756:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 801375a:	4291      	cmp	r1, r2
 801375c:	d9d1      	bls.n	8013702 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 801375e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013762:	69c2      	ldr	r2, [r0, #28]
 8013764:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8013768:	d02e      	beq.n	80137c8 <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801376a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801376e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013772:	e843 2100 	strex	r1, r2, [r3]
 8013776:	2900      	cmp	r1, #0
 8013778:	d1f7      	bne.n	801376a <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801377a:	f103 0208 	add.w	r2, r3, #8
 801377e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013782:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013786:	f103 0508 	add.w	r5, r3, #8
 801378a:	e845 2100 	strex	r1, r2, [r5]
 801378e:	2900      	cmp	r1, #0
 8013790:	d1f3      	bne.n	801377a <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013792:	f103 0208 	add.w	r2, r3, #8
 8013796:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801379a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801379e:	f103 0508 	add.w	r5, r3, #8
 80137a2:	e845 2100 	strex	r1, r2, [r5]
 80137a6:	2900      	cmp	r1, #0
 80137a8:	d1f3      	bne.n	8013792 <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 80137aa:	2220      	movs	r2, #32
 80137ac:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137ae:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137b0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80137b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137b8:	e843 2100 	strex	r1, r2, [r3]
 80137bc:	2900      	cmp	r1, #0
 80137be:	d1f7      	bne.n	80137b0 <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80137c0:	f7f6 ffc6 	bl	800a750 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80137c4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80137c8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80137cc:	4620      	mov	r0, r4
 80137ce:	1ac9      	subs	r1, r1, r3
 80137d0:	b289      	uxth	r1, r1
 80137d2:	f7ff fe79 	bl	80134c8 <HAL_UARTEx_RxEventCallback>
 80137d6:	e794      	b.n	8013702 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80137d8:	4864      	ldr	r0, [pc, #400]	; (801396c <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80137da:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80137de:	4008      	ands	r0, r1
 80137e0:	4330      	orrs	r0, r6
 80137e2:	d080      	beq.n	80136e6 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80137e4:	07d5      	lsls	r5, r2, #31
 80137e6:	461f      	mov	r7, r3
 80137e8:	d509      	bpl.n	80137fe <HAL_UART_IRQHandler+0x13a>
 80137ea:	05c8      	lsls	r0, r1, #23
 80137ec:	d507      	bpl.n	80137fe <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80137ee:	2001      	movs	r0, #1
 80137f0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80137f2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80137f6:	f040 0001 	orr.w	r0, r0, #1
 80137fa:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80137fe:	0795      	lsls	r5, r2, #30
 8013800:	d560      	bpl.n	80138c4 <HAL_UART_IRQHandler+0x200>
 8013802:	b18e      	cbz	r6, 8013828 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013804:	2002      	movs	r0, #2
 8013806:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013808:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801380c:	f040 0004 	orr.w	r0, r0, #4
 8013810:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013814:	0750      	lsls	r0, r2, #29
 8013816:	d507      	bpl.n	8013828 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013818:	2004      	movs	r0, #4
 801381a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801381c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8013820:	f040 0002 	orr.w	r0, r0, #2
 8013824:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013828:	0710      	lsls	r0, r2, #28
 801382a:	d50b      	bpl.n	8013844 <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801382c:	f001 0020 	and.w	r0, r1, #32
 8013830:	4330      	orrs	r0, r6
 8013832:	d007      	beq.n	8013844 <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013834:	2008      	movs	r0, #8
 8013836:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013838:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801383c:	f040 0008 	orr.w	r0, r0, #8
 8013840:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013844:	0516      	lsls	r6, r2, #20
 8013846:	d50a      	bpl.n	801385e <HAL_UART_IRQHandler+0x19a>
 8013848:	014d      	lsls	r5, r1, #5
 801384a:	d508      	bpl.n	801385e <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801384c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013850:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013852:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8013856:	f043 0320 	orr.w	r3, r3, #32
 801385a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801385e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8013862:	2b00      	cmp	r3, #0
 8013864:	f43f af4d 	beq.w	8013702 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8013868:	0690      	lsls	r0, r2, #26
 801386a:	d501      	bpl.n	8013870 <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801386c:	0689      	lsls	r1, r1, #26
 801386e:	d43e      	bmi.n	80138ee <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 8013870:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 8013874:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013876:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013878:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013880:	431d      	orrs	r5, r3
 8013882:	d06e      	beq.n	8013962 <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 8013884:	f7ff fb7e 	bl	8012f84 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013888:	6823      	ldr	r3, [r4, #0]
 801388a:	689a      	ldr	r2, [r3, #8]
 801388c:	0652      	lsls	r2, r2, #25
 801388e:	d52a      	bpl.n	80138e6 <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013890:	f103 0208 	add.w	r2, r3, #8
 8013894:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801389c:	f103 0008 	add.w	r0, r3, #8
 80138a0:	e840 2100 	strex	r1, r2, [r0]
 80138a4:	2900      	cmp	r1, #0
 80138a6:	d1f3      	bne.n	8013890 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 80138a8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80138aa:	b1e0      	cbz	r0, 80138e6 <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80138ac:	4b30      	ldr	r3, [pc, #192]	; (8013970 <HAL_UART_IRQHandler+0x2ac>)
 80138ae:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80138b0:	f7f6 ff96 	bl	800a7e0 <HAL_DMA_Abort_IT>
 80138b4:	2800      	cmp	r0, #0
 80138b6:	f43f af24 	beq.w	8013702 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80138ba:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 80138bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80138c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80138c2:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80138c4:	0755      	lsls	r5, r2, #29
 80138c6:	d5af      	bpl.n	8013828 <HAL_UART_IRQHandler+0x164>
 80138c8:	2e00      	cmp	r6, #0
 80138ca:	d1a5      	bne.n	8013818 <HAL_UART_IRQHandler+0x154>
 80138cc:	e7ac      	b.n	8013828 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 80138ce:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	f47f af2d 	bne.w	8013730 <HAL_UART_IRQHandler+0x6c>
 80138d6:	e714      	b.n	8013702 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80138d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80138dc:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80138de:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80138e0:	f7ff feee 	bl	80136c0 <HAL_UARTEx_WakeupCallback>
    return;
 80138e4:	e70d      	b.n	8013702 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 80138e6:	4620      	mov	r0, r4
 80138e8:	f7f2 fb14 	bl	8005f14 <HAL_UART_ErrorCallback>
 80138ec:	e709      	b.n	8013702 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 80138ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d0bd      	beq.n	8013870 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 80138f4:	4620      	mov	r0, r4
 80138f6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80138f8:	6827      	ldr	r7, [r4, #0]
 80138fa:	e7b9      	b.n	8013870 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80138fc:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8013900:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8013904:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013908:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 801390a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801390c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 801390e:	2900      	cmp	r1, #0
 8013910:	f43f aef7 	beq.w	8013702 <HAL_UART_IRQHandler+0x3e>
 8013914:	2a00      	cmp	r2, #0
 8013916:	f43f aef4 	beq.w	8013702 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801391a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801391e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013922:	e843 2000 	strex	r0, r2, [r3]
 8013926:	2800      	cmp	r0, #0
 8013928:	d1f7      	bne.n	801391a <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801392a:	f103 0208 	add.w	r2, r3, #8
 801392e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013932:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013936:	f103 0508 	add.w	r5, r3, #8
 801393a:	e845 2000 	strex	r0, r2, [r5]
 801393e:	2800      	cmp	r0, #0
 8013940:	d1f3      	bne.n	801392a <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 8013942:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8013944:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8013946:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013948:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801394a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801394e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013952:	e843 2000 	strex	r0, r2, [r3]
 8013956:	2800      	cmp	r0, #0
 8013958:	d1f7      	bne.n	801394a <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801395a:	4620      	mov	r0, r4
 801395c:	f7ff fdb4 	bl	80134c8 <HAL_UARTEx_RxEventCallback>
 8013960:	e6cf      	b.n	8013702 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 8013962:	f7f2 fad7 	bl	8005f14 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013966:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 801396a:	e6ca      	b.n	8013702 <HAL_UART_IRQHandler+0x3e>
 801396c:	04000120 	.word	0x04000120
 8013970:	080132fd 	.word	0x080132fd

08013974 <UART_SetConfig>:
{
 8013974:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8013976:	6842      	ldr	r2, [r0, #4]
{
 8013978:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 801397a:	4bac      	ldr	r3, [pc, #688]	; (8013c2c <UART_SetConfig+0x2b8>)
 801397c:	429a      	cmp	r2, r3
 801397e:	f200 80bb 	bhi.w	8013af8 <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8013982:	68a3      	ldr	r3, [r4, #8]
 8013984:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8013988:	d002      	beq.n	8013990 <UART_SetConfig+0x1c>
 801398a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801398e:	d179      	bne.n	8013a84 <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8013990:	68e3      	ldr	r3, [r4, #12]
 8013992:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8013996:	d17e      	bne.n	8013a96 <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8013998:	6a23      	ldr	r3, [r4, #32]
 801399a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 801399e:	f040 8084 	bne.w	8013aaa <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80139a2:	6923      	ldr	r3, [r4, #16]
 80139a4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80139a8:	d002      	beq.n	80139b0 <UART_SetConfig+0x3c>
 80139aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80139ae:	d163      	bne.n	8013a78 <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80139b0:	6963      	ldr	r3, [r4, #20]
 80139b2:	f033 020c 	bics.w	r2, r3, #12
 80139b6:	d146      	bne.n	8013a46 <UART_SetConfig+0xd2>
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d044      	beq.n	8013a46 <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80139bc:	69a3      	ldr	r3, [r4, #24]
 80139be:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80139c2:	d149      	bne.n	8013a58 <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80139c4:	69e0      	ldr	r0, [r4, #28]
 80139c6:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 80139ca:	d14e      	bne.n	8013a6a <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80139cc:	6921      	ldr	r1, [r4, #16]
 80139ce:	68a2      	ldr	r2, [r4, #8]
 80139d0:	6823      	ldr	r3, [r4, #0]
 80139d2:	430a      	orrs	r2, r1
 80139d4:	6961      	ldr	r1, [r4, #20]
 80139d6:	681d      	ldr	r5, [r3, #0]
 80139d8:	430a      	orrs	r2, r1
 80139da:	4995      	ldr	r1, [pc, #596]	; (8013c30 <UART_SetConfig+0x2bc>)
 80139dc:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80139de:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80139e0:	430a      	orrs	r2, r1
 80139e2:	4302      	orrs	r2, r0
 80139e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80139e6:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80139e8:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80139ea:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80139ee:	4329      	orrs	r1, r5
 80139f0:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80139f2:	6a21      	ldr	r1, [r4, #32]
 80139f4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80139f6:	6899      	ldr	r1, [r3, #8]
 80139f8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80139fc:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80139fe:	498d      	ldr	r1, [pc, #564]	; (8013c34 <UART_SetConfig+0x2c0>)
 8013a00:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013a02:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a04:	d07e      	beq.n	8013b04 <UART_SetConfig+0x190>
 8013a06:	4a8c      	ldr	r2, [pc, #560]	; (8013c38 <UART_SetConfig+0x2c4>)
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	d054      	beq.n	8013ab6 <UART_SetConfig+0x142>
 8013a0c:	4a8b      	ldr	r2, [pc, #556]	; (8013c3c <UART_SetConfig+0x2c8>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	f000 812a 	beq.w	8013c68 <UART_SetConfig+0x2f4>
 8013a14:	4a8a      	ldr	r2, [pc, #552]	; (8013c40 <UART_SetConfig+0x2cc>)
 8013a16:	4293      	cmp	r3, r2
 8013a18:	f000 8137 	beq.w	8013c8a <UART_SetConfig+0x316>
 8013a1c:	4a89      	ldr	r2, [pc, #548]	; (8013c44 <UART_SetConfig+0x2d0>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	f000 809e 	beq.w	8013b60 <UART_SetConfig+0x1ec>
 8013a24:	4a88      	ldr	r2, [pc, #544]	; (8013c48 <UART_SetConfig+0x2d4>)
 8013a26:	4293      	cmp	r3, r2
 8013a28:	f000 80d1 	beq.w	8013bce <UART_SetConfig+0x25a>
 8013a2c:	4a87      	ldr	r2, [pc, #540]	; (8013c4c <UART_SetConfig+0x2d8>)
 8013a2e:	4293      	cmp	r3, r2
 8013a30:	f000 8151 	beq.w	8013cd6 <UART_SetConfig+0x362>
 8013a34:	4a86      	ldr	r2, [pc, #536]	; (8013c50 <UART_SetConfig+0x2dc>)
 8013a36:	4293      	cmp	r3, r2
 8013a38:	f000 8164 	beq.w	8013d04 <UART_SetConfig+0x390>
    switch (clocksource)
 8013a3c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8013a3e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8013a40:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013a44:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8013a46:	f640 3176 	movw	r1, #2934	; 0xb76
 8013a4a:	4882      	ldr	r0, [pc, #520]	; (8013c54 <UART_SetConfig+0x2e0>)
 8013a4c:	f7f1 ff0c 	bl	8005868 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8013a50:	69a3      	ldr	r3, [r4, #24]
 8013a52:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8013a56:	d0b5      	beq.n	80139c4 <UART_SetConfig+0x50>
 8013a58:	487e      	ldr	r0, [pc, #504]	; (8013c54 <UART_SetConfig+0x2e0>)
 8013a5a:	f640 3177 	movw	r1, #2935	; 0xb77
 8013a5e:	f7f1 ff03 	bl	8005868 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8013a62:	69e0      	ldr	r0, [r4, #28]
 8013a64:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8013a68:	d0b0      	beq.n	80139cc <UART_SetConfig+0x58>
 8013a6a:	487a      	ldr	r0, [pc, #488]	; (8013c54 <UART_SetConfig+0x2e0>)
 8013a6c:	f640 3178 	movw	r1, #2936	; 0xb78
 8013a70:	f7f1 fefa 	bl	8005868 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013a74:	69e0      	ldr	r0, [r4, #28]
 8013a76:	e7a9      	b.n	80139cc <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8013a78:	f640 3175 	movw	r1, #2933	; 0xb75
 8013a7c:	4875      	ldr	r0, [pc, #468]	; (8013c54 <UART_SetConfig+0x2e0>)
 8013a7e:	f7f1 fef3 	bl	8005868 <assert_failed>
 8013a82:	e795      	b.n	80139b0 <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8013a84:	f640 3171 	movw	r1, #2929	; 0xb71
 8013a88:	4872      	ldr	r0, [pc, #456]	; (8013c54 <UART_SetConfig+0x2e0>)
 8013a8a:	f7f1 feed 	bl	8005868 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8013a8e:	68e3      	ldr	r3, [r4, #12]
 8013a90:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8013a94:	d080      	beq.n	8013998 <UART_SetConfig+0x24>
 8013a96:	f640 3172 	movw	r1, #2930	; 0xb72
 8013a9a:	486e      	ldr	r0, [pc, #440]	; (8013c54 <UART_SetConfig+0x2e0>)
 8013a9c:	f7f1 fee4 	bl	8005868 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8013aa0:	6a23      	ldr	r3, [r4, #32]
 8013aa2:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8013aa6:	f43f af7c 	beq.w	80139a2 <UART_SetConfig+0x2e>
 8013aaa:	f640 3173 	movw	r1, #2931	; 0xb73
 8013aae:	4869      	ldr	r0, [pc, #420]	; (8013c54 <UART_SetConfig+0x2e0>)
 8013ab0:	f7f1 feda 	bl	8005868 <assert_failed>
 8013ab4:	e775      	b.n	80139a2 <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013ab6:	4b68      	ldr	r3, [pc, #416]	; (8013c58 <UART_SetConfig+0x2e4>)
 8013ab8:	4a68      	ldr	r2, [pc, #416]	; (8013c5c <UART_SetConfig+0x2e8>)
 8013aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013abe:	f003 030c 	and.w	r3, r3, #12
 8013ac2:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013ac4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013ac8:	d033      	beq.n	8013b32 <UART_SetConfig+0x1be>
    switch (clocksource)
 8013aca:	2b08      	cmp	r3, #8
 8013acc:	d8b6      	bhi.n	8013a3c <UART_SetConfig+0xc8>
 8013ace:	a201      	add	r2, pc, #4	; (adr r2, 8013ad4 <UART_SetConfig+0x160>)
 8013ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ad4:	08013b8f 	.word	0x08013b8f
 8013ad8:	08013b1b 	.word	0x08013b1b
 8013adc:	08013be5 	.word	0x08013be5
 8013ae0:	08013a3d 	.word	0x08013a3d
 8013ae4:	08013b83 	.word	0x08013b83
 8013ae8:	08013a3d 	.word	0x08013a3d
 8013aec:	08013a3d 	.word	0x08013a3d
 8013af0:	08013a3d 	.word	0x08013a3d
 8013af4:	08013ba5 	.word	0x08013ba5
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8013af8:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 8013afc:	4855      	ldr	r0, [pc, #340]	; (8013c54 <UART_SetConfig+0x2e0>)
 8013afe:	f7f1 feb3 	bl	8005868 <assert_failed>
 8013b02:	e73e      	b.n	8013982 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b04:	4b54      	ldr	r3, [pc, #336]	; (8013c58 <UART_SetConfig+0x2e4>)
 8013b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b0a:	f003 0303 	and.w	r3, r3, #3
 8013b0e:	3b01      	subs	r3, #1
 8013b10:	2b02      	cmp	r3, #2
 8013b12:	d90b      	bls.n	8013b2c <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013b18:	d066      	beq.n	8013be8 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013b1a:	f7fb f9d5 	bl	800eec8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	d142      	bne.n	8013ba8 <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 8013b22:	2300      	movs	r3, #0
 8013b24:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8013b26:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013b2a:	bd38      	pop	{r3, r4, r5, pc}
 8013b2c:	4a4c      	ldr	r2, [pc, #304]	; (8013c60 <UART_SetConfig+0x2ec>)
 8013b2e:	5cd3      	ldrb	r3, [r2, r3]
 8013b30:	e7c8      	b.n	8013ac4 <UART_SetConfig+0x150>
    switch (clocksource)
 8013b32:	2b08      	cmp	r3, #8
 8013b34:	d882      	bhi.n	8013a3c <UART_SetConfig+0xc8>
 8013b36:	a201      	add	r2, pc, #4	; (adr r2, 8013b3c <UART_SetConfig+0x1c8>)
 8013b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b3c:	08013c25 	.word	0x08013c25
 8013b40:	08013be9 	.word	0x08013be9
 8013b44:	08013ccd 	.word	0x08013ccd
 8013b48:	08013a3d 	.word	0x08013a3d
 8013b4c:	08013c1f 	.word	0x08013c1f
 8013b50:	08013a3d 	.word	0x08013a3d
 8013b54:	08013a3d 	.word	0x08013a3d
 8013b58:	08013a3d 	.word	0x08013a3d
 8013b5c:	08013cd1 	.word	0x08013cd1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b60:	4b3d      	ldr	r3, [pc, #244]	; (8013c58 <UART_SetConfig+0x2e4>)
 8013b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b6e:	d036      	beq.n	8013bde <UART_SetConfig+0x26a>
 8013b70:	d810      	bhi.n	8013b94 <UART_SetConfig+0x220>
 8013b72:	b14b      	cbz	r3, 8013b88 <UART_SetConfig+0x214>
 8013b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b78:	f47f af60 	bne.w	8013a3c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013b80:	d04d      	beq.n	8013c1e <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 8013b82:	f7fb f839 	bl	800ebf8 <HAL_RCC_GetSysClockFreq>
        break;
 8013b86:	e7ca      	b.n	8013b1e <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b88:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013b8c:	d04a      	beq.n	8013c24 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013b8e:	f7fb f98b 	bl	800eea8 <HAL_RCC_GetPCLK1Freq>
        break;
 8013b92:	e7c4      	b.n	8013b1e <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013b98:	f47f af50 	bne.w	8013a3c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013ba0:	f000 8096 	beq.w	8013cd0 <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 8013ba4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013ba8:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013baa:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013bae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8013bb2:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013bb6:	f1a3 0110 	sub.w	r1, r3, #16
 8013bba:	4291      	cmp	r1, r2
 8013bbc:	f63f af3e 	bhi.w	8013a3c <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013bc0:	6822      	ldr	r2, [r4, #0]
 8013bc2:	2000      	movs	r0, #0
 8013bc4:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8013bc6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8013bc8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013bcc:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013bce:	4b22      	ldr	r3, [pc, #136]	; (8013c58 <UART_SetConfig+0x2e4>)
 8013bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013bdc:	d168      	bne.n	8013cb0 <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013bde:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013be2:	d073      	beq.n	8013ccc <UART_SetConfig+0x358>
    switch (clocksource)
 8013be4:	481f      	ldr	r0, [pc, #124]	; (8013c64 <UART_SetConfig+0x2f0>)
 8013be6:	e7df      	b.n	8013ba8 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013be8:	f7fb f96e 	bl	800eec8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8013bec:	2800      	cmp	r0, #0
 8013bee:	d098      	beq.n	8013b22 <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013bf0:	0043      	lsls	r3, r0, #1
 8013bf2:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013bf4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013bf8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013bfc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c00:	f1a3 0210 	sub.w	r2, r3, #16
 8013c04:	428a      	cmp	r2, r1
 8013c06:	f63f af19 	bhi.w	8013a3c <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013c0a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013c0e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8013c12:	6821      	ldr	r1, [r4, #0]
 8013c14:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013c16:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8013c18:	4313      	orrs	r3, r2
 8013c1a:	60cb      	str	r3, [r1, #12]
 8013c1c:	e70f      	b.n	8013a3e <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8013c1e:	f7fa ffeb 	bl	800ebf8 <HAL_RCC_GetSysClockFreq>
        break;
 8013c22:	e7e3      	b.n	8013bec <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013c24:	f7fb f940 	bl	800eea8 <HAL_RCC_GetPCLK1Freq>
        break;
 8013c28:	e7e0      	b.n	8013bec <UART_SetConfig+0x278>
 8013c2a:	bf00      	nop
 8013c2c:	019bfcc0 	.word	0x019bfcc0
 8013c30:	efff69f3 	.word	0xefff69f3
 8013c34:	40011000 	.word	0x40011000
 8013c38:	40004400 	.word	0x40004400
 8013c3c:	40004800 	.word	0x40004800
 8013c40:	40004c00 	.word	0x40004c00
 8013c44:	40005000 	.word	0x40005000
 8013c48:	40011400 	.word	0x40011400
 8013c4c:	40007800 	.word	0x40007800
 8013c50:	40007c00 	.word	0x40007c00
 8013c54:	0802e590 	.word	0x0802e590
 8013c58:	40023800 	.word	0x40023800
 8013c5c:	0802e5d0 	.word	0x0802e5d0
 8013c60:	0802e5cc 	.word	0x0802e5cc
 8013c64:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013c68:	4b32      	ldr	r3, [pc, #200]	; (8013d34 <UART_SetConfig+0x3c0>)
 8013c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013c72:	2b20      	cmp	r3, #32
 8013c74:	d0b3      	beq.n	8013bde <UART_SetConfig+0x26a>
 8013c76:	d805      	bhi.n	8013c84 <UART_SetConfig+0x310>
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d085      	beq.n	8013b88 <UART_SetConfig+0x214>
 8013c7c:	2b10      	cmp	r3, #16
 8013c7e:	f43f af7d 	beq.w	8013b7c <UART_SetConfig+0x208>
 8013c82:	e6db      	b.n	8013a3c <UART_SetConfig+0xc8>
 8013c84:	2b30      	cmp	r3, #48	; 0x30
 8013c86:	d089      	beq.n	8013b9c <UART_SetConfig+0x228>
 8013c88:	e6d8      	b.n	8013a3c <UART_SetConfig+0xc8>
 8013c8a:	4b2a      	ldr	r3, [pc, #168]	; (8013d34 <UART_SetConfig+0x3c0>)
 8013c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013c94:	2b80      	cmp	r3, #128	; 0x80
 8013c96:	d0a2      	beq.n	8013bde <UART_SetConfig+0x26a>
 8013c98:	d806      	bhi.n	8013ca8 <UART_SetConfig+0x334>
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	f43f af74 	beq.w	8013b88 <UART_SetConfig+0x214>
 8013ca0:	2b40      	cmp	r3, #64	; 0x40
 8013ca2:	f43f af6b 	beq.w	8013b7c <UART_SetConfig+0x208>
 8013ca6:	e6c9      	b.n	8013a3c <UART_SetConfig+0xc8>
 8013ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8013caa:	f43f af77 	beq.w	8013b9c <UART_SetConfig+0x228>
 8013cae:	e6c5      	b.n	8013a3c <UART_SetConfig+0xc8>
 8013cb0:	d807      	bhi.n	8013cc2 <UART_SetConfig+0x34e>
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	f43f af2e 	beq.w	8013b14 <UART_SetConfig+0x1a0>
 8013cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013cbc:	f43f af5e 	beq.w	8013b7c <UART_SetConfig+0x208>
 8013cc0:	e6bc      	b.n	8013a3c <UART_SetConfig+0xc8>
 8013cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013cc6:	f43f af69 	beq.w	8013b9c <UART_SetConfig+0x228>
 8013cca:	e6b7      	b.n	8013a3c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013ccc:	4b1a      	ldr	r3, [pc, #104]	; (8013d38 <UART_SetConfig+0x3c4>)
 8013cce:	e790      	b.n	8013bf2 <UART_SetConfig+0x27e>
    switch (clocksource)
 8013cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013cd4:	e78d      	b.n	8013bf2 <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013cd6:	4b17      	ldr	r3, [pc, #92]	; (8013d34 <UART_SetConfig+0x3c0>)
 8013cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013cdc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8013ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013ce4:	f43f af7b 	beq.w	8013bde <UART_SetConfig+0x26a>
 8013ce8:	d807      	bhi.n	8013cfa <UART_SetConfig+0x386>
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	f43f af4c 	beq.w	8013b88 <UART_SetConfig+0x214>
 8013cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013cf4:	f43f af42 	beq.w	8013b7c <UART_SetConfig+0x208>
 8013cf8:	e6a0      	b.n	8013a3c <UART_SetConfig+0xc8>
 8013cfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013cfe:	f43f af4d 	beq.w	8013b9c <UART_SetConfig+0x228>
 8013d02:	e69b      	b.n	8013a3c <UART_SetConfig+0xc8>
 8013d04:	4b0b      	ldr	r3, [pc, #44]	; (8013d34 <UART_SetConfig+0x3c0>)
 8013d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d12:	f43f af64 	beq.w	8013bde <UART_SetConfig+0x26a>
 8013d16:	d807      	bhi.n	8013d28 <UART_SetConfig+0x3b4>
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	f43f af35 	beq.w	8013b88 <UART_SetConfig+0x214>
 8013d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013d22:	f43f af2b 	beq.w	8013b7c <UART_SetConfig+0x208>
 8013d26:	e689      	b.n	8013a3c <UART_SetConfig+0xc8>
 8013d28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013d2c:	f43f af36 	beq.w	8013b9c <UART_SetConfig+0x228>
 8013d30:	e684      	b.n	8013a3c <UART_SetConfig+0xc8>
 8013d32:	bf00      	nop
 8013d34:	40023800 	.word	0x40023800
 8013d38:	01e84800 	.word	0x01e84800

08013d3c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013d3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013d3e:	2bff      	cmp	r3, #255	; 0xff
{
 8013d40:	b510      	push	{r4, lr}
 8013d42:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013d44:	d87b      	bhi.n	8013e3e <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013d46:	07da      	lsls	r2, r3, #31
 8013d48:	d50a      	bpl.n	8013d60 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8013d4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013d4c:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8013d50:	f040 808e 	bne.w	8013e70 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013d54:	6820      	ldr	r0, [r4, #0]
 8013d56:	6842      	ldr	r2, [r0, #4]
 8013d58:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8013d5c:	430a      	orrs	r2, r1
 8013d5e:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013d60:	0798      	lsls	r0, r3, #30
 8013d62:	d50a      	bpl.n	8013d7a <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8013d64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013d66:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8013d6a:	f040 8089 	bne.w	8013e80 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013d6e:	6820      	ldr	r0, [r4, #0]
 8013d70:	6842      	ldr	r2, [r0, #4]
 8013d72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013d76:	430a      	orrs	r2, r1
 8013d78:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013d7a:	0759      	lsls	r1, r3, #29
 8013d7c:	d50a      	bpl.n	8013d94 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8013d7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013d80:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8013d84:	f040 8084 	bne.w	8013e90 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013d88:	6820      	ldr	r0, [r4, #0]
 8013d8a:	6842      	ldr	r2, [r0, #4]
 8013d8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013d90:	430a      	orrs	r2, r1
 8013d92:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013d94:	071a      	lsls	r2, r3, #28
 8013d96:	d509      	bpl.n	8013dac <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8013d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d9a:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 8013d9e:	d17f      	bne.n	8013ea0 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013da0:	6820      	ldr	r0, [r4, #0]
 8013da2:	6842      	ldr	r2, [r0, #4]
 8013da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013da8:	430a      	orrs	r2, r1
 8013daa:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013dac:	06d8      	lsls	r0, r3, #27
 8013dae:	d509      	bpl.n	8013dc4 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8013db0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013db2:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8013db6:	d17b      	bne.n	8013eb0 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013db8:	6820      	ldr	r0, [r4, #0]
 8013dba:	6882      	ldr	r2, [r0, #8]
 8013dbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013dc0:	430a      	orrs	r2, r1
 8013dc2:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013dc4:	0699      	lsls	r1, r3, #26
 8013dc6:	d509      	bpl.n	8013ddc <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8013dc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013dca:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8013dce:	d177      	bne.n	8013ec0 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013dd0:	6820      	ldr	r0, [r4, #0]
 8013dd2:	6882      	ldr	r2, [r0, #8]
 8013dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013dd8:	430a      	orrs	r2, r1
 8013dda:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013ddc:	065a      	lsls	r2, r3, #25
 8013dde:	d521      	bpl.n	8013e24 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8013de0:	4b46      	ldr	r3, [pc, #280]	; (8013efc <UART_AdvFeatureConfig+0x1c0>)
 8013de2:	6822      	ldr	r2, [r4, #0]
 8013de4:	4846      	ldr	r0, [pc, #280]	; (8013f00 <UART_AdvFeatureConfig+0x1c4>)
 8013de6:	4947      	ldr	r1, [pc, #284]	; (8013f04 <UART_AdvFeatureConfig+0x1c8>)
 8013de8:	429a      	cmp	r2, r3
 8013dea:	bf18      	it	ne
 8013dec:	4282      	cmpne	r2, r0
 8013dee:	bf14      	ite	ne
 8013df0:	2301      	movne	r3, #1
 8013df2:	2300      	moveq	r3, #0
 8013df4:	428a      	cmp	r2, r1
 8013df6:	bf0c      	ite	eq
 8013df8:	2300      	moveq	r3, #0
 8013dfa:	f003 0301 	andne.w	r3, r3, #1
 8013dfe:	b113      	cbz	r3, 8013e06 <UART_AdvFeatureConfig+0xca>
 8013e00:	4b41      	ldr	r3, [pc, #260]	; (8013f08 <UART_AdvFeatureConfig+0x1cc>)
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d16b      	bne.n	8013ede <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8013e06:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013e08:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8013e0c:	d160      	bne.n	8013ed0 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013e0e:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013e10:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013e14:	684b      	ldr	r3, [r1, #4]
 8013e16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013e1a:	ea43 0302 	orr.w	r3, r3, r2
 8013e1e:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013e20:	d014      	beq.n	8013e4c <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e24:	061b      	lsls	r3, r3, #24
 8013e26:	d509      	bpl.n	8013e3c <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8013e28:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8013e2a:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8013e2e:	d118      	bne.n	8013e62 <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013e30:	6821      	ldr	r1, [r4, #0]
 8013e32:	684b      	ldr	r3, [r1, #4]
 8013e34:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8013e38:	4313      	orrs	r3, r2
 8013e3a:	604b      	str	r3, [r1, #4]
}
 8013e3c:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013e3e:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8013e42:	4832      	ldr	r0, [pc, #200]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013e44:	f7f1 fd10 	bl	8005868 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e4a:	e77c      	b.n	8013d46 <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8013e4c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013e4e:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8013e52:	d14a      	bne.n	8013eea <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013e54:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013e58:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8013e5c:	4302      	orrs	r2, r0
 8013e5e:	604a      	str	r2, [r1, #4]
 8013e60:	e7e0      	b.n	8013e24 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8013e62:	f640 4136 	movw	r1, #3126	; 0xc36
 8013e66:	4829      	ldr	r0, [pc, #164]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013e68:	f7f1 fcfe 	bl	8005868 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013e6c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8013e6e:	e7df      	b.n	8013e30 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8013e70:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8013e74:	4825      	ldr	r0, [pc, #148]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013e76:	f7f1 fcf7 	bl	8005868 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013e7a:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8013e7e:	e769      	b.n	8013d54 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8013e80:	f640 4105 	movw	r1, #3077	; 0xc05
 8013e84:	4821      	ldr	r0, [pc, #132]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013e86:	f7f1 fcef 	bl	8005868 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013e8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e8e:	e76e      	b.n	8013d6e <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8013e90:	f640 410c 	movw	r1, #3084	; 0xc0c
 8013e94:	481d      	ldr	r0, [pc, #116]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013e96:	f7f1 fce7 	bl	8005868 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013e9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e9e:	e773      	b.n	8013d88 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8013ea0:	f640 4113 	movw	r1, #3091	; 0xc13
 8013ea4:	4819      	ldr	r0, [pc, #100]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013ea6:	f7f1 fcdf 	bl	8005868 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013eae:	e777      	b.n	8013da0 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8013eb0:	f640 411a 	movw	r1, #3098	; 0xc1a
 8013eb4:	4815      	ldr	r0, [pc, #84]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013eb6:	f7f1 fcd7 	bl	8005868 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013eba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ebe:	e77b      	b.n	8013db8 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8013ec0:	f640 4121 	movw	r1, #3105	; 0xc21
 8013ec4:	4811      	ldr	r0, [pc, #68]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013ec6:	f7f1 fccf 	bl	8005868 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013eca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ece:	e77f      	b.n	8013dd0 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8013ed0:	f640 4129 	movw	r1, #3113	; 0xc29
 8013ed4:	480d      	ldr	r0, [pc, #52]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013ed6:	f7f1 fcc7 	bl	8005868 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013eda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013edc:	e797      	b.n	8013e0e <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8013ede:	f640 4128 	movw	r1, #3112	; 0xc28
 8013ee2:	480a      	ldr	r0, [pc, #40]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013ee4:	f7f1 fcc0 	bl	8005868 <assert_failed>
 8013ee8:	e78d      	b.n	8013e06 <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8013eea:	f640 412e 	movw	r1, #3118	; 0xc2e
 8013eee:	4807      	ldr	r0, [pc, #28]	; (8013f0c <UART_AdvFeatureConfig+0x1d0>)
 8013ef0:	f7f1 fcba 	bl	8005868 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013ef4:	6821      	ldr	r1, [r4, #0]
 8013ef6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013ef8:	e7ac      	b.n	8013e54 <UART_AdvFeatureConfig+0x118>
 8013efa:	bf00      	nop
 8013efc:	40011000 	.word	0x40011000
 8013f00:	40004400 	.word	0x40004400
 8013f04:	40004800 	.word	0x40004800
 8013f08:	40011400 	.word	0x40011400
 8013f0c:	0802e590 	.word	0x0802e590

08013f10 <UART_WaitOnFlagUntilTimeout>:
{
 8013f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f18:	4681      	mov	r9, r0
 8013f1a:	460f      	mov	r7, r1
 8013f1c:	4616      	mov	r6, r2
 8013f1e:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013f20:	6805      	ldr	r5, [r0, #0]
 8013f22:	e002      	b.n	8013f2a <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8013f24:	f1b8 3fff 	cmp.w	r8, #4294967295
 8013f28:	d10c      	bne.n	8013f44 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013f2a:	69ec      	ldr	r4, [r5, #28]
 8013f2c:	ea37 0304 	bics.w	r3, r7, r4
 8013f30:	bf0c      	ite	eq
 8013f32:	f04f 0c01 	moveq.w	ip, #1
 8013f36:	f04f 0c00 	movne.w	ip, #0
 8013f3a:	45b4      	cmp	ip, r6
 8013f3c:	d0f2      	beq.n	8013f24 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8013f3e:	2000      	movs	r0, #0
}
 8013f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013f44:	f7f5 f9de 	bl	8009304 <HAL_GetTick>
 8013f48:	eba0 000a 	sub.w	r0, r0, sl
 8013f4c:	4540      	cmp	r0, r8
 8013f4e:	d82d      	bhi.n	8013fac <UART_WaitOnFlagUntilTimeout+0x9c>
 8013f50:	f1b8 0f00 	cmp.w	r8, #0
 8013f54:	d02a      	beq.n	8013fac <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013f56:	f8d9 5000 	ldr.w	r5, [r9]
 8013f5a:	682b      	ldr	r3, [r5, #0]
 8013f5c:	462a      	mov	r2, r5
 8013f5e:	0759      	lsls	r1, r3, #29
 8013f60:	d5e3      	bpl.n	8013f2a <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013f62:	69eb      	ldr	r3, [r5, #28]
 8013f64:	051b      	lsls	r3, r3, #20
 8013f66:	d5e0      	bpl.n	8013f2a <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013f68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013f6c:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f6e:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013f72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f76:	e842 3100 	strex	r1, r3, [r2]
 8013f7a:	2900      	cmp	r1, #0
 8013f7c:	d1f7      	bne.n	8013f6e <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f7e:	f102 0308 	add.w	r3, r2, #8
 8013f82:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f86:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f8a:	f102 0008 	add.w	r0, r2, #8
 8013f8e:	e840 3100 	strex	r1, r3, [r0]
 8013f92:	2900      	cmp	r1, #0
 8013f94:	d1f3      	bne.n	8013f7e <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 8013f96:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8013f98:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8013f9a:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8013f9e:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8013fa2:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013fa6:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8013faa:	e7c9      	b.n	8013f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8013fac:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fb0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013fb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fb8:	e842 3100 	strex	r1, r3, [r2]
 8013fbc:	2900      	cmp	r1, #0
 8013fbe:	d1f7      	bne.n	8013fb0 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fc0:	f102 0308 	add.w	r3, r2, #8
 8013fc4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013fc8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fcc:	f102 0008 	add.w	r0, r2, #8
 8013fd0:	e840 3100 	strex	r1, r3, [r0]
 8013fd4:	2900      	cmp	r1, #0
 8013fd6:	d1f3      	bne.n	8013fc0 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8013fd8:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8013fda:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8013fdc:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8013fe0:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8013fe4:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8013fe8:	e7aa      	b.n	8013f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8013fea:	bf00      	nop

08013fec <HAL_UART_Transmit>:
{
 8013fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ff0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8013ff2:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8013ff4:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8013ff6:	2b20      	cmp	r3, #32
 8013ff8:	d14b      	bne.n	8014092 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8013ffa:	460d      	mov	r5, r1
 8013ffc:	2900      	cmp	r1, #0
 8013ffe:	d044      	beq.n	801408a <HAL_UART_Transmit+0x9e>
 8014000:	fab2 f982 	clz	r9, r2
 8014004:	4617      	mov	r7, r2
 8014006:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801400a:	2a00      	cmp	r2, #0
 801400c:	d03d      	beq.n	801408a <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 801400e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8014012:	4604      	mov	r4, r0
 8014014:	2b01      	cmp	r3, #1
 8014016:	d03c      	beq.n	8014092 <HAL_UART_Transmit+0xa6>
 8014018:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801401a:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 801401e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014022:	2321      	movs	r3, #33	; 0x21
 8014024:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8014026:	f7f5 f96d 	bl	8009304 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801402a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 801402c:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 801402e:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8014036:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801403a:	d040      	beq.n	80140be <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 801403c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8014040:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8014042:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8014044:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8014048:	b973      	cbnz	r3, 8014068 <HAL_UART_Transmit+0x7c>
 801404a:	e02a      	b.n	80140a2 <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801404c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8014050:	6823      	ldr	r3, [r4, #0]
 8014052:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8014054:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8014058:	3a01      	subs	r2, #1
 801405a:	b292      	uxth	r2, r2
 801405c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8014060:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8014064:	b292      	uxth	r2, r2
 8014066:	b1e2      	cbz	r2, 80140a2 <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014068:	4643      	mov	r3, r8
 801406a:	2200      	movs	r2, #0
 801406c:	2180      	movs	r1, #128	; 0x80
 801406e:	4620      	mov	r0, r4
 8014070:	9600      	str	r6, [sp, #0]
 8014072:	f7ff ff4d 	bl	8013f10 <UART_WaitOnFlagUntilTimeout>
 8014076:	b980      	cbnz	r0, 801409a <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 8014078:	2d00      	cmp	r5, #0
 801407a:	d1e7      	bne.n	801404c <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801407c:	f839 3b02 	ldrh.w	r3, [r9], #2
 8014080:	6822      	ldr	r2, [r4, #0]
 8014082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014086:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8014088:	e7e4      	b.n	8014054 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 801408a:	2001      	movs	r0, #1
}
 801408c:	b003      	add	sp, #12
 801408e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8014092:	2002      	movs	r0, #2
}
 8014094:	b003      	add	sp, #12
 8014096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 801409a:	2003      	movs	r0, #3
}
 801409c:	b003      	add	sp, #12
 801409e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80140a2:	4643      	mov	r3, r8
 80140a4:	2200      	movs	r2, #0
 80140a6:	2140      	movs	r1, #64	; 0x40
 80140a8:	4620      	mov	r0, r4
 80140aa:	9600      	str	r6, [sp, #0]
 80140ac:	f7ff ff30 	bl	8013f10 <UART_WaitOnFlagUntilTimeout>
 80140b0:	2800      	cmp	r0, #0
 80140b2:	d1f2      	bne.n	801409a <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 80140b4:	2320      	movs	r3, #32
 80140b6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80140b8:	b003      	add	sp, #12
 80140ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140be:	6923      	ldr	r3, [r4, #16]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d1bb      	bne.n	801403c <HAL_UART_Transmit+0x50>
 80140c4:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80140c6:	461d      	mov	r5, r3
 80140c8:	e7b8      	b.n	801403c <HAL_UART_Transmit+0x50>
 80140ca:	bf00      	nop

080140cc <UART_CheckIdleState>:
{
 80140cc:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80140ce:	2600      	movs	r6, #0
{
 80140d0:	4604      	mov	r4, r0
 80140d2:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80140d4:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80140d8:	f7f5 f914 	bl	8009304 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80140dc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80140de:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	0712      	lsls	r2, r2, #28
 80140e4:	d40c      	bmi.n	8014100 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	075b      	lsls	r3, r3, #29
 80140ea:	d418      	bmi.n	801411e <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80140ec:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80140ee:	2220      	movs	r2, #32
  return HAL_OK;
 80140f0:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80140f2:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80140f4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80140f8:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80140fa:	6623      	str	r3, [r4, #96]	; 0x60
}
 80140fc:	b002      	add	sp, #8
 80140fe:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014100:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8014104:	4603      	mov	r3, r0
 8014106:	4632      	mov	r2, r6
 8014108:	4620      	mov	r0, r4
 801410a:	9100      	str	r1, [sp, #0]
 801410c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014110:	f7ff fefe 	bl	8013f10 <UART_WaitOnFlagUntilTimeout>
 8014114:	b978      	cbnz	r0, 8014136 <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014116:	6823      	ldr	r3, [r4, #0]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	075b      	lsls	r3, r3, #29
 801411c:	d5e6      	bpl.n	80140ec <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801411e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8014122:	462b      	mov	r3, r5
 8014124:	2200      	movs	r2, #0
 8014126:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801412a:	9000      	str	r0, [sp, #0]
 801412c:	4620      	mov	r0, r4
 801412e:	f7ff feef 	bl	8013f10 <UART_WaitOnFlagUntilTimeout>
 8014132:	2800      	cmp	r0, #0
 8014134:	d0da      	beq.n	80140ec <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8014136:	2003      	movs	r0, #3
}
 8014138:	b002      	add	sp, #8
 801413a:	bd70      	pop	{r4, r5, r6, pc}

0801413c <HAL_UART_Init>:
  if (huart == NULL)
 801413c:	2800      	cmp	r0, #0
 801413e:	f000 8099 	beq.w	8014274 <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8014142:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8014144:	6802      	ldr	r2, [r0, #0]
{
 8014146:	b510      	push	{r4, lr}
 8014148:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 801414a:	2b00      	cmp	r3, #0
 801414c:	d051      	beq.n	80141f2 <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 801414e:	4b4d      	ldr	r3, [pc, #308]	; (8014284 <HAL_UART_Init+0x148>)
 8014150:	484d      	ldr	r0, [pc, #308]	; (8014288 <HAL_UART_Init+0x14c>)
 8014152:	494e      	ldr	r1, [pc, #312]	; (801428c <HAL_UART_Init+0x150>)
 8014154:	429a      	cmp	r2, r3
 8014156:	bf18      	it	ne
 8014158:	4282      	cmpne	r2, r0
 801415a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801415e:	bf14      	ite	ne
 8014160:	2301      	movne	r3, #1
 8014162:	2300      	moveq	r3, #0
 8014164:	428a      	cmp	r2, r1
 8014166:	bf0c      	ite	eq
 8014168:	2300      	moveq	r3, #0
 801416a:	f003 0301 	andne.w	r3, r3, #1
 801416e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014172:	4282      	cmp	r2, r0
 8014174:	bf0c      	ite	eq
 8014176:	2300      	moveq	r3, #0
 8014178:	f003 0301 	andne.w	r3, r3, #1
 801417c:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8014180:	428a      	cmp	r2, r1
 8014182:	bf0c      	ite	eq
 8014184:	2300      	moveq	r3, #0
 8014186:	f003 0301 	andne.w	r3, r3, #1
 801418a:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 801418e:	4282      	cmp	r2, r0
 8014190:	bf0c      	ite	eq
 8014192:	2300      	moveq	r3, #0
 8014194:	f003 0301 	andne.w	r3, r3, #1
 8014198:	428a      	cmp	r2, r1
 801419a:	bf0c      	ite	eq
 801419c:	2300      	moveq	r3, #0
 801419e:	f003 0301 	andne.w	r3, r3, #1
 80141a2:	b113      	cbz	r3, 80141aa <HAL_UART_Init+0x6e>
 80141a4:	4b3a      	ldr	r3, [pc, #232]	; (8014290 <HAL_UART_Init+0x154>)
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d166      	bne.n	8014278 <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80141aa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d057      	beq.n	8014260 <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 80141b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80141b2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80141b4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80141b6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80141b8:	6813      	ldr	r3, [r2, #0]
 80141ba:	f023 0301 	bic.w	r3, r3, #1
 80141be:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80141c0:	f7ff fbd8 	bl	8013974 <UART_SetConfig>
 80141c4:	2801      	cmp	r0, #1
 80141c6:	d049      	beq.n	801425c <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80141c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d14e      	bne.n	801426c <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80141ce:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80141d0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80141d2:	685a      	ldr	r2, [r3, #4]
 80141d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80141d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80141da:	689a      	ldr	r2, [r3, #8]
 80141dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80141e0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80141e2:	681a      	ldr	r2, [r3, #0]
 80141e4:	f042 0201 	orr.w	r2, r2, #1
}
 80141e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80141ec:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80141ee:	f7ff bf6d 	b.w	80140cc <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80141f2:	4b24      	ldr	r3, [pc, #144]	; (8014284 <HAL_UART_Init+0x148>)
 80141f4:	4824      	ldr	r0, [pc, #144]	; (8014288 <HAL_UART_Init+0x14c>)
 80141f6:	4925      	ldr	r1, [pc, #148]	; (801428c <HAL_UART_Init+0x150>)
 80141f8:	429a      	cmp	r2, r3
 80141fa:	bf18      	it	ne
 80141fc:	4282      	cmpne	r2, r0
 80141fe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8014202:	bf14      	ite	ne
 8014204:	2301      	movne	r3, #1
 8014206:	2300      	moveq	r3, #0
 8014208:	428a      	cmp	r2, r1
 801420a:	bf0c      	ite	eq
 801420c:	2300      	moveq	r3, #0
 801420e:	f003 0301 	andne.w	r3, r3, #1
 8014212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014216:	4282      	cmp	r2, r0
 8014218:	bf0c      	ite	eq
 801421a:	2300      	moveq	r3, #0
 801421c:	f003 0301 	andne.w	r3, r3, #1
 8014220:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8014224:	428a      	cmp	r2, r1
 8014226:	bf0c      	ite	eq
 8014228:	2300      	moveq	r3, #0
 801422a:	f003 0301 	andne.w	r3, r3, #1
 801422e:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8014232:	4282      	cmp	r2, r0
 8014234:	bf0c      	ite	eq
 8014236:	2300      	moveq	r3, #0
 8014238:	f003 0301 	andne.w	r3, r3, #1
 801423c:	428a      	cmp	r2, r1
 801423e:	bf0c      	ite	eq
 8014240:	2300      	moveq	r3, #0
 8014242:	f003 0301 	andne.w	r3, r3, #1
 8014246:	2b00      	cmp	r3, #0
 8014248:	d0af      	beq.n	80141aa <HAL_UART_Init+0x6e>
 801424a:	4b11      	ldr	r3, [pc, #68]	; (8014290 <HAL_UART_Init+0x154>)
 801424c:	429a      	cmp	r2, r3
 801424e:	d0ac      	beq.n	80141aa <HAL_UART_Init+0x6e>
 8014250:	f240 1131 	movw	r1, #305	; 0x131
 8014254:	480f      	ldr	r0, [pc, #60]	; (8014294 <HAL_UART_Init+0x158>)
 8014256:	f7f1 fb07 	bl	8005868 <assert_failed>
 801425a:	e7a6      	b.n	80141aa <HAL_UART_Init+0x6e>
}
 801425c:	2001      	movs	r0, #1
 801425e:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 8014260:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8014262:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8014266:	f7f3 fc4f 	bl	8007b08 <HAL_UART_MspInit>
 801426a:	e7a1      	b.n	80141b0 <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 801426c:	4620      	mov	r0, r4
 801426e:	f7ff fd65 	bl	8013d3c <UART_AdvFeatureConfig>
 8014272:	e7ac      	b.n	80141ce <HAL_UART_Init+0x92>
}
 8014274:	2001      	movs	r0, #1
 8014276:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8014278:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801427c:	4805      	ldr	r0, [pc, #20]	; (8014294 <HAL_UART_Init+0x158>)
 801427e:	f7f1 faf3 	bl	8005868 <assert_failed>
 8014282:	e792      	b.n	80141aa <HAL_UART_Init+0x6e>
 8014284:	40011000 	.word	0x40011000
 8014288:	40004400 	.word	0x40004400
 801428c:	40004800 	.word	0x40004800
 8014290:	40007c00 	.word	0x40007c00
 8014294:	0802e590 	.word	0x0802e590

08014298 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8014298:	2800      	cmp	r0, #0
 801429a:	d04a      	beq.n	8014332 <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 801429c:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 80142a0:	b570      	push	{r4, r5, r6, lr}
 80142a2:	460e      	mov	r6, r1
 80142a4:	4604      	mov	r4, r0
 80142a6:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80142a8:	d13d      	bne.n	8014326 <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 80142aa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d034      	beq.n	801431a <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 80142b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80142b2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80142b4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80142b6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80142b8:	6813      	ldr	r3, [r2, #0]
 80142ba:	f023 0301 	bic.w	r3, r3, #1
 80142be:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80142c0:	f7ff fb58 	bl	8013974 <UART_SetConfig>
 80142c4:	2801      	cmp	r0, #1
 80142c6:	d026      	beq.n	8014316 <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80142c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142ca:	bb03      	cbnz	r3, 801430e <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80142cc:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80142ce:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80142d2:	685a      	ldr	r2, [r3, #4]
 80142d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80142d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80142da:	689a      	ldr	r2, [r3, #8]
 80142dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80142e0:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80142e2:	d00d      	beq.n	8014300 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80142e4:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80142e6:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80142e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80142ec:	4315      	orrs	r5, r2
 80142ee:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80142f0:	681a      	ldr	r2, [r3, #0]
 80142f2:	f042 0201 	orr.w	r2, r2, #1
}
 80142f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 80142fa:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80142fc:	f7ff bee6 	b.w	80140cc <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8014300:	6859      	ldr	r1, [r3, #4]
 8014302:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8014306:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 801430a:	605e      	str	r6, [r3, #4]
 801430c:	e7ea      	b.n	80142e4 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 801430e:	4620      	mov	r0, r4
 8014310:	f7ff fd14 	bl	8013d3c <UART_AdvFeatureConfig>
 8014314:	e7da      	b.n	80142cc <HAL_MultiProcessor_Init+0x34>
}
 8014316:	2001      	movs	r0, #1
 8014318:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 801431a:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 801431c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8014320:	f7f3 fbf2 	bl	8007b08 <HAL_UART_MspInit>
 8014324:	e7c4      	b.n	80142b0 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8014326:	f240 211d 	movw	r1, #541	; 0x21d
 801432a:	4803      	ldr	r0, [pc, #12]	; (8014338 <HAL_MultiProcessor_Init+0xa0>)
 801432c:	f7f1 fa9c 	bl	8005868 <assert_failed>
 8014330:	e7bb      	b.n	80142aa <HAL_MultiProcessor_Init+0x12>
}
 8014332:	2001      	movs	r0, #1
 8014334:	4770      	bx	lr
 8014336:	bf00      	nop
 8014338:	0802e590 	.word	0x0802e590

0801433c <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 801433c:	6883      	ldr	r3, [r0, #8]
{
 801433e:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 8014340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8014344:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8014348:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 801434a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 801434e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8014352:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8014354:	d04f      	beq.n	80143f6 <UART_Start_Receive_IT+0xba>
 8014356:	2b00      	cmp	r3, #0
 8014358:	d043      	beq.n	80143e2 <UART_Start_Receive_IT+0xa6>
 801435a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801435e:	d057      	beq.n	8014410 <UART_Start_Receive_IT+0xd4>
 8014360:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014364:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014366:	2322      	movs	r3, #34	; 0x22
 8014368:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801436a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801436e:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014370:	f102 0308 	add.w	r3, r2, #8
 8014374:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014378:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801437c:	f102 0408 	add.w	r4, r2, #8
 8014380:	e844 3100 	strex	r1, r3, [r4]
 8014384:	2900      	cmp	r1, #0
 8014386:	d1f3      	bne.n	8014370 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014388:	6883      	ldr	r3, [r0, #8]
 801438a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801438e:	d011      	beq.n	80143b4 <UART_Start_Receive_IT+0x78>
 8014390:	4c23      	ldr	r4, [pc, #140]	; (8014420 <UART_Start_Receive_IT+0xe4>)
 8014392:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 8014394:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8014398:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 801439a:	b18b      	cbz	r3, 80143c0 <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801439c:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80143a0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143a4:	e842 3100 	strex	r1, r3, [r2]
 80143a8:	2900      	cmp	r1, #0
 80143aa:	d1f7      	bne.n	801439c <UART_Start_Receive_IT+0x60>
}
 80143ac:	2000      	movs	r0, #0
 80143ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143b2:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80143b4:	6903      	ldr	r3, [r0, #16]
 80143b6:	bb33      	cbnz	r3, 8014406 <UART_Start_Receive_IT+0xca>
 80143b8:	491a      	ldr	r1, [pc, #104]	; (8014424 <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 80143ba:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 80143be:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143c0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80143c4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143c8:	e842 3100 	strex	r1, r3, [r2]
 80143cc:	2900      	cmp	r1, #0
 80143ce:	d0ed      	beq.n	80143ac <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143d0:	e852 3f00 	ldrex	r3, [r2]
 80143d4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143d8:	e842 3100 	strex	r1, r3, [r2]
 80143dc:	2900      	cmp	r1, #0
 80143de:	d1ef      	bne.n	80143c0 <UART_Start_Receive_IT+0x84>
 80143e0:	e7e4      	b.n	80143ac <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 80143e2:	6903      	ldr	r3, [r0, #16]
 80143e4:	b91b      	cbnz	r3, 80143ee <UART_Start_Receive_IT+0xb2>
 80143e6:	23ff      	movs	r3, #255	; 0xff
 80143e8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80143ec:	e7ba      	b.n	8014364 <UART_Start_Receive_IT+0x28>
 80143ee:	237f      	movs	r3, #127	; 0x7f
 80143f0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80143f4:	e7b6      	b.n	8014364 <UART_Start_Receive_IT+0x28>
 80143f6:	6903      	ldr	r3, [r0, #16]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d1f4      	bne.n	80143e6 <UART_Start_Receive_IT+0xaa>
 80143fc:	f240 13ff 	movw	r3, #511	; 0x1ff
 8014400:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014404:	e7ae      	b.n	8014364 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 8014406:	4b06      	ldr	r3, [pc, #24]	; (8014420 <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 8014408:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 801440c:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 801440e:	e7c5      	b.n	801439c <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 8014410:	6903      	ldr	r3, [r0, #16]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d0eb      	beq.n	80143ee <UART_Start_Receive_IT+0xb2>
 8014416:	233f      	movs	r3, #63	; 0x3f
 8014418:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801441c:	e7a2      	b.n	8014364 <UART_Start_Receive_IT+0x28>
 801441e:	bf00      	nop
 8014420:	080134cd 	.word	0x080134cd
 8014424:	0801356d 	.word	0x0801356d

08014428 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8014428:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801442a:	2b20      	cmp	r3, #32
 801442c:	d11e      	bne.n	801446c <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 801442e:	b1d9      	cbz	r1, 8014468 <HAL_UART_Receive_IT+0x40>
 8014430:	fab2 f382 	clz	r3, r2
 8014434:	095b      	lsrs	r3, r3, #5
 8014436:	b1ba      	cbz	r2, 8014468 <HAL_UART_Receive_IT+0x40>
{
 8014438:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 801443a:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 801443e:	2c01      	cmp	r4, #1
 8014440:	d016      	beq.n	8014470 <HAL_UART_Receive_IT+0x48>
 8014442:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014444:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014446:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8014448:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801444c:	6863      	ldr	r3, [r4, #4]
 801444e:	021b      	lsls	r3, r3, #8
 8014450:	d507      	bpl.n	8014462 <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014452:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014456:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801445a:	e844 3500 	strex	r5, r3, [r4]
 801445e:	2d00      	cmp	r5, #0
 8014460:	d1f7      	bne.n	8014452 <HAL_UART_Receive_IT+0x2a>
}
 8014462:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8014464:	f7ff bf6a 	b.w	801433c <UART_Start_Receive_IT>
      return HAL_ERROR;
 8014468:	2001      	movs	r0, #1
}
 801446a:	4770      	bx	lr
    return HAL_BUSY;
 801446c:	2002      	movs	r0, #2
 801446e:	4770      	bx	lr
 8014470:	2002      	movs	r0, #2
}
 8014472:	bc30      	pop	{r4, r5}
 8014474:	4770      	bx	lr
 8014476:	bf00      	nop

08014478 <UART_Start_Receive_DMA>:
{
 8014478:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801447a:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801447c:	2500      	movs	r5, #0
{
 801447e:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8014480:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014482:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 8014486:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801448a:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 801448c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801448e:	b168      	cbz	r0, 80144ac <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014490:	4e1f      	ldr	r6, [pc, #124]	; (8014510 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014492:	4613      	mov	r3, r2
 8014494:	460a      	mov	r2, r1
 8014496:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014498:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801449a:	4e1e      	ldr	r6, [pc, #120]	; (8014514 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801449c:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 801449e:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80144a0:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80144a2:	4e1d      	ldr	r6, [pc, #116]	; (8014518 <UART_Start_Receive_DMA+0xa0>)
 80144a4:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80144a6:	f7f6 f8f7 	bl	800a698 <HAL_DMA_Start_IT>
 80144aa:	bb40      	cbnz	r0, 80144fe <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 80144ac:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 80144ae:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 80144b0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 80144b4:	b14b      	cbz	r3, 80144ca <UART_Start_Receive_DMA+0x52>
 80144b6:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144b8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80144bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144c0:	e843 2100 	strex	r1, r2, [r3]
 80144c4:	2900      	cmp	r1, #0
 80144c6:	d1f7      	bne.n	80144b8 <UART_Start_Receive_DMA+0x40>
 80144c8:	e000      	b.n	80144cc <UART_Start_Receive_DMA+0x54>
 80144ca:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144cc:	f103 0208 	add.w	r2, r3, #8
 80144d0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80144d4:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144d8:	f103 0008 	add.w	r0, r3, #8
 80144dc:	e840 2100 	strex	r1, r2, [r0]
 80144e0:	2900      	cmp	r1, #0
 80144e2:	d1f3      	bne.n	80144cc <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144e4:	f103 0208 	add.w	r2, r3, #8
 80144e8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80144ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144f0:	f103 0108 	add.w	r1, r3, #8
 80144f4:	e841 2000 	strex	r0, r2, [r1]
 80144f8:	2800      	cmp	r0, #0
 80144fa:	d1f3      	bne.n	80144e4 <UART_Start_Receive_DMA+0x6c>
}
 80144fc:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80144fe:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8014500:	2320      	movs	r3, #32
      return HAL_ERROR;
 8014502:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8014504:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014508:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 801450c:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 801450e:	bd70      	pop	{r4, r5, r6, pc}
 8014510:	08013629 	.word	0x08013629
 8014514:	0801360d 	.word	0x0801360d
 8014518:	080132a5 	.word	0x080132a5

0801451c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 801451c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801451e:	2b20      	cmp	r3, #32
 8014520:	d11e      	bne.n	8014560 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 8014522:	b1d9      	cbz	r1, 801455c <HAL_UART_Receive_DMA+0x40>
 8014524:	fab2 f382 	clz	r3, r2
 8014528:	095b      	lsrs	r3, r3, #5
 801452a:	b1ba      	cbz	r2, 801455c <HAL_UART_Receive_DMA+0x40>
{
 801452c:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 801452e:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8014532:	2c01      	cmp	r4, #1
 8014534:	d016      	beq.n	8014564 <HAL_UART_Receive_DMA+0x48>
 8014536:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014538:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801453a:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 801453c:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014540:	6863      	ldr	r3, [r4, #4]
 8014542:	021b      	lsls	r3, r3, #8
 8014544:	d507      	bpl.n	8014556 <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014546:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801454a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801454e:	e844 3500 	strex	r5, r3, [r4]
 8014552:	2d00      	cmp	r5, #0
 8014554:	d1f7      	bne.n	8014546 <HAL_UART_Receive_DMA+0x2a>
}
 8014556:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8014558:	f7ff bf8e 	b.w	8014478 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 801455c:	2001      	movs	r0, #1
}
 801455e:	4770      	bx	lr
    return HAL_BUSY;
 8014560:	2002      	movs	r0, #2
 8014562:	4770      	bx	lr
 8014564:	2002      	movs	r0, #2
}
 8014566:	bc30      	pop	{r4, r5}
 8014568:	4770      	bx	lr
 801456a:	bf00      	nop

0801456c <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 801456c:	2800      	cmp	r0, #0
 801456e:	f000 808a 	beq.w	8014686 <HAL_RS485Ex_Init+0x11a>
{
 8014572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8014576:	4c47      	ldr	r4, [pc, #284]	; (8014694 <HAL_RS485Ex_Init+0x128>)
 8014578:	4617      	mov	r7, r2
 801457a:	461d      	mov	r5, r3
 801457c:	4a46      	ldr	r2, [pc, #280]	; (8014698 <HAL_RS485Ex_Init+0x12c>)
 801457e:	6803      	ldr	r3, [r0, #0]
 8014580:	460e      	mov	r6, r1
 8014582:	4680      	mov	r8, r0
 8014584:	42a3      	cmp	r3, r4
 8014586:	bf18      	it	ne
 8014588:	4293      	cmpne	r3, r2
 801458a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801458e:	bf14      	ite	ne
 8014590:	2401      	movne	r4, #1
 8014592:	2400      	moveq	r4, #0
 8014594:	4293      	cmp	r3, r2
 8014596:	bf0c      	ite	eq
 8014598:	2400      	moveq	r4, #0
 801459a:	f004 0401 	andne.w	r4, r4, #1
 801459e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80145a2:	4293      	cmp	r3, r2
 80145a4:	bf0c      	ite	eq
 80145a6:	2400      	moveq	r4, #0
 80145a8:	f004 0401 	andne.w	r4, r4, #1
 80145ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80145b0:	4293      	cmp	r3, r2
 80145b2:	bf0c      	ite	eq
 80145b4:	2400      	moveq	r4, #0
 80145b6:	f004 0401 	andne.w	r4, r4, #1
 80145ba:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80145be:	4293      	cmp	r3, r2
 80145c0:	bf0c      	ite	eq
 80145c2:	2400      	moveq	r4, #0
 80145c4:	f004 0401 	andne.w	r4, r4, #1
 80145c8:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80145cc:	4293      	cmp	r3, r2
 80145ce:	bf0c      	ite	eq
 80145d0:	2400      	moveq	r4, #0
 80145d2:	f004 0401 	andne.w	r4, r4, #1
 80145d6:	b11c      	cbz	r4, 80145e0 <HAL_RS485Ex_Init+0x74>
 80145d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80145dc:	4293      	cmp	r3, r2
 80145de:	d154      	bne.n	801468a <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 80145e0:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 80145e4:	d14a      	bne.n	801467c <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80145e6:	2f1f      	cmp	r7, #31
 80145e8:	d843      	bhi.n	8014672 <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 80145ea:	2d1f      	cmp	r5, #31
 80145ec:	d83c      	bhi.n	8014668 <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 80145ee:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 80145f2:	b39b      	cbz	r3, 801465c <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80145f4:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 80145f8:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80145fa:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 80145fc:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8014600:	6813      	ldr	r3, [r2, #0]
 8014602:	f023 0301 	bic.w	r3, r3, #1
 8014606:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014608:	f7ff f9b4 	bl	8013974 <UART_SetConfig>
 801460c:	2801      	cmp	r0, #1
 801460e:	d022      	beq.n	8014656 <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014610:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8014614:	b9db      	cbnz	r3, 801464e <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8014616:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 801461a:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801461c:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801461e:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8014620:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8014624:	4d1d      	ldr	r5, [pc, #116]	; (801469c <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8014626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801462a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 801462c:	6899      	ldr	r1, [r3, #8]
 801462e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8014632:	430e      	orrs	r6, r1
 8014634:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8014636:	681a      	ldr	r2, [r3, #0]
 8014638:	4015      	ands	r5, r2
 801463a:	432f      	orrs	r7, r5
 801463c:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 801463e:	681a      	ldr	r2, [r3, #0]
 8014640:	f042 0201 	orr.w	r2, r2, #1
}
 8014644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 8014648:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801464a:	f7ff bd3f 	b.w	80140cc <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 801464e:	4640      	mov	r0, r8
 8014650:	f7ff fb74 	bl	8013d3c <UART_AdvFeatureConfig>
 8014654:	e7df      	b.n	8014616 <HAL_RS485Ex_Init+0xaa>
}
 8014656:	2001      	movs	r0, #1
 8014658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 801465c:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 801465e:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8014662:	f7f3 fa51 	bl	8007b08 <HAL_UART_MspInit>
 8014666:	e7c5      	b.n	80145f4 <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8014668:	21aa      	movs	r1, #170	; 0xaa
 801466a:	480d      	ldr	r0, [pc, #52]	; (80146a0 <HAL_RS485Ex_Init+0x134>)
 801466c:	f7f1 f8fc 	bl	8005868 <assert_failed>
 8014670:	e7bd      	b.n	80145ee <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8014672:	21a7      	movs	r1, #167	; 0xa7
 8014674:	480a      	ldr	r0, [pc, #40]	; (80146a0 <HAL_RS485Ex_Init+0x134>)
 8014676:	f7f1 f8f7 	bl	8005868 <assert_failed>
 801467a:	e7b6      	b.n	80145ea <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 801467c:	21a4      	movs	r1, #164	; 0xa4
 801467e:	4808      	ldr	r0, [pc, #32]	; (80146a0 <HAL_RS485Ex_Init+0x134>)
 8014680:	f7f1 f8f2 	bl	8005868 <assert_failed>
 8014684:	e7af      	b.n	80145e6 <HAL_RS485Ex_Init+0x7a>
}
 8014686:	2001      	movs	r0, #1
 8014688:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 801468a:	21a1      	movs	r1, #161	; 0xa1
 801468c:	4804      	ldr	r0, [pc, #16]	; (80146a0 <HAL_RS485Ex_Init+0x134>)
 801468e:	f7f1 f8eb 	bl	8005868 <assert_failed>
 8014692:	e7a5      	b.n	80145e0 <HAL_RS485Ex_Init+0x74>
 8014694:	40011000 	.word	0x40011000
 8014698:	40004400 	.word	0x40004400
 801469c:	fc00ffff 	.word	0xfc00ffff
 80146a0:	0802e5e0 	.word	0x0802e5e0

080146a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80146a4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80146a6:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80146a8:	4a11      	ldr	r2, [pc, #68]	; (80146f0 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 80146aa:	9301      	str	r3, [sp, #4]
 80146ac:	e002      	b.n	80146b4 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146ae:	6903      	ldr	r3, [r0, #16]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	db07      	blt.n	80146c4 <USB_CoreReset+0x20>
    if (++count > 200000U)
 80146b4:	9b01      	ldr	r3, [sp, #4]
 80146b6:	3301      	adds	r3, #1
 80146b8:	4293      	cmp	r3, r2
 80146ba:	9301      	str	r3, [sp, #4]
 80146bc:	d9f7      	bls.n	80146ae <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 80146be:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 80146c0:	b002      	add	sp, #8
 80146c2:	4770      	bx	lr
  count = 0U;
 80146c4:	2300      	movs	r3, #0
    if (++count > 200000U)
 80146c6:	4a0a      	ldr	r2, [pc, #40]	; (80146f0 <USB_CoreReset+0x4c>)
  count = 0U;
 80146c8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80146ca:	6903      	ldr	r3, [r0, #16]
 80146cc:	f043 0301 	orr.w	r3, r3, #1
 80146d0:	6103      	str	r3, [r0, #16]
 80146d2:	e003      	b.n	80146dc <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80146d4:	6903      	ldr	r3, [r0, #16]
 80146d6:	f013 0301 	ands.w	r3, r3, #1
 80146da:	d005      	beq.n	80146e8 <USB_CoreReset+0x44>
    if (++count > 200000U)
 80146dc:	9b01      	ldr	r3, [sp, #4]
 80146de:	3301      	adds	r3, #1
 80146e0:	4293      	cmp	r3, r2
 80146e2:	9301      	str	r3, [sp, #4]
 80146e4:	d9f6      	bls.n	80146d4 <USB_CoreReset+0x30>
 80146e6:	e7ea      	b.n	80146be <USB_CoreReset+0x1a>
  return HAL_OK;
 80146e8:	4618      	mov	r0, r3
}
 80146ea:	b002      	add	sp, #8
 80146ec:	4770      	bx	lr
 80146ee:	bf00      	nop
 80146f0:	00030d40 	.word	0x00030d40

080146f4 <USB_CoreInit>:
{
 80146f4:	b084      	sub	sp, #16
 80146f6:	b510      	push	{r4, lr}
 80146f8:	f10d 0c0c 	add.w	ip, sp, #12
 80146fc:	4604      	mov	r4, r0
 80146fe:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014702:	9b08      	ldr	r3, [sp, #32]
 8014704:	2b01      	cmp	r3, #1
 8014706:	d122      	bne.n	801474e <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014708:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801470a:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 801470e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014710:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8014714:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014716:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014718:	68c2      	ldr	r2, [r0, #12]
 801471a:	ea03 0302 	and.w	r3, r3, r2
 801471e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014720:	68c3      	ldr	r3, [r0, #12]
 8014722:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8014726:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8014728:	d01c      	beq.n	8014764 <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 801472a:	4620      	mov	r0, r4
 801472c:	f7ff ffba 	bl	80146a4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8014730:	9b06      	ldr	r3, [sp, #24]
 8014732:	2b01      	cmp	r3, #1
 8014734:	d107      	bne.n	8014746 <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014736:	68a3      	ldr	r3, [r4, #8]
 8014738:	f043 0306 	orr.w	r3, r3, #6
 801473c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801473e:	68a3      	ldr	r3, [r4, #8]
 8014740:	f043 0320 	orr.w	r3, r3, #32
 8014744:	60a3      	str	r3, [r4, #8]
}
 8014746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801474a:	b004      	add	sp, #16
 801474c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801474e:	68c3      	ldr	r3, [r0, #12]
 8014750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014754:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8014756:	f7ff ffa5 	bl	80146a4 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801475a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014760:	63a3      	str	r3, [r4, #56]	; 0x38
 8014762:	e7e5      	b.n	8014730 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014764:	68c3      	ldr	r3, [r0, #12]
 8014766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801476a:	60c3      	str	r3, [r0, #12]
 801476c:	e7dd      	b.n	801472a <USB_CoreInit+0x36>
 801476e:	bf00      	nop

08014770 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8014770:	2a02      	cmp	r2, #2
{
 8014772:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8014774:	d00b      	beq.n	801478e <USB_SetTurnaroundTime+0x1e>
 8014776:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801477a:	68d9      	ldr	r1, [r3, #12]
}
 801477c:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801477e:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8014782:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014784:	68da      	ldr	r2, [r3, #12]
 8014786:	ea42 020c 	orr.w	r2, r2, ip
 801478a:	60da      	str	r2, [r3, #12]
}
 801478c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801478e:	4a23      	ldr	r2, [pc, #140]	; (801481c <USB_SetTurnaroundTime+0xac>)
 8014790:	4823      	ldr	r0, [pc, #140]	; (8014820 <USB_SetTurnaroundTime+0xb0>)
 8014792:	440a      	add	r2, r1
 8014794:	4282      	cmp	r2, r0
 8014796:	d92c      	bls.n	80147f2 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014798:	4a22      	ldr	r2, [pc, #136]	; (8014824 <USB_SetTurnaroundTime+0xb4>)
 801479a:	4823      	ldr	r0, [pc, #140]	; (8014828 <USB_SetTurnaroundTime+0xb8>)
 801479c:	440a      	add	r2, r1
 801479e:	4282      	cmp	r2, r0
 80147a0:	d92a      	bls.n	80147f8 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80147a2:	4a22      	ldr	r2, [pc, #136]	; (801482c <USB_SetTurnaroundTime+0xbc>)
 80147a4:	4822      	ldr	r0, [pc, #136]	; (8014830 <USB_SetTurnaroundTime+0xc0>)
 80147a6:	440a      	add	r2, r1
 80147a8:	4282      	cmp	r2, r0
 80147aa:	d928      	bls.n	80147fe <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80147ac:	4a21      	ldr	r2, [pc, #132]	; (8014834 <USB_SetTurnaroundTime+0xc4>)
 80147ae:	4822      	ldr	r0, [pc, #136]	; (8014838 <USB_SetTurnaroundTime+0xc8>)
 80147b0:	440a      	add	r2, r1
 80147b2:	4282      	cmp	r2, r0
 80147b4:	d326      	bcc.n	8014804 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80147b6:	4a21      	ldr	r2, [pc, #132]	; (801483c <USB_SetTurnaroundTime+0xcc>)
 80147b8:	4821      	ldr	r0, [pc, #132]	; (8014840 <USB_SetTurnaroundTime+0xd0>)
 80147ba:	440a      	add	r2, r1
 80147bc:	4282      	cmp	r2, r0
 80147be:	d924      	bls.n	801480a <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80147c0:	4a20      	ldr	r2, [pc, #128]	; (8014844 <USB_SetTurnaroundTime+0xd4>)
 80147c2:	4821      	ldr	r0, [pc, #132]	; (8014848 <USB_SetTurnaroundTime+0xd8>)
 80147c4:	440a      	add	r2, r1
 80147c6:	4282      	cmp	r2, r0
 80147c8:	d322      	bcc.n	8014810 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80147ca:	4a20      	ldr	r2, [pc, #128]	; (801484c <USB_SetTurnaroundTime+0xdc>)
 80147cc:	4820      	ldr	r0, [pc, #128]	; (8014850 <USB_SetTurnaroundTime+0xe0>)
 80147ce:	440a      	add	r2, r1
 80147d0:	4282      	cmp	r2, r0
 80147d2:	d3d0      	bcc.n	8014776 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80147d4:	4a1f      	ldr	r2, [pc, #124]	; (8014854 <USB_SetTurnaroundTime+0xe4>)
 80147d6:	4820      	ldr	r0, [pc, #128]	; (8014858 <USB_SetTurnaroundTime+0xe8>)
 80147d8:	440a      	add	r2, r1
 80147da:	4282      	cmp	r2, r0
 80147dc:	d31b      	bcc.n	8014816 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80147de:	4a1f      	ldr	r2, [pc, #124]	; (801485c <USB_SetTurnaroundTime+0xec>)
 80147e0:	481f      	ldr	r0, [pc, #124]	; (8014860 <USB_SetTurnaroundTime+0xf0>)
 80147e2:	440a      	add	r2, r1
 80147e4:	4282      	cmp	r2, r0
 80147e6:	bf34      	ite	cc
 80147e8:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 80147ec:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 80147f0:	e7c3      	b.n	801477a <USB_SetTurnaroundTime+0xa>
 80147f2:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 80147f6:	e7c0      	b.n	801477a <USB_SetTurnaroundTime+0xa>
 80147f8:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 80147fc:	e7bd      	b.n	801477a <USB_SetTurnaroundTime+0xa>
 80147fe:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8014802:	e7ba      	b.n	801477a <USB_SetTurnaroundTime+0xa>
 8014804:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8014808:	e7b7      	b.n	801477a <USB_SetTurnaroundTime+0xa>
 801480a:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 801480e:	e7b4      	b.n	801477a <USB_SetTurnaroundTime+0xa>
 8014810:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 8014814:	e7b1      	b.n	801477a <USB_SetTurnaroundTime+0xa>
 8014816:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 801481a:	e7ae      	b.n	801477a <USB_SetTurnaroundTime+0xa>
 801481c:	ff275340 	.word	0xff275340
 8014820:	000c34ff 	.word	0x000c34ff
 8014824:	ff1b1e40 	.word	0xff1b1e40
 8014828:	000f423f 	.word	0x000f423f
 801482c:	ff0bdc00 	.word	0xff0bdc00
 8014830:	00124f7f 	.word	0x00124f7f
 8014834:	fef98c80 	.word	0xfef98c80
 8014838:	0013d620 	.word	0x0013d620
 801483c:	fee5b660 	.word	0xfee5b660
 8014840:	0016e35f 	.word	0x0016e35f
 8014844:	feced300 	.word	0xfeced300
 8014848:	001b7740 	.word	0x001b7740
 801484c:	feb35bc0 	.word	0xfeb35bc0
 8014850:	002191c0 	.word	0x002191c0
 8014854:	fe91ca00 	.word	0xfe91ca00
 8014858:	00387520 	.word	0x00387520
 801485c:	fe5954e0 	.word	0xfe5954e0
 8014860:	00419ce0 	.word	0x00419ce0

08014864 <USB_EnableGlobalInt>:
{
 8014864:	4603      	mov	r3, r0
}
 8014866:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014868:	689a      	ldr	r2, [r3, #8]
 801486a:	f042 0201 	orr.w	r2, r2, #1
 801486e:	609a      	str	r2, [r3, #8]
}
 8014870:	4770      	bx	lr
 8014872:	bf00      	nop

08014874 <USB_DisableGlobalInt>:
{
 8014874:	4603      	mov	r3, r0
}
 8014876:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014878:	689a      	ldr	r2, [r3, #8]
 801487a:	f022 0201 	bic.w	r2, r2, #1
 801487e:	609a      	str	r2, [r3, #8]
}
 8014880:	4770      	bx	lr
 8014882:	bf00      	nop

08014884 <USB_SetCurrentMode>:
{
 8014884:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014886:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8014888:	2901      	cmp	r1, #1
{
 801488a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801488c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014890:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8014892:	d017      	beq.n	80148c4 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8014894:	b9a1      	cbnz	r1, 80148c0 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014896:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8014898:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801489a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801489e:	60c3      	str	r3, [r0, #12]
 80148a0:	e001      	b.n	80148a6 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80148a2:	2c32      	cmp	r4, #50	; 0x32
 80148a4:	d00c      	beq.n	80148c0 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80148a6:	2001      	movs	r0, #1
      ms++;
 80148a8:	4404      	add	r4, r0
      HAL_Delay(1U);
 80148aa:	f7f4 fd31 	bl	8009310 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80148ae:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80148b0:	07db      	lsls	r3, r3, #31
 80148b2:	d4f6      	bmi.n	80148a2 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 80148b4:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80148b8:	fab0 f080 	clz	r0, r0
 80148bc:	0940      	lsrs	r0, r0, #5
}
 80148be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80148c0:	2001      	movs	r0, #1
}
 80148c2:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80148c4:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80148c6:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80148c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80148cc:	60c3      	str	r3, [r0, #12]
 80148ce:	e001      	b.n	80148d4 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80148d0:	2c32      	cmp	r4, #50	; 0x32
 80148d2:	d0f5      	beq.n	80148c0 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80148d4:	2001      	movs	r0, #1
      ms++;
 80148d6:	4404      	add	r4, r0
      HAL_Delay(1U);
 80148d8:	f7f4 fd1a 	bl	8009310 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80148dc:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80148de:	07da      	lsls	r2, r3, #31
 80148e0:	d5f6      	bpl.n	80148d0 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 80148e2:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80148e6:	fab0 f080 	clz	r0, r0
 80148ea:	0940      	lsrs	r0, r0, #5
 80148ec:	e7e7      	b.n	80148be <USB_SetCurrentMode+0x3a>
 80148ee:	bf00      	nop

080148f0 <USB_FlushTxFifo>:
{
 80148f0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80148f2:	2300      	movs	r3, #0
    if (++count > 200000U)
 80148f4:	4a11      	ldr	r2, [pc, #68]	; (801493c <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 80148f6:	9301      	str	r3, [sp, #4]
 80148f8:	e002      	b.n	8014900 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80148fa:	6903      	ldr	r3, [r0, #16]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	db07      	blt.n	8014910 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8014900:	9b01      	ldr	r3, [sp, #4]
 8014902:	3301      	adds	r3, #1
 8014904:	4293      	cmp	r3, r2
 8014906:	9301      	str	r3, [sp, #4]
 8014908:	d9f7      	bls.n	80148fa <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 801490a:	2003      	movs	r0, #3
}
 801490c:	b002      	add	sp, #8
 801490e:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014910:	0189      	lsls	r1, r1, #6
  count = 0U;
 8014912:	2300      	movs	r3, #0
    if (++count > 200000U)
 8014914:	4a09      	ldr	r2, [pc, #36]	; (801493c <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014916:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 801491a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801491c:	6101      	str	r1, [r0, #16]
 801491e:	e003      	b.n	8014928 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014920:	6903      	ldr	r3, [r0, #16]
 8014922:	f013 0320 	ands.w	r3, r3, #32
 8014926:	d005      	beq.n	8014934 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 8014928:	9b01      	ldr	r3, [sp, #4]
 801492a:	3301      	adds	r3, #1
 801492c:	4293      	cmp	r3, r2
 801492e:	9301      	str	r3, [sp, #4]
 8014930:	d9f6      	bls.n	8014920 <USB_FlushTxFifo+0x30>
 8014932:	e7ea      	b.n	801490a <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 8014934:	4618      	mov	r0, r3
}
 8014936:	b002      	add	sp, #8
 8014938:	4770      	bx	lr
 801493a:	bf00      	nop
 801493c:	00030d40 	.word	0x00030d40

08014940 <USB_FlushRxFifo>:
{
 8014940:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8014942:	2300      	movs	r3, #0
    if (++count > 200000U)
 8014944:	4a10      	ldr	r2, [pc, #64]	; (8014988 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 8014946:	9301      	str	r3, [sp, #4]
 8014948:	e002      	b.n	8014950 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801494a:	6903      	ldr	r3, [r0, #16]
 801494c:	2b00      	cmp	r3, #0
 801494e:	db07      	blt.n	8014960 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 8014950:	9b01      	ldr	r3, [sp, #4]
 8014952:	3301      	adds	r3, #1
 8014954:	4293      	cmp	r3, r2
 8014956:	9301      	str	r3, [sp, #4]
 8014958:	d9f7      	bls.n	801494a <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 801495a:	2003      	movs	r0, #3
}
 801495c:	b002      	add	sp, #8
 801495e:	4770      	bx	lr
  count = 0U;
 8014960:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014962:	2310      	movs	r3, #16
    if (++count > 200000U)
 8014964:	4a08      	ldr	r2, [pc, #32]	; (8014988 <USB_FlushRxFifo+0x48>)
  count = 0U;
 8014966:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014968:	6103      	str	r3, [r0, #16]
 801496a:	e003      	b.n	8014974 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801496c:	6903      	ldr	r3, [r0, #16]
 801496e:	f013 0310 	ands.w	r3, r3, #16
 8014972:	d005      	beq.n	8014980 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 8014974:	9b01      	ldr	r3, [sp, #4]
 8014976:	3301      	adds	r3, #1
 8014978:	4293      	cmp	r3, r2
 801497a:	9301      	str	r3, [sp, #4]
 801497c:	d9f6      	bls.n	801496c <USB_FlushRxFifo+0x2c>
 801497e:	e7ec      	b.n	801495a <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 8014980:	4618      	mov	r0, r3
}
 8014982:	b002      	add	sp, #8
 8014984:	4770      	bx	lr
 8014986:	bf00      	nop
 8014988:	00030d40 	.word	0x00030d40

0801498c <USB_DevInit>:
{
 801498c:	b084      	sub	sp, #16
 801498e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014992:	ad09      	add	r5, sp, #36	; 0x24
 8014994:	4604      	mov	r4, r0
 8014996:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014998:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 801499c:	2300      	movs	r3, #0
 801499e:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 80149a0:	4619      	mov	r1, r3
 80149a2:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80149a6:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80149a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80149ac:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80149ae:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80149b0:	d1f7      	bne.n	80149a2 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 80149b2:	2e00      	cmp	r6, #0
 80149b4:	f040 8092 	bne.w	8014adc <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80149b8:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80149bc:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 80149c0:	f043 0302 	orr.w	r3, r3, #2
 80149c4:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80149c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80149c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80149cc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80149ce:	6823      	ldr	r3, [r4, #0]
 80149d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149d4:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80149d6:	6823      	ldr	r3, [r4, #0]
 80149d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149dc:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80149de:	2300      	movs	r3, #0
 80149e0:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80149e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149ea:	2b01      	cmp	r3, #1
 80149ec:	d07d      	beq.n	8014aea <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	f043 0303 	orr.w	r3, r3, #3
 80149f4:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80149f6:	2110      	movs	r1, #16
 80149f8:	4620      	mov	r0, r4
 80149fa:	f7ff ff79 	bl	80148f0 <USB_FlushTxFifo>
 80149fe:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014a00:	4620      	mov	r0, r4
 8014a02:	f7ff ff9d 	bl	8014940 <USB_FlushRxFifo>
 8014a06:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8014a0a:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014a0c:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8014a0e:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 8014a10:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 8014a12:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014a14:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 8014a16:	bf18      	it	ne
 8014a18:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014a1a:	b1ed      	cbz	r5, 8014a58 <USB_DevInit+0xcc>
 8014a1c:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014a20:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014a24:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8014a28:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014a2a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8014a2e:	e009      	b.n	8014a44 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8014a30:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014a34:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014a36:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014a3a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014a3e:	3320      	adds	r3, #32
 8014a40:	4295      	cmp	r5, r2
 8014a42:	d02c      	beq.n	8014a9e <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014a44:	6819      	ldr	r1, [r3, #0]
 8014a46:	2900      	cmp	r1, #0
 8014a48:	daf2      	bge.n	8014a30 <USB_DevInit+0xa4>
      if (i == 0U)
 8014a4a:	b112      	cbz	r2, 8014a52 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014a4c:	f8c3 8000 	str.w	r8, [r3]
 8014a50:	e7f0      	b.n	8014a34 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014a52:	f8c3 9000 	str.w	r9, [r3]
 8014a56:	e7ed      	b.n	8014a34 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014a58:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8014a5a:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014a60:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014a62:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8014a66:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014a68:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8014a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a6c:	b91b      	cbnz	r3, 8014a76 <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014a6e:	69a3      	ldr	r3, [r4, #24]
 8014a70:	f043 0310 	orr.w	r3, r3, #16
 8014a74:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014a76:	69a2      	ldr	r2, [r4, #24]
 8014a78:	4b21      	ldr	r3, [pc, #132]	; (8014b00 <USB_DevInit+0x174>)
 8014a7a:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8014a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014a7e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8014a80:	b11a      	cbz	r2, 8014a8a <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014a82:	69a3      	ldr	r3, [r4, #24]
 8014a84:	f043 0308 	orr.w	r3, r3, #8
 8014a88:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8014a8a:	2e01      	cmp	r6, #1
 8014a8c:	d103      	bne.n	8014a96 <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014a8e:	69a2      	ldr	r2, [r4, #24]
 8014a90:	4b1c      	ldr	r3, [pc, #112]	; (8014b04 <USB_DevInit+0x178>)
 8014a92:	4313      	orrs	r3, r2
 8014a94:	61a3      	str	r3, [r4, #24]
}
 8014a96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a9a:	b004      	add	sp, #16
 8014a9c:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014aa4:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014aa8:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014aac:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014aae:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8014ab2:	e009      	b.n	8014ac8 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014ab4:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ab8:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014aba:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014abe:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ac2:	3320      	adds	r3, #32
 8014ac4:	4295      	cmp	r5, r2
 8014ac6:	d0c7      	beq.n	8014a58 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ac8:	6819      	ldr	r1, [r3, #0]
 8014aca:	2900      	cmp	r1, #0
 8014acc:	daf2      	bge.n	8014ab4 <USB_DevInit+0x128>
      if (i == 0U)
 8014ace:	b112      	cbz	r2, 8014ad6 <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014ad0:	f8c3 8000 	str.w	r8, [r3]
 8014ad4:	e7f0      	b.n	8014ab8 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014ad6:	f8c3 9000 	str.w	r9, [r3]
 8014ada:	e7ed      	b.n	8014ab8 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014adc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014ade:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014ae6:	63a3      	str	r3, [r4, #56]	; 0x38
 8014ae8:	e779      	b.n	80149de <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 8014aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aec:	b913      	cbnz	r3, 8014af4 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8014af2:	e780      	b.n	80149f6 <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	f043 0301 	orr.w	r3, r3, #1
 8014afa:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8014afc:	e77b      	b.n	80149f6 <USB_DevInit+0x6a>
 8014afe:	bf00      	nop
 8014b00:	803c3800 	.word	0x803c3800
 8014b04:	40000004 	.word	0x40000004

08014b08 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014b08:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014b0c:	f013 0006 	ands.w	r0, r3, #6
 8014b10:	d004      	beq.n	8014b1c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8014b12:	f013 0f02 	tst.w	r3, #2
 8014b16:	bf14      	ite	ne
 8014b18:	2002      	movne	r0, #2
 8014b1a:	200f      	moveq	r0, #15
}
 8014b1c:	4770      	bx	lr
 8014b1e:	bf00      	nop

08014b20 <USB_ActivateEndpoint>:
{
 8014b20:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8014b22:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014b24:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d020      	beq.n	8014b6c <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014b2a:	f002 0c0f 	and.w	ip, r2, #15
 8014b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014b32:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014b36:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014b3a:	fa03 f30c 	lsl.w	r3, r3, ip
 8014b3e:	4323      	orrs	r3, r4
 8014b40:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014b44:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8014b48:	041b      	lsls	r3, r3, #16
 8014b4a:	d40c      	bmi.n	8014b66 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014b4c:	688b      	ldr	r3, [r1, #8]
 8014b4e:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 8014b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014b56:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014b58:	4914      	ldr	r1, [pc, #80]	; (8014bac <USB_ActivateEndpoint+0x8c>)
 8014b5a:	4323      	orrs	r3, r4
 8014b5c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8014b60:	4319      	orrs	r1, r3
 8014b62:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8014b66:	2000      	movs	r0, #0
 8014b68:	bc30      	pop	{r4, r5}
 8014b6a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014b6c:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8014b70:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014b74:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014b78:	40ab      	lsls	r3, r5
 8014b7a:	69e5      	ldr	r5, [r4, #28]
 8014b7c:	432b      	orrs	r3, r5
 8014b7e:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014b80:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8014b84:	041c      	lsls	r4, r3, #16
 8014b86:	d4ee      	bmi.n	8014b66 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014b88:	688b      	ldr	r3, [r1, #8]
 8014b8a:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8014b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014b92:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014b94:	4905      	ldr	r1, [pc, #20]	; (8014bac <USB_ActivateEndpoint+0x8c>)
 8014b96:	432b      	orrs	r3, r5
 8014b98:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8014b9c:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8014ba0:	4311      	orrs	r1, r2
}
 8014ba2:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014ba4:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8014ba8:	2000      	movs	r0, #0
 8014baa:	4770      	bx	lr
 8014bac:	10008000 	.word	0x10008000

08014bb0 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 8014bb0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014bb2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8014bb4:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014bb6:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8014bba:	d02a      	beq.n	8014c12 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014bbc:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014bc0:	2a00      	cmp	r2, #0
 8014bc2:	db19      	blt.n	8014bf8 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014bc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014bc8:	f003 030f 	and.w	r3, r3, #15
 8014bcc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8014bd0:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014bd4:	4a23      	ldr	r2, [pc, #140]	; (8014c64 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014bd6:	ea21 0103 	bic.w	r1, r1, r3
 8014bda:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014bde:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8014be2:	ea21 0303 	bic.w	r3, r1, r3
 8014be6:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8014bea:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014bec:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014bf0:	401a      	ands	r2, r3
 8014bf2:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 8014bf6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014bf8:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014bfc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8014c00:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014c04:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014c08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8014c0c:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8014c10:	e7d8      	b.n	8014bc4 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c12:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014c16:	2a00      	cmp	r2, #0
 8014c18:	da0b      	bge.n	8014c32 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014c1a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014c1e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8014c22:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014c26:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014c2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8014c2e:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014c32:	f003 020f 	and.w	r2, r3, #15
 8014c36:	2301      	movs	r3, #1
 8014c38:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8014c3c:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014c3e:	4a0a      	ldr	r2, [pc, #40]	; (8014c68 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014c40:	ea21 0103 	bic.w	r1, r1, r3
 8014c44:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014c48:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8014c4c:	ea21 0303 	bic.w	r3, r1, r3
 8014c50:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8014c54:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014c56:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8014c5a:	401a      	ands	r2, r3
 8014c5c:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop
 8014c64:	eff37800 	.word	0xeff37800
 8014c68:	ec337800 	.word	0xec337800

08014c6c <USB_EPStartXfer>:
{
 8014c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8014c70:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014c72:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8014c76:	2b01      	cmp	r3, #1
 8014c78:	d051      	beq.n	8014d1e <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014c7a:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8014c7e:	4c84      	ldr	r4, [pc, #528]	; (8014e90 <USB_EPStartXfer+0x224>)
 8014c80:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 8014c84:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 8014c88:	402c      	ands	r4, r5
 8014c8a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014c8c:	4c81      	ldr	r4, [pc, #516]	; (8014e94 <USB_EPStartXfer+0x228>)
 8014c8e:	691d      	ldr	r5, [r3, #16]
 8014c90:	402c      	ands	r4, r5
 8014c92:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8014c94:	694c      	ldr	r4, [r1, #20]
 8014c96:	b384      	cbz	r4, 8014cfa <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014c98:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8014c9a:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014c9c:	4e7e      	ldr	r6, [pc, #504]	; (8014e98 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014c9e:	442c      	add	r4, r5
 8014ca0:	f104 34ff 	add.w	r4, r4, #4294967295
 8014ca4:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014ca8:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 8014cac:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014cae:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014cb2:	691d      	ldr	r5, [r3, #16]
 8014cb4:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014cb8:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014cbc:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014cbe:	691d      	ldr	r5, [r3, #16]
 8014cc0:	ea44 0405 	orr.w	r4, r4, r5
 8014cc4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014cc6:	d025      	beq.n	8014d14 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 8014cc8:	78cb      	ldrb	r3, [r1, #3]
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	d10c      	bne.n	8014ce8 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014cce:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014cd2:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014cd6:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014cda:	bf0c      	ite	eq
 8014cdc:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014ce0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014ce4:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014ce8:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014cec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014cf0:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014cfa:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 8014cfc:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014cfe:	691d      	ldr	r5, [r3, #16]
 8014d00:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8014d04:	ea44 0405 	orr.w	r4, r4, r5
 8014d08:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d0a:	691c      	ldr	r4, [r3, #16]
 8014d0c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8014d10:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014d12:	d1d9      	bne.n	8014cc8 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8014d14:	68ca      	ldr	r2, [r1, #12]
 8014d16:	2a00      	cmp	r2, #0
 8014d18:	d0d6      	beq.n	8014cc8 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014d1a:	615a      	str	r2, [r3, #20]
 8014d1c:	e7d4      	b.n	8014cc8 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 8014d1e:	694d      	ldr	r5, [r1, #20]
 8014d20:	2d00      	cmp	r5, #0
 8014d22:	d03d      	beq.n	8014da0 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d24:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8014d28:	4e59      	ldr	r6, [pc, #356]	; (8014e90 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014d2a:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d2e:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014d32:	4f58      	ldr	r7, [pc, #352]	; (8014e94 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d34:	ea08 0606 	and.w	r6, r8, r6
 8014d38:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014d3c:	eb05 060e 	add.w	r6, r5, lr
 8014d40:	3e01      	subs	r6, #1
 8014d42:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014d46:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8014d4a:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014d4c:	4e52      	ldr	r6, [pc, #328]	; (8014e98 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014d4e:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014d52:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 8014d56:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8014d5a:	433e      	orrs	r6, r7
 8014d5c:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014d60:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8014d64:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8014d68:	433e      	orrs	r6, r7
 8014d6a:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d6e:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8014d72:	f891 e003 	ldrb.w	lr, [r1, #3]
 8014d76:	f1be 0f01 	cmp.w	lr, #1
 8014d7a:	d057      	beq.n	8014e2c <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 8014d7c:	2a01      	cmp	r2, #1
 8014d7e:	d072      	beq.n	8014e66 <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014d80:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014d84:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014d88:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014d8c:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014d90:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014d94:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8014d98:	4313      	orrs	r3, r2
 8014d9a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8014d9e:	e7a9      	b.n	8014cf4 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014da0:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8014da4:	4e3b      	ldr	r6, [pc, #236]	; (8014e94 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014da6:	4c3a      	ldr	r4, [pc, #232]	; (8014e90 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 8014da8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014daa:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8014dae:	ea06 0607 	and.w	r6, r6, r7
 8014db2:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014db6:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8014dba:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8014dbe:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014dc2:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8014dc6:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014dca:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014dce:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8014dd2:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 8014dd6:	d03a      	beq.n	8014e4e <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014dd8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014ddc:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014de0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8014de4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014de8:	d184      	bne.n	8014cf4 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014dea:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014dee:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014df2:	6833      	ldr	r3, [r6, #0]
 8014df4:	bf0c      	ite	eq
 8014df6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014dfa:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014dfe:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8014e00:	2a00      	cmp	r2, #0
 8014e02:	f47f af77 	bne.w	8014cf4 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 8014e06:	b2ad      	uxth	r5, r5
 8014e08:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8014e0a:	08ad      	lsrs	r5, r5, #2
 8014e0c:	f43f af72 	beq.w	8014cf4 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014e10:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014e12:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 8014e16:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8014e1a:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8014e1e:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8014e22:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014e24:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8014e28:	d1f9      	bne.n	8014e1e <USB_EPStartXfer+0x1b2>
 8014e2a:	e763      	b.n	8014cf4 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014e2c:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8014e2e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014e30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014e34:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014e36:	6933      	ldr	r3, [r6, #16]
 8014e38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014e3c:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8014e3e:	d017      	beq.n	8014e70 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e40:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8014e44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014e48:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014e4c:	e7cd      	b.n	8014dea <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 8014e4e:	690b      	ldr	r3, [r1, #16]
 8014e50:	b963      	cbnz	r3, 8014e6c <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 8014e52:	f1be 0f01 	cmp.w	lr, #1
 8014e56:	d00e      	beq.n	8014e76 <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e58:	6833      	ldr	r3, [r6, #0]
}
 8014e5a:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014e60:	6033      	str	r3, [r6, #0]
}
 8014e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8014e66:	690b      	ldr	r3, [r1, #16]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d0f5      	beq.n	8014e58 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014e6c:	6173      	str	r3, [r6, #20]
 8014e6e:	e7f0      	b.n	8014e52 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8014e70:	690b      	ldr	r3, [r1, #16]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d1fa      	bne.n	8014e6c <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014e76:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014e7a:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014e7e:	6833      	ldr	r3, [r6, #0]
 8014e80:	bf0c      	ite	eq
 8014e82:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014e86:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014e8a:	6033      	str	r3, [r6, #0]
 8014e8c:	e7e4      	b.n	8014e58 <USB_EPStartXfer+0x1ec>
 8014e8e:	bf00      	nop
 8014e90:	fff80000 	.word	0xfff80000
 8014e94:	e007ffff 	.word	0xe007ffff
 8014e98:	1ff80000 	.word	0x1ff80000

08014e9c <USB_EP0StartXfer>:
{
 8014e9c:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8014e9e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014ea0:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d027      	beq.n	8014ef6 <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014ea6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8014eaa:	4c3c      	ldr	r4, [pc, #240]	; (8014f9c <USB_EP0StartXfer+0x100>)
 8014eac:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8014eb0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8014eb4:	402c      	ands	r4, r5
 8014eb6:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014eb8:	4c39      	ldr	r4, [pc, #228]	; (8014fa0 <USB_EP0StartXfer+0x104>)
 8014eba:	691d      	ldr	r5, [r3, #16]
 8014ebc:	402c      	ands	r4, r5
 8014ebe:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8014ec0:	694c      	ldr	r4, [r1, #20]
 8014ec2:	b9ac      	cbnz	r4, 8014ef0 <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 8014ec4:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014ec6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014ec8:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8014ecc:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014ece:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8014ed2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014ed4:	691d      	ldr	r5, [r3, #16]
 8014ed6:	ea44 0405 	orr.w	r4, r4, r5
 8014eda:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014edc:	d03e      	beq.n	8014f5c <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014ede:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8014ee2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014ee6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8014eea:	2000      	movs	r0, #0
 8014eec:	bcf0      	pop	{r4, r5, r6, r7}
 8014eee:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8014ef0:	688c      	ldr	r4, [r1, #8]
 8014ef2:	614c      	str	r4, [r1, #20]
 8014ef4:	e7e7      	b.n	8014ec6 <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014ef6:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8014efa:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8014f00:	2d00      	cmp	r5, #0
 8014f02:	d030      	beq.n	8014f66 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014f04:	691f      	ldr	r7, [r3, #16]
 8014f06:	4e25      	ldr	r6, [pc, #148]	; (8014f9c <USB_EP0StartXfer+0x100>)
 8014f08:	403e      	ands	r6, r7
 8014f0a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014f0c:	4e24      	ldr	r6, [pc, #144]	; (8014fa0 <USB_EP0StartXfer+0x104>)
 8014f0e:	691f      	ldr	r7, [r3, #16]
 8014f10:	403e      	ands	r6, r7
 8014f12:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8014f14:	688e      	ldr	r6, [r1, #8]
 8014f16:	42b5      	cmp	r5, r6
 8014f18:	d901      	bls.n	8014f1e <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 8014f1a:	4635      	mov	r5, r6
 8014f1c:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014f1e:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014f20:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8014f24:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014f26:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8014f2a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014f2c:	691e      	ldr	r6, [r3, #16]
 8014f2e:	ea45 0506 	orr.w	r5, r5, r6
 8014f32:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8014f34:	d027      	beq.n	8014f86 <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014f36:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8014f38:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014f3a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8014f3e:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8014f40:	2900      	cmp	r1, #0
 8014f42:	d0d2      	beq.n	8014eea <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014f44:	f004 020f 	and.w	r2, r4, #15
 8014f48:	2401      	movs	r4, #1
 8014f4a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8014f4e:	4094      	lsls	r4, r2
 8014f50:	431c      	orrs	r4, r3
 8014f52:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8014f56:	2000      	movs	r0, #0
 8014f58:	bcf0      	pop	{r4, r5, r6, r7}
 8014f5a:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8014f5c:	68ca      	ldr	r2, [r1, #12]
 8014f5e:	2a00      	cmp	r2, #0
 8014f60:	d0bd      	beq.n	8014ede <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014f62:	615a      	str	r2, [r3, #20]
 8014f64:	e7bb      	b.n	8014ede <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014f66:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8014f68:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014f6a:	4d0d      	ldr	r5, [pc, #52]	; (8014fa0 <USB_EP0StartXfer+0x104>)
 8014f6c:	ea05 0506 	and.w	r5, r5, r6
 8014f70:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014f72:	691d      	ldr	r5, [r3, #16]
 8014f74:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8014f78:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014f7a:	4d08      	ldr	r5, [pc, #32]	; (8014f9c <USB_EP0StartXfer+0x100>)
 8014f7c:	691e      	ldr	r6, [r3, #16]
 8014f7e:	ea05 0506 	and.w	r5, r5, r6
 8014f82:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8014f84:	d1d7      	bne.n	8014f36 <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8014f86:	690a      	ldr	r2, [r1, #16]
 8014f88:	b102      	cbz	r2, 8014f8c <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014f8a:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014f8c:	681a      	ldr	r2, [r3, #0]
}
 8014f8e:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014f90:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8014f94:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014f96:	601a      	str	r2, [r3, #0]
}
 8014f98:	4770      	bx	lr
 8014f9a:	bf00      	nop
 8014f9c:	fff80000 	.word	0xfff80000
 8014fa0:	e007ffff 	.word	0xe007ffff

08014fa4 <USB_WritePacket>:
{
 8014fa4:	b410      	push	{r4}
 8014fa6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8014faa:	b964      	cbnz	r4, 8014fc6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8014fac:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8014fae:	089b      	lsrs	r3, r3, #2
 8014fb0:	d009      	beq.n	8014fc6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014fb2:	3201      	adds	r2, #1
 8014fb4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014fb8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8014fbc:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8014fc0:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014fc2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8014fc4:	d1fa      	bne.n	8014fbc <USB_WritePacket+0x18>
}
 8014fc6:	2000      	movs	r0, #0
 8014fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fcc:	4770      	bx	lr
 8014fce:	bf00      	nop

08014fd0 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8014fd0:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8014fd4:	b570      	push	{r4, r5, r6, lr}
 8014fd6:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8014fd8:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8014fdc:	d01a      	beq.n	8015014 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014fde:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8014fe2:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014fe8:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8014fec:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014fee:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8014ff2:	d1f8      	bne.n	8014fe6 <USB_ReadPacket+0x16>
    pDest++;
 8014ff4:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8014ff8:	b15e      	cbz	r6, 8015012 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014ffa:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8014ffe:	4406      	add	r6, r0
 8015000:	2200      	movs	r2, #0
 8015002:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015004:	fa21 f302 	lsr.w	r3, r1, r2
 8015008:	3208      	adds	r2, #8
 801500a:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 801500e:	42b0      	cmp	r0, r6
 8015010:	d1f8      	bne.n	8015004 <USB_ReadPacket+0x34>
}
 8015012:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8015014:	4608      	mov	r0, r1
 8015016:	e7ef      	b.n	8014ff8 <USB_ReadPacket+0x28>

08015018 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8015018:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801501a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 801501c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801501e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8015022:	d00c      	beq.n	801503e <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015024:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8015028:	b10b      	cbz	r3, 801502e <USB_EPSetStall+0x16>
 801502a:	2a00      	cmp	r2, #0
 801502c:	da14      	bge.n	8015058 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801502e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8015032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015036:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801503a:	2000      	movs	r0, #0
 801503c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801503e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8015042:	2a00      	cmp	r2, #0
 8015044:	db00      	blt.n	8015048 <USB_EPSetStall+0x30>
 8015046:	b973      	cbnz	r3, 8015066 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015048:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801504c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015050:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8015054:	2000      	movs	r0, #0
 8015056:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015058:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 801505c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015060:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8015064:	e7e3      	b.n	801502e <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015066:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801506a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801506e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015072:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8015076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801507a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 801507e:	e7e9      	b.n	8015054 <USB_EPSetStall+0x3c>

08015080 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8015080:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8015082:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8015084:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015086:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 801508a:	d013      	beq.n	80150b4 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801508c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8015090:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015094:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015098:	78cb      	ldrb	r3, [r1, #3]
 801509a:	3b02      	subs	r3, #2
 801509c:	2b01      	cmp	r3, #1
 801509e:	d901      	bls.n	80150a4 <USB_EPClearStall+0x24>
}
 80150a0:	2000      	movs	r0, #0
 80150a2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80150a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80150a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80150ac:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80150b0:	2000      	movs	r0, #0
 80150b2:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80150b4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80150b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80150bc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80150c0:	78cb      	ldrb	r3, [r1, #3]
 80150c2:	3b02      	subs	r3, #2
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	d8eb      	bhi.n	80150a0 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80150c8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80150cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80150d0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80150d4:	2000      	movs	r0, #0
 80150d6:	4770      	bx	lr

080150d8 <USB_SetDevAddress>:
{
 80150d8:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80150da:	0109      	lsls	r1, r1, #4
}
 80150dc:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80150de:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80150e2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80150e6:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 80150ea:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80150ee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80150f2:	4311      	orrs	r1, r2
 80150f4:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 80150f8:	4770      	bx	lr
 80150fa:	bf00      	nop

080150fc <USB_DevConnect>:
{
 80150fc:	4603      	mov	r3, r0
}
 80150fe:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015100:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015104:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015108:	f022 0203 	bic.w	r2, r2, #3
 801510c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015110:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8015114:	f023 0302 	bic.w	r3, r3, #2
 8015118:	604b      	str	r3, [r1, #4]
}
 801511a:	4770      	bx	lr

0801511c <USB_DevDisconnect>:
{
 801511c:	4603      	mov	r3, r0
}
 801511e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015120:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015124:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015128:	f022 0203 	bic.w	r2, r2, #3
 801512c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015130:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8015134:	f043 0302 	orr.w	r3, r3, #2
 8015138:	604b      	str	r3, [r1, #4]
}
 801513a:	4770      	bx	lr

0801513c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 801513c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 801513e:	6980      	ldr	r0, [r0, #24]
}
 8015140:	4010      	ands	r0, r2
 8015142:	4770      	bx	lr

08015144 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8015144:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015148:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 801514c:	4018      	ands	r0, r3
}
 801514e:	0c00      	lsrs	r0, r0, #16
 8015150:	4770      	bx	lr
 8015152:	bf00      	nop

08015154 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8015154:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015158:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 801515c:	4018      	ands	r0, r3
}
 801515e:	b280      	uxth	r0, r0
 8015160:	4770      	bx	lr
 8015162:	bf00      	nop

08015164 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015164:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015168:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801516c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015170:	6940      	ldr	r0, [r0, #20]
}
 8015172:	4010      	ands	r0, r2
 8015174:	4770      	bx	lr
 8015176:	bf00      	nop

08015178 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8015178:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 801517c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015180:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015184:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015188:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801518c:	40cb      	lsrs	r3, r1
 801518e:	01db      	lsls	r3, r3, #7
 8015190:	b2db      	uxtb	r3, r3
 8015192:	4313      	orrs	r3, r2
}
 8015194:	4018      	ands	r0, r3
 8015196:	4770      	bx	lr

08015198 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8015198:	6940      	ldr	r0, [r0, #20]
}
 801519a:	f000 0001 	and.w	r0, r0, #1
 801519e:	4770      	bx	lr

080151a0 <USB_ActivateSetup>:
{
 80151a0:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80151a2:	4a09      	ldr	r2, [pc, #36]	; (80151c8 <USB_ActivateSetup+0x28>)
}
 80151a4:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80151a6:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 80151aa:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80151ac:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80151b0:	4022      	ands	r2, r4
}
 80151b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80151b6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80151ba:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80151be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151c2:	604b      	str	r3, [r1, #4]
}
 80151c4:	4770      	bx	lr
 80151c6:	bf00      	nop
 80151c8:	fffff800 	.word	0xfffff800

080151cc <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80151cc:	4b14      	ldr	r3, [pc, #80]	; (8015220 <USB_EP0_OutStart+0x54>)
{
 80151ce:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80151d0:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80151d2:	429c      	cmp	r4, r3
 80151d4:	d81a      	bhi.n	801520c <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80151d6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80151da:	2300      	movs	r3, #0
  if (dma == 1U)
 80151dc:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80151de:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80151e0:	6903      	ldr	r3, [r0, #16]
 80151e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80151e6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80151e8:	6903      	ldr	r3, [r0, #16]
 80151ea:	f043 0318 	orr.w	r3, r3, #24
 80151ee:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80151f0:	6903      	ldr	r3, [r0, #16]
 80151f2:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80151f6:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 80151f8:	d104      	bne.n	8015204 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80151fa:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80151fc:	6803      	ldr	r3, [r0, #0]
 80151fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8015202:	6003      	str	r3, [r0, #0]
}
 8015204:	2000      	movs	r0, #0
 8015206:	f85d 4b04 	ldr.w	r4, [sp], #4
 801520a:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801520c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8015210:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8015214:	2b00      	cmp	r3, #0
 8015216:	dae0      	bge.n	80151da <USB_EP0_OutStart+0xe>
}
 8015218:	2000      	movs	r0, #0
 801521a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801521e:	4770      	bx	lr
 8015220:	4f54300a 	.word	0x4f54300a

08015224 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8015224:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8015226:	4903      	ldr	r1, [pc, #12]	; (8015234 <MX_FATFS_Init+0x10>)
 8015228:	4803      	ldr	r0, [pc, #12]	; (8015238 <MX_FATFS_Init+0x14>)
 801522a:	f001 f96f 	bl	801650c <FATFS_LinkDriver>
 801522e:	4b03      	ldr	r3, [pc, #12]	; (801523c <MX_FATFS_Init+0x18>)
 8015230:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8015232:	bd08      	pop	{r3, pc}
 8015234:	20003590 	.word	0x20003590
 8015238:	20000320 	.word	0x20000320
 801523c:	20003594 	.word	0x20003594

08015240 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8015240:	4b02      	ldr	r3, [pc, #8]	; (801524c <USER_initialize+0xc>)
 8015242:	2201      	movs	r2, #1
 8015244:	701a      	strb	r2, [r3, #0]
    return Stat;
 8015246:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8015248:	4770      	bx	lr
 801524a:	bf00      	nop
 801524c:	2000031c 	.word	0x2000031c

08015250 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8015250:	2000      	movs	r0, #0
 8015252:	4770      	bx	lr

08015254 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8015254:	2001      	movs	r0, #1
 8015256:	4770      	bx	lr

08015258 <USER_write>:
 8015258:	2000      	movs	r0, #0
 801525a:	4770      	bx	lr

0801525c <USER_status>:
 801525c:	4b02      	ldr	r3, [pc, #8]	; (8015268 <USER_status+0xc>)
 801525e:	2201      	movs	r2, #1
 8015260:	701a      	strb	r2, [r3, #0]
 8015262:	7818      	ldrb	r0, [r3, #0]
 8015264:	4770      	bx	lr
 8015266:	bf00      	nop
 8015268:	2000031c 	.word	0x2000031c

0801526c <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801526c:	2100      	movs	r1, #0
{
 801526e:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 8015270:	4608      	mov	r0, r1
{
 8015272:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 8015274:	f003 ff4e 	bl	8019114 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8015278:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 801527a:	4b1f      	ldr	r3, [pc, #124]	; (80152f8 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 801527c:	491f      	ldr	r1, [pc, #124]	; (80152fc <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 801527e:	4a20      	ldr	r2, [pc, #128]	; (8015300 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8015280:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 8015282:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 8015284:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 8015286:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8015288:	481e      	ldr	r0, [pc, #120]	; (8015304 <MX_LWIP_Init+0x98>)
 801528a:	4d1f      	ldr	r5, [pc, #124]	; (8015308 <MX_LWIP_Init+0x9c>)
 801528c:	9002      	str	r0, [sp, #8]
 801528e:	481f      	ldr	r0, [pc, #124]	; (801530c <MX_LWIP_Init+0xa0>)
 8015290:	9001      	str	r0, [sp, #4]
 8015292:	4628      	mov	r0, r5
 8015294:	f006 fcec 	bl	801bc70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8015298:	4628      	mov	r0, r5
 801529a:	f006 fd97 	bl	801bdcc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801529e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80152a2:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 80152a4:	075b      	lsls	r3, r3, #29
 80152a6:	d524      	bpl.n	80152f2 <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 80152a8:	f006 fd96 	bl	801bdd8 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80152ac:	4918      	ldr	r1, [pc, #96]	; (8015310 <MX_LWIP_Init+0xa4>)
 80152ae:	4816      	ldr	r0, [pc, #88]	; (8015308 <MX_LWIP_Init+0x9c>)
 80152b0:	f006 fe1c 	bl	801beec <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80152b4:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80152b6:	2101      	movs	r1, #1
 80152b8:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 80152ba:	4e16      	ldr	r6, [pc, #88]	; (8015314 <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80152bc:	4c16      	ldr	r4, [pc, #88]	; (8015318 <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 80152be:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80152c2:	f001 fa0d 	bl	80166e0 <osSemaphoreCreate>
 80152c6:	4b15      	ldr	r3, [pc, #84]	; (801531c <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 80152c8:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80152ca:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80152ce:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 80152d0:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80152d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80152dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80152e0:	4631      	mov	r1, r6
 80152e2:	a807      	add	r0, sp, #28
 80152e4:	f001 f944 	bl	8016570 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80152e8:	4807      	ldr	r0, [pc, #28]	; (8015308 <MX_LWIP_Init+0x9c>)
 80152ea:	f00d fd89 	bl	8022e00 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80152ee:	b00e      	add	sp, #56	; 0x38
 80152f0:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 80152f2:	f006 fd93 	bl	801be1c <netif_set_down>
 80152f6:	e7d9      	b.n	80152ac <MX_LWIP_Init+0x40>
 80152f8:	200035d8 	.word	0x200035d8
 80152fc:	200035dc 	.word	0x200035dc
 8015300:	200035e8 	.word	0x200035e8
 8015304:	0801908d 	.word	0x0801908d
 8015308:	2000359c 	.word	0x2000359c
 801530c:	0801561d 	.word	0x0801561d
 8015310:	080157fd 	.word	0x080157fd
 8015314:	200035e0 	.word	0x200035e0
 8015318:	0802a930 	.word	0x0802a930
 801531c:	20003598 	.word	0x20003598

08015320 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8015320:	4b2c      	ldr	r3, [pc, #176]	; (80153d4 <low_level_output+0xb4>)
{
 8015322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8015326:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8015328:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801532a:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801532c:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 801532e:	2900      	cmp	r1, #0
 8015330:	d04d      	beq.n	80153ce <low_level_output+0xae>
  bufferoffset = 0;
 8015332:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015334:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 8015338:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801533a:	6822      	ldr	r2, [r4, #0]
 801533c:	2a00      	cmp	r2, #0
 801533e:	db1b      	blt.n	8015378 <low_level_output+0x58>
      byteslefttocopy = q->len;
 8015340:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015344:	1995      	adds	r5, r2, r6
 8015346:	454d      	cmp	r5, r9
 8015348:	d93c      	bls.n	80153c4 <low_level_output+0xa4>
      payloadoffset = 0;
 801534a:	2700      	movs	r7, #0
 801534c:	e002      	b.n	8015354 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801534e:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8015350:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015352:	d921      	bls.n	8015398 <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8015354:	eba9 0a06 	sub.w	sl, r9, r6
 8015358:	f8db 1004 	ldr.w	r1, [fp, #4]
 801535c:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 801535e:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8015360:	4439      	add	r1, r7
 8015362:	4652      	mov	r2, sl
 8015364:	f010 f9f0 	bl	8025748 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8015368:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801536a:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801536e:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8015370:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8015372:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8015374:	42b3      	cmp	r3, r6
 8015376:	daea      	bge.n	801534e <low_level_output+0x2e>
        errval = ERR_USE;
 8015378:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 801537c:	4b15      	ldr	r3, [pc, #84]	; (80153d4 <low_level_output+0xb4>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015384:	695a      	ldr	r2, [r3, #20]
 8015386:	0692      	lsls	r2, r2, #26
 8015388:	d503      	bpl.n	8015392 <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801538a:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 801538c:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801538e:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 8015390:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 8015392:	b003      	add	sp, #12
 8015394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015398:	4618      	mov	r0, r3
 801539a:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801539c:	f8db 1004 	ldr.w	r1, [fp, #4]
 80153a0:	462a      	mov	r2, r5
 80153a2:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80153a4:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80153a6:	4439      	add	r1, r7
 80153a8:	f010 f9ce 	bl	8025748 <memcpy>
  for(q = p; q != NULL; q = q->next)
 80153ac:	f8db b000 	ldr.w	fp, [fp]
 80153b0:	9b01      	ldr	r3, [sp, #4]
 80153b2:	f1bb 0f00 	cmp.w	fp, #0
 80153b6:	d1c0      	bne.n	801533a <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 80153b8:	4641      	mov	r1, r8
 80153ba:	4806      	ldr	r0, [pc, #24]	; (80153d4 <low_level_output+0xb4>)
 80153bc:	f7f6 f8d0 	bl	800b560 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 80153c0:	2000      	movs	r0, #0
 80153c2:	e7db      	b.n	801537c <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80153c4:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 80153c6:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80153c8:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 80153ca:	4615      	mov	r5, r2
 80153cc:	e7e6      	b.n	801539c <low_level_output+0x7c>
  uint32_t framelength = 0;
 80153ce:	4688      	mov	r8, r1
 80153d0:	e7f2      	b.n	80153b8 <low_level_output+0x98>
 80153d2:	bf00      	nop
 80153d4:	2000668c 	.word	0x2000668c

080153d8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80153d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153dc:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80154f0 <ethernetif_input+0x118>
 80153e0:	b083      	sub	sp, #12
 80153e2:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80153e4:	4b40      	ldr	r3, [pc, #256]	; (80154e8 <ethernetif_input+0x110>)
 80153e6:	f04f 31ff 	mov.w	r1, #4294967295
 80153ea:	6818      	ldr	r0, [r3, #0]
 80153ec:	f001 f99e 	bl	801672c <osSemaphoreWait>
 80153f0:	2800      	cmp	r0, #0
 80153f2:	d1f7      	bne.n	80153e4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80153f4:	483d      	ldr	r0, [pc, #244]	; (80154ec <ethernetif_input+0x114>)
 80153f6:	f00f fc97 	bl	8024d28 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80153fa:	483d      	ldr	r0, [pc, #244]	; (80154f0 <ethernetif_input+0x118>)
 80153fc:	f7f6 f934 	bl	800b668 <HAL_ETH_GetReceivedFrame_IT>
 8015400:	4604      	mov	r4, r0
 8015402:	2800      	cmp	r0, #0
 8015404:	d168      	bne.n	80154d8 <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 8015406:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 801540a:	bb51      	cbnz	r1, 8015462 <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 801540c:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015410:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8015414:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015418:	b140      	cbz	r0, 801542c <ethernetif_input+0x54>
 801541a:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801541c:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801541e:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8015420:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015424:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8015426:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8015428:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801542a:	d1f7      	bne.n	801541c <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 801542c:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 8015430:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8015432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 8015436:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 801543a:	695a      	ldr	r2, [r3, #20]
 801543c:	0612      	lsls	r2, r2, #24
 801543e:	d503      	bpl.n	8015448 <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8015440:	2280      	movs	r2, #128	; 0x80
 8015442:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 8015444:	2200      	movs	r2, #0
 8015446:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 8015448:	f1ba 0f00 	cmp.w	sl, #0
 801544c:	d044      	beq.n	80154d8 <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 801544e:	9901      	ldr	r1, [sp, #4]
 8015450:	4650      	mov	r0, sl
 8015452:	690b      	ldr	r3, [r1, #16]
 8015454:	4798      	blx	r3
 8015456:	2800      	cmp	r0, #0
 8015458:	d142      	bne.n	80154e0 <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 801545a:	4824      	ldr	r0, [pc, #144]	; (80154ec <ethernetif_input+0x114>)
 801545c:	f00f fc6a 	bl	8024d34 <sys_mutex_unlock>
      } while(p!=NULL);
 8015460:	e7c8      	b.n	80153f4 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8015462:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8015466:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801546a:	f006 fe97 	bl	801c19c <pbuf_alloc>
  if (p != NULL)
 801546e:	4682      	mov	sl, r0
 8015470:	2800      	cmp	r0, #0
 8015472:	d0cb      	beq.n	801540c <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8015474:	4683      	mov	fp, r0
    bufferoffset = 0;
 8015476:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015478:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801547c:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 8015480:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015484:	1854      	adds	r4, r2, r1
 8015486:	4544      	cmp	r4, r8
 8015488:	d923      	bls.n	80154d2 <ethernetif_input+0xfa>
      payloadoffset = 0;
 801548a:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801548c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8015490:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8015494:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8015498:	4439      	add	r1, r7
 801549a:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801549c:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801549e:	f010 f953 	bl	8025748 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80154a2:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80154a4:	4544      	cmp	r4, r8
        bufferoffset = 0;
 80154a6:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80154aa:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80154ac:	d8ee      	bhi.n	801548c <ethernetif_input+0xb4>
 80154ae:	4639      	mov	r1, r7
 80154b0:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80154b2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80154b6:	4428      	add	r0, r5
 80154b8:	f010 f946 	bl	8025748 <memcpy>
    for(q = p; q != NULL; q = q->next)
 80154bc:	f8db b000 	ldr.w	fp, [fp]
 80154c0:	f1bb 0f00 	cmp.w	fp, #0
 80154c4:	d0a4      	beq.n	8015410 <ethernetif_input+0x38>
 80154c6:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 80154c8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80154cc:	1854      	adds	r4, r2, r1
 80154ce:	4544      	cmp	r4, r8
 80154d0:	d8db      	bhi.n	801548a <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80154d2:	4439      	add	r1, r7
      payloadoffset = 0;
 80154d4:	2500      	movs	r5, #0
 80154d6:	e7ec      	b.n	80154b2 <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 80154d8:	4804      	ldr	r0, [pc, #16]	; (80154ec <ethernetif_input+0x114>)
 80154da:	f00f fc2b 	bl	8024d34 <sys_mutex_unlock>
      } while(p!=NULL);
 80154de:	e781      	b.n	80153e4 <ethernetif_input+0xc>
            pbuf_free(p);
 80154e0:	4650      	mov	r0, sl
 80154e2:	f007 f82d 	bl	801c540 <pbuf_free>
 80154e6:	e7b8      	b.n	801545a <ethernetif_input+0x82>
 80154e8:	200066d4 	.word	0x200066d4
 80154ec:	2001e994 	.word	0x2001e994
 80154f0:	2000668c 	.word	0x2000668c

080154f4 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 80154f4:	4b41      	ldr	r3, [pc, #260]	; (80155fc <HAL_ETH_MspInit+0x108>)
 80154f6:	6802      	ldr	r2, [r0, #0]
{
 80154f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 80154fa:	429a      	cmp	r2, r3
{
 80154fc:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80154fe:	f04f 0400 	mov.w	r4, #0
 8015502:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8015506:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 801550a:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 801550c:	d001      	beq.n	8015512 <HAL_ETH_MspInit+0x1e>
}
 801550e:	b00d      	add	sp, #52	; 0x34
 8015510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8015512:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015516:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8015518:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801551a:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 801551c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801551e:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015520:	4837      	ldr	r0, [pc, #220]	; (8015600 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8015522:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8015526:	631a      	str	r2, [r3, #48]	; 0x30
 8015528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801552a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801552e:	9200      	str	r2, [sp, #0]
 8015530:	9a00      	ldr	r2, [sp, #0]
 8015532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015534:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8015538:	631a      	str	r2, [r3, #48]	; 0x30
 801553a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801553c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8015540:	9201      	str	r2, [sp, #4]
 8015542:	9a01      	ldr	r2, [sp, #4]
 8015544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015546:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801554a:	631a      	str	r2, [r3, #48]	; 0x30
 801554c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801554e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8015552:	9202      	str	r2, [sp, #8]
 8015554:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015558:	f042 0204 	orr.w	r2, r2, #4
 801555c:	631a      	str	r2, [r3, #48]	; 0x30
 801555e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015560:	f002 0204 	and.w	r2, r2, #4
 8015564:	9203      	str	r2, [sp, #12]
 8015566:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801556a:	f042 0201 	orr.w	r2, r2, #1
 801556e:	631a      	str	r2, [r3, #48]	; 0x30
 8015570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015572:	f002 0201 	and.w	r2, r2, #1
 8015576:	9204      	str	r2, [sp, #16]
 8015578:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801557a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801557c:	433a      	orrs	r2, r7
 801557e:	631a      	str	r2, [r3, #48]	; 0x30
 8015580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015582:	403a      	ands	r2, r7
 8015584:	9205      	str	r2, [sp, #20]
 8015586:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801558a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801558e:	631a      	str	r2, [r3, #48]	; 0x30
 8015590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015592:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015594:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015598:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801559a:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801559e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80155a0:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80155a2:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80155a4:	f7f7 f984 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80155a8:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80155aa:	a907      	add	r1, sp, #28
 80155ac:	4815      	ldr	r0, [pc, #84]	; (8015604 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80155ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155b0:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80155b4:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80155b8:	f7f7 f97a 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80155bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80155c0:	a907      	add	r1, sp, #28
 80155c2:	4811      	ldr	r0, [pc, #68]	; (8015608 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80155c4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155c6:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80155ca:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80155ce:	f7f7 f96f 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80155d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80155d6:	a907      	add	r1, sp, #28
 80155d8:	480c      	ldr	r0, [pc, #48]	; (801560c <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80155da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80155dc:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80155de:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80155e0:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80155e4:	f7f7 f964 	bl	800c8b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 80155e8:	4622      	mov	r2, r4
 80155ea:	2106      	movs	r1, #6
 80155ec:	203d      	movs	r0, #61	; 0x3d
 80155ee:	f7f4 fae1 	bl	8009bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80155f2:	203d      	movs	r0, #61	; 0x3d
 80155f4:	f7f4 fb28 	bl	8009c48 <HAL_NVIC_EnableIRQ>
}
 80155f8:	b00d      	add	sp, #52	; 0x34
 80155fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155fc:	40028000 	.word	0x40028000
 8015600:	40020800 	.word	0x40020800
 8015604:	40020000 	.word	0x40020000
 8015608:	40020400 	.word	0x40020400
 801560c:	40021800 	.word	0x40021800

08015610 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8015610:	4b01      	ldr	r3, [pc, #4]	; (8015618 <HAL_ETH_RxCpltCallback+0x8>)
 8015612:	6818      	ldr	r0, [r3, #0]
 8015614:	f001 b8b6 	b.w	8016784 <osSemaphoreRelease>
 8015618:	200066d4 	.word	0x200066d4

0801561c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801561c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801561e:	4604      	mov	r4, r0
{
 8015620:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8015622:	2800      	cmp	r0, #0
 8015624:	f000 809e 	beq.w	8015764 <ethernetif_init+0x148>
  heth.Instance = ETH;
 8015628:	4d52      	ldr	r5, [pc, #328]	; (8015774 <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 801562a:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801562c:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8015630:	4b51      	ldr	r3, [pc, #324]	; (8015778 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 8015632:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 8015634:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 8015636:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 801563a:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801563e:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 8015640:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 8015642:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 8015644:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8015648:	494c      	ldr	r1, [pc, #304]	; (801577c <ethernetif_init+0x160>)
  heth.Instance = ETH;
 801564a:	4a4d      	ldr	r2, [pc, #308]	; (8015780 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 801564c:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 801564e:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8015650:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8015652:	494c      	ldr	r1, [pc, #304]	; (8015784 <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 8015654:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8015658:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 801565a:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801565c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 8015660:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8015664:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8015668:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801566c:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 801566e:	4042      	eors	r2, r0
 8015670:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8015674:	404a      	eors	r2, r1
 8015676:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 801567a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 801567e:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8015682:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8015686:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801568a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801568e:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8015690:	404b      	eors	r3, r1
 8015692:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8015696:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801569a:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 801569e:	ab01      	add	r3, sp, #4
 80156a0:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80156a2:	f7f6 f905 	bl	800b8b0 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80156a6:	b928      	cbnz	r0, 80156b4 <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80156a8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80156ac:	f043 0304 	orr.w	r3, r3, #4
 80156b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80156b4:	2304      	movs	r3, #4
 80156b6:	4a34      	ldr	r2, [pc, #208]	; (8015788 <ethernetif_init+0x16c>)
 80156b8:	4934      	ldr	r1, [pc, #208]	; (801578c <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 80156ba:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80156bc:	482d      	ldr	r0, [pc, #180]	; (8015774 <ethernetif_init+0x158>)
 80156be:	f7f5 fecb 	bl	800b458 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80156c2:	2304      	movs	r3, #4
 80156c4:	4a32      	ldr	r2, [pc, #200]	; (8015790 <ethernetif_init+0x174>)
 80156c6:	4933      	ldr	r1, [pc, #204]	; (8015794 <ethernetif_init+0x178>)
 80156c8:	482a      	ldr	r0, [pc, #168]	; (8015774 <ethernetif_init+0x158>)
 80156ca:	f7f5 ff0b 	bl	800b4e4 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80156ce:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80156d0:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80156d2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 80156d6:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80156da:	4e2f      	ldr	r6, [pc, #188]	; (8015798 <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80156dc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80156e0:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80156e4:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80156e6:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80156e8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80156ec:	7858      	ldrb	r0, [r3, #1]
 80156ee:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80156f2:	7898      	ldrb	r0, [r3, #2]
 80156f4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80156f8:	78d8      	ldrb	r0, [r3, #3]
 80156fa:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80156fe:	7918      	ldrb	r0, [r3, #4]
 8015700:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8015704:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8015706:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 8015708:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801570a:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801570c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015710:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 8015714:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8015718:	f000 ffe2 	bl	80166e0 <osSemaphoreCreate>
 801571c:	4b1f      	ldr	r3, [pc, #124]	; (801579c <ethernetif_init+0x180>)
 801571e:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8015720:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015724:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015728:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 801572c:	4621      	mov	r1, r4
 801572e:	a805      	add	r0, sp, #20
 8015730:	f000 ff1e 	bl	8016570 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8015734:	480f      	ldr	r0, [pc, #60]	; (8015774 <ethernetif_init+0x158>)
 8015736:	f7f6 fa11 	bl	800bb5c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801573a:	466a      	mov	r2, sp
 801573c:	211d      	movs	r1, #29
 801573e:	480d      	ldr	r0, [pc, #52]	; (8015774 <ethernetif_init+0x158>)
 8015740:	f7f6 f824 	bl	800b78c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8015744:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8015746:	211d      	movs	r1, #29
 8015748:	480a      	ldr	r0, [pc, #40]	; (8015774 <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 801574a:	f042 020b 	orr.w	r2, r2, #11
 801574e:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8015750:	f7f6 f866 	bl	800b820 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8015754:	466a      	mov	r2, sp
 8015756:	211d      	movs	r1, #29
 8015758:	4806      	ldr	r0, [pc, #24]	; (8015774 <ethernetif_init+0x158>)
 801575a:	f7f6 f817 	bl	800b78c <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 801575e:	4638      	mov	r0, r7
 8015760:	b00d      	add	sp, #52	; 0x34
 8015762:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8015764:	4b0e      	ldr	r3, [pc, #56]	; (80157a0 <ethernetif_init+0x184>)
 8015766:	f240 223a 	movw	r2, #570	; 0x23a
 801576a:	490e      	ldr	r1, [pc, #56]	; (80157a4 <ethernetif_init+0x188>)
 801576c:	480e      	ldr	r0, [pc, #56]	; (80157a8 <ethernetif_init+0x18c>)
 801576e:	f010 ffb1 	bl	80266d4 <iprintf>
 8015772:	e759      	b.n	8015628 <ethernetif_init+0xc>
 8015774:	2000668c 	.word	0x2000668c
 8015778:	1ff0f000 	.word	0x1ff0f000
 801577c:	08023981 	.word	0x08023981
 8015780:	40028000 	.word	0x40028000
 8015784:	08015321 	.word	0x08015321
 8015788:	20004ebc 	.word	0x20004ebc
 801578c:	2000366c 	.word	0x2000366c
 8015790:	200036ec 	.word	0x200036ec
 8015794:	200035ec 	.word	0x200035ec
 8015798:	0802a94c 	.word	0x0802a94c
 801579c:	200066d4 	.word	0x200066d4
 80157a0:	0802e62c 	.word	0x0802e62c
 80157a4:	0802e648 	.word	0x0802e648
 80157a8:	0802b3cc 	.word	0x0802b3cc

080157ac <sys_now>:
 80157ac:	f7f3 bdaa 	b.w	8009304 <HAL_GetTick>

080157b0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80157b0:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 80157b2:	2300      	movs	r3, #0
{
 80157b4:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80157b6:	4d0f      	ldr	r5, [pc, #60]	; (80157f4 <ethernetif_set_link+0x44>)
{
 80157b8:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 80157ba:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 80157bc:	e003      	b.n	80157c6 <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80157be:	b1b3      	cbz	r3, 80157ee <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80157c0:	20c8      	movs	r0, #200	; 0xc8
 80157c2:	f000 ff07 	bl	80165d4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80157c6:	aa01      	add	r2, sp, #4
 80157c8:	2101      	movs	r1, #1
 80157ca:	4628      	mov	r0, r5
 80157cc:	f7f5 ffde 	bl	800b78c <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80157d0:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 80157d2:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80157d4:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 80157d8:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80157dc:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 80157de:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80157e0:	d4ed      	bmi.n	80157be <ethernetif_set_link+0xe>
 80157e2:	b113      	cbz	r3, 80157ea <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 80157e4:	f006 fb42 	bl	801be6c <netif_set_link_up>
 80157e8:	e7ea      	b.n	80157c0 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80157ea:	0753      	lsls	r3, r2, #29
 80157ec:	d5e8      	bpl.n	80157c0 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 80157ee:	f006 fb63 	bl	801beb8 <netif_set_link_down>
 80157f2:	e7e5      	b.n	80157c0 <ethernetif_set_link+0x10>
 80157f4:	2000668c 	.word	0x2000668c

080157f8 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80157f8:	4770      	bx	lr
 80157fa:	bf00      	nop

080157fc <ethernetif_update_config>:
{
 80157fc:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 80157fe:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8015802:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 8015804:	2100      	movs	r1, #0
{
 8015806:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8015808:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 801580a:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 801580c:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 801580e:	d538      	bpl.n	8015882 <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8015810:	4c32      	ldr	r4, [pc, #200]	; (80158dc <ethernetif_update_config+0xe0>)
 8015812:	6863      	ldr	r3, [r4, #4]
 8015814:	b9e3      	cbnz	r3, 8015850 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8015816:	68a3      	ldr	r3, [r4, #8]
 8015818:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 801581c:	d140      	bne.n	80158a0 <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 801581e:	68e2      	ldr	r2, [r4, #12]
 8015820:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8015824:	d135      	bne.n	8015892 <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8015826:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8015828:	08d2      	lsrs	r2, r2, #3
 801582a:	2100      	movs	r1, #0
 801582c:	482b      	ldr	r0, [pc, #172]	; (80158dc <ethernetif_update_config+0xe0>)
 801582e:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8015832:	b292      	uxth	r2, r2
 8015834:	f7f5 fff4 	bl	800b820 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8015838:	2100      	movs	r1, #0
 801583a:	4828      	ldr	r0, [pc, #160]	; (80158dc <ethernetif_update_config+0xe0>)
 801583c:	f7f6 fa28 	bl	800bc90 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8015840:	4826      	ldr	r0, [pc, #152]	; (80158dc <ethernetif_update_config+0xe0>)
 8015842:	f7f6 f98b 	bl	800bb5c <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8015846:	4628      	mov	r0, r5
 8015848:	f7ff ffd6 	bl	80157f8 <ethernetif_notify_conn_changed>
}
 801584c:	b003      	add	sp, #12
 801584e:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8015850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015854:	4620      	mov	r0, r4
 8015856:	f7f5 ffe3 	bl	800b820 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 801585a:	f7f3 fd53 	bl	8009304 <HAL_GetTick>
 801585e:	9000      	str	r0, [sp, #0]
 8015860:	e002      	b.n	8015868 <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8015862:	9b01      	ldr	r3, [sp, #4]
 8015864:	069a      	lsls	r2, r3, #26
 8015866:	d425      	bmi.n	80158b4 <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8015868:	aa01      	add	r2, sp, #4
 801586a:	2101      	movs	r1, #1
 801586c:	4620      	mov	r0, r4
 801586e:	f7f5 ff8d 	bl	800b78c <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8015872:	f7f3 fd47 	bl	8009304 <HAL_GetTick>
 8015876:	9b00      	ldr	r3, [sp, #0]
 8015878:	1ac3      	subs	r3, r0, r3
 801587a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801587e:	d9f0      	bls.n	8015862 <ethernetif_update_config+0x66>
 8015880:	e7c9      	b.n	8015816 <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 8015882:	4816      	ldr	r0, [pc, #88]	; (80158dc <ethernetif_update_config+0xe0>)
 8015884:	f7f6 f9b6 	bl	800bbf4 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 8015888:	4628      	mov	r0, r5
 801588a:	f7ff ffb5 	bl	80157f8 <ethernetif_notify_conn_changed>
}
 801588e:	b003      	add	sp, #12
 8015890:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8015892:	f240 21e3 	movw	r1, #739	; 0x2e3
 8015896:	4812      	ldr	r0, [pc, #72]	; (80158e0 <ethernetif_update_config+0xe4>)
 8015898:	f7ef ffe6 	bl	8005868 <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 801589c:	68e2      	ldr	r2, [r4, #12]
 801589e:	e7c2      	b.n	8015826 <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 80158a0:	f240 21e2 	movw	r1, #738	; 0x2e2
 80158a4:	480e      	ldr	r0, [pc, #56]	; (80158e0 <ethernetif_update_config+0xe4>)
 80158a6:	f7ef ffdf 	bl	8005868 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80158aa:	68e2      	ldr	r2, [r4, #12]
 80158ac:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 80158b0:	d0b9      	beq.n	8015826 <ethernetif_update_config+0x2a>
 80158b2:	e7ee      	b.n	8015892 <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80158b4:	aa01      	add	r2, sp, #4
 80158b6:	2110      	movs	r1, #16
 80158b8:	4808      	ldr	r0, [pc, #32]	; (80158dc <ethernetif_update_config+0xe0>)
 80158ba:	f7f5 ff67 	bl	800b78c <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80158be:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80158c0:	f013 0204 	ands.w	r2, r3, #4
 80158c4:	bf18      	it	ne
 80158c6:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 80158ca:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 80158cc:	bf4c      	ite	mi
 80158ce:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 80158d0:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 80158d4:	60e2      	str	r2, [r4, #12]
 80158d6:	60a3      	str	r3, [r4, #8]
 80158d8:	e7ae      	b.n	8015838 <ethernetif_update_config+0x3c>
 80158da:	bf00      	nop
 80158dc:	2000668c 	.word	0x2000668c
 80158e0:	0802e62c 	.word	0x0802e62c

080158e4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80158e4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80158e8:	b183      	cbz	r3, 801590c <USBD_CDC_EP0_RxReady+0x28>
{
 80158ea:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80158ec:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80158f0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80158f4:	28ff      	cmp	r0, #255	; 0xff
 80158f6:	d007      	beq.n	8015908 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80158f8:	689b      	ldr	r3, [r3, #8]
 80158fa:	4621      	mov	r1, r4
 80158fc:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8015900:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8015902:	23ff      	movs	r3, #255	; 0xff
 8015904:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8015908:	2000      	movs	r0, #0
 801590a:	bd10      	pop	{r4, pc}
 801590c:	2000      	movs	r0, #0
 801590e:	4770      	bx	lr

08015910 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015910:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8015912:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8015914:	4801      	ldr	r0, [pc, #4]	; (801591c <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8015916:	801a      	strh	r2, [r3, #0]
}
 8015918:	4770      	bx	lr
 801591a:	bf00      	nop
 801591c:	2000036c 	.word	0x2000036c

08015920 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015920:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8015922:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 8015924:	4801      	ldr	r0, [pc, #4]	; (801592c <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8015926:	801a      	strh	r2, [r3, #0]
}
 8015928:	4770      	bx	lr
 801592a:	bf00      	nop
 801592c:	200003b0 	.word	0x200003b0

08015930 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015930:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015932:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8015934:	4801      	ldr	r0, [pc, #4]	; (801593c <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015936:	801a      	strh	r2, [r3, #0]
}
 8015938:	4770      	bx	lr
 801593a:	bf00      	nop
 801593c:	20000400 	.word	0x20000400

08015940 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015940:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015942:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8015944:	4801      	ldr	r0, [pc, #4]	; (801594c <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015946:	801a      	strh	r2, [r3, #0]
}
 8015948:	4770      	bx	lr
 801594a:	bf00      	nop
 801594c:	200003f4 	.word	0x200003f4

08015950 <USBD_CDC_DataOut>:
{
 8015950:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015952:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8015956:	b17d      	cbz	r5, 8015978 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015958:	4604      	mov	r4, r0
 801595a:	f00f fc61 	bl	8025220 <USBD_LL_GetRxDataSize>
 801595e:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015960:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8015964:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8015968:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 801596c:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801596e:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015972:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8015974:	2000      	movs	r0, #0
}
 8015976:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8015978:	2003      	movs	r0, #3
}
 801597a:	bd38      	pop	{r3, r4, r5, pc}

0801597c <USBD_CDC_DataIn>:
{
 801597c:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 801597e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8015982:	b34d      	cbz	r5, 80159d8 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8015984:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8015988:	4686      	mov	lr, r0
 801598a:	460a      	mov	r2, r1
 801598c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8015990:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8015994:	b15b      	cbz	r3, 80159ae <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8015996:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 801599a:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 801599e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80159a2:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80159a4:	fbb3 f6f4 	udiv	r6, r3, r4
 80159a8:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80159ac:	b164      	cbz	r4, 80159c8 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80159ae:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 80159b2:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80159b4:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80159b8:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 80159bc:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80159be:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80159c2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80159c4:	4620      	mov	r0, r4
}
 80159c6:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80159c8:	4623      	mov	r3, r4
 80159ca:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 80159cc:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80159d0:	f00f fc0a 	bl	80251e8 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80159d4:	4620      	mov	r0, r4
}
 80159d6:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 80159d8:	2003      	movs	r0, #3
}
 80159da:	bd70      	pop	{r4, r5, r6, pc}

080159dc <USBD_CDC_Setup>:
{
 80159dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159de:	f891 c000 	ldrb.w	ip, [r1]
{
 80159e2:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 80159e4:	2300      	movs	r3, #0
{
 80159e6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159e8:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 80159ec:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80159ee:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80159f2:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 80159f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159fa:	d01c      	beq.n	8015a36 <USBD_CDC_Setup+0x5a>
 80159fc:	2e20      	cmp	r6, #32
 80159fe:	d112      	bne.n	8015a26 <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8015a00:	88ca      	ldrh	r2, [r1, #6]
 8015a02:	2a00      	cmp	r2, #0
 8015a04:	d036      	beq.n	8015a74 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8015a06:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8015a0a:	d055      	beq.n	8015ab8 <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 8015a0c:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015a0e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8015a12:	4639      	mov	r1, r7
 8015a14:	7860      	ldrb	r0, [r4, #1]
 8015a16:	689b      	ldr	r3, [r3, #8]
 8015a18:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8015a1a:	88e2      	ldrh	r2, [r4, #6]
 8015a1c:	4639      	mov	r1, r7
 8015a1e:	4628      	mov	r0, r5
 8015a20:	f000 fd2c 	bl	801647c <USBD_CtlSendData>
 8015a24:	e004      	b.n	8015a30 <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 8015a26:	4621      	mov	r1, r4
 8015a28:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 8015a2a:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 8015a2c:	f000 fcf0 	bl	8016410 <USBD_CtlError>
}
 8015a30:	4630      	mov	r0, r6
 8015a32:	b003      	add	sp, #12
 8015a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8015a36:	784b      	ldrb	r3, [r1, #1]
 8015a38:	2b0b      	cmp	r3, #11
 8015a3a:	d8f4      	bhi.n	8015a26 <USBD_CDC_Setup+0x4a>
 8015a3c:	a201      	add	r2, pc, #4	; (adr r2, 8015a44 <USBD_CDC_Setup+0x68>)
 8015a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a42:	bf00      	nop
 8015a44:	08015a87 	.word	0x08015a87
 8015a48:	08015a31 	.word	0x08015a31
 8015a4c:	08015a27 	.word	0x08015a27
 8015a50:	08015a27 	.word	0x08015a27
 8015a54:	08015a27 	.word	0x08015a27
 8015a58:	08015a27 	.word	0x08015a27
 8015a5c:	08015a27 	.word	0x08015a27
 8015a60:	08015a27 	.word	0x08015a27
 8015a64:	08015a27 	.word	0x08015a27
 8015a68:	08015a27 	.word	0x08015a27
 8015a6c:	08015aa5 	.word	0x08015aa5
 8015a70:	08015a9b 	.word	0x08015a9b
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015a74:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 8015a78:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015a7a:	7848      	ldrb	r0, [r1, #1]
 8015a7c:	689b      	ldr	r3, [r3, #8]
 8015a7e:	4798      	blx	r3
}
 8015a80:	4630      	mov	r0, r6
 8015a82:	b003      	add	sp, #12
 8015a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a86:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015a8a:	2a03      	cmp	r2, #3
 8015a8c:	d01e      	beq.n	8015acc <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 8015a8e:	4621      	mov	r1, r4
 8015a90:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 8015a92:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 8015a94:	f000 fcbc 	bl	8016410 <USBD_CtlError>
        ret = USBD_FAIL;
 8015a98:	e7ca      	b.n	8015a30 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015a9a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015a9e:	2b03      	cmp	r3, #3
 8015aa0:	d0c6      	beq.n	8015a30 <USBD_CDC_Setup+0x54>
 8015aa2:	e7f4      	b.n	8015a8e <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015aa4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015aa8:	2b03      	cmp	r3, #3
 8015aaa:	d1f0      	bne.n	8015a8e <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015aac:	2201      	movs	r2, #1
 8015aae:	f10d 0105 	add.w	r1, sp, #5
 8015ab2:	f000 fce3 	bl	801647c <USBD_CtlSendData>
 8015ab6:	e7bb      	b.n	8015a30 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 8015ab8:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 8015aba:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 8015abc:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 8015ac0:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8015ac4:	4639      	mov	r1, r7
 8015ac6:	f000 fcf1 	bl	80164ac <USBD_CtlPrepareRx>
 8015aca:	e7b1      	b.n	8015a30 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015acc:	2202      	movs	r2, #2
 8015ace:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8015ad2:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015ad4:	f000 fcd2 	bl	801647c <USBD_CtlSendData>
 8015ad8:	e7aa      	b.n	8015a30 <USBD_CDC_Setup+0x54>
 8015ada:	bf00      	nop

08015adc <USBD_CDC_DeInit>:
{
 8015adc:	b538      	push	{r3, r4, r5, lr}
 8015ade:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015ae0:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8015ae2:	2181      	movs	r1, #129	; 0x81
 8015ae4:	f00f fb34 	bl	8025150 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8015ae8:	2101      	movs	r1, #1
 8015aea:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015aec:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8015aee:	f00f fb2f 	bl	8025150 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8015af2:	2182      	movs	r1, #130	; 0x82
 8015af4:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8015af6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8015afa:	f00f fb29 	bl	8025150 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8015afe:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8015b02:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8015b04:	b14b      	cbz	r3, 8015b1a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8015b06:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8015b0a:	685b      	ldr	r3, [r3, #4]
 8015b0c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8015b0e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8015b12:	f00f fe01 	bl	8025718 <free>
    pdev->pClassData = NULL;
 8015b16:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8015b1a:	2000      	movs	r0, #0
 8015b1c:	bd38      	pop	{r3, r4, r5, pc}
 8015b1e:	bf00      	nop

08015b20 <USBD_CDC_Init>:
{
 8015b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b24:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015b26:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015b2a:	f00f fded 	bl	8025708 <malloc>
  if (hcdc == NULL)
 8015b2e:	4605      	mov	r5, r0
 8015b30:	2800      	cmp	r0, #0
 8015b32:	d04c      	beq.n	8015bce <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b34:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8015b36:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b3a:	b393      	cbz	r3, 8015ba2 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015b3c:	2340      	movs	r3, #64	; 0x40
 8015b3e:	2202      	movs	r2, #2
 8015b40:	2181      	movs	r1, #129	; 0x81
 8015b42:	4620      	mov	r0, r4
 8015b44:	f00f faf2 	bl	802512c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015b48:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015b4a:	2340      	movs	r3, #64	; 0x40
 8015b4c:	4631      	mov	r1, r6
 8015b4e:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015b50:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015b52:	4620      	mov	r0, r4
 8015b54:	f00f faea 	bl	802512c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015b58:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015b5a:	2203      	movs	r2, #3
 8015b5c:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015b5e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015b62:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015b64:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015b68:	2308      	movs	r3, #8
 8015b6a:	f00f fadf 	bl	802512c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8015b6e:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8015b72:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8015b76:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8015b78:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b80:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 8015b82:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8015b86:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b8a:	b9ae      	cbnz	r6, 8015bb8 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015b90:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8015b94:	4641      	mov	r1, r8
 8015b96:	4620      	mov	r0, r4
 8015b98:	f00f fb34 	bl	8025204 <USBD_LL_PrepareReceive>
}
 8015b9c:	4630      	mov	r0, r6
 8015b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015ba6:	2202      	movs	r2, #2
 8015ba8:	2181      	movs	r1, #129	; 0x81
 8015baa:	4620      	mov	r0, r4
 8015bac:	f00f fabe 	bl	802512c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015bb0:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015bb6:	e7c9      	b.n	8015b4c <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 8015bb8:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015bba:	2340      	movs	r3, #64	; 0x40
 8015bbc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8015bc0:	4641      	mov	r1, r8
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f00f fb1e 	bl	8025204 <USBD_LL_PrepareReceive>
}
 8015bc8:	4630      	mov	r0, r6
 8015bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8015bce:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8015bd0:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8015bd4:	e7e2      	b.n	8015b9c <USBD_CDC_Init+0x7c>
 8015bd6:	bf00      	nop

08015bd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015bd8:	4603      	mov	r3, r0
  if (fops == NULL)
 8015bda:	b119      	cbz	r1, 8015be4 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 8015bdc:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 8015bde:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8015be2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8015be4:	2003      	movs	r0, #3
}
 8015be6:	4770      	bx	lr

08015be8 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015be8:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8015bea:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8015bf0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015bf4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8015bf8:	4770      	bx	lr
 8015bfa:	bf00      	nop

08015bfc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015bfc:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8015bfe:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8015c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015c04:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop

08015c0c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015c0c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8015c10:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8015c12:	b19a      	cbz	r2, 8015c3c <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c14:	7c04      	ldrb	r4, [r0, #16]
 8015c16:	b144      	cbz	r4, 8015c2a <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015c18:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015c1a:	2340      	movs	r3, #64	; 0x40
 8015c1c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8015c20:	2101      	movs	r1, #1
 8015c22:	f00f faef 	bl	8025204 <USBD_LL_PrepareReceive>
}
 8015c26:	4620      	mov	r0, r4
 8015c28:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c2e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8015c32:	2101      	movs	r1, #1
 8015c34:	f00f fae6 	bl	8025204 <USBD_LL_PrepareReceive>
}
 8015c38:	4620      	mov	r0, r4
 8015c3a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8015c3c:	2403      	movs	r4, #3
}
 8015c3e:	4620      	mov	r0, r4
 8015c40:	bd10      	pop	{r4, pc}
 8015c42:	bf00      	nop

08015c44 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015c44:	b1a0      	cbz	r0, 8015c70 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015c46:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015c4a:	b113      	cbz	r3, 8015c52 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015c52:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8015c56:	b113      	cbz	r3, 8015c5e <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015c5e:	b109      	cbz	r1, 8015c64 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8015c60:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015c64:	2301      	movs	r3, #1
  pdev->id = id;
 8015c66:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015c68:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015c6c:	f00f ba1e 	b.w	80250ac <USBD_LL_Init>

  return ret;
}
 8015c70:	2003      	movs	r0, #3
 8015c72:	4770      	bx	lr

08015c74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015c74:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 8015c76:	2400      	movs	r4, #0
{
 8015c78:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8015c7a:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8015c7e:	b159      	cbz	r1, 8015c98 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015c80:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015c82:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8015c84:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 8015c88:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015c8c:	4798      	blx	r3
 8015c8e:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8015c92:	4620      	mov	r0, r4
 8015c94:	b003      	add	sp, #12
 8015c96:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8015c98:	2403      	movs	r4, #3
}
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	b003      	add	sp, #12
 8015c9e:	bd30      	pop	{r4, r5, pc}

08015ca0 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015ca0:	f00f ba36 	b.w	8025110 <USBD_LL_Start>

08015ca4 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8015ca4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015ca8:	b10b      	cbz	r3, 8015cae <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	4718      	bx	r3
  }

  return ret;
}
 8015cae:	2003      	movs	r0, #3
 8015cb0:	4770      	bx	lr
 8015cb2:	bf00      	nop

08015cb4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015cb4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015cb6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015cba:	b10b      	cbz	r3, 8015cc0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	4798      	blx	r3
  }

  return USBD_OK;
}
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	bd08      	pop	{r3, pc}

08015cc4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015cc4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015cc6:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8015cca:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015ccc:	4628      	mov	r0, r5
 8015cce:	f000 fb93 	bl	80163f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015cd2:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8015cd4:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8015cd8:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8015cdc:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8015ce0:	f001 031f 	and.w	r3, r1, #31
 8015ce4:	4293      	cmp	r3, r2
 8015ce6:	d009      	beq.n	8015cfc <USBD_LL_SetupStage+0x38>
 8015ce8:	2b02      	cmp	r3, #2
 8015cea:	d013      	beq.n	8015d14 <USBD_LL_SetupStage+0x50>
 8015cec:	b163      	cbz	r3, 8015d08 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8015cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015cf8:	f00f ba38 	b.w	802516c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015cfc:	4629      	mov	r1, r5
 8015cfe:	4620      	mov	r0, r4
}
 8015d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015d04:	f000 ba9e 	b.w	8016244 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015d08:	4629      	mov	r1, r5
 8015d0a:	4620      	mov	r0, r4
}
 8015d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015d10:	f000 b8fa 	b.w	8015f08 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015d14:	4629      	mov	r1, r5
 8015d16:	4620      	mov	r0, r4
}
 8015d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015d1c:	f000 baca 	b.w	80162b4 <USBD_StdEPReq>

08015d20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015d20:	b570      	push	{r4, r5, r6, lr}
 8015d22:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015d24:	b939      	cbnz	r1, 8015d36 <USBD_LL_DataOutStage+0x16>
 8015d26:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015d28:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8015d2c:	460c      	mov	r4, r1
 8015d2e:	2a03      	cmp	r2, #3
 8015d30:	d00e      	beq.n	8015d50 <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8015d32:	2000      	movs	r0, #0
}
 8015d34:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8015d36:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015d3a:	699b      	ldr	r3, [r3, #24]
 8015d3c:	b133      	cbz	r3, 8015d4c <USBD_LL_DataOutStage+0x2c>
 8015d3e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015d42:	2a03      	cmp	r2, #3
 8015d44:	d102      	bne.n	8015d4c <USBD_LL_DataOutStage+0x2c>
}
 8015d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015d4a:	4718      	bx	r3
    return USBD_FAIL;
 8015d4c:	2003      	movs	r0, #3
}
 8015d4e:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8015d50:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8015d54:	4291      	cmp	r1, r2
 8015d56:	d80d      	bhi.n	8015d74 <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015d58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015d5c:	691b      	ldr	r3, [r3, #16]
 8015d5e:	b123      	cbz	r3, 8015d6a <USBD_LL_DataOutStage+0x4a>
 8015d60:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015d64:	2a03      	cmp	r2, #3
 8015d66:	d100      	bne.n	8015d6a <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8015d68:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	f000 fbb6 	bl	80164dc <USBD_CtlSendStatus>
  return USBD_OK;
 8015d70:	2000      	movs	r0, #0
 8015d72:	e7df      	b.n	8015d34 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8015d74:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015d76:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8015d78:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015d7c:	bf28      	it	cs
 8015d7e:	460a      	movcs	r2, r1
 8015d80:	4619      	mov	r1, r3
 8015d82:	f000 fba1 	bl	80164c8 <USBD_CtlContinueRx>
  return USBD_OK;
 8015d86:	4620      	mov	r0, r4
}
 8015d88:	bd70      	pop	{r4, r5, r6, pc}
 8015d8a:	bf00      	nop

08015d8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015d8c:	b570      	push	{r4, r5, r6, lr}
 8015d8e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015d90:	b949      	cbnz	r1, 8015da6 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015d92:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8015d96:	2b02      	cmp	r3, #2
 8015d98:	d012      	beq.n	8015dc0 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015d9a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d027      	beq.n	8015df2 <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8015da2:	2000      	movs	r0, #0
}
 8015da4:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8015da6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015daa:	695b      	ldr	r3, [r3, #20]
 8015dac:	b133      	cbz	r3, 8015dbc <USBD_LL_DataInStage+0x30>
 8015dae:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015db2:	2a03      	cmp	r2, #3
 8015db4:	d102      	bne.n	8015dbc <USBD_LL_DataInStage+0x30>
}
 8015db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015dba:	4718      	bx	r3
    return USBD_FAIL;
 8015dbc:	2003      	movs	r0, #3
}
 8015dbe:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8015dc0:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8015dc4:	460d      	mov	r5, r1
 8015dc6:	42b3      	cmp	r3, r6
 8015dc8:	d818      	bhi.n	8015dfc <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 8015dca:	d027      	beq.n	8015e1c <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015dcc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8015dd0:	68db      	ldr	r3, [r3, #12]
 8015dd2:	b11b      	cbz	r3, 8015ddc <USBD_LL_DataInStage+0x50>
 8015dd4:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8015dd8:	2a03      	cmp	r2, #3
 8015dda:	d01c      	beq.n	8015e16 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ddc:	2180      	movs	r1, #128	; 0x80
 8015dde:	4620      	mov	r0, r4
 8015de0:	f00f f9c4 	bl	802516c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015de4:	4620      	mov	r0, r4
 8015de6:	f000 fb85 	bl	80164f4 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8015dea:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8015dee:	2b01      	cmp	r3, #1
 8015df0:	d1d7      	bne.n	8015da2 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8015df2:	2300      	movs	r3, #0
  return USBD_OK;
 8015df4:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 8015df6:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8015dfa:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8015dfc:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015dfe:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8015e00:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015e02:	461a      	mov	r2, r3
 8015e04:	f000 fb48 	bl	8016498 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e08:	462b      	mov	r3, r5
 8015e0a:	462a      	mov	r2, r5
 8015e0c:	4629      	mov	r1, r5
 8015e0e:	4620      	mov	r0, r4
 8015e10:	f00f f9f8 	bl	8025204 <USBD_LL_PrepareReceive>
 8015e14:	e7c1      	b.n	8015d9a <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8015e16:	4620      	mov	r0, r4
 8015e18:	4798      	blx	r3
 8015e1a:	e7df      	b.n	8015ddc <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8015e1c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	d8d4      	bhi.n	8015dcc <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8015e22:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8015e26:	429a      	cmp	r2, r3
 8015e28:	d2d0      	bcs.n	8015dcc <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015e2a:	460a      	mov	r2, r1
 8015e2c:	f000 fb34 	bl	8016498 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e30:	462b      	mov	r3, r5
 8015e32:	462a      	mov	r2, r5
 8015e34:	4629      	mov	r1, r5
 8015e36:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8015e38:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e3c:	f00f f9e2 	bl	8025204 <USBD_LL_PrepareReceive>
 8015e40:	e7ab      	b.n	8015d9a <USBD_LL_DataInStage+0xe>
 8015e42:	bf00      	nop

08015e44 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8015e44:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015e46:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8015e48:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8015e4c:	b570      	push	{r4, r5, r6, lr}
 8015e4e:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015e50:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015e54:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8015e58:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8015e5a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8015e5e:	b11b      	cbz	r3, 8015e68 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015e60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e68:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e6a:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015e6c:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e6e:	4620      	mov	r0, r4
 8015e70:	462b      	mov	r3, r5
 8015e72:	4611      	mov	r1, r2
 8015e74:	f00f f95a 	bl	802512c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e78:	462b      	mov	r3, r5
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	2180      	movs	r1, #128	; 0x80
 8015e7e:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015e80:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e84:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e88:	f00f f950 	bl	802512c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8015e8c:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015e8e:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e90:	6225      	str	r5, [r4, #32]
}
 8015e92:	bd70      	pop	{r4, r5, r6, pc}

08015e94 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015e94:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8015e96:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8015e98:	7419      	strb	r1, [r3, #16]
}
 8015e9a:	4770      	bx	lr

08015e9c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015e9c:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015e9e:	2104      	movs	r1, #4

  return USBD_OK;
}
 8015ea0:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8015ea2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015ea6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8015eaa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8015eae:	4770      	bx	lr

08015eb0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015eb0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015eb4:	2b04      	cmp	r3, #4
 8015eb6:	d103      	bne.n	8015ec0 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015eb8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8015ebc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8015ec0:	2000      	movs	r0, #0
 8015ec2:	4770      	bx	lr

08015ec4 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ec4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015ec8:	2a03      	cmp	r2, #3
 8015eca:	d001      	beq.n	8015ed0 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8015ecc:	2000      	movs	r0, #0
 8015ece:	4770      	bx	lr
{
 8015ed0:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8015ed2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015ed6:	69db      	ldr	r3, [r3, #28]
 8015ed8:	b103      	cbz	r3, 8015edc <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8015eda:	4798      	blx	r3
}
 8015edc:	2000      	movs	r0, #0
 8015ede:	bd08      	pop	{r3, pc}

08015ee0 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8015ee0:	2000      	movs	r0, #0
 8015ee2:	4770      	bx	lr

08015ee4 <USBD_LL_IsoOUTIncomplete>:
 8015ee4:	2000      	movs	r0, #0
 8015ee6:	4770      	bx	lr

08015ee8 <USBD_LL_DevConnected>:
 8015ee8:	2000      	movs	r0, #0
 8015eea:	4770      	bx	lr

08015eec <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015eec:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8015eee:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ef2:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8015ef6:	b12a      	cbz	r2, 8015f04 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015ef8:	6852      	ldr	r2, [r2, #4]
 8015efa:	7901      	ldrb	r1, [r0, #4]
{
 8015efc:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015efe:	4790      	blx	r2
  }

  return USBD_OK;
}
 8015f00:	2000      	movs	r0, #0
 8015f02:	bd08      	pop	{r3, pc}
 8015f04:	2000      	movs	r0, #0
 8015f06:	4770      	bx	lr

08015f08 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f08:	b570      	push	{r4, r5, r6, lr}
 8015f0a:	780c      	ldrb	r4, [r1, #0]
 8015f0c:	b082      	sub	sp, #8
 8015f0e:	460e      	mov	r6, r1
 8015f10:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f12:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8015f16:	2c20      	cmp	r4, #32
 8015f18:	d00e      	beq.n	8015f38 <USBD_StdDevReq+0x30>
 8015f1a:	2c40      	cmp	r4, #64	; 0x40
 8015f1c:	d00c      	beq.n	8015f38 <USBD_StdDevReq+0x30>
 8015f1e:	b1a4      	cbz	r4, 8015f4a <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f20:	2180      	movs	r1, #128	; 0x80
 8015f22:	4628      	mov	r0, r5
 8015f24:	f00f f922 	bl	802516c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015f28:	2100      	movs	r1, #0
 8015f2a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8015f2c:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8015f2e:	f00f f91d 	bl	802516c <USBD_LL_StallEP>
}
 8015f32:	4620      	mov	r0, r4
 8015f34:	b002      	add	sp, #8
 8015f36:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015f38:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8015f3c:	4631      	mov	r1, r6
 8015f3e:	4628      	mov	r0, r5
 8015f40:	689b      	ldr	r3, [r3, #8]
}
 8015f42:	b002      	add	sp, #8
 8015f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015f48:	4718      	bx	r3
    switch (req->bRequest)
 8015f4a:	784b      	ldrb	r3, [r1, #1]
 8015f4c:	2b09      	cmp	r3, #9
 8015f4e:	d8e7      	bhi.n	8015f20 <USBD_StdDevReq+0x18>
 8015f50:	a201      	add	r2, pc, #4	; (adr r2, 8015f58 <USBD_StdDevReq+0x50>)
 8015f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f56:	bf00      	nop
 8015f58:	08015fb7 	.word	0x08015fb7
 8015f5c:	08015fe5 	.word	0x08015fe5
 8015f60:	08015f21 	.word	0x08015f21
 8015f64:	08016003 	.word	0x08016003
 8015f68:	08015f21 	.word	0x08015f21
 8015f6c:	0801600b 	.word	0x0801600b
 8015f70:	08016043 	.word	0x08016043
 8015f74:	08015f21 	.word	0x08015f21
 8015f78:	08016067 	.word	0x08016067
 8015f7c:	08015f81 	.word	0x08015f81
  cfgidx = (uint8_t)(req->wValue);
 8015f80:	7889      	ldrb	r1, [r1, #2]
 8015f82:	4eaa      	ldr	r6, [pc, #680]	; (801622c <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015f84:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8015f86:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015f88:	f200 8146 	bhi.w	8016218 <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 8015f8c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015f90:	2b02      	cmp	r3, #2
 8015f92:	f000 8130 	beq.w	80161f6 <USBD_StdDevReq+0x2ee>
 8015f96:	2b03      	cmp	r3, #3
 8015f98:	f000 810c 	beq.w	80161b4 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f9c:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8015f9e:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015fa0:	f00f f8e4 	bl	802516c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015fa4:	2100      	movs	r1, #0
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	f00f f8e0 	bl	802516c <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fac:	7831      	ldrb	r1, [r6, #0]
 8015fae:	4628      	mov	r0, r5
 8015fb0:	f7ff fe80 	bl	8015cb4 <USBD_ClrClassConfig>
    break;
 8015fb4:	e7bd      	b.n	8015f32 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8015fb6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015fba:	3a01      	subs	r2, #1
 8015fbc:	2a02      	cmp	r2, #2
 8015fbe:	d868      	bhi.n	8016092 <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8015fc0:	88ca      	ldrh	r2, [r1, #6]
 8015fc2:	2a02      	cmp	r2, #2
 8015fc4:	d165      	bne.n	8016092 <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015fc6:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8015fc8:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015fcc:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8015fce:	b10a      	cbz	r2, 8015fd4 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015fd0:	2203      	movs	r2, #3
 8015fd2:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015fd4:	2202      	movs	r2, #2
 8015fd6:	f105 010c 	add.w	r1, r5, #12
 8015fda:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8015fdc:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015fde:	f000 fa4d 	bl	801647c <USBD_CtlSendData>
    break;
 8015fe2:	e7a6      	b.n	8015f32 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8015fe4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015fe8:	3b01      	subs	r3, #1
 8015fea:	2b02      	cmp	r3, #2
 8015fec:	d851      	bhi.n	8016092 <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015fee:	884b      	ldrh	r3, [r1, #2]
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	d19e      	bne.n	8015f32 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8015ff4:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8015ff6:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 8015ff8:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015ffc:	f000 fa6e 	bl	80164dc <USBD_CtlSendStatus>
 8016000:	e797      	b.n	8015f32 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016002:	884b      	ldrh	r3, [r1, #2]
 8016004:	2b01      	cmp	r3, #1
 8016006:	d194      	bne.n	8015f32 <USBD_StdDevReq+0x2a>
 8016008:	e7f5      	b.n	8015ff6 <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801600a:	888b      	ldrh	r3, [r1, #4]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d140      	bne.n	8016092 <USBD_StdDevReq+0x18a>
 8016010:	88cb      	ldrh	r3, [r1, #6]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d13d      	bne.n	8016092 <USBD_StdDevReq+0x18a>
 8016016:	884e      	ldrh	r6, [r1, #2]
 8016018:	2e7f      	cmp	r6, #127	; 0x7f
 801601a:	d83a      	bhi.n	8016092 <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801601c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016020:	2b03      	cmp	r3, #3
 8016022:	d036      	beq.n	8016092 <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016024:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8016026:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801602a:	f00f f8cf 	bl	80251cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801602e:	4628      	mov	r0, r5
 8016030:	f000 fa54 	bl	80164dc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8016034:	2e00      	cmp	r6, #0
 8016036:	f040 80da 	bne.w	80161ee <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 801603a:	2301      	movs	r3, #1
 801603c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8016040:	e777      	b.n	8015f32 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8016042:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8016044:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8016046:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 801604a:	0a13      	lsrs	r3, r2, #8
 801604c:	3b01      	subs	r3, #1
 801604e:	2b0e      	cmp	r3, #14
 8016050:	d81f      	bhi.n	8016092 <USBD_StdDevReq+0x18a>
 8016052:	e8df f003 	tbb	[pc, r3]
 8016056:	6b77      	.short	0x6b77
 8016058:	4f1e1e59 	.word	0x4f1e1e59
 801605c:	1e1e1e43 	.word	0x1e1e1e43
 8016060:	1e1e1e1e 	.word	0x1e1e1e1e
 8016064:	29          	.byte	0x29
 8016065:	00          	.byte	0x00
  if (req->wLength != 1U)
 8016066:	88ca      	ldrh	r2, [r1, #6]
 8016068:	2a01      	cmp	r2, #1
 801606a:	d112      	bne.n	8016092 <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 801606c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016070:	2b02      	cmp	r3, #2
 8016072:	f200 8098 	bhi.w	80161a6 <USBD_StdDevReq+0x29e>
 8016076:	2b00      	cmp	r3, #0
 8016078:	f43f af52 	beq.w	8015f20 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 801607c:	4601      	mov	r1, r0
 801607e:	2300      	movs	r3, #0
 8016080:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016084:	f000 f9fa 	bl	801647c <USBD_CtlSendData>
      break;
 8016088:	e753      	b.n	8015f32 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801608a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801608e:	699b      	ldr	r3, [r3, #24]
 8016090:	b97b      	cbnz	r3, 80160b2 <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016092:	2180      	movs	r1, #128	; 0x80
 8016094:	4628      	mov	r0, r5
 8016096:	f00f f869 	bl	802516c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801609a:	2100      	movs	r1, #0
 801609c:	4628      	mov	r0, r5
 801609e:	f00f f865 	bl	802516c <USBD_LL_StallEP>
}
 80160a2:	4620      	mov	r0, r4
 80160a4:	b002      	add	sp, #8
 80160a6:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80160a8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80160ac:	69db      	ldr	r3, [r3, #28]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d0ef      	beq.n	8016092 <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80160b2:	f10d 0106 	add.w	r1, sp, #6
 80160b6:	7c28      	ldrb	r0, [r5, #16]
 80160b8:	4798      	blx	r3
    if (req->wLength != 0U)
 80160ba:	88f2      	ldrh	r2, [r6, #6]
 80160bc:	2a00      	cmp	r2, #0
 80160be:	d06e      	beq.n	801619e <USBD_StdDevReq+0x296>
      if (len != 0U)
 80160c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d0e4      	beq.n	8016092 <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 80160c8:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80160ca:	4601      	mov	r1, r0
 80160cc:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 80160ce:	bf28      	it	cs
 80160d0:	461a      	movcs	r2, r3
 80160d2:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80160d6:	f000 f9d1 	bl	801647c <USBD_CtlSendData>
 80160da:	e72a      	b.n	8015f32 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160dc:	7c03      	ldrb	r3, [r0, #16]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d1d7      	bne.n	8016092 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80160e2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80160e6:	f10d 0006 	add.w	r0, sp, #6
 80160ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160ec:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80160ee:	2307      	movs	r3, #7
 80160f0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80160f2:	e7e2      	b.n	80160ba <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160f4:	7c03      	ldrb	r3, [r0, #16]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d1cb      	bne.n	8016092 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80160fa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80160fe:	f10d 0006 	add.w	r0, sp, #6
 8016102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016104:	4798      	blx	r3
  if (err != 0U)
 8016106:	e7d8      	b.n	80160ba <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8016108:	b2d2      	uxtb	r2, r2
 801610a:	2a05      	cmp	r2, #5
 801610c:	d8c1      	bhi.n	8016092 <USBD_StdDevReq+0x18a>
 801610e:	a301      	add	r3, pc, #4	; (adr r3, 8016114 <USBD_StdDevReq+0x20c>)
 8016110:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8016114:	08016185 	.word	0x08016185
 8016118:	08016179 	.word	0x08016179
 801611c:	0801616d 	.word	0x0801616d
 8016120:	08016161 	.word	0x08016161
 8016124:	08016155 	.word	0x08016155
 8016128:	0801608b 	.word	0x0801608b
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801612c:	7c03      	ldrb	r3, [r0, #16]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d17e      	bne.n	8016230 <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8016132:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8016136:	f10d 0006 	add.w	r0, sp, #6
 801613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801613c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801613e:	2302      	movs	r3, #2
 8016140:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8016142:	e7ba      	b.n	80160ba <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016144:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8016148:	f10d 0106 	add.w	r1, sp, #6
 801614c:	7c00      	ldrb	r0, [r0, #16]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	4798      	blx	r3
  if (err != 0U)
 8016152:	e7b2      	b.n	80160ba <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016154:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8016158:	695b      	ldr	r3, [r3, #20]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d1a9      	bne.n	80160b2 <USBD_StdDevReq+0x1aa>
 801615e:	e798      	b.n	8016092 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016160:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8016164:	691b      	ldr	r3, [r3, #16]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d1a3      	bne.n	80160b2 <USBD_StdDevReq+0x1aa>
 801616a:	e792      	b.n	8016092 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801616c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8016170:	68db      	ldr	r3, [r3, #12]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d19d      	bne.n	80160b2 <USBD_StdDevReq+0x1aa>
 8016176:	e78c      	b.n	8016092 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016178:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801617c:	689b      	ldr	r3, [r3, #8]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d197      	bne.n	80160b2 <USBD_StdDevReq+0x1aa>
 8016182:	e786      	b.n	8016092 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016184:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d191      	bne.n	80160b2 <USBD_StdDevReq+0x1aa>
 801618e:	e780      	b.n	8016092 <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8016190:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8016192:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016194:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8016196:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801619a:	f7ff fd8b 	bl	8015cb4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801619e:	4628      	mov	r0, r5
 80161a0:	f000 f99c 	bl	80164dc <USBD_CtlSendStatus>
 80161a4:	e6c5      	b.n	8015f32 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 80161a6:	2b03      	cmp	r3, #3
 80161a8:	f47f aeba 	bne.w	8015f20 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80161ac:	1d01      	adds	r1, r0, #4
 80161ae:	f000 f965 	bl	801647c <USBD_CtlSendData>
      break;
 80161b2:	e6be      	b.n	8015f32 <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 80161b4:	2900      	cmp	r1, #0
 80161b6:	d0eb      	beq.n	8016190 <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 80161b8:	6841      	ldr	r1, [r0, #4]
 80161ba:	2901      	cmp	r1, #1
 80161bc:	d0ef      	beq.n	801619e <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80161be:	b2c9      	uxtb	r1, r1
 80161c0:	f7ff fd78 	bl	8015cb4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80161c4:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80161c6:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 80161c8:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80161ca:	f7ff fd6b 	bl	8015ca4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80161ce:	4606      	mov	r6, r0
 80161d0:	2800      	cmp	r0, #0
 80161d2:	d0e4      	beq.n	801619e <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80161d4:	2180      	movs	r1, #128	; 0x80
 80161d6:	4628      	mov	r0, r5
 80161d8:	f00e ffc8 	bl	802516c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80161dc:	2100      	movs	r1, #0
 80161de:	4628      	mov	r0, r5
 80161e0:	4634      	mov	r4, r6
 80161e2:	f00e ffc3 	bl	802516c <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80161e6:	7929      	ldrb	r1, [r5, #4]
 80161e8:	4628      	mov	r0, r5
 80161ea:	f7ff fd63 	bl	8015cb4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80161ee:	2302      	movs	r3, #2
 80161f0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80161f4:	e69d      	b.n	8015f32 <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 80161f6:	2900      	cmp	r1, #0
 80161f8:	d0d1      	beq.n	801619e <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 80161fa:	2101      	movs	r1, #1
 80161fc:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80161fe:	f7ff fd51 	bl	8015ca4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8016202:	4604      	mov	r4, r0
 8016204:	2800      	cmp	r0, #0
 8016206:	f47f af44 	bne.w	8016092 <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 801620a:	4628      	mov	r0, r5
 801620c:	f000 f966 	bl	80164dc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8016210:	2303      	movs	r3, #3
 8016212:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8016216:	e68c      	b.n	8015f32 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016218:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 801621a:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801621c:	f00e ffa6 	bl	802516c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016220:	2100      	movs	r1, #0
 8016222:	4628      	mov	r0, r5
 8016224:	f00e ffa2 	bl	802516c <USBD_LL_StallEP>
}
 8016228:	e683      	b.n	8015f32 <USBD_StdDevReq+0x2a>
 801622a:	bf00      	nop
 801622c:	200066d8 	.word	0x200066d8
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016230:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8016234:	f10d 0006 	add.w	r0, sp, #6
 8016238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801623a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801623c:	2302      	movs	r3, #2
 801623e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8016240:	e73b      	b.n	80160ba <USBD_StdDevReq+0x1b2>
 8016242:	bf00      	nop

08016244 <USBD_StdItfReq>:
{
 8016244:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016246:	780b      	ldrb	r3, [r1, #0]
{
 8016248:	460d      	mov	r5, r1
 801624a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801624c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8016250:	2a40      	cmp	r2, #64	; 0x40
 8016252:	d00b      	beq.n	801626c <USBD_StdItfReq+0x28>
 8016254:	065b      	lsls	r3, r3, #25
 8016256:	d509      	bpl.n	801626c <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8016258:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801625a:	2180      	movs	r1, #128	; 0x80
 801625c:	f00e ff86 	bl	802516c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016260:	4620      	mov	r0, r4
 8016262:	4629      	mov	r1, r5
 8016264:	f00e ff82 	bl	802516c <USBD_LL_StallEP>
}
 8016268:	4628      	mov	r0, r5
 801626a:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 801626c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8016270:	3b01      	subs	r3, #1
 8016272:	2b02      	cmp	r3, #2
 8016274:	d812      	bhi.n	801629c <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016276:	792b      	ldrb	r3, [r5, #4]
 8016278:	2b01      	cmp	r3, #1
 801627a:	d80f      	bhi.n	801629c <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801627c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8016280:	4629      	mov	r1, r5
 8016282:	4620      	mov	r0, r4
 8016284:	689b      	ldr	r3, [r3, #8]
 8016286:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8016288:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801628a:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 801628c:	2b00      	cmp	r3, #0
 801628e:	d1eb      	bne.n	8016268 <USBD_StdItfReq+0x24>
 8016290:	2800      	cmp	r0, #0
 8016292:	d1e9      	bne.n	8016268 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 8016294:	4620      	mov	r0, r4
 8016296:	f000 f921 	bl	80164dc <USBD_CtlSendStatus>
 801629a:	e7e5      	b.n	8016268 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801629c:	2180      	movs	r1, #128	; 0x80
 801629e:	4620      	mov	r0, r4
 80162a0:	f00e ff64 	bl	802516c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80162a4:	2100      	movs	r1, #0
 80162a6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80162a8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80162aa:	f00e ff5f 	bl	802516c <USBD_LL_StallEP>
}
 80162ae:	4628      	mov	r0, r5
 80162b0:	bd38      	pop	{r3, r4, r5, pc}
 80162b2:	bf00      	nop

080162b4 <USBD_StdEPReq>:
{
 80162b4:	b570      	push	{r4, r5, r6, lr}
 80162b6:	780b      	ldrb	r3, [r1, #0]
 80162b8:	460d      	mov	r5, r1
 80162ba:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80162bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80162c0:	2b20      	cmp	r3, #32
 80162c2:	d00c      	beq.n	80162de <USBD_StdEPReq+0x2a>
 80162c4:	2b40      	cmp	r3, #64	; 0x40
 80162c6:	d00a      	beq.n	80162de <USBD_StdEPReq+0x2a>
 80162c8:	b18b      	cbz	r3, 80162ee <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80162ca:	2180      	movs	r1, #128	; 0x80
 80162cc:	4620      	mov	r0, r4
 80162ce:	f00e ff4d 	bl	802516c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80162d2:	2100      	movs	r1, #0
 80162d4:	4620      	mov	r0, r4
 80162d6:	f00e ff49 	bl	802516c <USBD_LL_StallEP>
}
 80162da:	2000      	movs	r0, #0
 80162dc:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80162de:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80162e2:	4629      	mov	r1, r5
 80162e4:	4620      	mov	r0, r4
 80162e6:	689b      	ldr	r3, [r3, #8]
}
 80162e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80162ec:	4718      	bx	r3
    switch (req->bRequest)
 80162ee:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 80162f0:	888a      	ldrh	r2, [r1, #4]
 80162f2:	2b01      	cmp	r3, #1
 80162f4:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 80162f6:	d036      	beq.n	8016366 <USBD_StdEPReq+0xb2>
 80162f8:	2b03      	cmp	r3, #3
 80162fa:	d023      	beq.n	8016344 <USBD_StdEPReq+0x90>
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d1e4      	bne.n	80162ca <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8016300:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016304:	2b02      	cmp	r3, #2
 8016306:	d04c      	beq.n	80163a2 <USBD_StdEPReq+0xee>
 8016308:	2b03      	cmp	r3, #3
 801630a:	d1de      	bne.n	80162ca <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801630c:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8016310:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016312:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016316:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 801631a:	d453      	bmi.n	80163c4 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801631c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8016320:	2b00      	cmp	r3, #0
 8016322:	d0d2      	beq.n	80162ca <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016324:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8016328:	2514      	movs	r5, #20
 801632a:	fb05 0503 	mla	r5, r5, r3, r0
 801632e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016332:	2b00      	cmp	r3, #0
 8016334:	d152      	bne.n	80163dc <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 8016336:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016338:	2202      	movs	r2, #2
 801633a:	4629      	mov	r1, r5
 801633c:	4620      	mov	r0, r4
 801633e:	f000 f89d 	bl	801647c <USBD_CtlSendData>
          break;
 8016342:	e7ca      	b.n	80162da <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8016344:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016348:	2b02      	cmp	r3, #2
 801634a:	d021      	beq.n	8016390 <USBD_StdEPReq+0xdc>
 801634c:	2b03      	cmp	r3, #3
 801634e:	d1bc      	bne.n	80162ca <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8016350:	886b      	ldrh	r3, [r5, #2]
 8016352:	b923      	cbnz	r3, 801635e <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016354:	064a      	lsls	r2, r1, #25
 8016356:	d002      	beq.n	801635e <USBD_StdEPReq+0xaa>
 8016358:	88eb      	ldrh	r3, [r5, #6]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d049      	beq.n	80163f2 <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 801635e:	4620      	mov	r0, r4
 8016360:	f000 f8bc 	bl	80164dc <USBD_CtlSendStatus>
        break;
 8016364:	e7b9      	b.n	80162da <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8016366:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801636a:	2b02      	cmp	r3, #2
 801636c:	d010      	beq.n	8016390 <USBD_StdEPReq+0xdc>
 801636e:	2b03      	cmp	r3, #3
 8016370:	d1ab      	bne.n	80162ca <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8016372:	886b      	ldrh	r3, [r5, #2]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d1b0      	bne.n	80162da <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8016378:	064e      	lsls	r6, r1, #25
 801637a:	d135      	bne.n	80163e8 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 801637c:	4620      	mov	r0, r4
 801637e:	f000 f8ad 	bl	80164dc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016382:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8016386:	4629      	mov	r1, r5
 8016388:	4620      	mov	r0, r4
 801638a:	689b      	ldr	r3, [r3, #8]
 801638c:	4798      	blx	r3
 801638e:	e7a4      	b.n	80162da <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016390:	064b      	lsls	r3, r1, #25
 8016392:	d09a      	beq.n	80162ca <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8016394:	f00e feea 	bl	802516c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016398:	2180      	movs	r1, #128	; 0x80
 801639a:	4620      	mov	r0, r4
 801639c:	f00e fee6 	bl	802516c <USBD_LL_StallEP>
 80163a0:	e79b      	b.n	80162da <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80163a2:	0648      	lsls	r0, r1, #25
 80163a4:	d191      	bne.n	80162ca <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163a6:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 80163a8:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80163ac:	f04f 0202 	mov.w	r2, #2
 80163b0:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163b2:	bf4c      	ite	mi
 80163b4:	f104 0114 	addmi.w	r1, r4, #20
 80163b8:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 80163bc:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80163be:	f000 f85d 	bl	801647c <USBD_CtlSendData>
        break;
 80163c2:	e78a      	b.n	80162da <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80163c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	f43f af7f 	beq.w	80162ca <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163cc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80163d0:	1c5d      	adds	r5, r3, #1
 80163d2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80163d6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80163da:	e7aa      	b.n	8016332 <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80163dc:	4620      	mov	r0, r4
 80163de:	f00e fee1 	bl	80251a4 <USBD_LL_IsStallEP>
 80163e2:	b120      	cbz	r0, 80163ee <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 80163e4:	2301      	movs	r3, #1
 80163e6:	e7a6      	b.n	8016336 <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80163e8:	f00e fece 	bl	8025188 <USBD_LL_ClearStallEP>
 80163ec:	e7c6      	b.n	801637c <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 80163ee:	6028      	str	r0, [r5, #0]
 80163f0:	e7a2      	b.n	8016338 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80163f2:	f00e febb 	bl	802516c <USBD_LL_StallEP>
 80163f6:	e7b2      	b.n	801635e <USBD_StdEPReq+0xaa>

080163f8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80163f8:	780b      	ldrb	r3, [r1, #0]
 80163fa:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80163fc:	784b      	ldrb	r3, [r1, #1]
 80163fe:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8016400:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8016402:	8043      	strh	r3, [r0, #2]
 8016404:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8016406:	8083      	strh	r3, [r0, #4]
 8016408:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 801640a:	80c3      	strh	r3, [r0, #6]
}
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop

08016410 <USBD_CtlError>:
{
 8016410:	b510      	push	{r4, lr}
 8016412:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016414:	2180      	movs	r1, #128	; 0x80
 8016416:	f00e fea9 	bl	802516c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801641a:	2100      	movs	r1, #0
 801641c:	4620      	mov	r0, r4
}
 801641e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8016422:	f00e bea3 	b.w	802516c <USBD_LL_StallEP>
 8016426:	bf00      	nop

08016428 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8016428:	b318      	cbz	r0, 8016472 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801642a:	7803      	ldrb	r3, [r0, #0]
{
 801642c:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 801642e:	b30b      	cbz	r3, 8016474 <USBD_GetString+0x4c>
 8016430:	4604      	mov	r4, r0
 8016432:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8016436:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 801643a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801643e:	b2db      	uxtb	r3, r3
 8016440:	2d00      	cmp	r5, #0
 8016442:	d1f8      	bne.n	8016436 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016444:	3301      	adds	r3, #1
 8016446:	005b      	lsls	r3, r3, #1
 8016448:	b2dc      	uxtb	r4, r3
 801644a:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801644c:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 801644e:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016450:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8016452:	7804      	ldrb	r4, [r0, #0]
 8016454:	b15c      	cbz	r4, 801646e <USBD_GetString+0x46>
  idx++;
 8016456:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8016458:	2500      	movs	r5, #0
    idx++;
 801645a:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 801645c:	54cc      	strb	r4, [r1, r3]
    idx++;
 801645e:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8016460:	b2d2      	uxtb	r2, r2
    idx++;
 8016462:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8016464:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8016466:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801646a:	2c00      	cmp	r4, #0
 801646c:	d1f5      	bne.n	801645a <USBD_GetString+0x32>
}
 801646e:	bc30      	pop	{r4, r5}
 8016470:	4770      	bx	lr
 8016472:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8016474:	2402      	movs	r4, #2
 8016476:	4623      	mov	r3, r4
 8016478:	e7e7      	b.n	801644a <USBD_GetString+0x22>
 801647a:	bf00      	nop

0801647c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801647c:	b510      	push	{r4, lr}
 801647e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016480:	2402      	movs	r4, #2
{
 8016482:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016484:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016486:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 801648a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801648e:	f00e feab 	bl	80251e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8016492:	2000      	movs	r0, #0
 8016494:	bd10      	pop	{r4, pc}
 8016496:	bf00      	nop

08016498 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016498:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801649a:	2100      	movs	r1, #0
{
 801649c:	b508      	push	{r3, lr}
 801649e:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164a0:	4662      	mov	r2, ip
 80164a2:	f00e fea1 	bl	80251e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80164a6:	2000      	movs	r0, #0
 80164a8:	bd08      	pop	{r3, pc}
 80164aa:	bf00      	nop

080164ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80164ac:	b510      	push	{r4, lr}
 80164ae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164b0:	2403      	movs	r4, #3
{
 80164b2:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164b4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164b6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 80164ba:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164be:	f00e fea1 	bl	8025204 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80164c2:	2000      	movs	r0, #0
 80164c4:	bd10      	pop	{r4, pc}
 80164c6:	bf00      	nop

080164c8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80164c8:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164ca:	2100      	movs	r1, #0
{
 80164cc:	b508      	push	{r3, lr}
 80164ce:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164d0:	4662      	mov	r2, ip
 80164d2:	f00e fe97 	bl	8025204 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80164d6:	2000      	movs	r0, #0
 80164d8:	bd08      	pop	{r3, pc}
 80164da:	bf00      	nop

080164dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80164dc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80164de:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80164e0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80164e2:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80164e6:	461a      	mov	r2, r3
 80164e8:	4619      	mov	r1, r3
 80164ea:	f00e fe7d 	bl	80251e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80164ee:	2000      	movs	r0, #0
 80164f0:	bd08      	pop	{r3, pc}
 80164f2:	bf00      	nop

080164f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80164f4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80164f6:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164f8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80164fa:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164fe:	461a      	mov	r2, r3
 8016500:	4619      	mov	r1, r3
 8016502:	f00e fe7f 	bl	8025204 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8016506:	2000      	movs	r0, #0
 8016508:	bd08      	pop	{r3, pc}
 801650a:	bf00      	nop

0801650c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801650c:	4b10      	ldr	r3, [pc, #64]	; (8016550 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801650e:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8016510:	7a5c      	ldrb	r4, [r3, #9]
 8016512:	b9cc      	cbnz	r4, 8016548 <FATFS_LinkDriver+0x3c>
 8016514:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8016516:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 801651a:	7a5c      	ldrb	r4, [r3, #9]
 801651c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 801651e:	7a5c      	ldrb	r4, [r3, #9]
 8016520:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016524:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8016526:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8016528:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 801652a:	441c      	add	r4, r3
 801652c:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 801652e:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8016530:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8016532:	b2e4      	uxtb	r4, r4
 8016534:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8016536:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8016538:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 801653a:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 801653c:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 801653e:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8016540:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8016544:	708b      	strb	r3, [r1, #2]
}
 8016546:	4770      	bx	lr
  uint8_t ret = 1;
 8016548:	2001      	movs	r0, #1
}
 801654a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801654e:	4770      	bx	lr
 8016550:	200066dc 	.word	0x200066dc

08016554 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8016554:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8016556:	f001 faad 	bl	8017ab4 <vTaskStartScheduler>
  
  return osOK;
}
 801655a:	2000      	movs	r0, #0
 801655c:	bd08      	pop	{r3, pc}
 801655e:	bf00      	nop

08016560 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016560:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8016564:	b10b      	cbz	r3, 801656a <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8016566:	f001 bb07 	b.w	8017b78 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 801656a:	f001 baff 	b.w	8017b6c <xTaskGetTickCount>
 801656e:	bf00      	nop

08016570 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016570:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8016572:	6944      	ldr	r4, [r0, #20]
{
 8016574:	b086      	sub	sp, #24
 8016576:	4684      	mov	ip, r0
 8016578:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801657a:	b1ac      	cbz	r4, 80165a8 <osThreadCreate+0x38>
 801657c:	6986      	ldr	r6, [r0, #24]
 801657e:	b19e      	cbz	r6, 80165a8 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016580:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016584:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 8016588:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801658c:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8016590:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 8016592:	bf14      	ite	ne
 8016594:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016598:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801659a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801659e:	9500      	str	r5, [sp, #0]
 80165a0:	f001 f932 	bl	8017808 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80165a4:	b006      	add	sp, #24
 80165a6:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80165a8:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 80165ac:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 80165b0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80165b2:	bf14      	ite	ne
 80165b4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80165b6:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80165b8:	e9dc 1000 	ldrd	r1, r0, [ip]
 80165bc:	9400      	str	r4, [sp, #0]
 80165be:	ac05      	add	r4, sp, #20
 80165c0:	9401      	str	r4, [sp, #4]
 80165c2:	f001 f961 	bl	8017888 <xTaskCreate>
 80165c6:	2801      	cmp	r0, #1
  return handle;
 80165c8:	bf0c      	ite	eq
 80165ca:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 80165cc:	2000      	movne	r0, #0
}
 80165ce:	b006      	add	sp, #24
 80165d0:	bd70      	pop	{r4, r5, r6, pc}
 80165d2:	bf00      	nop

080165d4 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80165d4:	2801      	cmp	r0, #1
{
 80165d6:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80165d8:	bf38      	it	cc
 80165da:	2001      	movcc	r0, #1
 80165dc:	f001 fc2c 	bl	8017e38 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80165e0:	2000      	movs	r0, #0
 80165e2:	bd08      	pop	{r3, pc}

080165e4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80165e4:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80165e6:	6844      	ldr	r4, [r0, #4]
{
 80165e8:	b082      	sub	sp, #8
 80165ea:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 80165ec:	b16c      	cbz	r4, 801660a <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 80165ee:	f1a1 0201 	sub.w	r2, r1, #1
 80165f2:	6800      	ldr	r0, [r0, #0]
 80165f4:	2101      	movs	r1, #1
 80165f6:	fab2 f282 	clz	r2, r2
 80165fa:	0952      	lsrs	r2, r2, #5
 80165fc:	e9cd 0400 	strd	r0, r4, [sp]
 8016600:	4808      	ldr	r0, [pc, #32]	; (8016624 <osTimerCreate+0x40>)
 8016602:	f001 ffcd 	bl	80185a0 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8016606:	b002      	add	sp, #8
 8016608:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 801660a:	f1a1 0201 	sub.w	r2, r1, #1
 801660e:	6804      	ldr	r4, [r0, #0]
 8016610:	2101      	movs	r1, #1
 8016612:	4804      	ldr	r0, [pc, #16]	; (8016624 <osTimerCreate+0x40>)
 8016614:	fab2 f282 	clz	r2, r2
 8016618:	9400      	str	r4, [sp, #0]
 801661a:	0952      	lsrs	r2, r2, #5
 801661c:	f001 ff90 	bl	8018540 <xTimerCreate>
}
 8016620:	b002      	add	sp, #8
 8016622:	bd10      	pop	{r4, pc}
 8016624:	0802b630 	.word	0x0802b630

08016628 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8016628:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801662a:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 801662c:	b109      	cbz	r1, 8016632 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801662e:	f000 bbc9 	b.w	8016dc4 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8016632:	f000 bbdf 	b.w	8016df4 <xQueueCreateMutex>
 8016636:	bf00      	nop

08016638 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8016638:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801663a:	2400      	movs	r4, #0
{
 801663c:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801663e:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8016640:	b310      	cbz	r0, 8016688 <osMutexWait+0x50>
 8016642:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8016646:	b933      	cbnz	r3, 8016656 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8016648:	f000 fd88 	bl	801715c <xQueueSemaphoreTake>
 801664c:	2801      	cmp	r0, #1
 801664e:	d118      	bne.n	8016682 <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8016650:	2000      	movs	r0, #0
}
 8016652:	b002      	add	sp, #8
 8016654:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8016656:	aa01      	add	r2, sp, #4
 8016658:	4621      	mov	r1, r4
 801665a:	f000 fe63 	bl	8017324 <xQueueReceiveFromISR>
 801665e:	2801      	cmp	r0, #1
 8016660:	d10f      	bne.n	8016682 <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8016662:	9b01      	ldr	r3, [sp, #4]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d0f3      	beq.n	8016650 <osMutexWait+0x18>
 8016668:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801666c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016670:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016674:	f3bf 8f4f 	dsb	sy
 8016678:	f3bf 8f6f 	isb	sy
  return osOK;
 801667c:	4620      	mov	r0, r4
}
 801667e:	b002      	add	sp, #8
 8016680:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8016682:	20ff      	movs	r0, #255	; 0xff
}
 8016684:	b002      	add	sp, #8
 8016686:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8016688:	2080      	movs	r0, #128	; 0x80
}
 801668a:	b002      	add	sp, #8
 801668c:	bd10      	pop	{r4, pc}
 801668e:	bf00      	nop

08016690 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8016690:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8016692:	2400      	movs	r4, #0
{
 8016694:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 8016696:	9401      	str	r4, [sp, #4]
 8016698:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 801669c:	b19b      	cbz	r3, 80166c6 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801669e:	a901      	add	r1, sp, #4
 80166a0:	f000 fc34 	bl	8016f0c <xQueueGiveFromISR>
 80166a4:	2801      	cmp	r0, #1
 80166a6:	d114      	bne.n	80166d2 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80166a8:	9b01      	ldr	r3, [sp, #4]
 80166aa:	b1ab      	cbz	r3, 80166d8 <osMutexRelease+0x48>
 80166ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80166b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80166b8:	f3bf 8f4f 	dsb	sy
 80166bc:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80166c0:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 80166c2:	b002      	add	sp, #8
 80166c4:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80166c6:	461a      	mov	r2, r3
 80166c8:	4619      	mov	r1, r3
 80166ca:	f000 faad 	bl	8016c28 <xQueueGenericSend>
 80166ce:	2801      	cmp	r0, #1
 80166d0:	d002      	beq.n	80166d8 <osMutexRelease+0x48>
    result = osErrorOS;
 80166d2:	20ff      	movs	r0, #255	; 0xff
}
 80166d4:	b002      	add	sp, #8
 80166d6:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 80166d8:	2000      	movs	r0, #0
}
 80166da:	b002      	add	sp, #8
 80166dc:	bd10      	pop	{r4, pc}
 80166de:	bf00      	nop

080166e0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80166e0:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80166e2:	6844      	ldr	r4, [r0, #4]
{ 
 80166e4:	b083      	sub	sp, #12
 80166e6:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 80166e8:	b184      	cbz	r4, 801670c <osSemaphoreCreate+0x2c>
    if (count == 1) {
 80166ea:	2901      	cmp	r1, #1
 80166ec:	d003      	beq.n	80166f6 <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80166ee:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 80166f0:	4620      	mov	r0, r4
 80166f2:	b003      	add	sp, #12
 80166f4:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80166f6:	2200      	movs	r2, #0
 80166f8:	2503      	movs	r5, #3
 80166fa:	4623      	mov	r3, r4
 80166fc:	4611      	mov	r1, r2
 80166fe:	9500      	str	r5, [sp, #0]
 8016700:	f000 fa08 	bl	8016b14 <xQueueGenericCreateStatic>
 8016704:	4604      	mov	r4, r0
}
 8016706:	4620      	mov	r0, r4
 8016708:	b003      	add	sp, #12
 801670a:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 801670c:	2901      	cmp	r1, #1
 801670e:	d1ef      	bne.n	80166f0 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8016710:	4621      	mov	r1, r4
 8016712:	2203      	movs	r2, #3
 8016714:	f000 fa56 	bl	8016bc4 <xQueueGenericCreate>
 8016718:	4604      	mov	r4, r0
 801671a:	2800      	cmp	r0, #0
 801671c:	d0e8      	beq.n	80166f0 <osSemaphoreCreate+0x10>
 801671e:	2300      	movs	r3, #0
 8016720:	461a      	mov	r2, r3
 8016722:	4619      	mov	r1, r3
 8016724:	f000 fa80 	bl	8016c28 <xQueueGenericSend>
 8016728:	e7e2      	b.n	80166f0 <osSemaphoreCreate+0x10>
 801672a:	bf00      	nop

0801672c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801672c:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801672e:	2400      	movs	r4, #0
{
 8016730:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8016732:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8016734:	b310      	cbz	r0, 801677c <osSemaphoreWait+0x50>
 8016736:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801673a:	b933      	cbnz	r3, 801674a <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801673c:	f000 fd0e 	bl	801715c <xQueueSemaphoreTake>
 8016740:	2801      	cmp	r0, #1
 8016742:	d118      	bne.n	8016776 <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8016744:	2000      	movs	r0, #0
}
 8016746:	b002      	add	sp, #8
 8016748:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801674a:	aa01      	add	r2, sp, #4
 801674c:	4621      	mov	r1, r4
 801674e:	f000 fde9 	bl	8017324 <xQueueReceiveFromISR>
 8016752:	2801      	cmp	r0, #1
 8016754:	d10f      	bne.n	8016776 <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8016756:	9b01      	ldr	r3, [sp, #4]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d0f3      	beq.n	8016744 <osSemaphoreWait+0x18>
 801675c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016764:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016768:	f3bf 8f4f 	dsb	sy
 801676c:	f3bf 8f6f 	isb	sy
  return osOK;
 8016770:	4620      	mov	r0, r4
}
 8016772:	b002      	add	sp, #8
 8016774:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8016776:	20ff      	movs	r0, #255	; 0xff
}
 8016778:	b002      	add	sp, #8
 801677a:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 801677c:	2080      	movs	r0, #128	; 0x80
}
 801677e:	b002      	add	sp, #8
 8016780:	bd10      	pop	{r4, pc}
 8016782:	bf00      	nop

08016784 <osSemaphoreRelease>:
 8016784:	b510      	push	{r4, lr}
 8016786:	2400      	movs	r4, #0
 8016788:	b082      	sub	sp, #8
 801678a:	9401      	str	r4, [sp, #4]
 801678c:	f3ef 8305 	mrs	r3, IPSR
 8016790:	b19b      	cbz	r3, 80167ba <osSemaphoreRelease+0x36>
 8016792:	a901      	add	r1, sp, #4
 8016794:	f000 fbba 	bl	8016f0c <xQueueGiveFromISR>
 8016798:	2801      	cmp	r0, #1
 801679a:	d114      	bne.n	80167c6 <osSemaphoreRelease+0x42>
 801679c:	9b01      	ldr	r3, [sp, #4]
 801679e:	b1ab      	cbz	r3, 80167cc <osSemaphoreRelease+0x48>
 80167a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80167a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80167ac:	f3bf 8f4f 	dsb	sy
 80167b0:	f3bf 8f6f 	isb	sy
 80167b4:	4620      	mov	r0, r4
 80167b6:	b002      	add	sp, #8
 80167b8:	bd10      	pop	{r4, pc}
 80167ba:	461a      	mov	r2, r3
 80167bc:	4619      	mov	r1, r3
 80167be:	f000 fa33 	bl	8016c28 <xQueueGenericSend>
 80167c2:	2801      	cmp	r0, #1
 80167c4:	d002      	beq.n	80167cc <osSemaphoreRelease+0x48>
 80167c6:	20ff      	movs	r0, #255	; 0xff
 80167c8:	b002      	add	sp, #8
 80167ca:	bd10      	pop	{r4, pc}
 80167cc:	2000      	movs	r0, #0
 80167ce:	b002      	add	sp, #8
 80167d0:	bd10      	pop	{r4, pc}
 80167d2:	bf00      	nop

080167d4 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80167d4:	6882      	ldr	r2, [r0, #8]
 80167d6:	b15a      	cbz	r2, 80167f0 <osMessageCreate+0x1c>
 80167d8:	68c3      	ldr	r3, [r0, #12]
 80167da:	b14b      	cbz	r3, 80167f0 <osMessageCreate+0x1c>
{
 80167dc:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80167de:	2400      	movs	r4, #0
{
 80167e0:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80167e2:	e9d0 0100 	ldrd	r0, r1, [r0]
 80167e6:	9400      	str	r4, [sp, #0]
 80167e8:	f000 f994 	bl	8016b14 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80167ec:	b002      	add	sp, #8
 80167ee:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80167f0:	2200      	movs	r2, #0
 80167f2:	e9d0 0100 	ldrd	r0, r1, [r0]
 80167f6:	f000 b9e5 	b.w	8016bc4 <xQueueGenericCreate>
 80167fa:	bf00      	nop

080167fc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80167fc:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80167fe:	2400      	movs	r4, #0
{
 8016800:	b084      	sub	sp, #16
 8016802:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8016804:	9403      	str	r4, [sp, #12]
 8016806:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 801680a:	b15b      	cbz	r3, 8016824 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801680c:	4623      	mov	r3, r4
 801680e:	aa03      	add	r2, sp, #12
 8016810:	a901      	add	r1, sp, #4
 8016812:	f000 fb09 	bl	8016e28 <xQueueGenericSendFromISR>
 8016816:	2801      	cmp	r0, #1
 8016818:	d10c      	bne.n	8016834 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801681a:	9b03      	ldr	r3, [sp, #12]
 801681c:	b96b      	cbnz	r3, 801683a <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 801681e:	2000      	movs	r0, #0
}
 8016820:	b004      	add	sp, #16
 8016822:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8016824:	2a01      	cmp	r2, #1
 8016826:	a901      	add	r1, sp, #4
 8016828:	bf38      	it	cc
 801682a:	2201      	movcc	r2, #1
 801682c:	f000 f9fc 	bl	8016c28 <xQueueGenericSend>
 8016830:	2801      	cmp	r0, #1
 8016832:	d0f4      	beq.n	801681e <osMessagePut+0x22>
      return osErrorOS;
 8016834:	20ff      	movs	r0, #255	; 0xff
}
 8016836:	b004      	add	sp, #16
 8016838:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 801683a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801683e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016842:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016846:	f3bf 8f4f 	dsb	sy
 801684a:	f3bf 8f6f 	isb	sy
  return osOK;
 801684e:	4620      	mov	r0, r4
}
 8016850:	b004      	add	sp, #16
 8016852:	bd10      	pop	{r4, pc}

08016854 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016854:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8016856:	2600      	movs	r6, #0
{
 8016858:	b084      	sub	sp, #16
 801685a:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 801685c:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 8016860:	b379      	cbz	r1, 80168c2 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8016862:	460b      	mov	r3, r1
 8016864:	9600      	str	r6, [sp, #0]
 8016866:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801686a:	b991      	cbnz	r1, 8016892 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801686c:	a902      	add	r1, sp, #8
 801686e:	4618      	mov	r0, r3
 8016870:	4615      	mov	r5, r2
 8016872:	f000 fbab 	bl	8016fcc <xQueueReceive>
 8016876:	2801      	cmp	r0, #1
 8016878:	d02d      	beq.n	80168d6 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801687a:	2d00      	cmp	r5, #0
 801687c:	bf18      	it	ne
 801687e:	2540      	movne	r5, #64	; 0x40
 8016880:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 8016882:	ab04      	add	r3, sp, #16
 8016884:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016888:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801688c:	4620      	mov	r0, r4
 801688e:	b004      	add	sp, #16
 8016890:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016892:	466a      	mov	r2, sp
 8016894:	4618      	mov	r0, r3
 8016896:	a902      	add	r1, sp, #8
 8016898:	f000 fd44 	bl	8017324 <xQueueReceiveFromISR>
      event.status = osOK;
 801689c:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 801689e:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80168a0:	bf0c      	ite	eq
 80168a2:	2210      	moveq	r2, #16
 80168a4:	2200      	movne	r2, #0
 80168a6:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d0ea      	beq.n	8016882 <osMessageGet+0x2e>
 80168ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80168b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80168b8:	f3bf 8f4f 	dsb	sy
 80168bc:	f3bf 8f6f 	isb	sy
 80168c0:	e7df      	b.n	8016882 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 80168c2:	2380      	movs	r3, #128	; 0x80
 80168c4:	9301      	str	r3, [sp, #4]
    return event;
 80168c6:	ab04      	add	r3, sp, #16
 80168c8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80168cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80168d0:	4620      	mov	r0, r4
 80168d2:	b004      	add	sp, #16
 80168d4:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80168d6:	2310      	movs	r3, #16
 80168d8:	9301      	str	r3, [sp, #4]
 80168da:	e7d2      	b.n	8016882 <osMessageGet+0x2e>

080168dc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168dc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80168e0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80168e4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80168e6:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80168e8:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168ea:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168ec:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80168f0:	4770      	bx	lr
 80168f2:	bf00      	nop

080168f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80168f4:	2300      	movs	r3, #0
 80168f6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80168f8:	4770      	bx	lr
 80168fa:	bf00      	nop

080168fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80168fc:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80168fe:	6802      	ldr	r2, [r0, #0]
{
 8016900:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016902:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8016904:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8016906:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016908:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801690a:	689c      	ldr	r4, [r3, #8]
 801690c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801690e:	6099      	str	r1, [r3, #8]
}
 8016910:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8016914:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8016916:	6002      	str	r2, [r0, #0]
}
 8016918:	4770      	bx	lr
 801691a:	bf00      	nop

0801691c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801691c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801691e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016920:	1c6b      	adds	r3, r5, #1
 8016922:	d010      	beq.n	8016946 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016924:	f100 0308 	add.w	r3, r0, #8
 8016928:	461c      	mov	r4, r3
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	681a      	ldr	r2, [r3, #0]
 801692e:	42aa      	cmp	r2, r5
 8016930:	d9fa      	bls.n	8016928 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8016932:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8016934:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8016936:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016938:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801693a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801693c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 801693e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8016940:	6002      	str	r2, [r0, #0]
}
 8016942:	bc30      	pop	{r4, r5}
 8016944:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8016946:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8016948:	6863      	ldr	r3, [r4, #4]
 801694a:	e7f2      	b.n	8016932 <vListInsert+0x16>

0801694c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801694c:	6903      	ldr	r3, [r0, #16]
{
 801694e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016950:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016952:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8016956:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8016958:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801695c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801695e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8016960:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016964:	bf08      	it	eq
 8016966:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8016968:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 801696a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801696c:	3a01      	subs	r2, #1
 801696e:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8016970:	6818      	ldr	r0, [r3, #0]
}
 8016972:	4770      	bx	lr

08016974 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016974:	b570      	push	{r4, r5, r6, lr}
 8016976:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016978:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 801697a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801697c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801697e:	b92a      	cbnz	r2, 801698c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016980:	6805      	ldr	r5, [r0, #0]
 8016982:	b365      	cbz	r5, 80169de <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016984:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016986:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016988:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 801698a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 801698c:	b97d      	cbnz	r5, 80169ae <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801698e:	6840      	ldr	r0, [r0, #4]
 8016990:	f00e feda 	bl	8025748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016994:	6863      	ldr	r3, [r4, #4]
 8016996:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016998:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801699a:	68a2      	ldr	r2, [r4, #8]
 801699c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801699e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80169a0:	d319      	bcc.n	80169d6 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80169a2:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169a4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80169a6:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80169a8:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169aa:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80169ac:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80169ae:	68c0      	ldr	r0, [r0, #12]
 80169b0:	f00e feca 	bl	8025748 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80169b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80169b6:	68e3      	ldr	r3, [r4, #12]
 80169b8:	4251      	negs	r1, r2
 80169ba:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80169bc:	6822      	ldr	r2, [r4, #0]
 80169be:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80169c0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80169c2:	d202      	bcs.n	80169ca <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80169c4:	68a3      	ldr	r3, [r4, #8]
 80169c6:	440b      	add	r3, r1
 80169c8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80169ca:	2d02      	cmp	r5, #2
 80169cc:	d00d      	beq.n	80169ea <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169ce:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80169d0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169d2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80169d4:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169d6:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80169d8:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169da:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80169dc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80169de:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80169e0:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80169e2:	f001 fbbf 	bl	8018164 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80169e6:	60a5      	str	r5, [r4, #8]
 80169e8:	e7ce      	b.n	8016988 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80169ea:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 80169ec:	f04f 0000 	mov.w	r0, #0
 80169f0:	bf38      	it	cc
 80169f2:	2601      	movcc	r6, #1
 80169f4:	e7c8      	b.n	8016988 <prvCopyDataToQueue+0x14>
 80169f6:	bf00      	nop

080169f8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80169f8:	b570      	push	{r4, r5, r6, lr}
 80169fa:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80169fc:	f002 f84a 	bl	8018a94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016a00:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8016a04:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016a06:	2c00      	cmp	r4, #0
 8016a08:	dd14      	ble.n	8016a34 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a0a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8016a0e:	e003      	b.n	8016a18 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016a10:	1e63      	subs	r3, r4, #1
 8016a12:	b2da      	uxtb	r2, r3
 8016a14:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016a16:	b16a      	cbz	r2, 8016a34 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016a18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a1a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016a1c:	b153      	cbz	r3, 8016a34 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a1e:	f001 fa89 	bl	8017f34 <xTaskRemoveFromEventList>
 8016a22:	2800      	cmp	r0, #0
 8016a24:	d0f4      	beq.n	8016a10 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8016a26:	f001 fb29 	bl	801807c <vTaskMissedYield>
			--cTxLock;
 8016a2a:	1e63      	subs	r3, r4, #1
 8016a2c:	b2da      	uxtb	r2, r3
 8016a2e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016a30:	2a00      	cmp	r2, #0
 8016a32:	d1f1      	bne.n	8016a18 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016a34:	23ff      	movs	r3, #255	; 0xff
 8016a36:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016a3a:	f002 f851 	bl	8018ae0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016a3e:	f002 f829 	bl	8018a94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016a42:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8016a46:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016a48:	2c00      	cmp	r4, #0
 8016a4a:	dd14      	ble.n	8016a76 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016a4c:	f105 0610 	add.w	r6, r5, #16
 8016a50:	e003      	b.n	8016a5a <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016a52:	1e63      	subs	r3, r4, #1
 8016a54:	b2da      	uxtb	r2, r3
 8016a56:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016a58:	b16a      	cbz	r2, 8016a76 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016a5a:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016a5c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016a5e:	b153      	cbz	r3, 8016a76 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016a60:	f001 fa68 	bl	8017f34 <xTaskRemoveFromEventList>
 8016a64:	2800      	cmp	r0, #0
 8016a66:	d0f4      	beq.n	8016a52 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8016a68:	f001 fb08 	bl	801807c <vTaskMissedYield>
				--cRxLock;
 8016a6c:	1e63      	subs	r3, r4, #1
 8016a6e:	b2da      	uxtb	r2, r3
 8016a70:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016a72:	2a00      	cmp	r2, #0
 8016a74:	d1f1      	bne.n	8016a5a <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016a76:	23ff      	movs	r3, #255	; 0xff
 8016a78:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8016a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8016a80:	f002 b82e 	b.w	8018ae0 <vPortExitCritical>

08016a84 <xQueueGenericReset>:
{
 8016a84:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8016a86:	b1e0      	cbz	r0, 8016ac2 <xQueueGenericReset+0x3e>
 8016a88:	4604      	mov	r4, r0
 8016a8a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8016a8c:	f002 f802 	bl	8018a94 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016a90:	6822      	ldr	r2, [r4, #0]
 8016a92:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a96:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016a98:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016a9c:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016a9e:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016aa0:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016aa2:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016aa4:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8016aa6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016aa8:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016aaa:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8016aac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016ab0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8016ab4:	b985      	cbnz	r5, 8016ad8 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ab6:	6923      	ldr	r3, [r4, #16]
 8016ab8:	b9d3      	cbnz	r3, 8016af0 <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 8016aba:	f002 f811 	bl	8018ae0 <vPortExitCritical>
}
 8016abe:	2001      	movs	r0, #1
 8016ac0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016ac2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ac6:	b672      	cpsid	i
 8016ac8:	f383 8811 	msr	BASEPRI, r3
 8016acc:	f3bf 8f6f 	isb	sy
 8016ad0:	f3bf 8f4f 	dsb	sy
 8016ad4:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016ad6:	e7fe      	b.n	8016ad6 <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016ad8:	f104 0010 	add.w	r0, r4, #16
 8016adc:	f7ff fefe 	bl	80168dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016ae0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016ae4:	f7ff fefa 	bl	80168dc <vListInitialise>
	taskEXIT_CRITICAL();
 8016ae8:	f001 fffa 	bl	8018ae0 <vPortExitCritical>
}
 8016aec:	2001      	movs	r0, #1
 8016aee:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016af0:	f104 0010 	add.w	r0, r4, #16
 8016af4:	f001 fa1e 	bl	8017f34 <xTaskRemoveFromEventList>
 8016af8:	2800      	cmp	r0, #0
 8016afa:	d0de      	beq.n	8016aba <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8016afc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b04:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016b08:	f3bf 8f4f 	dsb	sy
 8016b0c:	f3bf 8f6f 	isb	sy
 8016b10:	e7d3      	b.n	8016aba <xQueueGenericReset+0x36>
 8016b12:	bf00      	nop

08016b14 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016b14:	b950      	cbnz	r0, 8016b2c <xQueueGenericCreateStatic+0x18>
 8016b16:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b1a:	b672      	cpsid	i
 8016b1c:	f383 8811 	msr	BASEPRI, r3
 8016b20:	f3bf 8f6f 	isb	sy
 8016b24:	f3bf 8f4f 	dsb	sy
 8016b28:	b662      	cpsie	i
 8016b2a:	e7fe      	b.n	8016b2a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8016b2c:	b17b      	cbz	r3, 8016b4e <xQueueGenericCreateStatic+0x3a>
	{
 8016b2e:	b510      	push	{r4, lr}
 8016b30:	460c      	mov	r4, r1
 8016b32:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016b34:	b33a      	cbz	r2, 8016b86 <xQueueGenericCreateStatic+0x72>
 8016b36:	b9a9      	cbnz	r1, 8016b64 <xQueueGenericCreateStatic+0x50>
 8016b38:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b3c:	b672      	cpsid	i
 8016b3e:	f383 8811 	msr	BASEPRI, r3
 8016b42:	f3bf 8f6f 	isb	sy
 8016b46:	f3bf 8f4f 	dsb	sy
 8016b4a:	b662      	cpsie	i
 8016b4c:	e7fe      	b.n	8016b4c <xQueueGenericCreateStatic+0x38>
 8016b4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b52:	b672      	cpsid	i
 8016b54:	f383 8811 	msr	BASEPRI, r3
 8016b58:	f3bf 8f6f 	isb	sy
 8016b5c:	f3bf 8f4f 	dsb	sy
 8016b60:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8016b62:	e7fe      	b.n	8016b62 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016b64:	b17a      	cbz	r2, 8016b86 <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016b66:	2148      	movs	r1, #72	; 0x48
 8016b68:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016b6a:	9903      	ldr	r1, [sp, #12]
 8016b6c:	2948      	cmp	r1, #72	; 0x48
 8016b6e:	d017      	beq.n	8016ba0 <xQueueGenericCreateStatic+0x8c>
 8016b70:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b74:	b672      	cpsid	i
 8016b76:	f383 8811 	msr	BASEPRI, r3
 8016b7a:	f3bf 8f6f 	isb	sy
 8016b7e:	f3bf 8f4f 	dsb	sy
 8016b82:	b662      	cpsie	i
 8016b84:	e7fe      	b.n	8016b84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016b86:	2c00      	cmp	r4, #0
 8016b88:	d0ed      	beq.n	8016b66 <xQueueGenericCreateStatic+0x52>
 8016b8a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b8e:	b672      	cpsid	i
 8016b90:	f383 8811 	msr	BASEPRI, r3
 8016b94:	f3bf 8f6f 	isb	sy
 8016b98:	f3bf 8f4f 	dsb	sy
 8016b9c:	b662      	cpsie	i
 8016b9e:	e7fe      	b.n	8016b9e <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016ba0:	2c00      	cmp	r4, #0
 8016ba2:	bf08      	it	eq
 8016ba4:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016ba6:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8016ba8:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016baa:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016bac:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8016bb0:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8016bb2:	641c      	str	r4, [r3, #64]	; 0x40
 8016bb4:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016bb6:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016bb8:	f7ff ff64 	bl	8016a84 <xQueueGenericReset>
	}
 8016bbc:	9b01      	ldr	r3, [sp, #4]
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	b004      	add	sp, #16
 8016bc2:	bd10      	pop	{r4, pc}

08016bc4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016bc4:	b950      	cbnz	r0, 8016bdc <xQueueGenericCreate+0x18>
 8016bc6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016bca:	b672      	cpsid	i
 8016bcc:	f383 8811 	msr	BASEPRI, r3
 8016bd0:	f3bf 8f6f 	isb	sy
 8016bd4:	f3bf 8f4f 	dsb	sy
 8016bd8:	b662      	cpsie	i
 8016bda:	e7fe      	b.n	8016bda <xQueueGenericCreate+0x16>
	{
 8016bdc:	b570      	push	{r4, r5, r6, lr}
 8016bde:	4605      	mov	r5, r0
 8016be0:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8016be2:	b979      	cbnz	r1, 8016c04 <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016be4:	2048      	movs	r0, #72	; 0x48
 8016be6:	f002 f8bf 	bl	8018d68 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016bea:	4604      	mov	r4, r0
 8016bec:	b1c0      	cbz	r0, 8016c20 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016bee:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016bf2:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016bf4:	2101      	movs	r1, #1
 8016bf6:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8016bf8:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016bfc:	f7ff ff42 	bl	8016a84 <xQueueGenericReset>
	}
 8016c00:	4620      	mov	r0, r4
 8016c02:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c04:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016c08:	3048      	adds	r0, #72	; 0x48
 8016c0a:	f002 f8ad 	bl	8018d68 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016c0e:	4604      	mov	r4, r0
 8016c10:	b130      	cbz	r0, 8016c20 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c12:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016c14:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c18:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016c1c:	6003      	str	r3, [r0, #0]
 8016c1e:	e7e9      	b.n	8016bf4 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016c20:	2400      	movs	r4, #0
	}
 8016c22:	4620      	mov	r0, r4
 8016c24:	bd70      	pop	{r4, r5, r6, pc}
 8016c26:	bf00      	nop

08016c28 <xQueueGenericSend>:
{
 8016c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c2c:	b085      	sub	sp, #20
 8016c2e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8016c30:	2800      	cmp	r0, #0
 8016c32:	f000 8083 	beq.w	8016d3c <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016c36:	460f      	mov	r7, r1
 8016c38:	4604      	mov	r4, r0
 8016c3a:	461e      	mov	r6, r3
 8016c3c:	2900      	cmp	r1, #0
 8016c3e:	d06b      	beq.n	8016d18 <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016c40:	2e02      	cmp	r6, #2
 8016c42:	d10d      	bne.n	8016c60 <xQueueGenericSend+0x38>
 8016c44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016c46:	2b01      	cmp	r3, #1
 8016c48:	d00a      	beq.n	8016c60 <xQueueGenericSend+0x38>
 8016c4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016c4e:	b672      	cpsid	i
 8016c50:	f383 8811 	msr	BASEPRI, r3
 8016c54:	f3bf 8f6f 	isb	sy
 8016c58:	f3bf 8f4f 	dsb	sy
 8016c5c:	b662      	cpsie	i
 8016c5e:	e7fe      	b.n	8016c5e <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016c60:	f001 fa18 	bl	8018094 <xTaskGetSchedulerState>
 8016c64:	2800      	cmp	r0, #0
 8016c66:	d074      	beq.n	8016d52 <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c68:	f1a6 0802 	sub.w	r8, r6, #2
 8016c6c:	2500      	movs	r5, #0
 8016c6e:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8016c72:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c74:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016c78:	e007      	b.n	8016c8a <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8016c7a:	f001 ff31 	bl	8018ae0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8016c7e:	4620      	mov	r0, r4
 8016c80:	f7ff feba 	bl	80169f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016c84:	f001 f8c6 	bl	8017e14 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c88:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8016c8a:	f001 ff03 	bl	8018a94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8016c90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016c92:	4290      	cmp	r0, r2
 8016c94:	d36b      	bcc.n	8016d6e <xQueueGenericSend+0x146>
 8016c96:	f1b8 0f00 	cmp.w	r8, #0
 8016c9a:	d168      	bne.n	8016d6e <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 8016c9c:	9b01      	ldr	r3, [sp, #4]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d07d      	beq.n	8016d9e <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8016ca2:	2d00      	cmp	r5, #0
 8016ca4:	d046      	beq.n	8016d34 <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 8016ca6:	f001 ff1b 	bl	8018ae0 <vPortExitCritical>
		vTaskSuspendAll();
 8016caa:	f000 ff57 	bl	8017b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016cae:	f001 fef1 	bl	8018a94 <vPortEnterCritical>
 8016cb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016cb6:	2bff      	cmp	r3, #255	; 0xff
 8016cb8:	d101      	bne.n	8016cbe <xQueueGenericSend+0x96>
 8016cba:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8016cbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016cc2:	2bff      	cmp	r3, #255	; 0xff
 8016cc4:	d101      	bne.n	8016cca <xQueueGenericSend+0xa2>
 8016cc6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8016cca:	f001 ff09 	bl	8018ae0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016cce:	a901      	add	r1, sp, #4
 8016cd0:	a802      	add	r0, sp, #8
 8016cd2:	f001 f987 	bl	8017fe4 <xTaskCheckForTimeOut>
 8016cd6:	2800      	cmp	r0, #0
 8016cd8:	d165      	bne.n	8016da6 <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 8016cda:	f001 fedb 	bl	8018a94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016cde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016ce0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d1c9      	bne.n	8016c7a <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 8016ce6:	f001 fefb 	bl	8018ae0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016cea:	9901      	ldr	r1, [sp, #4]
 8016cec:	f104 0010 	add.w	r0, r4, #16
 8016cf0:	f001 f8e4 	bl	8017ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f7ff fe7f 	bl	80169f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016cfa:	f001 f88b 	bl	8017e14 <xTaskResumeAll>
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	d1c2      	bne.n	8016c88 <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8016d02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016d0e:	f3bf 8f4f 	dsb	sy
 8016d12:	f3bf 8f6f 	isb	sy
 8016d16:	e7b7      	b.n	8016c88 <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d18:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d090      	beq.n	8016c40 <xQueueGenericSend+0x18>
 8016d1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d22:	b672      	cpsid	i
 8016d24:	f383 8811 	msr	BASEPRI, r3
 8016d28:	f3bf 8f6f 	isb	sy
 8016d2c:	f3bf 8f4f 	dsb	sy
 8016d30:	b662      	cpsie	i
 8016d32:	e7fe      	b.n	8016d32 <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016d34:	a802      	add	r0, sp, #8
 8016d36:	f001 f949 	bl	8017fcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016d3a:	e7b4      	b.n	8016ca6 <xQueueGenericSend+0x7e>
 8016d3c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d40:	b672      	cpsid	i
 8016d42:	f383 8811 	msr	BASEPRI, r3
 8016d46:	f3bf 8f6f 	isb	sy
 8016d4a:	f3bf 8f4f 	dsb	sy
 8016d4e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016d50:	e7fe      	b.n	8016d50 <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d52:	9b01      	ldr	r3, [sp, #4]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d087      	beq.n	8016c68 <xQueueGenericSend+0x40>
 8016d58:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d5c:	b672      	cpsid	i
 8016d5e:	f383 8811 	msr	BASEPRI, r3
 8016d62:	f3bf 8f6f 	isb	sy
 8016d66:	f3bf 8f4f 	dsb	sy
 8016d6a:	b662      	cpsie	i
 8016d6c:	e7fe      	b.n	8016d6c <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016d6e:	4632      	mov	r2, r6
 8016d70:	4639      	mov	r1, r7
 8016d72:	4620      	mov	r0, r4
 8016d74:	f7ff fdfe 	bl	8016974 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d7a:	b9db      	cbnz	r3, 8016db4 <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 8016d7c:	b148      	cbz	r0, 8016d92 <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8016d7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d86:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016d8a:	f3bf 8f4f 	dsb	sy
 8016d8e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8016d92:	f001 fea5 	bl	8018ae0 <vPortExitCritical>
				return pdPASS;
 8016d96:	2001      	movs	r0, #1
}
 8016d98:	b005      	add	sp, #20
 8016d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8016d9e:	f001 fe9f 	bl	8018ae0 <vPortExitCritical>
					return errQUEUE_FULL;
 8016da2:	4640      	mov	r0, r8
 8016da4:	e7f8      	b.n	8016d98 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 8016da6:	4620      	mov	r0, r4
 8016da8:	f7ff fe26 	bl	80169f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016dac:	f001 f832 	bl	8017e14 <xTaskResumeAll>
			return errQUEUE_FULL;
 8016db0:	2000      	movs	r0, #0
 8016db2:	e7f1      	b.n	8016d98 <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016db4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016db8:	f001 f8bc 	bl	8017f34 <xTaskRemoveFromEventList>
 8016dbc:	2800      	cmp	r0, #0
 8016dbe:	d0e8      	beq.n	8016d92 <xQueueGenericSend+0x16a>
 8016dc0:	e7dd      	b.n	8016d7e <xQueueGenericSend+0x156>
 8016dc2:	bf00      	nop

08016dc4 <xQueueCreateMutexStatic>:
	{
 8016dc4:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016dc6:	2200      	movs	r2, #0
	{
 8016dc8:	4604      	mov	r4, r0
 8016dca:	b082      	sub	sp, #8
 8016dcc:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016dce:	2001      	movs	r0, #1
 8016dd0:	4611      	mov	r1, r2
 8016dd2:	9400      	str	r4, [sp, #0]
 8016dd4:	f7ff fe9e 	bl	8016b14 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8016dd8:	4604      	mov	r4, r0
 8016dda:	b138      	cbz	r0, 8016dec <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016ddc:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016dde:	461a      	mov	r2, r3
 8016de0:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016de2:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016de4:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016de6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016de8:	f7ff ff1e 	bl	8016c28 <xQueueGenericSend>
	}
 8016dec:	4620      	mov	r0, r4
 8016dee:	b002      	add	sp, #8
 8016df0:	bd10      	pop	{r4, pc}
 8016df2:	bf00      	nop

08016df4 <xQueueCreateMutex>:
	{
 8016df4:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016df6:	2048      	movs	r0, #72	; 0x48
 8016df8:	f001 ffb6 	bl	8018d68 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016dfc:	4604      	mov	r4, r0
 8016dfe:	b188      	cbz	r0, 8016e24 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016e00:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8016e02:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016e04:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016e06:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8016e0a:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016e0e:	f7ff fe39 	bl	8016a84 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016e12:	462b      	mov	r3, r5
 8016e14:	462a      	mov	r2, r5
 8016e16:	4629      	mov	r1, r5
 8016e18:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016e1a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016e1c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016e1e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016e20:	f7ff ff02 	bl	8016c28 <xQueueGenericSend>
	}
 8016e24:	4620      	mov	r0, r4
 8016e26:	bd38      	pop	{r3, r4, r5, pc}

08016e28 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8016e28:	2800      	cmp	r0, #0
 8016e2a:	d053      	beq.n	8016ed4 <xQueueGenericSendFromISR+0xac>
{
 8016e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e30:	460e      	mov	r6, r1
 8016e32:	4604      	mov	r4, r0
 8016e34:	4617      	mov	r7, r2
 8016e36:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e38:	b359      	cbz	r1, 8016e92 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016e3a:	2d02      	cmp	r5, #2
 8016e3c:	d10d      	bne.n	8016e5a <xQueueGenericSendFromISR+0x32>
 8016e3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016e40:	2b01      	cmp	r3, #1
 8016e42:	d00a      	beq.n	8016e5a <xQueueGenericSendFromISR+0x32>
 8016e44:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e48:	b672      	cpsid	i
 8016e4a:	f383 8811 	msr	BASEPRI, r3
 8016e4e:	f3bf 8f6f 	isb	sy
 8016e52:	f3bf 8f4f 	dsb	sy
 8016e56:	b662      	cpsie	i
 8016e58:	e7fe      	b.n	8016e58 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e5a:	f001 ff21 	bl	8018ca0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016e5e:	f3ef 8811 	mrs	r8, BASEPRI
 8016e62:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e66:	b672      	cpsid	i
 8016e68:	f383 8811 	msr	BASEPRI, r3
 8016e6c:	f3bf 8f6f 	isb	sy
 8016e70:	f3bf 8f4f 	dsb	sy
 8016e74:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016e76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016e78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	d317      	bcc.n	8016eae <xQueueGenericSendFromISR+0x86>
 8016e7e:	f1a5 0002 	sub.w	r0, r5, #2
 8016e82:	fab0 f080 	clz	r0, r0
 8016e86:	0940      	lsrs	r0, r0, #5
 8016e88:	b988      	cbnz	r0, 8016eae <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016e8a:	f388 8811 	msr	BASEPRI, r8
}
 8016e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d0d0      	beq.n	8016e3a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8016e98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e9c:	b672      	cpsid	i
 8016e9e:	f383 8811 	msr	BASEPRI, r3
 8016ea2:	f3bf 8f6f 	isb	sy
 8016ea6:	f3bf 8f4f 	dsb	sy
 8016eaa:	b662      	cpsie	i
 8016eac:	e7fe      	b.n	8016eac <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016eae:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8016eb0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016eb4:	4631      	mov	r1, r6
 8016eb6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8016eb8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016eba:	f7ff fd5b 	bl	8016974 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8016ebe:	1c6b      	adds	r3, r5, #1
 8016ec0:	d013      	beq.n	8016eea <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016ec2:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8016ec4:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016ec6:	b25b      	sxtb	r3, r3
 8016ec8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8016ecc:	f388 8811 	msr	BASEPRI, r8
}
 8016ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8016ed4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ed8:	b672      	cpsid	i
 8016eda:	f383 8811 	msr	BASEPRI, r3
 8016ede:	f3bf 8f6f 	isb	sy
 8016ee2:	f3bf 8f4f 	dsb	sy
 8016ee6:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016ee8:	e7fe      	b.n	8016ee8 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016eec:	b90b      	cbnz	r3, 8016ef2 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8016eee:	2001      	movs	r0, #1
 8016ef0:	e7cb      	b.n	8016e8a <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016ef2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016ef6:	f001 f81d 	bl	8017f34 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8016efa:	2800      	cmp	r0, #0
 8016efc:	d0f7      	beq.n	8016eee <xQueueGenericSendFromISR+0xc6>
 8016efe:	2f00      	cmp	r7, #0
 8016f00:	d0f5      	beq.n	8016eee <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f02:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8016f04:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f06:	603b      	str	r3, [r7, #0]
 8016f08:	e7bf      	b.n	8016e8a <xQueueGenericSendFromISR+0x62>
 8016f0a:	bf00      	nop

08016f0c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8016f0c:	b380      	cbz	r0, 8016f70 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8016f0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8016f10:	b570      	push	{r4, r5, r6, lr}
 8016f12:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8016f14:	b153      	cbz	r3, 8016f2c <xQueueGiveFromISR+0x20>
 8016f16:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f1a:	b672      	cpsid	i
 8016f1c:	f383 8811 	msr	BASEPRI, r3
 8016f20:	f3bf 8f6f 	isb	sy
 8016f24:	f3bf 8f4f 	dsb	sy
 8016f28:	b662      	cpsie	i
 8016f2a:	e7fe      	b.n	8016f2a <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016f2c:	6803      	ldr	r3, [r0, #0]
 8016f2e:	460d      	mov	r5, r1
 8016f30:	b34b      	cbz	r3, 8016f86 <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f32:	f001 feb5 	bl	8018ca0 <vPortValidateInterruptPriority>
	__asm volatile
 8016f36:	f3ef 8611 	mrs	r6, BASEPRI
 8016f3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f3e:	b672      	cpsid	i
 8016f40:	f383 8811 	msr	BASEPRI, r3
 8016f44:	f3bf 8f6f 	isb	sy
 8016f48:	f3bf 8f4f 	dsb	sy
 8016f4c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016f50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d925      	bls.n	8016fa2 <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f56:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016f5a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8016f5c:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016f5e:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f60:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8016f62:	d022      	beq.n	8016faa <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f64:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8016f66:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f68:	b25b      	sxtb	r3, r3
 8016f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016f6e:	e019      	b.n	8016fa4 <xQueueGiveFromISR+0x98>
	__asm volatile
 8016f70:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f74:	b672      	cpsid	i
 8016f76:	f383 8811 	msr	BASEPRI, r3
 8016f7a:	f3bf 8f6f 	isb	sy
 8016f7e:	f3bf 8f4f 	dsb	sy
 8016f82:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016f84:	e7fe      	b.n	8016f84 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016f86:	6883      	ldr	r3, [r0, #8]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d0d2      	beq.n	8016f32 <xQueueGiveFromISR+0x26>
 8016f8c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f90:	b672      	cpsid	i
 8016f92:	f383 8811 	msr	BASEPRI, r3
 8016f96:	f3bf 8f6f 	isb	sy
 8016f9a:	f3bf 8f4f 	dsb	sy
 8016f9e:	b662      	cpsie	i
 8016fa0:	e7fe      	b.n	8016fa0 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8016fa2:	2000      	movs	r0, #0
	__asm volatile
 8016fa4:	f386 8811 	msr	BASEPRI, r6
}
 8016fa8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016fac:	b90b      	cbnz	r3, 8016fb2 <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8016fae:	2001      	movs	r0, #1
 8016fb0:	e7f8      	b.n	8016fa4 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016fb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016fb6:	f000 ffbd 	bl	8017f34 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8016fba:	2d00      	cmp	r5, #0
 8016fbc:	d0f7      	beq.n	8016fae <xQueueGiveFromISR+0xa2>
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	d0f5      	beq.n	8016fae <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016fc2:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8016fc4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016fc6:	602b      	str	r3, [r5, #0]
 8016fc8:	e7ec      	b.n	8016fa4 <xQueueGiveFromISR+0x98>
 8016fca:	bf00      	nop

08016fcc <xQueueReceive>:
{
 8016fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fd0:	b085      	sub	sp, #20
 8016fd2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8016fd4:	2800      	cmp	r0, #0
 8016fd6:	f000 80a4 	beq.w	8017122 <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016fda:	460d      	mov	r5, r1
 8016fdc:	4604      	mov	r4, r0
 8016fde:	2900      	cmp	r1, #0
 8016fe0:	d047      	beq.n	8017072 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016fe2:	f001 f857 	bl	8018094 <xTaskGetSchedulerState>
 8016fe6:	2800      	cmp	r0, #0
 8016fe8:	d051      	beq.n	801708e <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 8016fea:	f001 fd53 	bl	8018a94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016fee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016ff0:	2e00      	cmp	r6, #0
 8016ff2:	d16b      	bne.n	80170cc <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8016ff4:	9b01      	ldr	r3, [sp, #4]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d035      	beq.n	8017066 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8016ffa:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016ffc:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8017000:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017004:	a802      	add	r0, sp, #8
 8017006:	f000 ffe1 	bl	8017fcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801700a:	f001 fd69 	bl	8018ae0 <vPortExitCritical>
		vTaskSuspendAll();
 801700e:	f000 fda5 	bl	8017b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017012:	f001 fd3f 	bl	8018a94 <vPortEnterCritical>
 8017016:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801701a:	2bff      	cmp	r3, #255	; 0xff
 801701c:	d101      	bne.n	8017022 <xQueueReceive+0x56>
 801701e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8017022:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017026:	2bff      	cmp	r3, #255	; 0xff
 8017028:	d101      	bne.n	801702e <xQueueReceive+0x62>
 801702a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801702e:	f001 fd57 	bl	8018ae0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017032:	a901      	add	r1, sp, #4
 8017034:	a802      	add	r0, sp, #8
 8017036:	f000 ffd5 	bl	8017fe4 <xTaskCheckForTimeOut>
 801703a:	2800      	cmp	r0, #0
 801703c:	d135      	bne.n	80170aa <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 801703e:	f001 fd29 	bl	8018a94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017044:	2b00      	cmp	r3, #0
 8017046:	d056      	beq.n	80170f6 <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 8017048:	f001 fd4a 	bl	8018ae0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801704c:	4620      	mov	r0, r4
 801704e:	f7ff fcd3 	bl	80169f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017052:	f000 fedf 	bl	8017e14 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8017056:	f001 fd1d 	bl	8018a94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801705a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801705c:	2e00      	cmp	r6, #0
 801705e:	d135      	bne.n	80170cc <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8017060:	9b01      	ldr	r3, [sp, #4]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d1d1      	bne.n	801700a <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8017066:	f001 fd3b 	bl	8018ae0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801706a:	2000      	movs	r0, #0
}
 801706c:	b005      	add	sp, #20
 801706e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017072:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8017074:	2b00      	cmp	r3, #0
 8017076:	d0b4      	beq.n	8016fe2 <xQueueReceive+0x16>
	__asm volatile
 8017078:	f04f 0330 	mov.w	r3, #48	; 0x30
 801707c:	b672      	cpsid	i
 801707e:	f383 8811 	msr	BASEPRI, r3
 8017082:	f3bf 8f6f 	isb	sy
 8017086:	f3bf 8f4f 	dsb	sy
 801708a:	b662      	cpsie	i
 801708c:	e7fe      	b.n	801708c <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801708e:	9b01      	ldr	r3, [sp, #4]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d0aa      	beq.n	8016fea <xQueueReceive+0x1e>
 8017094:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017098:	b672      	cpsid	i
 801709a:	f383 8811 	msr	BASEPRI, r3
 801709e:	f3bf 8f6f 	isb	sy
 80170a2:	f3bf 8f4f 	dsb	sy
 80170a6:	b662      	cpsie	i
 80170a8:	e7fe      	b.n	80170a8 <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 80170aa:	4620      	mov	r0, r4
 80170ac:	f7ff fca4 	bl	80169f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80170b0:	f000 feb0 	bl	8017e14 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80170b4:	f001 fcee 	bl	8018a94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80170b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d0d3      	beq.n	8017066 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 80170be:	f001 fd0f 	bl	8018ae0 <vPortExitCritical>
		taskENTER_CRITICAL();
 80170c2:	f001 fce7 	bl	8018a94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170c6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80170c8:	2e00      	cmp	r6, #0
 80170ca:	d0c9      	beq.n	8017060 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80170cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80170ce:	b152      	cbz	r2, 80170e6 <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80170d0:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80170d2:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80170d4:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80170d6:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80170d8:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80170da:	d301      	bcc.n	80170e0 <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80170dc:	6821      	ldr	r1, [r4, #0]
 80170de:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80170e0:	4628      	mov	r0, r5
 80170e2:	f00e fb31 	bl	8025748 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80170e6:	3e01      	subs	r6, #1
 80170e8:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80170ea:	6923      	ldr	r3, [r4, #16]
 80170ec:	bb23      	cbnz	r3, 8017138 <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 80170ee:	f001 fcf7 	bl	8018ae0 <vPortExitCritical>
				return pdPASS;
 80170f2:	2001      	movs	r0, #1
 80170f4:	e7ba      	b.n	801706c <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 80170f6:	f001 fcf3 	bl	8018ae0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80170fa:	9901      	ldr	r1, [sp, #4]
 80170fc:	4640      	mov	r0, r8
 80170fe:	f000 fedd 	bl	8017ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017102:	4620      	mov	r0, r4
 8017104:	f7ff fc78 	bl	80169f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017108:	f000 fe84 	bl	8017e14 <xTaskResumeAll>
 801710c:	2800      	cmp	r0, #0
 801710e:	d1d8      	bne.n	80170c2 <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8017110:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017114:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8017118:	f3bf 8f4f 	dsb	sy
 801711c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8017120:	e7cf      	b.n	80170c2 <xQueueReceive+0xf6>
 8017122:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017126:	b672      	cpsid	i
 8017128:	f383 8811 	msr	BASEPRI, r3
 801712c:	f3bf 8f6f 	isb	sy
 8017130:	f3bf 8f4f 	dsb	sy
 8017134:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8017136:	e7fe      	b.n	8017136 <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017138:	f104 0010 	add.w	r0, r4, #16
 801713c:	f000 fefa 	bl	8017f34 <xTaskRemoveFromEventList>
 8017140:	2800      	cmp	r0, #0
 8017142:	d0d4      	beq.n	80170ee <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8017144:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801714c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017150:	f3bf 8f4f 	dsb	sy
 8017154:	f3bf 8f6f 	isb	sy
 8017158:	e7c9      	b.n	80170ee <xQueueReceive+0x122>
 801715a:	bf00      	nop

0801715c <xQueueSemaphoreTake>:
{
 801715c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801715e:	b085      	sub	sp, #20
 8017160:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8017162:	2800      	cmp	r0, #0
 8017164:	d057      	beq.n	8017216 <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 8017166:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8017168:	4604      	mov	r4, r0
 801716a:	b156      	cbz	r6, 8017182 <xQueueSemaphoreTake+0x26>
 801716c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017170:	b672      	cpsid	i
 8017172:	f383 8811 	msr	BASEPRI, r3
 8017176:	f3bf 8f6f 	isb	sy
 801717a:	f3bf 8f4f 	dsb	sy
 801717e:	b662      	cpsie	i
 8017180:	e7fe      	b.n	8017180 <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017182:	f000 ff87 	bl	8018094 <xTaskGetSchedulerState>
 8017186:	4605      	mov	r5, r0
 8017188:	2800      	cmp	r0, #0
 801718a:	d04f      	beq.n	801722c <xQueueSemaphoreTake+0xd0>
 801718c:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 801718e:	f001 fc81 	bl	8018a94 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017192:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8017194:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017196:	bb8b      	cbnz	r3, 80171fc <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8017198:	9b01      	ldr	r3, [sp, #4]
 801719a:	2b00      	cmp	r3, #0
 801719c:	f000 809f 	beq.w	80172de <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 80171a0:	2d00      	cmp	r5, #0
 80171a2:	d05d      	beq.n	8017260 <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 80171a4:	f001 fc9c 	bl	8018ae0 <vPortExitCritical>
		vTaskSuspendAll();
 80171a8:	f000 fcd8 	bl	8017b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80171ac:	f001 fc72 	bl	8018a94 <vPortEnterCritical>
 80171b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80171b4:	2bff      	cmp	r3, #255	; 0xff
 80171b6:	d101      	bne.n	80171bc <xQueueSemaphoreTake+0x60>
 80171b8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80171bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80171c0:	2bff      	cmp	r3, #255	; 0xff
 80171c2:	d101      	bne.n	80171c8 <xQueueSemaphoreTake+0x6c>
 80171c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80171c8:	f001 fc8a 	bl	8018ae0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80171cc:	a901      	add	r1, sp, #4
 80171ce:	a802      	add	r0, sp, #8
 80171d0:	f000 ff08 	bl	8017fe4 <xTaskCheckForTimeOut>
 80171d4:	2800      	cmp	r0, #0
 80171d6:	d137      	bne.n	8017248 <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 80171d8:	f001 fc5c 	bl	8018a94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80171dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d042      	beq.n	8017268 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 80171e2:	f001 fc7d 	bl	8018ae0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80171e6:	4620      	mov	r0, r4
 80171e8:	f7ff fc06 	bl	80169f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80171ec:	f000 fe12 	bl	8017e14 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80171f0:	f001 fc50 	bl	8018a94 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80171f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80171f6:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d0cd      	beq.n	8017198 <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80171fc:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80171fe:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017200:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017202:	2a00      	cmp	r2, #0
 8017204:	f000 8089 	beq.w	801731a <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017208:	6923      	ldr	r3, [r4, #16]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d174      	bne.n	80172f8 <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 801720e:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8017210:	f001 fc66 	bl	8018ae0 <vPortExitCritical>
				return pdPASS;
 8017214:	e046      	b.n	80172a4 <xQueueSemaphoreTake+0x148>
 8017216:	f04f 0330 	mov.w	r3, #48	; 0x30
 801721a:	b672      	cpsid	i
 801721c:	f383 8811 	msr	BASEPRI, r3
 8017220:	f3bf 8f6f 	isb	sy
 8017224:	f3bf 8f4f 	dsb	sy
 8017228:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 801722a:	e7fe      	b.n	801722a <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801722c:	9b01      	ldr	r3, [sp, #4]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d03b      	beq.n	80172aa <xQueueSemaphoreTake+0x14e>
 8017232:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017236:	b672      	cpsid	i
 8017238:	f383 8811 	msr	BASEPRI, r3
 801723c:	f3bf 8f6f 	isb	sy
 8017240:	f3bf 8f4f 	dsb	sy
 8017244:	b662      	cpsie	i
 8017246:	e7fe      	b.n	8017246 <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 8017248:	4620      	mov	r0, r4
 801724a:	f7ff fbd5 	bl	80169f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801724e:	f000 fde1 	bl	8017e14 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8017252:	f001 fc1f 	bl	8018a94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017256:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017258:	b30b      	cbz	r3, 801729e <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 801725a:	f001 fc41 	bl	8018ae0 <vPortExitCritical>
	return xReturn;
 801725e:	e7c7      	b.n	80171f0 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017260:	a802      	add	r0, sp, #8
 8017262:	f000 feb3 	bl	8017fcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017266:	e79d      	b.n	80171a4 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 8017268:	f001 fc3a 	bl	8018ae0 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801726c:	6823      	ldr	r3, [r4, #0]
 801726e:	b36b      	cbz	r3, 80172cc <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017270:	9901      	ldr	r1, [sp, #4]
 8017272:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8017276:	f000 fe21 	bl	8017ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801727a:	4620      	mov	r0, r4
 801727c:	f7ff fbbc 	bl	80169f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017280:	f000 fdc8 	bl	8017e14 <xTaskResumeAll>
 8017284:	2800      	cmp	r0, #0
 8017286:	d1b3      	bne.n	80171f0 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 8017288:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801728c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017290:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017294:	f3bf 8f4f 	dsb	sy
 8017298:	f3bf 8f6f 	isb	sy
 801729c:	e7a8      	b.n	80171f0 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 801729e:	f001 fc1f 	bl	8018ae0 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80172a2:	b926      	cbnz	r6, 80172ae <xQueueSemaphoreTake+0x152>
}
 80172a4:	4630      	mov	r0, r6
 80172a6:	b005      	add	sp, #20
 80172a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172aa:	4606      	mov	r6, r0
 80172ac:	e76f      	b.n	801718e <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 80172ae:	f001 fbf1 	bl	8018a94 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80172b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80172b4:	b119      	cbz	r1, 80172be <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80172b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80172b8:	6819      	ldr	r1, [r3, #0]
 80172ba:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80172be:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80172c0:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80172c2:	f000 ffaf 	bl	8018224 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80172c6:	f001 fc0b 	bl	8018ae0 <vPortExitCritical>
 80172ca:	e7eb      	b.n	80172a4 <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 80172cc:	f001 fbe2 	bl	8018a94 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80172d0:	68a0      	ldr	r0, [r4, #8]
 80172d2:	f000 feef 	bl	80180b4 <xTaskPriorityInherit>
 80172d6:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80172d8:	f001 fc02 	bl	8018ae0 <vPortExitCritical>
 80172dc:	e7c8      	b.n	8017270 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80172de:	2e00      	cmp	r6, #0
 80172e0:	d0f1      	beq.n	80172c6 <xQueueSemaphoreTake+0x16a>
 80172e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80172e6:	b672      	cpsid	i
 80172e8:	f383 8811 	msr	BASEPRI, r3
 80172ec:	f3bf 8f6f 	isb	sy
 80172f0:	f3bf 8f4f 	dsb	sy
 80172f4:	b662      	cpsie	i
 80172f6:	e7fe      	b.n	80172f6 <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80172f8:	f104 0010 	add.w	r0, r4, #16
 80172fc:	f000 fe1a 	bl	8017f34 <xTaskRemoveFromEventList>
 8017300:	2800      	cmp	r0, #0
 8017302:	d084      	beq.n	801720e <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8017304:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801730c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017310:	f3bf 8f4f 	dsb	sy
 8017314:	f3bf 8f6f 	isb	sy
 8017318:	e779      	b.n	801720e <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801731a:	f000 fff1 	bl	8018300 <pvTaskIncrementMutexHeldCount>
 801731e:	60a0      	str	r0, [r4, #8]
 8017320:	e772      	b.n	8017208 <xQueueSemaphoreTake+0xac>
 8017322:	bf00      	nop

08017324 <xQueueReceiveFromISR>:
{
 8017324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8017328:	b330      	cbz	r0, 8017378 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801732a:	460e      	mov	r6, r1
 801732c:	4604      	mov	r4, r0
 801732e:	4617      	mov	r7, r2
 8017330:	b1a1      	cbz	r1, 801735c <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017332:	f001 fcb5 	bl	8018ca0 <vPortValidateInterruptPriority>
	__asm volatile
 8017336:	f3ef 8911 	mrs	r9, BASEPRI
 801733a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801733e:	b672      	cpsid	i
 8017340:	f383 8811 	msr	BASEPRI, r3
 8017344:	f3bf 8f6f 	isb	sy
 8017348:	f3bf 8f4f 	dsb	sy
 801734c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801734e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017350:	b9ed      	cbnz	r5, 801738e <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8017352:	4628      	mov	r0, r5
	__asm volatile
 8017354:	f389 8811 	msr	BASEPRI, r9
}
 8017358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801735c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801735e:	2b00      	cmp	r3, #0
 8017360:	d0e7      	beq.n	8017332 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8017362:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017366:	b672      	cpsid	i
 8017368:	f383 8811 	msr	BASEPRI, r3
 801736c:	f3bf 8f6f 	isb	sy
 8017370:	f3bf 8f4f 	dsb	sy
 8017374:	b662      	cpsie	i
 8017376:	e7fe      	b.n	8017376 <xQueueReceiveFromISR+0x52>
 8017378:	f04f 0330 	mov.w	r3, #48	; 0x30
 801737c:	b672      	cpsid	i
 801737e:	f383 8811 	msr	BASEPRI, r3
 8017382:	f3bf 8f6f 	isb	sy
 8017386:	f3bf 8f4f 	dsb	sy
 801738a:	b662      	cpsie	i
	configASSERT( pxQueue );
 801738c:	e7fe      	b.n	801738c <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 801738e:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017392:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8017394:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017398:	b142      	cbz	r2, 80173ac <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801739a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801739c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801739e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80173a0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80173a2:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80173a4:	d215      	bcs.n	80173d2 <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80173a6:	4630      	mov	r0, r6
 80173a8:	f00e f9ce 	bl	8025748 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80173ac:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80173ae:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80173b2:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80173b4:	d009      	beq.n	80173ca <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80173b6:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 80173ba:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80173bc:	b25b      	sxtb	r3, r3
 80173be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 80173c2:	f389 8811 	msr	BASEPRI, r9
}
 80173c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80173ca:	6923      	ldr	r3, [r4, #16]
 80173cc:	b923      	cbnz	r3, 80173d8 <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 80173ce:	2001      	movs	r0, #1
 80173d0:	e7c0      	b.n	8017354 <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80173d2:	6821      	ldr	r1, [r4, #0]
 80173d4:	60e1      	str	r1, [r4, #12]
 80173d6:	e7e6      	b.n	80173a6 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80173d8:	f104 0010 	add.w	r0, r4, #16
 80173dc:	f000 fdaa 	bl	8017f34 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80173e0:	2f00      	cmp	r7, #0
 80173e2:	d0f4      	beq.n	80173ce <xQueueReceiveFromISR+0xaa>
 80173e4:	2800      	cmp	r0, #0
 80173e6:	d0f2      	beq.n	80173ce <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80173e8:	2301      	movs	r3, #1
			xReturn = pdPASS;
 80173ea:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 80173ec:	603b      	str	r3, [r7, #0]
 80173ee:	e7b1      	b.n	8017354 <xQueueReceiveFromISR+0x30>

080173f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80173f0:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80173f2:	2300      	movs	r3, #0
 80173f4:	4c08      	ldr	r4, [pc, #32]	; (8017418 <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80173f6:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 80173fa:	b12a      	cbz	r2, 8017408 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80173fc:	3301      	adds	r3, #1
 80173fe:	2b08      	cmp	r3, #8
 8017400:	d1f9      	bne.n	80173f6 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017406:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017408:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801740c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8017410:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017414:	6050      	str	r0, [r2, #4]
	}
 8017416:	4770      	bx	lr
 8017418:	200066e8 	.word	0x200066e8

0801741c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801741c:	b570      	push	{r4, r5, r6, lr}
 801741e:	4604      	mov	r4, r0
 8017420:	460e      	mov	r6, r1
 8017422:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017424:	f001 fb36 	bl	8018a94 <vPortEnterCritical>
 8017428:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801742c:	2bff      	cmp	r3, #255	; 0xff
 801742e:	d102      	bne.n	8017436 <vQueueWaitForMessageRestricted+0x1a>
 8017430:	2300      	movs	r3, #0
 8017432:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8017436:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801743a:	2bff      	cmp	r3, #255	; 0xff
 801743c:	d102      	bne.n	8017444 <vQueueWaitForMessageRestricted+0x28>
 801743e:	2300      	movs	r3, #0
 8017440:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017444:	f001 fb4c 	bl	8018ae0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017448:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801744a:	b123      	cbz	r3, 8017456 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801744c:	4620      	mov	r0, r4
	}
 801744e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8017452:	f7ff bad1 	b.w	80169f8 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017456:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801745a:	462a      	mov	r2, r5
 801745c:	4631      	mov	r1, r6
 801745e:	f000 fd49 	bl	8017ef4 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8017462:	4620      	mov	r0, r4
	}
 8017464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8017468:	f7ff bac6 	b.w	80169f8 <prvUnlockQueue>

0801746c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017470:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017472:	f001 fb0f 	bl	8018a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017476:	4a35      	ldr	r2, [pc, #212]	; (801754c <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8017478:	4d35      	ldr	r5, [pc, #212]	; (8017550 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 801747a:	6813      	ldr	r3, [r2, #0]
 801747c:	3301      	adds	r3, #1
 801747e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017480:	682b      	ldr	r3, [r5, #0]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d034      	beq.n	80174f0 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017486:	4e33      	ldr	r6, [pc, #204]	; (8017554 <prvAddNewTaskToReadyList+0xe8>)
 8017488:	6833      	ldr	r3, [r6, #0]
 801748a:	b343      	cbz	r3, 80174de <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801748c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801748e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8017578 <prvAddNewTaskToReadyList+0x10c>
 8017492:	2201      	movs	r2, #1
		uxTaskNumber++;
 8017494:	4f30      	ldr	r7, [pc, #192]	; (8017558 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8017496:	4931      	ldr	r1, [pc, #196]	; (801755c <prvAddNewTaskToReadyList+0xf0>)
 8017498:	409a      	lsls	r2, r3
 801749a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801749e:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 80174a2:	683b      	ldr	r3, [r7, #0]
 80174a4:	3301      	adds	r3, #1
 80174a6:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80174a8:	680b      	ldr	r3, [r1, #0]
 80174aa:	431a      	orrs	r2, r3
 80174ac:	600a      	str	r2, [r1, #0]
 80174ae:	1d21      	adds	r1, r4, #4
 80174b0:	f7ff fa24 	bl	80168fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80174b4:	f001 fb14 	bl	8018ae0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80174b8:	6833      	ldr	r3, [r6, #0]
 80174ba:	b173      	cbz	r3, 80174da <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80174bc:	682a      	ldr	r2, [r5, #0]
 80174be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80174c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d209      	bcs.n	80174da <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80174c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80174ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80174d2:	f3bf 8f4f 	dsb	sy
 80174d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80174da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80174de:	682a      	ldr	r2, [r5, #0]
 80174e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80174e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80174e4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8017578 <prvAddNewTaskToReadyList+0x10c>
 80174e8:	429a      	cmp	r2, r3
 80174ea:	d8d2      	bhi.n	8017492 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 80174ec:	602c      	str	r4, [r5, #0]
 80174ee:	e7d0      	b.n	8017492 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 80174f0:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80174f2:	6813      	ldr	r3, [r2, #0]
 80174f4:	2b01      	cmp	r3, #1
 80174f6:	d004      	beq.n	8017502 <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 80174f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80174fa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8017578 <prvAddNewTaskToReadyList+0x10c>
 80174fe:	4e15      	ldr	r6, [pc, #84]	; (8017554 <prvAddNewTaskToReadyList+0xe8>)
 8017500:	e7c7      	b.n	8017492 <prvAddNewTaskToReadyList+0x26>
 8017502:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8017578 <prvAddNewTaskToReadyList+0x10c>
 8017506:	4646      	mov	r6, r8
 8017508:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801750c:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801750e:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017510:	f7ff f9e4 	bl	80168dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017514:	42b7      	cmp	r7, r6
 8017516:	d1f9      	bne.n	801750c <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017518:	f8df 9060 	ldr.w	r9, [pc, #96]	; 801757c <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 801751c:	4f10      	ldr	r7, [pc, #64]	; (8017560 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 801751e:	4648      	mov	r0, r9
 8017520:	4e0c      	ldr	r6, [pc, #48]	; (8017554 <prvAddNewTaskToReadyList+0xe8>)
 8017522:	f7ff f9db 	bl	80168dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017526:	4638      	mov	r0, r7
 8017528:	f7ff f9d8 	bl	80168dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801752c:	480d      	ldr	r0, [pc, #52]	; (8017564 <prvAddNewTaskToReadyList+0xf8>)
 801752e:	f7ff f9d5 	bl	80168dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017532:	480d      	ldr	r0, [pc, #52]	; (8017568 <prvAddNewTaskToReadyList+0xfc>)
 8017534:	f7ff f9d2 	bl	80168dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017538:	480c      	ldr	r0, [pc, #48]	; (801756c <prvAddNewTaskToReadyList+0x100>)
 801753a:	f7ff f9cf 	bl	80168dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801753e:	4b0c      	ldr	r3, [pc, #48]	; (8017570 <prvAddNewTaskToReadyList+0x104>)
 8017540:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017544:	4b0b      	ldr	r3, [pc, #44]	; (8017574 <prvAddNewTaskToReadyList+0x108>)
 8017546:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8017548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 801754a:	e7a2      	b.n	8017492 <prvAddNewTaskToReadyList+0x26>
 801754c:	200067c0 	.word	0x200067c0
 8017550:	20006728 	.word	0x20006728
 8017554:	2000681c 	.word	0x2000681c
 8017558:	200067d0 	.word	0x200067d0
 801755c:	200067d4 	.word	0x200067d4
 8017560:	200067ec 	.word	0x200067ec
 8017564:	20006808 	.word	0x20006808
 8017568:	20006834 	.word	0x20006834
 801756c:	20006820 	.word	0x20006820
 8017570:	2000672c 	.word	0x2000672c
 8017574:	20006730 	.word	0x20006730
 8017578:	20006734 	.word	0x20006734
 801757c:	200067d8 	.word	0x200067d8

08017580 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017582:	4b1b      	ldr	r3, [pc, #108]	; (80175f0 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8017584:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017586:	4e1b      	ldr	r6, [pc, #108]	; (80175f4 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8017588:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801758a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801758c:	6833      	ldr	r3, [r6, #0]
 801758e:	1d18      	adds	r0, r3, #4
 8017590:	f7ff f9dc 	bl	801694c <uxListRemove>
 8017594:	b948      	cbnz	r0, 80175aa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017596:	6833      	ldr	r3, [r6, #0]
 8017598:	4917      	ldr	r1, [pc, #92]	; (80175f8 <prvAddCurrentTaskToDelayedList+0x78>)
 801759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801759c:	2301      	movs	r3, #1
 801759e:	fa03 f202 	lsl.w	r2, r3, r2
 80175a2:	680b      	ldr	r3, [r1, #0]
 80175a4:	ea23 0302 	bic.w	r3, r3, r2
 80175a8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80175aa:	1c63      	adds	r3, r4, #1
 80175ac:	d100      	bne.n	80175b0 <prvAddCurrentTaskToDelayedList+0x30>
 80175ae:	b9bf      	cbnz	r7, 80175e0 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80175b0:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80175b2:	6833      	ldr	r3, [r6, #0]
 80175b4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80175b6:	d307      	bcc.n	80175c8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80175b8:	4b10      	ldr	r3, [pc, #64]	; (80175fc <prvAddCurrentTaskToDelayedList+0x7c>)
 80175ba:	6818      	ldr	r0, [r3, #0]
 80175bc:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80175be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80175c2:	3104      	adds	r1, #4
 80175c4:	f7ff b9aa 	b.w	801691c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80175c8:	4b0d      	ldr	r3, [pc, #52]	; (8017600 <prvAddCurrentTaskToDelayedList+0x80>)
 80175ca:	6818      	ldr	r0, [r3, #0]
 80175cc:	6831      	ldr	r1, [r6, #0]
 80175ce:	3104      	adds	r1, #4
 80175d0:	f7ff f9a4 	bl	801691c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80175d4:	4b0b      	ldr	r3, [pc, #44]	; (8017604 <prvAddCurrentTaskToDelayedList+0x84>)
 80175d6:	681a      	ldr	r2, [r3, #0]
 80175d8:	42a2      	cmp	r2, r4
 80175da:	d900      	bls.n	80175de <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 80175dc:	601c      	str	r4, [r3, #0]
}
 80175de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80175e0:	6831      	ldr	r1, [r6, #0]
 80175e2:	4809      	ldr	r0, [pc, #36]	; (8017608 <prvAddCurrentTaskToDelayedList+0x88>)
 80175e4:	3104      	adds	r1, #4
}
 80175e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80175ea:	f7ff b987 	b.w	80168fc <vListInsertEnd>
 80175ee:	bf00      	nop
 80175f0:	20006848 	.word	0x20006848
 80175f4:	20006728 	.word	0x20006728
 80175f8:	200067d4 	.word	0x200067d4
 80175fc:	20006730 	.word	0x20006730
 8017600:	2000672c 	.word	0x2000672c
 8017604:	20006800 	.word	0x20006800
 8017608:	20006820 	.word	0x20006820

0801760c <prvDeleteTCB>:
	{
 801760c:	b510      	push	{r4, lr}
 801760e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017610:	304c      	adds	r0, #76	; 0x4c
 8017612:	f00f f94f 	bl	80268b4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017616:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 801761a:	b173      	cbz	r3, 801763a <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801761c:	2b01      	cmp	r3, #1
 801761e:	d015      	beq.n	801764c <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017620:	2b02      	cmp	r3, #2
 8017622:	d012      	beq.n	801764a <prvDeleteTCB+0x3e>
	__asm volatile
 8017624:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017628:	b672      	cpsid	i
 801762a:	f383 8811 	msr	BASEPRI, r3
 801762e:	f3bf 8f6f 	isb	sy
 8017632:	f3bf 8f4f 	dsb	sy
 8017636:	b662      	cpsie	i
 8017638:	e7fe      	b.n	8017638 <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 801763a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801763c:	f001 fc30 	bl	8018ea0 <vPortFree>
				vPortFree( pxTCB );
 8017640:	4620      	mov	r0, r4
	}
 8017642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8017646:	f001 bc2b 	b.w	8018ea0 <vPortFree>
	}
 801764a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 801764c:	4620      	mov	r0, r4
	}
 801764e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8017652:	f001 bc25 	b.w	8018ea0 <vPortFree>
 8017656:	bf00      	nop

08017658 <prvIdleTask>:
{
 8017658:	4c16      	ldr	r4, [pc, #88]	; (80176b4 <prvIdleTask+0x5c>)
				taskYIELD();
 801765a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 801765e:	4e16      	ldr	r6, [pc, #88]	; (80176b8 <prvIdleTask+0x60>)
 8017660:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8017664:	4d15      	ldr	r5, [pc, #84]	; (80176bc <prvIdleTask+0x64>)
 8017666:	f8df a058 	ldr.w	sl, [pc, #88]	; 80176c0 <prvIdleTask+0x68>
{
 801766a:	b580      	push	{r7, lr}
 801766c:	e011      	b.n	8017692 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 801766e:	f001 fa11 	bl	8018a94 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017672:	68f3      	ldr	r3, [r6, #12]
 8017674:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017676:	1d38      	adds	r0, r7, #4
 8017678:	f7ff f968 	bl	801694c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801767c:	682b      	ldr	r3, [r5, #0]
 801767e:	3b01      	subs	r3, #1
 8017680:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017682:	6823      	ldr	r3, [r4, #0]
 8017684:	3b01      	subs	r3, #1
 8017686:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8017688:	f001 fa2a 	bl	8018ae0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 801768c:	4638      	mov	r0, r7
 801768e:	f7ff ffbd 	bl	801760c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017692:	6823      	ldr	r3, [r4, #0]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d1ea      	bne.n	801766e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017698:	f8da 3000 	ldr.w	r3, [sl]
 801769c:	2b01      	cmp	r3, #1
 801769e:	d905      	bls.n	80176ac <prvIdleTask+0x54>
				taskYIELD();
 80176a0:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80176a4:	f3bf 8f4f 	dsb	sy
 80176a8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80176ac:	f7e9 fde4 	bl	8001278 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80176b0:	e7ef      	b.n	8017692 <prvIdleTask+0x3a>
 80176b2:	bf00      	nop
 80176b4:	200067c4 	.word	0x200067c4
 80176b8:	20006834 	.word	0x20006834
 80176bc:	200067c0 	.word	0x200067c0
 80176c0:	20006734 	.word	0x20006734

080176c4 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 80176c4:	4b1d      	ldr	r3, [pc, #116]	; (801773c <vTaskSwitchContext.part.0+0x78>)
 80176c6:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 80176c8:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 80176ca:	4c1d      	ldr	r4, [pc, #116]	; (8017740 <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 80176cc:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80176ce:	6822      	ldr	r2, [r4, #0]
 80176d0:	6823      	ldr	r3, [r4, #0]
 80176d2:	6812      	ldr	r2, [r2, #0]
 80176d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176d6:	429a      	cmp	r2, r3
 80176d8:	d927      	bls.n	801772a <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80176da:	4b1a      	ldr	r3, [pc, #104]	; (8017744 <vTaskSwitchContext.part.0+0x80>)
 80176dc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80176de:	fab3 f383 	clz	r3, r3
 80176e2:	b2db      	uxtb	r3, r3
 80176e4:	4a18      	ldr	r2, [pc, #96]	; (8017748 <vTaskSwitchContext.part.0+0x84>)
 80176e6:	f1c3 031f 	rsb	r3, r3, #31
 80176ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80176ee:	0099      	lsls	r1, r3, #2
 80176f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80176f4:	5850      	ldr	r0, [r2, r1]
 80176f6:	b950      	cbnz	r0, 801770e <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 80176f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80176fc:	b672      	cpsid	i
 80176fe:	f383 8811 	msr	BASEPRI, r3
 8017702:	f3bf 8f6f 	isb	sy
 8017706:	f3bf 8f4f 	dsb	sy
 801770a:	b662      	cpsie	i
 801770c:	e7fe      	b.n	801770c <vTaskSwitchContext.part.0+0x48>
 801770e:	6858      	ldr	r0, [r3, #4]
 8017710:	3108      	adds	r1, #8
 8017712:	6840      	ldr	r0, [r0, #4]
 8017714:	440a      	add	r2, r1
 8017716:	4290      	cmp	r0, r2
 8017718:	6058      	str	r0, [r3, #4]
 801771a:	d00c      	beq.n	8017736 <vTaskSwitchContext.part.0+0x72>
 801771c:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801771e:	4a0b      	ldr	r2, [pc, #44]	; (801774c <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017720:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017722:	6823      	ldr	r3, [r4, #0]
 8017724:	334c      	adds	r3, #76	; 0x4c
 8017726:	6013      	str	r3, [r2, #0]
}
 8017728:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 801772a:	6820      	ldr	r0, [r4, #0]
 801772c:	6821      	ldr	r1, [r4, #0]
 801772e:	3134      	adds	r1, #52	; 0x34
 8017730:	f7e9 fda4 	bl	800127c <vApplicationStackOverflowHook>
 8017734:	e7d1      	b.n	80176da <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017736:	6840      	ldr	r0, [r0, #4]
 8017738:	6058      	str	r0, [r3, #4]
 801773a:	e7ef      	b.n	801771c <vTaskSwitchContext.part.0+0x58>
 801773c:	2000684c 	.word	0x2000684c
 8017740:	20006728 	.word	0x20006728
 8017744:	200067d4 	.word	0x200067d4
 8017748:	20006734 	.word	0x20006734
 801774c:	200004c4 	.word	0x200004c4

08017750 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8017750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017756:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017758:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801775c:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801775e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8017760:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8017762:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017766:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801776a:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 801776e:	2900      	cmp	r1, #0
 8017770:	d041      	beq.n	80177f6 <prvInitialiseNewTask.constprop.0+0xa6>
 8017772:	f101 3cff 	add.w	ip, r1, #4294967295
 8017776:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 801777a:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801777c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8017780:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8017784:	b10d      	cbz	r5, 801778a <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017786:	458c      	cmp	ip, r1
 8017788:	d1f8      	bne.n	801777c <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801778a:	2300      	movs	r3, #0
 801778c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017790:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8017792:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017796:	1d20      	adds	r0, r4, #4
 8017798:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 801779a:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 801779e:	bf28      	it	cs
 80177a0:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80177a2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80177a4:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80177a6:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80177aa:	f7ff f8a3 	bl	80168f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80177ae:	f104 0018 	add.w	r0, r4, #24
 80177b2:	f7ff f89f 	bl	80168f4 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80177b6:	4651      	mov	r1, sl
 80177b8:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 80177ba:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80177be:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80177c2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80177c4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80177c6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80177c8:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80177cc:	f00d ffe4 	bl	8025798 <memset>
 80177d0:	4b0a      	ldr	r3, [pc, #40]	; (80177fc <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80177d2:	464a      	mov	r2, r9
 80177d4:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80177d6:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80177d8:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80177da:	4b09      	ldr	r3, [pc, #36]	; (8017800 <prvInitialiseNewTask.constprop.0+0xb0>)
 80177dc:	6563      	str	r3, [r4, #84]	; 0x54
 80177de:	4b09      	ldr	r3, [pc, #36]	; (8017804 <prvInitialiseNewTask.constprop.0+0xb4>)
 80177e0:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80177e2:	f001 f92b 	bl	8018a3c <pxPortInitialiseStack>
 80177e6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80177e8:	f1b8 0f00 	cmp.w	r8, #0
 80177ec:	d001      	beq.n	80177f2 <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80177ee:	f8c8 4000 	str.w	r4, [r8]
}
 80177f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80177f6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80177fa:	e7c9      	b.n	8017790 <prvInitialiseNewTask.constprop.0+0x40>
 80177fc:	080475ec 	.word	0x080475ec
 8017800:	0804760c 	.word	0x0804760c
 8017804:	080475cc 	.word	0x080475cc

08017808 <xTaskCreateStatic>:
	{
 8017808:	b530      	push	{r4, r5, lr}
 801780a:	b087      	sub	sp, #28
 801780c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 801780e:	b1e4      	cbz	r4, 801784a <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 8017810:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017812:	b17d      	cbz	r5, 8017834 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8017814:	25b4      	movs	r5, #180	; 0xb4
 8017816:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017818:	9d05      	ldr	r5, [sp, #20]
 801781a:	2db4      	cmp	r5, #180	; 0xb4
 801781c:	d020      	beq.n	8017860 <xTaskCreateStatic+0x58>
 801781e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017822:	b672      	cpsid	i
 8017824:	f383 8811 	msr	BASEPRI, r3
 8017828:	f3bf 8f6f 	isb	sy
 801782c:	f3bf 8f4f 	dsb	sy
 8017830:	b662      	cpsie	i
 8017832:	e7fe      	b.n	8017832 <xTaskCreateStatic+0x2a>
 8017834:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017838:	b672      	cpsid	i
 801783a:	f383 8811 	msr	BASEPRI, r3
 801783e:	f3bf 8f6f 	isb	sy
 8017842:	f3bf 8f4f 	dsb	sy
 8017846:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8017848:	e7fe      	b.n	8017848 <xTaskCreateStatic+0x40>
 801784a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801784e:	b672      	cpsid	i
 8017850:	f383 8811 	msr	BASEPRI, r3
 8017854:	f3bf 8f6f 	isb	sy
 8017858:	f3bf 8f4f 	dsb	sy
 801785c:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 801785e:	e7fe      	b.n	801785e <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017860:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017862:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017864:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017866:	9502      	str	r5, [sp, #8]
 8017868:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801786a:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801786c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801786e:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017872:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017874:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017876:	9401      	str	r4, [sp, #4]
 8017878:	f7ff ff6a 	bl	8017750 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 801787c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801787e:	f7ff fdf5 	bl	801746c <prvAddNewTaskToReadyList>
	}
 8017882:	9804      	ldr	r0, [sp, #16]
 8017884:	b007      	add	sp, #28
 8017886:	bd30      	pop	{r4, r5, pc}

08017888 <xTaskCreate>:
	{
 8017888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801788c:	4607      	mov	r7, r0
 801788e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017890:	0090      	lsls	r0, r2, #2
	{
 8017892:	4615      	mov	r5, r2
 8017894:	4688      	mov	r8, r1
 8017896:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017898:	f001 fa66 	bl	8018d68 <pvPortMalloc>
			if( pxStack != NULL )
 801789c:	b1d8      	cbz	r0, 80178d6 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801789e:	4604      	mov	r4, r0
 80178a0:	20b4      	movs	r0, #180	; 0xb4
 80178a2:	f001 fa61 	bl	8018d68 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80178a6:	4606      	mov	r6, r0
 80178a8:	b1d0      	cbz	r0, 80178e0 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80178aa:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80178ac:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80178ae:	464b      	mov	r3, r9
 80178b0:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80178b2:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80178b6:	4641      	mov	r1, r8
 80178b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80178ba:	4638      	mov	r0, r7
 80178bc:	9602      	str	r6, [sp, #8]
 80178be:	9401      	str	r4, [sp, #4]
 80178c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80178c2:	9400      	str	r4, [sp, #0]
 80178c4:	f7ff ff44 	bl	8017750 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80178c8:	4630      	mov	r0, r6
 80178ca:	f7ff fdcf 	bl	801746c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80178ce:	2001      	movs	r0, #1
	}
 80178d0:	b005      	add	sp, #20
 80178d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80178d6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80178da:	b005      	add	sp, #20
 80178dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80178e0:	4620      	mov	r0, r4
 80178e2:	f001 fadd 	bl	8018ea0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80178e6:	f04f 30ff 	mov.w	r0, #4294967295
 80178ea:	e7f1      	b.n	80178d0 <xTaskCreate+0x48>

080178ec <vTaskSuspend>:
	{
 80178ec:	b570      	push	{r4, r5, r6, lr}
 80178ee:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80178f0:	4e3c      	ldr	r6, [pc, #240]	; (80179e4 <vTaskSuspend+0xf8>)
		taskENTER_CRITICAL();
 80178f2:	f001 f8cf 	bl	8018a94 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80178f6:	2c00      	cmp	r4, #0
 80178f8:	d04e      	beq.n	8017998 <vTaskSuspend+0xac>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80178fa:	1d25      	adds	r5, r4, #4
 80178fc:	4628      	mov	r0, r5
 80178fe:	f7ff f825 	bl	801694c <uxListRemove>
 8017902:	b930      	cbnz	r0, 8017912 <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017904:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017906:	4938      	ldr	r1, [pc, #224]	; (80179e8 <vTaskSuspend+0xfc>)
 8017908:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801790c:	009b      	lsls	r3, r3, #2
 801790e:	58cb      	ldr	r3, [r1, r3]
 8017910:	b35b      	cbz	r3, 801796a <vTaskSuspend+0x7e>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017914:	b11b      	cbz	r3, 801791e <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017916:	f104 0018 	add.w	r0, r4, #24
 801791a:	f7ff f817 	bl	801694c <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801791e:	4629      	mov	r1, r5
 8017920:	4832      	ldr	r0, [pc, #200]	; (80179ec <vTaskSuspend+0x100>)
 8017922:	f7fe ffeb 	bl	80168fc <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017926:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 801792a:	2b01      	cmp	r3, #1
 801792c:	d102      	bne.n	8017934 <vTaskSuspend+0x48>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801792e:	2300      	movs	r3, #0
 8017930:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		if( xSchedulerRunning != pdFALSE )
 8017934:	4d2e      	ldr	r5, [pc, #184]	; (80179f0 <vTaskSuspend+0x104>)
		taskEXIT_CRITICAL();
 8017936:	f001 f8d3 	bl	8018ae0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 801793a:	682b      	ldr	r3, [r5, #0]
 801793c:	b9eb      	cbnz	r3, 801797a <vTaskSuspend+0x8e>
		if( pxTCB == pxCurrentTCB )
 801793e:	6833      	ldr	r3, [r6, #0]
 8017940:	42a3      	cmp	r3, r4
 8017942:	d000      	beq.n	8017946 <vTaskSuspend+0x5a>
	}
 8017944:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 8017946:	682b      	ldr	r3, [r5, #0]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d02c      	beq.n	80179a6 <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
 801794c:	4b29      	ldr	r3, [pc, #164]	; (80179f4 <vTaskSuspend+0x108>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d030      	beq.n	80179b6 <vTaskSuspend+0xca>
 8017954:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017958:	b672      	cpsid	i
 801795a:	f383 8811 	msr	BASEPRI, r3
 801795e:	f3bf 8f6f 	isb	sy
 8017962:	f3bf 8f4f 	dsb	sy
 8017966:	b662      	cpsie	i
 8017968:	e7fe      	b.n	8017968 <vTaskSuspend+0x7c>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801796a:	4923      	ldr	r1, [pc, #140]	; (80179f8 <vTaskSuspend+0x10c>)
 801796c:	2301      	movs	r3, #1
 801796e:	4093      	lsls	r3, r2
 8017970:	680a      	ldr	r2, [r1, #0]
 8017972:	ea22 0203 	bic.w	r2, r2, r3
 8017976:	600a      	str	r2, [r1, #0]
 8017978:	e7cb      	b.n	8017912 <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 801797a:	f001 f88b 	bl	8018a94 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801797e:	4b1f      	ldr	r3, [pc, #124]	; (80179fc <vTaskSuspend+0x110>)
 8017980:	681a      	ldr	r2, [r3, #0]
 8017982:	6812      	ldr	r2, [r2, #0]
 8017984:	b152      	cbz	r2, 801799c <vTaskSuspend+0xb0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017986:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017988:	4b1d      	ldr	r3, [pc, #116]	; (8017a00 <vTaskSuspend+0x114>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801798a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801798c:	68d2      	ldr	r2, [r2, #12]
 801798e:	6852      	ldr	r2, [r2, #4]
 8017990:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8017992:	f001 f8a5 	bl	8018ae0 <vPortExitCritical>
 8017996:	e7d2      	b.n	801793e <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8017998:	6834      	ldr	r4, [r6, #0]
 801799a:	e7ae      	b.n	80178fa <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 801799c:	4b18      	ldr	r3, [pc, #96]	; (8017a00 <vTaskSuspend+0x114>)
 801799e:	f04f 32ff 	mov.w	r2, #4294967295
 80179a2:	601a      	str	r2, [r3, #0]
 80179a4:	e7f5      	b.n	8017992 <vTaskSuspend+0xa6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80179a6:	4911      	ldr	r1, [pc, #68]	; (80179ec <vTaskSuspend+0x100>)
 80179a8:	4a16      	ldr	r2, [pc, #88]	; (8017a04 <vTaskSuspend+0x118>)
 80179aa:	6809      	ldr	r1, [r1, #0]
 80179ac:	6812      	ldr	r2, [r2, #0]
 80179ae:	4291      	cmp	r1, r2
 80179b0:	d10c      	bne.n	80179cc <vTaskSuspend+0xe0>
					pxCurrentTCB = NULL;
 80179b2:	6033      	str	r3, [r6, #0]
	}
 80179b4:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 80179b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80179ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80179c2:	f3bf 8f4f 	dsb	sy
 80179c6:	f3bf 8f6f 	isb	sy
	}
 80179ca:	bd70      	pop	{r4, r5, r6, pc}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80179cc:	4b09      	ldr	r3, [pc, #36]	; (80179f4 <vTaskSuspend+0x108>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	b11b      	cbz	r3, 80179da <vTaskSuspend+0xee>
		xYieldPending = pdTRUE;
 80179d2:	4b0d      	ldr	r3, [pc, #52]	; (8017a08 <vTaskSuspend+0x11c>)
 80179d4:	2201      	movs	r2, #1
 80179d6:	601a      	str	r2, [r3, #0]
	}
 80179d8:	bd70      	pop	{r4, r5, r6, pc}
 80179da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179de:	f7ff be71 	b.w	80176c4 <vTaskSwitchContext.part.0>
 80179e2:	bf00      	nop
 80179e4:	20006728 	.word	0x20006728
 80179e8:	20006734 	.word	0x20006734
 80179ec:	20006820 	.word	0x20006820
 80179f0:	2000681c 	.word	0x2000681c
 80179f4:	200067cc 	.word	0x200067cc
 80179f8:	200067d4 	.word	0x200067d4
 80179fc:	2000672c 	.word	0x2000672c
 8017a00:	20006800 	.word	0x20006800
 8017a04:	200067c0 	.word	0x200067c0
 8017a08:	2000684c 	.word	0x2000684c

08017a0c <vTaskResume>:
		configASSERT( xTaskToResume );
 8017a0c:	b198      	cbz	r0, 8017a36 <vTaskResume+0x2a>
	{
 8017a0e:	b570      	push	{r4, r5, r6, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017a10:	4d23      	ldr	r5, [pc, #140]	; (8017aa0 <vTaskResume+0x94>)
	{
 8017a12:	b082      	sub	sp, #8
 8017a14:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017a16:	682b      	ldr	r3, [r5, #0]
 8017a18:	4283      	cmp	r3, r0
 8017a1a:	d00a      	beq.n	8017a32 <vTaskResume+0x26>
			taskENTER_CRITICAL();
 8017a1c:	f001 f83a 	bl	8018a94 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017a20:	4b20      	ldr	r3, [pc, #128]	; (8017aa4 <vTaskResume+0x98>)
 8017a22:	6962      	ldr	r2, [r4, #20]
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d011      	beq.n	8017a4c <vTaskResume+0x40>
	}
 8017a28:	b002      	add	sp, #8
 8017a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8017a2e:	f001 b857 	b.w	8018ae0 <vPortExitCritical>
	}
 8017a32:	b002      	add	sp, #8
 8017a34:	bd70      	pop	{r4, r5, r6, pc}
 8017a36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017a3a:	b672      	cpsid	i
 8017a3c:	f383 8811 	msr	BASEPRI, r3
 8017a40:	f3bf 8f6f 	isb	sy
 8017a44:	f3bf 8f4f 	dsb	sy
 8017a48:	b662      	cpsie	i
		configASSERT( xTaskToResume );
 8017a4a:	e7fe      	b.n	8017a4a <vTaskResume+0x3e>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8017a4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017a4e:	4a16      	ldr	r2, [pc, #88]	; (8017aa8 <vTaskResume+0x9c>)
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8017a50:	4293      	cmp	r3, r2
 8017a52:	d0e9      	beq.n	8017a28 <vTaskResume+0x1c>
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d1e7      	bne.n	8017a28 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8017a58:	1d21      	adds	r1, r4, #4
 8017a5a:	4608      	mov	r0, r1
 8017a5c:	9101      	str	r1, [sp, #4]
 8017a5e:	f7fe ff75 	bl	801694c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017a62:	4a12      	ldr	r2, [pc, #72]	; (8017aac <vTaskResume+0xa0>)
 8017a64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017a66:	2301      	movs	r3, #1
 8017a68:	6816      	ldr	r6, [r2, #0]
 8017a6a:	4083      	lsls	r3, r0
 8017a6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017a70:	9901      	ldr	r1, [sp, #4]
 8017a72:	4333      	orrs	r3, r6
 8017a74:	6013      	str	r3, [r2, #0]
 8017a76:	4b0e      	ldr	r3, [pc, #56]	; (8017ab0 <vTaskResume+0xa4>)
 8017a78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017a7c:	f7fe ff3e 	bl	80168fc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017a80:	682b      	ldr	r3, [r5, #0]
 8017a82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d3ce      	bcc.n	8017a28 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 8017a8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a92:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017a96:	f3bf 8f4f 	dsb	sy
 8017a9a:	f3bf 8f6f 	isb	sy
 8017a9e:	e7c3      	b.n	8017a28 <vTaskResume+0x1c>
 8017aa0:	20006728 	.word	0x20006728
 8017aa4:	20006820 	.word	0x20006820
 8017aa8:	20006808 	.word	0x20006808
 8017aac:	200067d4 	.word	0x200067d4
 8017ab0:	20006734 	.word	0x20006734

08017ab4 <vTaskStartScheduler>:
{
 8017ab4:	b510      	push	{r4, lr}
 8017ab6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017ab8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017aba:	aa07      	add	r2, sp, #28
 8017abc:	a906      	add	r1, sp, #24
 8017abe:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017ac0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017ac4:	f7e9 fbde 	bl	8001284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017ac8:	4623      	mov	r3, r4
 8017aca:	9a07      	ldr	r2, [sp, #28]
 8017acc:	9400      	str	r4, [sp, #0]
 8017ace:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8017ad2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8017ad6:	491a      	ldr	r1, [pc, #104]	; (8017b40 <vTaskStartScheduler+0x8c>)
 8017ad8:	481a      	ldr	r0, [pc, #104]	; (8017b44 <vTaskStartScheduler+0x90>)
 8017ada:	f7ff fe95 	bl	8017808 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8017ade:	b1f8      	cbz	r0, 8017b20 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8017ae0:	f000 fcfa 	bl	80184d8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8017ae4:	2801      	cmp	r0, #1
 8017ae6:	d11d      	bne.n	8017b24 <vTaskStartScheduler+0x70>
 8017ae8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017aec:	b672      	cpsid	i
 8017aee:	f383 8811 	msr	BASEPRI, r3
 8017af2:	f3bf 8f6f 	isb	sy
 8017af6:	f3bf 8f4f 	dsb	sy
 8017afa:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017afc:	4b12      	ldr	r3, [pc, #72]	; (8017b48 <vTaskStartScheduler+0x94>)
 8017afe:	4a13      	ldr	r2, [pc, #76]	; (8017b4c <vTaskStartScheduler+0x98>)
 8017b00:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8017b02:	4913      	ldr	r1, [pc, #76]	; (8017b50 <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017b04:	334c      	adds	r3, #76	; 0x4c
 8017b06:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8017b08:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8017b0c:	4a11      	ldr	r2, [pc, #68]	; (8017b54 <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8017b0e:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017b10:	4b11      	ldr	r3, [pc, #68]	; (8017b58 <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 8017b12:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017b14:	601c      	str	r4, [r3, #0]
}
 8017b16:	b008      	add	sp, #32
 8017b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8017b1c:	f001 b856 	b.w	8018bcc <xPortStartScheduler>
}
 8017b20:	b008      	add	sp, #32
 8017b22:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017b24:	3001      	adds	r0, #1
 8017b26:	d1fb      	bne.n	8017b20 <vTaskStartScheduler+0x6c>
 8017b28:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b2c:	b672      	cpsid	i
 8017b2e:	f383 8811 	msr	BASEPRI, r3
 8017b32:	f3bf 8f6f 	isb	sy
 8017b36:	f3bf 8f4f 	dsb	sy
 8017b3a:	b662      	cpsie	i
 8017b3c:	e7fe      	b.n	8017b3c <vTaskStartScheduler+0x88>
 8017b3e:	bf00      	nop
 8017b40:	0802e658 	.word	0x0802e658
 8017b44:	08017659 	.word	0x08017659
 8017b48:	20006728 	.word	0x20006728
 8017b4c:	200004c4 	.word	0x200004c4
 8017b50:	20006800 	.word	0x20006800
 8017b54:	2000681c 	.word	0x2000681c
 8017b58:	20006848 	.word	0x20006848

08017b5c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8017b5c:	4a02      	ldr	r2, [pc, #8]	; (8017b68 <vTaskSuspendAll+0xc>)
 8017b5e:	6813      	ldr	r3, [r2, #0]
 8017b60:	3301      	adds	r3, #1
 8017b62:	6013      	str	r3, [r2, #0]
}
 8017b64:	4770      	bx	lr
 8017b66:	bf00      	nop
 8017b68:	200067cc 	.word	0x200067cc

08017b6c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8017b6c:	4b01      	ldr	r3, [pc, #4]	; (8017b74 <xTaskGetTickCount+0x8>)
 8017b6e:	6818      	ldr	r0, [r3, #0]
}
 8017b70:	4770      	bx	lr
 8017b72:	bf00      	nop
 8017b74:	20006848 	.word	0x20006848

08017b78 <xTaskGetTickCountFromISR>:
{
 8017b78:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017b7a:	f001 f891 	bl	8018ca0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8017b7e:	4b01      	ldr	r3, [pc, #4]	; (8017b84 <xTaskGetTickCountFromISR+0xc>)
 8017b80:	6818      	ldr	r0, [r3, #0]
}
 8017b82:	bd08      	pop	{r3, pc}
 8017b84:	20006848 	.word	0x20006848

08017b88 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b88:	4b52      	ldr	r3, [pc, #328]	; (8017cd4 <xTaskIncrementTick+0x14c>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
{
 8017b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b90:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d14c      	bne.n	8017c30 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017b96:	4b50      	ldr	r3, [pc, #320]	; (8017cd8 <xTaskIncrementTick+0x150>)
 8017b98:	681d      	ldr	r5, [r3, #0]
 8017b9a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8017b9c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017b9e:	2d00      	cmp	r5, #0
 8017ba0:	d054      	beq.n	8017c4c <xTaskIncrementTick+0xc4>
 8017ba2:	4b4e      	ldr	r3, [pc, #312]	; (8017cdc <xTaskIncrementTick+0x154>)
 8017ba4:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017ba6:	9b01      	ldr	r3, [sp, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	42ab      	cmp	r3, r5
 8017bac:	d85d      	bhi.n	8017c6a <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017bae:	4e4c      	ldr	r6, [pc, #304]	; (8017ce0 <xTaskIncrementTick+0x158>)
 8017bb0:	6833      	ldr	r3, [r6, #0]
 8017bb2:	681c      	ldr	r4, [r3, #0]
 8017bb4:	2c00      	cmp	r4, #0
 8017bb6:	d07c      	beq.n	8017cb2 <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 8017bb8:	2400      	movs	r4, #0
 8017bba:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8017cf8 <xTaskIncrementTick+0x170>
 8017bbe:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8017cfc <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 8017bc2:	f04f 0a01 	mov.w	sl, #1
 8017bc6:	4f47      	ldr	r7, [pc, #284]	; (8017ce4 <xTaskIncrementTick+0x15c>)
 8017bc8:	e024      	b.n	8017c14 <xTaskIncrementTick+0x8c>
 8017bca:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017bcc:	f7fe febe 	bl	801694c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017bd0:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017bd4:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017bd8:	9900      	ldr	r1, [sp, #0]
 8017bda:	b112      	cbz	r2, 8017be2 <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017bdc:	f7fe feb6 	bl	801694c <uxListRemove>
 8017be0:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 8017be2:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8017be6:	683b      	ldr	r3, [r7, #0]
 8017be8:	fa0a f200 	lsl.w	r2, sl, r0
 8017bec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017bf0:	431a      	orrs	r2, r3
 8017bf2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8017bf6:	603a      	str	r2, [r7, #0]
 8017bf8:	f7fe fe80 	bl	80168fc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017bfc:	f8d9 3000 	ldr.w	r3, [r9]
 8017c00:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8017c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8017c06:	429a      	cmp	r2, r3
 8017c08:	bf28      	it	cs
 8017c0a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c0c:	6833      	ldr	r3, [r6, #0]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d052      	beq.n	8017cba <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c14:	6833      	ldr	r3, [r6, #0]
 8017c16:	68db      	ldr	r3, [r3, #12]
 8017c18:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017c1c:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c20:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8017c24:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c26:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8017c28:	d2cf      	bcs.n	8017bca <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 8017c2a:	9b01      	ldr	r3, [sp, #4]
 8017c2c:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017c2e:	e021      	b.n	8017c74 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 8017c30:	4a2d      	ldr	r2, [pc, #180]	; (8017ce8 <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 8017c32:	2400      	movs	r4, #0
		++uxPendedTicks;
 8017c34:	6813      	ldr	r3, [r2, #0]
 8017c36:	3301      	adds	r3, #1
 8017c38:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8017c3a:	4b2c      	ldr	r3, [pc, #176]	; (8017cec <xTaskIncrementTick+0x164>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8017c3e:	2b00      	cmp	r3, #0
}
 8017c40:	bf0c      	ite	eq
 8017c42:	4620      	moveq	r0, r4
 8017c44:	2001      	movne	r0, #1
 8017c46:	b003      	add	sp, #12
 8017c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8017c4c:	4b24      	ldr	r3, [pc, #144]	; (8017ce0 <xTaskIncrementTick+0x158>)
 8017c4e:	681a      	ldr	r2, [r3, #0]
 8017c50:	6812      	ldr	r2, [r2, #0]
 8017c52:	b1da      	cbz	r2, 8017c8c <xTaskIncrementTick+0x104>
 8017c54:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017c58:	b672      	cpsid	i
 8017c5a:	f383 8811 	msr	BASEPRI, r3
 8017c5e:	f3bf 8f6f 	isb	sy
 8017c62:	f3bf 8f4f 	dsb	sy
 8017c66:	b662      	cpsie	i
 8017c68:	e7fe      	b.n	8017c68 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 8017c6a:	2400      	movs	r4, #0
 8017c6c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8017cf8 <xTaskIncrementTick+0x170>
 8017c70:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8017cfc <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017c74:	f8d9 3000 	ldr.w	r3, [r9]
 8017c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017c7e:	009b      	lsls	r3, r3, #2
 8017c80:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8017c84:	2b02      	cmp	r3, #2
 8017c86:	bf28      	it	cs
 8017c88:	2401      	movcs	r4, #1
 8017c8a:	e7d6      	b.n	8017c3a <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 8017c8c:	4a18      	ldr	r2, [pc, #96]	; (8017cf0 <xTaskIncrementTick+0x168>)
 8017c8e:	6818      	ldr	r0, [r3, #0]
 8017c90:	6811      	ldr	r1, [r2, #0]
 8017c92:	6019      	str	r1, [r3, #0]
 8017c94:	4917      	ldr	r1, [pc, #92]	; (8017cf4 <xTaskIncrementTick+0x16c>)
 8017c96:	6010      	str	r0, [r2, #0]
 8017c98:	680a      	ldr	r2, [r1, #0]
 8017c9a:	3201      	adds	r2, #1
 8017c9c:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c9e:	681a      	ldr	r2, [r3, #0]
 8017ca0:	6812      	ldr	r2, [r2, #0]
 8017ca2:	b97a      	cbnz	r2, 8017cc4 <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8017ca4:	4b0d      	ldr	r3, [pc, #52]	; (8017cdc <xTaskIncrementTick+0x154>)
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	9301      	str	r3, [sp, #4]
 8017caa:	f04f 33ff 	mov.w	r3, #4294967295
 8017cae:	6013      	str	r3, [r2, #0]
 8017cb0:	e779      	b.n	8017ba6 <xTaskIncrementTick+0x1e>
 8017cb2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8017cf8 <xTaskIncrementTick+0x170>
 8017cb6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8017cfc <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017cba:	f04f 33ff 	mov.w	r3, #4294967295
 8017cbe:	9a01      	ldr	r2, [sp, #4]
 8017cc0:	6013      	str	r3, [r2, #0]
					break;
 8017cc2:	e7d7      	b.n	8017c74 <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017cc4:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017cc6:	4a05      	ldr	r2, [pc, #20]	; (8017cdc <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017cc8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017cca:	9201      	str	r2, [sp, #4]
 8017ccc:	68db      	ldr	r3, [r3, #12]
 8017cce:	685b      	ldr	r3, [r3, #4]
 8017cd0:	6013      	str	r3, [r2, #0]
}
 8017cd2:	e768      	b.n	8017ba6 <xTaskIncrementTick+0x1e>
 8017cd4:	200067cc 	.word	0x200067cc
 8017cd8:	20006848 	.word	0x20006848
 8017cdc:	20006800 	.word	0x20006800
 8017ce0:	2000672c 	.word	0x2000672c
 8017ce4:	200067d4 	.word	0x200067d4
 8017ce8:	200067c8 	.word	0x200067c8
 8017cec:	2000684c 	.word	0x2000684c
 8017cf0:	20006730 	.word	0x20006730
 8017cf4:	20006804 	.word	0x20006804
 8017cf8:	20006734 	.word	0x20006734
 8017cfc:	20006728 	.word	0x20006728

08017d00 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8017d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d04:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8017d06:	f000 fec5 	bl	8018a94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8017d0a:	4b38      	ldr	r3, [pc, #224]	; (8017dec <xTaskResumeAll.part.0+0xec>)
 8017d0c:	681a      	ldr	r2, [r3, #0]
 8017d0e:	3a01      	subs	r2, #1
 8017d10:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d159      	bne.n	8017dcc <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017d18:	4b35      	ldr	r3, [pc, #212]	; (8017df0 <xTaskResumeAll.part.0+0xf0>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d055      	beq.n	8017dcc <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017d20:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017e08 <xTaskResumeAll.part.0+0x108>
 8017d24:	f8da 3000 	ldr.w	r3, [sl]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d05c      	beq.n	8017de6 <xTaskResumeAll.part.0+0xe6>
 8017d2c:	4d31      	ldr	r5, [pc, #196]	; (8017df4 <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 8017d2e:	2601      	movs	r6, #1
 8017d30:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8017e0c <xTaskResumeAll.part.0+0x10c>
 8017d34:	4f30      	ldr	r7, [pc, #192]	; (8017df8 <xTaskResumeAll.part.0+0xf8>)
 8017d36:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8017e10 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d3a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8017d3e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017d40:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017d44:	f104 0018 	add.w	r0, r4, #24
 8017d48:	f7fe fe00 	bl	801694c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017d4c:	4658      	mov	r0, fp
 8017d4e:	f7fe fdfd 	bl	801694c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017d52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017d54:	682a      	ldr	r2, [r5, #0]
 8017d56:	4659      	mov	r1, fp
 8017d58:	fa06 f300 	lsl.w	r3, r6, r0
 8017d5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017d60:	4313      	orrs	r3, r2
 8017d62:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8017d66:	602b      	str	r3, [r5, #0]
 8017d68:	f7fe fdc8 	bl	80168fc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d301      	bcc.n	8017d7a <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 8017d76:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017d7a:	f8da 3000 	ldr.w	r3, [sl]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d1db      	bne.n	8017d3a <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d82:	4b1e      	ldr	r3, [pc, #120]	; (8017dfc <xTaskResumeAll.part.0+0xfc>)
 8017d84:	681a      	ldr	r2, [r3, #0]
 8017d86:	6812      	ldr	r2, [r2, #0]
 8017d88:	b342      	cbz	r2, 8017ddc <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d8a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017d8c:	4b1c      	ldr	r3, [pc, #112]	; (8017e00 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d8e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017d90:	68d2      	ldr	r2, [r2, #12]
 8017d92:	6852      	ldr	r2, [r2, #4]
 8017d94:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8017d96:	4e1b      	ldr	r6, [pc, #108]	; (8017e04 <xTaskResumeAll.part.0+0x104>)
 8017d98:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017d9a:	b144      	cbz	r4, 8017dae <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 8017d9c:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8017d9e:	f7ff fef3 	bl	8017b88 <xTaskIncrementTick>
 8017da2:	b108      	cbz	r0, 8017da8 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8017da4:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8017da8:	3c01      	subs	r4, #1
 8017daa:	d1f8      	bne.n	8017d9e <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 8017dac:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8017dae:	f8d9 3000 	ldr.w	r3, [r9]
 8017db2:	b15b      	cbz	r3, 8017dcc <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8017db4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017dbc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017dc0:	f3bf 8f4f 	dsb	sy
 8017dc4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8017dc8:	2001      	movs	r0, #1
 8017dca:	e000      	b.n	8017dce <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8017dcc:	2000      	movs	r0, #0
 8017dce:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8017dd0:	f000 fe86 	bl	8018ae0 <vPortExitCritical>
}
 8017dd4:	9801      	ldr	r0, [sp, #4]
 8017dd6:	b003      	add	sp, #12
 8017dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8017ddc:	4b08      	ldr	r3, [pc, #32]	; (8017e00 <xTaskResumeAll.part.0+0x100>)
 8017dde:	f04f 32ff 	mov.w	r2, #4294967295
 8017de2:	601a      	str	r2, [r3, #0]
 8017de4:	e7d7      	b.n	8017d96 <xTaskResumeAll.part.0+0x96>
 8017de6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8017e10 <xTaskResumeAll.part.0+0x110>
 8017dea:	e7d4      	b.n	8017d96 <xTaskResumeAll.part.0+0x96>
 8017dec:	200067cc 	.word	0x200067cc
 8017df0:	200067c0 	.word	0x200067c0
 8017df4:	200067d4 	.word	0x200067d4
 8017df8:	20006728 	.word	0x20006728
 8017dfc:	2000672c 	.word	0x2000672c
 8017e00:	20006800 	.word	0x20006800
 8017e04:	200067c8 	.word	0x200067c8
 8017e08:	20006808 	.word	0x20006808
 8017e0c:	20006734 	.word	0x20006734
 8017e10:	2000684c 	.word	0x2000684c

08017e14 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8017e14:	4b07      	ldr	r3, [pc, #28]	; (8017e34 <xTaskResumeAll+0x20>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	b953      	cbnz	r3, 8017e30 <xTaskResumeAll+0x1c>
 8017e1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017e1e:	b672      	cpsid	i
 8017e20:	f383 8811 	msr	BASEPRI, r3
 8017e24:	f3bf 8f6f 	isb	sy
 8017e28:	f3bf 8f4f 	dsb	sy
 8017e2c:	b662      	cpsie	i
 8017e2e:	e7fe      	b.n	8017e2e <xTaskResumeAll+0x1a>
 8017e30:	f7ff bf66 	b.w	8017d00 <xTaskResumeAll.part.0>
 8017e34:	200067cc 	.word	0x200067cc

08017e38 <vTaskDelay>:
	{
 8017e38:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017e3a:	b950      	cbnz	r0, 8017e52 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8017e3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017e48:	f3bf 8f4f 	dsb	sy
 8017e4c:	f3bf 8f6f 	isb	sy
	}
 8017e50:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8017e52:	4c12      	ldr	r4, [pc, #72]	; (8017e9c <vTaskDelay+0x64>)
 8017e54:	6821      	ldr	r1, [r4, #0]
 8017e56:	b151      	cbz	r1, 8017e6e <vTaskDelay+0x36>
 8017e58:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017e5c:	b672      	cpsid	i
 8017e5e:	f383 8811 	msr	BASEPRI, r3
 8017e62:	f3bf 8f6f 	isb	sy
 8017e66:	f3bf 8f4f 	dsb	sy
 8017e6a:	b662      	cpsie	i
 8017e6c:	e7fe      	b.n	8017e6c <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 8017e6e:	6823      	ldr	r3, [r4, #0]
 8017e70:	3301      	adds	r3, #1
 8017e72:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017e74:	f7ff fb84 	bl	8017580 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8017e78:	6823      	ldr	r3, [r4, #0]
 8017e7a:	b953      	cbnz	r3, 8017e92 <vTaskDelay+0x5a>
 8017e7c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017e80:	b672      	cpsid	i
 8017e82:	f383 8811 	msr	BASEPRI, r3
 8017e86:	f3bf 8f6f 	isb	sy
 8017e8a:	f3bf 8f4f 	dsb	sy
 8017e8e:	b662      	cpsie	i
 8017e90:	e7fe      	b.n	8017e90 <vTaskDelay+0x58>
 8017e92:	f7ff ff35 	bl	8017d00 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8017e96:	2800      	cmp	r0, #0
 8017e98:	d0d0      	beq.n	8017e3c <vTaskDelay+0x4>
	}
 8017e9a:	bd10      	pop	{r4, pc}
 8017e9c:	200067cc 	.word	0x200067cc

08017ea0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017ea0:	4b04      	ldr	r3, [pc, #16]	; (8017eb4 <vTaskSwitchContext+0x14>)
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	b11b      	cbz	r3, 8017eae <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8017ea6:	4b04      	ldr	r3, [pc, #16]	; (8017eb8 <vTaskSwitchContext+0x18>)
 8017ea8:	2201      	movs	r2, #1
 8017eaa:	601a      	str	r2, [r3, #0]
}
 8017eac:	4770      	bx	lr
 8017eae:	f7ff bc09 	b.w	80176c4 <vTaskSwitchContext.part.0>
 8017eb2:	bf00      	nop
 8017eb4:	200067cc 	.word	0x200067cc
 8017eb8:	2000684c 	.word	0x2000684c

08017ebc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8017ebc:	b160      	cbz	r0, 8017ed8 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017ebe:	4b0c      	ldr	r3, [pc, #48]	; (8017ef0 <vTaskPlaceOnEventList+0x34>)
{
 8017ec0:	b510      	push	{r4, lr}
 8017ec2:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017ec4:	6819      	ldr	r1, [r3, #0]
 8017ec6:	3118      	adds	r1, #24
 8017ec8:	f7fe fd28 	bl	801691c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017ecc:	4620      	mov	r0, r4
 8017ece:	2101      	movs	r1, #1
}
 8017ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017ed4:	f7ff bb54 	b.w	8017580 <prvAddCurrentTaskToDelayedList>
 8017ed8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017edc:	b672      	cpsid	i
 8017ede:	f383 8811 	msr	BASEPRI, r3
 8017ee2:	f3bf 8f6f 	isb	sy
 8017ee6:	f3bf 8f4f 	dsb	sy
 8017eea:	b662      	cpsie	i
	configASSERT( pxEventList );
 8017eec:	e7fe      	b.n	8017eec <vTaskPlaceOnEventList+0x30>
 8017eee:	bf00      	nop
 8017ef0:	20006728 	.word	0x20006728

08017ef4 <vTaskPlaceOnEventListRestricted>:
	{
 8017ef4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8017ef6:	b180      	cbz	r0, 8017f1a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017ef8:	4b0d      	ldr	r3, [pc, #52]	; (8017f30 <vTaskPlaceOnEventListRestricted+0x3c>)
 8017efa:	460d      	mov	r5, r1
 8017efc:	4614      	mov	r4, r2
 8017efe:	6819      	ldr	r1, [r3, #0]
 8017f00:	3118      	adds	r1, #24
 8017f02:	f7fe fcfb 	bl	80168fc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8017f06:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017f08:	4621      	mov	r1, r4
 8017f0a:	bf0c      	ite	eq
 8017f0c:	4628      	moveq	r0, r5
 8017f0e:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8017f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017f16:	f7ff bb33 	b.w	8017580 <prvAddCurrentTaskToDelayedList>
 8017f1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017f1e:	b672      	cpsid	i
 8017f20:	f383 8811 	msr	BASEPRI, r3
 8017f24:	f3bf 8f6f 	isb	sy
 8017f28:	f3bf 8f4f 	dsb	sy
 8017f2c:	b662      	cpsie	i
		configASSERT( pxEventList );
 8017f2e:	e7fe      	b.n	8017f2e <vTaskPlaceOnEventListRestricted+0x3a>
 8017f30:	20006728 	.word	0x20006728

08017f34 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f34:	68c3      	ldr	r3, [r0, #12]
{
 8017f36:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f38:	68dc      	ldr	r4, [r3, #12]
{
 8017f3a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8017f3c:	b364      	cbz	r4, 8017f98 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017f3e:	f104 0518 	add.w	r5, r4, #24
 8017f42:	4628      	mov	r0, r5
 8017f44:	f7fe fd02 	bl	801694c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f48:	4b1a      	ldr	r3, [pc, #104]	; (8017fb4 <xTaskRemoveFromEventList+0x80>)
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	b17b      	cbz	r3, 8017f6e <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017f4e:	4629      	mov	r1, r5
 8017f50:	4819      	ldr	r0, [pc, #100]	; (8017fb8 <xTaskRemoveFromEventList+0x84>)
 8017f52:	f7fe fcd3 	bl	80168fc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017f56:	4b19      	ldr	r3, [pc, #100]	; (8017fbc <xTaskRemoveFromEventList+0x88>)
 8017f58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d925      	bls.n	8017fae <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8017f62:	2301      	movs	r3, #1
 8017f64:	4a16      	ldr	r2, [pc, #88]	; (8017fc0 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 8017f66:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8017f68:	6013      	str	r3, [r2, #0]
}
 8017f6a:	b003      	add	sp, #12
 8017f6c:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017f6e:	1d21      	adds	r1, r4, #4
 8017f70:	4608      	mov	r0, r1
 8017f72:	9101      	str	r1, [sp, #4]
 8017f74:	f7fe fcea 	bl	801694c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017f78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017f7a:	4a12      	ldr	r2, [pc, #72]	; (8017fc4 <xTaskRemoveFromEventList+0x90>)
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	9901      	ldr	r1, [sp, #4]
 8017f80:	6815      	ldr	r5, [r2, #0]
 8017f82:	4083      	lsls	r3, r0
 8017f84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017f88:	432b      	orrs	r3, r5
 8017f8a:	6013      	str	r3, [r2, #0]
 8017f8c:	4b0e      	ldr	r3, [pc, #56]	; (8017fc8 <xTaskRemoveFromEventList+0x94>)
 8017f8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017f92:	f7fe fcb3 	bl	80168fc <vListInsertEnd>
 8017f96:	e7de      	b.n	8017f56 <xTaskRemoveFromEventList+0x22>
 8017f98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017f9c:	b672      	cpsid	i
 8017f9e:	f383 8811 	msr	BASEPRI, r3
 8017fa2:	f3bf 8f6f 	isb	sy
 8017fa6:	f3bf 8f4f 	dsb	sy
 8017faa:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8017fac:	e7fe      	b.n	8017fac <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8017fae:	2000      	movs	r0, #0
}
 8017fb0:	b003      	add	sp, #12
 8017fb2:	bd30      	pop	{r4, r5, pc}
 8017fb4:	200067cc 	.word	0x200067cc
 8017fb8:	20006808 	.word	0x20006808
 8017fbc:	20006728 	.word	0x20006728
 8017fc0:	2000684c 	.word	0x2000684c
 8017fc4:	200067d4 	.word	0x200067d4
 8017fc8:	20006734 	.word	0x20006734

08017fcc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017fcc:	4a03      	ldr	r2, [pc, #12]	; (8017fdc <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017fce:	4b04      	ldr	r3, [pc, #16]	; (8017fe0 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017fd0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	e9c0 2300 	strd	r2, r3, [r0]
}
 8017fd8:	4770      	bx	lr
 8017fda:	bf00      	nop
 8017fdc:	20006804 	.word	0x20006804
 8017fe0:	20006848 	.word	0x20006848

08017fe4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8017fe4:	b338      	cbz	r0, 8018036 <xTaskCheckForTimeOut+0x52>
{
 8017fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fe8:	460d      	mov	r5, r1
 8017fea:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8017fec:	b1c1      	cbz	r1, 8018020 <xTaskCheckForTimeOut+0x3c>
 8017fee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8017ff0:	f000 fd50 	bl	8018a94 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8017ff4:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8017ff6:	4a1f      	ldr	r2, [pc, #124]	; (8018074 <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8017ff8:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8017ffa:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8017ffc:	d034      	beq.n	8018068 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017ffe:	f8df c078 	ldr.w	ip, [pc, #120]	; 8018078 <xTaskCheckForTimeOut+0x94>
 8018002:	6826      	ldr	r6, [r4, #0]
 8018004:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018008:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801800a:	42be      	cmp	r6, r7
 801800c:	d01e      	beq.n	801804c <xTaskCheckForTimeOut+0x68>
 801800e:	4288      	cmp	r0, r1
 8018010:	d81c      	bhi.n	801804c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8018012:	2001      	movs	r0, #1
 8018014:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8018016:	f000 fd63 	bl	8018ae0 <vPortExitCritical>
}
 801801a:	9801      	ldr	r0, [sp, #4]
 801801c:	b003      	add	sp, #12
 801801e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018020:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018024:	b672      	cpsid	i
 8018026:	f383 8811 	msr	BASEPRI, r3
 801802a:	f3bf 8f6f 	isb	sy
 801802e:	f3bf 8f4f 	dsb	sy
 8018032:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8018034:	e7fe      	b.n	8018034 <xTaskCheckForTimeOut+0x50>
 8018036:	f04f 0330 	mov.w	r3, #48	; 0x30
 801803a:	b672      	cpsid	i
 801803c:	f383 8811 	msr	BASEPRI, r3
 8018040:	f3bf 8f6f 	isb	sy
 8018044:	f3bf 8f4f 	dsb	sy
 8018048:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 801804a:	e7fe      	b.n	801804a <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801804c:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018050:	4573      	cmp	r3, lr
 8018052:	d90b      	bls.n	801806c <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 8018054:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018056:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801805a:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 801805c:	4403      	add	r3, r0
			xReturn = pdFALSE;
 801805e:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8018060:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018062:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8018066:	e7d5      	b.n	8018014 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8018068:	2000      	movs	r0, #0
 801806a:	e7d3      	b.n	8018014 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 801806c:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 801806e:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8018070:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8018072:	e7cf      	b.n	8018014 <xTaskCheckForTimeOut+0x30>
 8018074:	20006848 	.word	0x20006848
 8018078:	20006804 	.word	0x20006804

0801807c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801807c:	4b01      	ldr	r3, [pc, #4]	; (8018084 <vTaskMissedYield+0x8>)
 801807e:	2201      	movs	r2, #1
 8018080:	601a      	str	r2, [r3, #0]
}
 8018082:	4770      	bx	lr
 8018084:	2000684c 	.word	0x2000684c

08018088 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8018088:	4b01      	ldr	r3, [pc, #4]	; (8018090 <xTaskGetCurrentTaskHandle+0x8>)
 801808a:	6818      	ldr	r0, [r3, #0]
	}
 801808c:	4770      	bx	lr
 801808e:	bf00      	nop
 8018090:	20006728 	.word	0x20006728

08018094 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8018094:	4b05      	ldr	r3, [pc, #20]	; (80180ac <xTaskGetSchedulerState+0x18>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	b133      	cbz	r3, 80180a8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801809a:	4b05      	ldr	r3, [pc, #20]	; (80180b0 <xTaskGetSchedulerState+0x1c>)
 801809c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 801809e:	2b00      	cmp	r3, #0
 80180a0:	bf0c      	ite	eq
 80180a2:	2002      	moveq	r0, #2
 80180a4:	2000      	movne	r0, #0
 80180a6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80180a8:	2001      	movs	r0, #1
	}
 80180aa:	4770      	bx	lr
 80180ac:	2000681c 	.word	0x2000681c
 80180b0:	200067cc 	.word	0x200067cc

080180b4 <xTaskPriorityInherit>:
	{
 80180b4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80180b6:	4604      	mov	r4, r0
	{
 80180b8:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 80180ba:	b1c8      	cbz	r0, 80180f0 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80180bc:	4d26      	ldr	r5, [pc, #152]	; (8018158 <xTaskPriorityInherit+0xa4>)
 80180be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80180c0:	682a      	ldr	r2, [r5, #0]
 80180c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80180c4:	4293      	cmp	r3, r2
 80180c6:	d215      	bcs.n	80180f4 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80180c8:	6982      	ldr	r2, [r0, #24]
 80180ca:	2a00      	cmp	r2, #0
 80180cc:	db04      	blt.n	80180d8 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80180ce:	682a      	ldr	r2, [r5, #0]
 80180d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80180d2:	f1c2 0207 	rsb	r2, r2, #7
 80180d6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80180d8:	4e20      	ldr	r6, [pc, #128]	; (801815c <xTaskPriorityInherit+0xa8>)
 80180da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80180de:	6962      	ldr	r2, [r4, #20]
 80180e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80180e4:	429a      	cmp	r2, r3
 80180e6:	d00e      	beq.n	8018106 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80180e8:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 80180ea:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80180ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180ee:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 80180f0:	b002      	add	sp, #8
 80180f2:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80180f4:	682b      	ldr	r3, [r5, #0]
 80180f6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80180f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180fa:	4298      	cmp	r0, r3
 80180fc:	bf2c      	ite	cs
 80180fe:	2000      	movcs	r0, #0
 8018100:	2001      	movcc	r0, #1
	}
 8018102:	b002      	add	sp, #8
 8018104:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018106:	1d21      	adds	r1, r4, #4
 8018108:	4608      	mov	r0, r1
 801810a:	9101      	str	r1, [sp, #4]
 801810c:	f7fe fc1e 	bl	801694c <uxListRemove>
 8018110:	9901      	ldr	r1, [sp, #4]
 8018112:	b970      	cbnz	r0, 8018132 <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8018114:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8018116:	4a12      	ldr	r2, [pc, #72]	; (8018160 <xTaskPriorityInherit+0xac>)
 8018118:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801811c:	009b      	lsls	r3, r3, #2
 801811e:	58f3      	ldr	r3, [r6, r3]
 8018120:	b943      	cbnz	r3, 8018134 <xTaskPriorityInherit+0x80>
 8018122:	2301      	movs	r3, #1
 8018124:	fa03 f000 	lsl.w	r0, r3, r0
 8018128:	6813      	ldr	r3, [r2, #0]
 801812a:	ea23 0300 	bic.w	r3, r3, r0
 801812e:	6013      	str	r3, [r2, #0]
 8018130:	e000      	b.n	8018134 <xTaskPriorityInherit+0x80>
 8018132:	4a0b      	ldr	r2, [pc, #44]	; (8018160 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018134:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018136:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801813a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801813c:	2401      	movs	r4, #1
 801813e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8018142:	fa04 f303 	lsl.w	r3, r4, r3
 8018146:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801814a:	432b      	orrs	r3, r5
 801814c:	6013      	str	r3, [r2, #0]
 801814e:	f7fe fbd5 	bl	80168fc <vListInsertEnd>
				xReturn = pdTRUE;
 8018152:	4620      	mov	r0, r4
 8018154:	e7cc      	b.n	80180f0 <xTaskPriorityInherit+0x3c>
 8018156:	bf00      	nop
 8018158:	20006728 	.word	0x20006728
 801815c:	20006734 	.word	0x20006734
 8018160:	200067d4 	.word	0x200067d4

08018164 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8018164:	b340      	cbz	r0, 80181b8 <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 8018166:	4b2c      	ldr	r3, [pc, #176]	; (8018218 <xTaskPriorityDisinherit+0xb4>)
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	4283      	cmp	r3, r0
	{
 801816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801816e:	4604      	mov	r4, r0
 8018170:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 8018172:	d00a      	beq.n	801818a <xTaskPriorityDisinherit+0x26>
 8018174:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018178:	b672      	cpsid	i
 801817a:	f383 8811 	msr	BASEPRI, r3
 801817e:	f3bf 8f6f 	isb	sy
 8018182:	f3bf 8f4f 	dsb	sy
 8018186:	b662      	cpsie	i
 8018188:	e7fe      	b.n	8018188 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801818a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801818c:	b14b      	cbz	r3, 80181a2 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801818e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8018190:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018192:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8018194:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018196:	4291      	cmp	r1, r2
 8018198:	d000      	beq.n	801819c <xTaskPriorityDisinherit+0x38>
 801819a:	b17b      	cbz	r3, 80181bc <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 801819c:	2000      	movs	r0, #0
	}
 801819e:	b003      	add	sp, #12
 80181a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80181a6:	b672      	cpsid	i
 80181a8:	f383 8811 	msr	BASEPRI, r3
 80181ac:	f3bf 8f6f 	isb	sy
 80181b0:	f3bf 8f4f 	dsb	sy
 80181b4:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 80181b6:	e7fe      	b.n	80181b6 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 80181b8:	2000      	movs	r0, #0
	}
 80181ba:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80181bc:	1d01      	adds	r1, r0, #4
 80181be:	4608      	mov	r0, r1
 80181c0:	9101      	str	r1, [sp, #4]
 80181c2:	f7fe fbc3 	bl	801694c <uxListRemove>
 80181c6:	9901      	ldr	r1, [sp, #4]
 80181c8:	b1a0      	cbz	r0, 80181f4 <xTaskPriorityDisinherit+0x90>
 80181ca:	4814      	ldr	r0, [pc, #80]	; (801821c <xTaskPriorityDisinherit+0xb8>)
 80181cc:	4a14      	ldr	r2, [pc, #80]	; (8018220 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80181ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 80181d0:	2501      	movs	r5, #1
 80181d2:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80181d4:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80181d8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80181da:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80181dc:	fa05 f403 	lsl.w	r4, r5, r3
 80181e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80181e4:	4334      	orrs	r4, r6
 80181e6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80181ea:	6014      	str	r4, [r2, #0]
 80181ec:	f7fe fb86 	bl	80168fc <vListInsertEnd>
					xReturn = pdTRUE;
 80181f0:	4628      	mov	r0, r5
		return xReturn;
 80181f2:	e7d4      	b.n	801819e <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80181f4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80181f6:	4809      	ldr	r0, [pc, #36]	; (801821c <xTaskPriorityDisinherit+0xb8>)
 80181f8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80181fc:	4a08      	ldr	r2, [pc, #32]	; (8018220 <xTaskPriorityDisinherit+0xbc>)
 80181fe:	009b      	lsls	r3, r3, #2
 8018200:	58c3      	ldr	r3, [r0, r3]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d1e3      	bne.n	80181ce <xTaskPriorityDisinherit+0x6a>
 8018206:	2301      	movs	r3, #1
 8018208:	fa03 f505 	lsl.w	r5, r3, r5
 801820c:	6813      	ldr	r3, [r2, #0]
 801820e:	ea23 0305 	bic.w	r3, r3, r5
 8018212:	6013      	str	r3, [r2, #0]
 8018214:	e7db      	b.n	80181ce <xTaskPriorityDisinherit+0x6a>
 8018216:	bf00      	nop
 8018218:	20006728 	.word	0x20006728
 801821c:	20006734 	.word	0x20006734
 8018220:	200067d4 	.word	0x200067d4

08018224 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8018224:	2800      	cmp	r0, #0
 8018226:	d044      	beq.n	80182b2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8018228:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 801822a:	b530      	push	{r4, r5, lr}
 801822c:	4604      	mov	r4, r0
 801822e:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8018230:	b153      	cbz	r3, 8018248 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018232:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018234:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018236:	4281      	cmp	r1, r0
 8018238:	bf38      	it	cc
 801823a:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801823c:	428a      	cmp	r2, r1
 801823e:	d001      	beq.n	8018244 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8018240:	2b01      	cmp	r3, #1
 8018242:	d00c      	beq.n	801825e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 8018244:	b003      	add	sp, #12
 8018246:	bd30      	pop	{r4, r5, pc}
 8018248:	f04f 0330 	mov.w	r3, #48	; 0x30
 801824c:	b672      	cpsid	i
 801824e:	f383 8811 	msr	BASEPRI, r3
 8018252:	f3bf 8f6f 	isb	sy
 8018256:	f3bf 8f4f 	dsb	sy
 801825a:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 801825c:	e7fe      	b.n	801825c <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 801825e:	4b25      	ldr	r3, [pc, #148]	; (80182f4 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	42a3      	cmp	r3, r4
 8018264:	d026      	beq.n	80182b4 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018266:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8018268:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801826a:	2b00      	cmp	r3, #0
 801826c:	db02      	blt.n	8018274 <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801826e:	f1c1 0107 	rsb	r1, r1, #7
 8018272:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018274:	4d20      	ldr	r5, [pc, #128]	; (80182f8 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8018276:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801827a:	6961      	ldr	r1, [r4, #20]
 801827c:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8018280:	4299      	cmp	r1, r3
 8018282:	d1df      	bne.n	8018244 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018284:	1d21      	adds	r1, r4, #4
 8018286:	4608      	mov	r0, r1
 8018288:	9101      	str	r1, [sp, #4]
 801828a:	f7fe fb5f 	bl	801694c <uxListRemove>
 801828e:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018290:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018292:	b1d0      	cbz	r0, 80182ca <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018294:	2301      	movs	r3, #1
 8018296:	0090      	lsls	r0, r2, #2
 8018298:	4c18      	ldr	r4, [pc, #96]	; (80182fc <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 801829a:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 801829c:	4410      	add	r0, r2
 801829e:	6822      	ldr	r2, [r4, #0]
 80182a0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80182a4:	4313      	orrs	r3, r2
 80182a6:	6023      	str	r3, [r4, #0]
	}
 80182a8:	b003      	add	sp, #12
 80182aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80182ae:	f7fe bb25 	b.w	80168fc <vListInsertEnd>
 80182b2:	4770      	bx	lr
 80182b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80182b8:	b672      	cpsid	i
 80182ba:	f383 8811 	msr	BASEPRI, r3
 80182be:	f3bf 8f6f 	isb	sy
 80182c2:	f3bf 8f4f 	dsb	sy
 80182c6:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 80182c8:	e7fe      	b.n	80182c8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80182ca:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80182ce:	0090      	lsls	r0, r2, #2
 80182d0:	009b      	lsls	r3, r3, #2
 80182d2:	58eb      	ldr	r3, [r5, r3]
 80182d4:	b11b      	cbz	r3, 80182de <vTaskPriorityDisinheritAfterTimeout+0xba>
 80182d6:	2301      	movs	r3, #1
 80182d8:	4c08      	ldr	r4, [pc, #32]	; (80182fc <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80182da:	4093      	lsls	r3, r2
 80182dc:	e7de      	b.n	801829c <vTaskPriorityDisinheritAfterTimeout+0x78>
 80182de:	4c07      	ldr	r4, [pc, #28]	; (80182fc <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80182e0:	2301      	movs	r3, #1
 80182e2:	f8d4 c000 	ldr.w	ip, [r4]
 80182e6:	4093      	lsls	r3, r2
 80182e8:	ea2c 0c03 	bic.w	ip, ip, r3
 80182ec:	f8c4 c000 	str.w	ip, [r4]
 80182f0:	e7d4      	b.n	801829c <vTaskPriorityDisinheritAfterTimeout+0x78>
 80182f2:	bf00      	nop
 80182f4:	20006728 	.word	0x20006728
 80182f8:	20006734 	.word	0x20006734
 80182fc:	200067d4 	.word	0x200067d4

08018300 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8018300:	4b04      	ldr	r3, [pc, #16]	; (8018314 <pvTaskIncrementMutexHeldCount+0x14>)
 8018302:	681a      	ldr	r2, [r3, #0]
 8018304:	b11a      	cbz	r2, 801830e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8018306:	6819      	ldr	r1, [r3, #0]
 8018308:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 801830a:	3201      	adds	r2, #1
 801830c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 801830e:	6818      	ldr	r0, [r3, #0]
	}
 8018310:	4770      	bx	lr
 8018312:	bf00      	nop
 8018314:	20006728 	.word	0x20006728

08018318 <ulTaskNotifyTake>:
	{
 8018318:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801831a:	4c1a      	ldr	r4, [pc, #104]	; (8018384 <ulTaskNotifyTake+0x6c>)
	{
 801831c:	4606      	mov	r6, r0
 801831e:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8018320:	f000 fbb8 	bl	8018a94 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8018324:	6823      	ldr	r3, [r4, #0]
 8018326:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801832a:	b923      	cbnz	r3, 8018336 <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801832c:	6823      	ldr	r3, [r4, #0]
 801832e:	2101      	movs	r1, #1
 8018330:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 8018334:	b9c5      	cbnz	r5, 8018368 <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 8018336:	f000 fbd3 	bl	8018ae0 <vPortExitCritical>
		taskENTER_CRITICAL();
 801833a:	f000 fbab 	bl	8018a94 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801833e:	6823      	ldr	r3, [r4, #0]
 8018340:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 8018344:	b125      	cbz	r5, 8018350 <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8018346:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8018348:	b156      	cbz	r6, 8018360 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801834a:	2200      	movs	r2, #0
 801834c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018350:	6823      	ldr	r3, [r4, #0]
 8018352:	2200      	movs	r2, #0
 8018354:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 8018358:	f000 fbc2 	bl	8018ae0 <vPortExitCritical>
	}
 801835c:	4628      	mov	r0, r5
 801835e:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8018360:	1e6a      	subs	r2, r5, #1
 8018362:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8018366:	e7f3      	b.n	8018350 <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018368:	4628      	mov	r0, r5
 801836a:	f7ff f909 	bl	8017580 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 801836e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018376:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801837a:	f3bf 8f4f 	dsb	sy
 801837e:	f3bf 8f6f 	isb	sy
 8018382:	e7d8      	b.n	8018336 <ulTaskNotifyTake+0x1e>
 8018384:	20006728 	.word	0x20006728

08018388 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8018388:	b318      	cbz	r0, 80183d2 <vTaskNotifyGiveFromISR+0x4a>
	{
 801838a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801838c:	b083      	sub	sp, #12
 801838e:	4604      	mov	r4, r0
 8018390:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018392:	f000 fc85 	bl	8018ca0 <vPortValidateInterruptPriority>
	__asm volatile
 8018396:	f3ef 8611 	mrs	r6, BASEPRI
 801839a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801839e:	b672      	cpsid	i
 80183a0:	f383 8811 	msr	BASEPRI, r3
 80183a4:	f3bf 8f6f 	isb	sy
 80183a8:	f3bf 8f4f 	dsb	sy
 80183ac:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80183ae:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80183b0:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80183b4:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80183b8:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 80183ba:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80183be:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 80183c0:	f103 0301 	add.w	r3, r3, #1
 80183c4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80183c8:	d00e      	beq.n	80183e8 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 80183ca:	f386 8811 	msr	BASEPRI, r6
	}
 80183ce:	b003      	add	sp, #12
 80183d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 80183d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80183d6:	b672      	cpsid	i
 80183d8:	f383 8811 	msr	BASEPRI, r3
 80183dc:	f3bf 8f6f 	isb	sy
 80183e0:	f3bf 8f4f 	dsb	sy
 80183e4:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 80183e6:	e7fe      	b.n	80183e6 <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80183e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80183ea:	b153      	cbz	r3, 8018402 <vTaskNotifyGiveFromISR+0x7a>
 80183ec:	f04f 0330 	mov.w	r3, #48	; 0x30
 80183f0:	b672      	cpsid	i
 80183f2:	f383 8811 	msr	BASEPRI, r3
 80183f6:	f3bf 8f6f 	isb	sy
 80183fa:	f3bf 8f4f 	dsb	sy
 80183fe:	b662      	cpsie	i
 8018400:	e7fe      	b.n	8018400 <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018402:	4b14      	ldr	r3, [pc, #80]	; (8018454 <vTaskNotifyGiveFromISR+0xcc>)
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	b18b      	cbz	r3, 801842c <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018408:	f104 0118 	add.w	r1, r4, #24
 801840c:	4812      	ldr	r0, [pc, #72]	; (8018458 <vTaskNotifyGiveFromISR+0xd0>)
 801840e:	f7fe fa75 	bl	80168fc <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018412:	4b12      	ldr	r3, [pc, #72]	; (801845c <vTaskNotifyGiveFromISR+0xd4>)
 8018414:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801841a:	429a      	cmp	r2, r3
 801841c:	d9d5      	bls.n	80183ca <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 801841e:	b10d      	cbz	r5, 8018424 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8018420:	2301      	movs	r3, #1
 8018422:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 8018424:	4b0e      	ldr	r3, [pc, #56]	; (8018460 <vTaskNotifyGiveFromISR+0xd8>)
 8018426:	2201      	movs	r2, #1
 8018428:	601a      	str	r2, [r3, #0]
 801842a:	e7ce      	b.n	80183ca <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801842c:	1d21      	adds	r1, r4, #4
 801842e:	4608      	mov	r0, r1
 8018430:	9101      	str	r1, [sp, #4]
 8018432:	f7fe fa8b 	bl	801694c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018436:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8018438:	4b0a      	ldr	r3, [pc, #40]	; (8018464 <vTaskNotifyGiveFromISR+0xdc>)
 801843a:	4087      	lsls	r7, r0
 801843c:	4a0a      	ldr	r2, [pc, #40]	; (8018468 <vTaskNotifyGiveFromISR+0xe0>)
 801843e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018442:	9901      	ldr	r1, [sp, #4]
 8018444:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	4317      	orrs	r7, r2
 801844c:	601f      	str	r7, [r3, #0]
 801844e:	f7fe fa55 	bl	80168fc <vListInsertEnd>
 8018452:	e7de      	b.n	8018412 <vTaskNotifyGiveFromISR+0x8a>
 8018454:	200067cc 	.word	0x200067cc
 8018458:	20006808 	.word	0x20006808
 801845c:	20006728 	.word	0x20006728
 8018460:	2000684c 	.word	0x2000684c
 8018464:	200067d4 	.word	0x200067d4
 8018468:	20006734 	.word	0x20006734

0801846c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801846c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 801846e:	4c12      	ldr	r4, [pc, #72]	; (80184b8 <prvCheckForValidListAndQueue+0x4c>)
{
 8018470:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8018472:	f000 fb0f 	bl	8018a94 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8018476:	6825      	ldr	r5, [r4, #0]
 8018478:	b125      	cbz	r5, 8018484 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 801847a:	b003      	add	sp, #12
 801847c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8018480:	f000 bb2e 	b.w	8018ae0 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8018484:	4f0d      	ldr	r7, [pc, #52]	; (80184bc <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8018486:	4e0e      	ldr	r6, [pc, #56]	; (80184c0 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8018488:	4638      	mov	r0, r7
 801848a:	f7fe fa27 	bl	80168dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801848e:	4630      	mov	r0, r6
 8018490:	f7fe fa24 	bl	80168dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018494:	4a0b      	ldr	r2, [pc, #44]	; (80184c4 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018496:	9500      	str	r5, [sp, #0]
 8018498:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 801849a:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801849c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 801849e:	4a0a      	ldr	r2, [pc, #40]	; (80184c8 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80184a0:	4b0a      	ldr	r3, [pc, #40]	; (80184cc <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 80184a2:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80184a4:	4a0a      	ldr	r2, [pc, #40]	; (80184d0 <prvCheckForValidListAndQueue+0x64>)
 80184a6:	f7fe fb35 	bl	8016b14 <xQueueGenericCreateStatic>
 80184aa:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 80184ac:	2800      	cmp	r0, #0
 80184ae:	d0e4      	beq.n	801847a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80184b0:	4908      	ldr	r1, [pc, #32]	; (80184d4 <prvCheckForValidListAndQueue+0x68>)
 80184b2:	f7fe ff9d 	bl	80173f0 <vQueueAddToRegistry>
 80184b6:	e7e0      	b.n	801847a <prvCheckForValidListAndQueue+0xe>
 80184b8:	2000696c 	.word	0x2000696c
 80184bc:	200068f8 	.word	0x200068f8
 80184c0:	2000690c 	.word	0x2000690c
 80184c4:	20006850 	.word	0x20006850
 80184c8:	20006854 	.word	0x20006854
 80184cc:	20006924 	.word	0x20006924
 80184d0:	20006858 	.word	0x20006858
 80184d4:	0802e660 	.word	0x0802e660

080184d8 <xTimerCreateTimerTask>:
{
 80184d8:	b530      	push	{r4, r5, lr}
 80184da:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 80184dc:	f7ff ffc6 	bl	801846c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80184e0:	4b13      	ldr	r3, [pc, #76]	; (8018530 <xTimerCreateTimerTask+0x58>)
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	b1cb      	cbz	r3, 801851a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80184e6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80184e8:	aa07      	add	r2, sp, #28
 80184ea:	a906      	add	r1, sp, #24
 80184ec:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80184ee:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80184f0:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80184f4:	f7e8 fed6 	bl	80012a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80184f8:	4623      	mov	r3, r4
 80184fa:	9a07      	ldr	r2, [sp, #28]
 80184fc:	9500      	str	r5, [sp, #0]
 80184fe:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8018502:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8018506:	490b      	ldr	r1, [pc, #44]	; (8018534 <xTimerCreateTimerTask+0x5c>)
 8018508:	480b      	ldr	r0, [pc, #44]	; (8018538 <xTimerCreateTimerTask+0x60>)
 801850a:	f7ff f97d 	bl	8017808 <xTaskCreateStatic>
 801850e:	4b0b      	ldr	r3, [pc, #44]	; (801853c <xTimerCreateTimerTask+0x64>)
 8018510:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8018512:	b110      	cbz	r0, 801851a <xTimerCreateTimerTask+0x42>
}
 8018514:	2001      	movs	r0, #1
 8018516:	b009      	add	sp, #36	; 0x24
 8018518:	bd30      	pop	{r4, r5, pc}
 801851a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801851e:	b672      	cpsid	i
 8018520:	f383 8811 	msr	BASEPRI, r3
 8018524:	f3bf 8f6f 	isb	sy
 8018528:	f3bf 8f4f 	dsb	sy
 801852c:	b662      	cpsie	i
	configASSERT( xReturn );
 801852e:	e7fe      	b.n	801852e <xTimerCreateTimerTask+0x56>
 8018530:	2000696c 	.word	0x2000696c
 8018534:	0802e668 	.word	0x0802e668
 8018538:	08018739 	.word	0x08018739
 801853c:	20006970 	.word	0x20006970

08018540 <xTimerCreate>:
	{
 8018540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018544:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8018546:	2028      	movs	r0, #40	; 0x28
	{
 8018548:	4688      	mov	r8, r1
 801854a:	4615      	mov	r5, r2
 801854c:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801854e:	f000 fc0b 	bl	8018d68 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8018552:	4604      	mov	r4, r0
 8018554:	b1b0      	cbz	r0, 8018584 <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 8018556:	2300      	movs	r3, #0
 8018558:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801855c:	f1b8 0f00 	cmp.w	r8, #0
 8018560:	d013      	beq.n	801858a <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 8018562:	f7ff ff83 	bl	801846c <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8018566:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8018568:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 801856a:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801856c:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 801856e:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8018572:	f7fe f9bf 	bl	80168f4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8018576:	b12d      	cbz	r5, 8018584 <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8018578:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801857c:	f043 0304 	orr.w	r3, r3, #4
 8018580:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8018584:	4620      	mov	r0, r4
 8018586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801858a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801858e:	b672      	cpsid	i
 8018590:	f383 8811 	msr	BASEPRI, r3
 8018594:	f3bf 8f6f 	isb	sy
 8018598:	f3bf 8f4f 	dsb	sy
 801859c:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801859e:	e7fe      	b.n	801859e <xTimerCreate+0x5e>

080185a0 <xTimerCreateStatic>:
	{
 80185a0:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 80185a2:	2428      	movs	r4, #40	; 0x28
	{
 80185a4:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 80185a6:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 80185a8:	9d05      	ldr	r5, [sp, #20]
 80185aa:	2d28      	cmp	r5, #40	; 0x28
 80185ac:	d00a      	beq.n	80185c4 <xTimerCreateStatic+0x24>
 80185ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80185b2:	b672      	cpsid	i
 80185b4:	f383 8811 	msr	BASEPRI, r3
 80185b8:	f3bf 8f6f 	isb	sy
 80185bc:	f3bf 8f4f 	dsb	sy
 80185c0:	b662      	cpsie	i
 80185c2:	e7fe      	b.n	80185c2 <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80185c4:	4604      	mov	r4, r0
 80185c6:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 80185c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80185ca:	b318      	cbz	r0, 8018614 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80185cc:	2002      	movs	r0, #2
 80185ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80185d0:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80185d4:	b349      	cbz	r1, 801862a <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 80185d6:	9101      	str	r1, [sp, #4]
 80185d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80185dc:	f7ff ff46 	bl	801846c <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80185e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80185e2:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 80185e4:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 80185e6:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80185e8:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80185ea:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 80185ec:	9b03      	ldr	r3, [sp, #12]
 80185ee:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80185f0:	4613      	mov	r3, r2
 80185f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185f4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80185f6:	f7fe f97d 	bl	80168f4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80185fa:	9a02      	ldr	r2, [sp, #8]
 80185fc:	b13a      	cbz	r2, 801860e <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80185fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018602:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018606:	f043 0304 	orr.w	r3, r3, #4
 801860a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 801860e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018610:	b007      	add	sp, #28
 8018612:	bd30      	pop	{r4, r5, pc}
 8018614:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018618:	b672      	cpsid	i
 801861a:	f383 8811 	msr	BASEPRI, r3
 801861e:	f3bf 8f6f 	isb	sy
 8018622:	f3bf 8f4f 	dsb	sy
 8018626:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 8018628:	e7fe      	b.n	8018628 <xTimerCreateStatic+0x88>
 801862a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801862e:	b672      	cpsid	i
 8018630:	f383 8811 	msr	BASEPRI, r3
 8018634:	f3bf 8f6f 	isb	sy
 8018638:	f3bf 8f4f 	dsb	sy
 801863c:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801863e:	e7fe      	b.n	801863e <xTimerCreateStatic+0x9e>

08018640 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8018640:	b1c8      	cbz	r0, 8018676 <xTimerGenericCommand+0x36>
{
 8018642:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8018644:	4d19      	ldr	r5, [pc, #100]	; (80186ac <xTimerGenericCommand+0x6c>)
{
 8018646:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8018648:	682c      	ldr	r4, [r5, #0]
 801864a:	b18c      	cbz	r4, 8018670 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801864c:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801864e:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8018650:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018654:	dc1a      	bgt.n	801868c <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018656:	f7ff fd1d 	bl	8018094 <xTaskGetSchedulerState>
 801865a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801865c:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018660:	d01d      	beq.n	801869e <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018662:	4669      	mov	r1, sp
 8018664:	461a      	mov	r2, r3
 8018666:	6828      	ldr	r0, [r5, #0]
 8018668:	f7fe fade 	bl	8016c28 <xQueueGenericSend>
}
 801866c:	b005      	add	sp, #20
 801866e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8018670:	4620      	mov	r0, r4
}
 8018672:	b005      	add	sp, #20
 8018674:	bd30      	pop	{r4, r5, pc}
 8018676:	f04f 0330 	mov.w	r3, #48	; 0x30
 801867a:	b672      	cpsid	i
 801867c:	f383 8811 	msr	BASEPRI, r3
 8018680:	f3bf 8f6f 	isb	sy
 8018684:	f3bf 8f4f 	dsb	sy
 8018688:	b662      	cpsie	i
	configASSERT( xTimer );
 801868a:	e7fe      	b.n	801868a <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801868c:	469c      	mov	ip, r3
 801868e:	4669      	mov	r1, sp
 8018690:	2300      	movs	r3, #0
 8018692:	4620      	mov	r0, r4
 8018694:	4662      	mov	r2, ip
 8018696:	f7fe fbc7 	bl	8016e28 <xQueueGenericSendFromISR>
}
 801869a:	b005      	add	sp, #20
 801869c:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801869e:	9a08      	ldr	r2, [sp, #32]
 80186a0:	4669      	mov	r1, sp
 80186a2:	6828      	ldr	r0, [r5, #0]
 80186a4:	f7fe fac0 	bl	8016c28 <xQueueGenericSend>
 80186a8:	e7e3      	b.n	8018672 <xTimerGenericCommand+0x32>
 80186aa:	bf00      	nop
 80186ac:	2000696c 	.word	0x2000696c

080186b0 <prvSwitchTimerLists>:
{
 80186b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186b4:	4e1e      	ldr	r6, [pc, #120]	; (8018730 <prvSwitchTimerLists+0x80>)
 80186b6:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80186b8:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80186bc:	e00d      	b.n	80186da <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80186be:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80186c0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80186c2:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80186c4:	1d25      	adds	r5, r4, #4
 80186c6:	4628      	mov	r0, r5
 80186c8:	f7fe f940 	bl	801694c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80186cc:	6a23      	ldr	r3, [r4, #32]
 80186ce:	4620      	mov	r0, r4
 80186d0:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80186d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80186d6:	075b      	lsls	r3, r3, #29
 80186d8:	d40a      	bmi.n	80186f0 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80186da:	6833      	ldr	r3, [r6, #0]
 80186dc:	681a      	ldr	r2, [r3, #0]
 80186de:	2a00      	cmp	r2, #0
 80186e0:	d1ed      	bne.n	80186be <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 80186e2:	4a14      	ldr	r2, [pc, #80]	; (8018734 <prvSwitchTimerLists+0x84>)
 80186e4:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80186e6:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80186e8:	6031      	str	r1, [r6, #0]
}
 80186ea:	b002      	add	sp, #8
 80186ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80186f0:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80186f2:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80186f4:	2300      	movs	r3, #0
 80186f6:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80186f8:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80186fa:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 80186fc:	42af      	cmp	r7, r5
 80186fe:	d205      	bcs.n	801870c <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018700:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018702:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018704:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018706:	f7fe f909 	bl	801691c <vListInsert>
 801870a:	e7e6      	b.n	80186da <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801870c:	4619      	mov	r1, r3
 801870e:	f8cd 8000 	str.w	r8, [sp]
 8018712:	f7ff ff95 	bl	8018640 <xTimerGenericCommand>
				configASSERT( xResult );
 8018716:	2800      	cmp	r0, #0
 8018718:	d1df      	bne.n	80186da <prvSwitchTimerLists+0x2a>
 801871a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801871e:	b672      	cpsid	i
 8018720:	f383 8811 	msr	BASEPRI, r3
 8018724:	f3bf 8f6f 	isb	sy
 8018728:	f3bf 8f4f 	dsb	sy
 801872c:	b662      	cpsie	i
 801872e:	e7fe      	b.n	801872e <prvSwitchTimerLists+0x7e>
 8018730:	20006850 	.word	0x20006850
 8018734:	20006854 	.word	0x20006854

08018738 <prvTimerTask>:
{
 8018738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801873c:	4e9a      	ldr	r6, [pc, #616]	; (80189a8 <prvTimerTask+0x270>)
 801873e:	b087      	sub	sp, #28
 8018740:	4d9a      	ldr	r5, [pc, #616]	; (80189ac <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 8018742:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8018746:	4c9a      	ldr	r4, [pc, #616]	; (80189b0 <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018748:	6833      	ldr	r3, [r6, #0]
 801874a:	681f      	ldr	r7, [r3, #0]
 801874c:	2f00      	cmp	r7, #0
 801874e:	f000 80ac 	beq.w	80188aa <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018752:	68db      	ldr	r3, [r3, #12]
 8018754:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8018756:	f7ff fa01 	bl	8017b5c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801875a:	f7ff fa07 	bl	8017b6c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801875e:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8018760:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8018762:	4290      	cmp	r0, r2
 8018764:	f0c0 80a9 	bcc.w	80188ba <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018768:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 801876a:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801876c:	f200 80ca 	bhi.w	8018904 <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 8018770:	f7ff fb50 	bl	8017e14 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018774:	6832      	ldr	r2, [r6, #0]
 8018776:	68d2      	ldr	r2, [r2, #12]
 8018778:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801877c:	f10b 0804 	add.w	r8, fp, #4
 8018780:	4640      	mov	r0, r8
 8018782:	f7fe f8e3 	bl	801694c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018786:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 801878a:	0743      	lsls	r3, r0, #29
 801878c:	f100 80ca 	bmi.w	8018924 <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018790:	f020 0001 	bic.w	r0, r0, #1
 8018794:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018798:	f8db 3020 	ldr.w	r3, [fp, #32]
 801879c:	4658      	mov	r0, fp
 801879e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80187a0:	2200      	movs	r2, #0
 80187a2:	a902      	add	r1, sp, #8
 80187a4:	6820      	ldr	r0, [r4, #0]
 80187a6:	f7fe fc11 	bl	8016fcc <xQueueReceive>
 80187aa:	2800      	cmp	r0, #0
 80187ac:	d0cc      	beq.n	8018748 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80187ae:	9b02      	ldr	r3, [sp, #8]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	db71      	blt.n	8018898 <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80187b4:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80187b6:	697b      	ldr	r3, [r7, #20]
 80187b8:	b113      	cbz	r3, 80187c0 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80187ba:	1d38      	adds	r0, r7, #4
 80187bc:	f7fe f8c6 	bl	801694c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80187c0:	f7ff f9d4 	bl	8017b6c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80187c4:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80187c6:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 80187c8:	4298      	cmp	r0, r3
 80187ca:	d37d      	bcc.n	80188c8 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 80187cc:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80187ce:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 80187d2:	2b09      	cmp	r3, #9
 80187d4:	d8e4      	bhi.n	80187a0 <prvTimerTask+0x68>
 80187d6:	e8df f003 	tbb	[pc, r3]
 80187da:	0505      	.short	0x0505
 80187dc:	56394f05 	.word	0x56394f05
 80187e0:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80187e4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80187e8:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80187ea:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80187ee:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80187f0:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80187f2:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80187f6:	185a      	adds	r2, r3, r1
 80187f8:	bf2c      	ite	cs
 80187fa:	2001      	movcs	r0, #1
 80187fc:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 80187fe:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018800:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8018802:	f200 8081 	bhi.w	8018908 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018806:	eba8 0303 	sub.w	r3, r8, r3
 801880a:	4299      	cmp	r1, r3
 801880c:	f200 80b5 	bhi.w	801897a <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018810:	6a3b      	ldr	r3, [r7, #32]
 8018812:	4638      	mov	r0, r7
 8018814:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018816:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801881a:	0759      	lsls	r1, r3, #29
 801881c:	d5c0      	bpl.n	80187a0 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801881e:	2200      	movs	r2, #0
 8018820:	69bb      	ldr	r3, [r7, #24]
 8018822:	4638      	mov	r0, r7
 8018824:	9200      	str	r2, [sp, #0]
 8018826:	9a03      	ldr	r2, [sp, #12]
 8018828:	441a      	add	r2, r3
 801882a:	2300      	movs	r3, #0
 801882c:	4619      	mov	r1, r3
 801882e:	f7ff ff07 	bl	8018640 <xTimerGenericCommand>
							configASSERT( xResult );
 8018832:	2800      	cmp	r0, #0
 8018834:	d1b4      	bne.n	80187a0 <prvTimerTask+0x68>
 8018836:	f04f 0330 	mov.w	r3, #48	; 0x30
 801883a:	b672      	cpsid	i
 801883c:	f383 8811 	msr	BASEPRI, r3
 8018840:	f3bf 8f6f 	isb	sy
 8018844:	f3bf 8f4f 	dsb	sy
 8018848:	b662      	cpsie	i
 801884a:	e7fe      	b.n	801884a <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801884c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018850:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018852:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018856:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018858:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801885c:	2b00      	cmp	r3, #0
 801885e:	f000 8098 	beq.w	8018992 <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018862:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018864:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018866:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8018868:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801886a:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 801886c:	d856      	bhi.n	801891c <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801886e:	4b51      	ldr	r3, [pc, #324]	; (80189b4 <prvTimerTask+0x27c>)
 8018870:	6818      	ldr	r0, [r3, #0]
 8018872:	f7fe f853 	bl	801691c <vListInsert>
	return xProcessTimerNow;
 8018876:	e793      	b.n	80187a0 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801887c:	f023 0301 	bic.w	r3, r3, #1
 8018880:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 8018884:	e78c      	b.n	80187a0 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018886:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801888a:	079a      	lsls	r2, r3, #30
 801888c:	d56c      	bpl.n	8018968 <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801888e:	f023 0301 	bic.w	r3, r3, #1
 8018892:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8018896:	e783      	b.n	80187a0 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018898:	9b03      	ldr	r3, [sp, #12]
 801889a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801889e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80188a0:	9b02      	ldr	r3, [sp, #8]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	f6ff af7c 	blt.w	80187a0 <prvTimerTask+0x68>
 80188a8:	e784      	b.n	80187b4 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 80188aa:	f7ff f957 	bl	8017b5c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80188ae:	f7ff f95d 	bl	8017b6c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80188b2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80188b4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80188b6:	4282      	cmp	r2, r0
 80188b8:	d909      	bls.n	80188ce <prvTimerTask+0x196>
		prvSwitchTimerLists();
 80188ba:	f7ff fef9 	bl	80186b0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80188be:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80188c2:	f7ff faa7 	bl	8017e14 <xTaskResumeAll>
 80188c6:	e76b      	b.n	80187a0 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 80188c8:	f7ff fef2 	bl	80186b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80188cc:	e77e      	b.n	80187cc <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80188ce:	4b39      	ldr	r3, [pc, #228]	; (80189b4 <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 80188d0:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80188d4:	681a      	ldr	r2, [r3, #0]
 80188d6:	6812      	ldr	r2, [r2, #0]
 80188d8:	fab2 f282 	clz	r2, r2
 80188dc:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80188de:	eba7 010a 	sub.w	r1, r7, sl
 80188e2:	6820      	ldr	r0, [r4, #0]
 80188e4:	f7fe fd9a 	bl	801741c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80188e8:	f7ff fa94 	bl	8017e14 <xTaskResumeAll>
 80188ec:	2800      	cmp	r0, #0
 80188ee:	f47f af57 	bne.w	80187a0 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 80188f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80188f6:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 80188fa:	f3bf 8f4f 	dsb	sy
 80188fe:	f3bf 8f6f 	isb	sy
 8018902:	e74d      	b.n	80187a0 <prvTimerTask+0x68>
 8018904:	2200      	movs	r2, #0
 8018906:	e7ea      	b.n	80188de <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018908:	4543      	cmp	r3, r8
 801890a:	d902      	bls.n	8018912 <prvTimerTask+0x1da>
 801890c:	2800      	cmp	r0, #0
 801890e:	f43f af7f 	beq.w	8018810 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018912:	1d39      	adds	r1, r7, #4
 8018914:	6830      	ldr	r0, [r6, #0]
 8018916:	f7fe f801 	bl	801691c <vListInsert>
	return xProcessTimerNow;
 801891a:	e741      	b.n	80187a0 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801891c:	6830      	ldr	r0, [r6, #0]
 801891e:	f7fd fffd 	bl	801691c <vListInsert>
 8018922:	e73d      	b.n	80187a0 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018924:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018928:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801892c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 801892e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018930:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8018934:	d31c      	bcc.n	8018970 <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018936:	ebaa 0307 	sub.w	r3, sl, r7
 801893a:	429a      	cmp	r2, r3
 801893c:	d823      	bhi.n	8018986 <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801893e:	2300      	movs	r3, #0
 8018940:	463a      	mov	r2, r7
 8018942:	4658      	mov	r0, fp
 8018944:	4619      	mov	r1, r3
 8018946:	9300      	str	r3, [sp, #0]
 8018948:	f7ff fe7a 	bl	8018640 <xTimerGenericCommand>
			configASSERT( xResult );
 801894c:	2800      	cmp	r0, #0
 801894e:	f47f af23 	bne.w	8018798 <prvTimerTask+0x60>
 8018952:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018956:	b672      	cpsid	i
 8018958:	f383 8811 	msr	BASEPRI, r3
 801895c:	f3bf 8f6f 	isb	sy
 8018960:	f3bf 8f4f 	dsb	sy
 8018964:	b662      	cpsie	i
 8018966:	e7fe      	b.n	8018966 <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 8018968:	4638      	mov	r0, r7
 801896a:	f000 fa99 	bl	8018ea0 <vPortFree>
 801896e:	e717      	b.n	80187a0 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018970:	4641      	mov	r1, r8
 8018972:	6830      	ldr	r0, [r6, #0]
 8018974:	f7fd ffd2 	bl	801691c <vListInsert>
	return xProcessTimerNow;
 8018978:	e70e      	b.n	8018798 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801897a:	4b0e      	ldr	r3, [pc, #56]	; (80189b4 <prvTimerTask+0x27c>)
 801897c:	1d39      	adds	r1, r7, #4
 801897e:	6818      	ldr	r0, [r3, #0]
 8018980:	f7fd ffcc 	bl	801691c <vListInsert>
	return xProcessTimerNow;
 8018984:	e70c      	b.n	80187a0 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018986:	4b0b      	ldr	r3, [pc, #44]	; (80189b4 <prvTimerTask+0x27c>)
 8018988:	4641      	mov	r1, r8
 801898a:	6818      	ldr	r0, [r3, #0]
 801898c:	f7fd ffc6 	bl	801691c <vListInsert>
	return xProcessTimerNow;
 8018990:	e702      	b.n	8018798 <prvTimerTask+0x60>
 8018992:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018996:	b672      	cpsid	i
 8018998:	f383 8811 	msr	BASEPRI, r3
 801899c:	f3bf 8f6f 	isb	sy
 80189a0:	f3bf 8f4f 	dsb	sy
 80189a4:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80189a6:	e7fe      	b.n	80189a6 <prvTimerTask+0x26e>
 80189a8:	20006850 	.word	0x20006850
 80189ac:	20006920 	.word	0x20006920
 80189b0:	2000696c 	.word	0x2000696c
 80189b4:	20006854 	.word	0x20006854

080189b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80189b8:	4808      	ldr	r0, [pc, #32]	; (80189dc <prvPortStartFirstTask+0x24>)
 80189ba:	6800      	ldr	r0, [r0, #0]
 80189bc:	6800      	ldr	r0, [r0, #0]
 80189be:	f380 8808 	msr	MSP, r0
 80189c2:	f04f 0000 	mov.w	r0, #0
 80189c6:	f380 8814 	msr	CONTROL, r0
 80189ca:	b662      	cpsie	i
 80189cc:	b661      	cpsie	f
 80189ce:	f3bf 8f4f 	dsb	sy
 80189d2:	f3bf 8f6f 	isb	sy
 80189d6:	df00      	svc	0
 80189d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80189da:	0000      	.short	0x0000
 80189dc:	e000ed08 	.word	0xe000ed08

080189e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80189e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80189f0 <vPortEnableVFP+0x10>
 80189e4:	6801      	ldr	r1, [r0, #0]
 80189e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80189ea:	6001      	str	r1, [r0, #0]
 80189ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80189ee:	0000      	.short	0x0000
 80189f0:	e000ed88 	.word	0xe000ed88

080189f4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80189f4:	4b10      	ldr	r3, [pc, #64]	; (8018a38 <prvTaskExitError+0x44>)
{
 80189f6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80189f8:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80189fa:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 80189fc:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80189fe:	3301      	adds	r3, #1
 8018a00:	d00a      	beq.n	8018a18 <prvTaskExitError+0x24>
 8018a02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018a06:	b672      	cpsid	i
 8018a08:	f383 8811 	msr	BASEPRI, r3
 8018a0c:	f3bf 8f6f 	isb	sy
 8018a10:	f3bf 8f4f 	dsb	sy
 8018a14:	b662      	cpsie	i
 8018a16:	e7fe      	b.n	8018a16 <prvTaskExitError+0x22>
 8018a18:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018a1c:	b672      	cpsid	i
 8018a1e:	f383 8811 	msr	BASEPRI, r3
 8018a22:	f3bf 8f6f 	isb	sy
 8018a26:	f3bf 8f4f 	dsb	sy
 8018a2a:	b662      	cpsie	i
	while( ulDummy == 0 )
 8018a2c:	9b01      	ldr	r3, [sp, #4]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d0fc      	beq.n	8018a2c <prvTaskExitError+0x38>
}
 8018a32:	b002      	add	sp, #8
 8018a34:	4770      	bx	lr
 8018a36:	bf00      	nop
 8018a38:	20000444 	.word	0x20000444

08018a3c <pxPortInitialiseStack>:
{
 8018a3c:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018a3e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018a42:	4809      	ldr	r0, [pc, #36]	; (8018a68 <pxPortInitialiseStack+0x2c>)
{
 8018a44:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018a46:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018a4a:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018a4e:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8018a52:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018a56:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018a5a:	f06f 0102 	mvn.w	r1, #2
}
 8018a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018a62:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8018a66:	4770      	bx	lr
 8018a68:	080189f5 	.word	0x080189f5
 8018a6c:	ffffffff 	.word	0xffffffff

08018a70 <SVC_Handler>:
	__asm volatile (
 8018a70:	4b07      	ldr	r3, [pc, #28]	; (8018a90 <pxCurrentTCBConst2>)
 8018a72:	6819      	ldr	r1, [r3, #0]
 8018a74:	6808      	ldr	r0, [r1, #0]
 8018a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a7a:	f380 8809 	msr	PSP, r0
 8018a7e:	f3bf 8f6f 	isb	sy
 8018a82:	f04f 0000 	mov.w	r0, #0
 8018a86:	f380 8811 	msr	BASEPRI, r0
 8018a8a:	4770      	bx	lr
 8018a8c:	f3af 8000 	nop.w

08018a90 <pxCurrentTCBConst2>:
 8018a90:	20006728 	.word	0x20006728

08018a94 <vPortEnterCritical>:
 8018a94:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018a98:	b672      	cpsid	i
 8018a9a:	f383 8811 	msr	BASEPRI, r3
 8018a9e:	f3bf 8f6f 	isb	sy
 8018aa2:	f3bf 8f4f 	dsb	sy
 8018aa6:	b662      	cpsie	i
	uxCriticalNesting++;
 8018aa8:	4a0c      	ldr	r2, [pc, #48]	; (8018adc <vPortEnterCritical+0x48>)
 8018aaa:	6813      	ldr	r3, [r2, #0]
 8018aac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8018aae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8018ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8018ab2:	d000      	beq.n	8018ab6 <vPortEnterCritical+0x22>
}
 8018ab4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018ab6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018aba:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8018abe:	b2db      	uxtb	r3, r3
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d0f7      	beq.n	8018ab4 <vPortEnterCritical+0x20>
 8018ac4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018ac8:	b672      	cpsid	i
 8018aca:	f383 8811 	msr	BASEPRI, r3
 8018ace:	f3bf 8f6f 	isb	sy
 8018ad2:	f3bf 8f4f 	dsb	sy
 8018ad6:	b662      	cpsie	i
 8018ad8:	e7fe      	b.n	8018ad8 <vPortEnterCritical+0x44>
 8018ada:	bf00      	nop
 8018adc:	20000444 	.word	0x20000444

08018ae0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8018ae0:	4a09      	ldr	r2, [pc, #36]	; (8018b08 <vPortExitCritical+0x28>)
 8018ae2:	6813      	ldr	r3, [r2, #0]
 8018ae4:	b953      	cbnz	r3, 8018afc <vPortExitCritical+0x1c>
 8018ae6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018aea:	b672      	cpsid	i
 8018aec:	f383 8811 	msr	BASEPRI, r3
 8018af0:	f3bf 8f6f 	isb	sy
 8018af4:	f3bf 8f4f 	dsb	sy
 8018af8:	b662      	cpsie	i
 8018afa:	e7fe      	b.n	8018afa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8018afc:	3b01      	subs	r3, #1
 8018afe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018b00:	b90b      	cbnz	r3, 8018b06 <vPortExitCritical+0x26>
	__asm volatile
 8018b02:	f383 8811 	msr	BASEPRI, r3
}
 8018b06:	4770      	bx	lr
 8018b08:	20000444 	.word	0x20000444
 8018b0c:	ffffffff 	.word	0xffffffff

08018b10 <PendSV_Handler>:
	__asm volatile
 8018b10:	f3ef 8009 	mrs	r0, PSP
 8018b14:	f3bf 8f6f 	isb	sy
 8018b18:	4b15      	ldr	r3, [pc, #84]	; (8018b70 <pxCurrentTCBConst>)
 8018b1a:	681a      	ldr	r2, [r3, #0]
 8018b1c:	f01e 0f10 	tst.w	lr, #16
 8018b20:	bf08      	it	eq
 8018b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b2a:	6010      	str	r0, [r2, #0]
 8018b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018b30:	f04f 0030 	mov.w	r0, #48	; 0x30
 8018b34:	b672      	cpsid	i
 8018b36:	f380 8811 	msr	BASEPRI, r0
 8018b3a:	f3bf 8f4f 	dsb	sy
 8018b3e:	f3bf 8f6f 	isb	sy
 8018b42:	b662      	cpsie	i
 8018b44:	f7ff f9ac 	bl	8017ea0 <vTaskSwitchContext>
 8018b48:	f04f 0000 	mov.w	r0, #0
 8018b4c:	f380 8811 	msr	BASEPRI, r0
 8018b50:	bc09      	pop	{r0, r3}
 8018b52:	6819      	ldr	r1, [r3, #0]
 8018b54:	6808      	ldr	r0, [r1, #0]
 8018b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b5a:	f01e 0f10 	tst.w	lr, #16
 8018b5e:	bf08      	it	eq
 8018b60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018b64:	f380 8809 	msr	PSP, r0
 8018b68:	f3bf 8f6f 	isb	sy
 8018b6c:	4770      	bx	lr
 8018b6e:	bf00      	nop

08018b70 <pxCurrentTCBConst>:
 8018b70:	20006728 	.word	0x20006728

08018b74 <SysTick_Handler>:
{
 8018b74:	b508      	push	{r3, lr}
	__asm volatile
 8018b76:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018b7a:	b672      	cpsid	i
 8018b7c:	f383 8811 	msr	BASEPRI, r3
 8018b80:	f3bf 8f6f 	isb	sy
 8018b84:	f3bf 8f4f 	dsb	sy
 8018b88:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8018b8a:	f7fe fffd 	bl	8017b88 <xTaskIncrementTick>
 8018b8e:	b128      	cbz	r0, 8018b9c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018b90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8018b9c:	2300      	movs	r3, #0
 8018b9e:	f383 8811 	msr	BASEPRI, r3
}
 8018ba2:	bd08      	pop	{r3, pc}

08018ba4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018ba4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8018ba8:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018baa:	4b06      	ldr	r3, [pc, #24]	; (8018bc4 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018bac:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018bae:	4806      	ldr	r0, [pc, #24]	; (8018bc8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018bb0:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018bb2:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	fba0 0303 	umull	r0, r3, r0, r3
 8018bba:	099b      	lsrs	r3, r3, #6
 8018bbc:	3b01      	subs	r3, #1
 8018bbe:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018bc0:	6111      	str	r1, [r2, #16]
}
 8018bc2:	4770      	bx	lr
 8018bc4:	200002b8 	.word	0x200002b8
 8018bc8:	10624dd3 	.word	0x10624dd3

08018bcc <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018bcc:	4b30      	ldr	r3, [pc, #192]	; (8018c90 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018bce:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018bd2:	4830      	ldr	r0, [pc, #192]	; (8018c94 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018bd4:	4930      	ldr	r1, [pc, #192]	; (8018c98 <xPortStartScheduler+0xcc>)
{
 8018bd6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018bd8:	781a      	ldrb	r2, [r3, #0]
{
 8018bda:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018bdc:	b2d2      	uxtb	r2, r2
 8018bde:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018be0:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018be2:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018be6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018be8:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018bea:	b2db      	uxtb	r3, r3
 8018bec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018bf0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018bf4:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018bf8:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018bfc:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018bfe:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c00:	d50f      	bpl.n	8018c22 <xPortStartScheduler+0x56>
 8018c02:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018c04:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018c08:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c0a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018c0c:	005b      	lsls	r3, r3, #1
 8018c0e:	b2db      	uxtb	r3, r3
 8018c10:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018c18:	061b      	lsls	r3, r3, #24
 8018c1a:	d4f3      	bmi.n	8018c04 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018c1c:	2903      	cmp	r1, #3
 8018c1e:	d00b      	beq.n	8018c38 <xPortStartScheduler+0x6c>
 8018c20:	6001      	str	r1, [r0, #0]
	__asm volatile
 8018c22:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018c26:	b672      	cpsid	i
 8018c28:	f383 8811 	msr	BASEPRI, r3
 8018c2c:	f3bf 8f6f 	isb	sy
 8018c30:	f3bf 8f4f 	dsb	sy
 8018c34:	b662      	cpsie	i
 8018c36:	e7fe      	b.n	8018c36 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018c38:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018c3a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018c3e:	4a14      	ldr	r2, [pc, #80]	; (8018c90 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018c40:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018c44:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8018c46:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018c48:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018c4a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018c4c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8018c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018c54:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018c58:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8018c5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018c60:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8018c64:	f7ff ff9e 	bl	8018ba4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8018c68:	4b0c      	ldr	r3, [pc, #48]	; (8018c9c <xPortStartScheduler+0xd0>)
 8018c6a:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8018c6c:	f7ff feb8 	bl	80189e0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018c70:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8018c74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018c78:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8018c7c:	f7ff fe9c 	bl	80189b8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8018c80:	f7ff f90e 	bl	8017ea0 <vTaskSwitchContext>
}
 8018c84:	4628      	mov	r0, r5
	prvTaskExitError();
 8018c86:	f7ff feb5 	bl	80189f4 <prvTaskExitError>
}
 8018c8a:	b003      	add	sp, #12
 8018c8c:	bd30      	pop	{r4, r5, pc}
 8018c8e:	bf00      	nop
 8018c90:	e000e400 	.word	0xe000e400
 8018c94:	20006978 	.word	0x20006978
 8018c98:	20006974 	.word	0x20006974
 8018c9c:	20000444 	.word	0x20000444

08018ca0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018ca0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018ca4:	2b0f      	cmp	r3, #15
 8018ca6:	d910      	bls.n	8018cca <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018ca8:	4913      	ldr	r1, [pc, #76]	; (8018cf8 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018caa:	4a14      	ldr	r2, [pc, #80]	; (8018cfc <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018cac:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018cae:	7812      	ldrb	r2, [r2, #0]
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	d90a      	bls.n	8018cca <vPortValidateInterruptPriority+0x2a>
 8018cb4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018cb8:	b672      	cpsid	i
 8018cba:	f383 8811 	msr	BASEPRI, r3
 8018cbe:	f3bf 8f6f 	isb	sy
 8018cc2:	f3bf 8f4f 	dsb	sy
 8018cc6:	b662      	cpsie	i
 8018cc8:	e7fe      	b.n	8018cc8 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018cca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018cce:	4a0c      	ldr	r2, [pc, #48]	; (8018d00 <vPortValidateInterruptPriority+0x60>)
 8018cd0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8018cd4:	6812      	ldr	r2, [r2, #0]
 8018cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018cda:	4293      	cmp	r3, r2
 8018cdc:	d90a      	bls.n	8018cf4 <vPortValidateInterruptPriority+0x54>
 8018cde:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018ce2:	b672      	cpsid	i
 8018ce4:	f383 8811 	msr	BASEPRI, r3
 8018ce8:	f3bf 8f6f 	isb	sy
 8018cec:	f3bf 8f4f 	dsb	sy
 8018cf0:	b662      	cpsie	i
 8018cf2:	e7fe      	b.n	8018cf2 <vPortValidateInterruptPriority+0x52>
	}
 8018cf4:	4770      	bx	lr
 8018cf6:	bf00      	nop
 8018cf8:	e000e3f0 	.word	0xe000e3f0
 8018cfc:	20006974 	.word	0x20006974
 8018d00:	20006978 	.word	0x20006978

08018d04 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018d04:	4b16      	ldr	r3, [pc, #88]	; (8018d60 <prvInsertBlockIntoFreeList+0x5c>)
{
 8018d06:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018d08:	461a      	mov	r2, r3
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	4283      	cmp	r3, r0
 8018d0e:	d3fb      	bcc.n	8018d08 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018d10:	6851      	ldr	r1, [r2, #4]
 8018d12:	eb02 0c01 	add.w	ip, r2, r1
 8018d16:	4560      	cmp	r0, ip
 8018d18:	d00b      	beq.n	8018d32 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018d1a:	6841      	ldr	r1, [r0, #4]
 8018d1c:	eb00 0c01 	add.w	ip, r0, r1
 8018d20:	4563      	cmp	r3, ip
 8018d22:	d00e      	beq.n	8018d42 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018d24:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018d26:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018d28:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018d2c:	bf18      	it	ne
 8018d2e:	6010      	strne	r0, [r2, #0]
}
 8018d30:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018d32:	6844      	ldr	r4, [r0, #4]
 8018d34:	4610      	mov	r0, r2
 8018d36:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018d38:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018d3c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018d3e:	4563      	cmp	r3, ip
 8018d40:	d1f0      	bne.n	8018d24 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018d42:	4c08      	ldr	r4, [pc, #32]	; (8018d64 <prvInsertBlockIntoFreeList+0x60>)
 8018d44:	6824      	ldr	r4, [r4, #0]
 8018d46:	42a3      	cmp	r3, r4
 8018d48:	d0ec      	beq.n	8018d24 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 8018d4a:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018d4c:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018d50:	4421      	add	r1, r4
}
 8018d52:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018d56:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018d5a:	bf18      	it	ne
 8018d5c:	6010      	strne	r0, [r2, #0]
}
 8018d5e:	4770      	bx	lr
 8018d60:	2001e98c 	.word	0x2001e98c
 8018d64:	2000697c 	.word	0x2000697c

08018d68 <pvPortMalloc>:
{
 8018d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d6c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8018d6e:	f7fe fef5 	bl	8017b5c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8018d72:	f8df c128 	ldr.w	ip, [pc, #296]	; 8018e9c <pvPortMalloc+0x134>
 8018d76:	f8dc 3000 	ldr.w	r3, [ip]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d05d      	beq.n	8018e3a <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018d7e:	4b42      	ldr	r3, [pc, #264]	; (8018e88 <pvPortMalloc+0x120>)
 8018d80:	681d      	ldr	r5, [r3, #0]
 8018d82:	422c      	tst	r4, r5
 8018d84:	d130      	bne.n	8018de8 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 8018d86:	b37c      	cbz	r4, 8018de8 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018d88:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8018d8a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018d8e:	d002      	beq.n	8018d96 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018d90:	f021 0107 	bic.w	r1, r1, #7
 8018d94:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018d96:	b339      	cbz	r1, 8018de8 <pvPortMalloc+0x80>
 8018d98:	4f3c      	ldr	r7, [pc, #240]	; (8018e8c <pvPortMalloc+0x124>)
 8018d9a:	683e      	ldr	r6, [r7, #0]
 8018d9c:	428e      	cmp	r6, r1
 8018d9e:	d323      	bcc.n	8018de8 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 8018da0:	483b      	ldr	r0, [pc, #236]	; (8018e90 <pvPortMalloc+0x128>)
 8018da2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018da4:	e003      	b.n	8018dae <pvPortMalloc+0x46>
 8018da6:	6823      	ldr	r3, [r4, #0]
 8018da8:	b123      	cbz	r3, 8018db4 <pvPortMalloc+0x4c>
 8018daa:	4620      	mov	r0, r4
 8018dac:	461c      	mov	r4, r3
 8018dae:	6862      	ldr	r2, [r4, #4]
 8018db0:	428a      	cmp	r2, r1
 8018db2:	d3f8      	bcc.n	8018da6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8018db4:	f8dc 3000 	ldr.w	r3, [ip]
 8018db8:	42a3      	cmp	r3, r4
 8018dba:	d015      	beq.n	8018de8 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018dbc:	6803      	ldr	r3, [r0, #0]
 8018dbe:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018dc2:	6823      	ldr	r3, [r4, #0]
 8018dc4:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018dc6:	1a53      	subs	r3, r2, r1
 8018dc8:	2b10      	cmp	r3, #16
 8018dca:	d91b      	bls.n	8018e04 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018dcc:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018dce:	0742      	lsls	r2, r0, #29
 8018dd0:	d013      	beq.n	8018dfa <pvPortMalloc+0x92>
 8018dd2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018dd6:	b672      	cpsid	i
 8018dd8:	f383 8811 	msr	BASEPRI, r3
 8018ddc:	f3bf 8f6f 	isb	sy
 8018de0:	f3bf 8f4f 	dsb	sy
 8018de4:	b662      	cpsie	i
 8018de6:	e7fe      	b.n	8018de6 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8018de8:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 8018dec:	f7ff f812 	bl	8017e14 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8018df0:	f7e8 fa46 	bl	8001280 <vApplicationMallocFailedHook>
}
 8018df4:	4640      	mov	r0, r8
 8018df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018dfa:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018dfc:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018dfe:	f7ff ff81 	bl	8018d04 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e02:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e04:	4b23      	ldr	r3, [pc, #140]	; (8018e94 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e06:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018e08:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e0a:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e0c:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e0e:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018e10:	bf38      	it	cc
 8018e12:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8018e14:	2300      	movs	r3, #0
 8018e16:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 8018e1a:	f7fe fffb 	bl	8017e14 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e1e:	f018 0f07 	tst.w	r8, #7
 8018e22:	d0e7      	beq.n	8018df4 <pvPortMalloc+0x8c>
 8018e24:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018e28:	b672      	cpsid	i
 8018e2a:	f383 8811 	msr	BASEPRI, r3
 8018e2e:	f3bf 8f6f 	isb	sy
 8018e32:	f3bf 8f4f 	dsb	sy
 8018e36:	b662      	cpsie	i
 8018e38:	e7fe      	b.n	8018e38 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 8018e3a:	4b17      	ldr	r3, [pc, #92]	; (8018e98 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018e3c:	075d      	lsls	r5, r3, #29
 8018e3e:	d11b      	bne.n	8018e78 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018e40:	461a      	mov	r2, r3
 8018e42:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8018e46:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8018e48:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 8018e4a:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018e4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018e50:	f023 0307 	bic.w	r3, r3, #7
}
 8018e54:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018e56:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8018e58:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8018e5c:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018e60:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018e64:	4b0a      	ldr	r3, [pc, #40]	; (8018e90 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 8018e66:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018e6a:	4b0a      	ldr	r3, [pc, #40]	; (8018e94 <pvPortMalloc+0x12c>)
 8018e6c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018e6e:	4b07      	ldr	r3, [pc, #28]	; (8018e8c <pvPortMalloc+0x124>)
 8018e70:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018e72:	4b05      	ldr	r3, [pc, #20]	; (8018e88 <pvPortMalloc+0x120>)
 8018e74:	601e      	str	r6, [r3, #0]
}
 8018e76:	e784      	b.n	8018d82 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018e78:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018e7a:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8018e7e:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018e82:	4610      	mov	r0, r2
 8018e84:	e7e0      	b.n	8018e48 <pvPortMalloc+0xe0>
 8018e86:	bf00      	nop
 8018e88:	2001e980 	.word	0x2001e980
 8018e8c:	2001e984 	.word	0x2001e984
 8018e90:	2001e98c 	.word	0x2001e98c
 8018e94:	2001e988 	.word	0x2001e988
 8018e98:	20006980 	.word	0x20006980
 8018e9c:	2000697c 	.word	0x2000697c

08018ea0 <vPortFree>:
	if( pv != NULL )
 8018ea0:	b1f0      	cbz	r0, 8018ee0 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018ea2:	4a1c      	ldr	r2, [pc, #112]	; (8018f14 <vPortFree+0x74>)
 8018ea4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018ea8:	6812      	ldr	r2, [r2, #0]
 8018eaa:	4213      	tst	r3, r2
 8018eac:	d00d      	beq.n	8018eca <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018eae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8018eb2:	b1b1      	cbz	r1, 8018ee2 <vPortFree+0x42>
 8018eb4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018eb8:	b672      	cpsid	i
 8018eba:	f383 8811 	msr	BASEPRI, r3
 8018ebe:	f3bf 8f6f 	isb	sy
 8018ec2:	f3bf 8f4f 	dsb	sy
 8018ec6:	b662      	cpsie	i
 8018ec8:	e7fe      	b.n	8018ec8 <vPortFree+0x28>
 8018eca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018ece:	b672      	cpsid	i
 8018ed0:	f383 8811 	msr	BASEPRI, r3
 8018ed4:	f3bf 8f6f 	isb	sy
 8018ed8:	f3bf 8f4f 	dsb	sy
 8018edc:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018ede:	e7fe      	b.n	8018ede <vPortFree+0x3e>
 8018ee0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018ee2:	ea23 0302 	bic.w	r3, r3, r2
{
 8018ee6:	b500      	push	{lr}
 8018ee8:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018eea:	f840 3c04 	str.w	r3, [r0, #-4]
 8018eee:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8018ef0:	f7fe fe34 	bl	8017b5c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018ef4:	4a08      	ldr	r2, [pc, #32]	; (8018f18 <vPortFree+0x78>)
 8018ef6:	9801      	ldr	r0, [sp, #4]
 8018ef8:	6811      	ldr	r1, [r2, #0]
 8018efa:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018efe:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018f00:	440b      	add	r3, r1
 8018f02:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018f04:	f7ff fefe 	bl	8018d04 <prvInsertBlockIntoFreeList>
}
 8018f08:	b003      	add	sp, #12
 8018f0a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8018f0e:	f7fe bf81 	b.w	8017e14 <xTaskResumeAll>
 8018f12:	bf00      	nop
 8018f14:	2001e980 	.word	0x2001e980
 8018f18:	2001e984 	.word	0x2001e984

08018f1c <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8018f1c:	f003 bb10 	b.w	801c540 <pbuf_free>

08018f20 <tcpip_thread>:
{
 8018f20:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8018f22:	4839      	ldr	r0, [pc, #228]	; (8019008 <tcpip_thread+0xe8>)
{
 8018f24:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8018f26:	f00b feff 	bl	8024d28 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8018f2a:	4b38      	ldr	r3, [pc, #224]	; (801900c <tcpip_thread+0xec>)
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	b113      	cbz	r3, 8018f36 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8018f30:	4a37      	ldr	r2, [pc, #220]	; (8019010 <tcpip_thread+0xf0>)
 8018f32:	6810      	ldr	r0, [r2, #0]
 8018f34:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8018f36:	4d34      	ldr	r5, [pc, #208]	; (8019008 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018f38:	4e36      	ldr	r6, [pc, #216]	; (8019014 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018f3a:	4f37      	ldr	r7, [pc, #220]	; (8019018 <tcpip_thread+0xf8>)
 8018f3c:	e010      	b.n	8018f60 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8018f3e:	b168      	cbz	r0, 8018f5c <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8018f40:	4628      	mov	r0, r5
 8018f42:	f00b fef7 	bl	8024d34 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018f46:	4622      	mov	r2, r4
 8018f48:	a901      	add	r1, sp, #4
 8018f4a:	4630      	mov	r0, r6
 8018f4c:	f00b fea8 	bl	8024ca0 <sys_arch_mbox_fetch>
 8018f50:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8018f52:	4628      	mov	r0, r5
 8018f54:	f00b fee8 	bl	8024d28 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8018f58:	3401      	adds	r4, #1
 8018f5a:	d111      	bne.n	8018f80 <tcpip_thread+0x60>
    sys_check_timeouts();
 8018f5c:	f008 f85c 	bl	8021018 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8018f60:	f008 f882 	bl	8021068 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018f64:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8018f66:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018f68:	d1e9      	bne.n	8018f3e <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8018f6a:	4628      	mov	r0, r5
 8018f6c:	f00b fee2 	bl	8024d34 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8018f70:	2200      	movs	r2, #0
 8018f72:	a901      	add	r1, sp, #4
 8018f74:	4630      	mov	r0, r6
 8018f76:	f00b fe93 	bl	8024ca0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8018f7a:	4628      	mov	r0, r5
 8018f7c:	f00b fed4 	bl	8024d28 <sys_mutex_lock>
    if (msg == NULL) {
 8018f80:	9c01      	ldr	r4, [sp, #4]
 8018f82:	b37c      	cbz	r4, 8018fe4 <tcpip_thread+0xc4>
  switch (msg->type) {
 8018f84:	7823      	ldrb	r3, [r4, #0]
 8018f86:	2b04      	cmp	r3, #4
 8018f88:	d837      	bhi.n	8018ffa <tcpip_thread+0xda>
 8018f8a:	e8df f003 	tbb	[pc, r3]
 8018f8e:	1821      	.short	0x1821
 8018f90:	070f      	.short	0x070f
 8018f92:	03          	.byte	0x03
 8018f93:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018f94:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8018f98:	4798      	blx	r3
      break;
 8018f9a:	e7e1      	b.n	8018f60 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018f9c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8018fa0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018fa2:	4621      	mov	r1, r4
 8018fa4:	2009      	movs	r0, #9
 8018fa6:	f002 fdb3 	bl	801bb10 <memp_free>
      break;
 8018faa:	e7d9      	b.n	8018f60 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8018fac:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8018fb0:	f008 f814 	bl	8020fdc <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018fb4:	4621      	mov	r1, r4
 8018fb6:	2009      	movs	r0, #9
 8018fb8:	f002 fdaa 	bl	801bb10 <memp_free>
      break;
 8018fbc:	e7d0      	b.n	8018f60 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8018fbe:	1d20      	adds	r0, r4, #4
 8018fc0:	c807      	ldmia	r0, {r0, r1, r2}
 8018fc2:	f007 ffed 	bl	8020fa0 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018fc6:	4621      	mov	r1, r4
 8018fc8:	2009      	movs	r0, #9
 8018fca:	f002 fda1 	bl	801bb10 <memp_free>
      break;
 8018fce:	e7c7      	b.n	8018f60 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8018fd0:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8018fd4:	6860      	ldr	r0, [r4, #4]
 8018fd6:	4798      	blx	r3
 8018fd8:	b958      	cbnz	r0, 8018ff2 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018fda:	4621      	mov	r1, r4
 8018fdc:	200a      	movs	r0, #10
 8018fde:	f002 fd97 	bl	801bb10 <memp_free>
      break;
 8018fe2:	e7bd      	b.n	8018f60 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018fe4:	463b      	mov	r3, r7
 8018fe6:	2291      	movs	r2, #145	; 0x91
 8018fe8:	490c      	ldr	r1, [pc, #48]	; (801901c <tcpip_thread+0xfc>)
 8018fea:	480d      	ldr	r0, [pc, #52]	; (8019020 <tcpip_thread+0x100>)
 8018fec:	f00d fb72 	bl	80266d4 <iprintf>
      continue;
 8018ff0:	e7b6      	b.n	8018f60 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8018ff2:	6860      	ldr	r0, [r4, #4]
 8018ff4:	f003 faa4 	bl	801c540 <pbuf_free>
 8018ff8:	e7ef      	b.n	8018fda <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018ffa:	463b      	mov	r3, r7
 8018ffc:	22cf      	movs	r2, #207	; 0xcf
 8018ffe:	4907      	ldr	r1, [pc, #28]	; (801901c <tcpip_thread+0xfc>)
 8019000:	4807      	ldr	r0, [pc, #28]	; (8019020 <tcpip_thread+0x100>)
 8019002:	f00d fb67 	bl	80266d4 <iprintf>
      break;
 8019006:	e7ab      	b.n	8018f60 <tcpip_thread+0x40>
 8019008:	2001e994 	.word	0x2001e994
 801900c:	2001e998 	.word	0x2001e998
 8019010:	2001e99c 	.word	0x2001e99c
 8019014:	2001e9a0 	.word	0x2001e9a0
 8019018:	0802e670 	.word	0x0802e670
 801901c:	0802e6a0 	.word	0x0802e6a0
 8019020:	0802b3cc 	.word	0x0802b3cc

08019024 <tcpip_inpkt>:
{
 8019024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019026:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019028:	4814      	ldr	r0, [pc, #80]	; (801907c <tcpip_inpkt+0x58>)
{
 801902a:	460e      	mov	r6, r1
 801902c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801902e:	f00b fe59 	bl	8024ce4 <sys_mbox_valid>
 8019032:	b188      	cbz	r0, 8019058 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8019034:	22fe      	movs	r2, #254	; 0xfe
 8019036:	4912      	ldr	r1, [pc, #72]	; (8019080 <tcpip_inpkt+0x5c>)
 8019038:	200a      	movs	r0, #10
 801903a:	f002 fd33 	bl	801baa4 <memp_malloc_fn>
  if (msg == NULL) {
 801903e:	4604      	mov	r4, r0
 8019040:	b1c0      	cbz	r0, 8019074 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8019042:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8019044:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8019046:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019048:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 801904a:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801904c:	480b      	ldr	r0, [pc, #44]	; (801907c <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 801904e:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019050:	f00b fe1c 	bl	8024c8c <sys_mbox_trypost>
 8019054:	b938      	cbnz	r0, 8019066 <tcpip_inpkt+0x42>
}
 8019056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019058:	4b09      	ldr	r3, [pc, #36]	; (8019080 <tcpip_inpkt+0x5c>)
 801905a:	22fc      	movs	r2, #252	; 0xfc
 801905c:	4909      	ldr	r1, [pc, #36]	; (8019084 <tcpip_inpkt+0x60>)
 801905e:	480a      	ldr	r0, [pc, #40]	; (8019088 <tcpip_inpkt+0x64>)
 8019060:	f00d fb38 	bl	80266d4 <iprintf>
 8019064:	e7e6      	b.n	8019034 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8019066:	4621      	mov	r1, r4
 8019068:	200a      	movs	r0, #10
 801906a:	f002 fd51 	bl	801bb10 <memp_free>
    return ERR_MEM;
 801906e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8019074:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801907a:	bf00      	nop
 801907c:	2001e9a0 	.word	0x2001e9a0
 8019080:	0802e670 	.word	0x0802e670
 8019084:	0802e6c0 	.word	0x0802e6c0
 8019088:	0802b3cc 	.word	0x0802b3cc

0801908c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801908c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8019090:	f013 0f18 	tst.w	r3, #24
 8019094:	d002      	beq.n	801909c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8019096:	4a03      	ldr	r2, [pc, #12]	; (80190a4 <tcpip_input+0x18>)
 8019098:	f7ff bfc4 	b.w	8019024 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 801909c:	4a02      	ldr	r2, [pc, #8]	; (80190a8 <tcpip_input+0x1c>)
 801909e:	f7ff bfc1 	b.w	8019024 <tcpip_inpkt>
 80190a2:	bf00      	nop
 80190a4:	08024b4d 	.word	0x08024b4d
 80190a8:	08023da9 	.word	0x08023da9

080190ac <tcpip_try_callback>:
{
 80190ac:	b570      	push	{r4, r5, r6, lr}
 80190ae:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80190b0:	4814      	ldr	r0, [pc, #80]	; (8019104 <tcpip_try_callback+0x58>)
{
 80190b2:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80190b4:	f00b fe16 	bl	8024ce4 <sys_mbox_valid>
 80190b8:	b188      	cbz	r0, 80190de <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80190ba:	f240 125f 	movw	r2, #351	; 0x15f
 80190be:	4912      	ldr	r1, [pc, #72]	; (8019108 <tcpip_try_callback+0x5c>)
 80190c0:	2009      	movs	r0, #9
 80190c2:	f002 fcef 	bl	801baa4 <memp_malloc_fn>
  if (msg == NULL) {
 80190c6:	4604      	mov	r4, r0
 80190c8:	b1c0      	cbz	r0, 80190fc <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 80190ca:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80190cc:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 80190ce:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80190d2:	480c      	ldr	r0, [pc, #48]	; (8019104 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 80190d4:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80190d6:	f00b fdd9 	bl	8024c8c <sys_mbox_trypost>
 80190da:	b940      	cbnz	r0, 80190ee <tcpip_try_callback+0x42>
}
 80190dc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80190de:	4b0a      	ldr	r3, [pc, #40]	; (8019108 <tcpip_try_callback+0x5c>)
 80190e0:	f240 125d 	movw	r2, #349	; 0x15d
 80190e4:	4909      	ldr	r1, [pc, #36]	; (801910c <tcpip_try_callback+0x60>)
 80190e6:	480a      	ldr	r0, [pc, #40]	; (8019110 <tcpip_try_callback+0x64>)
 80190e8:	f00d faf4 	bl	80266d4 <iprintf>
 80190ec:	e7e5      	b.n	80190ba <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80190ee:	4621      	mov	r1, r4
 80190f0:	2009      	movs	r0, #9
 80190f2:	f002 fd0d 	bl	801bb10 <memp_free>
    return ERR_MEM;
 80190f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80190fa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80190fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019100:	bd70      	pop	{r4, r5, r6, pc}
 8019102:	bf00      	nop
 8019104:	2001e9a0 	.word	0x2001e9a0
 8019108:	0802e670 	.word	0x0802e670
 801910c:	0802e6c0 	.word	0x0802e6c0
 8019110:	0802b3cc 	.word	0x0802b3cc

08019114 <tcpip_init>:
{
 8019114:	b530      	push	{r4, r5, lr}
 8019116:	b083      	sub	sp, #12
 8019118:	4605      	mov	r5, r0
 801911a:	460c      	mov	r4, r1
  lwip_init();
 801911c:	f001 ffae 	bl	801b07c <lwip_init>
  tcpip_init_done = initfunc;
 8019120:	4a15      	ldr	r2, [pc, #84]	; (8019178 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8019122:	2140      	movs	r1, #64	; 0x40
  tcpip_init_done_arg = arg;
 8019124:	4b15      	ldr	r3, [pc, #84]	; (801917c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8019126:	4816      	ldr	r0, [pc, #88]	; (8019180 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8019128:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 801912a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801912c:	f00b fd98 	bl	8024c60 <sys_mbox_new>
 8019130:	b968      	cbnz	r0, 801914e <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8019132:	4814      	ldr	r0, [pc, #80]	; (8019184 <tcpip_init+0x70>)
 8019134:	f00b fde8 	bl	8024d08 <sys_mutex_new>
 8019138:	b9a8      	cbnz	r0, 8019166 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801913a:	2200      	movs	r2, #0
 801913c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019140:	4911      	ldr	r1, [pc, #68]	; (8019188 <tcpip_init+0x74>)
 8019142:	9200      	str	r2, [sp, #0]
 8019144:	4811      	ldr	r0, [pc, #68]	; (801918c <tcpip_init+0x78>)
 8019146:	f00b fdf9 	bl	8024d3c <sys_thread_new>
}
 801914a:	b003      	add	sp, #12
 801914c:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801914e:	4b10      	ldr	r3, [pc, #64]	; (8019190 <tcpip_init+0x7c>)
 8019150:	f240 2261 	movw	r2, #609	; 0x261
 8019154:	490f      	ldr	r1, [pc, #60]	; (8019194 <tcpip_init+0x80>)
 8019156:	4810      	ldr	r0, [pc, #64]	; (8019198 <tcpip_init+0x84>)
 8019158:	f00d fabc 	bl	80266d4 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801915c:	4809      	ldr	r0, [pc, #36]	; (8019184 <tcpip_init+0x70>)
 801915e:	f00b fdd3 	bl	8024d08 <sys_mutex_new>
 8019162:	2800      	cmp	r0, #0
 8019164:	d0e9      	beq.n	801913a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8019166:	4b0a      	ldr	r3, [pc, #40]	; (8019190 <tcpip_init+0x7c>)
 8019168:	f240 2265 	movw	r2, #613	; 0x265
 801916c:	490b      	ldr	r1, [pc, #44]	; (801919c <tcpip_init+0x88>)
 801916e:	480a      	ldr	r0, [pc, #40]	; (8019198 <tcpip_init+0x84>)
 8019170:	f00d fab0 	bl	80266d4 <iprintf>
 8019174:	e7e1      	b.n	801913a <tcpip_init+0x26>
 8019176:	bf00      	nop
 8019178:	2001e998 	.word	0x2001e998
 801917c:	2001e99c 	.word	0x2001e99c
 8019180:	2001e9a0 	.word	0x2001e9a0
 8019184:	2001e994 	.word	0x2001e994
 8019188:	08018f21 	.word	0x08018f21
 801918c:	0802e718 	.word	0x0802e718
 8019190:	0802e670 	.word	0x0802e670
 8019194:	0802e6d0 	.word	0x0802e6d0
 8019198:	0802b3cc 	.word	0x0802b3cc
 801919c:	0802e6f4 	.word	0x0802e6f4

080191a0 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 80191a0:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 80191a2:	4801      	ldr	r0, [pc, #4]	; (80191a8 <pbuf_free_callback+0x8>)
 80191a4:	f7ff bf82 	b.w	80190ac <tcpip_try_callback>
 80191a8:	08018f1d 	.word	0x08018f1d

080191ac <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80191ac:	b1e8      	cbz	r0, 80191ea <fs_open+0x3e>
{
 80191ae:	b570      	push	{r4, r5, r6, lr}
 80191b0:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 80191b2:	b1b9      	cbz	r1, 80191e4 <fs_open+0x38>
 80191b4:	4606      	mov	r6, r0
 80191b6:	490e      	ldr	r1, [pc, #56]	; (80191f0 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80191b8:	4c0e      	ldr	r4, [pc, #56]	; (80191f4 <fs_open+0x48>)
 80191ba:	e000      	b.n	80191be <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 80191bc:	6861      	ldr	r1, [r4, #4]
 80191be:	4628      	mov	r0, r5
 80191c0:	f7e7 f83e 	bl	8000240 <strcmp>
 80191c4:	b128      	cbz	r0, 80191d2 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80191c6:	6824      	ldr	r4, [r4, #0]
 80191c8:	2c00      	cmp	r4, #0
 80191ca:	d1f7      	bne.n	80191bc <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 80191cc:	f06f 0005 	mvn.w	r0, #5
}
 80191d0:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 80191d2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 80191d6:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 80191d8:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 80191da:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 80191de:	7c23      	ldrb	r3, [r4, #16]
 80191e0:	7433      	strb	r3, [r6, #16]
}
 80191e2:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 80191e4:	f06f 000f 	mvn.w	r0, #15
}
 80191e8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 80191ea:	f06f 000f 	mvn.w	r0, #15
}
 80191ee:	4770      	bx	lr
 80191f0:	080395ac 	.word	0x080395ac
 80191f4:	08044718 	.word	0x08044718

080191f8 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80191f8:	4770      	bx	lr
 80191fa:	bf00      	nop

080191fc <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80191fc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8019200:	1a10      	subs	r0, r2, r0
 8019202:	4770      	bx	lr

08019204 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8019204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8019208:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 801920a:	b374      	cbz	r4, 801926a <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 801920c:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8019210:	4617      	mov	r7, r2
 8019212:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8019216:	4605      	mov	r5, r0
 8019218:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801921c:	460e      	mov	r6, r1
 801921e:	4698      	mov	r8, r3
 8019220:	fa1f fc8c 	uxth.w	ip, ip
 8019224:	4594      	cmp	ip, r2
 8019226:	bf28      	it	cs
 8019228:	4694      	movcs	ip, r2
 801922a:	4564      	cmp	r4, ip
 801922c:	bf28      	it	cs
 801922e:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8019230:	4643      	mov	r3, r8
 8019232:	4622      	mov	r2, r4
 8019234:	4631      	mov	r1, r6
 8019236:	4628      	mov	r0, r5
 8019238:	f006 fd1a 	bl	801fc70 <tcp_write>
    if (err == ERR_MEM) {
 801923c:	1c43      	adds	r3, r0, #1
 801923e:	d007      	beq.n	8019250 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8019240:	b970      	cbnz	r0, 8019260 <http_write+0x5c>
 8019242:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8019244:	8b6b      	ldrh	r3, [r5, #26]
 8019246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801924a:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 801924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 8019250:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8019254:	b123      	cbz	r3, 8019260 <http_write+0x5c>
 8019256:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 801925a:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 801925c:	2b08      	cmp	r3, #8
 801925e:	d901      	bls.n	8019264 <http_write+0x60>
    *length = 0;
 8019260:	2400      	movs	r4, #0
 8019262:	e7ee      	b.n	8019242 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 8019264:	2c01      	cmp	r4, #1
 8019266:	d8e3      	bhi.n	8019230 <http_write+0x2c>
 8019268:	e7fa      	b.n	8019260 <http_write+0x5c>
    return ERR_OK;
 801926a:	4620      	mov	r0, r4
}
 801926c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019270 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8019270:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 8019272:	4b0e      	ldr	r3, [pc, #56]	; (80192ac <http_get_404_file+0x3c>)
{
 8019274:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8019276:	4604      	mov	r4, r0
 8019278:	4619      	mov	r1, r3
  *uri = "/404.html";
 801927a:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 801927c:	f7ff ff96 	bl	80191ac <fs_open>
  if (err != ERR_OK) {
 8019280:	b908      	cbnz	r0, 8019286 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 8019282:	4620      	mov	r0, r4
 8019284:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8019286:	490a      	ldr	r1, [pc, #40]	; (80192b0 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8019288:	4620      	mov	r0, r4
    *uri = "/404.htm";
 801928a:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 801928c:	f7ff ff8e 	bl	80191ac <fs_open>
    if (err != ERR_OK) {
 8019290:	2800      	cmp	r0, #0
 8019292:	d0f6      	beq.n	8019282 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8019294:	4907      	ldr	r1, [pc, #28]	; (80192b4 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8019296:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8019298:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 801929a:	f7ff ff87 	bl	80191ac <fs_open>
      if (err != ERR_OK) {
 801929e:	2800      	cmp	r0, #0
 80192a0:	d0ef      	beq.n	8019282 <http_get_404_file+0x12>
        *uri = NULL;
 80192a2:	2300      	movs	r3, #0
        return NULL;
 80192a4:	461c      	mov	r4, r3
        *uri = NULL;
 80192a6:	602b      	str	r3, [r5, #0]
        return NULL;
 80192a8:	e7eb      	b.n	8019282 <http_get_404_file+0x12>
 80192aa:	bf00      	nop
 80192ac:	0804472c 	.word	0x0804472c
 80192b0:	08044738 	.word	0x08044738
 80192b4:	08044744 	.word	0x08044744

080192b8 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80192b8:	bb82      	cbnz	r2, 801931c <http_accept+0x64>
{
 80192ba:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 80192bc:	fab1 f581 	clz	r5, r1
 80192c0:	460c      	mov	r4, r1
 80192c2:	096d      	lsrs	r5, r5, #5
 80192c4:	b339      	cbz	r1, 8019316 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80192c6:	2101      	movs	r1, #1
 80192c8:	4620      	mov	r0, r4
 80192ca:	f003 fec3 	bl	801d054 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80192ce:	2034      	movs	r0, #52	; 0x34
 80192d0:	f002 fa46 	bl	801b760 <mem_malloc>
  if (ret != NULL) {
 80192d4:	4606      	mov	r6, r0
 80192d6:	b1d8      	cbz	r0, 8019310 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 80192d8:	2234      	movs	r2, #52	; 0x34
 80192da:	4629      	mov	r1, r5
 80192dc:	f00c fa5c 	bl	8025798 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80192e0:	4631      	mov	r1, r6
 80192e2:	4620      	mov	r0, r4
  hs->pcb = pcb;
 80192e4:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 80192e6:	f003 feeb 	bl	801d0c0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80192ea:	4620      	mov	r0, r4
 80192ec:	490d      	ldr	r1, [pc, #52]	; (8019324 <http_accept+0x6c>)
 80192ee:	f003 feeb 	bl	801d0c8 <tcp_recv>
  altcp_err(pcb, http_err);
 80192f2:	4620      	mov	r0, r4
 80192f4:	490c      	ldr	r1, [pc, #48]	; (8019328 <http_accept+0x70>)
 80192f6:	f003 ff1f 	bl	801d138 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80192fa:	2204      	movs	r2, #4
 80192fc:	4620      	mov	r0, r4
 80192fe:	490b      	ldr	r1, [pc, #44]	; (801932c <http_accept+0x74>)
 8019300:	f003 ff3c 	bl	801d17c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8019304:	4620      	mov	r0, r4
 8019306:	490a      	ldr	r1, [pc, #40]	; (8019330 <http_accept+0x78>)
 8019308:	f003 fefa 	bl	801d100 <tcp_sent>

  return ERR_OK;
 801930c:	4628      	mov	r0, r5
}
 801930e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8019310:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019314:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8019316:	f06f 0005 	mvn.w	r0, #5
}
 801931a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 801931c:	f06f 0005 	mvn.w	r0, #5
}
 8019320:	4770      	bx	lr
 8019322:	bf00      	nop
 8019324:	08019f91 	.word	0x08019f91
 8019328:	08019879 	.word	0x08019879
 801932c:	08019f39 	.word	0x08019f39
 8019330:	08019f21 	.word	0x08019f21

08019334 <http_init_file>:
{
 8019334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019338:	b087      	sub	sp, #28
 801933a:	4604      	mov	r4, r0
  if (file != NULL) {
 801933c:	460e      	mov	r6, r1
{
 801933e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019342:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019344:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 8019348:	2900      	cmp	r1, #0
 801934a:	f000 80aa 	beq.w	80194a2 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801934e:	680b      	ldr	r3, [r1, #0]
 8019350:	2b00      	cmp	r3, #0
 8019352:	f000 80ac 	beq.w	80194ae <http_init_file+0x17a>
    if (tag_check) {
 8019356:	2f00      	cmp	r7, #0
 8019358:	d16f      	bne.n	801943a <http_init_file+0x106>
    hs->handle = file;
 801935a:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 801935c:	2d00      	cmp	r5, #0
 801935e:	d04f      	beq.n	8019400 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 8019360:	782b      	ldrb	r3, [r5, #0]
 8019362:	2b00      	cmp	r3, #0
 8019364:	f000 80c0 	beq.w	80194e8 <http_init_file+0x1b4>
 8019368:	4b61      	ldr	r3, [pc, #388]	; (80194f0 <http_init_file+0x1bc>)
 801936a:	2701      	movs	r7, #1
 801936c:	9405      	str	r4, [sp, #20]
 801936e:	462c      	mov	r4, r5
 8019370:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80194f4 <http_init_file+0x1c0>
 8019374:	4698      	mov	r8, r3
 8019376:	9304      	str	r3, [sp, #16]
 8019378:	e017      	b.n	80193aa <http_init_file+0x76>
 801937a:	2d0e      	cmp	r5, #14
      *pair = '\0';
 801937c:	f04f 0300 	mov.w	r3, #0
 8019380:	bfcc      	ite	gt
 8019382:	2500      	movgt	r5, #0
 8019384:	2501      	movle	r5, #1
 8019386:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 801938a:	4620      	mov	r0, r4
 801938c:	213d      	movs	r1, #61	; 0x3d
 801938e:	f00d fc34 	bl	8026bfa <strchr>
    if (equals) {
 8019392:	b320      	cbz	r0, 80193de <http_init_file+0xaa>
      *equals = '\0';
 8019394:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019398:	f108 0804 	add.w	r8, r8, #4
 801939c:	3701      	adds	r7, #1
 801939e:	465c      	mov	r4, fp
      *equals = '\0';
 80193a0:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 80193a4:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80193a8:	b30d      	cbz	r5, 80193ee <http_init_file+0xba>
    pair = strchr(pair, '&');
 80193aa:	4620      	mov	r0, r4
 80193ac:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 80193ae:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 80193b2:	1e7d      	subs	r5, r7, #1
 80193b4:	f00d fc21 	bl	8026bfa <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80193b8:	46ba      	mov	sl, r7
    if (pair) {
 80193ba:	4683      	mov	fp, r0
 80193bc:	2800      	cmp	r0, #0
 80193be:	d1dc      	bne.n	801937a <http_init_file+0x46>
      pair = strchr(equals, ' ');
 80193c0:	4620      	mov	r0, r4
 80193c2:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80193c4:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 80193c6:	f00d fc18 	bl	8026bfa <strchr>
      if (pair) {
 80193ca:	2800      	cmp	r0, #0
 80193cc:	d0dd      	beq.n	801938a <http_init_file+0x56>
        *pair = '\0';
 80193ce:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 80193d2:	213d      	movs	r1, #61	; 0x3d
 80193d4:	4620      	mov	r0, r4
 80193d6:	f00d fc10 	bl	8026bfa <strchr>
    if (equals) {
 80193da:	2800      	cmp	r0, #0
 80193dc:	d1da      	bne.n	8019394 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 80193de:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80193e2:	3701      	adds	r7, #1
 80193e4:	f108 0804 	add.w	r8, r8, #4
 80193e8:	465c      	mov	r4, fp
 80193ea:	2d00      	cmp	r5, #0
 80193ec:	d1dd      	bne.n	80193aa <http_init_file+0x76>
 80193ee:	4652      	mov	r2, sl
 80193f0:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 80193f2:	9b04      	ldr	r3, [sp, #16]
 80193f4:	4630      	mov	r0, r6
 80193f6:	9903      	ldr	r1, [sp, #12]
 80193f8:	9300      	str	r3, [sp, #0]
 80193fa:	4b3e      	ldr	r3, [pc, #248]	; (80194f4 <http_init_file+0x1c0>)
 80193fc:	f7ef fb7a 	bl	8008af4 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019400:	e9d6 3200 	ldrd	r3, r2, [r6]
 8019404:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8019406:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019408:	db5c      	blt.n	80194c4 <http_init_file+0x190>
    hs->retries = 0;
 801940a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 801940c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 801940e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8019410:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8019414:	7c1b      	ldrb	r3, [r3, #16]
 8019416:	07d9      	lsls	r1, r3, #31
 8019418:	d526      	bpl.n	8019468 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801941a:	9b02      	ldr	r3, [sp, #8]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d132      	bne.n	8019486 <http_init_file+0x152>
  if (hs->keepalive) {
 8019420:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8019424:	b12b      	cbz	r3, 8019432 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 8019426:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019428:	2b00      	cmp	r3, #0
 801942a:	d054      	beq.n	80194d6 <http_init_file+0x1a2>
      hs->keepalive = 0;
 801942c:	2300      	movs	r3, #0
 801942e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8019432:	2000      	movs	r0, #0
 8019434:	b007      	add	sp, #28
 8019436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 801943a:	f44f 7090 	mov.w	r0, #288	; 0x120
 801943e:	f002 f98f 	bl	801b760 <mem_malloc>
  if (ret != NULL) {
 8019442:	4607      	mov	r7, r0
 8019444:	2800      	cmp	r0, #0
 8019446:	d088      	beq.n	801935a <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8019448:	f44f 7290 	mov.w	r2, #288	; 0x120
 801944c:	2100      	movs	r1, #0
 801944e:	f00c f9a3 	bl	8025798 <memset>
        ssi->parsed = file->data;
 8019452:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 8019454:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 8019456:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8019458:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 801945c:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 801945e:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8019460:	2d00      	cmp	r5, #0
 8019462:	f47f af7d 	bne.w	8019360 <http_init_file+0x2c>
 8019466:	e7cb      	b.n	8019400 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 8019468:	4b23      	ldr	r3, [pc, #140]	; (80194f8 <http_init_file+0x1c4>)
 801946a:	f640 1243 	movw	r2, #2371	; 0x943
 801946e:	4923      	ldr	r1, [pc, #140]	; (80194fc <http_init_file+0x1c8>)
 8019470:	4823      	ldr	r0, [pc, #140]	; (8019500 <http_init_file+0x1cc>)
 8019472:	f00d f92f 	bl	80266d4 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8019476:	9b02      	ldr	r3, [sp, #8]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d0d1      	beq.n	8019420 <http_init_file+0xec>
 801947c:	6963      	ldr	r3, [r4, #20]
 801947e:	7c1b      	ldrb	r3, [r3, #16]
 8019480:	07db      	lsls	r3, r3, #31
 8019482:	d5cd      	bpl.n	8019420 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8019484:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019486:	491f      	ldr	r1, [pc, #124]	; (8019504 <http_init_file+0x1d0>)
 8019488:	69a0      	ldr	r0, [r4, #24]
 801948a:	f001 f823 	bl	801a4d4 <lwip_strnstr>
      if (file_start != NULL) {
 801948e:	2800      	cmp	r0, #0
 8019490:	d0c6      	beq.n	8019420 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8019492:	3004      	adds	r0, #4
 8019494:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8019496:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8019498:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 801949a:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 801949c:	1a9b      	subs	r3, r3, r2
 801949e:	6263      	str	r3, [r4, #36]	; 0x24
 80194a0:	e7be      	b.n	8019420 <http_init_file+0xec>
    hs->file = NULL;
 80194a2:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 80194a6:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 80194a8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80194ac:	e7b8      	b.n	8019420 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80194ae:	4b12      	ldr	r3, [pc, #72]	; (80194f8 <http_init_file+0x1c4>)
 80194b0:	f640 120b 	movw	r2, #2315	; 0x90b
 80194b4:	4914      	ldr	r1, [pc, #80]	; (8019508 <http_init_file+0x1d4>)
 80194b6:	4812      	ldr	r0, [pc, #72]	; (8019500 <http_init_file+0x1cc>)
 80194b8:	f00d f90c 	bl	80266d4 <iprintf>
    if (tag_check) {
 80194bc:	2f00      	cmp	r7, #0
 80194be:	f43f af4c 	beq.w	801935a <http_init_file+0x26>
 80194c2:	e7ba      	b.n	801943a <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80194c4:	f640 1234 	movw	r2, #2356	; 0x934
 80194c8:	4b0b      	ldr	r3, [pc, #44]	; (80194f8 <http_init_file+0x1c4>)
 80194ca:	4910      	ldr	r1, [pc, #64]	; (801950c <http_init_file+0x1d8>)
 80194cc:	480c      	ldr	r0, [pc, #48]	; (8019500 <http_init_file+0x1cc>)
 80194ce:	f00d f901 	bl	80266d4 <iprintf>
      hs->left = (u32_t)file->len;
 80194d2:	6872      	ldr	r2, [r6, #4]
 80194d4:	e799      	b.n	801940a <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 80194d6:	6963      	ldr	r3, [r4, #20]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d0aa      	beq.n	8019432 <http_init_file+0xfe>
 80194dc:	7c1b      	ldrb	r3, [r3, #16]
 80194de:	f003 0303 	and.w	r3, r3, #3
 80194e2:	2b01      	cmp	r3, #1
 80194e4:	d1a5      	bne.n	8019432 <http_init_file+0xfe>
 80194e6:	e7a1      	b.n	801942c <http_init_file+0xf8>
    return (0);
 80194e8:	461a      	mov	r2, r3
 80194ea:	4b01      	ldr	r3, [pc, #4]	; (80194f0 <http_init_file+0x1bc>)
 80194ec:	9304      	str	r3, [sp, #16]
 80194ee:	e780      	b.n	80193f2 <http_init_file+0xbe>
 80194f0:	2001e9a4 	.word	0x2001e9a4
 80194f4:	2001e9e4 	.word	0x2001e9e4
 80194f8:	08044750 	.word	0x08044750
 80194fc:	080447bc 	.word	0x080447bc
 8019500:	0802b3cc 	.word	0x0802b3cc
 8019504:	0802b62c 	.word	0x0802b62c
 8019508:	08044788 	.word	0x08044788
 801950c:	0804479c 	.word	0x0804479c

08019510 <http_find_file>:
{
 8019510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019514:	ed2d 8b02 	vpush	{d8}
 8019518:	b087      	sub	sp, #28
 801951a:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 801951c:	4608      	mov	r0, r1
 801951e:	460c      	mov	r4, r1
{
 8019520:	4690      	mov	r8, r2
 8019522:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 8019524:	f7e6 fe96 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8019528:	4606      	mov	r6, r0
 801952a:	b148      	cbz	r0, 8019540 <http_find_file+0x30>
 801952c:	f100 39ff 	add.w	r9, r0, #4294967295
 8019530:	f814 3009 	ldrb.w	r3, [r4, r9]
 8019534:	2b2f      	cmp	r3, #47	; 0x2f
 8019536:	d06a      	beq.n	801960e <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 8019538:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 801953a:	f04f 0900 	mov.w	r9, #0
 801953e:	e001      	b.n	8019544 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 8019540:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8019542:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 8019544:	213f      	movs	r1, #63	; 0x3f
 8019546:	4620      	mov	r0, r4
 8019548:	f00d fb57 	bl	8026bfa <strchr>
    if (params != NULL) {
 801954c:	4606      	mov	r6, r0
 801954e:	b118      	cbz	r0, 8019558 <http_find_file+0x48>
      *params = '\0';
 8019550:	2300      	movs	r3, #0
 8019552:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 8019556:	9c05      	ldr	r4, [sp, #20]
 8019558:	4621      	mov	r1, r4
 801955a:	4628      	mov	r0, r5
 801955c:	f7ff fe26 	bl	80191ac <fs_open>
    if (err == ERR_OK) {
 8019560:	b9b0      	cbnz	r0, 8019590 <http_find_file+0x80>
    if (file != NULL) {
 8019562:	b1e7      	cbz	r7, 801959e <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8019564:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8019568:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 801956a:	f019 0908 	ands.w	r9, r9, #8
 801956e:	d01d      	beq.n	80195ac <http_find_file+0x9c>
        tag_check = 1;
 8019570:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8019574:	4623      	mov	r3, r4
 8019576:	4642      	mov	r2, r8
 8019578:	4639      	mov	r1, r7
 801957a:	4628      	mov	r0, r5
 801957c:	9601      	str	r6, [sp, #4]
 801957e:	f8cd 9000 	str.w	r9, [sp]
 8019582:	f7ff fed7 	bl	8019334 <http_init_file>
}
 8019586:	b007      	add	sp, #28
 8019588:	ecbd 8b02 	vpop	{d8}
 801958c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8019590:	a905      	add	r1, sp, #20
 8019592:	4628      	mov	r0, r5
 8019594:	f7ff fe6c 	bl	8019270 <http_get_404_file>
 8019598:	4607      	mov	r7, r0
    if (file != NULL) {
 801959a:	2f00      	cmp	r7, #0
 801959c:	d1e2      	bne.n	8019564 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 801959e:	a905      	add	r1, sp, #20
 80195a0:	4628      	mov	r0, r5
 80195a2:	f7ff fe65 	bl	8019270 <http_get_404_file>
 80195a6:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80195a8:	9c05      	ldr	r4, [sp, #20]
 80195aa:	e7e3      	b.n	8019574 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 80195ac:	213f      	movs	r1, #63	; 0x3f
 80195ae:	4620      	mov	r0, r4
 80195b0:	f00d fb23 	bl	8026bfa <strchr>
    if (param != NULL) {
 80195b4:	4682      	mov	sl, r0
 80195b6:	b108      	cbz	r0, 80195bc <http_find_file+0xac>
      *param = 0;
 80195b8:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80195bc:	212e      	movs	r1, #46	; 0x2e
 80195be:	4620      	mov	r0, r4
 80195c0:	f00d fb1b 	bl	8026bfa <strchr>
 80195c4:	4603      	mov	r3, r0
 80195c6:	b138      	cbz	r0, 80195d8 <http_find_file+0xc8>
 80195c8:	1c58      	adds	r0, r3, #1
 80195ca:	212e      	movs	r1, #46	; 0x2e
 80195cc:	461c      	mov	r4, r3
 80195ce:	f00d fb14 	bl	8026bfa <strchr>
 80195d2:	4603      	mov	r3, r0
 80195d4:	2800      	cmp	r0, #0
 80195d6:	d1f7      	bne.n	80195c8 <http_find_file+0xb8>
  u8_t tag_check = 0;
 80195d8:	4940      	ldr	r1, [pc, #256]	; (80196dc <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80195da:	4620      	mov	r0, r4
 80195dc:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80196ec <http_find_file+0x1dc>
 80195e0:	f000 ffa0 	bl	801a524 <lwip_stricmp>
 80195e4:	b148      	cbz	r0, 80195fa <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80195e6:	4b3e      	ldr	r3, [pc, #248]	; (80196e0 <http_find_file+0x1d0>)
 80195e8:	459b      	cmp	fp, r3
 80195ea:	d008      	beq.n	80195fe <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80195ec:	f85b 1b04 	ldr.w	r1, [fp], #4
 80195f0:	4620      	mov	r0, r4
 80195f2:	f000 ff97 	bl	801a524 <lwip_stricmp>
 80195f6:	2800      	cmp	r0, #0
 80195f8:	d1f5      	bne.n	80195e6 <http_find_file+0xd6>
        tag_check = 1;
 80195fa:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 80195fe:	f1ba 0f00 	cmp.w	sl, #0
 8019602:	d0d1      	beq.n	80195a8 <http_find_file+0x98>
      *param = '?';
 8019604:	233f      	movs	r3, #63	; 0x3f
 8019606:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801960a:	9c05      	ldr	r4, [sp, #20]
 801960c:	e7b2      	b.n	8019574 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801960e:	4b35      	ldr	r3, [pc, #212]	; (80196e4 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8019610:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8019612:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8019614:	d106      	bne.n	8019624 <http_find_file+0x114>
 8019616:	f1a0 0001 	sub.w	r0, r0, #1
 801961a:	fab0 f080 	clz	r0, r0
 801961e:	0940      	lsrs	r0, r0, #5
 8019620:	2800      	cmp	r0, #0
 8019622:	d057      	beq.n	80196d4 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8019624:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8019628:	bf28      	it	cs
 801962a:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 801962e:	2e01      	cmp	r6, #1
 8019630:	d008      	beq.n	8019644 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 8019632:	464a      	mov	r2, r9
 8019634:	4621      	mov	r1, r4
 8019636:	482b      	ldr	r0, [pc, #172]	; (80196e4 <http_find_file+0x1d4>)
 8019638:	f00c f886 	bl	8025748 <memcpy>
      http_uri_buf[copy_len] = 0;
 801963c:	2300      	movs	r3, #0
 801963e:	9a02      	ldr	r2, [sp, #8]
 8019640:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 8019644:	462f      	mov	r7, r5
 8019646:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 801964a:	f8df a098 	ldr.w	sl, [pc, #152]	; 80196e4 <http_find_file+0x1d4>
 801964e:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 8019652:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 8019654:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 8019656:	d012      	beq.n	801967e <http_find_file+0x16e>
        if (len_left > 0) {
 8019658:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 801965c:	d113      	bne.n	8019686 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 801965e:	4641      	mov	r1, r8
 8019660:	4628      	mov	r0, r5
 8019662:	f7ff fda3 	bl	80191ac <fs_open>
      if (err == ERR_OK) {
 8019666:	b338      	cbz	r0, 80196b8 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8019668:	f10b 0b01 	add.w	fp, fp, #1
 801966c:	f1bb 0f05 	cmp.w	fp, #5
 8019670:	d1ef      	bne.n	8019652 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 8019672:	ee18 8a10 	vmov	r8, s16
 8019676:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8019678:	f04f 0900 	mov.w	r9, #0
 801967c:	e762      	b.n	8019544 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 801967e:	4b1a      	ldr	r3, [pc, #104]	; (80196e8 <http_find_file+0x1d8>)
 8019680:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8019684:	e7eb      	b.n	801965e <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8019686:	4b18      	ldr	r3, [pc, #96]	; (80196e8 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019688:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801968a:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 801968e:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019690:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8019692:	4608      	mov	r0, r1
 8019694:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8019696:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801969a:	f7e6 fddb 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801969e:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80196a0:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80196a2:	4282      	cmp	r2, r0
 80196a4:	bf28      	it	cs
 80196a6:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80196a8:	4620      	mov	r0, r4
 80196aa:	9203      	str	r2, [sp, #12]
 80196ac:	f00c f84c 	bl	8025748 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80196b0:	2300      	movs	r3, #0
 80196b2:	9a03      	ldr	r2, [sp, #12]
 80196b4:	54a3      	strb	r3, [r4, r2]
 80196b6:	e7d2      	b.n	801965e <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 80196b8:	4a0b      	ldr	r2, [pc, #44]	; (80196e8 <http_find_file+0x1d8>)
        uri = file_name;
 80196ba:	4644      	mov	r4, r8
 80196bc:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 80196c0:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 80196c4:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 80196c6:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 80196ca:	2d00      	cmp	r5, #0
 80196cc:	f43f af3a 	beq.w	8019544 <http_find_file+0x34>
  char *params = NULL;
 80196d0:	4606      	mov	r6, r0
 80196d2:	e74f      	b.n	8019574 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 80196d4:	462f      	mov	r7, r5
 80196d6:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 80196d8:	4681      	mov	r9, r0
 80196da:	e733      	b.n	8019544 <http_find_file+0x34>
 80196dc:	08044810 	.word	0x08044810
 80196e0:	08044a5c 	.word	0x08044a5c
 80196e4:	2001ea24 	.word	0x2001ea24
 80196e8:	08044a6c 	.word	0x08044a6c
 80196ec:	08044a4c 	.word	0x08044a4c

080196f0 <http_post_rxpbuf>:
{
 80196f0:	b538      	push	{r3, r4, r5, lr}
 80196f2:	4604      	mov	r4, r0
  if (p != NULL) {
 80196f4:	b1c9      	cbz	r1, 801972a <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 80196f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80196f8:	890a      	ldrh	r2, [r1, #8]
 80196fa:	4293      	cmp	r3, r2
 80196fc:	d31a      	bcc.n	8019734 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 80196fe:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8019700:	4620      	mov	r0, r4
 8019702:	6323      	str	r3, [r4, #48]	; 0x30
 8019704:	f7ef fb04 	bl	8008d10 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8019708:	b178      	cbz	r0, 801972a <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 801970a:	2300      	movs	r3, #0
 801970c:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 801970e:	490a      	ldr	r1, [pc, #40]	; (8019738 <http_post_rxpbuf+0x48>)
 8019710:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8019712:	4620      	mov	r0, r4
 8019714:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8019716:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8019718:	f7ef fb0a 	bl	8008d30 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 801971c:	462a      	mov	r2, r5
 801971e:	4620      	mov	r0, r4
 8019720:	4905      	ldr	r1, [pc, #20]	; (8019738 <http_post_rxpbuf+0x48>)
}
 8019722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8019726:	f7ff bef3 	b.w	8019510 <http_find_file>
  if (hs->post_content_len_left == 0) {
 801972a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801972c:	2b00      	cmp	r3, #0
 801972e:	d0ee      	beq.n	801970e <http_post_rxpbuf+0x1e>
}
 8019730:	2000      	movs	r0, #0
 8019732:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 8019734:	2300      	movs	r3, #0
 8019736:	e7e3      	b.n	8019700 <http_post_rxpbuf+0x10>
 8019738:	2001ea24 	.word	0x2001ea24

0801973c <http_find_error_file>:
  if (error_nr == 501) {
 801973c:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 8019740:	4a17      	ldr	r2, [pc, #92]	; (80197a0 <http_find_error_file+0x64>)
 8019742:	4299      	cmp	r1, r3
 8019744:	4b17      	ldr	r3, [pc, #92]	; (80197a4 <http_find_error_file+0x68>)
 8019746:	4918      	ldr	r1, [pc, #96]	; (80197a8 <http_find_error_file+0x6c>)
{
 8019748:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 801974a:	4e18      	ldr	r6, [pc, #96]	; (80197ac <http_find_error_file+0x70>)
 801974c:	bf18      	it	ne
 801974e:	461e      	movne	r6, r3
 8019750:	4b17      	ldr	r3, [pc, #92]	; (80197b0 <http_find_error_file+0x74>)
 8019752:	bf18      	it	ne
 8019754:	460b      	movne	r3, r1
{
 8019756:	b084      	sub	sp, #16
 8019758:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801975a:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 801975c:	4d15      	ldr	r5, [pc, #84]	; (80197b4 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801975e:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 8019760:	bf08      	it	eq
 8019762:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8019764:	f7ff fd22 	bl	80191ac <fs_open>
 8019768:	9b03      	ldr	r3, [sp, #12]
 801976a:	b128      	cbz	r0, 8019778 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 801976c:	4629      	mov	r1, r5
 801976e:	4620      	mov	r0, r4
 8019770:	f7ff fd1c 	bl	80191ac <fs_open>
 8019774:	b948      	cbnz	r0, 801978a <http_find_error_file+0x4e>
    uri = uri2;
 8019776:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8019778:	2200      	movs	r2, #0
 801977a:	4621      	mov	r1, r4
 801977c:	4620      	mov	r0, r4
 801977e:	e9cd 2200 	strd	r2, r2, [sp]
 8019782:	f7ff fdd7 	bl	8019334 <http_init_file>
}
 8019786:	b004      	add	sp, #16
 8019788:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 801978a:	4631      	mov	r1, r6
 801978c:	4620      	mov	r0, r4
 801978e:	f7ff fd0d 	bl	80191ac <fs_open>
 8019792:	b908      	cbnz	r0, 8019798 <http_find_error_file+0x5c>
    uri = uri3;
 8019794:	4633      	mov	r3, r6
 8019796:	e7ef      	b.n	8019778 <http_find_error_file+0x3c>
    return ERR_ARG;
 8019798:	f06f 000f 	mvn.w	r0, #15
 801979c:	e7f3      	b.n	8019786 <http_find_error_file+0x4a>
 801979e:	bf00      	nop
 80197a0:	080447f4 	.word	0x080447f4
 80197a4:	0804480c 	.word	0x0804480c
 80197a8:	08044824 	.word	0x08044824
 80197ac:	080447e8 	.word	0x080447e8
 80197b0:	08044800 	.word	0x08044800
 80197b4:	08044818 	.word	0x08044818

080197b8 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 80197b8:	b538      	push	{r3, r4, r5, lr}
 80197ba:	4605      	mov	r5, r0
  if (hs != NULL) {
 80197bc:	460c      	mov	r4, r1
 80197be:	2900      	cmp	r1, #0
 80197c0:	d041      	beq.n	8019846 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 80197c2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80197c4:	bb83      	cbnz	r3, 8019828 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 80197c6:	2100      	movs	r1, #0
 80197c8:	4628      	mov	r0, r5
 80197ca:	f003 fc79 	bl	801d0c0 <tcp_arg>
  altcp_recv(pcb, NULL);
 80197ce:	2100      	movs	r1, #0
 80197d0:	4628      	mov	r0, r5
 80197d2:	f003 fc79 	bl	801d0c8 <tcp_recv>
  altcp_err(pcb, NULL);
 80197d6:	2100      	movs	r1, #0
 80197d8:	4628      	mov	r0, r5
 80197da:	f003 fcad 	bl	801d138 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80197de:	2200      	movs	r2, #0
 80197e0:	4628      	mov	r0, r5
 80197e2:	4611      	mov	r1, r2
 80197e4:	f003 fcca 	bl	801d17c <tcp_poll>
  altcp_sent(pcb, NULL);
 80197e8:	4628      	mov	r0, r5
 80197ea:	2100      	movs	r1, #0
 80197ec:	f003 fc88 	bl	801d100 <tcp_sent>
  if (hs->handle) {
 80197f0:	6960      	ldr	r0, [r4, #20]
 80197f2:	b118      	cbz	r0, 80197fc <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 80197f4:	f7ff fd00 	bl	80191f8 <fs_close>
    hs->handle = NULL;
 80197f8:	2300      	movs	r3, #0
 80197fa:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80197fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80197fe:	b118      	cbz	r0, 8019808 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 8019800:	f001 fdf2 	bl	801b3e8 <mem_free>
    hs->ssi = NULL;
 8019804:	2300      	movs	r3, #0
 8019806:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019808:	6a20      	ldr	r0, [r4, #32]
 801980a:	b118      	cbz	r0, 8019814 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 801980c:	f002 fe98 	bl	801c540 <pbuf_free>
    hs->req = NULL;
 8019810:	2300      	movs	r3, #0
 8019812:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8019814:	4620      	mov	r0, r4
 8019816:	f001 fde7 	bl	801b3e8 <mem_free>
  err = altcp_close(pcb);
 801981a:	4628      	mov	r0, r5
 801981c:	f004 fb0c 	bl	801de38 <tcp_close>
  if (err != ERR_OK) {
 8019820:	4604      	mov	r4, r0
 8019822:	b948      	cbnz	r0, 8019838 <http_close_or_abort_conn.constprop.0+0x80>
}
 8019824:	4620      	mov	r0, r4
 8019826:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8019828:	4911      	ldr	r1, [pc, #68]	; (8019870 <http_close_or_abort_conn.constprop.0+0xb8>)
 801982a:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801982c:	223f      	movs	r2, #63	; 0x3f
 801982e:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 8019830:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8019832:	f7ef fa7d 	bl	8008d30 <httpd_post_finished>
 8019836:	e7c6      	b.n	80197c6 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8019838:	4628      	mov	r0, r5
 801983a:	2204      	movs	r2, #4
 801983c:	490d      	ldr	r1, [pc, #52]	; (8019874 <http_close_or_abort_conn.constprop.0+0xbc>)
 801983e:	f003 fc9d 	bl	801d17c <tcp_poll>
}
 8019842:	4620      	mov	r0, r4
 8019844:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 8019846:	f003 fc3b 	bl	801d0c0 <tcp_arg>
  altcp_recv(pcb, NULL);
 801984a:	4621      	mov	r1, r4
 801984c:	4628      	mov	r0, r5
 801984e:	f003 fc3b 	bl	801d0c8 <tcp_recv>
  altcp_err(pcb, NULL);
 8019852:	4621      	mov	r1, r4
 8019854:	4628      	mov	r0, r5
 8019856:	f003 fc6f 	bl	801d138 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801985a:	4621      	mov	r1, r4
 801985c:	4628      	mov	r0, r5
 801985e:	4622      	mov	r2, r4
 8019860:	f003 fc8c 	bl	801d17c <tcp_poll>
  altcp_sent(pcb, NULL);
 8019864:	4621      	mov	r1, r4
 8019866:	4628      	mov	r0, r5
 8019868:	f003 fc4a 	bl	801d100 <tcp_sent>
  if (hs != NULL) {
 801986c:	e7d5      	b.n	801981a <http_close_or_abort_conn.constprop.0+0x62>
 801986e:	bf00      	nop
 8019870:	2001ea24 	.word	0x2001ea24
 8019874:	08019f39 	.word	0x08019f39

08019878 <http_err>:
  if (hs != NULL) {
 8019878:	b1c0      	cbz	r0, 80198ac <http_err+0x34>
{
 801987a:	b510      	push	{r4, lr}
 801987c:	4604      	mov	r4, r0
  if (hs->handle) {
 801987e:	6940      	ldr	r0, [r0, #20]
 8019880:	b118      	cbz	r0, 801988a <http_err+0x12>
    fs_close(hs->handle);
 8019882:	f7ff fcb9 	bl	80191f8 <fs_close>
    hs->handle = NULL;
 8019886:	2300      	movs	r3, #0
 8019888:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801988a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801988c:	b118      	cbz	r0, 8019896 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 801988e:	f001 fdab 	bl	801b3e8 <mem_free>
    hs->ssi = NULL;
 8019892:	2300      	movs	r3, #0
 8019894:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019896:	6a20      	ldr	r0, [r4, #32]
 8019898:	b118      	cbz	r0, 80198a2 <http_err+0x2a>
    pbuf_free(hs->req);
 801989a:	f002 fe51 	bl	801c540 <pbuf_free>
    hs->req = NULL;
 801989e:	2300      	movs	r3, #0
 80198a0:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 80198a2:	4620      	mov	r0, r4
}
 80198a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 80198a8:	f001 bd9e 	b.w	801b3e8 <mem_free>
 80198ac:	4770      	bx	lr
 80198ae:	bf00      	nop

080198b0 <http_eof>:
{
 80198b0:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 80198b2:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 80198b6:	b1fb      	cbz	r3, 80198f8 <http_eof+0x48>
 80198b8:	4605      	mov	r5, r0
  if (hs->handle) {
 80198ba:	6948      	ldr	r0, [r1, #20]
 80198bc:	460c      	mov	r4, r1
 80198be:	b118      	cbz	r0, 80198c8 <http_eof+0x18>
    fs_close(hs->handle);
 80198c0:	f7ff fc9a 	bl	80191f8 <fs_close>
    hs->handle = NULL;
 80198c4:	2300      	movs	r3, #0
 80198c6:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80198c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80198ca:	b118      	cbz	r0, 80198d4 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 80198cc:	f001 fd8c 	bl	801b3e8 <mem_free>
    hs->ssi = NULL;
 80198d0:	2300      	movs	r3, #0
 80198d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80198d4:	6a20      	ldr	r0, [r4, #32]
 80198d6:	b108      	cbz	r0, 80198dc <http_eof+0x2c>
    pbuf_free(hs->req);
 80198d8:	f002 fe32 	bl	801c540 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 80198dc:	2234      	movs	r2, #52	; 0x34
 80198de:	2100      	movs	r1, #0
 80198e0:	4620      	mov	r0, r4
 80198e2:	f00b ff59 	bl	8025798 <memset>
    hs->keepalive = 1;
 80198e6:	2301      	movs	r3, #1
    hs->pcb = pcb;
 80198e8:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 80198ea:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 80198ee:	8b6b      	ldrh	r3, [r5, #26]
 80198f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198f4:	836b      	strh	r3, [r5, #26]
}
 80198f6:	bd38      	pop	{r3, r4, r5, pc}
 80198f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 80198fc:	f7ff bf5c 	b.w	80197b8 <http_close_or_abort_conn.constprop.0>

08019900 <http_send>:
{
 8019900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8019904:	460d      	mov	r5, r1
{
 8019906:	b087      	sub	sp, #28
  if (hs == NULL) {
 8019908:	2900      	cmp	r1, #0
 801990a:	f000 824b 	beq.w	8019da4 <http_send+0x4a4>
  if (hs->left == 0) {
 801990e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8019910:	4607      	mov	r7, r0
 8019912:	2b00      	cmp	r3, #0
 8019914:	f000 818c 	beq.w	8019c30 <http_send+0x330>
  if (hs->ssi) {
 8019918:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801991a:	2c00      	cmp	r4, #0
 801991c:	f000 819a 	beq.w	8019c54 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 8019920:	6823      	ldr	r3, [r4, #0]
 8019922:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8019924:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8019928:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 801992a:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 801992e:	f200 80c3 	bhi.w	8019ab8 <http_send+0x1b8>
  u8_t data_to_send = 0;
 8019932:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 8019936:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019938:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 801993c:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019940:	2b04      	cmp	r3, #4
 8019942:	d003      	beq.n	801994c <http_send+0x4c>
 8019944:	68e1      	ldr	r1, [r4, #12]
 8019946:	2900      	cmp	r1, #0
 8019948:	f000 8091 	beq.w	8019a6e <http_send+0x16e>
 801994c:	2e00      	cmp	r6, #0
 801994e:	f040 811b 	bne.w	8019b88 <http_send+0x288>
    if (len == 0) {
 8019952:	2a00      	cmp	r2, #0
 8019954:	f000 811b 	beq.w	8019b8e <http_send+0x28e>
    switch (ssi->tag_state) {
 8019958:	2b04      	cmp	r3, #4
 801995a:	d8f1      	bhi.n	8019940 <http_send+0x40>
 801995c:	e8df f003 	tbb	[pc, r3]
 8019960:	23407466 	.word	0x23407466
 8019964:	03          	.byte	0x03
 8019965:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8019966:	68a3      	ldr	r3, [r4, #8]
 8019968:	69a9      	ldr	r1, [r5, #24]
 801996a:	428b      	cmp	r3, r1
 801996c:	f240 80f1 	bls.w	8019b52 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8019970:	6863      	ldr	r3, [r4, #4]
 8019972:	4299      	cmp	r1, r3
 8019974:	f200 81fc 	bhi.w	8019d70 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019978:	1a5a      	subs	r2, r3, r1
 801997a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 801997e:	4282      	cmp	r2, r0
 8019980:	f340 8117 	ble.w	8019bb2 <http_send+0x2b2>
 8019984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019988:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801998c:	2300      	movs	r3, #0
 801998e:	f10d 0216 	add.w	r2, sp, #22
 8019992:	4638      	mov	r0, r7
 8019994:	f7ff fc36 	bl	8019204 <http_write>
          if (err == ERR_OK) {
 8019998:	2800      	cmp	r0, #0
 801999a:	f000 81fe 	beq.w	8019d9a <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801999e:	4606      	mov	r6, r0
    if (len == 0) {
 80199a0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80199a4:	e11a      	b.n	8019bdc <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80199a6:	6821      	ldr	r1, [r4, #0]
 80199a8:	8a20      	ldrh	r0, [r4, #16]
 80199aa:	f891 e000 	ldrb.w	lr, [r1]
 80199ae:	2800      	cmp	r0, #0
 80199b0:	f040 80b9 	bne.w	8019b26 <http_send+0x226>
 80199b4:	f1ae 0c09 	sub.w	ip, lr, #9
 80199b8:	fa5f fc8c 	uxtb.w	ip, ip
 80199bc:	f1bc 0f17 	cmp.w	ip, #23
 80199c0:	f200 80b1 	bhi.w	8019b26 <http_send+0x226>
 80199c4:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8019d6c <http_send+0x46c>
 80199c8:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80199cc:	f01c 0f01 	tst.w	ip, #1
 80199d0:	f000 80a9 	beq.w	8019b26 <http_send+0x226>
          ssi->parsed++;
 80199d4:	3101      	adds	r1, #1
 80199d6:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 80199d8:	68e1      	ldr	r1, [r4, #12]
 80199da:	3901      	subs	r1, #1
 80199dc:	60e1      	str	r1, [r4, #12]
          break;
 80199de:	e7af      	b.n	8019940 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80199e0:	8a20      	ldrh	r0, [r4, #16]
 80199e2:	2800      	cmp	r0, #0
 80199e4:	f040 8083 	bne.w	8019aee <http_send+0x1ee>
 80199e8:	6821      	ldr	r1, [r4, #0]
 80199ea:	f891 e000 	ldrb.w	lr, [r1]
 80199ee:	f1ae 0c09 	sub.w	ip, lr, #9
 80199f2:	fa5f fc8c 	uxtb.w	ip, ip
 80199f6:	f1bc 0f17 	cmp.w	ip, #23
 80199fa:	f240 8110 	bls.w	8019c1e <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80199fe:	f8df c350 	ldr.w	ip, [pc, #848]	; 8019d50 <http_send+0x450>
 8019a02:	f894 9014 	ldrb.w	r9, [r4, #20]
 8019a06:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8019a0a:	f8dc c004 	ldr.w	ip, [ip, #4]
 8019a0e:	f89c c000 	ldrb.w	ip, [ip]
 8019a12:	45f4      	cmp	ip, lr
 8019a14:	f000 8083 	beq.w	8019b1e <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8019a18:	f100 0c01 	add.w	ip, r0, #1
 8019a1c:	4420      	add	r0, r4
 8019a1e:	f8a4 c010 	strh.w	ip, [r4, #16]
 8019a22:	f891 c000 	ldrb.w	ip, [r1]
 8019a26:	f880 c016 	strb.w	ip, [r0, #22]
 8019a2a:	e7d3      	b.n	80199d4 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8019a2c:	6821      	ldr	r1, [r4, #0]
 8019a2e:	7808      	ldrb	r0, [r1, #0]
 8019a30:	283c      	cmp	r0, #60	; 0x3c
 8019a32:	d002      	beq.n	8019a3a <http_send+0x13a>
 8019a34:	282f      	cmp	r0, #47	; 0x2f
 8019a36:	d1cd      	bne.n	80199d4 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8019a38:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 8019a3a:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 8019a3c:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 8019a3e:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 8019a40:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8019a44:	8223      	strh	r3, [r4, #16]
            break;
 8019a46:	e7c5      	b.n	80199d4 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8019a48:	49c1      	ldr	r1, [pc, #772]	; (8019d50 <http_send+0x450>)
 8019a4a:	7d20      	ldrb	r0, [r4, #20]
 8019a4c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019a50:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8019a54:	f811 100c 	ldrb.w	r1, [r1, ip]
 8019a58:	2900      	cmp	r1, #0
 8019a5a:	f040 8086 	bne.w	8019b6a <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 8019a5e:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8019a60:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019a62:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8019a64:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019a68:	2900      	cmp	r1, #0
 8019a6a:	f47f af6f 	bne.w	801994c <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8019a6e:	6823      	ldr	r3, [r4, #0]
 8019a70:	69a9      	ldr	r1, [r5, #24]
 8019a72:	428b      	cmp	r3, r1
 8019a74:	f240 808b 	bls.w	8019b8e <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019a78:	1a5b      	subs	r3, r3, r1
 8019a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019a7e:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019a80:	4293      	cmp	r3, r2
 8019a82:	bfa8      	it	ge
 8019a84:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019a86:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019a8a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019a8e:	2300      	movs	r3, #0
 8019a90:	f7ff fbb8 	bl	8019204 <http_write>
    if (err == ERR_OK) {
 8019a94:	2800      	cmp	r0, #0
 8019a96:	d17a      	bne.n	8019b8e <http_send+0x28e>
    hs->file += len;
 8019a98:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 8019a9c:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 8019aa0:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8019aa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8019aa4:	440a      	add	r2, r1
    hs->left -= len;
 8019aa6:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8019aa8:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8019aaa:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d071      	beq.n	8019b94 <http_send+0x294>
}
 8019ab0:	4640      	mov	r0, r8
 8019ab2:	b007      	add	sp, #28
 8019ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019ab8:	1a5b      	subs	r3, r3, r1
 8019aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019abe:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019ac0:	4293      	cmp	r3, r2
 8019ac2:	bfa8      	it	ge
 8019ac4:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019ac6:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019aca:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019ace:	2300      	movs	r3, #0
 8019ad0:	f7ff fb98 	bl	8019204 <http_write>
    if (err == ERR_OK) {
 8019ad4:	4606      	mov	r6, r0
 8019ad6:	2800      	cmp	r0, #0
 8019ad8:	f000 8154 	beq.w	8019d84 <http_send+0x484>
  u8_t data_to_send = 0;
 8019adc:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 8019ae0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d052      	beq.n	8019b8e <http_send+0x28e>
    if (len == 0) {
 8019ae8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019aec:	e724      	b.n	8019938 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8019aee:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8019d50 <http_send+0x450>
 8019af2:	7d21      	ldrb	r1, [r4, #20]
 8019af4:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8019af8:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8019afc:	6821      	ldr	r1, [r4, #0]
 8019afe:	f89e a000 	ldrb.w	sl, [lr]
 8019b02:	f891 c000 	ldrb.w	ip, [r1]
 8019b06:	45e2      	cmp	sl, ip
 8019b08:	d072      	beq.n	8019bf0 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8019b0a:	f1ac 0c09 	sub.w	ip, ip, #9
 8019b0e:	fa5f fc8c 	uxtb.w	ip, ip
 8019b12:	f1bc 0f17 	cmp.w	ip, #23
 8019b16:	d964      	bls.n	8019be2 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8019b18:	2807      	cmp	r0, #7
 8019b1a:	f67f af7d 	bls.w	8019a18 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 8019b1e:	2300      	movs	r3, #0
 8019b20:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8019b24:	e756      	b.n	80199d4 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8019b26:	f894 9014 	ldrb.w	r9, [r4, #20]
 8019b2a:	f8df c224 	ldr.w	ip, [pc, #548]	; 8019d50 <http_send+0x450>
 8019b2e:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8019b32:	f8dc c004 	ldr.w	ip, [ip, #4]
 8019b36:	f81c 9000 	ldrb.w	r9, [ip, r0]
 8019b3a:	45f1      	cmp	r9, lr
 8019b3c:	f000 80a1 	beq.w	8019c82 <http_send+0x382>
          ssi->parse_left--;
 8019b40:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 8019b42:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8019b44:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8019b48:	3b01      	subs	r3, #1
          ssi->parsed++;
 8019b4a:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8019b4c:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8019b4e:	2300      	movs	r3, #0
 8019b50:	e6f8      	b.n	8019944 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8019b52:	8a21      	ldrh	r1, [r4, #16]
 8019b54:	8a60      	ldrh	r0, [r4, #18]
 8019b56:	4281      	cmp	r1, r0
 8019b58:	f0c0 80e0 	bcc.w	8019d1c <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 8019b5c:	6023      	str	r3, [r4, #0]
 8019b5e:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 8019b60:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8019b64:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8019b68:	e6ec      	b.n	8019944 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8019b6a:	6820      	ldr	r0, [r4, #0]
 8019b6c:	f890 e000 	ldrb.w	lr, [r0]
 8019b70:	458e      	cmp	lr, r1
 8019b72:	f000 80ce 	beq.w	8019d12 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 8019b76:	2300      	movs	r3, #0
 8019b78:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8019b7c:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 8019b7e:	3001      	adds	r0, #1
          ssi->parse_left--;
 8019b80:	3901      	subs	r1, #1
          ssi->parsed++;
 8019b82:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8019b84:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8019b86:	e6db      	b.n	8019940 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8019b88:	2b04      	cmp	r3, #4
 8019b8a:	f47f af70 	bne.w	8019a6e <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8019b8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d18d      	bne.n	8019ab0 <http_send+0x1b0>
 8019b94:	6968      	ldr	r0, [r5, #20]
 8019b96:	f7ff fb31 	bl	80191fc <fs_bytes_left>
 8019b9a:	2800      	cmp	r0, #0
 8019b9c:	dc88      	bgt.n	8019ab0 <http_send+0x1b0>
      return 0;
 8019b9e:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 8019ba2:	4638      	mov	r0, r7
 8019ba4:	4629      	mov	r1, r5
 8019ba6:	f7ff fe83 	bl	80198b0 <http_eof>
}
 8019baa:	4640      	mov	r0, r8
 8019bac:	b007      	add	sp, #28
 8019bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb2:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019bb4:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 8019bb8:	2a00      	cmp	r2, #0
 8019bba:	f47f aee7 	bne.w	801998c <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 8019bbe:	428b      	cmp	r3, r1
 8019bc0:	d805      	bhi.n	8019bce <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019bc2:	68a0      	ldr	r0, [r4, #8]
 8019bc4:	1ac3      	subs	r3, r0, r3
 8019bc6:	441a      	add	r2, r3
 8019bc8:	b292      	uxth	r2, r2
 8019bca:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 8019bce:	4411      	add	r1, r2
 8019bd0:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8019bd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8019bd4:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 8019bd8:	1a9b      	subs	r3, r3, r2
 8019bda:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019bdc:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8019be0:	e6ae      	b.n	8019940 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8019be2:	f8df a188 	ldr.w	sl, [pc, #392]	; 8019d6c <http_send+0x46c>
 8019be6:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8019bea:	f01c 0f01 	tst.w	ip, #1
 8019bee:	d093      	beq.n	8019b18 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 8019bf0:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019bf2:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8019bf4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019bf8:	f200 80e0 	bhi.w	8019dbc <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8019bfc:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 8019bfe:	4420      	add	r0, r4
 8019c00:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019c04:	f89e 3000 	ldrb.w	r3, [lr]
 8019c08:	780a      	ldrb	r2, [r1, #0]
 8019c0a:	429a      	cmp	r2, r3
 8019c0c:	f000 80cf 	beq.w	8019dae <http_send+0x4ae>
              ssi->tag_index = 0;
 8019c10:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019c14:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8019c18:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019c1c:	e6da      	b.n	80199d4 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8019c1e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8019d6c <http_send+0x46c>
 8019c22:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8019c26:	f01c 0f01 	tst.w	ip, #1
 8019c2a:	f47f aed3 	bne.w	80199d4 <http_send+0xd4>
 8019c2e:	e6e6      	b.n	80199fe <http_send+0xfe>
  if (hs->handle == NULL) {
 8019c30:	6948      	ldr	r0, [r1, #20]
 8019c32:	2800      	cmp	r0, #0
 8019c34:	d0b3      	beq.n	8019b9e <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 8019c36:	f7ff fae1 	bl	80191fc <fs_bytes_left>
  if (bytes_left <= 0) {
 8019c3a:	2800      	cmp	r0, #0
 8019c3c:	ddaf      	ble.n	8019b9e <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8019c3e:	4b45      	ldr	r3, [pc, #276]	; (8019d54 <http_send+0x454>)
 8019c40:	f240 429d 	movw	r2, #1181	; 0x49d
 8019c44:	4944      	ldr	r1, [pc, #272]	; (8019d58 <http_send+0x458>)
 8019c46:	4845      	ldr	r0, [pc, #276]	; (8019d5c <http_send+0x45c>)
 8019c48:	f00c fd44 	bl	80266d4 <iprintf>
  if (hs->ssi) {
 8019c4c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8019c4e:	2c00      	cmp	r4, #0
 8019c50:	f47f ae66 	bne.w	8019920 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8019c54:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8019c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019c5c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019c5e:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8019c60:	428a      	cmp	r2, r1
 8019c62:	bf88      	it	hi
 8019c64:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019c66:	4623      	mov	r3, r4
 8019c68:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8019c6a:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019c6e:	f10d 0216 	add.w	r2, sp, #22
 8019c72:	f7ff fac7 	bl	8019204 <http_write>
  if (err == ERR_OK) {
 8019c76:	2800      	cmp	r0, #0
 8019c78:	f43f af0e 	beq.w	8019a98 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8019c7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 8019c7e:	46a0      	mov	r8, r4
 8019c80:	e714      	b.n	8019aac <http_send+0x1ac>
          ssi->parsed++;
 8019c82:	3101      	adds	r1, #1
          ssi->tag_index++;
 8019c84:	3001      	adds	r0, #1
          ssi->parsed++;
 8019c86:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 8019c88:	b280      	uxth	r0, r0
          ssi->parse_left--;
 8019c8a:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 8019c8c:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 8019c8e:	3901      	subs	r1, #1
 8019c90:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8019c92:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8019c96:	2900      	cmp	r1, #0
 8019c98:	f47f ae52 	bne.w	8019940 <http_send+0x40>
  ssi = hs->ssi;
 8019c9c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8019ca0:	f1b9 0f00 	cmp.w	r9, #0
 8019ca4:	f000 8115 	beq.w	8019ed2 <http_send+0x5d2>
  if (httpd_ssi_handler
 8019ca8:	4b2d      	ldr	r3, [pc, #180]	; (8019d60 <http_send+0x460>)
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	9300      	str	r3, [sp, #0]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	f000 8093 	beq.w	8019dda <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 8019cb4:	4b2b      	ldr	r3, [pc, #172]	; (8019d64 <http_send+0x464>)
 8019cb6:	681a      	ldr	r2, [r3, #0]
 8019cb8:	2a00      	cmp	r2, #0
 8019cba:	f000 808e 	beq.w	8019dda <http_send+0x4da>
 8019cbe:	4b2a      	ldr	r3, [pc, #168]	; (8019d68 <http_send+0x468>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019cc2:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 8019cc4:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019cc6:	f340 8088 	ble.w	8019dda <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019cca:	f109 0a16 	add.w	sl, r9, #22
 8019cce:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	9503      	str	r5, [sp, #12]
 8019cd4:	460d      	mov	r5, r1
 8019cd6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8019cda:	4656      	mov	r6, sl
 8019cdc:	461c      	mov	r4, r3
 8019cde:	4692      	mov	sl, r2
 8019ce0:	e003      	b.n	8019cea <http_send+0x3ea>
 8019ce2:	3401      	adds	r4, #1
 8019ce4:	42a5      	cmp	r5, r4
 8019ce6:	f000 8105 	beq.w	8019ef4 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019cea:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8019cee:	4630      	mov	r0, r6
 8019cf0:	f7e6 faa6 	bl	8000240 <strcmp>
 8019cf4:	2800      	cmp	r0, #0
 8019cf6:	d1f4      	bne.n	8019ce2 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8019cf8:	4623      	mov	r3, r4
 8019cfa:	22fe      	movs	r2, #254	; 0xfe
 8019cfc:	f109 011f 	add.w	r1, r9, #31
 8019d00:	9e02      	ldr	r6, [sp, #8]
 8019d02:	4618      	mov	r0, r3
 8019d04:	9b00      	ldr	r3, [sp, #0]
 8019d06:	9c01      	ldr	r4, [sp, #4]
 8019d08:	9d03      	ldr	r5, [sp, #12]
 8019d0a:	4798      	blx	r3
 8019d0c:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 8019d10:	e0a6      	b.n	8019e60 <http_send+0x560>
            ssi->tag_index++;
 8019d12:	f10c 0c01 	add.w	ip, ip, #1
 8019d16:	f8a4 c010 	strh.w	ip, [r4, #16]
 8019d1a:	e72f      	b.n	8019b7c <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8019d1c:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8019d1e:	311f      	adds	r1, #31
 8019d20:	f10d 0216 	add.w	r2, sp, #22
 8019d24:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8019d26:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8019d2a:	4421      	add	r1, r4
 8019d2c:	4638      	mov	r0, r7
 8019d2e:	f7ff fa69 	bl	8019204 <http_write>
              ssi->tag_index += len;
 8019d32:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 8019d36:	4606      	mov	r6, r0
 8019d38:	2800      	cmp	r0, #0
 8019d3a:	f47f af4f 	bne.w	8019bdc <http_send+0x2dc>
              ssi->tag_index += len;
 8019d3e:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8019d40:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 8019d44:	4413      	add	r3, r2
 8019d46:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019d48:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8019d4c:	e5f8      	b.n	8019940 <http_send+0x40>
 8019d4e:	bf00      	nop
 8019d50:	08044a5c 	.word	0x08044a5c
 8019d54:	08044750 	.word	0x08044750
 8019d58:	08044830 	.word	0x08044830
 8019d5c:	0802b3cc 	.word	0x0802b3cc
 8019d60:	2001ee68 	.word	0x2001ee68
 8019d64:	2001ee6c 	.word	0x2001ee6c
 8019d68:	2001ea64 	.word	0x2001ea64
 8019d6c:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8019d70:	4b63      	ldr	r3, [pc, #396]	; (8019f00 <http_send+0x600>)
 8019d72:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8019d76:	4963      	ldr	r1, [pc, #396]	; (8019f04 <http_send+0x604>)
 8019d78:	4863      	ldr	r0, [pc, #396]	; (8019f08 <http_send+0x608>)
 8019d7a:	f00c fcab 	bl	80266d4 <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019d7e:	6863      	ldr	r3, [r4, #4]
 8019d80:	69a9      	ldr	r1, [r5, #24]
 8019d82:	e5f9      	b.n	8019978 <http_send+0x78>
      hs->file += len;
 8019d84:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 8019d88:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 8019d8c:	69ab      	ldr	r3, [r5, #24]
 8019d8e:	4413      	add	r3, r2
 8019d90:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8019d92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019d94:	1a9b      	subs	r3, r3, r2
 8019d96:	626b      	str	r3, [r5, #36]	; 0x24
 8019d98:	e6a2      	b.n	8019ae0 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 8019d9a:	6863      	ldr	r3, [r4, #4]
 8019d9c:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019d9e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019da2:	e70c      	b.n	8019bbe <http_send+0x2be>
    return 0;
 8019da4:	4688      	mov	r8, r1
}
 8019da6:	4640      	mov	r0, r8
 8019da8:	b007      	add	sp, #28
 8019daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 8019dae:	2301      	movs	r3, #1
 8019db0:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019db2:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8019db6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019dba:	e60b      	b.n	80199d4 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019dbc:	4b50      	ldr	r3, [pc, #320]	; (8019f00 <http_send+0x600>)
 8019dbe:	f240 523a 	movw	r2, #1338	; 0x53a
 8019dc2:	4952      	ldr	r1, [pc, #328]	; (8019f0c <http_send+0x60c>)
 8019dc4:	4850      	ldr	r0, [pc, #320]	; (8019f08 <http_send+0x608>)
 8019dc6:	f00c fc85 	bl	80266d4 <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019dca:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8019dcc:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019dce:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8019dd2:	6821      	ldr	r1, [r4, #0]
 8019dd4:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8019dd8:	e710      	b.n	8019bfc <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019dda:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8019dde:	4650      	mov	r0, sl
 8019de0:	f7e6 fa38 	bl	8000254 <strlen>
 8019de4:	28e4      	cmp	r0, #228	; 0xe4
 8019de6:	d865      	bhi.n	8019eb4 <http_send+0x5b4>
 8019de8:	2809      	cmp	r0, #9
 8019dea:	bf28      	it	cs
 8019dec:	2009      	movcs	r0, #9
 8019dee:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8019df2:	4686      	mov	lr, r0
 8019df4:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019df6:	f100 0319 	add.w	r3, r0, #25
 8019dfa:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019dfc:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8019f1c <http_send+0x61c>
 8019e00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019e04:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8019e08:	f8bc 3000 	ldrh.w	r3, [ip]
 8019e0c:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e10:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e14:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e18:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e1a:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e1e:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e20:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e24:	f00b fc90 	bl	8025748 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019e28:	4b39      	ldr	r3, [pc, #228]	; (8019f10 <http_send+0x610>)
 8019e2a:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019e2c:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019e2e:	eb09 0e02 	add.w	lr, r9, r2
 8019e32:	6818      	ldr	r0, [r3, #0]
 8019e34:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019e38:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019e3a:	799b      	ldrb	r3, [r3, #6]
 8019e3c:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 8019e40:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019e44:	f8ae c004 	strh.w	ip, [lr, #4]
 8019e48:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019e4c:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 8019e50:	f7e6 fa00 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019e54:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8019e58:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019e5a:	d232      	bcs.n	8019ec2 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 8019e5c:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 8019e60:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 8019e62:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 8019e64:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 8019e66:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 8019e6a:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 8019e6c:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8019e70:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8019e72:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8019e74:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8019e76:	d802      	bhi.n	8019e7e <http_send+0x57e>
    if (len == 0) {
 8019e78:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019e7c:	e566      	b.n	801994c <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019e7e:	1a52      	subs	r2, r2, r1
 8019e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019e84:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019e86:	429a      	cmp	r2, r3
 8019e88:	bfa8      	it	ge
 8019e8a:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019e8c:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019e8e:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019e92:	f10d 0216 	add.w	r2, sp, #22
 8019e96:	f7ff f9b5 	bl	8019204 <http_write>
              if (err == ERR_OK) {
 8019e9a:	4606      	mov	r6, r0
 8019e9c:	2800      	cmp	r0, #0
 8019e9e:	f47f ad7f 	bne.w	80199a0 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8019ea2:	6861      	ldr	r1, [r4, #4]
 8019ea4:	69ab      	ldr	r3, [r5, #24]
 8019ea6:	4299      	cmp	r1, r3
 8019ea8:	d91b      	bls.n	8019ee2 <http_send+0x5e2>
                hs->file += len;
 8019eaa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019eae:	4413      	add	r3, r2
 8019eb0:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8019eb2:	e68e      	b.n	8019bd2 <http_send+0x2d2>
 8019eb4:	233a      	movs	r3, #58	; 0x3a
 8019eb6:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8019eb8:	f04f 0e09 	mov.w	lr, #9
 8019ebc:	e9cd 3200 	strd	r3, r2, [sp]
 8019ec0:	e79c      	b.n	8019dfc <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019ec2:	4b0f      	ldr	r3, [pc, #60]	; (8019f00 <http_send+0x600>)
 8019ec4:	f240 323f 	movw	r2, #831	; 0x33f
 8019ec8:	4912      	ldr	r1, [pc, #72]	; (8019f14 <http_send+0x614>)
 8019eca:	480f      	ldr	r0, [pc, #60]	; (8019f08 <http_send+0x608>)
 8019ecc:	f00c fc02 	bl	80266d4 <iprintf>
 8019ed0:	e7c4      	b.n	8019e5c <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8019ed2:	4b0b      	ldr	r3, [pc, #44]	; (8019f00 <http_send+0x600>)
 8019ed4:	f240 3206 	movw	r2, #774	; 0x306
 8019ed8:	490f      	ldr	r1, [pc, #60]	; (8019f18 <http_send+0x618>)
 8019eda:	480b      	ldr	r0, [pc, #44]	; (8019f08 <http_send+0x608>)
 8019edc:	f00c fbfa 	bl	80266d4 <iprintf>
 8019ee0:	e6e2      	b.n	8019ca8 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019ee2:	68a2      	ldr	r2, [r4, #8]
 8019ee4:	1a52      	subs	r2, r2, r1
 8019ee6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8019eea:	440a      	add	r2, r1
 8019eec:	b292      	uxth	r2, r2
 8019eee:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019ef2:	e7dc      	b.n	8019eae <http_send+0x5ae>
 8019ef4:	46b2      	mov	sl, r6
 8019ef6:	9c01      	ldr	r4, [sp, #4]
 8019ef8:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 8019efc:	e76f      	b.n	8019dde <http_send+0x4de>
 8019efe:	bf00      	nop
 8019f00:	08044750 	.word	0x08044750
 8019f04:	080448b8 	.word	0x080448b8
 8019f08:	0802b3cc 	.word	0x0802b3cc
 8019f0c:	08044868 	.word	0x08044868
 8019f10:	080448a0 	.word	0x080448a0
 8019f14:	080448a8 	.word	0x080448a8
 8019f18:	08044880 	.word	0x08044880
 8019f1c:	0804488c 	.word	0x0804488c

08019f20 <http_sent>:
{
 8019f20:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8019f22:	4603      	mov	r3, r0
 8019f24:	b130      	cbz	r0, 8019f34 <http_sent+0x14>
  hs->retries = 0;
 8019f26:	2200      	movs	r2, #0
 8019f28:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8019f2a:	4619      	mov	r1, r3
  hs->retries = 0;
 8019f2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8019f30:	f7ff fce6 	bl	8019900 <http_send>
}
 8019f34:	2000      	movs	r0, #0
 8019f36:	bd08      	pop	{r3, pc}

08019f38 <http_poll>:
{
 8019f38:	b510      	push	{r4, lr}
 8019f3a:	460c      	mov	r4, r1
  if (hs == NULL) {
 8019f3c:	b1a8      	cbz	r0, 8019f6a <http_poll+0x32>
    hs->retries++;
 8019f3e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019f42:	3301      	adds	r3, #1
 8019f44:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8019f46:	2b04      	cmp	r3, #4
    hs->retries++;
 8019f48:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8019f4c:	d019      	beq.n	8019f82 <http_poll+0x4a>
    if (hs->handle) {
 8019f4e:	6943      	ldr	r3, [r0, #20]
 8019f50:	b123      	cbz	r3, 8019f5c <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8019f52:	4601      	mov	r1, r0
 8019f54:	4620      	mov	r0, r4
 8019f56:	f7ff fcd3 	bl	8019900 <http_send>
 8019f5a:	b908      	cbnz	r0, 8019f60 <http_poll+0x28>
  return ERR_OK;
 8019f5c:	2000      	movs	r0, #0
}
 8019f5e:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8019f60:	4620      	mov	r0, r4
 8019f62:	f006 fc9f 	bl	80208a4 <tcp_output>
  return ERR_OK;
 8019f66:	2000      	movs	r0, #0
 8019f68:	e7f9      	b.n	8019f5e <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8019f6a:	4601      	mov	r1, r0
 8019f6c:	4620      	mov	r0, r4
 8019f6e:	f7ff fc23 	bl	80197b8 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8019f72:	3001      	adds	r0, #1
 8019f74:	d1f2      	bne.n	8019f5c <http_poll+0x24>
      altcp_abort(pcb);
 8019f76:	4620      	mov	r0, r4
 8019f78:	f003 fd66 	bl	801da48 <tcp_abort>
      return ERR_ABRT;
 8019f7c:	f06f 000c 	mvn.w	r0, #12
}
 8019f80:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8019f82:	4601      	mov	r1, r0
 8019f84:	4620      	mov	r0, r4
 8019f86:	f7ff fc17 	bl	80197b8 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 8019f8a:	2000      	movs	r0, #0
}
 8019f8c:	bd10      	pop	{r4, pc}
 8019f8e:	bf00      	nop

08019f90 <http_recv>:
{
 8019f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f94:	4605      	mov	r5, r0
 8019f96:	b08d      	sub	sp, #52	; 0x34
 8019f98:	460e      	mov	r6, r1
 8019f9a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8019f9c:	b9ab      	cbnz	r3, 8019fca <http_recv+0x3a>
 8019f9e:	fab2 f782 	clz	r7, r2
 8019fa2:	097f      	lsrs	r7, r7, #5
 8019fa4:	b1ca      	cbz	r2, 8019fda <http_recv+0x4a>
 8019fa6:	b188      	cbz	r0, 8019fcc <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 8019fa8:	8911      	ldrh	r1, [r2, #8]
 8019faa:	4630      	mov	r0, r6
 8019fac:	f002 ff48 	bl	801ce40 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8019fb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	f040 813c 	bne.w	801a230 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 8019fb8:	696b      	ldr	r3, [r5, #20]
 8019fba:	b1b3      	cbz	r3, 8019fea <http_recv+0x5a>
      pbuf_free(p);
 8019fbc:	4620      	mov	r0, r4
 8019fbe:	f002 fabf 	bl	801c540 <pbuf_free>
}
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	b00d      	add	sp, #52	; 0x34
 8019fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8019fca:	b132      	cbz	r2, 8019fda <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 8019fcc:	4630      	mov	r0, r6
 8019fce:	8921      	ldrh	r1, [r4, #8]
 8019fd0:	f002 ff36 	bl	801ce40 <tcp_recved>
      pbuf_free(p);
 8019fd4:	4620      	mov	r0, r4
 8019fd6:	f002 fab3 	bl	801c540 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 8019fda:	4629      	mov	r1, r5
 8019fdc:	4630      	mov	r0, r6
 8019fde:	f7ff fbeb 	bl	80197b8 <http_close_or_abort_conn.constprop.0>
}
 8019fe2:	2000      	movs	r0, #0
 8019fe4:	b00d      	add	sp, #52	; 0x34
 8019fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8019fea:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 8019fec:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	f040 8173 	bne.w	801a2da <http_recv+0x34a>
  if (hs->req == NULL) {
 8019ff4:	2800      	cmp	r0, #0
 8019ff6:	f000 8136 	beq.w	801a266 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 8019ffa:	4621      	mov	r1, r4
 8019ffc:	f002 fad2 	bl	801c5a4 <pbuf_cat>
  pbuf_ref(p);
 801a000:	4620      	mov	r0, r4
 801a002:	f002 fabb 	bl	801c57c <pbuf_ref>
  if (hs->req->next != NULL) {
 801a006:	6a28      	ldr	r0, [r5, #32]
 801a008:	6803      	ldr	r3, [r0, #0]
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	f000 812d 	beq.w	801a26a <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801a010:	8907      	ldrh	r7, [r0, #8]
 801a012:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801a016:	49bc      	ldr	r1, [pc, #752]	; (801a308 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801a018:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 801a01a:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801a01c:	bf28      	it	cs
 801a01e:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801a020:	2300      	movs	r3, #0
 801a022:	463a      	mov	r2, r7
 801a024:	f002 fb30 	bl	801c688 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 801a028:	2f06      	cmp	r7, #6
 801a02a:	f240 80ef 	bls.w	801a20c <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 801a02e:	463a      	mov	r2, r7
 801a030:	49b6      	ldr	r1, [pc, #728]	; (801a30c <http_recv+0x37c>)
 801a032:	4640      	mov	r0, r8
 801a034:	f000 fa4e 	bl	801a4d4 <lwip_strnstr>
    if (crlf != NULL) {
 801a038:	2800      	cmp	r0, #0
 801a03a:	f000 80e7 	beq.w	801a20c <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 801a03e:	2204      	movs	r2, #4
 801a040:	49b3      	ldr	r1, [pc, #716]	; (801a310 <http_recv+0x380>)
 801a042:	4640      	mov	r0, r8
 801a044:	f00d fb28 	bl	8027698 <strncmp>
 801a048:	4682      	mov	sl, r0
 801a04a:	2800      	cmp	r0, #0
 801a04c:	f040 8118 	bne.w	801a280 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801a050:	1f3a      	subs	r2, r7, #4
 801a052:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 801a056:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801a05a:	49ae      	ldr	r1, [pc, #696]	; (801a314 <http_recv+0x384>)
 801a05c:	b292      	uxth	r2, r2
 801a05e:	4658      	mov	r0, fp
 801a060:	e9cd 3204 	strd	r3, r2, [sp, #16]
 801a064:	f000 fa36 	bl	801a4d4 <lwip_strnstr>
      if (sp2 == NULL) {
 801a068:	9a05      	ldr	r2, [sp, #20]
 801a06a:	4681      	mov	r9, r0
 801a06c:	2800      	cmp	r0, #0
 801a06e:	f000 8123 	beq.w	801a2b8 <http_recv+0x328>
      int is_09 = 0;
 801a072:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 801a074:	9305      	str	r3, [sp, #20]
 801a076:	f1b9 0f00 	cmp.w	r9, #0
 801a07a:	f000 80c7 	beq.w	801a20c <http_recv+0x27c>
 801a07e:	9b04      	ldr	r3, [sp, #16]
 801a080:	4599      	cmp	r9, r3
 801a082:	f240 80c3 	bls.w	801a20c <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 801a086:	463a      	mov	r2, r7
 801a088:	49a3      	ldr	r1, [pc, #652]	; (801a318 <http_recv+0x388>)
 801a08a:	4640      	mov	r0, r8
 801a08c:	f000 fa22 	bl	801a4d4 <lwip_strnstr>
 801a090:	2800      	cmp	r0, #0
 801a092:	f000 80bb 	beq.w	801a20c <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 801a096:	9b05      	ldr	r3, [sp, #20]
 801a098:	2b00      	cmp	r3, #0
 801a09a:	f000 812b 	beq.w	801a2f4 <http_recv+0x364>
            hs->keepalive = 0;
 801a09e:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 801a0a0:	eba9 020b 	sub.w	r2, r9, fp
 801a0a4:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 801a0a8:	2100      	movs	r1, #0
 801a0aa:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 801a0ac:	b292      	uxth	r2, r2
          *sp1 = 0;
 801a0ae:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 801a0b0:	f80b 1002 	strb.w	r1, [fp, r2]
 801a0b4:	445a      	add	r2, fp
 801a0b6:	9206      	str	r2, [sp, #24]
          if (is_post) {
 801a0b8:	f1ba 0f00 	cmp.w	sl, #0
 801a0bc:	f000 8113 	beq.w	801a2e6 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801a0c0:	f109 0301 	add.w	r3, r9, #1
 801a0c4:	4994      	ldr	r1, [pc, #592]	; (801a318 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 801a0c6:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801a0ca:	eba3 0208 	sub.w	r2, r3, r8
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	9305      	str	r3, [sp, #20]
 801a0d2:	1aba      	subs	r2, r7, r2
 801a0d4:	f000 f9fe 	bl	801a4d4 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 801a0d8:	9008      	str	r0, [sp, #32]
 801a0da:	2800      	cmp	r0, #0
 801a0dc:	f000 8168 	beq.w	801a3b0 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 801a0e0:	9b05      	ldr	r3, [sp, #20]
 801a0e2:	498e      	ldr	r1, [pc, #568]	; (801a31c <http_recv+0x38c>)
 801a0e4:	1ac2      	subs	r2, r0, r3
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	f000 f9f4 	bl	801a4d4 <lwip_strnstr>
    if (scontent_len != NULL) {
 801a0ec:	4603      	mov	r3, r0
 801a0ee:	9009      	str	r0, [sp, #36]	; 0x24
 801a0f0:	2800      	cmp	r0, #0
 801a0f2:	f000 812f 	beq.w	801a354 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 801a0f6:	3310      	adds	r3, #16
 801a0f8:	220a      	movs	r2, #10
 801a0fa:	4984      	ldr	r1, [pc, #528]	; (801a30c <http_recv+0x37c>)
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	9307      	str	r3, [sp, #28]
 801a100:	f000 f9e8 	bl	801a4d4 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 801a104:	2800      	cmp	r0, #0
 801a106:	f000 8125 	beq.w	801a354 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 801a10a:	9b07      	ldr	r3, [sp, #28]
 801a10c:	4618      	mov	r0, r3
 801a10e:	f00b f8bd 	bl	802528c <atoi>
        if (content_len == 0) {
 801a112:	1e02      	subs	r2, r0, #0
 801a114:	9207      	str	r2, [sp, #28]
 801a116:	f040 811b 	bne.w	801a350 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 801a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a11c:	7c1b      	ldrb	r3, [r3, #16]
 801a11e:	2b30      	cmp	r3, #48	; 0x30
 801a120:	f040 8118 	bne.w	801a354 <http_recv+0x3c4>
 801a124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a126:	7c5b      	ldrb	r3, [r3, #17]
 801a128:	2b0d      	cmp	r3, #13
 801a12a:	f040 8113 	bne.w	801a354 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a12e:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 801a130:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801a132:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a134:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a136:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 801a138:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 801a334 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 801a13c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a140:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801a144:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 801a146:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a148:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a14a:	9a05      	ldr	r2, [sp, #20]
 801a14c:	bfb4      	ite	lt
 801a14e:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a150:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801a154:	429f      	cmp	r7, r3
 801a156:	bfa8      	it	ge
 801a158:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a15a:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 801a15c:	2700      	movs	r7, #0
 801a15e:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 801a162:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a164:	9807      	ldr	r0, [sp, #28]
 801a166:	f8cd b004 	str.w	fp, [sp, #4]
 801a16a:	9000      	str	r0, [sp, #0]
 801a16c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 801a170:	9003      	str	r0, [sp, #12]
 801a172:	203f      	movs	r0, #63	; 0x3f
 801a174:	9002      	str	r0, [sp, #8]
 801a176:	4628      	mov	r0, r5
 801a178:	f7ee fdd2 	bl	8008d20 <httpd_post_begin>
          if (err == ERR_OK) {
 801a17c:	2800      	cmp	r0, #0
 801a17e:	f040 80f7 	bne.w	801a370 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 801a182:	9807      	ldr	r0, [sp, #28]
 801a184:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 801a186:	f1ba 0f00 	cmp.w	sl, #0
 801a18a:	f000 80d5 	beq.w	801a338 <http_recv+0x3a8>
 801a18e:	4652      	mov	r2, sl
 801a190:	e005      	b.n	801a19e <http_recv+0x20e>
              q = q->next;
 801a192:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 801a194:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 801a198:	2a00      	cmp	r2, #0
 801a19a:	f000 80cd 	beq.w	801a338 <http_recv+0x3a8>
 801a19e:	8953      	ldrh	r3, [r2, #10]
 801a1a0:	4543      	cmp	r3, r8
              start_offset -= q->len;
 801a1a2:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 801a1a6:	d9f4      	bls.n	801a192 <http_recv+0x202>
 801a1a8:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 801a1aa:	4641      	mov	r1, r8
 801a1ac:	4610      	mov	r0, r2
 801a1ae:	f002 f93b 	bl	801c428 <pbuf_remove_header>
              pbuf_ref(q);
 801a1b2:	4650      	mov	r0, sl
 801a1b4:	f002 f9e2 	bl	801c57c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 801a1b8:	4651      	mov	r1, sl
 801a1ba:	4628      	mov	r0, r5
 801a1bc:	f7ff fa98 	bl	80196f0 <http_post_rxpbuf>
 801a1c0:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 801a1c2:	2f00      	cmp	r7, #0
 801a1c4:	f000 80ba 	beq.w	801a33c <http_recv+0x3ac>
              *sp1 = ' ';
 801a1c8:	2320      	movs	r3, #32
 801a1ca:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 801a1cc:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 801a1d0:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a1d2:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a1d4:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a1d8:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801a1da:	d022      	beq.n	801a222 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801a1dc:	2f00      	cmp	r7, #0
 801a1de:	d048      	beq.n	801a272 <http_recv+0x2e2>
 801a1e0:	1d7a      	adds	r2, r7, #5
 801a1e2:	f43f aeeb 	beq.w	8019fbc <http_recv+0x2c>
 801a1e6:	f027 0308 	bic.w	r3, r7, #8
 801a1ea:	b25b      	sxtb	r3, r3
 801a1ec:	3310      	adds	r3, #16
 801a1ee:	d12e      	bne.n	801a24e <http_recv+0x2be>
        if (hs->req != NULL) {
 801a1f0:	6a28      	ldr	r0, [r5, #32]
 801a1f2:	b3a0      	cbz	r0, 801a25e <http_recv+0x2ce>
          pbuf_free(hs->req);
 801a1f4:	f002 f9a4 	bl	801c540 <pbuf_free>
          hs->req = NULL;
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801a1fc:	4620      	mov	r0, r4
 801a1fe:	f002 f99f 	bl	801c540 <pbuf_free>
      if (parsed == ERR_OK) {
 801a202:	b1df      	cbz	r7, 801a23c <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 801a204:	3710      	adds	r7, #16
 801a206:	f43f aee8 	beq.w	8019fda <http_recv+0x4a>
 801a20a:	e6ea      	b.n	8019fe2 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 801a20c:	6a28      	ldr	r0, [r5, #32]
 801a20e:	f002 f9ab 	bl	801c568 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 801a212:	6a2b      	ldr	r3, [r5, #32]
 801a214:	891b      	ldrh	r3, [r3, #8]
 801a216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a21a:	d202      	bcs.n	801a222 <http_recv+0x292>
 801a21c:	2805      	cmp	r0, #5
 801a21e:	f67f aecd 	bls.w	8019fbc <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 801a222:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a226:	4628      	mov	r0, r5
 801a228:	f7ff fa88 	bl	801973c <http_find_error_file>
 801a22c:	4607      	mov	r7, r0
 801a22e:	e7d5      	b.n	801a1dc <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 801a230:	4621      	mov	r1, r4
 801a232:	4628      	mov	r0, r5
    hs->retries = 0;
 801a234:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 801a238:	f7ff fa5a 	bl	80196f0 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 801a23c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801a23e:	2b00      	cmp	r3, #0
 801a240:	f47f aecf 	bne.w	8019fe2 <http_recv+0x52>
      http_send(pcb, hs);
 801a244:	4629      	mov	r1, r5
 801a246:	4630      	mov	r0, r6
 801a248:	f7ff fb5a 	bl	8019900 <http_send>
 801a24c:	e6c9      	b.n	8019fe2 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801a24e:	4b34      	ldr	r3, [pc, #208]	; (801a320 <http_recv+0x390>)
 801a250:	f640 2204 	movw	r2, #2564	; 0xa04
 801a254:	4933      	ldr	r1, [pc, #204]	; (801a324 <http_recv+0x394>)
 801a256:	4834      	ldr	r0, [pc, #208]	; (801a328 <http_recv+0x398>)
 801a258:	f00c fa3c 	bl	80266d4 <iprintf>
 801a25c:	e7c8      	b.n	801a1f0 <http_recv+0x260>
      pbuf_free(p);
 801a25e:	4620      	mov	r0, r4
 801a260:	f002 f96e 	bl	801c540 <pbuf_free>
      if (parsed == ERR_OK) {
 801a264:	e7ce      	b.n	801a204 <http_recv+0x274>
    hs->req = p;
 801a266:	622c      	str	r4, [r5, #32]
 801a268:	e6ca      	b.n	801a000 <http_recv+0x70>
    data = (char *)p->payload;
 801a26a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 801a26e:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 801a270:	e6da      	b.n	801a028 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 801a272:	1d7b      	adds	r3, r7, #5
 801a274:	f43f aea2 	beq.w	8019fbc <http_recv+0x2c>
        if (hs->req != NULL) {
 801a278:	6a28      	ldr	r0, [r5, #32]
 801a27a:	2800      	cmp	r0, #0
 801a27c:	d0be      	beq.n	801a1fc <http_recv+0x26c>
 801a27e:	e7b9      	b.n	801a1f4 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 801a280:	2205      	movs	r2, #5
 801a282:	492a      	ldr	r1, [pc, #168]	; (801a32c <http_recv+0x39c>)
 801a284:	4640      	mov	r0, r8
 801a286:	f00d fa07 	bl	8027698 <strncmp>
 801a28a:	9005      	str	r0, [sp, #20]
 801a28c:	b9d8      	cbnz	r0, 801a2c6 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801a28e:	f1a7 0a05 	sub.w	sl, r7, #5
 801a292:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 801a296:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801a29a:	491e      	ldr	r1, [pc, #120]	; (801a314 <http_recv+0x384>)
 801a29c:	fa1f fa8a 	uxth.w	sl, sl
 801a2a0:	4658      	mov	r0, fp
        sp1 = data + 4;
 801a2a2:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801a2a4:	4652      	mov	r2, sl
 801a2a6:	f000 f915 	bl	801a4d4 <lwip_strnstr>
      if (sp2 == NULL) {
 801a2aa:	4681      	mov	r9, r0
 801a2ac:	2800      	cmp	r0, #0
 801a2ae:	d059      	beq.n	801a364 <http_recv+0x3d4>
        is_post = 1;
 801a2b0:	f04f 0a01 	mov.w	sl, #1
 801a2b4:	9b05      	ldr	r3, [sp, #20]
 801a2b6:	e6dd      	b.n	801a074 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801a2b8:	4914      	ldr	r1, [pc, #80]	; (801a30c <http_recv+0x37c>)
 801a2ba:	4658      	mov	r0, fp
 801a2bc:	f000 f90a 	bl	801a4d4 <lwip_strnstr>
        is_09 = 1;
 801a2c0:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801a2c2:	4681      	mov	r9, r0
        if (is_post) {
 801a2c4:	e6d6      	b.n	801a074 <http_recv+0xe4>
        data[4] = 0;
 801a2c6:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 801a2c8:	f240 11f5 	movw	r1, #501	; 0x1f5
 801a2cc:	4628      	mov	r0, r5
        data[4] = 0;
 801a2ce:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 801a2d2:	f7ff fa33 	bl	801973c <http_find_error_file>
 801a2d6:	4607      	mov	r7, r0
 801a2d8:	e780      	b.n	801a1dc <http_recv+0x24c>
        if (hs->req != NULL) {
 801a2da:	2800      	cmp	r0, #0
 801a2dc:	f43f ae6e 	beq.w	8019fbc <http_recv+0x2c>
 801a2e0:	f06f 0707 	mvn.w	r7, #7
 801a2e4:	e786      	b.n	801a1f4 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 801a2e6:	461a      	mov	r2, r3
 801a2e8:	4659      	mov	r1, fp
 801a2ea:	4628      	mov	r0, r5
 801a2ec:	f7ff f910 	bl	8019510 <http_find_file>
 801a2f0:	4607      	mov	r7, r0
 801a2f2:	e773      	b.n	801a1dc <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 801a2f4:	463a      	mov	r2, r7
 801a2f6:	490e      	ldr	r1, [pc, #56]	; (801a330 <http_recv+0x3a0>)
 801a2f8:	4640      	mov	r0, r8
 801a2fa:	f000 f8eb 	bl	801a4d4 <lwip_strnstr>
 801a2fe:	9b05      	ldr	r3, [sp, #20]
 801a300:	2800      	cmp	r0, #0
 801a302:	d047      	beq.n	801a394 <http_recv+0x404>
            hs->keepalive = 1;
 801a304:	2001      	movs	r0, #1
 801a306:	e6cb      	b.n	801a0a0 <http_recv+0x110>
 801a308:	2001ea68 	.word	0x2001ea68
 801a30c:	0802b4f0 	.word	0x0802b4f0
 801a310:	080448d0 	.word	0x080448d0
 801a314:	0802dde8 	.word	0x0802dde8
 801a318:	0802b62c 	.word	0x0802b62c
 801a31c:	0802b634 	.word	0x0802b634
 801a320:	08044750 	.word	0x08044750
 801a324:	08044910 	.word	0x08044910
 801a328:	0802b3cc 	.word	0x0802b3cc
 801a32c:	080448d8 	.word	0x080448d8
 801a330:	080448e0 	.word	0x080448e0
 801a334:	2001ea24 	.word	0x2001ea24
            } else if (hs->post_content_len_left == 0) {
 801a338:	9b07      	ldr	r3, [sp, #28]
 801a33a:	b303      	cbz	r3, 801a37e <http_recv+0x3ee>
        if (hs->req != NULL) {
 801a33c:	6a28      	ldr	r0, [r5, #32]
 801a33e:	b398      	cbz	r0, 801a3a8 <http_recv+0x418>
          pbuf_free(hs->req);
 801a340:	f002 f8fe 	bl	801c540 <pbuf_free>
          hs->req = NULL;
 801a344:	2300      	movs	r3, #0
      pbuf_free(p);
 801a346:	4620      	mov	r0, r4
          hs->req = NULL;
 801a348:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801a34a:	f002 f8f9 	bl	801c540 <pbuf_free>
      if (parsed == ERR_OK) {
 801a34e:	e775      	b.n	801a23c <http_recv+0x2ac>
        if (content_len >= 0) {
 801a350:	f6bf aeed 	bge.w	801a12e <http_recv+0x19e>
              *sp1 = ' ';
 801a354:	2320      	movs	r3, #32
 801a356:	9a04      	ldr	r2, [sp, #16]
 801a358:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a35a:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a35c:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a360:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801a362:	e75e      	b.n	801a222 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801a364:	4652      	mov	r2, sl
 801a366:	4658      	mov	r0, fp
 801a368:	4915      	ldr	r1, [pc, #84]	; (801a3c0 <http_recv+0x430>)
 801a36a:	f000 f8b3 	bl	801a4d4 <lwip_strnstr>
        if (is_post) {
 801a36e:	e758      	b.n	801a222 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 801a370:	463a      	mov	r2, r7
 801a372:	4659      	mov	r1, fp
 801a374:	4628      	mov	r0, r5
 801a376:	f7ff f8cb 	bl	8019510 <http_find_file>
 801a37a:	4607      	mov	r7, r0
 801a37c:	e721      	b.n	801a1c2 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 801a37e:	9907      	ldr	r1, [sp, #28]
 801a380:	2241      	movs	r2, #65	; 0x41
 801a382:	4608      	mov	r0, r1
 801a384:	f001 ff0a 	bl	801c19c <pbuf_alloc>
 801a388:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 801a38a:	4628      	mov	r0, r5
 801a38c:	f7ff f9b0 	bl	80196f0 <http_post_rxpbuf>
 801a390:	4607      	mov	r7, r0
 801a392:	e716      	b.n	801a1c2 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 801a394:	463a      	mov	r2, r7
 801a396:	490b      	ldr	r1, [pc, #44]	; (801a3c4 <http_recv+0x434>)
 801a398:	4640      	mov	r0, r8
 801a39a:	f000 f89b 	bl	801a4d4 <lwip_strnstr>
            hs->keepalive = 1;
 801a39e:	3800      	subs	r0, #0
 801a3a0:	9b05      	ldr	r3, [sp, #20]
 801a3a2:	bf18      	it	ne
 801a3a4:	2001      	movne	r0, #1
 801a3a6:	e67b      	b.n	801a0a0 <http_recv+0x110>
      pbuf_free(p);
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	f002 f8c9 	bl	801c540 <pbuf_free>
      if (parsed == ERR_OK) {
 801a3ae:	e745      	b.n	801a23c <http_recv+0x2ac>
              *sp1 = ' ';
 801a3b0:	2320      	movs	r3, #32
 801a3b2:	9a04      	ldr	r2, [sp, #16]
 801a3b4:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a3b6:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a3b8:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a3bc:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 801a3be:	e5fd      	b.n	8019fbc <http_recv+0x2c>
 801a3c0:	0802b4f0 	.word	0x0802b4f0
 801a3c4:	080448f8 	.word	0x080448f8

0801a3c8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801a3c8:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801a3ca:	202e      	movs	r0, #46	; 0x2e
 801a3cc:	f003 fc60 	bl	801dc90 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a3d0:	b358      	cbz	r0, 801a42a <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801a3d2:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801a3d4:	2101      	movs	r1, #1
 801a3d6:	f002 fe3d 	bl	801d054 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801a3da:	2250      	movs	r2, #80	; 0x50
 801a3dc:	4917      	ldr	r1, [pc, #92]	; (801a43c <httpd_init+0x74>)
 801a3de:	4620      	mov	r0, r4
 801a3e0:	f002 fc0c 	bl	801cbfc <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801a3e4:	b958      	cbnz	r0, 801a3fe <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 801a3e6:	4620      	mov	r0, r4
 801a3e8:	21ff      	movs	r1, #255	; 0xff
 801a3ea:	f002 fce9 	bl	801cdc0 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801a3ee:	4604      	mov	r4, r0
 801a3f0:	b198      	cbz	r0, 801a41a <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 801a3f2:	4620      	mov	r0, r4
 801a3f4:	4912      	ldr	r1, [pc, #72]	; (801a440 <httpd_init+0x78>)
}
 801a3f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801a3fa:	f002 beb9 	b.w	801d170 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801a3fe:	4b11      	ldr	r3, [pc, #68]	; (801a444 <httpd_init+0x7c>)
 801a400:	f640 2257 	movw	r2, #2647	; 0xa57
 801a404:	4910      	ldr	r1, [pc, #64]	; (801a448 <httpd_init+0x80>)
 801a406:	4811      	ldr	r0, [pc, #68]	; (801a44c <httpd_init+0x84>)
 801a408:	f00c f964 	bl	80266d4 <iprintf>
    pcb = altcp_listen(pcb);
 801a40c:	4620      	mov	r0, r4
 801a40e:	21ff      	movs	r1, #255	; 0xff
 801a410:	f002 fcd6 	bl	801cdc0 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801a414:	4604      	mov	r4, r0
 801a416:	2800      	cmp	r0, #0
 801a418:	d1eb      	bne.n	801a3f2 <httpd_init+0x2a>
 801a41a:	4b0a      	ldr	r3, [pc, #40]	; (801a444 <httpd_init+0x7c>)
 801a41c:	f640 2259 	movw	r2, #2649	; 0xa59
 801a420:	490b      	ldr	r1, [pc, #44]	; (801a450 <httpd_init+0x88>)
 801a422:	480a      	ldr	r0, [pc, #40]	; (801a44c <httpd_init+0x84>)
 801a424:	f00c f956 	bl	80266d4 <iprintf>
 801a428:	e7e3      	b.n	801a3f2 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a42a:	4b06      	ldr	r3, [pc, #24]	; (801a444 <httpd_init+0x7c>)
 801a42c:	f640 2272 	movw	r2, #2674	; 0xa72
 801a430:	4908      	ldr	r1, [pc, #32]	; (801a454 <httpd_init+0x8c>)
 801a432:	4806      	ldr	r0, [pc, #24]	; (801a44c <httpd_init+0x84>)
}
 801a434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a438:	f00c b94c 	b.w	80266d4 <iprintf>
 801a43c:	0804726c 	.word	0x0804726c
 801a440:	080192b9 	.word	0x080192b9
 801a444:	08044750 	.word	0x08044750
 801a448:	08044958 	.word	0x08044958
 801a44c:	0802b3cc 	.word	0x0802b3cc
 801a450:	08044974 	.word	0x08044974
 801a454:	0804493c 	.word	0x0804493c

0801a458 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 801a458:	b570      	push	{r4, r5, r6, lr}
 801a45a:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a45c:	4606      	mov	r6, r0
{
 801a45e:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a460:	b1c8      	cbz	r0, 801a496 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 801a462:	4b11      	ldr	r3, [pc, #68]	; (801a4a8 <http_set_ssi_handler+0x50>)
 801a464:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 801a466:	b175      	cbz	r5, 801a486 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801a468:	2c00      	cmp	r4, #0
 801a46a:	dd04      	ble.n	801a476 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 801a46c:	4a0f      	ldr	r2, [pc, #60]	; (801a4ac <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 801a46e:	4b10      	ldr	r3, [pc, #64]	; (801a4b0 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 801a470:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 801a472:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 801a474:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801a476:	4b0f      	ldr	r3, [pc, #60]	; (801a4b4 <http_set_ssi_handler+0x5c>)
 801a478:	f640 229f 	movw	r2, #2719	; 0xa9f
 801a47c:	490e      	ldr	r1, [pc, #56]	; (801a4b8 <http_set_ssi_handler+0x60>)
 801a47e:	480f      	ldr	r0, [pc, #60]	; (801a4bc <http_set_ssi_handler+0x64>)
 801a480:	f00c f928 	bl	80266d4 <iprintf>
 801a484:	e7f2      	b.n	801a46c <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 801a486:	4b0b      	ldr	r3, [pc, #44]	; (801a4b4 <http_set_ssi_handler+0x5c>)
 801a488:	f640 229e 	movw	r2, #2718	; 0xa9e
 801a48c:	490c      	ldr	r1, [pc, #48]	; (801a4c0 <http_set_ssi_handler+0x68>)
 801a48e:	480b      	ldr	r0, [pc, #44]	; (801a4bc <http_set_ssi_handler+0x64>)
 801a490:	f00c f920 	bl	80266d4 <iprintf>
 801a494:	e7e8      	b.n	801a468 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a496:	4b07      	ldr	r3, [pc, #28]	; (801a4b4 <http_set_ssi_handler+0x5c>)
 801a498:	f640 2297 	movw	r2, #2711	; 0xa97
 801a49c:	4909      	ldr	r1, [pc, #36]	; (801a4c4 <http_set_ssi_handler+0x6c>)
 801a49e:	4807      	ldr	r0, [pc, #28]	; (801a4bc <http_set_ssi_handler+0x64>)
 801a4a0:	f00c f918 	bl	80266d4 <iprintf>
 801a4a4:	e7dd      	b.n	801a462 <http_set_ssi_handler+0xa>
 801a4a6:	bf00      	nop
 801a4a8:	2001ee68 	.word	0x2001ee68
 801a4ac:	2001ee6c 	.word	0x2001ee6c
 801a4b0:	2001ea64 	.word	0x2001ea64
 801a4b4:	08044750 	.word	0x08044750
 801a4b8:	080449bc 	.word	0x080449bc
 801a4bc:	0802b3cc 	.word	0x0802b3cc
 801a4c0:	080449ac 	.word	0x080449ac
 801a4c4:	08044994 	.word	0x08044994

0801a4c8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 801a4c8:	ba40      	rev16	r0, r0
}
 801a4ca:	b280      	uxth	r0, r0
 801a4cc:	4770      	bx	lr
 801a4ce:	bf00      	nop

0801a4d0 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 801a4d0:	ba00      	rev	r0, r0
 801a4d2:	4770      	bx	lr

0801a4d4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 801a4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4d8:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801a4da:	4608      	mov	r0, r1
{
 801a4dc:	4688      	mov	r8, r1
 801a4de:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 801a4e0:	f7e5 feb8 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 801a4e4:	b1c0      	cbz	r0, 801a518 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801a4e6:	4605      	mov	r5, r0
 801a4e8:	7820      	ldrb	r0, [r4, #0]
 801a4ea:	b1b0      	cbz	r0, 801a51a <lwip_strnstr+0x46>
 801a4ec:	4426      	add	r6, r4
 801a4ee:	1962      	adds	r2, r4, r5
 801a4f0:	4296      	cmp	r6, r2
 801a4f2:	d314      	bcc.n	801a51e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801a4f4:	f898 7000 	ldrb.w	r7, [r8]
 801a4f8:	e005      	b.n	801a506 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801a4fa:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801a4fe:	1962      	adds	r2, r4, r5
 801a500:	b158      	cbz	r0, 801a51a <lwip_strnstr+0x46>
 801a502:	4296      	cmp	r6, r2
 801a504:	d30b      	bcc.n	801a51e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801a506:	4287      	cmp	r7, r0
 801a508:	d1f7      	bne.n	801a4fa <lwip_strnstr+0x26>
 801a50a:	4620      	mov	r0, r4
 801a50c:	462a      	mov	r2, r5
 801a50e:	4641      	mov	r1, r8
 801a510:	f00d f8c2 	bl	8027698 <strncmp>
 801a514:	2800      	cmp	r0, #0
 801a516:	d1f0      	bne.n	801a4fa <lwip_strnstr+0x26>
 801a518:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 801a51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 801a51e:	2000      	movs	r0, #0
}
 801a520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a524 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 801a524:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801a528:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801a52c:	4293      	cmp	r3, r2
 801a52e:	d01c      	beq.n	801a56a <lwip_stricmp+0x46>
 801a530:	f043 0c20 	orr.w	ip, r3, #32
{
 801a534:	b500      	push	{lr}
 801a536:	f042 0e20 	orr.w	lr, r2, #32
 801a53a:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a53e:	2a19      	cmp	r2, #25
 801a540:	d810      	bhi.n	801a564 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801a542:	45f4      	cmp	ip, lr
 801a544:	d10e      	bne.n	801a564 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 801a546:	b1a3      	cbz	r3, 801a572 <lwip_stricmp+0x4e>
    c1 = *str1++;
 801a548:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801a54c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801a550:	4293      	cmp	r3, r2
 801a552:	d0f8      	beq.n	801a546 <lwip_stricmp+0x22>
 801a554:	f043 0c20 	orr.w	ip, r3, #32
 801a558:	f042 0e20 	orr.w	lr, r2, #32
 801a55c:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a560:	2a19      	cmp	r2, #25
 801a562:	d9ee      	bls.n	801a542 <lwip_stricmp+0x1e>
        return 1;
 801a564:	2001      	movs	r0, #1
  return 0;
}
 801a566:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d1da      	bne.n	801a524 <lwip_stricmp>
  return 0;
 801a56e:	4618      	mov	r0, r3
}
 801a570:	4770      	bx	lr
  return 0;
 801a572:	4618      	mov	r0, r3
}
 801a574:	f85d fb04 	ldr.w	pc, [sp], #4

0801a578 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 801a578:	4684      	mov	ip, r0
 801a57a:	b570      	push	{r4, r5, r6, lr}
 801a57c:	e004      	b.n	801a588 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801a57e:	42b4      	cmp	r4, r6
 801a580:	d113      	bne.n	801a5aa <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 801a582:	42e8      	cmn	r0, r5
 801a584:	d013      	beq.n	801a5ae <lwip_strnicmp+0x36>
 801a586:	b193      	cbz	r3, 801a5ae <lwip_strnicmp+0x36>
    c1 = *str1++;
 801a588:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 801a58c:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 801a590:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a594:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 801a598:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 801a59a:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a59e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 801a5a2:	d0ee      	beq.n	801a582 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a5a4:	f1be 0f19 	cmp.w	lr, #25
 801a5a8:	d9e9      	bls.n	801a57e <lwip_strnicmp+0x6>
        return 1;
 801a5aa:	2001      	movs	r0, #1
  return 0;
}
 801a5ac:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 801a5ae:	2000      	movs	r0, #0
}
 801a5b0:	bd70      	pop	{r4, r5, r6, pc}
 801a5b2:	bf00      	nop

0801a5b4 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 801a5b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5b8:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a5ba:	4f24      	ldr	r7, [pc, #144]	; (801a64c <dns_call_found+0x98>)
 801a5bc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a5c0:	4c23      	ldr	r4, [pc, #140]	; (801a650 <dns_call_found+0x9c>)
{
 801a5c2:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a5c4:	012e      	lsls	r6, r5, #4
 801a5c6:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 801a5ca:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 801a5ce:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a5d2:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801a5d6:	6823      	ldr	r3, [r4, #0]
 801a5d8:	b143      	cbz	r3, 801a5ec <dns_call_found+0x38>
 801a5da:	7a22      	ldrb	r2, [r4, #8]
 801a5dc:	42aa      	cmp	r2, r5
 801a5de:	d105      	bne.n	801a5ec <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a5e0:	6862      	ldr	r2, [r4, #4]
 801a5e2:	4651      	mov	r1, sl
 801a5e4:	4640      	mov	r0, r8
 801a5e6:	4798      	blx	r3
      dns_requests[i].found = NULL;
 801a5e8:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801a5ec:	340c      	adds	r4, #12
 801a5ee:	454c      	cmp	r4, r9
 801a5f0:	d1f1      	bne.n	801a5d6 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801a5f2:	1973      	adds	r3, r6, r5
 801a5f4:	2400      	movs	r4, #0
 801a5f6:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 801a5fa:	4f14      	ldr	r7, [pc, #80]	; (801a64c <dns_call_found+0x98>)
 801a5fc:	7bd9      	ldrb	r1, [r3, #15]
 801a5fe:	463a      	mov	r2, r7
    if (i == idx) {
 801a600:	b2e3      	uxtb	r3, r4
 801a602:	3401      	adds	r4, #1
 801a604:	429d      	cmp	r5, r3
 801a606:	d002      	beq.n	801a60e <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801a608:	7a93      	ldrb	r3, [r2, #10]
 801a60a:	2b02      	cmp	r3, #2
 801a60c:	d015      	beq.n	801a63a <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801a60e:	2c04      	cmp	r4, #4
 801a610:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801a614:	d1f4      	bne.n	801a600 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801a616:	2903      	cmp	r1, #3
 801a618:	d80d      	bhi.n	801a636 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a61a:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801a61c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801a654 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a620:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801a624:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 801a628:	f007 f860 	bl	80216ec <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a62c:	2200      	movs	r2, #0
 801a62e:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801a630:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a632:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 801a636:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801a63a:	7bd3      	ldrb	r3, [r2, #15]
 801a63c:	428b      	cmp	r3, r1
 801a63e:	d1e6      	bne.n	801a60e <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801a640:	4435      	add	r5, r6
 801a642:	2304      	movs	r3, #4
 801a644:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 801a648:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801a64a:	e7f4      	b.n	801a636 <dns_call_found+0x82>
 801a64c:	2001eec0 	.word	0x2001eec0
 801a650:	2001ee84 	.word	0x2001ee84
 801a654:	2001ee74 	.word	0x2001ee74

0801a658 <dns_send.isra.0>:
dns_send(u8_t idx)
 801a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a65c:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 801a65e:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a660:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 801a664:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a666:	9301      	str	r3, [sp, #4]
 801a668:	4b56      	ldr	r3, [pc, #344]	; (801a7c4 <dns_send.isra.0+0x16c>)
 801a66a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801a66e:	7ae3      	ldrb	r3, [r4, #11]
 801a670:	2b01      	cmp	r3, #1
 801a672:	d907      	bls.n	801a684 <dns_send.isra.0+0x2c>
 801a674:	4b54      	ldr	r3, [pc, #336]	; (801a7c8 <dns_send.isra.0+0x170>)
 801a676:	f240 22fa 	movw	r2, #762	; 0x2fa
 801a67a:	4954      	ldr	r1, [pc, #336]	; (801a7cc <dns_send.isra.0+0x174>)
 801a67c:	4854      	ldr	r0, [pc, #336]	; (801a7d0 <dns_send.isra.0+0x178>)
 801a67e:	f00c f829 	bl	80266d4 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 801a682:	7ae3      	ldrb	r3, [r4, #11]
 801a684:	4a53      	ldr	r2, [pc, #332]	; (801a7d4 <dns_send.isra.0+0x17c>)
 801a686:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a68a:	2c00      	cmp	r4, #0
 801a68c:	f000 808b 	beq.w	801a7a6 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 801a690:	9b01      	ldr	r3, [sp, #4]
 801a692:	4e4c      	ldr	r6, [pc, #304]	; (801a7c4 <dns_send.isra.0+0x16c>)
 801a694:	eb03 0409 	add.w	r4, r3, r9
 801a698:	0124      	lsls	r4, r4, #4
 801a69a:	f104 0510 	add.w	r5, r4, #16
 801a69e:	4435      	add	r5, r6
 801a6a0:	4628      	mov	r0, r5
 801a6a2:	f7e5 fdd7 	bl	8000254 <strlen>
 801a6a6:	3012      	adds	r0, #18
 801a6a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a6ac:	b281      	uxth	r1, r0
 801a6ae:	2036      	movs	r0, #54	; 0x36
 801a6b0:	f001 fd74 	bl	801c19c <pbuf_alloc>
  if (p != NULL) {
 801a6b4:	4680      	mov	r8, r0
 801a6b6:	2800      	cmp	r0, #0
 801a6b8:	d06d      	beq.n	801a796 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 801a6ba:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801a6bc:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 801a6be:	260c      	movs	r6, #12
    --hostname;
 801a6c0:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 801a6c2:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 801a6c4:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801a6c8:	9305      	str	r3, [sp, #20]
 801a6ca:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 801a6ce:	f7ff fefb 	bl	801a4c8 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 801a6d2:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 801a6d4:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a6d8:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 801a6da:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 801a6de:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a6e2:	4632      	mov	r2, r6
 801a6e4:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 801a6e6:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a6ea:	f002 f81d 	bl	801c728 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a6ee:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 801a6f0:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a6f2:	2b2e      	cmp	r3, #46	; 0x2e
 801a6f4:	d052      	beq.n	801a79c <dns_send.isra.0+0x144>
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d050      	beq.n	801a79c <dns_send.isra.0+0x144>
      ++hostname;
 801a6fa:	463d      	mov	r5, r7
 801a6fc:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 801a700:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a702:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 801a706:	2b2e      	cmp	r3, #46	; 0x2e
 801a708:	b2e4      	uxtb	r4, r4
 801a70a:	d001      	beq.n	801a710 <dns_send.isra.0+0xb8>
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d1f7      	bne.n	801a700 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 801a710:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 801a714:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 801a716:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 801a71a:	4433      	add	r3, r6
 801a71c:	4553      	cmp	r3, sl
 801a71e:	dc37      	bgt.n	801a790 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 801a720:	4622      	mov	r2, r4
 801a722:	4631      	mov	r1, r6
 801a724:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 801a726:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 801a728:	f002 f8e4 	bl	801c8f4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a72c:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 801a72e:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a730:	465a      	mov	r2, fp
 801a732:	4639      	mov	r1, r7
 801a734:	b29b      	uxth	r3, r3
 801a736:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 801a738:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a73a:	f002 f85b 	bl	801c7f4 <pbuf_take_at>
    } while (*hostname != 0);
 801a73e:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 801a740:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 801a742:	2a00      	cmp	r2, #0
 801a744:	d1d3      	bne.n	801a6ee <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 801a746:	4631      	mov	r1, r6
 801a748:	4640      	mov	r0, r8
 801a74a:	f002 f8d3 	bl	801c8f4 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801a74e:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 801a752:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a754:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801a756:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a75a:	4640      	mov	r0, r8
 801a75c:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 801a75e:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a762:	2204      	movs	r2, #4
 801a764:	f002 f846 	bl	801c7f4 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 801a768:	9b01      	ldr	r3, [sp, #4]
 801a76a:	4a16      	ldr	r2, [pc, #88]	; (801a7c4 <dns_send.isra.0+0x16c>)
 801a76c:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a76e:	4919      	ldr	r1, [pc, #100]	; (801a7d4 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 801a770:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a772:	4b19      	ldr	r3, [pc, #100]	; (801a7d8 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 801a774:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 801a778:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a77c:	f89b 000f 	ldrb.w	r0, [fp, #15]
 801a780:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a784:	4641      	mov	r1, r8
 801a786:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a78a:	2335      	movs	r3, #53	; 0x35
 801a78c:	f006 ff0c 	bl	80215a8 <udp_sendto>
    pbuf_free(p);
 801a790:	4640      	mov	r0, r8
 801a792:	f001 fed5 	bl	801c540 <pbuf_free>
}
 801a796:	b007      	add	sp, #28
 801a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a79c:	2300      	movs	r3, #0
      ++hostname;
 801a79e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a7a0:	469b      	mov	fp, r3
 801a7a2:	461c      	mov	r4, r3
 801a7a4:	e7b9      	b.n	801a71a <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 801a7a6:	4648      	mov	r0, r9
 801a7a8:	4621      	mov	r1, r4
 801a7aa:	f7ff ff03 	bl	801a5b4 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 801a7ae:	9b01      	ldr	r3, [sp, #4]
 801a7b0:	444b      	add	r3, r9
 801a7b2:	4699      	mov	r9, r3
 801a7b4:	4b03      	ldr	r3, [pc, #12]	; (801a7c4 <dns_send.isra.0+0x16c>)
 801a7b6:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 801a7ba:	f88b 400a 	strb.w	r4, [fp, #10]
}
 801a7be:	b007      	add	sp, #28
 801a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c4:	2001eec0 	.word	0x2001eec0
 801a7c8:	08044a94 	.word	0x08044a94
 801a7cc:	08044ac4 	.word	0x08044ac4
 801a7d0:	0802b3cc 	.word	0x0802b3cc
 801a7d4:	2001eeb8 	.word	0x2001eeb8
 801a7d8:	2001ee74 	.word	0x2001ee74

0801a7dc <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a7dc:	2803      	cmp	r0, #3
{
 801a7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7e2:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a7e4:	d846      	bhi.n	801a874 <dns_check_entry+0x98>

  switch (entry->state) {
 801a7e6:	4e3a      	ldr	r6, [pc, #232]	; (801a8d0 <dns_check_entry+0xf4>)
 801a7e8:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 801a7ec:	0125      	lsls	r5, r4, #4
 801a7ee:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 801a7f2:	7a9b      	ldrb	r3, [r3, #10]
 801a7f4:	2b03      	cmp	r3, #3
 801a7f6:	d861      	bhi.n	801a8bc <dns_check_entry+0xe0>
 801a7f8:	e8df f003 	tbb	[pc, r3]
 801a7fc:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801a800:	192b      	adds	r3, r5, r4
 801a802:	011b      	lsls	r3, r3, #4
 801a804:	58f2      	ldr	r2, [r6, r3]
 801a806:	2a00      	cmp	r2, #0
 801a808:	d140      	bne.n	801a88c <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801a80a:	442c      	add	r4, r5
 801a80c:	2300      	movs	r3, #0
 801a80e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801a812:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 801a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a818:	4f2e      	ldr	r7, [pc, #184]	; (801a8d4 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 801a81a:	f00b ffff 	bl	802681c <rand>
 801a81e:	4b2c      	ldr	r3, [pc, #176]	; (801a8d0 <dns_check_entry+0xf4>)
 801a820:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a822:	7a9a      	ldrb	r2, [r3, #10]
 801a824:	2a02      	cmp	r2, #2
 801a826:	d02d      	beq.n	801a884 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a828:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801a82c:	429f      	cmp	r7, r3
 801a82e:	d1f8      	bne.n	801a822 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 801a830:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 801a832:	2202      	movs	r2, #2
      entry->tmr = 1;
 801a834:	2301      	movs	r3, #1
      err = dns_send(i);
 801a836:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 801a838:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 801a83c:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 801a83e:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 801a840:	81b3      	strh	r3, [r6, #12]
}
 801a842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 801a846:	f7ff bf07 	b.w	801a658 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 801a84a:	192a      	adds	r2, r5, r4
 801a84c:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 801a850:	7b13      	ldrb	r3, [r2, #12]
 801a852:	3b01      	subs	r3, #1
 801a854:	b2db      	uxtb	r3, r3
 801a856:	7313      	strb	r3, [r2, #12]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d1db      	bne.n	801a814 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801a85c:	7b53      	ldrb	r3, [r2, #13]
 801a85e:	3301      	adds	r3, #1
 801a860:	b2db      	uxtb	r3, r3
 801a862:	2b04      	cmp	r3, #4
 801a864:	7353      	strb	r3, [r2, #13]
 801a866:	d016      	beq.n	801a896 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 801a868:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801a86a:	4620      	mov	r0, r4
}
 801a86c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 801a870:	f7ff bef2 	b.w	801a658 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a874:	4b18      	ldr	r3, [pc, #96]	; (801a8d8 <dns_check_entry+0xfc>)
 801a876:	f240 421c 	movw	r2, #1052	; 0x41c
 801a87a:	4918      	ldr	r1, [pc, #96]	; (801a8dc <dns_check_entry+0x100>)
 801a87c:	4818      	ldr	r0, [pc, #96]	; (801a8e0 <dns_check_entry+0x104>)
 801a87e:	f00b ff29 	bl	80266d4 <iprintf>
 801a882:	e7b0      	b.n	801a7e6 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a884:	891a      	ldrh	r2, [r3, #8]
 801a886:	428a      	cmp	r2, r1
 801a888:	d1ce      	bne.n	801a828 <dns_check_entry+0x4c>
 801a88a:	e7c6      	b.n	801a81a <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801a88c:	3a01      	subs	r2, #1
 801a88e:	50f2      	str	r2, [r6, r3]
 801a890:	2a00      	cmp	r2, #0
 801a892:	d0ba      	beq.n	801a80a <dns_check_entry+0x2e>
 801a894:	e7be      	b.n	801a814 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801a896:	7ad3      	ldrb	r3, [r2, #11]
 801a898:	b913      	cbnz	r3, 801a8a0 <dns_check_entry+0xc4>
 801a89a:	4b12      	ldr	r3, [pc, #72]	; (801a8e4 <dns_check_entry+0x108>)
 801a89c:	685b      	ldr	r3, [r3, #4]
 801a89e:	b94b      	cbnz	r3, 801a8b4 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 801a8a0:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 801a8a2:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 801a8a4:	2100      	movs	r1, #0
 801a8a6:	f7ff fe85 	bl	801a5b4 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801a8b0:	72b3      	strb	r3, [r6, #10]
            break;
 801a8b2:	e7af      	b.n	801a814 <dns_check_entry+0x38>
            entry->server_idx++;
 801a8b4:	2301      	movs	r3, #1
 801a8b6:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 801a8b8:	8193      	strh	r3, [r2, #12]
 801a8ba:	e7d6      	b.n	801a86a <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801a8bc:	4b06      	ldr	r3, [pc, #24]	; (801a8d8 <dns_check_entry+0xfc>)
 801a8be:	f240 425b 	movw	r2, #1115	; 0x45b
 801a8c2:	4909      	ldr	r1, [pc, #36]	; (801a8e8 <dns_check_entry+0x10c>)
 801a8c4:	4806      	ldr	r0, [pc, #24]	; (801a8e0 <dns_check_entry+0x104>)
}
 801a8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801a8ca:	f00b bf03 	b.w	80266d4 <iprintf>
 801a8ce:	bf00      	nop
 801a8d0:	2001eec0 	.word	0x2001eec0
 801a8d4:	2001f300 	.word	0x2001f300
 801a8d8:	08044a94 	.word	0x08044a94
 801a8dc:	08044adc 	.word	0x08044adc
 801a8e0:	0802b3cc 	.word	0x0802b3cc
 801a8e4:	2001eeb8 	.word	0x2001eeb8
 801a8e8:	08044af8 	.word	0x08044af8

0801a8ec <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f0:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801a8f2:	8912      	ldrh	r2, [r2, #8]
{
 801a8f4:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801a8f6:	2a0f      	cmp	r2, #15
 801a8f8:	d805      	bhi.n	801a906 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 801a8fa:	4620      	mov	r0, r4
 801a8fc:	f001 fe20 	bl	801c540 <pbuf_free>
  return;
}
 801a900:	b00d      	add	sp, #52	; 0x34
 801a902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 801a906:	4699      	mov	r9, r3
 801a908:	220c      	movs	r2, #12
 801a90a:	2300      	movs	r3, #0
 801a90c:	a906      	add	r1, sp, #24
 801a90e:	4620      	mov	r0, r4
 801a910:	f001 feba 	bl	801c688 <pbuf_copy_partial>
 801a914:	280c      	cmp	r0, #12
 801a916:	4605      	mov	r5, r0
 801a918:	d1ef      	bne.n	801a8fa <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 801a91a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 801ac10 <dns_recv+0x324>
 801a91e:	2600      	movs	r6, #0
 801a920:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801a924:	f7ff fdd0 	bl	801a4c8 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a928:	4643      	mov	r3, r8
 801a92a:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 801a92c:	7a9a      	ldrb	r2, [r3, #10]
 801a92e:	2a02      	cmp	r2, #2
 801a930:	d008      	beq.n	801a944 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a932:	3601      	adds	r6, #1
 801a934:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801a938:	2e04      	cmp	r6, #4
 801a93a:	d0de      	beq.n	801a8fa <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 801a93c:	7a9a      	ldrb	r2, [r3, #10]
 801a93e:	b2f7      	uxtb	r7, r6
 801a940:	2a02      	cmp	r2, #2
 801a942:	d1f6      	bne.n	801a932 <dns_recv+0x46>
 801a944:	891a      	ldrh	r2, [r3, #8]
 801a946:	4282      	cmp	r2, r0
 801a948:	d1f3      	bne.n	801a932 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801a94a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801a94e:	f7ff fdbb 	bl	801a4c8 <lwip_htons>
 801a952:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 801a954:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 801a958:	f7ff fdb6 	bl	801a4c8 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801a95c:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 801a960:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 801a962:	09db      	lsrs	r3, r3, #7
 801a964:	d0c9      	beq.n	801a8fa <dns_recv+0xe>
 801a966:	f1ba 0f01 	cmp.w	sl, #1
 801a96a:	d1c6      	bne.n	801a8fa <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 801a96c:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 801a970:	49a5      	ldr	r1, [pc, #660]	; (801ac08 <dns_recv+0x31c>)
 801a972:	f8d9 2000 	ldr.w	r2, [r9]
 801a976:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 801a97a:	7adb      	ldrb	r3, [r3, #11]
 801a97c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801a980:	429a      	cmp	r2, r3
 801a982:	d1ba      	bne.n	801a8fa <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801a984:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801a988:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a98c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 801ac14 <dns_recv+0x328>
 801a990:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801a994:	f103 0210 	add.w	r2, r3, #16
 801a998:	9301      	str	r3, [sp, #4]
 801a99a:	4442      	add	r2, r8
 801a99c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 801a9a0:	462e      	mov	r6, r5
 801a9a2:	4627      	mov	r7, r4
 801a9a4:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 801a9a6:	4631      	mov	r1, r6
 801a9a8:	4638      	mov	r0, r7
 801a9aa:	f001 ff93 	bl	801c8d4 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801a9ae:	2800      	cmp	r0, #0
 801a9b0:	db2d      	blt.n	801aa0e <dns_recv+0x122>
 801a9b2:	455e      	cmp	r6, fp
 801a9b4:	d02b      	beq.n	801aa0e <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 801a9b6:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 801a9ba:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 801a9bc:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 801a9be:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 801a9c0:	d025      	beq.n	801aa0e <dns_recv+0x122>
      while (n > 0) {
 801a9c2:	b330      	cbz	r0, 801aa12 <dns_recv+0x126>
 801a9c4:	46aa      	mov	sl, r5
 801a9c6:	182c      	adds	r4, r5, r0
 801a9c8:	e01b      	b.n	801aa02 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a9ca:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 801a9ce:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a9d0:	f819 2000 	ldrb.w	r2, [r9, r0]
 801a9d4:	4601      	mov	r1, r0
        ++query;
 801a9d6:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a9d8:	f002 0203 	and.w	r2, r2, #3
 801a9dc:	2a01      	cmp	r2, #1
 801a9de:	f819 2003 	ldrb.w	r2, [r9, r3]
 801a9e2:	f002 0203 	and.w	r2, r2, #3
 801a9e6:	bf08      	it	eq
 801a9e8:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 801a9ec:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a9ee:	2a01      	cmp	r2, #1
 801a9f0:	bf08      	it	eq
 801a9f2:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 801a9f4:	455e      	cmp	r6, fp
        response_offset++;
 801a9f6:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 801a9f8:	d009      	beq.n	801aa0e <dns_recv+0x122>
 801a9fa:	4299      	cmp	r1, r3
 801a9fc:	d107      	bne.n	801aa0e <dns_recv+0x122>
      while (n > 0) {
 801a9fe:	4554      	cmp	r4, sl
 801aa00:	d007      	beq.n	801aa12 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 801aa02:	4631      	mov	r1, r6
 801aa04:	4638      	mov	r0, r7
 801aa06:	f001 ff65 	bl	801c8d4 <pbuf_try_get_at>
        if (c < 0) {
 801aa0a:	1e03      	subs	r3, r0, #0
 801aa0c:	dadd      	bge.n	801a9ca <dns_recv+0xde>
 801aa0e:	463c      	mov	r4, r7
 801aa10:	e773      	b.n	801a8fa <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 801aa12:	4631      	mov	r1, r6
 801aa14:	4638      	mov	r0, r7
 801aa16:	f001 ff5d 	bl	801c8d4 <pbuf_try_get_at>
    if (n < 0) {
 801aa1a:	2800      	cmp	r0, #0
      ++query;
 801aa1c:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 801aa20:	dbf5      	blt.n	801aa0e <dns_recv+0x122>
  } while (n != 0);
 801aa22:	d1c0      	bne.n	801a9a6 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 801aa24:	4635      	mov	r5, r6
 801aa26:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801aa2a:	463c      	mov	r4, r7
 801aa2c:	9e03      	ldr	r6, [sp, #12]
 801aa2e:	454d      	cmp	r5, r9
 801aa30:	9f02      	ldr	r7, [sp, #8]
 801aa32:	f43f af62 	beq.w	801a8fa <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 801aa36:	f105 0a01 	add.w	sl, r5, #1
 801aa3a:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 801aa3e:	45ca      	cmp	sl, r9
 801aa40:	f43f af5b 	beq.w	801a8fa <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 801aa44:	4653      	mov	r3, sl
 801aa46:	2204      	movs	r2, #4
 801aa48:	a904      	add	r1, sp, #16
 801aa4a:	4620      	mov	r0, r4
 801aa4c:	f001 fe1c 	bl	801c688 <pbuf_copy_partial>
 801aa50:	2804      	cmp	r0, #4
 801aa52:	f47f af52 	bne.w	801a8fa <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 801aa56:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801aa5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aa5e:	f47f af4c 	bne.w	801a8fa <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 801aa62:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 801aa66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aa6a:	f47f af46 	bne.w	801a8fa <dns_recv+0xe>
 801aa6e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 801aa72:	459a      	cmp	sl, r3
 801aa74:	f63f af41 	bhi.w	801a8fa <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 801aa78:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801aa7c:	071b      	lsls	r3, r3, #28
 801aa7e:	d017      	beq.n	801aab0 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801aa80:	f44f 7388 	mov.w	r3, #272	; 0x110
 801aa84:	fb03 8306 	mla	r3, r3, r6, r8
 801aa88:	7adb      	ldrb	r3, [r3, #11]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	f040 80ae 	bne.w	801abec <dns_recv+0x300>
 801aa90:	4b5d      	ldr	r3, [pc, #372]	; (801ac08 <dns_recv+0x31c>)
 801aa92:	685b      	ldr	r3, [r3, #4]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	f000 80a9 	beq.w	801abec <dns_recv+0x300>
            entry->tmr     = 1;
 801aa9a:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 801aa9e:	4638      	mov	r0, r7
            entry->tmr     = 1;
 801aaa0:	fb03 8606 	mla	r6, r3, r6, r8
 801aaa4:	f240 3301 	movw	r3, #769	; 0x301
 801aaa8:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 801aaaa:	f7ff fe97 	bl	801a7dc <dns_check_entry>
            goto ignore_packet;
 801aaae:	e724      	b.n	801a8fa <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 801aab0:	3505      	adds	r5, #5
 801aab2:	f8dd a000 	ldr.w	sl, [sp]
 801aab6:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 801aab8:	f1ba 0f00 	cmp.w	sl, #0
 801aabc:	f000 8096 	beq.w	801abec <dns_recv+0x300>
 801aac0:	8923      	ldrh	r3, [r4, #8]
 801aac2:	42ab      	cmp	r3, r5
 801aac4:	d80b      	bhi.n	801aade <dns_recv+0x1f2>
 801aac6:	e091      	b.n	801abec <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 801aac8:	8922      	ldrh	r2, [r4, #8]
 801aaca:	4293      	cmp	r3, r2
 801aacc:	f6bf af15 	bge.w	801a8fa <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 801aad0:	4629      	mov	r1, r5
 801aad2:	f001 feff 	bl	801c8d4 <pbuf_try_get_at>
    if (n < 0) {
 801aad6:	2800      	cmp	r0, #0
 801aad8:	f6ff af0f 	blt.w	801a8fa <dns_recv+0xe>
  } while (n != 0);
 801aadc:	d017      	beq.n	801ab0e <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 801aade:	4629      	mov	r1, r5
 801aae0:	4620      	mov	r0, r4
 801aae2:	f001 fef7 	bl	801c8d4 <pbuf_try_get_at>
 801aae6:	f105 0b01 	add.w	fp, r5, #1
 801aaea:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 801aaec:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 801aaee:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 801aaf2:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 801aaf4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 801aaf8:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 801aafa:	f6ff aefe 	blt.w	801a8fa <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 801aafe:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 801ab00:	f1bb 0f00 	cmp.w	fp, #0
 801ab04:	f43f aef9 	beq.w	801a8fa <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 801ab08:	2ac0      	cmp	r2, #192	; 0xc0
 801ab0a:	d1dd      	bne.n	801aac8 <dns_recv+0x1dc>
 801ab0c:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 801ab0e:	454d      	cmp	r5, r9
 801ab10:	f43f aef3 	beq.w	801a8fa <dns_recv+0xe>
  return (u16_t)(offset + 1);
 801ab14:	f105 0b01 	add.w	fp, r5, #1
 801ab18:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 801ab1c:	45cb      	cmp	fp, r9
 801ab1e:	f43f aeec 	beq.w	801a8fa <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 801ab22:	465b      	mov	r3, fp
 801ab24:	220a      	movs	r2, #10
 801ab26:	a909      	add	r1, sp, #36	; 0x24
 801ab28:	4620      	mov	r0, r4
 801ab2a:	f001 fdad 	bl	801c688 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 801ab2e:	280a      	cmp	r0, #10
 801ab30:	f47f aee3 	bne.w	801a8fa <dns_recv+0xe>
 801ab34:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 801ab38:	459b      	cmp	fp, r3
 801ab3a:	f63f aede 	bhi.w	801a8fa <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801ab3e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801ab42:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801ab44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801ab48:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801ab4a:	d013      	beq.n	801ab74 <dns_recv+0x288>
 801ab4c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 801ab50:	f7ff fcba 	bl	801a4c8 <lwip_htons>
 801ab54:	4428      	add	r0, r5
 801ab56:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801ab5a:	f6bf aece 	bge.w	801a8fa <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801ab5e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 801ab62:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801ab66:	f7ff fcaf 	bl	801a4c8 <lwip_htons>
 801ab6a:	4405      	add	r5, r0
            --nanswers;
 801ab6c:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801ab70:	b2ad      	uxth	r5, r5
            --nanswers;
 801ab72:	e7a1      	b.n	801aab8 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 801ab74:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801ab78:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 801ab7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab80:	d1e6      	bne.n	801ab50 <dns_recv+0x264>
 801ab82:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801ab86:	d1e3      	bne.n	801ab50 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 801ab88:	462b      	mov	r3, r5
 801ab8a:	2204      	movs	r2, #4
 801ab8c:	a905      	add	r1, sp, #20
 801ab8e:	4620      	mov	r0, r4
 801ab90:	f001 fd7a 	bl	801c688 <pbuf_copy_partial>
 801ab94:	2804      	cmp	r0, #4
 801ab96:	f47f aeb0 	bne.w	801a8fa <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801ab9a:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801ab9e:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801aba0:	fb03 f606 	mul.w	r6, r3, r6
 801aba4:	9b05      	ldr	r3, [sp, #20]
 801aba6:	eb08 0406 	add.w	r4, r8, r6
 801abaa:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 801abac:	f001 fcc8 	bl	801c540 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801abb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801abb2:	f7ff fc8d 	bl	801a4d0 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 801abb6:	4a15      	ldr	r2, [pc, #84]	; (801ac0c <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801abb8:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 801abba:	9901      	ldr	r1, [sp, #4]
 801abbc:	4638      	mov	r0, r7
  entry->ttl = ttl;
 801abbe:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 801abc0:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 801abc4:	bf28      	it	cs
 801abc6:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 801abc8:	4441      	add	r1, r8
  entry->ttl = ttl;
 801abca:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 801abce:	2303      	movs	r3, #3
 801abd0:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 801abd2:	f7ff fcef 	bl	801a5b4 <dns_call_found>
  if (entry->ttl == 0) {
 801abd6:	f858 3006 	ldr.w	r3, [r8, r6]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	f47f ae90 	bne.w	801a900 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 801abe0:	7aa2      	ldrb	r2, [r4, #10]
 801abe2:	2a03      	cmp	r2, #3
 801abe4:	f47f ae8c 	bne.w	801a900 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 801abe8:	72a3      	strb	r3, [r4, #10]
                  return;
 801abea:	e689      	b.n	801a900 <dns_recv+0x14>
        pbuf_free(p);
 801abec:	4620      	mov	r0, r4
 801abee:	f001 fca7 	bl	801c540 <pbuf_free>
        dns_call_found(i, NULL);
 801abf2:	2100      	movs	r1, #0
 801abf4:	4638      	mov	r0, r7
 801abf6:	f7ff fcdd 	bl	801a5b4 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 801abfa:	f44f 7388 	mov.w	r3, #272	; 0x110
 801abfe:	2200      	movs	r2, #0
 801ac00:	fb03 8606 	mla	r6, r3, r6, r8
 801ac04:	72b2      	strb	r2, [r6, #10]
        return;
 801ac06:	e67b      	b.n	801a900 <dns_recv+0x14>
 801ac08:	2001eeb8 	.word	0x2001eeb8
 801ac0c:	00093a80 	.word	0x00093a80
 801ac10:	2001eec0 	.word	0x2001eec0
 801ac14:	080474c9 	.word	0x080474c9

0801ac18 <dns_init>:
}
 801ac18:	4770      	bx	lr
 801ac1a:	bf00      	nop

0801ac1c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 801ac1c:	2801      	cmp	r0, #1
 801ac1e:	d900      	bls.n	801ac22 <dns_setserver+0x6>
}
 801ac20:	4770      	bx	lr
    if (dnsserver != NULL) {
 801ac22:	b121      	cbz	r1, 801ac2e <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 801ac24:	4b05      	ldr	r3, [pc, #20]	; (801ac3c <dns_setserver+0x20>)
 801ac26:	680a      	ldr	r2, [r1, #0]
 801ac28:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 801ac2c:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 801ac2e:	4a04      	ldr	r2, [pc, #16]	; (801ac40 <dns_setserver+0x24>)
 801ac30:	4b02      	ldr	r3, [pc, #8]	; (801ac3c <dns_setserver+0x20>)
 801ac32:	6812      	ldr	r2, [r2, #0]
 801ac34:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 801ac38:	4770      	bx	lr
 801ac3a:	bf00      	nop
 801ac3c:	2001eeb8 	.word	0x2001eeb8
 801ac40:	0804726c 	.word	0x0804726c

0801ac44 <dns_tmr>:
{
 801ac44:	b508      	push	{r3, lr}
    dns_check_entry(i);
 801ac46:	2000      	movs	r0, #0
 801ac48:	f7ff fdc8 	bl	801a7dc <dns_check_entry>
 801ac4c:	2001      	movs	r0, #1
 801ac4e:	f7ff fdc5 	bl	801a7dc <dns_check_entry>
 801ac52:	2002      	movs	r0, #2
 801ac54:	f7ff fdc2 	bl	801a7dc <dns_check_entry>
 801ac58:	2003      	movs	r0, #3
}
 801ac5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 801ac5e:	f7ff bdbd 	b.w	801a7dc <dns_check_entry>
 801ac62:	bf00      	nop

0801ac64 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 801ac64:	2900      	cmp	r1, #0
 801ac66:	f000 812e 	beq.w	801aec6 <dns_gethostbyname_addrtype+0x262>
{
 801ac6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 801ac6e:	fab0 f780 	clz	r7, r0
{
 801ac72:	b083      	sub	sp, #12
 801ac74:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 801ac76:	097f      	lsrs	r7, r7, #5
 801ac78:	2800      	cmp	r0, #0
 801ac7a:	f000 8103 	beq.w	801ae84 <dns_gethostbyname_addrtype+0x220>
 801ac7e:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 801ac80:	7803      	ldrb	r3, [r0, #0]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	f000 80fe 	beq.w	801ae84 <dns_gethostbyname_addrtype+0x220>
 801ac88:	4615      	mov	r5, r2
 801ac8a:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 801ac8c:	f7e5 fae2 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801ac90:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 801ac92:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801ac94:	f200 80f6 	bhi.w	801ae84 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 801ac98:	4641      	mov	r1, r8
 801ac9a:	4630      	mov	r0, r6
 801ac9c:	f009 fa46 	bl	802412c <ip4addr_aton>
 801aca0:	b118      	cbz	r0, 801acaa <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 801aca2:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 801aca4:	b003      	add	sp, #12
 801aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acaa:	4f88      	ldr	r7, [pc, #544]	; (801aecc <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 801acac:	4604      	mov	r4, r0
 801acae:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801acb0:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 801acb4:	2b03      	cmp	r3, #3
 801acb6:	d03a      	beq.n	801ad2e <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801acb8:	3401      	adds	r4, #1
 801acba:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801acbe:	2c04      	cmp	r4, #4
 801acc0:	d1f6      	bne.n	801acb0 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 801acc2:	4b83      	ldr	r3, [pc, #524]	; (801aed0 <dns_gethostbyname_addrtype+0x26c>)
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	f000 80f6 	beq.w	801aeb8 <dns_gethostbyname_addrtype+0x254>
 801accc:	2400      	movs	r4, #0
 801acce:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801aedc <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801acd2:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 801acd6:	fa5f f884 	uxtb.w	r8, r4
 801acda:	2b02      	cmp	r3, #2
 801acdc:	d040      	beq.n	801ad60 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801acde:	3401      	adds	r4, #1
 801ace0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801ace4:	2c04      	cmp	r4, #4
 801ace6:	d1f4      	bne.n	801acd2 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801ace8:	4a7a      	ldr	r2, [pc, #488]	; (801aed4 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 801acea:	4623      	mov	r3, r4
 801acec:	4f7a      	ldr	r7, [pc, #488]	; (801aed8 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801acee:	2400      	movs	r4, #0
 801acf0:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 801acf2:	46a4      	mov	ip, r4
 801acf4:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 801acf6:	7a90      	ldrb	r0, [r2, #10]
 801acf8:	fa5f f884 	uxtb.w	r8, r4
 801acfc:	2800      	cmp	r0, #0
 801acfe:	d041      	beq.n	801ad84 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 801ad00:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801ad02:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 801ad06:	d023      	beq.n	801ad50 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801ad08:	2c04      	cmp	r4, #4
 801ad0a:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801ad0e:	d1f2      	bne.n	801acf6 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 801ad10:	2b04      	cmp	r3, #4
 801ad12:	d007      	beq.n	801ad24 <dns_gethostbyname_addrtype+0xc0>
 801ad14:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 801ad18:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 801ad1c:	7aa2      	ldrb	r2, [r4, #10]
 801ad1e:	2a03      	cmp	r2, #3
 801ad20:	f000 80ae 	beq.w	801ae80 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 801ad24:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ad28:	b003      	add	sp, #12
 801ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 801ad2e:	4651      	mov	r1, sl
 801ad30:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ad34:	4630      	mov	r0, r6
 801ad36:	f7ff fc1f 	bl	801a578 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	d1bc      	bne.n	801acb8 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 801ad3e:	4b66      	ldr	r3, [pc, #408]	; (801aed8 <dns_gethostbyname_addrtype+0x274>)
 801ad40:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ad44:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801ad48:	6863      	ldr	r3, [r4, #4]
 801ad4a:	f8c8 3000 	str.w	r3, [r8]
 801ad4e:	e7a9      	b.n	801aca4 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801ad50:	7b90      	ldrb	r0, [r2, #14]
 801ad52:	1a08      	subs	r0, r1, r0
 801ad54:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 801ad56:	4560      	cmp	r0, ip
 801ad58:	d9d6      	bls.n	801ad08 <dns_gethostbyname_addrtype+0xa4>
 801ad5a:	4643      	mov	r3, r8
 801ad5c:	4684      	mov	ip, r0
 801ad5e:	e7d3      	b.n	801ad08 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 801ad60:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ad64:	4639      	mov	r1, r7
 801ad66:	4630      	mov	r0, r6
 801ad68:	f7ff fc06 	bl	801a578 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801ad6c:	2800      	cmp	r0, #0
 801ad6e:	d1b6      	bne.n	801acde <dns_gethostbyname_addrtype+0x7a>
 801ad70:	4b5a      	ldr	r3, [pc, #360]	; (801aedc <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 801ad72:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ad74:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 801ad76:	2a00      	cmp	r2, #0
 801ad78:	f000 8091 	beq.w	801ae9e <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ad7c:	3001      	adds	r0, #1
 801ad7e:	2804      	cmp	r0, #4
 801ad80:	d1f7      	bne.n	801ad72 <dns_gethostbyname_addrtype+0x10e>
 801ad82:	e7ac      	b.n	801acde <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 801ad84:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ad88:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ad8c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 801aedc <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 801ad90:	2700      	movs	r7, #0
 801ad92:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 801ad94:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ad96:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 801ad98:	b12b      	cbz	r3, 801ada6 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ad9a:	3701      	adds	r7, #1
 801ad9c:	2f04      	cmp	r7, #4
 801ad9e:	d1f9      	bne.n	801ad94 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 801ada0:	f04f 30ff 	mov.w	r0, #4294967295
 801ada4:	e7c0      	b.n	801ad28 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 801ada6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 801adaa:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 801adac:	f104 0010 	add.w	r0, r4, #16
 801adb0:	4631      	mov	r1, r6
  req->found = found;
 801adb2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 801adb6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 801adba:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 801adbc:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 801adc0:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 801adc4:	2201      	movs	r2, #1
 801adc6:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 801adc8:	464a      	mov	r2, r9
 801adca:	f00a fcbd 	bl	8025748 <memcpy>
  entry->name[namelen] = 0;
 801adce:	44a1      	add	r9, r4
 801add0:	9b01      	ldr	r3, [sp, #4]
 801add2:	461d      	mov	r5, r3
 801add4:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 801add8:	007b      	lsls	r3, r7, #1
 801adda:	9301      	str	r3, [sp, #4]
 801addc:	4b40      	ldr	r3, [pc, #256]	; (801aee0 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 801adde:	f853 2b04 	ldr.w	r2, [r3], #4
 801ade2:	b2ee      	uxtb	r6, r5
 801ade4:	b30a      	cbz	r2, 801ae2a <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801ade6:	3501      	adds	r5, #1
 801ade8:	2d04      	cmp	r5, #4
 801adea:	d1f8      	bne.n	801adde <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801adec:	483d      	ldr	r0, [pc, #244]	; (801aee4 <dns_gethostbyname_addrtype+0x280>)
 801adee:	2304      	movs	r3, #4
 801adf0:	7806      	ldrb	r6, [r0, #0]
 801adf2:	3601      	adds	r6, #1
 801adf4:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801adf6:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 801adf8:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801adfa:	d901      	bls.n	801ae00 <dns_gethostbyname_addrtype+0x19c>
 801adfc:	2600      	movs	r6, #0
      idx = 0;
 801adfe:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 801ae00:	4d37      	ldr	r5, [pc, #220]	; (801aee0 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801ae02:	1c71      	adds	r1, r6, #1
 801ae04:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 801ae06:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ae0a:	2a00      	cmp	r2, #0
 801ae0c:	d13d      	bne.n	801ae8a <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801ae0e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801ae12:	b2ce      	uxtb	r6, r1
 801ae14:	d1ef      	bne.n	801adf6 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 801ae16:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 801ae18:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 801ae1c:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 801ae1e:	443a      	add	r2, r7
 801ae20:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 801ae24:	2304      	movs	r3, #4
 801ae26:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 801ae28:	e73c      	b.n	801aca4 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 801ae2a:	202e      	movs	r0, #46	; 0x2e
 801ae2c:	f006 fc9c 	bl	8021768 <udp_new_ip_type>
  if (pcb == NULL) {
 801ae30:	4681      	mov	r9, r0
 801ae32:	2800      	cmp	r0, #0
 801ae34:	d043      	beq.n	801aebe <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 801ae36:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801aeec <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 801ae3a:	f00b fcef 	bl	802681c <rand>
 801ae3e:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 801ae40:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801ae44:	d3f9      	bcc.n	801ae3a <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 801ae46:	4659      	mov	r1, fp
 801ae48:	4648      	mov	r0, r9
 801ae4a:	f006 fa29 	bl	80212a0 <udp_bind>
  } while (err == ERR_USE);
 801ae4e:	f110 0f08 	cmn.w	r0, #8
 801ae52:	d0f2      	beq.n	801ae3a <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 801ae54:	b9d8      	cbnz	r0, 801ae8e <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 801ae56:	4602      	mov	r2, r0
 801ae58:	4923      	ldr	r1, [pc, #140]	; (801aee8 <dns_gethostbyname_addrtype+0x284>)
 801ae5a:	4648      	mov	r0, r9
 801ae5c:	f006 fc34 	bl	80216c8 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 801ae60:	4b1f      	ldr	r3, [pc, #124]	; (801aee0 <dns_gethostbyname_addrtype+0x27c>)
 801ae62:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 801ae66:	4b1f      	ldr	r3, [pc, #124]	; (801aee4 <dns_gethostbyname_addrtype+0x280>)
 801ae68:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 801ae6a:	4a1a      	ldr	r2, [pc, #104]	; (801aed4 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 801ae6c:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 801ae6e:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 801ae70:	7813      	ldrb	r3, [r2, #0]
 801ae72:	3301      	adds	r3, #1
 801ae74:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 801ae76:	f7ff fcb1 	bl	801a7dc <dns_check_entry>
  return ERR_INPROGRESS;
 801ae7a:	f06f 0004 	mvn.w	r0, #4
 801ae7e:	e711      	b.n	801aca4 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 801ae80:	4698      	mov	r8, r3
 801ae82:	e783      	b.n	801ad8c <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 801ae84:	f06f 000f 	mvn.w	r0, #15
 801ae88:	e70c      	b.n	801aca4 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 801ae8a:	7006      	strb	r6, [r0, #0]
      return idx;
 801ae8c:	e7ed      	b.n	801ae6a <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 801ae8e:	4648      	mov	r0, r9
 801ae90:	f006 fc2c 	bl	80216ec <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 801ae94:	2300      	movs	r3, #0
 801ae96:	4a12      	ldr	r2, [pc, #72]	; (801aee0 <dns_gethostbyname_addrtype+0x27c>)
 801ae98:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801ae9c:	e7a6      	b.n	801adec <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 801ae9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aea2:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 801aea6:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 801aeaa:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 801aeae:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 801aeb2:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 801aeb6:	e6f5      	b.n	801aca4 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 801aeb8:	f06f 0005 	mvn.w	r0, #5
 801aebc:	e6f2      	b.n	801aca4 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 801aebe:	4b08      	ldr	r3, [pc, #32]	; (801aee0 <dns_gethostbyname_addrtype+0x27c>)
 801aec0:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801aec4:	e792      	b.n	801adec <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 801aec6:	f06f 000f 	mvn.w	r0, #15
}
 801aeca:	4770      	bx	lr
 801aecc:	2001eed0 	.word	0x2001eed0
 801aed0:	2001eeb8 	.word	0x2001eeb8
 801aed4:	2001eeb4 	.word	0x2001eeb4
 801aed8:	2001eec0 	.word	0x2001eec0
 801aedc:	2001ee84 	.word	0x2001ee84
 801aee0:	2001ee74 	.word	0x2001ee74
 801aee4:	2001ee70 	.word	0x2001ee70
 801aee8:	0801a8ed 	.word	0x0801a8ed
 801aeec:	0804726c 	.word	0x0804726c

0801aef0 <dns_gethostbyname>:
{
 801aef0:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801aef2:	2400      	movs	r4, #0
{
 801aef4:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801aef6:	9400      	str	r4, [sp, #0]
 801aef8:	f7ff feb4 	bl	801ac64 <dns_gethostbyname_addrtype>
}
 801aefc:	b002      	add	sp, #8
 801aefe:	bd10      	pop	{r4, pc}

0801af00 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 801af00:	2300      	movs	r3, #0
{
 801af02:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801af04:	4299      	cmp	r1, r3
{
 801af06:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 801af08:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 801af0c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 801af10:	dd05      	ble.n	801af1e <lwip_standard_chksum+0x1e>
 801af12:	b124      	cbz	r4, 801af1e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 801af14:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 801af18:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 801af1a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 801af1e:	2901      	cmp	r1, #1
 801af20:	dd28      	ble.n	801af74 <lwip_standard_chksum+0x74>
 801af22:	3902      	subs	r1, #2
  u32_t sum = 0;
 801af24:	2300      	movs	r3, #0
 801af26:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801af2a:	f10e 0c01 	add.w	ip, lr, #1
 801af2e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 801af32:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 801af36:	4584      	cmp	ip, r0
    sum += *ps++;
 801af38:	4413      	add	r3, r2
  while (len > 1) {
 801af3a:	d1fa      	bne.n	801af32 <lwip_standard_chksum+0x32>
    len -= 2;
 801af3c:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 801af40:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801af44:	2901      	cmp	r1, #1
 801af46:	d103      	bne.n	801af50 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 801af48:	f89c 2000 	ldrb.w	r2, [ip]
 801af4c:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 801af50:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801af54:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801af56:	b298      	uxth	r0, r3
 801af58:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 801af5c:	b298      	uxth	r0, r3
 801af5e:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 801af62:	b124      	cbz	r4, 801af6e <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 801af64:	0203      	lsls	r3, r0, #8
 801af66:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801af6a:	b29b      	uxth	r3, r3
 801af6c:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 801af6e:	b280      	uxth	r0, r0
 801af70:	b002      	add	sp, #8
 801af72:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 801af74:	4684      	mov	ip, r0
  u32_t sum = 0;
 801af76:	2300      	movs	r3, #0
 801af78:	e7e4      	b.n	801af44 <lwip_standard_chksum+0x44>
 801af7a:	bf00      	nop

0801af7c <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 801af7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af80:	4688      	mov	r8, r1
 801af82:	4617      	mov	r7, r2
 801af84:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 801af86:	b1f8      	cbz	r0, 801afc8 <inet_cksum_pseudo_base+0x4c>
 801af88:	4605      	mov	r5, r0
  int swapped = 0;
 801af8a:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 801af8c:	8969      	ldrh	r1, [r5, #10]
 801af8e:	6868      	ldr	r0, [r5, #4]
 801af90:	f7ff ffb6 	bl	801af00 <lwip_standard_chksum>
 801af94:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 801af96:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 801af98:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 801af9a:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 801af9e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 801afa2:	ea4f 2304 	mov.w	r3, r4, lsl #8
 801afa6:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801afaa:	d004      	beq.n	801afb6 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 801afac:	b29b      	uxth	r3, r3
 801afae:	f086 0601 	eor.w	r6, r6, #1
 801afb2:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 801afb6:	682d      	ldr	r5, [r5, #0]
 801afb8:	2d00      	cmp	r5, #0
 801afba:	d1e7      	bne.n	801af8c <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 801afbc:	b126      	cbz	r6, 801afc8 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801afbe:	0222      	lsls	r2, r4, #8
 801afc0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801afc4:	b292      	uxth	r2, r2
 801afc6:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 801afc8:	4640      	mov	r0, r8
 801afca:	f7ff fa7d 	bl	801a4c8 <lwip_htons>
 801afce:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 801afd0:	4638      	mov	r0, r7
 801afd2:	f7ff fa79 	bl	801a4c8 <lwip_htons>
 801afd6:	4428      	add	r0, r5
 801afd8:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 801afda:	b2a0      	uxth	r0, r4
 801afdc:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 801afe0:	b2a0      	uxth	r0, r4
 801afe2:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 801afe6:	43c0      	mvns	r0, r0
}
 801afe8:	b280      	uxth	r0, r0
 801afea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afee:	bf00      	nop

0801aff0 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 801aff0:	b430      	push	{r4, r5}
 801aff2:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 801aff4:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 801aff6:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 801aff8:	0c23      	lsrs	r3, r4, #16
 801affa:	fa13 f384 	uxtah	r3, r3, r4
 801affe:	fa13 f385 	uxtah	r3, r3, r5
 801b002:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 801b006:	b29c      	uxth	r4, r3
 801b008:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 801b00c:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801b00e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 801b012:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801b014:	f7ff bfb2 	b.w	801af7c <inet_cksum_pseudo_base>

0801b018 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801b018:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801b01a:	f7ff ff71 	bl	801af00 <lwip_standard_chksum>
 801b01e:	43c0      	mvns	r0, r0
}
 801b020:	b280      	uxth	r0, r0
 801b022:	bd08      	pop	{r3, pc}

0801b024 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 801b024:	b338      	cbz	r0, 801b076 <inet_chksum_pbuf+0x52>
{
 801b026:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 801b028:	2600      	movs	r6, #0
 801b02a:	4605      	mov	r5, r0
  acc = 0;
 801b02c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 801b02e:	8969      	ldrh	r1, [r5, #10]
 801b030:	6868      	ldr	r0, [r5, #4]
 801b032:	f7ff ff65 	bl	801af00 <lwip_standard_chksum>
 801b036:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 801b038:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 801b03a:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 801b03c:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 801b040:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 801b044:	ea4f 2304 	mov.w	r3, r4, lsl #8
 801b048:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801b04c:	d004      	beq.n	801b058 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 801b04e:	b29b      	uxth	r3, r3
 801b050:	f086 0601 	eor.w	r6, r6, #1
 801b054:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 801b058:	682d      	ldr	r5, [r5, #0]
 801b05a:	2d00      	cmp	r5, #0
 801b05c:	d1e7      	bne.n	801b02e <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 801b05e:	b13e      	cbz	r6, 801b070 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801b060:	0220      	lsls	r0, r4, #8
 801b062:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b066:	b280      	uxth	r0, r0
 801b068:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 801b06a:	43c0      	mvns	r0, r0
 801b06c:	b280      	uxth	r0, r0
}
 801b06e:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 801b070:	43e0      	mvns	r0, r4
 801b072:	b280      	uxth	r0, r0
}
 801b074:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 801b076:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b07a:	4770      	bx	lr

0801b07c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801b07c:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801b07e:	f009 fe37 	bl	8024cf0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801b082:	f000 f975 	bl	801b370 <mem_init>
  memp_init();
 801b086:	f000 fcf9 	bl	801ba7c <memp_init>
  pbuf_init();
  netif_init();
 801b08a:	f000 fdbd 	bl	801bc08 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801b08e:	f005 fffd 	bl	802108c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801b092:	f001 fd89 	bl	801cba8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 801b096:	f7ff fdbf 	bl	801ac18 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 801b09a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 801b09e:	f005 bf4d 	b.w	8020f3c <sys_timeouts_init>
 801b0a2:	bf00      	nop

0801b0a4 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b0a4:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 801b0a8:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 801b0aa:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b0ae:	4299      	cmp	r1, r3
 801b0b0:	d81b      	bhi.n	801b0ea <mem_link_valid+0x46>
 801b0b2:	459c      	cmp	ip, r3
 801b0b4:	bf94      	ite	ls
 801b0b6:	2200      	movls	r2, #0
 801b0b8:	2201      	movhi	r2, #1
 801b0ba:	b9b2      	cbnz	r2, 801b0ea <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 801b0bc:	4b0f      	ldr	r3, [pc, #60]	; (801b0fc <mem_link_valid+0x58>)
{
 801b0be:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 801b0c0:	681c      	ldr	r4, [r3, #0]
 801b0c2:	1b03      	subs	r3, r0, r4
 801b0c4:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b0c6:	4299      	cmp	r1, r3
 801b0c8:	d002      	beq.n	801b0d0 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b0ca:	5a61      	ldrh	r1, [r4, r1]
 801b0cc:	4299      	cmp	r1, r3
 801b0ce:	d10e      	bne.n	801b0ee <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b0d0:	4a0b      	ldr	r2, [pc, #44]	; (801b100 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 801b0d2:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b0d4:	6812      	ldr	r2, [r2, #0]
 801b0d6:	42a2      	cmp	r2, r4
 801b0d8:	d00d      	beq.n	801b0f6 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b0da:	8860      	ldrh	r0, [r4, #2]
 801b0dc:	1ac0      	subs	r0, r0, r3
 801b0de:	fab0 f080 	clz	r0, r0
 801b0e2:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 801b0e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0e8:	4770      	bx	lr
    return 0;
 801b0ea:	2000      	movs	r0, #0
}
 801b0ec:	4770      	bx	lr
    return 0;
 801b0ee:	4610      	mov	r0, r2
}
 801b0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0f4:	4770      	bx	lr
  return 1;
 801b0f6:	2001      	movs	r0, #1
 801b0f8:	e7f4      	b.n	801b0e4 <mem_link_valid+0x40>
 801b0fa:	bf00      	nop
 801b0fc:	2001f324 	.word	0x2001f324
 801b100:	2001f328 	.word	0x2001f328

0801b104 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 801b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 801b108:	4f5f      	ldr	r7, [pc, #380]	; (801b288 <mem_sanity+0x184>)
 801b10a:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 801b10c:	7935      	ldrb	r5, [r6, #4]
 801b10e:	2d01      	cmp	r5, #1
 801b110:	d907      	bls.n	801b122 <mem_sanity+0x1e>
 801b112:	4b5e      	ldr	r3, [pc, #376]	; (801b28c <mem_sanity+0x188>)
 801b114:	f240 223f 	movw	r2, #575	; 0x23f
 801b118:	495d      	ldr	r1, [pc, #372]	; (801b290 <mem_sanity+0x18c>)
 801b11a:	485e      	ldr	r0, [pc, #376]	; (801b294 <mem_sanity+0x190>)
 801b11c:	f00b fada 	bl	80266d4 <iprintf>
  last_used = mem->used;
 801b120:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801b122:	8873      	ldrh	r3, [r6, #2]
 801b124:	2b00      	cmp	r3, #0
 801b126:	f040 80a7 	bne.w	801b278 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b12a:	8834      	ldrh	r4, [r6, #0]
 801b12c:	f242 7310 	movw	r3, #10000	; 0x2710
 801b130:	429c      	cmp	r4, r3
 801b132:	f200 8098 	bhi.w	801b266 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 801b136:	683b      	ldr	r3, [r7, #0]
 801b138:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 801b13a:	429c      	cmp	r4, r3
 801b13c:	d961      	bls.n	801b202 <mem_sanity+0xfe>
 801b13e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 801b2b0 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801b142:	f8df a148 	ldr.w	sl, [pc, #328]	; 801b28c <mem_sanity+0x188>
 801b146:	f8df 916c 	ldr.w	r9, [pc, #364]	; 801b2b4 <mem_sanity+0x1b0>
 801b14a:	4e52      	ldr	r6, [pc, #328]	; (801b294 <mem_sanity+0x190>)
 801b14c:	e012      	b.n	801b174 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 801b14e:	2b01      	cmp	r3, #1
 801b150:	d006      	beq.n	801b160 <mem_sanity+0x5c>
 801b152:	4653      	mov	r3, sl
 801b154:	f240 2251 	movw	r2, #593	; 0x251
 801b158:	494f      	ldr	r1, [pc, #316]	; (801b298 <mem_sanity+0x194>)
 801b15a:	4630      	mov	r0, r6
 801b15c:	f00b faba 	bl	80266d4 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 801b160:	4620      	mov	r0, r4
 801b162:	f7ff ff9f 	bl	801b0a4 <mem_link_valid>
 801b166:	b380      	cbz	r0, 801b1ca <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 801b168:	683b      	ldr	r3, [r7, #0]
 801b16a:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 801b16c:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 801b16e:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 801b170:	42a3      	cmp	r3, r4
 801b172:	d246      	bcs.n	801b202 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 801b174:	f8d8 2000 	ldr.w	r2, [r8]
 801b178:	42a2      	cmp	r2, r4
 801b17a:	d942      	bls.n	801b202 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801b17c:	1ce2      	adds	r2, r4, #3
 801b17e:	f022 0203 	bic.w	r2, r2, #3
 801b182:	4294      	cmp	r4, r2
 801b184:	d006      	beq.n	801b194 <mem_sanity+0x90>
 801b186:	4653      	mov	r3, sl
 801b188:	f240 2249 	movw	r2, #585	; 0x249
 801b18c:	4649      	mov	r1, r9
 801b18e:	4630      	mov	r0, r6
 801b190:	f00b faa0 	bl	80266d4 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801b194:	8862      	ldrh	r2, [r4, #2]
 801b196:	f242 7310 	movw	r3, #10000	; 0x2710
 801b19a:	429a      	cmp	r2, r3
 801b19c:	d81d      	bhi.n	801b1da <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b19e:	8822      	ldrh	r2, [r4, #0]
 801b1a0:	f242 7310 	movw	r3, #10000	; 0x2710
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	d824      	bhi.n	801b1f2 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 801b1a8:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 801b1aa:	2d00      	cmp	r5, #0
 801b1ac:	d0cf      	beq.n	801b14e <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 801b1ae:	2b01      	cmp	r3, #1
 801b1b0:	d9d6      	bls.n	801b160 <mem_sanity+0x5c>
 801b1b2:	4653      	mov	r3, sl
 801b1b4:	f240 2253 	movw	r2, #595	; 0x253
 801b1b8:	4938      	ldr	r1, [pc, #224]	; (801b29c <mem_sanity+0x198>)
 801b1ba:	4630      	mov	r0, r6
 801b1bc:	f00b fa8a 	bl	80266d4 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 801b1c0:	4620      	mov	r0, r4
 801b1c2:	f7ff ff6f 	bl	801b0a4 <mem_link_valid>
 801b1c6:	2800      	cmp	r0, #0
 801b1c8:	d1ce      	bne.n	801b168 <mem_sanity+0x64>
 801b1ca:	4653      	mov	r3, sl
 801b1cc:	f240 2256 	movw	r2, #598	; 0x256
 801b1d0:	4933      	ldr	r1, [pc, #204]	; (801b2a0 <mem_sanity+0x19c>)
 801b1d2:	4630      	mov	r0, r6
 801b1d4:	f00b fa7e 	bl	80266d4 <iprintf>
 801b1d8:	e7c6      	b.n	801b168 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801b1da:	4653      	mov	r3, sl
 801b1dc:	f240 224a 	movw	r2, #586	; 0x24a
 801b1e0:	4930      	ldr	r1, [pc, #192]	; (801b2a4 <mem_sanity+0x1a0>)
 801b1e2:	4630      	mov	r0, r6
 801b1e4:	f00b fa76 	bl	80266d4 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b1e8:	8822      	ldrh	r2, [r4, #0]
 801b1ea:	f242 7310 	movw	r3, #10000	; 0x2710
 801b1ee:	429a      	cmp	r2, r3
 801b1f0:	d9da      	bls.n	801b1a8 <mem_sanity+0xa4>
 801b1f2:	4653      	mov	r3, sl
 801b1f4:	f240 224b 	movw	r2, #587	; 0x24b
 801b1f8:	492b      	ldr	r1, [pc, #172]	; (801b2a8 <mem_sanity+0x1a4>)
 801b1fa:	4630      	mov	r0, r6
 801b1fc:	f00b fa6a 	bl	80266d4 <iprintf>
 801b200:	e7d2      	b.n	801b1a8 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 801b202:	f242 7210 	movw	r2, #10000	; 0x2710
 801b206:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 801b208:	4294      	cmp	r4, r2
 801b20a:	d006      	beq.n	801b21a <mem_sanity+0x116>
 801b20c:	4b1f      	ldr	r3, [pc, #124]	; (801b28c <mem_sanity+0x188>)
 801b20e:	f240 225b 	movw	r2, #603	; 0x25b
 801b212:	4926      	ldr	r1, [pc, #152]	; (801b2ac <mem_sanity+0x1a8>)
 801b214:	481f      	ldr	r0, [pc, #124]	; (801b294 <mem_sanity+0x190>)
 801b216:	f00b fa5d 	bl	80266d4 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 801b21a:	7923      	ldrb	r3, [r4, #4]
 801b21c:	2b01      	cmp	r3, #1
 801b21e:	d006      	beq.n	801b22e <mem_sanity+0x12a>
 801b220:	4b1a      	ldr	r3, [pc, #104]	; (801b28c <mem_sanity+0x188>)
 801b222:	f44f 7217 	mov.w	r2, #604	; 0x25c
 801b226:	491a      	ldr	r1, [pc, #104]	; (801b290 <mem_sanity+0x18c>)
 801b228:	481a      	ldr	r0, [pc, #104]	; (801b294 <mem_sanity+0x190>)
 801b22a:	f00b fa53 	bl	80266d4 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 801b22e:	8862      	ldrh	r2, [r4, #2]
 801b230:	f242 7310 	movw	r3, #10000	; 0x2710
 801b234:	429a      	cmp	r2, r3
 801b236:	d006      	beq.n	801b246 <mem_sanity+0x142>
 801b238:	4b14      	ldr	r3, [pc, #80]	; (801b28c <mem_sanity+0x188>)
 801b23a:	f240 225d 	movw	r2, #605	; 0x25d
 801b23e:	4919      	ldr	r1, [pc, #100]	; (801b2a4 <mem_sanity+0x1a0>)
 801b240:	4814      	ldr	r0, [pc, #80]	; (801b294 <mem_sanity+0x190>)
 801b242:	f00b fa47 	bl	80266d4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801b246:	8822      	ldrh	r2, [r4, #0]
 801b248:	f242 7310 	movw	r3, #10000	; 0x2710
 801b24c:	429a      	cmp	r2, r3
 801b24e:	d101      	bne.n	801b254 <mem_sanity+0x150>
}
 801b250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801b254:	4b0d      	ldr	r3, [pc, #52]	; (801b28c <mem_sanity+0x188>)
 801b256:	f240 225e 	movw	r2, #606	; 0x25e
 801b25a:	4913      	ldr	r1, [pc, #76]	; (801b2a8 <mem_sanity+0x1a4>)
 801b25c:	480d      	ldr	r0, [pc, #52]	; (801b294 <mem_sanity+0x190>)
}
 801b25e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801b262:	f00b ba37 	b.w	80266d4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b266:	4b09      	ldr	r3, [pc, #36]	; (801b28c <mem_sanity+0x188>)
 801b268:	f240 2242 	movw	r2, #578	; 0x242
 801b26c:	490e      	ldr	r1, [pc, #56]	; (801b2a8 <mem_sanity+0x1a4>)
 801b26e:	4809      	ldr	r0, [pc, #36]	; (801b294 <mem_sanity+0x190>)
 801b270:	f00b fa30 	bl	80266d4 <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 801b274:	8834      	ldrh	r4, [r6, #0]
 801b276:	e75e      	b.n	801b136 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801b278:	4b04      	ldr	r3, [pc, #16]	; (801b28c <mem_sanity+0x188>)
 801b27a:	f240 2241 	movw	r2, #577	; 0x241
 801b27e:	4909      	ldr	r1, [pc, #36]	; (801b2a4 <mem_sanity+0x1a0>)
 801b280:	4804      	ldr	r0, [pc, #16]	; (801b294 <mem_sanity+0x190>)
 801b282:	f00b fa27 	bl	80266d4 <iprintf>
 801b286:	e750      	b.n	801b12a <mem_sanity+0x26>
 801b288:	2001f324 	.word	0x2001f324
 801b28c:	08044b18 	.word	0x08044b18
 801b290:	08044b48 	.word	0x08044b48
 801b294:	0802b3cc 	.word	0x0802b3cc
 801b298:	08044bb0 	.word	0x08044bb0
 801b29c:	08044bc8 	.word	0x08044bc8
 801b2a0:	08044be4 	.word	0x08044be4
 801b2a4:	08044b60 	.word	0x08044b60
 801b2a8:	08044b7c 	.word	0x08044b7c
 801b2ac:	08044bfc 	.word	0x08044bfc
 801b2b0:	2001f328 	.word	0x2001f328
 801b2b4:	08044b98 	.word	0x08044b98

0801b2b8 <mem_overflow_check_raw>:
{
 801b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2bc:	1e4c      	subs	r4, r1, #1
 801b2be:	310f      	adds	r1, #15
 801b2c0:	b0a3      	sub	sp, #140	; 0x8c
 801b2c2:	4606      	mov	r6, r0
 801b2c4:	4615      	mov	r5, r2
 801b2c6:	4698      	mov	r8, r3
 801b2c8:	4404      	add	r4, r0
 801b2ca:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b2cc:	f8df 9074 	ldr.w	r9, [pc, #116]	; 801b344 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 801b2d0:	f8df b074 	ldr.w	fp, [pc, #116]	; 801b348 <mem_overflow_check_raw+0x90>
 801b2d4:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b34c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801b2d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b2dc:	464a      	mov	r2, r9
 801b2de:	2180      	movs	r1, #128	; 0x80
 801b2e0:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 801b2e2:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b2e4:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801b2e6:	d009      	beq.n	801b2fc <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b2e8:	f8cd 8000 	str.w	r8, [sp]
 801b2ec:	f00b fba8 	bl	8026a40 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801b2f0:	465b      	mov	r3, fp
 801b2f2:	226d      	movs	r2, #109	; 0x6d
 801b2f4:	a902      	add	r1, sp, #8
 801b2f6:	4650      	mov	r0, sl
 801b2f8:	f00b f9ec 	bl	80266d4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 801b2fc:	42bc      	cmp	r4, r7
 801b2fe:	d1eb      	bne.n	801b2d8 <mem_overflow_check_raw+0x20>
 801b300:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b304:	4f0e      	ldr	r7, [pc, #56]	; (801b340 <mem_overflow_check_raw+0x88>)
 801b306:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 801b308:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801b348 <mem_overflow_check_raw+0x90>
 801b30c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801b34c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801b310:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b314:	463a      	mov	r2, r7
 801b316:	2180      	movs	r1, #128	; 0x80
 801b318:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801b31a:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b31c:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 801b31e:	d009      	beq.n	801b334 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b320:	f8cd 8000 	str.w	r8, [sp]
 801b324:	f00b fb8c 	bl	8026a40 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801b328:	4653      	mov	r3, sl
 801b32a:	2278      	movs	r2, #120	; 0x78
 801b32c:	a902      	add	r1, sp, #8
 801b32e:	4648      	mov	r0, r9
 801b330:	f00b f9d0 	bl	80266d4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 801b334:	42b4      	cmp	r4, r6
 801b336:	d1eb      	bne.n	801b310 <mem_overflow_check_raw+0x58>
}
 801b338:	b023      	add	sp, #140	; 0x8c
 801b33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b33e:	bf00      	nop
 801b340:	08044c30 	.word	0x08044c30
 801b344:	08044c10 	.word	0x08044c10
 801b348:	08044b18 	.word	0x08044b18
 801b34c:	0802b3cc 	.word	0x0802b3cc

0801b350 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b350:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801b354:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b356:	f840 3c10 	str.w	r3, [r0, #-16]
 801b35a:	f840 3c0c 	str.w	r3, [r0, #-12]
 801b35e:	f840 3c08 	str.w	r3, [r0, #-8]
 801b362:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b366:	5043      	str	r3, [r0, r1]
 801b368:	6053      	str	r3, [r2, #4]
 801b36a:	6093      	str	r3, [r2, #8]
 801b36c:	60d3      	str	r3, [r2, #12]
}
 801b36e:	4770      	bx	lr

0801b370 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b370:	4b14      	ldr	r3, [pc, #80]	; (801b3c4 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 801b372:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 801b376:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801b378:	4913      	ldr	r1, [pc, #76]	; (801b3c8 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b37a:	f023 0303 	bic.w	r3, r3, #3
{
 801b37e:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 801b380:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b382:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b384:	4c11      	ldr	r4, [pc, #68]	; (801b3cc <mem_init+0x5c>)
  mem->used = 0;
 801b386:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801b388:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 801b38a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 801b38e:	4910      	ldr	r1, [pc, #64]	; (801b3d0 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b390:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 801b392:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 801b394:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 801b398:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 801b39c:	f7ff feb2 	bl	801b104 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 801b3a0:	6822      	ldr	r2, [r4, #0]
 801b3a2:	4b0c      	ldr	r3, [pc, #48]	; (801b3d4 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b3a4:	480c      	ldr	r0, [pc, #48]	; (801b3d8 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 801b3a6:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b3a8:	f009 fcae 	bl	8024d08 <sys_mutex_new>
 801b3ac:	b900      	cbnz	r0, 801b3b0 <mem_init+0x40>
}
 801b3ae:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b3b0:	4b0a      	ldr	r3, [pc, #40]	; (801b3dc <mem_init+0x6c>)
 801b3b2:	f240 221f 	movw	r2, #543	; 0x21f
 801b3b6:	490a      	ldr	r1, [pc, #40]	; (801b3e0 <mem_init+0x70>)
 801b3b8:	480a      	ldr	r0, [pc, #40]	; (801b3e4 <mem_init+0x74>)
}
 801b3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b3be:	f00b b989 	b.w	80266d4 <iprintf>
 801b3c2:	bf00      	nop
 801b3c4:	2001f32f 	.word	0x2001f32f
 801b3c8:	2001f328 	.word	0x2001f328
 801b3cc:	2001f324 	.word	0x2001f324
 801b3d0:	27102710 	.word	0x27102710
 801b3d4:	2001f318 	.word	0x2001f318
 801b3d8:	2001f320 	.word	0x2001f320
 801b3dc:	08044b18 	.word	0x08044b18
 801b3e0:	08044c50 	.word	0x08044c50
 801b3e4:	0802b3cc 	.word	0x0802b3cc

0801b3e8 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801b3e8:	2800      	cmp	r0, #0
 801b3ea:	d07f      	beq.n	801b4ec <mem_free+0x104>
{
 801b3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801b3f0:	f010 0803 	ands.w	r8, r0, #3
 801b3f4:	4604      	mov	r4, r0
 801b3f6:	d170      	bne.n	801b4da <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b3f8:	4e5c      	ldr	r6, [pc, #368]	; (801b56c <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b3fa:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b3fe:	6833      	ldr	r3, [r6, #0]
 801b400:	42ab      	cmp	r3, r5
 801b402:	d805      	bhi.n	801b410 <mem_free+0x28>
 801b404:	4f5a      	ldr	r7, [pc, #360]	; (801b570 <mem_free+0x188>)
 801b406:	f100 030c 	add.w	r3, r0, #12
 801b40a:	683a      	ldr	r2, [r7, #0]
 801b40c:	429a      	cmp	r2, r3
 801b40e:	d208      	bcs.n	801b422 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b410:	4b58      	ldr	r3, [pc, #352]	; (801b574 <mem_free+0x18c>)
 801b412:	f240 227f 	movw	r2, #639	; 0x27f
 801b416:	4958      	ldr	r1, [pc, #352]	; (801b578 <mem_free+0x190>)
 801b418:	4858      	ldr	r0, [pc, #352]	; (801b57c <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801b41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b41e:	f00b b959 	b.w	80266d4 <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b422:	4b57      	ldr	r3, [pc, #348]	; (801b580 <mem_free+0x198>)
 801b424:	4a57      	ldr	r2, [pc, #348]	; (801b584 <mem_free+0x19c>)
 801b426:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801b42a:	f7ff ff45 	bl	801b2b8 <mem_overflow_check_raw>
  if (!mem->used) {
 801b42e:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801b432:	2b00      	cmp	r3, #0
 801b434:	f000 8082 	beq.w	801b53c <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 801b438:	4628      	mov	r0, r5
 801b43a:	f7ff fe33 	bl	801b0a4 <mem_link_valid>
 801b43e:	2800      	cmp	r0, #0
 801b440:	f000 8085 	beq.w	801b54e <mem_free+0x166>
  mem->used = 0;
 801b444:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 801b448:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801b5a8 <mem_free+0x1c0>
 801b44c:	f8d8 3000 	ldr.w	r3, [r8]
 801b450:	42ab      	cmp	r3, r5
 801b452:	d901      	bls.n	801b458 <mem_free+0x70>
    lfree = mem;
 801b454:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b458:	6833      	ldr	r3, [r6, #0]
 801b45a:	429d      	cmp	r5, r3
 801b45c:	d351      	bcc.n	801b502 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b45e:	683b      	ldr	r3, [r7, #0]
 801b460:	429d      	cmp	r5, r3
 801b462:	d258      	bcs.n	801b516 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b464:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b468:	f242 7210 	movw	r2, #10000	; 0x2710
 801b46c:	4293      	cmp	r3, r2
 801b46e:	d83e      	bhi.n	801b4ee <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 801b470:	6832      	ldr	r2, [r6, #0]
 801b472:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801b474:	429d      	cmp	r5, r3
 801b476:	d013      	beq.n	801b4a0 <mem_free+0xb8>
 801b478:	7919      	ldrb	r1, [r3, #4]
 801b47a:	b989      	cbnz	r1, 801b4a0 <mem_free+0xb8>
 801b47c:	6839      	ldr	r1, [r7, #0]
 801b47e:	428b      	cmp	r3, r1
 801b480:	d00e      	beq.n	801b4a0 <mem_free+0xb8>
    if (lfree == nmem) {
 801b482:	f8d8 1000 	ldr.w	r1, [r8]
 801b486:	428b      	cmp	r3, r1
 801b488:	d06d      	beq.n	801b566 <mem_free+0x17e>
    mem->next = nmem->next;
 801b48a:	8819      	ldrh	r1, [r3, #0]
 801b48c:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801b490:	f242 7110 	movw	r1, #10000	; 0x2710
 801b494:	881b      	ldrh	r3, [r3, #0]
 801b496:	428b      	cmp	r3, r1
 801b498:	d002      	beq.n	801b4a0 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801b49a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 801b49c:	1aa9      	subs	r1, r5, r2
 801b49e:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 801b4a0:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 801b4a4:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 801b4a6:	429d      	cmp	r5, r3
 801b4a8:	d010      	beq.n	801b4cc <mem_free+0xe4>
 801b4aa:	7918      	ldrb	r0, [r3, #4]
 801b4ac:	b970      	cbnz	r0, 801b4cc <mem_free+0xe4>
    if (lfree == mem) {
 801b4ae:	f8d8 0000 	ldr.w	r0, [r8]
 801b4b2:	4285      	cmp	r5, r0
 801b4b4:	d054      	beq.n	801b560 <mem_free+0x178>
    pmem->next = mem->next;
 801b4b6:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b4ba:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 801b4be:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b4c0:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b4c4:	4283      	cmp	r3, r0
 801b4c6:	d001      	beq.n	801b4cc <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801b4c8:	441a      	add	r2, r3
 801b4ca:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 801b4cc:	f7ff fe1a 	bl	801b104 <mem_sanity>
  mem_free_count = 1;
 801b4d0:	4b2d      	ldr	r3, [pc, #180]	; (801b588 <mem_free+0x1a0>)
 801b4d2:	2201      	movs	r2, #1
 801b4d4:	701a      	strb	r2, [r3, #0]
}
 801b4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b4da:	4b26      	ldr	r3, [pc, #152]	; (801b574 <mem_free+0x18c>)
 801b4dc:	f240 2273 	movw	r2, #627	; 0x273
 801b4e0:	492a      	ldr	r1, [pc, #168]	; (801b58c <mem_free+0x1a4>)
 801b4e2:	4826      	ldr	r0, [pc, #152]	; (801b57c <mem_free+0x194>)
}
 801b4e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b4e8:	f00b b8f4 	b.w	80266d4 <iprintf>
 801b4ec:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b4ee:	4b21      	ldr	r3, [pc, #132]	; (801b574 <mem_free+0x18c>)
 801b4f0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801b4f4:	4926      	ldr	r1, [pc, #152]	; (801b590 <mem_free+0x1a8>)
 801b4f6:	4821      	ldr	r0, [pc, #132]	; (801b57c <mem_free+0x194>)
 801b4f8:	f00b f8ec 	bl	80266d4 <iprintf>
  nmem = ptr_to_mem(mem->next);
 801b4fc:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b500:	e7b6      	b.n	801b470 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b502:	4b1c      	ldr	r3, [pc, #112]	; (801b574 <mem_free+0x18c>)
 801b504:	f240 12df 	movw	r2, #479	; 0x1df
 801b508:	4922      	ldr	r1, [pc, #136]	; (801b594 <mem_free+0x1ac>)
 801b50a:	481c      	ldr	r0, [pc, #112]	; (801b57c <mem_free+0x194>)
 801b50c:	f00b f8e2 	bl	80266d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b510:	683b      	ldr	r3, [r7, #0]
 801b512:	429d      	cmp	r5, r3
 801b514:	d306      	bcc.n	801b524 <mem_free+0x13c>
 801b516:	4b17      	ldr	r3, [pc, #92]	; (801b574 <mem_free+0x18c>)
 801b518:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b51c:	491e      	ldr	r1, [pc, #120]	; (801b598 <mem_free+0x1b0>)
 801b51e:	4817      	ldr	r0, [pc, #92]	; (801b57c <mem_free+0x194>)
 801b520:	f00b f8d8 	bl	80266d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801b524:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d09b      	beq.n	801b464 <mem_free+0x7c>
 801b52c:	4b11      	ldr	r3, [pc, #68]	; (801b574 <mem_free+0x18c>)
 801b52e:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b532:	491a      	ldr	r1, [pc, #104]	; (801b59c <mem_free+0x1b4>)
 801b534:	4811      	ldr	r0, [pc, #68]	; (801b57c <mem_free+0x194>)
 801b536:	f00b f8cd 	bl	80266d4 <iprintf>
 801b53a:	e793      	b.n	801b464 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b53c:	4b0d      	ldr	r3, [pc, #52]	; (801b574 <mem_free+0x18c>)
 801b53e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801b542:	4917      	ldr	r1, [pc, #92]	; (801b5a0 <mem_free+0x1b8>)
 801b544:	480d      	ldr	r0, [pc, #52]	; (801b57c <mem_free+0x194>)
}
 801b546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b54a:	f00b b8c3 	b.w	80266d4 <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b54e:	4b09      	ldr	r3, [pc, #36]	; (801b574 <mem_free+0x18c>)
 801b550:	f240 2295 	movw	r2, #661	; 0x295
 801b554:	4913      	ldr	r1, [pc, #76]	; (801b5a4 <mem_free+0x1bc>)
 801b556:	4809      	ldr	r0, [pc, #36]	; (801b57c <mem_free+0x194>)
}
 801b558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b55c:	f00b b8ba 	b.w	80266d4 <iprintf>
      lfree = pmem;
 801b560:	f8c8 3000 	str.w	r3, [r8]
 801b564:	e7a7      	b.n	801b4b6 <mem_free+0xce>
      lfree = mem;
 801b566:	f8c8 5000 	str.w	r5, [r8]
 801b56a:	e78e      	b.n	801b48a <mem_free+0xa2>
 801b56c:	2001f324 	.word	0x2001f324
 801b570:	2001f328 	.word	0x2001f328
 801b574:	08044b18 	.word	0x08044b18
 801b578:	08044c90 	.word	0x08044c90
 801b57c:	0802b3cc 	.word	0x0802b3cc
 801b580:	0802b630 	.word	0x0802b630
 801b584:	08044cac 	.word	0x08044cac
 801b588:	2001f31c 	.word	0x2001f31c
 801b58c:	08044c6c 	.word	0x08044c6c
 801b590:	08044d60 	.word	0x08044d60
 801b594:	08044d10 	.word	0x08044d10
 801b598:	08044d28 	.word	0x08044d28
 801b59c:	08044d44 	.word	0x08044d44
 801b5a0:	08044cb4 	.word	0x08044cb4
 801b5a4:	08044cdc 	.word	0x08044cdc
 801b5a8:	2001f318 	.word	0x2001f318

0801b5ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801b5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b5b0:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b5b2:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b5b6:	f024 0403 	bic.w	r4, r4, #3
 801b5ba:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 801b5bc:	2c0c      	cmp	r4, #12
 801b5be:	bf38      	it	cc
 801b5c0:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801b5c2:	3420      	adds	r4, #32
 801b5c4:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b5c6:	429c      	cmp	r4, r3
 801b5c8:	d87a      	bhi.n	801b6c0 <mem_trim+0x114>
 801b5ca:	42a1      	cmp	r1, r4
 801b5cc:	460e      	mov	r6, r1
 801b5ce:	d877      	bhi.n	801b6c0 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801b5d0:	4f58      	ldr	r7, [pc, #352]	; (801b734 <mem_trim+0x188>)
 801b5d2:	4605      	mov	r5, r0
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	4283      	cmp	r3, r0
 801b5d8:	d803      	bhi.n	801b5e2 <mem_trim+0x36>
 801b5da:	4b57      	ldr	r3, [pc, #348]	; (801b738 <mem_trim+0x18c>)
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	4283      	cmp	r3, r0
 801b5e0:	d810      	bhi.n	801b604 <mem_trim+0x58>
 801b5e2:	4b56      	ldr	r3, [pc, #344]	; (801b73c <mem_trim+0x190>)
 801b5e4:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b5e8:	4955      	ldr	r1, [pc, #340]	; (801b740 <mem_trim+0x194>)
 801b5ea:	4856      	ldr	r0, [pc, #344]	; (801b744 <mem_trim+0x198>)
 801b5ec:	f00b f872 	bl	80266d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b5f0:	683b      	ldr	r3, [r7, #0]
 801b5f2:	42ab      	cmp	r3, r5
 801b5f4:	d902      	bls.n	801b5fc <mem_trim+0x50>
{
 801b5f6:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 801b5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b5fc:	4b4e      	ldr	r3, [pc, #312]	; (801b738 <mem_trim+0x18c>)
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	429d      	cmp	r5, r3
 801b602:	d2f8      	bcs.n	801b5f6 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b604:	4b50      	ldr	r3, [pc, #320]	; (801b748 <mem_trim+0x19c>)
 801b606:	4628      	mov	r0, r5
 801b608:	4a50      	ldr	r2, [pc, #320]	; (801b74c <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b60a:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b60e:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 801b612:	f7ff fe51 	bl	801b2b8 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 801b616:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b618:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 801b61c:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b620:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 801b624:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b628:	eba3 0308 	sub.w	r3, r3, r8
 801b62c:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b62e:	429c      	cmp	r4, r3
 801b630:	d83d      	bhi.n	801b6ae <mem_trim+0x102>
  if (newsize == size) {
 801b632:	d0e0      	beq.n	801b5f6 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 801b634:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 801b638:	f899 0004 	ldrb.w	r0, [r9, #4]
 801b63c:	2800      	cmp	r0, #0
 801b63e:	d142      	bne.n	801b6c6 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b640:	f242 7310 	movw	r3, #10000	; 0x2710
 801b644:	4299      	cmp	r1, r3
 801b646:	d061      	beq.n	801b70c <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b648:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 801b64c:	4940      	ldr	r1, [pc, #256]	; (801b750 <mem_trim+0x1a4>)
    next = mem2->next;
 801b64e:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b652:	441c      	add	r4, r3
    if (lfree == mem2) {
 801b654:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b656:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 801b658:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 801b65a:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 801b65e:	d053      	beq.n	801b708 <mem_trim+0x15c>
    mem2->used = 0;
 801b660:	2100      	movs	r1, #0
    mem2->next = next;
 801b662:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 801b664:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801b668:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b66a:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801b66e:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b672:	881b      	ldrh	r3, [r3, #0]
 801b674:	428b      	cmp	r3, r1
 801b676:	d001      	beq.n	801b67c <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b678:	4413      	add	r3, r2
 801b67a:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b67c:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801b680:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 801b682:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b686:	f845 3c10 	str.w	r3, [r5, #-16]
 801b68a:	f845 3c0c 	str.w	r3, [r5, #-12]
 801b68e:	f845 3c08 	str.w	r3, [r5, #-8]
 801b692:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b696:	51ab      	str	r3, [r5, r6]
 801b698:	6053      	str	r3, [r2, #4]
 801b69a:	6093      	str	r3, [r2, #8]
 801b69c:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 801b69e:	f7ff fd31 	bl	801b104 <mem_sanity>
  mem_free_count = 1;
 801b6a2:	4b2c      	ldr	r3, [pc, #176]	; (801b754 <mem_trim+0x1a8>)
 801b6a4:	2201      	movs	r2, #1
  return rmem;
 801b6a6:	4628      	mov	r0, r5
  mem_free_count = 1;
 801b6a8:	701a      	strb	r2, [r3, #0]
}
 801b6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b6ae:	4b23      	ldr	r3, [pc, #140]	; (801b73c <mem_trim+0x190>)
 801b6b0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801b6b4:	4928      	ldr	r1, [pc, #160]	; (801b758 <mem_trim+0x1ac>)
 801b6b6:	4823      	ldr	r0, [pc, #140]	; (801b744 <mem_trim+0x198>)
 801b6b8:	f00b f80c 	bl	80266d4 <iprintf>
    return NULL;
 801b6bc:	2000      	movs	r0, #0
 801b6be:	e79b      	b.n	801b5f8 <mem_trim+0x4c>
    return NULL;
 801b6c0:	2000      	movs	r0, #0
}
 801b6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801b6c6:	f104 0014 	add.w	r0, r4, #20
 801b6ca:	4298      	cmp	r0, r3
 801b6cc:	d8d6      	bhi.n	801b67c <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b6ce:	f108 0308 	add.w	r3, r8, #8
 801b6d2:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b6d4:	f242 7310 	movw	r3, #10000	; 0x2710
 801b6d8:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b6da:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b6dc:	d01f      	beq.n	801b71e <mem_trim+0x172>
    if (mem2 < lfree) {
 801b6de:	481c      	ldr	r0, [pc, #112]	; (801b750 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 801b6e0:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 801b6e2:	6807      	ldr	r7, [r0, #0]
 801b6e4:	429f      	cmp	r7, r3
 801b6e6:	d900      	bls.n	801b6ea <mem_trim+0x13e>
      lfree = mem2;
 801b6e8:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 801b6ea:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 801b6ec:	2100      	movs	r1, #0
    mem2->prev = ptr;
 801b6ee:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801b6f2:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b6f4:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801b6f8:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b6fc:	881b      	ldrh	r3, [r3, #0]
 801b6fe:	428b      	cmp	r3, r1
 801b700:	d0bc      	beq.n	801b67c <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b702:	441a      	add	r2, r3
 801b704:	8054      	strh	r4, [r2, #2]
 801b706:	e7b9      	b.n	801b67c <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 801b708:	600b      	str	r3, [r1, #0]
 801b70a:	e7a9      	b.n	801b660 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b70c:	f240 22f5 	movw	r2, #757	; 0x2f5
 801b710:	4b0a      	ldr	r3, [pc, #40]	; (801b73c <mem_trim+0x190>)
 801b712:	4912      	ldr	r1, [pc, #72]	; (801b75c <mem_trim+0x1b0>)
 801b714:	480b      	ldr	r0, [pc, #44]	; (801b744 <mem_trim+0x198>)
 801b716:	f00a ffdd 	bl	80266d4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b71a:	683a      	ldr	r2, [r7, #0]
 801b71c:	e794      	b.n	801b648 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b71e:	f240 3216 	movw	r2, #790	; 0x316
 801b722:	490e      	ldr	r1, [pc, #56]	; (801b75c <mem_trim+0x1b0>)
 801b724:	4b05      	ldr	r3, [pc, #20]	; (801b73c <mem_trim+0x190>)
 801b726:	4807      	ldr	r0, [pc, #28]	; (801b744 <mem_trim+0x198>)
 801b728:	f00a ffd4 	bl	80266d4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b72c:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 801b72e:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 801b732:	e7d4      	b.n	801b6de <mem_trim+0x132>
 801b734:	2001f324 	.word	0x2001f324
 801b738:	2001f328 	.word	0x2001f328
 801b73c:	08044b18 	.word	0x08044b18
 801b740:	08044d8c 	.word	0x08044d8c
 801b744:	0802b3cc 	.word	0x0802b3cc
 801b748:	0802b630 	.word	0x0802b630
 801b74c:	08044cac 	.word	0x08044cac
 801b750:	2001f318 	.word	0x2001f318
 801b754:	2001f31c 	.word	0x2001f31c
 801b758:	08044da4 	.word	0x08044da4
 801b75c:	08044dc4 	.word	0x08044dc4

0801b760 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801b760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801b764:	4680      	mov	r8, r0
 801b766:	2800      	cmp	r0, #0
 801b768:	f000 80b2 	beq.w	801b8d0 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b76c:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b770:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b774:	f02b 0b03 	bic.w	fp, fp, #3
 801b778:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 801b77c:	f1bb 0f0c 	cmp.w	fp, #12
 801b780:	bf38      	it	cc
 801b782:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801b786:	f10b 0720 	add.w	r7, fp, #32
 801b78a:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b78c:	42a7      	cmp	r7, r4
 801b78e:	f200 809f 	bhi.w	801b8d0 <mem_malloc+0x170>
 801b792:	42b8      	cmp	r0, r7
 801b794:	bf94      	ite	ls
 801b796:	f04f 0a00 	movls.w	sl, #0
 801b79a:	f04f 0a01 	movhi.w	sl, #1
 801b79e:	f1ba 0f00 	cmp.w	sl, #0
 801b7a2:	f040 8095 	bne.w	801b8d0 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801b7a6:	4866      	ldr	r0, [pc, #408]	; (801b940 <mem_malloc+0x1e0>)
 801b7a8:	f009 fabe 	bl	8024d28 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 801b7ac:	4b65      	ldr	r3, [pc, #404]	; (801b944 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b7ae:	eba4 0c07 	sub.w	ip, r4, r7
 801b7b2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801b96c <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 801b7b6:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b7b8:	f06f 0e07 	mvn.w	lr, #7
 801b7bc:	4d62      	ldr	r5, [pc, #392]	; (801b948 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b7be:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 801b7c2:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b7c4:	b2b3      	uxth	r3, r6
 801b7c6:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 801b7c8:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b7ca:	d97a      	bls.n	801b8c2 <mem_malloc+0x162>
      mem_free_count = 0;
 801b7cc:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b7d0:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 801b7d4:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b7d6:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 801b7d8:	2900      	cmp	r1, #0
 801b7da:	d1f0      	bne.n	801b7be <mem_malloc+0x5e>
      if ((!mem->used) &&
 801b7dc:	7923      	ldrb	r3, [r4, #4]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d16b      	bne.n	801b8ba <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b7e2:	8821      	ldrh	r1, [r4, #0]
 801b7e4:	440a      	add	r2, r1
 801b7e6:	460b      	mov	r3, r1
      if ((!mem->used) &&
 801b7e8:	42ba      	cmp	r2, r7
 801b7ea:	d3ec      	bcc.n	801b7c6 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801b7ec:	f107 0314 	add.w	r3, r7, #20
 801b7f0:	429a      	cmp	r2, r3
 801b7f2:	d371      	bcc.n	801b8d8 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b7f4:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b7f8:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b7fc:	44b2      	add	sl, r6
 801b7fe:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b802:	459a      	cmp	sl, r3
 801b804:	f000 808f 	beq.w	801b926 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 801b808:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 801b80c:	2200      	movs	r2, #0
 801b80e:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b810:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 801b814:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 801b818:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 801b81a:	2301      	movs	r3, #1
          mem->next = ptr2;
 801b81c:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 801b820:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b822:	f830 300a 	ldrh.w	r3, [r0, sl]
 801b826:	4293      	cmp	r3, r2
 801b828:	d002      	beq.n	801b830 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801b82a:	4418      	add	r0, r3
 801b82c:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801b830:	f8d9 3000 	ldr.w	r3, [r9]
 801b834:	42a3      	cmp	r3, r4
 801b836:	f040 8081 	bne.w	801b93c <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 801b83a:	4b42      	ldr	r3, [pc, #264]	; (801b944 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 801b83c:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 801b83e:	4e43      	ldr	r6, [pc, #268]	; (801b94c <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 801b840:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 801b844:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 801b846:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 801b84a:	791a      	ldrb	r2, [r3, #4]
 801b84c:	b942      	cbnz	r2, 801b860 <mem_malloc+0x100>
 801b84e:	e009      	b.n	801b864 <mem_malloc+0x104>
            mem_free_count = 0;
 801b850:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 801b852:	782a      	ldrb	r2, [r5, #0]
 801b854:	2a00      	cmp	r2, #0
 801b856:	d142      	bne.n	801b8de <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 801b858:	881b      	ldrh	r3, [r3, #0]
 801b85a:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 801b85c:	791a      	ldrb	r2, [r3, #4]
 801b85e:	b10a      	cbz	r2, 801b864 <mem_malloc+0x104>
 801b860:	4299      	cmp	r1, r3
 801b862:	d1f5      	bne.n	801b850 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 801b864:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b868:	f8d9 3000 	ldr.w	r3, [r9]
 801b86c:	4299      	cmp	r1, r3
 801b86e:	d004      	beq.n	801b87a <mem_malloc+0x11a>
 801b870:	f8d9 3000 	ldr.w	r3, [r9]
 801b874:	791b      	ldrb	r3, [r3, #4]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d14d      	bne.n	801b916 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b87a:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801b87c:	4830      	ldr	r0, [pc, #192]	; (801b940 <mem_malloc+0x1e0>)
 801b87e:	f009 fa59 	bl	8024d34 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b882:	6833      	ldr	r3, [r6, #0]
 801b884:	4427      	add	r7, r4
 801b886:	42bb      	cmp	r3, r7
 801b888:	d33d      	bcc.n	801b906 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b88a:	07a3      	lsls	r3, r4, #30
 801b88c:	d12c      	bne.n	801b8e8 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801b88e:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b892:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 801b896:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 801b89a:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b89e:	60a3      	str	r3, [r4, #8]
 801b8a0:	60e3      	str	r3, [r4, #12]
 801b8a2:	6123      	str	r3, [r4, #16]
 801b8a4:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b8a6:	f845 3008 	str.w	r3, [r5, r8]
 801b8aa:	6053      	str	r3, [r2, #4]
 801b8ac:	6093      	str	r3, [r2, #8]
 801b8ae:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 801b8b0:	f7ff fc28 	bl	801b104 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 801b8b4:	4628      	mov	r0, r5
 801b8b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b8ba:	8826      	ldrh	r6, [r4, #0]
 801b8bc:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b8be:	459c      	cmp	ip, r3
 801b8c0:	d884      	bhi.n	801b7cc <mem_malloc+0x6c>
  return NULL;
 801b8c2:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801b8c4:	481e      	ldr	r0, [pc, #120]	; (801b940 <mem_malloc+0x1e0>)
 801b8c6:	f009 fa35 	bl	8024d34 <sys_mutex_unlock>
}
 801b8ca:	4628      	mov	r0, r5
 801b8cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 801b8d0:	2500      	movs	r5, #0
}
 801b8d2:	4628      	mov	r0, r5
 801b8d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 801b8d8:	2301      	movs	r3, #1
 801b8da:	7123      	strb	r3, [r4, #4]
 801b8dc:	e7a8      	b.n	801b830 <mem_malloc+0xd0>
        if (mem == lfree) {
 801b8de:	f8d9 3000 	ldr.w	r3, [r9]
 801b8e2:	42a3      	cmp	r3, r4
 801b8e4:	d0af      	beq.n	801b846 <mem_malloc+0xe6>
 801b8e6:	e7c8      	b.n	801b87a <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b8e8:	4b19      	ldr	r3, [pc, #100]	; (801b950 <mem_malloc+0x1f0>)
 801b8ea:	f240 32bb 	movw	r2, #955	; 0x3bb
 801b8ee:	4919      	ldr	r1, [pc, #100]	; (801b954 <mem_malloc+0x1f4>)
 801b8f0:	4819      	ldr	r0, [pc, #100]	; (801b958 <mem_malloc+0x1f8>)
 801b8f2:	f00a feef 	bl	80266d4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801b8f6:	4b16      	ldr	r3, [pc, #88]	; (801b950 <mem_malloc+0x1f0>)
 801b8f8:	f240 32bd 	movw	r2, #957	; 0x3bd
 801b8fc:	4917      	ldr	r1, [pc, #92]	; (801b95c <mem_malloc+0x1fc>)
 801b8fe:	4816      	ldr	r0, [pc, #88]	; (801b958 <mem_malloc+0x1f8>)
 801b900:	f00a fee8 	bl	80266d4 <iprintf>
 801b904:	e7c3      	b.n	801b88e <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b906:	4b12      	ldr	r3, [pc, #72]	; (801b950 <mem_malloc+0x1f0>)
 801b908:	f240 32b9 	movw	r2, #953	; 0x3b9
 801b90c:	4914      	ldr	r1, [pc, #80]	; (801b960 <mem_malloc+0x200>)
 801b90e:	4812      	ldr	r0, [pc, #72]	; (801b958 <mem_malloc+0x1f8>)
 801b910:	f00a fee0 	bl	80266d4 <iprintf>
 801b914:	e7b9      	b.n	801b88a <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b916:	4b0e      	ldr	r3, [pc, #56]	; (801b950 <mem_malloc+0x1f0>)
 801b918:	f240 32b5 	movw	r2, #949	; 0x3b5
 801b91c:	4911      	ldr	r1, [pc, #68]	; (801b964 <mem_malloc+0x204>)
 801b91e:	480e      	ldr	r0, [pc, #56]	; (801b958 <mem_malloc+0x1f8>)
 801b920:	f00a fed8 	bl	80266d4 <iprintf>
 801b924:	e7a9      	b.n	801b87a <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b926:	4b0a      	ldr	r3, [pc, #40]	; (801b950 <mem_malloc+0x1f0>)
 801b928:	f240 3287 	movw	r2, #903	; 0x387
 801b92c:	490e      	ldr	r1, [pc, #56]	; (801b968 <mem_malloc+0x208>)
 801b92e:	480a      	ldr	r0, [pc, #40]	; (801b958 <mem_malloc+0x1f8>)
 801b930:	f00a fed0 	bl	80266d4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b934:	4b03      	ldr	r3, [pc, #12]	; (801b944 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 801b936:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b938:	6818      	ldr	r0, [r3, #0]
 801b93a:	e765      	b.n	801b808 <mem_malloc+0xa8>
 801b93c:	4e03      	ldr	r6, [pc, #12]	; (801b94c <mem_malloc+0x1ec>)
 801b93e:	e79c      	b.n	801b87a <mem_malloc+0x11a>
 801b940:	2001f320 	.word	0x2001f320
 801b944:	2001f324 	.word	0x2001f324
 801b948:	2001f31c 	.word	0x2001f31c
 801b94c:	2001f328 	.word	0x2001f328
 801b950:	08044b18 	.word	0x08044b18
 801b954:	08044e24 	.word	0x08044e24
 801b958:	0802b3cc 	.word	0x0802b3cc
 801b95c:	08044e54 	.word	0x08044e54
 801b960:	08044df4 	.word	0x08044df4
 801b964:	08044dd8 	.word	0x08044dd8
 801b968:	08044dc4 	.word	0x08044dc4
 801b96c:	2001f318 	.word	0x2001f318

0801b970 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 801b970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b974:	4f12      	ldr	r7, [pc, #72]	; (801b9c0 <memp_overflow_check_all+0x50>)
 801b976:	2308      	movs	r3, #8
 801b978:	4c12      	ldr	r4, [pc, #72]	; (801b9c4 <memp_overflow_check_all+0x54>)
 801b97a:	4d13      	ldr	r5, [pc, #76]	; (801b9c8 <memp_overflow_check_all+0x58>)
 801b97c:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801b980:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801b9cc <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801b984:	3403      	adds	r4, #3
 801b986:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b98a:	b183      	cbz	r3, 801b9ae <memp_overflow_check_all+0x3e>
 801b98c:	88a9      	ldrh	r1, [r5, #4]
 801b98e:	2600      	movs	r6, #0
 801b990:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801b992:	f104 001c 	add.w	r0, r4, #28
 801b996:	682b      	ldr	r3, [r5, #0]
 801b998:	464a      	mov	r2, r9
 801b99a:	f7ff fc8d 	bl	801b2b8 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801b99e:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b9a0:	88e8      	ldrh	r0, [r5, #6]
 801b9a2:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801b9a4:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b9a8:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801b9aa:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b9ac:	d8f0      	bhi.n	801b990 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801b9ae:	45b8      	cmp	r8, r7
 801b9b0:	d004      	beq.n	801b9bc <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801b9b2:	f857 5b04 	ldr.w	r5, [r7], #4
 801b9b6:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b9b8:	88eb      	ldrh	r3, [r5, #6]
 801b9ba:	e7e3      	b.n	801b984 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 801b9bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b9c0:	08045108 	.word	0x08045108
 801b9c4:	20029aa8 	.word	0x20029aa8
 801b9c8:	08045074 	.word	0x08045074
 801b9cc:	08044e78 	.word	0x08044e78

0801b9d0 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801b9d0:	078b      	lsls	r3, r1, #30
{
 801b9d2:	b570      	push	{r4, r5, r6, lr}
 801b9d4:	460c      	mov	r4, r1
 801b9d6:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 801b9d8:	d11f      	bne.n	801ba1a <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801b9da:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801b9dc:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 801b9e0:	6811      	ldr	r1, [r2, #0]
 801b9e2:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 801b9e6:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801b9e8:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801b9ec:	b15a      	cbz	r2, 801ba06 <do_memp_free_pool+0x36>
      if (t == h) {
 801b9ee:	429a      	cmp	r2, r3
 801b9f0:	d105      	bne.n	801b9fe <do_memp_free_pool+0x2e>
 801b9f2:	e009      	b.n	801ba08 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801b9f4:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801b9f6:	b133      	cbz	r3, 801ba06 <do_memp_free_pool+0x36>
 801b9f8:	b12a      	cbz	r2, 801ba06 <do_memp_free_pool+0x36>
      if (t == h) {
 801b9fa:	4293      	cmp	r3, r2
 801b9fc:	d004      	beq.n	801ba08 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801b9fe:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801ba00:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801ba02:	2a00      	cmp	r2, #0
 801ba04:	d1f6      	bne.n	801b9f4 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801ba06:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801ba08:	4b08      	ldr	r3, [pc, #32]	; (801ba2c <do_memp_free_pool+0x5c>)
 801ba0a:	f240 1285 	movw	r2, #389	; 0x185
 801ba0e:	4908      	ldr	r1, [pc, #32]	; (801ba30 <do_memp_free_pool+0x60>)
 801ba10:	4808      	ldr	r0, [pc, #32]	; (801ba34 <do_memp_free_pool+0x64>)
}
 801ba12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801ba16:	f00a be5d 	b.w	80266d4 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801ba1a:	4b04      	ldr	r3, [pc, #16]	; (801ba2c <do_memp_free_pool+0x5c>)
 801ba1c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801ba20:	4905      	ldr	r1, [pc, #20]	; (801ba38 <do_memp_free_pool+0x68>)
 801ba22:	4804      	ldr	r0, [pc, #16]	; (801ba34 <do_memp_free_pool+0x64>)
 801ba24:	f00a fe56 	bl	80266d4 <iprintf>
 801ba28:	e7d7      	b.n	801b9da <do_memp_free_pool+0xa>
 801ba2a:	bf00      	nop
 801ba2c:	08044e80 	.word	0x08044e80
 801ba30:	08044ed0 	.word	0x08044ed0
 801ba34:	0802b3cc 	.word	0x0802b3cc
 801ba38:	08044eb0 	.word	0x08044eb0

0801ba3c <memp_init_pool>:
{
 801ba3c:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 801ba3e:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 801ba40:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 801ba42:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 801ba46:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801ba48:	b1b1      	cbz	r1, 801ba78 <memp_init_pool+0x3c>
 801ba4a:	3403      	adds	r4, #3
 801ba4c:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801ba4e:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 801ba50:	4616      	mov	r6, r2
 801ba52:	f024 0403 	bic.w	r4, r4, #3
 801ba56:	e001      	b.n	801ba5c <memp_init_pool+0x20>
    memp->next = *desc->tab;
 801ba58:	68eb      	ldr	r3, [r5, #12]
 801ba5a:	681a      	ldr	r2, [r3, #0]
 801ba5c:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801ba5e:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 801ba62:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801ba64:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801ba66:	f7ff fc73 	bl	801b350 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801ba6a:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 801ba6c:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 801ba6e:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 801ba72:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801ba74:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 801ba76:	dcef      	bgt.n	801ba58 <memp_init_pool+0x1c>
}
 801ba78:	bd70      	pop	{r4, r5, r6, pc}
 801ba7a:	bf00      	nop

0801ba7c <memp_init>:
{
 801ba7c:	b538      	push	{r3, r4, r5, lr}
 801ba7e:	4c07      	ldr	r4, [pc, #28]	; (801ba9c <memp_init+0x20>)
 801ba80:	4807      	ldr	r0, [pc, #28]	; (801baa0 <memp_init+0x24>)
 801ba82:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 801ba86:	e001      	b.n	801ba8c <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 801ba88:	f854 0b04 	ldr.w	r0, [r4], #4
 801ba8c:	f7ff ffd6 	bl	801ba3c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801ba90:	42ac      	cmp	r4, r5
 801ba92:	d1f9      	bne.n	801ba88 <memp_init+0xc>
}
 801ba94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 801ba98:	f7ff bf6a 	b.w	801b970 <memp_overflow_check_all>
 801ba9c:	08045108 	.word	0x08045108
 801baa0:	08045074 	.word	0x08045074

0801baa4 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801baa4:	280f      	cmp	r0, #15
{
 801baa6:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801baa8:	d81d      	bhi.n	801bae6 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 801baaa:	4604      	mov	r4, r0
 801baac:	460e      	mov	r6, r1
 801baae:	4615      	mov	r5, r2
 801bab0:	f7ff ff5e 	bl	801b970 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801bab4:	4b11      	ldr	r3, [pc, #68]	; (801bafc <memp_malloc_fn+0x58>)
 801bab6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801baba:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 801babc:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 801babe:	b144      	cbz	r4, 801bad2 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 801bac0:	6822      	ldr	r2, [r4, #0]
 801bac2:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 801bac4:	2300      	movs	r3, #0
 801bac6:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bac8:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 801baca:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bace:	d102      	bne.n	801bad6 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 801bad0:	341c      	adds	r4, #28
}
 801bad2:	4620      	mov	r0, r4
 801bad4:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bad6:	4b0a      	ldr	r3, [pc, #40]	; (801bb00 <memp_malloc_fn+0x5c>)
 801bad8:	f44f 728c 	mov.w	r2, #280	; 0x118
 801badc:	4909      	ldr	r1, [pc, #36]	; (801bb04 <memp_malloc_fn+0x60>)
 801bade:	480a      	ldr	r0, [pc, #40]	; (801bb08 <memp_malloc_fn+0x64>)
 801bae0:	f00a fdf8 	bl	80266d4 <iprintf>
 801bae4:	e7f4      	b.n	801bad0 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801bae6:	2400      	movs	r4, #0
 801bae8:	4b05      	ldr	r3, [pc, #20]	; (801bb00 <memp_malloc_fn+0x5c>)
 801baea:	f240 1257 	movw	r2, #343	; 0x157
 801baee:	4907      	ldr	r1, [pc, #28]	; (801bb0c <memp_malloc_fn+0x68>)
 801baf0:	4805      	ldr	r0, [pc, #20]	; (801bb08 <memp_malloc_fn+0x64>)
 801baf2:	f00a fdef 	bl	80266d4 <iprintf>
}
 801baf6:	4620      	mov	r0, r4
 801baf8:	bd70      	pop	{r4, r5, r6, pc}
 801bafa:	bf00      	nop
 801bafc:	08045104 	.word	0x08045104
 801bb00:	08044e80 	.word	0x08044e80
 801bb04:	08044ef0 	.word	0x08044ef0
 801bb08:	0802b3cc 	.word	0x0802b3cc
 801bb0c:	08044f14 	.word	0x08044f14

0801bb10 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801bb10:	280f      	cmp	r0, #15
 801bb12:	d80e      	bhi.n	801bb32 <memp_free+0x22>
{
 801bb14:	b570      	push	{r4, r5, r6, lr}
 801bb16:	460d      	mov	r5, r1

  if (mem == NULL) {
 801bb18:	b151      	cbz	r1, 801bb30 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801bb1a:	4604      	mov	r4, r0
 801bb1c:	f7ff ff28 	bl	801b970 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801bb20:	4b07      	ldr	r3, [pc, #28]	; (801bb40 <memp_free+0x30>)
 801bb22:	4629      	mov	r1, r5
 801bb24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801bb28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 801bb2c:	f7ff bf50 	b.w	801b9d0 <do_memp_free_pool>
}
 801bb30:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801bb32:	4b04      	ldr	r3, [pc, #16]	; (801bb44 <memp_free+0x34>)
 801bb34:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801bb38:	4903      	ldr	r1, [pc, #12]	; (801bb48 <memp_free+0x38>)
 801bb3a:	4804      	ldr	r0, [pc, #16]	; (801bb4c <memp_free+0x3c>)
 801bb3c:	f00a bdca 	b.w	80266d4 <iprintf>
 801bb40:	08045104 	.word	0x08045104
 801bb44:	08044e80 	.word	0x08044e80
 801bb48:	08044f34 	.word	0x08044f34
 801bb4c:	0802b3cc 	.word	0x0802b3cc

0801bb50 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801bb50:	f06f 000b 	mvn.w	r0, #11
 801bb54:	4770      	bx	lr
 801bb56:	bf00      	nop

0801bb58 <netif_issue_reports>:
{
 801bb58:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801bb5a:	4604      	mov	r4, r0
 801bb5c:	b150      	cbz	r0, 801bb74 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801bb5e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801bb62:	f003 0205 	and.w	r2, r3, #5
 801bb66:	2a05      	cmp	r2, #5
 801bb68:	d103      	bne.n	801bb72 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801bb6a:	6862      	ldr	r2, [r4, #4]
 801bb6c:	b10a      	cbz	r2, 801bb72 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801bb6e:	071b      	lsls	r3, r3, #28
 801bb70:	d408      	bmi.n	801bb84 <netif_issue_reports+0x2c>
}
 801bb72:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801bb74:	4b06      	ldr	r3, [pc, #24]	; (801bb90 <netif_issue_reports+0x38>)
 801bb76:	f240 326d 	movw	r2, #877	; 0x36d
 801bb7a:	4906      	ldr	r1, [pc, #24]	; (801bb94 <netif_issue_reports+0x3c>)
 801bb7c:	4806      	ldr	r0, [pc, #24]	; (801bb98 <netif_issue_reports+0x40>)
 801bb7e:	f00a fda9 	bl	80266d4 <iprintf>
 801bb82:	e7ec      	b.n	801bb5e <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 801bb84:	1d21      	adds	r1, r4, #4
 801bb86:	4620      	mov	r0, r4
}
 801bb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 801bb8c:	f007 bfac 	b.w	8023ae8 <etharp_request>
 801bb90:	08045144 	.word	0x08045144
 801bb94:	08045178 	.word	0x08045178
 801bb98:	0802b3cc 	.word	0x0802b3cc

0801bb9c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801bb9c:	b570      	push	{r4, r5, r6, lr}
 801bb9e:	4605      	mov	r5, r0
 801bba0:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bba2:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801bba4:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bba6:	b301      	cbz	r1, 801bbea <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801bba8:	686b      	ldr	r3, [r5, #4]
 801bbaa:	6822      	ldr	r2, [r4, #0]
 801bbac:	429a      	cmp	r2, r3
 801bbae:	d101      	bne.n	801bbb4 <netif_do_set_ipaddr.isra.0+0x18>
}
 801bbb0:	b002      	add	sp, #8
 801bbb2:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801bbb4:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801bbb6:	4630      	mov	r0, r6
 801bbb8:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 801bbba:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801bbbc:	f002 fa5a 	bl	801e074 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801bbc0:	a901      	add	r1, sp, #4
 801bbc2:	4630      	mov	r0, r6
 801bbc4:	f005 fde4 	bl	8021790 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801bbc8:	a901      	add	r1, sp, #4
 801bbca:	4630      	mov	r0, r6
 801bbcc:	f000 ff6c 	bl	801caa8 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801bbd0:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801bbd2:	2101      	movs	r1, #1
 801bbd4:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801bbd6:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801bbd8:	f7ff ffbe 	bl	801bb58 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801bbdc:	69eb      	ldr	r3, [r5, #28]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d0e6      	beq.n	801bbb0 <netif_do_set_ipaddr.isra.0+0x14>
 801bbe2:	4628      	mov	r0, r5
 801bbe4:	4798      	blx	r3
}
 801bbe6:	b002      	add	sp, #8
 801bbe8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bbea:	4b04      	ldr	r3, [pc, #16]	; (801bbfc <netif_do_set_ipaddr.isra.0+0x60>)
 801bbec:	f240 12cb 	movw	r2, #459	; 0x1cb
 801bbf0:	4903      	ldr	r1, [pc, #12]	; (801bc00 <netif_do_set_ipaddr.isra.0+0x64>)
 801bbf2:	4804      	ldr	r0, [pc, #16]	; (801bc04 <netif_do_set_ipaddr.isra.0+0x68>)
 801bbf4:	f00a fd6e 	bl	80266d4 <iprintf>
 801bbf8:	e7d6      	b.n	801bba8 <netif_do_set_ipaddr.isra.0+0xc>
 801bbfa:	bf00      	nop
 801bbfc:	08045144 	.word	0x08045144
 801bc00:	0804519c 	.word	0x0804519c
 801bc04:	0802b3cc 	.word	0x0802b3cc

0801bc08 <netif_init>:
}
 801bc08:	4770      	bx	lr
 801bc0a:	bf00      	nop

0801bc0c <netif_set_addr>:
{
 801bc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801bc0e:	2900      	cmp	r1, #0
{
 801bc10:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 801bc12:	4b16      	ldr	r3, [pc, #88]	; (801bc6c <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 801bc14:	460c      	mov	r4, r1
{
 801bc16:	b083      	sub	sp, #12
 801bc18:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801bc1a:	bf14      	ite	ne
 801bc1c:	460c      	movne	r4, r1
 801bc1e:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 801bc20:	b30a      	cbz	r2, 801bc66 <netif_set_addr+0x5a>
 801bc22:	4616      	mov	r6, r2
  if (gw == NULL) {
 801bc24:	b1ef      	cbz	r7, 801bc62 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 801bc26:	6823      	ldr	r3, [r4, #0]
 801bc28:	b993      	cbnz	r3, 801bc50 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801bc2a:	4621      	mov	r1, r4
 801bc2c:	aa01      	add	r2, sp, #4
 801bc2e:	4628      	mov	r0, r5
 801bc30:	f7ff ffb4 	bl	801bb9c <netif_do_set_ipaddr.isra.0>
 801bc34:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801bc36:	6833      	ldr	r3, [r6, #0]
 801bc38:	68aa      	ldr	r2, [r5, #8]
 801bc3a:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801bc3c:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801bc3e:	bf18      	it	ne
 801bc40:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801bc42:	683b      	ldr	r3, [r7, #0]
 801bc44:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801bc46:	bf18      	it	ne
 801bc48:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801bc4a:	b119      	cbz	r1, 801bc54 <netif_set_addr+0x48>
}
 801bc4c:	b003      	add	sp, #12
 801bc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 801bc50:	2100      	movs	r1, #0
 801bc52:	e7f0      	b.n	801bc36 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801bc54:	aa01      	add	r2, sp, #4
 801bc56:	4621      	mov	r1, r4
 801bc58:	4628      	mov	r0, r5
 801bc5a:	f7ff ff9f 	bl	801bb9c <netif_do_set_ipaddr.isra.0>
}
 801bc5e:	b003      	add	sp, #12
 801bc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801bc62:	4f02      	ldr	r7, [pc, #8]	; (801bc6c <netif_set_addr+0x60>)
 801bc64:	e7df      	b.n	801bc26 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801bc66:	461e      	mov	r6, r3
 801bc68:	e7dc      	b.n	801bc24 <netif_set_addr+0x18>
 801bc6a:	bf00      	nop
 801bc6c:	0804726c 	.word	0x0804726c

0801bc70 <netif_add>:
{
 801bc70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801bc76:	4606      	mov	r6, r0
 801bc78:	2800      	cmp	r0, #0
 801bc7a:	f000 8081 	beq.w	801bd80 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801bc7e:	2d00      	cmp	r5, #0
 801bc80:	f000 8087 	beq.w	801bd92 <netif_add+0x122>
  if (ipaddr == NULL) {
 801bc84:	2900      	cmp	r1, #0
 801bc86:	d06f      	beq.n	801bd68 <netif_add+0xf8>
  if (netmask == NULL) {
 801bc88:	2a00      	cmp	r2, #0
 801bc8a:	d068      	beq.n	801bd5e <netif_add+0xee>
  if (gw == NULL) {
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d069      	beq.n	801bd64 <netif_add+0xf4>
  netif->state = state;
 801bc90:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801bc92:	2400      	movs	r4, #0
  netif->num = netif_num;
 801bc94:	f8df a128 	ldr.w	sl, [pc, #296]	; 801bdc0 <netif_add+0x150>
  netif->state = state;
 801bc98:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 801bc9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 801bc9c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 801bc9e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 801bca0:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801bca4:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801bca6:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 801bcaa:	483e      	ldr	r0, [pc, #248]	; (801bda4 <netif_add+0x134>)
  netif->flags = 0;
 801bcac:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 801bcb0:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801bcb2:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801bcb4:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801bcb6:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 801bcba:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801bcbe:	f7ff ffa5 	bl	801bc0c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801bcc2:	4630      	mov	r0, r6
 801bcc4:	47a8      	blx	r5
 801bcc6:	2800      	cmp	r0, #0
 801bcc8:	d157      	bne.n	801bd7a <netif_add+0x10a>
      if (netif->num == 255) {
 801bcca:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801bcce:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801bdc4 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bcd2:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801bdb4 <netif_add+0x144>
 801bcd6:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801bdc8 <netif_add+0x158>
 801bcda:	4f33      	ldr	r7, [pc, #204]	; (801bda8 <netif_add+0x138>)
      if (netif->num == 255) {
 801bcdc:	2aff      	cmp	r2, #255	; 0xff
 801bcde:	d102      	bne.n	801bce6 <netif_add+0x76>
        netif->num = 0;
 801bce0:	2300      	movs	r3, #0
 801bce2:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bce6:	f8d8 4000 	ldr.w	r4, [r8]
 801bcea:	2c00      	cmp	r4, #0
 801bcec:	d042      	beq.n	801bd74 <netif_add+0x104>
      num_netifs = 0;
 801bcee:	2500      	movs	r5, #0
 801bcf0:	e007      	b.n	801bd02 <netif_add+0x92>
        if (netif2->num == netif->num) {
 801bcf2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801bcf6:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801bcfa:	429a      	cmp	r2, r3
 801bcfc:	d014      	beq.n	801bd28 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bcfe:	6824      	ldr	r4, [r4, #0]
 801bd00:	b1fc      	cbz	r4, 801bd42 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bd02:	42a6      	cmp	r6, r4
        num_netifs++;
 801bd04:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bd08:	d013      	beq.n	801bd32 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801bd0a:	2dff      	cmp	r5, #255	; 0xff
 801bd0c:	ddf1      	ble.n	801bcf2 <netif_add+0x82>
 801bd0e:	465b      	mov	r3, fp
 801bd10:	f240 128d 	movw	r2, #397	; 0x18d
 801bd14:	4925      	ldr	r1, [pc, #148]	; (801bdac <netif_add+0x13c>)
 801bd16:	4638      	mov	r0, r7
 801bd18:	f00a fcdc 	bl	80266d4 <iprintf>
        if (netif2->num == netif->num) {
 801bd1c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801bd20:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801bd24:	429a      	cmp	r2, r3
 801bd26:	d1ea      	bne.n	801bcfe <netif_add+0x8e>
          netif->num++;
 801bd28:	3201      	adds	r2, #1
 801bd2a:	b2d2      	uxtb	r2, r2
 801bd2c:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 801bd30:	e7d4      	b.n	801bcdc <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bd32:	465b      	mov	r3, fp
 801bd34:	f240 128b 	movw	r2, #395	; 0x18b
 801bd38:	4649      	mov	r1, r9
 801bd3a:	4638      	mov	r0, r7
 801bd3c:	f00a fcca 	bl	80266d4 <iprintf>
 801bd40:	e7e3      	b.n	801bd0a <netif_add+0x9a>
  netif->next = netif_list;
 801bd42:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801bd46:	2bfe      	cmp	r3, #254	; 0xfe
 801bd48:	d012      	beq.n	801bd70 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801bd4a:	3301      	adds	r3, #1
 801bd4c:	b2db      	uxtb	r3, r3
  return netif;
 801bd4e:	4630      	mov	r0, r6
  netif->next = netif_list;
 801bd50:	6034      	str	r4, [r6, #0]
 801bd52:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801bd56:	f8c8 6000 	str.w	r6, [r8]
}
 801bd5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801bd5e:	4a14      	ldr	r2, [pc, #80]	; (801bdb0 <netif_add+0x140>)
  if (gw == NULL) {
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d195      	bne.n	801bc90 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801bd64:	4b12      	ldr	r3, [pc, #72]	; (801bdb0 <netif_add+0x140>)
 801bd66:	e793      	b.n	801bc90 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801bd68:	4911      	ldr	r1, [pc, #68]	; (801bdb0 <netif_add+0x140>)
  if (netmask == NULL) {
 801bd6a:	2a00      	cmp	r2, #0
 801bd6c:	d18e      	bne.n	801bc8c <netif_add+0x1c>
 801bd6e:	e7f6      	b.n	801bd5e <netif_add+0xee>
    netif_num = 0;
 801bd70:	2300      	movs	r3, #0
 801bd72:	e7ec      	b.n	801bd4e <netif_add+0xde>
  if (netif->num == 254) {
 801bd74:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801bd78:	e7e5      	b.n	801bd46 <netif_add+0xd6>
    return NULL;
 801bd7a:	4620      	mov	r0, r4
}
 801bd7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801bd80:	4b0c      	ldr	r3, [pc, #48]	; (801bdb4 <netif_add+0x144>)
 801bd82:	f240 1227 	movw	r2, #295	; 0x127
 801bd86:	490c      	ldr	r1, [pc, #48]	; (801bdb8 <netif_add+0x148>)
 801bd88:	4807      	ldr	r0, [pc, #28]	; (801bda8 <netif_add+0x138>)
 801bd8a:	f00a fca3 	bl	80266d4 <iprintf>
 801bd8e:	4630      	mov	r0, r6
 801bd90:	e7e3      	b.n	801bd5a <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801bd92:	4b08      	ldr	r3, [pc, #32]	; (801bdb4 <netif_add+0x144>)
 801bd94:	f44f 7294 	mov.w	r2, #296	; 0x128
 801bd98:	4908      	ldr	r1, [pc, #32]	; (801bdbc <netif_add+0x14c>)
 801bd9a:	4803      	ldr	r0, [pc, #12]	; (801bda8 <netif_add+0x138>)
 801bd9c:	f00a fc9a 	bl	80266d4 <iprintf>
 801bda0:	4628      	mov	r0, r5
 801bda2:	e7da      	b.n	801bd5a <netif_add+0xea>
 801bda4:	0801bb51 	.word	0x0801bb51
 801bda8:	0802b3cc 	.word	0x0802b3cc
 801bdac:	08045200 	.word	0x08045200
 801bdb0:	0804726c 	.word	0x0804726c
 801bdb4:	08045144 	.word	0x08045144
 801bdb8:	080451ac 	.word	0x080451ac
 801bdbc:	080451c8 	.word	0x080451c8
 801bdc0:	2002e494 	.word	0x2002e494
 801bdc4:	2002e490 	.word	0x2002e490
 801bdc8:	080451ec 	.word	0x080451ec

0801bdcc <netif_set_default>:
  netif_default = netif;
 801bdcc:	4b01      	ldr	r3, [pc, #4]	; (801bdd4 <netif_set_default+0x8>)
 801bdce:	6018      	str	r0, [r3, #0]
}
 801bdd0:	4770      	bx	lr
 801bdd2:	bf00      	nop
 801bdd4:	2002e48c 	.word	0x2002e48c

0801bdd8 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801bdd8:	b198      	cbz	r0, 801be02 <netif_set_up+0x2a>
{
 801bdda:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801bddc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801bde0:	4604      	mov	r4, r0
 801bde2:	07da      	lsls	r2, r3, #31
 801bde4:	d40c      	bmi.n	801be00 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801bde6:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 801bdea:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 801bdec:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 801bdf0:	b102      	cbz	r2, 801bdf4 <netif_set_up+0x1c>
 801bdf2:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801bdf4:	4620      	mov	r0, r4
 801bdf6:	2103      	movs	r1, #3
}
 801bdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801bdfc:	f7ff beac 	b.w	801bb58 <netif_issue_reports>
}
 801be00:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801be02:	4b03      	ldr	r3, [pc, #12]	; (801be10 <netif_set_up+0x38>)
 801be04:	f44f 7254 	mov.w	r2, #848	; 0x350
 801be08:	4902      	ldr	r1, [pc, #8]	; (801be14 <netif_set_up+0x3c>)
 801be0a:	4803      	ldr	r0, [pc, #12]	; (801be18 <netif_set_up+0x40>)
 801be0c:	f00a bc62 	b.w	80266d4 <iprintf>
 801be10:	08045144 	.word	0x08045144
 801be14:	08045230 	.word	0x08045230
 801be18:	0802b3cc 	.word	0x0802b3cc

0801be1c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801be1c:	b1a8      	cbz	r0, 801be4a <netif_set_down+0x2e>
{
 801be1e:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801be20:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801be24:	4604      	mov	r4, r0
 801be26:	07da      	lsls	r2, r3, #31
 801be28:	d50b      	bpl.n	801be42 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801be2a:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801be2e:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801be30:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801be34:	d406      	bmi.n	801be44 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801be36:	69e3      	ldr	r3, [r4, #28]
 801be38:	b11b      	cbz	r3, 801be42 <netif_set_down+0x26>
 801be3a:	4620      	mov	r0, r4
}
 801be3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801be40:	4718      	bx	r3
}
 801be42:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801be44:	f007 fbc8 	bl	80235d8 <etharp_cleanup_netif>
 801be48:	e7f5      	b.n	801be36 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801be4a:	4b03      	ldr	r3, [pc, #12]	; (801be58 <netif_set_down+0x3c>)
 801be4c:	f240 329b 	movw	r2, #923	; 0x39b
 801be50:	4902      	ldr	r1, [pc, #8]	; (801be5c <netif_set_down+0x40>)
 801be52:	4803      	ldr	r0, [pc, #12]	; (801be60 <netif_set_down+0x44>)
 801be54:	f00a bc3e 	b.w	80266d4 <iprintf>
 801be58:	08045144 	.word	0x08045144
 801be5c:	0804524c 	.word	0x0804524c
 801be60:	0802b3cc 	.word	0x0802b3cc

0801be64 <netif_set_status_callback>:
  if (netif) {
 801be64:	b100      	cbz	r0, 801be68 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801be66:	61c1      	str	r1, [r0, #28]
}
 801be68:	4770      	bx	lr
 801be6a:	bf00      	nop

0801be6c <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801be6c:	b1b8      	cbz	r0, 801be9e <netif_set_link_up+0x32>
{
 801be6e:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801be70:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801be74:	4604      	mov	r4, r0
 801be76:	075a      	lsls	r2, r3, #29
 801be78:	d500      	bpl.n	801be7c <netif_set_link_up+0x10>
}
 801be7a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801be7c:	f043 0304 	orr.w	r3, r3, #4
 801be80:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801be84:	f006 fd96 	bl	80229b4 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801be88:	2103      	movs	r1, #3
 801be8a:	4620      	mov	r0, r4
 801be8c:	f7ff fe64 	bl	801bb58 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 801be90:	6a23      	ldr	r3, [r4, #32]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d0f1      	beq.n	801be7a <netif_set_link_up+0xe>
 801be96:	4620      	mov	r0, r4
}
 801be98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801be9c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801be9e:	4b03      	ldr	r3, [pc, #12]	; (801beac <netif_set_link_up+0x40>)
 801bea0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801bea4:	4902      	ldr	r1, [pc, #8]	; (801beb0 <netif_set_link_up+0x44>)
 801bea6:	4803      	ldr	r0, [pc, #12]	; (801beb4 <netif_set_link_up+0x48>)
 801bea8:	f00a bc14 	b.w	80266d4 <iprintf>
 801beac:	08045144 	.word	0x08045144
 801beb0:	0804526c 	.word	0x0804526c
 801beb4:	0802b3cc 	.word	0x0802b3cc

0801beb8 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801beb8:	b158      	cbz	r0, 801bed2 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801beba:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801bebe:	0751      	lsls	r1, r2, #29
 801bec0:	d506      	bpl.n	801bed0 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bec2:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801bec6:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bec8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801becc:	b101      	cbz	r1, 801bed0 <netif_set_link_down+0x18>
 801bece:	4708      	bx	r1
}
 801bed0:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801bed2:	4b03      	ldr	r3, [pc, #12]	; (801bee0 <netif_set_link_down+0x28>)
 801bed4:	f240 4206 	movw	r2, #1030	; 0x406
 801bed8:	4902      	ldr	r1, [pc, #8]	; (801bee4 <netif_set_link_down+0x2c>)
 801beda:	4803      	ldr	r0, [pc, #12]	; (801bee8 <netif_set_link_down+0x30>)
 801bedc:	f00a bbfa 	b.w	80266d4 <iprintf>
 801bee0:	08045144 	.word	0x08045144
 801bee4:	08045290 	.word	0x08045290
 801bee8:	0802b3cc 	.word	0x0802b3cc

0801beec <netif_set_link_callback>:
  if (netif) {
 801beec:	b100      	cbz	r0, 801bef0 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 801beee:	6201      	str	r1, [r0, #32]
}
 801bef0:	4770      	bx	lr
 801bef2:	bf00      	nop

0801bef4 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801bef4:	4602      	mov	r2, r0
 801bef6:	b158      	cbz	r0, 801bf10 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801bef8:	4b06      	ldr	r3, [pc, #24]	; (801bf14 <netif_get_by_index+0x20>)
 801befa:	6818      	ldr	r0, [r3, #0]
 801befc:	b910      	cbnz	r0, 801bf04 <netif_get_by_index+0x10>
 801befe:	e007      	b.n	801bf10 <netif_get_by_index+0x1c>
 801bf00:	6800      	ldr	r0, [r0, #0]
 801bf02:	b130      	cbz	r0, 801bf12 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 801bf04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801bf08:	3301      	adds	r3, #1
 801bf0a:	b2db      	uxtb	r3, r3
 801bf0c:	4293      	cmp	r3, r2
 801bf0e:	d1f7      	bne.n	801bf00 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 801bf10:	4770      	bx	lr
 801bf12:	4770      	bx	lr
 801bf14:	2002e490 	.word	0x2002e490

0801bf18 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bf18:	4907      	ldr	r1, [pc, #28]	; (801bf38 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801bf1a:	2200      	movs	r2, #0
 801bf1c:	4b07      	ldr	r3, [pc, #28]	; (801bf3c <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bf1e:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801bf20:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bf22:	b910      	cbnz	r0, 801bf2a <pbuf_free_ooseq_callback+0x12>
 801bf24:	e006      	b.n	801bf34 <pbuf_free_ooseq_callback+0x1c>
 801bf26:	68c0      	ldr	r0, [r0, #12]
 801bf28:	b120      	cbz	r0, 801bf34 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801bf2a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d0fa      	beq.n	801bf26 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801bf30:	f002 b8ca 	b.w	801e0c8 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801bf34:	4770      	bx	lr
 801bf36:	bf00      	nop
 801bf38:	2002e49c 	.word	0x2002e49c
 801bf3c:	2002e495 	.word	0x2002e495

0801bf40 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 801bf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801bf44:	4604      	mov	r4, r0
 801bf46:	2800      	cmp	r0, #0
 801bf48:	d052      	beq.n	801bff0 <pbuf_free.part.0+0xb0>
  count = 0;
 801bf4a:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bf4c:	4f29      	ldr	r7, [pc, #164]	; (801bff4 <pbuf_free.part.0+0xb4>)
 801bf4e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801c004 <pbuf_free.part.0+0xc4>
 801bf52:	4e29      	ldr	r6, [pc, #164]	; (801bff8 <pbuf_free.part.0+0xb8>)
 801bf54:	e00a      	b.n	801bf6c <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801bf56:	6923      	ldr	r3, [r4, #16]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d03b      	beq.n	801bfd4 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 801bf5c:	4620      	mov	r0, r4
 801bf5e:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801bf60:	3501      	adds	r5, #1
 801bf62:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801bf64:	f1b9 0f00 	cmp.w	r9, #0
 801bf68:	d01b      	beq.n	801bfa2 <pbuf_free.part.0+0x62>
 801bf6a:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bf6c:	7ba3      	ldrb	r3, [r4, #14]
 801bf6e:	b1db      	cbz	r3, 801bfa8 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 801bf70:	3b01      	subs	r3, #1
 801bf72:	b2db      	uxtb	r3, r3
 801bf74:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801bf76:	b9a3      	cbnz	r3, 801bfa2 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801bf78:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801bf7a:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801bf7e:	079b      	lsls	r3, r3, #30
 801bf80:	d4e9      	bmi.n	801bf56 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801bf82:	7b23      	ldrb	r3, [r4, #12]
 801bf84:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801bf88:	2b02      	cmp	r3, #2
 801bf8a:	d01e      	beq.n	801bfca <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801bf8c:	2b01      	cmp	r3, #1
 801bf8e:	d02a      	beq.n	801bfe6 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801bf90:	b99b      	cbnz	r3, 801bfba <pbuf_free.part.0+0x7a>
      count++;
 801bf92:	3501      	adds	r5, #1
          mem_free(p);
 801bf94:	4620      	mov	r0, r4
 801bf96:	f7ff fa27 	bl	801b3e8 <mem_free>
      count++;
 801bf9a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801bf9c:	f1b9 0f00 	cmp.w	r9, #0
 801bfa0:	d1e3      	bne.n	801bf6a <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801bfa2:	4628      	mov	r0, r5
 801bfa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bfa8:	463b      	mov	r3, r7
 801bfaa:	f240 22f1 	movw	r2, #753	; 0x2f1
 801bfae:	4641      	mov	r1, r8
 801bfb0:	4630      	mov	r0, r6
 801bfb2:	f00a fb8f 	bl	80266d4 <iprintf>
    ref = --(p->ref);
 801bfb6:	7ba3      	ldrb	r3, [r4, #14]
 801bfb8:	e7da      	b.n	801bf70 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801bfba:	463b      	mov	r3, r7
 801bfbc:	f240 320f 	movw	r2, #783	; 0x30f
 801bfc0:	490e      	ldr	r1, [pc, #56]	; (801bffc <pbuf_free.part.0+0xbc>)
 801bfc2:	4630      	mov	r0, r6
 801bfc4:	f00a fb86 	bl	80266d4 <iprintf>
 801bfc8:	e7ca      	b.n	801bf60 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801bfca:	4621      	mov	r1, r4
 801bfcc:	200f      	movs	r0, #15
 801bfce:	f7ff fd9f 	bl	801bb10 <memp_free>
 801bfd2:	e7c5      	b.n	801bf60 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801bfd4:	463b      	mov	r3, r7
 801bfd6:	f240 22ff 	movw	r2, #767	; 0x2ff
 801bfda:	4909      	ldr	r1, [pc, #36]	; (801c000 <pbuf_free.part.0+0xc0>)
 801bfdc:	4630      	mov	r0, r6
 801bfde:	f00a fb79 	bl	80266d4 <iprintf>
        pc->custom_free_function(p);
 801bfe2:	6923      	ldr	r3, [r4, #16]
 801bfe4:	e7ba      	b.n	801bf5c <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 801bfe6:	4621      	mov	r1, r4
 801bfe8:	200e      	movs	r0, #14
 801bfea:	f7ff fd91 	bl	801bb10 <memp_free>
 801bfee:	e7b7      	b.n	801bf60 <pbuf_free.part.0+0x20>
  count = 0;
 801bff0:	4605      	mov	r5, r0
 801bff2:	e7d6      	b.n	801bfa2 <pbuf_free.part.0+0x62>
 801bff4:	080452b4 	.word	0x080452b4
 801bff8:	0802b3cc 	.word	0x0802b3cc
 801bffc:	08045320 	.word	0x08045320
 801c000:	080452fc 	.word	0x080452fc
 801c004:	080452e4 	.word	0x080452e4

0801c008 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801c008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 801c00c:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c00e:	f8df a124 	ldr.w	sl, [pc, #292]	; 801c134 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801c012:	4605      	mov	r5, r0
 801c014:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 801c016:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c018:	8944      	ldrh	r4, [r0, #10]
 801c01a:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c01c:	f8df b128 	ldr.w	fp, [pc, #296]	; 801c148 <pbuf_copy.part.0+0x140>
 801c020:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801c13c <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c024:	1be4      	subs	r4, r4, r7
 801c026:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801c028:	6868      	ldr	r0, [r5, #4]
 801c02a:	4294      	cmp	r4, r2
 801c02c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c030:	4438      	add	r0, r7
 801c032:	bf28      	it	cs
 801c034:	4614      	movcs	r4, r2
 801c036:	4431      	add	r1, r6
 801c038:	4622      	mov	r2, r4
    offset_to += len;
 801c03a:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801c03c:	f009 fb84 	bl	8025748 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c040:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801c042:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c044:	429f      	cmp	r7, r3
 801c046:	d837      	bhi.n	801c0b8 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801c048:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c04c:	4296      	cmp	r6, r2
 801c04e:	d829      	bhi.n	801c0a4 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 801c050:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 801c052:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 801c054:	d317      	bcc.n	801c086 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 801c056:	429f      	cmp	r7, r3
      p_from = p_from->next;
 801c058:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 801c05c:	d04b      	beq.n	801c0f6 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c05e:	f1b8 0f00 	cmp.w	r8, #0
 801c062:	d144      	bne.n	801c0ee <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c064:	892a      	ldrh	r2, [r5, #8]
 801c066:	896b      	ldrh	r3, [r5, #10]
 801c068:	429a      	cmp	r2, r3
 801c06a:	d14c      	bne.n	801c106 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c06c:	6828      	ldr	r0, [r5, #0]
 801c06e:	b140      	cbz	r0, 801c082 <pbuf_copy.part.0+0x7a>
 801c070:	4b30      	ldr	r3, [pc, #192]	; (801c134 <pbuf_copy.part.0+0x12c>)
 801c072:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801c076:	4930      	ldr	r1, [pc, #192]	; (801c138 <pbuf_copy.part.0+0x130>)
 801c078:	4830      	ldr	r0, [pc, #192]	; (801c13c <pbuf_copy.part.0+0x134>)
 801c07a:	f00a fb2b 	bl	80266d4 <iprintf>
 801c07e:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 801c082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 801c086:	429f      	cmp	r7, r3
 801c088:	d040      	beq.n	801c10c <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c08a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801c08e:	4293      	cmp	r3, r2
 801c090:	d01a      	beq.n	801c0c8 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c092:	896c      	ldrh	r4, [r5, #10]
 801c094:	2d00      	cmp	r5, #0
 801c096:	d0c5      	beq.n	801c024 <pbuf_copy.part.0+0x1c>
 801c098:	892b      	ldrh	r3, [r5, #8]
 801c09a:	42a3      	cmp	r3, r4
 801c09c:	d045      	beq.n	801c12a <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c09e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c0a2:	e7bf      	b.n	801c024 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801c0a4:	f240 32da 	movw	r2, #986	; 0x3da
 801c0a8:	4653      	mov	r3, sl
 801c0aa:	4925      	ldr	r1, [pc, #148]	; (801c140 <pbuf_copy.part.0+0x138>)
 801c0ac:	4648      	mov	r0, r9
 801c0ae:	f00a fb11 	bl	80266d4 <iprintf>
    if (offset_from >= p_from->len) {
 801c0b2:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c0b6:	e7cb      	b.n	801c050 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c0b8:	4653      	mov	r3, sl
 801c0ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 801c0be:	4659      	mov	r1, fp
 801c0c0:	4648      	mov	r0, r9
 801c0c2:	f00a fb07 	bl	80266d4 <iprintf>
 801c0c6:	e7bf      	b.n	801c048 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c0c8:	f8d8 3000 	ldr.w	r3, [r8]
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d0e0      	beq.n	801c092 <pbuf_copy.part.0+0x8a>
 801c0d0:	4b18      	ldr	r3, [pc, #96]	; (801c134 <pbuf_copy.part.0+0x12c>)
 801c0d2:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801c0d6:	4918      	ldr	r1, [pc, #96]	; (801c138 <pbuf_copy.part.0+0x130>)
 801c0d8:	4818      	ldr	r0, [pc, #96]	; (801c13c <pbuf_copy.part.0+0x134>)
 801c0da:	f00a fafb 	bl	80266d4 <iprintf>
 801c0de:	f06f 0005 	mvn.w	r0, #5
}
 801c0e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c0e6:	f1b8 0f00 	cmp.w	r8, #0
 801c0ea:	d00a      	beq.n	801c102 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 801c0ec:	2700      	movs	r7, #0
 801c0ee:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c0f0:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c0f4:	e7c9      	b.n	801c08a <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 801c0f6:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c0f8:	2d00      	cmp	r5, #0
 801c0fa:	d1f4      	bne.n	801c0e6 <pbuf_copy.part.0+0xde>
 801c0fc:	f1b8 0f00 	cmp.w	r8, #0
 801c100:	d108      	bne.n	801c114 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c102:	2d00      	cmp	r5, #0
 801c104:	d1ae      	bne.n	801c064 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 801c106:	2000      	movs	r0, #0
}
 801c108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801c10c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c10e:	b10d      	cbz	r5, 801c114 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 801c110:	2700      	movs	r7, #0
 801c112:	e7ed      	b.n	801c0f0 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c114:	4b07      	ldr	r3, [pc, #28]	; (801c134 <pbuf_copy.part.0+0x12c>)
 801c116:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801c11a:	490a      	ldr	r1, [pc, #40]	; (801c144 <pbuf_copy.part.0+0x13c>)
 801c11c:	4807      	ldr	r0, [pc, #28]	; (801c13c <pbuf_copy.part.0+0x134>)
 801c11e:	f00a fad9 	bl	80266d4 <iprintf>
 801c122:	f06f 000f 	mvn.w	r0, #15
}
 801c126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c12a:	682b      	ldr	r3, [r5, #0]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d0b6      	beq.n	801c09e <pbuf_copy.part.0+0x96>
 801c130:	e79e      	b.n	801c070 <pbuf_copy.part.0+0x68>
 801c132:	bf00      	nop
 801c134:	080452b4 	.word	0x080452b4
 801c138:	08045378 	.word	0x08045378
 801c13c:	0802b3cc 	.word	0x0802b3cc
 801c140:	0804534c 	.word	0x0804534c
 801c144:	08045368 	.word	0x08045368
 801c148:	08045334 	.word	0x08045334

0801c14c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c14c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801c150:	2b01      	cmp	r3, #1
{
 801c152:	b570      	push	{r4, r5, r6, lr}
 801c154:	4614      	mov	r4, r2
 801c156:	4606      	mov	r6, r0
 801c158:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c15a:	d110      	bne.n	801c17e <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c15c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801c160:	490b      	ldr	r1, [pc, #44]	; (801c190 <pbuf_alloc_reference+0x44>)
 801c162:	200e      	movs	r0, #14
 801c164:	f7ff fc9e 	bl	801baa4 <memp_malloc_fn>
  if (p == NULL) {
 801c168:	b140      	cbz	r0, 801c17c <pbuf_alloc_reference+0x30>
  p->next = NULL;
 801c16a:	2300      	movs	r3, #0
  p->ref = 1;
 801c16c:	2201      	movs	r2, #1
  p->payload = payload;
 801c16e:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 801c170:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 801c172:	6003      	str	r3, [r0, #0]
  p->len = len;
 801c174:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 801c176:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 801c178:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 801c17a:	81c2      	strh	r2, [r0, #14]
}
 801c17c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c17e:	4b04      	ldr	r3, [pc, #16]	; (801c190 <pbuf_alloc_reference+0x44>)
 801c180:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801c184:	4903      	ldr	r1, [pc, #12]	; (801c194 <pbuf_alloc_reference+0x48>)
 801c186:	4804      	ldr	r0, [pc, #16]	; (801c198 <pbuf_alloc_reference+0x4c>)
 801c188:	f00a faa4 	bl	80266d4 <iprintf>
 801c18c:	e7e6      	b.n	801c15c <pbuf_alloc_reference+0x10>
 801c18e:	bf00      	nop
 801c190:	080452b4 	.word	0x080452b4
 801c194:	080453a4 	.word	0x080453a4
 801c198:	0802b3cc 	.word	0x0802b3cc

0801c19c <pbuf_alloc>:
  switch (type) {
 801c19c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 801c1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1a4:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801c1a6:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801c1aa:	d03d      	beq.n	801c228 <pbuf_alloc+0x8c>
 801c1ac:	d80e      	bhi.n	801c1cc <pbuf_alloc+0x30>
 801c1ae:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 801c1b2:	2c01      	cmp	r4, #1
 801c1b4:	d033      	beq.n	801c21e <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c1b6:	4b41      	ldr	r3, [pc, #260]	; (801c2bc <pbuf_alloc+0x120>)
 801c1b8:	f240 1227 	movw	r2, #295	; 0x127
 801c1bc:	4940      	ldr	r1, [pc, #256]	; (801c2c0 <pbuf_alloc+0x124>)
      return NULL;
 801c1be:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c1c0:	4840      	ldr	r0, [pc, #256]	; (801c2c4 <pbuf_alloc+0x128>)
 801c1c2:	f00a fa87 	bl	80266d4 <iprintf>
}
 801c1c6:	4628      	mov	r0, r5
 801c1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 801c1cc:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801c1d0:	d1f1      	bne.n	801c1b6 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801c1d2:	f10a 0303 	add.w	r3, sl, #3
 801c1d6:	1cca      	adds	r2, r1, #3
 801c1d8:	4606      	mov	r6, r0
 801c1da:	f022 0203 	bic.w	r2, r2, #3
 801c1de:	f023 0303 	bic.w	r3, r3, #3
 801c1e2:	4413      	add	r3, r2
 801c1e4:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801c1e6:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c1ea:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801c1ec:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c1ee:	d34d      	bcc.n	801c28c <pbuf_alloc+0xf0>
 801c1f0:	4282      	cmp	r2, r0
 801c1f2:	d84b      	bhi.n	801c28c <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801c1f4:	f7ff fab4 	bl	801b760 <mem_malloc>
      if (p == NULL) {
 801c1f8:	4605      	mov	r5, r0
 801c1fa:	2800      	cmp	r0, #0
 801c1fc:	d0e3      	beq.n	801c1c6 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c1fe:	1983      	adds	r3, r0, r6
  p->next = NULL;
 801c200:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 801c202:	4a31      	ldr	r2, [pc, #196]	; (801c2c8 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c204:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 801c206:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 801c20a:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c20c:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 801c210:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 801c214:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801c216:	6043      	str	r3, [r0, #4]
}
 801c218:	4628      	mov	r0, r5
 801c21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 801c21e:	2000      	movs	r0, #0
}
 801c220:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 801c224:	f7ff bf92 	b.w	801c14c <pbuf_alloc_reference>
  switch (type) {
 801c228:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c22a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801c2bc <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 801c22e:	4f27      	ldr	r7, [pc, #156]	; (801c2cc <pbuf_alloc+0x130>)
  switch (type) {
 801c230:	4625      	mov	r5, r4
 801c232:	e009      	b.n	801c248 <pbuf_alloc+0xac>
          last->next = q;
 801c234:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801c236:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801c23a:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 801c23e:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 801c242:	f1b9 0f00 	cmp.w	r9, #0
 801c246:	d0be      	beq.n	801c1c6 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c248:	22f3      	movs	r2, #243	; 0xf3
 801c24a:	4641      	mov	r1, r8
 801c24c:	200f      	movs	r0, #15
 801c24e:	4626      	mov	r6, r4
 801c250:	f7ff fc28 	bl	801baa4 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c254:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801c258:	2100      	movs	r1, #0
        if (q == NULL) {
 801c25a:	4604      	mov	r4, r0
 801c25c:	b1d0      	cbz	r0, 801c294 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c25e:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c262:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 801c266:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c26a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c26e:	3213      	adds	r2, #19
  p->next = NULL;
 801c270:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c272:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c274:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801c278:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c27a:	454b      	cmp	r3, r9
  p->payload = payload;
 801c27c:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c27e:	bf28      	it	cs
 801c280:	464b      	movcs	r3, r9
  p->len = len;
 801c282:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801c284:	2d00      	cmp	r5, #0
 801c286:	d1d5      	bne.n	801c234 <pbuf_alloc+0x98>
 801c288:	4605      	mov	r5, r0
 801c28a:	e7d4      	b.n	801c236 <pbuf_alloc+0x9a>
          return NULL;
 801c28c:	2500      	movs	r5, #0
}
 801c28e:	4628      	mov	r0, r5
 801c290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 801c294:	4e0e      	ldr	r6, [pc, #56]	; (801c2d0 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801c296:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801c298:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801c29a:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 801c29c:	b133      	cbz	r3, 801c2ac <pbuf_alloc+0x110>
          if (p) {
 801c29e:	2d00      	cmp	r5, #0
 801c2a0:	d0f4      	beq.n	801c28c <pbuf_alloc+0xf0>
  if (p == NULL) {
 801c2a2:	4628      	mov	r0, r5
          return NULL;
 801c2a4:	2500      	movs	r5, #0
 801c2a6:	f7ff fe4b 	bl	801bf40 <pbuf_free.part.0>
 801c2aa:	e78c      	b.n	801c1c6 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801c2ac:	4601      	mov	r1, r0
 801c2ae:	4809      	ldr	r0, [pc, #36]	; (801c2d4 <pbuf_alloc+0x138>)
 801c2b0:	f7fc fefc 	bl	80190ac <tcpip_try_callback>
 801c2b4:	2800      	cmp	r0, #0
 801c2b6:	d0f2      	beq.n	801c29e <pbuf_alloc+0x102>
 801c2b8:	7034      	strb	r4, [r6, #0]
 801c2ba:	e7f0      	b.n	801c29e <pbuf_alloc+0x102>
 801c2bc:	080452b4 	.word	0x080452b4
 801c2c0:	080453b8 	.word	0x080453b8
 801c2c4:	0802b3cc 	.word	0x0802b3cc
 801c2c8:	00010080 	.word	0x00010080
 801c2cc:	00010082 	.word	0x00010082
 801c2d0:	2002e495 	.word	0x2002e495
 801c2d4:	0801bf19 	.word	0x0801bf19

0801c2d8 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c2d8:	3003      	adds	r0, #3
 801c2da:	f020 0003 	bic.w	r0, r0, #3
{
 801c2de:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c2e0:	eb01 0e00 	add.w	lr, r1, r0
{
 801c2e4:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801c2e8:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c2ea:	45e6      	cmp	lr, ip
 801c2ec:	d80d      	bhi.n	801c30a <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 801c2ee:	b104      	cbz	r4, 801c2f2 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801c2f0:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801c2f2:	4618      	mov	r0, r3
  p->next = NULL;
 801c2f4:	2300      	movs	r3, #0
  p->payload = payload;
 801c2f6:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 801c2f8:	2402      	movs	r4, #2
  p->next = NULL;
 801c2fa:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801c2fc:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 801c2fe:	8101      	strh	r1, [r0, #8]
  p->len = len;
 801c300:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 801c302:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 801c304:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 801c306:	81c3      	strh	r3, [r0, #14]
}
 801c308:	bd10      	pop	{r4, pc}
    return NULL;
 801c30a:	2000      	movs	r0, #0
}
 801c30c:	bd10      	pop	{r4, pc}
 801c30e:	bf00      	nop

0801c310 <pbuf_realloc>:
{
 801c310:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c312:	4604      	mov	r4, r0
{
 801c314:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c316:	2800      	cmp	r0, #0
 801c318:	d037      	beq.n	801c38a <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 801c31a:	8922      	ldrh	r2, [r4, #8]
 801c31c:	42aa      	cmp	r2, r5
 801c31e:	d91b      	bls.n	801c358 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 801c320:	8963      	ldrh	r3, [r4, #10]
 801c322:	429d      	cmp	r5, r3
 801c324:	d90d      	bls.n	801c342 <pbuf_realloc+0x32>
 801c326:	1aa9      	subs	r1, r5, r2
 801c328:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c32a:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 801c32c:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c32e:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801c330:	b29d      	uxth	r5, r3
    q = q->next;
 801c332:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c334:	2c00      	cmp	r4, #0
 801c336:	d030      	beq.n	801c39a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 801c338:	8963      	ldrh	r3, [r4, #10]
 801c33a:	42ab      	cmp	r3, r5
 801c33c:	d201      	bcs.n	801c342 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c33e:	8922      	ldrh	r2, [r4, #8]
 801c340:	e7f3      	b.n	801c32a <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801c342:	7b22      	ldrb	r2, [r4, #12]
 801c344:	0712      	lsls	r2, r2, #28
 801c346:	d008      	beq.n	801c35a <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 801c348:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 801c34a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 801c34c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801c34e:	b108      	cbz	r0, 801c354 <pbuf_realloc+0x44>
  if (p == NULL) {
 801c350:	f7ff fdf6 	bl	801bf40 <pbuf_free.part.0>
  q->next = NULL;
 801c354:	2300      	movs	r3, #0
 801c356:	6023      	str	r3, [r4, #0]
}
 801c358:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801c35a:	429d      	cmp	r5, r3
 801c35c:	d0f4      	beq.n	801c348 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801c35e:	7b63      	ldrb	r3, [r4, #13]
 801c360:	079b      	lsls	r3, r3, #30
 801c362:	d4f1      	bmi.n	801c348 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801c364:	6863      	ldr	r3, [r4, #4]
 801c366:	4620      	mov	r0, r4
 801c368:	1b1b      	subs	r3, r3, r4
 801c36a:	18e9      	adds	r1, r5, r3
 801c36c:	b289      	uxth	r1, r1
 801c36e:	f7ff f91d 	bl	801b5ac <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801c372:	4604      	mov	r4, r0
 801c374:	2800      	cmp	r0, #0
 801c376:	d1e7      	bne.n	801c348 <pbuf_realloc+0x38>
 801c378:	4b0c      	ldr	r3, [pc, #48]	; (801c3ac <pbuf_realloc+0x9c>)
 801c37a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801c37e:	490c      	ldr	r1, [pc, #48]	; (801c3b0 <pbuf_realloc+0xa0>)
 801c380:	480c      	ldr	r0, [pc, #48]	; (801c3b4 <pbuf_realloc+0xa4>)
 801c382:	f00a f9a7 	bl	80266d4 <iprintf>
  q->len = rem_len;
 801c386:	8164      	strh	r4, [r4, #10]
 801c388:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c38a:	4b08      	ldr	r3, [pc, #32]	; (801c3ac <pbuf_realloc+0x9c>)
 801c38c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801c390:	4909      	ldr	r1, [pc, #36]	; (801c3b8 <pbuf_realloc+0xa8>)
 801c392:	4808      	ldr	r0, [pc, #32]	; (801c3b4 <pbuf_realloc+0xa4>)
 801c394:	f00a f99e 	bl	80266d4 <iprintf>
 801c398:	e7bf      	b.n	801c31a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c39a:	4b04      	ldr	r3, [pc, #16]	; (801c3ac <pbuf_realloc+0x9c>)
 801c39c:	f240 12af 	movw	r2, #431	; 0x1af
 801c3a0:	4906      	ldr	r1, [pc, #24]	; (801c3bc <pbuf_realloc+0xac>)
 801c3a2:	4804      	ldr	r0, [pc, #16]	; (801c3b4 <pbuf_realloc+0xa4>)
 801c3a4:	f00a f996 	bl	80266d4 <iprintf>
  while (rem_len > q->len) {
 801c3a8:	8963      	ldrh	r3, [r4, #10]
 801c3aa:	deff      	udf	#255	; 0xff
 801c3ac:	080452b4 	.word	0x080452b4
 801c3b0:	08045404 	.word	0x08045404
 801c3b4:	0802b3cc 	.word	0x0802b3cc
 801c3b8:	080453d4 	.word	0x080453d4
 801c3bc:	080453ec 	.word	0x080453ec

0801c3c0 <pbuf_add_header>:
{
 801c3c0:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c3c2:	b310      	cbz	r0, 801c40a <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801c3c4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801c3c8:	d20c      	bcs.n	801c3e4 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 801c3ca:	b169      	cbz	r1, 801c3e8 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 801c3cc:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c3d0:	8902      	ldrh	r2, [r0, #8]
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	4462      	add	r2, ip
 801c3d6:	b292      	uxth	r2, r2
 801c3d8:	4594      	cmp	ip, r2
 801c3da:	d803      	bhi.n	801c3e4 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c3dc:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801c3e0:	2800      	cmp	r0, #0
 801c3e2:	db03      	blt.n	801c3ec <pbuf_add_header+0x2c>
    return 1;
 801c3e4:	2001      	movs	r0, #1
}
 801c3e6:	bd08      	pop	{r3, pc}
    return 0;
 801c3e8:	4608      	mov	r0, r1
}
 801c3ea:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801c3ec:	6858      	ldr	r0, [r3, #4]
 801c3ee:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c3f0:	f103 0010 	add.w	r0, r3, #16
 801c3f4:	4281      	cmp	r1, r0
 801c3f6:	d3f5      	bcc.n	801c3e4 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801c3f8:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801c3fc:	2000      	movs	r0, #0
  p->payload = payload;
 801c3fe:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c400:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c402:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c404:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801c408:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c40a:	4b04      	ldr	r3, [pc, #16]	; (801c41c <pbuf_add_header+0x5c>)
 801c40c:	f240 12df 	movw	r2, #479	; 0x1df
 801c410:	4903      	ldr	r1, [pc, #12]	; (801c420 <pbuf_add_header+0x60>)
 801c412:	4804      	ldr	r0, [pc, #16]	; (801c424 <pbuf_add_header+0x64>)
 801c414:	f00a f95e 	bl	80266d4 <iprintf>
    return 1;
 801c418:	2001      	movs	r0, #1
}
 801c41a:	bd08      	pop	{r3, pc}
 801c41c:	080452b4 	.word	0x080452b4
 801c420:	08046ce0 	.word	0x08046ce0
 801c424:	0802b3cc 	.word	0x0802b3cc

0801c428 <pbuf_remove_header>:
{
 801c428:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c42a:	b1c8      	cbz	r0, 801c460 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801c42c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801c430:	d21f      	bcs.n	801c472 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801c432:	b199      	cbz	r1, 801c45c <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801c434:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c438:	8942      	ldrh	r2, [r0, #10]
 801c43a:	4603      	mov	r3, r0
 801c43c:	4594      	cmp	ip, r2
 801c43e:	d81a      	bhi.n	801c476 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c440:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801c442:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c446:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c44a:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801c44c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c44e:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801c452:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c454:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c456:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801c45a:	bd08      	pop	{r3, pc}
    return 0;
 801c45c:	4608      	mov	r0, r1
}
 801c45e:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c460:	4b09      	ldr	r3, [pc, #36]	; (801c488 <pbuf_remove_header+0x60>)
 801c462:	f240 224b 	movw	r2, #587	; 0x24b
 801c466:	4909      	ldr	r1, [pc, #36]	; (801c48c <pbuf_remove_header+0x64>)
 801c468:	4809      	ldr	r0, [pc, #36]	; (801c490 <pbuf_remove_header+0x68>)
 801c46a:	f00a f933 	bl	80266d4 <iprintf>
    return 1;
 801c46e:	2001      	movs	r0, #1
}
 801c470:	bd08      	pop	{r3, pc}
    return 1;
 801c472:	2001      	movs	r0, #1
}
 801c474:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c476:	4b04      	ldr	r3, [pc, #16]	; (801c488 <pbuf_remove_header+0x60>)
 801c478:	f240 2255 	movw	r2, #597	; 0x255
 801c47c:	4905      	ldr	r1, [pc, #20]	; (801c494 <pbuf_remove_header+0x6c>)
 801c47e:	4804      	ldr	r0, [pc, #16]	; (801c490 <pbuf_remove_header+0x68>)
 801c480:	f00a f928 	bl	80266d4 <iprintf>
 801c484:	2001      	movs	r0, #1
}
 801c486:	bd08      	pop	{r3, pc}
 801c488:	080452b4 	.word	0x080452b4
 801c48c:	08046ce0 	.word	0x08046ce0
 801c490:	0802b3cc 	.word	0x0802b3cc
 801c494:	08045420 	.word	0x08045420

0801c498 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801c498:	2900      	cmp	r1, #0
 801c49a:	db1a      	blt.n	801c4d2 <pbuf_header_force+0x3a>
{
 801c49c:	b508      	push	{r3, lr}
 801c49e:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801c4a0:	b1d0      	cbz	r0, 801c4d8 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801c4a2:	b341      	cbz	r1, 801c4f6 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801c4a4:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c4a8:	891a      	ldrh	r2, [r3, #8]
 801c4aa:	4462      	add	r2, ip
 801c4ac:	b292      	uxth	r2, r2
 801c4ae:	4594      	cmp	ip, r2
 801c4b0:	d81f      	bhi.n	801c4f2 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c4b2:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801c4b6:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801c4b8:	6858      	ldr	r0, [r3, #4]
 801c4ba:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c4be:	db14      	blt.n	801c4ea <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801c4c0:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801c4c4:	2000      	movs	r0, #0
  p->payload = payload;
 801c4c6:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c4c8:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c4ca:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c4cc:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801c4d0:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801c4d2:	4249      	negs	r1, r1
 801c4d4:	f7ff bfa8 	b.w	801c428 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801c4d8:	4b08      	ldr	r3, [pc, #32]	; (801c4fc <pbuf_header_force+0x64>)
 801c4da:	f240 12df 	movw	r2, #479	; 0x1df
 801c4de:	4908      	ldr	r1, [pc, #32]	; (801c500 <pbuf_header_force+0x68>)
 801c4e0:	4808      	ldr	r0, [pc, #32]	; (801c504 <pbuf_header_force+0x6c>)
 801c4e2:	f00a f8f7 	bl	80266d4 <iprintf>
    return 1;
 801c4e6:	2001      	movs	r0, #1
}
 801c4e8:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c4ea:	f103 0010 	add.w	r0, r3, #16
 801c4ee:	4281      	cmp	r1, r0
 801c4f0:	d2e6      	bcs.n	801c4c0 <pbuf_header_force+0x28>
    return 1;
 801c4f2:	2001      	movs	r0, #1
}
 801c4f4:	bd08      	pop	{r3, pc}
    return 0;
 801c4f6:	4608      	mov	r0, r1
}
 801c4f8:	bd08      	pop	{r3, pc}
 801c4fa:	bf00      	nop
 801c4fc:	080452b4 	.word	0x080452b4
 801c500:	08046ce0 	.word	0x08046ce0
 801c504:	0802b3cc 	.word	0x0802b3cc

0801c508 <pbuf_free_header>:
{
 801c508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (free_left && p) {
 801c50a:	4604      	mov	r4, r0
 801c50c:	b158      	cbz	r0, 801c526 <pbuf_free_header+0x1e>
 801c50e:	460d      	mov	r5, r1
 801c510:	b149      	cbz	r1, 801c526 <pbuf_free_header+0x1e>
      f->next = 0;
 801c512:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 801c514:	8963      	ldrh	r3, [r4, #10]
 801c516:	4620      	mov	r0, r4
 801c518:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 801c51a:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 801c51e:	d904      	bls.n	801c52a <pbuf_free_header+0x22>
      pbuf_remove_header(p, free_left);
 801c520:	4629      	mov	r1, r5
 801c522:	f7ff ff81 	bl	801c428 <pbuf_remove_header>
}
 801c526:	4620      	mov	r0, r4
 801c528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 801c52a:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 801c52c:	b295      	uxth	r5, r2
      f->next = 0;
 801c52e:	6027      	str	r7, [r4, #0]
  if (p == NULL) {
 801c530:	4634      	mov	r4, r6
 801c532:	f7ff fd05 	bl	801bf40 <pbuf_free.part.0>
  while (free_left && p) {
 801c536:	b10d      	cbz	r5, 801c53c <pbuf_free_header+0x34>
 801c538:	2e00      	cmp	r6, #0
 801c53a:	d1eb      	bne.n	801c514 <pbuf_free_header+0xc>
      p = p->next;
 801c53c:	4634      	mov	r4, r6
 801c53e:	e7f2      	b.n	801c526 <pbuf_free_header+0x1e>

0801c540 <pbuf_free>:
  if (p == NULL) {
 801c540:	b108      	cbz	r0, 801c546 <pbuf_free+0x6>
 801c542:	f7ff bcfd 	b.w	801bf40 <pbuf_free.part.0>
{
 801c546:	b510      	push	{r4, lr}
 801c548:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801c54a:	4b04      	ldr	r3, [pc, #16]	; (801c55c <pbuf_free+0x1c>)
 801c54c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801c550:	4903      	ldr	r1, [pc, #12]	; (801c560 <pbuf_free+0x20>)
 801c552:	4804      	ldr	r0, [pc, #16]	; (801c564 <pbuf_free+0x24>)
 801c554:	f00a f8be 	bl	80266d4 <iprintf>
}
 801c558:	4620      	mov	r0, r4
 801c55a:	bd10      	pop	{r4, pc}
 801c55c:	080452b4 	.word	0x080452b4
 801c560:	08046ce0 	.word	0x08046ce0
 801c564:	0802b3cc 	.word	0x0802b3cc

0801c568 <pbuf_clen>:
  while (p != NULL) {
 801c568:	4603      	mov	r3, r0
 801c56a:	b130      	cbz	r0, 801c57a <pbuf_clen+0x12>
  len = 0;
 801c56c:	2000      	movs	r0, #0
    ++len;
 801c56e:	3001      	adds	r0, #1
    p = p->next;
 801c570:	681b      	ldr	r3, [r3, #0]
    ++len;
 801c572:	b280      	uxth	r0, r0
  while (p != NULL) {
 801c574:	2b00      	cmp	r3, #0
 801c576:	d1fa      	bne.n	801c56e <pbuf_clen+0x6>
 801c578:	4770      	bx	lr
}
 801c57a:	4770      	bx	lr

0801c57c <pbuf_ref>:
  if (p != NULL) {
 801c57c:	b120      	cbz	r0, 801c588 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c57e:	7b83      	ldrb	r3, [r0, #14]
 801c580:	3301      	adds	r3, #1
 801c582:	b2db      	uxtb	r3, r3
 801c584:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c586:	b103      	cbz	r3, 801c58a <pbuf_ref+0xe>
}
 801c588:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c58a:	4b03      	ldr	r3, [pc, #12]	; (801c598 <pbuf_ref+0x1c>)
 801c58c:	f240 3242 	movw	r2, #834	; 0x342
 801c590:	4902      	ldr	r1, [pc, #8]	; (801c59c <pbuf_ref+0x20>)
 801c592:	4803      	ldr	r0, [pc, #12]	; (801c5a0 <pbuf_ref+0x24>)
 801c594:	f00a b89e 	b.w	80266d4 <iprintf>
 801c598:	080452b4 	.word	0x080452b4
 801c59c:	08045440 	.word	0x08045440
 801c5a0:	0802b3cc 	.word	0x0802b3cc

0801c5a4 <pbuf_cat>:
{
 801c5a4:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c5a6:	b330      	cbz	r0, 801c5f6 <pbuf_cat+0x52>
 801c5a8:	460d      	mov	r5, r1
 801c5aa:	b321      	cbz	r1, 801c5f6 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801c5ac:	6803      	ldr	r3, [r0, #0]
 801c5ae:	4604      	mov	r4, r0
 801c5b0:	b13b      	cbz	r3, 801c5c2 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c5b2:	8922      	ldrh	r2, [r4, #8]
 801c5b4:	8928      	ldrh	r0, [r5, #8]
 801c5b6:	4402      	add	r2, r0
 801c5b8:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801c5ba:	461c      	mov	r4, r3
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d1f7      	bne.n	801c5b2 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801c5c2:	8963      	ldrh	r3, [r4, #10]
 801c5c4:	8922      	ldrh	r2, [r4, #8]
 801c5c6:	429a      	cmp	r2, r3
 801c5c8:	d010      	beq.n	801c5ec <pbuf_cat+0x48>
 801c5ca:	4b0f      	ldr	r3, [pc, #60]	; (801c608 <pbuf_cat+0x64>)
 801c5cc:	f240 3262 	movw	r2, #866	; 0x362
 801c5d0:	490e      	ldr	r1, [pc, #56]	; (801c60c <pbuf_cat+0x68>)
 801c5d2:	480f      	ldr	r0, [pc, #60]	; (801c610 <pbuf_cat+0x6c>)
 801c5d4:	f00a f87e 	bl	80266d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801c5d8:	6823      	ldr	r3, [r4, #0]
 801c5da:	b133      	cbz	r3, 801c5ea <pbuf_cat+0x46>
 801c5dc:	4b0a      	ldr	r3, [pc, #40]	; (801c608 <pbuf_cat+0x64>)
 801c5de:	f240 3263 	movw	r2, #867	; 0x363
 801c5e2:	490c      	ldr	r1, [pc, #48]	; (801c614 <pbuf_cat+0x70>)
 801c5e4:	480a      	ldr	r0, [pc, #40]	; (801c610 <pbuf_cat+0x6c>)
 801c5e6:	f00a f875 	bl	80266d4 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c5ea:	8923      	ldrh	r3, [r4, #8]
 801c5ec:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801c5ee:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c5f0:	4413      	add	r3, r2
 801c5f2:	8123      	strh	r3, [r4, #8]
}
 801c5f4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c5f6:	4b04      	ldr	r3, [pc, #16]	; (801c608 <pbuf_cat+0x64>)
 801c5f8:	f240 3259 	movw	r2, #857	; 0x359
 801c5fc:	4906      	ldr	r1, [pc, #24]	; (801c618 <pbuf_cat+0x74>)
 801c5fe:	4804      	ldr	r0, [pc, #16]	; (801c610 <pbuf_cat+0x6c>)
}
 801c600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c604:	f00a b866 	b.w	80266d4 <iprintf>
 801c608:	080452b4 	.word	0x080452b4
 801c60c:	0804548c 	.word	0x0804548c
 801c610:	0802b3cc 	.word	0x0802b3cc
 801c614:	080454bc 	.word	0x080454bc
 801c618:	08045454 	.word	0x08045454

0801c61c <pbuf_chain>:
{
 801c61c:	b510      	push	{r4, lr}
 801c61e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801c620:	f7ff ffc0 	bl	801c5a4 <pbuf_cat>
  if (p != NULL) {
 801c624:	b124      	cbz	r4, 801c630 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c626:	7ba3      	ldrb	r3, [r4, #14]
 801c628:	3301      	adds	r3, #1
 801c62a:	b2db      	uxtb	r3, r3
 801c62c:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c62e:	b103      	cbz	r3, 801c632 <pbuf_chain+0x16>
}
 801c630:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c632:	4b04      	ldr	r3, [pc, #16]	; (801c644 <pbuf_chain+0x28>)
 801c634:	f240 3242 	movw	r2, #834	; 0x342
 801c638:	4903      	ldr	r1, [pc, #12]	; (801c648 <pbuf_chain+0x2c>)
 801c63a:	4804      	ldr	r0, [pc, #16]	; (801c64c <pbuf_chain+0x30>)
}
 801c63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c640:	f00a b848 	b.w	80266d4 <iprintf>
 801c644:	080452b4 	.word	0x080452b4
 801c648:	08045440 	.word	0x08045440
 801c64c:	0802b3cc 	.word	0x0802b3cc

0801c650 <pbuf_copy>:
{
 801c650:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c652:	b140      	cbz	r0, 801c666 <pbuf_copy+0x16>
 801c654:	b139      	cbz	r1, 801c666 <pbuf_copy+0x16>
 801c656:	8902      	ldrh	r2, [r0, #8]
 801c658:	890b      	ldrh	r3, [r1, #8]
 801c65a:	429a      	cmp	r2, r3
 801c65c:	d303      	bcc.n	801c666 <pbuf_copy+0x16>
}
 801c65e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c662:	f7ff bcd1 	b.w	801c008 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c666:	4b05      	ldr	r3, [pc, #20]	; (801c67c <pbuf_copy+0x2c>)
 801c668:	f240 32c9 	movw	r2, #969	; 0x3c9
 801c66c:	4904      	ldr	r1, [pc, #16]	; (801c680 <pbuf_copy+0x30>)
 801c66e:	4805      	ldr	r0, [pc, #20]	; (801c684 <pbuf_copy+0x34>)
 801c670:	f00a f830 	bl	80266d4 <iprintf>
}
 801c674:	f06f 000f 	mvn.w	r0, #15
 801c678:	bd08      	pop	{r3, pc}
 801c67a:	bf00      	nop
 801c67c:	080452b4 	.word	0x080452b4
 801c680:	080454cc 	.word	0x080454cc
 801c684:	0802b3cc 	.word	0x0802b3cc

0801c688 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801c688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801c68c:	4605      	mov	r5, r0
 801c68e:	b370      	cbz	r0, 801c6ee <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801c690:	460f      	mov	r7, r1
 801c692:	2900      	cmp	r1, #0
 801c694:	d036      	beq.n	801c704 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c696:	4690      	mov	r8, r2
 801c698:	b392      	cbz	r2, 801c700 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801c69a:	2600      	movs	r6, #0
 801c69c:	e005      	b.n	801c6aa <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801c69e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c6a0:	682d      	ldr	r5, [r5, #0]
 801c6a2:	f1b8 0f00 	cmp.w	r8, #0
 801c6a6:	d01f      	beq.n	801c6e8 <pbuf_copy_partial+0x60>
 801c6a8:	b1f5      	cbz	r5, 801c6e8 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c6aa:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801c6ac:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801c6b0:	b11b      	cbz	r3, 801c6ba <pbuf_copy_partial+0x32>
 801c6b2:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801c6b4:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801c6b8:	d2f1      	bcs.n	801c69e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801c6ba:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c6be:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801c6c0:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c6c4:	4419      	add	r1, r3
 801c6c6:	4544      	cmp	r4, r8
 801c6c8:	bf28      	it	cs
 801c6ca:	4644      	movcs	r4, r8
 801c6cc:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801c6ce:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801c6d0:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c6d4:	f009 f838 	bl	8025748 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801c6d8:	b2b6      	uxth	r6, r6
      offset = 0;
 801c6da:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801c6dc:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c6e0:	682d      	ldr	r5, [r5, #0]
 801c6e2:	f1b8 0f00 	cmp.w	r8, #0
 801c6e6:	d1df      	bne.n	801c6a8 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801c6e8:	4630      	mov	r0, r6
 801c6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801c6ee:	4b0a      	ldr	r3, [pc, #40]	; (801c718 <pbuf_copy_partial+0x90>)
 801c6f0:	f240 420a 	movw	r2, #1034	; 0x40a
 801c6f4:	4909      	ldr	r1, [pc, #36]	; (801c71c <pbuf_copy_partial+0x94>)
 801c6f6:	462e      	mov	r6, r5
 801c6f8:	4809      	ldr	r0, [pc, #36]	; (801c720 <pbuf_copy_partial+0x98>)
 801c6fa:	f009 ffeb 	bl	80266d4 <iprintf>
 801c6fe:	e7f3      	b.n	801c6e8 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801c700:	4616      	mov	r6, r2
 801c702:	e7f1      	b.n	801c6e8 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801c704:	4b04      	ldr	r3, [pc, #16]	; (801c718 <pbuf_copy_partial+0x90>)
 801c706:	f240 420b 	movw	r2, #1035	; 0x40b
 801c70a:	4906      	ldr	r1, [pc, #24]	; (801c724 <pbuf_copy_partial+0x9c>)
 801c70c:	463e      	mov	r6, r7
 801c70e:	4804      	ldr	r0, [pc, #16]	; (801c720 <pbuf_copy_partial+0x98>)
 801c710:	f009 ffe0 	bl	80266d4 <iprintf>
 801c714:	e7e8      	b.n	801c6e8 <pbuf_copy_partial+0x60>
 801c716:	bf00      	nop
 801c718:	080452b4 	.word	0x080452b4
 801c71c:	080454fc 	.word	0x080454fc
 801c720:	0802b3cc 	.word	0x0802b3cc
 801c724:	0804551c 	.word	0x0804551c

0801c728 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801c728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801c72c:	2800      	cmp	r0, #0
 801c72e:	d049      	beq.n	801c7c4 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801c730:	460f      	mov	r7, r1
 801c732:	2900      	cmp	r1, #0
 801c734:	d03c      	beq.n	801c7b0 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801c736:	8903      	ldrh	r3, [r0, #8]
 801c738:	4604      	mov	r4, r0
 801c73a:	4690      	mov	r8, r2
 801c73c:	4293      	cmp	r3, r2
 801c73e:	d32d      	bcc.n	801c79c <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801c740:	b34a      	cbz	r2, 801c796 <pbuf_take+0x6e>
 801c742:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801c744:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801c746:	f8df b094 	ldr.w	fp, [pc, #148]	; 801c7dc <pbuf_take+0xb4>
 801c74a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801c7f0 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801c74e:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801c750:	19b9      	adds	r1, r7, r6
 801c752:	6860      	ldr	r0, [r4, #4]
 801c754:	42aa      	cmp	r2, r5
 801c756:	bf28      	it	cs
 801c758:	462a      	movcs	r2, r5
 801c75a:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801c75c:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801c75e:	f008 fff3 	bl	8025748 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801c762:	6824      	ldr	r4, [r4, #0]
 801c764:	ebb5 0509 	subs.w	r5, r5, r9
 801c768:	d009      	beq.n	801c77e <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801c76a:	2c00      	cmp	r4, #0
 801c76c:	d1ef      	bne.n	801c74e <pbuf_take+0x26>
 801c76e:	465b      	mov	r3, fp
 801c770:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801c774:	4651      	mov	r1, sl
 801c776:	4818      	ldr	r0, [pc, #96]	; (801c7d8 <pbuf_take+0xb0>)
 801c778:	f009 ffac 	bl	80266d4 <iprintf>
 801c77c:	e7e7      	b.n	801c74e <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801c77e:	45b0      	cmp	r8, r6
 801c780:	d009      	beq.n	801c796 <pbuf_take+0x6e>
 801c782:	4b16      	ldr	r3, [pc, #88]	; (801c7dc <pbuf_take+0xb4>)
 801c784:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801c788:	4915      	ldr	r1, [pc, #84]	; (801c7e0 <pbuf_take+0xb8>)
 801c78a:	4813      	ldr	r0, [pc, #76]	; (801c7d8 <pbuf_take+0xb0>)
 801c78c:	f009 ffa2 	bl	80266d4 <iprintf>
  return ERR_OK;
 801c790:	4628      	mov	r0, r5
}
 801c792:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801c796:	2000      	movs	r0, #0
}
 801c798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801c79c:	4b0f      	ldr	r3, [pc, #60]	; (801c7dc <pbuf_take+0xb4>)
 801c79e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801c7a2:	4910      	ldr	r1, [pc, #64]	; (801c7e4 <pbuf_take+0xbc>)
 801c7a4:	480c      	ldr	r0, [pc, #48]	; (801c7d8 <pbuf_take+0xb0>)
 801c7a6:	f009 ff95 	bl	80266d4 <iprintf>
 801c7aa:	f04f 30ff 	mov.w	r0, #4294967295
 801c7ae:	e7f3      	b.n	801c798 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801c7b0:	4b0a      	ldr	r3, [pc, #40]	; (801c7dc <pbuf_take+0xb4>)
 801c7b2:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801c7b6:	490c      	ldr	r1, [pc, #48]	; (801c7e8 <pbuf_take+0xc0>)
 801c7b8:	4807      	ldr	r0, [pc, #28]	; (801c7d8 <pbuf_take+0xb0>)
 801c7ba:	f009 ff8b 	bl	80266d4 <iprintf>
 801c7be:	f06f 000f 	mvn.w	r0, #15
 801c7c2:	e7e9      	b.n	801c798 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801c7c4:	4b05      	ldr	r3, [pc, #20]	; (801c7dc <pbuf_take+0xb4>)
 801c7c6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801c7ca:	4908      	ldr	r1, [pc, #32]	; (801c7ec <pbuf_take+0xc4>)
 801c7cc:	4802      	ldr	r0, [pc, #8]	; (801c7d8 <pbuf_take+0xb0>)
 801c7ce:	f009 ff81 	bl	80266d4 <iprintf>
 801c7d2:	f06f 000f 	mvn.w	r0, #15
 801c7d6:	e7df      	b.n	801c798 <pbuf_take+0x70>
 801c7d8:	0802b3cc 	.word	0x0802b3cc
 801c7dc:	080452b4 	.word	0x080452b4
 801c7e0:	080455ac 	.word	0x080455ac
 801c7e4:	08045574 	.word	0x08045574
 801c7e8:	08045558 	.word	0x08045558
 801c7ec:	08045540 	.word	0x08045540
 801c7f0:	08045594 	.word	0x08045594

0801c7f4 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c7f4:	b390      	cbz	r0, 801c85c <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801c7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7fa:	460f      	mov	r7, r1
 801c7fc:	4604      	mov	r4, r0
 801c7fe:	e002      	b.n	801c806 <pbuf_take_at+0x12>
    q = q->next;
 801c800:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c802:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801c804:	b334      	cbz	r4, 801c854 <pbuf_take_at+0x60>
 801c806:	8965      	ldrh	r5, [r4, #10]
 801c808:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801c80a:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801c80e:	d9f7      	bls.n	801c800 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801c810:	8921      	ldrh	r1, [r4, #8]
 801c812:	189e      	adds	r6, r3, r2
 801c814:	42b1      	cmp	r1, r6
 801c816:	db1d      	blt.n	801c854 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801c818:	1ae9      	subs	r1, r5, r3
 801c81a:	428a      	cmp	r2, r1
 801c81c:	dc07      	bgt.n	801c82e <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801c81e:	6860      	ldr	r0, [r4, #4]
 801c820:	4639      	mov	r1, r7
 801c822:	4418      	add	r0, r3
 801c824:	f008 ff90 	bl	8025748 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801c828:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801c82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801c82e:	fa1f f881 	uxth.w	r8, r1
 801c832:	6860      	ldr	r0, [r4, #4]
 801c834:	4639      	mov	r1, r7
 801c836:	4642      	mov	r2, r8
 801c838:	4418      	add	r0, r3
 801c83a:	f008 ff85 	bl	8025748 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801c83e:	1b70      	subs	r0, r6, r5
 801c840:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801c842:	2a00      	cmp	r2, #0
 801c844:	d0f0      	beq.n	801c828 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801c846:	eb07 0108 	add.w	r1, r7, r8
 801c84a:	6820      	ldr	r0, [r4, #0]
}
 801c84c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801c850:	f7ff bf6a 	b.w	801c728 <pbuf_take>
  return ERR_MEM;
 801c854:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801c85c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c860:	4770      	bx	lr
 801c862:	bf00      	nop

0801c864 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801c864:	b538      	push	{r3, r4, r5, lr}
 801c866:	4615      	mov	r5, r2
 801c868:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801c86a:	8929      	ldrh	r1, [r5, #8]
 801c86c:	f7ff fc96 	bl	801c19c <pbuf_alloc>
  if (q == NULL) {
 801c870:	4604      	mov	r4, r0
 801c872:	b138      	cbz	r0, 801c884 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c874:	8902      	ldrh	r2, [r0, #8]
 801c876:	892b      	ldrh	r3, [r5, #8]
 801c878:	429a      	cmp	r2, r3
 801c87a:	d305      	bcc.n	801c888 <pbuf_clone+0x24>
 801c87c:	4629      	mov	r1, r5
 801c87e:	f7ff fbc3 	bl	801c008 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801c882:	b940      	cbnz	r0, 801c896 <pbuf_clone+0x32>
  return q;
}
 801c884:	4620      	mov	r0, r4
 801c886:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c888:	4b07      	ldr	r3, [pc, #28]	; (801c8a8 <pbuf_clone+0x44>)
 801c88a:	f240 32c9 	movw	r2, #969	; 0x3c9
 801c88e:	4907      	ldr	r1, [pc, #28]	; (801c8ac <pbuf_clone+0x48>)
 801c890:	4807      	ldr	r0, [pc, #28]	; (801c8b0 <pbuf_clone+0x4c>)
 801c892:	f009 ff1f 	bl	80266d4 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801c896:	4b04      	ldr	r3, [pc, #16]	; (801c8a8 <pbuf_clone+0x44>)
 801c898:	f240 5224 	movw	r2, #1316	; 0x524
 801c89c:	4905      	ldr	r1, [pc, #20]	; (801c8b4 <pbuf_clone+0x50>)
 801c89e:	4804      	ldr	r0, [pc, #16]	; (801c8b0 <pbuf_clone+0x4c>)
 801c8a0:	f009 ff18 	bl	80266d4 <iprintf>
}
 801c8a4:	4620      	mov	r0, r4
 801c8a6:	bd38      	pop	{r3, r4, r5, pc}
 801c8a8:	080452b4 	.word	0x080452b4
 801c8ac:	080454cc 	.word	0x080454cc
 801c8b0:	0802b3cc 	.word	0x0802b3cc
 801c8b4:	080455c4 	.word	0x080455c4

0801c8b8 <pbuf_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c8b8:	b918      	cbnz	r0, 801c8c2 <pbuf_get_at+0xa>
 801c8ba:	e00a      	b.n	801c8d2 <pbuf_get_at+0x1a>
    q = q->next;
 801c8bc:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c8be:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c8c0:	b130      	cbz	r0, 801c8d0 <pbuf_get_at+0x18>
 801c8c2:	8943      	ldrh	r3, [r0, #10]
 801c8c4:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c8c6:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c8ca:	d9f7      	bls.n	801c8bc <pbuf_get_at+0x4>
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
 801c8cc:	6843      	ldr	r3, [r0, #4]
 801c8ce:	5c58      	ldrb	r0, [r3, r1]
}
 801c8d0:	4770      	bx	lr
 801c8d2:	4770      	bx	lr

0801c8d4 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c8d4:	b140      	cbz	r0, 801c8e8 <pbuf_try_get_at+0x14>
 801c8d6:	8943      	ldrh	r3, [r0, #10]
 801c8d8:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c8da:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c8de:	d806      	bhi.n	801c8ee <pbuf_try_get_at+0x1a>
    q = q->next;
 801c8e0:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c8e2:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c8e4:	2800      	cmp	r0, #0
 801c8e6:	d1f6      	bne.n	801c8d6 <pbuf_try_get_at+0x2>
  }
  return -1;
 801c8e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c8ec:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801c8ee:	6843      	ldr	r3, [r0, #4]
 801c8f0:	5c58      	ldrb	r0, [r3, r1]
 801c8f2:	4770      	bx	lr

0801c8f4 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c8f4:	b918      	cbnz	r0, 801c8fe <pbuf_put_at+0xa>
 801c8f6:	e00a      	b.n	801c90e <pbuf_put_at+0x1a>
    q = q->next;
 801c8f8:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c8fa:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c8fc:	b130      	cbz	r0, 801c90c <pbuf_put_at+0x18>
 801c8fe:	8943      	ldrh	r3, [r0, #10]
 801c900:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c902:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c906:	d9f7      	bls.n	801c8f8 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801c908:	6843      	ldr	r3, [r0, #4]
 801c90a:	545a      	strb	r2, [r3, r1]
  }
}
 801c90c:	4770      	bx	lr
 801c90e:	4770      	bx	lr

0801c910 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801c910:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801c912:	8905      	ldrh	r5, [r0, #8]
 801c914:	18cc      	adds	r4, r1, r3
 801c916:	42a5      	cmp	r5, r4
 801c918:	db2e      	blt.n	801c978 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801c91a:	8944      	ldrh	r4, [r0, #10]
 801c91c:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801c91e:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801c922:	d803      	bhi.n	801c92c <pbuf_memcmp+0x1c>
    q = q->next;
 801c924:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801c926:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801c928:	2800      	cmp	r0, #0
 801c92a:	d1f6      	bne.n	801c91a <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801c92c:	b1f3      	cbz	r3, 801c96c <pbuf_memcmp+0x5c>
 801c92e:	2500      	movs	r5, #0
 801c930:	1e56      	subs	r6, r2, #1
 801c932:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801c934:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801c938:	4604      	mov	r4, r0
 801c93a:	fa1f fc8c 	uxth.w	ip, ip
 801c93e:	b920      	cbnz	r0, 801c94a <pbuf_memcmp+0x3a>
 801c940:	e00b      	b.n	801c95a <pbuf_memcmp+0x4a>
    q = q->next;
 801c942:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c944:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801c948:	b13c      	cbz	r4, 801c95a <pbuf_memcmp+0x4a>
 801c94a:	8962      	ldrh	r2, [r4, #10]
 801c94c:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801c94e:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801c952:	d2f6      	bcs.n	801c942 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801c954:	6862      	ldr	r2, [r4, #4]
 801c956:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801c95a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801c95e:	42a2      	cmp	r2, r4
 801c960:	d106      	bne.n	801c970 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801c962:	3501      	adds	r5, #1
 801c964:	fa1f fe85 	uxth.w	lr, r5
 801c968:	4573      	cmp	r3, lr
 801c96a:	d8e3      	bhi.n	801c934 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801c96c:	2000      	movs	r0, #0
}
 801c96e:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801c970:	f10e 0001 	add.w	r0, lr, #1
 801c974:	b280      	uxth	r0, r0
}
 801c976:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801c978:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801c97c:	bd70      	pop	{r4, r5, r6, pc}
 801c97e:	bf00      	nop

0801c980 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801c980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c982:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801c984:	8905      	ldrh	r5, [r0, #8]
{
 801c986:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801c988:	4422      	add	r2, r4
 801c98a:	4295      	cmp	r5, r2
 801c98c:	db15      	blt.n	801c9ba <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801c98e:	1aed      	subs	r5, r5, r3
 801c990:	4606      	mov	r6, r0
 801c992:	460f      	mov	r7, r1
 801c994:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801c996:	42a5      	cmp	r5, r4
 801c998:	d204      	bcs.n	801c9a4 <pbuf_memfind+0x24>
 801c99a:	e00e      	b.n	801c9ba <pbuf_memfind+0x3a>
 801c99c:	fa1f f48c 	uxth.w	r4, ip
 801c9a0:	42a5      	cmp	r5, r4
 801c9a2:	d30a      	bcc.n	801c9ba <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801c9a4:	4621      	mov	r1, r4
 801c9a6:	463a      	mov	r2, r7
 801c9a8:	4630      	mov	r0, r6
 801c9aa:	f7ff ffb1 	bl	801c910 <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801c9ae:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801c9b2:	2800      	cmp	r0, #0
 801c9b4:	d1f2      	bne.n	801c99c <pbuf_memfind+0x1c>
 801c9b6:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801c9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801c9ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801c9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c9c0 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801c9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c9c4:	4e33      	ldr	r6, [pc, #204]	; (801ca94 <raw_input+0xd4>)
{
 801c9c6:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c9c8:	6831      	ldr	r1, [r6, #0]
 801c9ca:	6970      	ldr	r0, [r6, #20]
 801c9cc:	f007 fb90 	bl	80240f0 <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801c9d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c9d4:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801c9d6:	4b30      	ldr	r3, [pc, #192]	; (801ca98 <raw_input+0xd8>)
 801c9d8:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801c9da:	2c00      	cmp	r4, #0
 801c9dc:	d056      	beq.n	801ca8c <raw_input+0xcc>
 801c9de:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801c9e0:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801c9e2:	f106 0b10 	add.w	fp, r6, #16
 801c9e6:	46ca      	mov	sl, r9
  prev = NULL;
 801c9e8:	4606      	mov	r6, r0
 801c9ea:	e004      	b.n	801c9f6 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801c9ec:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801c9ee:	4626      	mov	r6, r4
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d037      	beq.n	801ca64 <raw_input+0xa4>
 801c9f4:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801c9f6:	7c23      	ldrb	r3, [r4, #16]
 801c9f8:	42ab      	cmp	r3, r5
 801c9fa:	d1f7      	bne.n	801c9ec <raw_input+0x2c>
 801c9fc:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c9fe:	b13a      	cbz	r2, 801ca10 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ca00:	4b24      	ldr	r3, [pc, #144]	; (801ca94 <raw_input+0xd4>)
 801ca02:	685b      	ldr	r3, [r3, #4]
 801ca04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ca08:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca0a:	b2db      	uxtb	r3, r3
 801ca0c:	429a      	cmp	r2, r3
 801ca0e:	d1ed      	bne.n	801c9ec <raw_input+0x2c>
 801ca10:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801ca12:	f1ba 0f00 	cmp.w	sl, #0
 801ca16:	d027      	beq.n	801ca68 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d1e7      	bne.n	801c9ec <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801ca1c:	7c63      	ldrb	r3, [r4, #17]
 801ca1e:	07db      	lsls	r3, r3, #31
 801ca20:	d504      	bpl.n	801ca2c <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801ca22:	4b1c      	ldr	r3, [pc, #112]	; (801ca94 <raw_input+0xd4>)
 801ca24:	6862      	ldr	r2, [r4, #4]
 801ca26:	691b      	ldr	r3, [r3, #16]
 801ca28:	429a      	cmp	r2, r3
 801ca2a:	d1df      	bne.n	801c9ec <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801ca2c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801ca30:	f1b9 0f00 	cmp.w	r9, #0
 801ca34:	d0da      	beq.n	801c9ec <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801ca36:	465b      	mov	r3, fp
 801ca38:	4642      	mov	r2, r8
 801ca3a:	4621      	mov	r1, r4
 801ca3c:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801ca3e:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801ca42:	47c8      	blx	r9
        if (eaten != 0) {
 801ca44:	b9c8      	cbnz	r0, 801ca7a <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801ca46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ca4a:	42bb      	cmp	r3, r7
 801ca4c:	d013      	beq.n	801ca76 <raw_input+0xb6>
 801ca4e:	4b13      	ldr	r3, [pc, #76]	; (801ca9c <raw_input+0xdc>)
 801ca50:	22c0      	movs	r2, #192	; 0xc0
 801ca52:	4913      	ldr	r1, [pc, #76]	; (801caa0 <raw_input+0xe0>)
 801ca54:	4626      	mov	r6, r4
 801ca56:	4813      	ldr	r0, [pc, #76]	; (801caa4 <raw_input+0xe4>)
 801ca58:	f009 fe3c 	bl	80266d4 <iprintf>
    pcb = pcb->next;
 801ca5c:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801ca5e:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d1c7      	bne.n	801c9f4 <raw_input+0x34>
  }
  return ret;
}
 801ca64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d0d7      	beq.n	801ca1c <raw_input+0x5c>
 801ca6c:	4a09      	ldr	r2, [pc, #36]	; (801ca94 <raw_input+0xd4>)
 801ca6e:	6952      	ldr	r2, [r2, #20]
 801ca70:	4293      	cmp	r3, r2
 801ca72:	d1bb      	bne.n	801c9ec <raw_input+0x2c>
 801ca74:	e7d2      	b.n	801ca1c <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801ca76:	2002      	movs	r0, #2
 801ca78:	e7b8      	b.n	801c9ec <raw_input+0x2c>
          if (prev != NULL) {
 801ca7a:	b14e      	cbz	r6, 801ca90 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801ca7c:	4906      	ldr	r1, [pc, #24]	; (801ca98 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801ca7e:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801ca80:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801ca82:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801ca84:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801ca86:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801ca88:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801ca8a:	e7eb      	b.n	801ca64 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801ca8c:	4620      	mov	r0, r4
 801ca8e:	e7e9      	b.n	801ca64 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801ca90:	2001      	movs	r0, #1
 801ca92:	e7e7      	b.n	801ca64 <raw_input+0xa4>
 801ca94:	2001f300 	.word	0x2001f300
 801ca98:	2002e498 	.word	0x2002e498
 801ca9c:	080455d8 	.word	0x080455d8
 801caa0:	08045608 	.word	0x08045608
 801caa4:	0802b3cc 	.word	0x0802b3cc

0801caa8 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801caa8:	b110      	cbz	r0, 801cab0 <raw_netif_ip_addr_changed+0x8>
 801caaa:	6802      	ldr	r2, [r0, #0]
 801caac:	b101      	cbz	r1, 801cab0 <raw_netif_ip_addr_changed+0x8>
 801caae:	b902      	cbnz	r2, 801cab2 <raw_netif_ip_addr_changed+0xa>
 801cab0:	4770      	bx	lr
 801cab2:	680b      	ldr	r3, [r1, #0]
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d0fb      	beq.n	801cab0 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801cab8:	4b08      	ldr	r3, [pc, #32]	; (801cadc <raw_netif_ip_addr_changed+0x34>)
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d0f7      	beq.n	801cab0 <raw_netif_ip_addr_changed+0x8>
{
 801cac0:	b410      	push	{r4}
 801cac2:	e000      	b.n	801cac6 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801cac4:	6802      	ldr	r2, [r0, #0]
 801cac6:	681c      	ldr	r4, [r3, #0]
 801cac8:	4294      	cmp	r4, r2
 801caca:	d101      	bne.n	801cad0 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801cacc:	680a      	ldr	r2, [r1, #0]
 801cace:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801cad0:	68db      	ldr	r3, [r3, #12]
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d1f6      	bne.n	801cac4 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801cad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cada:	4770      	bx	lr
 801cadc:	2002e498 	.word	0x2002e498

0801cae0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801cae0:	b4f0      	push	{r4, r5, r6, r7}
 801cae2:	4f13      	ldr	r7, [pc, #76]	; (801cb30 <tcp_new_port+0x50>)
 801cae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801cae8:	4e12      	ldr	r6, [pc, #72]	; (801cb34 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801caea:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801caee:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801caf0:	4d11      	ldr	r5, [pc, #68]	; (801cb38 <tcp_new_port+0x58>)
  tcp_port++;
 801caf2:	3001      	adds	r0, #1
 801caf4:	4c11      	ldr	r4, [pc, #68]	; (801cb3c <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801caf6:	462b      	mov	r3, r5
  tcp_port++;
 801caf8:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801cafa:	4560      	cmp	r0, ip
 801cafc:	bf08      	it	eq
 801cafe:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	b913      	cbnz	r3, 801cb0c <tcp_new_port+0x2c>
 801cb06:	e00b      	b.n	801cb20 <tcp_new_port+0x40>
 801cb08:	68db      	ldr	r3, [r3, #12]
 801cb0a:	b14b      	cbz	r3, 801cb20 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801cb0c:	8ada      	ldrh	r2, [r3, #22]
 801cb0e:	4282      	cmp	r2, r0
 801cb10:	d1fa      	bne.n	801cb08 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801cb12:	3901      	subs	r1, #1
 801cb14:	b289      	uxth	r1, r1
 801cb16:	2900      	cmp	r1, #0
 801cb18:	d1eb      	bne.n	801caf2 <tcp_new_port+0x12>
 801cb1a:	8038      	strh	r0, [r7, #0]
          return 0;
 801cb1c:	4608      	mov	r0, r1
 801cb1e:	e005      	b.n	801cb2c <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801cb20:	42b4      	cmp	r4, r6
 801cb22:	d002      	beq.n	801cb2a <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801cb24:	f854 3b04 	ldr.w	r3, [r4], #4
 801cb28:	e7eb      	b.n	801cb02 <tcp_new_port+0x22>
 801cb2a:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801cb2c:	bcf0      	pop	{r4, r5, r6, r7}
 801cb2e:	4770      	bx	lr
 801cb30:	2000044c 	.word	0x2000044c
 801cb34:	08045d48 	.word	0x08045d48
 801cb38:	2002e4a8 	.word	0x2002e4a8
 801cb3c:	08045d3c 	.word	0x08045d3c

0801cb40 <tcp_close_shutdown_fin>:
{
 801cb40:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801cb42:	4604      	mov	r4, r0
 801cb44:	b310      	cbz	r0, 801cb8c <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801cb46:	7d23      	ldrb	r3, [r4, #20]
 801cb48:	2b04      	cmp	r3, #4
 801cb4a:	d005      	beq.n	801cb58 <tcp_close_shutdown_fin+0x18>
 801cb4c:	2b07      	cmp	r3, #7
 801cb4e:	d00e      	beq.n	801cb6e <tcp_close_shutdown_fin+0x2e>
 801cb50:	2b03      	cmp	r3, #3
 801cb52:	d001      	beq.n	801cb58 <tcp_close_shutdown_fin+0x18>
 801cb54:	2000      	movs	r0, #0
}
 801cb56:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801cb58:	4620      	mov	r0, r4
 801cb5a:	f003 fd33 	bl	80205c4 <tcp_send_fin>
      if (err == ERR_OK) {
 801cb5e:	b950      	cbnz	r0, 801cb76 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801cb60:	2305      	movs	r3, #5
 801cb62:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801cb64:	4620      	mov	r0, r4
 801cb66:	f003 fe9d 	bl	80208a4 <tcp_output>
 801cb6a:	2000      	movs	r0, #0
}
 801cb6c:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801cb6e:	4620      	mov	r0, r4
 801cb70:	f003 fd28 	bl	80205c4 <tcp_send_fin>
      if (err == ERR_OK) {
 801cb74:	b138      	cbz	r0, 801cb86 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801cb76:	1c43      	adds	r3, r0, #1
 801cb78:	d1ed      	bne.n	801cb56 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801cb7a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801cb7c:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801cb7e:	f043 0308 	orr.w	r3, r3, #8
 801cb82:	8363      	strh	r3, [r4, #26]
}
 801cb84:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801cb86:	2309      	movs	r3, #9
 801cb88:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801cb8a:	e7eb      	b.n	801cb64 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801cb8c:	4b03      	ldr	r3, [pc, #12]	; (801cb9c <tcp_close_shutdown_fin+0x5c>)
 801cb8e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801cb92:	4903      	ldr	r1, [pc, #12]	; (801cba0 <tcp_close_shutdown_fin+0x60>)
 801cb94:	4803      	ldr	r0, [pc, #12]	; (801cba4 <tcp_close_shutdown_fin+0x64>)
 801cb96:	f009 fd9d 	bl	80266d4 <iprintf>
 801cb9a:	e7d4      	b.n	801cb46 <tcp_close_shutdown_fin+0x6>
 801cb9c:	08045654 	.word	0x08045654
 801cba0:	08045684 	.word	0x08045684
 801cba4:	0802b3cc 	.word	0x0802b3cc

0801cba8 <tcp_init>:
{
 801cba8:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801cbaa:	f009 fe37 	bl	802681c <rand>
 801cbae:	4b02      	ldr	r3, [pc, #8]	; (801cbb8 <tcp_init+0x10>)
 801cbb0:	4a02      	ldr	r2, [pc, #8]	; (801cbbc <tcp_init+0x14>)
 801cbb2:	4303      	orrs	r3, r0
 801cbb4:	8013      	strh	r3, [r2, #0]
}
 801cbb6:	bd08      	pop	{r3, pc}
 801cbb8:	ffffc000 	.word	0xffffc000
 801cbbc:	2000044c 	.word	0x2000044c

0801cbc0 <tcp_free>:
{
 801cbc0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cbc2:	7d03      	ldrb	r3, [r0, #20]
{
 801cbc4:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cbc6:	2b01      	cmp	r3, #1
 801cbc8:	d005      	beq.n	801cbd6 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801cbca:	4621      	mov	r1, r4
 801cbcc:	2002      	movs	r0, #2
}
 801cbce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801cbd2:	f7fe bf9d 	b.w	801bb10 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cbd6:	4906      	ldr	r1, [pc, #24]	; (801cbf0 <tcp_free+0x30>)
 801cbd8:	22d4      	movs	r2, #212	; 0xd4
 801cbda:	4b06      	ldr	r3, [pc, #24]	; (801cbf4 <tcp_free+0x34>)
 801cbdc:	4806      	ldr	r0, [pc, #24]	; (801cbf8 <tcp_free+0x38>)
 801cbde:	f009 fd79 	bl	80266d4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801cbe2:	4621      	mov	r1, r4
 801cbe4:	2002      	movs	r0, #2
}
 801cbe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801cbea:	f7fe bf91 	b.w	801bb10 <memp_free>
 801cbee:	bf00      	nop
 801cbf0:	08045690 	.word	0x08045690
 801cbf4:	08045654 	.word	0x08045654
 801cbf8:	0802b3cc 	.word	0x0802b3cc

0801cbfc <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801cbfc:	2900      	cmp	r1, #0
{
 801cbfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801cc00:	4b26      	ldr	r3, [pc, #152]	; (801cc9c <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801cc02:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801cc04:	bf14      	ite	ne
 801cc06:	460e      	movne	r6, r1
 801cc08:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc0a:	2800      	cmp	r0, #0
 801cc0c:	d03c      	beq.n	801cc88 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801cc0e:	7d03      	ldrb	r3, [r0, #20]
 801cc10:	4607      	mov	r7, r0
 801cc12:	bb7b      	cbnz	r3, 801cc74 <tcp_bind+0x78>
  if (port == 0) {
 801cc14:	b31a      	cbz	r2, 801cc5e <tcp_bind+0x62>
 801cc16:	4922      	ldr	r1, [pc, #136]	; (801cca0 <tcp_bind+0xa4>)
 801cc18:	4b22      	ldr	r3, [pc, #136]	; (801cca4 <tcp_bind+0xa8>)
 801cc1a:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801cc1e:	681b      	ldr	r3, [r3, #0]
 801cc20:	b913      	cbnz	r3, 801cc28 <tcp_bind+0x2c>
 801cc22:	e00e      	b.n	801cc42 <tcp_bind+0x46>
 801cc24:	68db      	ldr	r3, [r3, #12]
 801cc26:	b163      	cbz	r3, 801cc42 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801cc28:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801cc2c:	4594      	cmp	ip, r2
 801cc2e:	d1f9      	bne.n	801cc24 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801cc30:	681c      	ldr	r4, [r3, #0]
 801cc32:	b11c      	cbz	r4, 801cc3c <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801cc34:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801cc36:	b10d      	cbz	r5, 801cc3c <tcp_bind+0x40>
 801cc38:	42ac      	cmp	r4, r5
 801cc3a:	d1f3      	bne.n	801cc24 <tcp_bind+0x28>
              return ERR_USE;
 801cc3c:	f06f 0007 	mvn.w	r0, #7
}
 801cc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801cc42:	4281      	cmp	r1, r0
 801cc44:	d113      	bne.n	801cc6e <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801cc46:	6833      	ldr	r3, [r6, #0]
 801cc48:	b103      	cbz	r3, 801cc4c <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801cc4a:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801cc4c:	4b16      	ldr	r3, [pc, #88]	; (801cca8 <tcp_bind+0xac>)
  pcb->local_port = port;
 801cc4e:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801cc50:	681a      	ldr	r2, [r3, #0]
 801cc52:	601f      	str	r7, [r3, #0]
 801cc54:	60fa      	str	r2, [r7, #12]
 801cc56:	f004 f951 	bl	8020efc <tcp_timer_needed>
  return ERR_OK;
 801cc5a:	2000      	movs	r0, #0
}
 801cc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801cc5e:	f7ff ff3f 	bl	801cae0 <tcp_new_port>
    if (port == 0) {
 801cc62:	4602      	mov	r2, r0
 801cc64:	2800      	cmp	r0, #0
 801cc66:	d1ee      	bne.n	801cc46 <tcp_bind+0x4a>
      return ERR_BUF;
 801cc68:	f06f 0001 	mvn.w	r0, #1
}
 801cc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801cc6e:	f851 3b04 	ldr.w	r3, [r1], #4
 801cc72:	e7d4      	b.n	801cc1e <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801cc74:	4b0d      	ldr	r3, [pc, #52]	; (801ccac <tcp_bind+0xb0>)
 801cc76:	f240 22ab 	movw	r2, #683	; 0x2ab
 801cc7a:	490d      	ldr	r1, [pc, #52]	; (801ccb0 <tcp_bind+0xb4>)
 801cc7c:	480d      	ldr	r0, [pc, #52]	; (801ccb4 <tcp_bind+0xb8>)
 801cc7e:	f009 fd29 	bl	80266d4 <iprintf>
 801cc82:	f06f 0005 	mvn.w	r0, #5
}
 801cc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc88:	4b08      	ldr	r3, [pc, #32]	; (801ccac <tcp_bind+0xb0>)
 801cc8a:	f240 22a9 	movw	r2, #681	; 0x2a9
 801cc8e:	490a      	ldr	r1, [pc, #40]	; (801ccb8 <tcp_bind+0xbc>)
 801cc90:	4808      	ldr	r0, [pc, #32]	; (801ccb4 <tcp_bind+0xb8>)
 801cc92:	f009 fd1f 	bl	80266d4 <iprintf>
 801cc96:	f06f 000f 	mvn.w	r0, #15
}
 801cc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc9c:	0804726c 	.word	0x0804726c
 801cca0:	08045d3c 	.word	0x08045d3c
 801cca4:	2002e4a8 	.word	0x2002e4a8
 801cca8:	2002e4a4 	.word	0x2002e4a4
 801ccac:	08045654 	.word	0x08045654
 801ccb0:	080456bc 	.word	0x080456bc
 801ccb4:	0802b3cc 	.word	0x0802b3cc
 801ccb8:	080456a4 	.word	0x080456a4

0801ccbc <tcp_listen_with_backlog_and_err>:
{
 801ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ccbe:	4604      	mov	r4, r0
{
 801ccc0:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ccc2:	2800      	cmp	r0, #0
 801ccc4:	d060      	beq.n	801cd88 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801ccc6:	7d05      	ldrb	r5, [r0, #20]
 801ccc8:	2d00      	cmp	r5, #0
 801ccca:	d14a      	bne.n	801cd62 <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801cccc:	f240 3272 	movw	r2, #882	; 0x372
 801ccd0:	4933      	ldr	r1, [pc, #204]	; (801cda0 <tcp_listen_with_backlog_and_err+0xe4>)
 801ccd2:	2003      	movs	r0, #3
 801ccd4:	f7fe fee6 	bl	801baa4 <memp_malloc_fn>
  if (lpcb == NULL) {
 801ccd8:	4606      	mov	r6, r0
 801ccda:	2800      	cmp	r0, #0
 801ccdc:	d051      	beq.n	801cd82 <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801ccde:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801cce0:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801cce2:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801cce4:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801cce6:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801cce8:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801ccea:	7d62      	ldrb	r2, [r4, #21]
 801ccec:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801ccee:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801ccf0:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801ccf2:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801ccf4:	7ae2      	ldrb	r2, [r4, #11]
 801ccf6:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801ccf8:	7aa2      	ldrb	r2, [r4, #10]
 801ccfa:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801ccfc:	6822      	ldr	r2, [r4, #0]
 801ccfe:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801cd00:	b99b      	cbnz	r3, 801cd2a <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cd02:	7d23      	ldrb	r3, [r4, #20]
 801cd04:	2b01      	cmp	r3, #1
 801cd06:	d020      	beq.n	801cd4a <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801cd08:	4621      	mov	r1, r4
 801cd0a:	2002      	movs	r0, #2
 801cd0c:	f7fe ff00 	bl	801bb10 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801cd10:	4b24      	ldr	r3, [pc, #144]	; (801cda4 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801cd12:	4925      	ldr	r1, [pc, #148]	; (801cda8 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801cd14:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801cd16:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801cd18:	60f2      	str	r2, [r6, #12]
 801cd1a:	601e      	str	r6, [r3, #0]
 801cd1c:	f004 f8ee 	bl	8020efc <tcp_timer_needed>
  res = ERR_OK;
 801cd20:	2300      	movs	r3, #0
  if (err != NULL) {
 801cd22:	b107      	cbz	r7, 801cd26 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801cd24:	703b      	strb	r3, [r7, #0]
}
 801cd26:	4630      	mov	r0, r6
 801cd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801cd2a:	4a20      	ldr	r2, [pc, #128]	; (801cdac <tcp_listen_with_backlog_and_err+0xf0>)
 801cd2c:	6813      	ldr	r3, [r2, #0]
 801cd2e:	42a3      	cmp	r3, r4
 801cd30:	d012      	beq.n	801cd58 <tcp_listen_with_backlog_and_err+0x9c>
 801cd32:	b12b      	cbz	r3, 801cd40 <tcp_listen_with_backlog_and_err+0x84>
 801cd34:	68d9      	ldr	r1, [r3, #12]
 801cd36:	42a1      	cmp	r1, r4
 801cd38:	d01e      	beq.n	801cd78 <tcp_listen_with_backlog_and_err+0xbc>
 801cd3a:	460b      	mov	r3, r1
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d1f9      	bne.n	801cd34 <tcp_listen_with_backlog_and_err+0x78>
 801cd40:	2300      	movs	r3, #0
 801cd42:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cd44:	7d23      	ldrb	r3, [r4, #20]
 801cd46:	2b01      	cmp	r3, #1
 801cd48:	d1de      	bne.n	801cd08 <tcp_listen_with_backlog_and_err+0x4c>
 801cd4a:	4b15      	ldr	r3, [pc, #84]	; (801cda0 <tcp_listen_with_backlog_and_err+0xe4>)
 801cd4c:	22d4      	movs	r2, #212	; 0xd4
 801cd4e:	4918      	ldr	r1, [pc, #96]	; (801cdb0 <tcp_listen_with_backlog_and_err+0xf4>)
 801cd50:	4818      	ldr	r0, [pc, #96]	; (801cdb4 <tcp_listen_with_backlog_and_err+0xf8>)
 801cd52:	f009 fcbf 	bl	80266d4 <iprintf>
 801cd56:	e7d7      	b.n	801cd08 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801cd58:	68e3      	ldr	r3, [r4, #12]
 801cd5a:	6013      	str	r3, [r2, #0]
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	60e3      	str	r3, [r4, #12]
 801cd60:	e7f0      	b.n	801cd44 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801cd62:	4b0f      	ldr	r3, [pc, #60]	; (801cda0 <tcp_listen_with_backlog_and_err+0xe4>)
 801cd64:	f240 325a 	movw	r2, #858	; 0x35a
 801cd68:	4913      	ldr	r1, [pc, #76]	; (801cdb8 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801cd6a:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801cd6c:	4811      	ldr	r0, [pc, #68]	; (801cdb4 <tcp_listen_with_backlog_and_err+0xf8>)
 801cd6e:	f009 fcb1 	bl	80266d4 <iprintf>
 801cd72:	f06f 030e 	mvn.w	r3, #14
 801cd76:	e7d4      	b.n	801cd22 <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801cd78:	68e2      	ldr	r2, [r4, #12]
 801cd7a:	60da      	str	r2, [r3, #12]
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	60e3      	str	r3, [r4, #12]
 801cd80:	e7e0      	b.n	801cd44 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801cd82:	f04f 33ff 	mov.w	r3, #4294967295
 801cd86:	e7cc      	b.n	801cd22 <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801cd88:	4b05      	ldr	r3, [pc, #20]	; (801cda0 <tcp_listen_with_backlog_and_err+0xe4>)
 801cd8a:	f240 3259 	movw	r2, #857	; 0x359
 801cd8e:	490b      	ldr	r1, [pc, #44]	; (801cdbc <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801cd90:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801cd92:	4808      	ldr	r0, [pc, #32]	; (801cdb4 <tcp_listen_with_backlog_and_err+0xf8>)
 801cd94:	f009 fc9e 	bl	80266d4 <iprintf>
 801cd98:	f06f 030f 	mvn.w	r3, #15
 801cd9c:	e7c1      	b.n	801cd22 <tcp_listen_with_backlog_and_err+0x66>
 801cd9e:	bf00      	nop
 801cda0:	08045654 	.word	0x08045654
 801cda4:	2002e4a8 	.word	0x2002e4a8
 801cda8:	0801da51 	.word	0x0801da51
 801cdac:	2002e4a4 	.word	0x2002e4a4
 801cdb0:	08045690 	.word	0x08045690
 801cdb4:	0802b3cc 	.word	0x0802b3cc
 801cdb8:	08045714 	.word	0x08045714
 801cdbc:	080456e4 	.word	0x080456e4

0801cdc0 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801cdc0:	2200      	movs	r2, #0
 801cdc2:	f7ff bf7b 	b.w	801ccbc <tcp_listen_with_backlog_and_err>
 801cdc6:	bf00      	nop

0801cdc8 <tcp_update_rcv_ann_wnd>:
{
 801cdc8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801cdca:	4604      	mov	r4, r0
 801cdcc:	b1c0      	cbz	r0, 801ce00 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801cdce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801cdd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801cdd2:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801cdd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801cdd8:	1ad0      	subs	r0, r2, r3
 801cdda:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801cdde:	4428      	add	r0, r5
 801cde0:	bf94      	ite	ls
 801cde2:	eba0 010c 	subls.w	r1, r0, ip
 801cde6:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801cdea:	2900      	cmp	r1, #0
 801cdec:	db01      	blt.n	801cdf2 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801cdee:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801cdf0:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801cdf2:	1aea      	subs	r2, r5, r3
 801cdf4:	2a00      	cmp	r2, #0
 801cdf6:	dd0b      	ble.n	801ce10 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801cdf8:	2300      	movs	r3, #0
    return 0;
 801cdfa:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801cdfc:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801cdfe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801ce00:	4b0b      	ldr	r3, [pc, #44]	; (801ce30 <tcp_update_rcv_ann_wnd+0x68>)
 801ce02:	f240 32a6 	movw	r2, #934	; 0x3a6
 801ce06:	490b      	ldr	r1, [pc, #44]	; (801ce34 <tcp_update_rcv_ann_wnd+0x6c>)
 801ce08:	480b      	ldr	r0, [pc, #44]	; (801ce38 <tcp_update_rcv_ann_wnd+0x70>)
 801ce0a:	f009 fc63 	bl	80266d4 <iprintf>
 801ce0e:	e7de      	b.n	801cdce <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801ce10:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801ce12:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801ce16:	d202      	bcs.n	801ce1e <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801ce18:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801ce1a:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801ce1c:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801ce1e:	4b04      	ldr	r3, [pc, #16]	; (801ce30 <tcp_update_rcv_ann_wnd+0x68>)
 801ce20:	f240 32b6 	movw	r2, #950	; 0x3b6
 801ce24:	4905      	ldr	r1, [pc, #20]	; (801ce3c <tcp_update_rcv_ann_wnd+0x74>)
 801ce26:	4804      	ldr	r0, [pc, #16]	; (801ce38 <tcp_update_rcv_ann_wnd+0x70>)
 801ce28:	f009 fc54 	bl	80266d4 <iprintf>
 801ce2c:	e7f4      	b.n	801ce18 <tcp_update_rcv_ann_wnd+0x50>
 801ce2e:	bf00      	nop
 801ce30:	08045654 	.word	0x08045654
 801ce34:	0804574c 	.word	0x0804574c
 801ce38:	0802b3cc 	.word	0x0802b3cc
 801ce3c:	08045770 	.word	0x08045770

0801ce40 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801ce40:	b340      	cbz	r0, 801ce94 <tcp_recved+0x54>
{
 801ce42:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801ce44:	7d03      	ldrb	r3, [r0, #20]
 801ce46:	4605      	mov	r5, r0
 801ce48:	460c      	mov	r4, r1
 801ce4a:	2b01      	cmp	r3, #1
 801ce4c:	d01a      	beq.n	801ce84 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801ce4e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801ce50:	1919      	adds	r1, r3, r4
 801ce52:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801ce54:	428b      	cmp	r3, r1
 801ce56:	d802      	bhi.n	801ce5e <tcp_recved+0x1e>
 801ce58:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801ce5c:	d901      	bls.n	801ce62 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801ce5e:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801ce62:	4628      	mov	r0, r5
 801ce64:	8529      	strh	r1, [r5, #40]	; 0x28
 801ce66:	f7ff ffaf 	bl	801cdc8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801ce6a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801ce6e:	d200      	bcs.n	801ce72 <tcp_recved+0x32>
}
 801ce70:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801ce72:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801ce74:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801ce76:	f043 0302 	orr.w	r3, r3, #2
 801ce7a:	836b      	strh	r3, [r5, #26]
}
 801ce7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801ce80:	f003 bd10 	b.w	80208a4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801ce84:	4b07      	ldr	r3, [pc, #28]	; (801cea4 <tcp_recved+0x64>)
 801ce86:	f240 32d2 	movw	r2, #978	; 0x3d2
 801ce8a:	4907      	ldr	r1, [pc, #28]	; (801cea8 <tcp_recved+0x68>)
 801ce8c:	4807      	ldr	r0, [pc, #28]	; (801ceac <tcp_recved+0x6c>)
 801ce8e:	f009 fc21 	bl	80266d4 <iprintf>
 801ce92:	e7dc      	b.n	801ce4e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801ce94:	4b03      	ldr	r3, [pc, #12]	; (801cea4 <tcp_recved+0x64>)
 801ce96:	f240 32cf 	movw	r2, #975	; 0x3cf
 801ce9a:	4905      	ldr	r1, [pc, #20]	; (801ceb0 <tcp_recved+0x70>)
 801ce9c:	4803      	ldr	r0, [pc, #12]	; (801ceac <tcp_recved+0x6c>)
 801ce9e:	f009 bc19 	b.w	80266d4 <iprintf>
 801cea2:	bf00      	nop
 801cea4:	08045654 	.word	0x08045654
 801cea8:	080457a4 	.word	0x080457a4
 801ceac:	0802b3cc 	.word	0x0802b3cc
 801ceb0:	0804578c 	.word	0x0804578c

0801ceb4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801ceb6:	2800      	cmp	r0, #0
 801ceb8:	f000 808c 	beq.w	801cfd4 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cebc:	2900      	cmp	r1, #0
 801cebe:	d07f      	beq.n	801cfc0 <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801cec0:	461e      	mov	r6, r3
 801cec2:	7d03      	ldrb	r3, [r0, #20]
 801cec4:	4604      	mov	r4, r0
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d16a      	bne.n	801cfa0 <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801ceca:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cecc:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801cece:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801ced0:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801ced2:	2800      	cmp	r0, #0
 801ced4:	d049      	beq.n	801cf6a <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801ced6:	f7ff f80d 	bl	801bef4 <netif_get_by_index>
 801ceda:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801cedc:	2d00      	cmp	r5, #0
 801cede:	d06c      	beq.n	801cfba <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801cee0:	6823      	ldr	r3, [r4, #0]
 801cee2:	b90b      	cbnz	r3, 801cee8 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801cee4:	686b      	ldr	r3, [r5, #4]
 801cee6:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801cee8:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801ceea:	b927      	cbnz	r7, 801cef6 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801ceec:	f7ff fdf8 	bl	801cae0 <tcp_new_port>
 801cef0:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801cef2:	2800      	cmp	r0, #0
 801cef4:	d05e      	beq.n	801cfb4 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801cef6:	4b3c      	ldr	r3, [pc, #240]	; (801cfe8 <tcp_connect+0x134>)
 801cef8:	4a3c      	ldr	r2, [pc, #240]	; (801cfec <tcp_connect+0x138>)
 801cefa:	6811      	ldr	r1, [r2, #0]
 801cefc:	681a      	ldr	r2, [r3, #0]
 801cefe:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801cf00:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801cf04:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801cf06:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801cf08:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801cf0a:	4b39      	ldr	r3, [pc, #228]	; (801cff0 <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801cf0c:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801cf0e:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801cf10:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801cf12:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801cf16:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801cf1a:	2200      	movs	r2, #0
 801cf1c:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801cf1e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d037      	beq.n	801cf94 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801cf24:	2b28      	cmp	r3, #40	; 0x28
 801cf26:	d907      	bls.n	801cf38 <tcp_connect+0x84>
 801cf28:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801cf2c:	b292      	uxth	r2, r2
 801cf2e:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801cf32:	bf28      	it	cs
 801cf34:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801cf38:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801cf3a:	2102      	movs	r1, #2
 801cf3c:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801cf3e:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801cf40:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801cf44:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801cf48:	f003 fa90 	bl	802046c <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801cf4c:	4605      	mov	r5, r0
 801cf4e:	b9f8      	cbnz	r0, 801cf90 <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801cf50:	2302      	movs	r3, #2
 801cf52:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801cf54:	b187      	cbz	r7, 801cf78 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cf56:	4a27      	ldr	r2, [pc, #156]	; (801cff4 <tcp_connect+0x140>)
 801cf58:	6813      	ldr	r3, [r2, #0]
 801cf5a:	42a3      	cmp	r3, r4
 801cf5c:	d01d      	beq.n	801cf9a <tcp_connect+0xe6>
 801cf5e:	b15b      	cbz	r3, 801cf78 <tcp_connect+0xc4>
 801cf60:	68da      	ldr	r2, [r3, #12]
 801cf62:	42a2      	cmp	r2, r4
 801cf64:	d006      	beq.n	801cf74 <tcp_connect+0xc0>
 801cf66:	4613      	mov	r3, r2
 801cf68:	e7f9      	b.n	801cf5e <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801cf6a:	1d20      	adds	r0, r4, #4
 801cf6c:	f006 fee4 	bl	8023d38 <ip4_route>
 801cf70:	4605      	mov	r5, r0
 801cf72:	e7b3      	b.n	801cedc <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cf74:	68e2      	ldr	r2, [r4, #12]
 801cf76:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801cf78:	4b1f      	ldr	r3, [pc, #124]	; (801cff8 <tcp_connect+0x144>)
 801cf7a:	681a      	ldr	r2, [r3, #0]
 801cf7c:	601c      	str	r4, [r3, #0]
 801cf7e:	60e2      	str	r2, [r4, #12]
 801cf80:	f003 ffbc 	bl	8020efc <tcp_timer_needed>
 801cf84:	4b1d      	ldr	r3, [pc, #116]	; (801cffc <tcp_connect+0x148>)
 801cf86:	2201      	movs	r2, #1
    tcp_output(pcb);
 801cf88:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801cf8a:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801cf8c:	f003 fc8a 	bl	80208a4 <tcp_output>
}
 801cf90:	4628      	mov	r0, r5
 801cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf94:	f44f 7206 	mov.w	r2, #536	; 0x218
 801cf98:	e7ce      	b.n	801cf38 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cf9a:	68e3      	ldr	r3, [r4, #12]
 801cf9c:	6013      	str	r3, [r2, #0]
 801cf9e:	e7eb      	b.n	801cf78 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801cfa0:	4b17      	ldr	r3, [pc, #92]	; (801d000 <tcp_connect+0x14c>)
 801cfa2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801cfa6:	4917      	ldr	r1, [pc, #92]	; (801d004 <tcp_connect+0x150>)
 801cfa8:	f06f 0509 	mvn.w	r5, #9
 801cfac:	4816      	ldr	r0, [pc, #88]	; (801d008 <tcp_connect+0x154>)
 801cfae:	f009 fb91 	bl	80266d4 <iprintf>
 801cfb2:	e7ed      	b.n	801cf90 <tcp_connect+0xdc>
      return ERR_BUF;
 801cfb4:	f06f 0501 	mvn.w	r5, #1
 801cfb8:	e7ea      	b.n	801cf90 <tcp_connect+0xdc>
    return ERR_RTE;
 801cfba:	f06f 0503 	mvn.w	r5, #3
 801cfbe:	e7e7      	b.n	801cf90 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cfc0:	4b0f      	ldr	r3, [pc, #60]	; (801d000 <tcp_connect+0x14c>)
 801cfc2:	f240 4236 	movw	r2, #1078	; 0x436
 801cfc6:	4911      	ldr	r1, [pc, #68]	; (801d00c <tcp_connect+0x158>)
 801cfc8:	f06f 050f 	mvn.w	r5, #15
 801cfcc:	480e      	ldr	r0, [pc, #56]	; (801d008 <tcp_connect+0x154>)
 801cfce:	f009 fb81 	bl	80266d4 <iprintf>
 801cfd2:	e7dd      	b.n	801cf90 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cfd4:	4b0a      	ldr	r3, [pc, #40]	; (801d000 <tcp_connect+0x14c>)
 801cfd6:	f240 4235 	movw	r2, #1077	; 0x435
 801cfda:	490d      	ldr	r1, [pc, #52]	; (801d010 <tcp_connect+0x15c>)
 801cfdc:	f06f 050f 	mvn.w	r5, #15
 801cfe0:	4809      	ldr	r0, [pc, #36]	; (801d008 <tcp_connect+0x154>)
 801cfe2:	f009 fb77 	bl	80266d4 <iprintf>
 801cfe6:	e7d3      	b.n	801cf90 <tcp_connect+0xdc>
 801cfe8:	20000448 	.word	0x20000448
 801cfec:	2002e4ac 	.word	0x2002e4ac
 801cff0:	08600860 	.word	0x08600860
 801cff4:	2002e4a4 	.word	0x2002e4a4
 801cff8:	2002e49c 	.word	0x2002e49c
 801cffc:	2002e4a0 	.word	0x2002e4a0
 801d000:	08045654 	.word	0x08045654
 801d004:	08045804 	.word	0x08045804
 801d008:	0802b3cc 	.word	0x0802b3cc
 801d00c:	080457e8 	.word	0x080457e8
 801d010:	080457cc 	.word	0x080457cc

0801d014 <tcp_segs_free>:
  while (seg != NULL) {
 801d014:	b170      	cbz	r0, 801d034 <tcp_segs_free+0x20>
{
 801d016:	b538      	push	{r3, r4, r5, lr}
 801d018:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801d01a:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801d01c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d01e:	6868      	ldr	r0, [r5, #4]
 801d020:	b108      	cbz	r0, 801d026 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801d022:	f7ff fa8d 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d026:	4629      	mov	r1, r5
 801d028:	2004      	movs	r0, #4
 801d02a:	f7fe fd71 	bl	801bb10 <memp_free>
  while (seg != NULL) {
 801d02e:	2c00      	cmp	r4, #0
 801d030:	d1f3      	bne.n	801d01a <tcp_segs_free+0x6>
}
 801d032:	bd38      	pop	{r3, r4, r5, pc}
 801d034:	4770      	bx	lr
 801d036:	bf00      	nop

0801d038 <tcp_seg_free>:
  if (seg != NULL) {
 801d038:	b158      	cbz	r0, 801d052 <tcp_seg_free+0x1a>
{
 801d03a:	b510      	push	{r4, lr}
 801d03c:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801d03e:	6840      	ldr	r0, [r0, #4]
 801d040:	b108      	cbz	r0, 801d046 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801d042:	f7ff fa7d 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d046:	4621      	mov	r1, r4
 801d048:	2004      	movs	r0, #4
}
 801d04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801d04e:	f7fe bd5f 	b.w	801bb10 <memp_free>
 801d052:	4770      	bx	lr

0801d054 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801d054:	b108      	cbz	r0, 801d05a <tcp_setprio+0x6>
  pcb->prio = prio;
 801d056:	7541      	strb	r1, [r0, #21]
}
 801d058:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801d05a:	4b03      	ldr	r3, [pc, #12]	; (801d068 <tcp_setprio+0x14>)
 801d05c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801d060:	4902      	ldr	r1, [pc, #8]	; (801d06c <tcp_setprio+0x18>)
 801d062:	4803      	ldr	r0, [pc, #12]	; (801d070 <tcp_setprio+0x1c>)
 801d064:	f009 bb36 	b.w	80266d4 <iprintf>
 801d068:	08045654 	.word	0x08045654
 801d06c:	08045834 	.word	0x08045834
 801d070:	0802b3cc 	.word	0x0802b3cc

0801d074 <tcp_seg_copy>:
{
 801d074:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801d076:	4605      	mov	r5, r0
 801d078:	b1a0      	cbz	r0, 801d0a4 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801d07a:	f240 6284 	movw	r2, #1668	; 0x684
 801d07e:	490d      	ldr	r1, [pc, #52]	; (801d0b4 <tcp_seg_copy+0x40>)
 801d080:	2004      	movs	r0, #4
 801d082:	f7fe fd0f 	bl	801baa4 <memp_malloc_fn>
  if (cseg == NULL) {
 801d086:	4604      	mov	r4, r0
 801d088:	b150      	cbz	r0, 801d0a0 <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801d08a:	6868      	ldr	r0, [r5, #4]
 801d08c:	6829      	ldr	r1, [r5, #0]
 801d08e:	68aa      	ldr	r2, [r5, #8]
 801d090:	68eb      	ldr	r3, [r5, #12]
 801d092:	6060      	str	r0, [r4, #4]
 801d094:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801d096:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801d098:	60a2      	str	r2, [r4, #8]
 801d09a:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801d09c:	f7ff fa6e 	bl	801c57c <pbuf_ref>
}
 801d0a0:	4620      	mov	r0, r4
 801d0a2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801d0a4:	4b03      	ldr	r3, [pc, #12]	; (801d0b4 <tcp_seg_copy+0x40>)
 801d0a6:	f240 6282 	movw	r2, #1666	; 0x682
 801d0aa:	4903      	ldr	r1, [pc, #12]	; (801d0b8 <tcp_seg_copy+0x44>)
 801d0ac:	4803      	ldr	r0, [pc, #12]	; (801d0bc <tcp_seg_copy+0x48>)
 801d0ae:	f009 fb11 	bl	80266d4 <iprintf>
 801d0b2:	e7e2      	b.n	801d07a <tcp_seg_copy+0x6>
 801d0b4:	08045654 	.word	0x08045654
 801d0b8:	08045850 	.word	0x08045850
 801d0bc:	0802b3cc 	.word	0x0802b3cc

0801d0c0 <tcp_arg>:
  if (pcb != NULL) {
 801d0c0:	b100      	cbz	r0, 801d0c4 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801d0c2:	6101      	str	r1, [r0, #16]
}
 801d0c4:	4770      	bx	lr
 801d0c6:	bf00      	nop

0801d0c8 <tcp_recv>:
  if (pcb != NULL) {
 801d0c8:	b140      	cbz	r0, 801d0dc <tcp_recv+0x14>
{
 801d0ca:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801d0cc:	7d03      	ldrb	r3, [r0, #20]
 801d0ce:	4604      	mov	r4, r0
 801d0d0:	460d      	mov	r5, r1
 801d0d2:	2b01      	cmp	r3, #1
 801d0d4:	d003      	beq.n	801d0de <tcp_recv+0x16>
    pcb->recv = recv;
 801d0d6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801d0da:	bd38      	pop	{r3, r4, r5, pc}
 801d0dc:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801d0de:	4b05      	ldr	r3, [pc, #20]	; (801d0f4 <tcp_recv+0x2c>)
 801d0e0:	f240 72df 	movw	r2, #2015	; 0x7df
 801d0e4:	4904      	ldr	r1, [pc, #16]	; (801d0f8 <tcp_recv+0x30>)
 801d0e6:	4805      	ldr	r0, [pc, #20]	; (801d0fc <tcp_recv+0x34>)
 801d0e8:	f009 faf4 	bl	80266d4 <iprintf>
    pcb->recv = recv;
 801d0ec:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801d0f0:	bd38      	pop	{r3, r4, r5, pc}
 801d0f2:	bf00      	nop
 801d0f4:	08045654 	.word	0x08045654
 801d0f8:	0804586c 	.word	0x0804586c
 801d0fc:	0802b3cc 	.word	0x0802b3cc

0801d100 <tcp_sent>:
  if (pcb != NULL) {
 801d100:	b140      	cbz	r0, 801d114 <tcp_sent+0x14>
{
 801d102:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801d104:	7d03      	ldrb	r3, [r0, #20]
 801d106:	4604      	mov	r4, r0
 801d108:	460d      	mov	r5, r1
 801d10a:	2b01      	cmp	r3, #1
 801d10c:	d003      	beq.n	801d116 <tcp_sent+0x16>
    pcb->sent = sent;
 801d10e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801d112:	bd38      	pop	{r3, r4, r5, pc}
 801d114:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801d116:	4b05      	ldr	r3, [pc, #20]	; (801d12c <tcp_sent+0x2c>)
 801d118:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801d11c:	4904      	ldr	r1, [pc, #16]	; (801d130 <tcp_sent+0x30>)
 801d11e:	4805      	ldr	r0, [pc, #20]	; (801d134 <tcp_sent+0x34>)
 801d120:	f009 fad8 	bl	80266d4 <iprintf>
    pcb->sent = sent;
 801d124:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801d128:	bd38      	pop	{r3, r4, r5, pc}
 801d12a:	bf00      	nop
 801d12c:	08045654 	.word	0x08045654
 801d130:	08045894 	.word	0x08045894
 801d134:	0802b3cc 	.word	0x0802b3cc

0801d138 <tcp_err>:
  if (pcb != NULL) {
 801d138:	b140      	cbz	r0, 801d14c <tcp_err+0x14>
{
 801d13a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801d13c:	7d03      	ldrb	r3, [r0, #20]
 801d13e:	4604      	mov	r4, r0
 801d140:	460d      	mov	r5, r1
 801d142:	2b01      	cmp	r3, #1
 801d144:	d003      	beq.n	801d14e <tcp_err+0x16>
    pcb->errf = err;
 801d146:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801d14a:	bd38      	pop	{r3, r4, r5, pc}
 801d14c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801d14e:	4b05      	ldr	r3, [pc, #20]	; (801d164 <tcp_err+0x2c>)
 801d150:	f640 020d 	movw	r2, #2061	; 0x80d
 801d154:	4904      	ldr	r1, [pc, #16]	; (801d168 <tcp_err+0x30>)
 801d156:	4805      	ldr	r0, [pc, #20]	; (801d16c <tcp_err+0x34>)
 801d158:	f009 fabc 	bl	80266d4 <iprintf>
    pcb->errf = err;
 801d15c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801d160:	bd38      	pop	{r3, r4, r5, pc}
 801d162:	bf00      	nop
 801d164:	08045654 	.word	0x08045654
 801d168:	080458bc 	.word	0x080458bc
 801d16c:	0802b3cc 	.word	0x0802b3cc

0801d170 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801d170:	b118      	cbz	r0, 801d17a <tcp_accept+0xa>
 801d172:	7d03      	ldrb	r3, [r0, #20]
 801d174:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801d176:	bf08      	it	eq
 801d178:	6181      	streq	r1, [r0, #24]
}
 801d17a:	4770      	bx	lr

0801d17c <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801d17c:	b1a8      	cbz	r0, 801d1aa <tcp_poll+0x2e>
{
 801d17e:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801d180:	7d03      	ldrb	r3, [r0, #20]
 801d182:	460e      	mov	r6, r1
 801d184:	4604      	mov	r4, r0
 801d186:	4615      	mov	r5, r2
 801d188:	2b01      	cmp	r3, #1
 801d18a:	d003      	beq.n	801d194 <tcp_poll+0x18>
  pcb->poll = poll;
 801d18c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801d190:	7765      	strb	r5, [r4, #29]
}
 801d192:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801d194:	4b08      	ldr	r3, [pc, #32]	; (801d1b8 <tcp_poll+0x3c>)
 801d196:	f640 023e 	movw	r2, #2110	; 0x83e
 801d19a:	4908      	ldr	r1, [pc, #32]	; (801d1bc <tcp_poll+0x40>)
 801d19c:	4808      	ldr	r0, [pc, #32]	; (801d1c0 <tcp_poll+0x44>)
 801d19e:	f009 fa99 	bl	80266d4 <iprintf>
  pcb->poll = poll;
 801d1a2:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801d1a6:	7765      	strb	r5, [r4, #29]
}
 801d1a8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801d1aa:	4b03      	ldr	r3, [pc, #12]	; (801d1b8 <tcp_poll+0x3c>)
 801d1ac:	f640 023d 	movw	r2, #2109	; 0x83d
 801d1b0:	4904      	ldr	r1, [pc, #16]	; (801d1c4 <tcp_poll+0x48>)
 801d1b2:	4803      	ldr	r0, [pc, #12]	; (801d1c0 <tcp_poll+0x44>)
 801d1b4:	f009 ba8e 	b.w	80266d4 <iprintf>
 801d1b8:	08045654 	.word	0x08045654
 801d1bc:	080458fc 	.word	0x080458fc
 801d1c0:	0802b3cc 	.word	0x0802b3cc
 801d1c4:	080458e4 	.word	0x080458e4

0801d1c8 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	d041      	beq.n	801d250 <tcp_pcb_purge+0x88>
{
 801d1cc:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801d1ce:	7d03      	ldrb	r3, [r0, #20]
 801d1d0:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801d1d2:	2b0a      	cmp	r3, #10
 801d1d4:	d001      	beq.n	801d1da <tcp_pcb_purge+0x12>
 801d1d6:	2b01      	cmp	r3, #1
 801d1d8:	d800      	bhi.n	801d1dc <tcp_pcb_purge+0x14>
}
 801d1da:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801d1dc:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801d1de:	b118      	cbz	r0, 801d1e8 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801d1e0:	f7ff f9ae 	bl	801c540 <pbuf_free>
      pcb->refused_data = NULL;
 801d1e4:	2300      	movs	r3, #0
 801d1e6:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801d1e8:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801d1ea:	b164      	cbz	r4, 801d206 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801d1ec:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801d1ee:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d1f0:	6870      	ldr	r0, [r6, #4]
 801d1f2:	b108      	cbz	r0, 801d1f8 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801d1f4:	f7ff f9a4 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d1f8:	4631      	mov	r1, r6
 801d1fa:	2004      	movs	r0, #4
 801d1fc:	f7fe fc88 	bl	801bb10 <memp_free>
  while (seg != NULL) {
 801d200:	2c00      	cmp	r4, #0
 801d202:	d1f3      	bne.n	801d1ec <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801d204:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801d206:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801d20a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801d20c:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801d20e:	b15c      	cbz	r4, 801d228 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801d210:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801d212:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d214:	6870      	ldr	r0, [r6, #4]
 801d216:	b108      	cbz	r0, 801d21c <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801d218:	f7ff f992 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d21c:	4631      	mov	r1, r6
 801d21e:	2004      	movs	r0, #4
 801d220:	f7fe fc76 	bl	801bb10 <memp_free>
  while (seg != NULL) {
 801d224:	2c00      	cmp	r4, #0
 801d226:	d1f3      	bne.n	801d210 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801d228:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801d22a:	b15c      	cbz	r4, 801d244 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801d22c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801d22e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d230:	6870      	ldr	r0, [r6, #4]
 801d232:	b108      	cbz	r0, 801d238 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801d234:	f7ff f984 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d238:	4631      	mov	r1, r6
 801d23a:	2004      	movs	r0, #4
 801d23c:	f7fe fc68 	bl	801bb10 <memp_free>
  while (seg != NULL) {
 801d240:	2c00      	cmp	r4, #0
 801d242:	d1f3      	bne.n	801d22c <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801d244:	2300      	movs	r3, #0
 801d246:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801d24a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801d24e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801d250:	4b03      	ldr	r3, [pc, #12]	; (801d260 <tcp_pcb_purge+0x98>)
 801d252:	f640 0251 	movw	r2, #2129	; 0x851
 801d256:	4903      	ldr	r1, [pc, #12]	; (801d264 <tcp_pcb_purge+0x9c>)
 801d258:	4803      	ldr	r0, [pc, #12]	; (801d268 <tcp_pcb_purge+0xa0>)
 801d25a:	f009 ba3b 	b.w	80266d4 <iprintf>
 801d25e:	bf00      	nop
 801d260:	08045654 	.word	0x08045654
 801d264:	0804591c 	.word	0x0804591c
 801d268:	0802b3cc 	.word	0x0802b3cc

0801d26c <tcp_slowtmr>:
{
 801d26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801d270:	4da9      	ldr	r5, [pc, #676]	; (801d518 <tcp_slowtmr+0x2ac>)
{
 801d272:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801d274:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801d544 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801d278:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d27a:	4fa8      	ldr	r7, [pc, #672]	; (801d51c <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801d27c:	3301      	adds	r3, #1
 801d27e:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801d280:	f89b 3000 	ldrb.w	r3, [fp]
 801d284:	3301      	adds	r3, #1
 801d286:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801d28a:	4ba5      	ldr	r3, [pc, #660]	; (801d520 <tcp_slowtmr+0x2b4>)
 801d28c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801d28e:	2c00      	cmp	r4, #0
 801d290:	f000 808a 	beq.w	801d3a8 <tcp_slowtmr+0x13c>
  prev = NULL;
 801d294:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d296:	46b1      	mov	r9, r6
 801d298:	7d23      	ldrb	r3, [r4, #20]
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	f000 80fc 	beq.w	801d498 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d2a0:	2b01      	cmp	r3, #1
 801d2a2:	f000 8104 	beq.w	801d4ae <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d2a6:	2b0a      	cmp	r3, #10
 801d2a8:	f000 810c 	beq.w	801d4c4 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d2ac:	f89b 2000 	ldrb.w	r2, [fp]
 801d2b0:	7fa3      	ldrb	r3, [r4, #30]
 801d2b2:	4293      	cmp	r3, r2
 801d2b4:	f000 8113 	beq.w	801d4de <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d2b8:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801d2ba:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d2bc:	2b02      	cmp	r3, #2
 801d2be:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801d2c2:	f000 8112 	beq.w	801d4ea <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801d2c6:	2a0b      	cmp	r2, #11
 801d2c8:	f240 80cb 	bls.w	801d462 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801d2cc:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801d2d0:	2b06      	cmp	r3, #6
 801d2d2:	f000 80b7 	beq.w	801d444 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801d2d6:	f894 a009 	ldrb.w	sl, [r4, #9]
 801d2da:	f01a 0a08 	ands.w	sl, sl, #8
 801d2de:	d01d      	beq.n	801d31c <tcp_slowtmr+0xb0>
 801d2e0:	2b04      	cmp	r3, #4
 801d2e2:	d007      	beq.n	801d2f4 <tcp_slowtmr+0x88>
 801d2e4:	f1a3 0307 	sub.w	r3, r3, #7
 801d2e8:	fab3 f383 	clz	r3, r3
 801d2ec:	095b      	lsrs	r3, r3, #5
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	f000 80b4 	beq.w	801d45c <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801d2f4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801d2f8:	4b8a      	ldr	r3, [pc, #552]	; (801d524 <tcp_slowtmr+0x2b8>)
 801d2fa:	488b      	ldr	r0, [pc, #556]	; (801d528 <tcp_slowtmr+0x2bc>)
 801d2fc:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d2fe:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801d300:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d304:	6a20      	ldr	r0, [r4, #32]
 801d306:	1a12      	subs	r2, r2, r0
 801d308:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801d30c:	f240 8160 	bls.w	801d5d0 <tcp_slowtmr+0x364>
        ++pcb_remove;
 801d310:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801d314:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801d318:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801d31c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801d31e:	b156      	cbz	r6, 801d336 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801d320:	682b      	ldr	r3, [r5, #0]
 801d322:	6a22      	ldr	r2, [r4, #32]
 801d324:	1a9a      	subs	r2, r3, r2
 801d326:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801d32a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801d32e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801d332:	f080 80e1 	bcs.w	801d4f8 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801d336:	7d23      	ldrb	r3, [r4, #20]
 801d338:	2b03      	cmp	r3, #3
 801d33a:	d057      	beq.n	801d3ec <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801d33c:	2b09      	cmp	r3, #9
 801d33e:	d15a      	bne.n	801d3f6 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801d340:	682b      	ldr	r3, [r5, #0]
 801d342:	6a22      	ldr	r2, [r4, #32]
 801d344:	1a9b      	subs	r3, r3, r2
 801d346:	2bf0      	cmp	r3, #240	; 0xf0
 801d348:	d955      	bls.n	801d3f6 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801d34a:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801d34c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801d350:	f7ff ff3a 	bl	801d1c8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d354:	4b72      	ldr	r3, [pc, #456]	; (801d520 <tcp_slowtmr+0x2b4>)
 801d356:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801d358:	f1b9 0f00 	cmp.w	r9, #0
 801d35c:	f000 817e 	beq.w	801d65c <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d360:	42a3      	cmp	r3, r4
 801d362:	f000 81df 	beq.w	801d724 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801d366:	68e3      	ldr	r3, [r4, #12]
 801d368:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801d36c:	f1ba 0f00 	cmp.w	sl, #0
 801d370:	f040 8147 	bne.w	801d602 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d374:	7d23      	ldrb	r3, [r4, #20]
 801d376:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801d378:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d37c:	f000 8153 	beq.w	801d626 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801d380:	4621      	mov	r1, r4
 801d382:	2002      	movs	r0, #2
 801d384:	f7fe fbc4 	bl	801bb10 <memp_free>
      tcp_active_pcbs_changed = 0;
 801d388:	4c68      	ldr	r4, [pc, #416]	; (801d52c <tcp_slowtmr+0x2c0>)
 801d38a:	2300      	movs	r3, #0
 801d38c:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801d38e:	b13e      	cbz	r6, 801d3a0 <tcp_slowtmr+0x134>
 801d390:	f06f 010c 	mvn.w	r1, #12
 801d394:	4650      	mov	r0, sl
 801d396:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801d398:	7823      	ldrb	r3, [r4, #0]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	f47f af75 	bne.w	801d28a <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801d3a0:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801d3a2:	2c00      	cmp	r4, #0
 801d3a4:	f47f af78 	bne.w	801d298 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801d3a8:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801d548 <tcp_slowtmr+0x2dc>
 801d3ac:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801d3b0:	b1cc      	cbz	r4, 801d3e6 <tcp_slowtmr+0x17a>
  prev = NULL;
 801d3b2:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d3b4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801d51c <tcp_slowtmr+0x2b0>
 801d3b8:	f8df a190 	ldr.w	sl, [pc, #400]	; 801d54c <tcp_slowtmr+0x2e0>
 801d3bc:	4f5c      	ldr	r7, [pc, #368]	; (801d530 <tcp_slowtmr+0x2c4>)
 801d3be:	7d23      	ldrb	r3, [r4, #20]
 801d3c0:	2b0a      	cmp	r3, #10
 801d3c2:	d006      	beq.n	801d3d2 <tcp_slowtmr+0x166>
 801d3c4:	4643      	mov	r3, r8
 801d3c6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801d3ca:	4651      	mov	r1, sl
 801d3cc:	4638      	mov	r0, r7
 801d3ce:	f009 f981 	bl	80266d4 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801d3d2:	682b      	ldr	r3, [r5, #0]
 801d3d4:	6a22      	ldr	r2, [r4, #32]
 801d3d6:	1a9b      	subs	r3, r3, r2
 801d3d8:	2bf0      	cmp	r3, #240	; 0xf0
 801d3da:	f200 80d4 	bhi.w	801d586 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801d3de:	4626      	mov	r6, r4
 801d3e0:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801d3e2:	2c00      	cmp	r4, #0
 801d3e4:	d1eb      	bne.n	801d3be <tcp_slowtmr+0x152>
}
 801d3e6:	b007      	add	sp, #28
 801d3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d3ec:	682b      	ldr	r3, [r5, #0]
 801d3ee:	6a22      	ldr	r2, [r4, #32]
 801d3f0:	1a9b      	subs	r3, r3, r2
 801d3f2:	2b28      	cmp	r3, #40	; 0x28
 801d3f4:	d8a9      	bhi.n	801d34a <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801d3f6:	f1b8 0f00 	cmp.w	r8, #0
 801d3fa:	d1a6      	bne.n	801d34a <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801d3fc:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801d3fe:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801d400:	3301      	adds	r3, #1
      pcb = pcb->next;
 801d402:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801d404:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801d406:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801d408:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801d40a:	d815      	bhi.n	801d438 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801d40c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801d52c <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801d410:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801d414:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801d418:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	f000 80ce 	beq.w	801d5be <tcp_slowtmr+0x352>
 801d422:	4621      	mov	r1, r4
 801d424:	6920      	ldr	r0, [r4, #16]
 801d426:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801d428:	f899 3000 	ldrb.w	r3, [r9]
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	f47f af2c 	bne.w	801d28a <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801d432:	2800      	cmp	r0, #0
 801d434:	f000 80c3 	beq.w	801d5be <tcp_slowtmr+0x352>
 801d438:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d43a:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801d43c:	2c00      	cmp	r4, #0
 801d43e:	f47f af2b 	bne.w	801d298 <tcp_slowtmr+0x2c>
 801d442:	e7b1      	b.n	801d3a8 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801d444:	8b63      	ldrh	r3, [r4, #26]
 801d446:	06db      	lsls	r3, r3, #27
 801d448:	d508      	bpl.n	801d45c <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d44a:	682b      	ldr	r3, [r5, #0]
 801d44c:	6a22      	ldr	r2, [r4, #32]
 801d44e:	1a9b      	subs	r3, r3, r2
 801d450:	2b28      	cmp	r3, #40	; 0x28
 801d452:	d903      	bls.n	801d45c <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801d454:	f108 0801 	add.w	r8, r8, #1
 801d458:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801d45c:	f04f 0a00 	mov.w	sl, #0
 801d460:	e75c      	b.n	801d31c <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801d462:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801d466:	f1b8 0f00 	cmp.w	r8, #0
 801d46a:	d071      	beq.n	801d550 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801d46c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d46e:	b133      	cbz	r3, 801d47e <tcp_slowtmr+0x212>
 801d470:	463b      	mov	r3, r7
 801d472:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801d476:	492f      	ldr	r1, [pc, #188]	; (801d534 <tcp_slowtmr+0x2c8>)
 801d478:	482d      	ldr	r0, [pc, #180]	; (801d530 <tcp_slowtmr+0x2c4>)
 801d47a:	f009 f92b 	bl	80266d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d47e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d480:	2b00      	cmp	r3, #0
 801d482:	f000 8171 	beq.w	801d768 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801d486:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801d48a:	2b0b      	cmp	r3, #11
 801d48c:	f240 80d2 	bls.w	801d634 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801d490:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801d492:	f04f 0801 	mov.w	r8, #1
 801d496:	e71b      	b.n	801d2d0 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d498:	463b      	mov	r3, r7
 801d49a:	f240 42be 	movw	r2, #1214	; 0x4be
 801d49e:	4926      	ldr	r1, [pc, #152]	; (801d538 <tcp_slowtmr+0x2cc>)
 801d4a0:	4823      	ldr	r0, [pc, #140]	; (801d530 <tcp_slowtmr+0x2c4>)
 801d4a2:	f009 f917 	bl	80266d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d4a6:	7d23      	ldrb	r3, [r4, #20]
 801d4a8:	2b01      	cmp	r3, #1
 801d4aa:	f47f aefc 	bne.w	801d2a6 <tcp_slowtmr+0x3a>
 801d4ae:	463b      	mov	r3, r7
 801d4b0:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801d4b4:	4921      	ldr	r1, [pc, #132]	; (801d53c <tcp_slowtmr+0x2d0>)
 801d4b6:	481e      	ldr	r0, [pc, #120]	; (801d530 <tcp_slowtmr+0x2c4>)
 801d4b8:	f009 f90c 	bl	80266d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d4bc:	7d23      	ldrb	r3, [r4, #20]
 801d4be:	2b0a      	cmp	r3, #10
 801d4c0:	f47f aef4 	bne.w	801d2ac <tcp_slowtmr+0x40>
 801d4c4:	463b      	mov	r3, r7
 801d4c6:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801d4ca:	491d      	ldr	r1, [pc, #116]	; (801d540 <tcp_slowtmr+0x2d4>)
 801d4cc:	4818      	ldr	r0, [pc, #96]	; (801d530 <tcp_slowtmr+0x2c4>)
 801d4ce:	f009 f901 	bl	80266d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d4d2:	f89b 2000 	ldrb.w	r2, [fp]
 801d4d6:	7fa3      	ldrb	r3, [r4, #30]
 801d4d8:	4293      	cmp	r3, r2
 801d4da:	f47f aeed 	bne.w	801d2b8 <tcp_slowtmr+0x4c>
      continue;
 801d4de:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d4e0:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801d4e2:	2c00      	cmp	r4, #0
 801d4e4:	f47f aed8 	bne.w	801d298 <tcp_slowtmr+0x2c>
 801d4e8:	e75e      	b.n	801d3a8 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d4ea:	2a05      	cmp	r2, #5
 801d4ec:	d9b9      	bls.n	801d462 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801d4ee:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801d4f2:	f04f 0801 	mov.w	r8, #1
 801d4f6:	e711      	b.n	801d31c <tcp_slowtmr+0xb0>
 801d4f8:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801d4fa:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801d4fc:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801d4fe:	6860      	ldr	r0, [r4, #4]
 801d500:	b108      	cbz	r0, 801d506 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801d502:	f7ff f81d 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d506:	4621      	mov	r1, r4
 801d508:	2004      	movs	r0, #4
 801d50a:	f7fe fb01 	bl	801bb10 <memp_free>
  while (seg != NULL) {
 801d50e:	2e00      	cmp	r6, #0
 801d510:	d1f3      	bne.n	801d4fa <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801d512:	9c05      	ldr	r4, [sp, #20]
 801d514:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801d516:	e70e      	b.n	801d336 <tcp_slowtmr+0xca>
 801d518:	2002e4ac 	.word	0x2002e4ac
 801d51c:	08045654 	.word	0x08045654
 801d520:	2002e49c 	.word	0x2002e49c
 801d524:	000a4cb8 	.word	0x000a4cb8
 801d528:	10624dd3 	.word	0x10624dd3
 801d52c:	2002e4a0 	.word	0x2002e4a0
 801d530:	0802b3cc 	.word	0x0802b3cc
 801d534:	080459c0 	.word	0x080459c0
 801d538:	08045938 	.word	0x08045938
 801d53c:	08045964 	.word	0x08045964
 801d540:	08045990 	.word	0x08045990
 801d544:	2002e4b1 	.word	0x2002e4b1
 801d548:	2002e4b4 	.word	0x2002e4b4
 801d54c:	08045a84 	.word	0x08045a84
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801d550:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801d554:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801d558:	b291      	uxth	r1, r2
 801d55a:	4281      	cmp	r1, r0
 801d55c:	d802      	bhi.n	801d564 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801d55e:	1c4a      	adds	r2, r1, #1
 801d560:	b212      	sxth	r2, r2
 801d562:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801d564:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801d568:	4291      	cmp	r1, r2
 801d56a:	f73f aeb1 	bgt.w	801d2d0 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d56e:	4620      	mov	r0, r4
 801d570:	f003 f85a 	bl	8020628 <tcp_rexmit_rto_prepare>
 801d574:	2800      	cmp	r0, #0
 801d576:	f000 80a0 	beq.w	801d6ba <tcp_slowtmr+0x44e>
 801d57a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	f000 8098 	beq.w	801d6b2 <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801d582:	7d23      	ldrb	r3, [r4, #20]
 801d584:	e6a4      	b.n	801d2d0 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801d586:	4620      	mov	r0, r4
 801d588:	f7ff fe1e 	bl	801d1c8 <tcp_pcb_purge>
      if (prev != NULL) {
 801d58c:	2e00      	cmp	r6, #0
 801d58e:	f000 80d1 	beq.w	801d734 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801d592:	f8d9 3000 	ldr.w	r3, [r9]
 801d596:	42a3      	cmp	r3, r4
 801d598:	f000 80ee 	beq.w	801d778 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801d59c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801d5a0:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d5a4:	7d23      	ldrb	r3, [r4, #20]
 801d5a6:	2b01      	cmp	r3, #1
 801d5a8:	f000 80d7 	beq.w	801d75a <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801d5ac:	4621      	mov	r1, r4
      pcb = pcb->next;
 801d5ae:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801d5b0:	2002      	movs	r0, #2
 801d5b2:	f7fe faad 	bl	801bb10 <memp_free>
  while (pcb != NULL) {
 801d5b6:	2c00      	cmp	r4, #0
 801d5b8:	f47f af01 	bne.w	801d3be <tcp_slowtmr+0x152>
 801d5bc:	e713      	b.n	801d3e6 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801d5be:	4620      	mov	r0, r4
 801d5c0:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d5c2:	4634      	mov	r4, r6
          tcp_output(prev);
 801d5c4:	f003 f96e 	bl	80208a4 <tcp_output>
  while (pcb != NULL) {
 801d5c8:	2c00      	cmp	r4, #0
 801d5ca:	f47f ae65 	bne.w	801d298 <tcp_slowtmr+0x2c>
 801d5ce:	e6eb      	b.n	801d3a8 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801d5d0:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801d5d4:	4870      	ldr	r0, [pc, #448]	; (801d798 <tcp_slowtmr+0x52c>)
 801d5d6:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801d5da:	4b70      	ldr	r3, [pc, #448]	; (801d79c <tcp_slowtmr+0x530>)
 801d5dc:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d5e0:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801d5e4:	f67f af3a 	bls.w	801d45c <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801d5e8:	4620      	mov	r0, r4
 801d5ea:	f003 fb91 	bl	8020d10 <tcp_keepalive>
        if (err == ERR_OK) {
 801d5ee:	2800      	cmp	r0, #0
 801d5f0:	f47f af34 	bne.w	801d45c <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801d5f4:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801d5f8:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801d5fa:	3301      	adds	r3, #1
 801d5fc:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801d600:	e68c      	b.n	801d31c <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d602:	8b23      	ldrh	r3, [r4, #24]
 801d604:	4620      	mov	r0, r4
 801d606:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d608:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801d60a:	9302      	str	r3, [sp, #8]
 801d60c:	8ae3      	ldrh	r3, [r4, #22]
 801d60e:	9301      	str	r3, [sp, #4]
 801d610:	1d23      	adds	r3, r4, #4
 801d612:	9300      	str	r3, [sp, #0]
 801d614:	4623      	mov	r3, r4
 801d616:	f003 f8cb 	bl	80207b0 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d61a:	7d23      	ldrb	r3, [r4, #20]
 801d61c:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801d61e:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d622:	f47f aead 	bne.w	801d380 <tcp_slowtmr+0x114>
 801d626:	463b      	mov	r3, r7
 801d628:	22d4      	movs	r2, #212	; 0xd4
 801d62a:	495d      	ldr	r1, [pc, #372]	; (801d7a0 <tcp_slowtmr+0x534>)
 801d62c:	485d      	ldr	r0, [pc, #372]	; (801d7a4 <tcp_slowtmr+0x538>)
 801d62e:	f009 f851 	bl	80266d4 <iprintf>
 801d632:	e6a5      	b.n	801d380 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d634:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801d638:	4a5b      	ldr	r2, [pc, #364]	; (801d7a8 <tcp_slowtmr+0x53c>)
 801d63a:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801d63c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d640:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801d644:	4293      	cmp	r3, r2
 801d646:	d216      	bcs.n	801d676 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801d648:	3301      	adds	r3, #1
 801d64a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801d64c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801d64e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801d652:	d210      	bcs.n	801d676 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801d654:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801d656:	f04f 0800 	mov.w	r8, #0
 801d65a:	e639      	b.n	801d2d0 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801d65c:	42a3      	cmp	r3, r4
 801d65e:	d006      	beq.n	801d66e <tcp_slowtmr+0x402>
 801d660:	463b      	mov	r3, r7
 801d662:	f240 5271 	movw	r2, #1393	; 0x571
 801d666:	4951      	ldr	r1, [pc, #324]	; (801d7ac <tcp_slowtmr+0x540>)
 801d668:	484e      	ldr	r0, [pc, #312]	; (801d7a4 <tcp_slowtmr+0x538>)
 801d66a:	f009 f833 	bl	80266d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 801d66e:	68e3      	ldr	r3, [r4, #12]
 801d670:	4a4f      	ldr	r2, [pc, #316]	; (801d7b0 <tcp_slowtmr+0x544>)
 801d672:	6013      	str	r3, [r2, #0]
 801d674:	e67a      	b.n	801d36c <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801d676:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801d67a:	b936      	cbnz	r6, 801d68a <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801d67c:	4620      	mov	r0, r4
 801d67e:	f003 fb6d 	bl	8020d5c <tcp_zero_window_probe>
 801d682:	b140      	cbz	r0, 801d696 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801d684:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801d686:	7d23      	ldrb	r3, [r4, #20]
 801d688:	e622      	b.n	801d2d0 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801d68a:	4631      	mov	r1, r6
 801d68c:	4620      	mov	r0, r4
 801d68e:	f002 fe17 	bl	80202c0 <tcp_split_unsent_seg>
 801d692:	2800      	cmp	r0, #0
 801d694:	d078      	beq.n	801d788 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d696:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801d69a:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d69e:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801d6a0:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d6a4:	f63f af6d 	bhi.w	801d582 <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801d6a8:	3301      	adds	r3, #1
 801d6aa:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801d6ae:	7d23      	ldrb	r3, [r4, #20]
 801d6b0:	e60e      	b.n	801d2d0 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d6b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	f43f af64 	beq.w	801d582 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801d6ba:	7d23      	ldrb	r3, [r4, #20]
 801d6bc:	2b02      	cmp	r3, #2
 801d6be:	d014      	beq.n	801d6ea <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801d6c0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801d6c4:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801d6c8:	2a0c      	cmp	r2, #12
 801d6ca:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801d6ce:	bf28      	it	cs
 801d6d0:	220c      	movcs	r2, #12
 801d6d2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801d6d6:	4937      	ldr	r1, [pc, #220]	; (801d7b4 <tcp_slowtmr+0x548>)
 801d6d8:	5c8a      	ldrb	r2, [r1, r2]
 801d6da:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801d6dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d6e0:	4293      	cmp	r3, r2
 801d6e2:	bfa8      	it	ge
 801d6e4:	4613      	movge	r3, r2
 801d6e6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d6ea:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801d6ee:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d6f0:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d6f4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801d6f6:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801d6f8:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d6fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801d700:	bf28      	it	cs
 801d702:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d704:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d706:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801d70a:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d70e:	bf88      	it	hi
 801d710:	4613      	movhi	r3, r2
 801d712:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801d716:	2300      	movs	r3, #0
 801d718:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801d71a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801d71e:	f003 faab 	bl	8020c78 <tcp_rexmit_rto_commit>
 801d722:	e72e      	b.n	801d582 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d724:	463b      	mov	r3, r7
 801d726:	f240 526d 	movw	r2, #1389	; 0x56d
 801d72a:	4923      	ldr	r1, [pc, #140]	; (801d7b8 <tcp_slowtmr+0x54c>)
 801d72c:	481d      	ldr	r0, [pc, #116]	; (801d7a4 <tcp_slowtmr+0x538>)
 801d72e:	f008 ffd1 	bl	80266d4 <iprintf>
 801d732:	e618      	b.n	801d366 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801d734:	f8d9 3000 	ldr.w	r3, [r9]
 801d738:	42a3      	cmp	r3, r4
 801d73a:	d006      	beq.n	801d74a <tcp_slowtmr+0x4de>
 801d73c:	4643      	mov	r3, r8
 801d73e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801d742:	491e      	ldr	r1, [pc, #120]	; (801d7bc <tcp_slowtmr+0x550>)
 801d744:	4638      	mov	r0, r7
 801d746:	f008 ffc5 	bl	80266d4 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d74a:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801d74c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d750:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801d752:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d756:	f47f af29 	bne.w	801d5ac <tcp_slowtmr+0x340>
 801d75a:	4643      	mov	r3, r8
 801d75c:	22d4      	movs	r2, #212	; 0xd4
 801d75e:	4910      	ldr	r1, [pc, #64]	; (801d7a0 <tcp_slowtmr+0x534>)
 801d760:	4638      	mov	r0, r7
 801d762:	f008 ffb7 	bl	80266d4 <iprintf>
 801d766:	e721      	b.n	801d5ac <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d768:	463b      	mov	r3, r7
 801d76a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801d76e:	4914      	ldr	r1, [pc, #80]	; (801d7c0 <tcp_slowtmr+0x554>)
 801d770:	480c      	ldr	r0, [pc, #48]	; (801d7a4 <tcp_slowtmr+0x538>)
 801d772:	f008 ffaf 	bl	80266d4 <iprintf>
 801d776:	e686      	b.n	801d486 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801d778:	4643      	mov	r3, r8
 801d77a:	f240 52af 	movw	r2, #1455	; 0x5af
 801d77e:	4911      	ldr	r1, [pc, #68]	; (801d7c4 <tcp_slowtmr+0x558>)
 801d780:	4638      	mov	r0, r7
 801d782:	f008 ffa7 	bl	80266d4 <iprintf>
 801d786:	e709      	b.n	801d59c <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801d788:	4620      	mov	r0, r4
 801d78a:	f003 f88b 	bl	80208a4 <tcp_output>
 801d78e:	2800      	cmp	r0, #0
 801d790:	d181      	bne.n	801d696 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801d792:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801d794:	7d23      	ldrb	r3, [r4, #20]
 801d796:	e59b      	b.n	801d2d0 <tcp_slowtmr+0x64>
 801d798:	000124f8 	.word	0x000124f8
 801d79c:	10624dd3 	.word	0x10624dd3
 801d7a0:	08045690 	.word	0x08045690
 801d7a4:	0802b3cc 	.word	0x0802b3cc
 801d7a8:	08045d48 	.word	0x08045d48
 801d7ac:	08045a58 	.word	0x08045a58
 801d7b0:	2002e49c 	.word	0x2002e49c
 801d7b4:	08045d28 	.word	0x08045d28
 801d7b8:	08045a2c 	.word	0x08045a2c
 801d7bc:	08045adc 	.word	0x08045adc
 801d7c0:	080459f4 	.word	0x080459f4
 801d7c4:	08045ab4 	.word	0x08045ab4

0801d7c8 <tcp_pcb_remove>:
{
 801d7c8:	b538      	push	{r3, r4, r5, lr}
 801d7ca:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d7cc:	460c      	mov	r4, r1
 801d7ce:	2900      	cmp	r1, #0
 801d7d0:	d04a      	beq.n	801d868 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d7d2:	2d00      	cmp	r5, #0
 801d7d4:	d051      	beq.n	801d87a <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801d7d6:	682b      	ldr	r3, [r5, #0]
 801d7d8:	42a3      	cmp	r3, r4
 801d7da:	d032      	beq.n	801d842 <tcp_pcb_remove+0x7a>
 801d7dc:	b12b      	cbz	r3, 801d7ea <tcp_pcb_remove+0x22>
 801d7de:	68da      	ldr	r2, [r3, #12]
 801d7e0:	42a2      	cmp	r2, r4
 801d7e2:	d03e      	beq.n	801d862 <tcp_pcb_remove+0x9a>
 801d7e4:	4613      	mov	r3, r2
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	d1f9      	bne.n	801d7de <tcp_pcb_remove+0x16>
 801d7ea:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801d7ec:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801d7ee:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801d7f0:	f7ff fcea 	bl	801d1c8 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801d7f4:	7d23      	ldrb	r3, [r4, #20]
 801d7f6:	2b0a      	cmp	r3, #10
 801d7f8:	d02d      	beq.n	801d856 <tcp_pcb_remove+0x8e>
 801d7fa:	2b01      	cmp	r3, #1
 801d7fc:	d01d      	beq.n	801d83a <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801d7fe:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801d800:	07da      	lsls	r2, r3, #31
 801d802:	d421      	bmi.n	801d848 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d804:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d806:	b133      	cbz	r3, 801d816 <tcp_pcb_remove+0x4e>
 801d808:	4b20      	ldr	r3, [pc, #128]	; (801d88c <tcp_pcb_remove+0xc4>)
 801d80a:	f640 0293 	movw	r2, #2195	; 0x893
 801d80e:	4920      	ldr	r1, [pc, #128]	; (801d890 <tcp_pcb_remove+0xc8>)
 801d810:	4820      	ldr	r0, [pc, #128]	; (801d894 <tcp_pcb_remove+0xcc>)
 801d812:	f008 ff5f 	bl	80266d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801d816:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d818:	b133      	cbz	r3, 801d828 <tcp_pcb_remove+0x60>
 801d81a:	4b1c      	ldr	r3, [pc, #112]	; (801d88c <tcp_pcb_remove+0xc4>)
 801d81c:	f640 0294 	movw	r2, #2196	; 0x894
 801d820:	491d      	ldr	r1, [pc, #116]	; (801d898 <tcp_pcb_remove+0xd0>)
 801d822:	481c      	ldr	r0, [pc, #112]	; (801d894 <tcp_pcb_remove+0xcc>)
 801d824:	f008 ff56 	bl	80266d4 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801d828:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d82a:	b133      	cbz	r3, 801d83a <tcp_pcb_remove+0x72>
 801d82c:	4b17      	ldr	r3, [pc, #92]	; (801d88c <tcp_pcb_remove+0xc4>)
 801d82e:	f640 0296 	movw	r2, #2198	; 0x896
 801d832:	491a      	ldr	r1, [pc, #104]	; (801d89c <tcp_pcb_remove+0xd4>)
 801d834:	4817      	ldr	r0, [pc, #92]	; (801d894 <tcp_pcb_remove+0xcc>)
 801d836:	f008 ff4d 	bl	80266d4 <iprintf>
  pcb->state = CLOSED;
 801d83a:	2300      	movs	r3, #0
 801d83c:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801d83e:	82e3      	strh	r3, [r4, #22]
}
 801d840:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801d842:	68e3      	ldr	r3, [r4, #12]
 801d844:	602b      	str	r3, [r5, #0]
 801d846:	e7d0      	b.n	801d7ea <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801d848:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801d84c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801d84e:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801d850:	f003 f828 	bl	80208a4 <tcp_output>
  if (pcb->state != LISTEN) {
 801d854:	7d23      	ldrb	r3, [r4, #20]
 801d856:	2b01      	cmp	r3, #1
 801d858:	d0ef      	beq.n	801d83a <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d85a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d1d3      	bne.n	801d808 <tcp_pcb_remove+0x40>
 801d860:	e7d9      	b.n	801d816 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801d862:	68e2      	ldr	r2, [r4, #12]
 801d864:	60da      	str	r2, [r3, #12]
 801d866:	e7c0      	b.n	801d7ea <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d868:	4b08      	ldr	r3, [pc, #32]	; (801d88c <tcp_pcb_remove+0xc4>)
 801d86a:	f640 0283 	movw	r2, #2179	; 0x883
 801d86e:	490c      	ldr	r1, [pc, #48]	; (801d8a0 <tcp_pcb_remove+0xd8>)
 801d870:	4808      	ldr	r0, [pc, #32]	; (801d894 <tcp_pcb_remove+0xcc>)
 801d872:	f008 ff2f 	bl	80266d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d876:	2d00      	cmp	r5, #0
 801d878:	d1ad      	bne.n	801d7d6 <tcp_pcb_remove+0xe>
 801d87a:	4b04      	ldr	r3, [pc, #16]	; (801d88c <tcp_pcb_remove+0xc4>)
 801d87c:	f640 0284 	movw	r2, #2180	; 0x884
 801d880:	4908      	ldr	r1, [pc, #32]	; (801d8a4 <tcp_pcb_remove+0xdc>)
 801d882:	4804      	ldr	r0, [pc, #16]	; (801d894 <tcp_pcb_remove+0xcc>)
 801d884:	f008 ff26 	bl	80266d4 <iprintf>
 801d888:	e7a5      	b.n	801d7d6 <tcp_pcb_remove+0xe>
 801d88a:	bf00      	nop
 801d88c:	08045654 	.word	0x08045654
 801d890:	08045b40 	.word	0x08045b40
 801d894:	0802b3cc 	.word	0x0802b3cc
 801d898:	08045b58 	.word	0x08045b58
 801d89c:	08045b74 	.word	0x08045b74
 801d8a0:	08045b04 	.word	0x08045b04
 801d8a4:	08045b20 	.word	0x08045b20

0801d8a8 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801d8a8:	2800      	cmp	r0, #0
 801d8aa:	f000 80ad 	beq.w	801da08 <tcp_abandon+0x160>
{
 801d8ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d8b2:	7d03      	ldrb	r3, [r0, #20]
{
 801d8b4:	b087      	sub	sp, #28
 801d8b6:	4605      	mov	r5, r0
 801d8b8:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d8ba:	2b01      	cmp	r3, #1
 801d8bc:	f000 808b 	beq.w	801d9d6 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801d8c0:	2b0a      	cmp	r3, #10
 801d8c2:	f000 8093 	beq.w	801d9ec <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801d8c6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801d8c8:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801d8cc:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801d8d0:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801d8d4:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801d8d6:	b96b      	cbnz	r3, 801d8f4 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801d8d8:	8aef      	ldrh	r7, [r5, #22]
 801d8da:	2f00      	cmp	r7, #0
 801d8dc:	d052      	beq.n	801d984 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d8de:	4a51      	ldr	r2, [pc, #324]	; (801da24 <tcp_abandon+0x17c>)
 801d8e0:	6813      	ldr	r3, [r2, #0]
 801d8e2:	42ab      	cmp	r3, r5
 801d8e4:	d074      	beq.n	801d9d0 <tcp_abandon+0x128>
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d050      	beq.n	801d98c <tcp_abandon+0xe4>
 801d8ea:	68da      	ldr	r2, [r3, #12]
 801d8ec:	42aa      	cmp	r2, r5
 801d8ee:	d04b      	beq.n	801d988 <tcp_abandon+0xe0>
 801d8f0:	4613      	mov	r3, r2
 801d8f2:	e7f8      	b.n	801d8e6 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d8f4:	4629      	mov	r1, r5
 801d8f6:	484c      	ldr	r0, [pc, #304]	; (801da28 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801d8f8:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d8fa:	f7ff ff65 	bl	801d7c8 <tcp_pcb_remove>
 801d8fe:	4b4b      	ldr	r3, [pc, #300]	; (801da2c <tcp_abandon+0x184>)
 801d900:	2201      	movs	r2, #1
 801d902:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801d904:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801d906:	b164      	cbz	r4, 801d922 <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801d908:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d90a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d90c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d910:	b108      	cbz	r0, 801d916 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801d912:	f7fe fe15 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d916:	4651      	mov	r1, sl
 801d918:	2004      	movs	r0, #4
 801d91a:	f7fe f8f9 	bl	801bb10 <memp_free>
  while (seg != NULL) {
 801d91e:	2c00      	cmp	r4, #0
 801d920:	d1f2      	bne.n	801d908 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801d922:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801d924:	b164      	cbz	r4, 801d940 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801d926:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d928:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d92a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d92e:	b108      	cbz	r0, 801d934 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801d930:	f7fe fe06 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d934:	4651      	mov	r1, sl
 801d936:	2004      	movs	r0, #4
 801d938:	f7fe f8ea 	bl	801bb10 <memp_free>
  while (seg != NULL) {
 801d93c:	2c00      	cmp	r4, #0
 801d93e:	d1f2      	bne.n	801d926 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801d940:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801d942:	b164      	cbz	r4, 801d95e <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801d944:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d946:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d948:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d94c:	b108      	cbz	r0, 801d952 <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801d94e:	f7fe fdf7 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d952:	4651      	mov	r1, sl
 801d954:	2004      	movs	r0, #4
 801d956:	f7fe f8db 	bl	801bb10 <memp_free>
  while (seg != NULL) {
 801d95a:	2c00      	cmp	r4, #0
 801d95c:	d1f2      	bne.n	801d944 <tcp_abandon+0x9c>
    if (send_rst) {
 801d95e:	b9ce      	cbnz	r6, 801d994 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d960:	7d2b      	ldrb	r3, [r5, #20]
 801d962:	2b01      	cmp	r3, #1
 801d964:	d024      	beq.n	801d9b0 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801d966:	4629      	mov	r1, r5
 801d968:	2002      	movs	r0, #2
 801d96a:	f7fe f8d1 	bl	801bb10 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d96e:	f1b8 0f00 	cmp.w	r8, #0
 801d972:	d02a      	beq.n	801d9ca <tcp_abandon+0x122>
 801d974:	f06f 010c 	mvn.w	r1, #12
 801d978:	4648      	mov	r0, r9
 801d97a:	4643      	mov	r3, r8
}
 801d97c:	b007      	add	sp, #28
 801d97e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d982:	4718      	bx	r3
    int send_rst = 0;
 801d984:	461e      	mov	r6, r3
 801d986:	e7bd      	b.n	801d904 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d988:	68ea      	ldr	r2, [r5, #12]
 801d98a:	60da      	str	r2, [r3, #12]
 801d98c:	2700      	movs	r7, #0
    int send_rst = 0;
 801d98e:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d990:	60ef      	str	r7, [r5, #12]
 801d992:	e7b7      	b.n	801d904 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801d994:	9701      	str	r7, [sp, #4]
 801d996:	465a      	mov	r2, fp
 801d998:	8b2b      	ldrh	r3, [r5, #24]
 801d99a:	4628      	mov	r0, r5
 801d99c:	9905      	ldr	r1, [sp, #20]
 801d99e:	9302      	str	r3, [sp, #8]
 801d9a0:	1d2b      	adds	r3, r5, #4
 801d9a2:	9300      	str	r3, [sp, #0]
 801d9a4:	462b      	mov	r3, r5
 801d9a6:	f002 ff03 	bl	80207b0 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d9aa:	7d2b      	ldrb	r3, [r5, #20]
 801d9ac:	2b01      	cmp	r3, #1
 801d9ae:	d1da      	bne.n	801d966 <tcp_abandon+0xbe>
 801d9b0:	491f      	ldr	r1, [pc, #124]	; (801da30 <tcp_abandon+0x188>)
 801d9b2:	22d4      	movs	r2, #212	; 0xd4
 801d9b4:	4b1f      	ldr	r3, [pc, #124]	; (801da34 <tcp_abandon+0x18c>)
 801d9b6:	4820      	ldr	r0, [pc, #128]	; (801da38 <tcp_abandon+0x190>)
 801d9b8:	f008 fe8c 	bl	80266d4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801d9bc:	4629      	mov	r1, r5
 801d9be:	2002      	movs	r0, #2
 801d9c0:	f7fe f8a6 	bl	801bb10 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d9c4:	f1b8 0f00 	cmp.w	r8, #0
 801d9c8:	d1d4      	bne.n	801d974 <tcp_abandon+0xcc>
}
 801d9ca:	b007      	add	sp, #28
 801d9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d9d0:	68eb      	ldr	r3, [r5, #12]
 801d9d2:	6013      	str	r3, [r2, #0]
 801d9d4:	e7da      	b.n	801d98c <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d9d6:	4b17      	ldr	r3, [pc, #92]	; (801da34 <tcp_abandon+0x18c>)
 801d9d8:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d9dc:	4917      	ldr	r1, [pc, #92]	; (801da3c <tcp_abandon+0x194>)
 801d9de:	4816      	ldr	r0, [pc, #88]	; (801da38 <tcp_abandon+0x190>)
 801d9e0:	f008 fe78 	bl	80266d4 <iprintf>
  if (pcb->state == TIME_WAIT) {
 801d9e4:	7d2b      	ldrb	r3, [r5, #20]
 801d9e6:	2b0a      	cmp	r3, #10
 801d9e8:	f47f af6d 	bne.w	801d8c6 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801d9ec:	4629      	mov	r1, r5
 801d9ee:	4814      	ldr	r0, [pc, #80]	; (801da40 <tcp_abandon+0x198>)
 801d9f0:	f7ff feea 	bl	801d7c8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d9f4:	7d2b      	ldrb	r3, [r5, #20]
 801d9f6:	2b01      	cmp	r3, #1
 801d9f8:	d00d      	beq.n	801da16 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801d9fa:	4629      	mov	r1, r5
 801d9fc:	2002      	movs	r0, #2
}
 801d9fe:	b007      	add	sp, #28
 801da00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801da04:	f7fe b884 	b.w	801bb10 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801da08:	4b0a      	ldr	r3, [pc, #40]	; (801da34 <tcp_abandon+0x18c>)
 801da0a:	f240 223d 	movw	r2, #573	; 0x23d
 801da0e:	490d      	ldr	r1, [pc, #52]	; (801da44 <tcp_abandon+0x19c>)
 801da10:	4809      	ldr	r0, [pc, #36]	; (801da38 <tcp_abandon+0x190>)
 801da12:	f008 be5f 	b.w	80266d4 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801da16:	4b07      	ldr	r3, [pc, #28]	; (801da34 <tcp_abandon+0x18c>)
 801da18:	22d4      	movs	r2, #212	; 0xd4
 801da1a:	4905      	ldr	r1, [pc, #20]	; (801da30 <tcp_abandon+0x188>)
 801da1c:	4806      	ldr	r0, [pc, #24]	; (801da38 <tcp_abandon+0x190>)
 801da1e:	f008 fe59 	bl	80266d4 <iprintf>
 801da22:	e7ea      	b.n	801d9fa <tcp_abandon+0x152>
 801da24:	2002e4a4 	.word	0x2002e4a4
 801da28:	2002e49c 	.word	0x2002e49c
 801da2c:	2002e4a0 	.word	0x2002e4a0
 801da30:	08045690 	.word	0x08045690
 801da34:	08045654 	.word	0x08045654
 801da38:	0802b3cc 	.word	0x0802b3cc
 801da3c:	08045ba8 	.word	0x08045ba8
 801da40:	2002e4b4 	.word	0x2002e4b4
 801da44:	08045b8c 	.word	0x08045b8c

0801da48 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801da48:	2101      	movs	r1, #1
 801da4a:	f7ff bf2d 	b.w	801d8a8 <tcp_abandon>
 801da4e:	bf00      	nop

0801da50 <tcp_accept_null>:
{
 801da50:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801da52:	460c      	mov	r4, r1
 801da54:	b131      	cbz	r1, 801da64 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801da56:	4620      	mov	r0, r4
 801da58:	2101      	movs	r1, #1
 801da5a:	f7ff ff25 	bl	801d8a8 <tcp_abandon>
}
 801da5e:	f06f 000c 	mvn.w	r0, #12
 801da62:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801da64:	4b06      	ldr	r3, [pc, #24]	; (801da80 <tcp_accept_null+0x30>)
 801da66:	f240 320f 	movw	r2, #783	; 0x30f
 801da6a:	4906      	ldr	r1, [pc, #24]	; (801da84 <tcp_accept_null+0x34>)
 801da6c:	4806      	ldr	r0, [pc, #24]	; (801da88 <tcp_accept_null+0x38>)
 801da6e:	f008 fe31 	bl	80266d4 <iprintf>
  tcp_abandon(pcb, 1);
 801da72:	4620      	mov	r0, r4
 801da74:	2101      	movs	r1, #1
 801da76:	f7ff ff17 	bl	801d8a8 <tcp_abandon>
}
 801da7a:	f06f 000c 	mvn.w	r0, #12
 801da7e:	bd10      	pop	{r4, pc}
 801da80:	08045654 	.word	0x08045654
 801da84:	08045bdc 	.word	0x08045bdc
 801da88:	0802b3cc 	.word	0x0802b3cc

0801da8c <tcp_netif_ip_addr_changed_pcblist>:
{
 801da8c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801da8e:	4605      	mov	r5, r0
{
 801da90:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801da92:	b178      	cbz	r0, 801dab4 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801da94:	b134      	cbz	r4, 801daa4 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801da96:	6822      	ldr	r2, [r4, #0]
 801da98:	682b      	ldr	r3, [r5, #0]
 801da9a:	429a      	cmp	r2, r3
 801da9c:	d003      	beq.n	801daa6 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801da9e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801daa0:	2c00      	cmp	r4, #0
 801daa2:	d1f8      	bne.n	801da96 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801daa4:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801daa6:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801daa8:	4620      	mov	r0, r4
 801daaa:	2101      	movs	r1, #1
      pcb = next;
 801daac:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801daae:	f7ff fefb 	bl	801d8a8 <tcp_abandon>
      pcb = next;
 801dab2:	e7ef      	b.n	801da94 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801dab4:	4b03      	ldr	r3, [pc, #12]	; (801dac4 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801dab6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801daba:	4903      	ldr	r1, [pc, #12]	; (801dac8 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801dabc:	4803      	ldr	r0, [pc, #12]	; (801dacc <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801dabe:	f008 fe09 	bl	80266d4 <iprintf>
 801dac2:	e7e7      	b.n	801da94 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801dac4:	08045654 	.word	0x08045654
 801dac8:	08045bfc 	.word	0x08045bfc
 801dacc:	0802b3cc 	.word	0x0802b3cc

0801dad0 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dad0:	4b0f      	ldr	r3, [pc, #60]	; (801db10 <tcp_kill_state+0x40>)
 801dad2:	6819      	ldr	r1, [r3, #0]
 801dad4:	b1d1      	cbz	r1, 801db0c <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dad6:	4b0f      	ldr	r3, [pc, #60]	; (801db14 <tcp_kill_state+0x44>)
  inactivity = 0;
 801dad8:	2200      	movs	r2, #0
{
 801dada:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dadc:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801dade:	4614      	mov	r4, r2
 801dae0:	e001      	b.n	801dae6 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dae2:	68c9      	ldr	r1, [r1, #12]
 801dae4:	b159      	cbz	r1, 801dafe <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801dae6:	7d0b      	ldrb	r3, [r1, #20]
 801dae8:	4283      	cmp	r3, r0
 801daea:	d1fa      	bne.n	801dae2 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801daec:	6a0b      	ldr	r3, [r1, #32]
 801daee:	1aeb      	subs	r3, r5, r3
 801daf0:	4293      	cmp	r3, r2
 801daf2:	d3f6      	bcc.n	801dae2 <tcp_kill_state+0x12>
 801daf4:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801daf6:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801daf8:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dafa:	2900      	cmp	r1, #0
 801dafc:	d1f3      	bne.n	801dae6 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801dafe:	b11c      	cbz	r4, 801db08 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801db00:	4620      	mov	r0, r4
}
 801db02:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801db04:	f7ff bed0 	b.w	801d8a8 <tcp_abandon>
}
 801db08:	bc30      	pop	{r4, r5}
 801db0a:	4770      	bx	lr
 801db0c:	4770      	bx	lr
 801db0e:	bf00      	nop
 801db10:	2002e49c 	.word	0x2002e49c
 801db14:	2002e4ac 	.word	0x2002e4ac

0801db18 <tcp_alloc>:
{
 801db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801db1a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801db1e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801db20:	494f      	ldr	r1, [pc, #316]	; (801dc60 <tcp_alloc+0x148>)
 801db22:	2002      	movs	r0, #2
 801db24:	f7fd ffbe 	bl	801baa4 <memp_malloc_fn>
  if (pcb == NULL) {
 801db28:	4603      	mov	r3, r0
 801db2a:	b320      	cbz	r0, 801db76 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801db2c:	229c      	movs	r2, #156	; 0x9c
 801db2e:	2100      	movs	r1, #0
 801db30:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801db32:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801db36:	f007 fe2f 	bl	8025798 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801db3a:	494a      	ldr	r1, [pc, #296]	; (801dc64 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801db3c:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801db3e:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801db40:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801db42:	4849      	ldr	r0, [pc, #292]	; (801dc68 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801db44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801db48:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801db4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801db4c:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801db4e:	4a47      	ldr	r2, [pc, #284]	; (801dc6c <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801db50:	4947      	ldr	r1, [pc, #284]	; (801dc70 <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801db52:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801db56:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801db58:	4c46      	ldr	r4, [pc, #280]	; (801dc74 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801db5a:	4847      	ldr	r0, [pc, #284]	; (801dc78 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801db5c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801db60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801db64:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801db66:	4945      	ldr	r1, [pc, #276]	; (801dc7c <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801db68:	6498      	str	r0, [r3, #72]	; 0x48
}
 801db6a:	4618      	mov	r0, r3
    pcb->prio = prio;
 801db6c:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801db6e:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801db70:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801db72:	72da      	strb	r2, [r3, #11]
}
 801db74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801db76:	4e42      	ldr	r6, [pc, #264]	; (801dc80 <tcp_alloc+0x168>)
 801db78:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801db7a:	b15c      	cbz	r4, 801db94 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801db7c:	4620      	mov	r0, r4
 801db7e:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801db80:	8b43      	ldrh	r3, [r0, #26]
 801db82:	0719      	lsls	r1, r3, #28
 801db84:	d5f9      	bpl.n	801db7a <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801db86:	f023 0308 	bic.w	r3, r3, #8
 801db8a:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801db8c:	f7fe ffd8 	bl	801cb40 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801db90:	2c00      	cmp	r4, #0
 801db92:	d1f3      	bne.n	801db7c <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801db94:	4b3b      	ldr	r3, [pc, #236]	; (801dc84 <tcp_alloc+0x16c>)
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	b193      	cbz	r3, 801dbc0 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801db9a:	4a33      	ldr	r2, [pc, #204]	; (801dc68 <tcp_alloc+0x150>)
 801db9c:	4618      	mov	r0, r3
 801db9e:	6a19      	ldr	r1, [r3, #32]
 801dba0:	6814      	ldr	r4, [r2, #0]
 801dba2:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dba4:	68db      	ldr	r3, [r3, #12]
 801dba6:	b143      	cbz	r3, 801dbba <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dba8:	6a1a      	ldr	r2, [r3, #32]
 801dbaa:	1aa2      	subs	r2, r4, r2
 801dbac:	428a      	cmp	r2, r1
 801dbae:	d3f9      	bcc.n	801dba4 <tcp_alloc+0x8c>
 801dbb0:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dbb2:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dbb4:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	d1f6      	bne.n	801dba8 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801dbba:	2101      	movs	r1, #1
 801dbbc:	f7ff fe74 	bl	801d8a8 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dbc0:	f240 7239 	movw	r2, #1849	; 0x739
 801dbc4:	4926      	ldr	r1, [pc, #152]	; (801dc60 <tcp_alloc+0x148>)
 801dbc6:	2002      	movs	r0, #2
 801dbc8:	f7fd ff6c 	bl	801baa4 <memp_malloc_fn>
    if (pcb == NULL) {
 801dbcc:	4603      	mov	r3, r0
 801dbce:	2800      	cmp	r0, #0
 801dbd0:	d1ac      	bne.n	801db2c <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801dbd2:	2009      	movs	r0, #9
 801dbd4:	f7ff ff7c 	bl	801dad0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dbd8:	f240 723f 	movw	r2, #1855	; 0x73f
 801dbdc:	4920      	ldr	r1, [pc, #128]	; (801dc60 <tcp_alloc+0x148>)
 801dbde:	2002      	movs	r0, #2
 801dbe0:	f7fd ff60 	bl	801baa4 <memp_malloc_fn>
      if (pcb == NULL) {
 801dbe4:	4603      	mov	r3, r0
 801dbe6:	2800      	cmp	r0, #0
 801dbe8:	d1a0      	bne.n	801db2c <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801dbea:	2008      	movs	r0, #8
 801dbec:	f7ff ff70 	bl	801dad0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dbf0:	f240 7245 	movw	r2, #1861	; 0x745
 801dbf4:	491a      	ldr	r1, [pc, #104]	; (801dc60 <tcp_alloc+0x148>)
 801dbf6:	2002      	movs	r0, #2
 801dbf8:	f7fd ff54 	bl	801baa4 <memp_malloc_fn>
        if (pcb == NULL) {
 801dbfc:	4603      	mov	r3, r0
 801dbfe:	2800      	cmp	r0, #0
 801dc00:	d194      	bne.n	801db2c <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801dc02:	062a      	lsls	r2, r5, #24
 801dc04:	d42a      	bmi.n	801dc5c <tcp_alloc+0x144>
  if (mprio == 0) {
 801dc06:	b1ed      	cbz	r5, 801dc44 <tcp_alloc+0x12c>
 801dc08:	462a      	mov	r2, r5
  mprio--;
 801dc0a:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc0c:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801dc0e:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc10:	b1c2      	cbz	r2, 801dc44 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801dc12:	4815      	ldr	r0, [pc, #84]	; (801dc68 <tcp_alloc+0x150>)
  inactivity = 0;
 801dc14:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801dc16:	6807      	ldr	r7, [r0, #0]
 801dc18:	e005      	b.n	801dc26 <tcp_alloc+0x10e>
 801dc1a:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801dc1c:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801dc1e:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801dc20:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc22:	68d2      	ldr	r2, [r2, #12]
 801dc24:	b14a      	cbz	r2, 801dc3a <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801dc26:	7d50      	ldrb	r0, [r2, #21]
 801dc28:	4288      	cmp	r0, r1
 801dc2a:	d3f6      	bcc.n	801dc1a <tcp_alloc+0x102>
 801dc2c:	d1f9      	bne.n	801dc22 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801dc2e:	6a14      	ldr	r4, [r2, #32]
 801dc30:	eba7 0e04 	sub.w	lr, r7, r4
 801dc34:	45b6      	cmp	lr, r6
 801dc36:	d3f4      	bcc.n	801dc22 <tcp_alloc+0x10a>
 801dc38:	e7f0      	b.n	801dc1c <tcp_alloc+0x104>
  if (inactive != NULL) {
 801dc3a:	b11b      	cbz	r3, 801dc44 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801dc3c:	2101      	movs	r1, #1
 801dc3e:	4618      	mov	r0, r3
 801dc40:	f7ff fe32 	bl	801d8a8 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dc44:	f240 724b 	movw	r2, #1867	; 0x74b
 801dc48:	4905      	ldr	r1, [pc, #20]	; (801dc60 <tcp_alloc+0x148>)
 801dc4a:	2002      	movs	r0, #2
 801dc4c:	f7fd ff2a 	bl	801baa4 <memp_malloc_fn>
  if (pcb != NULL) {
 801dc50:	4603      	mov	r3, r0
 801dc52:	2800      	cmp	r0, #0
 801dc54:	f47f af6a 	bne.w	801db2c <tcp_alloc+0x14>
}
 801dc58:	4618      	mov	r0, r3
 801dc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801dc5c:	227f      	movs	r2, #127	; 0x7f
 801dc5e:	e7d4      	b.n	801dc0a <tcp_alloc+0xf2>
 801dc60:	08045654 	.word	0x08045654
 801dc64:	2002e4b1 	.word	0x2002e4b1
 801dc68:	2002e4ac 	.word	0x2002e4ac
 801dc6c:	006ddd00 	.word	0x006ddd00
 801dc70:	0801de75 	.word	0x0801de75
 801dc74:	0218ffff 	.word	0x0218ffff
 801dc78:	04300001 	.word	0x04300001
 801dc7c:	08600860 	.word	0x08600860
 801dc80:	2002e49c 	.word	0x2002e49c
 801dc84:	2002e4b4 	.word	0x2002e4b4

0801dc88 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801dc88:	2040      	movs	r0, #64	; 0x40
 801dc8a:	f7ff bf45 	b.w	801db18 <tcp_alloc>
 801dc8e:	bf00      	nop

0801dc90 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801dc90:	2040      	movs	r0, #64	; 0x40
 801dc92:	f7ff bf41 	b.w	801db18 <tcp_alloc>
 801dc96:	bf00      	nop

0801dc98 <tcp_close_shutdown>:
{
 801dc98:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801dc9a:	4604      	mov	r4, r0
{
 801dc9c:	b085      	sub	sp, #20
 801dc9e:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801dca0:	2800      	cmp	r0, #0
 801dca2:	d06a      	beq.n	801dd7a <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801dca4:	7d23      	ldrb	r3, [r4, #20]
 801dca6:	b11d      	cbz	r5, 801dcb0 <tcp_close_shutdown+0x18>
 801dca8:	2b04      	cmp	r3, #4
 801dcaa:	d00c      	beq.n	801dcc6 <tcp_close_shutdown+0x2e>
 801dcac:	2b07      	cmp	r3, #7
 801dcae:	d00a      	beq.n	801dcc6 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801dcb0:	2b01      	cmp	r3, #1
 801dcb2:	d06a      	beq.n	801dd8a <tcp_close_shutdown+0xf2>
 801dcb4:	2b02      	cmp	r3, #2
 801dcb6:	d030      	beq.n	801dd1a <tcp_close_shutdown+0x82>
 801dcb8:	b333      	cbz	r3, 801dd08 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801dcba:	4620      	mov	r0, r4
}
 801dcbc:	b005      	add	sp, #20
 801dcbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801dcc2:	f7fe bf3d 	b.w	801cb40 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801dcc6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801dcc8:	2a00      	cmp	r2, #0
 801dcca:	d037      	beq.n	801dd3c <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801dccc:	8b63      	ldrh	r3, [r4, #26]
 801dcce:	06db      	lsls	r3, r3, #27
 801dcd0:	f140 8084 	bpl.w	801dddc <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801dcd4:	8b21      	ldrh	r1, [r4, #24]
 801dcd6:	1d20      	adds	r0, r4, #4
 801dcd8:	8ae2      	ldrh	r2, [r4, #22]
 801dcda:	4623      	mov	r3, r4
 801dcdc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801dce0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801dce2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801dce4:	9000      	str	r0, [sp, #0]
 801dce6:	4620      	mov	r0, r4
 801dce8:	f002 fd62 	bl	80207b0 <tcp_rst>
      tcp_pcb_purge(pcb);
 801dcec:	4620      	mov	r0, r4
 801dcee:	f7ff fa6b 	bl	801d1c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801dcf2:	4a45      	ldr	r2, [pc, #276]	; (801de08 <tcp_close_shutdown+0x170>)
 801dcf4:	6813      	ldr	r3, [r2, #0]
 801dcf6:	42a3      	cmp	r3, r4
 801dcf8:	d030      	beq.n	801dd5c <tcp_close_shutdown+0xc4>
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	d030      	beq.n	801dd60 <tcp_close_shutdown+0xc8>
 801dcfe:	68da      	ldr	r2, [r3, #12]
 801dd00:	42a2      	cmp	r2, r4
 801dd02:	d068      	beq.n	801ddd6 <tcp_close_shutdown+0x13e>
 801dd04:	4613      	mov	r3, r2
 801dd06:	e7f8      	b.n	801dcfa <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801dd08:	8ae3      	ldrh	r3, [r4, #22]
 801dd0a:	b9e3      	cbnz	r3, 801dd46 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801dd0c:	4621      	mov	r1, r4
 801dd0e:	2002      	movs	r0, #2
 801dd10:	f7fd fefe 	bl	801bb10 <memp_free>
}
 801dd14:	2000      	movs	r0, #0
 801dd16:	b005      	add	sp, #20
 801dd18:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801dd1a:	4621      	mov	r1, r4
 801dd1c:	483a      	ldr	r0, [pc, #232]	; (801de08 <tcp_close_shutdown+0x170>)
 801dd1e:	f7ff fd53 	bl	801d7c8 <tcp_pcb_remove>
 801dd22:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dd24:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801dd26:	4a39      	ldr	r2, [pc, #228]	; (801de0c <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dd28:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801dd2a:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dd2c:	d1ee      	bne.n	801dd0c <tcp_close_shutdown+0x74>
 801dd2e:	4b38      	ldr	r3, [pc, #224]	; (801de10 <tcp_close_shutdown+0x178>)
 801dd30:	22d4      	movs	r2, #212	; 0xd4
 801dd32:	4938      	ldr	r1, [pc, #224]	; (801de14 <tcp_close_shutdown+0x17c>)
 801dd34:	4838      	ldr	r0, [pc, #224]	; (801de18 <tcp_close_shutdown+0x180>)
 801dd36:	f008 fccd 	bl	80266d4 <iprintf>
 801dd3a:	e7e7      	b.n	801dd0c <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801dd3c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801dd3e:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801dd42:	d0b5      	beq.n	801dcb0 <tcp_close_shutdown+0x18>
 801dd44:	e7c2      	b.n	801dccc <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801dd46:	4a35      	ldr	r2, [pc, #212]	; (801de1c <tcp_close_shutdown+0x184>)
 801dd48:	6813      	ldr	r3, [r2, #0]
 801dd4a:	42a3      	cmp	r3, r4
 801dd4c:	d051      	beq.n	801ddf2 <tcp_close_shutdown+0x15a>
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d03e      	beq.n	801ddd0 <tcp_close_shutdown+0x138>
 801dd52:	68da      	ldr	r2, [r3, #12]
 801dd54:	42a2      	cmp	r2, r4
 801dd56:	d039      	beq.n	801ddcc <tcp_close_shutdown+0x134>
 801dd58:	4613      	mov	r3, r2
 801dd5a:	e7f8      	b.n	801dd4e <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801dd5c:	68e3      	ldr	r3, [r4, #12]
 801dd5e:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801dd60:	4b2f      	ldr	r3, [pc, #188]	; (801de20 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801dd62:	2000      	movs	r0, #0
 801dd64:	4a29      	ldr	r2, [pc, #164]	; (801de0c <tcp_close_shutdown+0x174>)
 801dd66:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801dd68:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801dd6a:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801dd6c:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801dd6e:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801dd70:	d03c      	beq.n	801ddec <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dd72:	7d23      	ldrb	r3, [r4, #20]
 801dd74:	2b01      	cmp	r3, #1
 801dd76:	d1c9      	bne.n	801dd0c <tcp_close_shutdown+0x74>
 801dd78:	e7d9      	b.n	801dd2e <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801dd7a:	4b25      	ldr	r3, [pc, #148]	; (801de10 <tcp_close_shutdown+0x178>)
 801dd7c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801dd80:	4928      	ldr	r1, [pc, #160]	; (801de24 <tcp_close_shutdown+0x18c>)
 801dd82:	4825      	ldr	r0, [pc, #148]	; (801de18 <tcp_close_shutdown+0x180>)
 801dd84:	f008 fca6 	bl	80266d4 <iprintf>
 801dd88:	e78c      	b.n	801dca4 <tcp_close_shutdown+0xc>
 801dd8a:	4927      	ldr	r1, [pc, #156]	; (801de28 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801dd8c:	2000      	movs	r0, #0
  switch (pcb->state) {
 801dd8e:	4b23      	ldr	r3, [pc, #140]	; (801de1c <tcp_close_shutdown+0x184>)
 801dd90:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801dd94:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801dd96:	b133      	cbz	r3, 801dda6 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801dd98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801dd9a:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801dd9c:	bf08      	it	eq
 801dd9e:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801dda0:	68db      	ldr	r3, [r3, #12]
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d1f8      	bne.n	801dd98 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801dda6:	42a9      	cmp	r1, r5
 801dda8:	d002      	beq.n	801ddb0 <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801ddaa:	f851 3b04 	ldr.w	r3, [r1], #4
 801ddae:	e7f1      	b.n	801dd94 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801ddb0:	4621      	mov	r1, r4
 801ddb2:	481e      	ldr	r0, [pc, #120]	; (801de2c <tcp_close_shutdown+0x194>)
 801ddb4:	f7ff fd08 	bl	801d7c8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801ddb8:	7d23      	ldrb	r3, [r4, #20]
 801ddba:	2b01      	cmp	r3, #1
 801ddbc:	d01c      	beq.n	801ddf8 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801ddbe:	4621      	mov	r1, r4
 801ddc0:	2003      	movs	r0, #3
 801ddc2:	f7fd fea5 	bl	801bb10 <memp_free>
}
 801ddc6:	2000      	movs	r0, #0
 801ddc8:	b005      	add	sp, #20
 801ddca:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ddcc:	68e2      	ldr	r2, [r4, #12]
 801ddce:	60da      	str	r2, [r3, #12]
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	60e3      	str	r3, [r4, #12]
 801ddd4:	e79a      	b.n	801dd0c <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801ddd6:	68e2      	ldr	r2, [r4, #12]
 801ddd8:	60da      	str	r2, [r3, #12]
 801ddda:	e7c1      	b.n	801dd60 <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801dddc:	4b0c      	ldr	r3, [pc, #48]	; (801de10 <tcp_close_shutdown+0x178>)
 801ddde:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801dde2:	4913      	ldr	r1, [pc, #76]	; (801de30 <tcp_close_shutdown+0x198>)
 801dde4:	480c      	ldr	r0, [pc, #48]	; (801de18 <tcp_close_shutdown+0x180>)
 801dde6:	f008 fc75 	bl	80266d4 <iprintf>
 801ddea:	e773      	b.n	801dcd4 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801ddec:	f001 fd9e 	bl	801f92c <tcp_trigger_input_pcb_close>
 801ddf0:	e790      	b.n	801dd14 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ddf2:	68e3      	ldr	r3, [r4, #12]
 801ddf4:	6013      	str	r3, [r2, #0]
 801ddf6:	e7eb      	b.n	801ddd0 <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801ddf8:	4b05      	ldr	r3, [pc, #20]	; (801de10 <tcp_close_shutdown+0x178>)
 801ddfa:	22df      	movs	r2, #223	; 0xdf
 801ddfc:	490d      	ldr	r1, [pc, #52]	; (801de34 <tcp_close_shutdown+0x19c>)
 801ddfe:	4806      	ldr	r0, [pc, #24]	; (801de18 <tcp_close_shutdown+0x180>)
 801de00:	f008 fc68 	bl	80266d4 <iprintf>
 801de04:	e7db      	b.n	801ddbe <tcp_close_shutdown+0x126>
 801de06:	bf00      	nop
 801de08:	2002e49c 	.word	0x2002e49c
 801de0c:	2002e4a0 	.word	0x2002e4a0
 801de10:	08045654 	.word	0x08045654
 801de14:	08045690 	.word	0x08045690
 801de18:	0802b3cc 	.word	0x0802b3cc
 801de1c:	2002e4a4 	.word	0x2002e4a4
 801de20:	2002e4e0 	.word	0x2002e4e0
 801de24:	08045c30 	.word	0x08045c30
 801de28:	08045d40 	.word	0x08045d40
 801de2c:	2002e4a8 	.word	0x2002e4a8
 801de30:	08045c50 	.word	0x08045c50
 801de34:	08045c6c 	.word	0x08045c6c

0801de38 <tcp_close>:
{
 801de38:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801de3a:	b158      	cbz	r0, 801de54 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801de3c:	7d03      	ldrb	r3, [r0, #20]
 801de3e:	2b01      	cmp	r3, #1
 801de40:	d003      	beq.n	801de4a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801de42:	8b43      	ldrh	r3, [r0, #26]
 801de44:	f043 0310 	orr.w	r3, r3, #16
 801de48:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801de4a:	2101      	movs	r1, #1
}
 801de4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801de50:	f7ff bf22 	b.w	801dc98 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801de54:	4b04      	ldr	r3, [pc, #16]	; (801de68 <tcp_close+0x30>)
 801de56:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801de5a:	4904      	ldr	r1, [pc, #16]	; (801de6c <tcp_close+0x34>)
 801de5c:	4804      	ldr	r0, [pc, #16]	; (801de70 <tcp_close+0x38>)
 801de5e:	f008 fc39 	bl	80266d4 <iprintf>
}
 801de62:	f06f 000f 	mvn.w	r0, #15
 801de66:	bd08      	pop	{r3, pc}
 801de68:	08045654 	.word	0x08045654
 801de6c:	08045c88 	.word	0x08045c88
 801de70:	0802b3cc 	.word	0x0802b3cc

0801de74 <tcp_recv_null>:
{
 801de74:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801de76:	b1c9      	cbz	r1, 801deac <tcp_recv_null+0x38>
  if (p != NULL) {
 801de78:	4614      	mov	r4, r2
 801de7a:	4608      	mov	r0, r1
 801de7c:	b13a      	cbz	r2, 801de8e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801de7e:	8911      	ldrh	r1, [r2, #8]
 801de80:	f7fe ffde 	bl	801ce40 <tcp_recved>
    pbuf_free(p);
 801de84:	4620      	mov	r0, r4
 801de86:	f7fe fb5b 	bl	801c540 <pbuf_free>
  return ERR_OK;
 801de8a:	2000      	movs	r0, #0
}
 801de8c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801de8e:	b10b      	cbz	r3, 801de94 <tcp_recv_null+0x20>
  return ERR_OK;
 801de90:	4610      	mov	r0, r2
}
 801de92:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801de94:	7d0b      	ldrb	r3, [r1, #20]
 801de96:	2b01      	cmp	r3, #1
 801de98:	d003      	beq.n	801dea2 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801de9a:	8b4b      	ldrh	r3, [r1, #26]
 801de9c:	f043 0310 	orr.w	r3, r3, #16
 801dea0:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801dea2:	2101      	movs	r1, #1
}
 801dea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801dea8:	f7ff bef6 	b.w	801dc98 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801deac:	4b04      	ldr	r3, [pc, #16]	; (801dec0 <tcp_recv_null+0x4c>)
 801deae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801deb2:	4904      	ldr	r1, [pc, #16]	; (801dec4 <tcp_recv_null+0x50>)
 801deb4:	4804      	ldr	r0, [pc, #16]	; (801dec8 <tcp_recv_null+0x54>)
 801deb6:	f008 fc0d 	bl	80266d4 <iprintf>
 801deba:	f06f 000f 	mvn.w	r0, #15
}
 801debe:	bd10      	pop	{r4, pc}
 801dec0:	08045654 	.word	0x08045654
 801dec4:	08045ca0 	.word	0x08045ca0
 801dec8:	0802b3cc 	.word	0x0802b3cc

0801decc <tcp_process_refused_data>:
{
 801decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801dece:	b378      	cbz	r0, 801df30 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801ded0:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801ded2:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801ded4:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801ded8:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801deda:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801dedc:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801dede:	b156      	cbz	r6, 801def6 <tcp_process_refused_data+0x2a>
 801dee0:	4601      	mov	r1, r0
 801dee2:	462a      	mov	r2, r5
 801dee4:	6900      	ldr	r0, [r0, #16]
 801dee6:	47b0      	blx	r6
    if (err == ERR_OK) {
 801dee8:	b158      	cbz	r0, 801df02 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801deea:	300d      	adds	r0, #13
 801deec:	d01d      	beq.n	801df2a <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801deee:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801def2:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801def4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801def6:	8929      	ldrh	r1, [r5, #8]
 801def8:	f7fe ffa2 	bl	801ce40 <tcp_recved>
    pbuf_free(p);
 801defc:	4628      	mov	r0, r5
 801defe:	f7fe fb1f 	bl	801c540 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801df02:	06bb      	lsls	r3, r7, #26
 801df04:	d50f      	bpl.n	801df26 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801df06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801df08:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801df0c:	d001      	beq.n	801df12 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801df0e:	3301      	adds	r3, #1
 801df10:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801df12:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801df16:	b135      	cbz	r5, 801df26 <tcp_process_refused_data+0x5a>
 801df18:	2300      	movs	r3, #0
 801df1a:	4621      	mov	r1, r4
 801df1c:	6920      	ldr	r0, [r4, #16]
 801df1e:	461a      	mov	r2, r3
 801df20:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801df22:	300d      	adds	r0, #13
 801df24:	d001      	beq.n	801df2a <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801df26:	2000      	movs	r0, #0
}
 801df28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801df2a:	f06f 000c 	mvn.w	r0, #12
}
 801df2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801df30:	4b04      	ldr	r3, [pc, #16]	; (801df44 <tcp_process_refused_data+0x78>)
 801df32:	f240 6209 	movw	r2, #1545	; 0x609
 801df36:	4904      	ldr	r1, [pc, #16]	; (801df48 <tcp_process_refused_data+0x7c>)
 801df38:	4804      	ldr	r0, [pc, #16]	; (801df4c <tcp_process_refused_data+0x80>)
 801df3a:	f008 fbcb 	bl	80266d4 <iprintf>
 801df3e:	f06f 000f 	mvn.w	r0, #15
}
 801df42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df44:	08045654 	.word	0x08045654
 801df48:	08045cbc 	.word	0x08045cbc
 801df4c:	0802b3cc 	.word	0x0802b3cc

0801df50 <tcp_fasttmr>:
{
 801df50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801df54:	4d1c      	ldr	r5, [pc, #112]	; (801dfc8 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801df56:	2700      	movs	r7, #0
 801df58:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801dfd0 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801df5c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801df5e:	4e1b      	ldr	r6, [pc, #108]	; (801dfcc <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801df60:	3301      	adds	r3, #1
 801df62:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801df64:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801df68:	b1bc      	cbz	r4, 801df9a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801df6a:	782a      	ldrb	r2, [r5, #0]
 801df6c:	7fa3      	ldrb	r3, [r4, #30]
 801df6e:	4293      	cmp	r3, r2
 801df70:	d015      	beq.n	801df9e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801df72:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801df74:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801df76:	07d9      	lsls	r1, r3, #31
 801df78:	d41a      	bmi.n	801dfb0 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801df7a:	071a      	lsls	r2, r3, #28
 801df7c:	d411      	bmi.n	801dfa2 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801df7e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801df80:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801df84:	b133      	cbz	r3, 801df94 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801df86:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801df88:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801df8a:	f7ff ff9f 	bl	801decc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801df8e:	7833      	ldrb	r3, [r6, #0]
 801df90:	2b00      	cmp	r3, #0
 801df92:	d1e7      	bne.n	801df64 <tcp_fasttmr+0x14>
      pcb = next;
 801df94:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801df96:	2c00      	cmp	r4, #0
 801df98:	d1e7      	bne.n	801df6a <tcp_fasttmr+0x1a>
}
 801df9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801df9e:	68e4      	ldr	r4, [r4, #12]
 801dfa0:	e7e2      	b.n	801df68 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801dfa2:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801dfa6:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801dfa8:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801dfaa:	f7fe fdc9 	bl	801cb40 <tcp_close_shutdown_fin>
 801dfae:	e7e6      	b.n	801df7e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801dfb0:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801dfb4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801dfb6:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801dfb8:	f002 fc74 	bl	80208a4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801dfbc:	8b63      	ldrh	r3, [r4, #26]
 801dfbe:	f023 0303 	bic.w	r3, r3, #3
 801dfc2:	b29b      	uxth	r3, r3
 801dfc4:	8363      	strh	r3, [r4, #26]
 801dfc6:	e7d8      	b.n	801df7a <tcp_fasttmr+0x2a>
 801dfc8:	2002e4b1 	.word	0x2002e4b1
 801dfcc:	2002e4a0 	.word	0x2002e4a0
 801dfd0:	2002e49c 	.word	0x2002e49c

0801dfd4 <tcp_tmr>:
{
 801dfd4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801dfd6:	f7ff ffbb 	bl	801df50 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801dfda:	4a06      	ldr	r2, [pc, #24]	; (801dff4 <tcp_tmr+0x20>)
 801dfdc:	7813      	ldrb	r3, [r2, #0]
 801dfde:	3301      	adds	r3, #1
 801dfe0:	b2db      	uxtb	r3, r3
 801dfe2:	7013      	strb	r3, [r2, #0]
 801dfe4:	07db      	lsls	r3, r3, #31
 801dfe6:	d400      	bmi.n	801dfea <tcp_tmr+0x16>
}
 801dfe8:	bd08      	pop	{r3, pc}
 801dfea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801dfee:	f7ff b93d 	b.w	801d26c <tcp_slowtmr>
 801dff2:	bf00      	nop
 801dff4:	2002e4b0 	.word	0x2002e4b0

0801dff8 <tcp_next_iss>:
{
 801dff8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801dffa:	b130      	cbz	r0, 801e00a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801dffc:	4b07      	ldr	r3, [pc, #28]	; (801e01c <tcp_next_iss+0x24>)
 801dffe:	4a08      	ldr	r2, [pc, #32]	; (801e020 <tcp_next_iss+0x28>)
 801e000:	6818      	ldr	r0, [r3, #0]
 801e002:	6812      	ldr	r2, [r2, #0]
 801e004:	4410      	add	r0, r2
 801e006:	6018      	str	r0, [r3, #0]
}
 801e008:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801e00a:	4b06      	ldr	r3, [pc, #24]	; (801e024 <tcp_next_iss+0x2c>)
 801e00c:	f640 02af 	movw	r2, #2223	; 0x8af
 801e010:	4905      	ldr	r1, [pc, #20]	; (801e028 <tcp_next_iss+0x30>)
 801e012:	4806      	ldr	r0, [pc, #24]	; (801e02c <tcp_next_iss+0x34>)
 801e014:	f008 fb5e 	bl	80266d4 <iprintf>
 801e018:	e7f0      	b.n	801dffc <tcp_next_iss+0x4>
 801e01a:	bf00      	nop
 801e01c:	20000448 	.word	0x20000448
 801e020:	2002e4ac 	.word	0x2002e4ac
 801e024:	08045654 	.word	0x08045654
 801e028:	08045ce4 	.word	0x08045ce4
 801e02c:	0802b3cc 	.word	0x0802b3cc

0801e030 <tcp_eff_send_mss_netif>:
{
 801e030:	b538      	push	{r3, r4, r5, lr}
 801e032:	4605      	mov	r5, r0
 801e034:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801e036:	b172      	cbz	r2, 801e056 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801e038:	b144      	cbz	r4, 801e04c <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801e03a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801e03c:	b133      	cbz	r3, 801e04c <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801e03e:	2b28      	cmp	r3, #40	; 0x28
 801e040:	d906      	bls.n	801e050 <tcp_eff_send_mss_netif+0x20>
 801e042:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801e044:	b29b      	uxth	r3, r3
 801e046:	429d      	cmp	r5, r3
 801e048:	bf28      	it	cs
 801e04a:	461d      	movcs	r5, r3
}
 801e04c:	4628      	mov	r0, r5
 801e04e:	bd38      	pop	{r3, r4, r5, pc}
 801e050:	2500      	movs	r5, #0
 801e052:	4628      	mov	r0, r5
 801e054:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801e056:	4b04      	ldr	r3, [pc, #16]	; (801e068 <tcp_eff_send_mss_netif+0x38>)
 801e058:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801e05c:	4903      	ldr	r1, [pc, #12]	; (801e06c <tcp_eff_send_mss_netif+0x3c>)
 801e05e:	4804      	ldr	r0, [pc, #16]	; (801e070 <tcp_eff_send_mss_netif+0x40>)
 801e060:	f008 fb38 	bl	80266d4 <iprintf>
 801e064:	e7e8      	b.n	801e038 <tcp_eff_send_mss_netif+0x8>
 801e066:	bf00      	nop
 801e068:	08045654 	.word	0x08045654
 801e06c:	08045d00 	.word	0x08045d00
 801e070:	0802b3cc 	.word	0x0802b3cc

0801e074 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801e074:	b308      	cbz	r0, 801e0ba <tcp_netif_ip_addr_changed+0x46>
{
 801e076:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801e078:	6803      	ldr	r3, [r0, #0]
 801e07a:	4604      	mov	r4, r0
 801e07c:	b903      	cbnz	r3, 801e080 <tcp_netif_ip_addr_changed+0xc>
}
 801e07e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801e080:	4b0e      	ldr	r3, [pc, #56]	; (801e0bc <tcp_netif_ip_addr_changed+0x48>)
 801e082:	460d      	mov	r5, r1
 801e084:	6819      	ldr	r1, [r3, #0]
 801e086:	f7ff fd01 	bl	801da8c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801e08a:	4b0d      	ldr	r3, [pc, #52]	; (801e0c0 <tcp_netif_ip_addr_changed+0x4c>)
 801e08c:	4620      	mov	r0, r4
 801e08e:	6819      	ldr	r1, [r3, #0]
 801e090:	f7ff fcfc 	bl	801da8c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801e094:	2d00      	cmp	r5, #0
 801e096:	d0f2      	beq.n	801e07e <tcp_netif_ip_addr_changed+0xa>
 801e098:	682b      	ldr	r3, [r5, #0]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	d0ef      	beq.n	801e07e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e09e:	4b09      	ldr	r3, [pc, #36]	; (801e0c4 <tcp_netif_ip_addr_changed+0x50>)
 801e0a0:	681b      	ldr	r3, [r3, #0]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d0eb      	beq.n	801e07e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801e0a6:	6819      	ldr	r1, [r3, #0]
 801e0a8:	6822      	ldr	r2, [r4, #0]
 801e0aa:	4291      	cmp	r1, r2
 801e0ac:	d101      	bne.n	801e0b2 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801e0ae:	682a      	ldr	r2, [r5, #0]
 801e0b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e0b2:	68db      	ldr	r3, [r3, #12]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d1f6      	bne.n	801e0a6 <tcp_netif_ip_addr_changed+0x32>
}
 801e0b8:	bd38      	pop	{r3, r4, r5, pc}
 801e0ba:	4770      	bx	lr
 801e0bc:	2002e49c 	.word	0x2002e49c
 801e0c0:	2002e4a4 	.word	0x2002e4a4
 801e0c4:	2002e4a8 	.word	0x2002e4a8

0801e0c8 <tcp_free_ooseq>:
{
 801e0c8:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801e0ca:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801e0cc:	b16c      	cbz	r4, 801e0ea <tcp_free_ooseq+0x22>
 801e0ce:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801e0d0:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801e0d2:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801e0d4:	6868      	ldr	r0, [r5, #4]
 801e0d6:	b108      	cbz	r0, 801e0dc <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801e0d8:	f7fe fa32 	bl	801c540 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801e0dc:	4629      	mov	r1, r5
 801e0de:	2004      	movs	r0, #4
 801e0e0:	f7fd fd16 	bl	801bb10 <memp_free>
  while (seg != NULL) {
 801e0e4:	2c00      	cmp	r4, #0
 801e0e6:	d1f3      	bne.n	801e0d0 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801e0e8:	6774      	str	r4, [r6, #116]	; 0x74
}
 801e0ea:	bd70      	pop	{r4, r5, r6, pc}

0801e0ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801e0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e0ee:	4605      	mov	r5, r0
{
 801e0f0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e0f2:	2800      	cmp	r0, #0
 801e0f4:	d03e      	beq.n	801e174 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e0f6:	68eb      	ldr	r3, [r5, #12]
 801e0f8:	8998      	ldrh	r0, [r3, #12]
 801e0fa:	f7fc f9e5 	bl	801a4c8 <lwip_htons>
 801e0fe:	07c2      	lsls	r2, r0, #31
 801e100:	d432      	bmi.n	801e168 <tcp_oos_insert_segment+0x7c>
 801e102:	4e20      	ldr	r6, [pc, #128]	; (801e184 <tcp_oos_insert_segment+0x98>)
 801e104:	e005      	b.n	801e112 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801e106:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801e108:	4620      	mov	r0, r4
 801e10a:	f7fe ff95 	bl	801d038 <tcp_seg_free>
    while (next &&
 801e10e:	463c      	mov	r4, r7
 801e110:	b1ef      	cbz	r7, 801e14e <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801e112:	68e1      	ldr	r1, [r4, #12]
 801e114:	8923      	ldrh	r3, [r4, #8]
 801e116:	6837      	ldr	r7, [r6, #0]
 801e118:	892a      	ldrh	r2, [r5, #8]
 801e11a:	6848      	ldr	r0, [r1, #4]
 801e11c:	443a      	add	r2, r7
 801e11e:	4403      	add	r3, r0
 801e120:	1ad3      	subs	r3, r2, r3
    while (next &&
 801e122:	2b00      	cmp	r3, #0
 801e124:	db15      	blt.n	801e152 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e126:	8988      	ldrh	r0, [r1, #12]
 801e128:	f7fc f9ce 	bl	801a4c8 <lwip_htons>
 801e12c:	07c3      	lsls	r3, r0, #31
 801e12e:	d5ea      	bpl.n	801e106 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801e130:	68eb      	ldr	r3, [r5, #12]
 801e132:	2001      	movs	r0, #1
 801e134:	899f      	ldrh	r7, [r3, #12]
 801e136:	f7fc f9c7 	bl	801a4c8 <lwip_htons>
 801e13a:	68eb      	ldr	r3, [r5, #12]
 801e13c:	4338      	orrs	r0, r7
      next = next->next;
 801e13e:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801e140:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801e142:	4620      	mov	r0, r4
 801e144:	f7fe ff78 	bl	801d038 <tcp_seg_free>
    while (next &&
 801e148:	463c      	mov	r4, r7
 801e14a:	2f00      	cmp	r7, #0
 801e14c:	d1e1      	bne.n	801e112 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801e14e:	602c      	str	r4, [r5, #0]
}
 801e150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801e152:	1a12      	subs	r2, r2, r0
    if (next &&
 801e154:	2a00      	cmp	r2, #0
 801e156:	ddfa      	ble.n	801e14e <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801e158:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801e15a:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801e15c:	b289      	uxth	r1, r1
 801e15e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801e160:	f7fe f8d6 	bl	801c310 <pbuf_realloc>
  cseg->next = next;
 801e164:	602c      	str	r4, [r5, #0]
}
 801e166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801e168:	4620      	mov	r0, r4
    next = NULL;
 801e16a:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801e16c:	f7fe ff52 	bl	801d014 <tcp_segs_free>
  cseg->next = next;
 801e170:	602c      	str	r4, [r5, #0]
}
 801e172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e174:	4b04      	ldr	r3, [pc, #16]	; (801e188 <tcp_oos_insert_segment+0x9c>)
 801e176:	f240 421f 	movw	r2, #1055	; 0x41f
 801e17a:	4904      	ldr	r1, [pc, #16]	; (801e18c <tcp_oos_insert_segment+0xa0>)
 801e17c:	4804      	ldr	r0, [pc, #16]	; (801e190 <tcp_oos_insert_segment+0xa4>)
 801e17e:	f008 faa9 	bl	80266d4 <iprintf>
 801e182:	e7b8      	b.n	801e0f6 <tcp_oos_insert_segment+0xa>
 801e184:	2002e4dc 	.word	0x2002e4dc
 801e188:	08045d50 	.word	0x08045d50
 801e18c:	08045d84 	.word	0x08045d84
 801e190:	0802b3cc 	.word	0x0802b3cc

0801e194 <tcp_input_delayed_close>:
{
 801e194:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801e196:	4604      	mov	r4, r0
 801e198:	b1c8      	cbz	r0, 801e1ce <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801e19a:	4b11      	ldr	r3, [pc, #68]	; (801e1e0 <tcp_input_delayed_close+0x4c>)
 801e19c:	781b      	ldrb	r3, [r3, #0]
 801e19e:	f013 0310 	ands.w	r3, r3, #16
 801e1a2:	d101      	bne.n	801e1a8 <tcp_input_delayed_close+0x14>
  return 0;
 801e1a4:	4618      	mov	r0, r3
}
 801e1a6:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801e1a8:	8b63      	ldrh	r3, [r4, #26]
 801e1aa:	06db      	lsls	r3, r3, #27
 801e1ac:	d406      	bmi.n	801e1bc <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801e1ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801e1b2:	b11b      	cbz	r3, 801e1bc <tcp_input_delayed_close+0x28>
 801e1b4:	f06f 010e 	mvn.w	r1, #14
 801e1b8:	6920      	ldr	r0, [r4, #16]
 801e1ba:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801e1bc:	4621      	mov	r1, r4
 801e1be:	4809      	ldr	r0, [pc, #36]	; (801e1e4 <tcp_input_delayed_close+0x50>)
 801e1c0:	f7ff fb02 	bl	801d7c8 <tcp_pcb_remove>
    tcp_free(pcb);
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	f7fe fcfb 	bl	801cbc0 <tcp_free>
 801e1ca:	2001      	movs	r0, #1
}
 801e1cc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801e1ce:	4b06      	ldr	r3, [pc, #24]	; (801e1e8 <tcp_input_delayed_close+0x54>)
 801e1d0:	f240 225a 	movw	r2, #602	; 0x25a
 801e1d4:	4905      	ldr	r1, [pc, #20]	; (801e1ec <tcp_input_delayed_close+0x58>)
 801e1d6:	4806      	ldr	r0, [pc, #24]	; (801e1f0 <tcp_input_delayed_close+0x5c>)
 801e1d8:	f008 fa7c 	bl	80266d4 <iprintf>
 801e1dc:	e7dd      	b.n	801e19a <tcp_input_delayed_close+0x6>
 801e1de:	bf00      	nop
 801e1e0:	2002e4d8 	.word	0x2002e4d8
 801e1e4:	2002e49c 	.word	0x2002e49c
 801e1e8:	08045d50 	.word	0x08045d50
 801e1ec:	08045dac 	.word	0x08045dac
 801e1f0:	0802b3cc 	.word	0x0802b3cc

0801e1f4 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801e1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1f8:	b083      	sub	sp, #12
 801e1fa:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801e1fc:	2900      	cmp	r1, #0
 801e1fe:	d03d      	beq.n	801e27c <tcp_free_acked_segments.constprop.0+0x88>
 801e200:	4607      	mov	r7, r0
 801e202:	460c      	mov	r4, r1
 801e204:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801e2cc <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e208:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801e2c0 <tcp_free_acked_segments.constprop.0+0xcc>
 801e20c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801e2d0 <tcp_free_acked_segments.constprop.0+0xdc>
 801e210:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801e2c8 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801e214:	68e3      	ldr	r3, [r4, #12]
 801e216:	6858      	ldr	r0, [r3, #4]
 801e218:	f7fc f95a 	bl	801a4d0 <lwip_htonl>
 801e21c:	68e3      	ldr	r3, [r4, #12]
 801e21e:	4605      	mov	r5, r0
 801e220:	8926      	ldrh	r6, [r4, #8]
 801e222:	8998      	ldrh	r0, [r3, #12]
 801e224:	f7fc f950 	bl	801a4c8 <lwip_htons>
 801e228:	f8d8 3000 	ldr.w	r3, [r8]
 801e22c:	f010 0003 	ands.w	r0, r0, #3
 801e230:	eba5 0503 	sub.w	r5, r5, r3
 801e234:	bf18      	it	ne
 801e236:	2001      	movne	r0, #1
 801e238:	4435      	add	r5, r6
 801e23a:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801e23c:	2800      	cmp	r0, #0
 801e23e:	dc37      	bgt.n	801e2b0 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801e240:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801e244:	f7fe f990 	bl	801c568 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e248:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801e24c:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e24e:	4298      	cmp	r0, r3
 801e250:	d824      	bhi.n	801e29c <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e252:	491a      	ldr	r1, [pc, #104]	; (801e2bc <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e254:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e256:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801e258:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e25a:	880d      	ldrh	r5, [r1, #0]
 801e25c:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e25e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e262:	1953      	adds	r3, r2, r5
 801e264:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801e266:	f7fe fee7 	bl	801d038 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801e26a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801e26e:	b11b      	cbz	r3, 801e278 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801e270:	9b01      	ldr	r3, [sp, #4]
 801e272:	ea56 0503 	orrs.w	r5, r6, r3
 801e276:	d006      	beq.n	801e286 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801e278:	2e00      	cmp	r6, #0
 801e27a:	d1cb      	bne.n	801e214 <tcp_free_acked_segments.constprop.0+0x20>
 801e27c:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801e27e:	4628      	mov	r0, r5
 801e280:	b003      	add	sp, #12
 801e282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801e286:	4b0e      	ldr	r3, [pc, #56]	; (801e2c0 <tcp_free_acked_segments.constprop.0+0xcc>)
 801e288:	f240 4261 	movw	r2, #1121	; 0x461
 801e28c:	490d      	ldr	r1, [pc, #52]	; (801e2c4 <tcp_free_acked_segments.constprop.0+0xd0>)
 801e28e:	480e      	ldr	r0, [pc, #56]	; (801e2c8 <tcp_free_acked_segments.constprop.0+0xd4>)
 801e290:	f008 fa20 	bl	80266d4 <iprintf>
}
 801e294:	4628      	mov	r0, r5
 801e296:	b003      	add	sp, #12
 801e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e29c:	465b      	mov	r3, fp
 801e29e:	f240 4257 	movw	r2, #1111	; 0x457
 801e2a2:	4651      	mov	r1, sl
 801e2a4:	4648      	mov	r0, r9
 801e2a6:	f008 fa15 	bl	80266d4 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e2aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801e2ae:	e7d0      	b.n	801e252 <tcp_free_acked_segments.constprop.0+0x5e>
 801e2b0:	4625      	mov	r5, r4
}
 801e2b2:	4628      	mov	r0, r5
 801e2b4:	b003      	add	sp, #12
 801e2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2ba:	bf00      	nop
 801e2bc:	2002e4d0 	.word	0x2002e4d0
 801e2c0:	08045d50 	.word	0x08045d50
 801e2c4:	08045dfc 	.word	0x08045dfc
 801e2c8:	0802b3cc 	.word	0x0802b3cc
 801e2cc:	2002e4b8 	.word	0x2002e4b8
 801e2d0:	08045dd4 	.word	0x08045dd4

0801e2d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801e2d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801e2d8:	4604      	mov	r4, r0
 801e2da:	2800      	cmp	r0, #0
 801e2dc:	f000 8200 	beq.w	801e6e0 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801e2e0:	7d23      	ldrb	r3, [r4, #20]
 801e2e2:	2b03      	cmp	r3, #3
 801e2e4:	f240 811e 	bls.w	801e524 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801e2e8:	4bb4      	ldr	r3, [pc, #720]	; (801e5bc <tcp_receive+0x2e8>)
 801e2ea:	781b      	ldrb	r3, [r3, #0]
 801e2ec:	06dd      	lsls	r5, r3, #27
 801e2ee:	f100 8097 	bmi.w	801e420 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e2f2:	4fb3      	ldr	r7, [pc, #716]	; (801e5c0 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e2f4:	4eb3      	ldr	r6, [pc, #716]	; (801e5c4 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e2f6:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e2f8:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e2fa:	2900      	cmp	r1, #0
 801e2fc:	d07f      	beq.n	801e3fe <tcp_receive+0x12a>
 801e2fe:	7d22      	ldrb	r2, [r4, #20]
 801e300:	2a06      	cmp	r2, #6
 801e302:	d87c      	bhi.n	801e3fe <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e304:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e306:	eba2 0803 	sub.w	r8, r2, r3
 801e30a:	f1b8 0f01 	cmp.w	r8, #1
 801e30e:	d405      	bmi.n	801e31c <tcp_receive+0x48>
 801e310:	1c50      	adds	r0, r2, #1
 801e312:	1ac0      	subs	r0, r0, r3
 801e314:	1a41      	subs	r1, r0, r1
 801e316:	2900      	cmp	r1, #0
 801e318:	f340 81f3 	ble.w	801e702 <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801e31c:	1a99      	subs	r1, r3, r2
 801e31e:	2900      	cmp	r1, #0
 801e320:	f2c0 81ea 	blt.w	801e6f8 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e324:	f103 0c01 	add.w	ip, r3, #1
 801e328:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801e32a:	ebac 0102 	sub.w	r1, ip, r2
 801e32e:	1a09      	subs	r1, r1, r0
 801e330:	2900      	cmp	r1, #0
 801e332:	dc39      	bgt.n	801e3a8 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801e334:	429a      	cmp	r2, r3
 801e336:	f000 8470 	beq.w	801ec1a <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801e33a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801e33c:	2d00      	cmp	r5, #0
 801e33e:	f000 8378 	beq.w	801ea32 <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801e342:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801e344:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e348:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801e34c:	6842      	ldr	r2, [r0, #4]
 801e34e:	429a      	cmp	r2, r3
 801e350:	d019      	beq.n	801e386 <tcp_receive+0xb2>
              if (prev == NULL) {
 801e352:	f1b8 0f00 	cmp.w	r8, #0
 801e356:	f000 815b 	beq.w	801e610 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e35a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801e35e:	6849      	ldr	r1, [r1, #4]
 801e360:	ebae 0101 	sub.w	r1, lr, r1
 801e364:	2900      	cmp	r1, #0
 801e366:	db04      	blt.n	801e372 <tcp_receive+0x9e>
 801e368:	ebac 0102 	sub.w	r1, ip, r2
 801e36c:	2900      	cmp	r1, #0
 801e36e:	f340 8369 	ble.w	801ea44 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e372:	6829      	ldr	r1, [r5, #0]
 801e374:	46a8      	mov	r8, r5
 801e376:	2900      	cmp	r1, #0
 801e378:	f000 8159 	beq.w	801e62e <tcp_receive+0x35a>
 801e37c:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801e37e:	68e8      	ldr	r0, [r5, #12]
 801e380:	6842      	ldr	r2, [r0, #4]
 801e382:	429a      	cmp	r2, r3
 801e384:	d1e5      	bne.n	801e352 <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801e386:	4890      	ldr	r0, [pc, #576]	; (801e5c8 <tcp_receive+0x2f4>)
 801e388:	892b      	ldrh	r3, [r5, #8]
 801e38a:	8902      	ldrh	r2, [r0, #8]
 801e38c:	429a      	cmp	r2, r3
 801e38e:	d90b      	bls.n	801e3a8 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e390:	f7fe fe70 	bl	801d074 <tcp_seg_copy>
                if (cseg != NULL) {
 801e394:	b140      	cbz	r0, 801e3a8 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801e396:	f1b8 0f00 	cmp.w	r8, #0
 801e39a:	f000 8414 	beq.w	801ebc6 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801e39e:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801e3a2:	4629      	mov	r1, r5
 801e3a4:	f7ff fea2 	bl	801e0ec <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801e3a8:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801e3aa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801e3ae:	f002 ba47 	b.w	8020840 <tcp_send_empty_ack>
      if (tcplen == 0) {
 801e3b2:	4f83      	ldr	r7, [pc, #524]	; (801e5c0 <tcp_receive+0x2ec>)
 801e3b4:	8839      	ldrh	r1, [r7, #0]
 801e3b6:	2900      	cmp	r1, #0
 801e3b8:	f040 8116 	bne.w	801e5e8 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e3bc:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801e3be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3c0:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801e3c4:	4470      	add	r0, lr
 801e3c6:	4560      	cmp	r0, ip
 801e3c8:	f040 810e 	bne.w	801e5e8 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801e3cc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801e3ce:	0400      	lsls	r0, r0, #16
 801e3d0:	f100 810a 	bmi.w	801e5e8 <tcp_receive+0x314>
 801e3d4:	4590      	cmp	r8, r2
 801e3d6:	f040 8107 	bne.w	801e5e8 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801e3da:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801e3de:	28ff      	cmp	r0, #255	; 0xff
 801e3e0:	f000 8393 	beq.w	801eb0a <tcp_receive+0x836>
                ++pcb->dupacks;
 801e3e4:	3001      	adds	r0, #1
 801e3e6:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801e3e8:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801e3ea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801e3ee:	f200 838c 	bhi.w	801eb0a <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801e3f2:	f000 8396 	beq.w	801eb22 <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e3f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e3f8:	2800      	cmp	r0, #0
 801e3fa:	f040 80b6 	bne.w	801e56a <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801e3fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e400:	1a99      	subs	r1, r3, r2
 801e402:	2900      	cmp	r1, #0
 801e404:	db06      	blt.n	801e414 <tcp_receive+0x140>
 801e406:	f1c2 0201 	rsb	r2, r2, #1
 801e40a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801e40c:	1a52      	subs	r2, r2, r1
 801e40e:	4413      	add	r3, r2
 801e410:	2b00      	cmp	r3, #0
 801e412:	dd03      	ble.n	801e41c <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801e414:	8b63      	ldrh	r3, [r4, #26]
 801e416:	f043 0302 	orr.w	r3, r3, #2
 801e41a:	8363      	strh	r3, [r4, #26]
}
 801e41c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e420:	4e68      	ldr	r6, [pc, #416]	; (801e5c4 <tcp_receive+0x2f0>)
 801e422:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801e424:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e426:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e42a:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e42c:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e430:	2900      	cmp	r1, #0
 801e432:	db7f      	blt.n	801e534 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e434:	4d65      	ldr	r5, [pc, #404]	; (801e5cc <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e436:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e438:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e43a:	f000 80d9 	beq.w	801e5f0 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e43e:	4594      	cmp	ip, r2
 801e440:	f000 80df 	beq.w	801e602 <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801e444:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801e448:	eba2 0108 	sub.w	r1, r2, r8
 801e44c:	2900      	cmp	r1, #0
 801e44e:	ddb0      	ble.n	801e3b2 <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e450:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e452:	1ad3      	subs	r3, r2, r3
 801e454:	2b00      	cmp	r3, #0
 801e456:	dc7d      	bgt.n	801e554 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801e458:	8b63      	ldrh	r3, [r4, #26]
 801e45a:	0758      	lsls	r0, r3, #29
 801e45c:	d509      	bpl.n	801e472 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801e45e:	f023 0304 	bic.w	r3, r3, #4
 801e462:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801e464:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801e468:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801e46c:	2300      	movs	r3, #0
 801e46e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e472:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801e476:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801e478:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e47a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801e47e:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e480:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801e484:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801e486:	f04f 0300 	mov.w	r3, #0
 801e48a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801e48e:	d913      	bls.n	801e4b8 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801e490:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801e494:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801e496:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801e49a:	429a      	cmp	r2, r3
 801e49c:	f200 81c9 	bhi.w	801e832 <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801e4a0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801e4a4:	4411      	add	r1, r2
 801e4a6:	b289      	uxth	r1, r1
 801e4a8:	428a      	cmp	r2, r1
 801e4aa:	f200 82a9 	bhi.w	801ea00 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801e4ae:	428b      	cmp	r3, r1
 801e4b0:	f240 82a8 	bls.w	801ea04 <tcp_receive+0x730>
 801e4b4:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801e4be:	f7ff fe99 	bl	801e1f4 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e4c2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801e4c4:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e4c6:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e4c8:	4620      	mov	r0, r4
 801e4ca:	f7ff fe93 	bl	801e1f4 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801e4ce:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e4d0:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801e4d2:	fab2 f382 	clz	r3, r2
 801e4d6:	095b      	lsrs	r3, r3, #5
 801e4d8:	425b      	negs	r3, r3
 801e4da:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801e4dc:	2300      	movs	r3, #0
 801e4de:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801e4e0:	2800      	cmp	r0, #0
 801e4e2:	f000 81a3 	beq.w	801e82c <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801e4e6:	4b3a      	ldr	r3, [pc, #232]	; (801e5d0 <tcp_receive+0x2fc>)
 801e4e8:	8819      	ldrh	r1, [r3, #0]
 801e4ea:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801e4ee:	440b      	add	r3, r1
 801e4f0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801e4f4:	8b63      	ldrh	r3, [r4, #26]
 801e4f6:	0519      	lsls	r1, r3, #20
 801e4f8:	f140 80fa 	bpl.w	801e6f0 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801e4fc:	2a00      	cmp	r2, #0
 801e4fe:	f000 81af 	beq.w	801e860 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801e502:	68d3      	ldr	r3, [r2, #12]
 801e504:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801e506:	6858      	ldr	r0, [r3, #4]
 801e508:	f7fb ffe2 	bl	801a4d0 <lwip_htonl>
 801e50c:	1a38      	subs	r0, r7, r0
 801e50e:	2800      	cmp	r0, #0
 801e510:	f300 80ee 	bgt.w	801e6f0 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801e514:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e516:	4f2a      	ldr	r7, [pc, #168]	; (801e5c0 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801e518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e51c:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801e51e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e520:	6833      	ldr	r3, [r6, #0]
 801e522:	e01d      	b.n	801e560 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801e524:	4b2b      	ldr	r3, [pc, #172]	; (801e5d4 <tcp_receive+0x300>)
 801e526:	f240 427c 	movw	r2, #1148	; 0x47c
 801e52a:	492b      	ldr	r1, [pc, #172]	; (801e5d8 <tcp_receive+0x304>)
 801e52c:	482b      	ldr	r0, [pc, #172]	; (801e5dc <tcp_receive+0x308>)
 801e52e:	f008 f8d1 	bl	80266d4 <iprintf>
 801e532:	e6d9      	b.n	801e2e8 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e534:	4a2a      	ldr	r2, [pc, #168]	; (801e5e0 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e536:	4d25      	ldr	r5, [pc, #148]	; (801e5cc <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e538:	6812      	ldr	r2, [r2, #0]
 801e53a:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e53c:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e53e:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801e542:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e546:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801e548:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e54c:	bf38      	it	cc
 801e54e:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801e552:	e777      	b.n	801e444 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e554:	4f1a      	ldr	r7, [pc, #104]	; (801e5c0 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801e556:	4620      	mov	r0, r4
 801e558:	f002 f972 	bl	8020840 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e55c:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e55e:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e560:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e562:	2800      	cmp	r0, #0
 801e564:	f43f aec9 	beq.w	801e2fa <tcp_receive+0x26>
 801e568:	682a      	ldr	r2, [r5, #0]
 801e56a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801e56c:	1aaa      	subs	r2, r5, r2
 801e56e:	2a00      	cmp	r2, #0
 801e570:	f6bf aec3 	bge.w	801e2fa <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801e574:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e578:	b280      	uxth	r0, r0
 801e57a:	4a1a      	ldr	r2, [pc, #104]	; (801e5e4 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801e57c:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e580:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801e584:	ebae 020c 	sub.w	r2, lr, ip
 801e588:	1a12      	subs	r2, r2, r0
 801e58a:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801e58c:	4415      	add	r5, r2
      if (m < 0) {
 801e58e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801e592:	b22d      	sxth	r5, r5
 801e594:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801e596:	d003      	beq.n	801e5a0 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801e598:	ebac 0c0e 	sub.w	ip, ip, lr
 801e59c:	4460      	add	r0, ip
 801e59e:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801e5a0:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801e5a4:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801e5a8:	4410      	add	r0, r2
      pcb->rttest = 0;
 801e5aa:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801e5ac:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801e5ae:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e5b0:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801e5b4:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e5b6:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801e5ba:	e69e      	b.n	801e2fa <tcp_receive+0x26>
 801e5bc:	2002e4bc 	.word	0x2002e4bc
 801e5c0:	2002e4f6 	.word	0x2002e4f6
 801e5c4:	2002e4dc 	.word	0x2002e4dc
 801e5c8:	2002e4c0 	.word	0x2002e4c0
 801e5cc:	2002e4b8 	.word	0x2002e4b8
 801e5d0:	2002e4d0 	.word	0x2002e4d0
 801e5d4:	08045d50 	.word	0x08045d50
 801e5d8:	08045e38 	.word	0x08045e38
 801e5dc:	0802b3cc 	.word	0x0802b3cc
 801e5e0:	2002e4e8 	.word	0x2002e4e8
 801e5e4:	2002e4ac 	.word	0x2002e4ac
        pcb->dupacks = 0;
 801e5e8:	2200      	movs	r2, #0
 801e5ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e5ee:	e7b7      	b.n	801e560 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e5f0:	ebac 0102 	sub.w	r1, ip, r2
 801e5f4:	2900      	cmp	r1, #0
 801e5f6:	f6bf af22 	bge.w	801e43e <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e5fa:	49ac      	ldr	r1, [pc, #688]	; (801e8ac <tcp_receive+0x5d8>)
 801e5fc:	6809      	ldr	r1, [r1, #0]
 801e5fe:	89c9      	ldrh	r1, [r1, #14]
 801e600:	e79d      	b.n	801e53e <tcp_receive+0x26a>
 801e602:	49aa      	ldr	r1, [pc, #680]	; (801e8ac <tcp_receive+0x5d8>)
 801e604:	6809      	ldr	r1, [r1, #0]
 801e606:	89c9      	ldrh	r1, [r1, #14]
 801e608:	458e      	cmp	lr, r1
 801e60a:	f4bf af1b 	bcs.w	801e444 <tcp_receive+0x170>
 801e60e:	e796      	b.n	801e53e <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e610:	1a99      	subs	r1, r3, r2
 801e612:	2900      	cmp	r1, #0
 801e614:	f6bf aead 	bge.w	801e372 <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e618:	48a5      	ldr	r0, [pc, #660]	; (801e8b0 <tcp_receive+0x5dc>)
 801e61a:	f7fe fd2b 	bl	801d074 <tcp_seg_copy>
                  if (cseg != NULL) {
 801e61e:	2800      	cmp	r0, #0
 801e620:	f43f aec2 	beq.w	801e3a8 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801e624:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801e626:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e628:	f7ff fd60 	bl	801e0ec <tcp_oos_insert_segment>
 801e62c:	e6bc      	b.n	801e3a8 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e62e:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801e630:	2b00      	cmp	r3, #0
 801e632:	f77f aeb9 	ble.w	801e3a8 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e636:	8980      	ldrh	r0, [r0, #12]
 801e638:	f7fb ff46 	bl	801a4c8 <lwip_htons>
 801e63c:	07c1      	lsls	r1, r0, #31
 801e63e:	f53f aeb3 	bmi.w	801e3a8 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801e642:	489b      	ldr	r0, [pc, #620]	; (801e8b0 <tcp_receive+0x5dc>)
 801e644:	f7fe fd16 	bl	801d074 <tcp_seg_copy>
 801e648:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801e64a:	2800      	cmp	r0, #0
 801e64c:	f43f aeac 	beq.w	801e3a8 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e650:	68eb      	ldr	r3, [r5, #12]
 801e652:	892a      	ldrh	r2, [r5, #8]
 801e654:	6859      	ldr	r1, [r3, #4]
 801e656:	6833      	ldr	r3, [r6, #0]
 801e658:	440a      	add	r2, r1
 801e65a:	1ad2      	subs	r2, r2, r3
 801e65c:	2a00      	cmp	r2, #0
 801e65e:	dd05      	ble.n	801e66c <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e660:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801e662:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e664:	b299      	uxth	r1, r3
 801e666:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801e668:	f7fd fe52 	bl	801c310 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e66c:	6832      	ldr	r2, [r6, #0]
 801e66e:	883b      	ldrh	r3, [r7, #0]
 801e670:	4413      	add	r3, r2
 801e672:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e674:	1a9b      	subs	r3, r3, r2
 801e676:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801e678:	1a9b      	subs	r3, r3, r2
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	f77f ae94 	ble.w	801e3a8 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e680:	682b      	ldr	r3, [r5, #0]
 801e682:	68db      	ldr	r3, [r3, #12]
 801e684:	8998      	ldrh	r0, [r3, #12]
 801e686:	f7fb ff1f 	bl	801a4c8 <lwip_htons>
 801e68a:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e68c:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e68e:	f100 82b1 	bmi.w	801ebf4 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e692:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801e694:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801e696:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e698:	1a89      	subs	r1, r1, r2
 801e69a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e69c:	4411      	add	r1, r2
 801e69e:	b289      	uxth	r1, r1
 801e6a0:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801e6a2:	f7fd fe35 	bl	801c310 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801e6a6:	682b      	ldr	r3, [r5, #0]
 801e6a8:	891d      	ldrh	r5, [r3, #8]
 801e6aa:	68db      	ldr	r3, [r3, #12]
 801e6ac:	8998      	ldrh	r0, [r3, #12]
 801e6ae:	f7fb ff0b 	bl	801a4c8 <lwip_htons>
 801e6b2:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e6b6:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801e6b8:	bf18      	it	ne
 801e6ba:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e6bc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801e6be:	442b      	add	r3, r5
 801e6c0:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e6c2:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801e6c4:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e6c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e6c8:	4413      	add	r3, r2
 801e6ca:	4299      	cmp	r1, r3
 801e6cc:	f43f ae6c 	beq.w	801e3a8 <tcp_receive+0xd4>
 801e6d0:	4b78      	ldr	r3, [pc, #480]	; (801e8b4 <tcp_receive+0x5e0>)
 801e6d2:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801e6d6:	4978      	ldr	r1, [pc, #480]	; (801e8b8 <tcp_receive+0x5e4>)
 801e6d8:	4878      	ldr	r0, [pc, #480]	; (801e8bc <tcp_receive+0x5e8>)
 801e6da:	f007 fffb 	bl	80266d4 <iprintf>
 801e6de:	e663      	b.n	801e3a8 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801e6e0:	4b74      	ldr	r3, [pc, #464]	; (801e8b4 <tcp_receive+0x5e0>)
 801e6e2:	f240 427b 	movw	r2, #1147	; 0x47b
 801e6e6:	4976      	ldr	r1, [pc, #472]	; (801e8c0 <tcp_receive+0x5ec>)
 801e6e8:	4874      	ldr	r0, [pc, #464]	; (801e8bc <tcp_receive+0x5e8>)
 801e6ea:	f007 fff3 	bl	80266d4 <iprintf>
 801e6ee:	e5f7      	b.n	801e2e0 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e6f0:	4f74      	ldr	r7, [pc, #464]	; (801e8c4 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e6f2:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e6f4:	8839      	ldrh	r1, [r7, #0]
 801e6f6:	e733      	b.n	801e560 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801e6f8:	8b63      	ldrh	r3, [r4, #26]
 801e6fa:	f043 0302 	orr.w	r3, r3, #2
 801e6fe:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e700:	e652      	b.n	801e3a8 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801e702:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e8b0 <tcp_receive+0x5dc>
 801e706:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e70a:	2d00      	cmp	r5, #0
 801e70c:	f000 8170 	beq.w	801e9f0 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e710:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801e714:	4598      	cmp	r8, r3
 801e716:	f200 80c0 	bhi.w	801e89a <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e71a:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801e71e:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e722:	891a      	ldrh	r2, [r3, #8]
 801e724:	4542      	cmp	r2, r8
 801e726:	f0c0 80ad 	bcc.w	801e884 <tcp_receive+0x5b0>
      inseg.len -= off;
 801e72a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e72e:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801e732:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e736:	b292      	uxth	r2, r2
      inseg.len -= off;
 801e738:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801e73c:	896b      	ldrh	r3, [r5, #10]
 801e73e:	4543      	cmp	r3, r8
 801e740:	d20a      	bcs.n	801e758 <tcp_receive+0x484>
        p->len = 0;
 801e742:	2100      	movs	r1, #0
        off -= p->len;
 801e744:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801e748:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801e74a:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801e74c:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801e74e:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801e752:	896b      	ldrh	r3, [r5, #10]
 801e754:	4543      	cmp	r3, r8
 801e756:	d3f5      	bcc.n	801e744 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801e758:	4641      	mov	r1, r8
 801e75a:	4628      	mov	r0, r5
 801e75c:	f7fd fe64 	bl	801c428 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801e760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e762:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e766:	6033      	str	r3, [r6, #0]
 801e768:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e76a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	f43f ae1b 	beq.w	801e3a8 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801e772:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e776:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801e77a:	8998      	ldrh	r0, [r3, #12]
 801e77c:	f7fb fea4 	bl	801a4c8 <lwip_htons>
 801e780:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801e784:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801e786:	bf18      	it	ne
 801e788:	2301      	movne	r3, #1
 801e78a:	442b      	add	r3, r5
 801e78c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801e78e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801e790:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801e792:	f0c0 8181 	bcc.w	801ea98 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801e796:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801e798:	2b00      	cmp	r3, #0
 801e79a:	f000 80a0 	beq.w	801e8de <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e79e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e7a2:	8998      	ldrh	r0, [r3, #12]
 801e7a4:	f7fb fe90 	bl	801a4c8 <lwip_htons>
 801e7a8:	07c2      	lsls	r2, r0, #31
 801e7aa:	f100 8095 	bmi.w	801e8d8 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801e7ae:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801e7b0:	b955      	cbnz	r5, 801e7c8 <tcp_receive+0x4f4>
 801e7b2:	e1f4      	b.n	801eb9e <tcp_receive+0x8ca>
              next = next->next;
 801e7b4:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801e7b8:	4628      	mov	r0, r5
 801e7ba:	f7fe fc3d 	bl	801d038 <tcp_seg_free>
            while (next &&
 801e7be:	4645      	mov	r5, r8
 801e7c0:	f1b8 0f00 	cmp.w	r8, #0
 801e7c4:	f000 81eb 	beq.w	801eb9e <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e7c8:	68e8      	ldr	r0, [r5, #12]
 801e7ca:	883a      	ldrh	r2, [r7, #0]
 801e7cc:	f8d6 e000 	ldr.w	lr, [r6]
 801e7d0:	892b      	ldrh	r3, [r5, #8]
 801e7d2:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801e7d6:	eb02 010e 	add.w	r1, r2, lr
 801e7da:	4463      	add	r3, ip
 801e7dc:	1acb      	subs	r3, r1, r3
            while (next &&
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	f2c0 81a5 	blt.w	801eb2e <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e7e4:	8980      	ldrh	r0, [r0, #12]
 801e7e6:	f7fb fe6f 	bl	801a4c8 <lwip_htons>
 801e7ea:	07c3      	lsls	r3, r0, #31
 801e7ec:	d5e2      	bpl.n	801e7b4 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801e7ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e7f2:	8998      	ldrh	r0, [r3, #12]
 801e7f4:	f7fb fe68 	bl	801a4c8 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e7f8:	0780      	lsls	r0, r0, #30
 801e7fa:	d4db      	bmi.n	801e7b4 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e7fc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e800:	2001      	movs	r0, #1
 801e802:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801e806:	f7fb fe5f 	bl	801a4c8 <lwip_htons>
 801e80a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e80e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801e812:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e816:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801e818:	b280      	uxth	r0, r0
 801e81a:	f7fb fe55 	bl	801a4c8 <lwip_htons>
 801e81e:	f010 0003 	ands.w	r0, r0, #3
 801e822:	bf18      	it	ne
 801e824:	2001      	movne	r0, #1
 801e826:	4440      	add	r0, r8
 801e828:	8038      	strh	r0, [r7, #0]
 801e82a:	e7c3      	b.n	801e7b4 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801e82c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801e830:	e659      	b.n	801e4e6 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e832:	8b62      	ldrh	r2, [r4, #26]
 801e834:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e838:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e83a:	bf14      	ite	ne
 801e83c:	2001      	movne	r0, #1
 801e83e:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e840:	fb12 f200 	smulbb	r2, r2, r0
 801e844:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801e846:	428a      	cmp	r2, r1
 801e848:	bf94      	ite	ls
 801e84a:	1898      	addls	r0, r3, r2
 801e84c:	1858      	addhi	r0, r3, r1
 801e84e:	b282      	uxth	r2, r0
 801e850:	4293      	cmp	r3, r2
 801e852:	f240 80e0 	bls.w	801ea16 <tcp_receive+0x742>
 801e856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e85a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801e85e:	e62b      	b.n	801e4b8 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801e860:	b148      	cbz	r0, 801e876 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801e862:	68c3      	ldr	r3, [r0, #12]
 801e864:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801e866:	6858      	ldr	r0, [r3, #4]
 801e868:	f7fb fe32 	bl	801a4d0 <lwip_htonl>
 801e86c:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801e86e:	2800      	cmp	r0, #0
 801e870:	f73f af3e 	bgt.w	801e6f0 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801e874:	8b63      	ldrh	r3, [r4, #26]
 801e876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e87a:	4f12      	ldr	r7, [pc, #72]	; (801e8c4 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801e87c:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e87e:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e880:	6833      	ldr	r3, [r6, #0]
 801e882:	e66d      	b.n	801e560 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e884:	4b0b      	ldr	r3, [pc, #44]	; (801e8b4 <tcp_receive+0x5e0>)
 801e886:	f240 5297 	movw	r2, #1431	; 0x597
 801e88a:	490f      	ldr	r1, [pc, #60]	; (801e8c8 <tcp_receive+0x5f4>)
 801e88c:	480b      	ldr	r0, [pc, #44]	; (801e8bc <tcp_receive+0x5e8>)
 801e88e:	f007 ff21 	bl	80266d4 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e892:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e896:	891a      	ldrh	r2, [r3, #8]
 801e898:	e747      	b.n	801e72a <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e89a:	4b06      	ldr	r3, [pc, #24]	; (801e8b4 <tcp_receive+0x5e0>)
 801e89c:	f240 5295 	movw	r2, #1429	; 0x595
 801e8a0:	490a      	ldr	r1, [pc, #40]	; (801e8cc <tcp_receive+0x5f8>)
 801e8a2:	4806      	ldr	r0, [pc, #24]	; (801e8bc <tcp_receive+0x5e8>)
 801e8a4:	f007 ff16 	bl	80266d4 <iprintf>
 801e8a8:	e737      	b.n	801e71a <tcp_receive+0x446>
 801e8aa:	bf00      	nop
 801e8ac:	2002e4e8 	.word	0x2002e4e8
 801e8b0:	2002e4c0 	.word	0x2002e4c0
 801e8b4:	08045d50 	.word	0x08045d50
 801e8b8:	08045e84 	.word	0x08045e84
 801e8bc:	0802b3cc 	.word	0x0802b3cc
 801e8c0:	08045e1c 	.word	0x08045e1c
 801e8c4:	2002e4f6 	.word	0x2002e4f6
 801e8c8:	08045e74 	.word	0x08045e74
 801e8cc:	08045e64 	.word	0x08045e64
              pcb->ooseq = pcb->ooseq->next;
 801e8d0:	6803      	ldr	r3, [r0, #0]
 801e8d2:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801e8d4:	f7fe fbb0 	bl	801d038 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801e8d8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801e8da:	2800      	cmp	r0, #0
 801e8dc:	d1f8      	bne.n	801e8d0 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801e8de:	883a      	ldrh	r2, [r7, #0]
 801e8e0:	6831      	ldr	r1, [r6, #0]
 801e8e2:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e8e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801e8e6:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e8e8:	4293      	cmp	r3, r2
 801e8ea:	f0c0 80cb 	bcc.w	801ea84 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801e8ee:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801e8f0:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801e8f2:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801e8f4:	f7fe fa68 	bl	801cdc8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801e8f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e8fc:	891a      	ldrh	r2, [r3, #8]
 801e8fe:	b122      	cbz	r2, 801e90a <tcp_receive+0x636>
          recv_data = inseg.p;
 801e900:	4ab2      	ldr	r2, [pc, #712]	; (801ebcc <tcp_receive+0x8f8>)
 801e902:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801e904:	2300      	movs	r3, #0
 801e906:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e90a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e90e:	8998      	ldrh	r0, [r3, #12]
 801e910:	f7fb fdda 	bl	801a4c8 <lwip_htons>
 801e914:	07c2      	lsls	r2, r0, #31
 801e916:	d504      	bpl.n	801e922 <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801e918:	4aad      	ldr	r2, [pc, #692]	; (801ebd0 <tcp_receive+0x8fc>)
 801e91a:	7813      	ldrb	r3, [r2, #0]
 801e91c:	f043 0320 	orr.w	r3, r3, #32
 801e920:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801e922:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801e924:	2d00      	cmp	r5, #0
 801e926:	d07b      	beq.n	801ea20 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e928:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801ebd8 <tcp_receive+0x904>
 801e92c:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801ebf0 <tcp_receive+0x91c>
 801e930:	4fa8      	ldr	r7, [pc, #672]	; (801ebd4 <tcp_receive+0x900>)
 801e932:	e033      	b.n	801e99c <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e934:	68eb      	ldr	r3, [r5, #12]
 801e936:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801e93a:	8998      	ldrh	r0, [r3, #12]
 801e93c:	f7fb fdc4 	bl	801a4c8 <lwip_htons>
 801e940:	f010 0003 	ands.w	r0, r0, #3
 801e944:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e946:	bf18      	it	ne
 801e948:	2001      	movne	r0, #1
 801e94a:	4450      	add	r0, sl
 801e94c:	1a18      	subs	r0, r3, r0
 801e94e:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801e950:	4620      	mov	r0, r4
 801e952:	f7fe fa39 	bl	801cdc8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801e956:	6869      	ldr	r1, [r5, #4]
 801e958:	890b      	ldrh	r3, [r1, #8]
 801e95a:	b13b      	cbz	r3, 801e96c <tcp_receive+0x698>
            if (recv_data) {
 801e95c:	4b9b      	ldr	r3, [pc, #620]	; (801ebcc <tcp_receive+0x8f8>)
 801e95e:	6818      	ldr	r0, [r3, #0]
 801e960:	2800      	cmp	r0, #0
 801e962:	d05b      	beq.n	801ea1c <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801e964:	f7fd fe1e 	bl	801c5a4 <pbuf_cat>
            cseg->p = NULL;
 801e968:	2300      	movs	r3, #0
 801e96a:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e96c:	68eb      	ldr	r3, [r5, #12]
 801e96e:	8998      	ldrh	r0, [r3, #12]
 801e970:	f7fb fdaa 	bl	801a4c8 <lwip_htons>
 801e974:	07c3      	lsls	r3, r0, #31
 801e976:	d509      	bpl.n	801e98c <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801e978:	4a95      	ldr	r2, [pc, #596]	; (801ebd0 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e97a:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801e97c:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e97e:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801e980:	f043 0320 	orr.w	r3, r3, #32
 801e984:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e986:	d101      	bne.n	801e98c <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801e988:	2307      	movs	r3, #7
 801e98a:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801e98c:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801e98e:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801e990:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801e992:	f7fe fb51 	bl	801d038 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801e996:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801e998:	2d00      	cmp	r5, #0
 801e99a:	d041      	beq.n	801ea20 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e99c:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801e99e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e9a0:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801e9a2:	428b      	cmp	r3, r1
 801e9a4:	d13c      	bne.n	801ea20 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801e9a6:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e9a8:	8990      	ldrh	r0, [r2, #12]
 801e9aa:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801e9ae:	f7fb fd8b 	bl	801a4c8 <lwip_htons>
 801e9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e9b4:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e9b8:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e9bc:	bf18      	it	ne
 801e9be:	2001      	movne	r0, #1
 801e9c0:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e9c2:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e9c4:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e9c6:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e9ca:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e9cc:	8998      	ldrh	r0, [r3, #12]
 801e9ce:	f7fb fd7b 	bl	801a4c8 <lwip_htons>
 801e9d2:	f010 0003 	ands.w	r0, r0, #3
 801e9d6:	bf18      	it	ne
 801e9d8:	2001      	movne	r0, #1
 801e9da:	4458      	add	r0, fp
 801e9dc:	4582      	cmp	sl, r0
 801e9de:	d2a9      	bcs.n	801e934 <tcp_receive+0x660>
 801e9e0:	464b      	mov	r3, r9
 801e9e2:	f240 622b 	movw	r2, #1579	; 0x62b
 801e9e6:	4641      	mov	r1, r8
 801e9e8:	4638      	mov	r0, r7
 801e9ea:	f007 fe73 	bl	80266d4 <iprintf>
 801e9ee:	e7a1      	b.n	801e934 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e9f0:	4b79      	ldr	r3, [pc, #484]	; (801ebd8 <tcp_receive+0x904>)
 801e9f2:	f240 5294 	movw	r2, #1428	; 0x594
 801e9f6:	4979      	ldr	r1, [pc, #484]	; (801ebdc <tcp_receive+0x908>)
 801e9f8:	4876      	ldr	r0, [pc, #472]	; (801ebd4 <tcp_receive+0x900>)
 801e9fa:	f007 fe6b 	bl	80266d4 <iprintf>
 801e9fe:	e687      	b.n	801e710 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801ea00:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ea04:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ea06:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ea08:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ea0a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ea0e:	b292      	uxth	r2, r2
 801ea10:	4293      	cmp	r3, r2
 801ea12:	f63f af20 	bhi.w	801e856 <tcp_receive+0x582>
 801ea16:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801ea1a:	e54d      	b.n	801e4b8 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801ea1c:	6019      	str	r1, [r3, #0]
 801ea1e:	e7a3      	b.n	801e968 <tcp_receive+0x694>
        tcp_ack(pcb);
 801ea20:	8b63      	ldrh	r3, [r4, #26]
 801ea22:	07d8      	lsls	r0, r3, #31
 801ea24:	d50a      	bpl.n	801ea3c <tcp_receive+0x768>
 801ea26:	f023 0301 	bic.w	r3, r3, #1
 801ea2a:	f043 0302 	orr.w	r3, r3, #2
 801ea2e:	8363      	strh	r3, [r4, #26]
 801ea30:	e4f4      	b.n	801e41c <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801ea32:	486b      	ldr	r0, [pc, #428]	; (801ebe0 <tcp_receive+0x90c>)
 801ea34:	f7fe fb1e 	bl	801d074 <tcp_seg_copy>
 801ea38:	6760      	str	r0, [r4, #116]	; 0x74
 801ea3a:	e4b5      	b.n	801e3a8 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801ea3c:	f043 0301 	orr.w	r3, r3, #1
 801ea40:	8363      	strh	r3, [r4, #26]
 801ea42:	e4eb      	b.n	801e41c <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ea44:	4866      	ldr	r0, [pc, #408]	; (801ebe0 <tcp_receive+0x90c>)
 801ea46:	f7fe fb15 	bl	801d074 <tcp_seg_copy>
                  if (cseg != NULL) {
 801ea4a:	4607      	mov	r7, r0
 801ea4c:	2800      	cmp	r0, #0
 801ea4e:	f43f acab 	beq.w	801e3a8 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801ea52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ea56:	6832      	ldr	r2, [r6, #0]
 801ea58:	6859      	ldr	r1, [r3, #4]
 801ea5a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801ea5e:	440b      	add	r3, r1
 801ea60:	1a9b      	subs	r3, r3, r2
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	dd07      	ble.n	801ea76 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ea66:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801ea68:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ea6c:	b291      	uxth	r1, r2
 801ea6e:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801ea72:	f7fd fc4d 	bl	801c310 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801ea76:	4629      	mov	r1, r5
 801ea78:	4638      	mov	r0, r7
                    prev->next = cseg;
 801ea7a:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801ea7e:	f7ff fb35 	bl	801e0ec <tcp_oos_insert_segment>
 801ea82:	e491      	b.n	801e3a8 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801ea84:	4b54      	ldr	r3, [pc, #336]	; (801ebd8 <tcp_receive+0x904>)
 801ea86:	f240 6207 	movw	r2, #1543	; 0x607
 801ea8a:	4956      	ldr	r1, [pc, #344]	; (801ebe4 <tcp_receive+0x910>)
 801ea8c:	4851      	ldr	r0, [pc, #324]	; (801ebd4 <tcp_receive+0x900>)
 801ea8e:	f007 fe21 	bl	80266d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801ea92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801ea94:	883a      	ldrh	r2, [r7, #0]
 801ea96:	e72a      	b.n	801e8ee <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ea98:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ea9c:	8998      	ldrh	r0, [r3, #12]
 801ea9e:	f7fb fd13 	bl	801a4c8 <lwip_htons>
 801eaa2:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801eaa4:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801eaa8:	d47d      	bmi.n	801eba6 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eaaa:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801eaac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801eaae:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eab2:	f7fb fd09 	bl	801a4c8 <lwip_htons>
 801eab6:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801eab8:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eabc:	d503      	bpl.n	801eac6 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801eabe:	3901      	subs	r1, #1
 801eac0:	b289      	uxth	r1, r1
 801eac2:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801eac6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801eaca:	f7fd fc21 	bl	801c310 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801eace:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ead2:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801ead6:	8998      	ldrh	r0, [r3, #12]
 801ead8:	f7fb fcf6 	bl	801a4c8 <lwip_htons>
 801eadc:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eae0:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801eae2:	bf18      	it	ne
 801eae4:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eae6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801eae8:	442b      	add	r3, r5
 801eaea:	b29b      	uxth	r3, r3
 801eaec:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eaee:	4413      	add	r3, r2
 801eaf0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801eaf2:	440a      	add	r2, r1
 801eaf4:	4293      	cmp	r3, r2
 801eaf6:	f43f ae4e 	beq.w	801e796 <tcp_receive+0x4c2>
 801eafa:	4b37      	ldr	r3, [pc, #220]	; (801ebd8 <tcp_receive+0x904>)
 801eafc:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801eb00:	4939      	ldr	r1, [pc, #228]	; (801ebe8 <tcp_receive+0x914>)
 801eb02:	4834      	ldr	r0, [pc, #208]	; (801ebd4 <tcp_receive+0x900>)
 801eb04:	f007 fde6 	bl	80266d4 <iprintf>
 801eb08:	e645      	b.n	801e796 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801eb0a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801eb0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801eb12:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801eb14:	4413      	add	r3, r2
 801eb16:	b29b      	uxth	r3, r3
 801eb18:	429a      	cmp	r2, r3
 801eb1a:	bf88      	it	hi
 801eb1c:	460b      	movhi	r3, r1
 801eb1e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801eb22:	4620      	mov	r0, r4
 801eb24:	f001 fe0a 	bl	802073c <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801eb28:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801eb2a:	6833      	ldr	r3, [r6, #0]
 801eb2c:	e518      	b.n	801e560 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801eb2e:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	dc01      	bgt.n	801eb3a <tcp_receive+0x866>
            pcb->ooseq = next;
 801eb36:	6765      	str	r5, [r4, #116]	; 0x74
 801eb38:	e6d4      	b.n	801e8e4 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801eb3a:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb3e:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801eb42:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb46:	8998      	ldrh	r0, [r3, #12]
 801eb48:	f7fb fcbe 	bl	801a4c8 <lwip_htons>
 801eb4c:	0781      	lsls	r1, r0, #30
 801eb4e:	d504      	bpl.n	801eb5a <tcp_receive+0x886>
                inseg.len -= 1;
 801eb50:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801eb54:	3b01      	subs	r3, #1
 801eb56:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801eb5a:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801eb5e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801eb62:	f7fd fbd5 	bl	801c310 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801eb66:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801eb6a:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801eb6e:	8998      	ldrh	r0, [r3, #12]
 801eb70:	f7fb fcaa 	bl	801a4c8 <lwip_htons>
 801eb74:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801eb78:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801eb7a:	bf18      	it	ne
 801eb7c:	2001      	movne	r0, #1
 801eb7e:	eb08 0200 	add.w	r2, r8, r0
 801eb82:	b292      	uxth	r2, r2
 801eb84:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801eb86:	6859      	ldr	r1, [r3, #4]
 801eb88:	6833      	ldr	r3, [r6, #0]
 801eb8a:	4413      	add	r3, r2
 801eb8c:	428b      	cmp	r3, r1
 801eb8e:	d0d2      	beq.n	801eb36 <tcp_receive+0x862>
 801eb90:	4b11      	ldr	r3, [pc, #68]	; (801ebd8 <tcp_receive+0x904>)
 801eb92:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801eb96:	4915      	ldr	r1, [pc, #84]	; (801ebec <tcp_receive+0x918>)
 801eb98:	480e      	ldr	r0, [pc, #56]	; (801ebd4 <tcp_receive+0x900>)
 801eb9a:	f007 fd9b 	bl	80266d4 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801eb9e:	883a      	ldrh	r2, [r7, #0]
 801eba0:	6831      	ldr	r1, [r6, #0]
 801eba2:	4411      	add	r1, r2
 801eba4:	e7c7      	b.n	801eb36 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801eba6:	899d      	ldrh	r5, [r3, #12]
 801eba8:	4628      	mov	r0, r5
 801ebaa:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801ebae:	f7fb fc8b 	bl	801a4c8 <lwip_htons>
 801ebb2:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801ebb6:	f7fb fc87 	bl	801a4c8 <lwip_htons>
 801ebba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ebbe:	4328      	orrs	r0, r5
 801ebc0:	8198      	strh	r0, [r3, #12]
 801ebc2:	b280      	uxth	r0, r0
 801ebc4:	e772      	b.n	801eaac <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801ebc6:	6760      	str	r0, [r4, #116]	; 0x74
 801ebc8:	f7ff bbeb 	b.w	801e3a2 <tcp_receive+0xce>
 801ebcc:	2002e4d4 	.word	0x2002e4d4
 801ebd0:	2002e4d8 	.word	0x2002e4d8
 801ebd4:	0802b3cc 	.word	0x0802b3cc
 801ebd8:	08045d50 	.word	0x08045d50
 801ebdc:	08045e54 	.word	0x08045e54
 801ebe0:	2002e4c0 	.word	0x2002e4c0
 801ebe4:	08045ef8 	.word	0x08045ef8
 801ebe8:	08045e84 	.word	0x08045e84
 801ebec:	08045ebc 	.word	0x08045ebc
 801ebf0:	08045f18 	.word	0x08045f18
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801ebf4:	68db      	ldr	r3, [r3, #12]
 801ebf6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801ebfa:	4640      	mov	r0, r8
 801ebfc:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801ec00:	f7fb fc62 	bl	801a4c8 <lwip_htons>
 801ec04:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801ec08:	f7fb fc5e 	bl	801a4c8 <lwip_htons>
 801ec0c:	682b      	ldr	r3, [r5, #0]
 801ec0e:	ea48 0800 	orr.w	r8, r8, r0
 801ec12:	68da      	ldr	r2, [r3, #12]
 801ec14:	f8a2 800c 	strh.w	r8, [r2, #12]
 801ec18:	e53b      	b.n	801e692 <tcp_receive+0x3be>
 801ec1a:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801ec20 <tcp_receive+0x94c>
 801ec1e:	e5a8      	b.n	801e772 <tcp_receive+0x49e>
 801ec20:	2002e4c0 	.word	0x2002e4c0

0801ec24 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ec24:	494a      	ldr	r1, [pc, #296]	; (801ed50 <tcp_parseopt.part.0+0x12c>)
 801ec26:	4b4b      	ldr	r3, [pc, #300]	; (801ed54 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ec28:	4a4b      	ldr	r2, [pc, #300]	; (801ed58 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801ec2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ec2e:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ec32:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ec34:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ec36:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ec3a:	4b48      	ldr	r3, [pc, #288]	; (801ed5c <tcp_parseopt.part.0+0x138>)
 801ec3c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801ed60 <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ec40:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801ec42:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ec46:	681d      	ldr	r5, [r3, #0]
 801ec48:	f8b9 2000 	ldrh.w	r2, [r9]
 801ec4c:	f102 0c14 	add.w	ip, r2, #20
 801ec50:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ec52:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801ec54:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ec58:	d96d      	bls.n	801ed36 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801ec5a:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ec5c:	b1ac      	cbz	r4, 801ec8a <tcp_parseopt.part.0+0x66>
 801ec5e:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801ec60:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ec64:	d811      	bhi.n	801ec8a <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801ec66:	b2c9      	uxtb	r1, r1
 801ec68:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801ec6a:	2901      	cmp	r1, #1
 801ec6c:	d011      	beq.n	801ec92 <tcp_parseopt.part.0+0x6e>
 801ec6e:	2902      	cmp	r1, #2
 801ec70:	d017      	beq.n	801eca2 <tcp_parseopt.part.0+0x7e>
 801ec72:	b191      	cbz	r1, 801ec9a <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ec74:	b10c      	cbz	r4, 801ec7a <tcp_parseopt.part.0+0x56>
 801ec76:	4573      	cmp	r3, lr
 801ec78:	d242      	bcs.n	801ed00 <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801ec7a:	442b      	add	r3, r5
 801ec7c:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801ec7e:	2b01      	cmp	r3, #1
 801ec80:	d961      	bls.n	801ed46 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801ec82:	441a      	add	r2, r3
 801ec84:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ec86:	2101      	movs	r1, #1
 801ec88:	e7e0      	b.n	801ec4c <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801ec8a:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801ec8e:	2901      	cmp	r1, #1
 801ec90:	d1ed      	bne.n	801ec6e <tcp_parseopt.part.0+0x4a>
 801ec92:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801ec96:	461a      	mov	r2, r3
 801ec98:	e7db      	b.n	801ec52 <tcp_parseopt.part.0+0x2e>
 801ec9a:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801ec9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801eca2:	1c91      	adds	r1, r2, #2
 801eca4:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801eca6:	b10c      	cbz	r4, 801ecac <tcp_parseopt.part.0+0x88>
 801eca8:	4573      	cmp	r3, lr
 801ecaa:	d224      	bcs.n	801ecf6 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801ecac:	442b      	add	r3, r5
 801ecae:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801ecb0:	2b04      	cmp	r3, #4
 801ecb2:	d145      	bne.n	801ed40 <tcp_parseopt.part.0+0x11c>
 801ecb4:	1c4b      	adds	r3, r1, #1
 801ecb6:	42b3      	cmp	r3, r6
 801ecb8:	da42      	bge.n	801ed40 <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801ecba:	1cd3      	adds	r3, r2, #3
 801ecbc:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ecbe:	b384      	cbz	r4, 801ed22 <tcp_parseopt.part.0+0xfe>
 801ecc0:	458e      	cmp	lr, r1
 801ecc2:	d822      	bhi.n	801ed0a <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ecc4:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801ecc8:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ecca:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801eccc:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801ecce:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ecd0:	f814 c001 	ldrb.w	ip, [r4, r1]
 801ecd4:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ecd8:	d820      	bhi.n	801ed1c <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ecda:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801ecde:	b2c9      	uxtb	r1, r1
 801ece0:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801ece2:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ece6:	1e59      	subs	r1, r3, #1
 801ece8:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801ecec:	bf28      	it	cs
 801ecee:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801ecf2:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801ecf4:	e7c7      	b.n	801ec86 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ecf6:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801ecfa:	b2db      	uxtb	r3, r3
 801ecfc:	5ce3      	ldrb	r3, [r4, r3]
 801ecfe:	e7d7      	b.n	801ecb0 <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ed00:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801ed04:	b2db      	uxtb	r3, r3
 801ed06:	5ce3      	ldrb	r3, [r4, r3]
 801ed08:	e7b9      	b.n	801ec7e <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801ed0a:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801ed0c:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed0e:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed10:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801ed14:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed16:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed1a:	d9de      	bls.n	801ecda <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801ed1c:	442b      	add	r3, r5
 801ed1e:	7d1b      	ldrb	r3, [r3, #20]
 801ed20:	e7df      	b.n	801ece2 <tcp_parseopt.part.0+0xbe>
 801ed22:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801ed24:	3204      	adds	r2, #4
    return opts[optidx];
 801ed26:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed28:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801ed2c:	b292      	uxth	r2, r2
    return opts[optidx];
 801ed2e:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed30:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801ed34:	e7d5      	b.n	801ece2 <tcp_parseopt.part.0+0xbe>
 801ed36:	2900      	cmp	r1, #0
 801ed38:	d0b1      	beq.n	801ec9e <tcp_parseopt.part.0+0x7a>
 801ed3a:	f8a9 2000 	strh.w	r2, [r9]
 801ed3e:	e7ae      	b.n	801ec9e <tcp_parseopt.part.0+0x7a>
 801ed40:	f8a9 1000 	strh.w	r1, [r9]
 801ed44:	e7ab      	b.n	801ec9e <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801ed46:	3202      	adds	r2, #2
 801ed48:	f8a9 2000 	strh.w	r2, [r9]
 801ed4c:	e7a7      	b.n	801ec9e <tcp_parseopt.part.0+0x7a>
 801ed4e:	bf00      	nop
 801ed50:	2002e4ec 	.word	0x2002e4ec
 801ed54:	2002e4f0 	.word	0x2002e4f0
 801ed58:	2002e4f4 	.word	0x2002e4f4
 801ed5c:	2002e4e8 	.word	0x2002e4e8
 801ed60:	2002e4e4 	.word	0x2002e4e4

0801ed64 <tcp_input>:
{
 801ed64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ed68:	4604      	mov	r4, r0
{
 801ed6a:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ed6c:	2800      	cmp	r0, #0
 801ed6e:	f000 80d2 	beq.w	801ef16 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801ed72:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801ed74:	4e6b      	ldr	r6, [pc, #428]	; (801ef24 <tcp_input+0x1c0>)
 801ed76:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801ed78:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801ed7a:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801ed7c:	d805      	bhi.n	801ed8a <tcp_input+0x26>
  pbuf_free(p);
 801ed7e:	4620      	mov	r0, r4
}
 801ed80:	b009      	add	sp, #36	; 0x24
 801ed82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801ed86:	f7fd bbdb 	b.w	801c540 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ed8a:	4f67      	ldr	r7, [pc, #412]	; (801ef28 <tcp_input+0x1c4>)
 801ed8c:	6839      	ldr	r1, [r7, #0]
 801ed8e:	6978      	ldr	r0, [r7, #20]
 801ed90:	f005 f9ae 	bl	80240f0 <ip4_addr_isbroadcast_u32>
 801ed94:	2800      	cmp	r0, #0
 801ed96:	d1f2      	bne.n	801ed7e <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ed98:	697b      	ldr	r3, [r7, #20]
 801ed9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ed9e:	2be0      	cmp	r3, #224	; 0xe0
 801eda0:	d0ed      	beq.n	801ed7e <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801eda2:	f107 0314 	add.w	r3, r7, #20
 801eda6:	f107 0910 	add.w	r9, r7, #16
 801edaa:	2106      	movs	r1, #6
 801edac:	4620      	mov	r0, r4
 801edae:	9300      	str	r3, [sp, #0]
 801edb0:	464b      	mov	r3, r9
 801edb2:	8922      	ldrh	r2, [r4, #8]
 801edb4:	f7fc f91c 	bl	801aff0 <ip_chksum_pseudo>
    if (chksum != 0) {
 801edb8:	4605      	mov	r5, r0
 801edba:	2800      	cmp	r0, #0
 801edbc:	d1df      	bne.n	801ed7e <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801edbe:	6833      	ldr	r3, [r6, #0]
 801edc0:	8998      	ldrh	r0, [r3, #12]
 801edc2:	f7fb fb81 	bl	801a4c8 <lwip_htons>
 801edc6:	0a80      	lsrs	r0, r0, #10
 801edc8:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801edcc:	2913      	cmp	r1, #19
 801edce:	d9d6      	bls.n	801ed7e <tcp_input+0x1a>
 801edd0:	8923      	ldrh	r3, [r4, #8]
 801edd2:	b28a      	uxth	r2, r1
 801edd4:	428b      	cmp	r3, r1
 801edd6:	d3d2      	bcc.n	801ed7e <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801edd8:	f1a2 0314 	sub.w	r3, r2, #20
 801eddc:	4853      	ldr	r0, [pc, #332]	; (801ef2c <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801edde:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801ef58 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ede2:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801ede4:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ede8:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801edea:	8960      	ldrh	r0, [r4, #10]
 801edec:	4290      	cmp	r0, r2
 801edee:	f080 819f 	bcs.w	801f130 <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801edf2:	6823      	ldr	r3, [r4, #0]
 801edf4:	2b00      	cmp	r3, #0
 801edf6:	f000 837b 	beq.w	801f4f0 <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801edfa:	2114      	movs	r1, #20
 801edfc:	4620      	mov	r0, r4
 801edfe:	f7fd fb13 	bl	801c428 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee02:	4b4a      	ldr	r3, [pc, #296]	; (801ef2c <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801ee04:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ee06:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee08:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801ee0c:	4b48      	ldr	r3, [pc, #288]	; (801ef30 <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801ee0e:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee10:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801ee14:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ee16:	f7fd fb07 	bl	801c428 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801ee1a:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee1c:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801ee20:	8943      	ldrh	r3, [r0, #10]
 801ee22:	455b      	cmp	r3, fp
 801ee24:	d3ab      	bcc.n	801ed7e <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801ee26:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801ee28:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801ee2a:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801ee2e:	f7fd fafb 	bl	801c428 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801ee32:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ee34:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801ee36:	442b      	add	r3, r5
 801ee38:	eba3 030a 	sub.w	r3, r3, sl
 801ee3c:	b29b      	uxth	r3, r3
 801ee3e:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ee40:	2a00      	cmp	r2, #0
 801ee42:	f040 835c 	bne.w	801f4fe <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ee46:	6822      	ldr	r2, [r4, #0]
 801ee48:	8912      	ldrh	r2, [r2, #8]
 801ee4a:	429a      	cmp	r2, r3
 801ee4c:	d005      	beq.n	801ee5a <tcp_input+0xf6>
 801ee4e:	4b39      	ldr	r3, [pc, #228]	; (801ef34 <tcp_input+0x1d0>)
 801ee50:	22e0      	movs	r2, #224	; 0xe0
 801ee52:	4939      	ldr	r1, [pc, #228]	; (801ef38 <tcp_input+0x1d4>)
 801ee54:	4839      	ldr	r0, [pc, #228]	; (801ef3c <tcp_input+0x1d8>)
 801ee56:	f007 fc3d 	bl	80266d4 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ee5a:	6835      	ldr	r5, [r6, #0]
 801ee5c:	8828      	ldrh	r0, [r5, #0]
 801ee5e:	f7fb fb33 	bl	801a4c8 <lwip_htons>
 801ee62:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ee64:	6835      	ldr	r5, [r6, #0]
 801ee66:	8868      	ldrh	r0, [r5, #2]
 801ee68:	f7fb fb2e 	bl	801a4c8 <lwip_htons>
 801ee6c:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ee6e:	6835      	ldr	r5, [r6, #0]
 801ee70:	6868      	ldr	r0, [r5, #4]
 801ee72:	f7fb fb2d 	bl	801a4d0 <lwip_htonl>
 801ee76:	4b32      	ldr	r3, [pc, #200]	; (801ef40 <tcp_input+0x1dc>)
 801ee78:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ee7a:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ee7c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ee7e:	68a8      	ldr	r0, [r5, #8]
 801ee80:	f7fb fb26 	bl	801a4d0 <lwip_htonl>
 801ee84:	4b2f      	ldr	r3, [pc, #188]	; (801ef44 <tcp_input+0x1e0>)
 801ee86:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ee88:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ee8a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ee8c:	89e8      	ldrh	r0, [r5, #14]
 801ee8e:	f7fb fb1b 	bl	801a4c8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801ee92:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ee94:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801ee96:	8998      	ldrh	r0, [r3, #12]
 801ee98:	f7fb fb16 	bl	801a4c8 <lwip_htons>
 801ee9c:	492a      	ldr	r1, [pc, #168]	; (801ef48 <tcp_input+0x1e4>)
 801ee9e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801eea2:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801eea4:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801eea6:	0782      	lsls	r2, r0, #30
 801eea8:	f040 8139 	bne.w	801f11e <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801eeac:	4a27      	ldr	r2, [pc, #156]	; (801ef4c <tcp_input+0x1e8>)
 801eeae:	9205      	str	r2, [sp, #20]
 801eeb0:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801eeb2:	4b27      	ldr	r3, [pc, #156]	; (801ef50 <tcp_input+0x1ec>)
 801eeb4:	681d      	ldr	r5, [r3, #0]
 801eeb6:	2d00      	cmp	r5, #0
 801eeb8:	f000 80e0 	beq.w	801f07c <tcp_input+0x318>
  prev = NULL;
 801eebc:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801eec0:	4b1c      	ldr	r3, [pc, #112]	; (801ef34 <tcp_input+0x1d0>)
 801eec2:	f8df b098 	ldr.w	fp, [pc, #152]	; 801ef5c <tcp_input+0x1f8>
 801eec6:	f8df a074 	ldr.w	sl, [pc, #116]	; 801ef3c <tcp_input+0x1d8>
 801eeca:	e019      	b.n	801ef00 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801eecc:	2a0a      	cmp	r2, #10
 801eece:	f000 80cd 	beq.w	801f06c <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801eed2:	2a01      	cmp	r2, #1
 801eed4:	f000 80c3 	beq.w	801f05e <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eed8:	7a29      	ldrb	r1, [r5, #8]
 801eeda:	b131      	cbz	r1, 801eeea <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801eedc:	687a      	ldr	r2, [r7, #4]
 801eede:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801eee2:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eee4:	b2d2      	uxtb	r2, r2
 801eee6:	4291      	cmp	r1, r2
 801eee8:	d104      	bne.n	801eef4 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801eeea:	6832      	ldr	r2, [r6, #0]
 801eeec:	8b28      	ldrh	r0, [r5, #24]
 801eeee:	8811      	ldrh	r1, [r2, #0]
 801eef0:	4288      	cmp	r0, r1
 801eef2:	d035      	beq.n	801ef60 <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801eef4:	68ea      	ldr	r2, [r5, #12]
 801eef6:	46a8      	mov	r8, r5
 801eef8:	2a00      	cmp	r2, #0
 801eefa:	f000 80bf 	beq.w	801f07c <tcp_input+0x318>
 801eefe:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ef00:	7d2a      	ldrb	r2, [r5, #20]
 801ef02:	2a00      	cmp	r2, #0
 801ef04:	d1e2      	bne.n	801eecc <tcp_input+0x168>
 801ef06:	22fb      	movs	r2, #251	; 0xfb
 801ef08:	4659      	mov	r1, fp
 801ef0a:	4650      	mov	r0, sl
 801ef0c:	f007 fbe2 	bl	80266d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ef10:	7d2a      	ldrb	r2, [r5, #20]
 801ef12:	4b08      	ldr	r3, [pc, #32]	; (801ef34 <tcp_input+0x1d0>)
 801ef14:	e7da      	b.n	801eecc <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ef16:	4b07      	ldr	r3, [pc, #28]	; (801ef34 <tcp_input+0x1d0>)
 801ef18:	2283      	movs	r2, #131	; 0x83
 801ef1a:	490e      	ldr	r1, [pc, #56]	; (801ef54 <tcp_input+0x1f0>)
 801ef1c:	4807      	ldr	r0, [pc, #28]	; (801ef3c <tcp_input+0x1d8>)
 801ef1e:	f007 fbd9 	bl	80266d4 <iprintf>
 801ef22:	e726      	b.n	801ed72 <tcp_input+0xe>
 801ef24:	2002e4e8 	.word	0x2002e4e8
 801ef28:	2001f300 	.word	0x2001f300
 801ef2c:	2002e4f4 	.word	0x2002e4f4
 801ef30:	2002e4ec 	.word	0x2002e4ec
 801ef34:	08045d50 	.word	0x08045d50
 801ef38:	08045f74 	.word	0x08045f74
 801ef3c:	0802b3cc 	.word	0x0802b3cc
 801ef40:	2002e4dc 	.word	0x2002e4dc
 801ef44:	2002e4b8 	.word	0x2002e4b8
 801ef48:	2002e4bc 	.word	0x2002e4bc
 801ef4c:	2002e4f6 	.word	0x2002e4f6
 801ef50:	2002e49c 	.word	0x2002e49c
 801ef54:	08045f40 	.word	0x08045f40
 801ef58:	2002e4f0 	.word	0x2002e4f0
 801ef5c:	08045f94 	.word	0x08045f94
    if (pcb->remote_port == tcphdr->src &&
 801ef60:	8852      	ldrh	r2, [r2, #2]
 801ef62:	8ae9      	ldrh	r1, [r5, #22]
 801ef64:	4291      	cmp	r1, r2
 801ef66:	d1c5      	bne.n	801eef4 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801ef68:	6869      	ldr	r1, [r5, #4]
 801ef6a:	693a      	ldr	r2, [r7, #16]
 801ef6c:	4291      	cmp	r1, r2
 801ef6e:	d1c1      	bne.n	801eef4 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ef70:	6829      	ldr	r1, [r5, #0]
 801ef72:	697a      	ldr	r2, [r7, #20]
 801ef74:	4291      	cmp	r1, r2
 801ef76:	d1bd      	bne.n	801eef4 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ef78:	68eb      	ldr	r3, [r5, #12]
 801ef7a:	42ab      	cmp	r3, r5
 801ef7c:	f000 846e 	beq.w	801f85c <tcp_input+0xaf8>
      if (prev != NULL) {
 801ef80:	f1b8 0f00 	cmp.w	r8, #0
 801ef84:	d009      	beq.n	801ef9a <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801ef86:	4a75      	ldr	r2, [pc, #468]	; (801f15c <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801ef88:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801ef8c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801ef8e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801ef90:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ef92:	68eb      	ldr	r3, [r5, #12]
 801ef94:	42ab      	cmp	r3, r5
 801ef96:	f000 8447 	beq.w	801f828 <tcp_input+0xac4>
    inseg.next = NULL;
 801ef9a:	2300      	movs	r3, #0
 801ef9c:	4f70      	ldr	r7, [pc, #448]	; (801f160 <tcp_input+0x3fc>)
    recv_data = NULL;
 801ef9e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801f188 <tcp_input+0x424>
    recv_flags = 0;
 801efa2:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801f18c <tcp_input+0x428>
    recv_acked = 0;
 801efa6:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801f190 <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801efaa:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801efac:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801efae:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801efb2:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801efb6:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801efba:	4b6a      	ldr	r3, [pc, #424]	; (801f164 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801efbc:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801efbe:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801efc0:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801efc2:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801efc4:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801efc6:	071a      	lsls	r2, r3, #28
 801efc8:	d503      	bpl.n	801efd2 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801efca:	7b62      	ldrb	r2, [r4, #13]
 801efcc:	f042 0201 	orr.w	r2, r2, #1
 801efd0:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801efd2:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801efd4:	b172      	cbz	r2, 801eff4 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801efd6:	4628      	mov	r0, r5
 801efd8:	f7fe ff78 	bl	801decc <tcp_process_refused_data>
 801efdc:	300d      	adds	r0, #13
 801efde:	f000 8296 	beq.w	801f50e <tcp_input+0x7aa>
 801efe2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801efe4:	b123      	cbz	r3, 801eff0 <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801efe6:	9b05      	ldr	r3, [sp, #20]
 801efe8:	881b      	ldrh	r3, [r3, #0]
 801efea:	2b00      	cmp	r3, #0
 801efec:	f040 828f 	bne.w	801f50e <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801eff0:	4b5c      	ldr	r3, [pc, #368]	; (801f164 <tcp_input+0x400>)
 801eff2:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801eff4:	4c5c      	ldr	r4, [pc, #368]	; (801f168 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801eff6:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801eff8:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801effa:	f140 8163 	bpl.w	801f2c4 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801effe:	7d29      	ldrb	r1, [r5, #20]
 801f000:	2902      	cmp	r1, #2
 801f002:	f000 8350 	beq.w	801f6a6 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801f006:	4b59      	ldr	r3, [pc, #356]	; (801f16c <tcp_input+0x408>)
 801f008:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	429a      	cmp	r2, r3
 801f00e:	f000 844a 	beq.w	801f8a6 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f012:	1a9b      	subs	r3, r3, r2
 801f014:	d404      	bmi.n	801f020 <tcp_input+0x2bc>
 801f016:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801f018:	1a9b      	subs	r3, r3, r2
 801f01a:	2b00      	cmp	r3, #0
 801f01c:	f340 833e 	ble.w	801f69c <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801f020:	f89a 3000 	ldrb.w	r3, [sl]
 801f024:	0718      	lsls	r0, r3, #28
 801f026:	f140 8278 	bpl.w	801f51a <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801f02a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801f02e:	b11b      	cbz	r3, 801f038 <tcp_input+0x2d4>
 801f030:	f06f 010d 	mvn.w	r1, #13
 801f034:	6928      	ldr	r0, [r5, #16]
 801f036:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801f038:	4848      	ldr	r0, [pc, #288]	; (801f15c <tcp_input+0x3f8>)
 801f03a:	4629      	mov	r1, r5
 801f03c:	f7fe fbc4 	bl	801d7c8 <tcp_pcb_remove>
        tcp_free(pcb);
 801f040:	4628      	mov	r0, r5
 801f042:	f7fd fdbd 	bl	801cbc0 <tcp_free>
    tcp_input_pcb = NULL;
 801f046:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801f048:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801f04a:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801f04c:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801f050:	b110      	cbz	r0, 801f058 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801f052:	f7fd fa75 	bl	801c540 <pbuf_free>
      inseg.p = NULL;
 801f056:	607d      	str	r5, [r7, #4]
}
 801f058:	b009      	add	sp, #36	; 0x24
 801f05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801f05e:	22fd      	movs	r2, #253	; 0xfd
 801f060:	4943      	ldr	r1, [pc, #268]	; (801f170 <tcp_input+0x40c>)
 801f062:	4650      	mov	r0, sl
 801f064:	f007 fb36 	bl	80266d4 <iprintf>
 801f068:	4b42      	ldr	r3, [pc, #264]	; (801f174 <tcp_input+0x410>)
 801f06a:	e735      	b.n	801eed8 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801f06c:	22fc      	movs	r2, #252	; 0xfc
 801f06e:	4942      	ldr	r1, [pc, #264]	; (801f178 <tcp_input+0x414>)
 801f070:	4650      	mov	r0, sl
 801f072:	f007 fb2f 	bl	80266d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801f076:	7d2a      	ldrb	r2, [r5, #20]
 801f078:	4b3e      	ldr	r3, [pc, #248]	; (801f174 <tcp_input+0x410>)
 801f07a:	e72a      	b.n	801eed2 <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801f07c:	4b3f      	ldr	r3, [pc, #252]	; (801f17c <tcp_input+0x418>)
 801f07e:	681d      	ldr	r5, [r3, #0]
 801f080:	2d00      	cmp	r5, #0
 801f082:	d05b      	beq.n	801f13c <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801f084:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801f174 <tcp_input+0x410>
 801f088:	f8df b108 	ldr.w	fp, [pc, #264]	; 801f194 <tcp_input+0x430>
 801f08c:	f8df a108 	ldr.w	sl, [pc, #264]	; 801f198 <tcp_input+0x434>
 801f090:	e002      	b.n	801f098 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801f092:	68ed      	ldr	r5, [r5, #12]
 801f094:	2d00      	cmp	r5, #0
 801f096:	d051      	beq.n	801f13c <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801f098:	7d2b      	ldrb	r3, [r5, #20]
 801f09a:	2b0a      	cmp	r3, #10
 801f09c:	4643      	mov	r3, r8
 801f09e:	d005      	beq.n	801f0ac <tcp_input+0x348>
 801f0a0:	f240 121f 	movw	r2, #287	; 0x11f
 801f0a4:	4659      	mov	r1, fp
 801f0a6:	4650      	mov	r0, sl
 801f0a8:	f007 fb14 	bl	80266d4 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f0ac:	7a2a      	ldrb	r2, [r5, #8]
 801f0ae:	b132      	cbz	r2, 801f0be <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801f0b6:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f0b8:	b2db      	uxtb	r3, r3
 801f0ba:	429a      	cmp	r2, r3
 801f0bc:	d1e9      	bne.n	801f092 <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801f0be:	6832      	ldr	r2, [r6, #0]
 801f0c0:	8b2b      	ldrh	r3, [r5, #24]
 801f0c2:	8811      	ldrh	r1, [r2, #0]
 801f0c4:	428b      	cmp	r3, r1
 801f0c6:	d1e4      	bne.n	801f092 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801f0c8:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801f0ca:	8ae8      	ldrh	r0, [r5, #22]
 801f0cc:	4290      	cmp	r0, r2
 801f0ce:	d1e0      	bne.n	801f092 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801f0d0:	6869      	ldr	r1, [r5, #4]
 801f0d2:	693a      	ldr	r2, [r7, #16]
 801f0d4:	4291      	cmp	r1, r2
 801f0d6:	d1dc      	bne.n	801f092 <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801f0d8:	6829      	ldr	r1, [r5, #0]
 801f0da:	697a      	ldr	r2, [r7, #20]
 801f0dc:	4291      	cmp	r1, r2
 801f0de:	d1d8      	bne.n	801f092 <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801f0e0:	4a20      	ldr	r2, [pc, #128]	; (801f164 <tcp_input+0x400>)
 801f0e2:	7812      	ldrb	r2, [r2, #0]
 801f0e4:	0757      	lsls	r7, r2, #29
 801f0e6:	f53f ae4a 	bmi.w	801ed7e <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801f0ea:	0796      	lsls	r6, r2, #30
 801f0ec:	f140 8395 	bpl.w	801f81a <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801f0f0:	4a1e      	ldr	r2, [pc, #120]	; (801f16c <tcp_input+0x408>)
 801f0f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801f0f4:	6812      	ldr	r2, [r2, #0]
 801f0f6:	1a51      	subs	r1, r2, r1
 801f0f8:	d404      	bmi.n	801f104 <tcp_input+0x3a0>
 801f0fa:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801f0fc:	1b89      	subs	r1, r1, r6
 801f0fe:	2900      	cmp	r1, #0
 801f100:	f340 83ba 	ble.w	801f878 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801f104:	9b05      	ldr	r3, [sp, #20]
 801f106:	881b      	ldrh	r3, [r3, #0]
 801f108:	2b00      	cmp	r3, #0
 801f10a:	f43f ae38 	beq.w	801ed7e <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801f10e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801f110:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801f112:	f043 0302 	orr.w	r3, r3, #2
 801f116:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801f118:	f001 fbc4 	bl	80208a4 <tcp_output>
        pbuf_free(p);
 801f11c:	e62f      	b.n	801ed7e <tcp_input+0x1a>
    tcplen++;
 801f11e:	1c5a      	adds	r2, r3, #1
 801f120:	4917      	ldr	r1, [pc, #92]	; (801f180 <tcp_input+0x41c>)
 801f122:	b292      	uxth	r2, r2
 801f124:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801f126:	4293      	cmp	r3, r2
    tcplen++;
 801f128:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801f12a:	f67f aec2 	bls.w	801eeb2 <tcp_input+0x14e>
 801f12e:	e626      	b.n	801ed7e <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801f130:	4a14      	ldr	r2, [pc, #80]	; (801f184 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801f132:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801f134:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801f136:	f7fd f977 	bl	801c428 <pbuf_remove_header>
 801f13a:	e68e      	b.n	801ee5a <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801f13c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801f19c <tcp_input+0x438>
 801f140:	f8da 8000 	ldr.w	r8, [sl]
 801f144:	f1b8 0f00 	cmp.w	r8, #0
 801f148:	f000 8237 	beq.w	801f5ba <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f14c:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801f150:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801f152:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801f154:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801f156:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801f15a:	e027      	b.n	801f1ac <tcp_input+0x448>
 801f15c:	2002e49c 	.word	0x2002e49c
 801f160:	2002e4c0 	.word	0x2002e4c0
 801f164:	2002e4bc 	.word	0x2002e4bc
 801f168:	2002e4e0 	.word	0x2002e4e0
 801f16c:	2002e4dc 	.word	0x2002e4dc
 801f170:	08045fe8 	.word	0x08045fe8
 801f174:	08045d50 	.word	0x08045d50
 801f178:	08045fbc 	.word	0x08045fbc
 801f17c:	2002e4b4 	.word	0x2002e4b4
 801f180:	2002e4f6 	.word	0x2002e4f6
 801f184:	2002e4ec 	.word	0x2002e4ec
 801f188:	2002e4d4 	.word	0x2002e4d4
 801f18c:	2002e4d8 	.word	0x2002e4d8
 801f190:	2002e4d0 	.word	0x2002e4d0
 801f194:	08046068 	.word	0x08046068
 801f198:	0802b3cc 	.word	0x0802b3cc
 801f19c:	2002e4a8 	.word	0x2002e4a8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801f1a0:	68eb      	ldr	r3, [r5, #12]
 801f1a2:	4629      	mov	r1, r5
 801f1a4:	461d      	mov	r5, r3
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	f000 8208 	beq.w	801f5bc <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801f1ac:	7a2a      	ldrb	r2, [r5, #8]
 801f1ae:	b12a      	cbz	r2, 801f1bc <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f1b0:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801f1b4:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801f1b6:	b2db      	uxtb	r3, r3
 801f1b8:	429a      	cmp	r2, r3
 801f1ba:	d1f1      	bne.n	801f1a0 <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801f1bc:	8aea      	ldrh	r2, [r5, #22]
 801f1be:	8843      	ldrh	r3, [r0, #2]
 801f1c0:	429a      	cmp	r2, r3
 801f1c2:	d1ed      	bne.n	801f1a0 <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801f1c4:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801f1c6:	b10a      	cbz	r2, 801f1cc <tcp_input+0x468>
 801f1c8:	4572      	cmp	r2, lr
 801f1ca:	d1e9      	bne.n	801f1a0 <tcp_input+0x43c>
      if (prev != NULL) {
 801f1cc:	b129      	cbz	r1, 801f1da <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801f1ce:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801f1d0:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801f1d4:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801f1d6:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801f1da:	4a9d      	ldr	r2, [pc, #628]	; (801f450 <tcp_input+0x6ec>)
 801f1dc:	7812      	ldrb	r2, [r2, #0]
 801f1de:	0751      	lsls	r1, r2, #29
 801f1e0:	f53f adcd 	bmi.w	801ed7e <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801f1e4:	f012 0810 	ands.w	r8, r2, #16
 801f1e8:	f040 8273 	bne.w	801f6d2 <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801f1ec:	0791      	lsls	r1, r2, #30
 801f1ee:	f57f adc6 	bpl.w	801ed7e <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801f1f2:	7d68      	ldrb	r0, [r5, #21]
 801f1f4:	f7fe fc90 	bl	801db18 <tcp_alloc>
    if (npcb == NULL) {
 801f1f8:	4681      	mov	r9, r0
 801f1fa:	2800      	cmp	r0, #0
 801f1fc:	f000 82ce 	beq.w	801f79c <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801f200:	4b94      	ldr	r3, [pc, #592]	; (801f454 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801f202:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801f204:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801f206:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801f208:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801f20a:	7849      	ldrb	r1, [r1, #1]
 801f20c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801f210:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801f212:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801f214:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f216:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801f218:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f21a:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f21c:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801f21e:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f220:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801f222:	2303      	movs	r3, #3
 801f224:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801f226:	f7fe fee7 	bl	801dff8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f22a:	4b8a      	ldr	r3, [pc, #552]	; (801f454 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801f22c:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f230:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801f232:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f236:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801f238:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801f23c:	4a86      	ldr	r2, [pc, #536]	; (801f458 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801f23e:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801f242:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801f244:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801f248:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801f24c:	7a6b      	ldrb	r3, [r5, #9]
 801f24e:	f003 030c 	and.w	r3, r3, #12
 801f252:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801f256:	7a2b      	ldrb	r3, [r5, #8]
 801f258:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801f25c:	6813      	ldr	r3, [r2, #0]
 801f25e:	f8c2 9000 	str.w	r9, [r2]
 801f262:	f8c9 300c 	str.w	r3, [r9, #12]
 801f266:	f001 fe49 	bl	8020efc <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801f26a:	4b7c      	ldr	r3, [pc, #496]	; (801f45c <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801f26c:	4a7c      	ldr	r2, [pc, #496]	; (801f460 <tcp_input+0x6fc>)
 801f26e:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801f270:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801f272:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801f274:	b12b      	cbz	r3, 801f282 <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f276:	4b7b      	ldr	r3, [pc, #492]	; (801f464 <tcp_input+0x700>)
 801f278:	4648      	mov	r0, r9
 801f27a:	f8a3 8000 	strh.w	r8, [r3]
 801f27e:	f7ff fcd1 	bl	801ec24 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801f282:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f284:	f109 0204 	add.w	r2, r9, #4
 801f288:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801f28c:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f28e:	4610      	mov	r0, r2
 801f290:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801f292:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801f296:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f29a:	f004 fd4d 	bl	8023d38 <ip4_route>
 801f29e:	9a05      	ldr	r2, [sp, #20]
 801f2a0:	4601      	mov	r1, r0
 801f2a2:	4628      	mov	r0, r5
 801f2a4:	f7fe fec4 	bl	801e030 <tcp_eff_send_mss_netif>
 801f2a8:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f2aa:	2112      	movs	r1, #18
 801f2ac:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f2ae:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f2b2:	f001 f8db 	bl	802046c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801f2b6:	2800      	cmp	r0, #0
 801f2b8:	f040 82ca 	bne.w	801f850 <tcp_input+0xaec>
    tcp_output(npcb);
 801f2bc:	4648      	mov	r0, r9
 801f2be:	f001 faf1 	bl	80208a4 <tcp_output>
 801f2c2:	e55c      	b.n	801ed7e <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801f2c4:	f013 0102 	ands.w	r1, r3, #2
 801f2c8:	d004      	beq.n	801f2d4 <tcp_input+0x570>
 801f2ca:	7d2a      	ldrb	r2, [r5, #20]
 801f2cc:	3a02      	subs	r2, #2
 801f2ce:	2a01      	cmp	r2, #1
 801f2d0:	f200 81e4 	bhi.w	801f69c <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801f2d4:	8b6a      	ldrh	r2, [r5, #26]
 801f2d6:	06d0      	lsls	r0, r2, #27
 801f2d8:	d402      	bmi.n	801f2e0 <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801f2da:	4a63      	ldr	r2, [pc, #396]	; (801f468 <tcp_input+0x704>)
 801f2dc:	6812      	ldr	r2, [r2, #0]
 801f2de:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801f2e0:	4a5e      	ldr	r2, [pc, #376]	; (801f45c <tcp_input+0x6f8>)
 801f2e2:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801f2e4:	2200      	movs	r2, #0
 801f2e6:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801f2ea:	b140      	cbz	r0, 801f2fe <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f2ec:	485d      	ldr	r0, [pc, #372]	; (801f464 <tcp_input+0x700>)
 801f2ee:	8002      	strh	r2, [r0, #0]
 801f2f0:	4628      	mov	r0, r5
 801f2f2:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801f2f6:	f7ff fc95 	bl	801ec24 <tcp_parseopt.part.0>
 801f2fa:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801f2fe:	7d2a      	ldrb	r2, [r5, #20]
 801f300:	3a02      	subs	r2, #2
 801f302:	2a07      	cmp	r2, #7
 801f304:	f63f ae8c 	bhi.w	801f020 <tcp_input+0x2bc>
 801f308:	e8df f002 	tbb	[pc, r2]
 801f30c:	89041331 	.word	0x89041331
 801f310:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801f314:	4628      	mov	r0, r5
 801f316:	f7fe ffdd 	bl	801e2d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801f31a:	f89a 3000 	ldrb.w	r3, [sl]
 801f31e:	069e      	lsls	r6, r3, #26
 801f320:	f57f ae7e 	bpl.w	801f020 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801f324:	8b6b      	ldrh	r3, [r5, #26]
 801f326:	f043 0302 	orr.w	r3, r3, #2
 801f32a:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801f32c:	2307      	movs	r3, #7
 801f32e:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f330:	e676      	b.n	801f020 <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801f332:	06da      	lsls	r2, r3, #27
 801f334:	f140 821c 	bpl.w	801f770 <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f338:	4b4c      	ldr	r3, [pc, #304]	; (801f46c <tcp_input+0x708>)
 801f33a:	6819      	ldr	r1, [r3, #0]
 801f33c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801f33e:	43db      	mvns	r3, r3
 801f340:	42cb      	cmn	r3, r1
 801f342:	d404      	bmi.n	801f34e <tcp_input+0x5ea>
 801f344:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801f346:	1acb      	subs	r3, r1, r3
 801f348:	2b00      	cmp	r3, #0
 801f34a:	f340 823a 	ble.w	801f7c2 <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f34e:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f350:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f352:	8810      	ldrh	r0, [r2, #0]
 801f354:	4a3f      	ldr	r2, [pc, #252]	; (801f454 <tcp_input+0x6f0>)
 801f356:	6812      	ldr	r2, [r2, #0]
 801f358:	4402      	add	r2, r0
 801f35a:	8818      	ldrh	r0, [r3, #0]
 801f35c:	9002      	str	r0, [sp, #8]
 801f35e:	4628      	mov	r0, r5
 801f360:	885b      	ldrh	r3, [r3, #2]
 801f362:	e9cd 9300 	strd	r9, r3, [sp]
 801f366:	4b42      	ldr	r3, [pc, #264]	; (801f470 <tcp_input+0x70c>)
 801f368:	f001 fa22 	bl	80207b0 <tcp_rst>
    if (err != ERR_ABRT) {
 801f36c:	e658      	b.n	801f020 <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801f36e:	f003 0212 	and.w	r2, r3, #18
 801f372:	2a12      	cmp	r2, #18
 801f374:	f000 813b 	beq.w	801f5ee <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801f378:	06d9      	lsls	r1, r3, #27
 801f37a:	f57f ae51 	bpl.w	801f020 <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f37e:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f380:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f382:	8811      	ldrh	r1, [r2, #0]
 801f384:	4a33      	ldr	r2, [pc, #204]	; (801f454 <tcp_input+0x6f0>)
 801f386:	8818      	ldrh	r0, [r3, #0]
 801f388:	6812      	ldr	r2, [r2, #0]
 801f38a:	440a      	add	r2, r1
 801f38c:	4937      	ldr	r1, [pc, #220]	; (801f46c <tcp_input+0x708>)
 801f38e:	6809      	ldr	r1, [r1, #0]
 801f390:	9002      	str	r0, [sp, #8]
 801f392:	4628      	mov	r0, r5
 801f394:	885b      	ldrh	r3, [r3, #2]
 801f396:	e9cd 9300 	strd	r9, r3, [sp]
 801f39a:	4b35      	ldr	r3, [pc, #212]	; (801f470 <tcp_input+0x70c>)
 801f39c:	f001 fa08 	bl	80207b0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f3a0:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801f3a4:	2b05      	cmp	r3, #5
 801f3a6:	f63f ae3b 	bhi.w	801f020 <tcp_input+0x2bc>
          pcb->rtime = 0;
 801f3aa:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801f3ac:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801f3ae:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801f3b0:	f001 fc80 	bl	8020cb4 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801f3b4:	e634      	b.n	801f020 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801f3b6:	4628      	mov	r0, r5
 801f3b8:	f7fe ff8c 	bl	801e2d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f3bc:	4b24      	ldr	r3, [pc, #144]	; (801f450 <tcp_input+0x6ec>)
 801f3be:	781b      	ldrb	r3, [r3, #0]
 801f3c0:	06de      	lsls	r6, r3, #27
 801f3c2:	f57f ae2d 	bpl.w	801f020 <tcp_input+0x2bc>
 801f3c6:	4b29      	ldr	r3, [pc, #164]	; (801f46c <tcp_input+0x708>)
 801f3c8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	429a      	cmp	r2, r3
 801f3ce:	f47f ae27 	bne.w	801f020 <tcp_input+0x2bc>
 801f3d2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	f47f ae23 	bne.w	801f020 <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801f3da:	f89a 3000 	ldrb.w	r3, [sl]
 801f3de:	f043 0310 	orr.w	r3, r3, #16
 801f3e2:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801f3e6:	e61b      	b.n	801f020 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801f3e8:	4628      	mov	r0, r5
 801f3ea:	f7fe ff73 	bl	801e2d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f3ee:	f89a 3000 	ldrb.w	r3, [sl]
 801f3f2:	069a      	lsls	r2, r3, #26
 801f3f4:	f57f ae14 	bpl.w	801f020 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801f3f8:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801f3fa:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801f3fc:	f043 0302 	orr.w	r3, r3, #2
 801f400:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801f402:	f7fd fee1 	bl	801d1c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f406:	4b14      	ldr	r3, [pc, #80]	; (801f458 <tcp_input+0x6f4>)
 801f408:	681b      	ldr	r3, [r3, #0]
 801f40a:	42ab      	cmp	r3, r5
 801f40c:	d061      	beq.n	801f4d2 <tcp_input+0x76e>
 801f40e:	2b00      	cmp	r3, #0
 801f410:	d062      	beq.n	801f4d8 <tcp_input+0x774>
 801f412:	68da      	ldr	r2, [r3, #12]
 801f414:	42aa      	cmp	r2, r5
 801f416:	f000 8210 	beq.w	801f83a <tcp_input+0xad6>
 801f41a:	4613      	mov	r3, r2
 801f41c:	e7f7      	b.n	801f40e <tcp_input+0x6aa>
      tcp_receive(pcb);
 801f41e:	4628      	mov	r0, r5
 801f420:	f7fe ff58 	bl	801e2d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f424:	f89a 3000 	ldrb.w	r3, [sl]
 801f428:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f42c:	4b08      	ldr	r3, [pc, #32]	; (801f450 <tcp_input+0x6ec>)
 801f42e:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801f430:	f000 818e 	beq.w	801f750 <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f434:	06d8      	lsls	r0, r3, #27
 801f436:	d504      	bpl.n	801f442 <tcp_input+0x6de>
 801f438:	4b0c      	ldr	r3, [pc, #48]	; (801f46c <tcp_input+0x708>)
 801f43a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f43c:	681b      	ldr	r3, [r3, #0]
 801f43e:	429a      	cmp	r2, r3
 801f440:	d038      	beq.n	801f4b4 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801f442:	8b6b      	ldrh	r3, [r5, #26]
 801f444:	f043 0302 	orr.w	r3, r3, #2
 801f448:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801f44a:	2308      	movs	r3, #8
 801f44c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f44e:	e5e7      	b.n	801f020 <tcp_input+0x2bc>
 801f450:	2002e4bc 	.word	0x2002e4bc
 801f454:	2002e4dc 	.word	0x2002e4dc
 801f458:	2002e49c 	.word	0x2002e49c
 801f45c:	2002e4f4 	.word	0x2002e4f4
 801f460:	2002e4a0 	.word	0x2002e4a0
 801f464:	2002e4e4 	.word	0x2002e4e4
 801f468:	2002e4ac 	.word	0x2002e4ac
 801f46c:	2002e4b8 	.word	0x2002e4b8
 801f470:	2001f314 	.word	0x2001f314
      tcp_receive(pcb);
 801f474:	4628      	mov	r0, r5
 801f476:	f7fe ff2d 	bl	801e2d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f47a:	4ba8      	ldr	r3, [pc, #672]	; (801f71c <tcp_input+0x9b8>)
 801f47c:	781b      	ldrb	r3, [r3, #0]
 801f47e:	06db      	lsls	r3, r3, #27
 801f480:	f57f adce 	bpl.w	801f020 <tcp_input+0x2bc>
 801f484:	4ba6      	ldr	r3, [pc, #664]	; (801f720 <tcp_input+0x9bc>)
 801f486:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	429a      	cmp	r2, r3
 801f48c:	f47f adc8 	bne.w	801f020 <tcp_input+0x2bc>
 801f490:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f492:	2b00      	cmp	r3, #0
 801f494:	f47f adc4 	bne.w	801f020 <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801f498:	4628      	mov	r0, r5
 801f49a:	f7fd fe95 	bl	801d1c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f49e:	4ba1      	ldr	r3, [pc, #644]	; (801f724 <tcp_input+0x9c0>)
 801f4a0:	681b      	ldr	r3, [r3, #0]
 801f4a2:	42ab      	cmp	r3, r5
 801f4a4:	d015      	beq.n	801f4d2 <tcp_input+0x76e>
 801f4a6:	b1bb      	cbz	r3, 801f4d8 <tcp_input+0x774>
 801f4a8:	68da      	ldr	r2, [r3, #12]
 801f4aa:	42aa      	cmp	r2, r5
 801f4ac:	f000 81c5 	beq.w	801f83a <tcp_input+0xad6>
 801f4b0:	4613      	mov	r3, r2
 801f4b2:	e7f8      	b.n	801f4a6 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f4b4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	d1c3      	bne.n	801f442 <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801f4ba:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801f4bc:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801f4be:	f043 0302 	orr.w	r3, r3, #2
 801f4c2:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801f4c4:	f7fd fe80 	bl	801d1c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801f4c8:	4b96      	ldr	r3, [pc, #600]	; (801f724 <tcp_input+0x9c0>)
 801f4ca:	681b      	ldr	r3, [r3, #0]
 801f4cc:	42ab      	cmp	r3, r5
 801f4ce:	f040 81b7 	bne.w	801f840 <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801f4d2:	68eb      	ldr	r3, [r5, #12]
 801f4d4:	4a93      	ldr	r2, [pc, #588]	; (801f724 <tcp_input+0x9c0>)
 801f4d6:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f4d8:	4b93      	ldr	r3, [pc, #588]	; (801f728 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801f4da:	220a      	movs	r2, #10
 801f4dc:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f4de:	681a      	ldr	r2, [r3, #0]
 801f4e0:	601d      	str	r5, [r3, #0]
 801f4e2:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801f4e4:	2201      	movs	r2, #1
 801f4e6:	4b91      	ldr	r3, [pc, #580]	; (801f72c <tcp_input+0x9c8>)
 801f4e8:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f4ea:	f001 fd07 	bl	8020efc <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801f4ee:	e597      	b.n	801f020 <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801f4f0:	4b8f      	ldr	r3, [pc, #572]	; (801f730 <tcp_input+0x9cc>)
 801f4f2:	22c2      	movs	r2, #194	; 0xc2
 801f4f4:	498f      	ldr	r1, [pc, #572]	; (801f734 <tcp_input+0x9d0>)
 801f4f6:	4890      	ldr	r0, [pc, #576]	; (801f738 <tcp_input+0x9d4>)
 801f4f8:	f007 f8ec 	bl	80266d4 <iprintf>
 801f4fc:	e47d      	b.n	801edfa <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801f4fe:	4b8c      	ldr	r3, [pc, #560]	; (801f730 <tcp_input+0x9cc>)
 801f500:	22df      	movs	r2, #223	; 0xdf
 801f502:	498e      	ldr	r1, [pc, #568]	; (801f73c <tcp_input+0x9d8>)
 801f504:	488c      	ldr	r0, [pc, #560]	; (801f738 <tcp_input+0x9d4>)
 801f506:	f007 f8e5 	bl	80266d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801f50a:	8923      	ldrh	r3, [r4, #8]
 801f50c:	e49b      	b.n	801ee46 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801f50e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801f510:	2b00      	cmp	r3, #0
 801f512:	f000 80d9 	beq.w	801f6c8 <tcp_input+0x964>
 801f516:	4c8a      	ldr	r4, [pc, #552]	; (801f740 <tcp_input+0x9dc>)
 801f518:	e595      	b.n	801f046 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801f51a:	f8bb 2000 	ldrh.w	r2, [fp]
 801f51e:	b15a      	cbz	r2, 801f538 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801f520:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801f524:	b12b      	cbz	r3, 801f532 <tcp_input+0x7ce>
 801f526:	4629      	mov	r1, r5
 801f528:	6928      	ldr	r0, [r5, #16]
 801f52a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801f52c:	300d      	adds	r0, #13
 801f52e:	f43f ad8a 	beq.w	801f046 <tcp_input+0x2e2>
          recv_acked = 0;
 801f532:	2300      	movs	r3, #0
 801f534:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801f538:	4628      	mov	r0, r5
 801f53a:	f7fe fe2b 	bl	801e194 <tcp_input_delayed_close>
 801f53e:	2800      	cmp	r0, #0
 801f540:	f47f ad81 	bne.w	801f046 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801f544:	f8d8 3000 	ldr.w	r3, [r8]
 801f548:	b1fb      	cbz	r3, 801f58a <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801f54a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f54c:	b133      	cbz	r3, 801f55c <tcp_input+0x7f8>
 801f54e:	4b78      	ldr	r3, [pc, #480]	; (801f730 <tcp_input+0x9cc>)
 801f550:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801f554:	497b      	ldr	r1, [pc, #492]	; (801f744 <tcp_input+0x9e0>)
 801f556:	4878      	ldr	r0, [pc, #480]	; (801f738 <tcp_input+0x9d4>)
 801f558:	f007 f8bc 	bl	80266d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801f55c:	8b6b      	ldrh	r3, [r5, #26]
 801f55e:	f013 0310 	ands.w	r3, r3, #16
 801f562:	f040 8113 	bne.w	801f78c <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801f566:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801f56a:	2e00      	cmp	r6, #0
 801f56c:	f000 8121 	beq.w	801f7b2 <tcp_input+0xa4e>
 801f570:	f8d8 2000 	ldr.w	r2, [r8]
 801f574:	4629      	mov	r1, r5
 801f576:	6928      	ldr	r0, [r5, #16]
 801f578:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801f57a:	f110 0f0d 	cmn.w	r0, #13
 801f57e:	f43f ad62 	beq.w	801f046 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801f582:	b110      	cbz	r0, 801f58a <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801f584:	f8d8 3000 	ldr.w	r3, [r8]
 801f588:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801f58a:	f89a 3000 	ldrb.w	r3, [sl]
 801f58e:	0699      	lsls	r1, r3, #26
 801f590:	d507      	bpl.n	801f5a2 <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801f592:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f594:	2b00      	cmp	r3, #0
 801f596:	f000 80ad 	beq.w	801f6f4 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801f59a:	7b5a      	ldrb	r2, [r3, #13]
 801f59c:	f042 0220 	orr.w	r2, r2, #32
 801f5a0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801f5a2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801f5a4:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801f5a6:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801f5a8:	f7fe fdf4 	bl	801e194 <tcp_input_delayed_close>
 801f5ac:	2800      	cmp	r0, #0
 801f5ae:	f47f ad4a 	bne.w	801f046 <tcp_input+0x2e2>
        tcp_output(pcb);
 801f5b2:	4628      	mov	r0, r5
 801f5b4:	f001 f976 	bl	80208a4 <tcp_output>
 801f5b8:	e545      	b.n	801f046 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801f5ba:	6830      	ldr	r0, [r6, #0]
 801f5bc:	8980      	ldrh	r0, [r0, #12]
 801f5be:	f7fa ff83 	bl	801a4c8 <lwip_htons>
 801f5c2:	f010 0004 	ands.w	r0, r0, #4
 801f5c6:	f47f abda 	bne.w	801ed7e <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f5ca:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f5cc:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f5ce:	8811      	ldrh	r1, [r2, #0]
 801f5d0:	4a5d      	ldr	r2, [pc, #372]	; (801f748 <tcp_input+0x9e4>)
 801f5d2:	881d      	ldrh	r5, [r3, #0]
 801f5d4:	6812      	ldr	r2, [r2, #0]
 801f5d6:	440a      	add	r2, r1
 801f5d8:	4951      	ldr	r1, [pc, #324]	; (801f720 <tcp_input+0x9bc>)
 801f5da:	6809      	ldr	r1, [r1, #0]
 801f5dc:	9502      	str	r5, [sp, #8]
 801f5de:	885b      	ldrh	r3, [r3, #2]
 801f5e0:	e9cd 9300 	strd	r9, r3, [sp]
 801f5e4:	4b59      	ldr	r3, [pc, #356]	; (801f74c <tcp_input+0x9e8>)
 801f5e6:	f001 f8e3 	bl	80207b0 <tcp_rst>
 801f5ea:	f7ff bbc8 	b.w	801ed7e <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801f5ee:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801f5f0:	494b      	ldr	r1, [pc, #300]	; (801f720 <tcp_input+0x9bc>)
 801f5f2:	3201      	adds	r2, #1
 801f5f4:	6809      	ldr	r1, [r1, #0]
 801f5f6:	428a      	cmp	r2, r1
 801f5f8:	f47f aebe 	bne.w	801f378 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801f5fc:	4b52      	ldr	r3, [pc, #328]	; (801f748 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801f5fe:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801f600:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801f602:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f604:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801f606:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f608:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f60a:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801f60c:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f60e:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801f610:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f612:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f614:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801f616:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801f618:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801f61c:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801f61e:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f622:	9205      	str	r2, [sp, #20]
 801f624:	f004 fb88 	bl	8023d38 <ip4_route>
 801f628:	9a05      	ldr	r2, [sp, #20]
 801f62a:	4601      	mov	r1, r0
 801f62c:	4630      	mov	r0, r6
 801f62e:	f7fe fcff 	bl	801e030 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f632:	f241 131c 	movw	r3, #4380	; 0x111c
 801f636:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f638:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f63a:	0081      	lsls	r1, r0, #2
 801f63c:	429a      	cmp	r2, r3
 801f63e:	4616      	mov	r6, r2
 801f640:	bf38      	it	cc
 801f642:	461e      	movcc	r6, r3
 801f644:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801f648:	f240 814d 	bls.w	801f8e6 <tcp_input+0xb82>
 801f64c:	b28b      	uxth	r3, r1
 801f64e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f652:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f656:	2b00      	cmp	r3, #0
 801f658:	f000 813d 	beq.w	801f8d6 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801f65c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801f660:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801f662:	3b01      	subs	r3, #1
 801f664:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801f668:	2e00      	cmp	r6, #0
 801f66a:	f000 812f 	beq.w	801f8cc <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801f66e:	6833      	ldr	r3, [r6, #0]
 801f670:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801f672:	4630      	mov	r0, r6
 801f674:	f7fd fce0 	bl	801d038 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801f678:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	f000 8122 	beq.w	801f8c4 <tcp_input+0xb60>
          pcb->rtime = 0;
 801f680:	2300      	movs	r3, #0
 801f682:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801f684:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f688:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801f68c:	b133      	cbz	r3, 801f69c <tcp_input+0x938>
 801f68e:	2200      	movs	r2, #0
 801f690:	4629      	mov	r1, r5
 801f692:	6928      	ldr	r0, [r5, #16]
 801f694:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801f696:	300d      	adds	r0, #13
 801f698:	f43f acd5 	beq.w	801f046 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801f69c:	8b6b      	ldrh	r3, [r5, #26]
 801f69e:	f043 0302 	orr.w	r3, r3, #2
 801f6a2:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801f6a4:	e4bc      	b.n	801f020 <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801f6a6:	4b1e      	ldr	r3, [pc, #120]	; (801f720 <tcp_input+0x9bc>)
 801f6a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f6aa:	681b      	ldr	r3, [r3, #0]
 801f6ac:	429a      	cmp	r2, r3
 801f6ae:	f47f acb7 	bne.w	801f020 <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801f6b2:	f89a 3000 	ldrb.w	r3, [sl]
 801f6b6:	f043 0308 	orr.w	r3, r3, #8
 801f6ba:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801f6be:	8b6b      	ldrh	r3, [r5, #26]
 801f6c0:	f023 0301 	bic.w	r3, r3, #1
 801f6c4:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801f6c6:	e4ab      	b.n	801f020 <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801f6c8:	4628      	mov	r0, r5
 801f6ca:	4c1d      	ldr	r4, [pc, #116]	; (801f740 <tcp_input+0x9dc>)
 801f6cc:	f001 f8b8 	bl	8020840 <tcp_send_empty_ack>
 801f6d0:	e4b9      	b.n	801f046 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f6d2:	8802      	ldrh	r2, [r0, #0]
 801f6d4:	e9cd 9300 	strd	r9, r3, [sp]
 801f6d8:	9b05      	ldr	r3, [sp, #20]
 801f6da:	9202      	str	r2, [sp, #8]
 801f6dc:	881a      	ldrh	r2, [r3, #0]
 801f6de:	4b1a      	ldr	r3, [pc, #104]	; (801f748 <tcp_input+0x9e4>)
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	441a      	add	r2, r3
 801f6e4:	4b0e      	ldr	r3, [pc, #56]	; (801f720 <tcp_input+0x9bc>)
 801f6e6:	4628      	mov	r0, r5
 801f6e8:	6819      	ldr	r1, [r3, #0]
 801f6ea:	4b18      	ldr	r3, [pc, #96]	; (801f74c <tcp_input+0x9e8>)
 801f6ec:	f001 f860 	bl	80207b0 <tcp_rst>
 801f6f0:	f7ff bb45 	b.w	801ed7e <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801f6f4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801f6f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801f6fa:	d001      	beq.n	801f700 <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801f6fc:	3301      	adds	r3, #1
 801f6fe:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801f700:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801f704:	2e00      	cmp	r6, #0
 801f706:	f43f af4c 	beq.w	801f5a2 <tcp_input+0x83e>
 801f70a:	2300      	movs	r3, #0
 801f70c:	4629      	mov	r1, r5
 801f70e:	6928      	ldr	r0, [r5, #16]
 801f710:	461a      	mov	r2, r3
 801f712:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801f714:	300d      	adds	r0, #13
 801f716:	f47f af44 	bne.w	801f5a2 <tcp_input+0x83e>
 801f71a:	e494      	b.n	801f046 <tcp_input+0x2e2>
 801f71c:	2002e4bc 	.word	0x2002e4bc
 801f720:	2002e4b8 	.word	0x2002e4b8
 801f724:	2002e49c 	.word	0x2002e49c
 801f728:	2002e4b4 	.word	0x2002e4b4
 801f72c:	2002e4a0 	.word	0x2002e4a0
 801f730:	08045d50 	.word	0x08045d50
 801f734:	08045f58 	.word	0x08045f58
 801f738:	0802b3cc 	.word	0x0802b3cc
 801f73c:	08045f68 	.word	0x08045f68
 801f740:	2002e4e0 	.word	0x2002e4e0
 801f744:	08046104 	.word	0x08046104
 801f748:	2002e4dc 	.word	0x2002e4dc
 801f74c:	2001f314 	.word	0x2001f314
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f750:	06d9      	lsls	r1, r3, #27
 801f752:	f57f ac65 	bpl.w	801f020 <tcp_input+0x2bc>
 801f756:	4b6a      	ldr	r3, [pc, #424]	; (801f900 <tcp_input+0xb9c>)
 801f758:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f75a:	681b      	ldr	r3, [r3, #0]
 801f75c:	429a      	cmp	r2, r3
 801f75e:	f47f ac5f 	bne.w	801f020 <tcp_input+0x2bc>
 801f762:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f764:	2b00      	cmp	r3, #0
 801f766:	f47f ac5b 	bne.w	801f020 <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801f76a:	2306      	movs	r3, #6
 801f76c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f76e:	e457      	b.n	801f020 <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801f770:	2900      	cmp	r1, #0
 801f772:	f43f ac55 	beq.w	801f020 <tcp_input+0x2bc>
 801f776:	4b63      	ldr	r3, [pc, #396]	; (801f904 <tcp_input+0xba0>)
 801f778:	681a      	ldr	r2, [r3, #0]
 801f77a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f77c:	3b01      	subs	r3, #1
 801f77e:	4293      	cmp	r3, r2
 801f780:	f47f ac4e 	bne.w	801f020 <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801f784:	4628      	mov	r0, r5
 801f786:	f000 ff95 	bl	80206b4 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801f78a:	e449      	b.n	801f020 <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801f78c:	f8d8 0000 	ldr.w	r0, [r8]
 801f790:	f7fc fed6 	bl	801c540 <pbuf_free>
            tcp_abort(pcb);
 801f794:	4628      	mov	r0, r5
 801f796:	f7fe f957 	bl	801da48 <tcp_abort>
            goto aborted;
 801f79a:	e454      	b.n	801f046 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f79c:	69ab      	ldr	r3, [r5, #24]
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	f43f aaed 	beq.w	801ed7e <tcp_input+0x1a>
 801f7a4:	4601      	mov	r1, r0
 801f7a6:	f04f 32ff 	mov.w	r2, #4294967295
 801f7aa:	6928      	ldr	r0, [r5, #16]
 801f7ac:	4798      	blx	r3
 801f7ae:	f7ff bae6 	b.w	801ed7e <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801f7b2:	4633      	mov	r3, r6
 801f7b4:	4630      	mov	r0, r6
 801f7b6:	f8d8 2000 	ldr.w	r2, [r8]
 801f7ba:	4629      	mov	r1, r5
 801f7bc:	f7fe fb5a 	bl	801de74 <tcp_recv_null>
 801f7c0:	e6db      	b.n	801f57a <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801f7c2:	2304      	movs	r3, #4
 801f7c4:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801f7c6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	d0e3      	beq.n	801f794 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f7cc:	699b      	ldr	r3, [r3, #24]
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d05d      	beq.n	801f88e <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f7d2:	2200      	movs	r2, #0
 801f7d4:	4629      	mov	r1, r5
 801f7d6:	6928      	ldr	r0, [r5, #16]
 801f7d8:	4798      	blx	r3
          if (err != ERR_OK) {
 801f7da:	2800      	cmp	r0, #0
 801f7dc:	d153      	bne.n	801f886 <tcp_input+0xb22>
          tcp_receive(pcb);
 801f7de:	4628      	mov	r0, r5
 801f7e0:	f7fe fd78 	bl	801e2d4 <tcp_receive>
          if (recv_acked != 0) {
 801f7e4:	f8bb 3000 	ldrh.w	r3, [fp]
 801f7e8:	b113      	cbz	r3, 801f7f0 <tcp_input+0xa8c>
            recv_acked--;
 801f7ea:	3b01      	subs	r3, #1
 801f7ec:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f7f0:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801f7f2:	f241 131c 	movw	r3, #4380	; 0x111c
 801f7f6:	004a      	lsls	r2, r1, #1
 801f7f8:	0088      	lsls	r0, r1, #2
 801f7fa:	429a      	cmp	r2, r3
 801f7fc:	4616      	mov	r6, r2
 801f7fe:	bf38      	it	cc
 801f800:	461e      	movcc	r6, r3
 801f802:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801f806:	d959      	bls.n	801f8bc <tcp_input+0xb58>
 801f808:	b283      	uxth	r3, r0
 801f80a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801f80e:	f89a 3000 	ldrb.w	r3, [sl]
 801f812:	069b      	lsls	r3, r3, #26
 801f814:	f57f ac04 	bpl.w	801f020 <tcp_input+0x2bc>
 801f818:	e584      	b.n	801f324 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801f81a:	07d0      	lsls	r0, r2, #31
 801f81c:	f57f ac72 	bpl.w	801f104 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801f820:	4b39      	ldr	r3, [pc, #228]	; (801f908 <tcp_input+0xba4>)
 801f822:	681b      	ldr	r3, [r3, #0]
 801f824:	622b      	str	r3, [r5, #32]
 801f826:	e46d      	b.n	801f104 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801f828:	4b38      	ldr	r3, [pc, #224]	; (801f90c <tcp_input+0xba8>)
 801f82a:	f240 1215 	movw	r2, #277	; 0x115
 801f82e:	4938      	ldr	r1, [pc, #224]	; (801f910 <tcp_input+0xbac>)
 801f830:	4838      	ldr	r0, [pc, #224]	; (801f914 <tcp_input+0xbb0>)
 801f832:	f006 ff4f 	bl	80266d4 <iprintf>
 801f836:	f7ff bbb0 	b.w	801ef9a <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801f83a:	68ea      	ldr	r2, [r5, #12]
 801f83c:	60da      	str	r2, [r3, #12]
 801f83e:	e64b      	b.n	801f4d8 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801f840:	2b00      	cmp	r3, #0
 801f842:	f43f ae49 	beq.w	801f4d8 <tcp_input+0x774>
 801f846:	68da      	ldr	r2, [r3, #12]
 801f848:	42aa      	cmp	r2, r5
 801f84a:	d0f6      	beq.n	801f83a <tcp_input+0xad6>
 801f84c:	4613      	mov	r3, r2
 801f84e:	e7f7      	b.n	801f840 <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801f850:	2100      	movs	r1, #0
 801f852:	4648      	mov	r0, r9
 801f854:	f7fe f828 	bl	801d8a8 <tcp_abandon>
      return;
 801f858:	f7ff ba91 	b.w	801ed7e <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801f85c:	4b2b      	ldr	r3, [pc, #172]	; (801f90c <tcp_input+0xba8>)
 801f85e:	f240 120d 	movw	r2, #269	; 0x10d
 801f862:	492d      	ldr	r1, [pc, #180]	; (801f918 <tcp_input+0xbb4>)
 801f864:	482b      	ldr	r0, [pc, #172]	; (801f914 <tcp_input+0xbb0>)
 801f866:	f006 ff35 	bl	80266d4 <iprintf>
      if (prev != NULL) {
 801f86a:	f1b8 0f00 	cmp.w	r8, #0
 801f86e:	f43f ab90 	beq.w	801ef92 <tcp_input+0x22e>
 801f872:	68eb      	ldr	r3, [r5, #12]
 801f874:	f7ff bb87 	b.w	801ef86 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f878:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801f87c:	9b05      	ldr	r3, [sp, #20]
 801f87e:	f8cd 9000 	str.w	r9, [sp]
 801f882:	881b      	ldrh	r3, [r3, #0]
 801f884:	e72d      	b.n	801f6e2 <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801f886:	300d      	adds	r0, #13
 801f888:	f43f abdd 	beq.w	801f046 <tcp_input+0x2e2>
 801f88c:	e782      	b.n	801f794 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f88e:	4b1f      	ldr	r3, [pc, #124]	; (801f90c <tcp_input+0xba8>)
 801f890:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801f894:	4921      	ldr	r1, [pc, #132]	; (801f91c <tcp_input+0xbb8>)
 801f896:	481f      	ldr	r0, [pc, #124]	; (801f914 <tcp_input+0xbb0>)
 801f898:	f006 ff1c 	bl	80266d4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f89c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801f89e:	699b      	ldr	r3, [r3, #24]
 801f8a0:	2b00      	cmp	r3, #0
 801f8a2:	d196      	bne.n	801f7d2 <tcp_input+0xa6e>
 801f8a4:	e776      	b.n	801f794 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f8a6:	2900      	cmp	r1, #0
 801f8a8:	f47f af03 	bne.w	801f6b2 <tcp_input+0x94e>
 801f8ac:	4b17      	ldr	r3, [pc, #92]	; (801f90c <tcp_input+0xba8>)
 801f8ae:	f44f 724e 	mov.w	r2, #824	; 0x338
 801f8b2:	491b      	ldr	r1, [pc, #108]	; (801f920 <tcp_input+0xbbc>)
 801f8b4:	4817      	ldr	r0, [pc, #92]	; (801f914 <tcp_input+0xbb0>)
 801f8b6:	f006 ff0d 	bl	80266d4 <iprintf>
 801f8ba:	e6fa      	b.n	801f6b2 <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f8bc:	429a      	cmp	r2, r3
 801f8be:	bf88      	it	hi
 801f8c0:	b293      	uxthhi	r3, r2
 801f8c2:	e7a2      	b.n	801f80a <tcp_input+0xaa6>
          pcb->rtime = -1;
 801f8c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f8c8:	862b      	strh	r3, [r5, #48]	; 0x30
 801f8ca:	e6dd      	b.n	801f688 <tcp_input+0x924>
          rseg = pcb->unsent;
 801f8cc:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f8ce:	b176      	cbz	r6, 801f8ee <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801f8d0:	6833      	ldr	r3, [r6, #0]
 801f8d2:	66eb      	str	r3, [r5, #108]	; 0x6c
 801f8d4:	e6cd      	b.n	801f672 <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f8d6:	4b0d      	ldr	r3, [pc, #52]	; (801f90c <tcp_input+0xba8>)
 801f8d8:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801f8dc:	4911      	ldr	r1, [pc, #68]	; (801f924 <tcp_input+0xbc0>)
 801f8de:	480d      	ldr	r0, [pc, #52]	; (801f914 <tcp_input+0xbb0>)
 801f8e0:	f006 fef8 	bl	80266d4 <iprintf>
 801f8e4:	e6ba      	b.n	801f65c <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f8e6:	429a      	cmp	r2, r3
 801f8e8:	bf88      	it	hi
 801f8ea:	b293      	uxthhi	r3, r2
 801f8ec:	e6af      	b.n	801f64e <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f8ee:	4b07      	ldr	r3, [pc, #28]	; (801f90c <tcp_input+0xba8>)
 801f8f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 801f8f4:	490c      	ldr	r1, [pc, #48]	; (801f928 <tcp_input+0xbc4>)
 801f8f6:	4807      	ldr	r0, [pc, #28]	; (801f914 <tcp_input+0xbb0>)
 801f8f8:	f006 feec 	bl	80266d4 <iprintf>
 801f8fc:	e7e8      	b.n	801f8d0 <tcp_input+0xb6c>
 801f8fe:	bf00      	nop
 801f900:	2002e4b8 	.word	0x2002e4b8
 801f904:	2002e4dc 	.word	0x2002e4dc
 801f908:	2002e4ac 	.word	0x2002e4ac
 801f90c:	08045d50 	.word	0x08045d50
 801f910:	0804603c 	.word	0x0804603c
 801f914:	0802b3cc 	.word	0x0802b3cc
 801f918:	08046010 	.word	0x08046010
 801f91c:	080460e4 	.word	0x080460e4
 801f920:	08046098 	.word	0x08046098
 801f924:	080460b8 	.word	0x080460b8
 801f928:	080460d0 	.word	0x080460d0

0801f92c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801f92c:	4a02      	ldr	r2, [pc, #8]	; (801f938 <tcp_trigger_input_pcb_close+0xc>)
 801f92e:	7813      	ldrb	r3, [r2, #0]
 801f930:	f043 0310 	orr.w	r3, r3, #16
 801f934:	7013      	strb	r3, [r2, #0]
}
 801f936:	4770      	bx	lr
 801f938:	2002e4d8 	.word	0x2002e4d8

0801f93c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801f93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f940:	9f08      	ldr	r7, [sp, #32]
 801f942:	4680      	mov	r8, r0
 801f944:	460d      	mov	r5, r1
 801f946:	4614      	mov	r4, r2
 801f948:	461e      	mov	r6, r3
 801f94a:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801f94e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801f952:	2f00      	cmp	r7, #0
 801f954:	d033      	beq.n	801f9be <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801f956:	42a5      	cmp	r5, r4
 801f958:	d20e      	bcs.n	801f978 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f95a:	f019 0f02 	tst.w	r9, #2
 801f95e:	d008      	beq.n	801f972 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801f960:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801f964:	f021 0103 	bic.w	r1, r1, #3
 801f968:	428c      	cmp	r4, r1
 801f96a:	bf28      	it	cs
 801f96c:	460c      	movcs	r4, r1
 801f96e:	b2a1      	uxth	r1, r4
 801f970:	e003      	b.n	801f97a <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f972:	8b7b      	ldrh	r3, [r7, #26]
 801f974:	065b      	lsls	r3, r3, #25
 801f976:	d518      	bpl.n	801f9aa <tcp_pbuf_prealloc+0x6e>
 801f978:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801f97a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f97e:	4640      	mov	r0, r8
 801f980:	f7fc fc0c 	bl	801c19c <pbuf_alloc>
  if (p == NULL) {
 801f984:	4604      	mov	r4, r0
 801f986:	b168      	cbz	r0, 801f9a4 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801f988:	6803      	ldr	r3, [r0, #0]
 801f98a:	b133      	cbz	r3, 801f99a <tcp_pbuf_prealloc+0x5e>
 801f98c:	4b0f      	ldr	r3, [pc, #60]	; (801f9cc <tcp_pbuf_prealloc+0x90>)
 801f98e:	f240 120b 	movw	r2, #267	; 0x10b
 801f992:	490f      	ldr	r1, [pc, #60]	; (801f9d0 <tcp_pbuf_prealloc+0x94>)
 801f994:	480f      	ldr	r0, [pc, #60]	; (801f9d4 <tcp_pbuf_prealloc+0x98>)
 801f996:	f006 fe9d 	bl	80266d4 <iprintf>
  *oversize = p->len - length;
 801f99a:	8963      	ldrh	r3, [r4, #10]
 801f99c:	1b5b      	subs	r3, r3, r5
 801f99e:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801f9a0:	8125      	strh	r5, [r4, #8]
 801f9a2:	8165      	strh	r5, [r4, #10]
  return p;
}
 801f9a4:	4620      	mov	r0, r4
 801f9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801f9aa:	f1ba 0f00 	cmp.w	sl, #0
 801f9ae:	d0d7      	beq.n	801f960 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801f9b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	d1d4      	bne.n	801f960 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801f9b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	d1d1      	bne.n	801f960 <tcp_pbuf_prealloc+0x24>
 801f9bc:	e7dc      	b.n	801f978 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801f9be:	4b03      	ldr	r3, [pc, #12]	; (801f9cc <tcp_pbuf_prealloc+0x90>)
 801f9c0:	22e9      	movs	r2, #233	; 0xe9
 801f9c2:	4905      	ldr	r1, [pc, #20]	; (801f9d8 <tcp_pbuf_prealloc+0x9c>)
 801f9c4:	4803      	ldr	r0, [pc, #12]	; (801f9d4 <tcp_pbuf_prealloc+0x98>)
 801f9c6:	f006 fe85 	bl	80266d4 <iprintf>
 801f9ca:	e7c4      	b.n	801f956 <tcp_pbuf_prealloc+0x1a>
 801f9cc:	08046120 	.word	0x08046120
 801f9d0:	08046174 	.word	0x08046174
 801f9d4:	0802b3cc 	.word	0x0802b3cc
 801f9d8:	08046154 	.word	0x08046154

0801f9dc <tcp_create_segment>:
{
 801f9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9e0:	460e      	mov	r6, r1
 801f9e2:	f89d a020 	ldrb.w	sl, [sp, #32]
 801f9e6:	4690      	mov	r8, r2
 801f9e8:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801f9ea:	4607      	mov	r7, r0
 801f9ec:	2800      	cmp	r0, #0
 801f9ee:	d04c      	beq.n	801fa8a <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801f9f0:	2e00      	cmp	r6, #0
 801f9f2:	d052      	beq.n	801fa9a <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f9f4:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801f9f8:	22a8      	movs	r2, #168	; 0xa8
 801f9fa:	4931      	ldr	r1, [pc, #196]	; (801fac0 <tcp_create_segment+0xe4>)
 801f9fc:	2004      	movs	r0, #4
 801f9fe:	f7fc f851 	bl	801baa4 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fa02:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801fa06:	4604      	mov	r4, r0
 801fa08:	2800      	cmp	r0, #0
 801fa0a:	d054      	beq.n	801fab6 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801fa0c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801fa10:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa12:	8932      	ldrh	r2, [r6, #8]
 801fa14:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801fa18:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa1a:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801fa1c:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa1e:	d32c      	bcc.n	801fa7a <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801fa20:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801fa24:	4630      	mov	r0, r6
 801fa26:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801fa28:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801fa2a:	f7fc fcc9 	bl	801c3c0 <pbuf_add_header>
 801fa2e:	4606      	mov	r6, r0
 801fa30:	2800      	cmp	r0, #0
 801fa32:	d139      	bne.n	801faa8 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801fa34:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fa36:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801fa38:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801fa3a:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fa3e:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801fa42:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801fa46:	f7fa fd3f 	bl	801a4c8 <lwip_htons>
 801fa4a:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801fa4e:	8b38      	ldrh	r0, [r7, #24]
 801fa50:	68e7      	ldr	r7, [r4, #12]
 801fa52:	f7fa fd39 	bl	801a4c8 <lwip_htons>
 801fa56:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801fa58:	4648      	mov	r0, r9
 801fa5a:	68e7      	ldr	r7, [r4, #12]
 801fa5c:	f7fa fd38 	bl	801a4d0 <lwip_htonl>
 801fa60:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fa62:	ea45 0008 	orr.w	r0, r5, r8
 801fa66:	68e7      	ldr	r7, [r4, #12]
 801fa68:	f7fa fd2e 	bl	801a4c8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801fa6c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fa6e:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801fa70:	749e      	strb	r6, [r3, #18]
 801fa72:	74de      	strb	r6, [r3, #19]
}
 801fa74:	4620      	mov	r0, r4
 801fa76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa7a:	22b0      	movs	r2, #176	; 0xb0
 801fa7c:	4b10      	ldr	r3, [pc, #64]	; (801fac0 <tcp_create_segment+0xe4>)
 801fa7e:	4911      	ldr	r1, [pc, #68]	; (801fac4 <tcp_create_segment+0xe8>)
 801fa80:	4811      	ldr	r0, [pc, #68]	; (801fac8 <tcp_create_segment+0xec>)
 801fa82:	f006 fe27 	bl	80266d4 <iprintf>
  seg->len = p->tot_len - optlen;
 801fa86:	8932      	ldrh	r2, [r6, #8]
 801fa88:	e7ca      	b.n	801fa20 <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801fa8a:	4b0d      	ldr	r3, [pc, #52]	; (801fac0 <tcp_create_segment+0xe4>)
 801fa8c:	22a3      	movs	r2, #163	; 0xa3
 801fa8e:	490f      	ldr	r1, [pc, #60]	; (801facc <tcp_create_segment+0xf0>)
 801fa90:	480d      	ldr	r0, [pc, #52]	; (801fac8 <tcp_create_segment+0xec>)
 801fa92:	f006 fe1f 	bl	80266d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801fa96:	2e00      	cmp	r6, #0
 801fa98:	d1ac      	bne.n	801f9f4 <tcp_create_segment+0x18>
 801fa9a:	4b09      	ldr	r3, [pc, #36]	; (801fac0 <tcp_create_segment+0xe4>)
 801fa9c:	22a4      	movs	r2, #164	; 0xa4
 801fa9e:	490c      	ldr	r1, [pc, #48]	; (801fad0 <tcp_create_segment+0xf4>)
 801faa0:	4809      	ldr	r0, [pc, #36]	; (801fac8 <tcp_create_segment+0xec>)
 801faa2:	f006 fe17 	bl	80266d4 <iprintf>
 801faa6:	e7a5      	b.n	801f9f4 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801faa8:	4620      	mov	r0, r4
    return NULL;
 801faaa:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801faac:	f7fd fac4 	bl	801d038 <tcp_seg_free>
}
 801fab0:	4620      	mov	r0, r4
 801fab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801fab6:	4630      	mov	r0, r6
 801fab8:	f7fc fd42 	bl	801c540 <pbuf_free>
    return NULL;
 801fabc:	e7da      	b.n	801fa74 <tcp_create_segment+0x98>
 801fabe:	bf00      	nop
 801fac0:	08046120 	.word	0x08046120
 801fac4:	080461cc 	.word	0x080461cc
 801fac8:	0802b3cc 	.word	0x0802b3cc
 801facc:	08046188 	.word	0x08046188
 801fad0:	080461a8 	.word	0x080461a8

0801fad4 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fad4:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801fad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fada:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801fadc:	4606      	mov	r6, r0
 801fade:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fae0:	2022      	movs	r0, #34	; 0x22
 801fae2:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801fae6:	461c      	mov	r4, r3
 801fae8:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801faec:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801faf0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801faf4:	f7fc fb52 	bl	801c19c <pbuf_alloc>
  if (p != NULL) {
 801faf8:	4605      	mov	r5, r0
 801fafa:	b300      	cbz	r0, 801fb3e <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801fafc:	8943      	ldrh	r3, [r0, #10]
 801fafe:	2b13      	cmp	r3, #19
 801fb00:	d920      	bls.n	801fb44 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801fb02:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801fb04:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801fb06:	f7fa fcdf 	bl	801a4c8 <lwip_htons>
 801fb0a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801fb0c:	4650      	mov	r0, sl
 801fb0e:	f7fa fcdb 	bl	801a4c8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801fb12:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801fb14:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801fb16:	4630      	mov	r0, r6
 801fb18:	f7fa fcda 	bl	801a4d0 <lwip_htonl>
 801fb1c:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fb1e:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801fb22:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fb24:	f7fa fcd0 	bl	801a4c8 <lwip_htons>
 801fb28:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801fb2a:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fb2c:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801fb2e:	f7fa fccb 	bl	801a4c8 <lwip_htons>
    tcphdr->chksum = 0;
 801fb32:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801fb34:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801fb36:	7423      	strb	r3, [r4, #16]
 801fb38:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801fb3a:	74a3      	strb	r3, [r4, #18]
 801fb3c:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801fb3e:	4628      	mov	r0, r5
 801fb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801fb44:	4b03      	ldr	r3, [pc, #12]	; (801fb54 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801fb46:	f240 7223 	movw	r2, #1827	; 0x723
 801fb4a:	4903      	ldr	r1, [pc, #12]	; (801fb58 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801fb4c:	4803      	ldr	r0, [pc, #12]	; (801fb5c <tcp_output_alloc_header_common.constprop.0+0x88>)
 801fb4e:	f006 fdc1 	bl	80266d4 <iprintf>
 801fb52:	e7d6      	b.n	801fb02 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801fb54:	08046120 	.word	0x08046120
 801fb58:	080461e4 	.word	0x080461e4
 801fb5c:	0802b3cc 	.word	0x0802b3cc

0801fb60 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801fb60:	b570      	push	{r4, r5, r6, lr}
 801fb62:	460d      	mov	r5, r1
 801fb64:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fb66:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801fb68:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fb6a:	b190      	cbz	r0, 801fb92 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801fb6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801fb6e:	2210      	movs	r2, #16
 801fb70:	8b21      	ldrh	r1, [r4, #24]
 801fb72:	9302      	str	r3, [sp, #8]
 801fb74:	e9cd 1200 	strd	r1, r2, [sp]
 801fb78:	4632      	mov	r2, r6
 801fb7a:	4629      	mov	r1, r5
 801fb7c:	8ae3      	ldrh	r3, [r4, #22]
 801fb7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fb80:	f7ff ffa8 	bl	801fad4 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801fb84:	b118      	cbz	r0, 801fb8e <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801fb86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801fb88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb8a:	4413      	add	r3, r2
 801fb8c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801fb8e:	b004      	add	sp, #16
 801fb90:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fb92:	4b04      	ldr	r3, [pc, #16]	; (801fba4 <tcp_output_alloc_header.constprop.0+0x44>)
 801fb94:	f240 7242 	movw	r2, #1858	; 0x742
 801fb98:	4903      	ldr	r1, [pc, #12]	; (801fba8 <tcp_output_alloc_header.constprop.0+0x48>)
 801fb9a:	4804      	ldr	r0, [pc, #16]	; (801fbac <tcp_output_alloc_header.constprop.0+0x4c>)
 801fb9c:	f006 fd9a 	bl	80266d4 <iprintf>
 801fba0:	e7e4      	b.n	801fb6c <tcp_output_alloc_header.constprop.0+0xc>
 801fba2:	bf00      	nop
 801fba4:	08046120 	.word	0x08046120
 801fba8:	08046214 	.word	0x08046214
 801fbac:	0802b3cc 	.word	0x0802b3cc

0801fbb0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801fbb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fbb4:	4605      	mov	r5, r0
 801fbb6:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fbb8:	460c      	mov	r4, r1
{
 801fbba:	4690      	mov	r8, r2
 801fbbc:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fbbe:	2900      	cmp	r1, #0
 801fbc0:	d034      	beq.n	801fc2c <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801fbc2:	2d00      	cmp	r5, #0
 801fbc4:	d03a      	beq.n	801fc3c <tcp_output_control_segment+0x8c>
 801fbc6:	7a28      	ldrb	r0, [r5, #8]
 801fbc8:	bb10      	cbnz	r0, 801fc10 <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801fbca:	4630      	mov	r0, r6
 801fbcc:	f004 f8b4 	bl	8023d38 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801fbd0:	4607      	mov	r7, r0
 801fbd2:	b310      	cbz	r0, 801fc1a <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fbd4:	9600      	str	r6, [sp, #0]
 801fbd6:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801fbd8:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fbdc:	2106      	movs	r1, #6
 801fbde:	8922      	ldrh	r2, [r4, #8]
 801fbe0:	4620      	mov	r0, r4
 801fbe2:	f7fb fa05 	bl	801aff0 <ip_chksum_pseudo>
 801fbe6:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801fbea:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801fbec:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801fbee:	9500      	str	r5, [sp, #0]
 801fbf0:	2506      	movs	r5, #6
 801fbf2:	4632      	mov	r2, r6
 801fbf4:	4641      	mov	r1, r8
 801fbf6:	9501      	str	r5, [sp, #4]
 801fbf8:	4620      	mov	r0, r4
 801fbfa:	9702      	str	r7, [sp, #8]
 801fbfc:	f004 fa66 	bl	80240cc <ip4_output_if>
 801fc00:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801fc02:	4620      	mov	r0, r4
 801fc04:	f7fc fc9c 	bl	801c540 <pbuf_free>
  return err;
}
 801fc08:	4628      	mov	r0, r5
 801fc0a:	b005      	add	sp, #20
 801fc0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801fc10:	f7fc f970 	bl	801bef4 <netif_get_by_index>
  if (netif == NULL) {
 801fc14:	4607      	mov	r7, r0
 801fc16:	2800      	cmp	r0, #0
 801fc18:	d1dc      	bne.n	801fbd4 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801fc1a:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801fc1e:	4620      	mov	r0, r4
 801fc20:	f7fc fc8e 	bl	801c540 <pbuf_free>
}
 801fc24:	4628      	mov	r0, r5
 801fc26:	b005      	add	sp, #20
 801fc28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fc2c:	4b0d      	ldr	r3, [pc, #52]	; (801fc64 <tcp_output_control_segment+0xb4>)
 801fc2e:	f240 7287 	movw	r2, #1927	; 0x787
 801fc32:	490d      	ldr	r1, [pc, #52]	; (801fc68 <tcp_output_control_segment+0xb8>)
 801fc34:	480d      	ldr	r0, [pc, #52]	; (801fc6c <tcp_output_control_segment+0xbc>)
 801fc36:	f006 fd4d 	bl	80266d4 <iprintf>
 801fc3a:	e7c2      	b.n	801fbc2 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801fc3c:	4630      	mov	r0, r6
 801fc3e:	f004 f87b 	bl	8023d38 <ip4_route>
  if (netif == NULL) {
 801fc42:	4607      	mov	r7, r0
 801fc44:	2800      	cmp	r0, #0
 801fc46:	d0e8      	beq.n	801fc1a <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fc48:	9600      	str	r6, [sp, #0]
 801fc4a:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801fc4c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fc50:	2106      	movs	r1, #6
 801fc52:	8922      	ldrh	r2, [r4, #8]
 801fc54:	4620      	mov	r0, r4
 801fc56:	f7fb f9cb 	bl	801aff0 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801fc5a:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fc5c:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801fc60:	e7c5      	b.n	801fbee <tcp_output_control_segment+0x3e>
 801fc62:	bf00      	nop
 801fc64:	08046120 	.word	0x08046120
 801fc68:	0804623c 	.word	0x0804623c
 801fc6c:	0802b3cc 	.word	0x0802b3cc

0801fc70 <tcp_write>:
{
 801fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801fc74:	2400      	movs	r4, #0
{
 801fc76:	b091      	sub	sp, #68	; 0x44
 801fc78:	9107      	str	r1, [sp, #28]
 801fc7a:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801fc7c:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801fc80:	2800      	cmp	r0, #0
 801fc82:	f000 82fc 	beq.w	802027e <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801fc86:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801fc8a:	4692      	mov	sl, r2
 801fc8c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801fc8e:	4681      	mov	r9, r0
 801fc90:	085b      	lsrs	r3, r3, #1
 801fc92:	4293      	cmp	r3, r2
 801fc94:	bf28      	it	cs
 801fc96:	4613      	movcs	r3, r2
 801fc98:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	bf08      	it	eq
 801fc9e:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801fca0:	9b07      	ldr	r3, [sp, #28]
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	f000 82df 	beq.w	8020266 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801fca8:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801fcaa:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801fcac:	2a02      	cmp	r2, #2
 801fcae:	d902      	bls.n	801fcb6 <tcp_write+0x46>
 801fcb0:	2b07      	cmp	r3, #7
 801fcb2:	f040 829c 	bne.w	80201ee <tcp_write+0x57e>
  } else if (len == 0) {
 801fcb6:	f1ba 0f00 	cmp.w	sl, #0
 801fcba:	f000 80ec 	beq.w	801fe96 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801fcbe:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801fcc2:	4553      	cmp	r3, sl
 801fcc4:	f0c0 82b6 	bcc.w	8020234 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801fcc8:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801fccc:	2e08      	cmp	r6, #8
 801fcce:	f200 82b1 	bhi.w	8020234 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801fcd2:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801fcd6:	2e00      	cmp	r6, #0
 801fcd8:	f000 80d3 	beq.w	801fe82 <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	f040 80dc 	bne.w	801fe9a <tcp_write+0x22a>
 801fce2:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801fce6:	f1b8 0f00 	cmp.w	r8, #0
 801fcea:	f000 8263 	beq.w	80201b4 <tcp_write+0x544>
 801fcee:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801fcf0:	461a      	mov	r2, r3
 801fcf2:	681b      	ldr	r3, [r3, #0]
 801fcf4:	2b00      	cmp	r3, #0
 801fcf6:	d1fb      	bne.n	801fcf0 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801fcf8:	7a94      	ldrb	r4, [r2, #10]
 801fcfa:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801fcfc:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801fcfe:	00a4      	lsls	r4, r4, #2
 801fd00:	920b      	str	r2, [sp, #44]	; 0x2c
 801fd02:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801fd06:	191a      	adds	r2, r3, r4
 801fd08:	4593      	cmp	fp, r2
 801fd0a:	f2c0 81a6 	blt.w	802005a <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801fd0e:	ebab 0404 	sub.w	r4, fp, r4
 801fd12:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801fd14:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801fd18:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801fd1a:	930a      	str	r3, [sp, #40]	; 0x28
 801fd1c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	f000 80cf 	beq.w	801fec4 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801fd26:	42a3      	cmp	r3, r4
 801fd28:	f200 818a 	bhi.w	8020040 <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801fd2c:	45a2      	cmp	sl, r4
 801fd2e:	4653      	mov	r3, sl
 801fd30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd32:	bf28      	it	cs
 801fd34:	4623      	movcs	r3, r4
 801fd36:	4293      	cmp	r3, r2
 801fd38:	bf28      	it	cs
 801fd3a:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801fd3c:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801fd3e:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801fd40:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801fd42:	b292      	uxth	r2, r2
      space -= oversize_used;
 801fd44:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801fd46:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801fd4a:	2a00      	cmp	r2, #0
 801fd4c:	f000 8183 	beq.w	8020056 <tcp_write+0x3e6>
 801fd50:	459a      	cmp	sl, r3
 801fd52:	f000 8180 	beq.w	8020056 <tcp_write+0x3e6>
 801fd56:	4bb2      	ldr	r3, [pc, #712]	; (8020020 <tcp_write+0x3b0>)
 801fd58:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fd5c:	49b1      	ldr	r1, [pc, #708]	; (8020024 <tcp_write+0x3b4>)
 801fd5e:	48b2      	ldr	r0, [pc, #712]	; (8020028 <tcp_write+0x3b8>)
 801fd60:	f006 fcb8 	bl	80266d4 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801fd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801fd66:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801fd68:	459a      	cmp	sl, r3
 801fd6a:	f200 80b0 	bhi.w	801fece <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801fd6e:	2300      	movs	r3, #0
 801fd70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fd72:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801fd74:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801fd76:	45a2      	cmp	sl, r4
 801fd78:	f240 80ee 	bls.w	801ff58 <tcp_write+0x2e8>
 801fd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd7e:	f04f 0800 	mov.w	r8, #0
 801fd82:	f003 0301 	and.w	r3, r3, #1
 801fd86:	f8cd 8014 	str.w	r8, [sp, #20]
 801fd8a:	9308      	str	r3, [sp, #32]
 801fd8c:	4643      	mov	r3, r8
 801fd8e:	46d8      	mov	r8, fp
 801fd90:	469b      	mov	fp, r3
 801fd92:	e042      	b.n	801fe1a <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801fd94:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801fd98:	2b00      	cmp	r3, #0
 801fd9a:	f040 80f0 	bne.w	801ff7e <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801fd9e:	2201      	movs	r2, #1
 801fda0:	4629      	mov	r1, r5
 801fda2:	2036      	movs	r0, #54	; 0x36
 801fda4:	f7fc f9fa 	bl	801c19c <pbuf_alloc>
 801fda8:	2800      	cmp	r0, #0
 801fdaa:	f000 8100 	beq.w	801ffae <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fdae:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fdb0:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fdb2:	9006      	str	r0, [sp, #24]
 801fdb4:	4422      	add	r2, r4
 801fdb6:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fdb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fdbc:	2036      	movs	r0, #54	; 0x36
 801fdbe:	f7fc f9ed 	bl	801c19c <pbuf_alloc>
 801fdc2:	9b06      	ldr	r3, [sp, #24]
 801fdc4:	4607      	mov	r7, r0
 801fdc6:	2800      	cmp	r0, #0
 801fdc8:	f000 8195 	beq.w	80200f6 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801fdcc:	4619      	mov	r1, r3
 801fdce:	f7fc fbe9 	bl	801c5a4 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801fdd2:	4638      	mov	r0, r7
 801fdd4:	f7fc fbc8 	bl	801c568 <pbuf_clen>
 801fdd8:	4430      	add	r0, r6
 801fdda:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801fddc:	2e09      	cmp	r6, #9
 801fdde:	d84a      	bhi.n	801fe76 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801fde0:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801fde4:	2200      	movs	r2, #0
 801fde6:	4639      	mov	r1, r7
 801fde8:	4648      	mov	r0, r9
 801fdea:	4423      	add	r3, r4
 801fdec:	9200      	str	r2, [sp, #0]
 801fdee:	f7ff fdf5 	bl	801f9dc <tcp_create_segment>
 801fdf2:	4607      	mov	r7, r0
 801fdf4:	2800      	cmp	r0, #0
 801fdf6:	f000 80da 	beq.w	801ffae <tcp_write+0x33e>
    if (queue == NULL) {
 801fdfa:	9b05      	ldr	r3, [sp, #20]
 801fdfc:	2b00      	cmp	r3, #0
 801fdfe:	f000 80a3 	beq.w	801ff48 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801fe02:	f1bb 0f00 	cmp.w	fp, #0
 801fe06:	f000 80c2 	beq.w	801ff8e <tcp_write+0x31e>
    pos += seglen;
 801fe0a:	442c      	add	r4, r5
      prev_seg->next = seg;
 801fe0c:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801fe10:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801fe12:	45a2      	cmp	sl, r4
 801fe14:	f240 809e 	bls.w	801ff54 <tcp_write+0x2e4>
 801fe18:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801fe1a:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fe1e:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801fe20:	b2ad      	uxth	r5, r5
 801fe22:	4545      	cmp	r5, r8
 801fe24:	bf28      	it	cs
 801fe26:	4645      	movcs	r5, r8
 801fe28:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d0b2      	beq.n	801fd94 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801fe2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe30:	4642      	mov	r2, r8
 801fe32:	4629      	mov	r1, r5
 801fe34:	2036      	movs	r0, #54	; 0x36
 801fe36:	e9cd 9300 	strd	r9, r3, [sp]
 801fe3a:	9b05      	ldr	r3, [sp, #20]
 801fe3c:	fab3 f383 	clz	r3, r3
 801fe40:	095b      	lsrs	r3, r3, #5
 801fe42:	9302      	str	r3, [sp, #8]
 801fe44:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801fe48:	f7ff fd78 	bl	801f93c <tcp_pbuf_prealloc>
 801fe4c:	4607      	mov	r7, r0
 801fe4e:	2800      	cmp	r0, #0
 801fe50:	f000 80ad 	beq.w	801ffae <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801fe54:	8943      	ldrh	r3, [r0, #10]
 801fe56:	42ab      	cmp	r3, r5
 801fe58:	f0c0 80a1 	bcc.w	801ff9e <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801fe5c:	9b07      	ldr	r3, [sp, #28]
 801fe5e:	462a      	mov	r2, r5
 801fe60:	6878      	ldr	r0, [r7, #4]
 801fe62:	1919      	adds	r1, r3, r4
 801fe64:	f005 fc70 	bl	8025748 <memcpy>
    queuelen += pbuf_clen(p);
 801fe68:	4638      	mov	r0, r7
 801fe6a:	f7fc fb7d 	bl	801c568 <pbuf_clen>
 801fe6e:	4430      	add	r0, r6
 801fe70:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801fe72:	2e09      	cmp	r6, #9
 801fe74:	d9b4      	bls.n	801fde0 <tcp_write+0x170>
      pbuf_free(p);
 801fe76:	4638      	mov	r0, r7
 801fe78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801fe7c:	f7fc fb60 	bl	801c540 <pbuf_free>
      goto memerr;
 801fe80:	e097      	b.n	801ffb2 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	f000 80b6 	beq.w	801fff4 <tcp_write+0x384>
 801fe88:	4b65      	ldr	r3, [pc, #404]	; (8020020 <tcp_write+0x3b0>)
 801fe8a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801fe8e:	4967      	ldr	r1, [pc, #412]	; (802002c <tcp_write+0x3bc>)
 801fe90:	4865      	ldr	r0, [pc, #404]	; (8020028 <tcp_write+0x3b8>)
 801fe92:	f006 fc1f 	bl	80266d4 <iprintf>
  queuelen = pcb->snd_queuelen;
 801fe96:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801fe9a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801fe9e:	f1b8 0f00 	cmp.w	r8, #0
 801fea2:	f47f af24 	bne.w	801fcee <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801fea6:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801feaa:	2b00      	cmp	r3, #0
 801feac:	f040 80ac 	bne.w	8020008 <tcp_write+0x398>
  while (pos < len) {
 801feb0:	f1ba 0f00 	cmp.w	sl, #0
 801feb4:	f000 81c7 	beq.w	8020246 <tcp_write+0x5d6>
          extendlen = seglen;
 801feb8:	2400      	movs	r4, #0
 801feba:	940d      	str	r4, [sp, #52]	; 0x34
 801febc:	940c      	str	r4, [sp, #48]	; 0x30
 801febe:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801fec2:	e75b      	b.n	801fd7c <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801fec4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801fec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fec8:	459a      	cmp	sl, r3
 801feca:	f67f af50 	bls.w	801fd6e <tcp_write+0xfe>
 801fece:	2c00      	cmp	r4, #0
 801fed0:	f43f af4d 	beq.w	801fd6e <tcp_write+0xfe>
 801fed4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fed6:	8912      	ldrh	r2, [r2, #8]
 801fed8:	920d      	str	r2, [sp, #52]	; 0x34
 801feda:	2a00      	cmp	r2, #0
 801fedc:	f000 809c 	beq.w	8020018 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801fee0:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801fee6:	42a7      	cmp	r7, r4
 801fee8:	bfa8      	it	ge
 801feea:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801feec:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801feee:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fef0:	f100 8187 	bmi.w	8020202 <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801fef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fef6:	685a      	ldr	r2, [r3, #4]
 801fef8:	4613      	mov	r3, r2
 801fefa:	6812      	ldr	r2, [r2, #0]
 801fefc:	2a00      	cmp	r2, #0
 801fefe:	d1fb      	bne.n	801fef8 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ff00:	920c      	str	r2, [sp, #48]	; 0x30
 801ff02:	7b1a      	ldrb	r2, [r3, #12]
 801ff04:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801ff08:	d106      	bne.n	801ff18 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ff0a:	895a      	ldrh	r2, [r3, #10]
 801ff0c:	685b      	ldr	r3, [r3, #4]
 801ff0e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ff10:	9a07      	ldr	r2, [sp, #28]
 801ff12:	429a      	cmp	r2, r3
 801ff14:	f000 8167 	beq.w	80201e6 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ff18:	2201      	movs	r2, #1
 801ff1a:	4629      	mov	r1, r5
 801ff1c:	2000      	movs	r0, #0
 801ff1e:	f7fc f93d 	bl	801c19c <pbuf_alloc>
 801ff22:	900c      	str	r0, [sp, #48]	; 0x30
 801ff24:	2800      	cmp	r0, #0
 801ff26:	f000 813e 	beq.w	80201a6 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ff2a:	9b07      	ldr	r3, [sp, #28]
 801ff2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ff2e:	440b      	add	r3, r1
 801ff30:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801ff32:	f7fc fb19 	bl	801c568 <pbuf_clen>
 801ff36:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801ff38:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801ff3a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801ff3c:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801ff3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ff42:	18ec      	adds	r4, r5, r3
 801ff44:	b2a4      	uxth	r4, r4
 801ff46:	e716      	b.n	801fd76 <tcp_write+0x106>
    pos += seglen;
 801ff48:	442c      	add	r4, r5
 801ff4a:	9005      	str	r0, [sp, #20]
 801ff4c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801ff4e:	45a2      	cmp	sl, r4
 801ff50:	f63f af62 	bhi.w	801fe18 <tcp_write+0x1a8>
 801ff54:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801ff58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	f000 80db 	beq.w	8020116 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801ff60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ff62:	6854      	ldr	r4, [r2, #4]
 801ff64:	2c00      	cmp	r4, #0
 801ff66:	f000 8090 	beq.w	802008a <tcp_write+0x41a>
 801ff6a:	469b      	mov	fp, r3
 801ff6c:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801ff6e:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801ff70:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801ff72:	445b      	add	r3, fp
 801ff74:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801ff76:	2a00      	cmp	r2, #0
 801ff78:	d079      	beq.n	802006e <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801ff7a:	4614      	mov	r4, r2
 801ff7c:	e7f7      	b.n	801ff6e <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ff7e:	4b28      	ldr	r3, [pc, #160]	; (8020020 <tcp_write+0x3b0>)
 801ff80:	f240 2271 	movw	r2, #625	; 0x271
 801ff84:	492a      	ldr	r1, [pc, #168]	; (8020030 <tcp_write+0x3c0>)
 801ff86:	4828      	ldr	r0, [pc, #160]	; (8020028 <tcp_write+0x3b8>)
 801ff88:	f006 fba4 	bl	80266d4 <iprintf>
 801ff8c:	e707      	b.n	801fd9e <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ff8e:	4b24      	ldr	r3, [pc, #144]	; (8020020 <tcp_write+0x3b0>)
 801ff90:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ff94:	4927      	ldr	r1, [pc, #156]	; (8020034 <tcp_write+0x3c4>)
 801ff96:	4824      	ldr	r0, [pc, #144]	; (8020028 <tcp_write+0x3b8>)
 801ff98:	f006 fb9c 	bl	80266d4 <iprintf>
 801ff9c:	e735      	b.n	801fe0a <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801ff9e:	4b20      	ldr	r3, [pc, #128]	; (8020020 <tcp_write+0x3b0>)
 801ffa0:	f240 2266 	movw	r2, #614	; 0x266
 801ffa4:	4924      	ldr	r1, [pc, #144]	; (8020038 <tcp_write+0x3c8>)
 801ffa6:	4820      	ldr	r0, [pc, #128]	; (8020028 <tcp_write+0x3b8>)
 801ffa8:	f006 fb94 	bl	80266d4 <iprintf>
 801ffac:	e756      	b.n	801fe5c <tcp_write+0x1ec>
 801ffae:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ffb2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801ffb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ffba:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801ffbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ffc0:	b113      	cbz	r3, 801ffc8 <tcp_write+0x358>
    pbuf_free(concat_p);
 801ffc2:	4618      	mov	r0, r3
 801ffc4:	f7fc fabc 	bl	801c540 <pbuf_free>
  if (queue != NULL) {
 801ffc8:	f1b8 0f00 	cmp.w	r8, #0
 801ffcc:	d002      	beq.n	801ffd4 <tcp_write+0x364>
    tcp_segs_free(queue);
 801ffce:	4640      	mov	r0, r8
 801ffd0:	f7fd f820 	bl	801d014 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801ffd4:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801ffd8:	b13b      	cbz	r3, 801ffea <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ffda:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801ffde:	b923      	cbnz	r3, 801ffea <tcp_write+0x37a>
 801ffe0:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	f000 808c 	beq.w	8020102 <tcp_write+0x492>
  return ERR_MEM;
 801ffea:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ffee:	b011      	add	sp, #68	; 0x44
 801fff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801fff4:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801fff8:	2b00      	cmp	r3, #0
 801fffa:	f47f af45 	bne.w	801fe88 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801fffe:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 8020002:	2b00      	cmp	r3, #0
 8020004:	f43f af58 	beq.w	801feb8 <tcp_write+0x248>
 8020008:	4b05      	ldr	r3, [pc, #20]	; (8020020 <tcp_write+0x3b0>)
 802000a:	f240 224a 	movw	r2, #586	; 0x24a
 802000e:	490b      	ldr	r1, [pc, #44]	; (802003c <tcp_write+0x3cc>)
 8020010:	4805      	ldr	r0, [pc, #20]	; (8020028 <tcp_write+0x3b8>)
 8020012:	f006 fb5f 	bl	80266d4 <iprintf>
 8020016:	e74b      	b.n	801feb0 <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 8020018:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802001a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802001c:	930c      	str	r3, [sp, #48]	; 0x30
 802001e:	e6ad      	b.n	801fd7c <tcp_write+0x10c>
 8020020:	08046120 	.word	0x08046120
 8020024:	0804635c 	.word	0x0804635c
 8020028:	0802b3cc 	.word	0x0802b3cc
 802002c:	080462f0 	.word	0x080462f0
 8020030:	08046418 	.word	0x08046418
 8020034:	08046428 	.word	0x08046428
 8020038:	080463d8 	.word	0x080463d8
 802003c:	080463a8 	.word	0x080463a8
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8020040:	4b94      	ldr	r3, [pc, #592]	; (8020294 <tcp_write+0x624>)
 8020042:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8020046:	4994      	ldr	r1, [pc, #592]	; (8020298 <tcp_write+0x628>)
 8020048:	4894      	ldr	r0, [pc, #592]	; (802029c <tcp_write+0x62c>)
 802004a:	f006 fb43 	bl	80266d4 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 802004e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8020052:	930a      	str	r3, [sp, #40]	; 0x28
 8020054:	e66a      	b.n	801fd2c <tcp_write+0xbc>
 8020056:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020058:	e735      	b.n	801fec6 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 802005a:	4b8e      	ldr	r3, [pc, #568]	; (8020294 <tcp_write+0x624>)
 802005c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8020060:	498f      	ldr	r1, [pc, #572]	; (80202a0 <tcp_write+0x630>)
 8020062:	488e      	ldr	r0, [pc, #568]	; (802029c <tcp_write+0x62c>)
 8020064:	f006 fb36 	bl	80266d4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8020068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802006a:	891b      	ldrh	r3, [r3, #8]
 802006c:	e64f      	b.n	801fd0e <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 802006e:	8963      	ldrh	r3, [r4, #10]
 8020070:	465a      	mov	r2, fp
 8020072:	6860      	ldr	r0, [r4, #4]
 8020074:	4629      	mov	r1, r5
 8020076:	4418      	add	r0, r3
 8020078:	f005 fb66 	bl	8025748 <memcpy>
        p->len += oversize_used;
 802007c:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 802007e:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 8020080:	445b      	add	r3, fp
 8020082:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8020084:	2a00      	cmp	r2, #0
 8020086:	f47f af78 	bne.w	801ff7a <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 802008a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802008c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802008e:	8913      	ldrh	r3, [r2, #8]
 8020090:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 8020092:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 8020096:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 8020098:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 802009c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802009e:	2b00      	cmp	r3, #0
 80200a0:	d061      	beq.n	8020166 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 80200a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80200a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80200a6:	6860      	ldr	r0, [r4, #4]
 80200a8:	4629      	mov	r1, r5
 80200aa:	f7fc fa7b 	bl	801c5a4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80200ae:	892a      	ldrh	r2, [r5, #8]
 80200b0:	8923      	ldrh	r3, [r4, #8]
 80200b2:	4413      	add	r3, r2
 80200b4:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 80200b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200b8:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 80200bc:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 80200c0:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 80200c4:	4453      	add	r3, sl
 80200c6:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 80200ca:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 80200ce:	eba3 0a0a 	sub.w	sl, r3, sl
 80200d2:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 80200d6:	b11e      	cbz	r6, 80200e0 <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 80200d8:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 80200dc:	2b00      	cmp	r3, #0
 80200de:	d036      	beq.n	802014e <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80200e0:	b12f      	cbz	r7, 80200ee <tcp_write+0x47e>
 80200e2:	68fb      	ldr	r3, [r7, #12]
 80200e4:	b11b      	cbz	r3, 80200ee <tcp_write+0x47e>
 80200e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80200e8:	f012 0502 	ands.w	r5, r2, #2
 80200ec:	d025      	beq.n	802013a <tcp_write+0x4ca>
  return ERR_OK;
 80200ee:	2000      	movs	r0, #0
}
 80200f0:	b011      	add	sp, #68	; 0x44
 80200f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 80200f6:	4618      	mov	r0, r3
 80200f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80200fc:	f7fc fa20 	bl	801c540 <pbuf_free>
        goto memerr;
 8020100:	e757      	b.n	801ffb2 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8020102:	4b64      	ldr	r3, [pc, #400]	; (8020294 <tcp_write+0x624>)
 8020104:	f240 3227 	movw	r2, #807	; 0x327
 8020108:	4966      	ldr	r1, [pc, #408]	; (80202a4 <tcp_write+0x634>)
 802010a:	4864      	ldr	r0, [pc, #400]	; (802029c <tcp_write+0x62c>)
 802010c:	f006 fae2 	bl	80266d4 <iprintf>
  return ERR_MEM;
 8020110:	f04f 30ff 	mov.w	r0, #4294967295
 8020114:	e76b      	b.n	801ffee <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 8020116:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 802011a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 802011e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020120:	2b00      	cmp	r3, #0
 8020122:	d051      	beq.n	80201c8 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8020124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020126:	2b00      	cmp	r3, #0
 8020128:	d1bb      	bne.n	80200a2 <tcp_write+0x432>
 802012a:	4b5a      	ldr	r3, [pc, #360]	; (8020294 <tcp_write+0x624>)
 802012c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8020130:	495d      	ldr	r1, [pc, #372]	; (80202a8 <tcp_write+0x638>)
 8020132:	485a      	ldr	r0, [pc, #360]	; (802029c <tcp_write+0x62c>)
 8020134:	f006 face 	bl	80266d4 <iprintf>
 8020138:	e7b3      	b.n	80200a2 <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 802013a:	2008      	movs	r0, #8
 802013c:	899c      	ldrh	r4, [r3, #12]
 802013e:	f7fa f9c3 	bl	801a4c8 <lwip_htons>
 8020142:	4602      	mov	r2, r0
 8020144:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 8020146:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8020148:	4314      	orrs	r4, r2
 802014a:	819c      	strh	r4, [r3, #12]
 802014c:	e74f      	b.n	801ffee <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 802014e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8020152:	2b00      	cmp	r3, #0
 8020154:	d1c4      	bne.n	80200e0 <tcp_write+0x470>
 8020156:	4b4f      	ldr	r3, [pc, #316]	; (8020294 <tcp_write+0x624>)
 8020158:	f240 3212 	movw	r2, #786	; 0x312
 802015c:	4951      	ldr	r1, [pc, #324]	; (80202a4 <tcp_write+0x634>)
 802015e:	484f      	ldr	r0, [pc, #316]	; (802029c <tcp_write+0x62c>)
 8020160:	f006 fab8 	bl	80266d4 <iprintf>
 8020164:	e7bc      	b.n	80200e0 <tcp_write+0x470>
  } else if (extendlen > 0) {
 8020166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020168:	2b00      	cmp	r3, #0
 802016a:	d0a4      	beq.n	80200b6 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 802016c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802016e:	6859      	ldr	r1, [r3, #4]
 8020170:	2900      	cmp	r1, #0
 8020172:	d02e      	beq.n	80201d2 <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8020174:	680a      	ldr	r2, [r1, #0]
 8020176:	2a00      	cmp	r2, #0
 8020178:	d07f      	beq.n	802027a <tcp_write+0x60a>
 802017a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802017c:	e000      	b.n	8020180 <tcp_write+0x510>
 802017e:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 8020180:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8020182:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 8020184:	4423      	add	r3, r4
 8020186:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8020188:	4611      	mov	r1, r2
 802018a:	2800      	cmp	r0, #0
 802018c:	d1f7      	bne.n	802017e <tcp_write+0x50e>
    p->tot_len += extendlen;
 802018e:	8913      	ldrh	r3, [r2, #8]
 8020190:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020192:	440b      	add	r3, r1
 8020194:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 8020196:	8953      	ldrh	r3, [r2, #10]
 8020198:	440b      	add	r3, r1
 802019a:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 802019c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802019e:	8913      	ldrh	r3, [r2, #8]
 80201a0:	440b      	add	r3, r1
 80201a2:	8113      	strh	r3, [r2, #8]
 80201a4:	e787      	b.n	80200b6 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80201a6:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80201aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80201ae:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 80201b2:	e70f      	b.n	801ffd4 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80201b4:	4b37      	ldr	r3, [pc, #220]	; (8020294 <tcp_write+0x624>)
 80201b6:	f240 1255 	movw	r2, #341	; 0x155
 80201ba:	493c      	ldr	r1, [pc, #240]	; (80202ac <tcp_write+0x63c>)
 80201bc:	4837      	ldr	r0, [pc, #220]	; (802029c <tcp_write+0x62c>)
 80201be:	f006 fa89 	bl	80266d4 <iprintf>
  queuelen = pcb->snd_queuelen;
 80201c2:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 80201c6:	e668      	b.n	801fe9a <tcp_write+0x22a>
  } else if (extendlen > 0) {
 80201c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201ca:	b19b      	cbz	r3, 80201f4 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80201cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	d1cc      	bne.n	802016c <tcp_write+0x4fc>
 80201d2:	4b30      	ldr	r3, [pc, #192]	; (8020294 <tcp_write+0x624>)
 80201d4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80201d8:	4935      	ldr	r1, [pc, #212]	; (80202b0 <tcp_write+0x640>)
 80201da:	4830      	ldr	r0, [pc, #192]	; (802029c <tcp_write+0x62c>)
 80201dc:	f006 fa7a 	bl	80266d4 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80201e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201e2:	6859      	ldr	r1, [r3, #4]
 80201e4:	e7c6      	b.n	8020174 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80201e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201e8:	bba3      	cbnz	r3, 8020254 <tcp_write+0x5e4>
          extendlen = seglen;
 80201ea:	950d      	str	r5, [sp, #52]	; 0x34
 80201ec:	e6a7      	b.n	801ff3e <tcp_write+0x2ce>
    return ERR_CONN;
 80201ee:	f06f 000a 	mvn.w	r0, #10
 80201f2:	e6fc      	b.n	801ffee <tcp_write+0x37e>
  if (last_unsent == NULL) {
 80201f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	f47f af5d 	bne.w	80200b6 <tcp_write+0x446>
    pcb->unsent = queue;
 80201fc:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 8020200:	e75c      	b.n	80200bc <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8020202:	e9cd 9300 	strd	r9, r3, [sp]
 8020206:	2301      	movs	r3, #1
 8020208:	4622      	mov	r2, r4
 802020a:	4629      	mov	r1, r5
 802020c:	2000      	movs	r0, #0
 802020e:	9302      	str	r3, [sp, #8]
 8020210:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8020214:	f7ff fb92 	bl	801f93c <tcp_pbuf_prealloc>
 8020218:	4603      	mov	r3, r0
 802021a:	4604      	mov	r4, r0
 802021c:	900c      	str	r0, [sp, #48]	; 0x30
 802021e:	2800      	cmp	r0, #0
 8020220:	d0c1      	beq.n	80201a6 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8020222:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020224:	462a      	mov	r2, r5
 8020226:	9907      	ldr	r1, [sp, #28]
 8020228:	4401      	add	r1, r0
 802022a:	6858      	ldr	r0, [r3, #4]
 802022c:	f005 fa8c 	bl	8025748 <memcpy>
        queuelen += pbuf_clen(concat_p);
 8020230:	4620      	mov	r0, r4
 8020232:	e67e      	b.n	801ff32 <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020234:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 8020238:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 802023c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020240:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 8020244:	e6d3      	b.n	801ffee <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 8020246:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 802024a:	46d0      	mov	r8, sl
 802024c:	4657      	mov	r7, sl
 802024e:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 8020252:	e7d3      	b.n	80201fc <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8020254:	4b0f      	ldr	r3, [pc, #60]	; (8020294 <tcp_write+0x624>)
 8020256:	f240 2231 	movw	r2, #561	; 0x231
 802025a:	4916      	ldr	r1, [pc, #88]	; (80202b4 <tcp_write+0x644>)
 802025c:	480f      	ldr	r0, [pc, #60]	; (802029c <tcp_write+0x62c>)
 802025e:	f006 fa39 	bl	80266d4 <iprintf>
          extendlen = seglen;
 8020262:	950d      	str	r5, [sp, #52]	; 0x34
 8020264:	e66b      	b.n	801ff3e <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8020266:	4b0b      	ldr	r3, [pc, #44]	; (8020294 <tcp_write+0x624>)
 8020268:	f240 12ad 	movw	r2, #429	; 0x1ad
 802026c:	4912      	ldr	r1, [pc, #72]	; (80202b8 <tcp_write+0x648>)
 802026e:	480b      	ldr	r0, [pc, #44]	; (802029c <tcp_write+0x62c>)
 8020270:	f006 fa30 	bl	80266d4 <iprintf>
 8020274:	f06f 000f 	mvn.w	r0, #15
 8020278:	e6b9      	b.n	801ffee <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 802027a:	460a      	mov	r2, r1
 802027c:	e787      	b.n	802018e <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 802027e:	4b05      	ldr	r3, [pc, #20]	; (8020294 <tcp_write+0x624>)
 8020280:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8020284:	490d      	ldr	r1, [pc, #52]	; (80202bc <tcp_write+0x64c>)
 8020286:	4805      	ldr	r0, [pc, #20]	; (802029c <tcp_write+0x62c>)
 8020288:	f006 fa24 	bl	80266d4 <iprintf>
 802028c:	f06f 000f 	mvn.w	r0, #15
 8020290:	e6ad      	b.n	801ffee <tcp_write+0x37e>
 8020292:	bf00      	nop
 8020294:	08046120 	.word	0x08046120
 8020298:	0804633c 	.word	0x0804633c
 802029c:	0802b3cc 	.word	0x0802b3cc
 80202a0:	08046324 	.word	0x08046324
 80202a4:	080464ac 	.word	0x080464ac
 80202a8:	0804643c 	.word	0x0804643c
 80202ac:	080462b4 	.word	0x080462b4
 80202b0:	08046474 	.word	0x08046474
 80202b4:	0804637c 	.word	0x0804637c
 80202b8:	08046280 	.word	0x08046280
 80202bc:	08046268 	.word	0x08046268

080202c0 <tcp_split_unsent_seg>:
{
 80202c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80202c4:	4605      	mov	r5, r0
{
 80202c6:	b083      	sub	sp, #12
 80202c8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80202ca:	2800      	cmp	r0, #0
 80202cc:	f000 80a7 	beq.w	802041e <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 80202d0:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 80202d2:	b376      	cbz	r6, 8020332 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 80202d4:	2c00      	cmp	r4, #0
 80202d6:	f000 80b3 	beq.w	8020440 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 80202da:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 80202de:	45a1      	cmp	r9, r4
 80202e0:	f240 8099 	bls.w	8020416 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80202e4:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80202e6:	42a3      	cmp	r3, r4
 80202e8:	d328      	bcc.n	802033c <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 80202ea:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 80202ee:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80202f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80202f6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80202f8:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 80202fc:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020300:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8020304:	eb08 010b 	add.w	r1, r8, fp
 8020308:	b289      	uxth	r1, r1
 802030a:	f7fb ff47 	bl	801c19c <pbuf_alloc>
  if (p == NULL) {
 802030e:	4607      	mov	r7, r0
 8020310:	b178      	cbz	r0, 8020332 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 8020312:	6870      	ldr	r0, [r6, #4]
 8020314:	8932      	ldrh	r2, [r6, #8]
 8020316:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8020318:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 802031a:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 802031c:	4642      	mov	r2, r8
 802031e:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 8020320:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8020322:	b29b      	uxth	r3, r3
 8020324:	f7fc f9b0 	bl	801c688 <pbuf_copy_partial>
 8020328:	4540      	cmp	r0, r8
 802032a:	d01d      	beq.n	8020368 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 802032c:	4638      	mov	r0, r7
 802032e:	f7fc f907 	bl	801c540 <pbuf_free>
  return ERR_MEM;
 8020332:	f04f 30ff 	mov.w	r0, #4294967295
}
 8020336:	b003      	add	sp, #12
 8020338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 802033c:	4b45      	ldr	r3, [pc, #276]	; (8020454 <tcp_split_unsent_seg+0x194>)
 802033e:	f240 325b 	movw	r2, #859	; 0x35b
 8020342:	4945      	ldr	r1, [pc, #276]	; (8020458 <tcp_split_unsent_seg+0x198>)
 8020344:	4845      	ldr	r0, [pc, #276]	; (802045c <tcp_split_unsent_seg+0x19c>)
 8020346:	f006 f9c5 	bl	80266d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 802034a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 802034e:	f1b9 0f00 	cmp.w	r9, #0
 8020352:	d1ca      	bne.n	80202ea <tcp_split_unsent_seg+0x2a>
 8020354:	4b3f      	ldr	r3, [pc, #252]	; (8020454 <tcp_split_unsent_seg+0x194>)
 8020356:	f44f 7257 	mov.w	r2, #860	; 0x35c
 802035a:	4941      	ldr	r1, [pc, #260]	; (8020460 <tcp_split_unsent_seg+0x1a0>)
 802035c:	483f      	ldr	r0, [pc, #252]	; (802045c <tcp_split_unsent_seg+0x19c>)
 802035e:	f006 f9b9 	bl	80266d4 <iprintf>
  remainder = useg->len - split;
 8020362:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 8020366:	e7c0      	b.n	80202ea <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8020368:	68f3      	ldr	r3, [r6, #12]
 802036a:	8998      	ldrh	r0, [r3, #12]
 802036c:	f7fa f8ac 	bl	801a4c8 <lwip_htons>
  if (split_flags & TCP_PSH) {
 8020370:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8020374:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 8020378:	d159      	bne.n	802042e <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 802037a:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 802037e:	f018 0f01 	tst.w	r8, #1
 8020382:	d003      	beq.n	802038c <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 8020384:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8020388:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 802038c:	68f3      	ldr	r3, [r6, #12]
 802038e:	6858      	ldr	r0, [r3, #4]
 8020390:	f7fa f89e 	bl	801a4d0 <lwip_htonl>
 8020394:	f8cd a000 	str.w	sl, [sp]
 8020398:	1823      	adds	r3, r4, r0
 802039a:	465a      	mov	r2, fp
 802039c:	4639      	mov	r1, r7
 802039e:	4628      	mov	r0, r5
 80203a0:	f7ff fb1c 	bl	801f9dc <tcp_create_segment>
  if (seg == NULL) {
 80203a4:	4682      	mov	sl, r0
 80203a6:	2800      	cmp	r0, #0
 80203a8:	d0c0      	beq.n	802032c <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80203aa:	6870      	ldr	r0, [r6, #4]
 80203ac:	eba4 0409 	sub.w	r4, r4, r9
 80203b0:	f7fc f8da 	bl	801c568 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80203b4:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80203b6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 80203ba:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80203bc:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80203be:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80203c0:	4610      	mov	r0, r2
 80203c2:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80203c4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80203c8:	b289      	uxth	r1, r1
 80203ca:	f7fb ffa1 	bl	801c310 <pbuf_realloc>
  useg->len -= remainder;
 80203ce:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80203d0:	4640      	mov	r0, r8
  useg->len -= remainder;
 80203d2:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80203d4:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 80203d6:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80203d8:	899c      	ldrh	r4, [r3, #12]
 80203da:	f7fa f875 	bl	801a4c8 <lwip_htons>
 80203de:	68f3      	ldr	r3, [r6, #12]
 80203e0:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80203e2:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80203e4:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80203e6:	f7fc f8bf 	bl	801c568 <pbuf_clen>
 80203ea:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 80203ee:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80203f0:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80203f4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80203f8:	f7fc f8b6 	bl	801c568 <pbuf_clen>
 80203fc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8020400:	4418      	add	r0, r3
  seg->next = useg->next;
 8020402:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020404:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 8020408:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 802040c:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 8020410:	f8da 3000 	ldr.w	r3, [sl]
 8020414:	b183      	cbz	r3, 8020438 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 8020416:	2000      	movs	r0, #0
}
 8020418:	b003      	add	sp, #12
 802041a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 802041e:	4b0d      	ldr	r3, [pc, #52]	; (8020454 <tcp_split_unsent_seg+0x194>)
 8020420:	f240 324b 	movw	r2, #843	; 0x34b
 8020424:	490f      	ldr	r1, [pc, #60]	; (8020464 <tcp_split_unsent_seg+0x1a4>)
 8020426:	480d      	ldr	r0, [pc, #52]	; (802045c <tcp_split_unsent_seg+0x19c>)
 8020428:	f006 f954 	bl	80266d4 <iprintf>
 802042c:	e750      	b.n	80202d0 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 802042e:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 8020432:	f04f 0b08 	mov.w	fp, #8
 8020436:	e7a2      	b.n	802037e <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 8020438:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 802043a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 802043e:	e77a      	b.n	8020336 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8020440:	4b04      	ldr	r3, [pc, #16]	; (8020454 <tcp_split_unsent_seg+0x194>)
 8020442:	f240 3253 	movw	r2, #851	; 0x353
 8020446:	4908      	ldr	r1, [pc, #32]	; (8020468 <tcp_split_unsent_seg+0x1a8>)
 8020448:	4804      	ldr	r0, [pc, #16]	; (802045c <tcp_split_unsent_seg+0x19c>)
 802044a:	f006 f943 	bl	80266d4 <iprintf>
    return ERR_VAL;
 802044e:	f06f 0005 	mvn.w	r0, #5
 8020452:	e770      	b.n	8020336 <tcp_split_unsent_seg+0x76>
 8020454:	08046120 	.word	0x08046120
 8020458:	08046514 	.word	0x08046514
 802045c:	0802b3cc 	.word	0x0802b3cc
 8020460:	08046524 	.word	0x08046524
 8020464:	080464cc 	.word	0x080464cc
 8020468:	080464f0 	.word	0x080464f0

0802046c <tcp_enqueue_flags>:
{
 802046c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8020470:	f011 0703 	ands.w	r7, r1, #3
{
 8020474:	b082      	sub	sp, #8
 8020476:	460d      	mov	r5, r1
 8020478:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 802047a:	d05e      	beq.n	802053a <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 802047c:	2c00      	cmp	r4, #0
 802047e:	d065      	beq.n	802054c <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 8020480:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8020484:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 8020488:	d049      	beq.n	802051e <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802048a:	2104      	movs	r1, #4
 802048c:	2036      	movs	r0, #54	; 0x36
 802048e:	f7fb fe85 	bl	801c19c <pbuf_alloc>
 8020492:	4606      	mov	r6, r0
 8020494:	2800      	cmp	r0, #0
 8020496:	d049      	beq.n	802052c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8020498:	8943      	ldrh	r3, [r0, #10]
 802049a:	2b03      	cmp	r3, #3
 802049c:	d872      	bhi.n	8020584 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 802049e:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80204a2:	4b40      	ldr	r3, [pc, #256]	; (80205a4 <tcp_enqueue_flags+0x138>)
 80204a4:	f240 4239 	movw	r2, #1081	; 0x439
 80204a8:	493f      	ldr	r1, [pc, #252]	; (80205a8 <tcp_enqueue_flags+0x13c>)
 80204aa:	4840      	ldr	r0, [pc, #256]	; (80205ac <tcp_enqueue_flags+0x140>)
 80204ac:	f006 f912 	bl	80266d4 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80204b0:	4631      	mov	r1, r6
 80204b2:	f8cd 8000 	str.w	r8, [sp]
 80204b6:	462a      	mov	r2, r5
 80204b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80204ba:	4620      	mov	r0, r4
 80204bc:	f7ff fa8e 	bl	801f9dc <tcp_create_segment>
 80204c0:	4606      	mov	r6, r0
 80204c2:	2800      	cmp	r0, #0
 80204c4:	d032      	beq.n	802052c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80204c6:	68c3      	ldr	r3, [r0, #12]
 80204c8:	079a      	lsls	r2, r3, #30
 80204ca:	d153      	bne.n	8020574 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80204cc:	8933      	ldrh	r3, [r6, #8]
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d144      	bne.n	802055c <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 80204d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	d04b      	beq.n	8020570 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80204d8:	461a      	mov	r2, r3
 80204da:	681b      	ldr	r3, [r3, #0]
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d1fb      	bne.n	80204d8 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 80204e0:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 80204e2:	2300      	movs	r3, #0
 80204e4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80204e8:	b117      	cbz	r7, 80204f0 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 80204ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80204ec:	3301      	adds	r3, #1
 80204ee:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 80204f0:	07eb      	lsls	r3, r5, #31
 80204f2:	d503      	bpl.n	80204fc <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 80204f4:	8b63      	ldrh	r3, [r4, #26]
 80204f6:	f043 0320 	orr.w	r3, r3, #32
 80204fa:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80204fc:	6870      	ldr	r0, [r6, #4]
 80204fe:	f7fc f833 	bl	801c568 <pbuf_clen>
 8020502:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8020506:	4418      	add	r0, r3
 8020508:	b280      	uxth	r0, r0
 802050a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 802050e:	b118      	cbz	r0, 8020518 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8020510:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8020512:	2800      	cmp	r0, #0
 8020514:	d039      	beq.n	802058a <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 8020516:	2000      	movs	r0, #0
}
 8020518:	b002      	add	sp, #8
 802051a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802051e:	4641      	mov	r1, r8
 8020520:	2036      	movs	r0, #54	; 0x36
 8020522:	f7fb fe3b 	bl	801c19c <pbuf_alloc>
 8020526:	4606      	mov	r6, r0
 8020528:	2800      	cmp	r0, #0
 802052a:	d1c1      	bne.n	80204b0 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 802052c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 802052e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020536:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8020538:	e7ee      	b.n	8020518 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 802053a:	4b1a      	ldr	r3, [pc, #104]	; (80205a4 <tcp_enqueue_flags+0x138>)
 802053c:	f240 4211 	movw	r2, #1041	; 0x411
 8020540:	491b      	ldr	r1, [pc, #108]	; (80205b0 <tcp_enqueue_flags+0x144>)
 8020542:	481a      	ldr	r0, [pc, #104]	; (80205ac <tcp_enqueue_flags+0x140>)
 8020544:	f006 f8c6 	bl	80266d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8020548:	2c00      	cmp	r4, #0
 802054a:	d199      	bne.n	8020480 <tcp_enqueue_flags+0x14>
 802054c:	4b15      	ldr	r3, [pc, #84]	; (80205a4 <tcp_enqueue_flags+0x138>)
 802054e:	f240 4213 	movw	r2, #1043	; 0x413
 8020552:	4918      	ldr	r1, [pc, #96]	; (80205b4 <tcp_enqueue_flags+0x148>)
 8020554:	4815      	ldr	r0, [pc, #84]	; (80205ac <tcp_enqueue_flags+0x140>)
 8020556:	f006 f8bd 	bl	80266d4 <iprintf>
 802055a:	e791      	b.n	8020480 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 802055c:	4b11      	ldr	r3, [pc, #68]	; (80205a4 <tcp_enqueue_flags+0x138>)
 802055e:	f240 4243 	movw	r2, #1091	; 0x443
 8020562:	4915      	ldr	r1, [pc, #84]	; (80205b8 <tcp_enqueue_flags+0x14c>)
 8020564:	4811      	ldr	r0, [pc, #68]	; (80205ac <tcp_enqueue_flags+0x140>)
 8020566:	f006 f8b5 	bl	80266d4 <iprintf>
  if (pcb->unsent == NULL) {
 802056a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 802056c:	2b00      	cmp	r3, #0
 802056e:	d1b3      	bne.n	80204d8 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 8020570:	66e6      	str	r6, [r4, #108]	; 0x6c
 8020572:	e7b6      	b.n	80204e2 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8020574:	4b0b      	ldr	r3, [pc, #44]	; (80205a4 <tcp_enqueue_flags+0x138>)
 8020576:	f240 4242 	movw	r2, #1090	; 0x442
 802057a:	4910      	ldr	r1, [pc, #64]	; (80205bc <tcp_enqueue_flags+0x150>)
 802057c:	480b      	ldr	r0, [pc, #44]	; (80205ac <tcp_enqueue_flags+0x140>)
 802057e:	f006 f8a9 	bl	80266d4 <iprintf>
 8020582:	e7a3      	b.n	80204cc <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 8020584:	f04f 0801 	mov.w	r8, #1
 8020588:	e792      	b.n	80204b0 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 802058a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 802058c:	2c00      	cmp	r4, #0
 802058e:	d1c3      	bne.n	8020518 <tcp_enqueue_flags+0xac>
 8020590:	4b04      	ldr	r3, [pc, #16]	; (80205a4 <tcp_enqueue_flags+0x138>)
 8020592:	f240 4265 	movw	r2, #1125	; 0x465
 8020596:	490a      	ldr	r1, [pc, #40]	; (80205c0 <tcp_enqueue_flags+0x154>)
 8020598:	4804      	ldr	r0, [pc, #16]	; (80205ac <tcp_enqueue_flags+0x140>)
 802059a:	f006 f89b 	bl	80266d4 <iprintf>
  return ERR_OK;
 802059e:	4620      	mov	r0, r4
 80205a0:	e7ba      	b.n	8020518 <tcp_enqueue_flags+0xac>
 80205a2:	bf00      	nop
 80205a4:	08046120 	.word	0x08046120
 80205a8:	080465ac 	.word	0x080465ac
 80205ac:	0802b3cc 	.word	0x0802b3cc
 80205b0:	08046534 	.word	0x08046534
 80205b4:	0804658c 	.word	0x0804658c
 80205b8:	08046600 	.word	0x08046600
 80205bc:	080465e8 	.word	0x080465e8
 80205c0:	0804662c 	.word	0x0804662c

080205c4 <tcp_send_fin>:
{
 80205c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80205c6:	4606      	mov	r6, r0
 80205c8:	b188      	cbz	r0, 80205ee <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 80205ca:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 80205cc:	b14c      	cbz	r4, 80205e2 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80205ce:	4625      	mov	r5, r4
 80205d0:	6824      	ldr	r4, [r4, #0]
 80205d2:	2c00      	cmp	r4, #0
 80205d4:	d1fb      	bne.n	80205ce <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80205d6:	68eb      	ldr	r3, [r5, #12]
 80205d8:	8998      	ldrh	r0, [r3, #12]
 80205da:	f7f9 ff75 	bl	801a4c8 <lwip_htons>
 80205de:	0743      	lsls	r3, r0, #29
 80205e0:	d00d      	beq.n	80205fe <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80205e2:	4630      	mov	r0, r6
 80205e4:	2101      	movs	r1, #1
}
 80205e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80205ea:	f7ff bf3f 	b.w	802046c <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80205ee:	4b0b      	ldr	r3, [pc, #44]	; (802061c <tcp_send_fin+0x58>)
 80205f0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80205f4:	490a      	ldr	r1, [pc, #40]	; (8020620 <tcp_send_fin+0x5c>)
 80205f6:	480b      	ldr	r0, [pc, #44]	; (8020624 <tcp_send_fin+0x60>)
 80205f8:	f006 f86c 	bl	80266d4 <iprintf>
 80205fc:	e7e5      	b.n	80205ca <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80205fe:	68eb      	ldr	r3, [r5, #12]
 8020600:	2001      	movs	r0, #1
 8020602:	899f      	ldrh	r7, [r3, #12]
 8020604:	f7f9 ff60 	bl	801a4c8 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8020608:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802060a:	4338      	orrs	r0, r7
 802060c:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 802060e:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8020612:	8190      	strh	r0, [r2, #12]
}
 8020614:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 8020616:	8373      	strh	r3, [r6, #26]
}
 8020618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802061a:	bf00      	nop
 802061c:	08046120 	.word	0x08046120
 8020620:	08046654 	.word	0x08046654
 8020624:	0802b3cc 	.word	0x0802b3cc

08020628 <tcp_rexmit_rto_prepare>:
{
 8020628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 802062a:	4605      	mov	r5, r0
 802062c:	2800      	cmp	r0, #0
 802062e:	d032      	beq.n	8020696 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 8020630:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8020632:	b132      	cbz	r2, 8020642 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8020634:	6813      	ldr	r3, [r2, #0]
 8020636:	4614      	mov	r4, r2
 8020638:	b15b      	cbz	r3, 8020652 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 802063a:	6863      	ldr	r3, [r4, #4]
 802063c:	7b9b      	ldrb	r3, [r3, #14]
 802063e:	2b01      	cmp	r3, #1
 8020640:	d003      	beq.n	802064a <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 8020642:	f06f 0305 	mvn.w	r3, #5
}
 8020646:	4618      	mov	r0, r3
 8020648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 802064a:	6824      	ldr	r4, [r4, #0]
 802064c:	6823      	ldr	r3, [r4, #0]
 802064e:	2b00      	cmp	r3, #0
 8020650:	d1f3      	bne.n	802063a <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 8020652:	6863      	ldr	r3, [r4, #4]
 8020654:	7b9b      	ldrb	r3, [r3, #14]
 8020656:	2b01      	cmp	r3, #1
 8020658:	d1f3      	bne.n	8020642 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 802065a:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 802065c:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 802065e:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 8020660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 8020664:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 8020666:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020668:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 802066a:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 802066e:	6858      	ldr	r0, [r3, #4]
 8020670:	f7f9 ff2e 	bl	801a4d0 <lwip_htonl>
 8020674:	68e3      	ldr	r3, [r4, #12]
 8020676:	4606      	mov	r6, r0
 8020678:	8924      	ldrh	r4, [r4, #8]
 802067a:	8998      	ldrh	r0, [r3, #12]
 802067c:	f7f9 ff24 	bl	801a4c8 <lwip_htons>
 8020680:	f010 0003 	ands.w	r0, r0, #3
 8020684:	4426      	add	r6, r4
  return ERR_OK;
 8020686:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020688:	bf18      	it	ne
 802068a:	2001      	movne	r0, #1
  pcb->rttest = 0;
 802068c:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 802068e:	4430      	add	r0, r6
 8020690:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 8020692:	4618      	mov	r0, r3
 8020694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8020696:	4b04      	ldr	r3, [pc, #16]	; (80206a8 <tcp_rexmit_rto_prepare+0x80>)
 8020698:	f240 6263 	movw	r2, #1635	; 0x663
 802069c:	4903      	ldr	r1, [pc, #12]	; (80206ac <tcp_rexmit_rto_prepare+0x84>)
 802069e:	4804      	ldr	r0, [pc, #16]	; (80206b0 <tcp_rexmit_rto_prepare+0x88>)
 80206a0:	f006 f818 	bl	80266d4 <iprintf>
 80206a4:	e7c4      	b.n	8020630 <tcp_rexmit_rto_prepare+0x8>
 80206a6:	bf00      	nop
 80206a8:	08046120 	.word	0x08046120
 80206ac:	08046670 	.word	0x08046670
 80206b0:	0802b3cc 	.word	0x0802b3cc

080206b4 <tcp_rexmit>:
{
 80206b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80206b6:	4607      	mov	r7, r0
 80206b8:	2800      	cmp	r0, #0
 80206ba:	d031      	beq.n	8020720 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 80206bc:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 80206be:	b34e      	cbz	r6, 8020714 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 80206c0:	6873      	ldr	r3, [r6, #4]
 80206c2:	7b9b      	ldrb	r3, [r3, #14]
 80206c4:	2b01      	cmp	r3, #1
 80206c6:	d125      	bne.n	8020714 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 80206c8:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 80206ca:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 80206ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 80206d0:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 80206d2:	b91b      	cbnz	r3, 80206dc <tcp_rexmit+0x28>
 80206d4:	e00f      	b.n	80206f6 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 80206d6:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 80206d8:	682b      	ldr	r3, [r5, #0]
 80206da:	b163      	cbz	r3, 80206f6 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80206dc:	68db      	ldr	r3, [r3, #12]
 80206de:	6858      	ldr	r0, [r3, #4]
 80206e0:	f7f9 fef6 	bl	801a4d0 <lwip_htonl>
 80206e4:	68f3      	ldr	r3, [r6, #12]
 80206e6:	4604      	mov	r4, r0
 80206e8:	6858      	ldr	r0, [r3, #4]
 80206ea:	f7f9 fef1 	bl	801a4d0 <lwip_htonl>
 80206ee:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 80206f0:	2c00      	cmp	r4, #0
 80206f2:	dbf0      	blt.n	80206d6 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 80206f4:	682b      	ldr	r3, [r5, #0]
 80206f6:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 80206f8:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 80206fa:	6833      	ldr	r3, [r6, #0]
 80206fc:	b16b      	cbz	r3, 802071a <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 80206fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8020702:	2bff      	cmp	r3, #255	; 0xff
 8020704:	d002      	beq.n	802070c <tcp_rexmit+0x58>
    ++pcb->nrtx;
 8020706:	3301      	adds	r3, #1
 8020708:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 802070c:	2300      	movs	r3, #0
  return ERR_OK;
 802070e:	4618      	mov	r0, r3
  pcb->rttest = 0;
 8020710:	637b      	str	r3, [r7, #52]	; 0x34
}
 8020712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8020714:	f06f 0005 	mvn.w	r0, #5
}
 8020718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 802071a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 802071e:	e7ee      	b.n	80206fe <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020720:	4b03      	ldr	r3, [pc, #12]	; (8020730 <tcp_rexmit+0x7c>)
 8020722:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8020726:	4903      	ldr	r1, [pc, #12]	; (8020734 <tcp_rexmit+0x80>)
 8020728:	4803      	ldr	r0, [pc, #12]	; (8020738 <tcp_rexmit+0x84>)
 802072a:	f005 ffd3 	bl	80266d4 <iprintf>
 802072e:	e7c5      	b.n	80206bc <tcp_rexmit+0x8>
 8020730:	08046120 	.word	0x08046120
 8020734:	08046694 	.word	0x08046694
 8020738:	0802b3cc 	.word	0x0802b3cc

0802073c <tcp_rexmit_fast>:
{
 802073c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 802073e:	4604      	mov	r4, r0
 8020740:	b340      	cbz	r0, 8020794 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8020742:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020744:	b113      	cbz	r3, 802074c <tcp_rexmit_fast+0x10>
 8020746:	8b63      	ldrh	r3, [r4, #26]
 8020748:	075b      	lsls	r3, r3, #29
 802074a:	d500      	bpl.n	802074e <tcp_rexmit_fast+0x12>
}
 802074c:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 802074e:	4620      	mov	r0, r4
 8020750:	f7ff ffb0 	bl	80206b4 <tcp_rexmit>
 8020754:	2800      	cmp	r0, #0
 8020756:	d1f9      	bne.n	802074c <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020758:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 802075c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8020760:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020762:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8020764:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020768:	bf28      	it	cs
 802076a:	4619      	movcs	r1, r3
 802076c:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 802076e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020772:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8020776:	d902      	bls.n	802077e <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 8020778:	b283      	uxth	r3, r0
 802077a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 802077e:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020780:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 8020782:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020786:	4413      	add	r3, r2
      pcb->rtime = 0;
 8020788:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802078a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 802078e:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 8020790:	8622      	strh	r2, [r4, #48]	; 0x30
}
 8020792:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8020794:	4b03      	ldr	r3, [pc, #12]	; (80207a4 <tcp_rexmit_fast+0x68>)
 8020796:	f240 62f9 	movw	r2, #1785	; 0x6f9
 802079a:	4903      	ldr	r1, [pc, #12]	; (80207a8 <tcp_rexmit_fast+0x6c>)
 802079c:	4803      	ldr	r0, [pc, #12]	; (80207ac <tcp_rexmit_fast+0x70>)
 802079e:	f005 ff99 	bl	80266d4 <iprintf>
 80207a2:	e7ce      	b.n	8020742 <tcp_rexmit_fast+0x6>
 80207a4:	08046120 	.word	0x08046120
 80207a8:	080466ac 	.word	0x080466ac
 80207ac:	0802b3cc 	.word	0x0802b3cc

080207b0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80207b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207b4:	b084      	sub	sp, #16
 80207b6:	4607      	mov	r7, r0
 80207b8:	460e      	mov	r6, r1
 80207ba:	4615      	mov	r5, r2
 80207bc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80207c0:	461c      	mov	r4, r3
{
 80207c2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80207c6:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80207ca:	b1fb      	cbz	r3, 802080c <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80207cc:	f1b8 0f00 	cmp.w	r8, #0
 80207d0:	d026      	beq.n	8020820 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80207d2:	4630      	mov	r0, r6
 80207d4:	f7f9 fe7c 	bl	801a4d0 <lwip_htonl>
 80207d8:	2114      	movs	r1, #20
 80207da:	4602      	mov	r2, r0
 80207dc:	4628      	mov	r0, r5
 80207de:	f246 0508 	movw	r5, #24584	; 0x6008
 80207e2:	464b      	mov	r3, r9
 80207e4:	f8cd a000 	str.w	sl, [sp]
 80207e8:	e9cd 1501 	strd	r1, r5, [sp, #4]
 80207ec:	2100      	movs	r1, #0
 80207ee:	f7ff f971 	bl	801fad4 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80207f2:	4601      	mov	r1, r0
 80207f4:	b138      	cbz	r0, 8020806 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80207f6:	4643      	mov	r3, r8
 80207f8:	4622      	mov	r2, r4
 80207fa:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80207fc:	b004      	add	sp, #16
 80207fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020802:	f7ff b9d5 	b.w	801fbb0 <tcp_output_control_segment>
}
 8020806:	b004      	add	sp, #16
 8020808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802080c:	4b08      	ldr	r3, [pc, #32]	; (8020830 <tcp_rst+0x80>)
 802080e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8020812:	4908      	ldr	r1, [pc, #32]	; (8020834 <tcp_rst+0x84>)
 8020814:	4808      	ldr	r0, [pc, #32]	; (8020838 <tcp_rst+0x88>)
 8020816:	f005 ff5d 	bl	80266d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802081a:	f1b8 0f00 	cmp.w	r8, #0
 802081e:	d1d8      	bne.n	80207d2 <tcp_rst+0x22>
 8020820:	4b03      	ldr	r3, [pc, #12]	; (8020830 <tcp_rst+0x80>)
 8020822:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8020826:	4905      	ldr	r1, [pc, #20]	; (802083c <tcp_rst+0x8c>)
 8020828:	4803      	ldr	r0, [pc, #12]	; (8020838 <tcp_rst+0x88>)
 802082a:	f005 ff53 	bl	80266d4 <iprintf>
 802082e:	e7d0      	b.n	80207d2 <tcp_rst+0x22>
 8020830:	08046120 	.word	0x08046120
 8020834:	080466cc 	.word	0x080466cc
 8020838:	0802b3cc 	.word	0x0802b3cc
 802083c:	080466e8 	.word	0x080466e8

08020840 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8020840:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8020842:	4604      	mov	r4, r0
 8020844:	b1c0      	cbz	r0, 8020878 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8020846:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8020848:	f7f9 fe42 	bl	801a4d0 <lwip_htonl>
 802084c:	2100      	movs	r1, #0
 802084e:	4602      	mov	r2, r0
 8020850:	4620      	mov	r0, r4
 8020852:	f7ff f985 	bl	801fb60 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020856:	4601      	mov	r1, r0
 8020858:	b1b0      	cbz	r0, 8020888 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802085a:	1d23      	adds	r3, r4, #4
 802085c:	4622      	mov	r2, r4
 802085e:	4620      	mov	r0, r4
 8020860:	f7ff f9a6 	bl	801fbb0 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020864:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 8020866:	b118      	cbz	r0, 8020870 <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020868:	f043 0303 	orr.w	r3, r3, #3
 802086c:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 802086e:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020870:	f023 0303 	bic.w	r3, r3, #3
 8020874:	8363      	strh	r3, [r4, #26]
}
 8020876:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8020878:	4b07      	ldr	r3, [pc, #28]	; (8020898 <tcp_send_empty_ack+0x58>)
 802087a:	f240 72ea 	movw	r2, #2026	; 0x7ea
 802087e:	4907      	ldr	r1, [pc, #28]	; (802089c <tcp_send_empty_ack+0x5c>)
 8020880:	4807      	ldr	r0, [pc, #28]	; (80208a0 <tcp_send_empty_ack+0x60>)
 8020882:	f005 ff27 	bl	80266d4 <iprintf>
 8020886:	e7de      	b.n	8020846 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020888:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 802088a:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802088e:	f043 0303 	orr.w	r3, r3, #3
 8020892:	8363      	strh	r3, [r4, #26]
}
 8020894:	bd10      	pop	{r4, pc}
 8020896:	bf00      	nop
 8020898:	08046120 	.word	0x08046120
 802089c:	08046704 	.word	0x08046704
 80208a0:	0802b3cc 	.word	0x0802b3cc

080208a4 <tcp_output>:
{
 80208a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80208a8:	4604      	mov	r4, r0
{
 80208aa:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80208ac:	2800      	cmp	r0, #0
 80208ae:	f000 81bc 	beq.w	8020c2a <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80208b2:	7d23      	ldrb	r3, [r4, #20]
 80208b4:	2b01      	cmp	r3, #1
 80208b6:	f000 8173 	beq.w	8020ba0 <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 80208ba:	4bb3      	ldr	r3, [pc, #716]	; (8020b88 <tcp_output+0x2e4>)
 80208bc:	681b      	ldr	r3, [r3, #0]
 80208be:	42a3      	cmp	r3, r4
 80208c0:	f000 817a 	beq.w	8020bb8 <tcp_output+0x314>
  seg = pcb->unsent;
 80208c4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 80208c6:	b345      	cbz	r5, 802091a <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80208c8:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80208ca:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80208ce:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80208d2:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80208d6:	2800      	cmp	r0, #0
 80208d8:	f040 81af 	bne.w	8020c3a <tcp_output+0x396>
    return ip_route(src, dst);
 80208dc:	4648      	mov	r0, r9
 80208de:	f003 fa2b 	bl	8023d38 <ip4_route>
 80208e2:	4682      	mov	sl, r0
  if (netif == NULL) {
 80208e4:	f1ba 0f00 	cmp.w	sl, #0
 80208e8:	f000 81b9 	beq.w	8020c5e <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 80208ec:	6823      	ldr	r3, [r4, #0]
 80208ee:	b913      	cbnz	r3, 80208f6 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80208f0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80208f4:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80208f6:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80208f8:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80208fa:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80208fc:	bf28      	it	cs
 80208fe:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8020900:	f7f9 fde6 	bl	801a4d0 <lwip_htonl>
 8020904:	892b      	ldrh	r3, [r5, #8]
 8020906:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020908:	1a9b      	subs	r3, r3, r2
 802090a:	4418      	add	r0, r3
 802090c:	42b8      	cmp	r0, r7
 802090e:	d90f      	bls.n	8020930 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020910:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8020914:	42bb      	cmp	r3, r7
 8020916:	f000 8159 	beq.w	8020bcc <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 802091a:	8b62      	ldrh	r2, [r4, #26]
 802091c:	0791      	lsls	r1, r2, #30
 802091e:	f100 814f 	bmi.w	8020bc0 <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 8020926:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020928:	8362      	strh	r2, [r4, #26]
}
 802092a:	b005      	add	sp, #20
 802092c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 8020930:	2300      	movs	r3, #0
 8020932:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 8020936:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 8020938:	2b00      	cmp	r3, #0
 802093a:	f000 8157 	beq.w	8020bec <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 802093e:	4698      	mov	r8, r3
 8020940:	681b      	ldr	r3, [r3, #0]
 8020942:	2b00      	cmp	r3, #0
 8020944:	d1fb      	bne.n	802093e <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 8020946:	464e      	mov	r6, r9
 8020948:	e0b7      	b.n	8020aba <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 802094a:	68eb      	ldr	r3, [r5, #12]
 802094c:	2010      	movs	r0, #16
 802094e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8020952:	f7f9 fdb9 	bl	801a4c8 <lwip_htons>
 8020956:	ea49 0000 	orr.w	r0, r9, r0
 802095a:	f8d5 900c 	ldr.w	r9, [r5, #12]
 802095e:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 8020962:	686b      	ldr	r3, [r5, #4]
 8020964:	7b9b      	ldrb	r3, [r3, #14]
 8020966:	2b01      	cmp	r3, #1
 8020968:	d160      	bne.n	8020a2c <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 802096a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802096c:	f7f9 fdb0 	bl	801a4d0 <lwip_htonl>
 8020970:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020974:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8020976:	f8d5 900c 	ldr.w	r9, [r5, #12]
 802097a:	f7f9 fda5 	bl	801a4c8 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 802097e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8020980:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020982:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020986:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8020988:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 802098c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 802098e:	7aab      	ldrb	r3, [r5, #10]
 8020990:	07db      	lsls	r3, r3, #31
 8020992:	f100 80d0 	bmi.w	8020b36 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8020996:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 802099a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 802099e:	2b00      	cmp	r3, #0
 80209a0:	da01      	bge.n	80209a6 <tcp_output+0x102>
    pcb->rtime = 0;
 80209a2:	2300      	movs	r3, #0
 80209a4:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 80209a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	f000 80b9 	beq.w	8020b20 <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80209ae:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 80209b0:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80209b4:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 80209b6:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80209b8:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 80209bc:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 80209be:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80209c2:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 80209c4:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 80209c6:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 80209c8:	b292      	uxth	r2, r2
  seg->p->len -= len;
 80209ca:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 80209cc:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 80209ce:	f889 c010 	strb.w	ip, [r9, #16]
 80209d2:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80209d6:	7aab      	ldrb	r3, [r5, #10]
 80209d8:	009b      	lsls	r3, r3, #2
 80209da:	f003 0304 	and.w	r3, r3, #4
 80209de:	3314      	adds	r3, #20
 80209e0:	444b      	add	r3, r9
 80209e2:	459b      	cmp	fp, r3
 80209e4:	d00a      	beq.n	80209fc <tcp_output+0x158>
 80209e6:	f240 621c 	movw	r2, #1564	; 0x61c
 80209ea:	4b68      	ldr	r3, [pc, #416]	; (8020b8c <tcp_output+0x2e8>)
 80209ec:	4968      	ldr	r1, [pc, #416]	; (8020b90 <tcp_output+0x2ec>)
 80209ee:	4869      	ldr	r0, [pc, #420]	; (8020b94 <tcp_output+0x2f0>)
 80209f0:	f005 fe70 	bl	80266d4 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80209f4:	6868      	ldr	r0, [r5, #4]
 80209f6:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80209fa:	8902      	ldrh	r2, [r0, #8]
 80209fc:	4623      	mov	r3, r4
 80209fe:	2106      	movs	r1, #6
 8020a00:	9600      	str	r6, [sp, #0]
 8020a02:	f7fa faf5 	bl	801aff0 <ip_chksum_pseudo>
 8020a06:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8020a0a:	6868      	ldr	r0, [r5, #4]
 8020a0c:	4632      	mov	r2, r6
 8020a0e:	f8cd a008 	str.w	sl, [sp, #8]
 8020a12:	4621      	mov	r1, r4
 8020a14:	7aa3      	ldrb	r3, [r4, #10]
 8020a16:	9300      	str	r3, [sp, #0]
 8020a18:	2306      	movs	r3, #6
 8020a1a:	9301      	str	r3, [sp, #4]
 8020a1c:	7ae3      	ldrb	r3, [r4, #11]
 8020a1e:	f003 fb55 	bl	80240cc <ip4_output_if>
    if (err != ERR_OK) {
 8020a22:	2800      	cmp	r0, #0
 8020a24:	f040 8116 	bne.w	8020c54 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020a28:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 8020a2c:	682b      	ldr	r3, [r5, #0]
 8020a2e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8020a30:	7d23      	ldrb	r3, [r4, #20]
 8020a32:	2b02      	cmp	r3, #2
 8020a34:	d003      	beq.n	8020a3e <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020a36:	8b63      	ldrh	r3, [r4, #26]
 8020a38:	f023 0303 	bic.w	r3, r3, #3
 8020a3c:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020a3e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8020a42:	f7f9 fd45 	bl	801a4d0 <lwip_htonl>
 8020a46:	68eb      	ldr	r3, [r5, #12]
 8020a48:	4681      	mov	r9, r0
 8020a4a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 8020a4e:	8998      	ldrh	r0, [r3, #12]
 8020a50:	f7f9 fd3a 	bl	801a4c8 <lwip_htons>
 8020a54:	f010 0003 	ands.w	r0, r0, #3
 8020a58:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020a5c:	bf18      	it	ne
 8020a5e:	2001      	movne	r0, #1
 8020a60:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 8020a62:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020a66:	1a1b      	subs	r3, r3, r0
 8020a68:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 8020a6a:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 8020a6c:	bfb8      	it	lt
 8020a6e:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8020a70:	8998      	ldrh	r0, [r3, #12]
 8020a72:	f7f9 fd29 	bl	801a4c8 <lwip_htons>
 8020a76:	f010 0003 	ands.w	r0, r0, #3
 8020a7a:	bf18      	it	ne
 8020a7c:	2001      	movne	r0, #1
 8020a7e:	eb10 0f09 	cmn.w	r0, r9
 8020a82:	d046      	beq.n	8020b12 <tcp_output+0x26e>
      seg->next = NULL;
 8020a84:	2300      	movs	r3, #0
 8020a86:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8020a88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020a8a:	2b00      	cmp	r3, #0
 8020a8c:	d045      	beq.n	8020b1a <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8020a8e:	68eb      	ldr	r3, [r5, #12]
 8020a90:	6858      	ldr	r0, [r3, #4]
 8020a92:	f7f9 fd1d 	bl	801a4d0 <lwip_htonl>
 8020a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020a9a:	4681      	mov	r9, r0
 8020a9c:	6858      	ldr	r0, [r3, #4]
 8020a9e:	f7f9 fd17 	bl	801a4d0 <lwip_htonl>
 8020aa2:	eba9 0000 	sub.w	r0, r9, r0
 8020aa6:	2800      	cmp	r0, #0
 8020aa8:	f2c0 80a2 	blt.w	8020bf0 <tcp_output+0x34c>
          useg->next = seg;
 8020aac:	f8c8 5000 	str.w	r5, [r8]
 8020ab0:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 8020ab2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 8020ab4:	2d00      	cmp	r5, #0
 8020ab6:	f000 80c4 	beq.w	8020c42 <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8020aba:	68eb      	ldr	r3, [r5, #12]
 8020abc:	6858      	ldr	r0, [r3, #4]
 8020abe:	f7f9 fd07 	bl	801a4d0 <lwip_htonl>
 8020ac2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020ac4:	1ac0      	subs	r0, r0, r3
 8020ac6:	892b      	ldrh	r3, [r5, #8]
 8020ac8:	4418      	add	r0, r3
  while (seg != NULL &&
 8020aca:	42b8      	cmp	r0, r7
 8020acc:	f200 80bb 	bhi.w	8020c46 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 8020ad0:	68eb      	ldr	r3, [r5, #12]
 8020ad2:	8998      	ldrh	r0, [r3, #12]
 8020ad4:	f7f9 fcf8 	bl	801a4c8 <lwip_htons>
 8020ad8:	0742      	lsls	r2, r0, #29
 8020ada:	d412      	bmi.n	8020b02 <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020adc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020ade:	b14b      	cbz	r3, 8020af4 <tcp_output+0x250>
 8020ae0:	8b63      	ldrh	r3, [r4, #26]
 8020ae2:	f013 0f44 	tst.w	r3, #68	; 0x44
 8020ae6:	461a      	mov	r2, r3
 8020ae8:	d104      	bne.n	8020af4 <tcp_output+0x250>
 8020aea:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8020aec:	2900      	cmp	r1, #0
 8020aee:	d038      	beq.n	8020b62 <tcp_output+0x2be>
 8020af0:	6808      	ldr	r0, [r1, #0]
 8020af2:	b388      	cbz	r0, 8020b58 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 8020af4:	7d23      	ldrb	r3, [r4, #20]
 8020af6:	2b02      	cmp	r3, #2
 8020af8:	f47f af27 	bne.w	802094a <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020afc:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8020b00:	e72f      	b.n	8020962 <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 8020b02:	4b22      	ldr	r3, [pc, #136]	; (8020b8c <tcp_output+0x2e8>)
 8020b04:	f240 5236 	movw	r2, #1334	; 0x536
 8020b08:	4923      	ldr	r1, [pc, #140]	; (8020b98 <tcp_output+0x2f4>)
 8020b0a:	4822      	ldr	r0, [pc, #136]	; (8020b94 <tcp_output+0x2f0>)
 8020b0c:	f005 fde2 	bl	80266d4 <iprintf>
 8020b10:	e7e4      	b.n	8020adc <tcp_output+0x238>
      tcp_seg_free(seg);
 8020b12:	4628      	mov	r0, r5
 8020b14:	f7fc fa90 	bl	801d038 <tcp_seg_free>
 8020b18:	e7cb      	b.n	8020ab2 <tcp_output+0x20e>
        pcb->unacked = seg;
 8020b1a:	46a8      	mov	r8, r5
 8020b1c:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 8020b1e:	e7c8      	b.n	8020ab2 <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 8020b20:	4b1e      	ldr	r3, [pc, #120]	; (8020b9c <tcp_output+0x2f8>)
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020b26:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8020b2a:	f7f9 fcd1 	bl	801a4d0 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020b2e:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020b32:	63a0      	str	r0, [r4, #56]	; 0x38
 8020b34:	e73b      	b.n	80209ae <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8020b36:	4632      	mov	r2, r6
 8020b38:	4651      	mov	r1, sl
 8020b3a:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 8020b3e:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8020b42:	f7fd fa75 	bl	801e030 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8020b46:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8020b4a:	f7f9 fcc1 	bl	801a4d0 <lwip_htonl>
 8020b4e:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020b52:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8020b56:	e720      	b.n	802099a <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020b58:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8020b5c:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8020b5e:	4584      	cmp	ip, r0
 8020b60:	d2c8      	bcs.n	8020af4 <tcp_output+0x250>
 8020b62:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 8020b66:	2800      	cmp	r0, #0
 8020b68:	d0c4      	beq.n	8020af4 <tcp_output+0x250>
 8020b6a:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 8020b6e:	2808      	cmp	r0, #8
 8020b70:	d8c0      	bhi.n	8020af4 <tcp_output+0x250>
 8020b72:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8020b76:	d1bd      	bne.n	8020af4 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 8020b78:	2900      	cmp	r1, #0
 8020b7a:	f47f aed2 	bne.w	8020922 <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 8020b7e:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020b80:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 8020b82:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 8020b86:	e6cc      	b.n	8020922 <tcp_output+0x7e>
 8020b88:	2002e4e0 	.word	0x2002e4e0
 8020b8c:	08046120 	.word	0x08046120
 8020b90:	0804677c 	.word	0x0804677c
 8020b94:	0802b3cc 	.word	0x0802b3cc
 8020b98:	08046764 	.word	0x08046764
 8020b9c:	2002e4ac 	.word	0x2002e4ac
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8020ba0:	4b30      	ldr	r3, [pc, #192]	; (8020c64 <tcp_output+0x3c0>)
 8020ba2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8020ba6:	4930      	ldr	r1, [pc, #192]	; (8020c68 <tcp_output+0x3c4>)
 8020ba8:	4830      	ldr	r0, [pc, #192]	; (8020c6c <tcp_output+0x3c8>)
 8020baa:	f005 fd93 	bl	80266d4 <iprintf>
  if (tcp_input_pcb == pcb) {
 8020bae:	4b30      	ldr	r3, [pc, #192]	; (8020c70 <tcp_output+0x3cc>)
 8020bb0:	681b      	ldr	r3, [r3, #0]
 8020bb2:	42a3      	cmp	r3, r4
 8020bb4:	f47f ae86 	bne.w	80208c4 <tcp_output+0x20>
    return ERR_OK;
 8020bb8:	2000      	movs	r0, #0
}
 8020bba:	b005      	add	sp, #20
 8020bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 8020bc0:	4620      	mov	r0, r4
}
 8020bc2:	b005      	add	sp, #20
 8020bc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 8020bc8:	f7ff be3a 	b.w	8020840 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020bcc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020bce:	2b00      	cmp	r3, #0
 8020bd0:	f47f aea3 	bne.w	802091a <tcp_output+0x76>
 8020bd4:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	f47f ae9e 	bne.w	802091a <tcp_output+0x76>
      pcb->persist_cnt = 0;
 8020bde:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 8020be2:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 8020be6:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 8020bea:	e696      	b.n	802091a <tcp_output+0x76>
 8020bec:	4698      	mov	r8, r3
 8020bee:	e6aa      	b.n	8020946 <tcp_output+0xa2>
          while (*cur_seg &&
 8020bf0:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8020bf2:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 8020bf6:	b92b      	cbnz	r3, 8020c04 <tcp_output+0x360>
 8020bf8:	e013      	b.n	8020c22 <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 8020bfa:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 8020bfe:	f8db 3000 	ldr.w	r3, [fp]
 8020c02:	b173      	cbz	r3, 8020c22 <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020c04:	68db      	ldr	r3, [r3, #12]
 8020c06:	6858      	ldr	r0, [r3, #4]
 8020c08:	f7f9 fc62 	bl	801a4d0 <lwip_htonl>
 8020c0c:	68eb      	ldr	r3, [r5, #12]
 8020c0e:	4681      	mov	r9, r0
 8020c10:	6858      	ldr	r0, [r3, #4]
 8020c12:	f7f9 fc5d 	bl	801a4d0 <lwip_htonl>
 8020c16:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 8020c1a:	2800      	cmp	r0, #0
 8020c1c:	dbed      	blt.n	8020bfa <tcp_output+0x356>
          seg->next = (*cur_seg);
 8020c1e:	f8db 3000 	ldr.w	r3, [fp]
 8020c22:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 8020c24:	f8cb 5000 	str.w	r5, [fp]
 8020c28:	e743      	b.n	8020ab2 <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020c2a:	4b0e      	ldr	r3, [pc, #56]	; (8020c64 <tcp_output+0x3c0>)
 8020c2c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8020c30:	4910      	ldr	r1, [pc, #64]	; (8020c74 <tcp_output+0x3d0>)
 8020c32:	480e      	ldr	r0, [pc, #56]	; (8020c6c <tcp_output+0x3c8>)
 8020c34:	f005 fd4e 	bl	80266d4 <iprintf>
 8020c38:	e63b      	b.n	80208b2 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 8020c3a:	f7fb f95b 	bl	801bef4 <netif_get_by_index>
 8020c3e:	4682      	mov	sl, r0
 8020c40:	e650      	b.n	80208e4 <tcp_output+0x40>
 8020c42:	8b63      	ldrh	r3, [r4, #26]
 8020c44:	e79b      	b.n	8020b7e <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020c46:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 8020c48:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020c4a:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 8020c4c:	2900      	cmp	r1, #0
 8020c4e:	f47f ae68 	bne.w	8020922 <tcp_output+0x7e>
 8020c52:	e794      	b.n	8020b7e <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020c54:	8b63      	ldrh	r3, [r4, #26]
 8020c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c5a:	8363      	strh	r3, [r4, #26]
      return err;
 8020c5c:	e665      	b.n	802092a <tcp_output+0x86>
    return ERR_RTE;
 8020c5e:	f06f 0003 	mvn.w	r0, #3
 8020c62:	e662      	b.n	802092a <tcp_output+0x86>
 8020c64:	08046120 	.word	0x08046120
 8020c68:	0804673c 	.word	0x0804673c
 8020c6c:	0802b3cc 	.word	0x0802b3cc
 8020c70:	2002e4e0 	.word	0x2002e4e0
 8020c74:	08046724 	.word	0x08046724

08020c78 <tcp_rexmit_rto_commit>:
{
 8020c78:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020c7a:	4604      	mov	r4, r0
 8020c7c:	b158      	cbz	r0, 8020c96 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 8020c7e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020c82:	2bff      	cmp	r3, #255	; 0xff
 8020c84:	d002      	beq.n	8020c8c <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 8020c86:	3301      	adds	r3, #1
 8020c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8020c8c:	4620      	mov	r0, r4
}
 8020c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8020c92:	f7ff be07 	b.w	80208a4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020c96:	4b04      	ldr	r3, [pc, #16]	; (8020ca8 <tcp_rexmit_rto_commit+0x30>)
 8020c98:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020c9c:	4903      	ldr	r1, [pc, #12]	; (8020cac <tcp_rexmit_rto_commit+0x34>)
 8020c9e:	4804      	ldr	r0, [pc, #16]	; (8020cb0 <tcp_rexmit_rto_commit+0x38>)
 8020ca0:	f005 fd18 	bl	80266d4 <iprintf>
 8020ca4:	e7eb      	b.n	8020c7e <tcp_rexmit_rto_commit+0x6>
 8020ca6:	bf00      	nop
 8020ca8:	08046120 	.word	0x08046120
 8020cac:	08046790 	.word	0x08046790
 8020cb0:	0802b3cc 	.word	0x0802b3cc

08020cb4 <tcp_rexmit_rto>:
{
 8020cb4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020cb6:	4604      	mov	r4, r0
 8020cb8:	b118      	cbz	r0, 8020cc2 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020cba:	f7ff fcb5 	bl	8020628 <tcp_rexmit_rto_prepare>
 8020cbe:	b198      	cbz	r0, 8020ce8 <tcp_rexmit_rto+0x34>
}
 8020cc0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020cc2:	4b0f      	ldr	r3, [pc, #60]	; (8020d00 <tcp_rexmit_rto+0x4c>)
 8020cc4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8020cc8:	490e      	ldr	r1, [pc, #56]	; (8020d04 <tcp_rexmit_rto+0x50>)
 8020cca:	480f      	ldr	r0, [pc, #60]	; (8020d08 <tcp_rexmit_rto+0x54>)
 8020ccc:	f005 fd02 	bl	80266d4 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020cd0:	4620      	mov	r0, r4
 8020cd2:	f7ff fca9 	bl	8020628 <tcp_rexmit_rto_prepare>
 8020cd6:	2800      	cmp	r0, #0
 8020cd8:	d1f2      	bne.n	8020cc0 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020cda:	4b09      	ldr	r3, [pc, #36]	; (8020d00 <tcp_rexmit_rto+0x4c>)
 8020cdc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020ce0:	490a      	ldr	r1, [pc, #40]	; (8020d0c <tcp_rexmit_rto+0x58>)
 8020ce2:	4809      	ldr	r0, [pc, #36]	; (8020d08 <tcp_rexmit_rto+0x54>)
 8020ce4:	f005 fcf6 	bl	80266d4 <iprintf>
  if (pcb->nrtx < 0xFF) {
 8020ce8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020cec:	2bff      	cmp	r3, #255	; 0xff
 8020cee:	d002      	beq.n	8020cf6 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 8020cf0:	3301      	adds	r3, #1
 8020cf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8020cf6:	4620      	mov	r0, r4
}
 8020cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8020cfc:	f7ff bdd2 	b.w	80208a4 <tcp_output>
 8020d00:	08046120 	.word	0x08046120
 8020d04:	080467b4 	.word	0x080467b4
 8020d08:	0802b3cc 	.word	0x0802b3cc
 8020d0c:	08046790 	.word	0x08046790

08020d10 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8020d10:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8020d12:	4604      	mov	r4, r0
 8020d14:	b188      	cbz	r0, 8020d3a <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8020d16:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8020d18:	3801      	subs	r0, #1
 8020d1a:	f7f9 fbd9 	bl	801a4d0 <lwip_htonl>
 8020d1e:	2100      	movs	r1, #0
 8020d20:	4602      	mov	r2, r0
 8020d22:	4620      	mov	r0, r4
 8020d24:	f7fe ff1c 	bl	801fb60 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020d28:	4601      	mov	r1, r0
 8020d2a:	b170      	cbz	r0, 8020d4a <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020d2c:	1d23      	adds	r3, r4, #4
 8020d2e:	4622      	mov	r2, r4
 8020d30:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8020d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020d36:	f7fe bf3b 	b.w	801fbb0 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8020d3a:	4b05      	ldr	r3, [pc, #20]	; (8020d50 <tcp_keepalive+0x40>)
 8020d3c:	f640 0224 	movw	r2, #2084	; 0x824
 8020d40:	4904      	ldr	r1, [pc, #16]	; (8020d54 <tcp_keepalive+0x44>)
 8020d42:	4805      	ldr	r0, [pc, #20]	; (8020d58 <tcp_keepalive+0x48>)
 8020d44:	f005 fcc6 	bl	80266d4 <iprintf>
 8020d48:	e7e5      	b.n	8020d16 <tcp_keepalive+0x6>
}
 8020d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8020d4e:	bd10      	pop	{r4, pc}
 8020d50:	08046120 	.word	0x08046120
 8020d54:	080467d0 	.word	0x080467d0
 8020d58:	0802b3cc 	.word	0x0802b3cc

08020d5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8020d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8020d60:	4604      	mov	r4, r0
 8020d62:	2800      	cmp	r0, #0
 8020d64:	d051      	beq.n	8020e0a <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8020d66:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8020d68:	2d00      	cmp	r5, #0
 8020d6a:	d04b      	beq.n	8020e04 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8020d6c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8020d70:	2bff      	cmp	r3, #255	; 0xff
 8020d72:	d002      	beq.n	8020d7a <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 8020d74:	3301      	adds	r3, #1
 8020d76:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8020d7a:	68eb      	ldr	r3, [r5, #12]
 8020d7c:	8998      	ldrh	r0, [r3, #12]
 8020d7e:	f7f9 fba3 	bl	801a4c8 <lwip_htons>
 8020d82:	07c3      	lsls	r3, r0, #31
 8020d84:	d527      	bpl.n	8020dd6 <tcp_zero_window_probe+0x7a>
 8020d86:	8929      	ldrh	r1, [r5, #8]
 8020d88:	bb29      	cbnz	r1, 8020dd6 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020d8a:	68eb      	ldr	r3, [r5, #12]
 8020d8c:	4620      	mov	r0, r4
 8020d8e:	685a      	ldr	r2, [r3, #4]
 8020d90:	f7fe fee6 	bl	801fb60 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020d94:	4606      	mov	r6, r0
 8020d96:	b388      	cbz	r0, 8020dfc <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8020d98:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8020d9c:	2011      	movs	r0, #17
 8020d9e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8020da2:	f7f9 fb91 	bl	801a4c8 <lwip_htons>
 8020da6:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8020daa:	4338      	orrs	r0, r7
 8020dac:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020db0:	68eb      	ldr	r3, [r5, #12]
 8020db2:	6858      	ldr	r0, [r3, #4]
 8020db4:	f7f9 fb8c 	bl	801a4d0 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020db8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020dba:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020dbc:	4622      	mov	r2, r4
 8020dbe:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020dc0:	1a1b      	subs	r3, r3, r0
 8020dc2:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020dc4:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 8020dc8:	bfb8      	it	lt
 8020dca:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020dcc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8020dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020dd2:	f7fe beed 	b.w	801fbb0 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020dd6:	68eb      	ldr	r3, [r5, #12]
 8020dd8:	2101      	movs	r1, #1
 8020dda:	4620      	mov	r0, r4
 8020ddc:	685a      	ldr	r2, [r3, #4]
 8020dde:	f7fe febf 	bl	801fb60 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020de2:	4606      	mov	r6, r0
 8020de4:	b150      	cbz	r0, 8020dfc <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8020de6:	6868      	ldr	r0, [r5, #4]
 8020de8:	892a      	ldrh	r2, [r5, #8]
 8020dea:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 8020dec:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8020dee:	1a9b      	subs	r3, r3, r2
 8020df0:	2201      	movs	r2, #1
 8020df2:	3114      	adds	r1, #20
 8020df4:	b29b      	uxth	r3, r3
 8020df6:	f7fb fc47 	bl	801c688 <pbuf_copy_partial>
 8020dfa:	e7d9      	b.n	8020db0 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 8020dfc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8020e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 8020e04:	4628      	mov	r0, r5
}
 8020e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8020e0a:	4b04      	ldr	r3, [pc, #16]	; (8020e1c <tcp_zero_window_probe+0xc0>)
 8020e0c:	f640 024f 	movw	r2, #2127	; 0x84f
 8020e10:	4903      	ldr	r1, [pc, #12]	; (8020e20 <tcp_zero_window_probe+0xc4>)
 8020e12:	4804      	ldr	r0, [pc, #16]	; (8020e24 <tcp_zero_window_probe+0xc8>)
 8020e14:	f005 fc5e 	bl	80266d4 <iprintf>
 8020e18:	e7a5      	b.n	8020d66 <tcp_zero_window_probe+0xa>
 8020e1a:	bf00      	nop
 8020e1c:	08046120 	.word	0x08046120
 8020e20:	080467ec 	.word	0x080467ec
 8020e24:	0802b3cc 	.word	0x0802b3cc

08020e28 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8020e28:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020e2a:	22bc      	movs	r2, #188	; 0xbc
{
 8020e2c:	b570      	push	{r4, r5, r6, lr}
 8020e2e:	460e      	mov	r6, r1
 8020e30:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020e32:	4910      	ldr	r1, [pc, #64]	; (8020e74 <sys_timeout_abs+0x4c>)
 8020e34:	200c      	movs	r0, #12
{
 8020e36:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020e38:	f7fa fe34 	bl	801baa4 <memp_malloc_fn>
  if (timeout == NULL) {
 8020e3c:	b190      	cbz	r0, 8020e64 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8020e3e:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8020e40:	490d      	ldr	r1, [pc, #52]	; (8020e78 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 8020e42:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 8020e44:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 8020e46:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 8020e4a:	680b      	ldr	r3, [r1, #0]
 8020e4c:	b91b      	cbnz	r3, 8020e56 <sys_timeout_abs+0x2e>
 8020e4e:	e007      	b.n	8020e60 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8020e50:	4619      	mov	r1, r3
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	b11b      	cbz	r3, 8020e5e <sys_timeout_abs+0x36>
 8020e56:	685a      	ldr	r2, [r3, #4]
 8020e58:	1aa2      	subs	r2, r4, r2
 8020e5a:	2a00      	cmp	r2, #0
 8020e5c:	daf8      	bge.n	8020e50 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 8020e5e:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8020e60:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 8020e62:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020e64:	4b03      	ldr	r3, [pc, #12]	; (8020e74 <sys_timeout_abs+0x4c>)
 8020e66:	22be      	movs	r2, #190	; 0xbe
 8020e68:	4904      	ldr	r1, [pc, #16]	; (8020e7c <sys_timeout_abs+0x54>)
 8020e6a:	4805      	ldr	r0, [pc, #20]	; (8020e80 <sys_timeout_abs+0x58>)
}
 8020e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020e70:	f005 bc30 	b.w	80266d4 <iprintf>
 8020e74:	08046810 	.word	0x08046810
 8020e78:	2002e4fc 	.word	0x2002e4fc
 8020e7c:	08046844 	.word	0x08046844
 8020e80:	0802b3cc 	.word	0x0802b3cc

08020e84 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8020e84:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8020e86:	6843      	ldr	r3, [r0, #4]
{
 8020e88:	4604      	mov	r4, r0
  cyclic->handler();
 8020e8a:	4798      	blx	r3

  now = sys_now();
 8020e8c:	f7f4 fc8e 	bl	80157ac <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020e90:	4b09      	ldr	r3, [pc, #36]	; (8020eb8 <lwip_cyclic_timer+0x34>)
 8020e92:	6825      	ldr	r5, [r4, #0]
 8020e94:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020e96:	4909      	ldr	r1, [pc, #36]	; (8020ebc <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020e98:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020e9a:	1a1a      	subs	r2, r3, r0
 8020e9c:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020e9e:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020ea0:	da04      	bge.n	8020eac <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020ea2:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8020ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020ea8:	f7ff bfbe 	b.w	8020e28 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020eac:	4618      	mov	r0, r3
}
 8020eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020eb2:	f7ff bfb9 	b.w	8020e28 <sys_timeout_abs>
 8020eb6:	bf00      	nop
 8020eb8:	2002e4f8 	.word	0x2002e4f8
 8020ebc:	08020e85 	.word	0x08020e85

08020ec0 <tcpip_tcp_timer>:
{
 8020ec0:	b508      	push	{r3, lr}
  tcp_tmr();
 8020ec2:	f7fd f887 	bl	801dfd4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020ec6:	4b09      	ldr	r3, [pc, #36]	; (8020eec <tcpip_tcp_timer+0x2c>)
 8020ec8:	681b      	ldr	r3, [r3, #0]
 8020eca:	b143      	cbz	r3, 8020ede <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020ecc:	f7f4 fc6e 	bl	80157ac <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020ed0:	2200      	movs	r2, #0
 8020ed2:	4907      	ldr	r1, [pc, #28]	; (8020ef0 <tcpip_tcp_timer+0x30>)
 8020ed4:	30fa      	adds	r0, #250	; 0xfa
}
 8020ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020eda:	f7ff bfa5 	b.w	8020e28 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020ede:	4b05      	ldr	r3, [pc, #20]	; (8020ef4 <tcpip_tcp_timer+0x34>)
 8020ee0:	681b      	ldr	r3, [r3, #0]
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d1f2      	bne.n	8020ecc <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8020ee6:	4a04      	ldr	r2, [pc, #16]	; (8020ef8 <tcpip_tcp_timer+0x38>)
 8020ee8:	6013      	str	r3, [r2, #0]
}
 8020eea:	bd08      	pop	{r3, pc}
 8020eec:	2002e49c 	.word	0x2002e49c
 8020ef0:	08020ec1 	.word	0x08020ec1
 8020ef4:	2002e4b4 	.word	0x2002e4b4
 8020ef8:	2002e500 	.word	0x2002e500

08020efc <tcp_timer_needed>:
{
 8020efc:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020efe:	4b0b      	ldr	r3, [pc, #44]	; (8020f2c <tcp_timer_needed+0x30>)
 8020f00:	681a      	ldr	r2, [r3, #0]
 8020f02:	b98a      	cbnz	r2, 8020f28 <tcp_timer_needed+0x2c>
 8020f04:	4a0a      	ldr	r2, [pc, #40]	; (8020f30 <tcp_timer_needed+0x34>)
 8020f06:	6812      	ldr	r2, [r2, #0]
 8020f08:	b152      	cbz	r2, 8020f20 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 8020f0a:	2201      	movs	r2, #1
 8020f0c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020f0e:	f7f4 fc4d 	bl	80157ac <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f12:	2200      	movs	r2, #0
 8020f14:	4907      	ldr	r1, [pc, #28]	; (8020f34 <tcp_timer_needed+0x38>)
 8020f16:	30fa      	adds	r0, #250	; 0xfa
}
 8020f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f1c:	f7ff bf84 	b.w	8020e28 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020f20:	4a05      	ldr	r2, [pc, #20]	; (8020f38 <tcp_timer_needed+0x3c>)
 8020f22:	6812      	ldr	r2, [r2, #0]
 8020f24:	2a00      	cmp	r2, #0
 8020f26:	d1f0      	bne.n	8020f0a <tcp_timer_needed+0xe>
}
 8020f28:	bd08      	pop	{r3, pc}
 8020f2a:	bf00      	nop
 8020f2c:	2002e500 	.word	0x2002e500
 8020f30:	2002e49c 	.word	0x2002e49c
 8020f34:	08020ec1 	.word	0x08020ec1
 8020f38:	2002e4b4 	.word	0x2002e4b4

08020f3c <sys_timeouts_init>:
{
 8020f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f40:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8020f44:	4c11      	ldr	r4, [pc, #68]	; (8020f8c <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020f46:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8020f98 <sys_timeouts_init+0x5c>
 8020f4a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8020f4e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8020f9c <sys_timeouts_init+0x60>
 8020f52:	f104 0620 	add.w	r6, r4, #32
 8020f56:	4f0e      	ldr	r7, [pc, #56]	; (8020f90 <sys_timeouts_init+0x54>)
 8020f58:	d20d      	bcs.n	8020f76 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020f5a:	f7f4 fc27 	bl	80157ac <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f5e:	4622      	mov	r2, r4
 8020f60:	490c      	ldr	r1, [pc, #48]	; (8020f94 <sys_timeouts_init+0x58>)
 8020f62:	4428      	add	r0, r5
 8020f64:	f7ff ff60 	bl	8020e28 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020f68:	42b4      	cmp	r4, r6
 8020f6a:	d00c      	beq.n	8020f86 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020f6c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020f70:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8020f74:	d3f1      	bcc.n	8020f5a <sys_timeouts_init+0x1e>
 8020f76:	464b      	mov	r3, r9
 8020f78:	4641      	mov	r1, r8
 8020f7a:	f240 1229 	movw	r2, #297	; 0x129
 8020f7e:	4638      	mov	r0, r7
 8020f80:	f005 fba8 	bl	80266d4 <iprintf>
 8020f84:	e7e9      	b.n	8020f5a <sys_timeouts_init+0x1e>
}
 8020f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f8a:	bf00      	nop
 8020f8c:	080468c4 	.word	0x080468c4
 8020f90:	0802b3cc 	.word	0x0802b3cc
 8020f94:	08020e85 	.word	0x08020e85
 8020f98:	08046810 	.word	0x08046810
 8020f9c:	08046884 	.word	0x08046884

08020fa0 <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020fa0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8020fa4:	b570      	push	{r4, r5, r6, lr}
 8020fa6:	4604      	mov	r4, r0
 8020fa8:	460d      	mov	r5, r1
 8020faa:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020fac:	d208      	bcs.n	8020fc0 <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020fae:	f7f4 fbfd 	bl	80157ac <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020fb2:	4632      	mov	r2, r6
 8020fb4:	4629      	mov	r1, r5
 8020fb6:	4420      	add	r0, r4
#endif
}
 8020fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020fbc:	f7ff bf34 	b.w	8020e28 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020fc0:	4b03      	ldr	r3, [pc, #12]	; (8020fd0 <sys_timeout+0x30>)
 8020fc2:	f240 1229 	movw	r2, #297	; 0x129
 8020fc6:	4903      	ldr	r1, [pc, #12]	; (8020fd4 <sys_timeout+0x34>)
 8020fc8:	4803      	ldr	r0, [pc, #12]	; (8020fd8 <sys_timeout+0x38>)
 8020fca:	f005 fb83 	bl	80266d4 <iprintf>
 8020fce:	e7ee      	b.n	8020fae <sys_timeout+0xe>
 8020fd0:	08046810 	.word	0x08046810
 8020fd4:	08046884 	.word	0x08046884
 8020fd8:	0802b3cc 	.word	0x0802b3cc

08020fdc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8020fdc:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8020fde:	4d0d      	ldr	r5, [pc, #52]	; (8021014 <sys_untimeout+0x38>)
 8020fe0:	682b      	ldr	r3, [r5, #0]
 8020fe2:	b19b      	cbz	r3, 802100c <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8020fe4:	2400      	movs	r4, #0
 8020fe6:	e003      	b.n	8020ff0 <sys_untimeout+0x14>
 8020fe8:	681a      	ldr	r2, [r3, #0]
 8020fea:	461c      	mov	r4, r3
 8020fec:	4613      	mov	r3, r2
 8020fee:	b16a      	cbz	r2, 802100c <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 8020ff0:	689a      	ldr	r2, [r3, #8]
 8020ff2:	4282      	cmp	r2, r0
 8020ff4:	d1f8      	bne.n	8020fe8 <sys_untimeout+0xc>
 8020ff6:	68da      	ldr	r2, [r3, #12]
 8020ff8:	428a      	cmp	r2, r1
 8020ffa:	d1f5      	bne.n	8020fe8 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 8020ffc:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 8020ffe:	b13c      	cbz	r4, 8021010 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 8021000:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8021002:	4619      	mov	r1, r3
 8021004:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 8021006:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 8021008:	f7fa bd82 	b.w	801bb10 <memp_free>
}
 802100c:	bc30      	pop	{r4, r5}
 802100e:	4770      	bx	lr
        next_timeout = t->next;
 8021010:	602a      	str	r2, [r5, #0]
 8021012:	e7f6      	b.n	8021002 <sys_untimeout+0x26>
 8021014:	2002e4fc 	.word	0x2002e4fc

08021018 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8021018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 802101c:	f7f4 fbc6 	bl	80157ac <sys_now>
 8021020:	4c0f      	ldr	r4, [pc, #60]	; (8021060 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 8021022:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8021064 <sys_check_timeouts+0x4c>
  now = sys_now();
 8021026:	4607      	mov	r7, r0
 8021028:	e00f      	b.n	802104a <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 802102a:	685a      	ldr	r2, [r3, #4]
 802102c:	eba7 0c02 	sub.w	ip, r7, r2
 8021030:	f1bc 0f00 	cmp.w	ip, #0
 8021034:	db0e      	blt.n	8021054 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 8021036:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 8021038:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 802103a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 802103e:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 8021042:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8021044:	f7fa fd64 	bl	801bb10 <memp_free>
    if (handler != NULL) {
 8021048:	b935      	cbnz	r5, 8021058 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 802104a:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 802104c:	200c      	movs	r0, #12
 802104e:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 8021050:	2b00      	cmp	r3, #0
 8021052:	d1ea      	bne.n	802102a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8021054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 8021058:	4648      	mov	r0, r9
 802105a:	47a8      	blx	r5
 802105c:	e7f5      	b.n	802104a <sys_check_timeouts+0x32>
 802105e:	bf00      	nop
 8021060:	2002e4fc 	.word	0x2002e4fc
 8021064:	2002e4f8 	.word	0x2002e4f8

08021068 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8021068:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 802106a:	4c07      	ldr	r4, [pc, #28]	; (8021088 <sys_timeouts_sleeptime+0x20>)
 802106c:	6823      	ldr	r3, [r4, #0]
 802106e:	b13b      	cbz	r3, 8021080 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8021070:	f7f4 fb9c 	bl	80157ac <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8021074:	6823      	ldr	r3, [r4, #0]
 8021076:	685b      	ldr	r3, [r3, #4]
    return 0;
 8021078:	1a18      	subs	r0, r3, r0
 802107a:	bf48      	it	mi
 802107c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 802107e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8021080:	f04f 30ff 	mov.w	r0, #4294967295
}
 8021084:	bd10      	pop	{r4, pc}
 8021086:	bf00      	nop
 8021088:	2002e4fc 	.word	0x2002e4fc

0802108c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 802108c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 802108e:	f005 fbc5 	bl	802681c <rand>
 8021092:	4b02      	ldr	r3, [pc, #8]	; (802109c <udp_init+0x10>)
 8021094:	4a02      	ldr	r2, [pc, #8]	; (80210a0 <udp_init+0x14>)
 8021096:	4303      	orrs	r3, r0
 8021098:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 802109a:	bd08      	pop	{r3, pc}
 802109c:	ffffc000 	.word	0xffffc000
 80210a0:	2000044e 	.word	0x2000044e

080210a4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80210a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80210a8:	4680      	mov	r8, r0
{
 80210aa:	b085      	sub	sp, #20
 80210ac:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80210ae:	2800      	cmp	r0, #0
 80210b0:	f000 80af 	beq.w	8021212 <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80210b4:	2f00      	cmp	r7, #0
 80210b6:	f000 80b5 	beq.w	8021224 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80210ba:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80210be:	2b07      	cmp	r3, #7
 80210c0:	f240 8091 	bls.w	80211e6 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80210c4:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 802129c <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 80210c8:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80210cc:	f8d9 1000 	ldr.w	r1, [r9]
 80210d0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80210d4:	f003 f80c 	bl	80240f0 <ip4_addr_isbroadcast_u32>
 80210d8:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80210da:	8820      	ldrh	r0, [r4, #0]
 80210dc:	f7f9 f9f4 	bl	801a4c8 <lwip_htons>
 80210e0:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 80210e2:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 80210e4:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 80210e6:	f7f9 f9ef 	bl	801a4c8 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80210ea:	4b64      	ldr	r3, [pc, #400]	; (802127c <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 80210ec:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80210ee:	681c      	ldr	r4, [r3, #0]
 80210f0:	2c00      	cmp	r4, #0
 80210f2:	d064      	beq.n	80211be <udp_input+0x11a>
  uncon_pcb = NULL;
 80210f4:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80210f8:	f8df c190 	ldr.w	ip, [pc, #400]	; 802128c <udp_input+0x1e8>
 80210fc:	4960      	ldr	r1, [pc, #384]	; (8021280 <udp_input+0x1dc>)
  prev = NULL;
 80210fe:	465e      	mov	r6, fp
 8021100:	e004      	b.n	802110c <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021102:	68e2      	ldr	r2, [r4, #12]
 8021104:	4626      	mov	r6, r4
 8021106:	2a00      	cmp	r2, #0
 8021108:	d056      	beq.n	80211b8 <udp_input+0x114>
 802110a:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 802110c:	8a62      	ldrh	r2, [r4, #18]
 802110e:	42aa      	cmp	r2, r5
 8021110:	d1f7      	bne.n	8021102 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021112:	2f00      	cmp	r7, #0
 8021114:	d06d      	beq.n	80211f2 <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021116:	7a20      	ldrb	r0, [r4, #8]
 8021118:	b138      	cbz	r0, 802112a <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802111a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 802111e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8021122:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021124:	b2d2      	uxtb	r2, r2
 8021126:	4290      	cmp	r0, r2
 8021128:	d1eb      	bne.n	8021102 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802112a:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 802112c:	f1ba 0f00 	cmp.w	sl, #0
 8021130:	d038      	beq.n	80211a4 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021132:	b13a      	cbz	r2, 8021144 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8021134:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021138:	1c43      	adds	r3, r0, #1
 802113a:	d003      	beq.n	8021144 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 802113c:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802113e:	68bb      	ldr	r3, [r7, #8]
 8021140:	4218      	tst	r0, r3
 8021142:	d1de      	bne.n	8021102 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8021144:	7c20      	ldrb	r0, [r4, #16]
 8021146:	0743      	lsls	r3, r0, #29
 8021148:	d409      	bmi.n	802115e <udp_input+0xba>
        if (uncon_pcb == NULL) {
 802114a:	f1bb 0f00 	cmp.w	fp, #0
 802114e:	d059      	beq.n	8021204 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8021150:	f1ba 0f00 	cmp.w	sl, #0
 8021154:	d003      	beq.n	802115e <udp_input+0xba>
 8021156:	f8d9 0014 	ldr.w	r0, [r9, #20]
 802115a:	3001      	adds	r0, #1
 802115c:	d069      	beq.n	8021232 <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 802115e:	8aa2      	ldrh	r2, [r4, #20]
 8021160:	9803      	ldr	r0, [sp, #12]
 8021162:	4282      	cmp	r2, r0
 8021164:	d1cd      	bne.n	8021102 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8021166:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 8021168:	b11a      	cbz	r2, 8021172 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 802116a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 802116e:	4282      	cmp	r2, r0
 8021170:	d1c7      	bne.n	8021102 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 8021172:	b12e      	cbz	r6, 8021180 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8021174:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 8021176:	4a41      	ldr	r2, [pc, #260]	; (802127c <udp_input+0x1d8>)
          prev->next = pcb->next;
 8021178:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 802117a:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 802117c:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 802117e:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8021180:	2108      	movs	r1, #8
 8021182:	4640      	mov	r0, r8
 8021184:	f7fb f950 	bl	801c428 <pbuf_remove_header>
 8021188:	2800      	cmp	r0, #0
 802118a:	d15b      	bne.n	8021244 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 802118c:	69a5      	ldr	r5, [r4, #24]
 802118e:	b355      	cbz	r5, 80211e6 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8021190:	9b03      	ldr	r3, [sp, #12]
 8021192:	4642      	mov	r2, r8
 8021194:	69e0      	ldr	r0, [r4, #28]
 8021196:	4621      	mov	r1, r4
 8021198:	9300      	str	r3, [sp, #0]
 802119a:	4b3a      	ldr	r3, [pc, #232]	; (8021284 <udp_input+0x1e0>)
 802119c:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802119e:	b005      	add	sp, #20
 80211a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80211a4:	2a00      	cmp	r2, #0
 80211a6:	d0cd      	beq.n	8021144 <udp_input+0xa0>
 80211a8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80211ac:	4282      	cmp	r2, r0
 80211ae:	d0c9      	beq.n	8021144 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80211b0:	68e2      	ldr	r2, [r4, #12]
 80211b2:	4626      	mov	r6, r4
 80211b4:	2a00      	cmp	r2, #0
 80211b6:	d1a8      	bne.n	802110a <udp_input+0x66>
  if (pcb != NULL) {
 80211b8:	f1bb 0f00 	cmp.w	fp, #0
 80211bc:	d15b      	bne.n	8021276 <udp_input+0x1d2>
  if (for_us) {
 80211be:	687a      	ldr	r2, [r7, #4]
 80211c0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80211c4:	429a      	cmp	r2, r3
 80211c6:	d10e      	bne.n	80211e6 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80211c8:	2108      	movs	r1, #8
 80211ca:	4640      	mov	r0, r8
 80211cc:	f7fb f92c 	bl	801c428 <pbuf_remove_header>
 80211d0:	2800      	cmp	r0, #0
 80211d2:	d137      	bne.n	8021244 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80211d4:	f1ba 0f00 	cmp.w	sl, #0
 80211d8:	d105      	bne.n	80211e6 <udp_input+0x142>
 80211da:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80211de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80211e2:	2be0      	cmp	r3, #224	; 0xe0
 80211e4:	d13b      	bne.n	802125e <udp_input+0x1ba>
      pbuf_free(p);
 80211e6:	4640      	mov	r0, r8
}
 80211e8:	b005      	add	sp, #20
 80211ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80211ee:	f7fb b9a7 	b.w	801c540 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80211f2:	4663      	mov	r3, ip
 80211f4:	2288      	movs	r2, #136	; 0x88
 80211f6:	4824      	ldr	r0, [pc, #144]	; (8021288 <udp_input+0x1e4>)
 80211f8:	f005 fa6c 	bl	80266d4 <iprintf>
 80211fc:	f8df c08c 	ldr.w	ip, [pc, #140]	; 802128c <udp_input+0x1e8>
 8021200:	491f      	ldr	r1, [pc, #124]	; (8021280 <udp_input+0x1dc>)
 8021202:	e788      	b.n	8021116 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 8021204:	8aa2      	ldrh	r2, [r4, #20]
 8021206:	46a3      	mov	fp, r4
 8021208:	9803      	ldr	r0, [sp, #12]
 802120a:	4282      	cmp	r2, r0
 802120c:	f47f af79 	bne.w	8021102 <udp_input+0x5e>
 8021210:	e7a9      	b.n	8021166 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8021212:	4b1e      	ldr	r3, [pc, #120]	; (802128c <udp_input+0x1e8>)
 8021214:	22cf      	movs	r2, #207	; 0xcf
 8021216:	491e      	ldr	r1, [pc, #120]	; (8021290 <udp_input+0x1ec>)
 8021218:	481b      	ldr	r0, [pc, #108]	; (8021288 <udp_input+0x1e4>)
 802121a:	f005 fa5b 	bl	80266d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 802121e:	2f00      	cmp	r7, #0
 8021220:	f47f af4b 	bne.w	80210ba <udp_input+0x16>
 8021224:	4b19      	ldr	r3, [pc, #100]	; (802128c <udp_input+0x1e8>)
 8021226:	22d0      	movs	r2, #208	; 0xd0
 8021228:	491a      	ldr	r1, [pc, #104]	; (8021294 <udp_input+0x1f0>)
 802122a:	4817      	ldr	r0, [pc, #92]	; (8021288 <udp_input+0x1e4>)
 802122c:	f005 fa52 	bl	80266d4 <iprintf>
 8021230:	e743      	b.n	80210ba <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8021232:	6878      	ldr	r0, [r7, #4]
 8021234:	f8db 3000 	ldr.w	r3, [fp]
 8021238:	4283      	cmp	r3, r0
 802123a:	d090      	beq.n	802115e <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 802123c:	4290      	cmp	r0, r2
 802123e:	bf08      	it	eq
 8021240:	46a3      	moveq	fp, r4
 8021242:	e78c      	b.n	802115e <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8021244:	4b11      	ldr	r3, [pc, #68]	; (802128c <udp_input+0x1e8>)
 8021246:	f44f 72b8 	mov.w	r2, #368	; 0x170
 802124a:	4913      	ldr	r1, [pc, #76]	; (8021298 <udp_input+0x1f4>)
 802124c:	480e      	ldr	r0, [pc, #56]	; (8021288 <udp_input+0x1e4>)
 802124e:	f005 fa41 	bl	80266d4 <iprintf>
      pbuf_free(p);
 8021252:	4640      	mov	r0, r8
}
 8021254:	b005      	add	sp, #20
 8021256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 802125a:	f7fb b971 	b.w	801c540 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 802125e:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 8021262:	4640      	mov	r0, r8
 8021264:	3108      	adds	r1, #8
 8021266:	b209      	sxth	r1, r1
 8021268:	f7fb f916 	bl	801c498 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 802126c:	2103      	movs	r1, #3
 802126e:	4640      	mov	r0, r8
 8021270:	f002 fd5a 	bl	8023d28 <icmp_dest_unreach>
 8021274:	e7b7      	b.n	80211e6 <udp_input+0x142>
 8021276:	465c      	mov	r4, fp
 8021278:	e782      	b.n	8021180 <udp_input+0xdc>
 802127a:	bf00      	nop
 802127c:	2002e504 	.word	0x2002e504
 8021280:	08046950 	.word	0x08046950
 8021284:	2001f310 	.word	0x2001f310
 8021288:	0802b3cc 	.word	0x0802b3cc
 802128c:	080468ec 	.word	0x080468ec
 8021290:	0804691c 	.word	0x0804691c
 8021294:	08046934 	.word	0x08046934
 8021298:	08046978 	.word	0x08046978
 802129c:	2001f300 	.word	0x2001f300

080212a0 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 80212a0:	4b38      	ldr	r3, [pc, #224]	; (8021384 <udp_bind+0xe4>)
 80212a2:	2900      	cmp	r1, #0
{
 80212a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 80212a8:	bf08      	it	eq
 80212aa:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80212ac:	2800      	cmp	r0, #0
 80212ae:	d05e      	beq.n	802136e <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80212b0:	4f35      	ldr	r7, [pc, #212]	; (8021388 <udp_bind+0xe8>)
 80212b2:	683e      	ldr	r6, [r7, #0]
 80212b4:	b34e      	cbz	r6, 802130a <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80212b6:	42b0      	cmp	r0, r6
 80212b8:	d031      	beq.n	802131e <udp_bind+0x7e>
 80212ba:	4634      	mov	r4, r6
 80212bc:	e001      	b.n	80212c2 <udp_bind+0x22>
 80212be:	42a0      	cmp	r0, r4
 80212c0:	d02d      	beq.n	802131e <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80212c2:	68e4      	ldr	r4, [r4, #12]
 80212c4:	2c00      	cmp	r4, #0
 80212c6:	d1fa      	bne.n	80212be <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80212c8:	b362      	cbz	r2, 8021324 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80212ca:	680d      	ldr	r5, [r1, #0]
 80212cc:	4633      	mov	r3, r6
 80212ce:	e001      	b.n	80212d4 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80212d0:	68db      	ldr	r3, [r3, #12]
 80212d2:	b19b      	cbz	r3, 80212fc <udp_bind+0x5c>
      if (pcb != ipcb) {
 80212d4:	4298      	cmp	r0, r3
 80212d6:	d0fb      	beq.n	80212d0 <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 80212d8:	8a59      	ldrh	r1, [r3, #18]
 80212da:	4291      	cmp	r1, r2
 80212dc:	d1f8      	bne.n	80212d0 <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80212de:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 80212e0:	2900      	cmp	r1, #0
 80212e2:	bf18      	it	ne
 80212e4:	42a9      	cmpne	r1, r5
 80212e6:	d001      	beq.n	80212ec <udp_bind+0x4c>
 80212e8:	2d00      	cmp	r5, #0
 80212ea:	d1f1      	bne.n	80212d0 <udp_bind+0x30>
      return ERR_USE;
 80212ec:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 80212f0:	4618      	mov	r0, r3
 80212f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80212f6:	680d      	ldr	r5, [r1, #0]
 80212f8:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80212fc:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 80212fe:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 8021300:	b13c      	cbz	r4, 8021312 <udp_bind+0x72>
  return ERR_OK;
 8021302:	2300      	movs	r3, #0
}
 8021304:	4618      	mov	r0, r3
 8021306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 802130a:	b372      	cbz	r2, 802136a <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802130c:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 802130e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8021310:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 8021312:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 8021314:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 8021316:	6038      	str	r0, [r7, #0]
}
 8021318:	4618      	mov	r0, r3
 802131a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 802131e:	2401      	movs	r4, #1
  if (port == 0) {
 8021320:	2a00      	cmp	r2, #0
 8021322:	d1d2      	bne.n	80212ca <udp_bind+0x2a>
 8021324:	f8df e070 	ldr.w	lr, [pc, #112]	; 8021398 <udp_bind+0xf8>
  rebind = 0;
 8021328:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 802132c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8021330:	f8be 2000 	ldrh.w	r2, [lr]
 8021334:	4542      	cmp	r2, r8
 8021336:	d015      	beq.n	8021364 <udp_bind+0xc4>
 8021338:	3201      	adds	r2, #1
 802133a:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802133c:	2e00      	cmp	r6, #0
 802133e:	d0da      	beq.n	80212f6 <udp_bind+0x56>
 8021340:	4633      	mov	r3, r6
 8021342:	e002      	b.n	802134a <udp_bind+0xaa>
 8021344:	68db      	ldr	r3, [r3, #12]
 8021346:	2b00      	cmp	r3, #0
 8021348:	d0d5      	beq.n	80212f6 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 802134a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 802134e:	4594      	cmp	ip, r2
 8021350:	d1f8      	bne.n	8021344 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8021352:	3d01      	subs	r5, #1
 8021354:	b2ad      	uxth	r5, r5
 8021356:	2d00      	cmp	r5, #0
 8021358:	d1ec      	bne.n	8021334 <udp_bind+0x94>
      return ERR_USE;
 802135a:	f06f 0307 	mvn.w	r3, #7
 802135e:	f8ae 2000 	strh.w	r2, [lr]
 8021362:	e7cf      	b.n	8021304 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8021364:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8021368:	e7e8      	b.n	802133c <udp_bind+0x9c>
  rebind = 0;
 802136a:	4634      	mov	r4, r6
 802136c:	e7da      	b.n	8021324 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 802136e:	4b07      	ldr	r3, [pc, #28]	; (802138c <udp_bind+0xec>)
 8021370:	f240 32b7 	movw	r2, #951	; 0x3b7
 8021374:	4906      	ldr	r1, [pc, #24]	; (8021390 <udp_bind+0xf0>)
 8021376:	4807      	ldr	r0, [pc, #28]	; (8021394 <udp_bind+0xf4>)
 8021378:	f005 f9ac 	bl	80266d4 <iprintf>
 802137c:	f06f 030f 	mvn.w	r3, #15
 8021380:	e7c0      	b.n	8021304 <udp_bind+0x64>
 8021382:	bf00      	nop
 8021384:	0804726c 	.word	0x0804726c
 8021388:	2002e504 	.word	0x2002e504
 802138c:	080468ec 	.word	0x080468ec
 8021390:	08046994 	.word	0x08046994
 8021394:	0802b3cc 	.word	0x0802b3cc
 8021398:	2000044e 	.word	0x2000044e

0802139c <udp_sendto_if_src>:
{
 802139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213a0:	b085      	sub	sp, #20
 80213a2:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80213a6:	2800      	cmp	r0, #0
 80213a8:	f000 8087 	beq.w	80214ba <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80213ac:	460d      	mov	r5, r1
 80213ae:	2900      	cmp	r1, #0
 80213b0:	d079      	beq.n	80214a6 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80213b2:	4690      	mov	r8, r2
 80213b4:	2a00      	cmp	r2, #0
 80213b6:	d06c      	beq.n	8021492 <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80213b8:	f1ba 0f00 	cmp.w	sl, #0
 80213bc:	d05f      	beq.n	802147e <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80213be:	f1bb 0f00 	cmp.w	fp, #0
 80213c2:	f000 8084 	beq.w	80214ce <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 80213c6:	8a42      	ldrh	r2, [r0, #18]
 80213c8:	4699      	mov	r9, r3
 80213ca:	4604      	mov	r4, r0
 80213cc:	b39a      	cbz	r2, 8021436 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80213ce:	892a      	ldrh	r2, [r5, #8]
 80213d0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80213d4:	429a      	cmp	r2, r3
 80213d6:	d84f      	bhi.n	8021478 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 80213d8:	2108      	movs	r1, #8
 80213da:	4628      	mov	r0, r5
 80213dc:	f7fa fff0 	bl	801c3c0 <pbuf_add_header>
 80213e0:	bb98      	cbnz	r0, 802144a <udp_sendto_if_src+0xae>
 80213e2:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80213e4:	8973      	ldrh	r3, [r6, #10]
 80213e6:	2b07      	cmp	r3, #7
 80213e8:	d93e      	bls.n	8021468 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 80213ea:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 80213ec:	8a60      	ldrh	r0, [r4, #18]
 80213ee:	f7f9 f86b 	bl	801a4c8 <lwip_htons>
 80213f2:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 80213f4:	4648      	mov	r0, r9
 80213f6:	f7f9 f867 	bl	801a4c8 <lwip_htons>
  udphdr->chksum = 0x0000;
 80213fa:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 80213fc:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 80213fe:	71bb      	strb	r3, [r7, #6]
 8021400:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8021402:	8930      	ldrh	r0, [r6, #8]
 8021404:	f7f9 f860 	bl	801a4c8 <lwip_htons>
 8021408:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 802140a:	f8cd b008 	str.w	fp, [sp, #8]
 802140e:	2011      	movs	r0, #17
 8021410:	7aa3      	ldrb	r3, [r4, #10]
 8021412:	4642      	mov	r2, r8
 8021414:	4651      	mov	r1, sl
 8021416:	9300      	str	r3, [sp, #0]
 8021418:	7ae3      	ldrb	r3, [r4, #11]
 802141a:	9001      	str	r0, [sp, #4]
 802141c:	4630      	mov	r0, r6
 802141e:	f002 fdb9 	bl	8023f94 <ip4_output_if_src>
  if (q != p) {
 8021422:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8021424:	4607      	mov	r7, r0
  if (q != p) {
 8021426:	d002      	beq.n	802142e <udp_sendto_if_src+0x92>
    pbuf_free(q);
 8021428:	4630      	mov	r0, r6
 802142a:	f7fb f889 	bl	801c540 <pbuf_free>
}
 802142e:	4638      	mov	r0, r7
 8021430:	b005      	add	sp, #20
 8021432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021436:	4601      	mov	r1, r0
 8021438:	f7ff ff32 	bl	80212a0 <udp_bind>
    if (err != ERR_OK) {
 802143c:	4607      	mov	r7, r0
 802143e:	2800      	cmp	r0, #0
 8021440:	d0c5      	beq.n	80213ce <udp_sendto_if_src+0x32>
}
 8021442:	4638      	mov	r0, r7
 8021444:	b005      	add	sp, #20
 8021446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 802144a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802144e:	2108      	movs	r1, #8
 8021450:	2022      	movs	r0, #34	; 0x22
 8021452:	f7fa fea3 	bl	801c19c <pbuf_alloc>
    if (q == NULL) {
 8021456:	4606      	mov	r6, r0
 8021458:	b170      	cbz	r0, 8021478 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 802145a:	892b      	ldrh	r3, [r5, #8]
 802145c:	2b00      	cmp	r3, #0
 802145e:	d0c1      	beq.n	80213e4 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 8021460:	4629      	mov	r1, r5
 8021462:	f7fb f8db 	bl	801c61c <pbuf_chain>
 8021466:	e7bd      	b.n	80213e4 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021468:	4b1e      	ldr	r3, [pc, #120]	; (80214e4 <udp_sendto_if_src+0x148>)
 802146a:	f240 320d 	movw	r2, #781	; 0x30d
 802146e:	491e      	ldr	r1, [pc, #120]	; (80214e8 <udp_sendto_if_src+0x14c>)
 8021470:	481e      	ldr	r0, [pc, #120]	; (80214ec <udp_sendto_if_src+0x150>)
 8021472:	f005 f92f 	bl	80266d4 <iprintf>
 8021476:	e7b8      	b.n	80213ea <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 8021478:	f04f 37ff 	mov.w	r7, #4294967295
 802147c:	e7d7      	b.n	802142e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 802147e:	4b19      	ldr	r3, [pc, #100]	; (80214e4 <udp_sendto_if_src+0x148>)
 8021480:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8021484:	491a      	ldr	r1, [pc, #104]	; (80214f0 <udp_sendto_if_src+0x154>)
 8021486:	f06f 070f 	mvn.w	r7, #15
 802148a:	4818      	ldr	r0, [pc, #96]	; (80214ec <udp_sendto_if_src+0x150>)
 802148c:	f005 f922 	bl	80266d4 <iprintf>
 8021490:	e7cd      	b.n	802142e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021492:	4b14      	ldr	r3, [pc, #80]	; (80214e4 <udp_sendto_if_src+0x148>)
 8021494:	f240 22d3 	movw	r2, #723	; 0x2d3
 8021498:	4916      	ldr	r1, [pc, #88]	; (80214f4 <udp_sendto_if_src+0x158>)
 802149a:	f06f 070f 	mvn.w	r7, #15
 802149e:	4813      	ldr	r0, [pc, #76]	; (80214ec <udp_sendto_if_src+0x150>)
 80214a0:	f005 f918 	bl	80266d4 <iprintf>
 80214a4:	e7c3      	b.n	802142e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80214a6:	4b0f      	ldr	r3, [pc, #60]	; (80214e4 <udp_sendto_if_src+0x148>)
 80214a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80214ac:	4912      	ldr	r1, [pc, #72]	; (80214f8 <udp_sendto_if_src+0x15c>)
 80214ae:	f06f 070f 	mvn.w	r7, #15
 80214b2:	480e      	ldr	r0, [pc, #56]	; (80214ec <udp_sendto_if_src+0x150>)
 80214b4:	f005 f90e 	bl	80266d4 <iprintf>
 80214b8:	e7b9      	b.n	802142e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80214ba:	4b0a      	ldr	r3, [pc, #40]	; (80214e4 <udp_sendto_if_src+0x148>)
 80214bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80214c0:	490e      	ldr	r1, [pc, #56]	; (80214fc <udp_sendto_if_src+0x160>)
 80214c2:	f06f 070f 	mvn.w	r7, #15
 80214c6:	4809      	ldr	r0, [pc, #36]	; (80214ec <udp_sendto_if_src+0x150>)
 80214c8:	f005 f904 	bl	80266d4 <iprintf>
 80214cc:	e7af      	b.n	802142e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80214ce:	4b05      	ldr	r3, [pc, #20]	; (80214e4 <udp_sendto_if_src+0x148>)
 80214d0:	f240 22d5 	movw	r2, #725	; 0x2d5
 80214d4:	490a      	ldr	r1, [pc, #40]	; (8021500 <udp_sendto_if_src+0x164>)
 80214d6:	f06f 070f 	mvn.w	r7, #15
 80214da:	4804      	ldr	r0, [pc, #16]	; (80214ec <udp_sendto_if_src+0x150>)
 80214dc:	f005 f8fa 	bl	80266d4 <iprintf>
 80214e0:	e7a5      	b.n	802142e <udp_sendto_if_src+0x92>
 80214e2:	bf00      	nop
 80214e4:	080468ec 	.word	0x080468ec
 80214e8:	08046a58 	.word	0x08046a58
 80214ec:	0802b3cc 	.word	0x0802b3cc
 80214f0:	08046a10 	.word	0x08046a10
 80214f4:	080469ec 	.word	0x080469ec
 80214f8:	080469cc 	.word	0x080469cc
 80214fc:	080469ac 	.word	0x080469ac
 8021500:	08046a34 	.word	0x08046a34

08021504 <udp_sendto_if>:
{
 8021504:	b570      	push	{r4, r5, r6, lr}
 8021506:	b082      	sub	sp, #8
 8021508:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802150a:	2800      	cmp	r0, #0
 802150c:	d036      	beq.n	802157c <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 802150e:	b359      	cbz	r1, 8021568 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021510:	b302      	cbz	r2, 8021554 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021512:	b1ac      	cbz	r4, 8021540 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021514:	6805      	ldr	r5, [r0, #0]
 8021516:	b935      	cbnz	r5, 8021526 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 8021518:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 802151a:	e9cd 4500 	strd	r4, r5, [sp]
 802151e:	f7ff ff3d 	bl	802139c <udp_sendto_if_src>
}
 8021522:	b002      	add	sp, #8
 8021524:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8021526:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802152a:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 802152e:	d0f3      	beq.n	8021518 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8021530:	6866      	ldr	r6, [r4, #4]
 8021532:	42b5      	cmp	r5, r6
 8021534:	d101      	bne.n	802153a <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021536:	4605      	mov	r5, r0
 8021538:	e7ef      	b.n	802151a <udp_sendto_if+0x16>
        return ERR_RTE;
 802153a:	f06f 0003 	mvn.w	r0, #3
 802153e:	e7f0      	b.n	8021522 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021540:	4b13      	ldr	r3, [pc, #76]	; (8021590 <udp_sendto_if+0x8c>)
 8021542:	f240 2283 	movw	r2, #643	; 0x283
 8021546:	4913      	ldr	r1, [pc, #76]	; (8021594 <udp_sendto_if+0x90>)
 8021548:	4813      	ldr	r0, [pc, #76]	; (8021598 <udp_sendto_if+0x94>)
 802154a:	f005 f8c3 	bl	80266d4 <iprintf>
 802154e:	f06f 000f 	mvn.w	r0, #15
 8021552:	e7e6      	b.n	8021522 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021554:	4b0e      	ldr	r3, [pc, #56]	; (8021590 <udp_sendto_if+0x8c>)
 8021556:	f240 2282 	movw	r2, #642	; 0x282
 802155a:	4910      	ldr	r1, [pc, #64]	; (802159c <udp_sendto_if+0x98>)
 802155c:	480e      	ldr	r0, [pc, #56]	; (8021598 <udp_sendto_if+0x94>)
 802155e:	f005 f8b9 	bl	80266d4 <iprintf>
 8021562:	f06f 000f 	mvn.w	r0, #15
 8021566:	e7dc      	b.n	8021522 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8021568:	4b09      	ldr	r3, [pc, #36]	; (8021590 <udp_sendto_if+0x8c>)
 802156a:	f240 2281 	movw	r2, #641	; 0x281
 802156e:	490c      	ldr	r1, [pc, #48]	; (80215a0 <udp_sendto_if+0x9c>)
 8021570:	4809      	ldr	r0, [pc, #36]	; (8021598 <udp_sendto_if+0x94>)
 8021572:	f005 f8af 	bl	80266d4 <iprintf>
 8021576:	f06f 000f 	mvn.w	r0, #15
 802157a:	e7d2      	b.n	8021522 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802157c:	4b04      	ldr	r3, [pc, #16]	; (8021590 <udp_sendto_if+0x8c>)
 802157e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021582:	4908      	ldr	r1, [pc, #32]	; (80215a4 <udp_sendto_if+0xa0>)
 8021584:	4804      	ldr	r0, [pc, #16]	; (8021598 <udp_sendto_if+0x94>)
 8021586:	f005 f8a5 	bl	80266d4 <iprintf>
 802158a:	f06f 000f 	mvn.w	r0, #15
 802158e:	e7c8      	b.n	8021522 <udp_sendto_if+0x1e>
 8021590:	080468ec 	.word	0x080468ec
 8021594:	08046ae0 	.word	0x08046ae0
 8021598:	0802b3cc 	.word	0x0802b3cc
 802159c:	08046ac0 	.word	0x08046ac0
 80215a0:	08046aa4 	.word	0x08046aa4
 80215a4:	08046a88 	.word	0x08046a88

080215a8 <udp_sendto>:
{
 80215a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215ac:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80215ae:	b388      	cbz	r0, 8021614 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80215b0:	460e      	mov	r6, r1
 80215b2:	b329      	cbz	r1, 8021600 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80215b4:	4615      	mov	r5, r2
 80215b6:	b1ca      	cbz	r2, 80215ec <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80215b8:	4604      	mov	r4, r0
 80215ba:	7a00      	ldrb	r0, [r0, #8]
 80215bc:	4698      	mov	r8, r3
 80215be:	b168      	cbz	r0, 80215dc <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 80215c0:	f7fa fc98 	bl	801bef4 <netif_get_by_index>
 80215c4:	4607      	mov	r7, r0
  if (netif == NULL) {
 80215c6:	b177      	cbz	r7, 80215e6 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80215c8:	4643      	mov	r3, r8
 80215ca:	462a      	mov	r2, r5
 80215cc:	4631      	mov	r1, r6
 80215ce:	4620      	mov	r0, r4
 80215d0:	9700      	str	r7, [sp, #0]
 80215d2:	f7ff ff97 	bl	8021504 <udp_sendto_if>
}
 80215d6:	b002      	add	sp, #8
 80215d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 80215dc:	4610      	mov	r0, r2
 80215de:	f002 fbab 	bl	8023d38 <ip4_route>
 80215e2:	4607      	mov	r7, r0
 80215e4:	e7ef      	b.n	80215c6 <udp_sendto+0x1e>
    return ERR_RTE;
 80215e6:	f06f 0003 	mvn.w	r0, #3
 80215ea:	e7f4      	b.n	80215d6 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80215ec:	4b0e      	ldr	r3, [pc, #56]	; (8021628 <udp_sendto+0x80>)
 80215ee:	f240 221a 	movw	r2, #538	; 0x21a
 80215f2:	490e      	ldr	r1, [pc, #56]	; (802162c <udp_sendto+0x84>)
 80215f4:	480e      	ldr	r0, [pc, #56]	; (8021630 <udp_sendto+0x88>)
 80215f6:	f005 f86d 	bl	80266d4 <iprintf>
 80215fa:	f06f 000f 	mvn.w	r0, #15
 80215fe:	e7ea      	b.n	80215d6 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021600:	4b09      	ldr	r3, [pc, #36]	; (8021628 <udp_sendto+0x80>)
 8021602:	f240 2219 	movw	r2, #537	; 0x219
 8021606:	490b      	ldr	r1, [pc, #44]	; (8021634 <udp_sendto+0x8c>)
 8021608:	4809      	ldr	r0, [pc, #36]	; (8021630 <udp_sendto+0x88>)
 802160a:	f005 f863 	bl	80266d4 <iprintf>
 802160e:	f06f 000f 	mvn.w	r0, #15
 8021612:	e7e0      	b.n	80215d6 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8021614:	4b04      	ldr	r3, [pc, #16]	; (8021628 <udp_sendto+0x80>)
 8021616:	f44f 7206 	mov.w	r2, #536	; 0x218
 802161a:	4907      	ldr	r1, [pc, #28]	; (8021638 <udp_sendto+0x90>)
 802161c:	4804      	ldr	r0, [pc, #16]	; (8021630 <udp_sendto+0x88>)
 802161e:	f005 f859 	bl	80266d4 <iprintf>
 8021622:	f06f 000f 	mvn.w	r0, #15
 8021626:	e7d6      	b.n	80215d6 <udp_sendto+0x2e>
 8021628:	080468ec 	.word	0x080468ec
 802162c:	08046b34 	.word	0x08046b34
 8021630:	0802b3cc 	.word	0x0802b3cc
 8021634:	08046b18 	.word	0x08046b18
 8021638:	08046b00 	.word	0x08046b00

0802163c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 802163c:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 802163e:	b320      	cbz	r0, 802168a <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8021640:	460d      	mov	r5, r1
 8021642:	b361      	cbz	r1, 802169e <udp_connect+0x62>

  if (pcb->local_port == 0) {
 8021644:	4616      	mov	r6, r2
 8021646:	8a42      	ldrh	r2, [r0, #18]
 8021648:	4604      	mov	r4, r0
 802164a:	b1c2      	cbz	r2, 802167e <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 802164c:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802164e:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021650:	4918      	ldr	r1, [pc, #96]	; (80216b4 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8021652:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8021656:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021658:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 802165a:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802165c:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802165e:	b142      	cbz	r2, 8021672 <udp_connect+0x36>
    if (pcb == ipcb) {
 8021660:	4294      	cmp	r4, r2
 8021662:	d00a      	beq.n	802167a <udp_connect+0x3e>
 8021664:	4613      	mov	r3, r2
 8021666:	e001      	b.n	802166c <udp_connect+0x30>
 8021668:	429c      	cmp	r4, r3
 802166a:	d006      	beq.n	802167a <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802166c:	68db      	ldr	r3, [r3, #12]
 802166e:	2b00      	cmp	r3, #0
 8021670:	d1fa      	bne.n	8021668 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 8021672:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 8021674:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8021676:	600c      	str	r4, [r1, #0]
}
 8021678:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 802167a:	2000      	movs	r0, #0
}
 802167c:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 802167e:	4601      	mov	r1, r0
 8021680:	f7ff fe0e 	bl	80212a0 <udp_bind>
    if (err != ERR_OK) {
 8021684:	2800      	cmp	r0, #0
 8021686:	d0e1      	beq.n	802164c <udp_connect+0x10>
}
 8021688:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 802168a:	4b0b      	ldr	r3, [pc, #44]	; (80216b8 <udp_connect+0x7c>)
 802168c:	f240 4235 	movw	r2, #1077	; 0x435
 8021690:	490a      	ldr	r1, [pc, #40]	; (80216bc <udp_connect+0x80>)
 8021692:	480b      	ldr	r0, [pc, #44]	; (80216c0 <udp_connect+0x84>)
 8021694:	f005 f81e 	bl	80266d4 <iprintf>
 8021698:	f06f 000f 	mvn.w	r0, #15
}
 802169c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 802169e:	4b06      	ldr	r3, [pc, #24]	; (80216b8 <udp_connect+0x7c>)
 80216a0:	f240 4236 	movw	r2, #1078	; 0x436
 80216a4:	4907      	ldr	r1, [pc, #28]	; (80216c4 <udp_connect+0x88>)
 80216a6:	4806      	ldr	r0, [pc, #24]	; (80216c0 <udp_connect+0x84>)
 80216a8:	f005 f814 	bl	80266d4 <iprintf>
 80216ac:	f06f 000f 	mvn.w	r0, #15
}
 80216b0:	bd70      	pop	{r4, r5, r6, pc}
 80216b2:	bf00      	nop
 80216b4:	2002e504 	.word	0x2002e504
 80216b8:	080468ec 	.word	0x080468ec
 80216bc:	08046b50 	.word	0x08046b50
 80216c0:	0802b3cc 	.word	0x0802b3cc
 80216c4:	08046b6c 	.word	0x08046b6c

080216c8 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80216c8:	b110      	cbz	r0, 80216d0 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 80216ca:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 80216ce:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80216d0:	4b03      	ldr	r3, [pc, #12]	; (80216e0 <udp_recv+0x18>)
 80216d2:	f240 428a 	movw	r2, #1162	; 0x48a
 80216d6:	4903      	ldr	r1, [pc, #12]	; (80216e4 <udp_recv+0x1c>)
 80216d8:	4803      	ldr	r0, [pc, #12]	; (80216e8 <udp_recv+0x20>)
 80216da:	f004 bffb 	b.w	80266d4 <iprintf>
 80216de:	bf00      	nop
 80216e0:	080468ec 	.word	0x080468ec
 80216e4:	08046b88 	.word	0x08046b88
 80216e8:	0802b3cc 	.word	0x0802b3cc

080216ec <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80216ec:	4601      	mov	r1, r0
 80216ee:	b1c0      	cbz	r0, 8021722 <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80216f0:	4b0f      	ldr	r3, [pc, #60]	; (8021730 <udp_remove+0x44>)
 80216f2:	681a      	ldr	r2, [r3, #0]
 80216f4:	4282      	cmp	r2, r0
 80216f6:	d00a      	beq.n	802170e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80216f8:	b132      	cbz	r2, 8021708 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80216fa:	68d3      	ldr	r3, [r2, #12]
 80216fc:	428b      	cmp	r3, r1
 80216fe:	d100      	bne.n	8021702 <udp_remove+0x16>
 8021700:	b953      	cbnz	r3, 8021718 <udp_remove+0x2c>
 8021702:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021704:	2a00      	cmp	r2, #0
 8021706:	d1f8      	bne.n	80216fa <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8021708:	2001      	movs	r0, #1
 802170a:	f7fa ba01 	b.w	801bb10 <memp_free>
    udp_pcbs = udp_pcbs->next;
 802170e:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 8021710:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 8021712:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 8021714:	f7fa b9fc 	b.w	801bb10 <memp_free>
        pcb2->next = pcb->next;
 8021718:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802171a:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 802171c:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802171e:	f7fa b9f7 	b.w	801bb10 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8021722:	4b04      	ldr	r3, [pc, #16]	; (8021734 <udp_remove+0x48>)
 8021724:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8021728:	4903      	ldr	r1, [pc, #12]	; (8021738 <udp_remove+0x4c>)
 802172a:	4804      	ldr	r0, [pc, #16]	; (802173c <udp_remove+0x50>)
 802172c:	f004 bfd2 	b.w	80266d4 <iprintf>
 8021730:	2002e504 	.word	0x2002e504
 8021734:	080468ec 	.word	0x080468ec
 8021738:	08046ba0 	.word	0x08046ba0
 802173c:	0802b3cc 	.word	0x0802b3cc

08021740 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8021740:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8021742:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8021746:	4907      	ldr	r1, [pc, #28]	; (8021764 <udp_new+0x24>)
 8021748:	2001      	movs	r0, #1
 802174a:	f7fa f9ab 	bl	801baa4 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802174e:	4604      	mov	r4, r0
 8021750:	b128      	cbz	r0, 802175e <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8021752:	2220      	movs	r2, #32
 8021754:	2100      	movs	r1, #0
 8021756:	f004 f81f 	bl	8025798 <memset>
    pcb->ttl = UDP_TTL;
 802175a:	23ff      	movs	r3, #255	; 0xff
 802175c:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 802175e:	4620      	mov	r0, r4
 8021760:	bd10      	pop	{r4, pc}
 8021762:	bf00      	nop
 8021764:	080468ec 	.word	0x080468ec

08021768 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8021768:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802176a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 802176e:	4907      	ldr	r1, [pc, #28]	; (802178c <udp_new_ip_type+0x24>)
 8021770:	2001      	movs	r0, #1
 8021772:	f7fa f997 	bl	801baa4 <memp_malloc_fn>
  if (pcb != NULL) {
 8021776:	4604      	mov	r4, r0
 8021778:	b128      	cbz	r0, 8021786 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 802177a:	2220      	movs	r2, #32
 802177c:	2100      	movs	r1, #0
 802177e:	f004 f80b 	bl	8025798 <memset>
    pcb->ttl = UDP_TTL;
 8021782:	23ff      	movs	r3, #255	; 0xff
 8021784:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 8021786:	4620      	mov	r0, r4
 8021788:	bd10      	pop	{r4, pc}
 802178a:	bf00      	nop
 802178c:	080468ec 	.word	0x080468ec

08021790 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8021790:	b110      	cbz	r0, 8021798 <udp_netif_ip_addr_changed+0x8>
 8021792:	6802      	ldr	r2, [r0, #0]
 8021794:	b101      	cbz	r1, 8021798 <udp_netif_ip_addr_changed+0x8>
 8021796:	b902      	cbnz	r2, 802179a <udp_netif_ip_addr_changed+0xa>
 8021798:	4770      	bx	lr
 802179a:	680b      	ldr	r3, [r1, #0]
 802179c:	2b00      	cmp	r3, #0
 802179e:	d0fb      	beq.n	8021798 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80217a0:	4b08      	ldr	r3, [pc, #32]	; (80217c4 <udp_netif_ip_addr_changed+0x34>)
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	d0f7      	beq.n	8021798 <udp_netif_ip_addr_changed+0x8>
{
 80217a8:	b410      	push	{r4}
 80217aa:	e000      	b.n	80217ae <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80217ac:	6802      	ldr	r2, [r0, #0]
 80217ae:	681c      	ldr	r4, [r3, #0]
 80217b0:	4294      	cmp	r4, r2
 80217b2:	d101      	bne.n	80217b8 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80217b4:	680a      	ldr	r2, [r1, #0]
 80217b6:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80217b8:	68db      	ldr	r3, [r3, #12]
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	d1f6      	bne.n	80217ac <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 80217be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80217c2:	4770      	bx	lr
 80217c4:	2002e504 	.word	0x2002e504

080217c8 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80217c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80217ca:	1d07      	adds	r7, r0, #4
{
 80217cc:	4604      	mov	r4, r0
 80217ce:	460d      	mov	r5, r1
 80217d0:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80217d2:	2f44      	cmp	r7, #68	; 0x44
 80217d4:	d80e      	bhi.n	80217f4 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80217d6:	0e33      	lsrs	r3, r6, #24
 80217d8:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80217da:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80217dc:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80217de:	b292      	uxth	r2, r2
 80217e0:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80217e2:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80217e4:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80217e6:	0a32      	lsrs	r2, r6, #8
 80217e8:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80217ea:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80217ec:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 80217ee:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80217f0:	552e      	strb	r6, [r5, r4]
}
 80217f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80217f4:	4b03      	ldr	r3, [pc, #12]	; (8021804 <dhcp_option_long+0x3c>)
 80217f6:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80217fa:	4903      	ldr	r1, [pc, #12]	; (8021808 <dhcp_option_long+0x40>)
 80217fc:	4803      	ldr	r0, [pc, #12]	; (802180c <dhcp_option_long+0x44>)
 80217fe:	f004 ff69 	bl	80266d4 <iprintf>
 8021802:	e7e8      	b.n	80217d6 <dhcp_option_long+0xe>
 8021804:	08046bb8 	.word	0x08046bb8
 8021808:	08046bf0 	.word	0x08046bf0
 802180c:	0802b3cc 	.word	0x0802b3cc

08021810 <dhcp_check>:
{
 8021810:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021812:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 8021814:	7963      	ldrb	r3, [r4, #5]
 8021816:	2b08      	cmp	r3, #8
 8021818:	d004      	beq.n	8021824 <dhcp_check+0x14>
    dhcp->tries = 0;
 802181a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 802181c:	2208      	movs	r2, #8
    dhcp->tries = 0;
 802181e:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 8021820:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 8021822:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8021824:	2200      	movs	r2, #0
 8021826:	f104 011c 	add.w	r1, r4, #28
 802182a:	f001 ffab 	bl	8023784 <etharp_query>
  if (dhcp->tries < 255) {
 802182e:	79a3      	ldrb	r3, [r4, #6]
 8021830:	2bff      	cmp	r3, #255	; 0xff
 8021832:	d001      	beq.n	8021838 <dhcp_check+0x28>
    dhcp->tries++;
 8021834:	3301      	adds	r3, #1
 8021836:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021838:	2301      	movs	r3, #1
 802183a:	8123      	strh	r3, [r4, #8]
}
 802183c:	bd10      	pop	{r4, pc}
 802183e:	bf00      	nop

08021840 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8021840:	2800      	cmp	r0, #0
 8021842:	f000 808e 	beq.w	8021962 <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 8021846:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8021848:	2900      	cmp	r1, #0
 802184a:	f000 8091 	beq.w	8021970 <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 802184e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 8021850:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8021852:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 8021856:	b500      	push	{lr}
  dhcp->lease_used = 0;
 8021858:	824a      	strh	r2, [r1, #18]
{
 802185a:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 802185c:	d00e      	beq.n	802187c <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802185e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8021860:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8021864:	d258      	bcs.n	8021918 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021866:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 802186a:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802186c:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 8021870:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 8021874:	f200 8083 	bhi.w	802197e <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 8021878:	2301      	movs	r3, #1
 802187a:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802187c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 802187e:	1c5a      	adds	r2, r3, #1
 8021880:	d050      	beq.n	8021924 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021882:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8021884:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8021888:	d241      	bcs.n	802190e <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802188a:	4a40      	ldr	r2, [pc, #256]	; (802198c <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 802188c:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802188e:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 8021892:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 8021896:	d874      	bhi.n	8021982 <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 8021898:	2301      	movs	r3, #1
 802189a:	469c      	mov	ip, r3
 802189c:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802189e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80218a0:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80218a4:	1c53      	adds	r3, r2, #1
 80218a6:	d042      	beq.n	802192e <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218a8:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 80218aa:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80218ae:	d24b      	bcs.n	8021948 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218b0:	4b36      	ldr	r3, [pc, #216]	; (802198c <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 80218b2:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218b4:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 80218b8:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 80218bc:	d864      	bhi.n	8021988 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 80218be:	2201      	movs	r2, #1
 80218c0:	4613      	mov	r3, r2
 80218c2:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80218c4:	2201      	movs	r2, #1
 80218c6:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80218c8:	459c      	cmp	ip, r3
 80218ca:	d302      	bcc.n	80218d2 <dhcp_bind+0x92>
 80218cc:	b10a      	cbz	r2, 80218d2 <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 80218ce:	2300      	movs	r3, #0
 80218d0:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 80218d2:	79cb      	ldrb	r3, [r1, #7]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d02f      	beq.n	8021938 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80218d8:	6a0b      	ldr	r3, [r1, #32]
 80218da:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80218dc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80218de:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80218e0:	b92b      	cbnz	r3, 80218ee <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80218e2:	69cb      	ldr	r3, [r1, #28]
 80218e4:	9a00      	ldr	r2, [sp, #0]
 80218e6:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80218e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80218ec:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 80218ee:	794b      	ldrb	r3, [r1, #5]
 80218f0:	2b0a      	cmp	r3, #10
 80218f2:	d004      	beq.n	80218fe <dhcp_bind+0xbe>
    dhcp->tries = 0;
 80218f4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80218f6:	220a      	movs	r2, #10
    dhcp->tries = 0;
 80218f8:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 80218fa:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 80218fc:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80218fe:	ab01      	add	r3, sp, #4
 8021900:	466a      	mov	r2, sp
 8021902:	311c      	adds	r1, #28
 8021904:	f7fa f982 	bl	801bc0c <netif_set_addr>
}
 8021908:	b003      	add	sp, #12
 802190a:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 802190e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021912:	469c      	mov	ip, r3
 8021914:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 8021916:	e7c2      	b.n	802189e <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 8021918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802191c:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802191e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8021920:	1c5a      	adds	r2, r3, #1
 8021922:	d1ae      	bne.n	8021882 <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8021924:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8021926:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802192a:	1c53      	adds	r3, r2, #1
 802192c:	d1bc      	bne.n	80218a8 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 802192e:	898b      	ldrh	r3, [r1, #12]
 8021930:	1e1a      	subs	r2, r3, #0
 8021932:	bf18      	it	ne
 8021934:	2201      	movne	r2, #1
 8021936:	e7c7      	b.n	80218c8 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 8021938:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 802193c:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 802193e:	2b00      	cmp	r3, #0
 8021940:	db07      	blt.n	8021952 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8021942:	23ff      	movs	r3, #255	; 0xff
 8021944:	9300      	str	r3, [sp, #0]
 8021946:	e7c9      	b.n	80218dc <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 8021948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802194c:	4613      	mov	r3, r2
 802194e:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 8021950:	e7b8      	b.n	80218c4 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 8021952:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8021954:	bf8c      	ite	hi
 8021956:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 802195a:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 802195e:	9300      	str	r3, [sp, #0]
 8021960:	e7bc      	b.n	80218dc <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8021962:	4b0b      	ldr	r3, [pc, #44]	; (8021990 <dhcp_bind+0x150>)
 8021964:	f240 4215 	movw	r2, #1045	; 0x415
 8021968:	490a      	ldr	r1, [pc, #40]	; (8021994 <dhcp_bind+0x154>)
 802196a:	480b      	ldr	r0, [pc, #44]	; (8021998 <dhcp_bind+0x158>)
 802196c:	f004 beb2 	b.w	80266d4 <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8021970:	4b07      	ldr	r3, [pc, #28]	; (8021990 <dhcp_bind+0x150>)
 8021972:	f240 4217 	movw	r2, #1047	; 0x417
 8021976:	4909      	ldr	r1, [pc, #36]	; (802199c <dhcp_bind+0x15c>)
 8021978:	4807      	ldr	r0, [pc, #28]	; (8021998 <dhcp_bind+0x158>)
 802197a:	f004 beab 	b.w	80266d4 <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 802197e:	828a      	strh	r2, [r1, #20]
 8021980:	e77c      	b.n	802187c <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 8021982:	f8a1 c00a 	strh.w	ip, [r1, #10]
 8021986:	e78a      	b.n	802189e <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 8021988:	818b      	strh	r3, [r1, #12]
 802198a:	e79b      	b.n	80218c4 <dhcp_bind+0x84>
 802198c:	88888889 	.word	0x88888889
 8021990:	08046bb8 	.word	0x08046bb8
 8021994:	08046c2c 	.word	0x08046c2c
 8021998:	0802b3cc 	.word	0x0802b3cc
 802199c:	08046c48 	.word	0x08046c48

080219a0 <dhcp_inc_pcb_refcount>:
{
 80219a0:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 80219a2:	4c15      	ldr	r4, [pc, #84]	; (80219f8 <dhcp_inc_pcb_refcount+0x58>)
 80219a4:	7823      	ldrb	r3, [r4, #0]
 80219a6:	b9fb      	cbnz	r3, 80219e8 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80219a8:	4d14      	ldr	r5, [pc, #80]	; (80219fc <dhcp_inc_pcb_refcount+0x5c>)
 80219aa:	682b      	ldr	r3, [r5, #0]
 80219ac:	b12b      	cbz	r3, 80219ba <dhcp_inc_pcb_refcount+0x1a>
 80219ae:	4b14      	ldr	r3, [pc, #80]	; (8021a00 <dhcp_inc_pcb_refcount+0x60>)
 80219b0:	22e5      	movs	r2, #229	; 0xe5
 80219b2:	4914      	ldr	r1, [pc, #80]	; (8021a04 <dhcp_inc_pcb_refcount+0x64>)
 80219b4:	4814      	ldr	r0, [pc, #80]	; (8021a08 <dhcp_inc_pcb_refcount+0x68>)
 80219b6:	f004 fe8d 	bl	80266d4 <iprintf>
    dhcp_pcb = udp_new();
 80219ba:	f7ff fec1 	bl	8021740 <udp_new>
 80219be:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 80219c0:	b1b0      	cbz	r0, 80219f0 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80219c2:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80219c4:	4911      	ldr	r1, [pc, #68]	; (8021a0c <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80219c6:	f042 0220 	orr.w	r2, r2, #32
 80219ca:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80219cc:	2244      	movs	r2, #68	; 0x44
 80219ce:	f7ff fc67 	bl	80212a0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80219d2:	2243      	movs	r2, #67	; 0x43
 80219d4:	490d      	ldr	r1, [pc, #52]	; (8021a0c <dhcp_inc_pcb_refcount+0x6c>)
 80219d6:	6828      	ldr	r0, [r5, #0]
 80219d8:	f7ff fe30 	bl	802163c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80219dc:	2200      	movs	r2, #0
 80219de:	490c      	ldr	r1, [pc, #48]	; (8021a10 <dhcp_inc_pcb_refcount+0x70>)
 80219e0:	6828      	ldr	r0, [r5, #0]
 80219e2:	f7ff fe71 	bl	80216c8 <udp_recv>
  dhcp_pcb_refcount++;
 80219e6:	7823      	ldrb	r3, [r4, #0]
 80219e8:	3301      	adds	r3, #1
  return ERR_OK;
 80219ea:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 80219ec:	7023      	strb	r3, [r4, #0]
}
 80219ee:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 80219f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80219f4:	bd38      	pop	{r3, r4, r5, pc}
 80219f6:	bf00      	nop
 80219f8:	2002e50c 	.word	0x2002e50c
 80219fc:	2002e508 	.word	0x2002e508
 8021a00:	08046bb8 	.word	0x08046bb8
 8021a04:	08046c60 	.word	0x08046c60
 8021a08:	0802b3cc 	.word	0x0802b3cc
 8021a0c:	0804726c 	.word	0x0804726c
 8021a10:	080222b9 	.word	0x080222b9

08021a14 <dhcp_dec_pcb_refcount>:
{
 8021a14:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8021a16:	4d0b      	ldr	r5, [pc, #44]	; (8021a44 <dhcp_dec_pcb_refcount+0x30>)
 8021a18:	782c      	ldrb	r4, [r5, #0]
 8021a1a:	b154      	cbz	r4, 8021a32 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 8021a1c:	3c01      	subs	r4, #1
 8021a1e:	b2e4      	uxtb	r4, r4
 8021a20:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8021a22:	b104      	cbz	r4, 8021a26 <dhcp_dec_pcb_refcount+0x12>
}
 8021a24:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 8021a26:	4d08      	ldr	r5, [pc, #32]	; (8021a48 <dhcp_dec_pcb_refcount+0x34>)
 8021a28:	6828      	ldr	r0, [r5, #0]
 8021a2a:	f7ff fe5f 	bl	80216ec <udp_remove>
    dhcp_pcb = NULL;
 8021a2e:	602c      	str	r4, [r5, #0]
}
 8021a30:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8021a32:	4b06      	ldr	r3, [pc, #24]	; (8021a4c <dhcp_dec_pcb_refcount+0x38>)
 8021a34:	22ff      	movs	r2, #255	; 0xff
 8021a36:	4906      	ldr	r1, [pc, #24]	; (8021a50 <dhcp_dec_pcb_refcount+0x3c>)
 8021a38:	4806      	ldr	r0, [pc, #24]	; (8021a54 <dhcp_dec_pcb_refcount+0x40>)
 8021a3a:	f004 fe4b 	bl	80266d4 <iprintf>
  dhcp_pcb_refcount--;
 8021a3e:	782c      	ldrb	r4, [r5, #0]
 8021a40:	e7ec      	b.n	8021a1c <dhcp_dec_pcb_refcount+0x8>
 8021a42:	bf00      	nop
 8021a44:	2002e50c 	.word	0x2002e50c
 8021a48:	2002e508 	.word	0x2002e508
 8021a4c:	08046bb8 	.word	0x08046bb8
 8021a50:	08046c88 	.word	0x08046c88
 8021a54:	0802b3cc 	.word	0x0802b3cc

08021a58 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8021a58:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021a5a:	4d29      	ldr	r5, [pc, #164]	; (8021b00 <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8021a5c:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8021a5e:	b083      	sub	sp, #12
 8021a60:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021a62:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8021a64:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021a68:	b112      	cbz	r2, 8021a70 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8021a6a:	4b26      	ldr	r3, [pc, #152]	; (8021b04 <dhcp_handle_ack.isra.0+0xac>)
 8021a6c:	68db      	ldr	r3, [r3, #12]
 8021a6e:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8021a70:	792b      	ldrb	r3, [r5, #4]
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d041      	beq.n	8021afa <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8021a76:	4b23      	ldr	r3, [pc, #140]	; (8021b04 <dhcp_handle_ack.isra.0+0xac>)
 8021a78:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8021a7a:	796a      	ldrb	r2, [r5, #5]
 8021a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021a7e:	b312      	cbz	r2, 8021ac6 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8021a80:	4b20      	ldr	r3, [pc, #128]	; (8021b04 <dhcp_handle_ack.isra.0+0xac>)
 8021a82:	695b      	ldr	r3, [r3, #20]
 8021a84:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021a86:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021a88:	690a      	ldr	r2, [r1, #16]
 8021a8a:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021a8c:	bb2b      	cbnz	r3, 8021ada <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 8021a8e:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8021a90:	79eb      	ldrb	r3, [r5, #7]
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d12b      	bne.n	8021aee <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8021a96:	7a2b      	ldrb	r3, [r5, #8]
 8021a98:	b19b      	cbz	r3, 8021ac2 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021a9a:	4c1a      	ldr	r4, [pc, #104]	; (8021b04 <dhcp_handle_ack.isra.0+0xac>)
 8021a9c:	6a20      	ldr	r0, [r4, #32]
 8021a9e:	f7f8 fd17 	bl	801a4d0 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8021aa2:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021aa4:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8021aa6:	2000      	movs	r0, #0
 8021aa8:	f7f9 f8b8 	bl	801ac1c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8021aac:	7a6b      	ldrb	r3, [r5, #9]
 8021aae:	b143      	cbz	r3, 8021ac2 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021ab0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021ab2:	f7f8 fd0d 	bl	801a4d0 <lwip_htonl>
 8021ab6:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 8021ab8:	a901      	add	r1, sp, #4
 8021aba:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021abc:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 8021abe:	f7f9 f8ad 	bl	801ac1c <dns_setserver>
}
 8021ac2:	b003      	add	sp, #12
 8021ac4:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8021ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021ac8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021acc:	08db      	lsrs	r3, r3, #3
 8021ace:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021ad0:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021ad2:	690a      	ldr	r2, [r1, #16]
 8021ad4:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021ad6:	2b00      	cmp	r3, #0
 8021ad8:	d0d9      	beq.n	8021a8e <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8021ada:	4b0a      	ldr	r3, [pc, #40]	; (8021b04 <dhcp_handle_ack.isra.0+0xac>)
 8021adc:	6998      	ldr	r0, [r3, #24]
 8021ade:	f7f8 fcf7 	bl	801a4d0 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8021ae2:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8021ae4:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 8021ae6:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8021ae8:	79eb      	ldrb	r3, [r5, #7]
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	d0d3      	beq.n	8021a96 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8021aee:	4b05      	ldr	r3, [pc, #20]	; (8021b04 <dhcp_handle_ack.isra.0+0xac>)
 8021af0:	69d8      	ldr	r0, [r3, #28]
 8021af2:	f7f8 fced 	bl	801a4d0 <lwip_htonl>
 8021af6:	6260      	str	r0, [r4, #36]	; 0x24
 8021af8:	e7cd      	b.n	8021a96 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8021afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021afc:	085b      	lsrs	r3, r3, #1
 8021afe:	e7bc      	b.n	8021a7a <dhcp_handle_ack.isra.0+0x22>
 8021b00:	2002e510 	.word	0x2002e510
 8021b04:	2002e51c 	.word	0x2002e51c

08021b08 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8021b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8021b0c:	4681      	mov	r9, r0
 8021b0e:	2800      	cmp	r0, #0
 8021b10:	f000 8097 	beq.w	8021c42 <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8021b14:	460c      	mov	r4, r1
 8021b16:	2900      	cmp	r1, #0
 8021b18:	f000 808a 	beq.w	8021c30 <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8021b1c:	4616      	mov	r6, r2
 8021b1e:	f44f 719a 	mov.w	r1, #308	; 0x134
 8021b22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021b26:	2036      	movs	r0, #54	; 0x36
 8021b28:	461f      	mov	r7, r3
 8021b2a:	f7fa fb37 	bl	801c19c <pbuf_alloc>
  if (p_out == NULL) {
 8021b2e:	4605      	mov	r5, r0
 8021b30:	2800      	cmp	r0, #0
 8021b32:	d049      	beq.n	8021bc8 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8021b34:	8943      	ldrh	r3, [r0, #10]
 8021b36:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8021b3a:	d371      	bcc.n	8021c20 <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8021b3c:	2e03      	cmp	r6, #3
 8021b3e:	d051      	beq.n	8021be4 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8021b40:	79a3      	ldrb	r3, [r4, #6]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d043      	beq.n	8021bce <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8021b46:	4b43      	ldr	r3, [pc, #268]	; (8021c54 <dhcp_create_msg+0x14c>)
 8021b48:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8021b4a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021b4e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8021b52:	2100      	movs	r1, #0
    dhcp->xid = xid;
 8021b54:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021b56:	4640      	mov	r0, r8
 8021b58:	f003 fe1e 	bl	8025798 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8021b5c:	2301      	movs	r3, #1
 8021b5e:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8021b62:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8021b66:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8021b6a:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8021b6e:	6820      	ldr	r0, [r4, #0]
 8021b70:	f7f8 fcae 	bl	801a4d0 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021b74:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8021b76:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021b7a:	d12d      	bne.n	8021bd8 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8021b7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8021b80:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021b84:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 8021b88:	f109 0434 	add.w	r4, r9, #52	; 0x34
 8021b8c:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8021b90:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021b94:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 8021b96:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021b9a:	d1f9      	bne.n	8021b90 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021b9c:	2363      	movs	r3, #99	; 0x63
 8021b9e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 8021ba2:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021ba6:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 8021baa:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 8021bae:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021bb0:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 8021bb4:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 8021bb6:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 8021bba:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021bbc:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 8021bc0:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 8021bc4:	2303      	movs	r3, #3
 8021bc6:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 8021bc8:	4628      	mov	r0, r5
 8021bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 8021bce:	f004 fe25 	bl	802681c <rand>
 8021bd2:	4b20      	ldr	r3, [pc, #128]	; (8021c54 <dhcp_create_msg+0x14c>)
 8021bd4:	6018      	str	r0, [r3, #0]
 8021bd6:	e7b8      	b.n	8021b4a <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021bd8:	1ff3      	subs	r3, r6, #7
 8021bda:	2b01      	cmp	r3, #1
 8021bdc:	d9ce      	bls.n	8021b7c <dhcp_create_msg+0x74>
 8021bde:	2e03      	cmp	r6, #3
 8021be0:	d1d0      	bne.n	8021b84 <dhcp_create_msg+0x7c>
 8021be2:	e018      	b.n	8021c16 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8021be4:	7963      	ldrb	r3, [r4, #5]
 8021be6:	2b03      	cmp	r3, #3
 8021be8:	d0aa      	beq.n	8021b40 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 8021bea:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021bee:	f44f 729a 	mov.w	r2, #308	; 0x134
 8021bf2:	2100      	movs	r1, #0
 8021bf4:	4640      	mov	r0, r8
 8021bf6:	f003 fdcf 	bl	8025798 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8021bfa:	2301      	movs	r3, #1
 8021bfc:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8021c00:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8021c04:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8021c08:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8021c0c:	6820      	ldr	r0, [r4, #0]
 8021c0e:	f7f8 fc5f 	bl	801a4d0 <lwip_htonl>
 8021c12:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8021c16:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8021c18:	3b04      	subs	r3, #4
 8021c1a:	2b01      	cmp	r3, #1
 8021c1c:	d8b2      	bhi.n	8021b84 <dhcp_create_msg+0x7c>
 8021c1e:	e7ad      	b.n	8021b7c <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8021c20:	4b0d      	ldr	r3, [pc, #52]	; (8021c58 <dhcp_create_msg+0x150>)
 8021c22:	f240 7271 	movw	r2, #1905	; 0x771
 8021c26:	490d      	ldr	r1, [pc, #52]	; (8021c5c <dhcp_create_msg+0x154>)
 8021c28:	480d      	ldr	r0, [pc, #52]	; (8021c60 <dhcp_create_msg+0x158>)
 8021c2a:	f004 fd53 	bl	80266d4 <iprintf>
 8021c2e:	e785      	b.n	8021b3c <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8021c30:	4b09      	ldr	r3, [pc, #36]	; (8021c58 <dhcp_create_msg+0x150>)
 8021c32:	f240 726a 	movw	r2, #1898	; 0x76a
 8021c36:	490b      	ldr	r1, [pc, #44]	; (8021c64 <dhcp_create_msg+0x15c>)
 8021c38:	4625      	mov	r5, r4
 8021c3a:	4809      	ldr	r0, [pc, #36]	; (8021c60 <dhcp_create_msg+0x158>)
 8021c3c:	f004 fd4a 	bl	80266d4 <iprintf>
 8021c40:	e7c2      	b.n	8021bc8 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8021c42:	4b05      	ldr	r3, [pc, #20]	; (8021c58 <dhcp_create_msg+0x150>)
 8021c44:	f240 7269 	movw	r2, #1897	; 0x769
 8021c48:	4907      	ldr	r1, [pc, #28]	; (8021c68 <dhcp_create_msg+0x160>)
 8021c4a:	464d      	mov	r5, r9
 8021c4c:	4804      	ldr	r0, [pc, #16]	; (8021c60 <dhcp_create_msg+0x158>)
 8021c4e:	f004 fd41 	bl	80266d4 <iprintf>
 8021c52:	e7b9      	b.n	8021bc8 <dhcp_create_msg+0xc0>
 8021c54:	2002e544 	.word	0x2002e544
 8021c58:	08046bb8 	.word	0x08046bb8
 8021c5c:	08046cec 	.word	0x08046cec
 8021c60:	0802b3cc 	.word	0x0802b3cc
 8021c64:	08046ccc 	.word	0x08046ccc
 8021c68:	08046cac 	.word	0x08046cac

08021c6c <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 8021c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021c70:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 8021c74:	b087      	sub	sp, #28
 8021c76:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 8021c78:	f89a 3005 	ldrb.w	r3, [sl, #5]
 8021c7c:	2b03      	cmp	r3, #3
 8021c7e:	d007      	beq.n	8021c90 <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 8021c80:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021c82:	2203      	movs	r2, #3
    dhcp->tries = 0;
 8021c84:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 8021c88:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 8021c8c:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8021c90:	f10d 0316 	add.w	r3, sp, #22
 8021c94:	2203      	movs	r2, #3
 8021c96:	4651      	mov	r1, sl
 8021c98:	4648      	mov	r0, r9
 8021c9a:	f7ff ff35 	bl	8021b08 <dhcp_create_msg>
  if (p_out != NULL) {
 8021c9e:	4607      	mov	r7, r0
 8021ca0:	2800      	cmp	r0, #0
 8021ca2:	f000 808d 	beq.w	8021dc0 <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021ca6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021caa:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021cac:	f104 0804 	add.w	r8, r4, #4
 8021cb0:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021cb2:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021cb4:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021cb8:	f200 80a3 	bhi.w	8021e02 <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 8021cbc:	2239      	movs	r2, #57	; 0x39
 8021cbe:	1c63      	adds	r3, r4, #1
 8021cc0:	fa1f fb85 	uxth.w	fp, r5
 8021cc4:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021cc6:	b29b      	uxth	r3, r3
 8021cc8:	2202      	movs	r2, #2
 8021cca:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021ccc:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021cd0:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021cd4:	2b44      	cmp	r3, #68	; 0x44
 8021cd6:	f200 80ac 	bhi.w	8021e32 <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021cda:	2202      	movs	r2, #2
 8021cdc:	1ce3      	adds	r3, r4, #3
 8021cde:	fa1f f588 	uxth.w	r5, r8
 8021ce2:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021ce6:	b29b      	uxth	r3, r3
 8021ce8:	2240      	movs	r2, #64	; 0x40
 8021cea:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021cec:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8021cee:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021cf2:	2b44      	cmp	r3, #68	; 0x44
 8021cf4:	f200 8095 	bhi.w	8021e22 <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 8021cf8:	1d63      	adds	r3, r4, #5
 8021cfa:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8021cfc:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 8021cfe:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8021d00:	b29b      	uxth	r3, r3
 8021d02:	2204      	movs	r2, #4
 8021d04:	b2a4      	uxth	r4, r4
 8021d06:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d08:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021d0c:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d10:	f7f8 fbde 	bl	801a4d0 <lwip_htonl>
 8021d14:	4631      	mov	r1, r6
 8021d16:	4602      	mov	r2, r0
 8021d18:	4620      	mov	r0, r4
 8021d1a:	f7ff fd55 	bl	80217c8 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d1e:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d20:	4605      	mov	r5, r0
 8021d22:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d26:	2b44      	cmp	r3, #68	; 0x44
 8021d28:	9303      	str	r3, [sp, #12]
 8021d2a:	d872      	bhi.n	8021e12 <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 8021d2c:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 8021d2e:	2237      	movs	r2, #55	; 0x37
 8021d30:	1c6b      	adds	r3, r5, #1
 8021d32:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8021e68 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 8021d36:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 8021d38:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8021d3a:	b29b      	uxth	r3, r3
 8021d3c:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021d3e:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021d40:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 8021d44:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021d46:	493f      	ldr	r1, [pc, #252]	; (8021e44 <dhcp_reboot.isra.0+0x1d8>)
 8021d48:	4b3f      	ldr	r3, [pc, #252]	; (8021e48 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021d4a:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021d4e:	d80c      	bhi.n	8021d6a <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 8021d50:	1c62      	adds	r2, r4, #1
 8021d52:	f806 b004 	strb.w	fp, [r6, r4]
 8021d56:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021d58:	4a3c      	ldr	r2, [pc, #240]	; (8021e4c <dhcp_reboot.isra.0+0x1e0>)
 8021d5a:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021d5c:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021d60:	d00b      	beq.n	8021d7a <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021d62:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021d64:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021d68:	d9f2      	bls.n	8021d50 <dhcp_reboot.isra.0+0xe4>
 8021d6a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021d6e:	4838      	ldr	r0, [pc, #224]	; (8021e50 <dhcp_reboot.isra.0+0x1e4>)
 8021d70:	f004 fcb0 	bl	80266d4 <iprintf>
 8021d74:	4b34      	ldr	r3, [pc, #208]	; (8021e48 <dhcp_reboot.isra.0+0x1dc>)
 8021d76:	4933      	ldr	r1, [pc, #204]	; (8021e44 <dhcp_reboot.isra.0+0x1d8>)
 8021d78:	e7ea      	b.n	8021d50 <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8021d7a:	1de8      	adds	r0, r5, #7
 8021d7c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8021d80:	22ff      	movs	r2, #255	; 0xff
 8021d82:	b280      	uxth	r0, r0
 8021d84:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021d86:	2843      	cmp	r0, #67	; 0x43
 8021d88:	d808      	bhi.n	8021d9c <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8021d8a:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 8021d8e:	4430      	add	r0, r6
 8021d90:	2100      	movs	r1, #0
 8021d92:	b2ad      	uxth	r5, r5
 8021d94:	1c6a      	adds	r2, r5, #1
 8021d96:	f003 fcff 	bl	8025798 <memset>
 8021d9a:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021d9c:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021da0:	4638      	mov	r0, r7
 8021da2:	b289      	uxth	r1, r1
 8021da4:	f7fa fab4 	bl	801c310 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021da8:	482a      	ldr	r0, [pc, #168]	; (8021e54 <dhcp_reboot.isra.0+0x1e8>)
 8021daa:	2343      	movs	r3, #67	; 0x43
 8021dac:	4a2a      	ldr	r2, [pc, #168]	; (8021e58 <dhcp_reboot.isra.0+0x1ec>)
 8021dae:	6800      	ldr	r0, [r0, #0]
 8021db0:	4639      	mov	r1, r7
 8021db2:	f8cd 9000 	str.w	r9, [sp]
 8021db6:	f7ff fba5 	bl	8021504 <udp_sendto_if>
    pbuf_free(p_out);
 8021dba:	4638      	mov	r0, r7
 8021dbc:	f7fa fbc0 	bl	801c540 <pbuf_free>
  if (dhcp->tries < 255) {
 8021dc0:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8021dc4:	2bff      	cmp	r3, #255	; 0xff
 8021dc6:	d016      	beq.n	8021df6 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 8021dc8:	3301      	adds	r3, #1
 8021dca:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021dcc:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021dce:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021dd2:	d810      	bhi.n	8021df6 <dhcp_reboot.isra.0+0x18a>
 8021dd4:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021dd8:	4a20      	ldr	r2, [pc, #128]	; (8021e5c <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021dda:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8021dde:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021de0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021de4:	b29b      	uxth	r3, r3
 8021de6:	fba2 2303 	umull	r2, r3, r2, r3
 8021dea:	095b      	lsrs	r3, r3, #5
 8021dec:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8021df0:	b007      	add	sp, #28
 8021df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8021df6:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021df8:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8021dfc:	b007      	add	sp, #28
 8021dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021e02:	4b11      	ldr	r3, [pc, #68]	; (8021e48 <dhcp_reboot.isra.0+0x1dc>)
 8021e04:	f240 529a 	movw	r2, #1434	; 0x59a
 8021e08:	4915      	ldr	r1, [pc, #84]	; (8021e60 <dhcp_reboot.isra.0+0x1f4>)
 8021e0a:	4811      	ldr	r0, [pc, #68]	; (8021e50 <dhcp_reboot.isra.0+0x1e4>)
 8021e0c:	f004 fc62 	bl	80266d4 <iprintf>
 8021e10:	e754      	b.n	8021cbc <dhcp_reboot.isra.0+0x50>
 8021e12:	4b0d      	ldr	r3, [pc, #52]	; (8021e48 <dhcp_reboot.isra.0+0x1dc>)
 8021e14:	f240 529a 	movw	r2, #1434	; 0x59a
 8021e18:	4911      	ldr	r1, [pc, #68]	; (8021e60 <dhcp_reboot.isra.0+0x1f4>)
 8021e1a:	480d      	ldr	r0, [pc, #52]	; (8021e50 <dhcp_reboot.isra.0+0x1e4>)
 8021e1c:	f004 fc5a 	bl	80266d4 <iprintf>
 8021e20:	e784      	b.n	8021d2c <dhcp_reboot.isra.0+0xc0>
 8021e22:	4b09      	ldr	r3, [pc, #36]	; (8021e48 <dhcp_reboot.isra.0+0x1dc>)
 8021e24:	f240 529a 	movw	r2, #1434	; 0x59a
 8021e28:	490d      	ldr	r1, [pc, #52]	; (8021e60 <dhcp_reboot.isra.0+0x1f4>)
 8021e2a:	4809      	ldr	r0, [pc, #36]	; (8021e50 <dhcp_reboot.isra.0+0x1e4>)
 8021e2c:	f004 fc52 	bl	80266d4 <iprintf>
 8021e30:	e762      	b.n	8021cf8 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021e32:	4b05      	ldr	r3, [pc, #20]	; (8021e48 <dhcp_reboot.isra.0+0x1dc>)
 8021e34:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021e38:	490a      	ldr	r1, [pc, #40]	; (8021e64 <dhcp_reboot.isra.0+0x1f8>)
 8021e3a:	4805      	ldr	r0, [pc, #20]	; (8021e50 <dhcp_reboot.isra.0+0x1e4>)
 8021e3c:	f004 fc4a 	bl	80266d4 <iprintf>
 8021e40:	e74b      	b.n	8021cda <dhcp_reboot.isra.0+0x6e>
 8021e42:	bf00      	nop
 8021e44:	08046dac 	.word	0x08046dac
 8021e48:	08046bb8 	.word	0x08046bb8
 8021e4c:	08046f34 	.word	0x08046f34
 8021e50:	0802b3cc 	.word	0x0802b3cc
 8021e54:	2002e508 	.word	0x2002e508
 8021e58:	08047270 	.word	0x08047270
 8021e5c:	10624dd3 	.word	0x10624dd3
 8021e60:	08046d2c 	.word	0x08046d2c
 8021e64:	08046d70 	.word	0x08046d70
 8021e68:	08046f31 	.word	0x08046f31

08021e6c <dhcp_discover>:
{
 8021e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021e70:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8021e72:	2300      	movs	r3, #0
{
 8021e74:	b087      	sub	sp, #28
 8021e76:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8021e78:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8021e7a:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 8021e7c:	2a06      	cmp	r2, #6
 8021e7e:	d003      	beq.n	8021e88 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 8021e80:	2206      	movs	r2, #6
    dhcp->tries = 0;
 8021e82:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 8021e84:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 8021e86:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8021e88:	f10d 0316 	add.w	r3, sp, #22
 8021e8c:	2201      	movs	r2, #1
 8021e8e:	4639      	mov	r1, r7
 8021e90:	4658      	mov	r0, fp
 8021e92:	f7ff fe39 	bl	8021b08 <dhcp_create_msg>
  if (p_out != NULL) {
 8021e96:	4605      	mov	r5, r0
 8021e98:	2800      	cmp	r0, #0
 8021e9a:	f000 8081 	beq.w	8021fa0 <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021e9e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021ea2:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021ea4:	f104 0804 	add.w	r8, r4, #4
 8021ea8:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021eac:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021eae:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021eb2:	f200 809a 	bhi.w	8021fea <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 8021eb6:	2239      	movs	r2, #57	; 0x39
 8021eb8:	1c63      	adds	r3, r4, #1
 8021eba:	fa1f f189 	uxth.w	r1, r9
 8021ebe:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021ec0:	b29b      	uxth	r3, r3
 8021ec2:	2202      	movs	r2, #2
 8021ec4:	9103      	str	r1, [sp, #12]
 8021ec6:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021ec8:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021eca:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021ece:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021ed0:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021ed4:	f200 8091 	bhi.w	8021ffa <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021ed8:	1ce3      	adds	r3, r4, #3
 8021eda:	fa1f f988 	uxth.w	r9, r8
 8021ede:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021ee2:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021ee4:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021ee6:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021ee8:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021eec:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021ef0:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021ef4:	2b44      	cmp	r3, #68	; 0x44
 8021ef6:	d870      	bhi.n	8021fda <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 8021ef8:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8021efc:	2237      	movs	r2, #55	; 0x37
 8021efe:	1d63      	adds	r3, r4, #5
 8021f00:	f8df a130 	ldr.w	sl, [pc, #304]	; 8022034 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 8021f04:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8021f08:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8021f0c:	b29b      	uxth	r3, r3
 8021f0e:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f10:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021f14:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8021f18:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f1a:	493c      	ldr	r1, [pc, #240]	; (802200c <dhcp_discover+0x1a0>)
 8021f1c:	4b3c      	ldr	r3, [pc, #240]	; (8022010 <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021f1e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f22:	d80f      	bhi.n	8021f44 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 8021f24:	f108 0201 	add.w	r2, r8, #1
 8021f28:	f806 9008 	strb.w	r9, [r6, r8]
 8021f2c:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021f30:	4a38      	ldr	r2, [pc, #224]	; (8022014 <dhcp_discover+0x1a8>)
 8021f32:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021f34:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021f38:	d00c      	beq.n	8021f54 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f3a:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021f3e:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f42:	d9ef      	bls.n	8021f24 <dhcp_discover+0xb8>
 8021f44:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021f48:	4833      	ldr	r0, [pc, #204]	; (8022018 <dhcp_discover+0x1ac>)
 8021f4a:	f004 fbc3 	bl	80266d4 <iprintf>
 8021f4e:	4b30      	ldr	r3, [pc, #192]	; (8022010 <dhcp_discover+0x1a4>)
 8021f50:	492e      	ldr	r1, [pc, #184]	; (802200c <dhcp_discover+0x1a0>)
 8021f52:	e7e7      	b.n	8021f24 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 8021f54:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8021f58:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8021f5c:	22ff      	movs	r2, #255	; 0xff
 8021f5e:	b280      	uxth	r0, r0
 8021f60:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021f62:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021f64:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021f66:	d808      	bhi.n	8021f7a <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 8021f68:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8021f6c:	4430      	add	r0, r6
 8021f6e:	2100      	movs	r1, #0
 8021f70:	b2a4      	uxth	r4, r4
 8021f72:	1c62      	adds	r2, r4, #1
 8021f74:	f003 fc10 	bl	8025798 <memset>
 8021f78:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021f7a:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021f7e:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021f80:	4c26      	ldr	r4, [pc, #152]	; (802201c <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021f82:	b289      	uxth	r1, r1
 8021f84:	f7fa f9c4 	bl	801c310 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021f88:	4825      	ldr	r0, [pc, #148]	; (8022020 <dhcp_discover+0x1b4>)
 8021f8a:	2343      	movs	r3, #67	; 0x43
 8021f8c:	4a25      	ldr	r2, [pc, #148]	; (8022024 <dhcp_discover+0x1b8>)
 8021f8e:	6800      	ldr	r0, [r0, #0]
 8021f90:	4629      	mov	r1, r5
 8021f92:	e9cd b400 	strd	fp, r4, [sp]
 8021f96:	f7ff fa01 	bl	802139c <udp_sendto_if_src>
    pbuf_free(p_out);
 8021f9a:	4628      	mov	r0, r5
 8021f9c:	f7fa fad0 	bl	801c540 <pbuf_free>
  if (dhcp->tries < 255) {
 8021fa0:	79bb      	ldrb	r3, [r7, #6]
 8021fa2:	2bff      	cmp	r3, #255	; 0xff
 8021fa4:	d013      	beq.n	8021fce <dhcp_discover+0x162>
    dhcp->tries++;
 8021fa6:	3301      	adds	r3, #1
 8021fa8:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8021faa:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8021fac:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8021fae:	d80e      	bhi.n	8021fce <dhcp_discover+0x162>
 8021fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021fb4:	491c      	ldr	r1, [pc, #112]	; (8022028 <dhcp_discover+0x1bc>)
}
 8021fb6:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8021fb8:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021fba:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021fbe:	b29b      	uxth	r3, r3
 8021fc0:	fba1 2303 	umull	r2, r3, r1, r3
 8021fc4:	095b      	lsrs	r3, r3, #5
 8021fc6:	813b      	strh	r3, [r7, #8]
}
 8021fc8:	b007      	add	sp, #28
 8021fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8021fce:	2378      	movs	r3, #120	; 0x78
}
 8021fd0:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021fd2:	813b      	strh	r3, [r7, #8]
}
 8021fd4:	b007      	add	sp, #28
 8021fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021fda:	4b0d      	ldr	r3, [pc, #52]	; (8022010 <dhcp_discover+0x1a4>)
 8021fdc:	f240 529a 	movw	r2, #1434	; 0x59a
 8021fe0:	4912      	ldr	r1, [pc, #72]	; (802202c <dhcp_discover+0x1c0>)
 8021fe2:	480d      	ldr	r0, [pc, #52]	; (8022018 <dhcp_discover+0x1ac>)
 8021fe4:	f004 fb76 	bl	80266d4 <iprintf>
 8021fe8:	e786      	b.n	8021ef8 <dhcp_discover+0x8c>
 8021fea:	4b09      	ldr	r3, [pc, #36]	; (8022010 <dhcp_discover+0x1a4>)
 8021fec:	f240 529a 	movw	r2, #1434	; 0x59a
 8021ff0:	490e      	ldr	r1, [pc, #56]	; (802202c <dhcp_discover+0x1c0>)
 8021ff2:	4809      	ldr	r0, [pc, #36]	; (8022018 <dhcp_discover+0x1ac>)
 8021ff4:	f004 fb6e 	bl	80266d4 <iprintf>
 8021ff8:	e75d      	b.n	8021eb6 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021ffa:	4b05      	ldr	r3, [pc, #20]	; (8022010 <dhcp_discover+0x1a4>)
 8021ffc:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8022000:	490b      	ldr	r1, [pc, #44]	; (8022030 <dhcp_discover+0x1c4>)
 8022002:	4805      	ldr	r0, [pc, #20]	; (8022018 <dhcp_discover+0x1ac>)
 8022004:	f004 fb66 	bl	80266d4 <iprintf>
 8022008:	e766      	b.n	8021ed8 <dhcp_discover+0x6c>
 802200a:	bf00      	nop
 802200c:	08046dac 	.word	0x08046dac
 8022010:	08046bb8 	.word	0x08046bb8
 8022014:	08046f34 	.word	0x08046f34
 8022018:	0802b3cc 	.word	0x0802b3cc
 802201c:	0804726c 	.word	0x0804726c
 8022020:	2002e508 	.word	0x2002e508
 8022024:	08047270 	.word	0x08047270
 8022028:	10624dd3 	.word	0x10624dd3
 802202c:	08046d2c 	.word	0x08046d2c
 8022030:	08046d70 	.word	0x08046d70
 8022034:	08046f31 	.word	0x08046f31

08022038 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8022038:	2800      	cmp	r0, #0
 802203a:	f000 8112 	beq.w	8022262 <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 802203e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 8022042:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 8022044:	b087      	sub	sp, #28
 8022046:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8022048:	2e00      	cmp	r6, #0
 802204a:	f000 8111 	beq.w	8022270 <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 802204e:	7973      	ldrb	r3, [r6, #5]
 8022050:	2b01      	cmp	r3, #1
 8022052:	d004      	beq.n	802205e <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 8022054:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8022056:	2201      	movs	r2, #1
    dhcp->tries = 0;
 8022058:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 802205a:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 802205c:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802205e:	f10d 0316 	add.w	r3, sp, #22
 8022062:	2203      	movs	r2, #3
 8022064:	4631      	mov	r1, r6
 8022066:	4658      	mov	r0, fp
 8022068:	f7ff fd4e 	bl	8021b08 <dhcp_create_msg>
  if (p_out != NULL) {
 802206c:	4605      	mov	r5, r0
 802206e:	2800      	cmp	r0, #0
 8022070:	f000 80b4 	beq.w	80221dc <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022074:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8022078:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802207a:	f107 0804 	add.w	r8, r7, #4
 802207e:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022082:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022084:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8022088:	f200 80cb 	bhi.w	8022222 <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 802208c:	2239      	movs	r2, #57	; 0x39
 802208e:	1c7b      	adds	r3, r7, #1
 8022090:	fa1f f189 	uxth.w	r1, r9
 8022094:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8022096:	b29b      	uxth	r3, r3
 8022098:	2202      	movs	r2, #2
 802209a:	9103      	str	r1, [sp, #12]
 802209c:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802209e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80220a0:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80220a4:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80220a6:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80220aa:	f200 80c2 	bhi.w	8022232 <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80220ae:	1cfb      	adds	r3, r7, #3
 80220b0:	fa1f f988 	uxth.w	r9, r8
 80220b4:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80220b8:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80220ba:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80220bc:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80220be:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80220c2:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80220c6:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80220ca:	2b44      	cmp	r3, #68	; 0x44
 80220cc:	f200 80b9 	bhi.w	8022242 <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 80220d0:	1d7b      	adds	r3, r7, #5
 80220d2:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 80220d4:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 80220d6:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 80220da:	b29b      	uxth	r3, r3
 80220dc:	2204      	movs	r2, #4
 80220de:	b2bf      	uxth	r7, r7
 80220e0:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80220e2:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80220e4:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80220e8:	f7f8 f9f2 	bl	801a4d0 <lwip_htonl>
 80220ec:	4621      	mov	r1, r4
 80220ee:	4602      	mov	r2, r0
 80220f0:	4638      	mov	r0, r7
 80220f2:	f7ff fb69 	bl	80217c8 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80220f6:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80220f8:	4607      	mov	r7, r0
 80220fa:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80220fe:	2b44      	cmp	r3, #68	; 0x44
 8022100:	f200 80a7 	bhi.w	8022252 <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 8022104:	2236      	movs	r2, #54	; 0x36
 8022106:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 8022108:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 802210c:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 802210e:	b29b      	uxth	r3, r3
 8022110:	2204      	movs	r2, #4
 8022112:	fa1f f888 	uxth.w	r8, r8
 8022116:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8022118:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 802211a:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 802211e:	f7f8 f9d7 	bl	801a4d0 <lwip_htonl>
 8022122:	4621      	mov	r1, r4
 8022124:	4602      	mov	r2, r0
 8022126:	4640      	mov	r0, r8
 8022128:	f7ff fb4e 	bl	80217c8 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802212c:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 802212e:	4680      	mov	r8, r0
 8022130:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022134:	2b44      	cmp	r3, #68	; 0x44
 8022136:	9303      	str	r3, [sp, #12]
 8022138:	d86b      	bhi.n	8022212 <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 802213a:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 802213e:	2237      	movs	r2, #55	; 0x37
 8022140:	f108 0301 	add.w	r3, r8, #1
 8022144:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80222b4 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 8022148:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 802214a:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 802214e:	b29b      	uxth	r3, r3
 8022150:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022152:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022154:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8022158:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802215a:	494a      	ldr	r1, [pc, #296]	; (8022284 <dhcp_select.isra.0+0x24c>)
 802215c:	4b4a      	ldr	r3, [pc, #296]	; (8022288 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802215e:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022162:	d80c      	bhi.n	802217e <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 8022164:	1c7a      	adds	r2, r7, #1
 8022166:	f804 a007 	strb.w	sl, [r4, r7]
 802216a:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802216c:	4a47      	ldr	r2, [pc, #284]	; (802228c <dhcp_select.isra.0+0x254>)
 802216e:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022170:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022174:	d00b      	beq.n	802218e <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022176:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022178:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802217c:	d9f2      	bls.n	8022164 <dhcp_select.isra.0+0x12c>
 802217e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8022182:	4843      	ldr	r0, [pc, #268]	; (8022290 <dhcp_select.isra.0+0x258>)
 8022184:	f004 faa6 	bl	80266d4 <iprintf>
 8022188:	4b3f      	ldr	r3, [pc, #252]	; (8022288 <dhcp_select.isra.0+0x250>)
 802218a:	493e      	ldr	r1, [pc, #248]	; (8022284 <dhcp_select.isra.0+0x24c>)
 802218c:	e7ea      	b.n	8022164 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 802218e:	f108 0007 	add.w	r0, r8, #7
 8022192:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8022196:	22ff      	movs	r2, #255	; 0xff
 8022198:	b280      	uxth	r0, r0
 802219a:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802219c:	2843      	cmp	r0, #67	; 0x43
 802219e:	d80a      	bhi.n	80221b6 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 80221a0:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 80221a4:	4420      	add	r0, r4
 80221a6:	2100      	movs	r1, #0
 80221a8:	fa1f f888 	uxth.w	r8, r8
 80221ac:	f108 0201 	add.w	r2, r8, #1
 80221b0:	f003 faf2 	bl	8025798 <memset>
 80221b4:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80221b6:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80221ba:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80221bc:	4c35      	ldr	r4, [pc, #212]	; (8022294 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80221be:	b289      	uxth	r1, r1
 80221c0:	f7fa f8a6 	bl	801c310 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80221c4:	4834      	ldr	r0, [pc, #208]	; (8022298 <dhcp_select.isra.0+0x260>)
 80221c6:	2343      	movs	r3, #67	; 0x43
 80221c8:	4a34      	ldr	r2, [pc, #208]	; (802229c <dhcp_select.isra.0+0x264>)
 80221ca:	6800      	ldr	r0, [r0, #0]
 80221cc:	4629      	mov	r1, r5
 80221ce:	e9cd b400 	strd	fp, r4, [sp]
 80221d2:	f7ff f8e3 	bl	802139c <udp_sendto_if_src>
    pbuf_free(p_out);
 80221d6:	4628      	mov	r0, r5
 80221d8:	f7fa f9b2 	bl	801c540 <pbuf_free>
  if (dhcp->tries < 255) {
 80221dc:	79b3      	ldrb	r3, [r6, #6]
 80221de:	2bff      	cmp	r3, #255	; 0xff
 80221e0:	d012      	beq.n	8022208 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 80221e2:	3301      	adds	r3, #1
 80221e4:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80221e6:	2a05      	cmp	r2, #5
    dhcp->tries++;
 80221e8:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80221ea:	d80d      	bhi.n	8022208 <dhcp_select.isra.0+0x1d0>
 80221ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80221f0:	492b      	ldr	r1, [pc, #172]	; (80222a0 <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80221f2:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80221f4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80221f8:	b29b      	uxth	r3, r3
 80221fa:	fba1 2303 	umull	r2, r3, r1, r3
 80221fe:	095b      	lsrs	r3, r3, #5
 8022200:	8133      	strh	r3, [r6, #8]
}
 8022202:	b007      	add	sp, #28
 8022204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8022208:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802220a:	8133      	strh	r3, [r6, #8]
}
 802220c:	b007      	add	sp, #28
 802220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022212:	4b1d      	ldr	r3, [pc, #116]	; (8022288 <dhcp_select.isra.0+0x250>)
 8022214:	f240 529a 	movw	r2, #1434	; 0x59a
 8022218:	4922      	ldr	r1, [pc, #136]	; (80222a4 <dhcp_select.isra.0+0x26c>)
 802221a:	481d      	ldr	r0, [pc, #116]	; (8022290 <dhcp_select.isra.0+0x258>)
 802221c:	f004 fa5a 	bl	80266d4 <iprintf>
 8022220:	e78b      	b.n	802213a <dhcp_select.isra.0+0x102>
 8022222:	4b19      	ldr	r3, [pc, #100]	; (8022288 <dhcp_select.isra.0+0x250>)
 8022224:	f240 529a 	movw	r2, #1434	; 0x59a
 8022228:	491e      	ldr	r1, [pc, #120]	; (80222a4 <dhcp_select.isra.0+0x26c>)
 802222a:	4819      	ldr	r0, [pc, #100]	; (8022290 <dhcp_select.isra.0+0x258>)
 802222c:	f004 fa52 	bl	80266d4 <iprintf>
 8022230:	e72c      	b.n	802208c <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022232:	4b15      	ldr	r3, [pc, #84]	; (8022288 <dhcp_select.isra.0+0x250>)
 8022234:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8022238:	491b      	ldr	r1, [pc, #108]	; (80222a8 <dhcp_select.isra.0+0x270>)
 802223a:	4815      	ldr	r0, [pc, #84]	; (8022290 <dhcp_select.isra.0+0x258>)
 802223c:	f004 fa4a 	bl	80266d4 <iprintf>
 8022240:	e735      	b.n	80220ae <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022242:	4b11      	ldr	r3, [pc, #68]	; (8022288 <dhcp_select.isra.0+0x250>)
 8022244:	f240 529a 	movw	r2, #1434	; 0x59a
 8022248:	4916      	ldr	r1, [pc, #88]	; (80222a4 <dhcp_select.isra.0+0x26c>)
 802224a:	4811      	ldr	r0, [pc, #68]	; (8022290 <dhcp_select.isra.0+0x258>)
 802224c:	f004 fa42 	bl	80266d4 <iprintf>
 8022250:	e73e      	b.n	80220d0 <dhcp_select.isra.0+0x98>
 8022252:	4b0d      	ldr	r3, [pc, #52]	; (8022288 <dhcp_select.isra.0+0x250>)
 8022254:	f240 529a 	movw	r2, #1434	; 0x59a
 8022258:	4912      	ldr	r1, [pc, #72]	; (80222a4 <dhcp_select.isra.0+0x26c>)
 802225a:	480d      	ldr	r0, [pc, #52]	; (8022290 <dhcp_select.isra.0+0x258>)
 802225c:	f004 fa3a 	bl	80266d4 <iprintf>
 8022260:	e750      	b.n	8022104 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8022262:	4b09      	ldr	r3, [pc, #36]	; (8022288 <dhcp_select.isra.0+0x250>)
 8022264:	f240 1277 	movw	r2, #375	; 0x177
 8022268:	4910      	ldr	r1, [pc, #64]	; (80222ac <dhcp_select.isra.0+0x274>)
 802226a:	4809      	ldr	r0, [pc, #36]	; (8022290 <dhcp_select.isra.0+0x258>)
 802226c:	f004 ba32 	b.w	80266d4 <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8022270:	4b05      	ldr	r3, [pc, #20]	; (8022288 <dhcp_select.isra.0+0x250>)
 8022272:	f240 1279 	movw	r2, #377	; 0x179
 8022276:	490e      	ldr	r1, [pc, #56]	; (80222b0 <dhcp_select.isra.0+0x278>)
 8022278:	4805      	ldr	r0, [pc, #20]	; (8022290 <dhcp_select.isra.0+0x258>)
}
 802227a:	b007      	add	sp, #28
 802227c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8022280:	f004 ba28 	b.w	80266d4 <iprintf>
 8022284:	08046dac 	.word	0x08046dac
 8022288:	08046bb8 	.word	0x08046bb8
 802228c:	08046f34 	.word	0x08046f34
 8022290:	0802b3cc 	.word	0x0802b3cc
 8022294:	0804726c 	.word	0x0804726c
 8022298:	2002e508 	.word	0x2002e508
 802229c:	08047270 	.word	0x08047270
 80222a0:	10624dd3 	.word	0x10624dd3
 80222a4:	08046d2c 	.word	0x08046d2c
 80222a8:	08046d70 	.word	0x08046d70
 80222ac:	08046de4 	.word	0x08046de4
 80222b0:	08046e00 	.word	0x08046e00
 80222b4:	08046f31 	.word	0x08046f31

080222b8 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 80222b8:	4ba5      	ldr	r3, [pc, #660]	; (8022550 <dhcp_recv+0x298>)
{
 80222ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 80222be:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 80222c2:	b08b      	sub	sp, #44	; 0x2c
 80222c4:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80222c6:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80222ca:	f1b9 0f00 	cmp.w	r9, #0
 80222ce:	d04b      	beq.n	8022368 <dhcp_recv+0xb0>
 80222d0:	f899 3004 	ldrb.w	r3, [r9, #4]
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d047      	beq.n	8022368 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80222d8:	8953      	ldrh	r3, [r2, #10]
 80222da:	2b2b      	cmp	r3, #43	; 0x2b
 80222dc:	d944      	bls.n	8022368 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80222de:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80222e0:	782b      	ldrb	r3, [r5, #0]
 80222e2:	2b02      	cmp	r3, #2
 80222e4:	d140      	bne.n	8022368 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80222e6:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 80222ea:	b186      	cbz	r6, 802230e <dhcp_recv+0x56>
 80222ec:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 80222f0:	f105 021c 	add.w	r2, r5, #28
 80222f4:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80222f6:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80222fa:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80222fc:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022300:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8022302:	4284      	cmp	r4, r0
 8022304:	d130      	bne.n	8022368 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022306:	2b06      	cmp	r3, #6
 8022308:	d001      	beq.n	802230e <dhcp_recv+0x56>
 802230a:	42b3      	cmp	r3, r6
 802230c:	d3f3      	bcc.n	80222f6 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 802230e:	6868      	ldr	r0, [r5, #4]
 8022310:	f7f8 f8de 	bl	801a4d0 <lwip_htonl>
 8022314:	f8d9 3000 	ldr.w	r3, [r9]
 8022318:	4298      	cmp	r0, r3
 802231a:	d125      	bne.n	8022368 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 802231c:	4b8d      	ldr	r3, [pc, #564]	; (8022554 <dhcp_recv+0x29c>)
 802231e:	2200      	movs	r2, #0
 8022320:	605a      	str	r2, [r3, #4]
 8022322:	811a      	strh	r2, [r3, #8]
 8022324:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8022326:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 802232a:	2b2b      	cmp	r3, #43	; 0x2b
 802232c:	d91c      	bls.n	8022368 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 802232e:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 8022332:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 8022334:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8022338:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 802233c:	4693      	mov	fp, r2
 802233e:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 8022342:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 8022346:	e000      	b.n	802234a <dhcp_recv+0x92>
 8022348:	896b      	ldrh	r3, [r5, #10]
 802234a:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 802234c:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8022350:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8022354:	d80e      	bhi.n	8022374 <dhcp_recv+0xbc>
    q = q->next;
 8022356:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8022358:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 802235c:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8022360:	2d00      	cmp	r5, #0
 8022362:	d1f1      	bne.n	8022348 <dhcp_recv+0x90>
 8022364:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 8022368:	4658      	mov	r0, fp
}
 802236a:	b00b      	add	sp, #44	; 0x2c
 802236c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8022370:	f7fa b8e6 	b.w	801c540 <pbuf_free>
  options = (u8_t *)q->payload;
 8022374:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8022376:	45d8      	cmp	r8, fp
 8022378:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 802237c:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802237e:	f080 8140 	bcs.w	8022602 <dhcp_recv+0x34a>
 8022382:	9c02      	ldr	r4, [sp, #8]
 8022384:	9b01      	ldr	r3, [sp, #4]
 8022386:	5d1a      	ldrb	r2, [r3, r4]
 8022388:	2aff      	cmp	r2, #255	; 0xff
 802238a:	f000 813a 	beq.w	8022602 <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 802238e:	1ca7      	adds	r7, r4, #2
 8022390:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 8022392:	42bc      	cmp	r4, r7
 8022394:	d8e6      	bhi.n	8022364 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 8022396:	1c61      	adds	r1, r4, #1
 8022398:	896b      	ldrh	r3, [r5, #10]
 802239a:	4299      	cmp	r1, r3
 802239c:	f280 8129 	bge.w	80225f2 <dhcp_recv+0x33a>
      len = options[offset + 1];
 80223a0:	9801      	ldr	r0, [sp, #4]
 80223a2:	4420      	add	r0, r4
 80223a4:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 80223a6:	2a3b      	cmp	r2, #59	; 0x3b
 80223a8:	d83e      	bhi.n	8022428 <dhcp_recv+0x170>
 80223aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80223ae:	0040      	.short	0x0040
 80223b0:	003d0053 	.word	0x003d0053
 80223b4:	003d00b4 	.word	0x003d00b4
 80223b8:	009f003d 	.word	0x009f003d
 80223bc:	003d003d 	.word	0x003d003d
 80223c0:	003d003d 	.word	0x003d003d
 80223c4:	003d003d 	.word	0x003d003d
 80223c8:	003d003d 	.word	0x003d003d
 80223cc:	003d003d 	.word	0x003d003d
 80223d0:	003d003d 	.word	0x003d003d
 80223d4:	003d003d 	.word	0x003d003d
 80223d8:	003d003d 	.word	0x003d003d
 80223dc:	003d003d 	.word	0x003d003d
 80223e0:	003d003d 	.word	0x003d003d
 80223e4:	003d003d 	.word	0x003d003d
 80223e8:	003d003d 	.word	0x003d003d
 80223ec:	003d003d 	.word	0x003d003d
 80223f0:	003d003d 	.word	0x003d003d
 80223f4:	003d003d 	.word	0x003d003d
 80223f8:	003d003d 	.word	0x003d003d
 80223fc:	003d003d 	.word	0x003d003d
 8022400:	003d003d 	.word	0x003d003d
 8022404:	003d003d 	.word	0x003d003d
 8022408:	003d003d 	.word	0x003d003d
 802240c:	003d003d 	.word	0x003d003d
 8022410:	003d003d 	.word	0x003d003d
 8022414:	00f80115 	.word	0x00f80115
 8022418:	00df0109 	.word	0x00df0109
 802241c:	003d003d 	.word	0x003d003d
 8022420:	00ec003d 	.word	0x00ec003d
 8022424:	00c3      	.short	0x00c3
 8022426:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 8022428:	2a00      	cmp	r2, #0
 802242a:	f040 82a2 	bne.w	8022972 <dhcp_recv+0x6ba>
      offset++;
 802242e:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 8022430:	429c      	cmp	r4, r3
 8022432:	f0c0 80e3 	bcc.w	80225fc <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 8022436:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8022438:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 802243c:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 802243e:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 8022442:	455c      	cmp	r4, fp
 8022444:	d28e      	bcs.n	8022364 <dhcp_recv+0xac>
        q = q->next;
 8022446:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8022448:	2d00      	cmp	r5, #0
 802244a:	f000 81e1 	beq.w	8022810 <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 802244e:	686b      	ldr	r3, [r5, #4]
 8022450:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8022452:	e797      	b.n	8022384 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022454:	2e04      	cmp	r6, #4
 8022456:	f040 81b5 	bne.w	80227c4 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 802245a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802245e:	429c      	cmp	r4, r3
 8022460:	dc80      	bgt.n	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022462:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8022464:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 8022468:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 802246a:	2300      	movs	r3, #0
 802246c:	9405      	str	r4, [sp, #20]
 802246e:	9309      	str	r3, [sp, #36]	; 0x24
 8022470:	4b38      	ldr	r3, [pc, #224]	; (8022554 <dhcp_recv+0x29c>)
 8022472:	eb03 0908 	add.w	r9, r3, r8
 8022476:	4b38      	ldr	r3, [pc, #224]	; (8022558 <dhcp_recv+0x2a0>)
 8022478:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 802247c:	e02b      	b.n	80224d6 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 802247e:	f899 3000 	ldrb.w	r3, [r9]
 8022482:	2b00      	cmp	r3, #0
 8022484:	f040 81a8 	bne.w	80227d8 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 8022488:	2e04      	cmp	r6, #4
 802248a:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 802248c:	463b      	mov	r3, r7
 802248e:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 8022490:	bf28      	it	cs
 8022492:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8022494:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 8022496:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8022498:	4622      	mov	r2, r4
 802249a:	f7fa f8f5 	bl	801c688 <pbuf_copy_partial>
 802249e:	4284      	cmp	r4, r0
 80224a0:	f47f af60 	bne.w	8022364 <dhcp_recv+0xac>
          if (decode_len > 4) {
 80224a4:	2e04      	cmp	r6, #4
 80224a6:	f240 819a 	bls.w	80227de <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80224aa:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 80224ae:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80224b2:	f040 81a3 	bne.w	80227fc <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 80224b6:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80224b8:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 80224ba:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 80224bc:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80224c0:	f7f8 f806 	bl	801a4d0 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 80224c4:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 80224c6:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80224c8:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 80224cc:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 80224ce:	429f      	cmp	r7, r3
            goto decode_next;
 80224d0:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 80224d2:	f63f af47 	bhi.w	8022364 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80224d6:	f1b8 0f09 	cmp.w	r8, #9
 80224da:	d9d0      	bls.n	802247e <dhcp_recv+0x1c6>
 80224dc:	4b1f      	ldr	r3, [pc, #124]	; (802255c <dhcp_recv+0x2a4>)
 80224de:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80224e2:	491f      	ldr	r1, [pc, #124]	; (8022560 <dhcp_recv+0x2a8>)
 80224e4:	481f      	ldr	r0, [pc, #124]	; (8022564 <dhcp_recv+0x2ac>)
 80224e6:	f004 f8f5 	bl	80266d4 <iprintf>
 80224ea:	e7c8      	b.n	802247e <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80224ec:	07b2      	lsls	r2, r6, #30
 80224ee:	f040 81ae 	bne.w	802284e <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80224f2:	2e08      	cmp	r6, #8
 80224f4:	4632      	mov	r2, r6
 80224f6:	bf28      	it	cs
 80224f8:	2208      	movcs	r2, #8
 80224fa:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80224fc:	42b2      	cmp	r2, r6
 80224fe:	f240 8241 	bls.w	8022984 <dhcp_recv+0x6cc>
 8022502:	4b16      	ldr	r3, [pc, #88]	; (802255c <dhcp_recv+0x2a4>)
 8022504:	f240 623c 	movw	r2, #1596	; 0x63c
 8022508:	4917      	ldr	r1, [pc, #92]	; (8022568 <dhcp_recv+0x2b0>)
 802250a:	4816      	ldr	r0, [pc, #88]	; (8022564 <dhcp_recv+0x2ac>)
 802250c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022510:	f004 f8e0 	bl	80266d4 <iprintf>
 8022514:	e728      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8022516:	2e03      	cmp	r6, #3
 8022518:	f240 814a 	bls.w	80227b0 <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 802251c:	4434      	add	r4, r6
 802251e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8022522:	429c      	cmp	r4, r3
 8022524:	f73f af1e 	bgt.w	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022528:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 802252a:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 802252e:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 8022530:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022532:	e79a      	b.n	802246a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022534:	2e04      	cmp	r6, #4
 8022536:	f040 8131 	bne.w	802279c <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 802253a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802253e:	429c      	cmp	r4, r3
 8022540:	f73f af10 	bgt.w	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022544:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 8022546:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 802254a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802254c:	e78d      	b.n	802246a <dhcp_recv+0x1b2>
 802254e:	bf00      	nop
 8022550:	2001f300 	.word	0x2001f300
 8022554:	2002e510 	.word	0x2002e510
 8022558:	2002e51c 	.word	0x2002e51c
 802255c:	08046bb8 	.word	0x08046bb8
 8022560:	08046e70 	.word	0x08046e70
 8022564:	0802b3cc 	.word	0x0802b3cc
 8022568:	08046e28 	.word	0x08046e28
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802256c:	2e04      	cmp	r6, #4
 802256e:	f040 80ed 	bne.w	802274c <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 8022572:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8022576:	429c      	cmp	r4, r3
 8022578:	f73f aef4 	bgt.w	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802257c:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 802257e:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 8022582:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022584:	e771      	b.n	802246a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022586:	2e04      	cmp	r6, #4
 8022588:	f040 80d6 	bne.w	8022738 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 802258c:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8022590:	429c      	cmp	r4, r3
 8022592:	f73f aee7 	bgt.w	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022596:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 8022598:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 802259a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802259c:	e765      	b.n	802246a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 802259e:	2e01      	cmp	r6, #1
 80225a0:	f040 80e8 	bne.w	8022774 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80225a4:	9b02      	ldr	r3, [sp, #8]
 80225a6:	2bf0      	cmp	r3, #240	; 0xf0
 80225a8:	f040 8147 	bne.w	802283a <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 80225ac:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80225b0:	4299      	cmp	r1, r3
 80225b2:	f43f aed7 	beq.w	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80225b6:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80225b8:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 80225bc:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80225be:	e754      	b.n	802246a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80225c0:	2e01      	cmp	r6, #1
 80225c2:	f040 80cd 	bne.w	8022760 <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 80225c6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80225ca:	4299      	cmp	r1, r3
 80225cc:	f43f aeca 	beq.w	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80225d0:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80225d2:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 80225d4:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80225d6:	e748      	b.n	802246a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80225d8:	2e04      	cmp	r6, #4
 80225da:	f040 80d5 	bne.w	8022788 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 80225de:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80225e2:	429c      	cmp	r4, r3
 80225e4:	f73f aebe 	bgt.w	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80225e8:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80225ea:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 80225ee:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80225f0:	e73b      	b.n	802246a <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80225f2:	6828      	ldr	r0, [r5, #0]
 80225f4:	b310      	cbz	r0, 802263c <dhcp_recv+0x384>
 80225f6:	6840      	ldr	r0, [r0, #4]
 80225f8:	7806      	ldrb	r6, [r0, #0]
 80225fa:	e6d4      	b.n	80223a6 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80225fc:	455c      	cmp	r4, fp
 80225fe:	f4ff aec1 	bcc.w	8022384 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8022602:	4bb7      	ldr	r3, [pc, #732]	; (80228e0 <dhcp_recv+0x628>)
 8022604:	781b      	ldrb	r3, [r3, #0]
 8022606:	b163      	cbz	r3, 8022622 <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8022608:	2300      	movs	r3, #0
 802260a:	4ab5      	ldr	r2, [pc, #724]	; (80228e0 <dhcp_recv+0x628>)
 802260c:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 802260e:	4bb5      	ldr	r3, [pc, #724]	; (80228e4 <dhcp_recv+0x62c>)
 8022610:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8022612:	2b01      	cmp	r3, #1
 8022614:	f000 8108 	beq.w	8022828 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8022618:	2b02      	cmp	r3, #2
 802261a:	d006      	beq.n	802262a <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 802261c:	2b03      	cmp	r3, #3
 802261e:	f000 8101 	beq.w	8022824 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 8022622:	9b04      	ldr	r3, [sp, #16]
 8022624:	2b00      	cmp	r3, #0
 8022626:	f000 811c 	beq.w	8022862 <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 802262a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 802262c:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 8022630:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 8022632:	232c      	movs	r3, #44	; 0x2c
 8022634:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 8022636:	9b03      	ldr	r3, [sp, #12]
 8022638:	895b      	ldrh	r3, [r3, #10]
 802263a:	e682      	b.n	8022342 <dhcp_recv+0x8a>
    switch (op) {
 802263c:	1e50      	subs	r0, r2, #1
 802263e:	283a      	cmp	r0, #58	; 0x3a
 8022640:	f63f aef1 	bhi.w	8022426 <dhcp_recv+0x16e>
 8022644:	a601      	add	r6, pc, #4	; (adr r6, 802264c <dhcp_recv+0x394>)
 8022646:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 802264a:	bf00      	nop
 802264c:	080227c5 	.word	0x080227c5
 8022650:	08022427 	.word	0x08022427
 8022654:	080227b1 	.word	0x080227b1
 8022658:	08022427 	.word	0x08022427
 802265c:	08022427 	.word	0x08022427
 8022660:	08022427 	.word	0x08022427
 8022664:	08022427 	.word	0x08022427
 8022668:	08022427 	.word	0x08022427
 802266c:	08022427 	.word	0x08022427
 8022670:	08022427 	.word	0x08022427
 8022674:	08022427 	.word	0x08022427
 8022678:	08022427 	.word	0x08022427
 802267c:	08022427 	.word	0x08022427
 8022680:	08022427 	.word	0x08022427
 8022684:	08022427 	.word	0x08022427
 8022688:	08022427 	.word	0x08022427
 802268c:	08022427 	.word	0x08022427
 8022690:	08022427 	.word	0x08022427
 8022694:	08022427 	.word	0x08022427
 8022698:	08022427 	.word	0x08022427
 802269c:	08022427 	.word	0x08022427
 80226a0:	08022427 	.word	0x08022427
 80226a4:	08022427 	.word	0x08022427
 80226a8:	08022427 	.word	0x08022427
 80226ac:	08022427 	.word	0x08022427
 80226b0:	08022427 	.word	0x08022427
 80226b4:	08022427 	.word	0x08022427
 80226b8:	08022427 	.word	0x08022427
 80226bc:	08022427 	.word	0x08022427
 80226c0:	08022427 	.word	0x08022427
 80226c4:	08022427 	.word	0x08022427
 80226c8:	08022427 	.word	0x08022427
 80226cc:	08022427 	.word	0x08022427
 80226d0:	08022427 	.word	0x08022427
 80226d4:	08022427 	.word	0x08022427
 80226d8:	08022427 	.word	0x08022427
 80226dc:	08022427 	.word	0x08022427
 80226e0:	08022427 	.word	0x08022427
 80226e4:	08022427 	.word	0x08022427
 80226e8:	08022427 	.word	0x08022427
 80226ec:	08022427 	.word	0x08022427
 80226f0:	08022427 	.word	0x08022427
 80226f4:	08022427 	.word	0x08022427
 80226f8:	08022427 	.word	0x08022427
 80226fc:	08022427 	.word	0x08022427
 8022700:	08022427 	.word	0x08022427
 8022704:	08022427 	.word	0x08022427
 8022708:	08022427 	.word	0x08022427
 802270c:	08022427 	.word	0x08022427
 8022710:	08022427 	.word	0x08022427
 8022714:	08022789 	.word	0x08022789
 8022718:	08022775 	.word	0x08022775
 802271c:	08022761 	.word	0x08022761
 8022720:	0802274d 	.word	0x0802274d
 8022724:	08022427 	.word	0x08022427
 8022728:	08022427 	.word	0x08022427
 802272c:	08022427 	.word	0x08022427
 8022730:	08022739 	.word	0x08022739
 8022734:	0802279d 	.word	0x0802279d
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022738:	4b6b      	ldr	r3, [pc, #428]	; (80228e8 <dhcp_recv+0x630>)
 802273a:	f240 625d 	movw	r2, #1629	; 0x65d
 802273e:	496b      	ldr	r1, [pc, #428]	; (80228ec <dhcp_recv+0x634>)
 8022740:	486b      	ldr	r0, [pc, #428]	; (80228f0 <dhcp_recv+0x638>)
 8022742:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022746:	f003 ffc5 	bl	80266d4 <iprintf>
 802274a:	e60d      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802274c:	4b66      	ldr	r3, [pc, #408]	; (80228e8 <dhcp_recv+0x630>)
 802274e:	f240 6259 	movw	r2, #1625	; 0x659
 8022752:	4966      	ldr	r1, [pc, #408]	; (80228ec <dhcp_recv+0x634>)
 8022754:	4866      	ldr	r0, [pc, #408]	; (80228f0 <dhcp_recv+0x638>)
 8022756:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802275a:	f003 ffbb 	bl	80266d4 <iprintf>
 802275e:	e603      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8022760:	4b61      	ldr	r3, [pc, #388]	; (80228e8 <dhcp_recv+0x630>)
 8022762:	f240 6255 	movw	r2, #1621	; 0x655
 8022766:	4963      	ldr	r1, [pc, #396]	; (80228f4 <dhcp_recv+0x63c>)
 8022768:	4861      	ldr	r0, [pc, #388]	; (80228f0 <dhcp_recv+0x638>)
 802276a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802276e:	f003 ffb1 	bl	80266d4 <iprintf>
 8022772:	e5f9      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8022774:	4b5c      	ldr	r3, [pc, #368]	; (80228e8 <dhcp_recv+0x630>)
 8022776:	f240 624f 	movw	r2, #1615	; 0x64f
 802277a:	495e      	ldr	r1, [pc, #376]	; (80228f4 <dhcp_recv+0x63c>)
 802277c:	485c      	ldr	r0, [pc, #368]	; (80228f0 <dhcp_recv+0x638>)
 802277e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022782:	f003 ffa7 	bl	80266d4 <iprintf>
 8022786:	e5ef      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022788:	4b57      	ldr	r3, [pc, #348]	; (80228e8 <dhcp_recv+0x630>)
 802278a:	f240 6241 	movw	r2, #1601	; 0x641
 802278e:	4957      	ldr	r1, [pc, #348]	; (80228ec <dhcp_recv+0x634>)
 8022790:	4857      	ldr	r0, [pc, #348]	; (80228f0 <dhcp_recv+0x638>)
 8022792:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022796:	f003 ff9d 	bl	80266d4 <iprintf>
 802279a:	e5e5      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802279c:	4b52      	ldr	r3, [pc, #328]	; (80228e8 <dhcp_recv+0x630>)
 802279e:	f240 6261 	movw	r2, #1633	; 0x661
 80227a2:	4952      	ldr	r1, [pc, #328]	; (80228ec <dhcp_recv+0x634>)
 80227a4:	4852      	ldr	r0, [pc, #328]	; (80228f0 <dhcp_recv+0x638>)
 80227a6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227aa:	f003 ff93 	bl	80266d4 <iprintf>
 80227ae:	e5db      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80227b0:	4b4d      	ldr	r3, [pc, #308]	; (80228e8 <dhcp_recv+0x630>)
 80227b2:	f240 6233 	movw	r2, #1587	; 0x633
 80227b6:	4950      	ldr	r1, [pc, #320]	; (80228f8 <dhcp_recv+0x640>)
 80227b8:	484d      	ldr	r0, [pc, #308]	; (80228f0 <dhcp_recv+0x638>)
 80227ba:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227be:	f003 ff89 	bl	80266d4 <iprintf>
 80227c2:	e5d1      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80227c4:	4b48      	ldr	r3, [pc, #288]	; (80228e8 <dhcp_recv+0x630>)
 80227c6:	f240 622e 	movw	r2, #1582	; 0x62e
 80227ca:	4948      	ldr	r1, [pc, #288]	; (80228ec <dhcp_recv+0x634>)
 80227cc:	4848      	ldr	r0, [pc, #288]	; (80228f0 <dhcp_recv+0x638>)
 80227ce:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227d2:	f003 ff7f 	bl	80266d4 <iprintf>
 80227d6:	e5c7      	b.n	8022368 <dhcp_recv+0xb0>
 80227d8:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 80227da:	896b      	ldrh	r3, [r5, #10]
 80227dc:	e628      	b.n	8022430 <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 80227de:	9c05      	ldr	r4, [sp, #20]
 80227e0:	d027      	beq.n	8022832 <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80227e2:	2e01      	cmp	r6, #1
 80227e4:	f040 80bb 	bne.w	802295e <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 80227e8:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 80227ec:	4b3d      	ldr	r3, [pc, #244]	; (80228e4 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 80227ee:	4a3c      	ldr	r2, [pc, #240]	; (80228e0 <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 80227f0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 80227f4:	2301      	movs	r3, #1
 80227f6:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80227fa:	e7ee      	b.n	80227da <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80227fc:	4b3a      	ldr	r3, [pc, #232]	; (80228e8 <dhcp_recv+0x630>)
 80227fe:	f240 6281 	movw	r2, #1665	; 0x681
 8022802:	493e      	ldr	r1, [pc, #248]	; (80228fc <dhcp_recv+0x644>)
 8022804:	483a      	ldr	r0, [pc, #232]	; (80228f0 <dhcp_recv+0x638>)
 8022806:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802280a:	f003 ff63 	bl	80266d4 <iprintf>
 802280e:	e5ab      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8022810:	4b35      	ldr	r3, [pc, #212]	; (80228e8 <dhcp_recv+0x630>)
 8022812:	f240 629d 	movw	r2, #1693	; 0x69d
 8022816:	493a      	ldr	r1, [pc, #232]	; (8022900 <dhcp_recv+0x648>)
 8022818:	4835      	ldr	r0, [pc, #212]	; (80228f0 <dhcp_recv+0x638>)
 802281a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802281e:	f003 ff59 	bl	80266d4 <iprintf>
 8022822:	e5a1      	b.n	8022368 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 8022824:	2301      	movs	r3, #1
 8022826:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 8022828:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 802282a:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 802282e:	9302      	str	r3, [sp, #8]
 8022830:	e701      	b.n	8022636 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 8022832:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022834:	f7f7 fe4c 	bl	801a4d0 <lwip_htonl>
 8022838:	e7d8      	b.n	80227ec <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 802283a:	4b2b      	ldr	r3, [pc, #172]	; (80228e8 <dhcp_recv+0x630>)
 802283c:	f240 6251 	movw	r2, #1617	; 0x651
 8022840:	4930      	ldr	r1, [pc, #192]	; (8022904 <dhcp_recv+0x64c>)
 8022842:	482b      	ldr	r0, [pc, #172]	; (80228f0 <dhcp_recv+0x638>)
 8022844:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022848:	f003 ff44 	bl	80266d4 <iprintf>
 802284c:	e58c      	b.n	8022368 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802284e:	4b26      	ldr	r3, [pc, #152]	; (80228e8 <dhcp_recv+0x630>)
 8022850:	f240 6239 	movw	r2, #1593	; 0x639
 8022854:	492c      	ldr	r1, [pc, #176]	; (8022908 <dhcp_recv+0x650>)
 8022856:	4826      	ldr	r0, [pc, #152]	; (80228f0 <dhcp_recv+0x638>)
 8022858:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802285c:	f003 ff3a 	bl	80266d4 <iprintf>
 8022860:	e582      	b.n	8022368 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8022862:	4b1f      	ldr	r3, [pc, #124]	; (80228e0 <dhcp_recv+0x628>)
 8022864:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022868:	785b      	ldrb	r3, [r3, #1]
 802286a:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 802286e:	2b00      	cmp	r3, #0
 8022870:	f43f ad7a 	beq.w	8022368 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8022874:	4a1b      	ldr	r2, [pc, #108]	; (80228e4 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 8022876:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 802287a:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 802287c:	2b05      	cmp	r3, #5
 802287e:	d01d      	beq.n	80228bc <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 8022880:	2b06      	cmp	r3, #6
 8022882:	d043      	beq.n	802290c <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8022884:	2b02      	cmp	r3, #2
 8022886:	f47f ad6f 	bne.w	8022368 <dhcp_recv+0xb0>
 802288a:	f899 3005 	ldrb.w	r3, [r9, #5]
 802288e:	2b06      	cmp	r3, #6
 8022890:	f47f ad6a 	bne.w	8022368 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8022894:	4b12      	ldr	r3, [pc, #72]	; (80228e0 <dhcp_recv+0x628>)
 8022896:	789b      	ldrb	r3, [r3, #2]
 8022898:	2b00      	cmp	r3, #0
 802289a:	f43f ad65 	beq.w	8022368 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802289e:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 80228a2:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80228a4:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 80228a6:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80228a8:	f7f7 fe12 	bl	801a4d0 <lwip_htonl>
 80228ac:	4603      	mov	r3, r0
    dhcp_select(netif);
 80228ae:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80228b0:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80228b2:	6923      	ldr	r3, [r4, #16]
 80228b4:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 80228b6:	f7ff fbbf 	bl	8022038 <dhcp_select.isra.0>
 80228ba:	e555      	b.n	8022368 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80228bc:	f899 3005 	ldrb.w	r3, [r9, #5]
 80228c0:	2b01      	cmp	r3, #1
 80228c2:	d03f      	beq.n	8022944 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80228c4:	3b03      	subs	r3, #3
 80228c6:	2b02      	cmp	r3, #2
 80228c8:	f63f ad4e 	bhi.w	8022368 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 80228cc:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 80228d0:	4621      	mov	r1, r4
 80228d2:	f7ff f8c1 	bl	8021a58 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 80228d6:	4650      	mov	r0, sl
 80228d8:	f7fe ffb2 	bl	8021840 <dhcp_bind>
 80228dc:	e544      	b.n	8022368 <dhcp_recv+0xb0>
 80228de:	bf00      	nop
 80228e0:	2002e510 	.word	0x2002e510
 80228e4:	2002e51c 	.word	0x2002e51c
 80228e8:	08046bb8 	.word	0x08046bb8
 80228ec:	08046e1c 	.word	0x08046e1c
 80228f0:	0802b3cc 	.word	0x0802b3cc
 80228f4:	08046e4c 	.word	0x08046e4c
 80228f8:	08046e28 	.word	0x08046e28
 80228fc:	08046e84 	.word	0x08046e84
 8022900:	08046eb0 	.word	0x08046eb0
 8022904:	08046e58 	.word	0x08046e58
 8022908:	08046e3c 	.word	0x08046e3c
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802290c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8022910:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8022912:	2a02      	cmp	r2, #2
 8022914:	d902      	bls.n	802291c <dhcp_recv+0x664>
 8022916:	2b01      	cmp	r3, #1
 8022918:	f47f ad26 	bne.w	8022368 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802291c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 8022920:	795a      	ldrb	r2, [r3, #5]
 8022922:	2a0c      	cmp	r2, #12
 8022924:	d004      	beq.n	8022930 <dhcp_recv+0x678>
    dhcp->tries = 0;
 8022926:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8022928:	210c      	movs	r1, #12
    dhcp->tries = 0;
 802292a:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 802292c:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 802292e:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8022930:	4b1c      	ldr	r3, [pc, #112]	; (80229a4 <dhcp_recv+0x6ec>)
 8022932:	4650      	mov	r0, sl
 8022934:	461a      	mov	r2, r3
 8022936:	4619      	mov	r1, r3
 8022938:	f7f9 f968 	bl	801bc0c <netif_set_addr>
  dhcp_discover(netif);
 802293c:	4650      	mov	r0, sl
 802293e:	f7ff fa95 	bl	8021e6c <dhcp_discover>
}
 8022942:	e511      	b.n	8022368 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 8022944:	4621      	mov	r1, r4
 8022946:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 802294a:	f7ff f885 	bl	8021a58 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 802294e:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 8022952:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8022954:	0719      	lsls	r1, r3, #28
 8022956:	d5bf      	bpl.n	80228d8 <dhcp_recv+0x620>
        dhcp_check(netif);
 8022958:	f7fe ff5a 	bl	8021810 <dhcp_check>
 802295c:	e504      	b.n	8022368 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 802295e:	4b12      	ldr	r3, [pc, #72]	; (80229a8 <dhcp_recv+0x6f0>)
 8022960:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8022964:	4911      	ldr	r1, [pc, #68]	; (80229ac <dhcp_recv+0x6f4>)
 8022966:	4812      	ldr	r0, [pc, #72]	; (80229b0 <dhcp_recv+0x6f8>)
 8022968:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802296c:	f003 feb2 	bl	80266d4 <iprintf>
 8022970:	e4fa      	b.n	8022368 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 8022972:	4434      	add	r4, r6
 8022974:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8022978:	4294      	cmp	r4, r2
 802297a:	f73f acf3 	bgt.w	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802297e:	19bc      	adds	r4, r7, r6
 8022980:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022982:	e555      	b.n	8022430 <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 8022984:	4434      	add	r4, r6
 8022986:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 802298a:	428c      	cmp	r4, r1
 802298c:	f73f acea 	bgt.w	8022364 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022990:	19bc      	adds	r4, r7, r6
 8022992:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022994:	2e00      	cmp	r6, #0
 8022996:	f43f ad4b 	beq.w	8022430 <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 802299a:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 802299c:	f04f 0808 	mov.w	r8, #8
 80229a0:	e563      	b.n	802246a <dhcp_recv+0x1b2>
 80229a2:	bf00      	nop
 80229a4:	0804726c 	.word	0x0804726c
 80229a8:	08046bb8 	.word	0x08046bb8
 80229ac:	08046e9c 	.word	0x08046e9c
 80229b0:	0802b3cc 	.word	0x0802b3cc

080229b4 <dhcp_network_changed>:
{
 80229b4:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80229b6:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 80229b8:	b135      	cbz	r5, 80229c8 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 80229ba:	796b      	ldrb	r3, [r5, #5]
 80229bc:	4604      	mov	r4, r0
 80229be:	2b05      	cmp	r3, #5
 80229c0:	d803      	bhi.n	80229ca <dhcp_network_changed+0x16>
 80229c2:	2b02      	cmp	r3, #2
 80229c4:	d813      	bhi.n	80229ee <dhcp_network_changed+0x3a>
 80229c6:	b95b      	cbnz	r3, 80229e0 <dhcp_network_changed+0x2c>
}
 80229c8:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 80229ca:	2b0a      	cmp	r3, #10
 80229cc:	d00f      	beq.n	80229ee <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80229ce:	2b0c      	cmp	r3, #12
 80229d0:	d906      	bls.n	80229e0 <dhcp_network_changed+0x2c>
 80229d2:	4b0a      	ldr	r3, [pc, #40]	; (80229fc <dhcp_network_changed+0x48>)
 80229d4:	f240 326d 	movw	r2, #877	; 0x36d
 80229d8:	4909      	ldr	r1, [pc, #36]	; (8022a00 <dhcp_network_changed+0x4c>)
 80229da:	480a      	ldr	r0, [pc, #40]	; (8022a04 <dhcp_network_changed+0x50>)
 80229dc:	f003 fe7a 	bl	80266d4 <iprintf>
      dhcp->tries = 0;
 80229e0:	2300      	movs	r3, #0
      dhcp_discover(netif);
 80229e2:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80229e4:	71ab      	strb	r3, [r5, #6]
}
 80229e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 80229ea:	f7ff ba3f 	b.w	8021e6c <dhcp_discover>
      dhcp->tries = 0;
 80229ee:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 80229f0:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80229f2:	71ab      	strb	r3, [r5, #6]
}
 80229f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 80229f8:	f7ff b938 	b.w	8021c6c <dhcp_reboot.isra.0>
 80229fc:	08046bb8 	.word	0x08046bb8
 8022a00:	08046ef8 	.word	0x08046ef8
 8022a04:	0802b3cc 	.word	0x0802b3cc

08022a08 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022a08:	2800      	cmp	r0, #0
 8022a0a:	d066      	beq.n	8022ada <dhcp_arp_reply+0xd2>
{
 8022a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 8022a10:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8022a12:	b085      	sub	sp, #20
 8022a14:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8022a16:	b115      	cbz	r5, 8022a1e <dhcp_arp_reply+0x16>
 8022a18:	796b      	ldrb	r3, [r5, #5]
 8022a1a:	2b08      	cmp	r3, #8
 8022a1c:	d002      	beq.n	8022a24 <dhcp_arp_reply+0x1c>
}
 8022a1e:	b005      	add	sp, #20
 8022a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8022a24:	680a      	ldr	r2, [r1, #0]
 8022a26:	69eb      	ldr	r3, [r5, #28]
 8022a28:	429a      	cmp	r2, r3
 8022a2a:	d1f8      	bne.n	8022a1e <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 8022a2c:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8022a2e:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022a30:	4629      	mov	r1, r5
    dhcp->tries = 0;
 8022a32:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 8022a34:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022a36:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 8022a3a:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022a3c:	2204      	movs	r2, #4
 8022a3e:	f7ff f863 	bl	8021b08 <dhcp_create_msg>
  if (p_out != NULL) {
 8022a42:	4606      	mov	r6, r0
 8022a44:	2800      	cmp	r0, #0
 8022a46:	d040      	beq.n	8022aca <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022a48:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8022a4c:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022a4e:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022a52:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022a54:	2b44      	cmp	r3, #68	; 0x44
 8022a56:	d847      	bhi.n	8022ae8 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 8022a58:	2232      	movs	r2, #50	; 0x32
 8022a5a:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 8022a5e:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 8022a62:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 8022a66:	b29b      	uxth	r3, r3
 8022a68:	2204      	movs	r2, #4
 8022a6a:	fa1f f888 	uxth.w	r8, r8
 8022a6e:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022a70:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022a72:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022a76:	f7f7 fd2b 	bl	801a4d0 <lwip_htonl>
 8022a7a:	4639      	mov	r1, r7
 8022a7c:	4602      	mov	r2, r0
 8022a7e:	4640      	mov	r0, r8
 8022a80:	f7fe fea2 	bl	80217c8 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8022a84:	1c41      	adds	r1, r0, #1
 8022a86:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022a88:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8022a8c:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022a8e:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8022a90:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022a92:	2943      	cmp	r1, #67	; 0x43
 8022a94:	d807      	bhi.n	8022aa6 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 8022a96:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8022a9a:	1878      	adds	r0, r7, r1
 8022a9c:	2100      	movs	r1, #0
 8022a9e:	b292      	uxth	r2, r2
 8022aa0:	f002 fe7a 	bl	8025798 <memset>
 8022aa4:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022aa6:	31f0      	adds	r1, #240	; 0xf0
 8022aa8:	4630      	mov	r0, r6
 8022aaa:	b289      	uxth	r1, r1
 8022aac:	f7f9 fc30 	bl	801c310 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022ab0:	4911      	ldr	r1, [pc, #68]	; (8022af8 <dhcp_arp_reply+0xf0>)
 8022ab2:	4a12      	ldr	r2, [pc, #72]	; (8022afc <dhcp_arp_reply+0xf4>)
 8022ab4:	2343      	movs	r3, #67	; 0x43
 8022ab6:	9400      	str	r4, [sp, #0]
 8022ab8:	6808      	ldr	r0, [r1, #0]
 8022aba:	4631      	mov	r1, r6
 8022abc:	9201      	str	r2, [sp, #4]
 8022abe:	4a10      	ldr	r2, [pc, #64]	; (8022b00 <dhcp_arp_reply+0xf8>)
 8022ac0:	f7fe fc6c 	bl	802139c <udp_sendto_if_src>
    pbuf_free(p_out);
 8022ac4:	4630      	mov	r0, r6
 8022ac6:	f7f9 fd3b 	bl	801c540 <pbuf_free>
  if (dhcp->tries < 255) {
 8022aca:	79ab      	ldrb	r3, [r5, #6]
 8022acc:	2bff      	cmp	r3, #255	; 0xff
 8022ace:	d001      	beq.n	8022ad4 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 8022ad0:	3301      	adds	r3, #1
 8022ad2:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022ad4:	2314      	movs	r3, #20
 8022ad6:	812b      	strh	r3, [r5, #8]
  return result;
 8022ad8:	e7a1      	b.n	8022a1e <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022ada:	4b0a      	ldr	r3, [pc, #40]	; (8022b04 <dhcp_arp_reply+0xfc>)
 8022adc:	f240 328b 	movw	r2, #907	; 0x38b
 8022ae0:	4909      	ldr	r1, [pc, #36]	; (8022b08 <dhcp_arp_reply+0x100>)
 8022ae2:	480a      	ldr	r0, [pc, #40]	; (8022b0c <dhcp_arp_reply+0x104>)
 8022ae4:	f003 bdf6 	b.w	80266d4 <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022ae8:	4b06      	ldr	r3, [pc, #24]	; (8022b04 <dhcp_arp_reply+0xfc>)
 8022aea:	f240 529a 	movw	r2, #1434	; 0x59a
 8022aee:	4908      	ldr	r1, [pc, #32]	; (8022b10 <dhcp_arp_reply+0x108>)
 8022af0:	4806      	ldr	r0, [pc, #24]	; (8022b0c <dhcp_arp_reply+0x104>)
 8022af2:	f003 fdef 	bl	80266d4 <iprintf>
 8022af6:	e7af      	b.n	8022a58 <dhcp_arp_reply+0x50>
 8022af8:	2002e508 	.word	0x2002e508
 8022afc:	0804726c 	.word	0x0804726c
 8022b00:	08047270 	.word	0x08047270
 8022b04:	08046bb8 	.word	0x08046bb8
 8022b08:	0802e648 	.word	0x0802e648
 8022b0c:	0802b3cc 	.word	0x0802b3cc
 8022b10:	08046d2c 	.word	0x08046d2c

08022b14 <dhcp_renew>:
{
 8022b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022b18:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 8022b1a:	b087      	sub	sp, #28
 8022b1c:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8022b1e:	797b      	ldrb	r3, [r7, #5]
 8022b20:	2b05      	cmp	r3, #5
 8022b22:	d004      	beq.n	8022b2e <dhcp_renew+0x1a>
    dhcp->tries = 0;
 8022b24:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8022b26:	2205      	movs	r2, #5
    dhcp->tries = 0;
 8022b28:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 8022b2a:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 8022b2c:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022b2e:	f10d 0316 	add.w	r3, sp, #22
 8022b32:	2203      	movs	r2, #3
 8022b34:	4639      	mov	r1, r7
 8022b36:	4658      	mov	r0, fp
 8022b38:	f7fe ffe6 	bl	8021b08 <dhcp_create_msg>
  if (p_out != NULL) {
 8022b3c:	4605      	mov	r5, r0
 8022b3e:	2800      	cmp	r0, #0
 8022b40:	f000 80b9 	beq.w	8022cb6 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022b44:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022b48:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022b4a:	f104 0804 	add.w	r8, r4, #4
 8022b4e:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022b52:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022b54:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8022b58:	f200 8095 	bhi.w	8022c86 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 8022b5c:	2239      	movs	r2, #57	; 0x39
 8022b5e:	1c63      	adds	r3, r4, #1
 8022b60:	fa1f f189 	uxth.w	r1, r9
 8022b64:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8022b66:	b29b      	uxth	r3, r3
 8022b68:	2202      	movs	r2, #2
 8022b6a:	9103      	str	r1, [sp, #12]
 8022b6c:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022b6e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022b70:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022b74:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022b76:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022b7a:	f200 8094 	bhi.w	8022ca6 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022b7e:	1ce3      	adds	r3, r4, #3
 8022b80:	fa1f f988 	uxth.w	r9, r8
 8022b84:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022b88:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022b8a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022b8c:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022b8e:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022b92:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022b96:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022b9a:	2b44      	cmp	r3, #68	; 0x44
 8022b9c:	d87b      	bhi.n	8022c96 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 8022b9e:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8022ba2:	2237      	movs	r2, #55	; 0x37
 8022ba4:	1d63      	adds	r3, r4, #5
 8022ba6:	f8df a134 	ldr.w	sl, [pc, #308]	; 8022cdc <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 8022baa:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8022bae:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8022bb2:	b29b      	uxth	r3, r3
 8022bb4:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022bb6:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022bba:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8022bbe:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022bc0:	493e      	ldr	r1, [pc, #248]	; (8022cbc <dhcp_renew+0x1a8>)
 8022bc2:	4b3f      	ldr	r3, [pc, #252]	; (8022cc0 <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022bc4:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022bc8:	d80f      	bhi.n	8022bea <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 8022bca:	f108 0201 	add.w	r2, r8, #1
 8022bce:	f806 9008 	strb.w	r9, [r6, r8]
 8022bd2:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022bd6:	4a3b      	ldr	r2, [pc, #236]	; (8022cc4 <dhcp_renew+0x1b0>)
 8022bd8:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022bda:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022bde:	d00c      	beq.n	8022bfa <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022be0:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022be4:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022be8:	d9ef      	bls.n	8022bca <dhcp_renew+0xb6>
 8022bea:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8022bee:	4836      	ldr	r0, [pc, #216]	; (8022cc8 <dhcp_renew+0x1b4>)
 8022bf0:	f003 fd70 	bl	80266d4 <iprintf>
 8022bf4:	4b32      	ldr	r3, [pc, #200]	; (8022cc0 <dhcp_renew+0x1ac>)
 8022bf6:	4931      	ldr	r1, [pc, #196]	; (8022cbc <dhcp_renew+0x1a8>)
 8022bf8:	e7e7      	b.n	8022bca <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 8022bfa:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8022bfe:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8022c02:	22ff      	movs	r2, #255	; 0xff
 8022c04:	b280      	uxth	r0, r0
 8022c06:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022c08:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8022c0a:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022c0c:	d808      	bhi.n	8022c20 <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 8022c0e:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8022c12:	4430      	add	r0, r6
 8022c14:	2100      	movs	r1, #0
 8022c16:	b2a4      	uxth	r4, r4
 8022c18:	1c62      	adds	r2, r4, #1
 8022c1a:	f002 fdbd 	bl	8025798 <memset>
 8022c1e:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022c20:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8022c24:	4628      	mov	r0, r5
 8022c26:	b289      	uxth	r1, r1
 8022c28:	f7f9 fb72 	bl	801c310 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022c2c:	4827      	ldr	r0, [pc, #156]	; (8022ccc <dhcp_renew+0x1b8>)
 8022c2e:	2343      	movs	r3, #67	; 0x43
 8022c30:	f107 0218 	add.w	r2, r7, #24
 8022c34:	6800      	ldr	r0, [r0, #0]
 8022c36:	4629      	mov	r1, r5
 8022c38:	f8cd b000 	str.w	fp, [sp]
 8022c3c:	f7fe fc62 	bl	8021504 <udp_sendto_if>
 8022c40:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8022c42:	4628      	mov	r0, r5
 8022c44:	f7f9 fc7c 	bl	801c540 <pbuf_free>
  if (dhcp->tries < 255) {
 8022c48:	79bb      	ldrb	r3, [r7, #6]
 8022c4a:	2bff      	cmp	r3, #255	; 0xff
 8022c4c:	d015      	beq.n	8022c7a <dhcp_renew+0x166>
    dhcp->tries++;
 8022c4e:	3301      	adds	r3, #1
 8022c50:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022c52:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8022c54:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022c56:	d810      	bhi.n	8022c7a <dhcp_renew+0x166>
 8022c58:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022c5c:	4a1c      	ldr	r2, [pc, #112]	; (8022cd0 <dhcp_renew+0x1bc>)
}
 8022c5e:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022c60:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022c64:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022c66:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022c6a:	b29b      	uxth	r3, r3
 8022c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8022c70:	095b      	lsrs	r3, r3, #5
 8022c72:	813b      	strh	r3, [r7, #8]
}
 8022c74:	b007      	add	sp, #28
 8022c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 8022c7a:	2328      	movs	r3, #40	; 0x28
}
 8022c7c:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022c7e:	813b      	strh	r3, [r7, #8]
}
 8022c80:	b007      	add	sp, #28
 8022c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022c86:	4b0e      	ldr	r3, [pc, #56]	; (8022cc0 <dhcp_renew+0x1ac>)
 8022c88:	f240 529a 	movw	r2, #1434	; 0x59a
 8022c8c:	4911      	ldr	r1, [pc, #68]	; (8022cd4 <dhcp_renew+0x1c0>)
 8022c8e:	480e      	ldr	r0, [pc, #56]	; (8022cc8 <dhcp_renew+0x1b4>)
 8022c90:	f003 fd20 	bl	80266d4 <iprintf>
 8022c94:	e762      	b.n	8022b5c <dhcp_renew+0x48>
 8022c96:	4b0a      	ldr	r3, [pc, #40]	; (8022cc0 <dhcp_renew+0x1ac>)
 8022c98:	f240 529a 	movw	r2, #1434	; 0x59a
 8022c9c:	490d      	ldr	r1, [pc, #52]	; (8022cd4 <dhcp_renew+0x1c0>)
 8022c9e:	480a      	ldr	r0, [pc, #40]	; (8022cc8 <dhcp_renew+0x1b4>)
 8022ca0:	f003 fd18 	bl	80266d4 <iprintf>
 8022ca4:	e77b      	b.n	8022b9e <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022ca6:	4b06      	ldr	r3, [pc, #24]	; (8022cc0 <dhcp_renew+0x1ac>)
 8022ca8:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8022cac:	490a      	ldr	r1, [pc, #40]	; (8022cd8 <dhcp_renew+0x1c4>)
 8022cae:	4806      	ldr	r0, [pc, #24]	; (8022cc8 <dhcp_renew+0x1b4>)
 8022cb0:	f003 fd10 	bl	80266d4 <iprintf>
 8022cb4:	e763      	b.n	8022b7e <dhcp_renew+0x6a>
    result = ERR_MEM;
 8022cb6:	f04f 34ff 	mov.w	r4, #4294967295
 8022cba:	e7c5      	b.n	8022c48 <dhcp_renew+0x134>
 8022cbc:	08046dac 	.word	0x08046dac
 8022cc0:	08046bb8 	.word	0x08046bb8
 8022cc4:	08046f34 	.word	0x08046f34
 8022cc8:	0802b3cc 	.word	0x0802b3cc
 8022ccc:	2002e508 	.word	0x2002e508
 8022cd0:	10624dd3 	.word	0x10624dd3
 8022cd4:	08046d2c 	.word	0x08046d2c
 8022cd8:	08046d70 	.word	0x08046d70
 8022cdc:	08046f31 	.word	0x08046f31

08022ce0 <dhcp_release_and_stop>:
{
 8022ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022ce4:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8022ce6:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 8022ce8:	2c00      	cmp	r4, #0
 8022cea:	d06c      	beq.n	8022dc6 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 8022cec:	7962      	ldrb	r2, [r4, #5]
 8022cee:	2a00      	cmp	r2, #0
 8022cf0:	d069      	beq.n	8022dc6 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8022cf2:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022cf4:	2300      	movs	r3, #0
 8022cf6:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8022cf8:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022cfa:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8022cfc:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022cfe:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022d00:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8022d02:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8022d04:	81e3      	strh	r3, [r4, #14]
 8022d06:	6123      	str	r3, [r4, #16]
 8022d08:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8022d0a:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8022d0e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022d12:	d901      	bls.n	8022d18 <dhcp_release_and_stop+0x38>
 8022d14:	2a0a      	cmp	r2, #10
 8022d16:	d148      	bne.n	8022daa <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8022d18:	f10d 030a 	add.w	r3, sp, #10
 8022d1c:	2207      	movs	r2, #7
 8022d1e:	4621      	mov	r1, r4
 8022d20:	4628      	mov	r0, r5
 8022d22:	f7fe fef1 	bl	8021b08 <dhcp_create_msg>
    if (p_out != NULL) {
 8022d26:	4606      	mov	r6, r0
 8022d28:	2800      	cmp	r0, #0
 8022d2a:	d03e      	beq.n	8022daa <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8022d2c:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 8022d30:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022d32:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8022d36:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022d38:	2b44      	cmp	r3, #68	; 0x44
 8022d3a:	d84e      	bhi.n	8022dda <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 8022d3c:	f108 0301 	add.w	r3, r8, #1
 8022d40:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 8022d42:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8022d44:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 8022d48:	2204      	movs	r2, #4
 8022d4a:	f108 0802 	add.w	r8, r8, #2
 8022d4e:	54fa      	strb	r2, [r7, r3]
 8022d50:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022d54:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8022d56:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022d5a:	f7f7 fbb9 	bl	801a4d0 <lwip_htonl>
 8022d5e:	4639      	mov	r1, r7
 8022d60:	4602      	mov	r2, r0
 8022d62:	4640      	mov	r0, r8
 8022d64:	f7fe fd30 	bl	80217c8 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8022d68:	1c43      	adds	r3, r0, #1
 8022d6a:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022d6c:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 8022d70:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022d72:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8022d74:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022d76:	2b43      	cmp	r3, #67	; 0x43
 8022d78:	d807      	bhi.n	8022d8a <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 8022d7a:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8022d7e:	18f8      	adds	r0, r7, r3
 8022d80:	2100      	movs	r1, #0
 8022d82:	b292      	uxth	r2, r2
 8022d84:	f002 fd08 	bl	8025798 <memset>
 8022d88:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022d8a:	33f0      	adds	r3, #240	; 0xf0
 8022d8c:	4630      	mov	r0, r6
 8022d8e:	b299      	uxth	r1, r3
 8022d90:	f7f9 fabe 	bl	801c310 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022d94:	4a15      	ldr	r2, [pc, #84]	; (8022dec <dhcp_release_and_stop+0x10c>)
 8022d96:	9500      	str	r5, [sp, #0]
 8022d98:	2343      	movs	r3, #67	; 0x43
 8022d9a:	6810      	ldr	r0, [r2, #0]
 8022d9c:	4631      	mov	r1, r6
 8022d9e:	aa03      	add	r2, sp, #12
 8022da0:	f7fe fbb0 	bl	8021504 <udp_sendto_if>
      pbuf_free(p_out);
 8022da4:	4630      	mov	r0, r6
 8022da6:	f7f9 fbcb 	bl	801c540 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8022daa:	4b11      	ldr	r3, [pc, #68]	; (8022df0 <dhcp_release_and_stop+0x110>)
 8022dac:	4628      	mov	r0, r5
 8022dae:	461a      	mov	r2, r3
 8022db0:	4619      	mov	r1, r3
 8022db2:	f7f8 ff2b 	bl	801bc0c <netif_set_addr>
  if (new_state != dhcp->state) {
 8022db6:	7963      	ldrb	r3, [r4, #5]
 8022db8:	b11b      	cbz	r3, 8022dc2 <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 8022dba:	2300      	movs	r3, #0
 8022dbc:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 8022dbe:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 8022dc0:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 8022dc2:	7923      	ldrb	r3, [r4, #4]
 8022dc4:	b913      	cbnz	r3, 8022dcc <dhcp_release_and_stop+0xec>
}
 8022dc6:	b004      	add	sp, #16
 8022dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8022dcc:	f7fe fe22 	bl	8021a14 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8022dd0:	2300      	movs	r3, #0
 8022dd2:	7123      	strb	r3, [r4, #4]
}
 8022dd4:	b004      	add	sp, #16
 8022dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022dda:	4b06      	ldr	r3, [pc, #24]	; (8022df4 <dhcp_release_and_stop+0x114>)
 8022ddc:	f240 529a 	movw	r2, #1434	; 0x59a
 8022de0:	4905      	ldr	r1, [pc, #20]	; (8022df8 <dhcp_release_and_stop+0x118>)
 8022de2:	4806      	ldr	r0, [pc, #24]	; (8022dfc <dhcp_release_and_stop+0x11c>)
 8022de4:	f003 fc76 	bl	80266d4 <iprintf>
 8022de8:	e7a8      	b.n	8022d3c <dhcp_release_and_stop+0x5c>
 8022dea:	bf00      	nop
 8022dec:	2002e508 	.word	0x2002e508
 8022df0:	0804726c 	.word	0x0804726c
 8022df4:	08046bb8 	.word	0x08046bb8
 8022df8:	08046d2c 	.word	0x08046d2c
 8022dfc:	0802b3cc 	.word	0x0802b3cc

08022e00 <dhcp_start>:
{
 8022e00:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022e02:	2800      	cmp	r0, #0
 8022e04:	d046      	beq.n	8022e94 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022e06:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8022e0a:	4604      	mov	r4, r0
 8022e0c:	07da      	lsls	r2, r3, #31
 8022e0e:	d537      	bpl.n	8022e80 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8022e10:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 8022e12:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8022e14:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8022e18:	d32f      	bcc.n	8022e7a <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8022e1a:	b33d      	cbz	r5, 8022e6c <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8022e1c:	792b      	ldrb	r3, [r5, #4]
 8022e1e:	bb13      	cbnz	r3, 8022e66 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 8022e20:	2234      	movs	r2, #52	; 0x34
 8022e22:	2100      	movs	r1, #0
 8022e24:	4628      	mov	r0, r5
 8022e26:	f002 fcb7 	bl	8025798 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8022e2a:	f7fe fdb9 	bl	80219a0 <dhcp_inc_pcb_refcount>
 8022e2e:	4606      	mov	r6, r0
 8022e30:	bb18      	cbnz	r0, 8022e7a <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 8022e32:	2301      	movs	r3, #1
 8022e34:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8022e36:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8022e3a:	075b      	lsls	r3, r3, #29
 8022e3c:	d408      	bmi.n	8022e50 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 8022e3e:	796b      	ldrb	r3, [r5, #5]
 8022e40:	2b02      	cmp	r3, #2
 8022e42:	d003      	beq.n	8022e4c <dhcp_start+0x4c>
    dhcp->state = new_state;
 8022e44:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8022e46:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8022e48:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8022e4a:	716b      	strb	r3, [r5, #5]
}
 8022e4c:	4630      	mov	r0, r6
 8022e4e:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 8022e50:	4620      	mov	r0, r4
 8022e52:	f7ff f80b 	bl	8021e6c <dhcp_discover>
  if (result != ERR_OK) {
 8022e56:	2800      	cmp	r0, #0
 8022e58:	d0f8      	beq.n	8022e4c <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8022e5a:	4620      	mov	r0, r4
    return ERR_MEM;
 8022e5c:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 8022e60:	f7ff ff3e 	bl	8022ce0 <dhcp_release_and_stop>
    return ERR_MEM;
 8022e64:	e7f2      	b.n	8022e4c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8022e66:	f7fe fdd5 	bl	8021a14 <dhcp_dec_pcb_refcount>
 8022e6a:	e7d9      	b.n	8022e20 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8022e6c:	2034      	movs	r0, #52	; 0x34
 8022e6e:	f7f8 fc77 	bl	801b760 <mem_malloc>
    if (dhcp == NULL) {
 8022e72:	4605      	mov	r5, r0
 8022e74:	b108      	cbz	r0, 8022e7a <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8022e76:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8022e78:	e7d2      	b.n	8022e20 <dhcp_start+0x20>
    return ERR_MEM;
 8022e7a:	f04f 36ff 	mov.w	r6, #4294967295
 8022e7e:	e7e5      	b.n	8022e4c <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022e80:	4b09      	ldr	r3, [pc, #36]	; (8022ea8 <dhcp_start+0xa8>)
 8022e82:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8022e86:	4909      	ldr	r1, [pc, #36]	; (8022eac <dhcp_start+0xac>)
 8022e88:	f06f 060f 	mvn.w	r6, #15
 8022e8c:	4808      	ldr	r0, [pc, #32]	; (8022eb0 <dhcp_start+0xb0>)
 8022e8e:	f003 fc21 	bl	80266d4 <iprintf>
 8022e92:	e7db      	b.n	8022e4c <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022e94:	4b04      	ldr	r3, [pc, #16]	; (8022ea8 <dhcp_start+0xa8>)
 8022e96:	f240 22e7 	movw	r2, #743	; 0x2e7
 8022e9a:	4906      	ldr	r1, [pc, #24]	; (8022eb4 <dhcp_start+0xb4>)
 8022e9c:	f06f 060f 	mvn.w	r6, #15
 8022ea0:	4803      	ldr	r0, [pc, #12]	; (8022eb0 <dhcp_start+0xb0>)
 8022ea2:	f003 fc17 	bl	80266d4 <iprintf>
 8022ea6:	e7d1      	b.n	8022e4c <dhcp_start+0x4c>
 8022ea8:	08046bb8 	.word	0x08046bb8
 8022eac:	08046f0c 	.word	0x08046f0c
 8022eb0:	0802b3cc 	.word	0x0802b3cc
 8022eb4:	0802e648 	.word	0x0802e648

08022eb8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8022eb8:	4b8a      	ldr	r3, [pc, #552]	; (80230e4 <dhcp_coarse_tmr+0x22c>)
{
 8022eba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8022ebe:	681d      	ldr	r5, [r3, #0]
{
 8022ec0:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8022ec2:	b1dd      	cbz	r5, 8022efc <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8022ec4:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8022ec6:	b1b4      	cbz	r4, 8022ef6 <dhcp_coarse_tmr+0x3e>
 8022ec8:	7963      	ldrb	r3, [r4, #5]
 8022eca:	b1a3      	cbz	r3, 8022ef6 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8022ecc:	8aa1      	ldrh	r1, [r4, #20]
 8022ece:	b129      	cbz	r1, 8022edc <dhcp_coarse_tmr+0x24>
 8022ed0:	8a62      	ldrh	r2, [r4, #18]
 8022ed2:	3201      	adds	r2, #1
 8022ed4:	b292      	uxth	r2, r2
 8022ed6:	4291      	cmp	r1, r2
 8022ed8:	8262      	strh	r2, [r4, #18]
 8022eda:	d012      	beq.n	8022f02 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8022edc:	8a22      	ldrh	r2, [r4, #16]
 8022ede:	b11a      	cbz	r2, 8022ee8 <dhcp_coarse_tmr+0x30>
 8022ee0:	1e51      	subs	r1, r2, #1
 8022ee2:	2a01      	cmp	r2, #1
 8022ee4:	8221      	strh	r1, [r4, #16]
 8022ee6:	d013      	beq.n	8022f10 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8022ee8:	89e2      	ldrh	r2, [r4, #14]
 8022eea:	b122      	cbz	r2, 8022ef6 <dhcp_coarse_tmr+0x3e>
 8022eec:	1e51      	subs	r1, r2, #1
 8022eee:	2a01      	cmp	r2, #1
 8022ef0:	81e1      	strh	r1, [r4, #14]
 8022ef2:	f000 8087 	beq.w	8023004 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8022ef6:	682d      	ldr	r5, [r5, #0]
 8022ef8:	2d00      	cmp	r5, #0
 8022efa:	d1e3      	bne.n	8022ec4 <dhcp_coarse_tmr+0xc>
}
 8022efc:	b007      	add	sp, #28
 8022efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 8022f02:	4628      	mov	r0, r5
 8022f04:	f7ff feec 	bl	8022ce0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8022f08:	4628      	mov	r0, r5
 8022f0a:	f7ff ff79 	bl	8022e00 <dhcp_start>
 8022f0e:	e7f2      	b.n	8022ef6 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022f10:	1e5a      	subs	r2, r3, #1
 8022f12:	b2d1      	uxtb	r1, r2
 8022f14:	2909      	cmp	r1, #9
 8022f16:	d8ee      	bhi.n	8022ef6 <dhcp_coarse_tmr+0x3e>
 8022f18:	f240 2219 	movw	r2, #537	; 0x219
 8022f1c:	40ca      	lsrs	r2, r1
 8022f1e:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8022f20:	f012 0201 	ands.w	r2, r2, #1
 8022f24:	d1e7      	bne.n	8022ef6 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8022f26:	2b04      	cmp	r3, #4
 8022f28:	d003      	beq.n	8022f32 <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8022f2a:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8022f2c:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 8022f2e:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 8022f30:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022f32:	f10d 0316 	add.w	r3, sp, #22
 8022f36:	2203      	movs	r2, #3
 8022f38:	4621      	mov	r1, r4
 8022f3a:	4628      	mov	r0, r5
 8022f3c:	f7fe fde4 	bl	8021b08 <dhcp_create_msg>
  if (p_out != NULL) {
 8022f40:	4607      	mov	r7, r0
 8022f42:	2800      	cmp	r0, #0
 8022f44:	f000 8096 	beq.w	8023074 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022f48:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8022f4c:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022f4e:	f106 0904 	add.w	r9, r6, #4
 8022f52:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022f56:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022f5a:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 8022f5e:	f200 80b9 	bhi.w	80230d4 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 8022f62:	2239      	movs	r2, #57	; 0x39
 8022f64:	1c73      	adds	r3, r6, #1
 8022f66:	fa1f fb8a 	uxth.w	fp, sl
 8022f6a:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 8022f6e:	b29b      	uxth	r3, r3
 8022f70:	2202      	movs	r2, #2
 8022f72:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022f76:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022f7a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022f7c:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022f7e:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022f82:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022f84:	f200 809e 	bhi.w	80230c4 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022f88:	9903      	ldr	r1, [sp, #12]
 8022f8a:	1cf3      	adds	r3, r6, #3
 8022f8c:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022f90:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022f92:	0a0a      	lsrs	r2, r1, #8
 8022f94:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022f98:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022f9c:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022fa0:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022fa4:	2b44      	cmp	r3, #68	; 0x44
 8022fa6:	f200 8085 	bhi.w	80230b4 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 8022faa:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 8022fae:	2237      	movs	r2, #55	; 0x37
 8022fb0:	1d73      	adds	r3, r6, #5
 8022fb2:	f8df b158 	ldr.w	fp, [pc, #344]	; 802310c <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 8022fb6:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 8022fba:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 8022fbe:	b29b      	uxth	r3, r3
 8022fc0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022fc2:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022fc6:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8022fca:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022fce:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022fd2:	d80f      	bhi.n	8022ff4 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 8022fd4:	f808 a009 	strb.w	sl, [r8, r9]
 8022fd8:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022fdc:	4b42      	ldr	r3, [pc, #264]	; (80230e8 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 8022fde:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022fe2:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022fe4:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022fe8:	d01f      	beq.n	802302a <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022fea:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022fee:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022ff2:	d9ef      	bls.n	8022fd4 <dhcp_coarse_tmr+0x11c>
 8022ff4:	4b3d      	ldr	r3, [pc, #244]	; (80230ec <dhcp_coarse_tmr+0x234>)
 8022ff6:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8022ffa:	493d      	ldr	r1, [pc, #244]	; (80230f0 <dhcp_coarse_tmr+0x238>)
 8022ffc:	483d      	ldr	r0, [pc, #244]	; (80230f4 <dhcp_coarse_tmr+0x23c>)
 8022ffe:	f003 fb69 	bl	80266d4 <iprintf>
 8023002:	e7e7      	b.n	8022fd4 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8023004:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8023008:	2a01      	cmp	r2, #1
 802300a:	d002      	beq.n	8023012 <dhcp_coarse_tmr+0x15a>
 802300c:	2b0a      	cmp	r3, #10
 802300e:	f47f af72 	bne.w	8022ef6 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8023012:	4628      	mov	r0, r5
 8023014:	f7ff fd7e 	bl	8022b14 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8023018:	89a3      	ldrh	r3, [r4, #12]
 802301a:	8a62      	ldrh	r2, [r4, #18]
 802301c:	1a9b      	subs	r3, r3, r2
 802301e:	2b01      	cmp	r3, #1
 8023020:	f77f af69 	ble.w	8022ef6 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8023024:	105b      	asrs	r3, r3, #1
 8023026:	81e3      	strh	r3, [r4, #14]
 8023028:	e765      	b.n	8022ef6 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 802302a:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 802302e:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8023032:	22ff      	movs	r2, #255	; 0xff
 8023034:	b280      	uxth	r0, r0
 8023036:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8023038:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 802303a:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802303e:	d808      	bhi.n	8023052 <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 8023040:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 8023044:	4440      	add	r0, r8
 8023046:	2100      	movs	r1, #0
 8023048:	b292      	uxth	r2, r2
 802304a:	3201      	adds	r2, #1
 802304c:	f002 fba4 	bl	8025798 <memset>
 8023050:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8023052:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8023056:	4638      	mov	r0, r7
 8023058:	b289      	uxth	r1, r1
 802305a:	f7f9 f959 	bl	801c310 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 802305e:	4b26      	ldr	r3, [pc, #152]	; (80230f8 <dhcp_coarse_tmr+0x240>)
 8023060:	9500      	str	r5, [sp, #0]
 8023062:	4639      	mov	r1, r7
 8023064:	6818      	ldr	r0, [r3, #0]
 8023066:	2343      	movs	r3, #67	; 0x43
 8023068:	4a24      	ldr	r2, [pc, #144]	; (80230fc <dhcp_coarse_tmr+0x244>)
 802306a:	f7fe fa4b 	bl	8021504 <udp_sendto_if>
    pbuf_free(p_out);
 802306e:	4638      	mov	r0, r7
 8023070:	f7f9 fa66 	bl	801c540 <pbuf_free>
  if (dhcp->tries < 255) {
 8023074:	79a3      	ldrb	r3, [r4, #6]
 8023076:	2bff      	cmp	r3, #255	; 0xff
 8023078:	d01a      	beq.n	80230b0 <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 802307a:	3301      	adds	r3, #1
 802307c:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802307e:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8023080:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8023082:	d815      	bhi.n	80230b0 <dhcp_coarse_tmr+0x1f8>
 8023084:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8023088:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802308c:	4a1c      	ldr	r2, [pc, #112]	; (8023100 <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802308e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8023090:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8023094:	b29b      	uxth	r3, r3
 8023096:	fba2 2303 	umull	r2, r3, r2, r3
 802309a:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 802309c:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802309e:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80230a0:	8aa3      	ldrh	r3, [r4, #20]
 80230a2:	1a9b      	subs	r3, r3, r2
 80230a4:	2b01      	cmp	r3, #1
 80230a6:	f77f af26 	ble.w	8022ef6 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80230aa:	105b      	asrs	r3, r3, #1
 80230ac:	8223      	strh	r3, [r4, #16]
 80230ae:	e722      	b.n	8022ef6 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 80230b0:	2314      	movs	r3, #20
 80230b2:	e7f3      	b.n	802309c <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80230b4:	4b0d      	ldr	r3, [pc, #52]	; (80230ec <dhcp_coarse_tmr+0x234>)
 80230b6:	f240 529a 	movw	r2, #1434	; 0x59a
 80230ba:	4912      	ldr	r1, [pc, #72]	; (8023104 <dhcp_coarse_tmr+0x24c>)
 80230bc:	480d      	ldr	r0, [pc, #52]	; (80230f4 <dhcp_coarse_tmr+0x23c>)
 80230be:	f003 fb09 	bl	80266d4 <iprintf>
 80230c2:	e772      	b.n	8022faa <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80230c4:	4b09      	ldr	r3, [pc, #36]	; (80230ec <dhcp_coarse_tmr+0x234>)
 80230c6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80230ca:	490f      	ldr	r1, [pc, #60]	; (8023108 <dhcp_coarse_tmr+0x250>)
 80230cc:	4809      	ldr	r0, [pc, #36]	; (80230f4 <dhcp_coarse_tmr+0x23c>)
 80230ce:	f003 fb01 	bl	80266d4 <iprintf>
 80230d2:	e759      	b.n	8022f88 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80230d4:	4b05      	ldr	r3, [pc, #20]	; (80230ec <dhcp_coarse_tmr+0x234>)
 80230d6:	f240 529a 	movw	r2, #1434	; 0x59a
 80230da:	490a      	ldr	r1, [pc, #40]	; (8023104 <dhcp_coarse_tmr+0x24c>)
 80230dc:	4805      	ldr	r0, [pc, #20]	; (80230f4 <dhcp_coarse_tmr+0x23c>)
 80230de:	f003 faf9 	bl	80266d4 <iprintf>
 80230e2:	e73e      	b.n	8022f62 <dhcp_coarse_tmr+0xaa>
 80230e4:	2002e490 	.word	0x2002e490
 80230e8:	08046f34 	.word	0x08046f34
 80230ec:	08046bb8 	.word	0x08046bb8
 80230f0:	08046dac 	.word	0x08046dac
 80230f4:	0802b3cc 	.word	0x0802b3cc
 80230f8:	2002e508 	.word	0x2002e508
 80230fc:	08047270 	.word	0x08047270
 8023100:	10624dd3 	.word	0x10624dd3
 8023104:	08046d2c 	.word	0x08046d2c
 8023108:	08046d70 	.word	0x08046d70
 802310c:	08046f31 	.word	0x08046f31

08023110 <dhcp_fine_tmr>:
{
 8023110:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8023112:	4b21      	ldr	r3, [pc, #132]	; (8023198 <dhcp_fine_tmr+0x88>)
 8023114:	681c      	ldr	r4, [r3, #0]
 8023116:	b1fc      	cbz	r4, 8023158 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8023118:	2500      	movs	r5, #0
 802311a:	e003      	b.n	8023124 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 802311c:	3a01      	subs	r2, #1
 802311e:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8023120:	6824      	ldr	r4, [r4, #0]
 8023122:	b1cc      	cbz	r4, 8023158 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8023124:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 8023126:	2b00      	cmp	r3, #0
 8023128:	d0fa      	beq.n	8023120 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 802312a:	891a      	ldrh	r2, [r3, #8]
 802312c:	2a01      	cmp	r2, #1
 802312e:	d8f5      	bhi.n	802311c <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 8023130:	d1f6      	bne.n	8023120 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8023132:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8023134:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8023136:	2a0c      	cmp	r2, #12
 8023138:	d016      	beq.n	8023168 <dhcp_fine_tmr+0x58>
 802313a:	2a06      	cmp	r2, #6
 802313c:	d014      	beq.n	8023168 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 802313e:	2a01      	cmp	r2, #1
 8023140:	d016      	beq.n	8023170 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8023142:	2a08      	cmp	r2, #8
 8023144:	d009      	beq.n	802315a <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8023146:	2a03      	cmp	r2, #3
 8023148:	d1ea      	bne.n	8023120 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 802314a:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 802314c:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 802314e:	2b01      	cmp	r3, #1
 8023150:	d91e      	bls.n	8023190 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 8023152:	f7fe fe8b 	bl	8021e6c <dhcp_discover>
 8023156:	e7e3      	b.n	8023120 <dhcp_fine_tmr+0x10>
}
 8023158:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 802315a:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 802315c:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 802315e:	2b01      	cmp	r3, #1
 8023160:	d913      	bls.n	802318a <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 8023162:	f7fe fb6d 	bl	8021840 <dhcp_bind>
 8023166:	e7db      	b.n	8023120 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 8023168:	4620      	mov	r0, r4
 802316a:	f7fe fe7f 	bl	8021e6c <dhcp_discover>
 802316e:	e7d7      	b.n	8023120 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 8023170:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8023172:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8023174:	2b05      	cmp	r3, #5
 8023176:	d802      	bhi.n	802317e <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 8023178:	f7fe ff5e 	bl	8022038 <dhcp_select.isra.0>
 802317c:	e7d0      	b.n	8023120 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 802317e:	f7ff fdaf 	bl	8022ce0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8023182:	4620      	mov	r0, r4
 8023184:	f7ff fe3c 	bl	8022e00 <dhcp_start>
 8023188:	e7ca      	b.n	8023120 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 802318a:	f7fe fb41 	bl	8021810 <dhcp_check>
 802318e:	e7c7      	b.n	8023120 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8023190:	f7fe fd6c 	bl	8021c6c <dhcp_reboot.isra.0>
 8023194:	e7c4      	b.n	8023120 <dhcp_fine_tmr+0x10>
 8023196:	bf00      	nop
 8023198:	2002e490 	.word	0x2002e490

0802319c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 802319c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80231a0:	4f1a      	ldr	r7, [pc, #104]	; (802320c <etharp_free_entry+0x70>)
 80231a2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 80231a6:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 80231a8:	ea4f 0840 	mov.w	r8, r0, lsl #1
 80231ac:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 80231b0:	b32c      	cbz	r4, 80231fe <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 80231b2:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8023210 <etharp_free_entry+0x74>
 80231b6:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8023214 <etharp_free_entry+0x78>
 80231ba:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8023218 <etharp_free_entry+0x7c>
 80231be:	e006      	b.n	80231ce <etharp_free_entry+0x32>
    pbuf_free(r->p);
 80231c0:	f7f9 f9be 	bl	801c540 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 80231c4:	4629      	mov	r1, r5
 80231c6:	200b      	movs	r0, #11
 80231c8:	f7f8 fca2 	bl	801bb10 <memp_free>
  while (q) {
 80231cc:	b19c      	cbz	r4, 80231f6 <etharp_free_entry+0x5a>
    q = q->next;
 80231ce:	4625      	mov	r5, r4
 80231d0:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 80231d2:	6868      	ldr	r0, [r5, #4]
 80231d4:	2800      	cmp	r0, #0
 80231d6:	d1f3      	bne.n	80231c0 <etharp_free_entry+0x24>
 80231d8:	4651      	mov	r1, sl
 80231da:	465b      	mov	r3, fp
 80231dc:	229a      	movs	r2, #154	; 0x9a
 80231de:	4648      	mov	r0, r9
 80231e0:	f003 fa78 	bl	80266d4 <iprintf>
    pbuf_free(r->p);
 80231e4:	6868      	ldr	r0, [r5, #4]
 80231e6:	f7f9 f9ab 	bl	801c540 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 80231ea:	4629      	mov	r1, r5
 80231ec:	200b      	movs	r0, #11
 80231ee:	f7f8 fc8f 	bl	801bb10 <memp_free>
  while (q) {
 80231f2:	2c00      	cmp	r4, #0
 80231f4:	d1eb      	bne.n	80231ce <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 80231f6:	eb08 0306 	add.w	r3, r8, r6
 80231fa:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80231fe:	4446      	add	r6, r8
 8023200:	2300      	movs	r3, #0
 8023202:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8023206:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8023208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802320c:	2002e548 	.word	0x2002e548
 8023210:	08046f34 	.word	0x08046f34
 8023214:	08046f6c 	.word	0x08046f6c
 8023218:	0802b3cc 	.word	0x0802b3cc

0802321c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 802321c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023220:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8023222:	f04f 0820 	mov.w	r8, #32
{
 8023226:	b083      	sub	sp, #12
 8023228:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802322a:	469e      	mov	lr, r3
 802322c:	469b      	mov	fp, r3
{
 802322e:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8023230:	469a      	mov	sl, r3
 8023232:	4948      	ldr	r1, [pc, #288]	; (8023354 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 8023234:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8023236:	46c4      	mov	ip, r8
 8023238:	4691      	mov	r9, r2
 802323a:	f8cd 8004 	str.w	r8, [sp, #4]
 802323e:	e004      	b.n	802324a <etharp_find_entry+0x2e>
 8023240:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023242:	3301      	adds	r3, #1
 8023244:	3118      	adds	r1, #24
 8023246:	2b20      	cmp	r3, #32
 8023248:	d015      	beq.n	8023276 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802324a:	2c20      	cmp	r4, #32
 802324c:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 802324e:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8023250:	d134      	bne.n	80232bc <etharp_find_entry+0xa0>
 8023252:	2800      	cmp	r0, #0
 8023254:	d0f4      	beq.n	8023240 <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8023256:	b11d      	cbz	r5, 8023260 <etharp_find_entry+0x44>
 8023258:	682f      	ldr	r7, [r5, #0]
 802325a:	684e      	ldr	r6, [r1, #4]
 802325c:	42b7      	cmp	r7, r6
 802325e:	d038      	beq.n	80232d2 <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8023260:	2801      	cmp	r0, #1
 8023262:	d02e      	beq.n	80232c2 <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8023264:	8a48      	ldrh	r0, [r1, #18]
 8023266:	4570      	cmp	r0, lr
 8023268:	d3eb      	bcc.n	8023242 <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802326a:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 802326c:	4686      	mov	lr, r0
 802326e:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023270:	3118      	adds	r1, #24
 8023272:	2b20      	cmp	r3, #32
 8023274:	d1e9      	bne.n	802324a <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8023276:	9b00      	ldr	r3, [sp, #0]
 8023278:	464e      	mov	r6, r9
 802327a:	2b01      	cmp	r3, #1
 802327c:	d166      	bne.n	802334c <etharp_find_entry+0x130>
 802327e:	2c20      	cmp	r4, #32
 8023280:	d040      	beq.n	8023304 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8023282:	46a1      	mov	r9, r4
 8023284:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8023288:	4a32      	ldr	r2, [pc, #200]	; (8023354 <etharp_find_entry+0x138>)
 802328a:	ea4f 0849 	mov.w	r8, r9, lsl #1
 802328e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023292:	7d1b      	ldrb	r3, [r3, #20]
 8023294:	bb73      	cbnz	r3, 80232f4 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8023296:	b135      	cbz	r5, 80232a6 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8023298:	eb08 0309 	add.w	r3, r8, r9
 802329c:	492d      	ldr	r1, [pc, #180]	; (8023354 <etharp_find_entry+0x138>)
 802329e:	682a      	ldr	r2, [r5, #0]
 80232a0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80232a4:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80232a6:	44c8      	add	r8, r9
 80232a8:	4a2a      	ldr	r2, [pc, #168]	; (8023354 <etharp_find_entry+0x138>)
 80232aa:	2300      	movs	r3, #0
 80232ac:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 80232b0:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80232b2:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 80232b4:	4620      	mov	r0, r4
 80232b6:	b003      	add	sp, #12
 80232b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 80232bc:	2800      	cmp	r0, #0
 80232be:	d0c0      	beq.n	8023242 <etharp_find_entry+0x26>
 80232c0:	e7c9      	b.n	8023256 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 80232c2:	6808      	ldr	r0, [r1, #0]
 80232c4:	b180      	cbz	r0, 80232e8 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 80232c6:	8a48      	ldrh	r0, [r1, #18]
 80232c8:	4550      	cmp	r0, sl
 80232ca:	d3ba      	bcc.n	8023242 <etharp_find_entry+0x26>
 80232cc:	4682      	mov	sl, r0
 80232ce:	4690      	mov	r8, r2
 80232d0:	e7b7      	b.n	8023242 <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80232d2:	f1b9 0f00 	cmp.w	r9, #0
 80232d6:	d002      	beq.n	80232de <etharp_find_entry+0xc2>
 80232d8:	688e      	ldr	r6, [r1, #8]
 80232da:	454e      	cmp	r6, r9
 80232dc:	d1c0      	bne.n	8023260 <etharp_find_entry+0x44>
 80232de:	4614      	mov	r4, r2
}
 80232e0:	4620      	mov	r0, r4
 80232e2:	b003      	add	sp, #12
 80232e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80232e8:	8a48      	ldrh	r0, [r1, #18]
 80232ea:	4558      	cmp	r0, fp
 80232ec:	d3a9      	bcc.n	8023242 <etharp_find_entry+0x26>
 80232ee:	4683      	mov	fp, r0
 80232f0:	9201      	str	r2, [sp, #4]
 80232f2:	e7a6      	b.n	8023242 <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80232f4:	4b18      	ldr	r3, [pc, #96]	; (8023358 <etharp_find_entry+0x13c>)
 80232f6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80232fa:	4918      	ldr	r1, [pc, #96]	; (802335c <etharp_find_entry+0x140>)
 80232fc:	4818      	ldr	r0, [pc, #96]	; (8023360 <etharp_find_entry+0x144>)
 80232fe:	f003 f9e9 	bl	80266d4 <iprintf>
 8023302:	e7c8      	b.n	8023296 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8023304:	f1bc 0f20 	cmp.w	ip, #32
 8023308:	d012      	beq.n	8023330 <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 802330a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 802330e:	4a11      	ldr	r2, [pc, #68]	; (8023354 <etharp_find_entry+0x138>)
 8023310:	46e1      	mov	r9, ip
 8023312:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8023316:	b1bb      	cbz	r3, 8023348 <etharp_find_entry+0x12c>
 8023318:	464c      	mov	r4, r9
 802331a:	4b0f      	ldr	r3, [pc, #60]	; (8023358 <etharp_find_entry+0x13c>)
 802331c:	f240 126d 	movw	r2, #365	; 0x16d
 8023320:	4910      	ldr	r1, [pc, #64]	; (8023364 <etharp_find_entry+0x148>)
 8023322:	480f      	ldr	r0, [pc, #60]	; (8023360 <etharp_find_entry+0x144>)
 8023324:	f003 f9d6 	bl	80266d4 <iprintf>
    etharp_free_entry(i);
 8023328:	4648      	mov	r0, r9
 802332a:	f7ff ff37 	bl	802319c <etharp_free_entry>
 802332e:	e7a9      	b.n	8023284 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8023330:	9b01      	ldr	r3, [sp, #4]
 8023332:	2b20      	cmp	r3, #32
 8023334:	d105      	bne.n	8023342 <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8023336:	f1b8 0f20 	cmp.w	r8, #32
 802333a:	d007      	beq.n	802334c <etharp_find_entry+0x130>
    etharp_free_entry(i);
 802333c:	4644      	mov	r4, r8
 802333e:	46c1      	mov	r9, r8
 8023340:	e7f2      	b.n	8023328 <etharp_find_entry+0x10c>
 8023342:	461c      	mov	r4, r3
 8023344:	4699      	mov	r9, r3
 8023346:	e7ef      	b.n	8023328 <etharp_find_entry+0x10c>
 8023348:	4664      	mov	r4, ip
 802334a:	e7ed      	b.n	8023328 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 802334c:	f04f 34ff 	mov.w	r4, #4294967295
 8023350:	e7b0      	b.n	80232b4 <etharp_find_entry+0x98>
 8023352:	bf00      	nop
 8023354:	2002e548 	.word	0x2002e548
 8023358:	08046f34 	.word	0x08046f34
 802335c:	08046f94 	.word	0x08046f94
 8023360:	0802b3cc 	.word	0x0802b3cc
 8023364:	08046f7c 	.word	0x08046f7c

08023368 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8023368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802336c:	b082      	sub	sp, #8
 802336e:	4688      	mov	r8, r1
 8023370:	4691      	mov	r9, r2
 8023372:	461f      	mov	r7, r3
 8023374:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023378:	4606      	mov	r6, r0
{
 802337a:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802337e:	2800      	cmp	r0, #0
 8023380:	d050      	beq.n	8023424 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8023382:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023386:	211c      	movs	r1, #28
 8023388:	200e      	movs	r0, #14
 802338a:	f7f8 ff07 	bl	801c19c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 802338e:	4605      	mov	r5, r0
 8023390:	2800      	cmp	r0, #0
 8023392:	d04f      	beq.n	8023434 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023394:	8943      	ldrh	r3, [r0, #10]
 8023396:	2b1b      	cmp	r3, #27
 8023398:	d93c      	bls.n	8023414 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802339a:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 802339c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 802339e:	f7f7 f893 	bl	801a4c8 <lwip_htons>
 80233a2:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80233a4:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80233a8:	2b06      	cmp	r3, #6
 80233aa:	d006      	beq.n	80233ba <etharp_raw+0x52>
 80233ac:	4b23      	ldr	r3, [pc, #140]	; (802343c <etharp_raw+0xd4>)
 80233ae:	f240 4269 	movw	r2, #1129	; 0x469
 80233b2:	4923      	ldr	r1, [pc, #140]	; (8023440 <etharp_raw+0xd8>)
 80233b4:	4823      	ldr	r0, [pc, #140]	; (8023444 <etharp_raw+0xdc>)
 80233b6:	f003 f98d 	bl	80266d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80233ba:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80233bc:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80233be:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80233c0:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80233c2:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80233c4:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80233c6:	88b9      	ldrh	r1, [r7, #4]
 80233c8:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80233ca:	f8da 1000 	ldr.w	r1, [sl]
 80233ce:	f8c4 1012 	str.w	r1, [r4, #18]
 80233d2:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 80233d6:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80233d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80233da:	6809      	ldr	r1, [r1, #0]
 80233dc:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80233e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80233e2:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80233e4:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80233e6:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80233e8:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80233ea:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80233ec:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80233ee:	2108      	movs	r1, #8
 80233f0:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80233f2:	2106      	movs	r1, #6
 80233f4:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80233f6:	2104      	movs	r1, #4
 80233f8:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80233fa:	f640 0106 	movw	r1, #2054	; 0x806
 80233fe:	9100      	str	r1, [sp, #0]
 8023400:	4629      	mov	r1, r5
 8023402:	f001 fbf5 	bl	8024bf0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8023406:	4628      	mov	r0, r5
 8023408:	f7f9 f89a 	bl	801c540 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 802340c:	4630      	mov	r0, r6
}
 802340e:	b002      	add	sp, #8
 8023410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023414:	4b09      	ldr	r3, [pc, #36]	; (802343c <etharp_raw+0xd4>)
 8023416:	f240 4262 	movw	r2, #1122	; 0x462
 802341a:	490b      	ldr	r1, [pc, #44]	; (8023448 <etharp_raw+0xe0>)
 802341c:	4809      	ldr	r0, [pc, #36]	; (8023444 <etharp_raw+0xdc>)
 802341e:	f003 f959 	bl	80266d4 <iprintf>
 8023422:	e7ba      	b.n	802339a <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023424:	4b05      	ldr	r3, [pc, #20]	; (802343c <etharp_raw+0xd4>)
 8023426:	f240 4257 	movw	r2, #1111	; 0x457
 802342a:	4908      	ldr	r1, [pc, #32]	; (802344c <etharp_raw+0xe4>)
 802342c:	4805      	ldr	r0, [pc, #20]	; (8023444 <etharp_raw+0xdc>)
 802342e:	f003 f951 	bl	80266d4 <iprintf>
 8023432:	e7a6      	b.n	8023382 <etharp_raw+0x1a>
    return ERR_MEM;
 8023434:	f04f 30ff 	mov.w	r0, #4294967295
 8023438:	e7e9      	b.n	802340e <etharp_raw+0xa6>
 802343a:	bf00      	nop
 802343c:	08046f34 	.word	0x08046f34
 8023440:	08046ff4 	.word	0x08046ff4
 8023444:	0802b3cc 	.word	0x0802b3cc
 8023448:	08046fc0 	.word	0x08046fc0
 802344c:	0802e648 	.word	0x0802e648

08023450 <etharp_output_to_arp_index>:
{
 8023450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8023454:	4f37      	ldr	r7, [pc, #220]	; (8023534 <etharp_output_to_arp_index+0xe4>)
 8023456:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 802345a:	b085      	sub	sp, #20
 802345c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802345e:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 8023462:	4605      	mov	r5, r0
 8023464:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8023466:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802346a:	f899 3014 	ldrb.w	r3, [r9, #20]
 802346e:	2b01      	cmp	r3, #1
 8023470:	d93c      	bls.n	80234ec <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8023472:	2b02      	cmp	r3, #2
 8023474:	d011      	beq.n	802349a <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023476:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023478:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802347c:	fb02 7404 	mla	r4, r2, r4, r7
 8023480:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8023482:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8023486:	4623      	mov	r3, r4
 8023488:	464a      	mov	r2, r9
 802348a:	4631      	mov	r1, r6
 802348c:	4628      	mov	r0, r5
 802348e:	9700      	str	r7, [sp, #0]
 8023490:	f001 fbae 	bl	8024bf0 <ethernet_output>
}
 8023494:	b005      	add	sp, #20
 8023496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 802349a:	44a0      	add	r8, r4
 802349c:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 80234a0:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 80234a4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80234a8:	d82a      	bhi.n	8023500 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80234aa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80234ae:	d3e2      	bcc.n	8023476 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80234b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80234b4:	2301      	movs	r3, #1
 80234b6:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 80234ba:	4628      	mov	r0, r5
 80234bc:	00e4      	lsls	r4, r4, #3
 80234be:	9303      	str	r3, [sp, #12]
 80234c0:	4b1d      	ldr	r3, [pc, #116]	; (8023538 <etharp_output_to_arp_index+0xe8>)
 80234c2:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80234c4:	f104 020c 	add.w	r2, r4, #12
 80234c8:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80234cc:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80234ce:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80234d0:	18bc      	adds	r4, r7, r2
 80234d2:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80234d4:	9300      	str	r3, [sp, #0]
 80234d6:	464b      	mov	r3, r9
 80234d8:	4622      	mov	r2, r4
 80234da:	9702      	str	r7, [sp, #8]
 80234dc:	f7ff ff44 	bl	8023368 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80234e0:	2800      	cmp	r0, #0
 80234e2:	d1ce      	bne.n	8023482 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80234e4:	2303      	movs	r3, #3
 80234e6:	f888 3014 	strb.w	r3, [r8, #20]
 80234ea:	e7ca      	b.n	8023482 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80234ec:	4b13      	ldr	r3, [pc, #76]	; (802353c <etharp_output_to_arp_index+0xec>)
 80234ee:	f240 22ee 	movw	r2, #750	; 0x2ee
 80234f2:	4913      	ldr	r1, [pc, #76]	; (8023540 <etharp_output_to_arp_index+0xf0>)
 80234f4:	4813      	ldr	r0, [pc, #76]	; (8023544 <etharp_output_to_arp_index+0xf4>)
 80234f6:	f003 f8ed 	bl	80266d4 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80234fa:	f899 3014 	ldrb.w	r3, [r9, #20]
 80234fe:	e7b8      	b.n	8023472 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023500:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023504:	2301      	movs	r3, #1
 8023506:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802350a:	4a0f      	ldr	r2, [pc, #60]	; (8023548 <etharp_output_to_arp_index+0xf8>)
 802350c:	00e4      	lsls	r4, r4, #3
 802350e:	9303      	str	r3, [sp, #12]
 8023510:	4649      	mov	r1, r9
 8023512:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023514:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023516:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023518:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802351a:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802351c:	9302      	str	r3, [sp, #8]
 802351e:	4b06      	ldr	r3, [pc, #24]	; (8023538 <etharp_output_to_arp_index+0xe8>)
 8023520:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023522:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023524:	9300      	str	r3, [sp, #0]
 8023526:	464b      	mov	r3, r9
 8023528:	f7ff ff1e 	bl	8023368 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 802352c:	2800      	cmp	r0, #0
 802352e:	d0d9      	beq.n	80234e4 <etharp_output_to_arp_index+0x94>
 8023530:	e7a7      	b.n	8023482 <etharp_output_to_arp_index+0x32>
 8023532:	bf00      	nop
 8023534:	2002e548 	.word	0x2002e548
 8023538:	0804746c 	.word	0x0804746c
 802353c:	08046f34 	.word	0x08046f34
 8023540:	08047038 	.word	0x08047038
 8023544:	0802b3cc 	.word	0x0802b3cc
 8023548:	08047464 	.word	0x08047464

0802354c <etharp_tmr>:
{
 802354c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023550:	4c1e      	ldr	r4, [pc, #120]	; (80235cc <etharp_tmr+0x80>)
 8023552:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023554:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023556:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80235d4 <etharp_tmr+0x88>
 802355a:	4f1d      	ldr	r7, [pc, #116]	; (80235d0 <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 802355c:	2602      	movs	r6, #2
 802355e:	e00d      	b.n	802357c <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8023560:	2a01      	cmp	r2, #1
 8023562:	d101      	bne.n	8023568 <etharp_tmr+0x1c>
 8023564:	2b04      	cmp	r3, #4
 8023566:	d813      	bhi.n	8023590 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8023568:	2a03      	cmp	r2, #3
 802356a:	d01b      	beq.n	80235a4 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802356c:	2a04      	cmp	r2, #4
 802356e:	d01c      	beq.n	80235aa <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023570:	2a01      	cmp	r2, #1
 8023572:	d01c      	beq.n	80235ae <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023574:	3501      	adds	r5, #1
 8023576:	3418      	adds	r4, #24
 8023578:	2d20      	cmp	r5, #32
 802357a:	d010      	beq.n	802359e <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 802357c:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 802357e:	2a00      	cmp	r2, #0
 8023580:	d0f8      	beq.n	8023574 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 8023582:	89e3      	ldrh	r3, [r4, #14]
 8023584:	3301      	adds	r3, #1
 8023586:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023588:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 802358c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802358e:	d3e7      	bcc.n	8023560 <etharp_tmr+0x14>
        etharp_free_entry(i);
 8023590:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023592:	3501      	adds	r5, #1
        etharp_free_entry(i);
 8023594:	f7ff fe02 	bl	802319c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023598:	3418      	adds	r4, #24
 802359a:	2d20      	cmp	r5, #32
 802359c:	d1ee      	bne.n	802357c <etharp_tmr+0x30>
}
 802359e:	b004      	add	sp, #16
 80235a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80235a4:	2304      	movs	r3, #4
 80235a6:	7423      	strb	r3, [r4, #16]
 80235a8:	e7e4      	b.n	8023574 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80235aa:	7426      	strb	r6, [r4, #16]
 80235ac:	e7e2      	b.n	8023574 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80235ae:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80235b0:	f8cd 8004 	str.w	r8, [sp, #4]
 80235b4:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80235b8:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80235ba:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80235be:	9100      	str	r1, [sp, #0]
 80235c0:	463a      	mov	r2, r7
 80235c2:	4619      	mov	r1, r3
 80235c4:	f7ff fed0 	bl	8023368 <etharp_raw>
 80235c8:	e7d4      	b.n	8023574 <etharp_tmr+0x28>
 80235ca:	bf00      	nop
 80235cc:	2002e54c 	.word	0x2002e54c
 80235d0:	08047464 	.word	0x08047464
 80235d4:	0804746c 	.word	0x0804746c

080235d8 <etharp_cleanup_netif>:
{
 80235d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80235da:	4c0c      	ldr	r4, [pc, #48]	; (802360c <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80235dc:	2500      	movs	r5, #0
{
 80235de:	4607      	mov	r7, r0
 80235e0:	f504 7640 	add.w	r6, r4, #768	; 0x300
 80235e4:	e003      	b.n	80235ee <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80235e6:	3418      	adds	r4, #24
 80235e8:	3501      	adds	r5, #1
 80235ea:	42b4      	cmp	r4, r6
 80235ec:	d00c      	beq.n	8023608 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80235ee:	7d23      	ldrb	r3, [r4, #20]
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d0f8      	beq.n	80235e6 <etharp_cleanup_netif+0xe>
 80235f4:	68a3      	ldr	r3, [r4, #8]
 80235f6:	42bb      	cmp	r3, r7
 80235f8:	d1f5      	bne.n	80235e6 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80235fa:	3418      	adds	r4, #24
      etharp_free_entry(i);
 80235fc:	4628      	mov	r0, r5
 80235fe:	f7ff fdcd 	bl	802319c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023602:	3501      	adds	r5, #1
 8023604:	42b4      	cmp	r4, r6
 8023606:	d1f2      	bne.n	80235ee <etharp_cleanup_netif+0x16>
}
 8023608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802360a:	bf00      	nop
 802360c:	2002e548 	.word	0x2002e548

08023610 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8023610:	2900      	cmp	r1, #0
 8023612:	f000 808e 	beq.w	8023732 <etharp_input+0x122>
{
 8023616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 802361a:	6846      	ldr	r6, [r0, #4]
{
 802361c:	b087      	sub	sp, #28
 802361e:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023620:	8833      	ldrh	r3, [r6, #0]
 8023622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023626:	d102      	bne.n	802362e <etharp_input+0x1e>
 8023628:	7933      	ldrb	r3, [r6, #4]
 802362a:	2b06      	cmp	r3, #6
 802362c:	d005      	beq.n	802363a <etharp_input+0x2a>
    pbuf_free(p);
 802362e:	4620      	mov	r0, r4
}
 8023630:	b007      	add	sp, #28
 8023632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8023636:	f7f8 bf83 	b.w	801c540 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802363a:	7973      	ldrb	r3, [r6, #5]
 802363c:	2b04      	cmp	r3, #4
 802363e:	d1f6      	bne.n	802362e <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023640:	8873      	ldrh	r3, [r6, #2]
 8023642:	2b08      	cmp	r3, #8
 8023644:	d1f3      	bne.n	802362e <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8023646:	f8d6 000e 	ldr.w	r0, [r6, #14]
 802364a:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802364c:	684b      	ldr	r3, [r1, #4]
 802364e:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8023652:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023654:	2b00      	cmp	r3, #0
 8023656:	d073      	beq.n	8023740 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8023658:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802365c:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8023660:	faba fa8a 	clz	sl, sl
 8023664:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8023668:	f1ca 0702 	rsb	r7, sl, #2
 802366c:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802366e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8023672:	2b06      	cmp	r3, #6
 8023674:	d007      	beq.n	8023686 <etharp_input+0x76>
 8023676:	4b3e      	ldr	r3, [pc, #248]	; (8023770 <etharp_input+0x160>)
 8023678:	f240 12a9 	movw	r2, #425	; 0x1a9
 802367c:	493d      	ldr	r1, [pc, #244]	; (8023774 <etharp_input+0x164>)
 802367e:	483e      	ldr	r0, [pc, #248]	; (8023778 <etharp_input+0x168>)
 8023680:	f003 f828 	bl	80266d4 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8023684:	9805      	ldr	r0, [sp, #20]
 8023686:	2800      	cmp	r0, #0
 8023688:	d042      	beq.n	8023710 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802368a:	4629      	mov	r1, r5
 802368c:	f000 fd30 	bl	80240f0 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8023690:	4681      	mov	r9, r0
 8023692:	2800      	cmp	r0, #0
 8023694:	d13c      	bne.n	8023710 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 8023696:	9b05      	ldr	r3, [sp, #20]
 8023698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802369c:	2be0      	cmp	r3, #224	; 0xe0
 802369e:	d037      	beq.n	8023710 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 80236a0:	4639      	mov	r1, r7
 80236a2:	462a      	mov	r2, r5
 80236a4:	a805      	add	r0, sp, #20
 80236a6:	f7ff fdb9 	bl	802321c <etharp_find_entry>
  if (i < 0) {
 80236aa:	2800      	cmp	r0, #0
 80236ac:	db30      	blt.n	8023710 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80236ae:	4a33      	ldr	r2, [pc, #204]	; (802377c <etharp_input+0x16c>)
 80236b0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80236b4:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80236b6:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 80236ba:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 80236be:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80236c0:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 80236c2:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80236c4:	fb10 330c 	smlabb	r3, r0, ip, r3
 80236c8:	f8d8 0000 	ldr.w	r0, [r8]
 80236cc:	50d0      	str	r0, [r2, r3]
 80236ce:	18d0      	adds	r0, r2, r3
 80236d0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80236d4:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 80236d6:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 80236da:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 80236de:	b1b9      	cbz	r1, 8023710 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80236e0:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 80236e4:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 80236e6:	200b      	movs	r0, #11
    p = q->p;
 80236e8:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 80236ec:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 80236ee:	f7f8 fa0f 	bl	801bb10 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80236f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80236f6:	4659      	mov	r1, fp
 80236f8:	464a      	mov	r2, r9
 80236fa:	9300      	str	r3, [sp, #0]
 80236fc:	4628      	mov	r0, r5
 80236fe:	4643      	mov	r3, r8
 8023700:	f001 fa76 	bl	8024bf0 <ethernet_output>
    pbuf_free(p);
 8023704:	4658      	mov	r0, fp
 8023706:	f7f8 ff1b 	bl	801c540 <pbuf_free>
  while (arp_table[i].q != NULL) {
 802370a:	6839      	ldr	r1, [r7, #0]
 802370c:	2900      	cmp	r1, #0
 802370e:	d1e9      	bne.n	80236e4 <etharp_input+0xd4>
  switch (hdr->opcode) {
 8023710:	88f3      	ldrh	r3, [r6, #6]
 8023712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023716:	d018      	beq.n	802374a <etharp_input+0x13a>
 8023718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802371c:	d103      	bne.n	8023726 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 802371e:	a905      	add	r1, sp, #20
 8023720:	4628      	mov	r0, r5
 8023722:	f7ff f971 	bl	8022a08 <dhcp_arp_reply>
  pbuf_free(p);
 8023726:	4620      	mov	r0, r4
 8023728:	f7f8 ff0a 	bl	801c540 <pbuf_free>
}
 802372c:	b007      	add	sp, #28
 802372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8023732:	4b0f      	ldr	r3, [pc, #60]	; (8023770 <etharp_input+0x160>)
 8023734:	f240 228a 	movw	r2, #650	; 0x28a
 8023738:	4911      	ldr	r1, [pc, #68]	; (8023780 <etharp_input+0x170>)
 802373a:	480f      	ldr	r0, [pc, #60]	; (8023778 <etharp_input+0x168>)
 802373c:	f002 bfca 	b.w	80266d4 <iprintf>
    for_us = 0;
 8023740:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8023742:	f106 0808 	add.w	r8, r6, #8
 8023746:	2702      	movs	r7, #2
 8023748:	e791      	b.n	802366e <etharp_input+0x5e>
      if (for_us) {
 802374a:	f1ba 0f00 	cmp.w	sl, #0
 802374e:	d0ea      	beq.n	8023726 <etharp_input+0x116>
        etharp_raw(netif,
 8023750:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8023752:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 8023756:	4642      	mov	r2, r8
 8023758:	4628      	mov	r0, r5
 802375a:	9103      	str	r1, [sp, #12]
 802375c:	a905      	add	r1, sp, #20
 802375e:	f8cd 8004 	str.w	r8, [sp, #4]
 8023762:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8023764:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8023766:	9100      	str	r1, [sp, #0]
 8023768:	4619      	mov	r1, r3
 802376a:	f7ff fdfd 	bl	8023368 <etharp_raw>
 802376e:	e7da      	b.n	8023726 <etharp_input+0x116>
 8023770:	08046f34 	.word	0x08046f34
 8023774:	08047088 	.word	0x08047088
 8023778:	0802b3cc 	.word	0x0802b3cc
 802377c:	2002e548 	.word	0x2002e548
 8023780:	0802e648 	.word	0x0802e648

08023784 <etharp_query>:
{
 8023784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023788:	468a      	mov	sl, r1
 802378a:	b085      	sub	sp, #20
 802378c:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802378e:	4601      	mov	r1, r0
 8023790:	f8da 0000 	ldr.w	r0, [sl]
{
 8023794:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023796:	f000 fcab 	bl	80240f0 <ip4_addr_isbroadcast_u32>
 802379a:	2800      	cmp	r0, #0
 802379c:	f040 80d1 	bne.w	8023942 <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 80237a0:	f8da 3000 	ldr.w	r3, [sl]
 80237a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 80237a8:	2ae0      	cmp	r2, #224	; 0xe0
 80237aa:	f000 80ca 	beq.w	8023942 <etharp_query+0x1be>
 80237ae:	2b00      	cmp	r3, #0
 80237b0:	f000 80c7 	beq.w	8023942 <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80237b4:	462a      	mov	r2, r5
 80237b6:	2101      	movs	r1, #1
 80237b8:	4650      	mov	r0, sl
 80237ba:	f7ff fd2f 	bl	802321c <etharp_find_entry>
  if (i_err < 0) {
 80237be:	1e07      	subs	r7, r0, #0
 80237c0:	db52      	blt.n	8023868 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80237c2:	2f7e      	cmp	r7, #126	; 0x7e
 80237c4:	dc48      	bgt.n	8023858 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 80237c6:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80237c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8023978 <etharp_query+0x1f4>
 80237cc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80237d0:	ea4f 0947 	mov.w	r9, r7, lsl #1
 80237d4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80237d8:	7d1a      	ldrb	r2, [r3, #20]
 80237da:	b18a      	cbz	r2, 8023800 <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80237dc:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 80237e0:	2e00      	cmp	r6, #0
 80237e2:	f000 80a0 	beq.w	8023926 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80237e6:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 80237ea:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80237ee:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80237f2:	7d13      	ldrb	r3, [r2, #20]
 80237f4:	2b01      	cmp	r3, #1
 80237f6:	d81e      	bhi.n	8023836 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80237f8:	d03a      	beq.n	8023870 <etharp_query+0xec>
}
 80237fa:	b005      	add	sp, #20
 80237fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 8023800:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023802:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 8023806:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8023808:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 802380c:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802380e:	4628      	mov	r0, r5
 8023810:	4b53      	ldr	r3, [pc, #332]	; (8023960 <etharp_query+0x1dc>)
 8023812:	4659      	mov	r1, fp
 8023814:	9203      	str	r2, [sp, #12]
 8023816:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023818:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802381a:	4a52      	ldr	r2, [pc, #328]	; (8023964 <etharp_query+0x1e0>)
 802381c:	9300      	str	r3, [sp, #0]
 802381e:	465b      	mov	r3, fp
 8023820:	f7ff fda2 	bl	8023368 <etharp_raw>
    if (q == NULL) {
 8023824:	2e00      	cmp	r6, #0
 8023826:	d0e8      	beq.n	80237fa <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023828:	eb09 0207 	add.w	r2, r9, r7
 802382c:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8023830:	7d13      	ldrb	r3, [r2, #20]
 8023832:	2b01      	cmp	r3, #1
 8023834:	d9e0      	bls.n	80237f8 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8023836:	2318      	movs	r3, #24
 8023838:	f44f 6400 	mov.w	r4, #2048	; 0x800
 802383c:	465a      	mov	r2, fp
 802383e:	4631      	mov	r1, r6
 8023840:	fb03 8307 	mla	r3, r3, r7, r8
 8023844:	4628      	mov	r0, r5
 8023846:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 8023848:	4c47      	ldr	r4, [pc, #284]	; (8023968 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802384a:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 802384c:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802384e:	f001 f9cf 	bl	8024bf0 <ethernet_output>
}
 8023852:	b005      	add	sp, #20
 8023854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8023858:	4b44      	ldr	r3, [pc, #272]	; (802396c <etharp_query+0x1e8>)
 802385a:	f240 32c1 	movw	r2, #961	; 0x3c1
 802385e:	4944      	ldr	r1, [pc, #272]	; (8023970 <etharp_query+0x1ec>)
 8023860:	4844      	ldr	r0, [pc, #272]	; (8023974 <etharp_query+0x1f0>)
 8023862:	f002 ff37 	bl	80266d4 <iprintf>
 8023866:	e7ae      	b.n	80237c6 <etharp_query+0x42>
    return (err_t)i_err;
 8023868:	b278      	sxtb	r0, r7
}
 802386a:	b005      	add	sp, #20
 802386c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023870:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8023872:	4d3e      	ldr	r5, [pc, #248]	; (802396c <etharp_query+0x1e8>)
 8023874:	f8df b104 	ldr.w	fp, [pc, #260]	; 802397c <etharp_query+0x1f8>
 8023878:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8023974 <etharp_query+0x1f0>
 802387c:	e005      	b.n	802388a <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 802387e:	7b23      	ldrb	r3, [r4, #12]
 8023880:	065a      	lsls	r2, r3, #25
 8023882:	d413      	bmi.n	80238ac <etharp_query+0x128>
      p = p->next;
 8023884:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8023886:	2c00      	cmp	r4, #0
 8023888:	d038      	beq.n	80238fc <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802388a:	8962      	ldrh	r2, [r4, #10]
 802388c:	8923      	ldrh	r3, [r4, #8]
 802388e:	429a      	cmp	r2, r3
 8023890:	d1f5      	bne.n	802387e <etharp_query+0xfa>
 8023892:	6822      	ldr	r2, [r4, #0]
 8023894:	462b      	mov	r3, r5
 8023896:	b132      	cbz	r2, 80238a6 <etharp_query+0x122>
 8023898:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802389c:	4659      	mov	r1, fp
 802389e:	4650      	mov	r0, sl
 80238a0:	f002 ff18 	bl	80266d4 <iprintf>
 80238a4:	e7eb      	b.n	802387e <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 80238a6:	7b23      	ldrb	r3, [r4, #12]
 80238a8:	065b      	lsls	r3, r3, #25
 80238aa:	d527      	bpl.n	80238fc <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80238ac:	4632      	mov	r2, r6
 80238ae:	f44f 7120 	mov.w	r1, #640	; 0x280
 80238b2:	200e      	movs	r0, #14
 80238b4:	f7f8 ffd6 	bl	801c864 <pbuf_clone>
    if (p != NULL) {
 80238b8:	4606      	mov	r6, r0
 80238ba:	2800      	cmp	r0, #0
 80238bc:	d047      	beq.n	802394e <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 80238be:	f240 4206 	movw	r2, #1030	; 0x406
 80238c2:	492a      	ldr	r1, [pc, #168]	; (802396c <etharp_query+0x1e8>)
 80238c4:	200b      	movs	r0, #11
 80238c6:	f7f8 f8ed 	bl	801baa4 <memp_malloc_fn>
      if (new_entry != NULL) {
 80238ca:	4602      	mov	r2, r0
 80238cc:	2800      	cmp	r0, #0
 80238ce:	d041      	beq.n	8023954 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 80238d0:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 80238d4:	2100      	movs	r1, #0
        new_entry->p = p;
 80238d6:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 80238d8:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 80238da:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 80238dc:	f858 5003 	ldr.w	r5, [r8, r3]
 80238e0:	b1ed      	cbz	r5, 802391e <etharp_query+0x19a>
          while (r->next != NULL) {
 80238e2:	682c      	ldr	r4, [r5, #0]
 80238e4:	b384      	cbz	r4, 8023948 <etharp_query+0x1c4>
          qlen++;
 80238e6:	2301      	movs	r3, #1
            qlen++;
 80238e8:	4620      	mov	r0, r4
          while (r->next != NULL) {
 80238ea:	6824      	ldr	r4, [r4, #0]
            qlen++;
 80238ec:	3301      	adds	r3, #1
          while (r->next != NULL) {
 80238ee:	2c00      	cmp	r4, #0
 80238f0:	d1fa      	bne.n	80238e8 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 80238f2:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 80238f4:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80238f6:	d805      	bhi.n	8023904 <etharp_query+0x180>
        result = ERR_OK;
 80238f8:	4620      	mov	r0, r4
 80238fa:	e77e      	b.n	80237fa <etharp_query+0x76>
      pbuf_ref(p);
 80238fc:	4630      	mov	r0, r6
 80238fe:	f7f8 fe3d 	bl	801c57c <pbuf_ref>
    if (p != NULL) {
 8023902:	e7dc      	b.n	80238be <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 8023904:	682b      	ldr	r3, [r5, #0]
 8023906:	444f      	add	r7, r9
          pbuf_free(old->p);
 8023908:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 802390a:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 802390e:	f7f8 fe17 	bl	801c540 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8023912:	200b      	movs	r0, #11
 8023914:	4629      	mov	r1, r5
 8023916:	f7f8 f8fb 	bl	801bb10 <memp_free>
        result = ERR_OK;
 802391a:	4620      	mov	r0, r4
 802391c:	e76d      	b.n	80237fa <etharp_query+0x76>
 802391e:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 8023920:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 8023924:	e769      	b.n	80237fa <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023926:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023928:	2301      	movs	r3, #1
 802392a:	4c0d      	ldr	r4, [pc, #52]	; (8023960 <etharp_query+0x1dc>)
 802392c:	4659      	mov	r1, fp
 802392e:	4628      	mov	r0, r5
 8023930:	e9cd a302 	strd	sl, r3, [sp, #8]
 8023934:	e9cd 2400 	strd	r2, r4, [sp]
 8023938:	465b      	mov	r3, fp
 802393a:	4a0a      	ldr	r2, [pc, #40]	; (8023964 <etharp_query+0x1e0>)
 802393c:	f7ff fd14 	bl	8023368 <etharp_raw>
    if (q == NULL) {
 8023940:	e75b      	b.n	80237fa <etharp_query+0x76>
    return ERR_ARG;
 8023942:	f06f 000f 	mvn.w	r0, #15
 8023946:	e758      	b.n	80237fa <etharp_query+0x76>
        result = ERR_OK;
 8023948:	4620      	mov	r0, r4
          r->next = new_entry;
 802394a:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 802394c:	e755      	b.n	80237fa <etharp_query+0x76>
      result = ERR_MEM;
 802394e:	f04f 30ff 	mov.w	r0, #4294967295
 8023952:	e752      	b.n	80237fa <etharp_query+0x76>
        pbuf_free(p);
 8023954:	4630      	mov	r0, r6
 8023956:	f7f8 fdf3 	bl	801c540 <pbuf_free>
        result = ERR_MEM;
 802395a:	f04f 30ff 	mov.w	r0, #4294967295
 802395e:	e74c      	b.n	80237fa <etharp_query+0x76>
 8023960:	0804746c 	.word	0x0804746c
 8023964:	08047464 	.word	0x08047464
 8023968:	2002e848 	.word	0x2002e848
 802396c:	08046f34 	.word	0x08046f34
 8023970:	080470ac 	.word	0x080470ac
 8023974:	0802b3cc 	.word	0x0802b3cc
 8023978:	2002e548 	.word	0x2002e548
 802397c:	080470bc 	.word	0x080470bc

08023980 <etharp_output>:
{
 8023980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023984:	460f      	mov	r7, r1
 8023986:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023988:	4605      	mov	r5, r0
{
 802398a:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802398c:	2800      	cmp	r0, #0
 802398e:	f000 8086 	beq.w	8023a9e <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023992:	2f00      	cmp	r7, #0
 8023994:	d072      	beq.n	8023a7c <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023996:	2e00      	cmp	r6, #0
 8023998:	d079      	beq.n	8023a8e <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 802399a:	4629      	mov	r1, r5
 802399c:	6830      	ldr	r0, [r6, #0]
 802399e:	f000 fba7 	bl	80240f0 <ip4_addr_isbroadcast_u32>
 80239a2:	2800      	cmp	r0, #0
 80239a4:	d160      	bne.n	8023a68 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80239a6:	6833      	ldr	r3, [r6, #0]
 80239a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80239ac:	2ae0      	cmp	r2, #224	; 0xe0
 80239ae:	d03b      	beq.n	8023a28 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80239b0:	686a      	ldr	r2, [r5, #4]
 80239b2:	68a9      	ldr	r1, [r5, #8]
 80239b4:	405a      	eors	r2, r3
 80239b6:	420a      	tst	r2, r1
 80239b8:	d009      	beq.n	80239ce <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 80239ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80239bc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80239c0:	4293      	cmp	r3, r2
 80239c2:	d004      	beq.n	80239ce <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80239c4:	68eb      	ldr	r3, [r5, #12]
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	d07b      	beq.n	8023ac2 <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 80239ca:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80239ce:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8023ae4 <etharp_output+0x164>
 80239d2:	4b3d      	ldr	r3, [pc, #244]	; (8023ac8 <etharp_output+0x148>)
 80239d4:	f898 2000 	ldrb.w	r2, [r8]
 80239d8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80239dc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80239e0:	7d19      	ldrb	r1, [r3, #20]
 80239e2:	2901      	cmp	r1, #1
 80239e4:	d902      	bls.n	80239ec <etharp_output+0x6c>
 80239e6:	6899      	ldr	r1, [r3, #8]
 80239e8:	42a9      	cmp	r1, r5
 80239ea:	d063      	beq.n	8023ab4 <etharp_output+0x134>
 80239ec:	4c36      	ldr	r4, [pc, #216]	; (8023ac8 <etharp_output+0x148>)
{
 80239ee:	2300      	movs	r3, #0
 80239f0:	e003      	b.n	80239fa <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80239f2:	2b20      	cmp	r3, #32
 80239f4:	f104 0418 	add.w	r4, r4, #24
 80239f8:	d038      	beq.n	8023a6c <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80239fa:	f894 c014 	ldrb.w	ip, [r4, #20]
 80239fe:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023a00:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023a02:	f1bc 0f01 	cmp.w	ip, #1
 8023a06:	d9f4      	bls.n	80239f2 <etharp_output+0x72>
 8023a08:	68a0      	ldr	r0, [r4, #8]
 8023a0a:	42a8      	cmp	r0, r5
 8023a0c:	d1f1      	bne.n	80239f2 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 8023a0e:	6860      	ldr	r0, [r4, #4]
 8023a10:	6831      	ldr	r1, [r6, #0]
 8023a12:	4281      	cmp	r1, r0
 8023a14:	d1ed      	bne.n	80239f2 <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 8023a16:	4639      	mov	r1, r7
 8023a18:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 8023a1a:	f888 2000 	strb.w	r2, [r8]
}
 8023a1e:	b004      	add	sp, #16
 8023a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8023a24:	f7ff bd14 	b.w	8023450 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023a28:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023a2a:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8023a2c:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023a2e:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023a32:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023a36:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023a38:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023a3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8023a3e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023a42:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 8023a46:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023a48:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8023a4c:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8023a50:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8023a54:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 8023a58:	4639      	mov	r1, r7
 8023a5a:	4628      	mov	r0, r5
 8023a5c:	9400      	str	r4, [sp, #0]
 8023a5e:	f001 f8c7 	bl	8024bf0 <ethernet_output>
}
 8023a62:	b004      	add	sp, #16
 8023a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 8023a68:	4b18      	ldr	r3, [pc, #96]	; (8023acc <etharp_output+0x14c>)
 8023a6a:	e7f1      	b.n	8023a50 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 8023a6c:	463a      	mov	r2, r7
 8023a6e:	4631      	mov	r1, r6
 8023a70:	4628      	mov	r0, r5
}
 8023a72:	b004      	add	sp, #16
 8023a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 8023a78:	f7ff be84 	b.w	8023784 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023a7c:	4b14      	ldr	r3, [pc, #80]	; (8023ad0 <etharp_output+0x150>)
 8023a7e:	f240 321f 	movw	r2, #799	; 0x31f
 8023a82:	4914      	ldr	r1, [pc, #80]	; (8023ad4 <etharp_output+0x154>)
 8023a84:	4814      	ldr	r0, [pc, #80]	; (8023ad8 <etharp_output+0x158>)
 8023a86:	f002 fe25 	bl	80266d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023a8a:	2e00      	cmp	r6, #0
 8023a8c:	d185      	bne.n	802399a <etharp_output+0x1a>
 8023a8e:	4b10      	ldr	r3, [pc, #64]	; (8023ad0 <etharp_output+0x150>)
 8023a90:	f44f 7248 	mov.w	r2, #800	; 0x320
 8023a94:	4911      	ldr	r1, [pc, #68]	; (8023adc <etharp_output+0x15c>)
 8023a96:	4810      	ldr	r0, [pc, #64]	; (8023ad8 <etharp_output+0x158>)
 8023a98:	f002 fe1c 	bl	80266d4 <iprintf>
 8023a9c:	e77d      	b.n	802399a <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023a9e:	4b0c      	ldr	r3, [pc, #48]	; (8023ad0 <etharp_output+0x150>)
 8023aa0:	f240 321e 	movw	r2, #798	; 0x31e
 8023aa4:	490e      	ldr	r1, [pc, #56]	; (8023ae0 <etharp_output+0x160>)
 8023aa6:	480c      	ldr	r0, [pc, #48]	; (8023ad8 <etharp_output+0x158>)
 8023aa8:	f002 fe14 	bl	80266d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023aac:	2f00      	cmp	r7, #0
 8023aae:	f47f af72 	bne.w	8023996 <etharp_output+0x16>
 8023ab2:	e7e3      	b.n	8023a7c <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023ab4:	685b      	ldr	r3, [r3, #4]
 8023ab6:	6831      	ldr	r1, [r6, #0]
 8023ab8:	4299      	cmp	r1, r3
 8023aba:	d197      	bne.n	80239ec <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8023abc:	4639      	mov	r1, r7
 8023abe:	4628      	mov	r0, r5
 8023ac0:	e7ad      	b.n	8023a1e <etharp_output+0x9e>
            return ERR_RTE;
 8023ac2:	f06f 0003 	mvn.w	r0, #3
 8023ac6:	e7cc      	b.n	8023a62 <etharp_output+0xe2>
 8023ac8:	2002e548 	.word	0x2002e548
 8023acc:	08047464 	.word	0x08047464
 8023ad0:	08046f34 	.word	0x08046f34
 8023ad4:	080470d8 	.word	0x080470d8
 8023ad8:	0802b3cc 	.word	0x0802b3cc
 8023adc:	08047068 	.word	0x08047068
 8023ae0:	0802e648 	.word	0x0802e648
 8023ae4:	2002e848 	.word	0x2002e848

08023ae8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8023ae8:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023aea:	2301      	movs	r3, #1
{
 8023aec:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023aee:	4c07      	ldr	r4, [pc, #28]	; (8023b0c <etharp_request+0x24>)
 8023af0:	4a07      	ldr	r2, [pc, #28]	; (8023b10 <etharp_request+0x28>)
 8023af2:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023af4:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023af6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8023afa:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 8023afe:	9400      	str	r4, [sp, #0]
 8023b00:	4619      	mov	r1, r3
 8023b02:	f7ff fc31 	bl	8023368 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8023b06:	b004      	add	sp, #16
 8023b08:	bd10      	pop	{r4, pc}
 8023b0a:	bf00      	nop
 8023b0c:	0804746c 	.word	0x0804746c
 8023b10:	08047464 	.word	0x08047464

08023b14 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8023b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b16:	460e      	mov	r6, r1
 8023b18:	b087      	sub	sp, #28
 8023b1a:	4617      	mov	r7, r2
 8023b1c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8023b1e:	2124      	movs	r1, #36	; 0x24
 8023b20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023b24:	2022      	movs	r0, #34	; 0x22
 8023b26:	f7f8 fb39 	bl	801c19c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8023b2a:	b3a8      	cbz	r0, 8023b98 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023b2c:	8943      	ldrh	r3, [r0, #10]
 8023b2e:	4605      	mov	r5, r0
 8023b30:	2b23      	cmp	r3, #35	; 0x23
 8023b32:	d933      	bls.n	8023b9c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8023b34:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8023b36:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8023b38:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 8023b3a:	2600      	movs	r6, #0
  icmphdr->code = code;
 8023b3c:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8023b3e:	7126      	strb	r6, [r4, #4]
 8023b40:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8023b42:	71a6      	strb	r6, [r4, #6]
 8023b44:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8023b46:	6818      	ldr	r0, [r3, #0]
 8023b48:	6859      	ldr	r1, [r3, #4]
 8023b4a:	689a      	ldr	r2, [r3, #8]
 8023b4c:	68df      	ldr	r7, [r3, #12]
 8023b4e:	60a0      	str	r0, [r4, #8]
 8023b50:	6167      	str	r7, [r4, #20]
 8023b52:	60e1      	str	r1, [r4, #12]
 8023b54:	6122      	str	r2, [r4, #16]
 8023b56:	6918      	ldr	r0, [r3, #16]
 8023b58:	6959      	ldr	r1, [r3, #20]
 8023b5a:	699a      	ldr	r2, [r3, #24]
 8023b5c:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8023b5e:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8023b60:	61e1      	str	r1, [r4, #28]
 8023b62:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8023b64:	68db      	ldr	r3, [r3, #12]
 8023b66:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8023b68:	f000 f8e6 	bl	8023d38 <ip4_route>
#endif
  if (netif != NULL) {
 8023b6c:	4607      	mov	r7, r0
 8023b6e:	b180      	cbz	r0, 8023b92 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8023b70:	8969      	ldrh	r1, [r5, #10]
 8023b72:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8023b74:	70a6      	strb	r6, [r4, #2]
 8023b76:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8023b78:	f7f7 fa4e 	bl	801b018 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023b7c:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8023b7e:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023b80:	aa05      	add	r2, sp, #20
 8023b82:	4631      	mov	r1, r6
 8023b84:	4628      	mov	r0, r5
 8023b86:	9600      	str	r6, [sp, #0]
 8023b88:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8023b8c:	23ff      	movs	r3, #255	; 0xff
 8023b8e:	f000 fa9d 	bl	80240cc <ip4_output_if>
  }
  pbuf_free(q);
 8023b92:	4628      	mov	r0, r5
 8023b94:	f7f8 fcd4 	bl	801c540 <pbuf_free>
}
 8023b98:	b007      	add	sp, #28
 8023b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023b9c:	4b03      	ldr	r3, [pc, #12]	; (8023bac <icmp_send_response+0x98>)
 8023b9e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8023ba2:	4903      	ldr	r1, [pc, #12]	; (8023bb0 <icmp_send_response+0x9c>)
 8023ba4:	4803      	ldr	r0, [pc, #12]	; (8023bb4 <icmp_send_response+0xa0>)
 8023ba6:	f002 fd95 	bl	80266d4 <iprintf>
 8023baa:	e7c3      	b.n	8023b34 <icmp_send_response+0x20>
 8023bac:	080470e4 	.word	0x080470e4
 8023bb0:	0804711c 	.word	0x0804711c
 8023bb4:	0802b3cc 	.word	0x0802b3cc

08023bb8 <icmp_input>:
{
 8023bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 8023bbc:	4f54      	ldr	r7, [pc, #336]	; (8023d10 <icmp_input+0x158>)
{
 8023bbe:	b086      	sub	sp, #24
 8023bc0:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8023bc2:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8023bc6:	f898 4000 	ldrb.w	r4, [r8]
 8023bca:	f004 040f 	and.w	r4, r4, #15
 8023bce:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8023bd0:	2c13      	cmp	r4, #19
 8023bd2:	d913      	bls.n	8023bfc <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8023bd4:	8943      	ldrh	r3, [r0, #10]
 8023bd6:	2b03      	cmp	r3, #3
 8023bd8:	d910      	bls.n	8023bfc <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8023bda:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8023bdc:	781b      	ldrb	r3, [r3, #0]
 8023bde:	2b08      	cmp	r3, #8
 8023be0:	d10c      	bne.n	8023bfc <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023be2:	6978      	ldr	r0, [r7, #20]
 8023be4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8023be8:	2be0      	cmp	r3, #224	; 0xe0
 8023bea:	d007      	beq.n	8023bfc <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8023bec:	460e      	mov	r6, r1
 8023bee:	6839      	ldr	r1, [r7, #0]
 8023bf0:	f000 fa7e 	bl	80240f0 <ip4_addr_isbroadcast_u32>
 8023bf4:	b910      	cbnz	r0, 8023bfc <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8023bf6:	892b      	ldrh	r3, [r5, #8]
 8023bf8:	2b07      	cmp	r3, #7
 8023bfa:	d805      	bhi.n	8023c08 <icmp_input+0x50>
  pbuf_free(p);
 8023bfc:	4628      	mov	r0, r5
}
 8023bfe:	b006      	add	sp, #24
 8023c00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8023c04:	f7f8 bc9c 	b.w	801c540 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8023c08:	4628      	mov	r0, r5
 8023c0a:	f7f7 fa0b 	bl	801b024 <inet_chksum_pbuf>
 8023c0e:	2800      	cmp	r0, #0
 8023c10:	d1f4      	bne.n	8023bfc <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023c12:	f104 010e 	add.w	r1, r4, #14
 8023c16:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 8023c18:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023c1c:	9105      	str	r1, [sp, #20]
 8023c1e:	f7f8 fbcf 	bl	801c3c0 <pbuf_add_header>
 8023c22:	9905      	ldr	r1, [sp, #20]
 8023c24:	2800      	cmp	r0, #0
 8023c26:	d058      	beq.n	8023cda <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8023c28:	892b      	ldrh	r3, [r5, #8]
 8023c2a:	eb03 0109 	add.w	r1, r3, r9
 8023c2e:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8023c30:	428b      	cmp	r3, r1
 8023c32:	d8e3      	bhi.n	8023bfc <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8023c34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023c38:	200e      	movs	r0, #14
 8023c3a:	f7f8 faaf 	bl	801c19c <pbuf_alloc>
        if (r == NULL) {
 8023c3e:	4682      	mov	sl, r0
 8023c40:	2800      	cmp	r0, #0
 8023c42:	d0db      	beq.n	8023bfc <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8023c44:	8942      	ldrh	r2, [r0, #10]
 8023c46:	f104 0308 	add.w	r3, r4, #8
 8023c4a:	429a      	cmp	r2, r3
 8023c4c:	d351      	bcc.n	8023cf2 <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 8023c4e:	4641      	mov	r1, r8
 8023c50:	4622      	mov	r2, r4
 8023c52:	6840      	ldr	r0, [r0, #4]
 8023c54:	f001 fd78 	bl	8025748 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8023c58:	4621      	mov	r1, r4
 8023c5a:	4650      	mov	r0, sl
 8023c5c:	f7f8 fbe4 	bl	801c428 <pbuf_remove_header>
 8023c60:	2800      	cmp	r0, #0
 8023c62:	d14a      	bne.n	8023cfa <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 8023c64:	4629      	mov	r1, r5
 8023c66:	4650      	mov	r0, sl
 8023c68:	f7f8 fcf2 	bl	801c650 <pbuf_copy>
 8023c6c:	2800      	cmp	r0, #0
 8023c6e:	d140      	bne.n	8023cf2 <icmp_input+0x13a>
        pbuf_free(p);
 8023c70:	4628      	mov	r0, r5
 8023c72:	4655      	mov	r5, sl
 8023c74:	f7f8 fc64 	bl	801c540 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8023c78:	4621      	mov	r1, r4
 8023c7a:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 8023c7c:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8023c80:	f7f8 fb9e 	bl	801c3c0 <pbuf_add_header>
 8023c84:	2800      	cmp	r0, #0
 8023c86:	d1b9      	bne.n	8023bfc <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8023c88:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023c8a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 8023c8e:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023c90:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 8023c92:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023c94:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 8023c96:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023c98:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023c9a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8023c9e:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023ca2:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023ca4:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8023ca6:	bf8c      	ite	hi
 8023ca8:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8023caa:	3308      	addls	r3, #8
 8023cac:	b29b      	uxth	r3, r3
 8023cae:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023cb2:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8023cb6:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023cb8:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8023cbc:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023cbe:	f7f7 f9ab 	bl	801b018 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023cc2:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023cc4:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023cc6:	4643      	mov	r3, r8
 8023cc8:	4912      	ldr	r1, [pc, #72]	; (8023d14 <icmp_input+0x15c>)
 8023cca:	4628      	mov	r0, r5
 8023ccc:	9700      	str	r7, [sp, #0]
 8023cce:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8023cd2:	463a      	mov	r2, r7
 8023cd4:	f000 f9fa 	bl	80240cc <ip4_output_if>
  pbuf_free(p);
 8023cd8:	e790      	b.n	8023bfc <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023cda:	4628      	mov	r0, r5
 8023cdc:	f7f8 fba4 	bl	801c428 <pbuf_remove_header>
 8023ce0:	2800      	cmp	r0, #0
 8023ce2:	d0c9      	beq.n	8023c78 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8023ce4:	4b0c      	ldr	r3, [pc, #48]	; (8023d18 <icmp_input+0x160>)
 8023ce6:	22c7      	movs	r2, #199	; 0xc7
 8023ce8:	490c      	ldr	r1, [pc, #48]	; (8023d1c <icmp_input+0x164>)
 8023cea:	480d      	ldr	r0, [pc, #52]	; (8023d20 <icmp_input+0x168>)
 8023cec:	f002 fcf2 	bl	80266d4 <iprintf>
          goto icmperr;
 8023cf0:	e784      	b.n	8023bfc <icmp_input+0x44>
          pbuf_free(r);
 8023cf2:	4650      	mov	r0, sl
 8023cf4:	f7f8 fc24 	bl	801c540 <pbuf_free>
          goto icmperr;
 8023cf8:	e780      	b.n	8023bfc <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8023cfa:	4b07      	ldr	r3, [pc, #28]	; (8023d18 <icmp_input+0x160>)
 8023cfc:	22b6      	movs	r2, #182	; 0xb6
 8023cfe:	4909      	ldr	r1, [pc, #36]	; (8023d24 <icmp_input+0x16c>)
 8023d00:	4807      	ldr	r0, [pc, #28]	; (8023d20 <icmp_input+0x168>)
 8023d02:	f002 fce7 	bl	80266d4 <iprintf>
          pbuf_free(r);
 8023d06:	4650      	mov	r0, sl
 8023d08:	f7f8 fc1a 	bl	801c540 <pbuf_free>
          goto icmperr;
 8023d0c:	e776      	b.n	8023bfc <icmp_input+0x44>
 8023d0e:	bf00      	nop
 8023d10:	2001f300 	.word	0x2001f300
 8023d14:	2001f314 	.word	0x2001f314
 8023d18:	080470e4 	.word	0x080470e4
 8023d1c:	08047180 	.word	0x08047180
 8023d20:	0802b3cc 	.word	0x0802b3cc
 8023d24:	08047148 	.word	0x08047148

08023d28 <icmp_dest_unreach>:
{
 8023d28:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8023d2a:	2103      	movs	r1, #3
 8023d2c:	f7ff bef2 	b.w	8023b14 <icmp_send_response>

08023d30 <icmp_time_exceeded>:
{
 8023d30:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8023d32:	210b      	movs	r1, #11
 8023d34:	f7ff beee 	b.w	8023b14 <icmp_send_response>

08023d38 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8023d38:	4b19      	ldr	r3, [pc, #100]	; (8023da0 <ip4_route+0x68>)
{
 8023d3a:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 8023d3c:	681b      	ldr	r3, [r3, #0]
 8023d3e:	b1ab      	cbz	r3, 8023d6c <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023d40:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8023d44:	07d4      	lsls	r4, r2, #31
 8023d46:	d5f9      	bpl.n	8023d3c <ip4_route+0x4>
 8023d48:	0751      	lsls	r1, r2, #29
 8023d4a:	d5f7      	bpl.n	8023d3c <ip4_route+0x4>
 8023d4c:	6859      	ldr	r1, [r3, #4]
 8023d4e:	2900      	cmp	r1, #0
 8023d50:	d0f4      	beq.n	8023d3c <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8023d52:	6804      	ldr	r4, [r0, #0]
 8023d54:	689d      	ldr	r5, [r3, #8]
 8023d56:	4061      	eors	r1, r4
 8023d58:	4229      	tst	r1, r5
 8023d5a:	d004      	beq.n	8023d66 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8023d5c:	0792      	lsls	r2, r2, #30
 8023d5e:	d4ed      	bmi.n	8023d3c <ip4_route+0x4>
 8023d60:	68da      	ldr	r2, [r3, #12]
 8023d62:	4294      	cmp	r4, r2
 8023d64:	d1ea      	bne.n	8023d3c <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8023d66:	4618      	mov	r0, r3
 8023d68:	bc30      	pop	{r4, r5}
 8023d6a:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8023d6c:	4b0d      	ldr	r3, [pc, #52]	; (8023da4 <ip4_route+0x6c>)
 8023d6e:	681b      	ldr	r3, [r3, #0]
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	d0f8      	beq.n	8023d66 <ip4_route+0x2e>
 8023d74:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8023d78:	f002 0205 	and.w	r2, r2, #5
 8023d7c:	2a05      	cmp	r2, #5
 8023d7e:	d108      	bne.n	8023d92 <ip4_route+0x5a>
 8023d80:	685a      	ldr	r2, [r3, #4]
 8023d82:	b152      	cbz	r2, 8023d9a <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023d84:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 8023d86:	2a7f      	cmp	r2, #127	; 0x7f
 8023d88:	bf08      	it	eq
 8023d8a:	2300      	moveq	r3, #0
}
 8023d8c:	bc30      	pop	{r4, r5}
 8023d8e:	4618      	mov	r0, r3
 8023d90:	4770      	bx	lr
    return NULL;
 8023d92:	2300      	movs	r3, #0
}
 8023d94:	bc30      	pop	{r4, r5}
 8023d96:	4618      	mov	r0, r3
 8023d98:	4770      	bx	lr
    return NULL;
 8023d9a:	4613      	mov	r3, r2
 8023d9c:	e7e3      	b.n	8023d66 <ip4_route+0x2e>
 8023d9e:	bf00      	nop
 8023da0:	2002e490 	.word	0x2002e490
 8023da4:	2002e48c 	.word	0x2002e48c

08023da8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8023da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8023dac:	6847      	ldr	r7, [r0, #4]
{
 8023dae:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 8023db0:	783b      	ldrb	r3, [r7, #0]
 8023db2:	091a      	lsrs	r2, r3, #4
 8023db4:	2a04      	cmp	r2, #4
 8023db6:	f040 80a8 	bne.w	8023f0a <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023dba:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023dbe:	8878      	ldrh	r0, [r7, #2]
 8023dc0:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023dc2:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023dc6:	f7f6 fb7f 	bl	801a4c8 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8023dca:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023dcc:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023dce:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8023dd0:	4283      	cmp	r3, r0
 8023dd2:	f200 80a0 	bhi.w	8023f16 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8023dd6:	8963      	ldrh	r3, [r4, #10]
 8023dd8:	42ab      	cmp	r3, r5
 8023dda:	f0c0 8096 	bcc.w	8023f0a <ip4_input+0x162>
 8023dde:	8923      	ldrh	r3, [r4, #8]
 8023de0:	4543      	cmp	r3, r8
 8023de2:	f0c0 8092 	bcc.w	8023f0a <ip4_input+0x162>
 8023de6:	2d13      	cmp	r5, #19
 8023de8:	f240 808f 	bls.w	8023f0a <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023dec:	693b      	ldr	r3, [r7, #16]
 8023dee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8023f90 <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023df2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023df6:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023dfa:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8023dfc:	68f8      	ldr	r0, [r7, #12]
 8023dfe:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023e02:	d073      	beq.n	8023eec <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023e04:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8023e08:	07d2      	lsls	r2, r2, #31
 8023e0a:	d503      	bpl.n	8023e14 <ip4_input+0x6c>
 8023e0c:	6872      	ldr	r2, [r6, #4]
 8023e0e:	2a00      	cmp	r2, #0
 8023e10:	f040 8094 	bne.w	8023f3c <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023e14:	b2db      	uxtb	r3, r3
 8023e16:	2b7f      	cmp	r3, #127	; 0x7f
 8023e18:	d06c      	beq.n	8023ef4 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8023e1a:	4b5c      	ldr	r3, [pc, #368]	; (8023f8c <ip4_input+0x1e4>)
 8023e1c:	681d      	ldr	r5, [r3, #0]
 8023e1e:	b935      	cbnz	r5, 8023e2e <ip4_input+0x86>
 8023e20:	e068      	b.n	8023ef4 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023e22:	f000 f965 	bl	80240f0 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023e26:	b980      	cbnz	r0, 8023e4a <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 8023e28:	682d      	ldr	r5, [r5, #0]
 8023e2a:	2d00      	cmp	r5, #0
 8023e2c:	d062      	beq.n	8023ef4 <ip4_input+0x14c>
          if (netif == inp) {
 8023e2e:	42ae      	cmp	r6, r5
 8023e30:	d0fa      	beq.n	8023e28 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023e32:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8023e36:	07db      	lsls	r3, r3, #31
 8023e38:	d5f6      	bpl.n	8023e28 <ip4_input+0x80>
 8023e3a:	686b      	ldr	r3, [r5, #4]
 8023e3c:	2b00      	cmp	r3, #0
 8023e3e:	d0f3      	beq.n	8023e28 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023e40:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023e44:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023e46:	4283      	cmp	r3, r0
 8023e48:	d1eb      	bne.n	8023e22 <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023e4a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023e4e:	2800      	cmp	r0, #0
 8023e50:	d157      	bne.n	8023f02 <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8023e52:	88fb      	ldrh	r3, [r7, #6]
 8023e54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8023e58:	b133      	cbz	r3, 8023e68 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8023e5a:	4620      	mov	r0, r4
 8023e5c:	f000 fb1c 	bl	8024498 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8023e60:	4604      	mov	r4, r0
 8023e62:	2800      	cmp	r0, #0
 8023e64:	d054      	beq.n	8023f10 <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8023e66:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8023e68:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8023e6c:	4631      	mov	r1, r6
 8023e6e:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8023e70:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8023e74:	783b      	ldrb	r3, [r7, #0]
 8023e76:	f003 030f 	and.w	r3, r3, #15
 8023e7a:	009b      	lsls	r3, r3, #2
 8023e7c:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 8023e80:	f7f8 fd9e 	bl	801c9c0 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8023e84:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8023e86:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 8023e88:	d024      	beq.n	8023ed4 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8023e8a:	4649      	mov	r1, r9
 8023e8c:	4620      	mov	r0, r4
 8023e8e:	f7f8 facb 	bl	801c428 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8023e92:	7a7b      	ldrb	r3, [r7, #9]
 8023e94:	2b06      	cmp	r3, #6
 8023e96:	d065      	beq.n	8023f64 <ip4_input+0x1bc>
 8023e98:	2b11      	cmp	r3, #17
 8023e9a:	d05e      	beq.n	8023f5a <ip4_input+0x1b2>
 8023e9c:	2b01      	cmp	r3, #1
 8023e9e:	d057      	beq.n	8023f50 <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8023ea0:	f1ba 0f02 	cmp.w	sl, #2
 8023ea4:	d013      	beq.n	8023ece <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023ea6:	4629      	mov	r1, r5
 8023ea8:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8023eac:	f000 f920 	bl	80240f0 <ip4_addr_isbroadcast_u32>
 8023eb0:	b968      	cbnz	r0, 8023ece <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023eb2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8023eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023eba:	2be0      	cmp	r3, #224	; 0xe0
 8023ebc:	d007      	beq.n	8023ece <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8023ebe:	4649      	mov	r1, r9
 8023ec0:	4620      	mov	r0, r4
 8023ec2:	f7f8 fae9 	bl	801c498 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8023ec6:	2102      	movs	r1, #2
 8023ec8:	4620      	mov	r0, r4
 8023eca:	f7ff ff2d 	bl	8023d28 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8023ece:	4620      	mov	r0, r4
 8023ed0:	f7f8 fb36 	bl	801c540 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8023ed4:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8023ed6:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8023ed8:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 8023edc:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 8023ee0:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8023ee4:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8023ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023eec:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8023ef0:	07d9      	lsls	r1, r3, #31
 8023ef2:	d41e      	bmi.n	8023f32 <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8023ef4:	7a7b      	ldrb	r3, [r7, #9]
 8023ef6:	2b11      	cmp	r3, #17
 8023ef8:	d039      	beq.n	8023f6e <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023efa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023efe:	b120      	cbz	r0, 8023f0a <ip4_input+0x162>
 8023f00:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023f02:	4631      	mov	r1, r6
 8023f04:	f000 f8f4 	bl	80240f0 <ip4_addr_isbroadcast_u32>
 8023f08:	b150      	cbz	r0, 8023f20 <ip4_input+0x178>
    pbuf_free(p);
 8023f0a:	4620      	mov	r0, r4
 8023f0c:	f7f8 fb18 	bl	801c540 <pbuf_free>
}
 8023f10:	2000      	movs	r0, #0
 8023f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8023f16:	4601      	mov	r1, r0
 8023f18:	4620      	mov	r0, r4
 8023f1a:	f7f8 f9f9 	bl	801c310 <pbuf_realloc>
 8023f1e:	e75a      	b.n	8023dd6 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8023f20:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8023f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023f28:	2be0      	cmp	r3, #224	; 0xe0
 8023f2a:	d0ee      	beq.n	8023f0a <ip4_input+0x162>
  if (netif == NULL) {
 8023f2c:	2d00      	cmp	r5, #0
 8023f2e:	d190      	bne.n	8023e52 <ip4_input+0xaa>
 8023f30:	e7eb      	b.n	8023f0a <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023f32:	6873      	ldr	r3, [r6, #4]
 8023f34:	2b00      	cmp	r3, #0
 8023f36:	d0dd      	beq.n	8023ef4 <ip4_input+0x14c>
 8023f38:	4635      	mov	r5, r6
 8023f3a:	e788      	b.n	8023e4e <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023f3c:	4293      	cmp	r3, r2
 8023f3e:	d0fb      	beq.n	8023f38 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023f40:	4618      	mov	r0, r3
 8023f42:	4631      	mov	r1, r6
 8023f44:	f000 f8d4 	bl	80240f0 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023f48:	b9e0      	cbnz	r0, 8023f84 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023f4a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8023f4e:	e761      	b.n	8023e14 <ip4_input+0x6c>
        icmp_input(p, inp);
 8023f50:	4631      	mov	r1, r6
 8023f52:	4620      	mov	r0, r4
 8023f54:	f7ff fe30 	bl	8023bb8 <icmp_input>
        break;
 8023f58:	e7bc      	b.n	8023ed4 <ip4_input+0x12c>
        udp_input(p, inp);
 8023f5a:	4631      	mov	r1, r6
 8023f5c:	4620      	mov	r0, r4
 8023f5e:	f7fd f8a1 	bl	80210a4 <udp_input>
        break;
 8023f62:	e7b7      	b.n	8023ed4 <ip4_input+0x12c>
        tcp_input(p, inp);
 8023f64:	4631      	mov	r1, r6
 8023f66:	4620      	mov	r0, r4
 8023f68:	f7fa fefc 	bl	801ed64 <tcp_input>
        break;
 8023f6c:	e7b2      	b.n	8023ed4 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8023f6e:	eb07 0309 	add.w	r3, r7, r9
 8023f72:	885b      	ldrh	r3, [r3, #2]
 8023f74:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8023f78:	d1bf      	bne.n	8023efa <ip4_input+0x152>
 8023f7a:	4635      	mov	r5, r6
  if (netif == NULL) {
 8023f7c:	2d00      	cmp	r5, #0
 8023f7e:	f47f af68 	bne.w	8023e52 <ip4_input+0xaa>
 8023f82:	e7c2      	b.n	8023f0a <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023f84:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023f88:	4635      	mov	r5, r6
 8023f8a:	e760      	b.n	8023e4e <ip4_input+0xa6>
 8023f8c:	2002e490 	.word	0x2002e490
 8023f90:	2001f300 	.word	0x2001f300

08023f94 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8023f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f98:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023f9a:	7b83      	ldrb	r3, [r0, #14]
{
 8023f9c:	b083      	sub	sp, #12
 8023f9e:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023fa0:	2b01      	cmp	r3, #1
{
 8023fa2:	4689      	mov	r9, r1
 8023fa4:	4617      	mov	r7, r2
 8023fa6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8023faa:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8023fae:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023fb2:	d158      	bne.n	8024066 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8023fb4:	2f00      	cmp	r7, #0
 8023fb6:	d05f      	beq.n	8024078 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8023fb8:	2114      	movs	r1, #20
 8023fba:	4620      	mov	r0, r4
 8023fbc:	f7f8 fa00 	bl	801c3c0 <pbuf_add_header>
 8023fc0:	2800      	cmp	r0, #0
 8023fc2:	d174      	bne.n	80240ae <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8023fc4:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8023fc6:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8023fc8:	2b13      	cmp	r3, #19
 8023fca:	d95d      	bls.n	8024088 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8023fcc:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8023fd0:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8023fd4:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8023fd8:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 8023fda:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8023fdc:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8023fde:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8023fe0:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8023fe2:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8023fe6:	fa10 f383 	uxtah	r3, r0, r3
 8023fea:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8023fec:	ea4f 252a 	mov.w	r5, sl, asr #8
 8023ff0:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8023ff4:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8023ff8:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8023ffa:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80240c8 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8023ffe:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8024000:	8920      	ldrh	r0, [r4, #8]
 8024002:	f7f6 fa61 	bl	801a4c8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8024006:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8024008:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802400a:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 802400c:	71b3      	strb	r3, [r6, #6]
 802400e:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8024010:	f8ba 0000 	ldrh.w	r0, [sl]
 8024014:	f7f6 fa58 	bl	801a4c8 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8024018:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 802401c:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802401e:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 8024020:	3201      	adds	r2, #1
 8024022:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8024026:	f1b9 0f00 	cmp.w	r9, #0
 802402a:	d035      	beq.n	8024098 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 802402c:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8024030:	fa13 f382 	uxtah	r3, r3, r2
 8024034:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8024036:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 802403a:	b29a      	uxth	r2, r3
 802403c:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 8024040:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 8024044:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8024046:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8024048:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 802404c:	b113      	cbz	r3, 8024054 <ip4_output_if_src+0xc0>
 802404e:	8922      	ldrh	r2, [r4, #8]
 8024050:	429a      	cmp	r2, r3
 8024052:	d824      	bhi.n	802409e <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8024054:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8024058:	463a      	mov	r2, r7
 802405a:	4621      	mov	r1, r4
 802405c:	4640      	mov	r0, r8
 802405e:	4798      	blx	r3
}
 8024060:	b003      	add	sp, #12
 8024062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8024066:	4b13      	ldr	r3, [pc, #76]	; (80240b4 <ip4_output_if_src+0x120>)
 8024068:	f44f 7255 	mov.w	r2, #852	; 0x354
 802406c:	4912      	ldr	r1, [pc, #72]	; (80240b8 <ip4_output_if_src+0x124>)
 802406e:	4813      	ldr	r0, [pc, #76]	; (80240bc <ip4_output_if_src+0x128>)
 8024070:	f002 fb30 	bl	80266d4 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8024074:	2f00      	cmp	r7, #0
 8024076:	d19f      	bne.n	8023fb8 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8024078:	8963      	ldrh	r3, [r4, #10]
 802407a:	2b13      	cmp	r3, #19
 802407c:	d917      	bls.n	80240ae <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 802407e:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8024080:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8024082:	691b      	ldr	r3, [r3, #16]
 8024084:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8024086:	e7df      	b.n	8024048 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8024088:	4b0a      	ldr	r3, [pc, #40]	; (80240b4 <ip4_output_if_src+0x120>)
 802408a:	f44f 7262 	mov.w	r2, #904	; 0x388
 802408e:	490c      	ldr	r1, [pc, #48]	; (80240c0 <ip4_output_if_src+0x12c>)
 8024090:	480a      	ldr	r0, [pc, #40]	; (80240bc <ip4_output_if_src+0x128>)
 8024092:	f002 fb1f 	bl	80266d4 <iprintf>
 8024096:	e799      	b.n	8023fcc <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8024098:	4a0a      	ldr	r2, [pc, #40]	; (80240c4 <ip4_output_if_src+0x130>)
 802409a:	6812      	ldr	r2, [r2, #0]
 802409c:	e7c8      	b.n	8024030 <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 802409e:	463a      	mov	r2, r7
 80240a0:	4641      	mov	r1, r8
 80240a2:	4620      	mov	r0, r4
 80240a4:	f000 fc36 	bl	8024914 <ip4_frag>
}
 80240a8:	b003      	add	sp, #12
 80240aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 80240ae:	f06f 0001 	mvn.w	r0, #1
 80240b2:	e7d5      	b.n	8024060 <ip4_output_if_src+0xcc>
 80240b4:	080471b4 	.word	0x080471b4
 80240b8:	080471e8 	.word	0x080471e8
 80240bc:	0802b3cc 	.word	0x0802b3cc
 80240c0:	080471f4 	.word	0x080471f4
 80240c4:	0804726c 	.word	0x0804726c
 80240c8:	2002e84a 	.word	0x2002e84a

080240cc <ip4_output_if>:
{
 80240cc:	b4f0      	push	{r4, r5, r6, r7}
 80240ce:	9c06      	ldr	r4, [sp, #24]
 80240d0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80240d4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80240d8:	b11a      	cbz	r2, 80240e2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80240da:	b109      	cbz	r1, 80240e0 <ip4_output_if+0x14>
 80240dc:	680f      	ldr	r7, [r1, #0]
 80240de:	b907      	cbnz	r7, 80240e2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80240e0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80240e2:	9504      	str	r5, [sp, #16]
 80240e4:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 80240e8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80240ea:	f7ff bf53 	b.w	8023f94 <ip4_output_if_src>
 80240ee:	bf00      	nop

080240f0 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80240f0:	1e43      	subs	r3, r0, #1
 80240f2:	3303      	adds	r3, #3
 80240f4:	d814      	bhi.n	8024120 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80240f6:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 80240fa:	f013 0302 	ands.w	r3, r3, #2
 80240fe:	d00d      	beq.n	802411c <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8024100:	684b      	ldr	r3, [r1, #4]
 8024102:	4283      	cmp	r3, r0
 8024104:	d00f      	beq.n	8024126 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8024106:	688a      	ldr	r2, [r1, #8]
 8024108:	4043      	eors	r3, r0
 802410a:	4213      	tst	r3, r2
 802410c:	d10b      	bne.n	8024126 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802410e:	43d3      	mvns	r3, r2
 8024110:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8024114:	1ac3      	subs	r3, r0, r3
 8024116:	fab3 f383 	clz	r3, r3
 802411a:	095b      	lsrs	r3, r3, #5
  }
}
 802411c:	4618      	mov	r0, r3
 802411e:	4770      	bx	lr
    return 1;
 8024120:	2301      	movs	r3, #1
}
 8024122:	4618      	mov	r0, r3
 8024124:	4770      	bx	lr
    return 0;
 8024126:	2300      	movs	r3, #0
}
 8024128:	4618      	mov	r0, r3
 802412a:	4770      	bx	lr

0802412c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 802412c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8024130:	4e4f      	ldr	r6, [pc, #316]	; (8024270 <ip4addr_aton+0x144>)
{
 8024132:	b085      	sub	sp, #20
  c = *cp;
 8024134:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 8024136:	5cf2      	ldrb	r2, [r6, r3]
 8024138:	0754      	lsls	r4, r2, #29
 802413a:	d538      	bpl.n	80241ae <ip4addr_aton+0x82>
  u32_t *pp = parts;
 802413c:	46e9      	mov	r9, sp
 802413e:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8024140:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8024144:	464f      	mov	r7, r9
    if (c == '0') {
 8024146:	2b30      	cmp	r3, #48	; 0x30
 8024148:	d035      	beq.n	80241b6 <ip4addr_aton+0x8a>
    base = 10;
 802414a:	210a      	movs	r1, #10
 802414c:	1c42      	adds	r2, r0, #1
 802414e:	2400      	movs	r4, #0
 8024150:	e003      	b.n	802415a <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 8024152:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 8024156:	7813      	ldrb	r3, [r2, #0]
 8024158:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 802415a:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 802415e:	f103 0e0a 	add.w	lr, r3, #10
 8024162:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 8024166:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 802416a:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 802416e:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 8024172:	d1ee      	bne.n	8024152 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8024174:	2910      	cmp	r1, #16
 8024176:	d10d      	bne.n	8024194 <ip4addr_aton+0x68>
 8024178:	f01c 0f44 	tst.w	ip, #68	; 0x44
 802417c:	d00a      	beq.n	8024194 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 802417e:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8024182:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8024184:	bf0c      	ite	eq
 8024186:	2061      	moveq	r0, #97	; 0x61
 8024188:	2041      	movne	r0, #65	; 0x41
 802418a:	ebae 0e00 	sub.w	lr, lr, r0
 802418e:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8024192:	e7e1      	b.n	8024158 <ip4addr_aton+0x2c>
    if (c == '.') {
 8024194:	2b2e      	cmp	r3, #46	; 0x2e
 8024196:	d11a      	bne.n	80241ce <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8024198:	4547      	cmp	r7, r8
 802419a:	d008      	beq.n	80241ae <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 802419c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80241a0:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 80241a4:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 80241a8:	5cf2      	ldrb	r2, [r6, r3]
 80241aa:	0752      	lsls	r2, r2, #29
 80241ac:	d4cb      	bmi.n	8024146 <ip4addr_aton+0x1a>
      return 0;
 80241ae:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 80241b0:	b005      	add	sp, #20
 80241b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 80241b6:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 80241b8:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 80241bc:	2a58      	cmp	r2, #88	; 0x58
 80241be:	d002      	beq.n	80241c6 <ip4addr_aton+0x9a>
      c = *++cp;
 80241c0:	3001      	adds	r0, #1
        base = 8;
 80241c2:	2108      	movs	r1, #8
 80241c4:	e7c2      	b.n	802414c <ip4addr_aton+0x20>
        c = *++cp;
 80241c6:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 80241c8:	2110      	movs	r1, #16
        c = *++cp;
 80241ca:	3002      	adds	r0, #2
 80241cc:	e7be      	b.n	802414c <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 80241ce:	b113      	cbz	r3, 80241d6 <ip4addr_aton+0xaa>
 80241d0:	f01c 0f08 	tst.w	ip, #8
 80241d4:	d0eb      	beq.n	80241ae <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 80241d6:	eba7 0009 	sub.w	r0, r7, r9
 80241da:	1080      	asrs	r0, r0, #2
 80241dc:	3001      	adds	r0, #1
 80241de:	2804      	cmp	r0, #4
 80241e0:	d83e      	bhi.n	8024260 <ip4addr_aton+0x134>
 80241e2:	a301      	add	r3, pc, #4	; (adr r3, 80241e8 <ip4addr_aton+0xbc>)
 80241e4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80241e8:	080241b1 	.word	0x080241b1
 80241ec:	0802420d 	.word	0x0802420d
 80241f0:	080241fd 	.word	0x080241fd
 80241f4:	08024241 	.word	0x08024241
 80241f8:	0802421d 	.word	0x0802421d
      if (val > 0xffffffUL) {
 80241fc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8024200:	d2d5      	bcs.n	80241ae <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 8024202:	9b00      	ldr	r3, [sp, #0]
 8024204:	2bff      	cmp	r3, #255	; 0xff
 8024206:	d8d2      	bhi.n	80241ae <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8024208:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 802420c:	b335      	cbz	r5, 802425c <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 802420e:	4620      	mov	r0, r4
 8024210:	f7f6 f95e 	bl	801a4d0 <lwip_htonl>
 8024214:	4603      	mov	r3, r0
  return 1;
 8024216:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8024218:	602b      	str	r3, [r5, #0]
 802421a:	e7c9      	b.n	80241b0 <ip4addr_aton+0x84>
      if (val > 0xff) {
 802421c:	2cff      	cmp	r4, #255	; 0xff
 802421e:	d8c6      	bhi.n	80241ae <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8024220:	9900      	ldr	r1, [sp, #0]
 8024222:	29ff      	cmp	r1, #255	; 0xff
 8024224:	d8c3      	bhi.n	80241ae <ip4addr_aton+0x82>
 8024226:	9b01      	ldr	r3, [sp, #4]
 8024228:	2bff      	cmp	r3, #255	; 0xff
 802422a:	d8c0      	bhi.n	80241ae <ip4addr_aton+0x82>
 802422c:	9a02      	ldr	r2, [sp, #8]
 802422e:	2aff      	cmp	r2, #255	; 0xff
 8024230:	d8bd      	bhi.n	80241ae <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8024232:	041b      	lsls	r3, r3, #16
 8024234:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8024238:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802423c:	431c      	orrs	r4, r3
      break;
 802423e:	e7e5      	b.n	802420c <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 8024240:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8024244:	d2b3      	bcs.n	80241ae <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8024246:	9a00      	ldr	r2, [sp, #0]
 8024248:	2aff      	cmp	r2, #255	; 0xff
 802424a:	d8b0      	bhi.n	80241ae <ip4addr_aton+0x82>
 802424c:	9b01      	ldr	r3, [sp, #4]
 802424e:	2bff      	cmp	r3, #255	; 0xff
 8024250:	d8ad      	bhi.n	80241ae <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 8024252:	041b      	lsls	r3, r3, #16
 8024254:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8024258:	431c      	orrs	r4, r3
      break;
 802425a:	e7d7      	b.n	802420c <ip4addr_aton+0xe0>
  return 1;
 802425c:	2001      	movs	r0, #1
 802425e:	e7a7      	b.n	80241b0 <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 8024260:	4b04      	ldr	r3, [pc, #16]	; (8024274 <ip4addr_aton+0x148>)
 8024262:	22f9      	movs	r2, #249	; 0xf9
 8024264:	4904      	ldr	r1, [pc, #16]	; (8024278 <ip4addr_aton+0x14c>)
 8024266:	4805      	ldr	r0, [pc, #20]	; (802427c <ip4addr_aton+0x150>)
 8024268:	f002 fa34 	bl	80266d4 <iprintf>
      break;
 802426c:	e7ce      	b.n	802420c <ip4addr_aton+0xe0>
 802426e:	bf00      	nop
 8024270:	080474c9 	.word	0x080474c9
 8024274:	08047224 	.word	0x08047224
 8024278:	08047260 	.word	0x08047260
 802427c:	0802b3cc 	.word	0x0802b3cc

08024280 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8024280:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8024282:	4604      	mov	r4, r0
 8024284:	b148      	cbz	r0, 802429a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8024286:	6960      	ldr	r0, [r4, #20]
 8024288:	b108      	cbz	r0, 802428e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 802428a:	f7f8 f959 	bl	801c540 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 802428e:	4621      	mov	r1, r4
 8024290:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8024292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8024296:	f7f7 bc3b 	b.w	801bb10 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802429a:	4b04      	ldr	r3, [pc, #16]	; (80242ac <ipfrag_free_pbuf_custom+0x2c>)
 802429c:	f240 22ce 	movw	r2, #718	; 0x2ce
 80242a0:	4903      	ldr	r1, [pc, #12]	; (80242b0 <ipfrag_free_pbuf_custom+0x30>)
 80242a2:	4804      	ldr	r0, [pc, #16]	; (80242b4 <ipfrag_free_pbuf_custom+0x34>)
 80242a4:	f002 fa16 	bl	80266d4 <iprintf>
 80242a8:	e7ed      	b.n	8024286 <ipfrag_free_pbuf_custom+0x6>
 80242aa:	bf00      	nop
 80242ac:	08047274 	.word	0x08047274
 80242b0:	080472b0 	.word	0x080472b0
 80242b4:	0802b3cc 	.word	0x0802b3cc

080242b8 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80242b8:	4281      	cmp	r1, r0
{
 80242ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242be:	4606      	mov	r6, r0
 80242c0:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80242c2:	d075      	beq.n	80243b0 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 80242c4:	b147      	cbz	r7, 80242d8 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80242c6:	683b      	ldr	r3, [r7, #0]
 80242c8:	42b3      	cmp	r3, r6
 80242ca:	d005      	beq.n	80242d8 <ip_reass_free_complete_datagram+0x20>
 80242cc:	4b40      	ldr	r3, [pc, #256]	; (80243d0 <ip_reass_free_complete_datagram+0x118>)
 80242ce:	22ad      	movs	r2, #173	; 0xad
 80242d0:	4940      	ldr	r1, [pc, #256]	; (80243d4 <ip_reass_free_complete_datagram+0x11c>)
 80242d2:	4841      	ldr	r0, [pc, #260]	; (80243d8 <ip_reass_free_complete_datagram+0x120>)
 80242d4:	f002 f9fe 	bl	80266d4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80242d8:	6875      	ldr	r5, [r6, #4]
 80242da:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 80242dc:	889a      	ldrh	r2, [r3, #4]
 80242de:	2a00      	cmp	r2, #0
 80242e0:	d047      	beq.n	8024372 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 80242e2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80242e6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80243d0 <ip_reass_free_complete_datagram+0x118>
 80242ea:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80243f0 <ip_reass_free_complete_datagram+0x138>
 80242ee:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80243d8 <ip_reass_free_complete_datagram+0x120>
 80242f2:	e005      	b.n	8024300 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 80242f4:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 80242f6:	4625      	mov	r5, r4
    pbuf_free(pcur);
 80242f8:	f7f8 f922 	bl	801c540 <pbuf_free>
  while (p != NULL) {
 80242fc:	b1b4      	cbz	r4, 802432c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 80242fe:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8024300:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8024302:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8024304:	f7f8 f930 	bl	801c568 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024308:	4458      	add	r0, fp
 802430a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 802430e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024312:	dbef      	blt.n	80242f4 <ip_reass_free_complete_datagram+0x3c>
 8024314:	4653      	mov	r3, sl
 8024316:	22cc      	movs	r2, #204	; 0xcc
 8024318:	4649      	mov	r1, r9
 802431a:	4640      	mov	r0, r8
 802431c:	f002 f9da 	bl	80266d4 <iprintf>
    pbuf_free(pcur);
 8024320:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8024322:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8024324:	f7f8 f90c 	bl	801c540 <pbuf_free>
  while (p != NULL) {
 8024328:	2c00      	cmp	r4, #0
 802432a:	d1e8      	bne.n	80242fe <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 802432c:	4b2b      	ldr	r3, [pc, #172]	; (80243dc <ip_reass_free_complete_datagram+0x124>)
 802432e:	681a      	ldr	r2, [r3, #0]
 8024330:	4296      	cmp	r6, r2
 8024332:	d03a      	beq.n	80243aa <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024334:	2f00      	cmp	r7, #0
 8024336:	d042      	beq.n	80243be <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8024338:	6833      	ldr	r3, [r6, #0]
 802433a:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 802433c:	4c28      	ldr	r4, [pc, #160]	; (80243e0 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 802433e:	4631      	mov	r1, r6
 8024340:	2005      	movs	r0, #5
 8024342:	f7f7 fbe5 	bl	801bb10 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8024346:	8823      	ldrh	r3, [r4, #0]
 8024348:	455b      	cmp	r3, fp
 802434a:	d305      	bcc.n	8024358 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802434c:	eba3 030b 	sub.w	r3, r3, fp
}
 8024350:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8024352:	8023      	strh	r3, [r4, #0]
}
 8024354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8024358:	4b1d      	ldr	r3, [pc, #116]	; (80243d0 <ip_reass_free_complete_datagram+0x118>)
 802435a:	22d2      	movs	r2, #210	; 0xd2
 802435c:	4921      	ldr	r1, [pc, #132]	; (80243e4 <ip_reass_free_complete_datagram+0x12c>)
 802435e:	481e      	ldr	r0, [pc, #120]	; (80243d8 <ip_reass_free_complete_datagram+0x120>)
 8024360:	f002 f9b8 	bl	80266d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8024364:	8823      	ldrh	r3, [r4, #0]
}
 8024366:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8024368:	eba3 030b 	sub.w	r3, r3, fp
 802436c:	8023      	strh	r3, [r4, #0]
}
 802436e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8024372:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024374:	6930      	ldr	r0, [r6, #16]
 8024376:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 8024378:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802437a:	68f4      	ldr	r4, [r6, #12]
 802437c:	68b2      	ldr	r2, [r6, #8]
 802437e:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024380:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024382:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024384:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024386:	601a      	str	r2, [r3, #0]
 8024388:	605c      	str	r4, [r3, #4]
 802438a:	69b2      	ldr	r2, [r6, #24]
 802438c:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802438e:	f7ff fccf 	bl	8023d30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8024392:	4628      	mov	r0, r5
 8024394:	f7f8 f8e8 	bl	801c568 <pbuf_clen>
 8024398:	4683      	mov	fp, r0
    pbuf_free(p);
 802439a:	4628      	mov	r0, r5
 802439c:	f7f8 f8d0 	bl	801c540 <pbuf_free>
  p = ipr->p;
 80243a0:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 80243a2:	2d00      	cmp	r5, #0
 80243a4:	d0c2      	beq.n	802432c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 80243a6:	686b      	ldr	r3, [r5, #4]
 80243a8:	e79d      	b.n	80242e6 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 80243aa:	6832      	ldr	r2, [r6, #0]
 80243ac:	601a      	str	r2, [r3, #0]
 80243ae:	e7c5      	b.n	802433c <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80243b0:	4b07      	ldr	r3, [pc, #28]	; (80243d0 <ip_reass_free_complete_datagram+0x118>)
 80243b2:	22ab      	movs	r2, #171	; 0xab
 80243b4:	490c      	ldr	r1, [pc, #48]	; (80243e8 <ip_reass_free_complete_datagram+0x130>)
 80243b6:	4808      	ldr	r0, [pc, #32]	; (80243d8 <ip_reass_free_complete_datagram+0x120>)
 80243b8:	f002 f98c 	bl	80266d4 <iprintf>
 80243bc:	e782      	b.n	80242c4 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80243be:	4b04      	ldr	r3, [pc, #16]	; (80243d0 <ip_reass_free_complete_datagram+0x118>)
 80243c0:	f240 1245 	movw	r2, #325	; 0x145
 80243c4:	4909      	ldr	r1, [pc, #36]	; (80243ec <ip_reass_free_complete_datagram+0x134>)
 80243c6:	4804      	ldr	r0, [pc, #16]	; (80243d8 <ip_reass_free_complete_datagram+0x120>)
 80243c8:	f002 f984 	bl	80266d4 <iprintf>
 80243cc:	e7b4      	b.n	8024338 <ip_reass_free_complete_datagram+0x80>
 80243ce:	bf00      	nop
 80243d0:	08047274 	.word	0x08047274
 80243d4:	080472c8 	.word	0x080472c8
 80243d8:	0802b3cc 	.word	0x0802b3cc
 80243dc:	2002e850 	.word	0x2002e850
 80243e0:	2002e84c 	.word	0x2002e84c
 80243e4:	08047318 	.word	0x08047318
 80243e8:	080472bc 	.word	0x080472bc
 80243ec:	080472fc 	.word	0x080472fc
 80243f0:	080472dc 	.word	0x080472dc

080243f4 <ip_reass_remove_oldest_datagram>:
{
 80243f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 80243f8:	2700      	movs	r7, #0
 80243fa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8024464 <ip_reass_remove_oldest_datagram+0x70>
{
 80243fe:	4605      	mov	r5, r0
 8024400:	460e      	mov	r6, r1
    r = reassdatagrams;
 8024402:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8024406:	b1f3      	cbz	r3, 8024446 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8024408:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802440a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 802440e:	4621      	mov	r1, r4
    prev = NULL;
 8024410:	46a4      	mov	ip, r4
    oldest = NULL;
 8024412:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8024414:	695a      	ldr	r2, [r3, #20]
 8024416:	4572      	cmp	r2, lr
 8024418:	d018      	beq.n	802444c <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 802441a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 802441c:	b120      	cbz	r0, 8024428 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 802441e:	f893 901f 	ldrb.w	r9, [r3, #31]
 8024422:	7fc2      	ldrb	r2, [r0, #31]
 8024424:	4591      	cmp	r9, r2
 8024426:	d801      	bhi.n	802442c <ip_reass_remove_oldest_datagram+0x38>
 8024428:	4661      	mov	r1, ip
 802442a:	4618      	mov	r0, r3
      if (r->next != NULL) {
 802442c:	681a      	ldr	r2, [r3, #0]
 802442e:	469c      	mov	ip, r3
 8024430:	4613      	mov	r3, r2
 8024432:	2a00      	cmp	r2, #0
 8024434:	d1ee      	bne.n	8024414 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8024436:	b110      	cbz	r0, 802443e <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8024438:	f7ff ff3e 	bl	80242b8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 802443c:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802443e:	42b7      	cmp	r7, r6
 8024440:	da01      	bge.n	8024446 <ip_reass_remove_oldest_datagram+0x52>
 8024442:	2c01      	cmp	r4, #1
 8024444:	dcdd      	bgt.n	8024402 <ip_reass_remove_oldest_datagram+0xe>
}
 8024446:	4638      	mov	r0, r7
 8024448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802444c:	699a      	ldr	r2, [r3, #24]
 802444e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8024452:	454a      	cmp	r2, r9
 8024454:	d1e1      	bne.n	802441a <ip_reass_remove_oldest_datagram+0x26>
 8024456:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 802445a:	88aa      	ldrh	r2, [r5, #4]
 802445c:	4591      	cmp	r9, r2
 802445e:	d1dc      	bne.n	802441a <ip_reass_remove_oldest_datagram+0x26>
 8024460:	e7e4      	b.n	802442c <ip_reass_remove_oldest_datagram+0x38>
 8024462:	bf00      	nop
 8024464:	2002e850 	.word	0x2002e850

08024468 <ip_reass_tmr>:
{
 8024468:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 802446a:	4b0a      	ldr	r3, [pc, #40]	; (8024494 <ip_reass_tmr+0x2c>)
 802446c:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 802446e:	b140      	cbz	r0, 8024482 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 8024470:	2400      	movs	r4, #0
    if (r->timer > 0) {
 8024472:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 8024474:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 8024476:	b12b      	cbz	r3, 8024484 <ip_reass_tmr+0x1c>
 8024478:	4604      	mov	r4, r0
      r->timer--;
 802447a:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 802447c:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 802447e:	2800      	cmp	r0, #0
 8024480:	d1f7      	bne.n	8024472 <ip_reass_tmr+0xa>
}
 8024482:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 8024484:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8024486:	4621      	mov	r1, r4
 8024488:	f7ff ff16 	bl	80242b8 <ip_reass_free_complete_datagram>
      r = r->next;
 802448c:	4628      	mov	r0, r5
  while (r != NULL) {
 802448e:	2800      	cmp	r0, #0
 8024490:	d1ef      	bne.n	8024472 <ip_reass_tmr+0xa>
 8024492:	e7f6      	b.n	8024482 <ip_reass_tmr+0x1a>
 8024494:	2002e850 	.word	0x2002e850

08024498 <ip4_reass>:
{
 8024498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 802449c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 80244a0:	b085      	sub	sp, #20
 80244a2:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80244a4:	f89a 3000 	ldrb.w	r3, [sl]
 80244a8:	f003 030f 	and.w	r3, r3, #15
 80244ac:	2b05      	cmp	r3, #5
 80244ae:	f040 8089 	bne.w	80245c4 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80244b2:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80244b6:	f7f6 f807 	bl	801a4c8 <lwip_htons>
 80244ba:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80244bc:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80244c0:	f7f6 f802 	bl	801a4c8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80244c4:	f89a 2000 	ldrb.w	r2, [sl]
 80244c8:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80244cc:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80244d0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80244d4:	d376      	bcc.n	80245c4 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 80244d6:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80244d8:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 80247d0 <ip4_reass+0x338>
  clen = pbuf_clen(p);
 80244dc:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 80244de:	b29b      	uxth	r3, r3
 80244e0:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 80244e2:	f7f8 f841 	bl	801c568 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80244e6:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 80244ea:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80244ec:	4403      	add	r3, r0
 80244ee:	2b14      	cmp	r3, #20
 80244f0:	f300 80e5 	bgt.w	80246be <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80244f4:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 80247d4 <ip4_reass+0x33c>
 80244f8:	f8d9 4000 	ldr.w	r4, [r9]
 80244fc:	2c00      	cmp	r4, #0
 80244fe:	f000 80ec 	beq.w	80246da <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024502:	f8da 200c 	ldr.w	r2, [sl, #12]
 8024506:	e003      	b.n	8024510 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024508:	6824      	ldr	r4, [r4, #0]
 802450a:	2c00      	cmp	r4, #0
 802450c:	f000 80e5 	beq.w	80246da <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024510:	6963      	ldr	r3, [r4, #20]
 8024512:	4293      	cmp	r3, r2
 8024514:	d1f8      	bne.n	8024508 <ip4_reass+0x70>
 8024516:	f8da 3010 	ldr.w	r3, [sl, #16]
 802451a:	69a1      	ldr	r1, [r4, #24]
 802451c:	4299      	cmp	r1, r3
 802451e:	d1f3      	bne.n	8024508 <ip4_reass+0x70>
 8024520:	89a1      	ldrh	r1, [r4, #12]
 8024522:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8024526:	4299      	cmp	r1, r3
 8024528:	d1ee      	bne.n	8024508 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802452a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 802452e:	f7f5 ffcb 	bl	801a4c8 <lwip_htons>
 8024532:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8024536:	2800      	cmp	r0, #0
 8024538:	f000 80a9 	beq.w	802468e <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802453c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024540:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8024544:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024548:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 802454c:	9301      	str	r3, [sp, #4]
 802454e:	d108      	bne.n	8024562 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8024550:	9b00      	ldr	r3, [sp, #0]
 8024552:	18f3      	adds	r3, r6, r3
 8024554:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8024556:	429e      	cmp	r6, r3
 8024558:	d812      	bhi.n	8024580 <ip4_reass+0xe8>
 802455a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802455e:	4293      	cmp	r3, r2
 8024560:	d80e      	bhi.n	8024580 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8024562:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8024566:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 802456a:	f7f5 ffad 	bl	801a4c8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 802456e:	f89a 2000 	ldrb.w	r2, [sl]
 8024572:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8024576:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 802457a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 802457e:	d229      	bcs.n	80245d4 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8024580:	6866      	ldr	r6, [r4, #4]
 8024582:	b9fe      	cbnz	r6, 80245c4 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8024584:	f8d9 3000 	ldr.w	r3, [r9]
 8024588:	42a3      	cmp	r3, r4
 802458a:	d014      	beq.n	80245b6 <ip4_reass+0x11e>
 802458c:	4b8c      	ldr	r3, [pc, #560]	; (80247c0 <ip4_reass+0x328>)
 802458e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8024592:	498c      	ldr	r1, [pc, #560]	; (80247c4 <ip4_reass+0x32c>)
 8024594:	488c      	ldr	r0, [pc, #560]	; (80247c8 <ip4_reass+0x330>)
 8024596:	f002 f89d 	bl	80266d4 <iprintf>
  if (reassdatagrams == ipr) {
 802459a:	f8d9 3000 	ldr.w	r3, [r9]
 802459e:	429c      	cmp	r4, r3
 80245a0:	d009      	beq.n	80245b6 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80245a2:	4b87      	ldr	r3, [pc, #540]	; (80247c0 <ip4_reass+0x328>)
 80245a4:	f240 1245 	movw	r2, #325	; 0x145
 80245a8:	4988      	ldr	r1, [pc, #544]	; (80247cc <ip4_reass+0x334>)
 80245aa:	4887      	ldr	r0, [pc, #540]	; (80247c8 <ip4_reass+0x330>)
 80245ac:	f002 f892 	bl	80266d4 <iprintf>
    prev->next = ipr->next;
 80245b0:	6823      	ldr	r3, [r4, #0]
 80245b2:	6033      	str	r3, [r6, #0]
 80245b4:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 80245b6:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80245b8:	4621      	mov	r1, r4
 80245ba:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 80245bc:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80245c0:	f7f7 faa6 	bl	801bb10 <memp_free>
  pbuf_free(p);
 80245c4:	4628      	mov	r0, r5
  return NULL;
 80245c6:	2600      	movs	r6, #0
  pbuf_free(p);
 80245c8:	f7f7 ffba 	bl	801c540 <pbuf_free>
}
 80245cc:	4630      	mov	r0, r6
 80245ce:	b005      	add	sp, #20
 80245d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 80245d4:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80245d6:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 80245da:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80245de:	f7f5 ff73 	bl	801a4c8 <lwip_htons>
 80245e2:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80245e6:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80245ea:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 80245ec:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 80245f0:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 80245f4:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 80245f8:	f8ab 3006 	strh.w	r3, [fp, #6]
 80245fc:	b29b      	uxth	r3, r3
 80245fe:	4619      	mov	r1, r3
 8024600:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8024602:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8024604:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8024606:	f88b 3000 	strb.w	r3, [fp]
 802460a:	f88b 3001 	strb.w	r3, [fp, #1]
 802460e:	f88b 3002 	strb.w	r3, [fp, #2]
 8024612:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8024616:	d8b3      	bhi.n	8024580 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8024618:	6861      	ldr	r1, [r4, #4]
 802461a:	2900      	cmp	r1, #0
 802461c:	f000 80c4 	beq.w	80247a8 <ip4_reass+0x310>
  int valid = 1;
 8024620:	f04f 0a01 	mov.w	sl, #1
 8024624:	4694      	mov	ip, r2
 8024626:	e00e      	b.n	8024646 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 8024628:	d0cc      	beq.n	80245c4 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 802462a:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 802462e:	45f4      	cmp	ip, lr
 8024630:	d3c8      	bcc.n	80245c4 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 8024632:	b122      	cbz	r2, 802463e <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 8024634:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8024636:	4282      	cmp	r2, r0
 8024638:	bf18      	it	ne
 802463a:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 802463e:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8024640:	2900      	cmp	r1, #0
 8024642:	f000 808a 	beq.w	802475a <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8024646:	461a      	mov	r2, r3
 8024648:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 802464a:	8898      	ldrh	r0, [r3, #4]
 802464c:	4584      	cmp	ip, r0
 802464e:	d2eb      	bcs.n	8024628 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 8024650:	4613      	mov	r3, r2
 8024652:	f8cb 1000 	str.w	r1, [fp]
 8024656:	4662      	mov	r2, ip
 8024658:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 802465a:	2b00      	cmp	r3, #0
 802465c:	d066      	beq.n	802472c <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 802465e:	88db      	ldrh	r3, [r3, #6]
 8024660:	429a      	cmp	r2, r3
 8024662:	d3af      	bcc.n	80245c4 <ip4_reass+0x12c>
 8024664:	9903      	ldr	r1, [sp, #12]
 8024666:	4281      	cmp	r1, r0
 8024668:	d8ac      	bhi.n	80245c4 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 802466a:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 802466c:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8024670:	d061      	beq.n	8024736 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024672:	9b01      	ldr	r3, [sp, #4]
 8024674:	2b00      	cmp	r3, #0
 8024676:	f000 808a 	beq.w	802478e <ip4_reass+0x2f6>
 802467a:	7fa3      	ldrb	r3, [r4, #30]
 802467c:	07db      	lsls	r3, r3, #31
 802467e:	d462      	bmi.n	8024746 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024680:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8024684:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024686:	441f      	add	r7, r3
 8024688:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802468c:	e79e      	b.n	80245cc <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 802468e:	89e0      	ldrh	r0, [r4, #14]
 8024690:	f7f5 ff1a 	bl	801a4c8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024694:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8024698:	2800      	cmp	r0, #0
 802469a:	f43f af4f 	beq.w	802453c <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802469e:	f8da 3000 	ldr.w	r3, [sl]
 80246a2:	f8da 0004 	ldr.w	r0, [sl, #4]
 80246a6:	f8da 1008 	ldr.w	r1, [sl, #8]
 80246aa:	f8da 200c 	ldr.w	r2, [sl, #12]
 80246ae:	60a3      	str	r3, [r4, #8]
 80246b0:	60e0      	str	r0, [r4, #12]
 80246b2:	6121      	str	r1, [r4, #16]
 80246b4:	6162      	str	r2, [r4, #20]
 80246b6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80246ba:	61a3      	str	r3, [r4, #24]
 80246bc:	e73e      	b.n	802453c <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80246be:	4601      	mov	r1, r0
 80246c0:	4650      	mov	r0, sl
 80246c2:	f7ff fe97 	bl	80243f4 <ip_reass_remove_oldest_datagram>
 80246c6:	2800      	cmp	r0, #0
 80246c8:	f43f af7c 	beq.w	80245c4 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80246cc:	f8b8 3000 	ldrh.w	r3, [r8]
 80246d0:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80246d2:	2b14      	cmp	r3, #20
 80246d4:	f77f af0e 	ble.w	80244f4 <ip4_reass+0x5c>
 80246d8:	e774      	b.n	80245c4 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80246da:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80246de:	4938      	ldr	r1, [pc, #224]	; (80247c0 <ip4_reass+0x328>)
 80246e0:	2005      	movs	r0, #5
 80246e2:	f7f7 f9df 	bl	801baa4 <memp_malloc_fn>
  if (ipr == NULL) {
 80246e6:	4604      	mov	r4, r0
 80246e8:	b178      	cbz	r0, 802470a <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80246ea:	2300      	movs	r3, #0
 80246ec:	61e3      	str	r3, [r4, #28]
 80246ee:	60a3      	str	r3, [r4, #8]
 80246f0:	60e3      	str	r3, [r4, #12]
 80246f2:	6123      	str	r3, [r4, #16]
 80246f4:	6163      	str	r3, [r4, #20]
 80246f6:	61a3      	str	r3, [r4, #24]
 80246f8:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 80246fa:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 80246fe:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8024702:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8024704:	230f      	movs	r3, #15
 8024706:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8024708:	e7c9      	b.n	802469e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802470a:	4639      	mov	r1, r7
 802470c:	4650      	mov	r0, sl
 802470e:	f7ff fe71 	bl	80243f4 <ip_reass_remove_oldest_datagram>
 8024712:	4287      	cmp	r7, r0
 8024714:	f73f af56 	bgt.w	80245c4 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8024718:	f44f 7291 	mov.w	r2, #290	; 0x122
 802471c:	4928      	ldr	r1, [pc, #160]	; (80247c0 <ip4_reass+0x328>)
 802471e:	2005      	movs	r0, #5
 8024720:	f7f7 f9c0 	bl	801baa4 <memp_malloc_fn>
    if (ipr == NULL)
 8024724:	4604      	mov	r4, r0
 8024726:	2800      	cmp	r0, #0
 8024728:	d1df      	bne.n	80246ea <ip4_reass+0x252>
 802472a:	e74b      	b.n	80245c4 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 802472c:	9b03      	ldr	r3, [sp, #12]
 802472e:	4283      	cmp	r3, r0
 8024730:	f63f af48 	bhi.w	80245c4 <ip4_reass+0x12c>
        ipr->p = new_p;
 8024734:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024736:	9b01      	ldr	r3, [sp, #4]
 8024738:	b19b      	cbz	r3, 8024762 <ip4_reass+0x2ca>
 802473a:	7fa3      	ldrb	r3, [r4, #30]
 802473c:	07d9      	lsls	r1, r3, #31
 802473e:	d59f      	bpl.n	8024680 <ip4_reass+0x1e8>
    if (valid) {
 8024740:	f1ba 0f00 	cmp.w	sl, #0
 8024744:	d138      	bne.n	80247b8 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024746:	f8b8 3000 	ldrh.w	r3, [r8]
 802474a:	441f      	add	r7, r3
 802474c:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 8024750:	2600      	movs	r6, #0
}
 8024752:	4630      	mov	r0, r6
 8024754:	b005      	add	sp, #20
 8024756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 802475a:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 802475c:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802475e:	d188      	bne.n	8024672 <ip4_reass+0x1da>
 8024760:	e7e9      	b.n	8024736 <ip4_reass+0x29e>
    if (valid) {
 8024762:	f1ba 0f00 	cmp.w	sl, #0
 8024766:	d012      	beq.n	802478e <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024768:	6863      	ldr	r3, [r4, #4]
 802476a:	b183      	cbz	r3, 802478e <ip4_reass+0x2f6>
 802476c:	6859      	ldr	r1, [r3, #4]
 802476e:	888b      	ldrh	r3, [r1, #4]
 8024770:	2b00      	cmp	r3, #0
 8024772:	d031      	beq.n	80247d8 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024774:	f8b8 3000 	ldrh.w	r3, [r8]
 8024778:	441f      	add	r7, r3
  if (is_last) {
 802477a:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802477c:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8024780:	2b00      	cmp	r3, #0
 8024782:	d1e5      	bne.n	8024750 <ip4_reass+0x2b8>
 8024784:	e008      	b.n	8024798 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024786:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802478a:	4659      	mov	r1, fp
 802478c:	b323      	cbz	r3, 80247d8 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802478e:	f8b8 3000 	ldrh.w	r3, [r8]
 8024792:	441f      	add	r7, r3
 8024794:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024798:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802479a:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802479c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80247a0:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80247a2:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80247a4:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80247a6:	e7d3      	b.n	8024750 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80247a8:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 80247aa:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80247ac:	2b00      	cmp	r3, #0
 80247ae:	d0ea      	beq.n	8024786 <ip4_reass+0x2ee>
 80247b0:	7fa3      	ldrb	r3, [r4, #30]
 80247b2:	07da      	lsls	r2, r3, #31
 80247b4:	f57f af64 	bpl.w	8024680 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80247b8:	6863      	ldr	r3, [r4, #4]
 80247ba:	2b00      	cmp	r3, #0
 80247bc:	d0c3      	beq.n	8024746 <ip4_reass+0x2ae>
 80247be:	e7d5      	b.n	802476c <ip4_reass+0x2d4>
 80247c0:	08047274 	.word	0x08047274
 80247c4:	0804738c 	.word	0x0804738c
 80247c8:	0802b3cc 	.word	0x0802b3cc
 80247cc:	080472fc 	.word	0x080472fc
 80247d0:	2002e84c 	.word	0x2002e84c
 80247d4:	2002e850 	.word	0x2002e850
        q = iprh->next_pbuf;
 80247d8:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 80247dc:	b153      	cbz	r3, 80247f4 <ip4_reass+0x35c>
 80247de:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 80247e0:	4610      	mov	r0, r2
 80247e2:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80247e4:	88c0      	ldrh	r0, [r0, #6]
 80247e6:	8893      	ldrh	r3, [r2, #4]
 80247e8:	4298      	cmp	r0, r3
 80247ea:	d1c3      	bne.n	8024774 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 80247ec:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 80247ee:	2b00      	cmp	r3, #0
 80247f0:	d1f6      	bne.n	80247e0 <ip4_reass+0x348>
 80247f2:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 80247f4:	9b02      	ldr	r3, [sp, #8]
 80247f6:	428b      	cmp	r3, r1
 80247f8:	d110      	bne.n	802481c <ip4_reass+0x384>
 80247fa:	4b40      	ldr	r3, [pc, #256]	; (80248fc <ip4_reass+0x464>)
 80247fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8024800:	493f      	ldr	r1, [pc, #252]	; (8024900 <ip4_reass+0x468>)
 8024802:	4840      	ldr	r0, [pc, #256]	; (8024904 <ip4_reass+0x46c>)
 8024804:	f001 ff66 	bl	80266d4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8024808:	9b02      	ldr	r3, [sp, #8]
 802480a:	681b      	ldr	r3, [r3, #0]
 802480c:	b133      	cbz	r3, 802481c <ip4_reass+0x384>
 802480e:	4b3b      	ldr	r3, [pc, #236]	; (80248fc <ip4_reass+0x464>)
 8024810:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8024814:	493c      	ldr	r1, [pc, #240]	; (8024908 <ip4_reass+0x470>)
 8024816:	483b      	ldr	r0, [pc, #236]	; (8024904 <ip4_reass+0x46c>)
 8024818:	f001 ff5c 	bl	80266d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802481c:	f8b8 3000 	ldrh.w	r3, [r8]
 8024820:	441f      	add	r7, r3
  if (is_last) {
 8024822:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024824:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8024828:	2b00      	cmp	r3, #0
 802482a:	d15b      	bne.n	80248e4 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 802482c:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802482e:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8024830:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024832:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8024836:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024838:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 802483a:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802483c:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 802483e:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8024840:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8024842:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8024844:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8024846:	68a3      	ldr	r3, [r4, #8]
 8024848:	6921      	ldr	r1, [r4, #16]
 802484a:	6962      	ldr	r2, [r4, #20]
 802484c:	6075      	str	r5, [r6, #4]
 802484e:	60b1      	str	r1, [r6, #8]
 8024850:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8024852:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8024854:	6033      	str	r3, [r6, #0]
 8024856:	69a3      	ldr	r3, [r4, #24]
 8024858:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802485a:	f7f5 fe35 	bl	801a4c8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 802485e:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8024860:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8024862:	2114      	movs	r1, #20
 8024864:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 8024866:	71b3      	strb	r3, [r6, #6]
 8024868:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802486a:	72b3      	strb	r3, [r6, #10]
 802486c:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802486e:	f7f6 fbd3 	bl	801b018 <inet_chksum>
 8024872:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 8024874:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8024876:	b15d      	cbz	r5, 8024890 <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 8024878:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 802487a:	4628      	mov	r0, r5
 802487c:	2114      	movs	r1, #20
 802487e:	f7f7 fdd3 	bl	801c428 <pbuf_remove_header>
      pbuf_cat(p, r);
 8024882:	4629      	mov	r1, r5
 8024884:	4630      	mov	r0, r6
 8024886:	f7f7 fe8d 	bl	801c5a4 <pbuf_cat>
      r = iprh->next_pbuf;
 802488a:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 802488c:	2d00      	cmp	r5, #0
 802488e:	d1f3      	bne.n	8024878 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 8024890:	f8d9 5000 	ldr.w	r5, [r9]
 8024894:	42a5      	cmp	r5, r4
 8024896:	d005      	beq.n	80248a4 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024898:	b335      	cbz	r5, 80248e8 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 802489a:	682b      	ldr	r3, [r5, #0]
 802489c:	42a3      	cmp	r3, r4
 802489e:	d014      	beq.n	80248ca <ip4_reass+0x432>
 80248a0:	461d      	mov	r5, r3
 80248a2:	e7f9      	b.n	8024898 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 80248a4:	6823      	ldr	r3, [r4, #0]
 80248a6:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80248aa:	4621      	mov	r1, r4
 80248ac:	2005      	movs	r0, #5
 80248ae:	f7f7 f92f 	bl	801bb10 <memp_free>
    clen = pbuf_clen(p);
 80248b2:	4630      	mov	r0, r6
 80248b4:	f7f7 fe58 	bl	801c568 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80248b8:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 80248bc:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80248be:	4283      	cmp	r3, r0
 80248c0:	d306      	bcc.n	80248d0 <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80248c2:	1b1b      	subs	r3, r3, r4
 80248c4:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 80248c8:	e680      	b.n	80245cc <ip4_reass+0x134>
    prev->next = ipr->next;
 80248ca:	6823      	ldr	r3, [r4, #0]
 80248cc:	602b      	str	r3, [r5, #0]
 80248ce:	e7ec      	b.n	80248aa <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80248d0:	4b0a      	ldr	r3, [pc, #40]	; (80248fc <ip4_reass+0x464>)
 80248d2:	f240 229b 	movw	r2, #667	; 0x29b
 80248d6:	490d      	ldr	r1, [pc, #52]	; (802490c <ip4_reass+0x474>)
 80248d8:	480a      	ldr	r0, [pc, #40]	; (8024904 <ip4_reass+0x46c>)
 80248da:	f001 fefb 	bl	80266d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80248de:	f8b8 3000 	ldrh.w	r3, [r8]
 80248e2:	e7ee      	b.n	80248c2 <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80248e4:	8ba0      	ldrh	r0, [r4, #28]
 80248e6:	e7a9      	b.n	802483c <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80248e8:	4b04      	ldr	r3, [pc, #16]	; (80248fc <ip4_reass+0x464>)
 80248ea:	f240 1245 	movw	r2, #325	; 0x145
 80248ee:	4908      	ldr	r1, [pc, #32]	; (8024910 <ip4_reass+0x478>)
 80248f0:	4804      	ldr	r0, [pc, #16]	; (8024904 <ip4_reass+0x46c>)
 80248f2:	f001 feef 	bl	80266d4 <iprintf>
    prev->next = ipr->next;
 80248f6:	6823      	ldr	r3, [r4, #0]
 80248f8:	602b      	str	r3, [r5, #0]
 80248fa:	deff      	udf	#255	; 0xff
 80248fc:	08047274 	.word	0x08047274
 8024900:	0804733c 	.word	0x0804733c
 8024904:	0802b3cc 	.word	0x0802b3cc
 8024908:	0804734c 	.word	0x0804734c
 802490c:	08047370 	.word	0x08047370
 8024910:	080472fc 	.word	0x080472fc

08024914 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8024914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024918:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 802491a:	b08f      	sub	sp, #60	; 0x3c
 802491c:	4605      	mov	r5, r0
 802491e:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024920:	f1b3 0214 	subs.w	r2, r3, #20
{
 8024924:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024926:	bf48      	it	mi
 8024928:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802492c:	6843      	ldr	r3, [r0, #4]
 802492e:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024930:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8024934:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024936:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8024938:	f003 030f 	and.w	r3, r3, #15
 802493c:	2b05      	cmp	r3, #5
 802493e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8024942:	f040 80ea 	bne.w	8024b1a <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8024946:	8943      	ldrh	r3, [r0, #10]
 8024948:	2b13      	cmp	r3, #19
 802494a:	f240 80e9 	bls.w	8024b20 <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802494e:	9b04      	ldr	r3, [sp, #16]
 8024950:	88d8      	ldrh	r0, [r3, #6]
 8024952:	f7f5 fdb9 	bl	801a4c8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8024956:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8024958:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 802495c:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 802495e:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 8024960:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8024964:	b29b      	uxth	r3, r3
 8024966:	920d      	str	r2, [sp, #52]	; 0x34
 8024968:	9305      	str	r3, [sp, #20]

  while (left) {
 802496a:	2b00      	cmp	r3, #0
 802496c:	f000 809d 	beq.w	8024aaa <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8024970:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 8024972:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8024974:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8024b40 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8024978:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802497a:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8024b48 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802497e:	b29b      	uxth	r3, r3
 8024980:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8024982:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024986:	2114      	movs	r1, #20
 8024988:	200e      	movs	r0, #14
 802498a:	f7f7 fc07 	bl	801c19c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802498e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024990:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 8024992:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8024994:	4293      	cmp	r3, r2
 8024996:	bf28      	it	cs
 8024998:	4613      	movcs	r3, r2
 802499a:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 802499c:	2800      	cmp	r0, #0
 802499e:	f000 80b9 	beq.w	8024b14 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80249a2:	8943      	ldrh	r3, [r0, #10]
 80249a4:	2b13      	cmp	r3, #19
 80249a6:	f240 8091 	bls.w	8024acc <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80249aa:	9904      	ldr	r1, [sp, #16]
 80249ac:	9b03      	ldr	r3, [sp, #12]
 80249ae:	680a      	ldr	r2, [r1, #0]
 80249b0:	685b      	ldr	r3, [r3, #4]
 80249b2:	684f      	ldr	r7, [r1, #4]
 80249b4:	6888      	ldr	r0, [r1, #8]
 80249b6:	68c9      	ldr	r1, [r1, #12]
 80249b8:	605f      	str	r7, [r3, #4]
 80249ba:	60d9      	str	r1, [r3, #12]
 80249bc:	9904      	ldr	r1, [sp, #16]
 80249be:	601a      	str	r2, [r3, #0]
 80249c0:	6098      	str	r0, [r3, #8]
 80249c2:	690a      	ldr	r2, [r1, #16]
 80249c4:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80249c6:	9b03      	ldr	r3, [sp, #12]
 80249c8:	685b      	ldr	r3, [r3, #4]
 80249ca:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 80249cc:	9b06      	ldr	r3, [sp, #24]
 80249ce:	2b00      	cmp	r3, #0
 80249d0:	d034      	beq.n	8024a3c <ip4_frag+0x128>
 80249d2:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80249d4:	896b      	ldrh	r3, [r5, #10]
 80249d6:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80249d8:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 80249da:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80249dc:	d36e      	bcc.n	8024abc <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80249de:	454c      	cmp	r4, r9
 80249e0:	bf28      	it	cs
 80249e2:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80249e4:	2c00      	cmp	r4, #0
 80249e6:	d062      	beq.n	8024aae <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80249e8:	4641      	mov	r1, r8
 80249ea:	f240 22bd 	movw	r2, #701	; 0x2bd
 80249ee:	2006      	movs	r0, #6
 80249f0:	f7f7 f858 	bl	801baa4 <memp_malloc_fn>
 80249f4:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80249f6:	2241      	movs	r2, #65	; 0x41
 80249f8:	4621      	mov	r1, r4
 80249fa:	2000      	movs	r0, #0
      if (pcr == NULL) {
 80249fc:	f1bb 0f00 	cmp.w	fp, #0
 8024a00:	d06f      	beq.n	8024ae2 <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024a02:	9401      	str	r4, [sp, #4]
 8024a04:	465b      	mov	r3, fp
 8024a06:	686f      	ldr	r7, [r5, #4]
 8024a08:	4437      	add	r7, r6
 8024a0a:	9700      	str	r7, [sp, #0]
 8024a0c:	f7f7 fc64 	bl	801c2d8 <pbuf_alloced_custom>
 8024a10:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8024a12:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 8024a14:	2f00      	cmp	r7, #0
 8024a16:	d06e      	beq.n	8024af6 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024a18:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 8024a1c:	f7f7 fdae 	bl	801c57c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024a20:	4a44      	ldr	r2, [pc, #272]	; (8024b34 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 8024a22:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024a24:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8024a28:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 8024a2a:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024a2e:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 8024a32:	f7f7 fdb7 	bl	801c5a4 <pbuf_cat>
      if (left_to_copy) {
 8024a36:	f1b9 0f00 	cmp.w	r9, #0
 8024a3a:	d138      	bne.n	8024aae <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8024a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 8024a3e:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8024a40:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 8024a42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 8024a44:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8024a46:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8024a4a:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 8024a4c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8024a4e:	4293      	cmp	r3, r2
 8024a50:	dd44      	ble.n	8024adc <ip4_frag+0x1c8>
 8024a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024a54:	2b00      	cmp	r3, #0
 8024a56:	d141      	bne.n	8024adc <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024a58:	f7f5 fd36 	bl	801a4c8 <lwip_htons>
 8024a5c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024a5e:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024a60:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024a62:	f103 0014 	add.w	r0, r3, #20
 8024a66:	b280      	uxth	r0, r0
 8024a68:	f7f5 fd2e 	bl	801a4c8 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8024a6c:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024a6e:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8024a70:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 8024a72:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8024a74:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 8024a76:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8024a78:	f7f6 face 	bl	801b018 <inet_chksum>
 8024a7c:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8024a7e:	9f03      	ldr	r7, [sp, #12]
 8024a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024a84:	4639      	mov	r1, r7
 8024a86:	6943      	ldr	r3, [r0, #20]
 8024a88:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8024a8a:	4638      	mov	r0, r7
 8024a8c:	f7f7 fd58 	bl	801c540 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8024a90:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8024a94:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8024a96:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 8024a9a:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 8024a9c:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 8024a9e:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8024aa0:	b292      	uxth	r2, r2
 8024aa2:	9207      	str	r2, [sp, #28]
  while (left) {
 8024aa4:	2b00      	cmp	r3, #0
 8024aa6:	f47f af6c 	bne.w	8024982 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8024aaa:	2000      	movs	r0, #0
 8024aac:	e020      	b.n	8024af0 <ip4_frag+0x1dc>
        p = p->next;
 8024aae:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8024ab0:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8024ab2:	896b      	ldrh	r3, [r5, #10]
 8024ab4:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024ab6:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8024ab8:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024aba:	d290      	bcs.n	80249de <ip4_frag+0xca>
 8024abc:	4643      	mov	r3, r8
 8024abe:	f240 322d 	movw	r2, #813	; 0x32d
 8024ac2:	491d      	ldr	r1, [pc, #116]	; (8024b38 <ip4_frag+0x224>)
 8024ac4:	4650      	mov	r0, sl
 8024ac6:	f001 fe05 	bl	80266d4 <iprintf>
 8024aca:	e788      	b.n	80249de <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8024acc:	4643      	mov	r3, r8
 8024ace:	f44f 7249 	mov.w	r2, #804	; 0x324
 8024ad2:	491a      	ldr	r1, [pc, #104]	; (8024b3c <ip4_frag+0x228>)
 8024ad4:	4650      	mov	r0, sl
 8024ad6:	f001 fdfd 	bl	80266d4 <iprintf>
 8024ada:	e766      	b.n	80249aa <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 8024adc:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8024ae0:	e7ba      	b.n	8024a58 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8024ae2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8024ae6:	4658      	mov	r0, fp
 8024ae8:	f7f7 fd2a 	bl	801c540 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8024aec:	f04f 30ff 	mov.w	r0, #4294967295
}
 8024af0:	b00f      	add	sp, #60	; 0x3c
 8024af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8024af6:	46d9      	mov	r9, fp
 8024af8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8024afc:	2006      	movs	r0, #6
 8024afe:	4649      	mov	r1, r9
 8024b00:	f7f7 f806 	bl	801bb10 <memp_free>
        pbuf_free(rambuf);
 8024b04:	4658      	mov	r0, fp
 8024b06:	f7f7 fd1b 	bl	801c540 <pbuf_free>
  return ERR_MEM;
 8024b0a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8024b0e:	b00f      	add	sp, #60	; 0x3c
 8024b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8024b14:	f04f 30ff 	mov.w	r0, #4294967295
 8024b18:	e7ea      	b.n	8024af0 <ip4_frag+0x1dc>
    return ERR_VAL;
 8024b1a:	f06f 0005 	mvn.w	r0, #5
 8024b1e:	e7e7      	b.n	8024af0 <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8024b20:	4b07      	ldr	r3, [pc, #28]	; (8024b40 <ip4_frag+0x22c>)
 8024b22:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8024b26:	4907      	ldr	r1, [pc, #28]	; (8024b44 <ip4_frag+0x230>)
 8024b28:	4807      	ldr	r0, [pc, #28]	; (8024b48 <ip4_frag+0x234>)
 8024b2a:	f001 fdd3 	bl	80266d4 <iprintf>
 8024b2e:	f06f 0005 	mvn.w	r0, #5
 8024b32:	e7dd      	b.n	8024af0 <ip4_frag+0x1dc>
 8024b34:	08024281 	.word	0x08024281
 8024b38:	080473e8 	.word	0x080473e8
 8024b3c:	080473c8 	.word	0x080473c8
 8024b40:	08047274 	.word	0x08047274
 8024b44:	080473ac 	.word	0x080473ac
 8024b48:	0802b3cc 	.word	0x0802b3cc

08024b4c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8024b4c:	8943      	ldrh	r3, [r0, #10]
 8024b4e:	2b0e      	cmp	r3, #14
{
 8024b50:	b570      	push	{r4, r5, r6, lr}
 8024b52:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8024b54:	d91b      	bls.n	8024b8e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8024b56:	7bc3      	ldrb	r3, [r0, #15]
 8024b58:	460d      	mov	r5, r1
 8024b5a:	b91b      	cbnz	r3, 8024b64 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8024b5c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8024b60:	3301      	adds	r3, #1
 8024b62:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8024b64:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8024b66:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8024b68:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8024b6a:	07d9      	lsls	r1, r3, #31
 8024b6c:	d50a      	bpl.n	8024b84 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8024b6e:	2b01      	cmp	r3, #1
 8024b70:	d030      	beq.n	8024bd4 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8024b72:	2206      	movs	r2, #6
 8024b74:	491d      	ldr	r1, [pc, #116]	; (8024bec <ethernet_input+0xa0>)
 8024b76:	f000 fdd7 	bl	8025728 <memcmp>
 8024b7a:	b918      	cbnz	r0, 8024b84 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8024b7c:	7b63      	ldrb	r3, [r4, #13]
 8024b7e:	f043 0308 	orr.w	r3, r3, #8
 8024b82:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8024b84:	2e08      	cmp	r6, #8
 8024b86:	d016      	beq.n	8024bb6 <ethernet_input+0x6a>
 8024b88:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8024b8c:	d004      	beq.n	8024b98 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8024b8e:	4620      	mov	r0, r4
 8024b90:	f7f7 fcd6 	bl	801c540 <pbuf_free>
  return ERR_OK;
}
 8024b94:	2000      	movs	r0, #0
 8024b96:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024b98:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8024b9c:	071b      	lsls	r3, r3, #28
 8024b9e:	d5f6      	bpl.n	8024b8e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024ba0:	210e      	movs	r1, #14
 8024ba2:	4620      	mov	r0, r4
 8024ba4:	f7f7 fc40 	bl	801c428 <pbuf_remove_header>
 8024ba8:	2800      	cmp	r0, #0
 8024baa:	d1f0      	bne.n	8024b8e <ethernet_input+0x42>
        etharp_input(p, netif);
 8024bac:	4629      	mov	r1, r5
 8024bae:	4620      	mov	r0, r4
 8024bb0:	f7fe fd2e 	bl	8023610 <etharp_input>
      break;
 8024bb4:	e7ee      	b.n	8024b94 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024bb6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8024bba:	071a      	lsls	r2, r3, #28
 8024bbc:	d5e7      	bpl.n	8024b8e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024bbe:	210e      	movs	r1, #14
 8024bc0:	4620      	mov	r0, r4
 8024bc2:	f7f7 fc31 	bl	801c428 <pbuf_remove_header>
 8024bc6:	2800      	cmp	r0, #0
 8024bc8:	d1e1      	bne.n	8024b8e <ethernet_input+0x42>
        ip4_input(p, netif);
 8024bca:	4629      	mov	r1, r5
 8024bcc:	4620      	mov	r0, r4
 8024bce:	f7ff f8eb 	bl	8023da8 <ip4_input>
      break;
 8024bd2:	e7df      	b.n	8024b94 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024bd4:	7843      	ldrb	r3, [r0, #1]
 8024bd6:	2b00      	cmp	r3, #0
 8024bd8:	d1d4      	bne.n	8024b84 <ethernet_input+0x38>
 8024bda:	7883      	ldrb	r3, [r0, #2]
 8024bdc:	2b5e      	cmp	r3, #94	; 0x5e
 8024bde:	d1d1      	bne.n	8024b84 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8024be0:	7b63      	ldrb	r3, [r4, #13]
 8024be2:	f043 0310 	orr.w	r3, r3, #16
 8024be6:	7363      	strb	r3, [r4, #13]
 8024be8:	e7cc      	b.n	8024b84 <ethernet_input+0x38>
 8024bea:	bf00      	nop
 8024bec:	08047464 	.word	0x08047464

08024bf0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8024bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024bf4:	460c      	mov	r4, r1
 8024bf6:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8024bf8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8024bfc:	4616      	mov	r6, r2
 8024bfe:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8024c00:	f7f5 fc62 	bl	801a4c8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024c04:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8024c06:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024c08:	4620      	mov	r0, r4
 8024c0a:	f7f7 fbd9 	bl	801c3c0 <pbuf_add_header>
 8024c0e:	b9e0      	cbnz	r0, 8024c4a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8024c10:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8024c12:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8024c16:	683b      	ldr	r3, [r7, #0]
 8024c18:	600b      	str	r3, [r1, #0]
 8024c1a:	88bb      	ldrh	r3, [r7, #4]
 8024c1c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8024c1e:	6833      	ldr	r3, [r6, #0]
 8024c20:	f8c1 3006 	str.w	r3, [r1, #6]
 8024c24:	88b3      	ldrh	r3, [r6, #4]
 8024c26:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8024c28:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8024c2c:	2b06      	cmp	r3, #6
 8024c2e:	d006      	beq.n	8024c3e <ethernet_output+0x4e>
 8024c30:	4b08      	ldr	r3, [pc, #32]	; (8024c54 <ethernet_output+0x64>)
 8024c32:	f44f 7299 	mov.w	r2, #306	; 0x132
 8024c36:	4908      	ldr	r1, [pc, #32]	; (8024c58 <ethernet_output+0x68>)
 8024c38:	4808      	ldr	r0, [pc, #32]	; (8024c5c <ethernet_output+0x6c>)
 8024c3a:	f001 fd4b 	bl	80266d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8024c3e:	69ab      	ldr	r3, [r5, #24]
 8024c40:	4621      	mov	r1, r4
 8024c42:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8024c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8024c48:	4718      	bx	r3
}
 8024c4a:	f06f 0001 	mvn.w	r0, #1
 8024c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c52:	bf00      	nop
 8024c54:	080473f8 	.word	0x080473f8
 8024c58:	08047430 	.word	0x08047430
 8024c5c:	0802b3cc 	.word	0x0802b3cc

08024c60 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8024c60:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8024c62:	2300      	movs	r3, #0
{
 8024c64:	b085      	sub	sp, #20
 8024c66:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8024c68:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024c6a:	4619      	mov	r1, r3
{
 8024c6c:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024c6e:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8024c70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8024c74:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024c78:	f7f1 fdac 	bl	80167d4 <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8024c7c:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024c80:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8024c82:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8024c84:	4258      	negs	r0, r3
 8024c86:	b005      	add	sp, #20
 8024c88:	bd30      	pop	{r4, r5, pc}
 8024c8a:	bf00      	nop

08024c8c <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8024c8c:	2200      	movs	r2, #0
 8024c8e:	6800      	ldr	r0, [r0, #0]
{
 8024c90:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8024c92:	f7f1 fdb3 	bl	80167fc <osMessagePut>
 8024c96:	3800      	subs	r0, #0
 8024c98:	bf18      	it	ne
 8024c9a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8024c9c:	4240      	negs	r0, r0
 8024c9e:	bd08      	pop	{r3, pc}

08024ca0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8024ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ca2:	4614      	mov	r4, r2
 8024ca4:	b085      	sub	sp, #20
 8024ca6:	4605      	mov	r5, r0
 8024ca8:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8024caa:	f7f1 fc59 	bl	8016560 <osKernelSysTick>
 8024cae:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8024cb0:	b15c      	cbz	r4, 8024cca <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8024cb2:	4622      	mov	r2, r4
 8024cb4:	6829      	ldr	r1, [r5, #0]
 8024cb6:	a801      	add	r0, sp, #4
 8024cb8:	f7f1 fdcc 	bl	8016854 <osMessageGet>

    if(event.status == osEventMessage)
 8024cbc:	9b01      	ldr	r3, [sp, #4]
 8024cbe:	2b10      	cmp	r3, #16
 8024cc0:	d009      	beq.n	8024cd6 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8024cc2:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8024cc6:	b005      	add	sp, #20
 8024cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8024cca:	f04f 32ff 	mov.w	r2, #4294967295
 8024cce:	6829      	ldr	r1, [r5, #0]
 8024cd0:	a801      	add	r0, sp, #4
 8024cd2:	f7f1 fdbf 	bl	8016854 <osMessageGet>
    *msg = (void *)event.value.v;
 8024cd6:	9b02      	ldr	r3, [sp, #8]
 8024cd8:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8024cda:	f7f1 fc41 	bl	8016560 <osKernelSysTick>
 8024cde:	1b80      	subs	r0, r0, r6
}
 8024ce0:	b005      	add	sp, #20
 8024ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024ce4 <sys_mbox_valid>:
 8024ce4:	6800      	ldr	r0, [r0, #0]
 8024ce6:	3800      	subs	r0, #0
 8024ce8:	bf18      	it	ne
 8024cea:	2001      	movne	r0, #1
 8024cec:	4770      	bx	lr
 8024cee:	bf00      	nop

08024cf0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024cf0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8024cf2:	4803      	ldr	r0, [pc, #12]	; (8024d00 <sys_init+0x10>)
 8024cf4:	f7f1 fc98 	bl	8016628 <osMutexCreate>
 8024cf8:	4b02      	ldr	r3, [pc, #8]	; (8024d04 <sys_init+0x14>)
 8024cfa:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8024cfc:	bd08      	pop	{r3, pc}
 8024cfe:	bf00      	nop
 8024d00:	08047474 	.word	0x08047474
 8024d04:	2002e854 	.word	0x2002e854

08024d08 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024d08:	b510      	push	{r4, lr}
 8024d0a:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8024d0c:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024d0e:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024d10:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8024d12:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024d16:	f7f1 fc87 	bl	8016628 <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8024d1a:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024d1e:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8024d20:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8024d22:	4258      	negs	r0, r3
 8024d24:	b002      	add	sp, #8
 8024d26:	bd10      	pop	{r4, pc}

08024d28 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8024d28:	f04f 31ff 	mov.w	r1, #4294967295
 8024d2c:	6800      	ldr	r0, [r0, #0]
 8024d2e:	f7f1 bc83 	b.w	8016638 <osMutexWait>
 8024d32:	bf00      	nop

08024d34 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8024d34:	6800      	ldr	r0, [r0, #0]
 8024d36:	f7f1 bcab 	b.w	8016690 <osMutexRelease>
 8024d3a:	bf00      	nop

08024d3c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8024d3c:	b510      	push	{r4, lr}
 8024d3e:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024d40:	2400      	movs	r4, #0
 8024d42:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8024d46:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8024d48:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 8024d4c:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024d4e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8024d52:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8024d56:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8024d5a:	f7f1 fc09 	bl	8016570 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8024d5e:	b008      	add	sp, #32
 8024d60:	bd10      	pop	{r4, pc}
 8024d62:	bf00      	nop

08024d64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8024d64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8024d66:	2200      	movs	r2, #0
 8024d68:	4917      	ldr	r1, [pc, #92]	; (8024dc8 <MX_USB_DEVICE_Init+0x64>)
 8024d6a:	4818      	ldr	r0, [pc, #96]	; (8024dcc <MX_USB_DEVICE_Init+0x68>)
 8024d6c:	f7f0 ff6a 	bl	8015c44 <USBD_Init>
 8024d70:	b970      	cbnz	r0, 8024d90 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8024d72:	4917      	ldr	r1, [pc, #92]	; (8024dd0 <MX_USB_DEVICE_Init+0x6c>)
 8024d74:	4815      	ldr	r0, [pc, #84]	; (8024dcc <MX_USB_DEVICE_Init+0x68>)
 8024d76:	f7f0 ff7d 	bl	8015c74 <USBD_RegisterClass>
 8024d7a:	b988      	cbnz	r0, 8024da0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8024d7c:	4915      	ldr	r1, [pc, #84]	; (8024dd4 <MX_USB_DEVICE_Init+0x70>)
 8024d7e:	4813      	ldr	r0, [pc, #76]	; (8024dcc <MX_USB_DEVICE_Init+0x68>)
 8024d80:	f7f0 ff2a 	bl	8015bd8 <USBD_CDC_RegisterInterface>
 8024d84:	b9a0      	cbnz	r0, 8024db0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8024d86:	4811      	ldr	r0, [pc, #68]	; (8024dcc <MX_USB_DEVICE_Init+0x68>)
 8024d88:	f7f0 ff8a 	bl	8015ca0 <USBD_Start>
 8024d8c:	b9b8      	cbnz	r0, 8024dbe <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8024d8e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8024d90:	f7df fcda 	bl	8004748 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8024d94:	490e      	ldr	r1, [pc, #56]	; (8024dd0 <MX_USB_DEVICE_Init+0x6c>)
 8024d96:	480d      	ldr	r0, [pc, #52]	; (8024dcc <MX_USB_DEVICE_Init+0x68>)
 8024d98:	f7f0 ff6c 	bl	8015c74 <USBD_RegisterClass>
 8024d9c:	2800      	cmp	r0, #0
 8024d9e:	d0ed      	beq.n	8024d7c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8024da0:	f7df fcd2 	bl	8004748 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8024da4:	490b      	ldr	r1, [pc, #44]	; (8024dd4 <MX_USB_DEVICE_Init+0x70>)
 8024da6:	4809      	ldr	r0, [pc, #36]	; (8024dcc <MX_USB_DEVICE_Init+0x68>)
 8024da8:	f7f0 ff16 	bl	8015bd8 <USBD_CDC_RegisterInterface>
 8024dac:	2800      	cmp	r0, #0
 8024dae:	d0ea      	beq.n	8024d86 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8024db0:	f7df fcca 	bl	8004748 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8024db4:	4805      	ldr	r0, [pc, #20]	; (8024dcc <MX_USB_DEVICE_Init+0x68>)
 8024db6:	f7f0 ff73 	bl	8015ca0 <USBD_Start>
 8024dba:	2800      	cmp	r0, #0
 8024dbc:	d0e7      	beq.n	8024d8e <MX_USB_DEVICE_Init+0x2a>
}
 8024dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8024dc2:	f7df bcc1 	b.w	8004748 <Error_Handler>
 8024dc6:	bf00      	nop
 8024dc8:	20000464 	.word	0x20000464
 8024dcc:	2002e858 	.word	0x2002e858
 8024dd0:	20000334 	.word	0x20000334
 8024dd4:	20000450 	.word	0x20000450

08024dd8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8024dd8:	2000      	movs	r0, #0
 8024dda:	4770      	bx	lr

08024ddc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8024ddc:	2000      	movs	r0, #0
 8024dde:	4770      	bx	lr

08024de0 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8024de0:	2000      	movs	r0, #0
 8024de2:	4770      	bx	lr

08024de4 <CDC_Receive_FS>:
{
 8024de4:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8024de6:	4c05      	ldr	r4, [pc, #20]	; (8024dfc <CDC_Receive_FS+0x18>)
{
 8024de8:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8024dea:	4620      	mov	r0, r4
 8024dec:	f7f0 ff06 	bl	8015bfc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8024df0:	4620      	mov	r0, r4
 8024df2:	f7f0 ff0b 	bl	8015c0c <USBD_CDC_ReceivePacket>
}
 8024df6:	2000      	movs	r0, #0
 8024df8:	bd10      	pop	{r4, pc}
 8024dfa:	bf00      	nop
 8024dfc:	2002e858 	.word	0x2002e858

08024e00 <CDC_Init_FS>:
{
 8024e00:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8024e02:	4c06      	ldr	r4, [pc, #24]	; (8024e1c <CDC_Init_FS+0x1c>)
 8024e04:	2200      	movs	r2, #0
 8024e06:	4906      	ldr	r1, [pc, #24]	; (8024e20 <CDC_Init_FS+0x20>)
 8024e08:	4620      	mov	r0, r4
 8024e0a:	f7f0 feed 	bl	8015be8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8024e0e:	4905      	ldr	r1, [pc, #20]	; (8024e24 <CDC_Init_FS+0x24>)
 8024e10:	4620      	mov	r0, r4
 8024e12:	f7f0 fef3 	bl	8015bfc <USBD_CDC_SetRxBuffer>
}
 8024e16:	2000      	movs	r0, #0
 8024e18:	bd10      	pop	{r4, pc}
 8024e1a:	bf00      	nop
 8024e1c:	2002e858 	.word	0x2002e858
 8024e20:	2002f328 	.word	0x2002f328
 8024e24:	2002eb28 	.word	0x2002eb28

08024e28 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8024e28:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8024e2a:	4801      	ldr	r0, [pc, #4]	; (8024e30 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8024e2c:	800b      	strh	r3, [r1, #0]
}
 8024e2e:	4770      	bx	lr
 8024e30:	20000490 	.word	0x20000490

08024e34 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8024e34:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8024e36:	4801      	ldr	r0, [pc, #4]	; (8024e3c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8024e38:	800b      	strh	r3, [r1, #0]
}
 8024e3a:	4770      	bx	lr
 8024e3c:	200004a4 	.word	0x200004a4

08024e40 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8024e40:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8024e42:	4801      	ldr	r0, [pc, #4]	; (8024e48 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8024e44:	800b      	strh	r3, [r1, #0]
}
 8024e46:	4770      	bx	lr
 8024e48:	20000484 	.word	0x20000484

08024e4c <USBD_FS_ManufacturerStrDescriptor>:
{
 8024e4c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8024e4e:	4c04      	ldr	r4, [pc, #16]	; (8024e60 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8024e50:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8024e52:	4804      	ldr	r0, [pc, #16]	; (8024e64 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8024e54:	4621      	mov	r1, r4
 8024e56:	f7f1 fae7 	bl	8016428 <USBD_GetString>
}
 8024e5a:	4620      	mov	r0, r4
 8024e5c:	bd10      	pop	{r4, pc}
 8024e5e:	bf00      	nop
 8024e60:	2002fb28 	.word	0x2002fb28
 8024e64:	0804747c 	.word	0x0804747c

08024e68 <USBD_FS_ProductStrDescriptor>:
{
 8024e68:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8024e6a:	4c04      	ldr	r4, [pc, #16]	; (8024e7c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8024e6c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8024e6e:	4804      	ldr	r0, [pc, #16]	; (8024e80 <USBD_FS_ProductStrDescriptor+0x18>)
 8024e70:	4621      	mov	r1, r4
 8024e72:	f7f1 fad9 	bl	8016428 <USBD_GetString>
}
 8024e76:	4620      	mov	r0, r4
 8024e78:	bd10      	pop	{r4, pc}
 8024e7a:	bf00      	nop
 8024e7c:	2002fb28 	.word	0x2002fb28
 8024e80:	08047490 	.word	0x08047490

08024e84 <USBD_FS_ConfigStrDescriptor>:
{
 8024e84:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8024e86:	4c04      	ldr	r4, [pc, #16]	; (8024e98 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8024e88:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8024e8a:	4804      	ldr	r0, [pc, #16]	; (8024e9c <USBD_FS_ConfigStrDescriptor+0x18>)
 8024e8c:	4621      	mov	r1, r4
 8024e8e:	f7f1 facb 	bl	8016428 <USBD_GetString>
}
 8024e92:	4620      	mov	r0, r4
 8024e94:	bd10      	pop	{r4, pc}
 8024e96:	bf00      	nop
 8024e98:	2002fb28 	.word	0x2002fb28
 8024e9c:	080474a8 	.word	0x080474a8

08024ea0 <USBD_FS_InterfaceStrDescriptor>:
{
 8024ea0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8024ea2:	4c04      	ldr	r4, [pc, #16]	; (8024eb4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8024ea4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8024ea6:	4804      	ldr	r0, [pc, #16]	; (8024eb8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8024ea8:	4621      	mov	r1, r4
 8024eaa:	f7f1 fabd 	bl	8016428 <USBD_GetString>
}
 8024eae:	4620      	mov	r0, r4
 8024eb0:	bd10      	pop	{r4, pc}
 8024eb2:	bf00      	nop
 8024eb4:	2002fb28 	.word	0x2002fb28
 8024eb8:	080474b4 	.word	0x080474b4

08024ebc <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8024ebc:	4b21      	ldr	r3, [pc, #132]	; (8024f44 <USBD_FS_SerialStrDescriptor+0x88>)
 8024ebe:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8024ec2:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 8024ec6:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8024ec8:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 8024eca:	f04f 041a 	mov.w	r4, #26
 8024ece:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8024ed0:	d101      	bne.n	8024ed6 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8024ed2:	481d      	ldr	r0, [pc, #116]	; (8024f48 <USBD_FS_SerialStrDescriptor+0x8c>)
 8024ed4:	bd30      	pop	{r4, r5, pc}
 8024ed6:	491c      	ldr	r1, [pc, #112]	; (8024f48 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8024ed8:	f04f 0e00 	mov.w	lr, #0
 8024edc:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8024ee0:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8024ee2:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8024ee4:	0f13      	lsrs	r3, r2, #28
 8024ee6:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8024eea:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 8024eee:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8024ef2:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024ef6:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8024efa:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 8024efe:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8024f02:	bf34      	ite	cc
 8024f04:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024f08:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8024f0c:	f1be 0f10 	cmp.w	lr, #16
 8024f10:	d1e8      	bne.n	8024ee4 <USBD_FS_SerialStrDescriptor+0x28>
 8024f12:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8024f14:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8024f16:	0f03      	lsrs	r3, r0, #28
 8024f18:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8024f1c:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 8024f20:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 8024f22:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024f26:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8024f2a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8024f2e:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8024f32:	bf34      	ite	cc
 8024f34:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024f38:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8024f3a:	2a08      	cmp	r2, #8
 8024f3c:	d1eb      	bne.n	8024f16 <USBD_FS_SerialStrDescriptor+0x5a>
}
 8024f3e:	4802      	ldr	r0, [pc, #8]	; (8024f48 <USBD_FS_SerialStrDescriptor+0x8c>)
 8024f40:	bd30      	pop	{r4, r5, pc}
 8024f42:	bf00      	nop
 8024f44:	1ff0f000 	.word	0x1ff0f000
 8024f48:	200004a8 	.word	0x200004a8

08024f4c <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8024f4c:	6803      	ldr	r3, [r0, #0]
{
 8024f4e:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8024f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8024f54:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024f56:	f04f 0400 	mov.w	r4, #0
 8024f5a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8024f5e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8024f62:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8024f64:	d001      	beq.n	8024f6a <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8024f66:	b009      	add	sp, #36	; 0x24
 8024f68:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024f6a:	4d1e      	ldr	r5, [pc, #120]	; (8024fe4 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8024f6c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024f70:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024f72:	481d      	ldr	r0, [pc, #116]	; (8024fe8 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024f74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8024f76:	f043 0301 	orr.w	r3, r3, #1
 8024f7a:	632b      	str	r3, [r5, #48]	; 0x30
 8024f7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8024f7e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024f82:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024f86:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024f88:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8024f8a:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024f8c:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024f8e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8024f90:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024f94:	f7e7 fc8c 	bl	800c8b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8024f98:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8024f9c:	a903      	add	r1, sp, #12
 8024f9e:	4812      	ldr	r0, [pc, #72]	; (8024fe8 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024fa0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024fa2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8024fa6:	f7e7 fc83 	bl	800c8b0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8024faa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8024fac:	4622      	mov	r2, r4
 8024fae:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8024fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8024fb4:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8024fb6:	636b      	str	r3, [r5, #52]	; 0x34
 8024fb8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8024fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024fbe:	9301      	str	r3, [sp, #4]
 8024fc0:	9b01      	ldr	r3, [sp, #4]
 8024fc2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8024fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024fc8:	646b      	str	r3, [r5, #68]	; 0x44
 8024fca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8024fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024fd0:	9302      	str	r3, [sp, #8]
 8024fd2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8024fd4:	f7e4 fdee 	bl	8009bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8024fd8:	2043      	movs	r0, #67	; 0x43
 8024fda:	f7e4 fe35 	bl	8009c48 <HAL_NVIC_EnableIRQ>
}
 8024fde:	b009      	add	sp, #36	; 0x24
 8024fe0:	bd30      	pop	{r4, r5, pc}
 8024fe2:	bf00      	nop
 8024fe4:	40023800 	.word	0x40023800
 8024fe8:	40020000 	.word	0x40020000

08024fec <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8024fec:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8024ff0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024ff4:	f7f0 be66 	b.w	8015cc4 <USBD_LL_SetupStage>

08024ff8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8024ff8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8024ffc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8025000:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025004:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8025008:	f7f0 be8a 	b.w	8015d20 <USBD_LL_DataOutStage>

0802500c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802500c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8025010:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8025014:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802501a:	f7f0 beb7 	b.w	8015d8c <USBD_LL_DataInStage>
 802501e:	bf00      	nop

08025020 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8025020:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025024:	f7f0 bf4e 	b.w	8015ec4 <USBD_LL_SOF>

08025028 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8025028:	68c1      	ldr	r1, [r0, #12]
{
 802502a:	b510      	push	{r4, lr}
 802502c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802502e:	b111      	cbz	r1, 8025036 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8025030:	2902      	cmp	r1, #2
 8025032:	d10a      	bne.n	802504a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8025034:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8025036:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 802503a:	f7f0 ff2b 	bl	8015e94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802503e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8025042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8025046:	f7f0 befd 	b.w	8015e44 <USBD_LL_Reset>
    Error_Handler();
 802504a:	f7df fb7d 	bl	8004748 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802504e:	2101      	movs	r1, #1
 8025050:	e7f1      	b.n	8025036 <HAL_PCD_ResetCallback+0xe>
 8025052:	bf00      	nop

08025054 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025054:	b510      	push	{r4, lr}
 8025056:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8025058:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 802505c:	f7f0 ff1e 	bl	8015e9c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8025060:	6822      	ldr	r2, [r4, #0]
 8025062:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8025066:	f043 0301 	orr.w	r3, r3, #1
 802506a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802506e:	6a23      	ldr	r3, [r4, #32]
 8025070:	b123      	cbz	r3, 802507c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8025072:	4a03      	ldr	r2, [pc, #12]	; (8025080 <HAL_PCD_SuspendCallback+0x2c>)
 8025074:	6913      	ldr	r3, [r2, #16]
 8025076:	f043 0306 	orr.w	r3, r3, #6
 802507a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 802507c:	bd10      	pop	{r4, pc}
 802507e:	bf00      	nop
 8025080:	e000ed00 	.word	0xe000ed00

08025084 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8025084:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025088:	f7f0 bf12 	b.w	8015eb0 <USBD_LL_Resume>

0802508c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802508c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025090:	f7f0 bf28 	b.w	8015ee4 <USBD_LL_IsoOUTIncomplete>

08025094 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8025094:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025098:	f7f0 bf22 	b.w	8015ee0 <USBD_LL_IsoINIncomplete>

0802509c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 802509c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80250a0:	f7f0 bf22 	b.w	8015ee8 <USBD_LL_DevConnected>

080250a4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80250a4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80250a8:	f7f0 bf20 	b.w	8015eec <USBD_LL_DevDisconnected>

080250ac <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80250ac:	7802      	ldrb	r2, [r0, #0]
 80250ae:	b10a      	cbz	r2, 80250b4 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80250b0:	2000      	movs	r0, #0
 80250b2:	4770      	bx	lr
{
 80250b4:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80250b6:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 80250b8:	4b14      	ldr	r3, [pc, #80]	; (802510c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80250ba:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80250bc:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80250c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80250c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 80250c4:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80250c8:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80250cc:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80250ce:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80250d0:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80250d2:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80250d4:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80250d8:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80250dc:	2206      	movs	r2, #6
 80250de:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80250e0:	f7e8 fd1e 	bl	800db20 <HAL_PCD_Init>
 80250e4:	b978      	cbnz	r0, 8025106 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80250e6:	2180      	movs	r1, #128	; 0x80
 80250e8:	4808      	ldr	r0, [pc, #32]	; (802510c <USBD_LL_Init+0x60>)
 80250ea:	f7e9 fa83 	bl	800e5f4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80250ee:	2240      	movs	r2, #64	; 0x40
 80250f0:	2100      	movs	r1, #0
 80250f2:	4806      	ldr	r0, [pc, #24]	; (802510c <USBD_LL_Init+0x60>)
 80250f4:	f7e9 fa54 	bl	800e5a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80250f8:	2280      	movs	r2, #128	; 0x80
 80250fa:	2101      	movs	r1, #1
 80250fc:	4803      	ldr	r0, [pc, #12]	; (802510c <USBD_LL_Init+0x60>)
 80250fe:	f7e9 fa4f 	bl	800e5a0 <HAL_PCDEx_SetTxFiFo>
}
 8025102:	2000      	movs	r0, #0
 8025104:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8025106:	f7df fb1f 	bl	8004748 <Error_Handler>
 802510a:	e7ec      	b.n	80250e6 <USBD_LL_Init+0x3a>
 802510c:	2002fd28 	.word	0x2002fd28

08025110 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8025110:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025114:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8025116:	f7e8 fdb1 	bl	800dc7c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 802511a:	2803      	cmp	r0, #3
 802511c:	d802      	bhi.n	8025124 <USBD_LL_Start+0x14>
 802511e:	4b02      	ldr	r3, [pc, #8]	; (8025128 <USBD_LL_Start+0x18>)
 8025120:	5c18      	ldrb	r0, [r3, r0]
}
 8025122:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8025124:	2003      	movs	r0, #3
}
 8025126:	bd08      	pop	{r3, pc}
 8025128:	080474c4 	.word	0x080474c4

0802512c <USBD_LL_OpenEP>:
{
 802512c:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802512e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025132:	461a      	mov	r2, r3
 8025134:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8025136:	4663      	mov	r3, ip
 8025138:	f7e9 f8e4 	bl	800e304 <HAL_PCD_EP_Open>
  switch (hal_status)
 802513c:	2803      	cmp	r0, #3
 802513e:	d802      	bhi.n	8025146 <USBD_LL_OpenEP+0x1a>
 8025140:	4b02      	ldr	r3, [pc, #8]	; (802514c <USBD_LL_OpenEP+0x20>)
 8025142:	5c18      	ldrb	r0, [r3, r0]
}
 8025144:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8025146:	2003      	movs	r0, #3
}
 8025148:	bd08      	pop	{r3, pc}
 802514a:	bf00      	nop
 802514c:	080474c4 	.word	0x080474c4

08025150 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8025150:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025154:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8025156:	f7e9 f913 	bl	800e380 <HAL_PCD_EP_Close>
  switch (hal_status)
 802515a:	2803      	cmp	r0, #3
 802515c:	d802      	bhi.n	8025164 <USBD_LL_CloseEP+0x14>
 802515e:	4b02      	ldr	r3, [pc, #8]	; (8025168 <USBD_LL_CloseEP+0x18>)
 8025160:	5c18      	ldrb	r0, [r3, r0]
}
 8025162:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8025164:	2003      	movs	r0, #3
}
 8025166:	bd08      	pop	{r3, pc}
 8025168:	080474c4 	.word	0x080474c4

0802516c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802516c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025170:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8025172:	f7e9 f995 	bl	800e4a0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8025176:	2803      	cmp	r0, #3
 8025178:	d802      	bhi.n	8025180 <USBD_LL_StallEP+0x14>
 802517a:	4b02      	ldr	r3, [pc, #8]	; (8025184 <USBD_LL_StallEP+0x18>)
 802517c:	5c18      	ldrb	r0, [r3, r0]
}
 802517e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8025180:	2003      	movs	r0, #3
}
 8025182:	bd08      	pop	{r3, pc}
 8025184:	080474c4 	.word	0x080474c4

08025188 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8025188:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802518c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802518e:	f7e9 f9cb 	bl	800e528 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8025192:	2803      	cmp	r0, #3
 8025194:	d802      	bhi.n	802519c <USBD_LL_ClearStallEP+0x14>
 8025196:	4b02      	ldr	r3, [pc, #8]	; (80251a0 <USBD_LL_ClearStallEP+0x18>)
 8025198:	5c18      	ldrb	r0, [r3, r0]
}
 802519a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802519c:	2003      	movs	r0, #3
}
 802519e:	bd08      	pop	{r3, pc}
 80251a0:	080474c4 	.word	0x080474c4

080251a4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80251a4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80251a6:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80251aa:	d406      	bmi.n	80251ba <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80251ac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80251b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80251b4:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 80251b8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80251ba:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80251be:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80251c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80251c6:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 80251ca:	4770      	bx	lr

080251cc <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80251cc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80251d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80251d2:	f7e9 f881 	bl	800e2d8 <HAL_PCD_SetAddress>
  switch (hal_status)
 80251d6:	2803      	cmp	r0, #3
 80251d8:	d802      	bhi.n	80251e0 <USBD_LL_SetUSBAddress+0x14>
 80251da:	4b02      	ldr	r3, [pc, #8]	; (80251e4 <USBD_LL_SetUSBAddress+0x18>)
 80251dc:	5c18      	ldrb	r0, [r3, r0]
}
 80251de:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80251e0:	2003      	movs	r0, #3
}
 80251e2:	bd08      	pop	{r3, pc}
 80251e4:	080474c4 	.word	0x080474c4

080251e8 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80251e8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80251ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80251ee:	f7e9 f92f 	bl	800e450 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80251f2:	2803      	cmp	r0, #3
 80251f4:	d802      	bhi.n	80251fc <USBD_LL_Transmit+0x14>
 80251f6:	4b02      	ldr	r3, [pc, #8]	; (8025200 <USBD_LL_Transmit+0x18>)
 80251f8:	5c18      	ldrb	r0, [r3, r0]
}
 80251fa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80251fc:	2003      	movs	r0, #3
}
 80251fe:	bd08      	pop	{r3, pc}
 8025200:	080474c4 	.word	0x080474c4

08025204 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8025204:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025208:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802520a:	f7e9 f8ef 	bl	800e3ec <HAL_PCD_EP_Receive>
  switch (hal_status)
 802520e:	2803      	cmp	r0, #3
 8025210:	d802      	bhi.n	8025218 <USBD_LL_PrepareReceive+0x14>
 8025212:	4b02      	ldr	r3, [pc, #8]	; (802521c <USBD_LL_PrepareReceive+0x18>)
 8025214:	5c18      	ldrb	r0, [r3, r0]
}
 8025216:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8025218:	2003      	movs	r0, #3
}
 802521a:	bd08      	pop	{r3, pc}
 802521c:	080474c4 	.word	0x080474c4

08025220 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8025220:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8025224:	f7e9 b90a 	b.w	800e43c <HAL_PCD_EP_GetRxCount>

08025228 <HAL_PCDEx_LPM_Callback>:
{
 8025228:	b510      	push	{r4, lr}
 802522a:	4604      	mov	r4, r0
  switch (msg)
 802522c:	b1a1      	cbz	r1, 8025258 <HAL_PCDEx_LPM_Callback+0x30>
 802522e:	2901      	cmp	r1, #1
 8025230:	d111      	bne.n	8025256 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8025232:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8025234:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8025238:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 802523c:	f043 0301 	orr.w	r3, r3, #1
 8025240:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8025244:	f7f0 fe2a 	bl	8015e9c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8025248:	6a23      	ldr	r3, [r4, #32]
 802524a:	b123      	cbz	r3, 8025256 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802524c:	4a0e      	ldr	r2, [pc, #56]	; (8025288 <HAL_PCDEx_LPM_Callback+0x60>)
 802524e:	6913      	ldr	r3, [r2, #16]
 8025250:	f043 0306 	orr.w	r3, r3, #6
 8025254:	6113      	str	r3, [r2, #16]
}
 8025256:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8025258:	6a03      	ldr	r3, [r0, #32]
 802525a:	b963      	cbnz	r3, 8025276 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802525c:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 802525e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8025262:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8025266:	f023 0301 	bic.w	r3, r3, #1
}
 802526a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802526e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8025272:	f7f0 be1d 	b.w	8015eb0 <USBD_LL_Resume>
  SystemClock_Config();
 8025276:	f7df fa6f 	bl	8004758 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802527a:	4a03      	ldr	r2, [pc, #12]	; (8025288 <HAL_PCDEx_LPM_Callback+0x60>)
 802527c:	6913      	ldr	r3, [r2, #16]
 802527e:	f023 0306 	bic.w	r3, r3, #6
 8025282:	6113      	str	r3, [r2, #16]
 8025284:	e7ea      	b.n	802525c <HAL_PCDEx_LPM_Callback+0x34>
 8025286:	bf00      	nop
 8025288:	e000ed00 	.word	0xe000ed00

0802528c <atoi>:
 802528c:	220a      	movs	r2, #10
 802528e:	2100      	movs	r1, #0
 8025290:	f002 ba9a 	b.w	80277c8 <strtol>

08025294 <ctime>:
 8025294:	b508      	push	{r3, lr}
 8025296:	f000 f91f 	bl	80254d8 <localtime>
 802529a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802529e:	f002 be2d 	b.w	8027efc <asctime>
 80252a2:	Address 0x00000000080252a2 is out of bounds.


080252a4 <std>:
 80252a4:	2300      	movs	r3, #0
 80252a6:	b510      	push	{r4, lr}
 80252a8:	4604      	mov	r4, r0
 80252aa:	e9c0 3300 	strd	r3, r3, [r0]
 80252ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80252b2:	6083      	str	r3, [r0, #8]
 80252b4:	8181      	strh	r1, [r0, #12]
 80252b6:	6643      	str	r3, [r0, #100]	; 0x64
 80252b8:	81c2      	strh	r2, [r0, #14]
 80252ba:	6183      	str	r3, [r0, #24]
 80252bc:	4619      	mov	r1, r3
 80252be:	2208      	movs	r2, #8
 80252c0:	305c      	adds	r0, #92	; 0x5c
 80252c2:	f000 fa69 	bl	8025798 <memset>
 80252c6:	4b05      	ldr	r3, [pc, #20]	; (80252dc <std+0x38>)
 80252c8:	6263      	str	r3, [r4, #36]	; 0x24
 80252ca:	4b05      	ldr	r3, [pc, #20]	; (80252e0 <std+0x3c>)
 80252cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80252ce:	4b05      	ldr	r3, [pc, #20]	; (80252e4 <std+0x40>)
 80252d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80252d2:	4b05      	ldr	r3, [pc, #20]	; (80252e8 <std+0x44>)
 80252d4:	6224      	str	r4, [r4, #32]
 80252d6:	6323      	str	r3, [r4, #48]	; 0x30
 80252d8:	bd10      	pop	{r4, pc}
 80252da:	bf00      	nop
 80252dc:	08026b41 	.word	0x08026b41
 80252e0:	08026b67 	.word	0x08026b67
 80252e4:	08026b9f 	.word	0x08026b9f
 80252e8:	08026bc3 	.word	0x08026bc3

080252ec <_cleanup_r>:
 80252ec:	4901      	ldr	r1, [pc, #4]	; (80252f4 <_cleanup_r+0x8>)
 80252ee:	f000 b8af 	b.w	8025450 <_fwalk_reent>
 80252f2:	bf00      	nop
 80252f4:	08028d1d 	.word	0x08028d1d

080252f8 <__sfmoreglue>:
 80252f8:	b570      	push	{r4, r5, r6, lr}
 80252fa:	2268      	movs	r2, #104	; 0x68
 80252fc:	1e4d      	subs	r5, r1, #1
 80252fe:	4355      	muls	r5, r2
 8025300:	460e      	mov	r6, r1
 8025302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025306:	f000 fd2d 	bl	8025d64 <_malloc_r>
 802530a:	4604      	mov	r4, r0
 802530c:	b140      	cbz	r0, 8025320 <__sfmoreglue+0x28>
 802530e:	2100      	movs	r1, #0
 8025310:	e9c0 1600 	strd	r1, r6, [r0]
 8025314:	300c      	adds	r0, #12
 8025316:	60a0      	str	r0, [r4, #8]
 8025318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802531c:	f000 fa3c 	bl	8025798 <memset>
 8025320:	4620      	mov	r0, r4
 8025322:	bd70      	pop	{r4, r5, r6, pc}

08025324 <__sfp_lock_acquire>:
 8025324:	4801      	ldr	r0, [pc, #4]	; (802532c <__sfp_lock_acquire+0x8>)
 8025326:	f000 b9eb 	b.w	8025700 <__retarget_lock_acquire_recursive>
 802532a:	bf00      	nop
 802532c:	2003012e 	.word	0x2003012e

08025330 <__sfp_lock_release>:
 8025330:	4801      	ldr	r0, [pc, #4]	; (8025338 <__sfp_lock_release+0x8>)
 8025332:	f000 b9e7 	b.w	8025704 <__retarget_lock_release_recursive>
 8025336:	bf00      	nop
 8025338:	2003012e 	.word	0x2003012e

0802533c <__sinit_lock_acquire>:
 802533c:	4801      	ldr	r0, [pc, #4]	; (8025344 <__sinit_lock_acquire+0x8>)
 802533e:	f000 b9df 	b.w	8025700 <__retarget_lock_acquire_recursive>
 8025342:	bf00      	nop
 8025344:	2003012f 	.word	0x2003012f

08025348 <__sinit_lock_release>:
 8025348:	4801      	ldr	r0, [pc, #4]	; (8025350 <__sinit_lock_release+0x8>)
 802534a:	f000 b9db 	b.w	8025704 <__retarget_lock_release_recursive>
 802534e:	bf00      	nop
 8025350:	2003012f 	.word	0x2003012f

08025354 <__sinit>:
 8025354:	b510      	push	{r4, lr}
 8025356:	4604      	mov	r4, r0
 8025358:	f7ff fff0 	bl	802533c <__sinit_lock_acquire>
 802535c:	69a3      	ldr	r3, [r4, #24]
 802535e:	b11b      	cbz	r3, 8025368 <__sinit+0x14>
 8025360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025364:	f7ff bff0 	b.w	8025348 <__sinit_lock_release>
 8025368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802536c:	6523      	str	r3, [r4, #80]	; 0x50
 802536e:	4b13      	ldr	r3, [pc, #76]	; (80253bc <__sinit+0x68>)
 8025370:	4a13      	ldr	r2, [pc, #76]	; (80253c0 <__sinit+0x6c>)
 8025372:	681b      	ldr	r3, [r3, #0]
 8025374:	62a2      	str	r2, [r4, #40]	; 0x28
 8025376:	42a3      	cmp	r3, r4
 8025378:	bf04      	itt	eq
 802537a:	2301      	moveq	r3, #1
 802537c:	61a3      	streq	r3, [r4, #24]
 802537e:	4620      	mov	r0, r4
 8025380:	f000 f820 	bl	80253c4 <__sfp>
 8025384:	6060      	str	r0, [r4, #4]
 8025386:	4620      	mov	r0, r4
 8025388:	f000 f81c 	bl	80253c4 <__sfp>
 802538c:	60a0      	str	r0, [r4, #8]
 802538e:	4620      	mov	r0, r4
 8025390:	f000 f818 	bl	80253c4 <__sfp>
 8025394:	2200      	movs	r2, #0
 8025396:	60e0      	str	r0, [r4, #12]
 8025398:	2104      	movs	r1, #4
 802539a:	6860      	ldr	r0, [r4, #4]
 802539c:	f7ff ff82 	bl	80252a4 <std>
 80253a0:	68a0      	ldr	r0, [r4, #8]
 80253a2:	2201      	movs	r2, #1
 80253a4:	2109      	movs	r1, #9
 80253a6:	f7ff ff7d 	bl	80252a4 <std>
 80253aa:	68e0      	ldr	r0, [r4, #12]
 80253ac:	2202      	movs	r2, #2
 80253ae:	2112      	movs	r1, #18
 80253b0:	f7ff ff78 	bl	80252a4 <std>
 80253b4:	2301      	movs	r3, #1
 80253b6:	61a3      	str	r3, [r4, #24]
 80253b8:	e7d2      	b.n	8025360 <__sinit+0xc>
 80253ba:	bf00      	nop
 80253bc:	0804762c 	.word	0x0804762c
 80253c0:	080252ed 	.word	0x080252ed

080253c4 <__sfp>:
 80253c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80253c6:	4607      	mov	r7, r0
 80253c8:	f7ff ffac 	bl	8025324 <__sfp_lock_acquire>
 80253cc:	4b1e      	ldr	r3, [pc, #120]	; (8025448 <__sfp+0x84>)
 80253ce:	681e      	ldr	r6, [r3, #0]
 80253d0:	69b3      	ldr	r3, [r6, #24]
 80253d2:	b913      	cbnz	r3, 80253da <__sfp+0x16>
 80253d4:	4630      	mov	r0, r6
 80253d6:	f7ff ffbd 	bl	8025354 <__sinit>
 80253da:	3648      	adds	r6, #72	; 0x48
 80253dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80253e0:	3b01      	subs	r3, #1
 80253e2:	d503      	bpl.n	80253ec <__sfp+0x28>
 80253e4:	6833      	ldr	r3, [r6, #0]
 80253e6:	b30b      	cbz	r3, 802542c <__sfp+0x68>
 80253e8:	6836      	ldr	r6, [r6, #0]
 80253ea:	e7f7      	b.n	80253dc <__sfp+0x18>
 80253ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80253f0:	b9d5      	cbnz	r5, 8025428 <__sfp+0x64>
 80253f2:	4b16      	ldr	r3, [pc, #88]	; (802544c <__sfp+0x88>)
 80253f4:	60e3      	str	r3, [r4, #12]
 80253f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80253fa:	6665      	str	r5, [r4, #100]	; 0x64
 80253fc:	f000 f97e 	bl	80256fc <__retarget_lock_init_recursive>
 8025400:	f7ff ff96 	bl	8025330 <__sfp_lock_release>
 8025404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802540c:	6025      	str	r5, [r4, #0]
 802540e:	61a5      	str	r5, [r4, #24]
 8025410:	2208      	movs	r2, #8
 8025412:	4629      	mov	r1, r5
 8025414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025418:	f000 f9be 	bl	8025798 <memset>
 802541c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025424:	4620      	mov	r0, r4
 8025426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025428:	3468      	adds	r4, #104	; 0x68
 802542a:	e7d9      	b.n	80253e0 <__sfp+0x1c>
 802542c:	2104      	movs	r1, #4
 802542e:	4638      	mov	r0, r7
 8025430:	f7ff ff62 	bl	80252f8 <__sfmoreglue>
 8025434:	4604      	mov	r4, r0
 8025436:	6030      	str	r0, [r6, #0]
 8025438:	2800      	cmp	r0, #0
 802543a:	d1d5      	bne.n	80253e8 <__sfp+0x24>
 802543c:	f7ff ff78 	bl	8025330 <__sfp_lock_release>
 8025440:	230c      	movs	r3, #12
 8025442:	603b      	str	r3, [r7, #0]
 8025444:	e7ee      	b.n	8025424 <__sfp+0x60>
 8025446:	bf00      	nop
 8025448:	0804762c 	.word	0x0804762c
 802544c:	ffff0001 	.word	0xffff0001

08025450 <_fwalk_reent>:
 8025450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025454:	4606      	mov	r6, r0
 8025456:	4688      	mov	r8, r1
 8025458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802545c:	2700      	movs	r7, #0
 802545e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025462:	f1b9 0901 	subs.w	r9, r9, #1
 8025466:	d505      	bpl.n	8025474 <_fwalk_reent+0x24>
 8025468:	6824      	ldr	r4, [r4, #0]
 802546a:	2c00      	cmp	r4, #0
 802546c:	d1f7      	bne.n	802545e <_fwalk_reent+0xe>
 802546e:	4638      	mov	r0, r7
 8025470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025474:	89ab      	ldrh	r3, [r5, #12]
 8025476:	2b01      	cmp	r3, #1
 8025478:	d907      	bls.n	802548a <_fwalk_reent+0x3a>
 802547a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802547e:	3301      	adds	r3, #1
 8025480:	d003      	beq.n	802548a <_fwalk_reent+0x3a>
 8025482:	4629      	mov	r1, r5
 8025484:	4630      	mov	r0, r6
 8025486:	47c0      	blx	r8
 8025488:	4307      	orrs	r7, r0
 802548a:	3568      	adds	r5, #104	; 0x68
 802548c:	e7e9      	b.n	8025462 <_fwalk_reent+0x12>
 802548e:	Address 0x000000000802548e is out of bounds.


08025490 <__libc_init_array>:
 8025490:	b570      	push	{r4, r5, r6, lr}
 8025492:	4d0d      	ldr	r5, [pc, #52]	; (80254c8 <__libc_init_array+0x38>)
 8025494:	4c0d      	ldr	r4, [pc, #52]	; (80254cc <__libc_init_array+0x3c>)
 8025496:	1b64      	subs	r4, r4, r5
 8025498:	10a4      	asrs	r4, r4, #2
 802549a:	2600      	movs	r6, #0
 802549c:	42a6      	cmp	r6, r4
 802549e:	d109      	bne.n	80254b4 <__libc_init_array+0x24>
 80254a0:	4d0b      	ldr	r5, [pc, #44]	; (80254d0 <__libc_init_array+0x40>)
 80254a2:	4c0c      	ldr	r4, [pc, #48]	; (80254d4 <__libc_init_array+0x44>)
 80254a4:	f005 f944 	bl	802a730 <_init>
 80254a8:	1b64      	subs	r4, r4, r5
 80254aa:	10a4      	asrs	r4, r4, #2
 80254ac:	2600      	movs	r6, #0
 80254ae:	42a6      	cmp	r6, r4
 80254b0:	d105      	bne.n	80254be <__libc_init_array+0x2e>
 80254b2:	bd70      	pop	{r4, r5, r6, pc}
 80254b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80254b8:	4798      	blx	r3
 80254ba:	3601      	adds	r6, #1
 80254bc:	e7ee      	b.n	802549c <__libc_init_array+0xc>
 80254be:	f855 3b04 	ldr.w	r3, [r5], #4
 80254c2:	4798      	blx	r3
 80254c4:	3601      	adds	r6, #1
 80254c6:	e7f2      	b.n	80254ae <__libc_init_array+0x1e>
 80254c8:	08047db4 	.word	0x08047db4
 80254cc:	08047db4 	.word	0x08047db4
 80254d0:	08047db4 	.word	0x08047db4
 80254d4:	08047db8 	.word	0x08047db8

080254d8 <localtime>:
 80254d8:	b538      	push	{r3, r4, r5, lr}
 80254da:	4b0b      	ldr	r3, [pc, #44]	; (8025508 <localtime+0x30>)
 80254dc:	681d      	ldr	r5, [r3, #0]
 80254de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80254e0:	4604      	mov	r4, r0
 80254e2:	b953      	cbnz	r3, 80254fa <localtime+0x22>
 80254e4:	2024      	movs	r0, #36	; 0x24
 80254e6:	f000 f90f 	bl	8025708 <malloc>
 80254ea:	4602      	mov	r2, r0
 80254ec:	63e8      	str	r0, [r5, #60]	; 0x3c
 80254ee:	b920      	cbnz	r0, 80254fa <localtime+0x22>
 80254f0:	4b06      	ldr	r3, [pc, #24]	; (802550c <localtime+0x34>)
 80254f2:	4807      	ldr	r0, [pc, #28]	; (8025510 <localtime+0x38>)
 80254f4:	2132      	movs	r1, #50	; 0x32
 80254f6:	f002 fd49 	bl	8027f8c <__assert_func>
 80254fa:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80254fc:	4620      	mov	r0, r4
 80254fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025502:	f000 b807 	b.w	8025514 <localtime_r>
 8025506:	bf00      	nop
 8025508:	200004c4 	.word	0x200004c4
 802550c:	08047630 	.word	0x08047630
 8025510:	08047647 	.word	0x08047647

08025514 <localtime_r>:
 8025514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025518:	4680      	mov	r8, r0
 802551a:	9101      	str	r1, [sp, #4]
 802551c:	f003 fc90 	bl	8028e40 <__gettzinfo>
 8025520:	9901      	ldr	r1, [sp, #4]
 8025522:	4605      	mov	r5, r0
 8025524:	4640      	mov	r0, r8
 8025526:	f003 fc8f 	bl	8028e48 <gmtime_r>
 802552a:	6943      	ldr	r3, [r0, #20]
 802552c:	0799      	lsls	r1, r3, #30
 802552e:	4604      	mov	r4, r0
 8025530:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8025534:	d105      	bne.n	8025542 <localtime_r+0x2e>
 8025536:	2264      	movs	r2, #100	; 0x64
 8025538:	fb97 f3f2 	sdiv	r3, r7, r2
 802553c:	fb02 7313 	mls	r3, r2, r3, r7
 8025540:	bb73      	cbnz	r3, 80255a0 <localtime_r+0x8c>
 8025542:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8025546:	fb97 f6f3 	sdiv	r6, r7, r3
 802554a:	fb03 7616 	mls	r6, r3, r6, r7
 802554e:	fab6 f386 	clz	r3, r6
 8025552:	095b      	lsrs	r3, r3, #5
 8025554:	4e67      	ldr	r6, [pc, #412]	; (80256f4 <localtime_r+0x1e0>)
 8025556:	2230      	movs	r2, #48	; 0x30
 8025558:	fb02 6603 	mla	r6, r2, r3, r6
 802555c:	f002 fa66 	bl	8027a2c <__tz_lock>
 8025560:	f002 fa70 	bl	8027a44 <_tzset_unlocked>
 8025564:	4b64      	ldr	r3, [pc, #400]	; (80256f8 <localtime_r+0x1e4>)
 8025566:	681b      	ldr	r3, [r3, #0]
 8025568:	b34b      	cbz	r3, 80255be <localtime_r+0xaa>
 802556a:	686b      	ldr	r3, [r5, #4]
 802556c:	42bb      	cmp	r3, r7
 802556e:	d119      	bne.n	80255a4 <localtime_r+0x90>
 8025570:	682f      	ldr	r7, [r5, #0]
 8025572:	e9d8 2300 	ldrd	r2, r3, [r8]
 8025576:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802557a:	b9df      	cbnz	r7, 80255b4 <localtime_r+0xa0>
 802557c:	4282      	cmp	r2, r0
 802557e:	eb73 0101 	sbcs.w	r1, r3, r1
 8025582:	da23      	bge.n	80255cc <localtime_r+0xb8>
 8025584:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8025588:	4282      	cmp	r2, r0
 802558a:	eb73 0701 	sbcs.w	r7, r3, r1
 802558e:	bfb4      	ite	lt
 8025590:	2701      	movlt	r7, #1
 8025592:	2700      	movge	r7, #0
 8025594:	4282      	cmp	r2, r0
 8025596:	418b      	sbcs	r3, r1
 8025598:	6227      	str	r7, [r4, #32]
 802559a:	db19      	blt.n	80255d0 <localtime_r+0xbc>
 802559c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802559e:	e018      	b.n	80255d2 <localtime_r+0xbe>
 80255a0:	2301      	movs	r3, #1
 80255a2:	e7d7      	b.n	8025554 <localtime_r+0x40>
 80255a4:	4638      	mov	r0, r7
 80255a6:	f002 f997 	bl	80278d8 <__tzcalc_limits>
 80255aa:	2800      	cmp	r0, #0
 80255ac:	d1e0      	bne.n	8025570 <localtime_r+0x5c>
 80255ae:	f04f 33ff 	mov.w	r3, #4294967295
 80255b2:	e004      	b.n	80255be <localtime_r+0xaa>
 80255b4:	4282      	cmp	r2, r0
 80255b6:	eb73 0101 	sbcs.w	r1, r3, r1
 80255ba:	da02      	bge.n	80255c2 <localtime_r+0xae>
 80255bc:	2300      	movs	r3, #0
 80255be:	6223      	str	r3, [r4, #32]
 80255c0:	e7ec      	b.n	802559c <localtime_r+0x88>
 80255c2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80255c6:	4282      	cmp	r2, r0
 80255c8:	418b      	sbcs	r3, r1
 80255ca:	daf7      	bge.n	80255bc <localtime_r+0xa8>
 80255cc:	2301      	movs	r3, #1
 80255ce:	6223      	str	r3, [r4, #32]
 80255d0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80255d2:	6861      	ldr	r1, [r4, #4]
 80255d4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80255d8:	203c      	movs	r0, #60	; 0x3c
 80255da:	fb93 f5f2 	sdiv	r5, r3, r2
 80255de:	fb02 3315 	mls	r3, r2, r5, r3
 80255e2:	fb93 f2f0 	sdiv	r2, r3, r0
 80255e6:	fb00 3012 	mls	r0, r0, r2, r3
 80255ea:	6823      	ldr	r3, [r4, #0]
 80255ec:	1a89      	subs	r1, r1, r2
 80255ee:	68a2      	ldr	r2, [r4, #8]
 80255f0:	6061      	str	r1, [r4, #4]
 80255f2:	1a1b      	subs	r3, r3, r0
 80255f4:	1b52      	subs	r2, r2, r5
 80255f6:	2b3b      	cmp	r3, #59	; 0x3b
 80255f8:	6023      	str	r3, [r4, #0]
 80255fa:	60a2      	str	r2, [r4, #8]
 80255fc:	dd35      	ble.n	802566a <localtime_r+0x156>
 80255fe:	3101      	adds	r1, #1
 8025600:	6061      	str	r1, [r4, #4]
 8025602:	3b3c      	subs	r3, #60	; 0x3c
 8025604:	6023      	str	r3, [r4, #0]
 8025606:	6863      	ldr	r3, [r4, #4]
 8025608:	2b3b      	cmp	r3, #59	; 0x3b
 802560a:	dd34      	ble.n	8025676 <localtime_r+0x162>
 802560c:	3201      	adds	r2, #1
 802560e:	60a2      	str	r2, [r4, #8]
 8025610:	3b3c      	subs	r3, #60	; 0x3c
 8025612:	6063      	str	r3, [r4, #4]
 8025614:	68a3      	ldr	r3, [r4, #8]
 8025616:	2b17      	cmp	r3, #23
 8025618:	dd33      	ble.n	8025682 <localtime_r+0x16e>
 802561a:	69e2      	ldr	r2, [r4, #28]
 802561c:	3201      	adds	r2, #1
 802561e:	61e2      	str	r2, [r4, #28]
 8025620:	69a2      	ldr	r2, [r4, #24]
 8025622:	3201      	adds	r2, #1
 8025624:	2a06      	cmp	r2, #6
 8025626:	bfc8      	it	gt
 8025628:	2200      	movgt	r2, #0
 802562a:	61a2      	str	r2, [r4, #24]
 802562c:	68e2      	ldr	r2, [r4, #12]
 802562e:	3b18      	subs	r3, #24
 8025630:	3201      	adds	r2, #1
 8025632:	60a3      	str	r3, [r4, #8]
 8025634:	6923      	ldr	r3, [r4, #16]
 8025636:	60e2      	str	r2, [r4, #12]
 8025638:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802563c:	428a      	cmp	r2, r1
 802563e:	dd0e      	ble.n	802565e <localtime_r+0x14a>
 8025640:	2b0b      	cmp	r3, #11
 8025642:	eba2 0201 	sub.w	r2, r2, r1
 8025646:	60e2      	str	r2, [r4, #12]
 8025648:	f103 0201 	add.w	r2, r3, #1
 802564c:	bf09      	itett	eq
 802564e:	6963      	ldreq	r3, [r4, #20]
 8025650:	6122      	strne	r2, [r4, #16]
 8025652:	2200      	moveq	r2, #0
 8025654:	3301      	addeq	r3, #1
 8025656:	bf02      	ittt	eq
 8025658:	6122      	streq	r2, [r4, #16]
 802565a:	6163      	streq	r3, [r4, #20]
 802565c:	61e2      	streq	r2, [r4, #28]
 802565e:	f002 f9eb 	bl	8027a38 <__tz_unlock>
 8025662:	4620      	mov	r0, r4
 8025664:	b002      	add	sp, #8
 8025666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802566a:	2b00      	cmp	r3, #0
 802566c:	dacb      	bge.n	8025606 <localtime_r+0xf2>
 802566e:	3901      	subs	r1, #1
 8025670:	6061      	str	r1, [r4, #4]
 8025672:	333c      	adds	r3, #60	; 0x3c
 8025674:	e7c6      	b.n	8025604 <localtime_r+0xf0>
 8025676:	2b00      	cmp	r3, #0
 8025678:	dacc      	bge.n	8025614 <localtime_r+0x100>
 802567a:	3a01      	subs	r2, #1
 802567c:	60a2      	str	r2, [r4, #8]
 802567e:	333c      	adds	r3, #60	; 0x3c
 8025680:	e7c7      	b.n	8025612 <localtime_r+0xfe>
 8025682:	2b00      	cmp	r3, #0
 8025684:	daeb      	bge.n	802565e <localtime_r+0x14a>
 8025686:	69e2      	ldr	r2, [r4, #28]
 8025688:	3a01      	subs	r2, #1
 802568a:	61e2      	str	r2, [r4, #28]
 802568c:	69a2      	ldr	r2, [r4, #24]
 802568e:	3a01      	subs	r2, #1
 8025690:	bf48      	it	mi
 8025692:	2206      	movmi	r2, #6
 8025694:	61a2      	str	r2, [r4, #24]
 8025696:	68e2      	ldr	r2, [r4, #12]
 8025698:	3318      	adds	r3, #24
 802569a:	3a01      	subs	r2, #1
 802569c:	60e2      	str	r2, [r4, #12]
 802569e:	60a3      	str	r3, [r4, #8]
 80256a0:	2a00      	cmp	r2, #0
 80256a2:	d1dc      	bne.n	802565e <localtime_r+0x14a>
 80256a4:	6923      	ldr	r3, [r4, #16]
 80256a6:	3b01      	subs	r3, #1
 80256a8:	d405      	bmi.n	80256b6 <localtime_r+0x1a2>
 80256aa:	6123      	str	r3, [r4, #16]
 80256ac:	6923      	ldr	r3, [r4, #16]
 80256ae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80256b2:	60e3      	str	r3, [r4, #12]
 80256b4:	e7d3      	b.n	802565e <localtime_r+0x14a>
 80256b6:	230b      	movs	r3, #11
 80256b8:	6123      	str	r3, [r4, #16]
 80256ba:	6963      	ldr	r3, [r4, #20]
 80256bc:	1e5a      	subs	r2, r3, #1
 80256be:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80256c2:	6162      	str	r2, [r4, #20]
 80256c4:	079a      	lsls	r2, r3, #30
 80256c6:	d105      	bne.n	80256d4 <localtime_r+0x1c0>
 80256c8:	2164      	movs	r1, #100	; 0x64
 80256ca:	fb93 f2f1 	sdiv	r2, r3, r1
 80256ce:	fb01 3212 	mls	r2, r1, r2, r3
 80256d2:	b962      	cbnz	r2, 80256ee <localtime_r+0x1da>
 80256d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80256d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80256dc:	fb02 3311 	mls	r3, r2, r1, r3
 80256e0:	fab3 f383 	clz	r3, r3
 80256e4:	095b      	lsrs	r3, r3, #5
 80256e6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80256ea:	61e3      	str	r3, [r4, #28]
 80256ec:	e7de      	b.n	80256ac <localtime_r+0x198>
 80256ee:	2301      	movs	r3, #1
 80256f0:	e7f9      	b.n	80256e6 <localtime_r+0x1d2>
 80256f2:	bf00      	nop
 80256f4:	08047704 	.word	0x08047704
 80256f8:	2003015c 	.word	0x2003015c

080256fc <__retarget_lock_init_recursive>:
 80256fc:	4770      	bx	lr

080256fe <__retarget_lock_acquire>:
 80256fe:	4770      	bx	lr

08025700 <__retarget_lock_acquire_recursive>:
 8025700:	4770      	bx	lr

08025702 <__retarget_lock_release>:
 8025702:	4770      	bx	lr

08025704 <__retarget_lock_release_recursive>:
 8025704:	4770      	bx	lr
 8025706:	Address 0x0000000008025706 is out of bounds.


08025708 <malloc>:
 8025708:	4b02      	ldr	r3, [pc, #8]	; (8025714 <malloc+0xc>)
 802570a:	4601      	mov	r1, r0
 802570c:	6818      	ldr	r0, [r3, #0]
 802570e:	f000 bb29 	b.w	8025d64 <_malloc_r>
 8025712:	bf00      	nop
 8025714:	200004c4 	.word	0x200004c4

08025718 <free>:
 8025718:	4b02      	ldr	r3, [pc, #8]	; (8025724 <free+0xc>)
 802571a:	4601      	mov	r1, r0
 802571c:	6818      	ldr	r0, [r3, #0]
 802571e:	f000 bab5 	b.w	8025c8c <_free_r>
 8025722:	bf00      	nop
 8025724:	200004c4 	.word	0x200004c4

08025728 <memcmp>:
 8025728:	b510      	push	{r4, lr}
 802572a:	3901      	subs	r1, #1
 802572c:	4402      	add	r2, r0
 802572e:	4290      	cmp	r0, r2
 8025730:	d101      	bne.n	8025736 <memcmp+0xe>
 8025732:	2000      	movs	r0, #0
 8025734:	e005      	b.n	8025742 <memcmp+0x1a>
 8025736:	7803      	ldrb	r3, [r0, #0]
 8025738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802573c:	42a3      	cmp	r3, r4
 802573e:	d001      	beq.n	8025744 <memcmp+0x1c>
 8025740:	1b18      	subs	r0, r3, r4
 8025742:	bd10      	pop	{r4, pc}
 8025744:	3001      	adds	r0, #1
 8025746:	e7f2      	b.n	802572e <memcmp+0x6>

08025748 <memcpy>:
 8025748:	440a      	add	r2, r1
 802574a:	4291      	cmp	r1, r2
 802574c:	f100 33ff 	add.w	r3, r0, #4294967295
 8025750:	d100      	bne.n	8025754 <memcpy+0xc>
 8025752:	4770      	bx	lr
 8025754:	b510      	push	{r4, lr}
 8025756:	f811 4b01 	ldrb.w	r4, [r1], #1
 802575a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802575e:	4291      	cmp	r1, r2
 8025760:	d1f9      	bne.n	8025756 <memcpy+0xe>
 8025762:	bd10      	pop	{r4, pc}

08025764 <memmove>:
 8025764:	4288      	cmp	r0, r1
 8025766:	b510      	push	{r4, lr}
 8025768:	eb01 0402 	add.w	r4, r1, r2
 802576c:	d902      	bls.n	8025774 <memmove+0x10>
 802576e:	4284      	cmp	r4, r0
 8025770:	4623      	mov	r3, r4
 8025772:	d807      	bhi.n	8025784 <memmove+0x20>
 8025774:	1e43      	subs	r3, r0, #1
 8025776:	42a1      	cmp	r1, r4
 8025778:	d008      	beq.n	802578c <memmove+0x28>
 802577a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802577e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025782:	e7f8      	b.n	8025776 <memmove+0x12>
 8025784:	4402      	add	r2, r0
 8025786:	4601      	mov	r1, r0
 8025788:	428a      	cmp	r2, r1
 802578a:	d100      	bne.n	802578e <memmove+0x2a>
 802578c:	bd10      	pop	{r4, pc}
 802578e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025796:	e7f7      	b.n	8025788 <memmove+0x24>

08025798 <memset>:
 8025798:	4402      	add	r2, r0
 802579a:	4603      	mov	r3, r0
 802579c:	4293      	cmp	r3, r2
 802579e:	d100      	bne.n	80257a2 <memset+0xa>
 80257a0:	4770      	bx	lr
 80257a2:	f803 1b01 	strb.w	r1, [r3], #1
 80257a6:	e7f9      	b.n	802579c <memset+0x4>

080257a8 <validate_structure>:
 80257a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80257aa:	6801      	ldr	r1, [r0, #0]
 80257ac:	293b      	cmp	r1, #59	; 0x3b
 80257ae:	4604      	mov	r4, r0
 80257b0:	d911      	bls.n	80257d6 <validate_structure+0x2e>
 80257b2:	223c      	movs	r2, #60	; 0x3c
 80257b4:	4668      	mov	r0, sp
 80257b6:	f002 fc17 	bl	8027fe8 <div>
 80257ba:	9a01      	ldr	r2, [sp, #4]
 80257bc:	6863      	ldr	r3, [r4, #4]
 80257be:	9900      	ldr	r1, [sp, #0]
 80257c0:	2a00      	cmp	r2, #0
 80257c2:	440b      	add	r3, r1
 80257c4:	6063      	str	r3, [r4, #4]
 80257c6:	bfbb      	ittet	lt
 80257c8:	323c      	addlt	r2, #60	; 0x3c
 80257ca:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80257ce:	6022      	strge	r2, [r4, #0]
 80257d0:	6022      	strlt	r2, [r4, #0]
 80257d2:	bfb8      	it	lt
 80257d4:	6063      	strlt	r3, [r4, #4]
 80257d6:	6861      	ldr	r1, [r4, #4]
 80257d8:	293b      	cmp	r1, #59	; 0x3b
 80257da:	d911      	bls.n	8025800 <validate_structure+0x58>
 80257dc:	223c      	movs	r2, #60	; 0x3c
 80257de:	4668      	mov	r0, sp
 80257e0:	f002 fc02 	bl	8027fe8 <div>
 80257e4:	9a01      	ldr	r2, [sp, #4]
 80257e6:	68a3      	ldr	r3, [r4, #8]
 80257e8:	9900      	ldr	r1, [sp, #0]
 80257ea:	2a00      	cmp	r2, #0
 80257ec:	440b      	add	r3, r1
 80257ee:	60a3      	str	r3, [r4, #8]
 80257f0:	bfbb      	ittet	lt
 80257f2:	323c      	addlt	r2, #60	; 0x3c
 80257f4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80257f8:	6062      	strge	r2, [r4, #4]
 80257fa:	6062      	strlt	r2, [r4, #4]
 80257fc:	bfb8      	it	lt
 80257fe:	60a3      	strlt	r3, [r4, #8]
 8025800:	68a1      	ldr	r1, [r4, #8]
 8025802:	2917      	cmp	r1, #23
 8025804:	d911      	bls.n	802582a <validate_structure+0x82>
 8025806:	2218      	movs	r2, #24
 8025808:	4668      	mov	r0, sp
 802580a:	f002 fbed 	bl	8027fe8 <div>
 802580e:	9a01      	ldr	r2, [sp, #4]
 8025810:	68e3      	ldr	r3, [r4, #12]
 8025812:	9900      	ldr	r1, [sp, #0]
 8025814:	2a00      	cmp	r2, #0
 8025816:	440b      	add	r3, r1
 8025818:	60e3      	str	r3, [r4, #12]
 802581a:	bfbb      	ittet	lt
 802581c:	3218      	addlt	r2, #24
 802581e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8025822:	60a2      	strge	r2, [r4, #8]
 8025824:	60a2      	strlt	r2, [r4, #8]
 8025826:	bfb8      	it	lt
 8025828:	60e3      	strlt	r3, [r4, #12]
 802582a:	6921      	ldr	r1, [r4, #16]
 802582c:	290b      	cmp	r1, #11
 802582e:	d911      	bls.n	8025854 <validate_structure+0xac>
 8025830:	220c      	movs	r2, #12
 8025832:	4668      	mov	r0, sp
 8025834:	f002 fbd8 	bl	8027fe8 <div>
 8025838:	9a01      	ldr	r2, [sp, #4]
 802583a:	6963      	ldr	r3, [r4, #20]
 802583c:	9900      	ldr	r1, [sp, #0]
 802583e:	2a00      	cmp	r2, #0
 8025840:	440b      	add	r3, r1
 8025842:	6163      	str	r3, [r4, #20]
 8025844:	bfbb      	ittet	lt
 8025846:	320c      	addlt	r2, #12
 8025848:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802584c:	6122      	strge	r2, [r4, #16]
 802584e:	6122      	strlt	r2, [r4, #16]
 8025850:	bfb8      	it	lt
 8025852:	6163      	strlt	r3, [r4, #20]
 8025854:	6963      	ldr	r3, [r4, #20]
 8025856:	0798      	lsls	r0, r3, #30
 8025858:	d120      	bne.n	802589c <validate_structure+0xf4>
 802585a:	2164      	movs	r1, #100	; 0x64
 802585c:	fb93 f2f1 	sdiv	r2, r3, r1
 8025860:	fb01 3212 	mls	r2, r1, r2, r3
 8025864:	b9e2      	cbnz	r2, 80258a0 <validate_structure+0xf8>
 8025866:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 802586a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802586e:	fb93 f1f2 	sdiv	r1, r3, r2
 8025872:	fb02 3311 	mls	r3, r2, r1, r3
 8025876:	2b00      	cmp	r3, #0
 8025878:	bf14      	ite	ne
 802587a:	231c      	movne	r3, #28
 802587c:	231d      	moveq	r3, #29
 802587e:	68e2      	ldr	r2, [r4, #12]
 8025880:	2a00      	cmp	r2, #0
 8025882:	dc0f      	bgt.n	80258a4 <validate_structure+0xfc>
 8025884:	4f33      	ldr	r7, [pc, #204]	; (8025954 <validate_structure+0x1ac>)
 8025886:	260b      	movs	r6, #11
 8025888:	2064      	movs	r0, #100	; 0x64
 802588a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802588e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8025892:	f1bc 0f00 	cmp.w	ip, #0
 8025896:	dd31      	ble.n	80258fc <validate_structure+0x154>
 8025898:	b003      	add	sp, #12
 802589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802589c:	231c      	movs	r3, #28
 802589e:	e7ee      	b.n	802587e <validate_structure+0xd6>
 80258a0:	231d      	movs	r3, #29
 80258a2:	e7ec      	b.n	802587e <validate_structure+0xd6>
 80258a4:	4e2b      	ldr	r6, [pc, #172]	; (8025954 <validate_structure+0x1ac>)
 80258a6:	2700      	movs	r7, #0
 80258a8:	2064      	movs	r0, #100	; 0x64
 80258aa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80258ae:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80258b2:	2a01      	cmp	r2, #1
 80258b4:	bf14      	ite	ne
 80258b6:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80258ba:	469c      	moveq	ip, r3
 80258bc:	4561      	cmp	r1, ip
 80258be:	ddeb      	ble.n	8025898 <validate_structure+0xf0>
 80258c0:	3201      	adds	r2, #1
 80258c2:	eba1 010c 	sub.w	r1, r1, ip
 80258c6:	2a0c      	cmp	r2, #12
 80258c8:	60e1      	str	r1, [r4, #12]
 80258ca:	6122      	str	r2, [r4, #16]
 80258cc:	d1ef      	bne.n	80258ae <validate_structure+0x106>
 80258ce:	6963      	ldr	r3, [r4, #20]
 80258d0:	1c5a      	adds	r2, r3, #1
 80258d2:	0791      	lsls	r1, r2, #30
 80258d4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80258d8:	d137      	bne.n	802594a <validate_structure+0x1a2>
 80258da:	fb92 f1f0 	sdiv	r1, r2, r0
 80258de:	fb00 2211 	mls	r2, r0, r1, r2
 80258e2:	2a00      	cmp	r2, #0
 80258e4:	d133      	bne.n	802594e <validate_structure+0x1a6>
 80258e6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80258ea:	fb93 f2f5 	sdiv	r2, r3, r5
 80258ee:	fb05 3312 	mls	r3, r5, r2, r3
 80258f2:	2b00      	cmp	r3, #0
 80258f4:	bf14      	ite	ne
 80258f6:	231c      	movne	r3, #28
 80258f8:	231d      	moveq	r3, #29
 80258fa:	e7d8      	b.n	80258ae <validate_structure+0x106>
 80258fc:	6921      	ldr	r1, [r4, #16]
 80258fe:	3901      	subs	r1, #1
 8025900:	6121      	str	r1, [r4, #16]
 8025902:	3101      	adds	r1, #1
 8025904:	d114      	bne.n	8025930 <validate_structure+0x188>
 8025906:	6963      	ldr	r3, [r4, #20]
 8025908:	1e5a      	subs	r2, r3, #1
 802590a:	0791      	lsls	r1, r2, #30
 802590c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8025910:	d117      	bne.n	8025942 <validate_structure+0x19a>
 8025912:	fb92 f1f0 	sdiv	r1, r2, r0
 8025916:	fb00 2211 	mls	r2, r0, r1, r2
 802591a:	b9a2      	cbnz	r2, 8025946 <validate_structure+0x19e>
 802591c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8025920:	fb93 f2f5 	sdiv	r2, r3, r5
 8025924:	fb05 3312 	mls	r3, r5, r2, r3
 8025928:	2b00      	cmp	r3, #0
 802592a:	bf14      	ite	ne
 802592c:	231c      	movne	r3, #28
 802592e:	231d      	moveq	r3, #29
 8025930:	6922      	ldr	r2, [r4, #16]
 8025932:	2a01      	cmp	r2, #1
 8025934:	bf14      	ite	ne
 8025936:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 802593a:	461a      	moveq	r2, r3
 802593c:	4462      	add	r2, ip
 802593e:	60e2      	str	r2, [r4, #12]
 8025940:	e7a5      	b.n	802588e <validate_structure+0xe6>
 8025942:	231c      	movs	r3, #28
 8025944:	e7f4      	b.n	8025930 <validate_structure+0x188>
 8025946:	231d      	movs	r3, #29
 8025948:	e7f2      	b.n	8025930 <validate_structure+0x188>
 802594a:	231c      	movs	r3, #28
 802594c:	e7af      	b.n	80258ae <validate_structure+0x106>
 802594e:	231d      	movs	r3, #29
 8025950:	e7ad      	b.n	80258ae <validate_structure+0x106>
 8025952:	bf00      	nop
 8025954:	080476a4 	.word	0x080476a4

08025958 <mktime>:
 8025958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802595c:	b085      	sub	sp, #20
 802595e:	4607      	mov	r7, r0
 8025960:	f003 fa6e 	bl	8028e40 <__gettzinfo>
 8025964:	4681      	mov	r9, r0
 8025966:	4638      	mov	r0, r7
 8025968:	f7ff ff1e 	bl	80257a8 <validate_structure>
 802596c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8025970:	233c      	movs	r3, #60	; 0x3c
 8025972:	fb03 4400 	mla	r4, r3, r0, r4
 8025976:	68b8      	ldr	r0, [r7, #8]
 8025978:	4abc      	ldr	r2, [pc, #752]	; (8025c6c <mktime+0x314>)
 802597a:	697e      	ldr	r6, [r7, #20]
 802597c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8025980:	fb03 4400 	mla	r4, r3, r0, r4
 8025984:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8025988:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802598c:	3d01      	subs	r5, #1
 802598e:	2b01      	cmp	r3, #1
 8025990:	4415      	add	r5, r2
 8025992:	dd11      	ble.n	80259b8 <mktime+0x60>
 8025994:	07b1      	lsls	r1, r6, #30
 8025996:	d10f      	bne.n	80259b8 <mktime+0x60>
 8025998:	2264      	movs	r2, #100	; 0x64
 802599a:	fb96 f3f2 	sdiv	r3, r6, r2
 802599e:	fb02 6313 	mls	r3, r2, r3, r6
 80259a2:	b943      	cbnz	r3, 80259b6 <mktime+0x5e>
 80259a4:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80259a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80259ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80259b0:	fb02 3311 	mls	r3, r2, r1, r3
 80259b4:	b903      	cbnz	r3, 80259b8 <mktime+0x60>
 80259b6:	3501      	adds	r5, #1
 80259b8:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80259bc:	3310      	adds	r3, #16
 80259be:	f644 6220 	movw	r2, #20000	; 0x4e20
 80259c2:	4293      	cmp	r3, r2
 80259c4:	61fd      	str	r5, [r7, #28]
 80259c6:	f200 815d 	bhi.w	8025c84 <mktime+0x32c>
 80259ca:	2e46      	cmp	r6, #70	; 0x46
 80259cc:	dd71      	ble.n	8025ab2 <mktime+0x15a>
 80259ce:	2346      	movs	r3, #70	; 0x46
 80259d0:	f240 1c6d 	movw	ip, #365	; 0x16d
 80259d4:	2164      	movs	r1, #100	; 0x64
 80259d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80259da:	079a      	lsls	r2, r3, #30
 80259dc:	d163      	bne.n	8025aa6 <mktime+0x14e>
 80259de:	fb93 f2f1 	sdiv	r2, r3, r1
 80259e2:	fb01 3212 	mls	r2, r1, r2, r3
 80259e6:	2a00      	cmp	r2, #0
 80259e8:	d160      	bne.n	8025aac <mktime+0x154>
 80259ea:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80259ee:	fb92 fef0 	sdiv	lr, r2, r0
 80259f2:	fb00 221e 	mls	r2, r0, lr, r2
 80259f6:	2a00      	cmp	r2, #0
 80259f8:	bf14      	ite	ne
 80259fa:	4662      	movne	r2, ip
 80259fc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025a00:	3301      	adds	r3, #1
 8025a02:	429e      	cmp	r6, r3
 8025a04:	4415      	add	r5, r2
 8025a06:	d1e8      	bne.n	80259da <mktime+0x82>
 8025a08:	4b99      	ldr	r3, [pc, #612]	; (8025c70 <mktime+0x318>)
 8025a0a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8025a0e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8025a12:	f002 f80b 	bl	8027a2c <__tz_lock>
 8025a16:	f002 f815 	bl	8027a44 <_tzset_unlocked>
 8025a1a:	4b96      	ldr	r3, [pc, #600]	; (8025c74 <mktime+0x31c>)
 8025a1c:	f8d3 b000 	ldr.w	fp, [r3]
 8025a20:	f1bb 0f00 	cmp.w	fp, #0
 8025a24:	d039      	beq.n	8025a9a <mktime+0x142>
 8025a26:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8025a2a:	6978      	ldr	r0, [r7, #20]
 8025a2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8025a30:	f1bb 0f01 	cmp.w	fp, #1
 8025a34:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025a38:	46da      	mov	sl, fp
 8025a3a:	bfa8      	it	ge
 8025a3c:	f04f 0a01 	movge.w	sl, #1
 8025a40:	4283      	cmp	r3, r0
 8025a42:	d178      	bne.n	8025b36 <mktime+0x1de>
 8025a44:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8025a48:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8025a4c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8025a50:	1a5b      	subs	r3, r3, r1
 8025a52:	9302      	str	r3, [sp, #8]
 8025a54:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8025a58:	9303      	str	r3, [sp, #12]
 8025a5a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8025a5e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8025a62:	9301      	str	r3, [sp, #4]
 8025a64:	ebb3 0c02 	subs.w	ip, r3, r2
 8025a68:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8025a6c:	4564      	cmp	r4, ip
 8025a6e:	eb78 0300 	sbcs.w	r3, r8, r0
 8025a72:	da66      	bge.n	8025b42 <mktime+0x1ea>
 8025a74:	f8d9 3000 	ldr.w	r3, [r9]
 8025a78:	2b00      	cmp	r3, #0
 8025a7a:	d06f      	beq.n	8025b5c <mktime+0x204>
 8025a7c:	9b02      	ldr	r3, [sp, #8]
 8025a7e:	429c      	cmp	r4, r3
 8025a80:	9b03      	ldr	r3, [sp, #12]
 8025a82:	eb78 0303 	sbcs.w	r3, r8, r3
 8025a86:	db03      	blt.n	8025a90 <mktime+0x138>
 8025a88:	4564      	cmp	r4, ip
 8025a8a:	eb78 0300 	sbcs.w	r3, r8, r0
 8025a8e:	db6b      	blt.n	8025b68 <mktime+0x210>
 8025a90:	f1bb 0f00 	cmp.w	fp, #0
 8025a94:	f04f 0b00 	mov.w	fp, #0
 8025a98:	da6b      	bge.n	8025b72 <mktime+0x21a>
 8025a9a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8025a9e:	190c      	adds	r4, r1, r4
 8025aa0:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8025aa4:	e0a9      	b.n	8025bfa <mktime+0x2a2>
 8025aa6:	f240 126d 	movw	r2, #365	; 0x16d
 8025aaa:	e7a9      	b.n	8025a00 <mktime+0xa8>
 8025aac:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025ab0:	e7a6      	b.n	8025a00 <mktime+0xa8>
 8025ab2:	d0a9      	beq.n	8025a08 <mktime+0xb0>
 8025ab4:	2345      	movs	r3, #69	; 0x45
 8025ab6:	f240 1c6d 	movw	ip, #365	; 0x16d
 8025aba:	2164      	movs	r1, #100	; 0x64
 8025abc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8025ac0:	e012      	b.n	8025ae8 <mktime+0x190>
 8025ac2:	bb62      	cbnz	r2, 8025b1e <mktime+0x1c6>
 8025ac4:	fb93 f2f1 	sdiv	r2, r3, r1
 8025ac8:	fb01 3212 	mls	r2, r1, r2, r3
 8025acc:	bb52      	cbnz	r2, 8025b24 <mktime+0x1cc>
 8025ace:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8025ad2:	fb92 fef0 	sdiv	lr, r2, r0
 8025ad6:	fb00 221e 	mls	r2, r0, lr, r2
 8025ada:	2a00      	cmp	r2, #0
 8025adc:	bf14      	ite	ne
 8025ade:	4662      	movne	r2, ip
 8025ae0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025ae4:	1aad      	subs	r5, r5, r2
 8025ae6:	3b01      	subs	r3, #1
 8025ae8:	429e      	cmp	r6, r3
 8025aea:	f003 0203 	and.w	r2, r3, #3
 8025aee:	dbe8      	blt.n	8025ac2 <mktime+0x16a>
 8025af0:	b9da      	cbnz	r2, 8025b2a <mktime+0x1d2>
 8025af2:	2264      	movs	r2, #100	; 0x64
 8025af4:	fb96 f3f2 	sdiv	r3, r6, r2
 8025af8:	fb02 6313 	mls	r3, r2, r3, r6
 8025afc:	b9c3      	cbnz	r3, 8025b30 <mktime+0x1d8>
 8025afe:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8025b02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025b06:	fb93 f1f2 	sdiv	r1, r3, r2
 8025b0a:	fb02 3311 	mls	r3, r2, r1, r3
 8025b0e:	2b00      	cmp	r3, #0
 8025b10:	f240 136d 	movw	r3, #365	; 0x16d
 8025b14:	bf08      	it	eq
 8025b16:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8025b1a:	1aed      	subs	r5, r5, r3
 8025b1c:	e774      	b.n	8025a08 <mktime+0xb0>
 8025b1e:	f240 126d 	movw	r2, #365	; 0x16d
 8025b22:	e7df      	b.n	8025ae4 <mktime+0x18c>
 8025b24:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025b28:	e7dc      	b.n	8025ae4 <mktime+0x18c>
 8025b2a:	f240 136d 	movw	r3, #365	; 0x16d
 8025b2e:	e7f4      	b.n	8025b1a <mktime+0x1c2>
 8025b30:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8025b34:	e7f1      	b.n	8025b1a <mktime+0x1c2>
 8025b36:	f001 fecf 	bl	80278d8 <__tzcalc_limits>
 8025b3a:	2800      	cmp	r0, #0
 8025b3c:	d182      	bne.n	8025a44 <mktime+0xec>
 8025b3e:	46d3      	mov	fp, sl
 8025b40:	e050      	b.n	8025be4 <mktime+0x28c>
 8025b42:	9b01      	ldr	r3, [sp, #4]
 8025b44:	1a5b      	subs	r3, r3, r1
 8025b46:	9301      	str	r3, [sp, #4]
 8025b48:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8025b4c:	eb6e 0e03 	sbc.w	lr, lr, r3
 8025b50:	9b01      	ldr	r3, [sp, #4]
 8025b52:	429c      	cmp	r4, r3
 8025b54:	eb78 030e 	sbcs.w	r3, r8, lr
 8025b58:	dbf1      	blt.n	8025b3e <mktime+0x1e6>
 8025b5a:	e78b      	b.n	8025a74 <mktime+0x11c>
 8025b5c:	9b02      	ldr	r3, [sp, #8]
 8025b5e:	429c      	cmp	r4, r3
 8025b60:	9b03      	ldr	r3, [sp, #12]
 8025b62:	eb78 0303 	sbcs.w	r3, r8, r3
 8025b66:	db8f      	blt.n	8025a88 <mktime+0x130>
 8025b68:	f1bb 0f00 	cmp.w	fp, #0
 8025b6c:	db3e      	blt.n	8025bec <mktime+0x294>
 8025b6e:	f04f 0b01 	mov.w	fp, #1
 8025b72:	ea8a 0a0b 	eor.w	sl, sl, fp
 8025b76:	f1ba 0f01 	cmp.w	sl, #1
 8025b7a:	d133      	bne.n	8025be4 <mktime+0x28c>
 8025b7c:	f1bb 0f00 	cmp.w	fp, #0
 8025b80:	d04e      	beq.n	8025c20 <mktime+0x2c8>
 8025b82:	1a52      	subs	r2, r2, r1
 8025b84:	683b      	ldr	r3, [r7, #0]
 8025b86:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8025b8a:	4413      	add	r3, r2
 8025b8c:	1914      	adds	r4, r2, r4
 8025b8e:	603b      	str	r3, [r7, #0]
 8025b90:	4638      	mov	r0, r7
 8025b92:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8025b96:	f7ff fe07 	bl	80257a8 <validate_structure>
 8025b9a:	68fa      	ldr	r2, [r7, #12]
 8025b9c:	ebb2 020a 	subs.w	r2, r2, sl
 8025ba0:	d020      	beq.n	8025be4 <mktime+0x28c>
 8025ba2:	2a01      	cmp	r2, #1
 8025ba4:	dc3e      	bgt.n	8025c24 <mktime+0x2cc>
 8025ba6:	1c90      	adds	r0, r2, #2
 8025ba8:	bfd8      	it	le
 8025baa:	2201      	movle	r2, #1
 8025bac:	69fb      	ldr	r3, [r7, #28]
 8025bae:	18d3      	adds	r3, r2, r3
 8025bb0:	4415      	add	r5, r2
 8025bb2:	d540      	bpl.n	8025c36 <mktime+0x2de>
 8025bb4:	1e73      	subs	r3, r6, #1
 8025bb6:	0799      	lsls	r1, r3, #30
 8025bb8:	d137      	bne.n	8025c2a <mktime+0x2d2>
 8025bba:	2264      	movs	r2, #100	; 0x64
 8025bbc:	fb93 f1f2 	sdiv	r1, r3, r2
 8025bc0:	fb02 3311 	mls	r3, r2, r1, r3
 8025bc4:	bba3      	cbnz	r3, 8025c30 <mktime+0x2d8>
 8025bc6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8025bca:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8025bce:	fb96 f2f3 	sdiv	r2, r6, r3
 8025bd2:	fb03 6612 	mls	r6, r3, r2, r6
 8025bd6:	2e00      	cmp	r6, #0
 8025bd8:	f240 136d 	movw	r3, #365	; 0x16d
 8025bdc:	bf18      	it	ne
 8025bde:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8025be2:	61fb      	str	r3, [r7, #28]
 8025be4:	f1bb 0f01 	cmp.w	fp, #1
 8025be8:	f47f af57 	bne.w	8025a9a <mktime+0x142>
 8025bec:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8025bf0:	190c      	adds	r4, r1, r4
 8025bf2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8025bf6:	f04f 0b01 	mov.w	fp, #1
 8025bfa:	f001 ff1d 	bl	8027a38 <__tz_unlock>
 8025bfe:	3504      	adds	r5, #4
 8025c00:	2307      	movs	r3, #7
 8025c02:	fb95 f3f3 	sdiv	r3, r5, r3
 8025c06:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8025c0a:	1aed      	subs	r5, r5, r3
 8025c0c:	bf48      	it	mi
 8025c0e:	3507      	addmi	r5, #7
 8025c10:	f8c7 b020 	str.w	fp, [r7, #32]
 8025c14:	61bd      	str	r5, [r7, #24]
 8025c16:	4620      	mov	r0, r4
 8025c18:	4641      	mov	r1, r8
 8025c1a:	b005      	add	sp, #20
 8025c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c20:	1a8a      	subs	r2, r1, r2
 8025c22:	e7af      	b.n	8025b84 <mktime+0x22c>
 8025c24:	f04f 32ff 	mov.w	r2, #4294967295
 8025c28:	e7c0      	b.n	8025bac <mktime+0x254>
 8025c2a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8025c2e:	e7d8      	b.n	8025be2 <mktime+0x28a>
 8025c30:	f240 136d 	movw	r3, #365	; 0x16d
 8025c34:	e7d5      	b.n	8025be2 <mktime+0x28a>
 8025c36:	07b2      	lsls	r2, r6, #30
 8025c38:	d11e      	bne.n	8025c78 <mktime+0x320>
 8025c3a:	2164      	movs	r1, #100	; 0x64
 8025c3c:	fb96 f2f1 	sdiv	r2, r6, r1
 8025c40:	fb01 6212 	mls	r2, r1, r2, r6
 8025c44:	b9da      	cbnz	r2, 8025c7e <mktime+0x326>
 8025c46:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025c4a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8025c4e:	fb96 f1f2 	sdiv	r1, r6, r2
 8025c52:	fb02 6611 	mls	r6, r2, r1, r6
 8025c56:	2e00      	cmp	r6, #0
 8025c58:	f240 126d 	movw	r2, #365	; 0x16d
 8025c5c:	bf08      	it	eq
 8025c5e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025c62:	4293      	cmp	r3, r2
 8025c64:	bfa8      	it	ge
 8025c66:	1a9b      	subge	r3, r3, r2
 8025c68:	e7bb      	b.n	8025be2 <mktime+0x28a>
 8025c6a:	bf00      	nop
 8025c6c:	080476d4 	.word	0x080476d4
 8025c70:	00015180 	.word	0x00015180
 8025c74:	2003015c 	.word	0x2003015c
 8025c78:	f240 126d 	movw	r2, #365	; 0x16d
 8025c7c:	e7f1      	b.n	8025c62 <mktime+0x30a>
 8025c7e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025c82:	e7ee      	b.n	8025c62 <mktime+0x30a>
 8025c84:	f04f 34ff 	mov.w	r4, #4294967295
 8025c88:	46a0      	mov	r8, r4
 8025c8a:	e7c4      	b.n	8025c16 <mktime+0x2be>

08025c8c <_free_r>:
 8025c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025c8e:	2900      	cmp	r1, #0
 8025c90:	d044      	beq.n	8025d1c <_free_r+0x90>
 8025c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025c96:	9001      	str	r0, [sp, #4]
 8025c98:	2b00      	cmp	r3, #0
 8025c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8025c9e:	bfb8      	it	lt
 8025ca0:	18e4      	addlt	r4, r4, r3
 8025ca2:	f003 f9fd 	bl	80290a0 <__malloc_lock>
 8025ca6:	4a1e      	ldr	r2, [pc, #120]	; (8025d20 <_free_r+0x94>)
 8025ca8:	9801      	ldr	r0, [sp, #4]
 8025caa:	6813      	ldr	r3, [r2, #0]
 8025cac:	b933      	cbnz	r3, 8025cbc <_free_r+0x30>
 8025cae:	6063      	str	r3, [r4, #4]
 8025cb0:	6014      	str	r4, [r2, #0]
 8025cb2:	b003      	add	sp, #12
 8025cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025cb8:	f003 b9f8 	b.w	80290ac <__malloc_unlock>
 8025cbc:	42a3      	cmp	r3, r4
 8025cbe:	d908      	bls.n	8025cd2 <_free_r+0x46>
 8025cc0:	6825      	ldr	r5, [r4, #0]
 8025cc2:	1961      	adds	r1, r4, r5
 8025cc4:	428b      	cmp	r3, r1
 8025cc6:	bf01      	itttt	eq
 8025cc8:	6819      	ldreq	r1, [r3, #0]
 8025cca:	685b      	ldreq	r3, [r3, #4]
 8025ccc:	1949      	addeq	r1, r1, r5
 8025cce:	6021      	streq	r1, [r4, #0]
 8025cd0:	e7ed      	b.n	8025cae <_free_r+0x22>
 8025cd2:	461a      	mov	r2, r3
 8025cd4:	685b      	ldr	r3, [r3, #4]
 8025cd6:	b10b      	cbz	r3, 8025cdc <_free_r+0x50>
 8025cd8:	42a3      	cmp	r3, r4
 8025cda:	d9fa      	bls.n	8025cd2 <_free_r+0x46>
 8025cdc:	6811      	ldr	r1, [r2, #0]
 8025cde:	1855      	adds	r5, r2, r1
 8025ce0:	42a5      	cmp	r5, r4
 8025ce2:	d10b      	bne.n	8025cfc <_free_r+0x70>
 8025ce4:	6824      	ldr	r4, [r4, #0]
 8025ce6:	4421      	add	r1, r4
 8025ce8:	1854      	adds	r4, r2, r1
 8025cea:	42a3      	cmp	r3, r4
 8025cec:	6011      	str	r1, [r2, #0]
 8025cee:	d1e0      	bne.n	8025cb2 <_free_r+0x26>
 8025cf0:	681c      	ldr	r4, [r3, #0]
 8025cf2:	685b      	ldr	r3, [r3, #4]
 8025cf4:	6053      	str	r3, [r2, #4]
 8025cf6:	4421      	add	r1, r4
 8025cf8:	6011      	str	r1, [r2, #0]
 8025cfa:	e7da      	b.n	8025cb2 <_free_r+0x26>
 8025cfc:	d902      	bls.n	8025d04 <_free_r+0x78>
 8025cfe:	230c      	movs	r3, #12
 8025d00:	6003      	str	r3, [r0, #0]
 8025d02:	e7d6      	b.n	8025cb2 <_free_r+0x26>
 8025d04:	6825      	ldr	r5, [r4, #0]
 8025d06:	1961      	adds	r1, r4, r5
 8025d08:	428b      	cmp	r3, r1
 8025d0a:	bf04      	itt	eq
 8025d0c:	6819      	ldreq	r1, [r3, #0]
 8025d0e:	685b      	ldreq	r3, [r3, #4]
 8025d10:	6063      	str	r3, [r4, #4]
 8025d12:	bf04      	itt	eq
 8025d14:	1949      	addeq	r1, r1, r5
 8025d16:	6021      	streq	r1, [r4, #0]
 8025d18:	6054      	str	r4, [r2, #4]
 8025d1a:	e7ca      	b.n	8025cb2 <_free_r+0x26>
 8025d1c:	b003      	add	sp, #12
 8025d1e:	bd30      	pop	{r4, r5, pc}
 8025d20:	20030134 	.word	0x20030134

08025d24 <sbrk_aligned>:
 8025d24:	b570      	push	{r4, r5, r6, lr}
 8025d26:	4e0e      	ldr	r6, [pc, #56]	; (8025d60 <sbrk_aligned+0x3c>)
 8025d28:	460c      	mov	r4, r1
 8025d2a:	6831      	ldr	r1, [r6, #0]
 8025d2c:	4605      	mov	r5, r0
 8025d2e:	b911      	cbnz	r1, 8025d36 <sbrk_aligned+0x12>
 8025d30:	f000 fe76 	bl	8026a20 <_sbrk_r>
 8025d34:	6030      	str	r0, [r6, #0]
 8025d36:	4621      	mov	r1, r4
 8025d38:	4628      	mov	r0, r5
 8025d3a:	f000 fe71 	bl	8026a20 <_sbrk_r>
 8025d3e:	1c43      	adds	r3, r0, #1
 8025d40:	d00a      	beq.n	8025d58 <sbrk_aligned+0x34>
 8025d42:	1cc4      	adds	r4, r0, #3
 8025d44:	f024 0403 	bic.w	r4, r4, #3
 8025d48:	42a0      	cmp	r0, r4
 8025d4a:	d007      	beq.n	8025d5c <sbrk_aligned+0x38>
 8025d4c:	1a21      	subs	r1, r4, r0
 8025d4e:	4628      	mov	r0, r5
 8025d50:	f000 fe66 	bl	8026a20 <_sbrk_r>
 8025d54:	3001      	adds	r0, #1
 8025d56:	d101      	bne.n	8025d5c <sbrk_aligned+0x38>
 8025d58:	f04f 34ff 	mov.w	r4, #4294967295
 8025d5c:	4620      	mov	r0, r4
 8025d5e:	bd70      	pop	{r4, r5, r6, pc}
 8025d60:	20030138 	.word	0x20030138

08025d64 <_malloc_r>:
 8025d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d68:	1ccd      	adds	r5, r1, #3
 8025d6a:	f025 0503 	bic.w	r5, r5, #3
 8025d6e:	3508      	adds	r5, #8
 8025d70:	2d0c      	cmp	r5, #12
 8025d72:	bf38      	it	cc
 8025d74:	250c      	movcc	r5, #12
 8025d76:	2d00      	cmp	r5, #0
 8025d78:	4607      	mov	r7, r0
 8025d7a:	db01      	blt.n	8025d80 <_malloc_r+0x1c>
 8025d7c:	42a9      	cmp	r1, r5
 8025d7e:	d905      	bls.n	8025d8c <_malloc_r+0x28>
 8025d80:	230c      	movs	r3, #12
 8025d82:	603b      	str	r3, [r7, #0]
 8025d84:	2600      	movs	r6, #0
 8025d86:	4630      	mov	r0, r6
 8025d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d8c:	4e2e      	ldr	r6, [pc, #184]	; (8025e48 <_malloc_r+0xe4>)
 8025d8e:	f003 f987 	bl	80290a0 <__malloc_lock>
 8025d92:	6833      	ldr	r3, [r6, #0]
 8025d94:	461c      	mov	r4, r3
 8025d96:	bb34      	cbnz	r4, 8025de6 <_malloc_r+0x82>
 8025d98:	4629      	mov	r1, r5
 8025d9a:	4638      	mov	r0, r7
 8025d9c:	f7ff ffc2 	bl	8025d24 <sbrk_aligned>
 8025da0:	1c43      	adds	r3, r0, #1
 8025da2:	4604      	mov	r4, r0
 8025da4:	d14d      	bne.n	8025e42 <_malloc_r+0xde>
 8025da6:	6834      	ldr	r4, [r6, #0]
 8025da8:	4626      	mov	r6, r4
 8025daa:	2e00      	cmp	r6, #0
 8025dac:	d140      	bne.n	8025e30 <_malloc_r+0xcc>
 8025dae:	6823      	ldr	r3, [r4, #0]
 8025db0:	4631      	mov	r1, r6
 8025db2:	4638      	mov	r0, r7
 8025db4:	eb04 0803 	add.w	r8, r4, r3
 8025db8:	f000 fe32 	bl	8026a20 <_sbrk_r>
 8025dbc:	4580      	cmp	r8, r0
 8025dbe:	d13a      	bne.n	8025e36 <_malloc_r+0xd2>
 8025dc0:	6821      	ldr	r1, [r4, #0]
 8025dc2:	3503      	adds	r5, #3
 8025dc4:	1a6d      	subs	r5, r5, r1
 8025dc6:	f025 0503 	bic.w	r5, r5, #3
 8025dca:	3508      	adds	r5, #8
 8025dcc:	2d0c      	cmp	r5, #12
 8025dce:	bf38      	it	cc
 8025dd0:	250c      	movcc	r5, #12
 8025dd2:	4629      	mov	r1, r5
 8025dd4:	4638      	mov	r0, r7
 8025dd6:	f7ff ffa5 	bl	8025d24 <sbrk_aligned>
 8025dda:	3001      	adds	r0, #1
 8025ddc:	d02b      	beq.n	8025e36 <_malloc_r+0xd2>
 8025dde:	6823      	ldr	r3, [r4, #0]
 8025de0:	442b      	add	r3, r5
 8025de2:	6023      	str	r3, [r4, #0]
 8025de4:	e00e      	b.n	8025e04 <_malloc_r+0xa0>
 8025de6:	6822      	ldr	r2, [r4, #0]
 8025de8:	1b52      	subs	r2, r2, r5
 8025dea:	d41e      	bmi.n	8025e2a <_malloc_r+0xc6>
 8025dec:	2a0b      	cmp	r2, #11
 8025dee:	d916      	bls.n	8025e1e <_malloc_r+0xba>
 8025df0:	1961      	adds	r1, r4, r5
 8025df2:	42a3      	cmp	r3, r4
 8025df4:	6025      	str	r5, [r4, #0]
 8025df6:	bf18      	it	ne
 8025df8:	6059      	strne	r1, [r3, #4]
 8025dfa:	6863      	ldr	r3, [r4, #4]
 8025dfc:	bf08      	it	eq
 8025dfe:	6031      	streq	r1, [r6, #0]
 8025e00:	5162      	str	r2, [r4, r5]
 8025e02:	604b      	str	r3, [r1, #4]
 8025e04:	4638      	mov	r0, r7
 8025e06:	f104 060b 	add.w	r6, r4, #11
 8025e0a:	f003 f94f 	bl	80290ac <__malloc_unlock>
 8025e0e:	f026 0607 	bic.w	r6, r6, #7
 8025e12:	1d23      	adds	r3, r4, #4
 8025e14:	1af2      	subs	r2, r6, r3
 8025e16:	d0b6      	beq.n	8025d86 <_malloc_r+0x22>
 8025e18:	1b9b      	subs	r3, r3, r6
 8025e1a:	50a3      	str	r3, [r4, r2]
 8025e1c:	e7b3      	b.n	8025d86 <_malloc_r+0x22>
 8025e1e:	6862      	ldr	r2, [r4, #4]
 8025e20:	42a3      	cmp	r3, r4
 8025e22:	bf0c      	ite	eq
 8025e24:	6032      	streq	r2, [r6, #0]
 8025e26:	605a      	strne	r2, [r3, #4]
 8025e28:	e7ec      	b.n	8025e04 <_malloc_r+0xa0>
 8025e2a:	4623      	mov	r3, r4
 8025e2c:	6864      	ldr	r4, [r4, #4]
 8025e2e:	e7b2      	b.n	8025d96 <_malloc_r+0x32>
 8025e30:	4634      	mov	r4, r6
 8025e32:	6876      	ldr	r6, [r6, #4]
 8025e34:	e7b9      	b.n	8025daa <_malloc_r+0x46>
 8025e36:	230c      	movs	r3, #12
 8025e38:	603b      	str	r3, [r7, #0]
 8025e3a:	4638      	mov	r0, r7
 8025e3c:	f003 f936 	bl	80290ac <__malloc_unlock>
 8025e40:	e7a1      	b.n	8025d86 <_malloc_r+0x22>
 8025e42:	6025      	str	r5, [r4, #0]
 8025e44:	e7de      	b.n	8025e04 <_malloc_r+0xa0>
 8025e46:	bf00      	nop
 8025e48:	20030134 	.word	0x20030134

08025e4c <__cvt>:
 8025e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025e4e:	ed2d 8b02 	vpush	{d8}
 8025e52:	eeb0 8b40 	vmov.f64	d8, d0
 8025e56:	b085      	sub	sp, #20
 8025e58:	4617      	mov	r7, r2
 8025e5a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025e5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025e5e:	ee18 2a90 	vmov	r2, s17
 8025e62:	f025 0520 	bic.w	r5, r5, #32
 8025e66:	2a00      	cmp	r2, #0
 8025e68:	bfb6      	itet	lt
 8025e6a:	222d      	movlt	r2, #45	; 0x2d
 8025e6c:	2200      	movge	r2, #0
 8025e6e:	eeb1 8b40 	vneglt.f64	d8, d0
 8025e72:	2d46      	cmp	r5, #70	; 0x46
 8025e74:	460c      	mov	r4, r1
 8025e76:	701a      	strb	r2, [r3, #0]
 8025e78:	d004      	beq.n	8025e84 <__cvt+0x38>
 8025e7a:	2d45      	cmp	r5, #69	; 0x45
 8025e7c:	d100      	bne.n	8025e80 <__cvt+0x34>
 8025e7e:	3401      	adds	r4, #1
 8025e80:	2102      	movs	r1, #2
 8025e82:	e000      	b.n	8025e86 <__cvt+0x3a>
 8025e84:	2103      	movs	r1, #3
 8025e86:	ab03      	add	r3, sp, #12
 8025e88:	9301      	str	r3, [sp, #4]
 8025e8a:	ab02      	add	r3, sp, #8
 8025e8c:	9300      	str	r3, [sp, #0]
 8025e8e:	4622      	mov	r2, r4
 8025e90:	4633      	mov	r3, r6
 8025e92:	eeb0 0b48 	vmov.f64	d0, d8
 8025e96:	f002 f947 	bl	8028128 <_dtoa_r>
 8025e9a:	2d47      	cmp	r5, #71	; 0x47
 8025e9c:	d101      	bne.n	8025ea2 <__cvt+0x56>
 8025e9e:	07fb      	lsls	r3, r7, #31
 8025ea0:	d51a      	bpl.n	8025ed8 <__cvt+0x8c>
 8025ea2:	2d46      	cmp	r5, #70	; 0x46
 8025ea4:	eb00 0204 	add.w	r2, r0, r4
 8025ea8:	d10c      	bne.n	8025ec4 <__cvt+0x78>
 8025eaa:	7803      	ldrb	r3, [r0, #0]
 8025eac:	2b30      	cmp	r3, #48	; 0x30
 8025eae:	d107      	bne.n	8025ec0 <__cvt+0x74>
 8025eb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025eb8:	bf1c      	itt	ne
 8025eba:	f1c4 0401 	rsbne	r4, r4, #1
 8025ebe:	6034      	strne	r4, [r6, #0]
 8025ec0:	6833      	ldr	r3, [r6, #0]
 8025ec2:	441a      	add	r2, r3
 8025ec4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ecc:	bf08      	it	eq
 8025ece:	9203      	streq	r2, [sp, #12]
 8025ed0:	2130      	movs	r1, #48	; 0x30
 8025ed2:	9b03      	ldr	r3, [sp, #12]
 8025ed4:	4293      	cmp	r3, r2
 8025ed6:	d307      	bcc.n	8025ee8 <__cvt+0x9c>
 8025ed8:	9b03      	ldr	r3, [sp, #12]
 8025eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025edc:	1a1b      	subs	r3, r3, r0
 8025ede:	6013      	str	r3, [r2, #0]
 8025ee0:	b005      	add	sp, #20
 8025ee2:	ecbd 8b02 	vpop	{d8}
 8025ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025ee8:	1c5c      	adds	r4, r3, #1
 8025eea:	9403      	str	r4, [sp, #12]
 8025eec:	7019      	strb	r1, [r3, #0]
 8025eee:	e7f0      	b.n	8025ed2 <__cvt+0x86>

08025ef0 <__exponent>:
 8025ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025ef2:	4603      	mov	r3, r0
 8025ef4:	2900      	cmp	r1, #0
 8025ef6:	bfb8      	it	lt
 8025ef8:	4249      	neglt	r1, r1
 8025efa:	f803 2b02 	strb.w	r2, [r3], #2
 8025efe:	bfb4      	ite	lt
 8025f00:	222d      	movlt	r2, #45	; 0x2d
 8025f02:	222b      	movge	r2, #43	; 0x2b
 8025f04:	2909      	cmp	r1, #9
 8025f06:	7042      	strb	r2, [r0, #1]
 8025f08:	dd2a      	ble.n	8025f60 <__exponent+0x70>
 8025f0a:	f10d 0407 	add.w	r4, sp, #7
 8025f0e:	46a4      	mov	ip, r4
 8025f10:	270a      	movs	r7, #10
 8025f12:	46a6      	mov	lr, r4
 8025f14:	460a      	mov	r2, r1
 8025f16:	fb91 f6f7 	sdiv	r6, r1, r7
 8025f1a:	fb07 1516 	mls	r5, r7, r6, r1
 8025f1e:	3530      	adds	r5, #48	; 0x30
 8025f20:	2a63      	cmp	r2, #99	; 0x63
 8025f22:	f104 34ff 	add.w	r4, r4, #4294967295
 8025f26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025f2a:	4631      	mov	r1, r6
 8025f2c:	dcf1      	bgt.n	8025f12 <__exponent+0x22>
 8025f2e:	3130      	adds	r1, #48	; 0x30
 8025f30:	f1ae 0502 	sub.w	r5, lr, #2
 8025f34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8025f38:	1c44      	adds	r4, r0, #1
 8025f3a:	4629      	mov	r1, r5
 8025f3c:	4561      	cmp	r1, ip
 8025f3e:	d30a      	bcc.n	8025f56 <__exponent+0x66>
 8025f40:	f10d 0209 	add.w	r2, sp, #9
 8025f44:	eba2 020e 	sub.w	r2, r2, lr
 8025f48:	4565      	cmp	r5, ip
 8025f4a:	bf88      	it	hi
 8025f4c:	2200      	movhi	r2, #0
 8025f4e:	4413      	add	r3, r2
 8025f50:	1a18      	subs	r0, r3, r0
 8025f52:	b003      	add	sp, #12
 8025f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025f5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8025f5e:	e7ed      	b.n	8025f3c <__exponent+0x4c>
 8025f60:	2330      	movs	r3, #48	; 0x30
 8025f62:	3130      	adds	r1, #48	; 0x30
 8025f64:	7083      	strb	r3, [r0, #2]
 8025f66:	70c1      	strb	r1, [r0, #3]
 8025f68:	1d03      	adds	r3, r0, #4
 8025f6a:	e7f1      	b.n	8025f50 <__exponent+0x60>
 8025f6c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08025f70 <_printf_float>:
 8025f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f74:	b08b      	sub	sp, #44	; 0x2c
 8025f76:	460c      	mov	r4, r1
 8025f78:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8025f7c:	4616      	mov	r6, r2
 8025f7e:	461f      	mov	r7, r3
 8025f80:	4605      	mov	r5, r0
 8025f82:	f003 f811 	bl	8028fa8 <_localeconv_r>
 8025f86:	f8d0 b000 	ldr.w	fp, [r0]
 8025f8a:	4658      	mov	r0, fp
 8025f8c:	f7da f962 	bl	8000254 <strlen>
 8025f90:	2300      	movs	r3, #0
 8025f92:	9308      	str	r3, [sp, #32]
 8025f94:	f8d8 3000 	ldr.w	r3, [r8]
 8025f98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8025f9c:	6822      	ldr	r2, [r4, #0]
 8025f9e:	3307      	adds	r3, #7
 8025fa0:	f023 0307 	bic.w	r3, r3, #7
 8025fa4:	f103 0108 	add.w	r1, r3, #8
 8025fa8:	f8c8 1000 	str.w	r1, [r8]
 8025fac:	4682      	mov	sl, r0
 8025fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025fb2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8025fb6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8026218 <_printf_float+0x2a8>
 8025fba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8025fbe:	eeb0 6bc0 	vabs.f64	d6, d0
 8025fc2:	eeb4 6b47 	vcmp.f64	d6, d7
 8025fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025fca:	dd24      	ble.n	8026016 <_printf_float+0xa6>
 8025fcc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025fd4:	d502      	bpl.n	8025fdc <_printf_float+0x6c>
 8025fd6:	232d      	movs	r3, #45	; 0x2d
 8025fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025fdc:	4b90      	ldr	r3, [pc, #576]	; (8026220 <_printf_float+0x2b0>)
 8025fde:	4891      	ldr	r0, [pc, #580]	; (8026224 <_printf_float+0x2b4>)
 8025fe0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8025fe4:	bf94      	ite	ls
 8025fe6:	4698      	movls	r8, r3
 8025fe8:	4680      	movhi	r8, r0
 8025fea:	2303      	movs	r3, #3
 8025fec:	6123      	str	r3, [r4, #16]
 8025fee:	f022 0204 	bic.w	r2, r2, #4
 8025ff2:	2300      	movs	r3, #0
 8025ff4:	6022      	str	r2, [r4, #0]
 8025ff6:	9304      	str	r3, [sp, #16]
 8025ff8:	9700      	str	r7, [sp, #0]
 8025ffa:	4633      	mov	r3, r6
 8025ffc:	aa09      	add	r2, sp, #36	; 0x24
 8025ffe:	4621      	mov	r1, r4
 8026000:	4628      	mov	r0, r5
 8026002:	f000 f9d3 	bl	80263ac <_printf_common>
 8026006:	3001      	adds	r0, #1
 8026008:	f040 808a 	bne.w	8026120 <_printf_float+0x1b0>
 802600c:	f04f 30ff 	mov.w	r0, #4294967295
 8026010:	b00b      	add	sp, #44	; 0x2c
 8026012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026016:	eeb4 0b40 	vcmp.f64	d0, d0
 802601a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802601e:	d709      	bvc.n	8026034 <_printf_float+0xc4>
 8026020:	ee10 3a90 	vmov	r3, s1
 8026024:	2b00      	cmp	r3, #0
 8026026:	bfbc      	itt	lt
 8026028:	232d      	movlt	r3, #45	; 0x2d
 802602a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802602e:	487e      	ldr	r0, [pc, #504]	; (8026228 <_printf_float+0x2b8>)
 8026030:	4b7e      	ldr	r3, [pc, #504]	; (802622c <_printf_float+0x2bc>)
 8026032:	e7d5      	b.n	8025fe0 <_printf_float+0x70>
 8026034:	6863      	ldr	r3, [r4, #4]
 8026036:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 802603a:	9104      	str	r1, [sp, #16]
 802603c:	1c59      	adds	r1, r3, #1
 802603e:	d13c      	bne.n	80260ba <_printf_float+0x14a>
 8026040:	2306      	movs	r3, #6
 8026042:	6063      	str	r3, [r4, #4]
 8026044:	2300      	movs	r3, #0
 8026046:	9303      	str	r3, [sp, #12]
 8026048:	ab08      	add	r3, sp, #32
 802604a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802604e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8026052:	ab07      	add	r3, sp, #28
 8026054:	6861      	ldr	r1, [r4, #4]
 8026056:	9300      	str	r3, [sp, #0]
 8026058:	6022      	str	r2, [r4, #0]
 802605a:	f10d 031b 	add.w	r3, sp, #27
 802605e:	4628      	mov	r0, r5
 8026060:	f7ff fef4 	bl	8025e4c <__cvt>
 8026064:	9b04      	ldr	r3, [sp, #16]
 8026066:	9907      	ldr	r1, [sp, #28]
 8026068:	2b47      	cmp	r3, #71	; 0x47
 802606a:	4680      	mov	r8, r0
 802606c:	d108      	bne.n	8026080 <_printf_float+0x110>
 802606e:	1cc8      	adds	r0, r1, #3
 8026070:	db02      	blt.n	8026078 <_printf_float+0x108>
 8026072:	6863      	ldr	r3, [r4, #4]
 8026074:	4299      	cmp	r1, r3
 8026076:	dd41      	ble.n	80260fc <_printf_float+0x18c>
 8026078:	f1a9 0902 	sub.w	r9, r9, #2
 802607c:	fa5f f989 	uxtb.w	r9, r9
 8026080:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8026084:	d820      	bhi.n	80260c8 <_printf_float+0x158>
 8026086:	3901      	subs	r1, #1
 8026088:	464a      	mov	r2, r9
 802608a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802608e:	9107      	str	r1, [sp, #28]
 8026090:	f7ff ff2e 	bl	8025ef0 <__exponent>
 8026094:	9a08      	ldr	r2, [sp, #32]
 8026096:	9004      	str	r0, [sp, #16]
 8026098:	1813      	adds	r3, r2, r0
 802609a:	2a01      	cmp	r2, #1
 802609c:	6123      	str	r3, [r4, #16]
 802609e:	dc02      	bgt.n	80260a6 <_printf_float+0x136>
 80260a0:	6822      	ldr	r2, [r4, #0]
 80260a2:	07d2      	lsls	r2, r2, #31
 80260a4:	d501      	bpl.n	80260aa <_printf_float+0x13a>
 80260a6:	3301      	adds	r3, #1
 80260a8:	6123      	str	r3, [r4, #16]
 80260aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80260ae:	2b00      	cmp	r3, #0
 80260b0:	d0a2      	beq.n	8025ff8 <_printf_float+0x88>
 80260b2:	232d      	movs	r3, #45	; 0x2d
 80260b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80260b8:	e79e      	b.n	8025ff8 <_printf_float+0x88>
 80260ba:	9904      	ldr	r1, [sp, #16]
 80260bc:	2947      	cmp	r1, #71	; 0x47
 80260be:	d1c1      	bne.n	8026044 <_printf_float+0xd4>
 80260c0:	2b00      	cmp	r3, #0
 80260c2:	d1bf      	bne.n	8026044 <_printf_float+0xd4>
 80260c4:	2301      	movs	r3, #1
 80260c6:	e7bc      	b.n	8026042 <_printf_float+0xd2>
 80260c8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80260cc:	d118      	bne.n	8026100 <_printf_float+0x190>
 80260ce:	2900      	cmp	r1, #0
 80260d0:	6863      	ldr	r3, [r4, #4]
 80260d2:	dd0b      	ble.n	80260ec <_printf_float+0x17c>
 80260d4:	6121      	str	r1, [r4, #16]
 80260d6:	b913      	cbnz	r3, 80260de <_printf_float+0x16e>
 80260d8:	6822      	ldr	r2, [r4, #0]
 80260da:	07d0      	lsls	r0, r2, #31
 80260dc:	d502      	bpl.n	80260e4 <_printf_float+0x174>
 80260de:	3301      	adds	r3, #1
 80260e0:	440b      	add	r3, r1
 80260e2:	6123      	str	r3, [r4, #16]
 80260e4:	2300      	movs	r3, #0
 80260e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80260e8:	9304      	str	r3, [sp, #16]
 80260ea:	e7de      	b.n	80260aa <_printf_float+0x13a>
 80260ec:	b913      	cbnz	r3, 80260f4 <_printf_float+0x184>
 80260ee:	6822      	ldr	r2, [r4, #0]
 80260f0:	07d2      	lsls	r2, r2, #31
 80260f2:	d501      	bpl.n	80260f8 <_printf_float+0x188>
 80260f4:	3302      	adds	r3, #2
 80260f6:	e7f4      	b.n	80260e2 <_printf_float+0x172>
 80260f8:	2301      	movs	r3, #1
 80260fa:	e7f2      	b.n	80260e2 <_printf_float+0x172>
 80260fc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8026100:	9b08      	ldr	r3, [sp, #32]
 8026102:	4299      	cmp	r1, r3
 8026104:	db05      	blt.n	8026112 <_printf_float+0x1a2>
 8026106:	6823      	ldr	r3, [r4, #0]
 8026108:	6121      	str	r1, [r4, #16]
 802610a:	07d8      	lsls	r0, r3, #31
 802610c:	d5ea      	bpl.n	80260e4 <_printf_float+0x174>
 802610e:	1c4b      	adds	r3, r1, #1
 8026110:	e7e7      	b.n	80260e2 <_printf_float+0x172>
 8026112:	2900      	cmp	r1, #0
 8026114:	bfd4      	ite	le
 8026116:	f1c1 0202 	rsble	r2, r1, #2
 802611a:	2201      	movgt	r2, #1
 802611c:	4413      	add	r3, r2
 802611e:	e7e0      	b.n	80260e2 <_printf_float+0x172>
 8026120:	6823      	ldr	r3, [r4, #0]
 8026122:	055a      	lsls	r2, r3, #21
 8026124:	d407      	bmi.n	8026136 <_printf_float+0x1c6>
 8026126:	6923      	ldr	r3, [r4, #16]
 8026128:	4642      	mov	r2, r8
 802612a:	4631      	mov	r1, r6
 802612c:	4628      	mov	r0, r5
 802612e:	47b8      	blx	r7
 8026130:	3001      	adds	r0, #1
 8026132:	d12a      	bne.n	802618a <_printf_float+0x21a>
 8026134:	e76a      	b.n	802600c <_printf_float+0x9c>
 8026136:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802613a:	f240 80e2 	bls.w	8026302 <_printf_float+0x392>
 802613e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8026142:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802614a:	d133      	bne.n	80261b4 <_printf_float+0x244>
 802614c:	4a38      	ldr	r2, [pc, #224]	; (8026230 <_printf_float+0x2c0>)
 802614e:	2301      	movs	r3, #1
 8026150:	4631      	mov	r1, r6
 8026152:	4628      	mov	r0, r5
 8026154:	47b8      	blx	r7
 8026156:	3001      	adds	r0, #1
 8026158:	f43f af58 	beq.w	802600c <_printf_float+0x9c>
 802615c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026160:	429a      	cmp	r2, r3
 8026162:	db02      	blt.n	802616a <_printf_float+0x1fa>
 8026164:	6823      	ldr	r3, [r4, #0]
 8026166:	07d8      	lsls	r0, r3, #31
 8026168:	d50f      	bpl.n	802618a <_printf_float+0x21a>
 802616a:	4653      	mov	r3, sl
 802616c:	465a      	mov	r2, fp
 802616e:	4631      	mov	r1, r6
 8026170:	4628      	mov	r0, r5
 8026172:	47b8      	blx	r7
 8026174:	3001      	adds	r0, #1
 8026176:	f43f af49 	beq.w	802600c <_printf_float+0x9c>
 802617a:	f04f 0800 	mov.w	r8, #0
 802617e:	f104 091a 	add.w	r9, r4, #26
 8026182:	9b08      	ldr	r3, [sp, #32]
 8026184:	3b01      	subs	r3, #1
 8026186:	4543      	cmp	r3, r8
 8026188:	dc09      	bgt.n	802619e <_printf_float+0x22e>
 802618a:	6823      	ldr	r3, [r4, #0]
 802618c:	079b      	lsls	r3, r3, #30
 802618e:	f100 8108 	bmi.w	80263a2 <_printf_float+0x432>
 8026192:	68e0      	ldr	r0, [r4, #12]
 8026194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026196:	4298      	cmp	r0, r3
 8026198:	bfb8      	it	lt
 802619a:	4618      	movlt	r0, r3
 802619c:	e738      	b.n	8026010 <_printf_float+0xa0>
 802619e:	2301      	movs	r3, #1
 80261a0:	464a      	mov	r2, r9
 80261a2:	4631      	mov	r1, r6
 80261a4:	4628      	mov	r0, r5
 80261a6:	47b8      	blx	r7
 80261a8:	3001      	adds	r0, #1
 80261aa:	f43f af2f 	beq.w	802600c <_printf_float+0x9c>
 80261ae:	f108 0801 	add.w	r8, r8, #1
 80261b2:	e7e6      	b.n	8026182 <_printf_float+0x212>
 80261b4:	9b07      	ldr	r3, [sp, #28]
 80261b6:	2b00      	cmp	r3, #0
 80261b8:	dc3c      	bgt.n	8026234 <_printf_float+0x2c4>
 80261ba:	4a1d      	ldr	r2, [pc, #116]	; (8026230 <_printf_float+0x2c0>)
 80261bc:	2301      	movs	r3, #1
 80261be:	4631      	mov	r1, r6
 80261c0:	4628      	mov	r0, r5
 80261c2:	47b8      	blx	r7
 80261c4:	3001      	adds	r0, #1
 80261c6:	f43f af21 	beq.w	802600c <_printf_float+0x9c>
 80261ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80261ce:	4313      	orrs	r3, r2
 80261d0:	d102      	bne.n	80261d8 <_printf_float+0x268>
 80261d2:	6823      	ldr	r3, [r4, #0]
 80261d4:	07d9      	lsls	r1, r3, #31
 80261d6:	d5d8      	bpl.n	802618a <_printf_float+0x21a>
 80261d8:	4653      	mov	r3, sl
 80261da:	465a      	mov	r2, fp
 80261dc:	4631      	mov	r1, r6
 80261de:	4628      	mov	r0, r5
 80261e0:	47b8      	blx	r7
 80261e2:	3001      	adds	r0, #1
 80261e4:	f43f af12 	beq.w	802600c <_printf_float+0x9c>
 80261e8:	f04f 0900 	mov.w	r9, #0
 80261ec:	f104 0a1a 	add.w	sl, r4, #26
 80261f0:	9b07      	ldr	r3, [sp, #28]
 80261f2:	425b      	negs	r3, r3
 80261f4:	454b      	cmp	r3, r9
 80261f6:	dc01      	bgt.n	80261fc <_printf_float+0x28c>
 80261f8:	9b08      	ldr	r3, [sp, #32]
 80261fa:	e795      	b.n	8026128 <_printf_float+0x1b8>
 80261fc:	2301      	movs	r3, #1
 80261fe:	4652      	mov	r2, sl
 8026200:	4631      	mov	r1, r6
 8026202:	4628      	mov	r0, r5
 8026204:	47b8      	blx	r7
 8026206:	3001      	adds	r0, #1
 8026208:	f43f af00 	beq.w	802600c <_printf_float+0x9c>
 802620c:	f109 0901 	add.w	r9, r9, #1
 8026210:	e7ee      	b.n	80261f0 <_printf_float+0x280>
 8026212:	bf00      	nop
 8026214:	f3af 8000 	nop.w
 8026218:	ffffffff 	.word	0xffffffff
 802621c:	7fefffff 	.word	0x7fefffff
 8026220:	08047764 	.word	0x08047764
 8026224:	08047768 	.word	0x08047768
 8026228:	08047770 	.word	0x08047770
 802622c:	0804776c 	.word	0x0804776c
 8026230:	08047d89 	.word	0x08047d89
 8026234:	9a08      	ldr	r2, [sp, #32]
 8026236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026238:	429a      	cmp	r2, r3
 802623a:	bfa8      	it	ge
 802623c:	461a      	movge	r2, r3
 802623e:	2a00      	cmp	r2, #0
 8026240:	4691      	mov	r9, r2
 8026242:	dc38      	bgt.n	80262b6 <_printf_float+0x346>
 8026244:	2300      	movs	r3, #0
 8026246:	9305      	str	r3, [sp, #20]
 8026248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802624c:	f104 021a 	add.w	r2, r4, #26
 8026250:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026252:	9905      	ldr	r1, [sp, #20]
 8026254:	9304      	str	r3, [sp, #16]
 8026256:	eba3 0309 	sub.w	r3, r3, r9
 802625a:	428b      	cmp	r3, r1
 802625c:	dc33      	bgt.n	80262c6 <_printf_float+0x356>
 802625e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026262:	429a      	cmp	r2, r3
 8026264:	db3c      	blt.n	80262e0 <_printf_float+0x370>
 8026266:	6823      	ldr	r3, [r4, #0]
 8026268:	07da      	lsls	r2, r3, #31
 802626a:	d439      	bmi.n	80262e0 <_printf_float+0x370>
 802626c:	9b08      	ldr	r3, [sp, #32]
 802626e:	9a04      	ldr	r2, [sp, #16]
 8026270:	9907      	ldr	r1, [sp, #28]
 8026272:	1a9a      	subs	r2, r3, r2
 8026274:	eba3 0901 	sub.w	r9, r3, r1
 8026278:	4591      	cmp	r9, r2
 802627a:	bfa8      	it	ge
 802627c:	4691      	movge	r9, r2
 802627e:	f1b9 0f00 	cmp.w	r9, #0
 8026282:	dc35      	bgt.n	80262f0 <_printf_float+0x380>
 8026284:	f04f 0800 	mov.w	r8, #0
 8026288:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802628c:	f104 0a1a 	add.w	sl, r4, #26
 8026290:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026294:	1a9b      	subs	r3, r3, r2
 8026296:	eba3 0309 	sub.w	r3, r3, r9
 802629a:	4543      	cmp	r3, r8
 802629c:	f77f af75 	ble.w	802618a <_printf_float+0x21a>
 80262a0:	2301      	movs	r3, #1
 80262a2:	4652      	mov	r2, sl
 80262a4:	4631      	mov	r1, r6
 80262a6:	4628      	mov	r0, r5
 80262a8:	47b8      	blx	r7
 80262aa:	3001      	adds	r0, #1
 80262ac:	f43f aeae 	beq.w	802600c <_printf_float+0x9c>
 80262b0:	f108 0801 	add.w	r8, r8, #1
 80262b4:	e7ec      	b.n	8026290 <_printf_float+0x320>
 80262b6:	4613      	mov	r3, r2
 80262b8:	4631      	mov	r1, r6
 80262ba:	4642      	mov	r2, r8
 80262bc:	4628      	mov	r0, r5
 80262be:	47b8      	blx	r7
 80262c0:	3001      	adds	r0, #1
 80262c2:	d1bf      	bne.n	8026244 <_printf_float+0x2d4>
 80262c4:	e6a2      	b.n	802600c <_printf_float+0x9c>
 80262c6:	2301      	movs	r3, #1
 80262c8:	4631      	mov	r1, r6
 80262ca:	4628      	mov	r0, r5
 80262cc:	9204      	str	r2, [sp, #16]
 80262ce:	47b8      	blx	r7
 80262d0:	3001      	adds	r0, #1
 80262d2:	f43f ae9b 	beq.w	802600c <_printf_float+0x9c>
 80262d6:	9b05      	ldr	r3, [sp, #20]
 80262d8:	9a04      	ldr	r2, [sp, #16]
 80262da:	3301      	adds	r3, #1
 80262dc:	9305      	str	r3, [sp, #20]
 80262de:	e7b7      	b.n	8026250 <_printf_float+0x2e0>
 80262e0:	4653      	mov	r3, sl
 80262e2:	465a      	mov	r2, fp
 80262e4:	4631      	mov	r1, r6
 80262e6:	4628      	mov	r0, r5
 80262e8:	47b8      	blx	r7
 80262ea:	3001      	adds	r0, #1
 80262ec:	d1be      	bne.n	802626c <_printf_float+0x2fc>
 80262ee:	e68d      	b.n	802600c <_printf_float+0x9c>
 80262f0:	9a04      	ldr	r2, [sp, #16]
 80262f2:	464b      	mov	r3, r9
 80262f4:	4442      	add	r2, r8
 80262f6:	4631      	mov	r1, r6
 80262f8:	4628      	mov	r0, r5
 80262fa:	47b8      	blx	r7
 80262fc:	3001      	adds	r0, #1
 80262fe:	d1c1      	bne.n	8026284 <_printf_float+0x314>
 8026300:	e684      	b.n	802600c <_printf_float+0x9c>
 8026302:	9a08      	ldr	r2, [sp, #32]
 8026304:	2a01      	cmp	r2, #1
 8026306:	dc01      	bgt.n	802630c <_printf_float+0x39c>
 8026308:	07db      	lsls	r3, r3, #31
 802630a:	d537      	bpl.n	802637c <_printf_float+0x40c>
 802630c:	2301      	movs	r3, #1
 802630e:	4642      	mov	r2, r8
 8026310:	4631      	mov	r1, r6
 8026312:	4628      	mov	r0, r5
 8026314:	47b8      	blx	r7
 8026316:	3001      	adds	r0, #1
 8026318:	f43f ae78 	beq.w	802600c <_printf_float+0x9c>
 802631c:	4653      	mov	r3, sl
 802631e:	465a      	mov	r2, fp
 8026320:	4631      	mov	r1, r6
 8026322:	4628      	mov	r0, r5
 8026324:	47b8      	blx	r7
 8026326:	3001      	adds	r0, #1
 8026328:	f43f ae70 	beq.w	802600c <_printf_float+0x9c>
 802632c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8026330:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026338:	d01b      	beq.n	8026372 <_printf_float+0x402>
 802633a:	9b08      	ldr	r3, [sp, #32]
 802633c:	f108 0201 	add.w	r2, r8, #1
 8026340:	3b01      	subs	r3, #1
 8026342:	4631      	mov	r1, r6
 8026344:	4628      	mov	r0, r5
 8026346:	47b8      	blx	r7
 8026348:	3001      	adds	r0, #1
 802634a:	d10e      	bne.n	802636a <_printf_float+0x3fa>
 802634c:	e65e      	b.n	802600c <_printf_float+0x9c>
 802634e:	2301      	movs	r3, #1
 8026350:	464a      	mov	r2, r9
 8026352:	4631      	mov	r1, r6
 8026354:	4628      	mov	r0, r5
 8026356:	47b8      	blx	r7
 8026358:	3001      	adds	r0, #1
 802635a:	f43f ae57 	beq.w	802600c <_printf_float+0x9c>
 802635e:	f108 0801 	add.w	r8, r8, #1
 8026362:	9b08      	ldr	r3, [sp, #32]
 8026364:	3b01      	subs	r3, #1
 8026366:	4543      	cmp	r3, r8
 8026368:	dcf1      	bgt.n	802634e <_printf_float+0x3de>
 802636a:	9b04      	ldr	r3, [sp, #16]
 802636c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8026370:	e6db      	b.n	802612a <_printf_float+0x1ba>
 8026372:	f04f 0800 	mov.w	r8, #0
 8026376:	f104 091a 	add.w	r9, r4, #26
 802637a:	e7f2      	b.n	8026362 <_printf_float+0x3f2>
 802637c:	2301      	movs	r3, #1
 802637e:	4642      	mov	r2, r8
 8026380:	e7df      	b.n	8026342 <_printf_float+0x3d2>
 8026382:	2301      	movs	r3, #1
 8026384:	464a      	mov	r2, r9
 8026386:	4631      	mov	r1, r6
 8026388:	4628      	mov	r0, r5
 802638a:	47b8      	blx	r7
 802638c:	3001      	adds	r0, #1
 802638e:	f43f ae3d 	beq.w	802600c <_printf_float+0x9c>
 8026392:	f108 0801 	add.w	r8, r8, #1
 8026396:	68e3      	ldr	r3, [r4, #12]
 8026398:	9909      	ldr	r1, [sp, #36]	; 0x24
 802639a:	1a5b      	subs	r3, r3, r1
 802639c:	4543      	cmp	r3, r8
 802639e:	dcf0      	bgt.n	8026382 <_printf_float+0x412>
 80263a0:	e6f7      	b.n	8026192 <_printf_float+0x222>
 80263a2:	f04f 0800 	mov.w	r8, #0
 80263a6:	f104 0919 	add.w	r9, r4, #25
 80263aa:	e7f4      	b.n	8026396 <_printf_float+0x426>

080263ac <_printf_common>:
 80263ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80263b0:	4616      	mov	r6, r2
 80263b2:	4699      	mov	r9, r3
 80263b4:	688a      	ldr	r2, [r1, #8]
 80263b6:	690b      	ldr	r3, [r1, #16]
 80263b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80263bc:	4293      	cmp	r3, r2
 80263be:	bfb8      	it	lt
 80263c0:	4613      	movlt	r3, r2
 80263c2:	6033      	str	r3, [r6, #0]
 80263c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80263c8:	4607      	mov	r7, r0
 80263ca:	460c      	mov	r4, r1
 80263cc:	b10a      	cbz	r2, 80263d2 <_printf_common+0x26>
 80263ce:	3301      	adds	r3, #1
 80263d0:	6033      	str	r3, [r6, #0]
 80263d2:	6823      	ldr	r3, [r4, #0]
 80263d4:	0699      	lsls	r1, r3, #26
 80263d6:	bf42      	ittt	mi
 80263d8:	6833      	ldrmi	r3, [r6, #0]
 80263da:	3302      	addmi	r3, #2
 80263dc:	6033      	strmi	r3, [r6, #0]
 80263de:	6825      	ldr	r5, [r4, #0]
 80263e0:	f015 0506 	ands.w	r5, r5, #6
 80263e4:	d106      	bne.n	80263f4 <_printf_common+0x48>
 80263e6:	f104 0a19 	add.w	sl, r4, #25
 80263ea:	68e3      	ldr	r3, [r4, #12]
 80263ec:	6832      	ldr	r2, [r6, #0]
 80263ee:	1a9b      	subs	r3, r3, r2
 80263f0:	42ab      	cmp	r3, r5
 80263f2:	dc26      	bgt.n	8026442 <_printf_common+0x96>
 80263f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80263f8:	1e13      	subs	r3, r2, #0
 80263fa:	6822      	ldr	r2, [r4, #0]
 80263fc:	bf18      	it	ne
 80263fe:	2301      	movne	r3, #1
 8026400:	0692      	lsls	r2, r2, #26
 8026402:	d42b      	bmi.n	802645c <_printf_common+0xb0>
 8026404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026408:	4649      	mov	r1, r9
 802640a:	4638      	mov	r0, r7
 802640c:	47c0      	blx	r8
 802640e:	3001      	adds	r0, #1
 8026410:	d01e      	beq.n	8026450 <_printf_common+0xa4>
 8026412:	6823      	ldr	r3, [r4, #0]
 8026414:	68e5      	ldr	r5, [r4, #12]
 8026416:	6832      	ldr	r2, [r6, #0]
 8026418:	f003 0306 	and.w	r3, r3, #6
 802641c:	2b04      	cmp	r3, #4
 802641e:	bf08      	it	eq
 8026420:	1aad      	subeq	r5, r5, r2
 8026422:	68a3      	ldr	r3, [r4, #8]
 8026424:	6922      	ldr	r2, [r4, #16]
 8026426:	bf0c      	ite	eq
 8026428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802642c:	2500      	movne	r5, #0
 802642e:	4293      	cmp	r3, r2
 8026430:	bfc4      	itt	gt
 8026432:	1a9b      	subgt	r3, r3, r2
 8026434:	18ed      	addgt	r5, r5, r3
 8026436:	2600      	movs	r6, #0
 8026438:	341a      	adds	r4, #26
 802643a:	42b5      	cmp	r5, r6
 802643c:	d11a      	bne.n	8026474 <_printf_common+0xc8>
 802643e:	2000      	movs	r0, #0
 8026440:	e008      	b.n	8026454 <_printf_common+0xa8>
 8026442:	2301      	movs	r3, #1
 8026444:	4652      	mov	r2, sl
 8026446:	4649      	mov	r1, r9
 8026448:	4638      	mov	r0, r7
 802644a:	47c0      	blx	r8
 802644c:	3001      	adds	r0, #1
 802644e:	d103      	bne.n	8026458 <_printf_common+0xac>
 8026450:	f04f 30ff 	mov.w	r0, #4294967295
 8026454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026458:	3501      	adds	r5, #1
 802645a:	e7c6      	b.n	80263ea <_printf_common+0x3e>
 802645c:	18e1      	adds	r1, r4, r3
 802645e:	1c5a      	adds	r2, r3, #1
 8026460:	2030      	movs	r0, #48	; 0x30
 8026462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026466:	4422      	add	r2, r4
 8026468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802646c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026470:	3302      	adds	r3, #2
 8026472:	e7c7      	b.n	8026404 <_printf_common+0x58>
 8026474:	2301      	movs	r3, #1
 8026476:	4622      	mov	r2, r4
 8026478:	4649      	mov	r1, r9
 802647a:	4638      	mov	r0, r7
 802647c:	47c0      	blx	r8
 802647e:	3001      	adds	r0, #1
 8026480:	d0e6      	beq.n	8026450 <_printf_common+0xa4>
 8026482:	3601      	adds	r6, #1
 8026484:	e7d9      	b.n	802643a <_printf_common+0x8e>
 8026486:	Address 0x0000000008026486 is out of bounds.


08026488 <_printf_i>:
 8026488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802648c:	7e0f      	ldrb	r7, [r1, #24]
 802648e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026490:	2f78      	cmp	r7, #120	; 0x78
 8026492:	4691      	mov	r9, r2
 8026494:	4680      	mov	r8, r0
 8026496:	460c      	mov	r4, r1
 8026498:	469a      	mov	sl, r3
 802649a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802649e:	d807      	bhi.n	80264b0 <_printf_i+0x28>
 80264a0:	2f62      	cmp	r7, #98	; 0x62
 80264a2:	d80a      	bhi.n	80264ba <_printf_i+0x32>
 80264a4:	2f00      	cmp	r7, #0
 80264a6:	f000 80d8 	beq.w	802665a <_printf_i+0x1d2>
 80264aa:	2f58      	cmp	r7, #88	; 0x58
 80264ac:	f000 80a3 	beq.w	80265f6 <_printf_i+0x16e>
 80264b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80264b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80264b8:	e03a      	b.n	8026530 <_printf_i+0xa8>
 80264ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80264be:	2b15      	cmp	r3, #21
 80264c0:	d8f6      	bhi.n	80264b0 <_printf_i+0x28>
 80264c2:	a101      	add	r1, pc, #4	; (adr r1, 80264c8 <_printf_i+0x40>)
 80264c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80264c8:	08026521 	.word	0x08026521
 80264cc:	08026535 	.word	0x08026535
 80264d0:	080264b1 	.word	0x080264b1
 80264d4:	080264b1 	.word	0x080264b1
 80264d8:	080264b1 	.word	0x080264b1
 80264dc:	080264b1 	.word	0x080264b1
 80264e0:	08026535 	.word	0x08026535
 80264e4:	080264b1 	.word	0x080264b1
 80264e8:	080264b1 	.word	0x080264b1
 80264ec:	080264b1 	.word	0x080264b1
 80264f0:	080264b1 	.word	0x080264b1
 80264f4:	08026641 	.word	0x08026641
 80264f8:	08026565 	.word	0x08026565
 80264fc:	08026623 	.word	0x08026623
 8026500:	080264b1 	.word	0x080264b1
 8026504:	080264b1 	.word	0x080264b1
 8026508:	08026663 	.word	0x08026663
 802650c:	080264b1 	.word	0x080264b1
 8026510:	08026565 	.word	0x08026565
 8026514:	080264b1 	.word	0x080264b1
 8026518:	080264b1 	.word	0x080264b1
 802651c:	0802662b 	.word	0x0802662b
 8026520:	682b      	ldr	r3, [r5, #0]
 8026522:	1d1a      	adds	r2, r3, #4
 8026524:	681b      	ldr	r3, [r3, #0]
 8026526:	602a      	str	r2, [r5, #0]
 8026528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802652c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026530:	2301      	movs	r3, #1
 8026532:	e0a3      	b.n	802667c <_printf_i+0x1f4>
 8026534:	6820      	ldr	r0, [r4, #0]
 8026536:	6829      	ldr	r1, [r5, #0]
 8026538:	0606      	lsls	r6, r0, #24
 802653a:	f101 0304 	add.w	r3, r1, #4
 802653e:	d50a      	bpl.n	8026556 <_printf_i+0xce>
 8026540:	680e      	ldr	r6, [r1, #0]
 8026542:	602b      	str	r3, [r5, #0]
 8026544:	2e00      	cmp	r6, #0
 8026546:	da03      	bge.n	8026550 <_printf_i+0xc8>
 8026548:	232d      	movs	r3, #45	; 0x2d
 802654a:	4276      	negs	r6, r6
 802654c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026550:	485e      	ldr	r0, [pc, #376]	; (80266cc <_printf_i+0x244>)
 8026552:	230a      	movs	r3, #10
 8026554:	e019      	b.n	802658a <_printf_i+0x102>
 8026556:	680e      	ldr	r6, [r1, #0]
 8026558:	602b      	str	r3, [r5, #0]
 802655a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802655e:	bf18      	it	ne
 8026560:	b236      	sxthne	r6, r6
 8026562:	e7ef      	b.n	8026544 <_printf_i+0xbc>
 8026564:	682b      	ldr	r3, [r5, #0]
 8026566:	6820      	ldr	r0, [r4, #0]
 8026568:	1d19      	adds	r1, r3, #4
 802656a:	6029      	str	r1, [r5, #0]
 802656c:	0601      	lsls	r1, r0, #24
 802656e:	d501      	bpl.n	8026574 <_printf_i+0xec>
 8026570:	681e      	ldr	r6, [r3, #0]
 8026572:	e002      	b.n	802657a <_printf_i+0xf2>
 8026574:	0646      	lsls	r6, r0, #25
 8026576:	d5fb      	bpl.n	8026570 <_printf_i+0xe8>
 8026578:	881e      	ldrh	r6, [r3, #0]
 802657a:	4854      	ldr	r0, [pc, #336]	; (80266cc <_printf_i+0x244>)
 802657c:	2f6f      	cmp	r7, #111	; 0x6f
 802657e:	bf0c      	ite	eq
 8026580:	2308      	moveq	r3, #8
 8026582:	230a      	movne	r3, #10
 8026584:	2100      	movs	r1, #0
 8026586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802658a:	6865      	ldr	r5, [r4, #4]
 802658c:	60a5      	str	r5, [r4, #8]
 802658e:	2d00      	cmp	r5, #0
 8026590:	bfa2      	ittt	ge
 8026592:	6821      	ldrge	r1, [r4, #0]
 8026594:	f021 0104 	bicge.w	r1, r1, #4
 8026598:	6021      	strge	r1, [r4, #0]
 802659a:	b90e      	cbnz	r6, 80265a0 <_printf_i+0x118>
 802659c:	2d00      	cmp	r5, #0
 802659e:	d04d      	beq.n	802663c <_printf_i+0x1b4>
 80265a0:	4615      	mov	r5, r2
 80265a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80265a6:	fb03 6711 	mls	r7, r3, r1, r6
 80265aa:	5dc7      	ldrb	r7, [r0, r7]
 80265ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80265b0:	4637      	mov	r7, r6
 80265b2:	42bb      	cmp	r3, r7
 80265b4:	460e      	mov	r6, r1
 80265b6:	d9f4      	bls.n	80265a2 <_printf_i+0x11a>
 80265b8:	2b08      	cmp	r3, #8
 80265ba:	d10b      	bne.n	80265d4 <_printf_i+0x14c>
 80265bc:	6823      	ldr	r3, [r4, #0]
 80265be:	07de      	lsls	r6, r3, #31
 80265c0:	d508      	bpl.n	80265d4 <_printf_i+0x14c>
 80265c2:	6923      	ldr	r3, [r4, #16]
 80265c4:	6861      	ldr	r1, [r4, #4]
 80265c6:	4299      	cmp	r1, r3
 80265c8:	bfde      	ittt	le
 80265ca:	2330      	movle	r3, #48	; 0x30
 80265cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80265d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80265d4:	1b52      	subs	r2, r2, r5
 80265d6:	6122      	str	r2, [r4, #16]
 80265d8:	f8cd a000 	str.w	sl, [sp]
 80265dc:	464b      	mov	r3, r9
 80265de:	aa03      	add	r2, sp, #12
 80265e0:	4621      	mov	r1, r4
 80265e2:	4640      	mov	r0, r8
 80265e4:	f7ff fee2 	bl	80263ac <_printf_common>
 80265e8:	3001      	adds	r0, #1
 80265ea:	d14c      	bne.n	8026686 <_printf_i+0x1fe>
 80265ec:	f04f 30ff 	mov.w	r0, #4294967295
 80265f0:	b004      	add	sp, #16
 80265f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80265f6:	4835      	ldr	r0, [pc, #212]	; (80266cc <_printf_i+0x244>)
 80265f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80265fc:	6829      	ldr	r1, [r5, #0]
 80265fe:	6823      	ldr	r3, [r4, #0]
 8026600:	f851 6b04 	ldr.w	r6, [r1], #4
 8026604:	6029      	str	r1, [r5, #0]
 8026606:	061d      	lsls	r5, r3, #24
 8026608:	d514      	bpl.n	8026634 <_printf_i+0x1ac>
 802660a:	07df      	lsls	r7, r3, #31
 802660c:	bf44      	itt	mi
 802660e:	f043 0320 	orrmi.w	r3, r3, #32
 8026612:	6023      	strmi	r3, [r4, #0]
 8026614:	b91e      	cbnz	r6, 802661e <_printf_i+0x196>
 8026616:	6823      	ldr	r3, [r4, #0]
 8026618:	f023 0320 	bic.w	r3, r3, #32
 802661c:	6023      	str	r3, [r4, #0]
 802661e:	2310      	movs	r3, #16
 8026620:	e7b0      	b.n	8026584 <_printf_i+0xfc>
 8026622:	6823      	ldr	r3, [r4, #0]
 8026624:	f043 0320 	orr.w	r3, r3, #32
 8026628:	6023      	str	r3, [r4, #0]
 802662a:	2378      	movs	r3, #120	; 0x78
 802662c:	4828      	ldr	r0, [pc, #160]	; (80266d0 <_printf_i+0x248>)
 802662e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026632:	e7e3      	b.n	80265fc <_printf_i+0x174>
 8026634:	0659      	lsls	r1, r3, #25
 8026636:	bf48      	it	mi
 8026638:	b2b6      	uxthmi	r6, r6
 802663a:	e7e6      	b.n	802660a <_printf_i+0x182>
 802663c:	4615      	mov	r5, r2
 802663e:	e7bb      	b.n	80265b8 <_printf_i+0x130>
 8026640:	682b      	ldr	r3, [r5, #0]
 8026642:	6826      	ldr	r6, [r4, #0]
 8026644:	6961      	ldr	r1, [r4, #20]
 8026646:	1d18      	adds	r0, r3, #4
 8026648:	6028      	str	r0, [r5, #0]
 802664a:	0635      	lsls	r5, r6, #24
 802664c:	681b      	ldr	r3, [r3, #0]
 802664e:	d501      	bpl.n	8026654 <_printf_i+0x1cc>
 8026650:	6019      	str	r1, [r3, #0]
 8026652:	e002      	b.n	802665a <_printf_i+0x1d2>
 8026654:	0670      	lsls	r0, r6, #25
 8026656:	d5fb      	bpl.n	8026650 <_printf_i+0x1c8>
 8026658:	8019      	strh	r1, [r3, #0]
 802665a:	2300      	movs	r3, #0
 802665c:	6123      	str	r3, [r4, #16]
 802665e:	4615      	mov	r5, r2
 8026660:	e7ba      	b.n	80265d8 <_printf_i+0x150>
 8026662:	682b      	ldr	r3, [r5, #0]
 8026664:	1d1a      	adds	r2, r3, #4
 8026666:	602a      	str	r2, [r5, #0]
 8026668:	681d      	ldr	r5, [r3, #0]
 802666a:	6862      	ldr	r2, [r4, #4]
 802666c:	2100      	movs	r1, #0
 802666e:	4628      	mov	r0, r5
 8026670:	f7d9 fdfe 	bl	8000270 <memchr>
 8026674:	b108      	cbz	r0, 802667a <_printf_i+0x1f2>
 8026676:	1b40      	subs	r0, r0, r5
 8026678:	6060      	str	r0, [r4, #4]
 802667a:	6863      	ldr	r3, [r4, #4]
 802667c:	6123      	str	r3, [r4, #16]
 802667e:	2300      	movs	r3, #0
 8026680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026684:	e7a8      	b.n	80265d8 <_printf_i+0x150>
 8026686:	6923      	ldr	r3, [r4, #16]
 8026688:	462a      	mov	r2, r5
 802668a:	4649      	mov	r1, r9
 802668c:	4640      	mov	r0, r8
 802668e:	47d0      	blx	sl
 8026690:	3001      	adds	r0, #1
 8026692:	d0ab      	beq.n	80265ec <_printf_i+0x164>
 8026694:	6823      	ldr	r3, [r4, #0]
 8026696:	079b      	lsls	r3, r3, #30
 8026698:	d413      	bmi.n	80266c2 <_printf_i+0x23a>
 802669a:	68e0      	ldr	r0, [r4, #12]
 802669c:	9b03      	ldr	r3, [sp, #12]
 802669e:	4298      	cmp	r0, r3
 80266a0:	bfb8      	it	lt
 80266a2:	4618      	movlt	r0, r3
 80266a4:	e7a4      	b.n	80265f0 <_printf_i+0x168>
 80266a6:	2301      	movs	r3, #1
 80266a8:	4632      	mov	r2, r6
 80266aa:	4649      	mov	r1, r9
 80266ac:	4640      	mov	r0, r8
 80266ae:	47d0      	blx	sl
 80266b0:	3001      	adds	r0, #1
 80266b2:	d09b      	beq.n	80265ec <_printf_i+0x164>
 80266b4:	3501      	adds	r5, #1
 80266b6:	68e3      	ldr	r3, [r4, #12]
 80266b8:	9903      	ldr	r1, [sp, #12]
 80266ba:	1a5b      	subs	r3, r3, r1
 80266bc:	42ab      	cmp	r3, r5
 80266be:	dcf2      	bgt.n	80266a6 <_printf_i+0x21e>
 80266c0:	e7eb      	b.n	802669a <_printf_i+0x212>
 80266c2:	2500      	movs	r5, #0
 80266c4:	f104 0619 	add.w	r6, r4, #25
 80266c8:	e7f5      	b.n	80266b6 <_printf_i+0x22e>
 80266ca:	bf00      	nop
 80266cc:	08047774 	.word	0x08047774
 80266d0:	08047785 	.word	0x08047785

080266d4 <iprintf>:
 80266d4:	b40f      	push	{r0, r1, r2, r3}
 80266d6:	4b0a      	ldr	r3, [pc, #40]	; (8026700 <iprintf+0x2c>)
 80266d8:	b513      	push	{r0, r1, r4, lr}
 80266da:	681c      	ldr	r4, [r3, #0]
 80266dc:	b124      	cbz	r4, 80266e8 <iprintf+0x14>
 80266de:	69a3      	ldr	r3, [r4, #24]
 80266e0:	b913      	cbnz	r3, 80266e8 <iprintf+0x14>
 80266e2:	4620      	mov	r0, r4
 80266e4:	f7fe fe36 	bl	8025354 <__sinit>
 80266e8:	ab05      	add	r3, sp, #20
 80266ea:	9a04      	ldr	r2, [sp, #16]
 80266ec:	68a1      	ldr	r1, [r4, #8]
 80266ee:	9301      	str	r3, [sp, #4]
 80266f0:	4620      	mov	r0, r4
 80266f2:	f003 fbd3 	bl	8029e9c <_vfiprintf_r>
 80266f6:	b002      	add	sp, #8
 80266f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80266fc:	b004      	add	sp, #16
 80266fe:	4770      	bx	lr
 8026700:	200004c4 	.word	0x200004c4

08026704 <putchar>:
 8026704:	4b09      	ldr	r3, [pc, #36]	; (802672c <putchar+0x28>)
 8026706:	b513      	push	{r0, r1, r4, lr}
 8026708:	681c      	ldr	r4, [r3, #0]
 802670a:	4601      	mov	r1, r0
 802670c:	b134      	cbz	r4, 802671c <putchar+0x18>
 802670e:	69a3      	ldr	r3, [r4, #24]
 8026710:	b923      	cbnz	r3, 802671c <putchar+0x18>
 8026712:	9001      	str	r0, [sp, #4]
 8026714:	4620      	mov	r0, r4
 8026716:	f7fe fe1d 	bl	8025354 <__sinit>
 802671a:	9901      	ldr	r1, [sp, #4]
 802671c:	68a2      	ldr	r2, [r4, #8]
 802671e:	4620      	mov	r0, r4
 8026720:	b002      	add	sp, #8
 8026722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026726:	f003 be3b 	b.w	802a3a0 <_putc_r>
 802672a:	bf00      	nop
 802672c:	200004c4 	.word	0x200004c4

08026730 <_puts_r>:
 8026730:	b570      	push	{r4, r5, r6, lr}
 8026732:	460e      	mov	r6, r1
 8026734:	4605      	mov	r5, r0
 8026736:	b118      	cbz	r0, 8026740 <_puts_r+0x10>
 8026738:	6983      	ldr	r3, [r0, #24]
 802673a:	b90b      	cbnz	r3, 8026740 <_puts_r+0x10>
 802673c:	f7fe fe0a 	bl	8025354 <__sinit>
 8026740:	69ab      	ldr	r3, [r5, #24]
 8026742:	68ac      	ldr	r4, [r5, #8]
 8026744:	b913      	cbnz	r3, 802674c <_puts_r+0x1c>
 8026746:	4628      	mov	r0, r5
 8026748:	f7fe fe04 	bl	8025354 <__sinit>
 802674c:	4b2c      	ldr	r3, [pc, #176]	; (8026800 <_puts_r+0xd0>)
 802674e:	429c      	cmp	r4, r3
 8026750:	d120      	bne.n	8026794 <_puts_r+0x64>
 8026752:	686c      	ldr	r4, [r5, #4]
 8026754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026756:	07db      	lsls	r3, r3, #31
 8026758:	d405      	bmi.n	8026766 <_puts_r+0x36>
 802675a:	89a3      	ldrh	r3, [r4, #12]
 802675c:	0598      	lsls	r0, r3, #22
 802675e:	d402      	bmi.n	8026766 <_puts_r+0x36>
 8026760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026762:	f7fe ffcd 	bl	8025700 <__retarget_lock_acquire_recursive>
 8026766:	89a3      	ldrh	r3, [r4, #12]
 8026768:	0719      	lsls	r1, r3, #28
 802676a:	d51d      	bpl.n	80267a8 <_puts_r+0x78>
 802676c:	6923      	ldr	r3, [r4, #16]
 802676e:	b1db      	cbz	r3, 80267a8 <_puts_r+0x78>
 8026770:	3e01      	subs	r6, #1
 8026772:	68a3      	ldr	r3, [r4, #8]
 8026774:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026778:	3b01      	subs	r3, #1
 802677a:	60a3      	str	r3, [r4, #8]
 802677c:	bb39      	cbnz	r1, 80267ce <_puts_r+0x9e>
 802677e:	2b00      	cmp	r3, #0
 8026780:	da38      	bge.n	80267f4 <_puts_r+0xc4>
 8026782:	4622      	mov	r2, r4
 8026784:	210a      	movs	r1, #10
 8026786:	4628      	mov	r0, r5
 8026788:	f001 fae2 	bl	8027d50 <__swbuf_r>
 802678c:	3001      	adds	r0, #1
 802678e:	d011      	beq.n	80267b4 <_puts_r+0x84>
 8026790:	250a      	movs	r5, #10
 8026792:	e011      	b.n	80267b8 <_puts_r+0x88>
 8026794:	4b1b      	ldr	r3, [pc, #108]	; (8026804 <_puts_r+0xd4>)
 8026796:	429c      	cmp	r4, r3
 8026798:	d101      	bne.n	802679e <_puts_r+0x6e>
 802679a:	68ac      	ldr	r4, [r5, #8]
 802679c:	e7da      	b.n	8026754 <_puts_r+0x24>
 802679e:	4b1a      	ldr	r3, [pc, #104]	; (8026808 <_puts_r+0xd8>)
 80267a0:	429c      	cmp	r4, r3
 80267a2:	bf08      	it	eq
 80267a4:	68ec      	ldreq	r4, [r5, #12]
 80267a6:	e7d5      	b.n	8026754 <_puts_r+0x24>
 80267a8:	4621      	mov	r1, r4
 80267aa:	4628      	mov	r0, r5
 80267ac:	f001 fb34 	bl	8027e18 <__swsetup_r>
 80267b0:	2800      	cmp	r0, #0
 80267b2:	d0dd      	beq.n	8026770 <_puts_r+0x40>
 80267b4:	f04f 35ff 	mov.w	r5, #4294967295
 80267b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80267ba:	07da      	lsls	r2, r3, #31
 80267bc:	d405      	bmi.n	80267ca <_puts_r+0x9a>
 80267be:	89a3      	ldrh	r3, [r4, #12]
 80267c0:	059b      	lsls	r3, r3, #22
 80267c2:	d402      	bmi.n	80267ca <_puts_r+0x9a>
 80267c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80267c6:	f7fe ff9d 	bl	8025704 <__retarget_lock_release_recursive>
 80267ca:	4628      	mov	r0, r5
 80267cc:	bd70      	pop	{r4, r5, r6, pc}
 80267ce:	2b00      	cmp	r3, #0
 80267d0:	da04      	bge.n	80267dc <_puts_r+0xac>
 80267d2:	69a2      	ldr	r2, [r4, #24]
 80267d4:	429a      	cmp	r2, r3
 80267d6:	dc06      	bgt.n	80267e6 <_puts_r+0xb6>
 80267d8:	290a      	cmp	r1, #10
 80267da:	d004      	beq.n	80267e6 <_puts_r+0xb6>
 80267dc:	6823      	ldr	r3, [r4, #0]
 80267de:	1c5a      	adds	r2, r3, #1
 80267e0:	6022      	str	r2, [r4, #0]
 80267e2:	7019      	strb	r1, [r3, #0]
 80267e4:	e7c5      	b.n	8026772 <_puts_r+0x42>
 80267e6:	4622      	mov	r2, r4
 80267e8:	4628      	mov	r0, r5
 80267ea:	f001 fab1 	bl	8027d50 <__swbuf_r>
 80267ee:	3001      	adds	r0, #1
 80267f0:	d1bf      	bne.n	8026772 <_puts_r+0x42>
 80267f2:	e7df      	b.n	80267b4 <_puts_r+0x84>
 80267f4:	6823      	ldr	r3, [r4, #0]
 80267f6:	250a      	movs	r5, #10
 80267f8:	1c5a      	adds	r2, r3, #1
 80267fa:	6022      	str	r2, [r4, #0]
 80267fc:	701d      	strb	r5, [r3, #0]
 80267fe:	e7db      	b.n	80267b8 <_puts_r+0x88>
 8026800:	080475ec 	.word	0x080475ec
 8026804:	0804760c 	.word	0x0804760c
 8026808:	080475cc 	.word	0x080475cc

0802680c <puts>:
 802680c:	4b02      	ldr	r3, [pc, #8]	; (8026818 <puts+0xc>)
 802680e:	4601      	mov	r1, r0
 8026810:	6818      	ldr	r0, [r3, #0]
 8026812:	f7ff bf8d 	b.w	8026730 <_puts_r>
 8026816:	bf00      	nop
 8026818:	200004c4 	.word	0x200004c4

0802681c <rand>:
 802681c:	4b16      	ldr	r3, [pc, #88]	; (8026878 <rand+0x5c>)
 802681e:	b510      	push	{r4, lr}
 8026820:	681c      	ldr	r4, [r3, #0]
 8026822:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026824:	b9b3      	cbnz	r3, 8026854 <rand+0x38>
 8026826:	2018      	movs	r0, #24
 8026828:	f7fe ff6e 	bl	8025708 <malloc>
 802682c:	63a0      	str	r0, [r4, #56]	; 0x38
 802682e:	b928      	cbnz	r0, 802683c <rand+0x20>
 8026830:	4602      	mov	r2, r0
 8026832:	4b12      	ldr	r3, [pc, #72]	; (802687c <rand+0x60>)
 8026834:	4812      	ldr	r0, [pc, #72]	; (8026880 <rand+0x64>)
 8026836:	214e      	movs	r1, #78	; 0x4e
 8026838:	f001 fba8 	bl	8027f8c <__assert_func>
 802683c:	4a11      	ldr	r2, [pc, #68]	; (8026884 <rand+0x68>)
 802683e:	4b12      	ldr	r3, [pc, #72]	; (8026888 <rand+0x6c>)
 8026840:	e9c0 2300 	strd	r2, r3, [r0]
 8026844:	4b11      	ldr	r3, [pc, #68]	; (802688c <rand+0x70>)
 8026846:	6083      	str	r3, [r0, #8]
 8026848:	230b      	movs	r3, #11
 802684a:	8183      	strh	r3, [r0, #12]
 802684c:	2201      	movs	r2, #1
 802684e:	2300      	movs	r3, #0
 8026850:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8026854:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8026856:	4a0e      	ldr	r2, [pc, #56]	; (8026890 <rand+0x74>)
 8026858:	6920      	ldr	r0, [r4, #16]
 802685a:	6963      	ldr	r3, [r4, #20]
 802685c:	490d      	ldr	r1, [pc, #52]	; (8026894 <rand+0x78>)
 802685e:	4342      	muls	r2, r0
 8026860:	fb01 2203 	mla	r2, r1, r3, r2
 8026864:	fba0 0101 	umull	r0, r1, r0, r1
 8026868:	1c43      	adds	r3, r0, #1
 802686a:	eb42 0001 	adc.w	r0, r2, r1
 802686e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8026872:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026876:	bd10      	pop	{r4, pc}
 8026878:	200004c4 	.word	0x200004c4
 802687c:	08047630 	.word	0x08047630
 8026880:	08047796 	.word	0x08047796
 8026884:	abcd330e 	.word	0xabcd330e
 8026888:	e66d1234 	.word	0xe66d1234
 802688c:	0005deec 	.word	0x0005deec
 8026890:	5851f42d 	.word	0x5851f42d
 8026894:	4c957f2d 	.word	0x4c957f2d

08026898 <cleanup_glue>:
 8026898:	b538      	push	{r3, r4, r5, lr}
 802689a:	460c      	mov	r4, r1
 802689c:	6809      	ldr	r1, [r1, #0]
 802689e:	4605      	mov	r5, r0
 80268a0:	b109      	cbz	r1, 80268a6 <cleanup_glue+0xe>
 80268a2:	f7ff fff9 	bl	8026898 <cleanup_glue>
 80268a6:	4621      	mov	r1, r4
 80268a8:	4628      	mov	r0, r5
 80268aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80268ae:	f7ff b9ed 	b.w	8025c8c <_free_r>
 80268b2:	Address 0x00000000080268b2 is out of bounds.


080268b4 <_reclaim_reent>:
 80268b4:	4b2c      	ldr	r3, [pc, #176]	; (8026968 <_reclaim_reent+0xb4>)
 80268b6:	681b      	ldr	r3, [r3, #0]
 80268b8:	4283      	cmp	r3, r0
 80268ba:	b570      	push	{r4, r5, r6, lr}
 80268bc:	4604      	mov	r4, r0
 80268be:	d051      	beq.n	8026964 <_reclaim_reent+0xb0>
 80268c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80268c2:	b143      	cbz	r3, 80268d6 <_reclaim_reent+0x22>
 80268c4:	68db      	ldr	r3, [r3, #12]
 80268c6:	2b00      	cmp	r3, #0
 80268c8:	d14a      	bne.n	8026960 <_reclaim_reent+0xac>
 80268ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80268cc:	6819      	ldr	r1, [r3, #0]
 80268ce:	b111      	cbz	r1, 80268d6 <_reclaim_reent+0x22>
 80268d0:	4620      	mov	r0, r4
 80268d2:	f7ff f9db 	bl	8025c8c <_free_r>
 80268d6:	6961      	ldr	r1, [r4, #20]
 80268d8:	b111      	cbz	r1, 80268e0 <_reclaim_reent+0x2c>
 80268da:	4620      	mov	r0, r4
 80268dc:	f7ff f9d6 	bl	8025c8c <_free_r>
 80268e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80268e2:	b111      	cbz	r1, 80268ea <_reclaim_reent+0x36>
 80268e4:	4620      	mov	r0, r4
 80268e6:	f7ff f9d1 	bl	8025c8c <_free_r>
 80268ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80268ec:	b111      	cbz	r1, 80268f4 <_reclaim_reent+0x40>
 80268ee:	4620      	mov	r0, r4
 80268f0:	f7ff f9cc 	bl	8025c8c <_free_r>
 80268f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80268f6:	b111      	cbz	r1, 80268fe <_reclaim_reent+0x4a>
 80268f8:	4620      	mov	r0, r4
 80268fa:	f7ff f9c7 	bl	8025c8c <_free_r>
 80268fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026900:	b111      	cbz	r1, 8026908 <_reclaim_reent+0x54>
 8026902:	4620      	mov	r0, r4
 8026904:	f7ff f9c2 	bl	8025c8c <_free_r>
 8026908:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802690a:	b111      	cbz	r1, 8026912 <_reclaim_reent+0x5e>
 802690c:	4620      	mov	r0, r4
 802690e:	f7ff f9bd 	bl	8025c8c <_free_r>
 8026912:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8026914:	b111      	cbz	r1, 802691c <_reclaim_reent+0x68>
 8026916:	4620      	mov	r0, r4
 8026918:	f7ff f9b8 	bl	8025c8c <_free_r>
 802691c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802691e:	b111      	cbz	r1, 8026926 <_reclaim_reent+0x72>
 8026920:	4620      	mov	r0, r4
 8026922:	f7ff f9b3 	bl	8025c8c <_free_r>
 8026926:	69a3      	ldr	r3, [r4, #24]
 8026928:	b1e3      	cbz	r3, 8026964 <_reclaim_reent+0xb0>
 802692a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802692c:	4620      	mov	r0, r4
 802692e:	4798      	blx	r3
 8026930:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8026932:	b1b9      	cbz	r1, 8026964 <_reclaim_reent+0xb0>
 8026934:	4620      	mov	r0, r4
 8026936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802693a:	f7ff bfad 	b.w	8026898 <cleanup_glue>
 802693e:	5949      	ldr	r1, [r1, r5]
 8026940:	b941      	cbnz	r1, 8026954 <_reclaim_reent+0xa0>
 8026942:	3504      	adds	r5, #4
 8026944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026946:	2d80      	cmp	r5, #128	; 0x80
 8026948:	68d9      	ldr	r1, [r3, #12]
 802694a:	d1f8      	bne.n	802693e <_reclaim_reent+0x8a>
 802694c:	4620      	mov	r0, r4
 802694e:	f7ff f99d 	bl	8025c8c <_free_r>
 8026952:	e7ba      	b.n	80268ca <_reclaim_reent+0x16>
 8026954:	680e      	ldr	r6, [r1, #0]
 8026956:	4620      	mov	r0, r4
 8026958:	f7ff f998 	bl	8025c8c <_free_r>
 802695c:	4631      	mov	r1, r6
 802695e:	e7ef      	b.n	8026940 <_reclaim_reent+0x8c>
 8026960:	2500      	movs	r5, #0
 8026962:	e7ef      	b.n	8026944 <_reclaim_reent+0x90>
 8026964:	bd70      	pop	{r4, r5, r6, pc}
 8026966:	bf00      	nop
 8026968:	200004c4 	.word	0x200004c4

0802696c <modf>:
 802696c:	b570      	push	{r4, r5, r6, lr}
 802696e:	ed2d 8b02 	vpush	{d8}
 8026972:	eeb0 8b40 	vmov.f64	d8, d0
 8026976:	ee18 5a90 	vmov	r5, s17
 802697a:	4604      	mov	r4, r0
 802697c:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8026980:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 8026984:	2b13      	cmp	r3, #19
 8026986:	ee10 1a10 	vmov	r1, s0
 802698a:	dc23      	bgt.n	80269d4 <modf+0x68>
 802698c:	2b00      	cmp	r3, #0
 802698e:	da09      	bge.n	80269a4 <modf+0x38>
 8026990:	2200      	movs	r2, #0
 8026992:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026996:	e9c4 2300 	strd	r2, r3, [r4]
 802699a:	eeb0 0b48 	vmov.f64	d0, d8
 802699e:	ecbd 8b02 	vpop	{d8}
 80269a2:	bd70      	pop	{r4, r5, r6, pc}
 80269a4:	481d      	ldr	r0, [pc, #116]	; (8026a1c <modf+0xb0>)
 80269a6:	4118      	asrs	r0, r3
 80269a8:	ea05 0300 	and.w	r3, r5, r0
 80269ac:	4319      	orrs	r1, r3
 80269ae:	d107      	bne.n	80269c0 <modf+0x54>
 80269b0:	ed84 0b00 	vstr	d0, [r4]
 80269b4:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80269b8:	460a      	mov	r2, r1
 80269ba:	ec43 2b18 	vmov	d8, r2, r3
 80269be:	e7ec      	b.n	802699a <modf+0x2e>
 80269c0:	2200      	movs	r2, #0
 80269c2:	ea25 0300 	bic.w	r3, r5, r0
 80269c6:	ec43 2b17 	vmov	d7, r2, r3
 80269ca:	e9c4 2300 	strd	r2, r3, [r4]
 80269ce:	ee38 8b47 	vsub.f64	d8, d8, d7
 80269d2:	e7e2      	b.n	802699a <modf+0x2e>
 80269d4:	2b33      	cmp	r3, #51	; 0x33
 80269d6:	dd0d      	ble.n	80269f4 <modf+0x88>
 80269d8:	ed84 0b00 	vstr	d0, [r4]
 80269dc:	f003 fd3a 	bl	802a454 <__fpclassifyd>
 80269e0:	b920      	cbnz	r0, 80269ec <modf+0x80>
 80269e2:	ee38 8b08 	vadd.f64	d8, d8, d8
 80269e6:	ed84 8b00 	vstr	d8, [r4]
 80269ea:	e7d6      	b.n	802699a <modf+0x2e>
 80269ec:	2200      	movs	r2, #0
 80269ee:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80269f2:	e7e2      	b.n	80269ba <modf+0x4e>
 80269f4:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 80269f8:	f04f 30ff 	mov.w	r0, #4294967295
 80269fc:	40d8      	lsrs	r0, r3
 80269fe:	ea11 0600 	ands.w	r6, r1, r0
 8026a02:	d105      	bne.n	8026a10 <modf+0xa4>
 8026a04:	ed84 0b00 	vstr	d0, [r4]
 8026a08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026a0c:	4632      	mov	r2, r6
 8026a0e:	e7d4      	b.n	80269ba <modf+0x4e>
 8026a10:	ee18 3a90 	vmov	r3, s17
 8026a14:	ea21 0200 	bic.w	r2, r1, r0
 8026a18:	e7d5      	b.n	80269c6 <modf+0x5a>
 8026a1a:	bf00      	nop
 8026a1c:	000fffff 	.word	0x000fffff

08026a20 <_sbrk_r>:
 8026a20:	b538      	push	{r3, r4, r5, lr}
 8026a22:	4d06      	ldr	r5, [pc, #24]	; (8026a3c <_sbrk_r+0x1c>)
 8026a24:	2300      	movs	r3, #0
 8026a26:	4604      	mov	r4, r0
 8026a28:	4608      	mov	r0, r1
 8026a2a:	602b      	str	r3, [r5, #0]
 8026a2c:	f7e1 fce8 	bl	8008400 <_sbrk>
 8026a30:	1c43      	adds	r3, r0, #1
 8026a32:	d102      	bne.n	8026a3a <_sbrk_r+0x1a>
 8026a34:	682b      	ldr	r3, [r5, #0]
 8026a36:	b103      	cbz	r3, 8026a3a <_sbrk_r+0x1a>
 8026a38:	6023      	str	r3, [r4, #0]
 8026a3a:	bd38      	pop	{r3, r4, r5, pc}
 8026a3c:	2003013c 	.word	0x2003013c

08026a40 <sniprintf>:
 8026a40:	b40c      	push	{r2, r3}
 8026a42:	b530      	push	{r4, r5, lr}
 8026a44:	4b17      	ldr	r3, [pc, #92]	; (8026aa4 <sniprintf+0x64>)
 8026a46:	1e0c      	subs	r4, r1, #0
 8026a48:	681d      	ldr	r5, [r3, #0]
 8026a4a:	b09d      	sub	sp, #116	; 0x74
 8026a4c:	da08      	bge.n	8026a60 <sniprintf+0x20>
 8026a4e:	238b      	movs	r3, #139	; 0x8b
 8026a50:	602b      	str	r3, [r5, #0]
 8026a52:	f04f 30ff 	mov.w	r0, #4294967295
 8026a56:	b01d      	add	sp, #116	; 0x74
 8026a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026a5c:	b002      	add	sp, #8
 8026a5e:	4770      	bx	lr
 8026a60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8026a64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8026a68:	bf14      	ite	ne
 8026a6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8026a6e:	4623      	moveq	r3, r4
 8026a70:	9304      	str	r3, [sp, #16]
 8026a72:	9307      	str	r3, [sp, #28]
 8026a74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026a78:	9002      	str	r0, [sp, #8]
 8026a7a:	9006      	str	r0, [sp, #24]
 8026a7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8026a80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026a82:	ab21      	add	r3, sp, #132	; 0x84
 8026a84:	a902      	add	r1, sp, #8
 8026a86:	4628      	mov	r0, r5
 8026a88:	9301      	str	r3, [sp, #4]
 8026a8a:	f002 ff0b 	bl	80298a4 <_svfiprintf_r>
 8026a8e:	1c43      	adds	r3, r0, #1
 8026a90:	bfbc      	itt	lt
 8026a92:	238b      	movlt	r3, #139	; 0x8b
 8026a94:	602b      	strlt	r3, [r5, #0]
 8026a96:	2c00      	cmp	r4, #0
 8026a98:	d0dd      	beq.n	8026a56 <sniprintf+0x16>
 8026a9a:	9b02      	ldr	r3, [sp, #8]
 8026a9c:	2200      	movs	r2, #0
 8026a9e:	701a      	strb	r2, [r3, #0]
 8026aa0:	e7d9      	b.n	8026a56 <sniprintf+0x16>
 8026aa2:	bf00      	nop
 8026aa4:	200004c4 	.word	0x200004c4

08026aa8 <siprintf>:
 8026aa8:	b40e      	push	{r1, r2, r3}
 8026aaa:	b500      	push	{lr}
 8026aac:	b09c      	sub	sp, #112	; 0x70
 8026aae:	ab1d      	add	r3, sp, #116	; 0x74
 8026ab0:	9002      	str	r0, [sp, #8]
 8026ab2:	9006      	str	r0, [sp, #24]
 8026ab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026ab8:	4809      	ldr	r0, [pc, #36]	; (8026ae0 <siprintf+0x38>)
 8026aba:	9107      	str	r1, [sp, #28]
 8026abc:	9104      	str	r1, [sp, #16]
 8026abe:	4909      	ldr	r1, [pc, #36]	; (8026ae4 <siprintf+0x3c>)
 8026ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8026ac4:	9105      	str	r1, [sp, #20]
 8026ac6:	6800      	ldr	r0, [r0, #0]
 8026ac8:	9301      	str	r3, [sp, #4]
 8026aca:	a902      	add	r1, sp, #8
 8026acc:	f002 feea 	bl	80298a4 <_svfiprintf_r>
 8026ad0:	9b02      	ldr	r3, [sp, #8]
 8026ad2:	2200      	movs	r2, #0
 8026ad4:	701a      	strb	r2, [r3, #0]
 8026ad6:	b01c      	add	sp, #112	; 0x70
 8026ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8026adc:	b003      	add	sp, #12
 8026ade:	4770      	bx	lr
 8026ae0:	200004c4 	.word	0x200004c4
 8026ae4:	ffff0208 	.word	0xffff0208

08026ae8 <siscanf>:
 8026ae8:	b40e      	push	{r1, r2, r3}
 8026aea:	b510      	push	{r4, lr}
 8026aec:	b09f      	sub	sp, #124	; 0x7c
 8026aee:	ac21      	add	r4, sp, #132	; 0x84
 8026af0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8026af4:	f854 2b04 	ldr.w	r2, [r4], #4
 8026af8:	9201      	str	r2, [sp, #4]
 8026afa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8026afe:	9004      	str	r0, [sp, #16]
 8026b00:	9008      	str	r0, [sp, #32]
 8026b02:	f7d9 fba7 	bl	8000254 <strlen>
 8026b06:	4b0c      	ldr	r3, [pc, #48]	; (8026b38 <siscanf+0x50>)
 8026b08:	9005      	str	r0, [sp, #20]
 8026b0a:	9009      	str	r0, [sp, #36]	; 0x24
 8026b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8026b0e:	480b      	ldr	r0, [pc, #44]	; (8026b3c <siscanf+0x54>)
 8026b10:	9a01      	ldr	r2, [sp, #4]
 8026b12:	6800      	ldr	r0, [r0, #0]
 8026b14:	9403      	str	r4, [sp, #12]
 8026b16:	2300      	movs	r3, #0
 8026b18:	9311      	str	r3, [sp, #68]	; 0x44
 8026b1a:	9316      	str	r3, [sp, #88]	; 0x58
 8026b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026b20:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026b24:	a904      	add	r1, sp, #16
 8026b26:	4623      	mov	r3, r4
 8026b28:	f003 f816 	bl	8029b58 <__ssvfiscanf_r>
 8026b2c:	b01f      	add	sp, #124	; 0x7c
 8026b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026b32:	b003      	add	sp, #12
 8026b34:	4770      	bx	lr
 8026b36:	bf00      	nop
 8026b38:	08026b63 	.word	0x08026b63
 8026b3c:	200004c4 	.word	0x200004c4

08026b40 <__sread>:
 8026b40:	b510      	push	{r4, lr}
 8026b42:	460c      	mov	r4, r1
 8026b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b48:	f003 fc72 	bl	802a430 <_read_r>
 8026b4c:	2800      	cmp	r0, #0
 8026b4e:	bfab      	itete	ge
 8026b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026b52:	89a3      	ldrhlt	r3, [r4, #12]
 8026b54:	181b      	addge	r3, r3, r0
 8026b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026b5a:	bfac      	ite	ge
 8026b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8026b5e:	81a3      	strhlt	r3, [r4, #12]
 8026b60:	bd10      	pop	{r4, pc}

08026b62 <__seofread>:
 8026b62:	2000      	movs	r0, #0
 8026b64:	4770      	bx	lr

08026b66 <__swrite>:
 8026b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b6a:	461f      	mov	r7, r3
 8026b6c:	898b      	ldrh	r3, [r1, #12]
 8026b6e:	05db      	lsls	r3, r3, #23
 8026b70:	4605      	mov	r5, r0
 8026b72:	460c      	mov	r4, r1
 8026b74:	4616      	mov	r6, r2
 8026b76:	d505      	bpl.n	8026b84 <__swrite+0x1e>
 8026b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b7c:	2302      	movs	r3, #2
 8026b7e:	2200      	movs	r2, #0
 8026b80:	f002 fa16 	bl	8028fb0 <_lseek_r>
 8026b84:	89a3      	ldrh	r3, [r4, #12]
 8026b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026b8e:	81a3      	strh	r3, [r4, #12]
 8026b90:	4632      	mov	r2, r6
 8026b92:	463b      	mov	r3, r7
 8026b94:	4628      	mov	r0, r5
 8026b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026b9a:	f001 b92b 	b.w	8027df4 <_write_r>

08026b9e <__sseek>:
 8026b9e:	b510      	push	{r4, lr}
 8026ba0:	460c      	mov	r4, r1
 8026ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026ba6:	f002 fa03 	bl	8028fb0 <_lseek_r>
 8026baa:	1c43      	adds	r3, r0, #1
 8026bac:	89a3      	ldrh	r3, [r4, #12]
 8026bae:	bf15      	itete	ne
 8026bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8026bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026bba:	81a3      	strheq	r3, [r4, #12]
 8026bbc:	bf18      	it	ne
 8026bbe:	81a3      	strhne	r3, [r4, #12]
 8026bc0:	bd10      	pop	{r4, pc}

08026bc2 <__sclose>:
 8026bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bc6:	f001 b9ff 	b.w	8027fc8 <_close_r>

08026bca <stpcpy>:
 8026bca:	4603      	mov	r3, r0
 8026bcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026bd0:	4618      	mov	r0, r3
 8026bd2:	f803 2b01 	strb.w	r2, [r3], #1
 8026bd6:	2a00      	cmp	r2, #0
 8026bd8:	d1f8      	bne.n	8026bcc <stpcpy+0x2>
 8026bda:	4770      	bx	lr

08026bdc <strcat>:
 8026bdc:	b510      	push	{r4, lr}
 8026bde:	4602      	mov	r2, r0
 8026be0:	7814      	ldrb	r4, [r2, #0]
 8026be2:	4613      	mov	r3, r2
 8026be4:	3201      	adds	r2, #1
 8026be6:	2c00      	cmp	r4, #0
 8026be8:	d1fa      	bne.n	8026be0 <strcat+0x4>
 8026bea:	3b01      	subs	r3, #1
 8026bec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026bf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026bf4:	2a00      	cmp	r2, #0
 8026bf6:	d1f9      	bne.n	8026bec <strcat+0x10>
 8026bf8:	bd10      	pop	{r4, pc}

08026bfa <strchr>:
 8026bfa:	b2c9      	uxtb	r1, r1
 8026bfc:	4603      	mov	r3, r0
 8026bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026c02:	b11a      	cbz	r2, 8026c0c <strchr+0x12>
 8026c04:	428a      	cmp	r2, r1
 8026c06:	d1f9      	bne.n	8026bfc <strchr+0x2>
 8026c08:	4618      	mov	r0, r3
 8026c0a:	4770      	bx	lr
 8026c0c:	2900      	cmp	r1, #0
 8026c0e:	bf18      	it	ne
 8026c10:	2300      	movne	r3, #0
 8026c12:	e7f9      	b.n	8026c08 <strchr+0xe>

08026c14 <strcpy>:
 8026c14:	4603      	mov	r3, r0
 8026c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026c1a:	f803 2b01 	strb.w	r2, [r3], #1
 8026c1e:	2a00      	cmp	r2, #0
 8026c20:	d1f9      	bne.n	8026c16 <strcpy+0x2>
 8026c22:	4770      	bx	lr

08026c24 <iso_year_adjust>:
 8026c24:	6942      	ldr	r2, [r0, #20]
 8026c26:	2a00      	cmp	r2, #0
 8026c28:	f240 736c 	movw	r3, #1900	; 0x76c
 8026c2c:	bfa8      	it	ge
 8026c2e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8026c32:	4413      	add	r3, r2
 8026c34:	0792      	lsls	r2, r2, #30
 8026c36:	d105      	bne.n	8026c44 <iso_year_adjust+0x20>
 8026c38:	2164      	movs	r1, #100	; 0x64
 8026c3a:	fb93 f2f1 	sdiv	r2, r3, r1
 8026c3e:	fb01 3212 	mls	r2, r1, r2, r3
 8026c42:	b9da      	cbnz	r2, 8026c7c <iso_year_adjust+0x58>
 8026c44:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8026c48:	fb93 f1f2 	sdiv	r1, r3, r2
 8026c4c:	fb02 3311 	mls	r3, r2, r1, r3
 8026c50:	fab3 f383 	clz	r3, r3
 8026c54:	095b      	lsrs	r3, r3, #5
 8026c56:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8026c5a:	0040      	lsls	r0, r0, #1
 8026c5c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8026c60:	4418      	add	r0, r3
 8026c62:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8026c66:	4298      	cmp	r0, r3
 8026c68:	d03a      	beq.n	8026ce0 <iso_year_adjust+0xbc>
 8026c6a:	dc21      	bgt.n	8026cb0 <iso_year_adjust+0x8c>
 8026c6c:	2801      	cmp	r0, #1
 8026c6e:	dc1a      	bgt.n	8026ca6 <iso_year_adjust+0x82>
 8026c70:	2800      	cmp	r0, #0
 8026c72:	bfb4      	ite	lt
 8026c74:	2000      	movlt	r0, #0
 8026c76:	f04f 30ff 	movge.w	r0, #4294967295
 8026c7a:	4770      	bx	lr
 8026c7c:	2301      	movs	r3, #1
 8026c7e:	e7ea      	b.n	8026c56 <iso_year_adjust+0x32>
 8026c80:	2817      	cmp	r0, #23
 8026c82:	d813      	bhi.n	8026cac <iso_year_adjust+0x88>
 8026c84:	e8df f000 	tbb	[pc, r0]
 8026c88:	0c0c0c0c 	.word	0x0c0c0c0c
 8026c8c:	0c0c1212 	.word	0x0c0c1212
 8026c90:	12121212 	.word	0x12121212
 8026c94:	12121212 	.word	0x12121212
 8026c98:	0c0c1212 	.word	0x0c0c1212
 8026c9c:	0c0c1212 	.word	0x0c0c1212
 8026ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8026ca4:	4770      	bx	lr
 8026ca6:	380a      	subs	r0, #10
 8026ca8:	2817      	cmp	r0, #23
 8026caa:	d9e9      	bls.n	8026c80 <iso_year_adjust+0x5c>
 8026cac:	2000      	movs	r0, #0
 8026cae:	4770      	bx	lr
 8026cb0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8026cb4:	4298      	cmp	r0, r3
 8026cb6:	dc06      	bgt.n	8026cc6 <iso_year_adjust+0xa2>
 8026cb8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8026cbc:	4298      	cmp	r0, r3
 8026cbe:	bfd4      	ite	le
 8026cc0:	2000      	movle	r0, #0
 8026cc2:	2001      	movgt	r0, #1
 8026cc4:	4770      	bx	lr
 8026cc6:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8026cca:	3802      	subs	r0, #2
 8026ccc:	2815      	cmp	r0, #21
 8026cce:	d8ed      	bhi.n	8026cac <iso_year_adjust+0x88>
 8026cd0:	2301      	movs	r3, #1
 8026cd2:	4083      	lsls	r3, r0
 8026cd4:	4803      	ldr	r0, [pc, #12]	; (8026ce4 <iso_year_adjust+0xc0>)
 8026cd6:	4018      	ands	r0, r3
 8026cd8:	3800      	subs	r0, #0
 8026cda:	bf18      	it	ne
 8026cdc:	2001      	movne	r0, #1
 8026cde:	4770      	bx	lr
 8026ce0:	2001      	movs	r0, #1
 8026ce2:	4770      	bx	lr
 8026ce4:	002a001f 	.word	0x002a001f

08026ce8 <__strftime.isra.0>:
 8026ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cec:	b08f      	sub	sp, #60	; 0x3c
 8026cee:	461e      	mov	r6, r3
 8026cf0:	2300      	movs	r3, #0
 8026cf2:	4607      	mov	r7, r0
 8026cf4:	460d      	mov	r5, r1
 8026cf6:	9302      	str	r3, [sp, #8]
 8026cf8:	461c      	mov	r4, r3
 8026cfa:	7813      	ldrb	r3, [r2, #0]
 8026cfc:	2b00      	cmp	r3, #0
 8026cfe:	f000 84ba 	beq.w	8027676 <__strftime.isra.0+0x98e>
 8026d02:	2b25      	cmp	r3, #37	; 0x25
 8026d04:	d11f      	bne.n	8026d46 <__strftime.isra.0+0x5e>
 8026d06:	f892 b001 	ldrb.w	fp, [r2, #1]
 8026d0a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8026d0e:	d024      	beq.n	8026d5a <__strftime.isra.0+0x72>
 8026d10:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8026d14:	d021      	beq.n	8026d5a <__strftime.isra.0+0x72>
 8026d16:	f102 0801 	add.w	r8, r2, #1
 8026d1a:	f04f 0b00 	mov.w	fp, #0
 8026d1e:	f898 2000 	ldrb.w	r2, [r8]
 8026d22:	3a31      	subs	r2, #49	; 0x31
 8026d24:	2a08      	cmp	r2, #8
 8026d26:	d81b      	bhi.n	8026d60 <__strftime.isra.0+0x78>
 8026d28:	4640      	mov	r0, r8
 8026d2a:	220a      	movs	r2, #10
 8026d2c:	a906      	add	r1, sp, #24
 8026d2e:	f000 fdc9 	bl	80278c4 <strtoul>
 8026d32:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026d36:	4681      	mov	r9, r0
 8026d38:	f898 2000 	ldrb.w	r2, [r8]
 8026d3c:	2a45      	cmp	r2, #69	; 0x45
 8026d3e:	d112      	bne.n	8026d66 <__strftime.isra.0+0x7e>
 8026d40:	f108 0801 	add.w	r8, r8, #1
 8026d44:	e011      	b.n	8026d6a <__strftime.isra.0+0x82>
 8026d46:	1e69      	subs	r1, r5, #1
 8026d48:	42a1      	cmp	r1, r4
 8026d4a:	d802      	bhi.n	8026d52 <__strftime.isra.0+0x6a>
 8026d4c:	2400      	movs	r4, #0
 8026d4e:	f000 bc95 	b.w	802767c <__strftime.isra.0+0x994>
 8026d52:	553b      	strb	r3, [r7, r4]
 8026d54:	3201      	adds	r2, #1
 8026d56:	3401      	adds	r4, #1
 8026d58:	e7cf      	b.n	8026cfa <__strftime.isra.0+0x12>
 8026d5a:	f102 0802 	add.w	r8, r2, #2
 8026d5e:	e7de      	b.n	8026d1e <__strftime.isra.0+0x36>
 8026d60:	f04f 0900 	mov.w	r9, #0
 8026d64:	e7e8      	b.n	8026d38 <__strftime.isra.0+0x50>
 8026d66:	2a4f      	cmp	r2, #79	; 0x4f
 8026d68:	d0ea      	beq.n	8026d40 <__strftime.isra.0+0x58>
 8026d6a:	f898 0000 	ldrb.w	r0, [r8]
 8026d6e:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8026d72:	2a55      	cmp	r2, #85	; 0x55
 8026d74:	d8ea      	bhi.n	8026d4c <__strftime.isra.0+0x64>
 8026d76:	a301      	add	r3, pc, #4	; (adr r3, 8026d7c <__strftime.isra.0+0x94>)
 8026d78:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8026d7c:	0802766b 	.word	0x0802766b
 8026d80:	08026d4d 	.word	0x08026d4d
 8026d84:	08026d4d 	.word	0x08026d4d
 8026d88:	08026d4d 	.word	0x08026d4d
 8026d8c:	08026d4d 	.word	0x08026d4d
 8026d90:	08026d4d 	.word	0x08026d4d
 8026d94:	08026d4d 	.word	0x08026d4d
 8026d98:	08026d4d 	.word	0x08026d4d
 8026d9c:	08026d4d 	.word	0x08026d4d
 8026da0:	08026d4d 	.word	0x08026d4d
 8026da4:	08026d4d 	.word	0x08026d4d
 8026da8:	08026d4d 	.word	0x08026d4d
 8026dac:	08026d4d 	.word	0x08026d4d
 8026db0:	08026d4d 	.word	0x08026d4d
 8026db4:	08026d4d 	.word	0x08026d4d
 8026db8:	08026d4d 	.word	0x08026d4d
 8026dbc:	08026d4d 	.word	0x08026d4d
 8026dc0:	08026d4d 	.word	0x08026d4d
 8026dc4:	08026d4d 	.word	0x08026d4d
 8026dc8:	08026d4d 	.word	0x08026d4d
 8026dcc:	08026d4d 	.word	0x08026d4d
 8026dd0:	08026d4d 	.word	0x08026d4d
 8026dd4:	08026d4d 	.word	0x08026d4d
 8026dd8:	08026d4d 	.word	0x08026d4d
 8026ddc:	08026d4d 	.word	0x08026d4d
 8026de0:	08026d4d 	.word	0x08026d4d
 8026de4:	08026d4d 	.word	0x08026d4d
 8026de8:	08026d4d 	.word	0x08026d4d
 8026dec:	08026f11 	.word	0x08026f11
 8026df0:	08026f69 	.word	0x08026f69
 8026df4:	08026fd7 	.word	0x08026fd7
 8026df8:	08027075 	.word	0x08027075
 8026dfc:	08026d4d 	.word	0x08026d4d
 8026e00:	080270c1 	.word	0x080270c1
 8026e04:	080271ad 	.word	0x080271ad
 8026e08:	08027287 	.word	0x08027287
 8026e0c:	08027295 	.word	0x08027295
 8026e10:	08026d4d 	.word	0x08026d4d
 8026e14:	08026d4d 	.word	0x08026d4d
 8026e18:	08026d4d 	.word	0x08026d4d
 8026e1c:	080272c5 	.word	0x080272c5
 8026e20:	08026d4d 	.word	0x08026d4d
 8026e24:	08026d4d 	.word	0x08026d4d
 8026e28:	080272d9 	.word	0x080272d9
 8026e2c:	08026d4d 	.word	0x08026d4d
 8026e30:	0802732b 	.word	0x0802732b
 8026e34:	0802743f 	.word	0x0802743f
 8026e38:	0802744f 	.word	0x0802744f
 8026e3c:	08027477 	.word	0x08027477
 8026e40:	080274b1 	.word	0x080274b1
 8026e44:	08027525 	.word	0x08027525
 8026e48:	08026fcf 	.word	0x08026fcf
 8026e4c:	08027551 	.word	0x08027551
 8026e50:	08027619 	.word	0x08027619
 8026e54:	08026d4d 	.word	0x08026d4d
 8026e58:	08026d4d 	.word	0x08026d4d
 8026e5c:	08026d4d 	.word	0x08026d4d
 8026e60:	08026d4d 	.word	0x08026d4d
 8026e64:	08026d4d 	.word	0x08026d4d
 8026e68:	08026d4d 	.word	0x08026d4d
 8026e6c:	08026ed5 	.word	0x08026ed5
 8026e70:	08026f3f 	.word	0x08026f3f
 8026e74:	08026f95 	.word	0x08026f95
 8026e78:	08027051 	.word	0x08027051
 8026e7c:	08027051 	.word	0x08027051
 8026e80:	08026d4d 	.word	0x08026d4d
 8026e84:	08027113 	.word	0x08027113
 8026e88:	08026f3f 	.word	0x08026f3f
 8026e8c:	08026d4d 	.word	0x08026d4d
 8026e90:	080272b7 	.word	0x080272b7
 8026e94:	08027287 	.word	0x08027287
 8026e98:	08027295 	.word	0x08027295
 8026e9c:	080272bf 	.word	0x080272bf
 8026ea0:	080272c9 	.word	0x080272c9
 8026ea4:	08026d4d 	.word	0x08026d4d
 8026ea8:	080272d9 	.word	0x080272d9
 8026eac:	08026d4d 	.word	0x08026d4d
 8026eb0:	08026fbf 	.word	0x08026fbf
 8026eb4:	0802733d 	.word	0x0802733d
 8026eb8:	08027443 	.word	0x08027443
 8026ebc:	0802745d 	.word	0x0802745d
 8026ec0:	08026d4d 	.word	0x08026d4d
 8026ec4:	08027517 	.word	0x08027517
 8026ec8:	08026fc7 	.word	0x08026fc7
 8026ecc:	08027535 	.word	0x08027535
 8026ed0:	080275a3 	.word	0x080275a3
 8026ed4:	69b3      	ldr	r3, [r6, #24]
 8026ed6:	4aa9      	ldr	r2, [pc, #676]	; (802717c <__strftime.isra.0+0x494>)
 8026ed8:	3318      	adds	r3, #24
 8026eda:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026ede:	4648      	mov	r0, r9
 8026ee0:	f7d9 f9b8 	bl	8000254 <strlen>
 8026ee4:	f109 39ff 	add.w	r9, r9, #4294967295
 8026ee8:	4420      	add	r0, r4
 8026eea:	1e6b      	subs	r3, r5, #1
 8026eec:	42a0      	cmp	r0, r4
 8026eee:	d107      	bne.n	8026f00 <__strftime.isra.0+0x218>
 8026ef0:	f898 3000 	ldrb.w	r3, [r8]
 8026ef4:	2b00      	cmp	r3, #0
 8026ef6:	f000 83be 	beq.w	8027676 <__strftime.isra.0+0x98e>
 8026efa:	f108 0201 	add.w	r2, r8, #1
 8026efe:	e6fc      	b.n	8026cfa <__strftime.isra.0+0x12>
 8026f00:	42a3      	cmp	r3, r4
 8026f02:	f67f af23 	bls.w	8026d4c <__strftime.isra.0+0x64>
 8026f06:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026f0a:	553a      	strb	r2, [r7, r4]
 8026f0c:	3401      	adds	r4, #1
 8026f0e:	e7ed      	b.n	8026eec <__strftime.isra.0+0x204>
 8026f10:	69b2      	ldr	r2, [r6, #24]
 8026f12:	4b9a      	ldr	r3, [pc, #616]	; (802717c <__strftime.isra.0+0x494>)
 8026f14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026f18:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8026f1c:	4648      	mov	r0, r9
 8026f1e:	f7d9 f999 	bl	8000254 <strlen>
 8026f22:	f109 39ff 	add.w	r9, r9, #4294967295
 8026f26:	4420      	add	r0, r4
 8026f28:	1e6b      	subs	r3, r5, #1
 8026f2a:	42a0      	cmp	r0, r4
 8026f2c:	d0e0      	beq.n	8026ef0 <__strftime.isra.0+0x208>
 8026f2e:	42a3      	cmp	r3, r4
 8026f30:	f67f af0c 	bls.w	8026d4c <__strftime.isra.0+0x64>
 8026f34:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026f38:	553a      	strb	r2, [r7, r4]
 8026f3a:	3401      	adds	r4, #1
 8026f3c:	e7f5      	b.n	8026f2a <__strftime.isra.0+0x242>
 8026f3e:	4b8f      	ldr	r3, [pc, #572]	; (802717c <__strftime.isra.0+0x494>)
 8026f40:	6932      	ldr	r2, [r6, #16]
 8026f42:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8026f46:	4648      	mov	r0, r9
 8026f48:	f7d9 f984 	bl	8000254 <strlen>
 8026f4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8026f50:	4420      	add	r0, r4
 8026f52:	1e6b      	subs	r3, r5, #1
 8026f54:	42a0      	cmp	r0, r4
 8026f56:	d0cb      	beq.n	8026ef0 <__strftime.isra.0+0x208>
 8026f58:	42a3      	cmp	r3, r4
 8026f5a:	f67f aef7 	bls.w	8026d4c <__strftime.isra.0+0x64>
 8026f5e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026f62:	553a      	strb	r2, [r7, r4]
 8026f64:	3401      	adds	r4, #1
 8026f66:	e7f5      	b.n	8026f54 <__strftime.isra.0+0x26c>
 8026f68:	6933      	ldr	r3, [r6, #16]
 8026f6a:	4a84      	ldr	r2, [pc, #528]	; (802717c <__strftime.isra.0+0x494>)
 8026f6c:	330c      	adds	r3, #12
 8026f6e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026f72:	4648      	mov	r0, r9
 8026f74:	f7d9 f96e 	bl	8000254 <strlen>
 8026f78:	f109 39ff 	add.w	r9, r9, #4294967295
 8026f7c:	4420      	add	r0, r4
 8026f7e:	1e6b      	subs	r3, r5, #1
 8026f80:	42a0      	cmp	r0, r4
 8026f82:	d0b5      	beq.n	8026ef0 <__strftime.isra.0+0x208>
 8026f84:	42a3      	cmp	r3, r4
 8026f86:	f67f aee1 	bls.w	8026d4c <__strftime.isra.0+0x64>
 8026f8a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026f8e:	553a      	strb	r2, [r7, r4]
 8026f90:	3401      	adds	r4, #1
 8026f92:	e7f5      	b.n	8026f80 <__strftime.isra.0+0x298>
 8026f94:	4b79      	ldr	r3, [pc, #484]	; (802717c <__strftime.isra.0+0x494>)
 8026f96:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8026f9a:	4648      	mov	r0, r9
 8026f9c:	f7d9 f95a 	bl	8000254 <strlen>
 8026fa0:	f899 3000 	ldrb.w	r3, [r9]
 8026fa4:	2b00      	cmp	r3, #0
 8026fa6:	d0a3      	beq.n	8026ef0 <__strftime.isra.0+0x208>
 8026fa8:	4633      	mov	r3, r6
 8026faa:	464a      	mov	r2, r9
 8026fac:	1b29      	subs	r1, r5, r4
 8026fae:	1938      	adds	r0, r7, r4
 8026fb0:	f7ff fe9a 	bl	8026ce8 <__strftime.isra.0>
 8026fb4:	2800      	cmp	r0, #0
 8026fb6:	f77f aec9 	ble.w	8026d4c <__strftime.isra.0+0x64>
 8026fba:	4404      	add	r4, r0
 8026fbc:	e798      	b.n	8026ef0 <__strftime.isra.0+0x208>
 8026fbe:	4b6f      	ldr	r3, [pc, #444]	; (802717c <__strftime.isra.0+0x494>)
 8026fc0:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8026fc4:	e7e9      	b.n	8026f9a <__strftime.isra.0+0x2b2>
 8026fc6:	4b6d      	ldr	r3, [pc, #436]	; (802717c <__strftime.isra.0+0x494>)
 8026fc8:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8026fcc:	e7e5      	b.n	8026f9a <__strftime.isra.0+0x2b2>
 8026fce:	4b6b      	ldr	r3, [pc, #428]	; (802717c <__strftime.isra.0+0x494>)
 8026fd0:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8026fd4:	e7e1      	b.n	8026f9a <__strftime.isra.0+0x2b2>
 8026fd6:	496a      	ldr	r1, [pc, #424]	; (8027180 <__strftime.isra.0+0x498>)
 8026fd8:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8026fdc:	458a      	cmp	sl, r1
 8026fde:	bfac      	ite	ge
 8026fe0:	2100      	movge	r1, #0
 8026fe2:	2101      	movlt	r1, #1
 8026fe4:	f1ba 0f00 	cmp.w	sl, #0
 8026fe8:	db11      	blt.n	802700e <__strftime.isra.0+0x326>
 8026fea:	2064      	movs	r0, #100	; 0x64
 8026fec:	fb9a f0f0 	sdiv	r0, sl, r0
 8026ff0:	3013      	adds	r0, #19
 8026ff2:	f1bb 0f00 	cmp.w	fp, #0
 8026ff6:	d014      	beq.n	8027022 <__strftime.isra.0+0x33a>
 8026ff8:	2863      	cmp	r0, #99	; 0x63
 8026ffa:	dd27      	ble.n	802704c <__strftime.isra.0+0x364>
 8026ffc:	4b61      	ldr	r3, [pc, #388]	; (8027184 <__strftime.isra.0+0x49c>)
 8026ffe:	4a62      	ldr	r2, [pc, #392]	; (8027188 <__strftime.isra.0+0x4a0>)
 8027000:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8027004:	bf18      	it	ne
 8027006:	461a      	movne	r2, r3
 8027008:	f8df c198 	ldr.w	ip, [pc, #408]	; 80271a4 <__strftime.isra.0+0x4bc>
 802700c:	e00c      	b.n	8027028 <__strftime.isra.0+0x340>
 802700e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8027012:	9103      	str	r1, [sp, #12]
 8027014:	f000 ff6e 	bl	8027ef4 <abs>
 8027018:	2264      	movs	r2, #100	; 0x64
 802701a:	9903      	ldr	r1, [sp, #12]
 802701c:	fb90 f0f2 	sdiv	r0, r0, r2
 8027020:	e7e7      	b.n	8026ff2 <__strftime.isra.0+0x30a>
 8027022:	4a58      	ldr	r2, [pc, #352]	; (8027184 <__strftime.isra.0+0x49c>)
 8027024:	f8df c180 	ldr.w	ip, [pc, #384]	; 80271a8 <__strftime.isra.0+0x4c0>
 8027028:	4b58      	ldr	r3, [pc, #352]	; (802718c <__strftime.isra.0+0x4a4>)
 802702a:	9001      	str	r0, [sp, #4]
 802702c:	f1b9 0f02 	cmp.w	r9, #2
 8027030:	bf2c      	ite	cs
 8027032:	ebc1 0109 	rsbcs	r1, r1, r9
 8027036:	f1c1 0102 	rsbcc	r1, r1, #2
 802703a:	9100      	str	r1, [sp, #0]
 802703c:	4950      	ldr	r1, [pc, #320]	; (8027180 <__strftime.isra.0+0x498>)
 802703e:	458a      	cmp	sl, r1
 8027040:	bfa8      	it	ge
 8027042:	4613      	movge	r3, r2
 8027044:	4662      	mov	r2, ip
 8027046:	1b29      	subs	r1, r5, r4
 8027048:	1938      	adds	r0, r7, r4
 802704a:	e028      	b.n	802709e <__strftime.isra.0+0x3b6>
 802704c:	4a4d      	ldr	r2, [pc, #308]	; (8027184 <__strftime.isra.0+0x49c>)
 802704e:	e7db      	b.n	8027008 <__strftime.isra.0+0x320>
 8027050:	494f      	ldr	r1, [pc, #316]	; (8027190 <__strftime.isra.0+0x4a8>)
 8027052:	4a50      	ldr	r2, [pc, #320]	; (8027194 <__strftime.isra.0+0x4ac>)
 8027054:	68f3      	ldr	r3, [r6, #12]
 8027056:	2864      	cmp	r0, #100	; 0x64
 8027058:	bf08      	it	eq
 802705a:	460a      	moveq	r2, r1
 802705c:	1b29      	subs	r1, r5, r4
 802705e:	1938      	adds	r0, r7, r4
 8027060:	f7ff fcee 	bl	8026a40 <sniprintf>
 8027064:	2800      	cmp	r0, #0
 8027066:	f6ff ae71 	blt.w	8026d4c <__strftime.isra.0+0x64>
 802706a:	4404      	add	r4, r0
 802706c:	42a5      	cmp	r5, r4
 802706e:	f63f af3f 	bhi.w	8026ef0 <__strftime.isra.0+0x208>
 8027072:	e66b      	b.n	8026d4c <__strftime.isra.0+0x64>
 8027074:	6970      	ldr	r0, [r6, #20]
 8027076:	6933      	ldr	r3, [r6, #16]
 8027078:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 802707c:	2800      	cmp	r0, #0
 802707e:	eb07 0904 	add.w	r9, r7, r4
 8027082:	eba5 0104 	sub.w	r1, r5, r4
 8027086:	f103 0301 	add.w	r3, r3, #1
 802708a:	db0b      	blt.n	80270a4 <__strftime.isra.0+0x3bc>
 802708c:	2264      	movs	r2, #100	; 0x64
 802708e:	fb90 fcf2 	sdiv	ip, r0, r2
 8027092:	fb02 001c 	mls	r0, r2, ip, r0
 8027096:	4a40      	ldr	r2, [pc, #256]	; (8027198 <__strftime.isra.0+0x4b0>)
 8027098:	e9cd a000 	strd	sl, r0, [sp]
 802709c:	4648      	mov	r0, r9
 802709e:	f7ff fccf 	bl	8026a40 <sniprintf>
 80270a2:	e7df      	b.n	8027064 <__strftime.isra.0+0x37c>
 80270a4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80270a8:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80270ac:	f000 ff22 	bl	8027ef4 <abs>
 80270b0:	2264      	movs	r2, #100	; 0x64
 80270b2:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 80270b6:	fb90 fcf2 	sdiv	ip, r0, r2
 80270ba:	fb0c 0012 	mls	r0, ip, r2, r0
 80270be:	e7ea      	b.n	8027096 <__strftime.isra.0+0x3ae>
 80270c0:	2225      	movs	r2, #37	; 0x25
 80270c2:	f88d 2018 	strb.w	r2, [sp, #24]
 80270c6:	f1bb 0f00 	cmp.w	fp, #0
 80270ca:	d011      	beq.n	80270f0 <__strftime.isra.0+0x408>
 80270cc:	f1b9 0f06 	cmp.w	r9, #6
 80270d0:	bf38      	it	cc
 80270d2:	f04f 0906 	movcc.w	r9, #6
 80270d6:	f1b9 0306 	subs.w	r3, r9, #6
 80270da:	f88d b019 	strb.w	fp, [sp, #25]
 80270de:	d10c      	bne.n	80270fa <__strftime.isra.0+0x412>
 80270e0:	f10d 001a 	add.w	r0, sp, #26
 80270e4:	492d      	ldr	r1, [pc, #180]	; (802719c <__strftime.isra.0+0x4b4>)
 80270e6:	f7ff fd95 	bl	8026c14 <strcpy>
 80270ea:	4633      	mov	r3, r6
 80270ec:	aa06      	add	r2, sp, #24
 80270ee:	e75d      	b.n	8026fac <__strftime.isra.0+0x2c4>
 80270f0:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 80270f4:	f04f 090a 	mov.w	r9, #10
 80270f8:	e7ed      	b.n	80270d6 <__strftime.isra.0+0x3ee>
 80270fa:	4a29      	ldr	r2, [pc, #164]	; (80271a0 <__strftime.isra.0+0x4b8>)
 80270fc:	211e      	movs	r1, #30
 80270fe:	f10d 001a 	add.w	r0, sp, #26
 8027102:	f7ff fc9d 	bl	8026a40 <sniprintf>
 8027106:	2800      	cmp	r0, #0
 8027108:	ddea      	ble.n	80270e0 <__strftime.isra.0+0x3f8>
 802710a:	f10d 031a 	add.w	r3, sp, #26
 802710e:	4418      	add	r0, r3
 8027110:	e7e8      	b.n	80270e4 <__strftime.isra.0+0x3fc>
 8027112:	4630      	mov	r0, r6
 8027114:	f7ff fd86 	bl	8026c24 <iso_year_adjust>
 8027118:	4681      	mov	r9, r0
 802711a:	6970      	ldr	r0, [r6, #20]
 802711c:	2800      	cmp	r0, #0
 802711e:	db11      	blt.n	8027144 <__strftime.isra.0+0x45c>
 8027120:	2364      	movs	r3, #100	; 0x64
 8027122:	fb90 f2f3 	sdiv	r2, r0, r3
 8027126:	fb03 0012 	mls	r0, r3, r2, r0
 802712a:	2264      	movs	r2, #100	; 0x64
 802712c:	4481      	add	r9, r0
 802712e:	fb99 f3f2 	sdiv	r3, r9, r2
 8027132:	fb02 9913 	mls	r9, r2, r3, r9
 8027136:	4491      	add	r9, r2
 8027138:	fbb9 f3f2 	udiv	r3, r9, r2
 802713c:	fb02 9313 	mls	r3, r2, r3, r9
 8027140:	4a13      	ldr	r2, [pc, #76]	; (8027190 <__strftime.isra.0+0x4a8>)
 8027142:	e78b      	b.n	802705c <__strftime.isra.0+0x374>
 8027144:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8027148:	f000 fed4 	bl	8027ef4 <abs>
 802714c:	2364      	movs	r3, #100	; 0x64
 802714e:	f1b9 0f00 	cmp.w	r9, #0
 8027152:	fb90 f2f3 	sdiv	r2, r0, r3
 8027156:	fb02 0013 	mls	r0, r2, r3, r0
 802715a:	da07      	bge.n	802716c <__strftime.isra.0+0x484>
 802715c:	6972      	ldr	r2, [r6, #20]
 802715e:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8027162:	429a      	cmp	r2, r3
 8027164:	bfb8      	it	lt
 8027166:	f04f 0901 	movlt.w	r9, #1
 802716a:	e7de      	b.n	802712a <__strftime.isra.0+0x442>
 802716c:	d0dd      	beq.n	802712a <__strftime.isra.0+0x442>
 802716e:	6972      	ldr	r2, [r6, #20]
 8027170:	4b03      	ldr	r3, [pc, #12]	; (8027180 <__strftime.isra.0+0x498>)
 8027172:	429a      	cmp	r2, r3
 8027174:	bfb8      	it	lt
 8027176:	f04f 39ff 	movlt.w	r9, #4294967295
 802717a:	e7d6      	b.n	802712a <__strftime.isra.0+0x442>
 802717c:	08047978 	.word	0x08047978
 8027180:	fffff894 	.word	0xfffff894
 8027184:	08047b2b 	.word	0x08047b2b
 8027188:	08047800 	.word	0x08047800
 802718c:	08047d86 	.word	0x08047d86
 8027190:	08047810 	.word	0x08047810
 8027194:	08047802 	.word	0x08047802
 8027198:	08047806 	.word	0x08047806
 802719c:	08047819 	.word	0x08047819
 80271a0:	08047815 	.word	0x08047815
 80271a4:	080477f8 	.word	0x080477f8
 80271a8:	080477f1 	.word	0x080477f1
 80271ac:	6971      	ldr	r1, [r6, #20]
 80271ae:	4ab6      	ldr	r2, [pc, #728]	; (8027488 <__strftime.isra.0+0x7a0>)
 80271b0:	4291      	cmp	r1, r2
 80271b2:	bfac      	ite	ge
 80271b4:	2300      	movge	r3, #0
 80271b6:	2301      	movlt	r3, #1
 80271b8:	4630      	mov	r0, r6
 80271ba:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80271be:	f7ff fd31 	bl	8026c24 <iso_year_adjust>
 80271c2:	9904      	ldr	r1, [sp, #16]
 80271c4:	2900      	cmp	r1, #0
 80271c6:	4682      	mov	sl, r0
 80271c8:	db2c      	blt.n	8027224 <__strftime.isra.0+0x53c>
 80271ca:	2264      	movs	r2, #100	; 0x64
 80271cc:	fb91 f2f2 	sdiv	r2, r1, r2
 80271d0:	3213      	adds	r2, #19
 80271d2:	6970      	ldr	r0, [r6, #20]
 80271d4:	2800      	cmp	r0, #0
 80271d6:	db30      	blt.n	802723a <__strftime.isra.0+0x552>
 80271d8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80271dc:	fb90 fefc 	sdiv	lr, r0, ip
 80271e0:	fb0c 001e 	mls	r0, ip, lr, r0
 80271e4:	f1ba 0f00 	cmp.w	sl, #0
 80271e8:	da36      	bge.n	8027258 <__strftime.isra.0+0x570>
 80271ea:	6971      	ldr	r1, [r6, #20]
 80271ec:	4ba7      	ldr	r3, [pc, #668]	; (802748c <__strftime.isra.0+0x7a4>)
 80271ee:	4299      	cmp	r1, r3
 80271f0:	db3d      	blt.n	802726e <__strftime.isra.0+0x586>
 80271f2:	4482      	add	sl, r0
 80271f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80271f8:	d13e      	bne.n	8027278 <__strftime.isra.0+0x590>
 80271fa:	3a01      	subs	r2, #1
 80271fc:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8027200:	9b03      	ldr	r3, [sp, #12]
 8027202:	2064      	movs	r0, #100	; 0x64
 8027204:	fb00 aa02 	mla	sl, r0, r2, sl
 8027208:	2b00      	cmp	r3, #0
 802720a:	f000 81ad 	beq.w	8027568 <__strftime.isra.0+0x880>
 802720e:	222d      	movs	r2, #45	; 0x2d
 8027210:	f88d 2018 	strb.w	r2, [sp, #24]
 8027214:	f1b9 0f00 	cmp.w	r9, #0
 8027218:	d001      	beq.n	802721e <__strftime.isra.0+0x536>
 802721a:	f109 39ff 	add.w	r9, r9, #4294967295
 802721e:	f10d 0219 	add.w	r2, sp, #25
 8027222:	e1ac      	b.n	802757e <__strftime.isra.0+0x896>
 8027224:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8027228:	9104      	str	r1, [sp, #16]
 802722a:	f000 fe63 	bl	8027ef4 <abs>
 802722e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8027232:	9904      	ldr	r1, [sp, #16]
 8027234:	fb90 f2fc 	sdiv	r2, r0, ip
 8027238:	e7cb      	b.n	80271d2 <__strftime.isra.0+0x4ea>
 802723a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802723e:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8027242:	f000 fe57 	bl	8027ef4 <abs>
 8027246:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802724a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802724e:	fb90 fefc 	sdiv	lr, r0, ip
 8027252:	fb0e 001c 	mls	r0, lr, ip, r0
 8027256:	e7c5      	b.n	80271e4 <__strftime.isra.0+0x4fc>
 8027258:	d0cb      	beq.n	80271f2 <__strftime.isra.0+0x50a>
 802725a:	4b8b      	ldr	r3, [pc, #556]	; (8027488 <__strftime.isra.0+0x7a0>)
 802725c:	4299      	cmp	r1, r3
 802725e:	bfb4      	ite	lt
 8027260:	2301      	movlt	r3, #1
 8027262:	2300      	movge	r3, #0
 8027264:	9303      	str	r3, [sp, #12]
 8027266:	bfb8      	it	lt
 8027268:	f04f 3aff 	movlt.w	sl, #4294967295
 802726c:	e7c1      	b.n	80271f2 <__strftime.isra.0+0x50a>
 802726e:	f04f 0a01 	mov.w	sl, #1
 8027272:	f8cd a00c 	str.w	sl, [sp, #12]
 8027276:	e7bc      	b.n	80271f2 <__strftime.isra.0+0x50a>
 8027278:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 802727c:	bf04      	itt	eq
 802727e:	3201      	addeq	r2, #1
 8027280:	f04f 0a00 	moveq.w	sl, #0
 8027284:	e7bc      	b.n	8027200 <__strftime.isra.0+0x518>
 8027286:	4982      	ldr	r1, [pc, #520]	; (8027490 <__strftime.isra.0+0x7a8>)
 8027288:	4a82      	ldr	r2, [pc, #520]	; (8027494 <__strftime.isra.0+0x7ac>)
 802728a:	68b3      	ldr	r3, [r6, #8]
 802728c:	286b      	cmp	r0, #107	; 0x6b
 802728e:	bf08      	it	eq
 8027290:	460a      	moveq	r2, r1
 8027292:	e6e3      	b.n	802705c <__strftime.isra.0+0x374>
 8027294:	68b3      	ldr	r3, [r6, #8]
 8027296:	b163      	cbz	r3, 80272b2 <__strftime.isra.0+0x5ca>
 8027298:	2b0c      	cmp	r3, #12
 802729a:	d004      	beq.n	80272a6 <__strftime.isra.0+0x5be>
 802729c:	210c      	movs	r1, #12
 802729e:	fb93 f2f1 	sdiv	r2, r3, r1
 80272a2:	fb01 3312 	mls	r3, r1, r2, r3
 80272a6:	497b      	ldr	r1, [pc, #492]	; (8027494 <__strftime.isra.0+0x7ac>)
 80272a8:	4a79      	ldr	r2, [pc, #484]	; (8027490 <__strftime.isra.0+0x7a8>)
 80272aa:	2849      	cmp	r0, #73	; 0x49
 80272ac:	bf08      	it	eq
 80272ae:	460a      	moveq	r2, r1
 80272b0:	e6d4      	b.n	802705c <__strftime.isra.0+0x374>
 80272b2:	230c      	movs	r3, #12
 80272b4:	e7f7      	b.n	80272a6 <__strftime.isra.0+0x5be>
 80272b6:	69f3      	ldr	r3, [r6, #28]
 80272b8:	4a77      	ldr	r2, [pc, #476]	; (8027498 <__strftime.isra.0+0x7b0>)
 80272ba:	3301      	adds	r3, #1
 80272bc:	e6ce      	b.n	802705c <__strftime.isra.0+0x374>
 80272be:	6933      	ldr	r3, [r6, #16]
 80272c0:	3301      	adds	r3, #1
 80272c2:	e73d      	b.n	8027140 <__strftime.isra.0+0x458>
 80272c4:	6873      	ldr	r3, [r6, #4]
 80272c6:	e73b      	b.n	8027140 <__strftime.isra.0+0x458>
 80272c8:	1e6b      	subs	r3, r5, #1
 80272ca:	429c      	cmp	r4, r3
 80272cc:	f4bf ad3e 	bcs.w	8026d4c <__strftime.isra.0+0x64>
 80272d0:	230a      	movs	r3, #10
 80272d2:	553b      	strb	r3, [r7, r4]
 80272d4:	3401      	adds	r4, #1
 80272d6:	e60b      	b.n	8026ef0 <__strftime.isra.0+0x208>
 80272d8:	68b3      	ldr	r3, [r6, #8]
 80272da:	2b0b      	cmp	r3, #11
 80272dc:	4b6f      	ldr	r3, [pc, #444]	; (802749c <__strftime.isra.0+0x7b4>)
 80272de:	bfd4      	ite	le
 80272e0:	2200      	movle	r2, #0
 80272e2:	2201      	movgt	r2, #1
 80272e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80272e8:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 80272ec:	4648      	mov	r0, r9
 80272ee:	f7d8 ffb1 	bl	8000254 <strlen>
 80272f2:	f109 32ff 	add.w	r2, r9, #4294967295
 80272f6:	4420      	add	r0, r4
 80272f8:	f105 3cff 	add.w	ip, r5, #4294967295
 80272fc:	42a0      	cmp	r0, r4
 80272fe:	f43f adf7 	beq.w	8026ef0 <__strftime.isra.0+0x208>
 8027302:	45a4      	cmp	ip, r4
 8027304:	f67f ad22 	bls.w	8026d4c <__strftime.isra.0+0x64>
 8027308:	f898 1000 	ldrb.w	r1, [r8]
 802730c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8027310:	2950      	cmp	r1, #80	; 0x50
 8027312:	d107      	bne.n	8027324 <__strftime.isra.0+0x63c>
 8027314:	4962      	ldr	r1, [pc, #392]	; (80274a0 <__strftime.isra.0+0x7b8>)
 8027316:	5cc9      	ldrb	r1, [r1, r3]
 8027318:	f001 0103 	and.w	r1, r1, #3
 802731c:	2901      	cmp	r1, #1
 802731e:	bf08      	it	eq
 8027320:	3320      	addeq	r3, #32
 8027322:	b2db      	uxtb	r3, r3
 8027324:	553b      	strb	r3, [r7, r4]
 8027326:	3401      	adds	r4, #1
 8027328:	e7e8      	b.n	80272fc <__strftime.isra.0+0x614>
 802732a:	6873      	ldr	r3, [r6, #4]
 802732c:	9300      	str	r3, [sp, #0]
 802732e:	4a5d      	ldr	r2, [pc, #372]	; (80274a4 <__strftime.isra.0+0x7bc>)
 8027330:	68b3      	ldr	r3, [r6, #8]
 8027332:	1b29      	subs	r1, r5, r4
 8027334:	1938      	adds	r0, r7, r4
 8027336:	f7ff fb83 	bl	8026a40 <sniprintf>
 802733a:	e693      	b.n	8027064 <__strftime.isra.0+0x37c>
 802733c:	6a33      	ldr	r3, [r6, #32]
 802733e:	2b00      	cmp	r3, #0
 8027340:	db7a      	blt.n	8027438 <__strftime.isra.0+0x750>
 8027342:	f000 fb73 	bl	8027a2c <__tz_lock>
 8027346:	9b02      	ldr	r3, [sp, #8]
 8027348:	b90b      	cbnz	r3, 802734e <__strftime.isra.0+0x666>
 802734a:	f000 fb7b 	bl	8027a44 <_tzset_unlocked>
 802734e:	f001 fd77 	bl	8028e40 <__gettzinfo>
 8027352:	6a33      	ldr	r3, [r6, #32]
 8027354:	2b00      	cmp	r3, #0
 8027356:	bfd4      	ite	le
 8027358:	2200      	movle	r2, #0
 802735a:	2201      	movgt	r2, #1
 802735c:	2328      	movs	r3, #40	; 0x28
 802735e:	fb02 3303 	mla	r3, r2, r3, r3
 8027362:	58c3      	ldr	r3, [r0, r3]
 8027364:	f1c3 0900 	rsb	r9, r3, #0
 8027368:	f000 fb66 	bl	8027a38 <__tz_unlock>
 802736c:	2301      	movs	r3, #1
 802736e:	9302      	str	r3, [sp, #8]
 8027370:	6972      	ldr	r2, [r6, #20]
 8027372:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8027376:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802737a:	f16c 0c00 	sbc.w	ip, ip, #0
 802737e:	f1bc 0f00 	cmp.w	ip, #0
 8027382:	eba5 0104 	sub.w	r1, r5, r4
 8027386:	eb07 0004 	add.w	r0, r7, r4
 802738a:	da02      	bge.n	8027392 <__strftime.isra.0+0x6aa>
 802738c:	3303      	adds	r3, #3
 802738e:	f14c 0c00 	adc.w	ip, ip, #0
 8027392:	089b      	lsrs	r3, r3, #2
 8027394:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8027398:	f102 3aff 	add.w	sl, r2, #4294967295
 802739c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 80273a0:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80273a4:	fb9a fefe 	sdiv	lr, sl, lr
 80273a8:	ebb3 030e 	subs.w	r3, r3, lr
 80273ac:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 80273b0:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 80273b4:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 80273b8:	fb9a fefe 	sdiv	lr, sl, lr
 80273bc:	eb13 030e 	adds.w	r3, r3, lr
 80273c0:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 80273c4:	3a46      	subs	r2, #70	; 0x46
 80273c6:	f240 1c6d 	movw	ip, #365	; 0x16d
 80273ca:	fb0c f202 	mul.w	r2, ip, r2
 80273ce:	189b      	adds	r3, r3, r2
 80273d0:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 80273d4:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 80273d8:	f04f 0c18 	mov.w	ip, #24
 80273dc:	eb13 030e 	adds.w	r3, r3, lr
 80273e0:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80273e4:	fba3 3e0c 	umull	r3, lr, r3, ip
 80273e8:	fb0c e202 	mla	r2, ip, r2, lr
 80273ec:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80273f0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80273f4:	eb13 030e 	adds.w	r3, r3, lr
 80273f8:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 80273fc:	fba3 320c 	umull	r3, r2, r3, ip
 8027400:	fb0c 220e 	mla	r2, ip, lr, r2
 8027404:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8027408:	eb13 030e 	adds.w	r3, r3, lr
 802740c:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027410:	fba3 3e0c 	umull	r3, lr, r3, ip
 8027414:	fb0c e202 	mla	r2, ip, r2, lr
 8027418:	f8d6 e000 	ldr.w	lr, [r6]
 802741c:	eb13 030e 	adds.w	r3, r3, lr
 8027420:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027424:	ebb3 0309 	subs.w	r3, r3, r9
 8027428:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 802742c:	e9cd 3200 	strd	r3, r2, [sp]
 8027430:	4a1d      	ldr	r2, [pc, #116]	; (80274a8 <__strftime.isra.0+0x7c0>)
 8027432:	f7ff fb05 	bl	8026a40 <sniprintf>
 8027436:	e615      	b.n	8027064 <__strftime.isra.0+0x37c>
 8027438:	f04f 0900 	mov.w	r9, #0
 802743c:	e798      	b.n	8027370 <__strftime.isra.0+0x688>
 802743e:	6833      	ldr	r3, [r6, #0]
 8027440:	e67e      	b.n	8027140 <__strftime.isra.0+0x458>
 8027442:	1e6b      	subs	r3, r5, #1
 8027444:	429c      	cmp	r4, r3
 8027446:	f4bf ac81 	bcs.w	8026d4c <__strftime.isra.0+0x64>
 802744a:	2309      	movs	r3, #9
 802744c:	e741      	b.n	80272d2 <__strftime.isra.0+0x5ea>
 802744e:	6833      	ldr	r3, [r6, #0]
 8027450:	9301      	str	r3, [sp, #4]
 8027452:	6873      	ldr	r3, [r6, #4]
 8027454:	9300      	str	r3, [sp, #0]
 8027456:	4a15      	ldr	r2, [pc, #84]	; (80274ac <__strftime.isra.0+0x7c4>)
 8027458:	68b3      	ldr	r3, [r6, #8]
 802745a:	e5f4      	b.n	8027046 <__strftime.isra.0+0x35e>
 802745c:	1e6b      	subs	r3, r5, #1
 802745e:	429c      	cmp	r4, r3
 8027460:	f4bf ac74 	bcs.w	8026d4c <__strftime.isra.0+0x64>
 8027464:	69b3      	ldr	r3, [r6, #24]
 8027466:	1c62      	adds	r2, r4, #1
 8027468:	b91b      	cbnz	r3, 8027472 <__strftime.isra.0+0x78a>
 802746a:	2337      	movs	r3, #55	; 0x37
 802746c:	553b      	strb	r3, [r7, r4]
 802746e:	4614      	mov	r4, r2
 8027470:	e53e      	b.n	8026ef0 <__strftime.isra.0+0x208>
 8027472:	3330      	adds	r3, #48	; 0x30
 8027474:	e7fa      	b.n	802746c <__strftime.isra.0+0x784>
 8027476:	69f3      	ldr	r3, [r6, #28]
 8027478:	69b2      	ldr	r2, [r6, #24]
 802747a:	3307      	adds	r3, #7
 802747c:	1a9b      	subs	r3, r3, r2
 802747e:	2207      	movs	r2, #7
 8027480:	fb93 f3f2 	sdiv	r3, r3, r2
 8027484:	e65c      	b.n	8027140 <__strftime.isra.0+0x458>
 8027486:	bf00      	nop
 8027488:	fffff894 	.word	0xfffff894
 802748c:	fffff895 	.word	0xfffff895
 8027490:	08047802 	.word	0x08047802
 8027494:	08047810 	.word	0x08047810
 8027498:	08047825 	.word	0x08047825
 802749c:	08047978 	.word	0x08047978
 80274a0:	080474c9 	.word	0x080474c9
 80274a4:	08047834 	.word	0x08047834
 80274a8:	0804782a 	.word	0x0804782a
 80274ac:	0804782f 	.word	0x0804782f
 80274b0:	4630      	mov	r0, r6
 80274b2:	f7ff fbb7 	bl	8026c24 <iso_year_adjust>
 80274b6:	69b2      	ldr	r2, [r6, #24]
 80274b8:	b132      	cbz	r2, 80274c8 <__strftime.isra.0+0x7e0>
 80274ba:	3a01      	subs	r2, #1
 80274bc:	2800      	cmp	r0, #0
 80274be:	dc28      	bgt.n	8027512 <__strftime.isra.0+0x82a>
 80274c0:	69f3      	ldr	r3, [r6, #28]
 80274c2:	d103      	bne.n	80274cc <__strftime.isra.0+0x7e4>
 80274c4:	330a      	adds	r3, #10
 80274c6:	e7d9      	b.n	802747c <__strftime.isra.0+0x794>
 80274c8:	2206      	movs	r2, #6
 80274ca:	e7f7      	b.n	80274bc <__strftime.isra.0+0x7d4>
 80274cc:	6971      	ldr	r1, [r6, #20]
 80274ce:	2900      	cmp	r1, #0
 80274d0:	eba2 0203 	sub.w	r2, r2, r3
 80274d4:	f240 736b 	movw	r3, #1899	; 0x76b
 80274d8:	bfa8      	it	ge
 80274da:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 80274de:	440b      	add	r3, r1
 80274e0:	0799      	lsls	r1, r3, #30
 80274e2:	d105      	bne.n	80274f0 <__strftime.isra.0+0x808>
 80274e4:	2064      	movs	r0, #100	; 0x64
 80274e6:	fb93 f1f0 	sdiv	r1, r3, r0
 80274ea:	fb00 3111 	mls	r1, r0, r1, r3
 80274ee:	b971      	cbnz	r1, 802750e <__strftime.isra.0+0x826>
 80274f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80274f4:	fb93 f0f1 	sdiv	r0, r3, r1
 80274f8:	fb01 3310 	mls	r3, r1, r0, r3
 80274fc:	fab3 f383 	clz	r3, r3
 8027500:	095b      	lsrs	r3, r3, #5
 8027502:	1ad3      	subs	r3, r2, r3
 8027504:	2b05      	cmp	r3, #5
 8027506:	bfb4      	ite	lt
 8027508:	2335      	movlt	r3, #53	; 0x35
 802750a:	2334      	movge	r3, #52	; 0x34
 802750c:	e618      	b.n	8027140 <__strftime.isra.0+0x458>
 802750e:	2301      	movs	r3, #1
 8027510:	e7f7      	b.n	8027502 <__strftime.isra.0+0x81a>
 8027512:	2301      	movs	r3, #1
 8027514:	e614      	b.n	8027140 <__strftime.isra.0+0x458>
 8027516:	1e6b      	subs	r3, r5, #1
 8027518:	429c      	cmp	r4, r3
 802751a:	f4bf ac17 	bcs.w	8026d4c <__strftime.isra.0+0x64>
 802751e:	69b3      	ldr	r3, [r6, #24]
 8027520:	3330      	adds	r3, #48	; 0x30
 8027522:	e6d6      	b.n	80272d2 <__strftime.isra.0+0x5ea>
 8027524:	69b2      	ldr	r2, [r6, #24]
 8027526:	b11a      	cbz	r2, 8027530 <__strftime.isra.0+0x848>
 8027528:	3a01      	subs	r2, #1
 802752a:	69f3      	ldr	r3, [r6, #28]
 802752c:	3307      	adds	r3, #7
 802752e:	e7a5      	b.n	802747c <__strftime.isra.0+0x794>
 8027530:	2206      	movs	r2, #6
 8027532:	e7fa      	b.n	802752a <__strftime.isra.0+0x842>
 8027534:	6970      	ldr	r0, [r6, #20]
 8027536:	2800      	cmp	r0, #0
 8027538:	db05      	blt.n	8027546 <__strftime.isra.0+0x85e>
 802753a:	2364      	movs	r3, #100	; 0x64
 802753c:	fb90 f2f3 	sdiv	r2, r0, r3
 8027540:	fb02 0313 	mls	r3, r2, r3, r0
 8027544:	e5fc      	b.n	8027140 <__strftime.isra.0+0x458>
 8027546:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802754a:	f000 fcd3 	bl	8027ef4 <abs>
 802754e:	e7f4      	b.n	802753a <__strftime.isra.0+0x852>
 8027550:	6972      	ldr	r2, [r6, #20]
 8027552:	494c      	ldr	r1, [pc, #304]	; (8027684 <__strftime.isra.0+0x99c>)
 8027554:	428a      	cmp	r2, r1
 8027556:	da05      	bge.n	8027564 <__strftime.isra.0+0x87c>
 8027558:	202d      	movs	r0, #45	; 0x2d
 802755a:	f88d 0018 	strb.w	r0, [sp, #24]
 802755e:	eba1 0a02 	sub.w	sl, r1, r2
 8027562:	e657      	b.n	8027214 <__strftime.isra.0+0x52c>
 8027564:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8027568:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 802756c:	d106      	bne.n	802757c <__strftime.isra.0+0x894>
 802756e:	f242 720f 	movw	r2, #9999	; 0x270f
 8027572:	4592      	cmp	sl, r2
 8027574:	d902      	bls.n	802757c <__strftime.isra.0+0x894>
 8027576:	f88d b018 	strb.w	fp, [sp, #24]
 802757a:	e64b      	b.n	8027214 <__strftime.isra.0+0x52c>
 802757c:	aa06      	add	r2, sp, #24
 802757e:	2125      	movs	r1, #37	; 0x25
 8027580:	7011      	strb	r1, [r2, #0]
 8027582:	f1bb 0f00 	cmp.w	fp, #0
 8027586:	d108      	bne.n	802759a <__strftime.isra.0+0x8b2>
 8027588:	1c50      	adds	r0, r2, #1
 802758a:	493f      	ldr	r1, [pc, #252]	; (8027688 <__strftime.isra.0+0x9a0>)
 802758c:	f7ff fb42 	bl	8026c14 <strcpy>
 8027590:	f8cd a000 	str.w	sl, [sp]
 8027594:	464b      	mov	r3, r9
 8027596:	aa06      	add	r2, sp, #24
 8027598:	e6cb      	b.n	8027332 <__strftime.isra.0+0x64a>
 802759a:	2330      	movs	r3, #48	; 0x30
 802759c:	1c90      	adds	r0, r2, #2
 802759e:	7053      	strb	r3, [r2, #1]
 80275a0:	e7f3      	b.n	802758a <__strftime.isra.0+0x8a2>
 80275a2:	6a33      	ldr	r3, [r6, #32]
 80275a4:	2b00      	cmp	r3, #0
 80275a6:	f6ff aca3 	blt.w	8026ef0 <__strftime.isra.0+0x208>
 80275aa:	f000 fa3f 	bl	8027a2c <__tz_lock>
 80275ae:	9b02      	ldr	r3, [sp, #8]
 80275b0:	b90b      	cbnz	r3, 80275b6 <__strftime.isra.0+0x8ce>
 80275b2:	f000 fa47 	bl	8027a44 <_tzset_unlocked>
 80275b6:	f001 fc43 	bl	8028e40 <__gettzinfo>
 80275ba:	6a33      	ldr	r3, [r6, #32]
 80275bc:	2b00      	cmp	r3, #0
 80275be:	bfd4      	ite	le
 80275c0:	2200      	movle	r2, #0
 80275c2:	2201      	movgt	r2, #1
 80275c4:	2328      	movs	r3, #40	; 0x28
 80275c6:	fb02 3303 	mla	r3, r2, r3, r3
 80275ca:	eb07 0a04 	add.w	sl, r7, r4
 80275ce:	58c3      	ldr	r3, [r0, r3]
 80275d0:	f1c3 0900 	rsb	r9, r3, #0
 80275d4:	f000 fa30 	bl	8027a38 <__tz_unlock>
 80275d8:	233c      	movs	r3, #60	; 0x3c
 80275da:	fb99 f0f3 	sdiv	r0, r9, r3
 80275de:	f001 fcdf 	bl	8028fa0 <labs>
 80275e2:	233c      	movs	r3, #60	; 0x3c
 80275e4:	eba5 0b04 	sub.w	fp, r5, r4
 80275e8:	fb90 f2f3 	sdiv	r2, r0, r3
 80275ec:	fb02 0013 	mls	r0, r2, r3, r0
 80275f0:	9000      	str	r0, [sp, #0]
 80275f2:	4a26      	ldr	r2, [pc, #152]	; (802768c <__strftime.isra.0+0x9a4>)
 80275f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80275f8:	4659      	mov	r1, fp
 80275fa:	4650      	mov	r0, sl
 80275fc:	fb99 f3f3 	sdiv	r3, r9, r3
 8027600:	f7ff fa1e 	bl	8026a40 <sniprintf>
 8027604:	2800      	cmp	r0, #0
 8027606:	f6ff aba1 	blt.w	8026d4c <__strftime.isra.0+0x64>
 802760a:	4404      	add	r4, r0
 802760c:	42a5      	cmp	r5, r4
 802760e:	f67f ab9d 	bls.w	8026d4c <__strftime.isra.0+0x64>
 8027612:	2301      	movs	r3, #1
 8027614:	9302      	str	r3, [sp, #8]
 8027616:	e46b      	b.n	8026ef0 <__strftime.isra.0+0x208>
 8027618:	6a33      	ldr	r3, [r6, #32]
 802761a:	2b00      	cmp	r3, #0
 802761c:	f6ff ac68 	blt.w	8026ef0 <__strftime.isra.0+0x208>
 8027620:	f000 fa04 	bl	8027a2c <__tz_lock>
 8027624:	9b02      	ldr	r3, [sp, #8]
 8027626:	b90b      	cbnz	r3, 802762c <__strftime.isra.0+0x944>
 8027628:	f000 fa0c 	bl	8027a44 <_tzset_unlocked>
 802762c:	6a33      	ldr	r3, [r6, #32]
 802762e:	4a18      	ldr	r2, [pc, #96]	; (8027690 <__strftime.isra.0+0x9a8>)
 8027630:	2b00      	cmp	r3, #0
 8027632:	bfd4      	ite	le
 8027634:	2300      	movle	r3, #0
 8027636:	2301      	movgt	r3, #1
 8027638:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802763c:	4648      	mov	r0, r9
 802763e:	f7d8 fe09 	bl	8000254 <strlen>
 8027642:	f109 39ff 	add.w	r9, r9, #4294967295
 8027646:	4420      	add	r0, r4
 8027648:	1e6b      	subs	r3, r5, #1
 802764a:	42a0      	cmp	r0, r4
 802764c:	d102      	bne.n	8027654 <__strftime.isra.0+0x96c>
 802764e:	f000 f9f3 	bl	8027a38 <__tz_unlock>
 8027652:	e7de      	b.n	8027612 <__strftime.isra.0+0x92a>
 8027654:	42a3      	cmp	r3, r4
 8027656:	d904      	bls.n	8027662 <__strftime.isra.0+0x97a>
 8027658:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802765c:	553a      	strb	r2, [r7, r4]
 802765e:	3401      	adds	r4, #1
 8027660:	e7f3      	b.n	802764a <__strftime.isra.0+0x962>
 8027662:	f000 f9e9 	bl	8027a38 <__tz_unlock>
 8027666:	f7ff bb71 	b.w	8026d4c <__strftime.isra.0+0x64>
 802766a:	1e6b      	subs	r3, r5, #1
 802766c:	429c      	cmp	r4, r3
 802766e:	f4bf ab6d 	bcs.w	8026d4c <__strftime.isra.0+0x64>
 8027672:	2325      	movs	r3, #37	; 0x25
 8027674:	e62d      	b.n	80272d2 <__strftime.isra.0+0x5ea>
 8027676:	b10d      	cbz	r5, 802767c <__strftime.isra.0+0x994>
 8027678:	2300      	movs	r3, #0
 802767a:	553b      	strb	r3, [r7, r4]
 802767c:	4620      	mov	r0, r4
 802767e:	b00f      	add	sp, #60	; 0x3c
 8027680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027684:	fffff894 	.word	0xfffff894
 8027688:	08047821 	.word	0x08047821
 802768c:	0804783e 	.word	0x0804783e
 8027690:	20000528 	.word	0x20000528

08027694 <strftime>:
 8027694:	f7ff bb28 	b.w	8026ce8 <__strftime.isra.0>

08027698 <strncmp>:
 8027698:	b510      	push	{r4, lr}
 802769a:	b17a      	cbz	r2, 80276bc <strncmp+0x24>
 802769c:	4603      	mov	r3, r0
 802769e:	3901      	subs	r1, #1
 80276a0:	1884      	adds	r4, r0, r2
 80276a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80276a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80276aa:	4290      	cmp	r0, r2
 80276ac:	d101      	bne.n	80276b2 <strncmp+0x1a>
 80276ae:	42a3      	cmp	r3, r4
 80276b0:	d101      	bne.n	80276b6 <strncmp+0x1e>
 80276b2:	1a80      	subs	r0, r0, r2
 80276b4:	bd10      	pop	{r4, pc}
 80276b6:	2800      	cmp	r0, #0
 80276b8:	d1f3      	bne.n	80276a2 <strncmp+0xa>
 80276ba:	e7fa      	b.n	80276b2 <strncmp+0x1a>
 80276bc:	4610      	mov	r0, r2
 80276be:	e7f9      	b.n	80276b4 <strncmp+0x1c>

080276c0 <_strtol_l.constprop.0>:
 80276c0:	2b01      	cmp	r3, #1
 80276c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80276c6:	d001      	beq.n	80276cc <_strtol_l.constprop.0+0xc>
 80276c8:	2b24      	cmp	r3, #36	; 0x24
 80276ca:	d906      	bls.n	80276da <_strtol_l.constprop.0+0x1a>
 80276cc:	f001 fa9a 	bl	8028c04 <__errno>
 80276d0:	2316      	movs	r3, #22
 80276d2:	6003      	str	r3, [r0, #0]
 80276d4:	2000      	movs	r0, #0
 80276d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80276da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80277c0 <_strtol_l.constprop.0+0x100>
 80276de:	460d      	mov	r5, r1
 80276e0:	462e      	mov	r6, r5
 80276e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80276e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80276ea:	f017 0708 	ands.w	r7, r7, #8
 80276ee:	d1f7      	bne.n	80276e0 <_strtol_l.constprop.0+0x20>
 80276f0:	2c2d      	cmp	r4, #45	; 0x2d
 80276f2:	d132      	bne.n	802775a <_strtol_l.constprop.0+0x9a>
 80276f4:	782c      	ldrb	r4, [r5, #0]
 80276f6:	2701      	movs	r7, #1
 80276f8:	1cb5      	adds	r5, r6, #2
 80276fa:	2b00      	cmp	r3, #0
 80276fc:	d05b      	beq.n	80277b6 <_strtol_l.constprop.0+0xf6>
 80276fe:	2b10      	cmp	r3, #16
 8027700:	d109      	bne.n	8027716 <_strtol_l.constprop.0+0x56>
 8027702:	2c30      	cmp	r4, #48	; 0x30
 8027704:	d107      	bne.n	8027716 <_strtol_l.constprop.0+0x56>
 8027706:	782c      	ldrb	r4, [r5, #0]
 8027708:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802770c:	2c58      	cmp	r4, #88	; 0x58
 802770e:	d14d      	bne.n	80277ac <_strtol_l.constprop.0+0xec>
 8027710:	786c      	ldrb	r4, [r5, #1]
 8027712:	2310      	movs	r3, #16
 8027714:	3502      	adds	r5, #2
 8027716:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802771a:	f108 38ff 	add.w	r8, r8, #4294967295
 802771e:	f04f 0c00 	mov.w	ip, #0
 8027722:	fbb8 f9f3 	udiv	r9, r8, r3
 8027726:	4666      	mov	r6, ip
 8027728:	fb03 8a19 	mls	sl, r3, r9, r8
 802772c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8027730:	f1be 0f09 	cmp.w	lr, #9
 8027734:	d816      	bhi.n	8027764 <_strtol_l.constprop.0+0xa4>
 8027736:	4674      	mov	r4, lr
 8027738:	42a3      	cmp	r3, r4
 802773a:	dd24      	ble.n	8027786 <_strtol_l.constprop.0+0xc6>
 802773c:	f1bc 0f00 	cmp.w	ip, #0
 8027740:	db1e      	blt.n	8027780 <_strtol_l.constprop.0+0xc0>
 8027742:	45b1      	cmp	r9, r6
 8027744:	d31c      	bcc.n	8027780 <_strtol_l.constprop.0+0xc0>
 8027746:	d101      	bne.n	802774c <_strtol_l.constprop.0+0x8c>
 8027748:	45a2      	cmp	sl, r4
 802774a:	db19      	blt.n	8027780 <_strtol_l.constprop.0+0xc0>
 802774c:	fb06 4603 	mla	r6, r6, r3, r4
 8027750:	f04f 0c01 	mov.w	ip, #1
 8027754:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027758:	e7e8      	b.n	802772c <_strtol_l.constprop.0+0x6c>
 802775a:	2c2b      	cmp	r4, #43	; 0x2b
 802775c:	bf04      	itt	eq
 802775e:	782c      	ldrbeq	r4, [r5, #0]
 8027760:	1cb5      	addeq	r5, r6, #2
 8027762:	e7ca      	b.n	80276fa <_strtol_l.constprop.0+0x3a>
 8027764:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8027768:	f1be 0f19 	cmp.w	lr, #25
 802776c:	d801      	bhi.n	8027772 <_strtol_l.constprop.0+0xb2>
 802776e:	3c37      	subs	r4, #55	; 0x37
 8027770:	e7e2      	b.n	8027738 <_strtol_l.constprop.0+0x78>
 8027772:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8027776:	f1be 0f19 	cmp.w	lr, #25
 802777a:	d804      	bhi.n	8027786 <_strtol_l.constprop.0+0xc6>
 802777c:	3c57      	subs	r4, #87	; 0x57
 802777e:	e7db      	b.n	8027738 <_strtol_l.constprop.0+0x78>
 8027780:	f04f 3cff 	mov.w	ip, #4294967295
 8027784:	e7e6      	b.n	8027754 <_strtol_l.constprop.0+0x94>
 8027786:	f1bc 0f00 	cmp.w	ip, #0
 802778a:	da05      	bge.n	8027798 <_strtol_l.constprop.0+0xd8>
 802778c:	2322      	movs	r3, #34	; 0x22
 802778e:	6003      	str	r3, [r0, #0]
 8027790:	4646      	mov	r6, r8
 8027792:	b942      	cbnz	r2, 80277a6 <_strtol_l.constprop.0+0xe6>
 8027794:	4630      	mov	r0, r6
 8027796:	e79e      	b.n	80276d6 <_strtol_l.constprop.0+0x16>
 8027798:	b107      	cbz	r7, 802779c <_strtol_l.constprop.0+0xdc>
 802779a:	4276      	negs	r6, r6
 802779c:	2a00      	cmp	r2, #0
 802779e:	d0f9      	beq.n	8027794 <_strtol_l.constprop.0+0xd4>
 80277a0:	f1bc 0f00 	cmp.w	ip, #0
 80277a4:	d000      	beq.n	80277a8 <_strtol_l.constprop.0+0xe8>
 80277a6:	1e69      	subs	r1, r5, #1
 80277a8:	6011      	str	r1, [r2, #0]
 80277aa:	e7f3      	b.n	8027794 <_strtol_l.constprop.0+0xd4>
 80277ac:	2430      	movs	r4, #48	; 0x30
 80277ae:	2b00      	cmp	r3, #0
 80277b0:	d1b1      	bne.n	8027716 <_strtol_l.constprop.0+0x56>
 80277b2:	2308      	movs	r3, #8
 80277b4:	e7af      	b.n	8027716 <_strtol_l.constprop.0+0x56>
 80277b6:	2c30      	cmp	r4, #48	; 0x30
 80277b8:	d0a5      	beq.n	8027706 <_strtol_l.constprop.0+0x46>
 80277ba:	230a      	movs	r3, #10
 80277bc:	e7ab      	b.n	8027716 <_strtol_l.constprop.0+0x56>
 80277be:	bf00      	nop
 80277c0:	080474c9 	.word	0x080474c9

080277c4 <_strtol_r>:
 80277c4:	f7ff bf7c 	b.w	80276c0 <_strtol_l.constprop.0>

080277c8 <strtol>:
 80277c8:	4613      	mov	r3, r2
 80277ca:	460a      	mov	r2, r1
 80277cc:	4601      	mov	r1, r0
 80277ce:	4802      	ldr	r0, [pc, #8]	; (80277d8 <strtol+0x10>)
 80277d0:	6800      	ldr	r0, [r0, #0]
 80277d2:	f7ff bf75 	b.w	80276c0 <_strtol_l.constprop.0>
 80277d6:	bf00      	nop
 80277d8:	200004c4 	.word	0x200004c4

080277dc <_strtoul_l.constprop.0>:
 80277dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80277e0:	4f36      	ldr	r7, [pc, #216]	; (80278bc <_strtoul_l.constprop.0+0xe0>)
 80277e2:	4686      	mov	lr, r0
 80277e4:	460d      	mov	r5, r1
 80277e6:	4628      	mov	r0, r5
 80277e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80277ec:	5de6      	ldrb	r6, [r4, r7]
 80277ee:	f016 0608 	ands.w	r6, r6, #8
 80277f2:	d1f8      	bne.n	80277e6 <_strtoul_l.constprop.0+0xa>
 80277f4:	2c2d      	cmp	r4, #45	; 0x2d
 80277f6:	d12f      	bne.n	8027858 <_strtoul_l.constprop.0+0x7c>
 80277f8:	782c      	ldrb	r4, [r5, #0]
 80277fa:	2601      	movs	r6, #1
 80277fc:	1c85      	adds	r5, r0, #2
 80277fe:	2b00      	cmp	r3, #0
 8027800:	d057      	beq.n	80278b2 <_strtoul_l.constprop.0+0xd6>
 8027802:	2b10      	cmp	r3, #16
 8027804:	d109      	bne.n	802781a <_strtoul_l.constprop.0+0x3e>
 8027806:	2c30      	cmp	r4, #48	; 0x30
 8027808:	d107      	bne.n	802781a <_strtoul_l.constprop.0+0x3e>
 802780a:	7828      	ldrb	r0, [r5, #0]
 802780c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8027810:	2858      	cmp	r0, #88	; 0x58
 8027812:	d149      	bne.n	80278a8 <_strtoul_l.constprop.0+0xcc>
 8027814:	786c      	ldrb	r4, [r5, #1]
 8027816:	2310      	movs	r3, #16
 8027818:	3502      	adds	r5, #2
 802781a:	f04f 38ff 	mov.w	r8, #4294967295
 802781e:	2700      	movs	r7, #0
 8027820:	fbb8 f8f3 	udiv	r8, r8, r3
 8027824:	fb03 f908 	mul.w	r9, r3, r8
 8027828:	ea6f 0909 	mvn.w	r9, r9
 802782c:	4638      	mov	r0, r7
 802782e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8027832:	f1bc 0f09 	cmp.w	ip, #9
 8027836:	d814      	bhi.n	8027862 <_strtoul_l.constprop.0+0x86>
 8027838:	4664      	mov	r4, ip
 802783a:	42a3      	cmp	r3, r4
 802783c:	dd22      	ble.n	8027884 <_strtoul_l.constprop.0+0xa8>
 802783e:	2f00      	cmp	r7, #0
 8027840:	db1d      	blt.n	802787e <_strtoul_l.constprop.0+0xa2>
 8027842:	4580      	cmp	r8, r0
 8027844:	d31b      	bcc.n	802787e <_strtoul_l.constprop.0+0xa2>
 8027846:	d101      	bne.n	802784c <_strtoul_l.constprop.0+0x70>
 8027848:	45a1      	cmp	r9, r4
 802784a:	db18      	blt.n	802787e <_strtoul_l.constprop.0+0xa2>
 802784c:	fb00 4003 	mla	r0, r0, r3, r4
 8027850:	2701      	movs	r7, #1
 8027852:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027856:	e7ea      	b.n	802782e <_strtoul_l.constprop.0+0x52>
 8027858:	2c2b      	cmp	r4, #43	; 0x2b
 802785a:	bf04      	itt	eq
 802785c:	782c      	ldrbeq	r4, [r5, #0]
 802785e:	1c85      	addeq	r5, r0, #2
 8027860:	e7cd      	b.n	80277fe <_strtoul_l.constprop.0+0x22>
 8027862:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8027866:	f1bc 0f19 	cmp.w	ip, #25
 802786a:	d801      	bhi.n	8027870 <_strtoul_l.constprop.0+0x94>
 802786c:	3c37      	subs	r4, #55	; 0x37
 802786e:	e7e4      	b.n	802783a <_strtoul_l.constprop.0+0x5e>
 8027870:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8027874:	f1bc 0f19 	cmp.w	ip, #25
 8027878:	d804      	bhi.n	8027884 <_strtoul_l.constprop.0+0xa8>
 802787a:	3c57      	subs	r4, #87	; 0x57
 802787c:	e7dd      	b.n	802783a <_strtoul_l.constprop.0+0x5e>
 802787e:	f04f 37ff 	mov.w	r7, #4294967295
 8027882:	e7e6      	b.n	8027852 <_strtoul_l.constprop.0+0x76>
 8027884:	2f00      	cmp	r7, #0
 8027886:	da07      	bge.n	8027898 <_strtoul_l.constprop.0+0xbc>
 8027888:	2322      	movs	r3, #34	; 0x22
 802788a:	f8ce 3000 	str.w	r3, [lr]
 802788e:	f04f 30ff 	mov.w	r0, #4294967295
 8027892:	b932      	cbnz	r2, 80278a2 <_strtoul_l.constprop.0+0xc6>
 8027894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027898:	b106      	cbz	r6, 802789c <_strtoul_l.constprop.0+0xc0>
 802789a:	4240      	negs	r0, r0
 802789c:	2a00      	cmp	r2, #0
 802789e:	d0f9      	beq.n	8027894 <_strtoul_l.constprop.0+0xb8>
 80278a0:	b107      	cbz	r7, 80278a4 <_strtoul_l.constprop.0+0xc8>
 80278a2:	1e69      	subs	r1, r5, #1
 80278a4:	6011      	str	r1, [r2, #0]
 80278a6:	e7f5      	b.n	8027894 <_strtoul_l.constprop.0+0xb8>
 80278a8:	2430      	movs	r4, #48	; 0x30
 80278aa:	2b00      	cmp	r3, #0
 80278ac:	d1b5      	bne.n	802781a <_strtoul_l.constprop.0+0x3e>
 80278ae:	2308      	movs	r3, #8
 80278b0:	e7b3      	b.n	802781a <_strtoul_l.constprop.0+0x3e>
 80278b2:	2c30      	cmp	r4, #48	; 0x30
 80278b4:	d0a9      	beq.n	802780a <_strtoul_l.constprop.0+0x2e>
 80278b6:	230a      	movs	r3, #10
 80278b8:	e7af      	b.n	802781a <_strtoul_l.constprop.0+0x3e>
 80278ba:	bf00      	nop
 80278bc:	080474c9 	.word	0x080474c9

080278c0 <_strtoul_r>:
 80278c0:	f7ff bf8c 	b.w	80277dc <_strtoul_l.constprop.0>

080278c4 <strtoul>:
 80278c4:	4613      	mov	r3, r2
 80278c6:	460a      	mov	r2, r1
 80278c8:	4601      	mov	r1, r0
 80278ca:	4802      	ldr	r0, [pc, #8]	; (80278d4 <strtoul+0x10>)
 80278cc:	6800      	ldr	r0, [r0, #0]
 80278ce:	f7ff bf85 	b.w	80277dc <_strtoul_l.constprop.0>
 80278d2:	bf00      	nop
 80278d4:	200004c4 	.word	0x200004c4

080278d8 <__tzcalc_limits>:
 80278d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278dc:	4605      	mov	r5, r0
 80278de:	f001 faaf 	bl	8028e40 <__gettzinfo>
 80278e2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80278e6:	429d      	cmp	r5, r3
 80278e8:	f340 8099 	ble.w	8027a1e <__tzcalc_limits+0x146>
 80278ec:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80278f0:	18ac      	adds	r4, r5, r2
 80278f2:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80278f6:	f240 126d 	movw	r2, #365	; 0x16d
 80278fa:	10a4      	asrs	r4, r4, #2
 80278fc:	fb02 4403 	mla	r4, r2, r3, r4
 8027900:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8027904:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8027908:	fb93 f3f2 	sdiv	r3, r3, r2
 802790c:	441c      	add	r4, r3
 802790e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8027912:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8027916:	fb95 fcf3 	sdiv	ip, r5, r3
 802791a:	fb03 5c1c 	mls	ip, r3, ip, r5
 802791e:	186a      	adds	r2, r5, r1
 8027920:	fabc f68c 	clz	r6, ip
 8027924:	fbb2 f2f3 	udiv	r2, r2, r3
 8027928:	f005 0303 	and.w	r3, r5, #3
 802792c:	4414      	add	r4, r2
 802792e:	2264      	movs	r2, #100	; 0x64
 8027930:	6045      	str	r5, [r0, #4]
 8027932:	fb95 f7f2 	sdiv	r7, r5, r2
 8027936:	0976      	lsrs	r6, r6, #5
 8027938:	fb02 5717 	mls	r7, r2, r7, r5
 802793c:	4601      	mov	r1, r0
 802793e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8027942:	9300      	str	r3, [sp, #0]
 8027944:	f04f 0a07 	mov.w	sl, #7
 8027948:	7a0d      	ldrb	r5, [r1, #8]
 802794a:	694b      	ldr	r3, [r1, #20]
 802794c:	2d4a      	cmp	r5, #74	; 0x4a
 802794e:	d12d      	bne.n	80279ac <__tzcalc_limits+0xd4>
 8027950:	9a00      	ldr	r2, [sp, #0]
 8027952:	eb04 0e03 	add.w	lr, r4, r3
 8027956:	b902      	cbnz	r2, 802795a <__tzcalc_limits+0x82>
 8027958:	b917      	cbnz	r7, 8027960 <__tzcalc_limits+0x88>
 802795a:	f1bc 0f00 	cmp.w	ip, #0
 802795e:	d123      	bne.n	80279a8 <__tzcalc_limits+0xd0>
 8027960:	2b3b      	cmp	r3, #59	; 0x3b
 8027962:	bfd4      	ite	le
 8027964:	2300      	movle	r3, #0
 8027966:	2301      	movgt	r3, #1
 8027968:	4473      	add	r3, lr
 802796a:	3b01      	subs	r3, #1
 802796c:	698d      	ldr	r5, [r1, #24]
 802796e:	4a2d      	ldr	r2, [pc, #180]	; (8027a24 <__tzcalc_limits+0x14c>)
 8027970:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8027974:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8027978:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 802797a:	18ed      	adds	r5, r5, r3
 802797c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8027980:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8027984:	3128      	adds	r1, #40	; 0x28
 8027986:	458b      	cmp	fp, r1
 8027988:	d1de      	bne.n	8027948 <__tzcalc_limits+0x70>
 802798a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 802798e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8027992:	428c      	cmp	r4, r1
 8027994:	eb72 0303 	sbcs.w	r3, r2, r3
 8027998:	bfb4      	ite	lt
 802799a:	2301      	movlt	r3, #1
 802799c:	2300      	movge	r3, #0
 802799e:	6003      	str	r3, [r0, #0]
 80279a0:	2001      	movs	r0, #1
 80279a2:	b003      	add	sp, #12
 80279a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279a8:	2300      	movs	r3, #0
 80279aa:	e7dd      	b.n	8027968 <__tzcalc_limits+0x90>
 80279ac:	2d44      	cmp	r5, #68	; 0x44
 80279ae:	d101      	bne.n	80279b4 <__tzcalc_limits+0xdc>
 80279b0:	4423      	add	r3, r4
 80279b2:	e7db      	b.n	802796c <__tzcalc_limits+0x94>
 80279b4:	9a00      	ldr	r2, [sp, #0]
 80279b6:	bb62      	cbnz	r2, 8027a12 <__tzcalc_limits+0x13a>
 80279b8:	2f00      	cmp	r7, #0
 80279ba:	bf0c      	ite	eq
 80279bc:	4635      	moveq	r5, r6
 80279be:	2501      	movne	r5, #1
 80279c0:	68ca      	ldr	r2, [r1, #12]
 80279c2:	9201      	str	r2, [sp, #4]
 80279c4:	4a18      	ldr	r2, [pc, #96]	; (8027a28 <__tzcalc_limits+0x150>)
 80279c6:	f04f 0930 	mov.w	r9, #48	; 0x30
 80279ca:	fb09 2505 	mla	r5, r9, r5, r2
 80279ce:	46a6      	mov	lr, r4
 80279d0:	f04f 0800 	mov.w	r8, #0
 80279d4:	3d04      	subs	r5, #4
 80279d6:	9a01      	ldr	r2, [sp, #4]
 80279d8:	f108 0801 	add.w	r8, r8, #1
 80279dc:	4542      	cmp	r2, r8
 80279de:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80279e2:	dc18      	bgt.n	8027a16 <__tzcalc_limits+0x13e>
 80279e4:	f10e 0504 	add.w	r5, lr, #4
 80279e8:	fb95 f8fa 	sdiv	r8, r5, sl
 80279ec:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80279f0:	eba5 0808 	sub.w	r8, r5, r8
 80279f4:	ebb3 0808 	subs.w	r8, r3, r8
 80279f8:	690b      	ldr	r3, [r1, #16]
 80279fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80279fe:	bf48      	it	mi
 8027a00:	f108 0807 	addmi.w	r8, r8, #7
 8027a04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8027a08:	4443      	add	r3, r8
 8027a0a:	454b      	cmp	r3, r9
 8027a0c:	da05      	bge.n	8027a1a <__tzcalc_limits+0x142>
 8027a0e:	4473      	add	r3, lr
 8027a10:	e7ac      	b.n	802796c <__tzcalc_limits+0x94>
 8027a12:	4635      	mov	r5, r6
 8027a14:	e7d4      	b.n	80279c0 <__tzcalc_limits+0xe8>
 8027a16:	44ce      	add	lr, r9
 8027a18:	e7dd      	b.n	80279d6 <__tzcalc_limits+0xfe>
 8027a1a:	3b07      	subs	r3, #7
 8027a1c:	e7f5      	b.n	8027a0a <__tzcalc_limits+0x132>
 8027a1e:	2000      	movs	r0, #0
 8027a20:	e7bf      	b.n	80279a2 <__tzcalc_limits+0xca>
 8027a22:	bf00      	nop
 8027a24:	00015180 	.word	0x00015180
 8027a28:	08047704 	.word	0x08047704

08027a2c <__tz_lock>:
 8027a2c:	4801      	ldr	r0, [pc, #4]	; (8027a34 <__tz_lock+0x8>)
 8027a2e:	f7fd be66 	b.w	80256fe <__retarget_lock_acquire>
 8027a32:	bf00      	nop
 8027a34:	20030130 	.word	0x20030130

08027a38 <__tz_unlock>:
 8027a38:	4801      	ldr	r0, [pc, #4]	; (8027a40 <__tz_unlock+0x8>)
 8027a3a:	f7fd be62 	b.w	8025702 <__retarget_lock_release>
 8027a3e:	bf00      	nop
 8027a40:	20030130 	.word	0x20030130

08027a44 <_tzset_unlocked>:
 8027a44:	4b01      	ldr	r3, [pc, #4]	; (8027a4c <_tzset_unlocked+0x8>)
 8027a46:	6818      	ldr	r0, [r3, #0]
 8027a48:	f000 b802 	b.w	8027a50 <_tzset_unlocked_r>
 8027a4c:	200004c4 	.word	0x200004c4

08027a50 <_tzset_unlocked_r>:
 8027a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a54:	b08d      	sub	sp, #52	; 0x34
 8027a56:	4607      	mov	r7, r0
 8027a58:	f001 f9f2 	bl	8028e40 <__gettzinfo>
 8027a5c:	49b0      	ldr	r1, [pc, #704]	; (8027d20 <_tzset_unlocked_r+0x2d0>)
 8027a5e:	4eb1      	ldr	r6, [pc, #708]	; (8027d24 <_tzset_unlocked_r+0x2d4>)
 8027a60:	4605      	mov	r5, r0
 8027a62:	4638      	mov	r0, r7
 8027a64:	f001 f9e4 	bl	8028e30 <_getenv_r>
 8027a68:	4604      	mov	r4, r0
 8027a6a:	b970      	cbnz	r0, 8027a8a <_tzset_unlocked_r+0x3a>
 8027a6c:	4bae      	ldr	r3, [pc, #696]	; (8027d28 <_tzset_unlocked_r+0x2d8>)
 8027a6e:	4aaf      	ldr	r2, [pc, #700]	; (8027d2c <_tzset_unlocked_r+0x2dc>)
 8027a70:	6018      	str	r0, [r3, #0]
 8027a72:	4baf      	ldr	r3, [pc, #700]	; (8027d30 <_tzset_unlocked_r+0x2e0>)
 8027a74:	6018      	str	r0, [r3, #0]
 8027a76:	4baf      	ldr	r3, [pc, #700]	; (8027d34 <_tzset_unlocked_r+0x2e4>)
 8027a78:	6830      	ldr	r0, [r6, #0]
 8027a7a:	e9c3 2200 	strd	r2, r2, [r3]
 8027a7e:	f7fd fe4b 	bl	8025718 <free>
 8027a82:	6034      	str	r4, [r6, #0]
 8027a84:	b00d      	add	sp, #52	; 0x34
 8027a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a8a:	6831      	ldr	r1, [r6, #0]
 8027a8c:	2900      	cmp	r1, #0
 8027a8e:	d162      	bne.n	8027b56 <_tzset_unlocked_r+0x106>
 8027a90:	6830      	ldr	r0, [r6, #0]
 8027a92:	f7fd fe41 	bl	8025718 <free>
 8027a96:	4620      	mov	r0, r4
 8027a98:	f7d8 fbdc 	bl	8000254 <strlen>
 8027a9c:	1c41      	adds	r1, r0, #1
 8027a9e:	4638      	mov	r0, r7
 8027aa0:	f7fe f960 	bl	8025d64 <_malloc_r>
 8027aa4:	6030      	str	r0, [r6, #0]
 8027aa6:	2800      	cmp	r0, #0
 8027aa8:	d15a      	bne.n	8027b60 <_tzset_unlocked_r+0x110>
 8027aaa:	7823      	ldrb	r3, [r4, #0]
 8027aac:	4aa2      	ldr	r2, [pc, #648]	; (8027d38 <_tzset_unlocked_r+0x2e8>)
 8027aae:	49a3      	ldr	r1, [pc, #652]	; (8027d3c <_tzset_unlocked_r+0x2ec>)
 8027ab0:	2b3a      	cmp	r3, #58	; 0x3a
 8027ab2:	bf08      	it	eq
 8027ab4:	3401      	addeq	r4, #1
 8027ab6:	ae0a      	add	r6, sp, #40	; 0x28
 8027ab8:	4633      	mov	r3, r6
 8027aba:	4620      	mov	r0, r4
 8027abc:	f7ff f814 	bl	8026ae8 <siscanf>
 8027ac0:	2800      	cmp	r0, #0
 8027ac2:	dddf      	ble.n	8027a84 <_tzset_unlocked_r+0x34>
 8027ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027ac6:	18e7      	adds	r7, r4, r3
 8027ac8:	5ce3      	ldrb	r3, [r4, r3]
 8027aca:	2b2d      	cmp	r3, #45	; 0x2d
 8027acc:	d14c      	bne.n	8027b68 <_tzset_unlocked_r+0x118>
 8027ace:	3701      	adds	r7, #1
 8027ad0:	f04f 38ff 	mov.w	r8, #4294967295
 8027ad4:	f10d 0a20 	add.w	sl, sp, #32
 8027ad8:	f10d 0b1e 	add.w	fp, sp, #30
 8027adc:	2400      	movs	r4, #0
 8027ade:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8027ae2:	4997      	ldr	r1, [pc, #604]	; (8027d40 <_tzset_unlocked_r+0x2f0>)
 8027ae4:	9603      	str	r6, [sp, #12]
 8027ae6:	f8cd b000 	str.w	fp, [sp]
 8027aea:	4633      	mov	r3, r6
 8027aec:	aa07      	add	r2, sp, #28
 8027aee:	4638      	mov	r0, r7
 8027af0:	f8ad 401e 	strh.w	r4, [sp, #30]
 8027af4:	f8ad 4020 	strh.w	r4, [sp, #32]
 8027af8:	f7fe fff6 	bl	8026ae8 <siscanf>
 8027afc:	42a0      	cmp	r0, r4
 8027afe:	ddc1      	ble.n	8027a84 <_tzset_unlocked_r+0x34>
 8027b00:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027b04:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027b08:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8027d4c <_tzset_unlocked_r+0x2fc>
 8027b0c:	213c      	movs	r1, #60	; 0x3c
 8027b0e:	fb01 3302 	mla	r3, r1, r2, r3
 8027b12:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027b16:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027b1a:	fb01 3302 	mla	r3, r1, r2, r3
 8027b1e:	fb08 f303 	mul.w	r3, r8, r3
 8027b22:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8027d34 <_tzset_unlocked_r+0x2e4>
 8027b26:	62ab      	str	r3, [r5, #40]	; 0x28
 8027b28:	4b83      	ldr	r3, [pc, #524]	; (8027d38 <_tzset_unlocked_r+0x2e8>)
 8027b2a:	f8c8 3000 	str.w	r3, [r8]
 8027b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b30:	4982      	ldr	r1, [pc, #520]	; (8027d3c <_tzset_unlocked_r+0x2ec>)
 8027b32:	441f      	add	r7, r3
 8027b34:	464a      	mov	r2, r9
 8027b36:	4633      	mov	r3, r6
 8027b38:	4638      	mov	r0, r7
 8027b3a:	f7fe ffd5 	bl	8026ae8 <siscanf>
 8027b3e:	42a0      	cmp	r0, r4
 8027b40:	dc18      	bgt.n	8027b74 <_tzset_unlocked_r+0x124>
 8027b42:	f8d8 3000 	ldr.w	r3, [r8]
 8027b46:	f8c8 3004 	str.w	r3, [r8, #4]
 8027b4a:	4b77      	ldr	r3, [pc, #476]	; (8027d28 <_tzset_unlocked_r+0x2d8>)
 8027b4c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8027b4e:	601a      	str	r2, [r3, #0]
 8027b50:	4b77      	ldr	r3, [pc, #476]	; (8027d30 <_tzset_unlocked_r+0x2e0>)
 8027b52:	601c      	str	r4, [r3, #0]
 8027b54:	e796      	b.n	8027a84 <_tzset_unlocked_r+0x34>
 8027b56:	f7d8 fb73 	bl	8000240 <strcmp>
 8027b5a:	2800      	cmp	r0, #0
 8027b5c:	d198      	bne.n	8027a90 <_tzset_unlocked_r+0x40>
 8027b5e:	e791      	b.n	8027a84 <_tzset_unlocked_r+0x34>
 8027b60:	4621      	mov	r1, r4
 8027b62:	f7ff f857 	bl	8026c14 <strcpy>
 8027b66:	e7a0      	b.n	8027aaa <_tzset_unlocked_r+0x5a>
 8027b68:	2b2b      	cmp	r3, #43	; 0x2b
 8027b6a:	bf08      	it	eq
 8027b6c:	3701      	addeq	r7, #1
 8027b6e:	f04f 0801 	mov.w	r8, #1
 8027b72:	e7af      	b.n	8027ad4 <_tzset_unlocked_r+0x84>
 8027b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b76:	f8c8 9004 	str.w	r9, [r8, #4]
 8027b7a:	18fc      	adds	r4, r7, r3
 8027b7c:	5cfb      	ldrb	r3, [r7, r3]
 8027b7e:	2b2d      	cmp	r3, #45	; 0x2d
 8027b80:	f040 808b 	bne.w	8027c9a <_tzset_unlocked_r+0x24a>
 8027b84:	3401      	adds	r4, #1
 8027b86:	f04f 37ff 	mov.w	r7, #4294967295
 8027b8a:	2300      	movs	r3, #0
 8027b8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027b90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027b94:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027b98:	930a      	str	r3, [sp, #40]	; 0x28
 8027b9a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8027b9e:	e9cd b600 	strd	fp, r6, [sp]
 8027ba2:	4967      	ldr	r1, [pc, #412]	; (8027d40 <_tzset_unlocked_r+0x2f0>)
 8027ba4:	4633      	mov	r3, r6
 8027ba6:	aa07      	add	r2, sp, #28
 8027ba8:	4620      	mov	r0, r4
 8027baa:	f7fe ff9d 	bl	8026ae8 <siscanf>
 8027bae:	2800      	cmp	r0, #0
 8027bb0:	dc78      	bgt.n	8027ca4 <_tzset_unlocked_r+0x254>
 8027bb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8027bb4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8027bb8:	652b      	str	r3, [r5, #80]	; 0x50
 8027bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027bbc:	462f      	mov	r7, r5
 8027bbe:	441c      	add	r4, r3
 8027bc0:	f04f 0900 	mov.w	r9, #0
 8027bc4:	7823      	ldrb	r3, [r4, #0]
 8027bc6:	2b2c      	cmp	r3, #44	; 0x2c
 8027bc8:	bf08      	it	eq
 8027bca:	3401      	addeq	r4, #1
 8027bcc:	f894 8000 	ldrb.w	r8, [r4]
 8027bd0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8027bd4:	d178      	bne.n	8027cc8 <_tzset_unlocked_r+0x278>
 8027bd6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8027bda:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8027bde:	ab09      	add	r3, sp, #36	; 0x24
 8027be0:	9300      	str	r3, [sp, #0]
 8027be2:	4958      	ldr	r1, [pc, #352]	; (8027d44 <_tzset_unlocked_r+0x2f4>)
 8027be4:	9603      	str	r6, [sp, #12]
 8027be6:	4633      	mov	r3, r6
 8027be8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8027bec:	4620      	mov	r0, r4
 8027bee:	f7fe ff7b 	bl	8026ae8 <siscanf>
 8027bf2:	2803      	cmp	r0, #3
 8027bf4:	f47f af46 	bne.w	8027a84 <_tzset_unlocked_r+0x34>
 8027bf8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8027bfc:	1e4b      	subs	r3, r1, #1
 8027bfe:	2b0b      	cmp	r3, #11
 8027c00:	f63f af40 	bhi.w	8027a84 <_tzset_unlocked_r+0x34>
 8027c04:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8027c08:	1e53      	subs	r3, r2, #1
 8027c0a:	2b04      	cmp	r3, #4
 8027c0c:	f63f af3a 	bhi.w	8027a84 <_tzset_unlocked_r+0x34>
 8027c10:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8027c14:	2b06      	cmp	r3, #6
 8027c16:	f63f af35 	bhi.w	8027a84 <_tzset_unlocked_r+0x34>
 8027c1a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8027c1e:	f887 8008 	strb.w	r8, [r7, #8]
 8027c22:	617b      	str	r3, [r7, #20]
 8027c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c26:	eb04 0803 	add.w	r8, r4, r3
 8027c2a:	2302      	movs	r3, #2
 8027c2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027c30:	2300      	movs	r3, #0
 8027c32:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027c36:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8027c3c:	f898 3000 	ldrb.w	r3, [r8]
 8027c40:	2b2f      	cmp	r3, #47	; 0x2f
 8027c42:	d109      	bne.n	8027c58 <_tzset_unlocked_r+0x208>
 8027c44:	e9cd a602 	strd	sl, r6, [sp, #8]
 8027c48:	e9cd b600 	strd	fp, r6, [sp]
 8027c4c:	493e      	ldr	r1, [pc, #248]	; (8027d48 <_tzset_unlocked_r+0x2f8>)
 8027c4e:	4633      	mov	r3, r6
 8027c50:	aa07      	add	r2, sp, #28
 8027c52:	4640      	mov	r0, r8
 8027c54:	f7fe ff48 	bl	8026ae8 <siscanf>
 8027c58:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027c5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027c60:	213c      	movs	r1, #60	; 0x3c
 8027c62:	fb01 3302 	mla	r3, r1, r2, r3
 8027c66:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027c6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027c6e:	fb01 3302 	mla	r3, r1, r2, r3
 8027c72:	61bb      	str	r3, [r7, #24]
 8027c74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027c76:	3728      	adds	r7, #40	; 0x28
 8027c78:	4444      	add	r4, r8
 8027c7a:	f1b9 0f00 	cmp.w	r9, #0
 8027c7e:	d020      	beq.n	8027cc2 <_tzset_unlocked_r+0x272>
 8027c80:	6868      	ldr	r0, [r5, #4]
 8027c82:	f7ff fe29 	bl	80278d8 <__tzcalc_limits>
 8027c86:	4b28      	ldr	r3, [pc, #160]	; (8027d28 <_tzset_unlocked_r+0x2d8>)
 8027c88:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8027c8a:	601a      	str	r2, [r3, #0]
 8027c8c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8027c8e:	1a9b      	subs	r3, r3, r2
 8027c90:	4a27      	ldr	r2, [pc, #156]	; (8027d30 <_tzset_unlocked_r+0x2e0>)
 8027c92:	bf18      	it	ne
 8027c94:	2301      	movne	r3, #1
 8027c96:	6013      	str	r3, [r2, #0]
 8027c98:	e6f4      	b.n	8027a84 <_tzset_unlocked_r+0x34>
 8027c9a:	2b2b      	cmp	r3, #43	; 0x2b
 8027c9c:	bf08      	it	eq
 8027c9e:	3401      	addeq	r4, #1
 8027ca0:	2701      	movs	r7, #1
 8027ca2:	e772      	b.n	8027b8a <_tzset_unlocked_r+0x13a>
 8027ca4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027ca8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027cac:	213c      	movs	r1, #60	; 0x3c
 8027cae:	fb01 3302 	mla	r3, r1, r2, r3
 8027cb2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027cb6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027cba:	fb01 3302 	mla	r3, r1, r2, r3
 8027cbe:	437b      	muls	r3, r7
 8027cc0:	e77a      	b.n	8027bb8 <_tzset_unlocked_r+0x168>
 8027cc2:	f04f 0901 	mov.w	r9, #1
 8027cc6:	e77d      	b.n	8027bc4 <_tzset_unlocked_r+0x174>
 8027cc8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8027ccc:	bf06      	itte	eq
 8027cce:	3401      	addeq	r4, #1
 8027cd0:	4643      	moveq	r3, r8
 8027cd2:	2344      	movne	r3, #68	; 0x44
 8027cd4:	220a      	movs	r2, #10
 8027cd6:	a90b      	add	r1, sp, #44	; 0x2c
 8027cd8:	4620      	mov	r0, r4
 8027cda:	9305      	str	r3, [sp, #20]
 8027cdc:	f7ff fdf2 	bl	80278c4 <strtoul>
 8027ce0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8027ce4:	9b05      	ldr	r3, [sp, #20]
 8027ce6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8027cea:	45a0      	cmp	r8, r4
 8027cec:	d114      	bne.n	8027d18 <_tzset_unlocked_r+0x2c8>
 8027cee:	234d      	movs	r3, #77	; 0x4d
 8027cf0:	f1b9 0f00 	cmp.w	r9, #0
 8027cf4:	d107      	bne.n	8027d06 <_tzset_unlocked_r+0x2b6>
 8027cf6:	722b      	strb	r3, [r5, #8]
 8027cf8:	2103      	movs	r1, #3
 8027cfa:	2302      	movs	r3, #2
 8027cfc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8027d00:	f8c5 9014 	str.w	r9, [r5, #20]
 8027d04:	e791      	b.n	8027c2a <_tzset_unlocked_r+0x1da>
 8027d06:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8027d0a:	220b      	movs	r2, #11
 8027d0c:	2301      	movs	r3, #1
 8027d0e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8027d12:	2300      	movs	r3, #0
 8027d14:	63eb      	str	r3, [r5, #60]	; 0x3c
 8027d16:	e788      	b.n	8027c2a <_tzset_unlocked_r+0x1da>
 8027d18:	b280      	uxth	r0, r0
 8027d1a:	723b      	strb	r3, [r7, #8]
 8027d1c:	6178      	str	r0, [r7, #20]
 8027d1e:	e784      	b.n	8027c2a <_tzset_unlocked_r+0x1da>
 8027d20:	08047a74 	.word	0x08047a74
 8027d24:	20030158 	.word	0x20030158
 8027d28:	20030160 	.word	0x20030160
 8027d2c:	08047a77 	.word	0x08047a77
 8027d30:	2003015c 	.word	0x2003015c
 8027d34:	20000528 	.word	0x20000528
 8027d38:	2003014b 	.word	0x2003014b
 8027d3c:	08047a7b 	.word	0x08047a7b
 8027d40:	08047a9e 	.word	0x08047a9e
 8027d44:	08047a8a 	.word	0x08047a8a
 8027d48:	08047a9d 	.word	0x08047a9d
 8027d4c:	20030140 	.word	0x20030140

08027d50 <__swbuf_r>:
 8027d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d52:	460e      	mov	r6, r1
 8027d54:	4614      	mov	r4, r2
 8027d56:	4605      	mov	r5, r0
 8027d58:	b118      	cbz	r0, 8027d62 <__swbuf_r+0x12>
 8027d5a:	6983      	ldr	r3, [r0, #24]
 8027d5c:	b90b      	cbnz	r3, 8027d62 <__swbuf_r+0x12>
 8027d5e:	f7fd faf9 	bl	8025354 <__sinit>
 8027d62:	4b21      	ldr	r3, [pc, #132]	; (8027de8 <__swbuf_r+0x98>)
 8027d64:	429c      	cmp	r4, r3
 8027d66:	d12b      	bne.n	8027dc0 <__swbuf_r+0x70>
 8027d68:	686c      	ldr	r4, [r5, #4]
 8027d6a:	69a3      	ldr	r3, [r4, #24]
 8027d6c:	60a3      	str	r3, [r4, #8]
 8027d6e:	89a3      	ldrh	r3, [r4, #12]
 8027d70:	071a      	lsls	r2, r3, #28
 8027d72:	d52f      	bpl.n	8027dd4 <__swbuf_r+0x84>
 8027d74:	6923      	ldr	r3, [r4, #16]
 8027d76:	b36b      	cbz	r3, 8027dd4 <__swbuf_r+0x84>
 8027d78:	6923      	ldr	r3, [r4, #16]
 8027d7a:	6820      	ldr	r0, [r4, #0]
 8027d7c:	1ac0      	subs	r0, r0, r3
 8027d7e:	6963      	ldr	r3, [r4, #20]
 8027d80:	b2f6      	uxtb	r6, r6
 8027d82:	4283      	cmp	r3, r0
 8027d84:	4637      	mov	r7, r6
 8027d86:	dc04      	bgt.n	8027d92 <__swbuf_r+0x42>
 8027d88:	4621      	mov	r1, r4
 8027d8a:	4628      	mov	r0, r5
 8027d8c:	f000 ffc6 	bl	8028d1c <_fflush_r>
 8027d90:	bb30      	cbnz	r0, 8027de0 <__swbuf_r+0x90>
 8027d92:	68a3      	ldr	r3, [r4, #8]
 8027d94:	3b01      	subs	r3, #1
 8027d96:	60a3      	str	r3, [r4, #8]
 8027d98:	6823      	ldr	r3, [r4, #0]
 8027d9a:	1c5a      	adds	r2, r3, #1
 8027d9c:	6022      	str	r2, [r4, #0]
 8027d9e:	701e      	strb	r6, [r3, #0]
 8027da0:	6963      	ldr	r3, [r4, #20]
 8027da2:	3001      	adds	r0, #1
 8027da4:	4283      	cmp	r3, r0
 8027da6:	d004      	beq.n	8027db2 <__swbuf_r+0x62>
 8027da8:	89a3      	ldrh	r3, [r4, #12]
 8027daa:	07db      	lsls	r3, r3, #31
 8027dac:	d506      	bpl.n	8027dbc <__swbuf_r+0x6c>
 8027dae:	2e0a      	cmp	r6, #10
 8027db0:	d104      	bne.n	8027dbc <__swbuf_r+0x6c>
 8027db2:	4621      	mov	r1, r4
 8027db4:	4628      	mov	r0, r5
 8027db6:	f000 ffb1 	bl	8028d1c <_fflush_r>
 8027dba:	b988      	cbnz	r0, 8027de0 <__swbuf_r+0x90>
 8027dbc:	4638      	mov	r0, r7
 8027dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027dc0:	4b0a      	ldr	r3, [pc, #40]	; (8027dec <__swbuf_r+0x9c>)
 8027dc2:	429c      	cmp	r4, r3
 8027dc4:	d101      	bne.n	8027dca <__swbuf_r+0x7a>
 8027dc6:	68ac      	ldr	r4, [r5, #8]
 8027dc8:	e7cf      	b.n	8027d6a <__swbuf_r+0x1a>
 8027dca:	4b09      	ldr	r3, [pc, #36]	; (8027df0 <__swbuf_r+0xa0>)
 8027dcc:	429c      	cmp	r4, r3
 8027dce:	bf08      	it	eq
 8027dd0:	68ec      	ldreq	r4, [r5, #12]
 8027dd2:	e7ca      	b.n	8027d6a <__swbuf_r+0x1a>
 8027dd4:	4621      	mov	r1, r4
 8027dd6:	4628      	mov	r0, r5
 8027dd8:	f000 f81e 	bl	8027e18 <__swsetup_r>
 8027ddc:	2800      	cmp	r0, #0
 8027dde:	d0cb      	beq.n	8027d78 <__swbuf_r+0x28>
 8027de0:	f04f 37ff 	mov.w	r7, #4294967295
 8027de4:	e7ea      	b.n	8027dbc <__swbuf_r+0x6c>
 8027de6:	bf00      	nop
 8027de8:	080475ec 	.word	0x080475ec
 8027dec:	0804760c 	.word	0x0804760c
 8027df0:	080475cc 	.word	0x080475cc

08027df4 <_write_r>:
 8027df4:	b538      	push	{r3, r4, r5, lr}
 8027df6:	4d07      	ldr	r5, [pc, #28]	; (8027e14 <_write_r+0x20>)
 8027df8:	4604      	mov	r4, r0
 8027dfa:	4608      	mov	r0, r1
 8027dfc:	4611      	mov	r1, r2
 8027dfe:	2200      	movs	r2, #0
 8027e00:	602a      	str	r2, [r5, #0]
 8027e02:	461a      	mov	r2, r3
 8027e04:	f7db feae 	bl	8003b64 <_write>
 8027e08:	1c43      	adds	r3, r0, #1
 8027e0a:	d102      	bne.n	8027e12 <_write_r+0x1e>
 8027e0c:	682b      	ldr	r3, [r5, #0]
 8027e0e:	b103      	cbz	r3, 8027e12 <_write_r+0x1e>
 8027e10:	6023      	str	r3, [r4, #0]
 8027e12:	bd38      	pop	{r3, r4, r5, pc}
 8027e14:	2003013c 	.word	0x2003013c

08027e18 <__swsetup_r>:
 8027e18:	4b32      	ldr	r3, [pc, #200]	; (8027ee4 <__swsetup_r+0xcc>)
 8027e1a:	b570      	push	{r4, r5, r6, lr}
 8027e1c:	681d      	ldr	r5, [r3, #0]
 8027e1e:	4606      	mov	r6, r0
 8027e20:	460c      	mov	r4, r1
 8027e22:	b125      	cbz	r5, 8027e2e <__swsetup_r+0x16>
 8027e24:	69ab      	ldr	r3, [r5, #24]
 8027e26:	b913      	cbnz	r3, 8027e2e <__swsetup_r+0x16>
 8027e28:	4628      	mov	r0, r5
 8027e2a:	f7fd fa93 	bl	8025354 <__sinit>
 8027e2e:	4b2e      	ldr	r3, [pc, #184]	; (8027ee8 <__swsetup_r+0xd0>)
 8027e30:	429c      	cmp	r4, r3
 8027e32:	d10f      	bne.n	8027e54 <__swsetup_r+0x3c>
 8027e34:	686c      	ldr	r4, [r5, #4]
 8027e36:	89a3      	ldrh	r3, [r4, #12]
 8027e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027e3c:	0719      	lsls	r1, r3, #28
 8027e3e:	d42c      	bmi.n	8027e9a <__swsetup_r+0x82>
 8027e40:	06dd      	lsls	r5, r3, #27
 8027e42:	d411      	bmi.n	8027e68 <__swsetup_r+0x50>
 8027e44:	2309      	movs	r3, #9
 8027e46:	6033      	str	r3, [r6, #0]
 8027e48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027e4c:	81a3      	strh	r3, [r4, #12]
 8027e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8027e52:	e03e      	b.n	8027ed2 <__swsetup_r+0xba>
 8027e54:	4b25      	ldr	r3, [pc, #148]	; (8027eec <__swsetup_r+0xd4>)
 8027e56:	429c      	cmp	r4, r3
 8027e58:	d101      	bne.n	8027e5e <__swsetup_r+0x46>
 8027e5a:	68ac      	ldr	r4, [r5, #8]
 8027e5c:	e7eb      	b.n	8027e36 <__swsetup_r+0x1e>
 8027e5e:	4b24      	ldr	r3, [pc, #144]	; (8027ef0 <__swsetup_r+0xd8>)
 8027e60:	429c      	cmp	r4, r3
 8027e62:	bf08      	it	eq
 8027e64:	68ec      	ldreq	r4, [r5, #12]
 8027e66:	e7e6      	b.n	8027e36 <__swsetup_r+0x1e>
 8027e68:	0758      	lsls	r0, r3, #29
 8027e6a:	d512      	bpl.n	8027e92 <__swsetup_r+0x7a>
 8027e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027e6e:	b141      	cbz	r1, 8027e82 <__swsetup_r+0x6a>
 8027e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027e74:	4299      	cmp	r1, r3
 8027e76:	d002      	beq.n	8027e7e <__swsetup_r+0x66>
 8027e78:	4630      	mov	r0, r6
 8027e7a:	f7fd ff07 	bl	8025c8c <_free_r>
 8027e7e:	2300      	movs	r3, #0
 8027e80:	6363      	str	r3, [r4, #52]	; 0x34
 8027e82:	89a3      	ldrh	r3, [r4, #12]
 8027e84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027e88:	81a3      	strh	r3, [r4, #12]
 8027e8a:	2300      	movs	r3, #0
 8027e8c:	6063      	str	r3, [r4, #4]
 8027e8e:	6923      	ldr	r3, [r4, #16]
 8027e90:	6023      	str	r3, [r4, #0]
 8027e92:	89a3      	ldrh	r3, [r4, #12]
 8027e94:	f043 0308 	orr.w	r3, r3, #8
 8027e98:	81a3      	strh	r3, [r4, #12]
 8027e9a:	6923      	ldr	r3, [r4, #16]
 8027e9c:	b94b      	cbnz	r3, 8027eb2 <__swsetup_r+0x9a>
 8027e9e:	89a3      	ldrh	r3, [r4, #12]
 8027ea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027ea8:	d003      	beq.n	8027eb2 <__swsetup_r+0x9a>
 8027eaa:	4621      	mov	r1, r4
 8027eac:	4630      	mov	r0, r6
 8027eae:	f001 f8b7 	bl	8029020 <__smakebuf_r>
 8027eb2:	89a0      	ldrh	r0, [r4, #12]
 8027eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027eb8:	f010 0301 	ands.w	r3, r0, #1
 8027ebc:	d00a      	beq.n	8027ed4 <__swsetup_r+0xbc>
 8027ebe:	2300      	movs	r3, #0
 8027ec0:	60a3      	str	r3, [r4, #8]
 8027ec2:	6963      	ldr	r3, [r4, #20]
 8027ec4:	425b      	negs	r3, r3
 8027ec6:	61a3      	str	r3, [r4, #24]
 8027ec8:	6923      	ldr	r3, [r4, #16]
 8027eca:	b943      	cbnz	r3, 8027ede <__swsetup_r+0xc6>
 8027ecc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027ed0:	d1ba      	bne.n	8027e48 <__swsetup_r+0x30>
 8027ed2:	bd70      	pop	{r4, r5, r6, pc}
 8027ed4:	0781      	lsls	r1, r0, #30
 8027ed6:	bf58      	it	pl
 8027ed8:	6963      	ldrpl	r3, [r4, #20]
 8027eda:	60a3      	str	r3, [r4, #8]
 8027edc:	e7f4      	b.n	8027ec8 <__swsetup_r+0xb0>
 8027ede:	2000      	movs	r0, #0
 8027ee0:	e7f7      	b.n	8027ed2 <__swsetup_r+0xba>
 8027ee2:	bf00      	nop
 8027ee4:	200004c4 	.word	0x200004c4
 8027ee8:	080475ec 	.word	0x080475ec
 8027eec:	0804760c 	.word	0x0804760c
 8027ef0:	080475cc 	.word	0x080475cc

08027ef4 <abs>:
 8027ef4:	2800      	cmp	r0, #0
 8027ef6:	bfb8      	it	lt
 8027ef8:	4240      	neglt	r0, r0
 8027efa:	4770      	bx	lr

08027efc <asctime>:
 8027efc:	4b0d      	ldr	r3, [pc, #52]	; (8027f34 <asctime+0x38>)
 8027efe:	b570      	push	{r4, r5, r6, lr}
 8027f00:	681d      	ldr	r5, [r3, #0]
 8027f02:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8027f04:	4604      	mov	r4, r0
 8027f06:	b976      	cbnz	r6, 8027f26 <asctime+0x2a>
 8027f08:	201a      	movs	r0, #26
 8027f0a:	f7fd fbfd 	bl	8025708 <malloc>
 8027f0e:	4602      	mov	r2, r0
 8027f10:	6428      	str	r0, [r5, #64]	; 0x40
 8027f12:	b920      	cbnz	r0, 8027f1e <asctime+0x22>
 8027f14:	4b08      	ldr	r3, [pc, #32]	; (8027f38 <asctime+0x3c>)
 8027f16:	4809      	ldr	r0, [pc, #36]	; (8027f3c <asctime+0x40>)
 8027f18:	2137      	movs	r1, #55	; 0x37
 8027f1a:	f000 f837 	bl	8027f8c <__assert_func>
 8027f1e:	221a      	movs	r2, #26
 8027f20:	4631      	mov	r1, r6
 8027f22:	f7fd fc39 	bl	8025798 <memset>
 8027f26:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8027f28:	4620      	mov	r0, r4
 8027f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027f2e:	f000 b807 	b.w	8027f40 <asctime_r>
 8027f32:	bf00      	nop
 8027f34:	200004c4 	.word	0x200004c4
 8027f38:	08047630 	.word	0x08047630
 8027f3c:	08047ab0 	.word	0x08047ab0

08027f40 <asctime_r>:
 8027f40:	b510      	push	{r4, lr}
 8027f42:	460c      	mov	r4, r1
 8027f44:	6941      	ldr	r1, [r0, #20]
 8027f46:	6903      	ldr	r3, [r0, #16]
 8027f48:	6982      	ldr	r2, [r0, #24]
 8027f4a:	b086      	sub	sp, #24
 8027f4c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8027f50:	9104      	str	r1, [sp, #16]
 8027f52:	6801      	ldr	r1, [r0, #0]
 8027f54:	9103      	str	r1, [sp, #12]
 8027f56:	6841      	ldr	r1, [r0, #4]
 8027f58:	9102      	str	r1, [sp, #8]
 8027f5a:	6881      	ldr	r1, [r0, #8]
 8027f5c:	9101      	str	r1, [sp, #4]
 8027f5e:	68c1      	ldr	r1, [r0, #12]
 8027f60:	9100      	str	r1, [sp, #0]
 8027f62:	4907      	ldr	r1, [pc, #28]	; (8027f80 <asctime_r+0x40>)
 8027f64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027f68:	440b      	add	r3, r1
 8027f6a:	4906      	ldr	r1, [pc, #24]	; (8027f84 <asctime_r+0x44>)
 8027f6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027f70:	440a      	add	r2, r1
 8027f72:	4620      	mov	r0, r4
 8027f74:	4904      	ldr	r1, [pc, #16]	; (8027f88 <asctime_r+0x48>)
 8027f76:	f7fe fd97 	bl	8026aa8 <siprintf>
 8027f7a:	4620      	mov	r0, r4
 8027f7c:	b006      	add	sp, #24
 8027f7e:	bd10      	pop	{r4, pc}
 8027f80:	08047b41 	.word	0x08047b41
 8027f84:	08047b2c 	.word	0x08047b2c
 8027f88:	08047b0c 	.word	0x08047b0c

08027f8c <__assert_func>:
 8027f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027f8e:	4614      	mov	r4, r2
 8027f90:	461a      	mov	r2, r3
 8027f92:	4b09      	ldr	r3, [pc, #36]	; (8027fb8 <__assert_func+0x2c>)
 8027f94:	681b      	ldr	r3, [r3, #0]
 8027f96:	4605      	mov	r5, r0
 8027f98:	68d8      	ldr	r0, [r3, #12]
 8027f9a:	b14c      	cbz	r4, 8027fb0 <__assert_func+0x24>
 8027f9c:	4b07      	ldr	r3, [pc, #28]	; (8027fbc <__assert_func+0x30>)
 8027f9e:	9100      	str	r1, [sp, #0]
 8027fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027fa4:	4906      	ldr	r1, [pc, #24]	; (8027fc0 <__assert_func+0x34>)
 8027fa6:	462b      	mov	r3, r5
 8027fa8:	f000 fef4 	bl	8028d94 <fiprintf>
 8027fac:	f002 faee 	bl	802a58c <abort>
 8027fb0:	4b04      	ldr	r3, [pc, #16]	; (8027fc4 <__assert_func+0x38>)
 8027fb2:	461c      	mov	r4, r3
 8027fb4:	e7f3      	b.n	8027f9e <__assert_func+0x12>
 8027fb6:	bf00      	nop
 8027fb8:	200004c4 	.word	0x200004c4
 8027fbc:	08047b65 	.word	0x08047b65
 8027fc0:	08047b72 	.word	0x08047b72
 8027fc4:	08047b2b 	.word	0x08047b2b

08027fc8 <_close_r>:
 8027fc8:	b538      	push	{r3, r4, r5, lr}
 8027fca:	4d06      	ldr	r5, [pc, #24]	; (8027fe4 <_close_r+0x1c>)
 8027fcc:	2300      	movs	r3, #0
 8027fce:	4604      	mov	r4, r0
 8027fd0:	4608      	mov	r0, r1
 8027fd2:	602b      	str	r3, [r5, #0]
 8027fd4:	f7e0 fa06 	bl	80083e4 <_close>
 8027fd8:	1c43      	adds	r3, r0, #1
 8027fda:	d102      	bne.n	8027fe2 <_close_r+0x1a>
 8027fdc:	682b      	ldr	r3, [r5, #0]
 8027fde:	b103      	cbz	r3, 8027fe2 <_close_r+0x1a>
 8027fe0:	6023      	str	r3, [r4, #0]
 8027fe2:	bd38      	pop	{r3, r4, r5, pc}
 8027fe4:	2003013c 	.word	0x2003013c

08027fe8 <div>:
 8027fe8:	2900      	cmp	r1, #0
 8027fea:	b510      	push	{r4, lr}
 8027fec:	fb91 f4f2 	sdiv	r4, r1, r2
 8027ff0:	fb02 1314 	mls	r3, r2, r4, r1
 8027ff4:	db06      	blt.n	8028004 <div+0x1c>
 8027ff6:	2b00      	cmp	r3, #0
 8027ff8:	da01      	bge.n	8027ffe <div+0x16>
 8027ffa:	3401      	adds	r4, #1
 8027ffc:	1a9b      	subs	r3, r3, r2
 8027ffe:	e9c0 4300 	strd	r4, r3, [r0]
 8028002:	bd10      	pop	{r4, pc}
 8028004:	2b00      	cmp	r3, #0
 8028006:	bfc4      	itt	gt
 8028008:	f104 34ff 	addgt.w	r4, r4, #4294967295
 802800c:	189b      	addgt	r3, r3, r2
 802800e:	e7f6      	b.n	8027ffe <div+0x16>

08028010 <quorem>:
 8028010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028014:	6903      	ldr	r3, [r0, #16]
 8028016:	690c      	ldr	r4, [r1, #16]
 8028018:	42a3      	cmp	r3, r4
 802801a:	4607      	mov	r7, r0
 802801c:	f2c0 8081 	blt.w	8028122 <quorem+0x112>
 8028020:	3c01      	subs	r4, #1
 8028022:	f101 0814 	add.w	r8, r1, #20
 8028026:	f100 0514 	add.w	r5, r0, #20
 802802a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802802e:	9301      	str	r3, [sp, #4]
 8028030:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8028034:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028038:	3301      	adds	r3, #1
 802803a:	429a      	cmp	r2, r3
 802803c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8028040:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8028044:	fbb2 f6f3 	udiv	r6, r2, r3
 8028048:	d331      	bcc.n	80280ae <quorem+0x9e>
 802804a:	f04f 0e00 	mov.w	lr, #0
 802804e:	4640      	mov	r0, r8
 8028050:	46ac      	mov	ip, r5
 8028052:	46f2      	mov	sl, lr
 8028054:	f850 2b04 	ldr.w	r2, [r0], #4
 8028058:	b293      	uxth	r3, r2
 802805a:	fb06 e303 	mla	r3, r6, r3, lr
 802805e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8028062:	b29b      	uxth	r3, r3
 8028064:	ebaa 0303 	sub.w	r3, sl, r3
 8028068:	f8dc a000 	ldr.w	sl, [ip]
 802806c:	0c12      	lsrs	r2, r2, #16
 802806e:	fa13 f38a 	uxtah	r3, r3, sl
 8028072:	fb06 e202 	mla	r2, r6, r2, lr
 8028076:	9300      	str	r3, [sp, #0]
 8028078:	9b00      	ldr	r3, [sp, #0]
 802807a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802807e:	b292      	uxth	r2, r2
 8028080:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8028084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8028088:	f8bd 3000 	ldrh.w	r3, [sp]
 802808c:	4581      	cmp	r9, r0
 802808e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028092:	f84c 3b04 	str.w	r3, [ip], #4
 8028096:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802809a:	d2db      	bcs.n	8028054 <quorem+0x44>
 802809c:	f855 300b 	ldr.w	r3, [r5, fp]
 80280a0:	b92b      	cbnz	r3, 80280ae <quorem+0x9e>
 80280a2:	9b01      	ldr	r3, [sp, #4]
 80280a4:	3b04      	subs	r3, #4
 80280a6:	429d      	cmp	r5, r3
 80280a8:	461a      	mov	r2, r3
 80280aa:	d32e      	bcc.n	802810a <quorem+0xfa>
 80280ac:	613c      	str	r4, [r7, #16]
 80280ae:	4638      	mov	r0, r7
 80280b0:	f001 fa84 	bl	80295bc <__mcmp>
 80280b4:	2800      	cmp	r0, #0
 80280b6:	db24      	blt.n	8028102 <quorem+0xf2>
 80280b8:	3601      	adds	r6, #1
 80280ba:	4628      	mov	r0, r5
 80280bc:	f04f 0c00 	mov.w	ip, #0
 80280c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80280c4:	f8d0 e000 	ldr.w	lr, [r0]
 80280c8:	b293      	uxth	r3, r2
 80280ca:	ebac 0303 	sub.w	r3, ip, r3
 80280ce:	0c12      	lsrs	r2, r2, #16
 80280d0:	fa13 f38e 	uxtah	r3, r3, lr
 80280d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80280d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80280dc:	b29b      	uxth	r3, r3
 80280de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80280e2:	45c1      	cmp	r9, r8
 80280e4:	f840 3b04 	str.w	r3, [r0], #4
 80280e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80280ec:	d2e8      	bcs.n	80280c0 <quorem+0xb0>
 80280ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80280f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80280f6:	b922      	cbnz	r2, 8028102 <quorem+0xf2>
 80280f8:	3b04      	subs	r3, #4
 80280fa:	429d      	cmp	r5, r3
 80280fc:	461a      	mov	r2, r3
 80280fe:	d30a      	bcc.n	8028116 <quorem+0x106>
 8028100:	613c      	str	r4, [r7, #16]
 8028102:	4630      	mov	r0, r6
 8028104:	b003      	add	sp, #12
 8028106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802810a:	6812      	ldr	r2, [r2, #0]
 802810c:	3b04      	subs	r3, #4
 802810e:	2a00      	cmp	r2, #0
 8028110:	d1cc      	bne.n	80280ac <quorem+0x9c>
 8028112:	3c01      	subs	r4, #1
 8028114:	e7c7      	b.n	80280a6 <quorem+0x96>
 8028116:	6812      	ldr	r2, [r2, #0]
 8028118:	3b04      	subs	r3, #4
 802811a:	2a00      	cmp	r2, #0
 802811c:	d1f0      	bne.n	8028100 <quorem+0xf0>
 802811e:	3c01      	subs	r4, #1
 8028120:	e7eb      	b.n	80280fa <quorem+0xea>
 8028122:	2000      	movs	r0, #0
 8028124:	e7ee      	b.n	8028104 <quorem+0xf4>
 8028126:	Address 0x0000000008028126 is out of bounds.


08028128 <_dtoa_r>:
 8028128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802812c:	ed2d 8b02 	vpush	{d8}
 8028130:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8028132:	b091      	sub	sp, #68	; 0x44
 8028134:	ed8d 0b02 	vstr	d0, [sp, #8]
 8028138:	ec59 8b10 	vmov	r8, r9, d0
 802813c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802813e:	9106      	str	r1, [sp, #24]
 8028140:	4606      	mov	r6, r0
 8028142:	9208      	str	r2, [sp, #32]
 8028144:	930c      	str	r3, [sp, #48]	; 0x30
 8028146:	b975      	cbnz	r5, 8028166 <_dtoa_r+0x3e>
 8028148:	2010      	movs	r0, #16
 802814a:	f7fd fadd 	bl	8025708 <malloc>
 802814e:	4602      	mov	r2, r0
 8028150:	6270      	str	r0, [r6, #36]	; 0x24
 8028152:	b920      	cbnz	r0, 802815e <_dtoa_r+0x36>
 8028154:	4baa      	ldr	r3, [pc, #680]	; (8028400 <_dtoa_r+0x2d8>)
 8028156:	21ea      	movs	r1, #234	; 0xea
 8028158:	48aa      	ldr	r0, [pc, #680]	; (8028404 <_dtoa_r+0x2dc>)
 802815a:	f7ff ff17 	bl	8027f8c <__assert_func>
 802815e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8028162:	6005      	str	r5, [r0, #0]
 8028164:	60c5      	str	r5, [r0, #12]
 8028166:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8028168:	6819      	ldr	r1, [r3, #0]
 802816a:	b151      	cbz	r1, 8028182 <_dtoa_r+0x5a>
 802816c:	685a      	ldr	r2, [r3, #4]
 802816e:	604a      	str	r2, [r1, #4]
 8028170:	2301      	movs	r3, #1
 8028172:	4093      	lsls	r3, r2
 8028174:	608b      	str	r3, [r1, #8]
 8028176:	4630      	mov	r0, r6
 8028178:	f000 ffde 	bl	8029138 <_Bfree>
 802817c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802817e:	2200      	movs	r2, #0
 8028180:	601a      	str	r2, [r3, #0]
 8028182:	f1b9 0300 	subs.w	r3, r9, #0
 8028186:	bfbb      	ittet	lt
 8028188:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802818c:	9303      	strlt	r3, [sp, #12]
 802818e:	2300      	movge	r3, #0
 8028190:	2201      	movlt	r2, #1
 8028192:	bfac      	ite	ge
 8028194:	6023      	strge	r3, [r4, #0]
 8028196:	6022      	strlt	r2, [r4, #0]
 8028198:	4b9b      	ldr	r3, [pc, #620]	; (8028408 <_dtoa_r+0x2e0>)
 802819a:	9c03      	ldr	r4, [sp, #12]
 802819c:	43a3      	bics	r3, r4
 802819e:	d11c      	bne.n	80281da <_dtoa_r+0xb2>
 80281a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80281a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80281a6:	6013      	str	r3, [r2, #0]
 80281a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80281ac:	ea53 0308 	orrs.w	r3, r3, r8
 80281b0:	f000 84fd 	beq.w	8028bae <_dtoa_r+0xa86>
 80281b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80281b6:	b963      	cbnz	r3, 80281d2 <_dtoa_r+0xaa>
 80281b8:	4b94      	ldr	r3, [pc, #592]	; (802840c <_dtoa_r+0x2e4>)
 80281ba:	e01f      	b.n	80281fc <_dtoa_r+0xd4>
 80281bc:	4b94      	ldr	r3, [pc, #592]	; (8028410 <_dtoa_r+0x2e8>)
 80281be:	9301      	str	r3, [sp, #4]
 80281c0:	3308      	adds	r3, #8
 80281c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80281c4:	6013      	str	r3, [r2, #0]
 80281c6:	9801      	ldr	r0, [sp, #4]
 80281c8:	b011      	add	sp, #68	; 0x44
 80281ca:	ecbd 8b02 	vpop	{d8}
 80281ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281d2:	4b8e      	ldr	r3, [pc, #568]	; (802840c <_dtoa_r+0x2e4>)
 80281d4:	9301      	str	r3, [sp, #4]
 80281d6:	3303      	adds	r3, #3
 80281d8:	e7f3      	b.n	80281c2 <_dtoa_r+0x9a>
 80281da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80281de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80281e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281e6:	d10b      	bne.n	8028200 <_dtoa_r+0xd8>
 80281e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80281ea:	2301      	movs	r3, #1
 80281ec:	6013      	str	r3, [r2, #0]
 80281ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80281f0:	2b00      	cmp	r3, #0
 80281f2:	f000 84d9 	beq.w	8028ba8 <_dtoa_r+0xa80>
 80281f6:	4887      	ldr	r0, [pc, #540]	; (8028414 <_dtoa_r+0x2ec>)
 80281f8:	6018      	str	r0, [r3, #0]
 80281fa:	1e43      	subs	r3, r0, #1
 80281fc:	9301      	str	r3, [sp, #4]
 80281fe:	e7e2      	b.n	80281c6 <_dtoa_r+0x9e>
 8028200:	a90f      	add	r1, sp, #60	; 0x3c
 8028202:	aa0e      	add	r2, sp, #56	; 0x38
 8028204:	4630      	mov	r0, r6
 8028206:	eeb0 0b48 	vmov.f64	d0, d8
 802820a:	f001 fa7d 	bl	8029708 <__d2b>
 802820e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8028212:	4605      	mov	r5, r0
 8028214:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028216:	2900      	cmp	r1, #0
 8028218:	d046      	beq.n	80282a8 <_dtoa_r+0x180>
 802821a:	ee18 4a90 	vmov	r4, s17
 802821e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8028222:	ec53 2b18 	vmov	r2, r3, d8
 8028226:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802822a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802822e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8028232:	2400      	movs	r4, #0
 8028234:	ec43 2b16 	vmov	d6, r2, r3
 8028238:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802823c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80283e8 <_dtoa_r+0x2c0>
 8028240:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028244:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80283f0 <_dtoa_r+0x2c8>
 8028248:	eea7 6b05 	vfma.f64	d6, d7, d5
 802824c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80283f8 <_dtoa_r+0x2d0>
 8028250:	ee07 1a90 	vmov	s15, r1
 8028254:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8028258:	eeb0 7b46 	vmov.f64	d7, d6
 802825c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8028260:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8028264:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8028268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802826c:	ee16 ba90 	vmov	fp, s13
 8028270:	940a      	str	r4, [sp, #40]	; 0x28
 8028272:	d508      	bpl.n	8028286 <_dtoa_r+0x15e>
 8028274:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8028278:	eeb4 6b47 	vcmp.f64	d6, d7
 802827c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028280:	bf18      	it	ne
 8028282:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8028286:	f1bb 0f16 	cmp.w	fp, #22
 802828a:	d82f      	bhi.n	80282ec <_dtoa_r+0x1c4>
 802828c:	4b62      	ldr	r3, [pc, #392]	; (8028418 <_dtoa_r+0x2f0>)
 802828e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8028292:	ed93 7b00 	vldr	d7, [r3]
 8028296:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802829a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802829e:	d501      	bpl.n	80282a4 <_dtoa_r+0x17c>
 80282a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80282a4:	2300      	movs	r3, #0
 80282a6:	e022      	b.n	80282ee <_dtoa_r+0x1c6>
 80282a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80282aa:	4401      	add	r1, r0
 80282ac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80282b0:	2b20      	cmp	r3, #32
 80282b2:	bfc1      	itttt	gt
 80282b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80282b8:	fa04 f303 	lslgt.w	r3, r4, r3
 80282bc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80282c0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80282c4:	bfd6      	itet	le
 80282c6:	f1c3 0320 	rsble	r3, r3, #32
 80282ca:	ea43 0808 	orrgt.w	r8, r3, r8
 80282ce:	fa08 f803 	lslle.w	r8, r8, r3
 80282d2:	ee07 8a90 	vmov	s15, r8
 80282d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80282da:	3901      	subs	r1, #1
 80282dc:	ee17 4a90 	vmov	r4, s15
 80282e0:	ec53 2b17 	vmov	r2, r3, d7
 80282e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80282e8:	2401      	movs	r4, #1
 80282ea:	e7a3      	b.n	8028234 <_dtoa_r+0x10c>
 80282ec:	2301      	movs	r3, #1
 80282ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80282f0:	1a43      	subs	r3, r0, r1
 80282f2:	1e5a      	subs	r2, r3, #1
 80282f4:	bf45      	ittet	mi
 80282f6:	f1c3 0301 	rsbmi	r3, r3, #1
 80282fa:	9304      	strmi	r3, [sp, #16]
 80282fc:	2300      	movpl	r3, #0
 80282fe:	2300      	movmi	r3, #0
 8028300:	9205      	str	r2, [sp, #20]
 8028302:	bf54      	ite	pl
 8028304:	9304      	strpl	r3, [sp, #16]
 8028306:	9305      	strmi	r3, [sp, #20]
 8028308:	f1bb 0f00 	cmp.w	fp, #0
 802830c:	db18      	blt.n	8028340 <_dtoa_r+0x218>
 802830e:	9b05      	ldr	r3, [sp, #20]
 8028310:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8028314:	445b      	add	r3, fp
 8028316:	9305      	str	r3, [sp, #20]
 8028318:	2300      	movs	r3, #0
 802831a:	9a06      	ldr	r2, [sp, #24]
 802831c:	2a09      	cmp	r2, #9
 802831e:	d849      	bhi.n	80283b4 <_dtoa_r+0x28c>
 8028320:	2a05      	cmp	r2, #5
 8028322:	bfc4      	itt	gt
 8028324:	3a04      	subgt	r2, #4
 8028326:	9206      	strgt	r2, [sp, #24]
 8028328:	9a06      	ldr	r2, [sp, #24]
 802832a:	f1a2 0202 	sub.w	r2, r2, #2
 802832e:	bfcc      	ite	gt
 8028330:	2400      	movgt	r4, #0
 8028332:	2401      	movle	r4, #1
 8028334:	2a03      	cmp	r2, #3
 8028336:	d848      	bhi.n	80283ca <_dtoa_r+0x2a2>
 8028338:	e8df f002 	tbb	[pc, r2]
 802833c:	3a2c2e0b 	.word	0x3a2c2e0b
 8028340:	9b04      	ldr	r3, [sp, #16]
 8028342:	2200      	movs	r2, #0
 8028344:	eba3 030b 	sub.w	r3, r3, fp
 8028348:	9304      	str	r3, [sp, #16]
 802834a:	9209      	str	r2, [sp, #36]	; 0x24
 802834c:	f1cb 0300 	rsb	r3, fp, #0
 8028350:	e7e3      	b.n	802831a <_dtoa_r+0x1f2>
 8028352:	2200      	movs	r2, #0
 8028354:	9207      	str	r2, [sp, #28]
 8028356:	9a08      	ldr	r2, [sp, #32]
 8028358:	2a00      	cmp	r2, #0
 802835a:	dc39      	bgt.n	80283d0 <_dtoa_r+0x2a8>
 802835c:	f04f 0a01 	mov.w	sl, #1
 8028360:	46d1      	mov	r9, sl
 8028362:	4652      	mov	r2, sl
 8028364:	f8cd a020 	str.w	sl, [sp, #32]
 8028368:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802836a:	2100      	movs	r1, #0
 802836c:	6079      	str	r1, [r7, #4]
 802836e:	2004      	movs	r0, #4
 8028370:	f100 0c14 	add.w	ip, r0, #20
 8028374:	4594      	cmp	ip, r2
 8028376:	6879      	ldr	r1, [r7, #4]
 8028378:	d92f      	bls.n	80283da <_dtoa_r+0x2b2>
 802837a:	4630      	mov	r0, r6
 802837c:	930d      	str	r3, [sp, #52]	; 0x34
 802837e:	f000 fe9b 	bl	80290b8 <_Balloc>
 8028382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028384:	9001      	str	r0, [sp, #4]
 8028386:	4602      	mov	r2, r0
 8028388:	2800      	cmp	r0, #0
 802838a:	d149      	bne.n	8028420 <_dtoa_r+0x2f8>
 802838c:	4b23      	ldr	r3, [pc, #140]	; (802841c <_dtoa_r+0x2f4>)
 802838e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8028392:	e6e1      	b.n	8028158 <_dtoa_r+0x30>
 8028394:	2201      	movs	r2, #1
 8028396:	e7dd      	b.n	8028354 <_dtoa_r+0x22c>
 8028398:	2200      	movs	r2, #0
 802839a:	9207      	str	r2, [sp, #28]
 802839c:	9a08      	ldr	r2, [sp, #32]
 802839e:	eb0b 0a02 	add.w	sl, fp, r2
 80283a2:	f10a 0901 	add.w	r9, sl, #1
 80283a6:	464a      	mov	r2, r9
 80283a8:	2a01      	cmp	r2, #1
 80283aa:	bfb8      	it	lt
 80283ac:	2201      	movlt	r2, #1
 80283ae:	e7db      	b.n	8028368 <_dtoa_r+0x240>
 80283b0:	2201      	movs	r2, #1
 80283b2:	e7f2      	b.n	802839a <_dtoa_r+0x272>
 80283b4:	2401      	movs	r4, #1
 80283b6:	2200      	movs	r2, #0
 80283b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80283bc:	f04f 3aff 	mov.w	sl, #4294967295
 80283c0:	2100      	movs	r1, #0
 80283c2:	46d1      	mov	r9, sl
 80283c4:	2212      	movs	r2, #18
 80283c6:	9108      	str	r1, [sp, #32]
 80283c8:	e7ce      	b.n	8028368 <_dtoa_r+0x240>
 80283ca:	2201      	movs	r2, #1
 80283cc:	9207      	str	r2, [sp, #28]
 80283ce:	e7f5      	b.n	80283bc <_dtoa_r+0x294>
 80283d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80283d4:	46d1      	mov	r9, sl
 80283d6:	4652      	mov	r2, sl
 80283d8:	e7c6      	b.n	8028368 <_dtoa_r+0x240>
 80283da:	3101      	adds	r1, #1
 80283dc:	6079      	str	r1, [r7, #4]
 80283de:	0040      	lsls	r0, r0, #1
 80283e0:	e7c6      	b.n	8028370 <_dtoa_r+0x248>
 80283e2:	bf00      	nop
 80283e4:	f3af 8000 	nop.w
 80283e8:	636f4361 	.word	0x636f4361
 80283ec:	3fd287a7 	.word	0x3fd287a7
 80283f0:	8b60c8b3 	.word	0x8b60c8b3
 80283f4:	3fc68a28 	.word	0x3fc68a28
 80283f8:	509f79fb 	.word	0x509f79fb
 80283fc:	3fd34413 	.word	0x3fd34413
 8028400:	08047630 	.word	0x08047630
 8028404:	08047bae 	.word	0x08047bae
 8028408:	7ff00000 	.word	0x7ff00000
 802840c:	08047baa 	.word	0x08047baa
 8028410:	08047ba1 	.word	0x08047ba1
 8028414:	08047d8a 	.word	0x08047d8a
 8028418:	08047ca0 	.word	0x08047ca0
 802841c:	08047c09 	.word	0x08047c09
 8028420:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8028422:	9901      	ldr	r1, [sp, #4]
 8028424:	6011      	str	r1, [r2, #0]
 8028426:	f1b9 0f0e 	cmp.w	r9, #14
 802842a:	d86c      	bhi.n	8028506 <_dtoa_r+0x3de>
 802842c:	2c00      	cmp	r4, #0
 802842e:	d06a      	beq.n	8028506 <_dtoa_r+0x3de>
 8028430:	f1bb 0f00 	cmp.w	fp, #0
 8028434:	f340 80a0 	ble.w	8028578 <_dtoa_r+0x450>
 8028438:	49c1      	ldr	r1, [pc, #772]	; (8028740 <_dtoa_r+0x618>)
 802843a:	f00b 020f 	and.w	r2, fp, #15
 802843e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8028442:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8028446:	ed92 7b00 	vldr	d7, [r2]
 802844a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802844e:	f000 8087 	beq.w	8028560 <_dtoa_r+0x438>
 8028452:	4abc      	ldr	r2, [pc, #752]	; (8028744 <_dtoa_r+0x61c>)
 8028454:	ed92 6b08 	vldr	d6, [r2, #32]
 8028458:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802845c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8028460:	f001 010f 	and.w	r1, r1, #15
 8028464:	2203      	movs	r2, #3
 8028466:	48b7      	ldr	r0, [pc, #732]	; (8028744 <_dtoa_r+0x61c>)
 8028468:	2900      	cmp	r1, #0
 802846a:	d17b      	bne.n	8028564 <_dtoa_r+0x43c>
 802846c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8028470:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8028474:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802847a:	2900      	cmp	r1, #0
 802847c:	f000 80a2 	beq.w	80285c4 <_dtoa_r+0x49c>
 8028480:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8028484:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028488:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802848c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028490:	f140 8098 	bpl.w	80285c4 <_dtoa_r+0x49c>
 8028494:	f1b9 0f00 	cmp.w	r9, #0
 8028498:	f000 8094 	beq.w	80285c4 <_dtoa_r+0x49c>
 802849c:	f1ba 0f00 	cmp.w	sl, #0
 80284a0:	dd2f      	ble.n	8028502 <_dtoa_r+0x3da>
 80284a2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80284a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80284aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80284ae:	f10b 37ff 	add.w	r7, fp, #4294967295
 80284b2:	3201      	adds	r2, #1
 80284b4:	4650      	mov	r0, sl
 80284b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80284ba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80284be:	ee07 2a90 	vmov	s15, r2
 80284c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80284c6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80284ca:	ee15 4a90 	vmov	r4, s11
 80284ce:	ec52 1b15 	vmov	r1, r2, d5
 80284d2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80284d6:	2800      	cmp	r0, #0
 80284d8:	d177      	bne.n	80285ca <_dtoa_r+0x4a2>
 80284da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80284de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80284e2:	ec42 1b17 	vmov	d7, r1, r2
 80284e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80284ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80284ee:	f300 8263 	bgt.w	80289b8 <_dtoa_r+0x890>
 80284f2:	eeb1 7b47 	vneg.f64	d7, d7
 80284f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80284fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80284fe:	f100 8258 	bmi.w	80289b2 <_dtoa_r+0x88a>
 8028502:	ed8d 8b02 	vstr	d8, [sp, #8]
 8028506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028508:	2a00      	cmp	r2, #0
 802850a:	f2c0 811d 	blt.w	8028748 <_dtoa_r+0x620>
 802850e:	f1bb 0f0e 	cmp.w	fp, #14
 8028512:	f300 8119 	bgt.w	8028748 <_dtoa_r+0x620>
 8028516:	4b8a      	ldr	r3, [pc, #552]	; (8028740 <_dtoa_r+0x618>)
 8028518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802851c:	ed93 6b00 	vldr	d6, [r3]
 8028520:	9b08      	ldr	r3, [sp, #32]
 8028522:	2b00      	cmp	r3, #0
 8028524:	f280 80b7 	bge.w	8028696 <_dtoa_r+0x56e>
 8028528:	f1b9 0f00 	cmp.w	r9, #0
 802852c:	f300 80b3 	bgt.w	8028696 <_dtoa_r+0x56e>
 8028530:	f040 823f 	bne.w	80289b2 <_dtoa_r+0x88a>
 8028534:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8028538:	ee26 6b07 	vmul.f64	d6, d6, d7
 802853c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028540:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028548:	464c      	mov	r4, r9
 802854a:	464f      	mov	r7, r9
 802854c:	f280 8215 	bge.w	802897a <_dtoa_r+0x852>
 8028550:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028554:	2331      	movs	r3, #49	; 0x31
 8028556:	f808 3b01 	strb.w	r3, [r8], #1
 802855a:	f10b 0b01 	add.w	fp, fp, #1
 802855e:	e211      	b.n	8028984 <_dtoa_r+0x85c>
 8028560:	2202      	movs	r2, #2
 8028562:	e780      	b.n	8028466 <_dtoa_r+0x33e>
 8028564:	07cc      	lsls	r4, r1, #31
 8028566:	d504      	bpl.n	8028572 <_dtoa_r+0x44a>
 8028568:	ed90 6b00 	vldr	d6, [r0]
 802856c:	3201      	adds	r2, #1
 802856e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028572:	1049      	asrs	r1, r1, #1
 8028574:	3008      	adds	r0, #8
 8028576:	e777      	b.n	8028468 <_dtoa_r+0x340>
 8028578:	d022      	beq.n	80285c0 <_dtoa_r+0x498>
 802857a:	f1cb 0100 	rsb	r1, fp, #0
 802857e:	4a70      	ldr	r2, [pc, #448]	; (8028740 <_dtoa_r+0x618>)
 8028580:	f001 000f 	and.w	r0, r1, #15
 8028584:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028588:	ed92 7b00 	vldr	d7, [r2]
 802858c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8028590:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028594:	486b      	ldr	r0, [pc, #428]	; (8028744 <_dtoa_r+0x61c>)
 8028596:	1109      	asrs	r1, r1, #4
 8028598:	2400      	movs	r4, #0
 802859a:	2202      	movs	r2, #2
 802859c:	b929      	cbnz	r1, 80285aa <_dtoa_r+0x482>
 802859e:	2c00      	cmp	r4, #0
 80285a0:	f43f af6a 	beq.w	8028478 <_dtoa_r+0x350>
 80285a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80285a8:	e766      	b.n	8028478 <_dtoa_r+0x350>
 80285aa:	07cf      	lsls	r7, r1, #31
 80285ac:	d505      	bpl.n	80285ba <_dtoa_r+0x492>
 80285ae:	ed90 6b00 	vldr	d6, [r0]
 80285b2:	3201      	adds	r2, #1
 80285b4:	2401      	movs	r4, #1
 80285b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80285ba:	1049      	asrs	r1, r1, #1
 80285bc:	3008      	adds	r0, #8
 80285be:	e7ed      	b.n	802859c <_dtoa_r+0x474>
 80285c0:	2202      	movs	r2, #2
 80285c2:	e759      	b.n	8028478 <_dtoa_r+0x350>
 80285c4:	465f      	mov	r7, fp
 80285c6:	4648      	mov	r0, r9
 80285c8:	e775      	b.n	80284b6 <_dtoa_r+0x38e>
 80285ca:	ec42 1b17 	vmov	d7, r1, r2
 80285ce:	4a5c      	ldr	r2, [pc, #368]	; (8028740 <_dtoa_r+0x618>)
 80285d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80285d4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80285d8:	9a01      	ldr	r2, [sp, #4]
 80285da:	1814      	adds	r4, r2, r0
 80285dc:	9a07      	ldr	r2, [sp, #28]
 80285de:	b352      	cbz	r2, 8028636 <_dtoa_r+0x50e>
 80285e0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80285e4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80285e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80285ec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80285f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80285f4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80285f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80285fc:	ee14 2a90 	vmov	r2, s9
 8028600:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8028604:	3230      	adds	r2, #48	; 0x30
 8028606:	ee36 6b45 	vsub.f64	d6, d6, d5
 802860a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802860e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028612:	f808 2b01 	strb.w	r2, [r8], #1
 8028616:	d439      	bmi.n	802868c <_dtoa_r+0x564>
 8028618:	ee32 5b46 	vsub.f64	d5, d2, d6
 802861c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8028620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028624:	d472      	bmi.n	802870c <_dtoa_r+0x5e4>
 8028626:	45a0      	cmp	r8, r4
 8028628:	f43f af6b 	beq.w	8028502 <_dtoa_r+0x3da>
 802862c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8028630:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028634:	e7e0      	b.n	80285f8 <_dtoa_r+0x4d0>
 8028636:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802863a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802863e:	4621      	mov	r1, r4
 8028640:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028644:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8028648:	ee14 2a90 	vmov	r2, s9
 802864c:	3230      	adds	r2, #48	; 0x30
 802864e:	f808 2b01 	strb.w	r2, [r8], #1
 8028652:	45a0      	cmp	r8, r4
 8028654:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8028658:	ee36 6b45 	vsub.f64	d6, d6, d5
 802865c:	d118      	bne.n	8028690 <_dtoa_r+0x568>
 802865e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8028662:	ee37 4b05 	vadd.f64	d4, d7, d5
 8028666:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802866a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802866e:	dc4d      	bgt.n	802870c <_dtoa_r+0x5e4>
 8028670:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028674:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802867c:	f57f af41 	bpl.w	8028502 <_dtoa_r+0x3da>
 8028680:	4688      	mov	r8, r1
 8028682:	3901      	subs	r1, #1
 8028684:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8028688:	2b30      	cmp	r3, #48	; 0x30
 802868a:	d0f9      	beq.n	8028680 <_dtoa_r+0x558>
 802868c:	46bb      	mov	fp, r7
 802868e:	e02a      	b.n	80286e6 <_dtoa_r+0x5be>
 8028690:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028694:	e7d6      	b.n	8028644 <_dtoa_r+0x51c>
 8028696:	ed9d 7b02 	vldr	d7, [sp, #8]
 802869a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802869e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80286a2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80286a6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80286aa:	ee15 3a10 	vmov	r3, s10
 80286ae:	3330      	adds	r3, #48	; 0x30
 80286b0:	f808 3b01 	strb.w	r3, [r8], #1
 80286b4:	9b01      	ldr	r3, [sp, #4]
 80286b6:	eba8 0303 	sub.w	r3, r8, r3
 80286ba:	4599      	cmp	r9, r3
 80286bc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80286c0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80286c4:	d133      	bne.n	802872e <_dtoa_r+0x606>
 80286c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80286ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80286ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286d2:	dc1a      	bgt.n	802870a <_dtoa_r+0x5e2>
 80286d4:	eeb4 7b46 	vcmp.f64	d7, d6
 80286d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286dc:	d103      	bne.n	80286e6 <_dtoa_r+0x5be>
 80286de:	ee15 3a10 	vmov	r3, s10
 80286e2:	07d9      	lsls	r1, r3, #31
 80286e4:	d411      	bmi.n	802870a <_dtoa_r+0x5e2>
 80286e6:	4629      	mov	r1, r5
 80286e8:	4630      	mov	r0, r6
 80286ea:	f000 fd25 	bl	8029138 <_Bfree>
 80286ee:	2300      	movs	r3, #0
 80286f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80286f2:	f888 3000 	strb.w	r3, [r8]
 80286f6:	f10b 0301 	add.w	r3, fp, #1
 80286fa:	6013      	str	r3, [r2, #0]
 80286fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80286fe:	2b00      	cmp	r3, #0
 8028700:	f43f ad61 	beq.w	80281c6 <_dtoa_r+0x9e>
 8028704:	f8c3 8000 	str.w	r8, [r3]
 8028708:	e55d      	b.n	80281c6 <_dtoa_r+0x9e>
 802870a:	465f      	mov	r7, fp
 802870c:	4643      	mov	r3, r8
 802870e:	4698      	mov	r8, r3
 8028710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028714:	2a39      	cmp	r2, #57	; 0x39
 8028716:	d106      	bne.n	8028726 <_dtoa_r+0x5fe>
 8028718:	9a01      	ldr	r2, [sp, #4]
 802871a:	429a      	cmp	r2, r3
 802871c:	d1f7      	bne.n	802870e <_dtoa_r+0x5e6>
 802871e:	9901      	ldr	r1, [sp, #4]
 8028720:	2230      	movs	r2, #48	; 0x30
 8028722:	3701      	adds	r7, #1
 8028724:	700a      	strb	r2, [r1, #0]
 8028726:	781a      	ldrb	r2, [r3, #0]
 8028728:	3201      	adds	r2, #1
 802872a:	701a      	strb	r2, [r3, #0]
 802872c:	e7ae      	b.n	802868c <_dtoa_r+0x564>
 802872e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028732:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802873a:	d1b2      	bne.n	80286a2 <_dtoa_r+0x57a>
 802873c:	e7d3      	b.n	80286e6 <_dtoa_r+0x5be>
 802873e:	bf00      	nop
 8028740:	08047ca0 	.word	0x08047ca0
 8028744:	08047c78 	.word	0x08047c78
 8028748:	9907      	ldr	r1, [sp, #28]
 802874a:	2900      	cmp	r1, #0
 802874c:	f000 80d0 	beq.w	80288f0 <_dtoa_r+0x7c8>
 8028750:	9906      	ldr	r1, [sp, #24]
 8028752:	2901      	cmp	r1, #1
 8028754:	f300 80b4 	bgt.w	80288c0 <_dtoa_r+0x798>
 8028758:	990a      	ldr	r1, [sp, #40]	; 0x28
 802875a:	2900      	cmp	r1, #0
 802875c:	f000 80ac 	beq.w	80288b8 <_dtoa_r+0x790>
 8028760:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8028764:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8028768:	461c      	mov	r4, r3
 802876a:	930a      	str	r3, [sp, #40]	; 0x28
 802876c:	9b04      	ldr	r3, [sp, #16]
 802876e:	4413      	add	r3, r2
 8028770:	9304      	str	r3, [sp, #16]
 8028772:	9b05      	ldr	r3, [sp, #20]
 8028774:	2101      	movs	r1, #1
 8028776:	4413      	add	r3, r2
 8028778:	4630      	mov	r0, r6
 802877a:	9305      	str	r3, [sp, #20]
 802877c:	f000 fd94 	bl	80292a8 <__i2b>
 8028780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028782:	4607      	mov	r7, r0
 8028784:	f1b8 0f00 	cmp.w	r8, #0
 8028788:	dd0d      	ble.n	80287a6 <_dtoa_r+0x67e>
 802878a:	9a05      	ldr	r2, [sp, #20]
 802878c:	2a00      	cmp	r2, #0
 802878e:	dd0a      	ble.n	80287a6 <_dtoa_r+0x67e>
 8028790:	4542      	cmp	r2, r8
 8028792:	9904      	ldr	r1, [sp, #16]
 8028794:	bfa8      	it	ge
 8028796:	4642      	movge	r2, r8
 8028798:	1a89      	subs	r1, r1, r2
 802879a:	9104      	str	r1, [sp, #16]
 802879c:	9905      	ldr	r1, [sp, #20]
 802879e:	eba8 0802 	sub.w	r8, r8, r2
 80287a2:	1a8a      	subs	r2, r1, r2
 80287a4:	9205      	str	r2, [sp, #20]
 80287a6:	b303      	cbz	r3, 80287ea <_dtoa_r+0x6c2>
 80287a8:	9a07      	ldr	r2, [sp, #28]
 80287aa:	2a00      	cmp	r2, #0
 80287ac:	f000 80a5 	beq.w	80288fa <_dtoa_r+0x7d2>
 80287b0:	2c00      	cmp	r4, #0
 80287b2:	dd13      	ble.n	80287dc <_dtoa_r+0x6b4>
 80287b4:	4639      	mov	r1, r7
 80287b6:	4622      	mov	r2, r4
 80287b8:	4630      	mov	r0, r6
 80287ba:	930d      	str	r3, [sp, #52]	; 0x34
 80287bc:	f000 fe34 	bl	8029428 <__pow5mult>
 80287c0:	462a      	mov	r2, r5
 80287c2:	4601      	mov	r1, r0
 80287c4:	4607      	mov	r7, r0
 80287c6:	4630      	mov	r0, r6
 80287c8:	f000 fd84 	bl	80292d4 <__multiply>
 80287cc:	4629      	mov	r1, r5
 80287ce:	900a      	str	r0, [sp, #40]	; 0x28
 80287d0:	4630      	mov	r0, r6
 80287d2:	f000 fcb1 	bl	8029138 <_Bfree>
 80287d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80287d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80287da:	4615      	mov	r5, r2
 80287dc:	1b1a      	subs	r2, r3, r4
 80287de:	d004      	beq.n	80287ea <_dtoa_r+0x6c2>
 80287e0:	4629      	mov	r1, r5
 80287e2:	4630      	mov	r0, r6
 80287e4:	f000 fe20 	bl	8029428 <__pow5mult>
 80287e8:	4605      	mov	r5, r0
 80287ea:	2101      	movs	r1, #1
 80287ec:	4630      	mov	r0, r6
 80287ee:	f000 fd5b 	bl	80292a8 <__i2b>
 80287f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80287f4:	2b00      	cmp	r3, #0
 80287f6:	4604      	mov	r4, r0
 80287f8:	f340 8081 	ble.w	80288fe <_dtoa_r+0x7d6>
 80287fc:	461a      	mov	r2, r3
 80287fe:	4601      	mov	r1, r0
 8028800:	4630      	mov	r0, r6
 8028802:	f000 fe11 	bl	8029428 <__pow5mult>
 8028806:	9b06      	ldr	r3, [sp, #24]
 8028808:	2b01      	cmp	r3, #1
 802880a:	4604      	mov	r4, r0
 802880c:	dd7a      	ble.n	8028904 <_dtoa_r+0x7dc>
 802880e:	2300      	movs	r3, #0
 8028810:	930a      	str	r3, [sp, #40]	; 0x28
 8028812:	6922      	ldr	r2, [r4, #16]
 8028814:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8028818:	6910      	ldr	r0, [r2, #16]
 802881a:	f000 fcf5 	bl	8029208 <__hi0bits>
 802881e:	f1c0 0020 	rsb	r0, r0, #32
 8028822:	9b05      	ldr	r3, [sp, #20]
 8028824:	4418      	add	r0, r3
 8028826:	f010 001f 	ands.w	r0, r0, #31
 802882a:	f000 808c 	beq.w	8028946 <_dtoa_r+0x81e>
 802882e:	f1c0 0220 	rsb	r2, r0, #32
 8028832:	2a04      	cmp	r2, #4
 8028834:	f340 8085 	ble.w	8028942 <_dtoa_r+0x81a>
 8028838:	f1c0 001c 	rsb	r0, r0, #28
 802883c:	9b04      	ldr	r3, [sp, #16]
 802883e:	4403      	add	r3, r0
 8028840:	9304      	str	r3, [sp, #16]
 8028842:	9b05      	ldr	r3, [sp, #20]
 8028844:	4403      	add	r3, r0
 8028846:	4480      	add	r8, r0
 8028848:	9305      	str	r3, [sp, #20]
 802884a:	9b04      	ldr	r3, [sp, #16]
 802884c:	2b00      	cmp	r3, #0
 802884e:	dd05      	ble.n	802885c <_dtoa_r+0x734>
 8028850:	4629      	mov	r1, r5
 8028852:	461a      	mov	r2, r3
 8028854:	4630      	mov	r0, r6
 8028856:	f000 fe41 	bl	80294dc <__lshift>
 802885a:	4605      	mov	r5, r0
 802885c:	9b05      	ldr	r3, [sp, #20]
 802885e:	2b00      	cmp	r3, #0
 8028860:	dd05      	ble.n	802886e <_dtoa_r+0x746>
 8028862:	4621      	mov	r1, r4
 8028864:	461a      	mov	r2, r3
 8028866:	4630      	mov	r0, r6
 8028868:	f000 fe38 	bl	80294dc <__lshift>
 802886c:	4604      	mov	r4, r0
 802886e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028870:	2b00      	cmp	r3, #0
 8028872:	d06a      	beq.n	802894a <_dtoa_r+0x822>
 8028874:	4621      	mov	r1, r4
 8028876:	4628      	mov	r0, r5
 8028878:	f000 fea0 	bl	80295bc <__mcmp>
 802887c:	2800      	cmp	r0, #0
 802887e:	da64      	bge.n	802894a <_dtoa_r+0x822>
 8028880:	2300      	movs	r3, #0
 8028882:	4629      	mov	r1, r5
 8028884:	220a      	movs	r2, #10
 8028886:	4630      	mov	r0, r6
 8028888:	f000 fc78 	bl	802917c <__multadd>
 802888c:	9b07      	ldr	r3, [sp, #28]
 802888e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028892:	4605      	mov	r5, r0
 8028894:	2b00      	cmp	r3, #0
 8028896:	f000 8191 	beq.w	8028bbc <_dtoa_r+0xa94>
 802889a:	4639      	mov	r1, r7
 802889c:	2300      	movs	r3, #0
 802889e:	220a      	movs	r2, #10
 80288a0:	4630      	mov	r0, r6
 80288a2:	f000 fc6b 	bl	802917c <__multadd>
 80288a6:	f1ba 0f00 	cmp.w	sl, #0
 80288aa:	4607      	mov	r7, r0
 80288ac:	f300 808d 	bgt.w	80289ca <_dtoa_r+0x8a2>
 80288b0:	9b06      	ldr	r3, [sp, #24]
 80288b2:	2b02      	cmp	r3, #2
 80288b4:	dc50      	bgt.n	8028958 <_dtoa_r+0x830>
 80288b6:	e088      	b.n	80289ca <_dtoa_r+0x8a2>
 80288b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80288ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80288be:	e751      	b.n	8028764 <_dtoa_r+0x63c>
 80288c0:	f109 34ff 	add.w	r4, r9, #4294967295
 80288c4:	42a3      	cmp	r3, r4
 80288c6:	bfbf      	itttt	lt
 80288c8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80288ca:	1ae3      	sublt	r3, r4, r3
 80288cc:	18d2      	addlt	r2, r2, r3
 80288ce:	9209      	strlt	r2, [sp, #36]	; 0x24
 80288d0:	bfb6      	itet	lt
 80288d2:	4623      	movlt	r3, r4
 80288d4:	1b1c      	subge	r4, r3, r4
 80288d6:	2400      	movlt	r4, #0
 80288d8:	f1b9 0f00 	cmp.w	r9, #0
 80288dc:	bfb5      	itete	lt
 80288de:	9a04      	ldrlt	r2, [sp, #16]
 80288e0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80288e4:	eba2 0809 	sublt.w	r8, r2, r9
 80288e8:	464a      	movge	r2, r9
 80288ea:	bfb8      	it	lt
 80288ec:	2200      	movlt	r2, #0
 80288ee:	e73c      	b.n	802876a <_dtoa_r+0x642>
 80288f0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80288f4:	9f07      	ldr	r7, [sp, #28]
 80288f6:	461c      	mov	r4, r3
 80288f8:	e744      	b.n	8028784 <_dtoa_r+0x65c>
 80288fa:	461a      	mov	r2, r3
 80288fc:	e770      	b.n	80287e0 <_dtoa_r+0x6b8>
 80288fe:	9b06      	ldr	r3, [sp, #24]
 8028900:	2b01      	cmp	r3, #1
 8028902:	dc18      	bgt.n	8028936 <_dtoa_r+0x80e>
 8028904:	9b02      	ldr	r3, [sp, #8]
 8028906:	b9b3      	cbnz	r3, 8028936 <_dtoa_r+0x80e>
 8028908:	9b03      	ldr	r3, [sp, #12]
 802890a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802890e:	b9a2      	cbnz	r2, 802893a <_dtoa_r+0x812>
 8028910:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8028914:	0d12      	lsrs	r2, r2, #20
 8028916:	0512      	lsls	r2, r2, #20
 8028918:	b18a      	cbz	r2, 802893e <_dtoa_r+0x816>
 802891a:	9b04      	ldr	r3, [sp, #16]
 802891c:	3301      	adds	r3, #1
 802891e:	9304      	str	r3, [sp, #16]
 8028920:	9b05      	ldr	r3, [sp, #20]
 8028922:	3301      	adds	r3, #1
 8028924:	9305      	str	r3, [sp, #20]
 8028926:	2301      	movs	r3, #1
 8028928:	930a      	str	r3, [sp, #40]	; 0x28
 802892a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802892c:	2b00      	cmp	r3, #0
 802892e:	f47f af70 	bne.w	8028812 <_dtoa_r+0x6ea>
 8028932:	2001      	movs	r0, #1
 8028934:	e775      	b.n	8028822 <_dtoa_r+0x6fa>
 8028936:	2300      	movs	r3, #0
 8028938:	e7f6      	b.n	8028928 <_dtoa_r+0x800>
 802893a:	9b02      	ldr	r3, [sp, #8]
 802893c:	e7f4      	b.n	8028928 <_dtoa_r+0x800>
 802893e:	920a      	str	r2, [sp, #40]	; 0x28
 8028940:	e7f3      	b.n	802892a <_dtoa_r+0x802>
 8028942:	d082      	beq.n	802884a <_dtoa_r+0x722>
 8028944:	4610      	mov	r0, r2
 8028946:	301c      	adds	r0, #28
 8028948:	e778      	b.n	802883c <_dtoa_r+0x714>
 802894a:	f1b9 0f00 	cmp.w	r9, #0
 802894e:	dc37      	bgt.n	80289c0 <_dtoa_r+0x898>
 8028950:	9b06      	ldr	r3, [sp, #24]
 8028952:	2b02      	cmp	r3, #2
 8028954:	dd34      	ble.n	80289c0 <_dtoa_r+0x898>
 8028956:	46ca      	mov	sl, r9
 8028958:	f1ba 0f00 	cmp.w	sl, #0
 802895c:	d10d      	bne.n	802897a <_dtoa_r+0x852>
 802895e:	4621      	mov	r1, r4
 8028960:	4653      	mov	r3, sl
 8028962:	2205      	movs	r2, #5
 8028964:	4630      	mov	r0, r6
 8028966:	f000 fc09 	bl	802917c <__multadd>
 802896a:	4601      	mov	r1, r0
 802896c:	4604      	mov	r4, r0
 802896e:	4628      	mov	r0, r5
 8028970:	f000 fe24 	bl	80295bc <__mcmp>
 8028974:	2800      	cmp	r0, #0
 8028976:	f73f adeb 	bgt.w	8028550 <_dtoa_r+0x428>
 802897a:	9b08      	ldr	r3, [sp, #32]
 802897c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028980:	ea6f 0b03 	mvn.w	fp, r3
 8028984:	f04f 0900 	mov.w	r9, #0
 8028988:	4621      	mov	r1, r4
 802898a:	4630      	mov	r0, r6
 802898c:	f000 fbd4 	bl	8029138 <_Bfree>
 8028990:	2f00      	cmp	r7, #0
 8028992:	f43f aea8 	beq.w	80286e6 <_dtoa_r+0x5be>
 8028996:	f1b9 0f00 	cmp.w	r9, #0
 802899a:	d005      	beq.n	80289a8 <_dtoa_r+0x880>
 802899c:	45b9      	cmp	r9, r7
 802899e:	d003      	beq.n	80289a8 <_dtoa_r+0x880>
 80289a0:	4649      	mov	r1, r9
 80289a2:	4630      	mov	r0, r6
 80289a4:	f000 fbc8 	bl	8029138 <_Bfree>
 80289a8:	4639      	mov	r1, r7
 80289aa:	4630      	mov	r0, r6
 80289ac:	f000 fbc4 	bl	8029138 <_Bfree>
 80289b0:	e699      	b.n	80286e6 <_dtoa_r+0x5be>
 80289b2:	2400      	movs	r4, #0
 80289b4:	4627      	mov	r7, r4
 80289b6:	e7e0      	b.n	802897a <_dtoa_r+0x852>
 80289b8:	46bb      	mov	fp, r7
 80289ba:	4604      	mov	r4, r0
 80289bc:	4607      	mov	r7, r0
 80289be:	e5c7      	b.n	8028550 <_dtoa_r+0x428>
 80289c0:	9b07      	ldr	r3, [sp, #28]
 80289c2:	46ca      	mov	sl, r9
 80289c4:	2b00      	cmp	r3, #0
 80289c6:	f000 8100 	beq.w	8028bca <_dtoa_r+0xaa2>
 80289ca:	f1b8 0f00 	cmp.w	r8, #0
 80289ce:	dd05      	ble.n	80289dc <_dtoa_r+0x8b4>
 80289d0:	4639      	mov	r1, r7
 80289d2:	4642      	mov	r2, r8
 80289d4:	4630      	mov	r0, r6
 80289d6:	f000 fd81 	bl	80294dc <__lshift>
 80289da:	4607      	mov	r7, r0
 80289dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80289de:	2b00      	cmp	r3, #0
 80289e0:	d05d      	beq.n	8028a9e <_dtoa_r+0x976>
 80289e2:	6879      	ldr	r1, [r7, #4]
 80289e4:	4630      	mov	r0, r6
 80289e6:	f000 fb67 	bl	80290b8 <_Balloc>
 80289ea:	4680      	mov	r8, r0
 80289ec:	b928      	cbnz	r0, 80289fa <_dtoa_r+0x8d2>
 80289ee:	4b82      	ldr	r3, [pc, #520]	; (8028bf8 <_dtoa_r+0xad0>)
 80289f0:	4602      	mov	r2, r0
 80289f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80289f6:	f7ff bbaf 	b.w	8028158 <_dtoa_r+0x30>
 80289fa:	693a      	ldr	r2, [r7, #16]
 80289fc:	3202      	adds	r2, #2
 80289fe:	0092      	lsls	r2, r2, #2
 8028a00:	f107 010c 	add.w	r1, r7, #12
 8028a04:	300c      	adds	r0, #12
 8028a06:	f7fc fe9f 	bl	8025748 <memcpy>
 8028a0a:	2201      	movs	r2, #1
 8028a0c:	4641      	mov	r1, r8
 8028a0e:	4630      	mov	r0, r6
 8028a10:	f000 fd64 	bl	80294dc <__lshift>
 8028a14:	9b01      	ldr	r3, [sp, #4]
 8028a16:	3301      	adds	r3, #1
 8028a18:	9304      	str	r3, [sp, #16]
 8028a1a:	9b01      	ldr	r3, [sp, #4]
 8028a1c:	4453      	add	r3, sl
 8028a1e:	9308      	str	r3, [sp, #32]
 8028a20:	9b02      	ldr	r3, [sp, #8]
 8028a22:	f003 0301 	and.w	r3, r3, #1
 8028a26:	46b9      	mov	r9, r7
 8028a28:	9307      	str	r3, [sp, #28]
 8028a2a:	4607      	mov	r7, r0
 8028a2c:	9b04      	ldr	r3, [sp, #16]
 8028a2e:	4621      	mov	r1, r4
 8028a30:	3b01      	subs	r3, #1
 8028a32:	4628      	mov	r0, r5
 8028a34:	9302      	str	r3, [sp, #8]
 8028a36:	f7ff faeb 	bl	8028010 <quorem>
 8028a3a:	4603      	mov	r3, r0
 8028a3c:	3330      	adds	r3, #48	; 0x30
 8028a3e:	9005      	str	r0, [sp, #20]
 8028a40:	4649      	mov	r1, r9
 8028a42:	4628      	mov	r0, r5
 8028a44:	9309      	str	r3, [sp, #36]	; 0x24
 8028a46:	f000 fdb9 	bl	80295bc <__mcmp>
 8028a4a:	463a      	mov	r2, r7
 8028a4c:	4682      	mov	sl, r0
 8028a4e:	4621      	mov	r1, r4
 8028a50:	4630      	mov	r0, r6
 8028a52:	f000 fdcf 	bl	80295f4 <__mdiff>
 8028a56:	68c2      	ldr	r2, [r0, #12]
 8028a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a5a:	4680      	mov	r8, r0
 8028a5c:	bb0a      	cbnz	r2, 8028aa2 <_dtoa_r+0x97a>
 8028a5e:	4601      	mov	r1, r0
 8028a60:	4628      	mov	r0, r5
 8028a62:	f000 fdab 	bl	80295bc <__mcmp>
 8028a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a68:	4602      	mov	r2, r0
 8028a6a:	4641      	mov	r1, r8
 8028a6c:	4630      	mov	r0, r6
 8028a6e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8028a72:	f000 fb61 	bl	8029138 <_Bfree>
 8028a76:	9b06      	ldr	r3, [sp, #24]
 8028a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028a7a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8028a7e:	ea43 0102 	orr.w	r1, r3, r2
 8028a82:	9b07      	ldr	r3, [sp, #28]
 8028a84:	430b      	orrs	r3, r1
 8028a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a88:	d10d      	bne.n	8028aa6 <_dtoa_r+0x97e>
 8028a8a:	2b39      	cmp	r3, #57	; 0x39
 8028a8c:	d029      	beq.n	8028ae2 <_dtoa_r+0x9ba>
 8028a8e:	f1ba 0f00 	cmp.w	sl, #0
 8028a92:	dd01      	ble.n	8028a98 <_dtoa_r+0x970>
 8028a94:	9b05      	ldr	r3, [sp, #20]
 8028a96:	3331      	adds	r3, #49	; 0x31
 8028a98:	9a02      	ldr	r2, [sp, #8]
 8028a9a:	7013      	strb	r3, [r2, #0]
 8028a9c:	e774      	b.n	8028988 <_dtoa_r+0x860>
 8028a9e:	4638      	mov	r0, r7
 8028aa0:	e7b8      	b.n	8028a14 <_dtoa_r+0x8ec>
 8028aa2:	2201      	movs	r2, #1
 8028aa4:	e7e1      	b.n	8028a6a <_dtoa_r+0x942>
 8028aa6:	f1ba 0f00 	cmp.w	sl, #0
 8028aaa:	db06      	blt.n	8028aba <_dtoa_r+0x992>
 8028aac:	9906      	ldr	r1, [sp, #24]
 8028aae:	ea41 0a0a 	orr.w	sl, r1, sl
 8028ab2:	9907      	ldr	r1, [sp, #28]
 8028ab4:	ea5a 0101 	orrs.w	r1, sl, r1
 8028ab8:	d120      	bne.n	8028afc <_dtoa_r+0x9d4>
 8028aba:	2a00      	cmp	r2, #0
 8028abc:	ddec      	ble.n	8028a98 <_dtoa_r+0x970>
 8028abe:	4629      	mov	r1, r5
 8028ac0:	2201      	movs	r2, #1
 8028ac2:	4630      	mov	r0, r6
 8028ac4:	9304      	str	r3, [sp, #16]
 8028ac6:	f000 fd09 	bl	80294dc <__lshift>
 8028aca:	4621      	mov	r1, r4
 8028acc:	4605      	mov	r5, r0
 8028ace:	f000 fd75 	bl	80295bc <__mcmp>
 8028ad2:	2800      	cmp	r0, #0
 8028ad4:	9b04      	ldr	r3, [sp, #16]
 8028ad6:	dc02      	bgt.n	8028ade <_dtoa_r+0x9b6>
 8028ad8:	d1de      	bne.n	8028a98 <_dtoa_r+0x970>
 8028ada:	07da      	lsls	r2, r3, #31
 8028adc:	d5dc      	bpl.n	8028a98 <_dtoa_r+0x970>
 8028ade:	2b39      	cmp	r3, #57	; 0x39
 8028ae0:	d1d8      	bne.n	8028a94 <_dtoa_r+0x96c>
 8028ae2:	9a02      	ldr	r2, [sp, #8]
 8028ae4:	2339      	movs	r3, #57	; 0x39
 8028ae6:	7013      	strb	r3, [r2, #0]
 8028ae8:	4643      	mov	r3, r8
 8028aea:	4698      	mov	r8, r3
 8028aec:	3b01      	subs	r3, #1
 8028aee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8028af2:	2a39      	cmp	r2, #57	; 0x39
 8028af4:	d051      	beq.n	8028b9a <_dtoa_r+0xa72>
 8028af6:	3201      	adds	r2, #1
 8028af8:	701a      	strb	r2, [r3, #0]
 8028afa:	e745      	b.n	8028988 <_dtoa_r+0x860>
 8028afc:	2a00      	cmp	r2, #0
 8028afe:	dd03      	ble.n	8028b08 <_dtoa_r+0x9e0>
 8028b00:	2b39      	cmp	r3, #57	; 0x39
 8028b02:	d0ee      	beq.n	8028ae2 <_dtoa_r+0x9ba>
 8028b04:	3301      	adds	r3, #1
 8028b06:	e7c7      	b.n	8028a98 <_dtoa_r+0x970>
 8028b08:	9a04      	ldr	r2, [sp, #16]
 8028b0a:	9908      	ldr	r1, [sp, #32]
 8028b0c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8028b10:	428a      	cmp	r2, r1
 8028b12:	d02b      	beq.n	8028b6c <_dtoa_r+0xa44>
 8028b14:	4629      	mov	r1, r5
 8028b16:	2300      	movs	r3, #0
 8028b18:	220a      	movs	r2, #10
 8028b1a:	4630      	mov	r0, r6
 8028b1c:	f000 fb2e 	bl	802917c <__multadd>
 8028b20:	45b9      	cmp	r9, r7
 8028b22:	4605      	mov	r5, r0
 8028b24:	f04f 0300 	mov.w	r3, #0
 8028b28:	f04f 020a 	mov.w	r2, #10
 8028b2c:	4649      	mov	r1, r9
 8028b2e:	4630      	mov	r0, r6
 8028b30:	d107      	bne.n	8028b42 <_dtoa_r+0xa1a>
 8028b32:	f000 fb23 	bl	802917c <__multadd>
 8028b36:	4681      	mov	r9, r0
 8028b38:	4607      	mov	r7, r0
 8028b3a:	9b04      	ldr	r3, [sp, #16]
 8028b3c:	3301      	adds	r3, #1
 8028b3e:	9304      	str	r3, [sp, #16]
 8028b40:	e774      	b.n	8028a2c <_dtoa_r+0x904>
 8028b42:	f000 fb1b 	bl	802917c <__multadd>
 8028b46:	4639      	mov	r1, r7
 8028b48:	4681      	mov	r9, r0
 8028b4a:	2300      	movs	r3, #0
 8028b4c:	220a      	movs	r2, #10
 8028b4e:	4630      	mov	r0, r6
 8028b50:	f000 fb14 	bl	802917c <__multadd>
 8028b54:	4607      	mov	r7, r0
 8028b56:	e7f0      	b.n	8028b3a <_dtoa_r+0xa12>
 8028b58:	f1ba 0f00 	cmp.w	sl, #0
 8028b5c:	9a01      	ldr	r2, [sp, #4]
 8028b5e:	bfcc      	ite	gt
 8028b60:	46d0      	movgt	r8, sl
 8028b62:	f04f 0801 	movle.w	r8, #1
 8028b66:	4490      	add	r8, r2
 8028b68:	f04f 0900 	mov.w	r9, #0
 8028b6c:	4629      	mov	r1, r5
 8028b6e:	2201      	movs	r2, #1
 8028b70:	4630      	mov	r0, r6
 8028b72:	9302      	str	r3, [sp, #8]
 8028b74:	f000 fcb2 	bl	80294dc <__lshift>
 8028b78:	4621      	mov	r1, r4
 8028b7a:	4605      	mov	r5, r0
 8028b7c:	f000 fd1e 	bl	80295bc <__mcmp>
 8028b80:	2800      	cmp	r0, #0
 8028b82:	dcb1      	bgt.n	8028ae8 <_dtoa_r+0x9c0>
 8028b84:	d102      	bne.n	8028b8c <_dtoa_r+0xa64>
 8028b86:	9b02      	ldr	r3, [sp, #8]
 8028b88:	07db      	lsls	r3, r3, #31
 8028b8a:	d4ad      	bmi.n	8028ae8 <_dtoa_r+0x9c0>
 8028b8c:	4643      	mov	r3, r8
 8028b8e:	4698      	mov	r8, r3
 8028b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028b94:	2a30      	cmp	r2, #48	; 0x30
 8028b96:	d0fa      	beq.n	8028b8e <_dtoa_r+0xa66>
 8028b98:	e6f6      	b.n	8028988 <_dtoa_r+0x860>
 8028b9a:	9a01      	ldr	r2, [sp, #4]
 8028b9c:	429a      	cmp	r2, r3
 8028b9e:	d1a4      	bne.n	8028aea <_dtoa_r+0x9c2>
 8028ba0:	f10b 0b01 	add.w	fp, fp, #1
 8028ba4:	2331      	movs	r3, #49	; 0x31
 8028ba6:	e778      	b.n	8028a9a <_dtoa_r+0x972>
 8028ba8:	4b14      	ldr	r3, [pc, #80]	; (8028bfc <_dtoa_r+0xad4>)
 8028baa:	f7ff bb27 	b.w	80281fc <_dtoa_r+0xd4>
 8028bae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028bb0:	2b00      	cmp	r3, #0
 8028bb2:	f47f ab03 	bne.w	80281bc <_dtoa_r+0x94>
 8028bb6:	4b12      	ldr	r3, [pc, #72]	; (8028c00 <_dtoa_r+0xad8>)
 8028bb8:	f7ff bb20 	b.w	80281fc <_dtoa_r+0xd4>
 8028bbc:	f1ba 0f00 	cmp.w	sl, #0
 8028bc0:	dc03      	bgt.n	8028bca <_dtoa_r+0xaa2>
 8028bc2:	9b06      	ldr	r3, [sp, #24]
 8028bc4:	2b02      	cmp	r3, #2
 8028bc6:	f73f aec7 	bgt.w	8028958 <_dtoa_r+0x830>
 8028bca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028bce:	4621      	mov	r1, r4
 8028bd0:	4628      	mov	r0, r5
 8028bd2:	f7ff fa1d 	bl	8028010 <quorem>
 8028bd6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8028bda:	f808 3b01 	strb.w	r3, [r8], #1
 8028bde:	9a01      	ldr	r2, [sp, #4]
 8028be0:	eba8 0202 	sub.w	r2, r8, r2
 8028be4:	4592      	cmp	sl, r2
 8028be6:	ddb7      	ble.n	8028b58 <_dtoa_r+0xa30>
 8028be8:	4629      	mov	r1, r5
 8028bea:	2300      	movs	r3, #0
 8028bec:	220a      	movs	r2, #10
 8028bee:	4630      	mov	r0, r6
 8028bf0:	f000 fac4 	bl	802917c <__multadd>
 8028bf4:	4605      	mov	r5, r0
 8028bf6:	e7ea      	b.n	8028bce <_dtoa_r+0xaa6>
 8028bf8:	08047c09 	.word	0x08047c09
 8028bfc:	08047d89 	.word	0x08047d89
 8028c00:	08047ba1 	.word	0x08047ba1

08028c04 <__errno>:
 8028c04:	4b01      	ldr	r3, [pc, #4]	; (8028c0c <__errno+0x8>)
 8028c06:	6818      	ldr	r0, [r3, #0]
 8028c08:	4770      	bx	lr
 8028c0a:	bf00      	nop
 8028c0c:	200004c4 	.word	0x200004c4

08028c10 <__sflush_r>:
 8028c10:	898a      	ldrh	r2, [r1, #12]
 8028c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028c16:	4605      	mov	r5, r0
 8028c18:	0710      	lsls	r0, r2, #28
 8028c1a:	460c      	mov	r4, r1
 8028c1c:	d458      	bmi.n	8028cd0 <__sflush_r+0xc0>
 8028c1e:	684b      	ldr	r3, [r1, #4]
 8028c20:	2b00      	cmp	r3, #0
 8028c22:	dc05      	bgt.n	8028c30 <__sflush_r+0x20>
 8028c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028c26:	2b00      	cmp	r3, #0
 8028c28:	dc02      	bgt.n	8028c30 <__sflush_r+0x20>
 8028c2a:	2000      	movs	r0, #0
 8028c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028c32:	2e00      	cmp	r6, #0
 8028c34:	d0f9      	beq.n	8028c2a <__sflush_r+0x1a>
 8028c36:	2300      	movs	r3, #0
 8028c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028c3c:	682f      	ldr	r7, [r5, #0]
 8028c3e:	602b      	str	r3, [r5, #0]
 8028c40:	d032      	beq.n	8028ca8 <__sflush_r+0x98>
 8028c42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028c44:	89a3      	ldrh	r3, [r4, #12]
 8028c46:	075a      	lsls	r2, r3, #29
 8028c48:	d505      	bpl.n	8028c56 <__sflush_r+0x46>
 8028c4a:	6863      	ldr	r3, [r4, #4]
 8028c4c:	1ac0      	subs	r0, r0, r3
 8028c4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028c50:	b10b      	cbz	r3, 8028c56 <__sflush_r+0x46>
 8028c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028c54:	1ac0      	subs	r0, r0, r3
 8028c56:	2300      	movs	r3, #0
 8028c58:	4602      	mov	r2, r0
 8028c5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028c5c:	6a21      	ldr	r1, [r4, #32]
 8028c5e:	4628      	mov	r0, r5
 8028c60:	47b0      	blx	r6
 8028c62:	1c43      	adds	r3, r0, #1
 8028c64:	89a3      	ldrh	r3, [r4, #12]
 8028c66:	d106      	bne.n	8028c76 <__sflush_r+0x66>
 8028c68:	6829      	ldr	r1, [r5, #0]
 8028c6a:	291d      	cmp	r1, #29
 8028c6c:	d82c      	bhi.n	8028cc8 <__sflush_r+0xb8>
 8028c6e:	4a2a      	ldr	r2, [pc, #168]	; (8028d18 <__sflush_r+0x108>)
 8028c70:	40ca      	lsrs	r2, r1
 8028c72:	07d6      	lsls	r6, r2, #31
 8028c74:	d528      	bpl.n	8028cc8 <__sflush_r+0xb8>
 8028c76:	2200      	movs	r2, #0
 8028c78:	6062      	str	r2, [r4, #4]
 8028c7a:	04d9      	lsls	r1, r3, #19
 8028c7c:	6922      	ldr	r2, [r4, #16]
 8028c7e:	6022      	str	r2, [r4, #0]
 8028c80:	d504      	bpl.n	8028c8c <__sflush_r+0x7c>
 8028c82:	1c42      	adds	r2, r0, #1
 8028c84:	d101      	bne.n	8028c8a <__sflush_r+0x7a>
 8028c86:	682b      	ldr	r3, [r5, #0]
 8028c88:	b903      	cbnz	r3, 8028c8c <__sflush_r+0x7c>
 8028c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8028c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028c8e:	602f      	str	r7, [r5, #0]
 8028c90:	2900      	cmp	r1, #0
 8028c92:	d0ca      	beq.n	8028c2a <__sflush_r+0x1a>
 8028c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028c98:	4299      	cmp	r1, r3
 8028c9a:	d002      	beq.n	8028ca2 <__sflush_r+0x92>
 8028c9c:	4628      	mov	r0, r5
 8028c9e:	f7fc fff5 	bl	8025c8c <_free_r>
 8028ca2:	2000      	movs	r0, #0
 8028ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8028ca6:	e7c1      	b.n	8028c2c <__sflush_r+0x1c>
 8028ca8:	6a21      	ldr	r1, [r4, #32]
 8028caa:	2301      	movs	r3, #1
 8028cac:	4628      	mov	r0, r5
 8028cae:	47b0      	blx	r6
 8028cb0:	1c41      	adds	r1, r0, #1
 8028cb2:	d1c7      	bne.n	8028c44 <__sflush_r+0x34>
 8028cb4:	682b      	ldr	r3, [r5, #0]
 8028cb6:	2b00      	cmp	r3, #0
 8028cb8:	d0c4      	beq.n	8028c44 <__sflush_r+0x34>
 8028cba:	2b1d      	cmp	r3, #29
 8028cbc:	d001      	beq.n	8028cc2 <__sflush_r+0xb2>
 8028cbe:	2b16      	cmp	r3, #22
 8028cc0:	d101      	bne.n	8028cc6 <__sflush_r+0xb6>
 8028cc2:	602f      	str	r7, [r5, #0]
 8028cc4:	e7b1      	b.n	8028c2a <__sflush_r+0x1a>
 8028cc6:	89a3      	ldrh	r3, [r4, #12]
 8028cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028ccc:	81a3      	strh	r3, [r4, #12]
 8028cce:	e7ad      	b.n	8028c2c <__sflush_r+0x1c>
 8028cd0:	690f      	ldr	r7, [r1, #16]
 8028cd2:	2f00      	cmp	r7, #0
 8028cd4:	d0a9      	beq.n	8028c2a <__sflush_r+0x1a>
 8028cd6:	0793      	lsls	r3, r2, #30
 8028cd8:	680e      	ldr	r6, [r1, #0]
 8028cda:	bf08      	it	eq
 8028cdc:	694b      	ldreq	r3, [r1, #20]
 8028cde:	600f      	str	r7, [r1, #0]
 8028ce0:	bf18      	it	ne
 8028ce2:	2300      	movne	r3, #0
 8028ce4:	eba6 0807 	sub.w	r8, r6, r7
 8028ce8:	608b      	str	r3, [r1, #8]
 8028cea:	f1b8 0f00 	cmp.w	r8, #0
 8028cee:	dd9c      	ble.n	8028c2a <__sflush_r+0x1a>
 8028cf0:	6a21      	ldr	r1, [r4, #32]
 8028cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028cf4:	4643      	mov	r3, r8
 8028cf6:	463a      	mov	r2, r7
 8028cf8:	4628      	mov	r0, r5
 8028cfa:	47b0      	blx	r6
 8028cfc:	2800      	cmp	r0, #0
 8028cfe:	dc06      	bgt.n	8028d0e <__sflush_r+0xfe>
 8028d00:	89a3      	ldrh	r3, [r4, #12]
 8028d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028d06:	81a3      	strh	r3, [r4, #12]
 8028d08:	f04f 30ff 	mov.w	r0, #4294967295
 8028d0c:	e78e      	b.n	8028c2c <__sflush_r+0x1c>
 8028d0e:	4407      	add	r7, r0
 8028d10:	eba8 0800 	sub.w	r8, r8, r0
 8028d14:	e7e9      	b.n	8028cea <__sflush_r+0xda>
 8028d16:	bf00      	nop
 8028d18:	20400001 	.word	0x20400001

08028d1c <_fflush_r>:
 8028d1c:	b538      	push	{r3, r4, r5, lr}
 8028d1e:	690b      	ldr	r3, [r1, #16]
 8028d20:	4605      	mov	r5, r0
 8028d22:	460c      	mov	r4, r1
 8028d24:	b913      	cbnz	r3, 8028d2c <_fflush_r+0x10>
 8028d26:	2500      	movs	r5, #0
 8028d28:	4628      	mov	r0, r5
 8028d2a:	bd38      	pop	{r3, r4, r5, pc}
 8028d2c:	b118      	cbz	r0, 8028d36 <_fflush_r+0x1a>
 8028d2e:	6983      	ldr	r3, [r0, #24]
 8028d30:	b90b      	cbnz	r3, 8028d36 <_fflush_r+0x1a>
 8028d32:	f7fc fb0f 	bl	8025354 <__sinit>
 8028d36:	4b14      	ldr	r3, [pc, #80]	; (8028d88 <_fflush_r+0x6c>)
 8028d38:	429c      	cmp	r4, r3
 8028d3a:	d11b      	bne.n	8028d74 <_fflush_r+0x58>
 8028d3c:	686c      	ldr	r4, [r5, #4]
 8028d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028d42:	2b00      	cmp	r3, #0
 8028d44:	d0ef      	beq.n	8028d26 <_fflush_r+0xa>
 8028d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028d48:	07d0      	lsls	r0, r2, #31
 8028d4a:	d404      	bmi.n	8028d56 <_fflush_r+0x3a>
 8028d4c:	0599      	lsls	r1, r3, #22
 8028d4e:	d402      	bmi.n	8028d56 <_fflush_r+0x3a>
 8028d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028d52:	f7fc fcd5 	bl	8025700 <__retarget_lock_acquire_recursive>
 8028d56:	4628      	mov	r0, r5
 8028d58:	4621      	mov	r1, r4
 8028d5a:	f7ff ff59 	bl	8028c10 <__sflush_r>
 8028d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028d60:	07da      	lsls	r2, r3, #31
 8028d62:	4605      	mov	r5, r0
 8028d64:	d4e0      	bmi.n	8028d28 <_fflush_r+0xc>
 8028d66:	89a3      	ldrh	r3, [r4, #12]
 8028d68:	059b      	lsls	r3, r3, #22
 8028d6a:	d4dd      	bmi.n	8028d28 <_fflush_r+0xc>
 8028d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028d6e:	f7fc fcc9 	bl	8025704 <__retarget_lock_release_recursive>
 8028d72:	e7d9      	b.n	8028d28 <_fflush_r+0xc>
 8028d74:	4b05      	ldr	r3, [pc, #20]	; (8028d8c <_fflush_r+0x70>)
 8028d76:	429c      	cmp	r4, r3
 8028d78:	d101      	bne.n	8028d7e <_fflush_r+0x62>
 8028d7a:	68ac      	ldr	r4, [r5, #8]
 8028d7c:	e7df      	b.n	8028d3e <_fflush_r+0x22>
 8028d7e:	4b04      	ldr	r3, [pc, #16]	; (8028d90 <_fflush_r+0x74>)
 8028d80:	429c      	cmp	r4, r3
 8028d82:	bf08      	it	eq
 8028d84:	68ec      	ldreq	r4, [r5, #12]
 8028d86:	e7da      	b.n	8028d3e <_fflush_r+0x22>
 8028d88:	080475ec 	.word	0x080475ec
 8028d8c:	0804760c 	.word	0x0804760c
 8028d90:	080475cc 	.word	0x080475cc

08028d94 <fiprintf>:
 8028d94:	b40e      	push	{r1, r2, r3}
 8028d96:	b503      	push	{r0, r1, lr}
 8028d98:	4601      	mov	r1, r0
 8028d9a:	ab03      	add	r3, sp, #12
 8028d9c:	4805      	ldr	r0, [pc, #20]	; (8028db4 <fiprintf+0x20>)
 8028d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8028da2:	6800      	ldr	r0, [r0, #0]
 8028da4:	9301      	str	r3, [sp, #4]
 8028da6:	f001 f879 	bl	8029e9c <_vfiprintf_r>
 8028daa:	b002      	add	sp, #8
 8028dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8028db0:	b003      	add	sp, #12
 8028db2:	4770      	bx	lr
 8028db4:	200004c4 	.word	0x200004c4

08028db8 <_findenv_r>:
 8028db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028dbc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8028e2c <_findenv_r+0x74>
 8028dc0:	4607      	mov	r7, r0
 8028dc2:	4689      	mov	r9, r1
 8028dc4:	4616      	mov	r6, r2
 8028dc6:	f001 fbe9 	bl	802a59c <__env_lock>
 8028dca:	f8da 4000 	ldr.w	r4, [sl]
 8028dce:	b134      	cbz	r4, 8028dde <_findenv_r+0x26>
 8028dd0:	464b      	mov	r3, r9
 8028dd2:	4698      	mov	r8, r3
 8028dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028dd8:	b13a      	cbz	r2, 8028dea <_findenv_r+0x32>
 8028dda:	2a3d      	cmp	r2, #61	; 0x3d
 8028ddc:	d1f9      	bne.n	8028dd2 <_findenv_r+0x1a>
 8028dde:	4638      	mov	r0, r7
 8028de0:	f001 fbe2 	bl	802a5a8 <__env_unlock>
 8028de4:	2000      	movs	r0, #0
 8028de6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028dea:	eba8 0809 	sub.w	r8, r8, r9
 8028dee:	46a3      	mov	fp, r4
 8028df0:	f854 0b04 	ldr.w	r0, [r4], #4
 8028df4:	2800      	cmp	r0, #0
 8028df6:	d0f2      	beq.n	8028dde <_findenv_r+0x26>
 8028df8:	4642      	mov	r2, r8
 8028dfa:	4649      	mov	r1, r9
 8028dfc:	f7fe fc4c 	bl	8027698 <strncmp>
 8028e00:	2800      	cmp	r0, #0
 8028e02:	d1f4      	bne.n	8028dee <_findenv_r+0x36>
 8028e04:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8028e08:	eb03 0508 	add.w	r5, r3, r8
 8028e0c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8028e10:	2b3d      	cmp	r3, #61	; 0x3d
 8028e12:	d1ec      	bne.n	8028dee <_findenv_r+0x36>
 8028e14:	f8da 3000 	ldr.w	r3, [sl]
 8028e18:	ebab 0303 	sub.w	r3, fp, r3
 8028e1c:	109b      	asrs	r3, r3, #2
 8028e1e:	4638      	mov	r0, r7
 8028e20:	6033      	str	r3, [r6, #0]
 8028e22:	f001 fbc1 	bl	802a5a8 <__env_unlock>
 8028e26:	1c68      	adds	r0, r5, #1
 8028e28:	e7dd      	b.n	8028de6 <_findenv_r+0x2e>
 8028e2a:	bf00      	nop
 8028e2c:	200002b4 	.word	0x200002b4

08028e30 <_getenv_r>:
 8028e30:	b507      	push	{r0, r1, r2, lr}
 8028e32:	aa01      	add	r2, sp, #4
 8028e34:	f7ff ffc0 	bl	8028db8 <_findenv_r>
 8028e38:	b003      	add	sp, #12
 8028e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8028e3e:	Address 0x0000000008028e3e is out of bounds.


08028e40 <__gettzinfo>:
 8028e40:	4800      	ldr	r0, [pc, #0]	; (8028e44 <__gettzinfo+0x4>)
 8028e42:	4770      	bx	lr
 8028e44:	20000530 	.word	0x20000530

08028e48 <gmtime_r>:
 8028e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e4c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8028e50:	460c      	mov	r4, r1
 8028e52:	4a4f      	ldr	r2, [pc, #316]	; (8028f90 <gmtime_r+0x148>)
 8028e54:	2300      	movs	r3, #0
 8028e56:	4630      	mov	r0, r6
 8028e58:	4639      	mov	r1, r7
 8028e5a:	f7d7 fa59 	bl	8000310 <__aeabi_ldivmod>
 8028e5e:	4639      	mov	r1, r7
 8028e60:	4605      	mov	r5, r0
 8028e62:	4a4b      	ldr	r2, [pc, #300]	; (8028f90 <gmtime_r+0x148>)
 8028e64:	4630      	mov	r0, r6
 8028e66:	2300      	movs	r3, #0
 8028e68:	f7d7 fa52 	bl	8000310 <__aeabi_ldivmod>
 8028e6c:	2a00      	cmp	r2, #0
 8028e6e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8028e72:	bfb7      	itett	lt
 8028e74:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8028e78:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8028e7c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8028e80:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8028e84:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8028e88:	fbb2 f1f0 	udiv	r1, r2, r0
 8028e8c:	fb00 2211 	mls	r2, r0, r1, r2
 8028e90:	203c      	movs	r0, #60	; 0x3c
 8028e92:	60a1      	str	r1, [r4, #8]
 8028e94:	fbb2 f1f0 	udiv	r1, r2, r0
 8028e98:	fb00 2211 	mls	r2, r0, r1, r2
 8028e9c:	6061      	str	r1, [r4, #4]
 8028e9e:	6022      	str	r2, [r4, #0]
 8028ea0:	2107      	movs	r1, #7
 8028ea2:	1cda      	adds	r2, r3, #3
 8028ea4:	fb92 f1f1 	sdiv	r1, r2, r1
 8028ea8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8028eac:	1a52      	subs	r2, r2, r1
 8028eae:	bf48      	it	mi
 8028eb0:	3207      	addmi	r2, #7
 8028eb2:	4d38      	ldr	r5, [pc, #224]	; (8028f94 <gmtime_r+0x14c>)
 8028eb4:	4838      	ldr	r0, [pc, #224]	; (8028f98 <gmtime_r+0x150>)
 8028eb6:	61a2      	str	r2, [r4, #24]
 8028eb8:	2b00      	cmp	r3, #0
 8028eba:	bfb7      	itett	lt
 8028ebc:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8028ec0:	fb93 f5f5 	sdivge	r5, r3, r5
 8028ec4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8028ec8:	fb92 f5f5 	sdivlt	r5, r2, r5
 8028ecc:	fb00 3005 	mla	r0, r0, r5, r3
 8028ed0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8028ed4:	fbb0 f2f2 	udiv	r2, r0, r2
 8028ed8:	4402      	add	r2, r0
 8028eda:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8028ede:	fbb0 f1f3 	udiv	r1, r0, r3
 8028ee2:	1a52      	subs	r2, r2, r1
 8028ee4:	f240 1c6d 	movw	ip, #365	; 0x16d
 8028ee8:	492c      	ldr	r1, [pc, #176]	; (8028f9c <gmtime_r+0x154>)
 8028eea:	fbb0 f1f1 	udiv	r1, r0, r1
 8028eee:	2764      	movs	r7, #100	; 0x64
 8028ef0:	1a52      	subs	r2, r2, r1
 8028ef2:	fbb2 f1fc 	udiv	r1, r2, ip
 8028ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8028efa:	fbb1 f6f7 	udiv	r6, r1, r7
 8028efe:	1af3      	subs	r3, r6, r3
 8028f00:	4403      	add	r3, r0
 8028f02:	fb0c 3311 	mls	r3, ip, r1, r3
 8028f06:	2299      	movs	r2, #153	; 0x99
 8028f08:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8028f0c:	f10e 0e02 	add.w	lr, lr, #2
 8028f10:	f103 0c01 	add.w	ip, r3, #1
 8028f14:	fbbe f0f2 	udiv	r0, lr, r2
 8028f18:	4342      	muls	r2, r0
 8028f1a:	3202      	adds	r2, #2
 8028f1c:	f04f 0805 	mov.w	r8, #5
 8028f20:	fbb2 f2f8 	udiv	r2, r2, r8
 8028f24:	ebac 0c02 	sub.w	ip, ip, r2
 8028f28:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8028f2c:	4596      	cmp	lr, r2
 8028f2e:	bf94      	ite	ls
 8028f30:	2202      	movls	r2, #2
 8028f32:	f06f 0209 	mvnhi.w	r2, #9
 8028f36:	4410      	add	r0, r2
 8028f38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8028f3c:	fb02 1505 	mla	r5, r2, r5, r1
 8028f40:	2801      	cmp	r0, #1
 8028f42:	bf98      	it	ls
 8028f44:	3501      	addls	r5, #1
 8028f46:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8028f4a:	d30d      	bcc.n	8028f68 <gmtime_r+0x120>
 8028f4c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8028f50:	61e3      	str	r3, [r4, #28]
 8028f52:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8028f56:	2300      	movs	r3, #0
 8028f58:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8028f5c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8028f60:	6223      	str	r3, [r4, #32]
 8028f62:	4620      	mov	r0, r4
 8028f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028f68:	078a      	lsls	r2, r1, #30
 8028f6a:	d102      	bne.n	8028f72 <gmtime_r+0x12a>
 8028f6c:	fb07 1616 	mls	r6, r7, r6, r1
 8028f70:	b95e      	cbnz	r6, 8028f8a <gmtime_r+0x142>
 8028f72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8028f76:	fbb1 f6f2 	udiv	r6, r1, r2
 8028f7a:	fb02 1216 	mls	r2, r2, r6, r1
 8028f7e:	fab2 f282 	clz	r2, r2
 8028f82:	0952      	lsrs	r2, r2, #5
 8028f84:	333b      	adds	r3, #59	; 0x3b
 8028f86:	4413      	add	r3, r2
 8028f88:	e7e2      	b.n	8028f50 <gmtime_r+0x108>
 8028f8a:	2201      	movs	r2, #1
 8028f8c:	e7fa      	b.n	8028f84 <gmtime_r+0x13c>
 8028f8e:	bf00      	nop
 8028f90:	00015180 	.word	0x00015180
 8028f94:	00023ab1 	.word	0x00023ab1
 8028f98:	fffdc54f 	.word	0xfffdc54f
 8028f9c:	00023ab0 	.word	0x00023ab0

08028fa0 <labs>:
 8028fa0:	2800      	cmp	r0, #0
 8028fa2:	bfb8      	it	lt
 8028fa4:	4240      	neglt	r0, r0
 8028fa6:	4770      	bx	lr

08028fa8 <_localeconv_r>:
 8028fa8:	4800      	ldr	r0, [pc, #0]	; (8028fac <_localeconv_r+0x4>)
 8028faa:	4770      	bx	lr
 8028fac:	20000678 	.word	0x20000678

08028fb0 <_lseek_r>:
 8028fb0:	b538      	push	{r3, r4, r5, lr}
 8028fb2:	4d07      	ldr	r5, [pc, #28]	; (8028fd0 <_lseek_r+0x20>)
 8028fb4:	4604      	mov	r4, r0
 8028fb6:	4608      	mov	r0, r1
 8028fb8:	4611      	mov	r1, r2
 8028fba:	2200      	movs	r2, #0
 8028fbc:	602a      	str	r2, [r5, #0]
 8028fbe:	461a      	mov	r2, r3
 8028fc0:	f7df fa1c 	bl	80083fc <_lseek>
 8028fc4:	1c43      	adds	r3, r0, #1
 8028fc6:	d102      	bne.n	8028fce <_lseek_r+0x1e>
 8028fc8:	682b      	ldr	r3, [r5, #0]
 8028fca:	b103      	cbz	r3, 8028fce <_lseek_r+0x1e>
 8028fcc:	6023      	str	r3, [r4, #0]
 8028fce:	bd38      	pop	{r3, r4, r5, pc}
 8028fd0:	2003013c 	.word	0x2003013c

08028fd4 <__swhatbuf_r>:
 8028fd4:	b570      	push	{r4, r5, r6, lr}
 8028fd6:	460e      	mov	r6, r1
 8028fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028fdc:	2900      	cmp	r1, #0
 8028fde:	b096      	sub	sp, #88	; 0x58
 8028fe0:	4614      	mov	r4, r2
 8028fe2:	461d      	mov	r5, r3
 8028fe4:	da08      	bge.n	8028ff8 <__swhatbuf_r+0x24>
 8028fe6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8028fea:	2200      	movs	r2, #0
 8028fec:	602a      	str	r2, [r5, #0]
 8028fee:	061a      	lsls	r2, r3, #24
 8028ff0:	d410      	bmi.n	8029014 <__swhatbuf_r+0x40>
 8028ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028ff6:	e00e      	b.n	8029016 <__swhatbuf_r+0x42>
 8028ff8:	466a      	mov	r2, sp
 8028ffa:	f001 fadb 	bl	802a5b4 <_fstat_r>
 8028ffe:	2800      	cmp	r0, #0
 8029000:	dbf1      	blt.n	8028fe6 <__swhatbuf_r+0x12>
 8029002:	9a01      	ldr	r2, [sp, #4]
 8029004:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8029008:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802900c:	425a      	negs	r2, r3
 802900e:	415a      	adcs	r2, r3
 8029010:	602a      	str	r2, [r5, #0]
 8029012:	e7ee      	b.n	8028ff2 <__swhatbuf_r+0x1e>
 8029014:	2340      	movs	r3, #64	; 0x40
 8029016:	2000      	movs	r0, #0
 8029018:	6023      	str	r3, [r4, #0]
 802901a:	b016      	add	sp, #88	; 0x58
 802901c:	bd70      	pop	{r4, r5, r6, pc}
 802901e:	Address 0x000000000802901e is out of bounds.


08029020 <__smakebuf_r>:
 8029020:	898b      	ldrh	r3, [r1, #12]
 8029022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029024:	079d      	lsls	r5, r3, #30
 8029026:	4606      	mov	r6, r0
 8029028:	460c      	mov	r4, r1
 802902a:	d507      	bpl.n	802903c <__smakebuf_r+0x1c>
 802902c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029030:	6023      	str	r3, [r4, #0]
 8029032:	6123      	str	r3, [r4, #16]
 8029034:	2301      	movs	r3, #1
 8029036:	6163      	str	r3, [r4, #20]
 8029038:	b002      	add	sp, #8
 802903a:	bd70      	pop	{r4, r5, r6, pc}
 802903c:	ab01      	add	r3, sp, #4
 802903e:	466a      	mov	r2, sp
 8029040:	f7ff ffc8 	bl	8028fd4 <__swhatbuf_r>
 8029044:	9900      	ldr	r1, [sp, #0]
 8029046:	4605      	mov	r5, r0
 8029048:	4630      	mov	r0, r6
 802904a:	f7fc fe8b 	bl	8025d64 <_malloc_r>
 802904e:	b948      	cbnz	r0, 8029064 <__smakebuf_r+0x44>
 8029050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029054:	059a      	lsls	r2, r3, #22
 8029056:	d4ef      	bmi.n	8029038 <__smakebuf_r+0x18>
 8029058:	f023 0303 	bic.w	r3, r3, #3
 802905c:	f043 0302 	orr.w	r3, r3, #2
 8029060:	81a3      	strh	r3, [r4, #12]
 8029062:	e7e3      	b.n	802902c <__smakebuf_r+0xc>
 8029064:	4b0d      	ldr	r3, [pc, #52]	; (802909c <__smakebuf_r+0x7c>)
 8029066:	62b3      	str	r3, [r6, #40]	; 0x28
 8029068:	89a3      	ldrh	r3, [r4, #12]
 802906a:	6020      	str	r0, [r4, #0]
 802906c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029070:	81a3      	strh	r3, [r4, #12]
 8029072:	9b00      	ldr	r3, [sp, #0]
 8029074:	6163      	str	r3, [r4, #20]
 8029076:	9b01      	ldr	r3, [sp, #4]
 8029078:	6120      	str	r0, [r4, #16]
 802907a:	b15b      	cbz	r3, 8029094 <__smakebuf_r+0x74>
 802907c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029080:	4630      	mov	r0, r6
 8029082:	f001 faa9 	bl	802a5d8 <_isatty_r>
 8029086:	b128      	cbz	r0, 8029094 <__smakebuf_r+0x74>
 8029088:	89a3      	ldrh	r3, [r4, #12]
 802908a:	f023 0303 	bic.w	r3, r3, #3
 802908e:	f043 0301 	orr.w	r3, r3, #1
 8029092:	81a3      	strh	r3, [r4, #12]
 8029094:	89a0      	ldrh	r0, [r4, #12]
 8029096:	4305      	orrs	r5, r0
 8029098:	81a5      	strh	r5, [r4, #12]
 802909a:	e7cd      	b.n	8029038 <__smakebuf_r+0x18>
 802909c:	080252ed 	.word	0x080252ed

080290a0 <__malloc_lock>:
 80290a0:	4801      	ldr	r0, [pc, #4]	; (80290a8 <__malloc_lock+0x8>)
 80290a2:	f7fc bb2d 	b.w	8025700 <__retarget_lock_acquire_recursive>
 80290a6:	bf00      	nop
 80290a8:	2003012d 	.word	0x2003012d

080290ac <__malloc_unlock>:
 80290ac:	4801      	ldr	r0, [pc, #4]	; (80290b4 <__malloc_unlock+0x8>)
 80290ae:	f7fc bb29 	b.w	8025704 <__retarget_lock_release_recursive>
 80290b2:	bf00      	nop
 80290b4:	2003012d 	.word	0x2003012d

080290b8 <_Balloc>:
 80290b8:	b570      	push	{r4, r5, r6, lr}
 80290ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80290bc:	4604      	mov	r4, r0
 80290be:	460d      	mov	r5, r1
 80290c0:	b976      	cbnz	r6, 80290e0 <_Balloc+0x28>
 80290c2:	2010      	movs	r0, #16
 80290c4:	f7fc fb20 	bl	8025708 <malloc>
 80290c8:	4602      	mov	r2, r0
 80290ca:	6260      	str	r0, [r4, #36]	; 0x24
 80290cc:	b920      	cbnz	r0, 80290d8 <_Balloc+0x20>
 80290ce:	4b18      	ldr	r3, [pc, #96]	; (8029130 <_Balloc+0x78>)
 80290d0:	4818      	ldr	r0, [pc, #96]	; (8029134 <_Balloc+0x7c>)
 80290d2:	2166      	movs	r1, #102	; 0x66
 80290d4:	f7fe ff5a 	bl	8027f8c <__assert_func>
 80290d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80290dc:	6006      	str	r6, [r0, #0]
 80290de:	60c6      	str	r6, [r0, #12]
 80290e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80290e2:	68f3      	ldr	r3, [r6, #12]
 80290e4:	b183      	cbz	r3, 8029108 <_Balloc+0x50>
 80290e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80290e8:	68db      	ldr	r3, [r3, #12]
 80290ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80290ee:	b9b8      	cbnz	r0, 8029120 <_Balloc+0x68>
 80290f0:	2101      	movs	r1, #1
 80290f2:	fa01 f605 	lsl.w	r6, r1, r5
 80290f6:	1d72      	adds	r2, r6, #5
 80290f8:	0092      	lsls	r2, r2, #2
 80290fa:	4620      	mov	r0, r4
 80290fc:	f000 fb60 	bl	80297c0 <_calloc_r>
 8029100:	b160      	cbz	r0, 802911c <_Balloc+0x64>
 8029102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8029106:	e00e      	b.n	8029126 <_Balloc+0x6e>
 8029108:	2221      	movs	r2, #33	; 0x21
 802910a:	2104      	movs	r1, #4
 802910c:	4620      	mov	r0, r4
 802910e:	f000 fb57 	bl	80297c0 <_calloc_r>
 8029112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029114:	60f0      	str	r0, [r6, #12]
 8029116:	68db      	ldr	r3, [r3, #12]
 8029118:	2b00      	cmp	r3, #0
 802911a:	d1e4      	bne.n	80290e6 <_Balloc+0x2e>
 802911c:	2000      	movs	r0, #0
 802911e:	bd70      	pop	{r4, r5, r6, pc}
 8029120:	6802      	ldr	r2, [r0, #0]
 8029122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8029126:	2300      	movs	r3, #0
 8029128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802912c:	e7f7      	b.n	802911e <_Balloc+0x66>
 802912e:	bf00      	nop
 8029130:	08047630 	.word	0x08047630
 8029134:	08047c1a 	.word	0x08047c1a

08029138 <_Bfree>:
 8029138:	b570      	push	{r4, r5, r6, lr}
 802913a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802913c:	4605      	mov	r5, r0
 802913e:	460c      	mov	r4, r1
 8029140:	b976      	cbnz	r6, 8029160 <_Bfree+0x28>
 8029142:	2010      	movs	r0, #16
 8029144:	f7fc fae0 	bl	8025708 <malloc>
 8029148:	4602      	mov	r2, r0
 802914a:	6268      	str	r0, [r5, #36]	; 0x24
 802914c:	b920      	cbnz	r0, 8029158 <_Bfree+0x20>
 802914e:	4b09      	ldr	r3, [pc, #36]	; (8029174 <_Bfree+0x3c>)
 8029150:	4809      	ldr	r0, [pc, #36]	; (8029178 <_Bfree+0x40>)
 8029152:	218a      	movs	r1, #138	; 0x8a
 8029154:	f7fe ff1a 	bl	8027f8c <__assert_func>
 8029158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802915c:	6006      	str	r6, [r0, #0]
 802915e:	60c6      	str	r6, [r0, #12]
 8029160:	b13c      	cbz	r4, 8029172 <_Bfree+0x3a>
 8029162:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8029164:	6862      	ldr	r2, [r4, #4]
 8029166:	68db      	ldr	r3, [r3, #12]
 8029168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802916c:	6021      	str	r1, [r4, #0]
 802916e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8029172:	bd70      	pop	{r4, r5, r6, pc}
 8029174:	08047630 	.word	0x08047630
 8029178:	08047c1a 	.word	0x08047c1a

0802917c <__multadd>:
 802917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029180:	690d      	ldr	r5, [r1, #16]
 8029182:	4607      	mov	r7, r0
 8029184:	460c      	mov	r4, r1
 8029186:	461e      	mov	r6, r3
 8029188:	f101 0c14 	add.w	ip, r1, #20
 802918c:	2000      	movs	r0, #0
 802918e:	f8dc 3000 	ldr.w	r3, [ip]
 8029192:	b299      	uxth	r1, r3
 8029194:	fb02 6101 	mla	r1, r2, r1, r6
 8029198:	0c1e      	lsrs	r6, r3, #16
 802919a:	0c0b      	lsrs	r3, r1, #16
 802919c:	fb02 3306 	mla	r3, r2, r6, r3
 80291a0:	b289      	uxth	r1, r1
 80291a2:	3001      	adds	r0, #1
 80291a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80291a8:	4285      	cmp	r5, r0
 80291aa:	f84c 1b04 	str.w	r1, [ip], #4
 80291ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80291b2:	dcec      	bgt.n	802918e <__multadd+0x12>
 80291b4:	b30e      	cbz	r6, 80291fa <__multadd+0x7e>
 80291b6:	68a3      	ldr	r3, [r4, #8]
 80291b8:	42ab      	cmp	r3, r5
 80291ba:	dc19      	bgt.n	80291f0 <__multadd+0x74>
 80291bc:	6861      	ldr	r1, [r4, #4]
 80291be:	4638      	mov	r0, r7
 80291c0:	3101      	adds	r1, #1
 80291c2:	f7ff ff79 	bl	80290b8 <_Balloc>
 80291c6:	4680      	mov	r8, r0
 80291c8:	b928      	cbnz	r0, 80291d6 <__multadd+0x5a>
 80291ca:	4602      	mov	r2, r0
 80291cc:	4b0c      	ldr	r3, [pc, #48]	; (8029200 <__multadd+0x84>)
 80291ce:	480d      	ldr	r0, [pc, #52]	; (8029204 <__multadd+0x88>)
 80291d0:	21b5      	movs	r1, #181	; 0xb5
 80291d2:	f7fe fedb 	bl	8027f8c <__assert_func>
 80291d6:	6922      	ldr	r2, [r4, #16]
 80291d8:	3202      	adds	r2, #2
 80291da:	f104 010c 	add.w	r1, r4, #12
 80291de:	0092      	lsls	r2, r2, #2
 80291e0:	300c      	adds	r0, #12
 80291e2:	f7fc fab1 	bl	8025748 <memcpy>
 80291e6:	4621      	mov	r1, r4
 80291e8:	4638      	mov	r0, r7
 80291ea:	f7ff ffa5 	bl	8029138 <_Bfree>
 80291ee:	4644      	mov	r4, r8
 80291f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80291f4:	3501      	adds	r5, #1
 80291f6:	615e      	str	r6, [r3, #20]
 80291f8:	6125      	str	r5, [r4, #16]
 80291fa:	4620      	mov	r0, r4
 80291fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029200:	08047c09 	.word	0x08047c09
 8029204:	08047c1a 	.word	0x08047c1a

08029208 <__hi0bits>:
 8029208:	0c03      	lsrs	r3, r0, #16
 802920a:	041b      	lsls	r3, r3, #16
 802920c:	b9d3      	cbnz	r3, 8029244 <__hi0bits+0x3c>
 802920e:	0400      	lsls	r0, r0, #16
 8029210:	2310      	movs	r3, #16
 8029212:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8029216:	bf04      	itt	eq
 8029218:	0200      	lsleq	r0, r0, #8
 802921a:	3308      	addeq	r3, #8
 802921c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8029220:	bf04      	itt	eq
 8029222:	0100      	lsleq	r0, r0, #4
 8029224:	3304      	addeq	r3, #4
 8029226:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802922a:	bf04      	itt	eq
 802922c:	0080      	lsleq	r0, r0, #2
 802922e:	3302      	addeq	r3, #2
 8029230:	2800      	cmp	r0, #0
 8029232:	db05      	blt.n	8029240 <__hi0bits+0x38>
 8029234:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8029238:	f103 0301 	add.w	r3, r3, #1
 802923c:	bf08      	it	eq
 802923e:	2320      	moveq	r3, #32
 8029240:	4618      	mov	r0, r3
 8029242:	4770      	bx	lr
 8029244:	2300      	movs	r3, #0
 8029246:	e7e4      	b.n	8029212 <__hi0bits+0xa>

08029248 <__lo0bits>:
 8029248:	6803      	ldr	r3, [r0, #0]
 802924a:	f013 0207 	ands.w	r2, r3, #7
 802924e:	4601      	mov	r1, r0
 8029250:	d00b      	beq.n	802926a <__lo0bits+0x22>
 8029252:	07da      	lsls	r2, r3, #31
 8029254:	d423      	bmi.n	802929e <__lo0bits+0x56>
 8029256:	0798      	lsls	r0, r3, #30
 8029258:	bf49      	itett	mi
 802925a:	085b      	lsrmi	r3, r3, #1
 802925c:	089b      	lsrpl	r3, r3, #2
 802925e:	2001      	movmi	r0, #1
 8029260:	600b      	strmi	r3, [r1, #0]
 8029262:	bf5c      	itt	pl
 8029264:	600b      	strpl	r3, [r1, #0]
 8029266:	2002      	movpl	r0, #2
 8029268:	4770      	bx	lr
 802926a:	b298      	uxth	r0, r3
 802926c:	b9a8      	cbnz	r0, 802929a <__lo0bits+0x52>
 802926e:	0c1b      	lsrs	r3, r3, #16
 8029270:	2010      	movs	r0, #16
 8029272:	b2da      	uxtb	r2, r3
 8029274:	b90a      	cbnz	r2, 802927a <__lo0bits+0x32>
 8029276:	3008      	adds	r0, #8
 8029278:	0a1b      	lsrs	r3, r3, #8
 802927a:	071a      	lsls	r2, r3, #28
 802927c:	bf04      	itt	eq
 802927e:	091b      	lsreq	r3, r3, #4
 8029280:	3004      	addeq	r0, #4
 8029282:	079a      	lsls	r2, r3, #30
 8029284:	bf04      	itt	eq
 8029286:	089b      	lsreq	r3, r3, #2
 8029288:	3002      	addeq	r0, #2
 802928a:	07da      	lsls	r2, r3, #31
 802928c:	d403      	bmi.n	8029296 <__lo0bits+0x4e>
 802928e:	085b      	lsrs	r3, r3, #1
 8029290:	f100 0001 	add.w	r0, r0, #1
 8029294:	d005      	beq.n	80292a2 <__lo0bits+0x5a>
 8029296:	600b      	str	r3, [r1, #0]
 8029298:	4770      	bx	lr
 802929a:	4610      	mov	r0, r2
 802929c:	e7e9      	b.n	8029272 <__lo0bits+0x2a>
 802929e:	2000      	movs	r0, #0
 80292a0:	4770      	bx	lr
 80292a2:	2020      	movs	r0, #32
 80292a4:	4770      	bx	lr
 80292a6:	Address 0x00000000080292a6 is out of bounds.


080292a8 <__i2b>:
 80292a8:	b510      	push	{r4, lr}
 80292aa:	460c      	mov	r4, r1
 80292ac:	2101      	movs	r1, #1
 80292ae:	f7ff ff03 	bl	80290b8 <_Balloc>
 80292b2:	4602      	mov	r2, r0
 80292b4:	b928      	cbnz	r0, 80292c2 <__i2b+0x1a>
 80292b6:	4b05      	ldr	r3, [pc, #20]	; (80292cc <__i2b+0x24>)
 80292b8:	4805      	ldr	r0, [pc, #20]	; (80292d0 <__i2b+0x28>)
 80292ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80292be:	f7fe fe65 	bl	8027f8c <__assert_func>
 80292c2:	2301      	movs	r3, #1
 80292c4:	6144      	str	r4, [r0, #20]
 80292c6:	6103      	str	r3, [r0, #16]
 80292c8:	bd10      	pop	{r4, pc}
 80292ca:	bf00      	nop
 80292cc:	08047c09 	.word	0x08047c09
 80292d0:	08047c1a 	.word	0x08047c1a

080292d4 <__multiply>:
 80292d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292d8:	4691      	mov	r9, r2
 80292da:	690a      	ldr	r2, [r1, #16]
 80292dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80292e0:	429a      	cmp	r2, r3
 80292e2:	bfb8      	it	lt
 80292e4:	460b      	movlt	r3, r1
 80292e6:	460c      	mov	r4, r1
 80292e8:	bfbc      	itt	lt
 80292ea:	464c      	movlt	r4, r9
 80292ec:	4699      	movlt	r9, r3
 80292ee:	6927      	ldr	r7, [r4, #16]
 80292f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80292f4:	68a3      	ldr	r3, [r4, #8]
 80292f6:	6861      	ldr	r1, [r4, #4]
 80292f8:	eb07 060a 	add.w	r6, r7, sl
 80292fc:	42b3      	cmp	r3, r6
 80292fe:	b085      	sub	sp, #20
 8029300:	bfb8      	it	lt
 8029302:	3101      	addlt	r1, #1
 8029304:	f7ff fed8 	bl	80290b8 <_Balloc>
 8029308:	b930      	cbnz	r0, 8029318 <__multiply+0x44>
 802930a:	4602      	mov	r2, r0
 802930c:	4b44      	ldr	r3, [pc, #272]	; (8029420 <__multiply+0x14c>)
 802930e:	4845      	ldr	r0, [pc, #276]	; (8029424 <__multiply+0x150>)
 8029310:	f240 115d 	movw	r1, #349	; 0x15d
 8029314:	f7fe fe3a 	bl	8027f8c <__assert_func>
 8029318:	f100 0514 	add.w	r5, r0, #20
 802931c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8029320:	462b      	mov	r3, r5
 8029322:	2200      	movs	r2, #0
 8029324:	4543      	cmp	r3, r8
 8029326:	d321      	bcc.n	802936c <__multiply+0x98>
 8029328:	f104 0314 	add.w	r3, r4, #20
 802932c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8029330:	f109 0314 	add.w	r3, r9, #20
 8029334:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8029338:	9202      	str	r2, [sp, #8]
 802933a:	1b3a      	subs	r2, r7, r4
 802933c:	3a15      	subs	r2, #21
 802933e:	f022 0203 	bic.w	r2, r2, #3
 8029342:	3204      	adds	r2, #4
 8029344:	f104 0115 	add.w	r1, r4, #21
 8029348:	428f      	cmp	r7, r1
 802934a:	bf38      	it	cc
 802934c:	2204      	movcc	r2, #4
 802934e:	9201      	str	r2, [sp, #4]
 8029350:	9a02      	ldr	r2, [sp, #8]
 8029352:	9303      	str	r3, [sp, #12]
 8029354:	429a      	cmp	r2, r3
 8029356:	d80c      	bhi.n	8029372 <__multiply+0x9e>
 8029358:	2e00      	cmp	r6, #0
 802935a:	dd03      	ble.n	8029364 <__multiply+0x90>
 802935c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8029360:	2b00      	cmp	r3, #0
 8029362:	d05a      	beq.n	802941a <__multiply+0x146>
 8029364:	6106      	str	r6, [r0, #16]
 8029366:	b005      	add	sp, #20
 8029368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802936c:	f843 2b04 	str.w	r2, [r3], #4
 8029370:	e7d8      	b.n	8029324 <__multiply+0x50>
 8029372:	f8b3 a000 	ldrh.w	sl, [r3]
 8029376:	f1ba 0f00 	cmp.w	sl, #0
 802937a:	d024      	beq.n	80293c6 <__multiply+0xf2>
 802937c:	f104 0e14 	add.w	lr, r4, #20
 8029380:	46a9      	mov	r9, r5
 8029382:	f04f 0c00 	mov.w	ip, #0
 8029386:	f85e 2b04 	ldr.w	r2, [lr], #4
 802938a:	f8d9 1000 	ldr.w	r1, [r9]
 802938e:	fa1f fb82 	uxth.w	fp, r2
 8029392:	b289      	uxth	r1, r1
 8029394:	fb0a 110b 	mla	r1, sl, fp, r1
 8029398:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802939c:	f8d9 2000 	ldr.w	r2, [r9]
 80293a0:	4461      	add	r1, ip
 80293a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80293a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80293aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80293ae:	b289      	uxth	r1, r1
 80293b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80293b4:	4577      	cmp	r7, lr
 80293b6:	f849 1b04 	str.w	r1, [r9], #4
 80293ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80293be:	d8e2      	bhi.n	8029386 <__multiply+0xb2>
 80293c0:	9a01      	ldr	r2, [sp, #4]
 80293c2:	f845 c002 	str.w	ip, [r5, r2]
 80293c6:	9a03      	ldr	r2, [sp, #12]
 80293c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80293cc:	3304      	adds	r3, #4
 80293ce:	f1b9 0f00 	cmp.w	r9, #0
 80293d2:	d020      	beq.n	8029416 <__multiply+0x142>
 80293d4:	6829      	ldr	r1, [r5, #0]
 80293d6:	f104 0c14 	add.w	ip, r4, #20
 80293da:	46ae      	mov	lr, r5
 80293dc:	f04f 0a00 	mov.w	sl, #0
 80293e0:	f8bc b000 	ldrh.w	fp, [ip]
 80293e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80293e8:	fb09 220b 	mla	r2, r9, fp, r2
 80293ec:	4492      	add	sl, r2
 80293ee:	b289      	uxth	r1, r1
 80293f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80293f4:	f84e 1b04 	str.w	r1, [lr], #4
 80293f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80293fc:	f8be 1000 	ldrh.w	r1, [lr]
 8029400:	0c12      	lsrs	r2, r2, #16
 8029402:	fb09 1102 	mla	r1, r9, r2, r1
 8029406:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802940a:	4567      	cmp	r7, ip
 802940c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8029410:	d8e6      	bhi.n	80293e0 <__multiply+0x10c>
 8029412:	9a01      	ldr	r2, [sp, #4]
 8029414:	50a9      	str	r1, [r5, r2]
 8029416:	3504      	adds	r5, #4
 8029418:	e79a      	b.n	8029350 <__multiply+0x7c>
 802941a:	3e01      	subs	r6, #1
 802941c:	e79c      	b.n	8029358 <__multiply+0x84>
 802941e:	bf00      	nop
 8029420:	08047c09 	.word	0x08047c09
 8029424:	08047c1a 	.word	0x08047c1a

08029428 <__pow5mult>:
 8029428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802942c:	4615      	mov	r5, r2
 802942e:	f012 0203 	ands.w	r2, r2, #3
 8029432:	4606      	mov	r6, r0
 8029434:	460f      	mov	r7, r1
 8029436:	d007      	beq.n	8029448 <__pow5mult+0x20>
 8029438:	4c25      	ldr	r4, [pc, #148]	; (80294d0 <__pow5mult+0xa8>)
 802943a:	3a01      	subs	r2, #1
 802943c:	2300      	movs	r3, #0
 802943e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8029442:	f7ff fe9b 	bl	802917c <__multadd>
 8029446:	4607      	mov	r7, r0
 8029448:	10ad      	asrs	r5, r5, #2
 802944a:	d03d      	beq.n	80294c8 <__pow5mult+0xa0>
 802944c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802944e:	b97c      	cbnz	r4, 8029470 <__pow5mult+0x48>
 8029450:	2010      	movs	r0, #16
 8029452:	f7fc f959 	bl	8025708 <malloc>
 8029456:	4602      	mov	r2, r0
 8029458:	6270      	str	r0, [r6, #36]	; 0x24
 802945a:	b928      	cbnz	r0, 8029468 <__pow5mult+0x40>
 802945c:	4b1d      	ldr	r3, [pc, #116]	; (80294d4 <__pow5mult+0xac>)
 802945e:	481e      	ldr	r0, [pc, #120]	; (80294d8 <__pow5mult+0xb0>)
 8029460:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8029464:	f7fe fd92 	bl	8027f8c <__assert_func>
 8029468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802946c:	6004      	str	r4, [r0, #0]
 802946e:	60c4      	str	r4, [r0, #12]
 8029470:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8029474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8029478:	b94c      	cbnz	r4, 802948e <__pow5mult+0x66>
 802947a:	f240 2171 	movw	r1, #625	; 0x271
 802947e:	4630      	mov	r0, r6
 8029480:	f7ff ff12 	bl	80292a8 <__i2b>
 8029484:	2300      	movs	r3, #0
 8029486:	f8c8 0008 	str.w	r0, [r8, #8]
 802948a:	4604      	mov	r4, r0
 802948c:	6003      	str	r3, [r0, #0]
 802948e:	f04f 0900 	mov.w	r9, #0
 8029492:	07eb      	lsls	r3, r5, #31
 8029494:	d50a      	bpl.n	80294ac <__pow5mult+0x84>
 8029496:	4639      	mov	r1, r7
 8029498:	4622      	mov	r2, r4
 802949a:	4630      	mov	r0, r6
 802949c:	f7ff ff1a 	bl	80292d4 <__multiply>
 80294a0:	4639      	mov	r1, r7
 80294a2:	4680      	mov	r8, r0
 80294a4:	4630      	mov	r0, r6
 80294a6:	f7ff fe47 	bl	8029138 <_Bfree>
 80294aa:	4647      	mov	r7, r8
 80294ac:	106d      	asrs	r5, r5, #1
 80294ae:	d00b      	beq.n	80294c8 <__pow5mult+0xa0>
 80294b0:	6820      	ldr	r0, [r4, #0]
 80294b2:	b938      	cbnz	r0, 80294c4 <__pow5mult+0x9c>
 80294b4:	4622      	mov	r2, r4
 80294b6:	4621      	mov	r1, r4
 80294b8:	4630      	mov	r0, r6
 80294ba:	f7ff ff0b 	bl	80292d4 <__multiply>
 80294be:	6020      	str	r0, [r4, #0]
 80294c0:	f8c0 9000 	str.w	r9, [r0]
 80294c4:	4604      	mov	r4, r0
 80294c6:	e7e4      	b.n	8029492 <__pow5mult+0x6a>
 80294c8:	4638      	mov	r0, r7
 80294ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80294ce:	bf00      	nop
 80294d0:	08047d68 	.word	0x08047d68
 80294d4:	08047630 	.word	0x08047630
 80294d8:	08047c1a 	.word	0x08047c1a

080294dc <__lshift>:
 80294dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80294e0:	460c      	mov	r4, r1
 80294e2:	6849      	ldr	r1, [r1, #4]
 80294e4:	6923      	ldr	r3, [r4, #16]
 80294e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80294ea:	68a3      	ldr	r3, [r4, #8]
 80294ec:	4607      	mov	r7, r0
 80294ee:	4691      	mov	r9, r2
 80294f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80294f4:	f108 0601 	add.w	r6, r8, #1
 80294f8:	42b3      	cmp	r3, r6
 80294fa:	db0b      	blt.n	8029514 <__lshift+0x38>
 80294fc:	4638      	mov	r0, r7
 80294fe:	f7ff fddb 	bl	80290b8 <_Balloc>
 8029502:	4605      	mov	r5, r0
 8029504:	b948      	cbnz	r0, 802951a <__lshift+0x3e>
 8029506:	4602      	mov	r2, r0
 8029508:	4b2a      	ldr	r3, [pc, #168]	; (80295b4 <__lshift+0xd8>)
 802950a:	482b      	ldr	r0, [pc, #172]	; (80295b8 <__lshift+0xdc>)
 802950c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8029510:	f7fe fd3c 	bl	8027f8c <__assert_func>
 8029514:	3101      	adds	r1, #1
 8029516:	005b      	lsls	r3, r3, #1
 8029518:	e7ee      	b.n	80294f8 <__lshift+0x1c>
 802951a:	2300      	movs	r3, #0
 802951c:	f100 0114 	add.w	r1, r0, #20
 8029520:	f100 0210 	add.w	r2, r0, #16
 8029524:	4618      	mov	r0, r3
 8029526:	4553      	cmp	r3, sl
 8029528:	db37      	blt.n	802959a <__lshift+0xbe>
 802952a:	6920      	ldr	r0, [r4, #16]
 802952c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8029530:	f104 0314 	add.w	r3, r4, #20
 8029534:	f019 091f 	ands.w	r9, r9, #31
 8029538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802953c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8029540:	d02f      	beq.n	80295a2 <__lshift+0xc6>
 8029542:	f1c9 0e20 	rsb	lr, r9, #32
 8029546:	468a      	mov	sl, r1
 8029548:	f04f 0c00 	mov.w	ip, #0
 802954c:	681a      	ldr	r2, [r3, #0]
 802954e:	fa02 f209 	lsl.w	r2, r2, r9
 8029552:	ea42 020c 	orr.w	r2, r2, ip
 8029556:	f84a 2b04 	str.w	r2, [sl], #4
 802955a:	f853 2b04 	ldr.w	r2, [r3], #4
 802955e:	4298      	cmp	r0, r3
 8029560:	fa22 fc0e 	lsr.w	ip, r2, lr
 8029564:	d8f2      	bhi.n	802954c <__lshift+0x70>
 8029566:	1b03      	subs	r3, r0, r4
 8029568:	3b15      	subs	r3, #21
 802956a:	f023 0303 	bic.w	r3, r3, #3
 802956e:	3304      	adds	r3, #4
 8029570:	f104 0215 	add.w	r2, r4, #21
 8029574:	4290      	cmp	r0, r2
 8029576:	bf38      	it	cc
 8029578:	2304      	movcc	r3, #4
 802957a:	f841 c003 	str.w	ip, [r1, r3]
 802957e:	f1bc 0f00 	cmp.w	ip, #0
 8029582:	d001      	beq.n	8029588 <__lshift+0xac>
 8029584:	f108 0602 	add.w	r6, r8, #2
 8029588:	3e01      	subs	r6, #1
 802958a:	4638      	mov	r0, r7
 802958c:	612e      	str	r6, [r5, #16]
 802958e:	4621      	mov	r1, r4
 8029590:	f7ff fdd2 	bl	8029138 <_Bfree>
 8029594:	4628      	mov	r0, r5
 8029596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802959a:	f842 0f04 	str.w	r0, [r2, #4]!
 802959e:	3301      	adds	r3, #1
 80295a0:	e7c1      	b.n	8029526 <__lshift+0x4a>
 80295a2:	3904      	subs	r1, #4
 80295a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80295a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80295ac:	4298      	cmp	r0, r3
 80295ae:	d8f9      	bhi.n	80295a4 <__lshift+0xc8>
 80295b0:	e7ea      	b.n	8029588 <__lshift+0xac>
 80295b2:	bf00      	nop
 80295b4:	08047c09 	.word	0x08047c09
 80295b8:	08047c1a 	.word	0x08047c1a

080295bc <__mcmp>:
 80295bc:	b530      	push	{r4, r5, lr}
 80295be:	6902      	ldr	r2, [r0, #16]
 80295c0:	690c      	ldr	r4, [r1, #16]
 80295c2:	1b12      	subs	r2, r2, r4
 80295c4:	d10e      	bne.n	80295e4 <__mcmp+0x28>
 80295c6:	f100 0314 	add.w	r3, r0, #20
 80295ca:	3114      	adds	r1, #20
 80295cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80295d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80295d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80295d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80295dc:	42a5      	cmp	r5, r4
 80295de:	d003      	beq.n	80295e8 <__mcmp+0x2c>
 80295e0:	d305      	bcc.n	80295ee <__mcmp+0x32>
 80295e2:	2201      	movs	r2, #1
 80295e4:	4610      	mov	r0, r2
 80295e6:	bd30      	pop	{r4, r5, pc}
 80295e8:	4283      	cmp	r3, r0
 80295ea:	d3f3      	bcc.n	80295d4 <__mcmp+0x18>
 80295ec:	e7fa      	b.n	80295e4 <__mcmp+0x28>
 80295ee:	f04f 32ff 	mov.w	r2, #4294967295
 80295f2:	e7f7      	b.n	80295e4 <__mcmp+0x28>

080295f4 <__mdiff>:
 80295f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80295f8:	460c      	mov	r4, r1
 80295fa:	4606      	mov	r6, r0
 80295fc:	4611      	mov	r1, r2
 80295fe:	4620      	mov	r0, r4
 8029600:	4690      	mov	r8, r2
 8029602:	f7ff ffdb 	bl	80295bc <__mcmp>
 8029606:	1e05      	subs	r5, r0, #0
 8029608:	d110      	bne.n	802962c <__mdiff+0x38>
 802960a:	4629      	mov	r1, r5
 802960c:	4630      	mov	r0, r6
 802960e:	f7ff fd53 	bl	80290b8 <_Balloc>
 8029612:	b930      	cbnz	r0, 8029622 <__mdiff+0x2e>
 8029614:	4b3a      	ldr	r3, [pc, #232]	; (8029700 <__mdiff+0x10c>)
 8029616:	4602      	mov	r2, r0
 8029618:	f240 2132 	movw	r1, #562	; 0x232
 802961c:	4839      	ldr	r0, [pc, #228]	; (8029704 <__mdiff+0x110>)
 802961e:	f7fe fcb5 	bl	8027f8c <__assert_func>
 8029622:	2301      	movs	r3, #1
 8029624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8029628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802962c:	bfa4      	itt	ge
 802962e:	4643      	movge	r3, r8
 8029630:	46a0      	movge	r8, r4
 8029632:	4630      	mov	r0, r6
 8029634:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8029638:	bfa6      	itte	ge
 802963a:	461c      	movge	r4, r3
 802963c:	2500      	movge	r5, #0
 802963e:	2501      	movlt	r5, #1
 8029640:	f7ff fd3a 	bl	80290b8 <_Balloc>
 8029644:	b920      	cbnz	r0, 8029650 <__mdiff+0x5c>
 8029646:	4b2e      	ldr	r3, [pc, #184]	; (8029700 <__mdiff+0x10c>)
 8029648:	4602      	mov	r2, r0
 802964a:	f44f 7110 	mov.w	r1, #576	; 0x240
 802964e:	e7e5      	b.n	802961c <__mdiff+0x28>
 8029650:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8029654:	6926      	ldr	r6, [r4, #16]
 8029656:	60c5      	str	r5, [r0, #12]
 8029658:	f104 0914 	add.w	r9, r4, #20
 802965c:	f108 0514 	add.w	r5, r8, #20
 8029660:	f100 0e14 	add.w	lr, r0, #20
 8029664:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8029668:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802966c:	f108 0210 	add.w	r2, r8, #16
 8029670:	46f2      	mov	sl, lr
 8029672:	2100      	movs	r1, #0
 8029674:	f859 3b04 	ldr.w	r3, [r9], #4
 8029678:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802967c:	fa1f f883 	uxth.w	r8, r3
 8029680:	fa11 f18b 	uxtah	r1, r1, fp
 8029684:	0c1b      	lsrs	r3, r3, #16
 8029686:	eba1 0808 	sub.w	r8, r1, r8
 802968a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802968e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8029692:	fa1f f888 	uxth.w	r8, r8
 8029696:	1419      	asrs	r1, r3, #16
 8029698:	454e      	cmp	r6, r9
 802969a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802969e:	f84a 3b04 	str.w	r3, [sl], #4
 80296a2:	d8e7      	bhi.n	8029674 <__mdiff+0x80>
 80296a4:	1b33      	subs	r3, r6, r4
 80296a6:	3b15      	subs	r3, #21
 80296a8:	f023 0303 	bic.w	r3, r3, #3
 80296ac:	3304      	adds	r3, #4
 80296ae:	3415      	adds	r4, #21
 80296b0:	42a6      	cmp	r6, r4
 80296b2:	bf38      	it	cc
 80296b4:	2304      	movcc	r3, #4
 80296b6:	441d      	add	r5, r3
 80296b8:	4473      	add	r3, lr
 80296ba:	469e      	mov	lr, r3
 80296bc:	462e      	mov	r6, r5
 80296be:	4566      	cmp	r6, ip
 80296c0:	d30e      	bcc.n	80296e0 <__mdiff+0xec>
 80296c2:	f10c 0203 	add.w	r2, ip, #3
 80296c6:	1b52      	subs	r2, r2, r5
 80296c8:	f022 0203 	bic.w	r2, r2, #3
 80296cc:	3d03      	subs	r5, #3
 80296ce:	45ac      	cmp	ip, r5
 80296d0:	bf38      	it	cc
 80296d2:	2200      	movcc	r2, #0
 80296d4:	441a      	add	r2, r3
 80296d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80296da:	b17b      	cbz	r3, 80296fc <__mdiff+0x108>
 80296dc:	6107      	str	r7, [r0, #16]
 80296de:	e7a3      	b.n	8029628 <__mdiff+0x34>
 80296e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80296e4:	fa11 f288 	uxtah	r2, r1, r8
 80296e8:	1414      	asrs	r4, r2, #16
 80296ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80296ee:	b292      	uxth	r2, r2
 80296f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80296f4:	f84e 2b04 	str.w	r2, [lr], #4
 80296f8:	1421      	asrs	r1, r4, #16
 80296fa:	e7e0      	b.n	80296be <__mdiff+0xca>
 80296fc:	3f01      	subs	r7, #1
 80296fe:	e7ea      	b.n	80296d6 <__mdiff+0xe2>
 8029700:	08047c09 	.word	0x08047c09
 8029704:	08047c1a 	.word	0x08047c1a

08029708 <__d2b>:
 8029708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802970c:	4689      	mov	r9, r1
 802970e:	2101      	movs	r1, #1
 8029710:	ec57 6b10 	vmov	r6, r7, d0
 8029714:	4690      	mov	r8, r2
 8029716:	f7ff fccf 	bl	80290b8 <_Balloc>
 802971a:	4604      	mov	r4, r0
 802971c:	b930      	cbnz	r0, 802972c <__d2b+0x24>
 802971e:	4602      	mov	r2, r0
 8029720:	4b25      	ldr	r3, [pc, #148]	; (80297b8 <__d2b+0xb0>)
 8029722:	4826      	ldr	r0, [pc, #152]	; (80297bc <__d2b+0xb4>)
 8029724:	f240 310a 	movw	r1, #778	; 0x30a
 8029728:	f7fe fc30 	bl	8027f8c <__assert_func>
 802972c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8029730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8029734:	bb35      	cbnz	r5, 8029784 <__d2b+0x7c>
 8029736:	2e00      	cmp	r6, #0
 8029738:	9301      	str	r3, [sp, #4]
 802973a:	d028      	beq.n	802978e <__d2b+0x86>
 802973c:	4668      	mov	r0, sp
 802973e:	9600      	str	r6, [sp, #0]
 8029740:	f7ff fd82 	bl	8029248 <__lo0bits>
 8029744:	9900      	ldr	r1, [sp, #0]
 8029746:	b300      	cbz	r0, 802978a <__d2b+0x82>
 8029748:	9a01      	ldr	r2, [sp, #4]
 802974a:	f1c0 0320 	rsb	r3, r0, #32
 802974e:	fa02 f303 	lsl.w	r3, r2, r3
 8029752:	430b      	orrs	r3, r1
 8029754:	40c2      	lsrs	r2, r0
 8029756:	6163      	str	r3, [r4, #20]
 8029758:	9201      	str	r2, [sp, #4]
 802975a:	9b01      	ldr	r3, [sp, #4]
 802975c:	61a3      	str	r3, [r4, #24]
 802975e:	2b00      	cmp	r3, #0
 8029760:	bf14      	ite	ne
 8029762:	2202      	movne	r2, #2
 8029764:	2201      	moveq	r2, #1
 8029766:	6122      	str	r2, [r4, #16]
 8029768:	b1d5      	cbz	r5, 80297a0 <__d2b+0x98>
 802976a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802976e:	4405      	add	r5, r0
 8029770:	f8c9 5000 	str.w	r5, [r9]
 8029774:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8029778:	f8c8 0000 	str.w	r0, [r8]
 802977c:	4620      	mov	r0, r4
 802977e:	b003      	add	sp, #12
 8029780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8029788:	e7d5      	b.n	8029736 <__d2b+0x2e>
 802978a:	6161      	str	r1, [r4, #20]
 802978c:	e7e5      	b.n	802975a <__d2b+0x52>
 802978e:	a801      	add	r0, sp, #4
 8029790:	f7ff fd5a 	bl	8029248 <__lo0bits>
 8029794:	9b01      	ldr	r3, [sp, #4]
 8029796:	6163      	str	r3, [r4, #20]
 8029798:	2201      	movs	r2, #1
 802979a:	6122      	str	r2, [r4, #16]
 802979c:	3020      	adds	r0, #32
 802979e:	e7e3      	b.n	8029768 <__d2b+0x60>
 80297a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80297a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80297a8:	f8c9 0000 	str.w	r0, [r9]
 80297ac:	6918      	ldr	r0, [r3, #16]
 80297ae:	f7ff fd2b 	bl	8029208 <__hi0bits>
 80297b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80297b6:	e7df      	b.n	8029778 <__d2b+0x70>
 80297b8:	08047c09 	.word	0x08047c09
 80297bc:	08047c1a 	.word	0x08047c1a

080297c0 <_calloc_r>:
 80297c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80297c2:	fba1 2402 	umull	r2, r4, r1, r2
 80297c6:	b94c      	cbnz	r4, 80297dc <_calloc_r+0x1c>
 80297c8:	4611      	mov	r1, r2
 80297ca:	9201      	str	r2, [sp, #4]
 80297cc:	f7fc faca 	bl	8025d64 <_malloc_r>
 80297d0:	9a01      	ldr	r2, [sp, #4]
 80297d2:	4605      	mov	r5, r0
 80297d4:	b930      	cbnz	r0, 80297e4 <_calloc_r+0x24>
 80297d6:	4628      	mov	r0, r5
 80297d8:	b003      	add	sp, #12
 80297da:	bd30      	pop	{r4, r5, pc}
 80297dc:	220c      	movs	r2, #12
 80297de:	6002      	str	r2, [r0, #0]
 80297e0:	2500      	movs	r5, #0
 80297e2:	e7f8      	b.n	80297d6 <_calloc_r+0x16>
 80297e4:	4621      	mov	r1, r4
 80297e6:	f7fb ffd7 	bl	8025798 <memset>
 80297ea:	e7f4      	b.n	80297d6 <_calloc_r+0x16>

080297ec <__ssputs_r>:
 80297ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80297f0:	688e      	ldr	r6, [r1, #8]
 80297f2:	429e      	cmp	r6, r3
 80297f4:	4682      	mov	sl, r0
 80297f6:	460c      	mov	r4, r1
 80297f8:	4690      	mov	r8, r2
 80297fa:	461f      	mov	r7, r3
 80297fc:	d838      	bhi.n	8029870 <__ssputs_r+0x84>
 80297fe:	898a      	ldrh	r2, [r1, #12]
 8029800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8029804:	d032      	beq.n	802986c <__ssputs_r+0x80>
 8029806:	6825      	ldr	r5, [r4, #0]
 8029808:	6909      	ldr	r1, [r1, #16]
 802980a:	eba5 0901 	sub.w	r9, r5, r1
 802980e:	6965      	ldr	r5, [r4, #20]
 8029810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029818:	3301      	adds	r3, #1
 802981a:	444b      	add	r3, r9
 802981c:	106d      	asrs	r5, r5, #1
 802981e:	429d      	cmp	r5, r3
 8029820:	bf38      	it	cc
 8029822:	461d      	movcc	r5, r3
 8029824:	0553      	lsls	r3, r2, #21
 8029826:	d531      	bpl.n	802988c <__ssputs_r+0xa0>
 8029828:	4629      	mov	r1, r5
 802982a:	f7fc fa9b 	bl	8025d64 <_malloc_r>
 802982e:	4606      	mov	r6, r0
 8029830:	b950      	cbnz	r0, 8029848 <__ssputs_r+0x5c>
 8029832:	230c      	movs	r3, #12
 8029834:	f8ca 3000 	str.w	r3, [sl]
 8029838:	89a3      	ldrh	r3, [r4, #12]
 802983a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802983e:	81a3      	strh	r3, [r4, #12]
 8029840:	f04f 30ff 	mov.w	r0, #4294967295
 8029844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029848:	6921      	ldr	r1, [r4, #16]
 802984a:	464a      	mov	r2, r9
 802984c:	f7fb ff7c 	bl	8025748 <memcpy>
 8029850:	89a3      	ldrh	r3, [r4, #12]
 8029852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8029856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802985a:	81a3      	strh	r3, [r4, #12]
 802985c:	6126      	str	r6, [r4, #16]
 802985e:	6165      	str	r5, [r4, #20]
 8029860:	444e      	add	r6, r9
 8029862:	eba5 0509 	sub.w	r5, r5, r9
 8029866:	6026      	str	r6, [r4, #0]
 8029868:	60a5      	str	r5, [r4, #8]
 802986a:	463e      	mov	r6, r7
 802986c:	42be      	cmp	r6, r7
 802986e:	d900      	bls.n	8029872 <__ssputs_r+0x86>
 8029870:	463e      	mov	r6, r7
 8029872:	6820      	ldr	r0, [r4, #0]
 8029874:	4632      	mov	r2, r6
 8029876:	4641      	mov	r1, r8
 8029878:	f7fb ff74 	bl	8025764 <memmove>
 802987c:	68a3      	ldr	r3, [r4, #8]
 802987e:	1b9b      	subs	r3, r3, r6
 8029880:	60a3      	str	r3, [r4, #8]
 8029882:	6823      	ldr	r3, [r4, #0]
 8029884:	4433      	add	r3, r6
 8029886:	6023      	str	r3, [r4, #0]
 8029888:	2000      	movs	r0, #0
 802988a:	e7db      	b.n	8029844 <__ssputs_r+0x58>
 802988c:	462a      	mov	r2, r5
 802988e:	f000 fec5 	bl	802a61c <_realloc_r>
 8029892:	4606      	mov	r6, r0
 8029894:	2800      	cmp	r0, #0
 8029896:	d1e1      	bne.n	802985c <__ssputs_r+0x70>
 8029898:	6921      	ldr	r1, [r4, #16]
 802989a:	4650      	mov	r0, sl
 802989c:	f7fc f9f6 	bl	8025c8c <_free_r>
 80298a0:	e7c7      	b.n	8029832 <__ssputs_r+0x46>
 80298a2:	Address 0x00000000080298a2 is out of bounds.


080298a4 <_svfiprintf_r>:
 80298a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298a8:	4698      	mov	r8, r3
 80298aa:	898b      	ldrh	r3, [r1, #12]
 80298ac:	061b      	lsls	r3, r3, #24
 80298ae:	b09d      	sub	sp, #116	; 0x74
 80298b0:	4607      	mov	r7, r0
 80298b2:	460d      	mov	r5, r1
 80298b4:	4614      	mov	r4, r2
 80298b6:	d50e      	bpl.n	80298d6 <_svfiprintf_r+0x32>
 80298b8:	690b      	ldr	r3, [r1, #16]
 80298ba:	b963      	cbnz	r3, 80298d6 <_svfiprintf_r+0x32>
 80298bc:	2140      	movs	r1, #64	; 0x40
 80298be:	f7fc fa51 	bl	8025d64 <_malloc_r>
 80298c2:	6028      	str	r0, [r5, #0]
 80298c4:	6128      	str	r0, [r5, #16]
 80298c6:	b920      	cbnz	r0, 80298d2 <_svfiprintf_r+0x2e>
 80298c8:	230c      	movs	r3, #12
 80298ca:	603b      	str	r3, [r7, #0]
 80298cc:	f04f 30ff 	mov.w	r0, #4294967295
 80298d0:	e0d1      	b.n	8029a76 <_svfiprintf_r+0x1d2>
 80298d2:	2340      	movs	r3, #64	; 0x40
 80298d4:	616b      	str	r3, [r5, #20]
 80298d6:	2300      	movs	r3, #0
 80298d8:	9309      	str	r3, [sp, #36]	; 0x24
 80298da:	2320      	movs	r3, #32
 80298dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80298e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80298e4:	2330      	movs	r3, #48	; 0x30
 80298e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8029a90 <_svfiprintf_r+0x1ec>
 80298ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80298ee:	f04f 0901 	mov.w	r9, #1
 80298f2:	4623      	mov	r3, r4
 80298f4:	469a      	mov	sl, r3
 80298f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80298fa:	b10a      	cbz	r2, 8029900 <_svfiprintf_r+0x5c>
 80298fc:	2a25      	cmp	r2, #37	; 0x25
 80298fe:	d1f9      	bne.n	80298f4 <_svfiprintf_r+0x50>
 8029900:	ebba 0b04 	subs.w	fp, sl, r4
 8029904:	d00b      	beq.n	802991e <_svfiprintf_r+0x7a>
 8029906:	465b      	mov	r3, fp
 8029908:	4622      	mov	r2, r4
 802990a:	4629      	mov	r1, r5
 802990c:	4638      	mov	r0, r7
 802990e:	f7ff ff6d 	bl	80297ec <__ssputs_r>
 8029912:	3001      	adds	r0, #1
 8029914:	f000 80aa 	beq.w	8029a6c <_svfiprintf_r+0x1c8>
 8029918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802991a:	445a      	add	r2, fp
 802991c:	9209      	str	r2, [sp, #36]	; 0x24
 802991e:	f89a 3000 	ldrb.w	r3, [sl]
 8029922:	2b00      	cmp	r3, #0
 8029924:	f000 80a2 	beq.w	8029a6c <_svfiprintf_r+0x1c8>
 8029928:	2300      	movs	r3, #0
 802992a:	f04f 32ff 	mov.w	r2, #4294967295
 802992e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029932:	f10a 0a01 	add.w	sl, sl, #1
 8029936:	9304      	str	r3, [sp, #16]
 8029938:	9307      	str	r3, [sp, #28]
 802993a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802993e:	931a      	str	r3, [sp, #104]	; 0x68
 8029940:	4654      	mov	r4, sl
 8029942:	2205      	movs	r2, #5
 8029944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029948:	4851      	ldr	r0, [pc, #324]	; (8029a90 <_svfiprintf_r+0x1ec>)
 802994a:	f7d6 fc91 	bl	8000270 <memchr>
 802994e:	9a04      	ldr	r2, [sp, #16]
 8029950:	b9d8      	cbnz	r0, 802998a <_svfiprintf_r+0xe6>
 8029952:	06d0      	lsls	r0, r2, #27
 8029954:	bf44      	itt	mi
 8029956:	2320      	movmi	r3, #32
 8029958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802995c:	0711      	lsls	r1, r2, #28
 802995e:	bf44      	itt	mi
 8029960:	232b      	movmi	r3, #43	; 0x2b
 8029962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029966:	f89a 3000 	ldrb.w	r3, [sl]
 802996a:	2b2a      	cmp	r3, #42	; 0x2a
 802996c:	d015      	beq.n	802999a <_svfiprintf_r+0xf6>
 802996e:	9a07      	ldr	r2, [sp, #28]
 8029970:	4654      	mov	r4, sl
 8029972:	2000      	movs	r0, #0
 8029974:	f04f 0c0a 	mov.w	ip, #10
 8029978:	4621      	mov	r1, r4
 802997a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802997e:	3b30      	subs	r3, #48	; 0x30
 8029980:	2b09      	cmp	r3, #9
 8029982:	d94e      	bls.n	8029a22 <_svfiprintf_r+0x17e>
 8029984:	b1b0      	cbz	r0, 80299b4 <_svfiprintf_r+0x110>
 8029986:	9207      	str	r2, [sp, #28]
 8029988:	e014      	b.n	80299b4 <_svfiprintf_r+0x110>
 802998a:	eba0 0308 	sub.w	r3, r0, r8
 802998e:	fa09 f303 	lsl.w	r3, r9, r3
 8029992:	4313      	orrs	r3, r2
 8029994:	9304      	str	r3, [sp, #16]
 8029996:	46a2      	mov	sl, r4
 8029998:	e7d2      	b.n	8029940 <_svfiprintf_r+0x9c>
 802999a:	9b03      	ldr	r3, [sp, #12]
 802999c:	1d19      	adds	r1, r3, #4
 802999e:	681b      	ldr	r3, [r3, #0]
 80299a0:	9103      	str	r1, [sp, #12]
 80299a2:	2b00      	cmp	r3, #0
 80299a4:	bfbb      	ittet	lt
 80299a6:	425b      	neglt	r3, r3
 80299a8:	f042 0202 	orrlt.w	r2, r2, #2
 80299ac:	9307      	strge	r3, [sp, #28]
 80299ae:	9307      	strlt	r3, [sp, #28]
 80299b0:	bfb8      	it	lt
 80299b2:	9204      	strlt	r2, [sp, #16]
 80299b4:	7823      	ldrb	r3, [r4, #0]
 80299b6:	2b2e      	cmp	r3, #46	; 0x2e
 80299b8:	d10c      	bne.n	80299d4 <_svfiprintf_r+0x130>
 80299ba:	7863      	ldrb	r3, [r4, #1]
 80299bc:	2b2a      	cmp	r3, #42	; 0x2a
 80299be:	d135      	bne.n	8029a2c <_svfiprintf_r+0x188>
 80299c0:	9b03      	ldr	r3, [sp, #12]
 80299c2:	1d1a      	adds	r2, r3, #4
 80299c4:	681b      	ldr	r3, [r3, #0]
 80299c6:	9203      	str	r2, [sp, #12]
 80299c8:	2b00      	cmp	r3, #0
 80299ca:	bfb8      	it	lt
 80299cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80299d0:	3402      	adds	r4, #2
 80299d2:	9305      	str	r3, [sp, #20]
 80299d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8029aa0 <_svfiprintf_r+0x1fc>
 80299d8:	7821      	ldrb	r1, [r4, #0]
 80299da:	2203      	movs	r2, #3
 80299dc:	4650      	mov	r0, sl
 80299de:	f7d6 fc47 	bl	8000270 <memchr>
 80299e2:	b140      	cbz	r0, 80299f6 <_svfiprintf_r+0x152>
 80299e4:	2340      	movs	r3, #64	; 0x40
 80299e6:	eba0 000a 	sub.w	r0, r0, sl
 80299ea:	fa03 f000 	lsl.w	r0, r3, r0
 80299ee:	9b04      	ldr	r3, [sp, #16]
 80299f0:	4303      	orrs	r3, r0
 80299f2:	3401      	adds	r4, #1
 80299f4:	9304      	str	r3, [sp, #16]
 80299f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80299fa:	4826      	ldr	r0, [pc, #152]	; (8029a94 <_svfiprintf_r+0x1f0>)
 80299fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029a00:	2206      	movs	r2, #6
 8029a02:	f7d6 fc35 	bl	8000270 <memchr>
 8029a06:	2800      	cmp	r0, #0
 8029a08:	d038      	beq.n	8029a7c <_svfiprintf_r+0x1d8>
 8029a0a:	4b23      	ldr	r3, [pc, #140]	; (8029a98 <_svfiprintf_r+0x1f4>)
 8029a0c:	bb1b      	cbnz	r3, 8029a56 <_svfiprintf_r+0x1b2>
 8029a0e:	9b03      	ldr	r3, [sp, #12]
 8029a10:	3307      	adds	r3, #7
 8029a12:	f023 0307 	bic.w	r3, r3, #7
 8029a16:	3308      	adds	r3, #8
 8029a18:	9303      	str	r3, [sp, #12]
 8029a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029a1c:	4433      	add	r3, r6
 8029a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8029a20:	e767      	b.n	80298f2 <_svfiprintf_r+0x4e>
 8029a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8029a26:	460c      	mov	r4, r1
 8029a28:	2001      	movs	r0, #1
 8029a2a:	e7a5      	b.n	8029978 <_svfiprintf_r+0xd4>
 8029a2c:	2300      	movs	r3, #0
 8029a2e:	3401      	adds	r4, #1
 8029a30:	9305      	str	r3, [sp, #20]
 8029a32:	4619      	mov	r1, r3
 8029a34:	f04f 0c0a 	mov.w	ip, #10
 8029a38:	4620      	mov	r0, r4
 8029a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029a3e:	3a30      	subs	r2, #48	; 0x30
 8029a40:	2a09      	cmp	r2, #9
 8029a42:	d903      	bls.n	8029a4c <_svfiprintf_r+0x1a8>
 8029a44:	2b00      	cmp	r3, #0
 8029a46:	d0c5      	beq.n	80299d4 <_svfiprintf_r+0x130>
 8029a48:	9105      	str	r1, [sp, #20]
 8029a4a:	e7c3      	b.n	80299d4 <_svfiprintf_r+0x130>
 8029a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8029a50:	4604      	mov	r4, r0
 8029a52:	2301      	movs	r3, #1
 8029a54:	e7f0      	b.n	8029a38 <_svfiprintf_r+0x194>
 8029a56:	ab03      	add	r3, sp, #12
 8029a58:	9300      	str	r3, [sp, #0]
 8029a5a:	462a      	mov	r2, r5
 8029a5c:	4b0f      	ldr	r3, [pc, #60]	; (8029a9c <_svfiprintf_r+0x1f8>)
 8029a5e:	a904      	add	r1, sp, #16
 8029a60:	4638      	mov	r0, r7
 8029a62:	f7fc fa85 	bl	8025f70 <_printf_float>
 8029a66:	1c42      	adds	r2, r0, #1
 8029a68:	4606      	mov	r6, r0
 8029a6a:	d1d6      	bne.n	8029a1a <_svfiprintf_r+0x176>
 8029a6c:	89ab      	ldrh	r3, [r5, #12]
 8029a6e:	065b      	lsls	r3, r3, #25
 8029a70:	f53f af2c 	bmi.w	80298cc <_svfiprintf_r+0x28>
 8029a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029a76:	b01d      	add	sp, #116	; 0x74
 8029a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a7c:	ab03      	add	r3, sp, #12
 8029a7e:	9300      	str	r3, [sp, #0]
 8029a80:	462a      	mov	r2, r5
 8029a82:	4b06      	ldr	r3, [pc, #24]	; (8029a9c <_svfiprintf_r+0x1f8>)
 8029a84:	a904      	add	r1, sp, #16
 8029a86:	4638      	mov	r0, r7
 8029a88:	f7fc fcfe 	bl	8026488 <_printf_i>
 8029a8c:	e7eb      	b.n	8029a66 <_svfiprintf_r+0x1c2>
 8029a8e:	bf00      	nop
 8029a90:	08047d74 	.word	0x08047d74
 8029a94:	08047d7e 	.word	0x08047d7e
 8029a98:	08025f71 	.word	0x08025f71
 8029a9c:	080297ed 	.word	0x080297ed
 8029aa0:	08047d7a 	.word	0x08047d7a

08029aa4 <_sungetc_r>:
 8029aa4:	b538      	push	{r3, r4, r5, lr}
 8029aa6:	1c4b      	adds	r3, r1, #1
 8029aa8:	4614      	mov	r4, r2
 8029aaa:	d103      	bne.n	8029ab4 <_sungetc_r+0x10>
 8029aac:	f04f 35ff 	mov.w	r5, #4294967295
 8029ab0:	4628      	mov	r0, r5
 8029ab2:	bd38      	pop	{r3, r4, r5, pc}
 8029ab4:	8993      	ldrh	r3, [r2, #12]
 8029ab6:	f023 0320 	bic.w	r3, r3, #32
 8029aba:	8193      	strh	r3, [r2, #12]
 8029abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029abe:	6852      	ldr	r2, [r2, #4]
 8029ac0:	b2cd      	uxtb	r5, r1
 8029ac2:	b18b      	cbz	r3, 8029ae8 <_sungetc_r+0x44>
 8029ac4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029ac6:	4293      	cmp	r3, r2
 8029ac8:	dd08      	ble.n	8029adc <_sungetc_r+0x38>
 8029aca:	6823      	ldr	r3, [r4, #0]
 8029acc:	1e5a      	subs	r2, r3, #1
 8029ace:	6022      	str	r2, [r4, #0]
 8029ad0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8029ad4:	6863      	ldr	r3, [r4, #4]
 8029ad6:	3301      	adds	r3, #1
 8029ad8:	6063      	str	r3, [r4, #4]
 8029ada:	e7e9      	b.n	8029ab0 <_sungetc_r+0xc>
 8029adc:	4621      	mov	r1, r4
 8029ade:	f000 fd1b 	bl	802a518 <__submore>
 8029ae2:	2800      	cmp	r0, #0
 8029ae4:	d0f1      	beq.n	8029aca <_sungetc_r+0x26>
 8029ae6:	e7e1      	b.n	8029aac <_sungetc_r+0x8>
 8029ae8:	6921      	ldr	r1, [r4, #16]
 8029aea:	6823      	ldr	r3, [r4, #0]
 8029aec:	b151      	cbz	r1, 8029b04 <_sungetc_r+0x60>
 8029aee:	4299      	cmp	r1, r3
 8029af0:	d208      	bcs.n	8029b04 <_sungetc_r+0x60>
 8029af2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8029af6:	42a9      	cmp	r1, r5
 8029af8:	d104      	bne.n	8029b04 <_sungetc_r+0x60>
 8029afa:	3b01      	subs	r3, #1
 8029afc:	3201      	adds	r2, #1
 8029afe:	6023      	str	r3, [r4, #0]
 8029b00:	6062      	str	r2, [r4, #4]
 8029b02:	e7d5      	b.n	8029ab0 <_sungetc_r+0xc>
 8029b04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8029b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8029b0e:	2303      	movs	r3, #3
 8029b10:	63a3      	str	r3, [r4, #56]	; 0x38
 8029b12:	4623      	mov	r3, r4
 8029b14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8029b18:	6023      	str	r3, [r4, #0]
 8029b1a:	2301      	movs	r3, #1
 8029b1c:	e7dc      	b.n	8029ad8 <_sungetc_r+0x34>

08029b1e <__ssrefill_r>:
 8029b1e:	b510      	push	{r4, lr}
 8029b20:	460c      	mov	r4, r1
 8029b22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029b24:	b169      	cbz	r1, 8029b42 <__ssrefill_r+0x24>
 8029b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029b2a:	4299      	cmp	r1, r3
 8029b2c:	d001      	beq.n	8029b32 <__ssrefill_r+0x14>
 8029b2e:	f7fc f8ad 	bl	8025c8c <_free_r>
 8029b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029b34:	6063      	str	r3, [r4, #4]
 8029b36:	2000      	movs	r0, #0
 8029b38:	6360      	str	r0, [r4, #52]	; 0x34
 8029b3a:	b113      	cbz	r3, 8029b42 <__ssrefill_r+0x24>
 8029b3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029b3e:	6023      	str	r3, [r4, #0]
 8029b40:	bd10      	pop	{r4, pc}
 8029b42:	6923      	ldr	r3, [r4, #16]
 8029b44:	6023      	str	r3, [r4, #0]
 8029b46:	2300      	movs	r3, #0
 8029b48:	6063      	str	r3, [r4, #4]
 8029b4a:	89a3      	ldrh	r3, [r4, #12]
 8029b4c:	f043 0320 	orr.w	r3, r3, #32
 8029b50:	81a3      	strh	r3, [r4, #12]
 8029b52:	f04f 30ff 	mov.w	r0, #4294967295
 8029b56:	e7f3      	b.n	8029b40 <__ssrefill_r+0x22>

08029b58 <__ssvfiscanf_r>:
 8029b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029b5c:	460c      	mov	r4, r1
 8029b5e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8029b62:	2100      	movs	r1, #0
 8029b64:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8029b68:	49a6      	ldr	r1, [pc, #664]	; (8029e04 <__ssvfiscanf_r+0x2ac>)
 8029b6a:	91a0      	str	r1, [sp, #640]	; 0x280
 8029b6c:	f10d 0804 	add.w	r8, sp, #4
 8029b70:	49a5      	ldr	r1, [pc, #660]	; (8029e08 <__ssvfiscanf_r+0x2b0>)
 8029b72:	4fa6      	ldr	r7, [pc, #664]	; (8029e0c <__ssvfiscanf_r+0x2b4>)
 8029b74:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8029e10 <__ssvfiscanf_r+0x2b8>
 8029b78:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8029b7c:	4606      	mov	r6, r0
 8029b7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8029b80:	9300      	str	r3, [sp, #0]
 8029b82:	7813      	ldrb	r3, [r2, #0]
 8029b84:	2b00      	cmp	r3, #0
 8029b86:	f000 815a 	beq.w	8029e3e <__ssvfiscanf_r+0x2e6>
 8029b8a:	5dd9      	ldrb	r1, [r3, r7]
 8029b8c:	f011 0108 	ands.w	r1, r1, #8
 8029b90:	f102 0501 	add.w	r5, r2, #1
 8029b94:	d019      	beq.n	8029bca <__ssvfiscanf_r+0x72>
 8029b96:	6863      	ldr	r3, [r4, #4]
 8029b98:	2b00      	cmp	r3, #0
 8029b9a:	dd0f      	ble.n	8029bbc <__ssvfiscanf_r+0x64>
 8029b9c:	6823      	ldr	r3, [r4, #0]
 8029b9e:	781a      	ldrb	r2, [r3, #0]
 8029ba0:	5cba      	ldrb	r2, [r7, r2]
 8029ba2:	0712      	lsls	r2, r2, #28
 8029ba4:	d401      	bmi.n	8029baa <__ssvfiscanf_r+0x52>
 8029ba6:	462a      	mov	r2, r5
 8029ba8:	e7eb      	b.n	8029b82 <__ssvfiscanf_r+0x2a>
 8029baa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029bac:	3201      	adds	r2, #1
 8029bae:	9245      	str	r2, [sp, #276]	; 0x114
 8029bb0:	6862      	ldr	r2, [r4, #4]
 8029bb2:	3301      	adds	r3, #1
 8029bb4:	3a01      	subs	r2, #1
 8029bb6:	6062      	str	r2, [r4, #4]
 8029bb8:	6023      	str	r3, [r4, #0]
 8029bba:	e7ec      	b.n	8029b96 <__ssvfiscanf_r+0x3e>
 8029bbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029bbe:	4621      	mov	r1, r4
 8029bc0:	4630      	mov	r0, r6
 8029bc2:	4798      	blx	r3
 8029bc4:	2800      	cmp	r0, #0
 8029bc6:	d0e9      	beq.n	8029b9c <__ssvfiscanf_r+0x44>
 8029bc8:	e7ed      	b.n	8029ba6 <__ssvfiscanf_r+0x4e>
 8029bca:	2b25      	cmp	r3, #37	; 0x25
 8029bcc:	d012      	beq.n	8029bf4 <__ssvfiscanf_r+0x9c>
 8029bce:	469a      	mov	sl, r3
 8029bd0:	6863      	ldr	r3, [r4, #4]
 8029bd2:	2b00      	cmp	r3, #0
 8029bd4:	f340 8091 	ble.w	8029cfa <__ssvfiscanf_r+0x1a2>
 8029bd8:	6822      	ldr	r2, [r4, #0]
 8029bda:	7813      	ldrb	r3, [r2, #0]
 8029bdc:	4553      	cmp	r3, sl
 8029bde:	f040 812e 	bne.w	8029e3e <__ssvfiscanf_r+0x2e6>
 8029be2:	6863      	ldr	r3, [r4, #4]
 8029be4:	3b01      	subs	r3, #1
 8029be6:	6063      	str	r3, [r4, #4]
 8029be8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8029bea:	3201      	adds	r2, #1
 8029bec:	3301      	adds	r3, #1
 8029bee:	6022      	str	r2, [r4, #0]
 8029bf0:	9345      	str	r3, [sp, #276]	; 0x114
 8029bf2:	e7d8      	b.n	8029ba6 <__ssvfiscanf_r+0x4e>
 8029bf4:	9141      	str	r1, [sp, #260]	; 0x104
 8029bf6:	9143      	str	r1, [sp, #268]	; 0x10c
 8029bf8:	7853      	ldrb	r3, [r2, #1]
 8029bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8029bfc:	bf02      	ittt	eq
 8029bfe:	2310      	moveq	r3, #16
 8029c00:	1c95      	addeq	r5, r2, #2
 8029c02:	9341      	streq	r3, [sp, #260]	; 0x104
 8029c04:	220a      	movs	r2, #10
 8029c06:	46aa      	mov	sl, r5
 8029c08:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8029c0c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8029c10:	2b09      	cmp	r3, #9
 8029c12:	d91d      	bls.n	8029c50 <__ssvfiscanf_r+0xf8>
 8029c14:	487e      	ldr	r0, [pc, #504]	; (8029e10 <__ssvfiscanf_r+0x2b8>)
 8029c16:	2203      	movs	r2, #3
 8029c18:	f7d6 fb2a 	bl	8000270 <memchr>
 8029c1c:	b140      	cbz	r0, 8029c30 <__ssvfiscanf_r+0xd8>
 8029c1e:	2301      	movs	r3, #1
 8029c20:	eba0 0009 	sub.w	r0, r0, r9
 8029c24:	fa03 f000 	lsl.w	r0, r3, r0
 8029c28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029c2a:	4318      	orrs	r0, r3
 8029c2c:	9041      	str	r0, [sp, #260]	; 0x104
 8029c2e:	4655      	mov	r5, sl
 8029c30:	f815 3b01 	ldrb.w	r3, [r5], #1
 8029c34:	2b78      	cmp	r3, #120	; 0x78
 8029c36:	d806      	bhi.n	8029c46 <__ssvfiscanf_r+0xee>
 8029c38:	2b57      	cmp	r3, #87	; 0x57
 8029c3a:	d810      	bhi.n	8029c5e <__ssvfiscanf_r+0x106>
 8029c3c:	2b25      	cmp	r3, #37	; 0x25
 8029c3e:	d0c6      	beq.n	8029bce <__ssvfiscanf_r+0x76>
 8029c40:	d856      	bhi.n	8029cf0 <__ssvfiscanf_r+0x198>
 8029c42:	2b00      	cmp	r3, #0
 8029c44:	d064      	beq.n	8029d10 <__ssvfiscanf_r+0x1b8>
 8029c46:	2303      	movs	r3, #3
 8029c48:	9347      	str	r3, [sp, #284]	; 0x11c
 8029c4a:	230a      	movs	r3, #10
 8029c4c:	9342      	str	r3, [sp, #264]	; 0x108
 8029c4e:	e071      	b.n	8029d34 <__ssvfiscanf_r+0x1dc>
 8029c50:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8029c52:	fb02 1103 	mla	r1, r2, r3, r1
 8029c56:	3930      	subs	r1, #48	; 0x30
 8029c58:	9143      	str	r1, [sp, #268]	; 0x10c
 8029c5a:	4655      	mov	r5, sl
 8029c5c:	e7d3      	b.n	8029c06 <__ssvfiscanf_r+0xae>
 8029c5e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8029c62:	2a20      	cmp	r2, #32
 8029c64:	d8ef      	bhi.n	8029c46 <__ssvfiscanf_r+0xee>
 8029c66:	a101      	add	r1, pc, #4	; (adr r1, 8029c6c <__ssvfiscanf_r+0x114>)
 8029c68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8029c6c:	08029d1f 	.word	0x08029d1f
 8029c70:	08029c47 	.word	0x08029c47
 8029c74:	08029c47 	.word	0x08029c47
 8029c78:	08029d7d 	.word	0x08029d7d
 8029c7c:	08029c47 	.word	0x08029c47
 8029c80:	08029c47 	.word	0x08029c47
 8029c84:	08029c47 	.word	0x08029c47
 8029c88:	08029c47 	.word	0x08029c47
 8029c8c:	08029c47 	.word	0x08029c47
 8029c90:	08029c47 	.word	0x08029c47
 8029c94:	08029c47 	.word	0x08029c47
 8029c98:	08029d93 	.word	0x08029d93
 8029c9c:	08029d69 	.word	0x08029d69
 8029ca0:	08029cf7 	.word	0x08029cf7
 8029ca4:	08029cf7 	.word	0x08029cf7
 8029ca8:	08029cf7 	.word	0x08029cf7
 8029cac:	08029c47 	.word	0x08029c47
 8029cb0:	08029d6d 	.word	0x08029d6d
 8029cb4:	08029c47 	.word	0x08029c47
 8029cb8:	08029c47 	.word	0x08029c47
 8029cbc:	08029c47 	.word	0x08029c47
 8029cc0:	08029c47 	.word	0x08029c47
 8029cc4:	08029da3 	.word	0x08029da3
 8029cc8:	08029d75 	.word	0x08029d75
 8029ccc:	08029d17 	.word	0x08029d17
 8029cd0:	08029c47 	.word	0x08029c47
 8029cd4:	08029c47 	.word	0x08029c47
 8029cd8:	08029d9f 	.word	0x08029d9f
 8029cdc:	08029c47 	.word	0x08029c47
 8029ce0:	08029d69 	.word	0x08029d69
 8029ce4:	08029c47 	.word	0x08029c47
 8029ce8:	08029c47 	.word	0x08029c47
 8029cec:	08029d1f 	.word	0x08029d1f
 8029cf0:	3b45      	subs	r3, #69	; 0x45
 8029cf2:	2b02      	cmp	r3, #2
 8029cf4:	d8a7      	bhi.n	8029c46 <__ssvfiscanf_r+0xee>
 8029cf6:	2305      	movs	r3, #5
 8029cf8:	e01b      	b.n	8029d32 <__ssvfiscanf_r+0x1da>
 8029cfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029cfc:	4621      	mov	r1, r4
 8029cfe:	4630      	mov	r0, r6
 8029d00:	4798      	blx	r3
 8029d02:	2800      	cmp	r0, #0
 8029d04:	f43f af68 	beq.w	8029bd8 <__ssvfiscanf_r+0x80>
 8029d08:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029d0a:	2800      	cmp	r0, #0
 8029d0c:	f040 808d 	bne.w	8029e2a <__ssvfiscanf_r+0x2d2>
 8029d10:	f04f 30ff 	mov.w	r0, #4294967295
 8029d14:	e08f      	b.n	8029e36 <__ssvfiscanf_r+0x2de>
 8029d16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029d18:	f042 0220 	orr.w	r2, r2, #32
 8029d1c:	9241      	str	r2, [sp, #260]	; 0x104
 8029d1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8029d24:	9241      	str	r2, [sp, #260]	; 0x104
 8029d26:	2210      	movs	r2, #16
 8029d28:	2b6f      	cmp	r3, #111	; 0x6f
 8029d2a:	9242      	str	r2, [sp, #264]	; 0x108
 8029d2c:	bf34      	ite	cc
 8029d2e:	2303      	movcc	r3, #3
 8029d30:	2304      	movcs	r3, #4
 8029d32:	9347      	str	r3, [sp, #284]	; 0x11c
 8029d34:	6863      	ldr	r3, [r4, #4]
 8029d36:	2b00      	cmp	r3, #0
 8029d38:	dd42      	ble.n	8029dc0 <__ssvfiscanf_r+0x268>
 8029d3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029d3c:	0659      	lsls	r1, r3, #25
 8029d3e:	d404      	bmi.n	8029d4a <__ssvfiscanf_r+0x1f2>
 8029d40:	6823      	ldr	r3, [r4, #0]
 8029d42:	781a      	ldrb	r2, [r3, #0]
 8029d44:	5cba      	ldrb	r2, [r7, r2]
 8029d46:	0712      	lsls	r2, r2, #28
 8029d48:	d441      	bmi.n	8029dce <__ssvfiscanf_r+0x276>
 8029d4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8029d4c:	2b02      	cmp	r3, #2
 8029d4e:	dc50      	bgt.n	8029df2 <__ssvfiscanf_r+0x29a>
 8029d50:	466b      	mov	r3, sp
 8029d52:	4622      	mov	r2, r4
 8029d54:	a941      	add	r1, sp, #260	; 0x104
 8029d56:	4630      	mov	r0, r6
 8029d58:	f000 f9d0 	bl	802a0fc <_scanf_chars>
 8029d5c:	2801      	cmp	r0, #1
 8029d5e:	d06e      	beq.n	8029e3e <__ssvfiscanf_r+0x2e6>
 8029d60:	2802      	cmp	r0, #2
 8029d62:	f47f af20 	bne.w	8029ba6 <__ssvfiscanf_r+0x4e>
 8029d66:	e7cf      	b.n	8029d08 <__ssvfiscanf_r+0x1b0>
 8029d68:	220a      	movs	r2, #10
 8029d6a:	e7dd      	b.n	8029d28 <__ssvfiscanf_r+0x1d0>
 8029d6c:	2300      	movs	r3, #0
 8029d6e:	9342      	str	r3, [sp, #264]	; 0x108
 8029d70:	2303      	movs	r3, #3
 8029d72:	e7de      	b.n	8029d32 <__ssvfiscanf_r+0x1da>
 8029d74:	2308      	movs	r3, #8
 8029d76:	9342      	str	r3, [sp, #264]	; 0x108
 8029d78:	2304      	movs	r3, #4
 8029d7a:	e7da      	b.n	8029d32 <__ssvfiscanf_r+0x1da>
 8029d7c:	4629      	mov	r1, r5
 8029d7e:	4640      	mov	r0, r8
 8029d80:	f000 fb92 	bl	802a4a8 <__sccl>
 8029d84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029d8a:	9341      	str	r3, [sp, #260]	; 0x104
 8029d8c:	4605      	mov	r5, r0
 8029d8e:	2301      	movs	r3, #1
 8029d90:	e7cf      	b.n	8029d32 <__ssvfiscanf_r+0x1da>
 8029d92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029d98:	9341      	str	r3, [sp, #260]	; 0x104
 8029d9a:	2300      	movs	r3, #0
 8029d9c:	e7c9      	b.n	8029d32 <__ssvfiscanf_r+0x1da>
 8029d9e:	2302      	movs	r3, #2
 8029da0:	e7c7      	b.n	8029d32 <__ssvfiscanf_r+0x1da>
 8029da2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8029da4:	06c3      	lsls	r3, r0, #27
 8029da6:	f53f aefe 	bmi.w	8029ba6 <__ssvfiscanf_r+0x4e>
 8029daa:	9b00      	ldr	r3, [sp, #0]
 8029dac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029dae:	1d19      	adds	r1, r3, #4
 8029db0:	9100      	str	r1, [sp, #0]
 8029db2:	681b      	ldr	r3, [r3, #0]
 8029db4:	f010 0f01 	tst.w	r0, #1
 8029db8:	bf14      	ite	ne
 8029dba:	801a      	strhne	r2, [r3, #0]
 8029dbc:	601a      	streq	r2, [r3, #0]
 8029dbe:	e6f2      	b.n	8029ba6 <__ssvfiscanf_r+0x4e>
 8029dc0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029dc2:	4621      	mov	r1, r4
 8029dc4:	4630      	mov	r0, r6
 8029dc6:	4798      	blx	r3
 8029dc8:	2800      	cmp	r0, #0
 8029dca:	d0b6      	beq.n	8029d3a <__ssvfiscanf_r+0x1e2>
 8029dcc:	e79c      	b.n	8029d08 <__ssvfiscanf_r+0x1b0>
 8029dce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029dd0:	3201      	adds	r2, #1
 8029dd2:	9245      	str	r2, [sp, #276]	; 0x114
 8029dd4:	6862      	ldr	r2, [r4, #4]
 8029dd6:	3a01      	subs	r2, #1
 8029dd8:	2a00      	cmp	r2, #0
 8029dda:	6062      	str	r2, [r4, #4]
 8029ddc:	dd02      	ble.n	8029de4 <__ssvfiscanf_r+0x28c>
 8029dde:	3301      	adds	r3, #1
 8029de0:	6023      	str	r3, [r4, #0]
 8029de2:	e7ad      	b.n	8029d40 <__ssvfiscanf_r+0x1e8>
 8029de4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029de6:	4621      	mov	r1, r4
 8029de8:	4630      	mov	r0, r6
 8029dea:	4798      	blx	r3
 8029dec:	2800      	cmp	r0, #0
 8029dee:	d0a7      	beq.n	8029d40 <__ssvfiscanf_r+0x1e8>
 8029df0:	e78a      	b.n	8029d08 <__ssvfiscanf_r+0x1b0>
 8029df2:	2b04      	cmp	r3, #4
 8029df4:	dc0e      	bgt.n	8029e14 <__ssvfiscanf_r+0x2bc>
 8029df6:	466b      	mov	r3, sp
 8029df8:	4622      	mov	r2, r4
 8029dfa:	a941      	add	r1, sp, #260	; 0x104
 8029dfc:	4630      	mov	r0, r6
 8029dfe:	f000 f9d7 	bl	802a1b0 <_scanf_i>
 8029e02:	e7ab      	b.n	8029d5c <__ssvfiscanf_r+0x204>
 8029e04:	08029aa5 	.word	0x08029aa5
 8029e08:	08029b1f 	.word	0x08029b1f
 8029e0c:	080474c9 	.word	0x080474c9
 8029e10:	08047d7a 	.word	0x08047d7a
 8029e14:	4b0b      	ldr	r3, [pc, #44]	; (8029e44 <__ssvfiscanf_r+0x2ec>)
 8029e16:	2b00      	cmp	r3, #0
 8029e18:	f43f aec5 	beq.w	8029ba6 <__ssvfiscanf_r+0x4e>
 8029e1c:	466b      	mov	r3, sp
 8029e1e:	4622      	mov	r2, r4
 8029e20:	a941      	add	r1, sp, #260	; 0x104
 8029e22:	4630      	mov	r0, r6
 8029e24:	f3af 8000 	nop.w
 8029e28:	e798      	b.n	8029d5c <__ssvfiscanf_r+0x204>
 8029e2a:	89a3      	ldrh	r3, [r4, #12]
 8029e2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029e30:	bf18      	it	ne
 8029e32:	f04f 30ff 	movne.w	r0, #4294967295
 8029e36:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8029e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029e3e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029e40:	e7f9      	b.n	8029e36 <__ssvfiscanf_r+0x2de>
 8029e42:	bf00      	nop
 8029e44:	00000000 	.word	0x00000000

08029e48 <__sfputc_r>:
 8029e48:	6893      	ldr	r3, [r2, #8]
 8029e4a:	3b01      	subs	r3, #1
 8029e4c:	2b00      	cmp	r3, #0
 8029e4e:	b410      	push	{r4}
 8029e50:	6093      	str	r3, [r2, #8]
 8029e52:	da08      	bge.n	8029e66 <__sfputc_r+0x1e>
 8029e54:	6994      	ldr	r4, [r2, #24]
 8029e56:	42a3      	cmp	r3, r4
 8029e58:	db01      	blt.n	8029e5e <__sfputc_r+0x16>
 8029e5a:	290a      	cmp	r1, #10
 8029e5c:	d103      	bne.n	8029e66 <__sfputc_r+0x1e>
 8029e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029e62:	f7fd bf75 	b.w	8027d50 <__swbuf_r>
 8029e66:	6813      	ldr	r3, [r2, #0]
 8029e68:	1c58      	adds	r0, r3, #1
 8029e6a:	6010      	str	r0, [r2, #0]
 8029e6c:	7019      	strb	r1, [r3, #0]
 8029e6e:	4608      	mov	r0, r1
 8029e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029e74:	4770      	bx	lr

08029e76 <__sfputs_r>:
 8029e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029e78:	4606      	mov	r6, r0
 8029e7a:	460f      	mov	r7, r1
 8029e7c:	4614      	mov	r4, r2
 8029e7e:	18d5      	adds	r5, r2, r3
 8029e80:	42ac      	cmp	r4, r5
 8029e82:	d101      	bne.n	8029e88 <__sfputs_r+0x12>
 8029e84:	2000      	movs	r0, #0
 8029e86:	e007      	b.n	8029e98 <__sfputs_r+0x22>
 8029e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029e8c:	463a      	mov	r2, r7
 8029e8e:	4630      	mov	r0, r6
 8029e90:	f7ff ffda 	bl	8029e48 <__sfputc_r>
 8029e94:	1c43      	adds	r3, r0, #1
 8029e96:	d1f3      	bne.n	8029e80 <__sfputs_r+0xa>
 8029e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029e9a:	Address 0x0000000008029e9a is out of bounds.


08029e9c <_vfiprintf_r>:
 8029e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ea0:	460d      	mov	r5, r1
 8029ea2:	b09d      	sub	sp, #116	; 0x74
 8029ea4:	4614      	mov	r4, r2
 8029ea6:	4698      	mov	r8, r3
 8029ea8:	4606      	mov	r6, r0
 8029eaa:	b118      	cbz	r0, 8029eb4 <_vfiprintf_r+0x18>
 8029eac:	6983      	ldr	r3, [r0, #24]
 8029eae:	b90b      	cbnz	r3, 8029eb4 <_vfiprintf_r+0x18>
 8029eb0:	f7fb fa50 	bl	8025354 <__sinit>
 8029eb4:	4b89      	ldr	r3, [pc, #548]	; (802a0dc <_vfiprintf_r+0x240>)
 8029eb6:	429d      	cmp	r5, r3
 8029eb8:	d11b      	bne.n	8029ef2 <_vfiprintf_r+0x56>
 8029eba:	6875      	ldr	r5, [r6, #4]
 8029ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029ebe:	07d9      	lsls	r1, r3, #31
 8029ec0:	d405      	bmi.n	8029ece <_vfiprintf_r+0x32>
 8029ec2:	89ab      	ldrh	r3, [r5, #12]
 8029ec4:	059a      	lsls	r2, r3, #22
 8029ec6:	d402      	bmi.n	8029ece <_vfiprintf_r+0x32>
 8029ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029eca:	f7fb fc19 	bl	8025700 <__retarget_lock_acquire_recursive>
 8029ece:	89ab      	ldrh	r3, [r5, #12]
 8029ed0:	071b      	lsls	r3, r3, #28
 8029ed2:	d501      	bpl.n	8029ed8 <_vfiprintf_r+0x3c>
 8029ed4:	692b      	ldr	r3, [r5, #16]
 8029ed6:	b9eb      	cbnz	r3, 8029f14 <_vfiprintf_r+0x78>
 8029ed8:	4629      	mov	r1, r5
 8029eda:	4630      	mov	r0, r6
 8029edc:	f7fd ff9c 	bl	8027e18 <__swsetup_r>
 8029ee0:	b1c0      	cbz	r0, 8029f14 <_vfiprintf_r+0x78>
 8029ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029ee4:	07dc      	lsls	r4, r3, #31
 8029ee6:	d50e      	bpl.n	8029f06 <_vfiprintf_r+0x6a>
 8029ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8029eec:	b01d      	add	sp, #116	; 0x74
 8029eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029ef2:	4b7b      	ldr	r3, [pc, #492]	; (802a0e0 <_vfiprintf_r+0x244>)
 8029ef4:	429d      	cmp	r5, r3
 8029ef6:	d101      	bne.n	8029efc <_vfiprintf_r+0x60>
 8029ef8:	68b5      	ldr	r5, [r6, #8]
 8029efa:	e7df      	b.n	8029ebc <_vfiprintf_r+0x20>
 8029efc:	4b79      	ldr	r3, [pc, #484]	; (802a0e4 <_vfiprintf_r+0x248>)
 8029efe:	429d      	cmp	r5, r3
 8029f00:	bf08      	it	eq
 8029f02:	68f5      	ldreq	r5, [r6, #12]
 8029f04:	e7da      	b.n	8029ebc <_vfiprintf_r+0x20>
 8029f06:	89ab      	ldrh	r3, [r5, #12]
 8029f08:	0598      	lsls	r0, r3, #22
 8029f0a:	d4ed      	bmi.n	8029ee8 <_vfiprintf_r+0x4c>
 8029f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029f0e:	f7fb fbf9 	bl	8025704 <__retarget_lock_release_recursive>
 8029f12:	e7e9      	b.n	8029ee8 <_vfiprintf_r+0x4c>
 8029f14:	2300      	movs	r3, #0
 8029f16:	9309      	str	r3, [sp, #36]	; 0x24
 8029f18:	2320      	movs	r3, #32
 8029f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8029f22:	2330      	movs	r3, #48	; 0x30
 8029f24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a0e8 <_vfiprintf_r+0x24c>
 8029f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029f2c:	f04f 0901 	mov.w	r9, #1
 8029f30:	4623      	mov	r3, r4
 8029f32:	469a      	mov	sl, r3
 8029f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029f38:	b10a      	cbz	r2, 8029f3e <_vfiprintf_r+0xa2>
 8029f3a:	2a25      	cmp	r2, #37	; 0x25
 8029f3c:	d1f9      	bne.n	8029f32 <_vfiprintf_r+0x96>
 8029f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8029f42:	d00b      	beq.n	8029f5c <_vfiprintf_r+0xc0>
 8029f44:	465b      	mov	r3, fp
 8029f46:	4622      	mov	r2, r4
 8029f48:	4629      	mov	r1, r5
 8029f4a:	4630      	mov	r0, r6
 8029f4c:	f7ff ff93 	bl	8029e76 <__sfputs_r>
 8029f50:	3001      	adds	r0, #1
 8029f52:	f000 80aa 	beq.w	802a0aa <_vfiprintf_r+0x20e>
 8029f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029f58:	445a      	add	r2, fp
 8029f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8029f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8029f60:	2b00      	cmp	r3, #0
 8029f62:	f000 80a2 	beq.w	802a0aa <_vfiprintf_r+0x20e>
 8029f66:	2300      	movs	r3, #0
 8029f68:	f04f 32ff 	mov.w	r2, #4294967295
 8029f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029f70:	f10a 0a01 	add.w	sl, sl, #1
 8029f74:	9304      	str	r3, [sp, #16]
 8029f76:	9307      	str	r3, [sp, #28]
 8029f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8029f7e:	4654      	mov	r4, sl
 8029f80:	2205      	movs	r2, #5
 8029f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029f86:	4858      	ldr	r0, [pc, #352]	; (802a0e8 <_vfiprintf_r+0x24c>)
 8029f88:	f7d6 f972 	bl	8000270 <memchr>
 8029f8c:	9a04      	ldr	r2, [sp, #16]
 8029f8e:	b9d8      	cbnz	r0, 8029fc8 <_vfiprintf_r+0x12c>
 8029f90:	06d1      	lsls	r1, r2, #27
 8029f92:	bf44      	itt	mi
 8029f94:	2320      	movmi	r3, #32
 8029f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029f9a:	0713      	lsls	r3, r2, #28
 8029f9c:	bf44      	itt	mi
 8029f9e:	232b      	movmi	r3, #43	; 0x2b
 8029fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8029fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8029faa:	d015      	beq.n	8029fd8 <_vfiprintf_r+0x13c>
 8029fac:	9a07      	ldr	r2, [sp, #28]
 8029fae:	4654      	mov	r4, sl
 8029fb0:	2000      	movs	r0, #0
 8029fb2:	f04f 0c0a 	mov.w	ip, #10
 8029fb6:	4621      	mov	r1, r4
 8029fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029fbc:	3b30      	subs	r3, #48	; 0x30
 8029fbe:	2b09      	cmp	r3, #9
 8029fc0:	d94e      	bls.n	802a060 <_vfiprintf_r+0x1c4>
 8029fc2:	b1b0      	cbz	r0, 8029ff2 <_vfiprintf_r+0x156>
 8029fc4:	9207      	str	r2, [sp, #28]
 8029fc6:	e014      	b.n	8029ff2 <_vfiprintf_r+0x156>
 8029fc8:	eba0 0308 	sub.w	r3, r0, r8
 8029fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8029fd0:	4313      	orrs	r3, r2
 8029fd2:	9304      	str	r3, [sp, #16]
 8029fd4:	46a2      	mov	sl, r4
 8029fd6:	e7d2      	b.n	8029f7e <_vfiprintf_r+0xe2>
 8029fd8:	9b03      	ldr	r3, [sp, #12]
 8029fda:	1d19      	adds	r1, r3, #4
 8029fdc:	681b      	ldr	r3, [r3, #0]
 8029fde:	9103      	str	r1, [sp, #12]
 8029fe0:	2b00      	cmp	r3, #0
 8029fe2:	bfbb      	ittet	lt
 8029fe4:	425b      	neglt	r3, r3
 8029fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8029fea:	9307      	strge	r3, [sp, #28]
 8029fec:	9307      	strlt	r3, [sp, #28]
 8029fee:	bfb8      	it	lt
 8029ff0:	9204      	strlt	r2, [sp, #16]
 8029ff2:	7823      	ldrb	r3, [r4, #0]
 8029ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8029ff6:	d10c      	bne.n	802a012 <_vfiprintf_r+0x176>
 8029ff8:	7863      	ldrb	r3, [r4, #1]
 8029ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8029ffc:	d135      	bne.n	802a06a <_vfiprintf_r+0x1ce>
 8029ffe:	9b03      	ldr	r3, [sp, #12]
 802a000:	1d1a      	adds	r2, r3, #4
 802a002:	681b      	ldr	r3, [r3, #0]
 802a004:	9203      	str	r2, [sp, #12]
 802a006:	2b00      	cmp	r3, #0
 802a008:	bfb8      	it	lt
 802a00a:	f04f 33ff 	movlt.w	r3, #4294967295
 802a00e:	3402      	adds	r4, #2
 802a010:	9305      	str	r3, [sp, #20]
 802a012:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a0f8 <_vfiprintf_r+0x25c>
 802a016:	7821      	ldrb	r1, [r4, #0]
 802a018:	2203      	movs	r2, #3
 802a01a:	4650      	mov	r0, sl
 802a01c:	f7d6 f928 	bl	8000270 <memchr>
 802a020:	b140      	cbz	r0, 802a034 <_vfiprintf_r+0x198>
 802a022:	2340      	movs	r3, #64	; 0x40
 802a024:	eba0 000a 	sub.w	r0, r0, sl
 802a028:	fa03 f000 	lsl.w	r0, r3, r0
 802a02c:	9b04      	ldr	r3, [sp, #16]
 802a02e:	4303      	orrs	r3, r0
 802a030:	3401      	adds	r4, #1
 802a032:	9304      	str	r3, [sp, #16]
 802a034:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a038:	482c      	ldr	r0, [pc, #176]	; (802a0ec <_vfiprintf_r+0x250>)
 802a03a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a03e:	2206      	movs	r2, #6
 802a040:	f7d6 f916 	bl	8000270 <memchr>
 802a044:	2800      	cmp	r0, #0
 802a046:	d03f      	beq.n	802a0c8 <_vfiprintf_r+0x22c>
 802a048:	4b29      	ldr	r3, [pc, #164]	; (802a0f0 <_vfiprintf_r+0x254>)
 802a04a:	bb1b      	cbnz	r3, 802a094 <_vfiprintf_r+0x1f8>
 802a04c:	9b03      	ldr	r3, [sp, #12]
 802a04e:	3307      	adds	r3, #7
 802a050:	f023 0307 	bic.w	r3, r3, #7
 802a054:	3308      	adds	r3, #8
 802a056:	9303      	str	r3, [sp, #12]
 802a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a05a:	443b      	add	r3, r7
 802a05c:	9309      	str	r3, [sp, #36]	; 0x24
 802a05e:	e767      	b.n	8029f30 <_vfiprintf_r+0x94>
 802a060:	fb0c 3202 	mla	r2, ip, r2, r3
 802a064:	460c      	mov	r4, r1
 802a066:	2001      	movs	r0, #1
 802a068:	e7a5      	b.n	8029fb6 <_vfiprintf_r+0x11a>
 802a06a:	2300      	movs	r3, #0
 802a06c:	3401      	adds	r4, #1
 802a06e:	9305      	str	r3, [sp, #20]
 802a070:	4619      	mov	r1, r3
 802a072:	f04f 0c0a 	mov.w	ip, #10
 802a076:	4620      	mov	r0, r4
 802a078:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a07c:	3a30      	subs	r2, #48	; 0x30
 802a07e:	2a09      	cmp	r2, #9
 802a080:	d903      	bls.n	802a08a <_vfiprintf_r+0x1ee>
 802a082:	2b00      	cmp	r3, #0
 802a084:	d0c5      	beq.n	802a012 <_vfiprintf_r+0x176>
 802a086:	9105      	str	r1, [sp, #20]
 802a088:	e7c3      	b.n	802a012 <_vfiprintf_r+0x176>
 802a08a:	fb0c 2101 	mla	r1, ip, r1, r2
 802a08e:	4604      	mov	r4, r0
 802a090:	2301      	movs	r3, #1
 802a092:	e7f0      	b.n	802a076 <_vfiprintf_r+0x1da>
 802a094:	ab03      	add	r3, sp, #12
 802a096:	9300      	str	r3, [sp, #0]
 802a098:	462a      	mov	r2, r5
 802a09a:	4b16      	ldr	r3, [pc, #88]	; (802a0f4 <_vfiprintf_r+0x258>)
 802a09c:	a904      	add	r1, sp, #16
 802a09e:	4630      	mov	r0, r6
 802a0a0:	f7fb ff66 	bl	8025f70 <_printf_float>
 802a0a4:	4607      	mov	r7, r0
 802a0a6:	1c78      	adds	r0, r7, #1
 802a0a8:	d1d6      	bne.n	802a058 <_vfiprintf_r+0x1bc>
 802a0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a0ac:	07d9      	lsls	r1, r3, #31
 802a0ae:	d405      	bmi.n	802a0bc <_vfiprintf_r+0x220>
 802a0b0:	89ab      	ldrh	r3, [r5, #12]
 802a0b2:	059a      	lsls	r2, r3, #22
 802a0b4:	d402      	bmi.n	802a0bc <_vfiprintf_r+0x220>
 802a0b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a0b8:	f7fb fb24 	bl	8025704 <__retarget_lock_release_recursive>
 802a0bc:	89ab      	ldrh	r3, [r5, #12]
 802a0be:	065b      	lsls	r3, r3, #25
 802a0c0:	f53f af12 	bmi.w	8029ee8 <_vfiprintf_r+0x4c>
 802a0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a0c6:	e711      	b.n	8029eec <_vfiprintf_r+0x50>
 802a0c8:	ab03      	add	r3, sp, #12
 802a0ca:	9300      	str	r3, [sp, #0]
 802a0cc:	462a      	mov	r2, r5
 802a0ce:	4b09      	ldr	r3, [pc, #36]	; (802a0f4 <_vfiprintf_r+0x258>)
 802a0d0:	a904      	add	r1, sp, #16
 802a0d2:	4630      	mov	r0, r6
 802a0d4:	f7fc f9d8 	bl	8026488 <_printf_i>
 802a0d8:	e7e4      	b.n	802a0a4 <_vfiprintf_r+0x208>
 802a0da:	bf00      	nop
 802a0dc:	080475ec 	.word	0x080475ec
 802a0e0:	0804760c 	.word	0x0804760c
 802a0e4:	080475cc 	.word	0x080475cc
 802a0e8:	08047d74 	.word	0x08047d74
 802a0ec:	08047d7e 	.word	0x08047d7e
 802a0f0:	08025f71 	.word	0x08025f71
 802a0f4:	08029e77 	.word	0x08029e77
 802a0f8:	08047d7a 	.word	0x08047d7a

0802a0fc <_scanf_chars>:
 802a0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a100:	4615      	mov	r5, r2
 802a102:	688a      	ldr	r2, [r1, #8]
 802a104:	4680      	mov	r8, r0
 802a106:	460c      	mov	r4, r1
 802a108:	b932      	cbnz	r2, 802a118 <_scanf_chars+0x1c>
 802a10a:	698a      	ldr	r2, [r1, #24]
 802a10c:	2a00      	cmp	r2, #0
 802a10e:	bf0c      	ite	eq
 802a110:	2201      	moveq	r2, #1
 802a112:	f04f 32ff 	movne.w	r2, #4294967295
 802a116:	608a      	str	r2, [r1, #8]
 802a118:	6822      	ldr	r2, [r4, #0]
 802a11a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802a1ac <_scanf_chars+0xb0>
 802a11e:	06d1      	lsls	r1, r2, #27
 802a120:	bf5f      	itttt	pl
 802a122:	681a      	ldrpl	r2, [r3, #0]
 802a124:	1d11      	addpl	r1, r2, #4
 802a126:	6019      	strpl	r1, [r3, #0]
 802a128:	6816      	ldrpl	r6, [r2, #0]
 802a12a:	2700      	movs	r7, #0
 802a12c:	69a0      	ldr	r0, [r4, #24]
 802a12e:	b188      	cbz	r0, 802a154 <_scanf_chars+0x58>
 802a130:	2801      	cmp	r0, #1
 802a132:	d107      	bne.n	802a144 <_scanf_chars+0x48>
 802a134:	682a      	ldr	r2, [r5, #0]
 802a136:	7811      	ldrb	r1, [r2, #0]
 802a138:	6962      	ldr	r2, [r4, #20]
 802a13a:	5c52      	ldrb	r2, [r2, r1]
 802a13c:	b952      	cbnz	r2, 802a154 <_scanf_chars+0x58>
 802a13e:	2f00      	cmp	r7, #0
 802a140:	d031      	beq.n	802a1a6 <_scanf_chars+0xaa>
 802a142:	e022      	b.n	802a18a <_scanf_chars+0x8e>
 802a144:	2802      	cmp	r0, #2
 802a146:	d120      	bne.n	802a18a <_scanf_chars+0x8e>
 802a148:	682b      	ldr	r3, [r5, #0]
 802a14a:	781b      	ldrb	r3, [r3, #0]
 802a14c:	f813 3009 	ldrb.w	r3, [r3, r9]
 802a150:	071b      	lsls	r3, r3, #28
 802a152:	d41a      	bmi.n	802a18a <_scanf_chars+0x8e>
 802a154:	6823      	ldr	r3, [r4, #0]
 802a156:	06da      	lsls	r2, r3, #27
 802a158:	bf5e      	ittt	pl
 802a15a:	682b      	ldrpl	r3, [r5, #0]
 802a15c:	781b      	ldrbpl	r3, [r3, #0]
 802a15e:	f806 3b01 	strbpl.w	r3, [r6], #1
 802a162:	682a      	ldr	r2, [r5, #0]
 802a164:	686b      	ldr	r3, [r5, #4]
 802a166:	3201      	adds	r2, #1
 802a168:	602a      	str	r2, [r5, #0]
 802a16a:	68a2      	ldr	r2, [r4, #8]
 802a16c:	3b01      	subs	r3, #1
 802a16e:	3a01      	subs	r2, #1
 802a170:	606b      	str	r3, [r5, #4]
 802a172:	3701      	adds	r7, #1
 802a174:	60a2      	str	r2, [r4, #8]
 802a176:	b142      	cbz	r2, 802a18a <_scanf_chars+0x8e>
 802a178:	2b00      	cmp	r3, #0
 802a17a:	dcd7      	bgt.n	802a12c <_scanf_chars+0x30>
 802a17c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802a180:	4629      	mov	r1, r5
 802a182:	4640      	mov	r0, r8
 802a184:	4798      	blx	r3
 802a186:	2800      	cmp	r0, #0
 802a188:	d0d0      	beq.n	802a12c <_scanf_chars+0x30>
 802a18a:	6823      	ldr	r3, [r4, #0]
 802a18c:	f013 0310 	ands.w	r3, r3, #16
 802a190:	d105      	bne.n	802a19e <_scanf_chars+0xa2>
 802a192:	68e2      	ldr	r2, [r4, #12]
 802a194:	3201      	adds	r2, #1
 802a196:	60e2      	str	r2, [r4, #12]
 802a198:	69a2      	ldr	r2, [r4, #24]
 802a19a:	b102      	cbz	r2, 802a19e <_scanf_chars+0xa2>
 802a19c:	7033      	strb	r3, [r6, #0]
 802a19e:	6923      	ldr	r3, [r4, #16]
 802a1a0:	443b      	add	r3, r7
 802a1a2:	6123      	str	r3, [r4, #16]
 802a1a4:	2000      	movs	r0, #0
 802a1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a1aa:	bf00      	nop
 802a1ac:	080474c9 	.word	0x080474c9

0802a1b0 <_scanf_i>:
 802a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a1b4:	4698      	mov	r8, r3
 802a1b6:	4b76      	ldr	r3, [pc, #472]	; (802a390 <_scanf_i+0x1e0>)
 802a1b8:	460c      	mov	r4, r1
 802a1ba:	4682      	mov	sl, r0
 802a1bc:	4616      	mov	r6, r2
 802a1be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802a1c2:	b087      	sub	sp, #28
 802a1c4:	ab03      	add	r3, sp, #12
 802a1c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802a1ca:	4b72      	ldr	r3, [pc, #456]	; (802a394 <_scanf_i+0x1e4>)
 802a1cc:	69a1      	ldr	r1, [r4, #24]
 802a1ce:	4a72      	ldr	r2, [pc, #456]	; (802a398 <_scanf_i+0x1e8>)
 802a1d0:	2903      	cmp	r1, #3
 802a1d2:	bf18      	it	ne
 802a1d4:	461a      	movne	r2, r3
 802a1d6:	68a3      	ldr	r3, [r4, #8]
 802a1d8:	9201      	str	r2, [sp, #4]
 802a1da:	1e5a      	subs	r2, r3, #1
 802a1dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802a1e0:	bf88      	it	hi
 802a1e2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802a1e6:	4627      	mov	r7, r4
 802a1e8:	bf82      	ittt	hi
 802a1ea:	eb03 0905 	addhi.w	r9, r3, r5
 802a1ee:	f240 135d 	movwhi	r3, #349	; 0x15d
 802a1f2:	60a3      	strhi	r3, [r4, #8]
 802a1f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 802a1f8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802a1fc:	bf98      	it	ls
 802a1fe:	f04f 0900 	movls.w	r9, #0
 802a202:	6023      	str	r3, [r4, #0]
 802a204:	463d      	mov	r5, r7
 802a206:	f04f 0b00 	mov.w	fp, #0
 802a20a:	6831      	ldr	r1, [r6, #0]
 802a20c:	ab03      	add	r3, sp, #12
 802a20e:	7809      	ldrb	r1, [r1, #0]
 802a210:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802a214:	2202      	movs	r2, #2
 802a216:	f7d6 f82b 	bl	8000270 <memchr>
 802a21a:	b328      	cbz	r0, 802a268 <_scanf_i+0xb8>
 802a21c:	f1bb 0f01 	cmp.w	fp, #1
 802a220:	d159      	bne.n	802a2d6 <_scanf_i+0x126>
 802a222:	6862      	ldr	r2, [r4, #4]
 802a224:	b92a      	cbnz	r2, 802a232 <_scanf_i+0x82>
 802a226:	6822      	ldr	r2, [r4, #0]
 802a228:	2308      	movs	r3, #8
 802a22a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802a22e:	6063      	str	r3, [r4, #4]
 802a230:	6022      	str	r2, [r4, #0]
 802a232:	6822      	ldr	r2, [r4, #0]
 802a234:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802a238:	6022      	str	r2, [r4, #0]
 802a23a:	68a2      	ldr	r2, [r4, #8]
 802a23c:	1e51      	subs	r1, r2, #1
 802a23e:	60a1      	str	r1, [r4, #8]
 802a240:	b192      	cbz	r2, 802a268 <_scanf_i+0xb8>
 802a242:	6832      	ldr	r2, [r6, #0]
 802a244:	1c51      	adds	r1, r2, #1
 802a246:	6031      	str	r1, [r6, #0]
 802a248:	7812      	ldrb	r2, [r2, #0]
 802a24a:	f805 2b01 	strb.w	r2, [r5], #1
 802a24e:	6872      	ldr	r2, [r6, #4]
 802a250:	3a01      	subs	r2, #1
 802a252:	2a00      	cmp	r2, #0
 802a254:	6072      	str	r2, [r6, #4]
 802a256:	dc07      	bgt.n	802a268 <_scanf_i+0xb8>
 802a258:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802a25c:	4631      	mov	r1, r6
 802a25e:	4650      	mov	r0, sl
 802a260:	4790      	blx	r2
 802a262:	2800      	cmp	r0, #0
 802a264:	f040 8085 	bne.w	802a372 <_scanf_i+0x1c2>
 802a268:	f10b 0b01 	add.w	fp, fp, #1
 802a26c:	f1bb 0f03 	cmp.w	fp, #3
 802a270:	d1cb      	bne.n	802a20a <_scanf_i+0x5a>
 802a272:	6863      	ldr	r3, [r4, #4]
 802a274:	b90b      	cbnz	r3, 802a27a <_scanf_i+0xca>
 802a276:	230a      	movs	r3, #10
 802a278:	6063      	str	r3, [r4, #4]
 802a27a:	6863      	ldr	r3, [r4, #4]
 802a27c:	4947      	ldr	r1, [pc, #284]	; (802a39c <_scanf_i+0x1ec>)
 802a27e:	6960      	ldr	r0, [r4, #20]
 802a280:	1ac9      	subs	r1, r1, r3
 802a282:	f000 f911 	bl	802a4a8 <__sccl>
 802a286:	f04f 0b00 	mov.w	fp, #0
 802a28a:	68a3      	ldr	r3, [r4, #8]
 802a28c:	6822      	ldr	r2, [r4, #0]
 802a28e:	2b00      	cmp	r3, #0
 802a290:	d03d      	beq.n	802a30e <_scanf_i+0x15e>
 802a292:	6831      	ldr	r1, [r6, #0]
 802a294:	6960      	ldr	r0, [r4, #20]
 802a296:	f891 c000 	ldrb.w	ip, [r1]
 802a29a:	f810 000c 	ldrb.w	r0, [r0, ip]
 802a29e:	2800      	cmp	r0, #0
 802a2a0:	d035      	beq.n	802a30e <_scanf_i+0x15e>
 802a2a2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802a2a6:	d124      	bne.n	802a2f2 <_scanf_i+0x142>
 802a2a8:	0510      	lsls	r0, r2, #20
 802a2aa:	d522      	bpl.n	802a2f2 <_scanf_i+0x142>
 802a2ac:	f10b 0b01 	add.w	fp, fp, #1
 802a2b0:	f1b9 0f00 	cmp.w	r9, #0
 802a2b4:	d003      	beq.n	802a2be <_scanf_i+0x10e>
 802a2b6:	3301      	adds	r3, #1
 802a2b8:	f109 39ff 	add.w	r9, r9, #4294967295
 802a2bc:	60a3      	str	r3, [r4, #8]
 802a2be:	6873      	ldr	r3, [r6, #4]
 802a2c0:	3b01      	subs	r3, #1
 802a2c2:	2b00      	cmp	r3, #0
 802a2c4:	6073      	str	r3, [r6, #4]
 802a2c6:	dd1b      	ble.n	802a300 <_scanf_i+0x150>
 802a2c8:	6833      	ldr	r3, [r6, #0]
 802a2ca:	3301      	adds	r3, #1
 802a2cc:	6033      	str	r3, [r6, #0]
 802a2ce:	68a3      	ldr	r3, [r4, #8]
 802a2d0:	3b01      	subs	r3, #1
 802a2d2:	60a3      	str	r3, [r4, #8]
 802a2d4:	e7d9      	b.n	802a28a <_scanf_i+0xda>
 802a2d6:	f1bb 0f02 	cmp.w	fp, #2
 802a2da:	d1ae      	bne.n	802a23a <_scanf_i+0x8a>
 802a2dc:	6822      	ldr	r2, [r4, #0]
 802a2de:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802a2e2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802a2e6:	d1bf      	bne.n	802a268 <_scanf_i+0xb8>
 802a2e8:	2310      	movs	r3, #16
 802a2ea:	6063      	str	r3, [r4, #4]
 802a2ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802a2f0:	e7a2      	b.n	802a238 <_scanf_i+0x88>
 802a2f2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802a2f6:	6022      	str	r2, [r4, #0]
 802a2f8:	780b      	ldrb	r3, [r1, #0]
 802a2fa:	f805 3b01 	strb.w	r3, [r5], #1
 802a2fe:	e7de      	b.n	802a2be <_scanf_i+0x10e>
 802a300:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802a304:	4631      	mov	r1, r6
 802a306:	4650      	mov	r0, sl
 802a308:	4798      	blx	r3
 802a30a:	2800      	cmp	r0, #0
 802a30c:	d0df      	beq.n	802a2ce <_scanf_i+0x11e>
 802a30e:	6823      	ldr	r3, [r4, #0]
 802a310:	05db      	lsls	r3, r3, #23
 802a312:	d50d      	bpl.n	802a330 <_scanf_i+0x180>
 802a314:	42bd      	cmp	r5, r7
 802a316:	d909      	bls.n	802a32c <_scanf_i+0x17c>
 802a318:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802a31c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802a320:	4632      	mov	r2, r6
 802a322:	4650      	mov	r0, sl
 802a324:	4798      	blx	r3
 802a326:	f105 39ff 	add.w	r9, r5, #4294967295
 802a32a:	464d      	mov	r5, r9
 802a32c:	42bd      	cmp	r5, r7
 802a32e:	d02d      	beq.n	802a38c <_scanf_i+0x1dc>
 802a330:	6822      	ldr	r2, [r4, #0]
 802a332:	f012 0210 	ands.w	r2, r2, #16
 802a336:	d113      	bne.n	802a360 <_scanf_i+0x1b0>
 802a338:	702a      	strb	r2, [r5, #0]
 802a33a:	6863      	ldr	r3, [r4, #4]
 802a33c:	9e01      	ldr	r6, [sp, #4]
 802a33e:	4639      	mov	r1, r7
 802a340:	4650      	mov	r0, sl
 802a342:	47b0      	blx	r6
 802a344:	6821      	ldr	r1, [r4, #0]
 802a346:	f8d8 3000 	ldr.w	r3, [r8]
 802a34a:	f011 0f20 	tst.w	r1, #32
 802a34e:	d013      	beq.n	802a378 <_scanf_i+0x1c8>
 802a350:	1d1a      	adds	r2, r3, #4
 802a352:	f8c8 2000 	str.w	r2, [r8]
 802a356:	681b      	ldr	r3, [r3, #0]
 802a358:	6018      	str	r0, [r3, #0]
 802a35a:	68e3      	ldr	r3, [r4, #12]
 802a35c:	3301      	adds	r3, #1
 802a35e:	60e3      	str	r3, [r4, #12]
 802a360:	1bed      	subs	r5, r5, r7
 802a362:	44ab      	add	fp, r5
 802a364:	6925      	ldr	r5, [r4, #16]
 802a366:	445d      	add	r5, fp
 802a368:	6125      	str	r5, [r4, #16]
 802a36a:	2000      	movs	r0, #0
 802a36c:	b007      	add	sp, #28
 802a36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a372:	f04f 0b00 	mov.w	fp, #0
 802a376:	e7ca      	b.n	802a30e <_scanf_i+0x15e>
 802a378:	1d1a      	adds	r2, r3, #4
 802a37a:	f8c8 2000 	str.w	r2, [r8]
 802a37e:	681b      	ldr	r3, [r3, #0]
 802a380:	f011 0f01 	tst.w	r1, #1
 802a384:	bf14      	ite	ne
 802a386:	8018      	strhne	r0, [r3, #0]
 802a388:	6018      	streq	r0, [r3, #0]
 802a38a:	e7e6      	b.n	802a35a <_scanf_i+0x1aa>
 802a38c:	2001      	movs	r0, #1
 802a38e:	e7ed      	b.n	802a36c <_scanf_i+0x1bc>
 802a390:	0802a968 	.word	0x0802a968
 802a394:	080278c1 	.word	0x080278c1
 802a398:	080277c5 	.word	0x080277c5
 802a39c:	08047d9e 	.word	0x08047d9e

0802a3a0 <_putc_r>:
 802a3a0:	b570      	push	{r4, r5, r6, lr}
 802a3a2:	460d      	mov	r5, r1
 802a3a4:	4614      	mov	r4, r2
 802a3a6:	4606      	mov	r6, r0
 802a3a8:	b118      	cbz	r0, 802a3b2 <_putc_r+0x12>
 802a3aa:	6983      	ldr	r3, [r0, #24]
 802a3ac:	b90b      	cbnz	r3, 802a3b2 <_putc_r+0x12>
 802a3ae:	f7fa ffd1 	bl	8025354 <__sinit>
 802a3b2:	4b1c      	ldr	r3, [pc, #112]	; (802a424 <_putc_r+0x84>)
 802a3b4:	429c      	cmp	r4, r3
 802a3b6:	d124      	bne.n	802a402 <_putc_r+0x62>
 802a3b8:	6874      	ldr	r4, [r6, #4]
 802a3ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a3bc:	07d8      	lsls	r0, r3, #31
 802a3be:	d405      	bmi.n	802a3cc <_putc_r+0x2c>
 802a3c0:	89a3      	ldrh	r3, [r4, #12]
 802a3c2:	0599      	lsls	r1, r3, #22
 802a3c4:	d402      	bmi.n	802a3cc <_putc_r+0x2c>
 802a3c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a3c8:	f7fb f99a 	bl	8025700 <__retarget_lock_acquire_recursive>
 802a3cc:	68a3      	ldr	r3, [r4, #8]
 802a3ce:	3b01      	subs	r3, #1
 802a3d0:	2b00      	cmp	r3, #0
 802a3d2:	60a3      	str	r3, [r4, #8]
 802a3d4:	da05      	bge.n	802a3e2 <_putc_r+0x42>
 802a3d6:	69a2      	ldr	r2, [r4, #24]
 802a3d8:	4293      	cmp	r3, r2
 802a3da:	db1c      	blt.n	802a416 <_putc_r+0x76>
 802a3dc:	b2eb      	uxtb	r3, r5
 802a3de:	2b0a      	cmp	r3, #10
 802a3e0:	d019      	beq.n	802a416 <_putc_r+0x76>
 802a3e2:	6823      	ldr	r3, [r4, #0]
 802a3e4:	1c5a      	adds	r2, r3, #1
 802a3e6:	6022      	str	r2, [r4, #0]
 802a3e8:	701d      	strb	r5, [r3, #0]
 802a3ea:	b2ed      	uxtb	r5, r5
 802a3ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a3ee:	07da      	lsls	r2, r3, #31
 802a3f0:	d405      	bmi.n	802a3fe <_putc_r+0x5e>
 802a3f2:	89a3      	ldrh	r3, [r4, #12]
 802a3f4:	059b      	lsls	r3, r3, #22
 802a3f6:	d402      	bmi.n	802a3fe <_putc_r+0x5e>
 802a3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a3fa:	f7fb f983 	bl	8025704 <__retarget_lock_release_recursive>
 802a3fe:	4628      	mov	r0, r5
 802a400:	bd70      	pop	{r4, r5, r6, pc}
 802a402:	4b09      	ldr	r3, [pc, #36]	; (802a428 <_putc_r+0x88>)
 802a404:	429c      	cmp	r4, r3
 802a406:	d101      	bne.n	802a40c <_putc_r+0x6c>
 802a408:	68b4      	ldr	r4, [r6, #8]
 802a40a:	e7d6      	b.n	802a3ba <_putc_r+0x1a>
 802a40c:	4b07      	ldr	r3, [pc, #28]	; (802a42c <_putc_r+0x8c>)
 802a40e:	429c      	cmp	r4, r3
 802a410:	bf08      	it	eq
 802a412:	68f4      	ldreq	r4, [r6, #12]
 802a414:	e7d1      	b.n	802a3ba <_putc_r+0x1a>
 802a416:	4629      	mov	r1, r5
 802a418:	4622      	mov	r2, r4
 802a41a:	4630      	mov	r0, r6
 802a41c:	f7fd fc98 	bl	8027d50 <__swbuf_r>
 802a420:	4605      	mov	r5, r0
 802a422:	e7e3      	b.n	802a3ec <_putc_r+0x4c>
 802a424:	080475ec 	.word	0x080475ec
 802a428:	0804760c 	.word	0x0804760c
 802a42c:	080475cc 	.word	0x080475cc

0802a430 <_read_r>:
 802a430:	b538      	push	{r3, r4, r5, lr}
 802a432:	4d07      	ldr	r5, [pc, #28]	; (802a450 <_read_r+0x20>)
 802a434:	4604      	mov	r4, r0
 802a436:	4608      	mov	r0, r1
 802a438:	4611      	mov	r1, r2
 802a43a:	2200      	movs	r2, #0
 802a43c:	602a      	str	r2, [r5, #0]
 802a43e:	461a      	mov	r2, r3
 802a440:	f7dd ffc2 	bl	80083c8 <_read>
 802a444:	1c43      	adds	r3, r0, #1
 802a446:	d102      	bne.n	802a44e <_read_r+0x1e>
 802a448:	682b      	ldr	r3, [r5, #0]
 802a44a:	b103      	cbz	r3, 802a44e <_read_r+0x1e>
 802a44c:	6023      	str	r3, [r4, #0]
 802a44e:	bd38      	pop	{r3, r4, r5, pc}
 802a450:	2003013c 	.word	0x2003013c

0802a454 <__fpclassifyd>:
 802a454:	ec51 0b10 	vmov	r0, r1, d0
 802a458:	b510      	push	{r4, lr}
 802a45a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802a45e:	460b      	mov	r3, r1
 802a460:	d019      	beq.n	802a496 <__fpclassifyd+0x42>
 802a462:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802a466:	490e      	ldr	r1, [pc, #56]	; (802a4a0 <__fpclassifyd+0x4c>)
 802a468:	428a      	cmp	r2, r1
 802a46a:	d90e      	bls.n	802a48a <__fpclassifyd+0x36>
 802a46c:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802a470:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802a474:	428a      	cmp	r2, r1
 802a476:	d908      	bls.n	802a48a <__fpclassifyd+0x36>
 802a478:	4a0a      	ldr	r2, [pc, #40]	; (802a4a4 <__fpclassifyd+0x50>)
 802a47a:	4213      	tst	r3, r2
 802a47c:	d007      	beq.n	802a48e <__fpclassifyd+0x3a>
 802a47e:	4294      	cmp	r4, r2
 802a480:	d107      	bne.n	802a492 <__fpclassifyd+0x3e>
 802a482:	fab0 f080 	clz	r0, r0
 802a486:	0940      	lsrs	r0, r0, #5
 802a488:	bd10      	pop	{r4, pc}
 802a48a:	2004      	movs	r0, #4
 802a48c:	e7fc      	b.n	802a488 <__fpclassifyd+0x34>
 802a48e:	2003      	movs	r0, #3
 802a490:	e7fa      	b.n	802a488 <__fpclassifyd+0x34>
 802a492:	2000      	movs	r0, #0
 802a494:	e7f8      	b.n	802a488 <__fpclassifyd+0x34>
 802a496:	2800      	cmp	r0, #0
 802a498:	d1ee      	bne.n	802a478 <__fpclassifyd+0x24>
 802a49a:	2002      	movs	r0, #2
 802a49c:	e7f4      	b.n	802a488 <__fpclassifyd+0x34>
 802a49e:	bf00      	nop
 802a4a0:	7fdfffff 	.word	0x7fdfffff
 802a4a4:	7ff00000 	.word	0x7ff00000

0802a4a8 <__sccl>:
 802a4a8:	b570      	push	{r4, r5, r6, lr}
 802a4aa:	780b      	ldrb	r3, [r1, #0]
 802a4ac:	4604      	mov	r4, r0
 802a4ae:	2b5e      	cmp	r3, #94	; 0x5e
 802a4b0:	bf0b      	itete	eq
 802a4b2:	784b      	ldrbeq	r3, [r1, #1]
 802a4b4:	1c48      	addne	r0, r1, #1
 802a4b6:	1c88      	addeq	r0, r1, #2
 802a4b8:	2200      	movne	r2, #0
 802a4ba:	bf08      	it	eq
 802a4bc:	2201      	moveq	r2, #1
 802a4be:	1e61      	subs	r1, r4, #1
 802a4c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802a4c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 802a4c8:	42a9      	cmp	r1, r5
 802a4ca:	d1fb      	bne.n	802a4c4 <__sccl+0x1c>
 802a4cc:	b90b      	cbnz	r3, 802a4d2 <__sccl+0x2a>
 802a4ce:	3801      	subs	r0, #1
 802a4d0:	bd70      	pop	{r4, r5, r6, pc}
 802a4d2:	f082 0201 	eor.w	r2, r2, #1
 802a4d6:	54e2      	strb	r2, [r4, r3]
 802a4d8:	4605      	mov	r5, r0
 802a4da:	4628      	mov	r0, r5
 802a4dc:	f810 1b01 	ldrb.w	r1, [r0], #1
 802a4e0:	292d      	cmp	r1, #45	; 0x2d
 802a4e2:	d006      	beq.n	802a4f2 <__sccl+0x4a>
 802a4e4:	295d      	cmp	r1, #93	; 0x5d
 802a4e6:	d0f3      	beq.n	802a4d0 <__sccl+0x28>
 802a4e8:	b909      	cbnz	r1, 802a4ee <__sccl+0x46>
 802a4ea:	4628      	mov	r0, r5
 802a4ec:	e7f0      	b.n	802a4d0 <__sccl+0x28>
 802a4ee:	460b      	mov	r3, r1
 802a4f0:	e7f1      	b.n	802a4d6 <__sccl+0x2e>
 802a4f2:	786e      	ldrb	r6, [r5, #1]
 802a4f4:	2e5d      	cmp	r6, #93	; 0x5d
 802a4f6:	d0fa      	beq.n	802a4ee <__sccl+0x46>
 802a4f8:	42b3      	cmp	r3, r6
 802a4fa:	dcf8      	bgt.n	802a4ee <__sccl+0x46>
 802a4fc:	3502      	adds	r5, #2
 802a4fe:	4619      	mov	r1, r3
 802a500:	3101      	adds	r1, #1
 802a502:	428e      	cmp	r6, r1
 802a504:	5462      	strb	r2, [r4, r1]
 802a506:	dcfb      	bgt.n	802a500 <__sccl+0x58>
 802a508:	1af1      	subs	r1, r6, r3
 802a50a:	3901      	subs	r1, #1
 802a50c:	1c58      	adds	r0, r3, #1
 802a50e:	42b3      	cmp	r3, r6
 802a510:	bfa8      	it	ge
 802a512:	2100      	movge	r1, #0
 802a514:	1843      	adds	r3, r0, r1
 802a516:	e7e0      	b.n	802a4da <__sccl+0x32>

0802a518 <__submore>:
 802a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a51c:	460c      	mov	r4, r1
 802a51e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802a520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a524:	4299      	cmp	r1, r3
 802a526:	d11d      	bne.n	802a564 <__submore+0x4c>
 802a528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802a52c:	f7fb fc1a 	bl	8025d64 <_malloc_r>
 802a530:	b918      	cbnz	r0, 802a53a <__submore+0x22>
 802a532:	f04f 30ff 	mov.w	r0, #4294967295
 802a536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a53a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a53e:	63a3      	str	r3, [r4, #56]	; 0x38
 802a540:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802a544:	6360      	str	r0, [r4, #52]	; 0x34
 802a546:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802a54a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802a54e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802a552:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802a556:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802a55a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802a55e:	6020      	str	r0, [r4, #0]
 802a560:	2000      	movs	r0, #0
 802a562:	e7e8      	b.n	802a536 <__submore+0x1e>
 802a564:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802a566:	0077      	lsls	r7, r6, #1
 802a568:	463a      	mov	r2, r7
 802a56a:	f000 f857 	bl	802a61c <_realloc_r>
 802a56e:	4605      	mov	r5, r0
 802a570:	2800      	cmp	r0, #0
 802a572:	d0de      	beq.n	802a532 <__submore+0x1a>
 802a574:	eb00 0806 	add.w	r8, r0, r6
 802a578:	4601      	mov	r1, r0
 802a57a:	4632      	mov	r2, r6
 802a57c:	4640      	mov	r0, r8
 802a57e:	f7fb f8e3 	bl	8025748 <memcpy>
 802a582:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802a586:	f8c4 8000 	str.w	r8, [r4]
 802a58a:	e7e9      	b.n	802a560 <__submore+0x48>

0802a58c <abort>:
 802a58c:	b508      	push	{r3, lr}
 802a58e:	2006      	movs	r0, #6
 802a590:	f000 f89c 	bl	802a6cc <raise>
 802a594:	2001      	movs	r0, #1
 802a596:	f7dd ff11 	bl	80083bc <_exit>
 802a59a:	Address 0x000000000802a59a is out of bounds.


0802a59c <__env_lock>:
 802a59c:	4801      	ldr	r0, [pc, #4]	; (802a5a4 <__env_lock+0x8>)
 802a59e:	f7fb b8af 	b.w	8025700 <__retarget_lock_acquire_recursive>
 802a5a2:	bf00      	nop
 802a5a4:	2003012c 	.word	0x2003012c

0802a5a8 <__env_unlock>:
 802a5a8:	4801      	ldr	r0, [pc, #4]	; (802a5b0 <__env_unlock+0x8>)
 802a5aa:	f7fb b8ab 	b.w	8025704 <__retarget_lock_release_recursive>
 802a5ae:	bf00      	nop
 802a5b0:	2003012c 	.word	0x2003012c

0802a5b4 <_fstat_r>:
 802a5b4:	b538      	push	{r3, r4, r5, lr}
 802a5b6:	4d07      	ldr	r5, [pc, #28]	; (802a5d4 <_fstat_r+0x20>)
 802a5b8:	2300      	movs	r3, #0
 802a5ba:	4604      	mov	r4, r0
 802a5bc:	4608      	mov	r0, r1
 802a5be:	4611      	mov	r1, r2
 802a5c0:	602b      	str	r3, [r5, #0]
 802a5c2:	f7dd ff13 	bl	80083ec <_fstat>
 802a5c6:	1c43      	adds	r3, r0, #1
 802a5c8:	d102      	bne.n	802a5d0 <_fstat_r+0x1c>
 802a5ca:	682b      	ldr	r3, [r5, #0]
 802a5cc:	b103      	cbz	r3, 802a5d0 <_fstat_r+0x1c>
 802a5ce:	6023      	str	r3, [r4, #0]
 802a5d0:	bd38      	pop	{r3, r4, r5, pc}
 802a5d2:	bf00      	nop
 802a5d4:	2003013c 	.word	0x2003013c

0802a5d8 <_isatty_r>:
 802a5d8:	b538      	push	{r3, r4, r5, lr}
 802a5da:	4d06      	ldr	r5, [pc, #24]	; (802a5f4 <_isatty_r+0x1c>)
 802a5dc:	2300      	movs	r3, #0
 802a5de:	4604      	mov	r4, r0
 802a5e0:	4608      	mov	r0, r1
 802a5e2:	602b      	str	r3, [r5, #0]
 802a5e4:	f7dd ff08 	bl	80083f8 <_isatty>
 802a5e8:	1c43      	adds	r3, r0, #1
 802a5ea:	d102      	bne.n	802a5f2 <_isatty_r+0x1a>
 802a5ec:	682b      	ldr	r3, [r5, #0]
 802a5ee:	b103      	cbz	r3, 802a5f2 <_isatty_r+0x1a>
 802a5f0:	6023      	str	r3, [r4, #0]
 802a5f2:	bd38      	pop	{r3, r4, r5, pc}
 802a5f4:	2003013c 	.word	0x2003013c

0802a5f8 <__ascii_mbtowc>:
 802a5f8:	b082      	sub	sp, #8
 802a5fa:	b901      	cbnz	r1, 802a5fe <__ascii_mbtowc+0x6>
 802a5fc:	a901      	add	r1, sp, #4
 802a5fe:	b142      	cbz	r2, 802a612 <__ascii_mbtowc+0x1a>
 802a600:	b14b      	cbz	r3, 802a616 <__ascii_mbtowc+0x1e>
 802a602:	7813      	ldrb	r3, [r2, #0]
 802a604:	600b      	str	r3, [r1, #0]
 802a606:	7812      	ldrb	r2, [r2, #0]
 802a608:	1e10      	subs	r0, r2, #0
 802a60a:	bf18      	it	ne
 802a60c:	2001      	movne	r0, #1
 802a60e:	b002      	add	sp, #8
 802a610:	4770      	bx	lr
 802a612:	4610      	mov	r0, r2
 802a614:	e7fb      	b.n	802a60e <__ascii_mbtowc+0x16>
 802a616:	f06f 0001 	mvn.w	r0, #1
 802a61a:	e7f8      	b.n	802a60e <__ascii_mbtowc+0x16>

0802a61c <_realloc_r>:
 802a61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a620:	4680      	mov	r8, r0
 802a622:	4614      	mov	r4, r2
 802a624:	460e      	mov	r6, r1
 802a626:	b921      	cbnz	r1, 802a632 <_realloc_r+0x16>
 802a628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a62c:	4611      	mov	r1, r2
 802a62e:	f7fb bb99 	b.w	8025d64 <_malloc_r>
 802a632:	b92a      	cbnz	r2, 802a640 <_realloc_r+0x24>
 802a634:	f7fb fb2a 	bl	8025c8c <_free_r>
 802a638:	4625      	mov	r5, r4
 802a63a:	4628      	mov	r0, r5
 802a63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a640:	f000 f86d 	bl	802a71e <_malloc_usable_size_r>
 802a644:	4284      	cmp	r4, r0
 802a646:	4607      	mov	r7, r0
 802a648:	d802      	bhi.n	802a650 <_realloc_r+0x34>
 802a64a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802a64e:	d812      	bhi.n	802a676 <_realloc_r+0x5a>
 802a650:	4621      	mov	r1, r4
 802a652:	4640      	mov	r0, r8
 802a654:	f7fb fb86 	bl	8025d64 <_malloc_r>
 802a658:	4605      	mov	r5, r0
 802a65a:	2800      	cmp	r0, #0
 802a65c:	d0ed      	beq.n	802a63a <_realloc_r+0x1e>
 802a65e:	42bc      	cmp	r4, r7
 802a660:	4622      	mov	r2, r4
 802a662:	4631      	mov	r1, r6
 802a664:	bf28      	it	cs
 802a666:	463a      	movcs	r2, r7
 802a668:	f7fb f86e 	bl	8025748 <memcpy>
 802a66c:	4631      	mov	r1, r6
 802a66e:	4640      	mov	r0, r8
 802a670:	f7fb fb0c 	bl	8025c8c <_free_r>
 802a674:	e7e1      	b.n	802a63a <_realloc_r+0x1e>
 802a676:	4635      	mov	r5, r6
 802a678:	e7df      	b.n	802a63a <_realloc_r+0x1e>

0802a67a <_raise_r>:
 802a67a:	291f      	cmp	r1, #31
 802a67c:	b538      	push	{r3, r4, r5, lr}
 802a67e:	4604      	mov	r4, r0
 802a680:	460d      	mov	r5, r1
 802a682:	d904      	bls.n	802a68e <_raise_r+0x14>
 802a684:	2316      	movs	r3, #22
 802a686:	6003      	str	r3, [r0, #0]
 802a688:	f04f 30ff 	mov.w	r0, #4294967295
 802a68c:	bd38      	pop	{r3, r4, r5, pc}
 802a68e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a690:	b112      	cbz	r2, 802a698 <_raise_r+0x1e>
 802a692:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a696:	b94b      	cbnz	r3, 802a6ac <_raise_r+0x32>
 802a698:	4620      	mov	r0, r4
 802a69a:	f000 f831 	bl	802a700 <_getpid_r>
 802a69e:	462a      	mov	r2, r5
 802a6a0:	4601      	mov	r1, r0
 802a6a2:	4620      	mov	r0, r4
 802a6a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a6a8:	f000 b818 	b.w	802a6dc <_kill_r>
 802a6ac:	2b01      	cmp	r3, #1
 802a6ae:	d00a      	beq.n	802a6c6 <_raise_r+0x4c>
 802a6b0:	1c59      	adds	r1, r3, #1
 802a6b2:	d103      	bne.n	802a6bc <_raise_r+0x42>
 802a6b4:	2316      	movs	r3, #22
 802a6b6:	6003      	str	r3, [r0, #0]
 802a6b8:	2001      	movs	r0, #1
 802a6ba:	e7e7      	b.n	802a68c <_raise_r+0x12>
 802a6bc:	2400      	movs	r4, #0
 802a6be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a6c2:	4628      	mov	r0, r5
 802a6c4:	4798      	blx	r3
 802a6c6:	2000      	movs	r0, #0
 802a6c8:	e7e0      	b.n	802a68c <_raise_r+0x12>
 802a6ca:	Address 0x000000000802a6ca is out of bounds.


0802a6cc <raise>:
 802a6cc:	4b02      	ldr	r3, [pc, #8]	; (802a6d8 <raise+0xc>)
 802a6ce:	4601      	mov	r1, r0
 802a6d0:	6818      	ldr	r0, [r3, #0]
 802a6d2:	f7ff bfd2 	b.w	802a67a <_raise_r>
 802a6d6:	bf00      	nop
 802a6d8:	200004c4 	.word	0x200004c4

0802a6dc <_kill_r>:
 802a6dc:	b538      	push	{r3, r4, r5, lr}
 802a6de:	4d07      	ldr	r5, [pc, #28]	; (802a6fc <_kill_r+0x20>)
 802a6e0:	2300      	movs	r3, #0
 802a6e2:	4604      	mov	r4, r0
 802a6e4:	4608      	mov	r0, r1
 802a6e6:	4611      	mov	r1, r2
 802a6e8:	602b      	str	r3, [r5, #0]
 802a6ea:	f7dd fe5f 	bl	80083ac <_kill>
 802a6ee:	1c43      	adds	r3, r0, #1
 802a6f0:	d102      	bne.n	802a6f8 <_kill_r+0x1c>
 802a6f2:	682b      	ldr	r3, [r5, #0]
 802a6f4:	b103      	cbz	r3, 802a6f8 <_kill_r+0x1c>
 802a6f6:	6023      	str	r3, [r4, #0]
 802a6f8:	bd38      	pop	{r3, r4, r5, pc}
 802a6fa:	bf00      	nop
 802a6fc:	2003013c 	.word	0x2003013c

0802a700 <_getpid_r>:
 802a700:	f7dd be52 	b.w	80083a8 <_getpid>

0802a704 <__ascii_wctomb>:
 802a704:	b149      	cbz	r1, 802a71a <__ascii_wctomb+0x16>
 802a706:	2aff      	cmp	r2, #255	; 0xff
 802a708:	bf85      	ittet	hi
 802a70a:	238a      	movhi	r3, #138	; 0x8a
 802a70c:	6003      	strhi	r3, [r0, #0]
 802a70e:	700a      	strbls	r2, [r1, #0]
 802a710:	f04f 30ff 	movhi.w	r0, #4294967295
 802a714:	bf98      	it	ls
 802a716:	2001      	movls	r0, #1
 802a718:	4770      	bx	lr
 802a71a:	4608      	mov	r0, r1
 802a71c:	4770      	bx	lr

0802a71e <_malloc_usable_size_r>:
 802a71e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a722:	1f18      	subs	r0, r3, #4
 802a724:	2b00      	cmp	r3, #0
 802a726:	bfbc      	itt	lt
 802a728:	580b      	ldrlt	r3, [r1, r0]
 802a72a:	18c0      	addlt	r0, r0, r3
 802a72c:	4770      	bx	lr
 802a72e:	Address 0x000000000802a72e is out of bounds.


0802a730 <_init>:
 802a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a732:	bf00      	nop
 802a734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a736:	bc08      	pop	{r3}
 802a738:	469e      	mov	lr, r3
 802a73a:	4770      	bx	lr

0802a73c <_fini>:
 802a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a73e:	bf00      	nop
 802a740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a742:	bc08      	pop	{r3}
 802a744:	469e      	mov	lr, r3
 802a746:	4770      	bx	lr


my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021478  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ab14  08021678  08021678  00031678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803c18c  0803c18c  000506ec  2**0
                  CONTENTS
  4 .ARM          00000008  0803c18c  0803c18c  0004c18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803c194  0803c194  000506ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803c194  0803c194  0004c194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803c198  0803c198  0004c198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006ec  20000000  0803c19c  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003669c  200006f0  0803c888  000506f0  2**3
                  ALLOC
 10 ._user_heap_stack 00028004  20036d8c  0803c888  00056d8c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000506ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000958c2  00000000  00000000  0005071a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000114c1  00000000  00000000  000e5fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00034e62  00000000  00000000  000f749d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000031d8  00000000  00000000  0012c300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00006128  00000000  00000000  0012f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00045936  00000000  00000000  00135600  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000541a9  00000000  00000000  0017af36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00130131  00000000  00000000  001cf0df  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  002ff210  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bbe4  00000000  00000000  002ff28c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006f0 	.word	0x200006f0
 800021c:	00000000 	.word	0x00000000
 8000220:	08021660 	.word	0x08021660

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006f4 	.word	0x200006f4
 800023c:	08021660 	.word	0x08021660

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bd 	b.w	80006ac <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b972 	b.w	80006ac <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	4688      	mov	r8, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14b      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4615      	mov	r5, r2
 80003f2:	d967      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0720 	rsb	r7, r2, #32
 80003fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000402:	fa20 f707 	lsr.w	r7, r0, r7
 8000406:	4095      	lsls	r5, r2
 8000408:	ea47 0803 	orr.w	r8, r7, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbb8 f7fe 	udiv	r7, r8, lr
 8000418:	fa1f fc85 	uxth.w	ip, r5
 800041c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	fb07 f10c 	mul.w	r1, r7, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000432:	f080 811b 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8118 	bls.w	800066c <__udivmoddi4+0x28c>
 800043c:	3f02      	subs	r7, #2
 800043e:	442b      	add	r3, r5
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	45a4      	cmp	ip, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8107 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000462:	45a4      	cmp	ip, r4
 8000464:	f240 8104 	bls.w	8000670 <__udivmoddi4+0x290>
 8000468:	3802      	subs	r0, #2
 800046a:	442c      	add	r4, r5
 800046c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000470:	eba4 040c 	sub.w	r4, r4, ip
 8000474:	2700      	movs	r7, #0
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0xbe>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80eb 	beq.w	8000666 <__udivmoddi4+0x286>
 8000490:	2700      	movs	r7, #0
 8000492:	e9c6 0100 	strd	r0, r1, [r6]
 8000496:	4638      	mov	r0, r7
 8000498:	4639      	mov	r1, r7
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f783 	clz	r7, r3
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d147      	bne.n	8000536 <__udivmoddi4+0x156>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0xd0>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80fa 	bhi.w	80006a4 <__udivmoddi4+0x2c4>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0303 	sbc.w	r3, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	d0e0      	beq.n	8000480 <__udivmoddi4+0xa0>
 80004be:	e9c6 4800 	strd	r4, r8, [r6]
 80004c2:	e7dd      	b.n	8000480 <__udivmoddi4+0xa0>
 80004c4:	b902      	cbnz	r2, 80004c8 <__udivmoddi4+0xe8>
 80004c6:	deff      	udf	#255	; 0xff
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 808f 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d2:	1b49      	subs	r1, r1, r5
 80004d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d8:	fa1f f885 	uxth.w	r8, r5
 80004dc:	2701      	movs	r7, #1
 80004de:	fbb1 fcfe 	udiv	ip, r1, lr
 80004e2:	0c23      	lsrs	r3, r4, #16
 80004e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb08 f10c 	mul.w	r1, r8, ip
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	f200 80cd 	bhi.w	800069c <__udivmoddi4+0x2bc>
 8000502:	4684      	mov	ip, r0
 8000504:	1a59      	subs	r1, r3, r1
 8000506:	b2a3      	uxth	r3, r4
 8000508:	fbb1 f0fe 	udiv	r0, r1, lr
 800050c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000510:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000514:	fb08 f800 	mul.w	r8, r8, r0
 8000518:	45a0      	cmp	r8, r4
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x14c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x14a>
 8000524:	45a0      	cmp	r8, r4
 8000526:	f200 80b6 	bhi.w	8000696 <__udivmoddi4+0x2b6>
 800052a:	4618      	mov	r0, r3
 800052c:	eba4 0408 	sub.w	r4, r4, r8
 8000530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000534:	e79f      	b.n	8000476 <__udivmoddi4+0x96>
 8000536:	f1c7 0c20 	rsb	ip, r7, #32
 800053a:	40bb      	lsls	r3, r7
 800053c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000540:	ea4e 0e03 	orr.w	lr, lr, r3
 8000544:	fa01 f407 	lsl.w	r4, r1, r7
 8000548:	fa20 f50c 	lsr.w	r5, r0, ip
 800054c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000550:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000554:	4325      	orrs	r5, r4
 8000556:	fbb3 f9f8 	udiv	r9, r3, r8
 800055a:	0c2c      	lsrs	r4, r5, #16
 800055c:	fb08 3319 	mls	r3, r8, r9, r3
 8000560:	fa1f fa8e 	uxth.w	sl, lr
 8000564:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000568:	fb09 f40a 	mul.w	r4, r9, sl
 800056c:	429c      	cmp	r4, r3
 800056e:	fa02 f207 	lsl.w	r2, r2, r7
 8000572:	fa00 f107 	lsl.w	r1, r0, r7
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1e 0303 	adds.w	r3, lr, r3
 800057c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000580:	f080 8087 	bcs.w	8000692 <__udivmoddi4+0x2b2>
 8000584:	429c      	cmp	r4, r3
 8000586:	f240 8084 	bls.w	8000692 <__udivmoddi4+0x2b2>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4473      	add	r3, lr
 8000590:	1b1b      	subs	r3, r3, r4
 8000592:	b2ad      	uxth	r5, r5
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005a4:	45a2      	cmp	sl, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1e 0404 	adds.w	r4, lr, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	d26b      	bcs.n	800068a <__udivmoddi4+0x2aa>
 80005b2:	45a2      	cmp	sl, r4
 80005b4:	d969      	bls.n	800068a <__udivmoddi4+0x2aa>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4474      	add	r4, lr
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	fba0 8902 	umull	r8, r9, r0, r2
 80005c2:	eba4 040a 	sub.w	r4, r4, sl
 80005c6:	454c      	cmp	r4, r9
 80005c8:	46c2      	mov	sl, r8
 80005ca:	464b      	mov	r3, r9
 80005cc:	d354      	bcc.n	8000678 <__udivmoddi4+0x298>
 80005ce:	d051      	beq.n	8000674 <__udivmoddi4+0x294>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2c8>
 80005d4:	ebb1 050a 	subs.w	r5, r1, sl
 80005d8:	eb64 0403 	sbc.w	r4, r4, r3
 80005dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005e0:	40fd      	lsrs	r5, r7
 80005e2:	40fc      	lsrs	r4, r7
 80005e4:	ea4c 0505 	orr.w	r5, ip, r5
 80005e8:	e9c6 5400 	strd	r5, r4, [r6]
 80005ec:	2700      	movs	r7, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa0>
 80005f0:	f1c2 0320 	rsb	r3, r2, #32
 80005f4:	fa20 f703 	lsr.w	r7, r0, r3
 80005f8:	4095      	lsls	r5, r2
 80005fa:	fa01 f002 	lsl.w	r0, r1, r2
 80005fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000602:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000606:	4338      	orrs	r0, r7
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	fbb3 f7fe 	udiv	r7, r3, lr
 800060e:	fa1f f885 	uxth.w	r8, r5
 8000612:	fb0e 3317 	mls	r3, lr, r7, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb07 f308 	mul.w	r3, r7, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x256>
 8000626:	1869      	adds	r1, r5, r1
 8000628:	f107 3cff 	add.w	ip, r7, #4294967295
 800062c:	d22f      	bcs.n	800068e <__udivmoddi4+0x2ae>
 800062e:	428b      	cmp	r3, r1
 8000630:	d92d      	bls.n	800068e <__udivmoddi4+0x2ae>
 8000632:	3f02      	subs	r7, #2
 8000634:	4429      	add	r1, r5
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	b281      	uxth	r1, r0
 800063a:	fbb3 f0fe 	udiv	r0, r3, lr
 800063e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000642:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000646:	fb00 f308 	mul.w	r3, r0, r8
 800064a:	428b      	cmp	r3, r1
 800064c:	d907      	bls.n	800065e <__udivmoddi4+0x27e>
 800064e:	1869      	adds	r1, r5, r1
 8000650:	f100 3cff 	add.w	ip, r0, #4294967295
 8000654:	d217      	bcs.n	8000686 <__udivmoddi4+0x2a6>
 8000656:	428b      	cmp	r3, r1
 8000658:	d915      	bls.n	8000686 <__udivmoddi4+0x2a6>
 800065a:	3802      	subs	r0, #2
 800065c:	4429      	add	r1, r5
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000664:	e73b      	b.n	80004de <__udivmoddi4+0xfe>
 8000666:	4637      	mov	r7, r6
 8000668:	4630      	mov	r0, r6
 800066a:	e709      	b.n	8000480 <__udivmoddi4+0xa0>
 800066c:	4607      	mov	r7, r0
 800066e:	e6e7      	b.n	8000440 <__udivmoddi4+0x60>
 8000670:	4618      	mov	r0, r3
 8000672:	e6fb      	b.n	800046c <__udivmoddi4+0x8c>
 8000674:	4541      	cmp	r1, r8
 8000676:	d2ab      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 8000678:	ebb8 0a02 	subs.w	sl, r8, r2
 800067c:	eb69 020e 	sbc.w	r2, r9, lr
 8000680:	3801      	subs	r0, #1
 8000682:	4613      	mov	r3, r2
 8000684:	e7a4      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000686:	4660      	mov	r0, ip
 8000688:	e7e9      	b.n	800065e <__udivmoddi4+0x27e>
 800068a:	4618      	mov	r0, r3
 800068c:	e795      	b.n	80005ba <__udivmoddi4+0x1da>
 800068e:	4667      	mov	r7, ip
 8000690:	e7d1      	b.n	8000636 <__udivmoddi4+0x256>
 8000692:	4681      	mov	r9, r0
 8000694:	e77c      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000696:	3802      	subs	r0, #2
 8000698:	442c      	add	r4, r5
 800069a:	e747      	b.n	800052c <__udivmoddi4+0x14c>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	442b      	add	r3, r5
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x124>
 80006a4:	4638      	mov	r0, r7
 80006a6:	e708      	b.n	80004ba <__udivmoddi4+0xda>
 80006a8:	4637      	mov	r7, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa0>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <ADC_MultiModeDMAError>:
 * @brief  DMA error callback
 * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
 *                the configuration information for the specified DMA module.
 * @retval None
 */
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 80006b0:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80006b2:	2340      	movs	r3, #64	; 0x40
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 80006b4:	6b84      	ldr	r4, [r0, #56]	; 0x38
	/* Set ADC error code to DMA error */
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;

	printf("Multi-mode DMA Error\n");
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <ADC_MultiModeDMAError+0x20>)
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80006b8:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80006ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 80006c2:	f01d ff19 	bl	801e4f8 <puts>
	HAL_ADC_ErrorCallback(hadc);
 80006c6:	4620      	mov	r0, r4
}
 80006c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 80006cc:	f004 bbaa 	b.w	8004e24 <HAL_ADC_ErrorCallback>
 80006d0:	08021900 	.word	0x08021900

080006d4 <HAL_ADCEx_MultiModeStart_DBDMA>:
 * @param  pData:   Pointer to buffer in which transferred from ADC peripheral to memory will be stored.
 * @param  Length:  The length of data to be transferred from ADC peripheral to memory.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DBDMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t *pData2,
		uint32_t Length) {
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	4604      	mov	r4, r0
 80006d8:	4616      	mov	r6, r2
 80006da:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 80006dc:	2000      	movs	r0, #0

	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80006de:	69a2      	ldr	r2, [r4, #24]
		uint32_t Length) {
 80006e0:	460d      	mov	r5, r1
 80006e2:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 80006e4:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80006e6:	2a01      	cmp	r2, #1
 80006e8:	d903      	bls.n	80006f2 <HAL_ADCEx_MultiModeStart_DBDMA+0x1e>
 80006ea:	2194      	movs	r1, #148	; 0x94
 80006ec:	4844      	ldr	r0, [pc, #272]	; (8000800 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 80006ee:	f001 ffaf 	bl	8002650 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80006f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006f4:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80006f8:	d17c      	bne.n	80007f4 <HAL_ADCEx_MultiModeStart_DBDMA+0x120>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80006fa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d903      	bls.n	800070a <HAL_ADCEx_MultiModeStart_DBDMA+0x36>
 8000702:	2196      	movs	r1, #150	; 0x96
 8000704:	483e      	ldr	r0, [pc, #248]	; (8000800 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 8000706:	f001 ffa3 	bl	8002650 <assert_failed>

	/* Process locked */
	__HAL_LOCK(hadc);
 800070a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800070e:	2b01      	cmp	r3, #1
 8000710:	d06d      	beq.n	80007ee <HAL_ADCEx_MultiModeStart_DBDMA+0x11a>

	/* Check if ADC peripheral is disabled in order to enable it and wait during
	 Tstab time the ADC's stabilization */
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000712:	6822      	ldr	r2, [r4, #0]
	__HAL_LOCK(hadc);
 8000714:	2101      	movs	r1, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000716:	6893      	ldr	r3, [r2, #8]
	__HAL_LOCK(hadc);
 8000718:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800071c:	07d8      	lsls	r0, r3, #31
 800071e:	d414      	bmi.n	800074a <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
		/* Enable the Peripheral */
		__HAL_ADC_ENABLE(hadc);

		/* Delay for temperature sensor stabilization time */
		/* Compute number of CPU cycles to wait for */
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000720:	4b38      	ldr	r3, [pc, #224]	; (8000804 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000722:	4839      	ldr	r0, [pc, #228]	; (8000808 <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000724:	681b      	ldr	r3, [r3, #0]
		__HAL_ADC_ENABLE(hadc);
 8000726:	6891      	ldr	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000728:	fba0 0303 	umull	r0, r3, r0, r3
		__HAL_ADC_ENABLE(hadc);
 800072c:	f041 0101 	orr.w	r1, r1, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000730:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000732:	6091      	str	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000734:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000738:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 800073a:	9b03      	ldr	r3, [sp, #12]
 800073c:	b12b      	cbz	r3, 800074a <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
			counter--;
 800073e:	9b03      	ldr	r3, [sp, #12]
 8000740:	3b01      	subs	r3, #1
 8000742:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 8000744:	9b03      	ldr	r3, [sp, #12]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f9      	bne.n	800073e <HAL_ADCEx_MultiModeStart_DBDMA+0x6a>
		}
	}

	/* Start conversion if ADC is effectively enabled */
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 800074a:	6893      	ldr	r3, [r2, #8]
 800074c:	07d9      	lsls	r1, r3, #31
 800074e:	d545      	bpl.n	80007dc <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
		/* Set ADC state                                                          */
		/* - Clear state bitfield related to regular group conversion results     */
		/* - Set state bitfield related to regular group operation                */
		ADC_STATE_CLR_SET(hadc->State,
 8000750:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 8000754:	400b      	ands	r3, r1
 8000756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075a:	6423      	str	r3, [r4, #64]	; 0x40
				HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
				HAL_ADC_STATE_REG_BUSY);

		/* If conversions on group regular are also triggering group injected,    */
		/* update ADC state.                                                      */
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 800075c:	6853      	ldr	r3, [r2, #4]
 800075e:	055b      	lsls	r3, r3, #21
 8000760:	d505      	bpl.n	800076e <HAL_ADCEx_MultiModeStart_DBDMA+0x9a>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000764:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800076c:	6423      	str	r3, [r4, #64]	; 0x40
		}

		/* State machine update: Check if an injected conversion is ongoing */
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 800076e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000770:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8000774:	d039      	beq.n	80007ea <HAL_ADCEx_MultiModeStart_DBDMA+0x116>
			/* Reset ADC error code fields related to conversions on group regular */
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000776:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000778:	f023 0306 	bic.w	r3, r3, #6
 800077c:	6463      	str	r3, [r4, #68]	; 0x44
		/* Unlock before starting ADC conversions: in case of potential           */
		/* interruption, to let the process to ADC IRQ Handler.                   */
		__HAL_UNLOCK(hadc);

		/* Set the DMA transfer complete callback */
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 800077e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 8000780:	2300      	movs	r3, #0
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 8000782:	f8df c098 	ldr.w	ip, [pc, #152]	; 800081c <HAL_ADCEx_MultiModeStart_DBDMA+0x148>
		/* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
		/* start (in case of SW start):                                           */

		/* Clear regular group conversion flag and overrun flag */
		/* (To ensure of no unknown state from potential previous ADC operations) */
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000786:	f06f 0102 	mvn.w	r1, #2
		__HAL_UNLOCK(hadc);
 800078a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 800078e:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 8000790:	e9c0 c30f 	strd	ip, r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 8000796:	f8df c088 	ldr.w	ip, [pc, #136]	; 8000820 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 800079a:	64c3      	str	r3, [r0, #76]	; 0x4c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 800079c:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007a0:	6011      	str	r1, [r2, #0]

		/* Enable ADC overrun interrupt */
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007a2:	6853      	ldr	r3, [r2, #4]

		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 80007a4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007ac:	6053      	str	r3, [r2, #4]
			/* Enable the selected ADC DMA request after last transfer */
			ADC->CCR |= ADC_CCR_DDS;
 80007ae:	4a19      	ldr	r2, [pc, #100]	; (8000814 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
 80007b0:	6853      	ldr	r3, [r2, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 80007b2:	b1b1      	cbz	r1, 80007e2 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 80007b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007b8:	6053      	str	r3, [r2, #4]
			ADC->CCR &= ~ADC_CCR_DDS;
		}

		/* Enable the DMA Stream */
		//HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 80007ba:	4633      	mov	r3, r6
 80007bc:	9700      	str	r7, [sp, #0]
 80007be:	462a      	mov	r2, r5
 80007c0:	4915      	ldr	r1, [pc, #84]	; (8000818 <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007c2:	f005 fb6b 	bl	8005e9c <HAL_DMAEx_MultiBufferStart_IT>
				Length);
		/* if no external trigger present enable software conversion of regular channels */
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	6898      	ldr	r0, [r3, #8]
 80007ca:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80007ce:	d105      	bne.n	80007dc <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
			/* Enable the selected ADC software conversion for regular group */
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007d6:	609a      	str	r2, [r3, #8]
		}
	}

	/* Return function status */
	return HAL_OK;
}
 80007d8:	b005      	add	sp, #20
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return HAL_OK;
 80007dc:	2000      	movs	r0, #0
}
 80007de:	b005      	add	sp, #20
 80007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 80007e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007e6:	6053      	str	r3, [r2, #4]
 80007e8:	e7e7      	b.n	80007ba <HAL_ADCEx_MultiModeStart_DBDMA+0xe6>
			ADC_CLEAR_ERRORCODE(hadc);
 80007ea:	6463      	str	r3, [r4, #68]	; 0x44
 80007ec:	e7c7      	b.n	800077e <HAL_ADCEx_MultiModeStart_DBDMA+0xaa>
	__HAL_LOCK(hadc);
 80007ee:	2002      	movs	r0, #2
}
 80007f0:	b005      	add	sp, #20
 80007f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80007f4:	2195      	movs	r1, #149	; 0x95
 80007f6:	4802      	ldr	r0, [pc, #8]	; (8000800 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 80007f8:	f001 ff2a 	bl	8002650 <assert_failed>
 80007fc:	e77d      	b.n	80006fa <HAL_ADCEx_MultiModeStart_DBDMA+0x26>
 80007fe:	bf00      	nop
 8000800:	08021918 	.word	0x08021918
 8000804:	200002b8 	.word	0x200002b8
 8000808:	431bde83 	.word	0x431bde83
 800080c:	fffff8fe 	.word	0xfffff8fe
 8000810:	080006b1 	.word	0x080006b1
 8000814:	40012300 	.word	0x40012300
 8000818:	40012308 	.word	0x40012308
 800081c:	08000a95 	.word	0x08000a95
 8000820:	08000aa5 	.word	0x08000aa5

08000824 <HAL_ADC_ConvCpltCallback>:
// rolling window size, could be 32, 64, 128 etc
#define WINSHIFT 5
#define WINSIZE (1<<WINSHIFT)

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	// adc conversion done (DMA complete)
{
 8000824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static int16_t winmean = 0;	// sliding window mean
	static int32_t wdacc = 0;	// window difference accumulator
	static int32_t wmeanacc = 0;	// window mean accumulator

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	timestamp = TIM2->CNT;			// real time
 8000828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 800082c:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800082e:	2400      	movs	r4, #0
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11 /*PB11*/);		// debug pin
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000836:	487c      	ldr	r0, [pc, #496]	; (8000a28 <HAL_ADC_ConvCpltCallback+0x204>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000838:	9407      	str	r4, [sp, #28]
	timestamp = TIM2->CNT;			// real time
 800083a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
 800083c:	f007 f854 	bl	80078e8 <HAL_GPIO_WritePin>

	if (dmabufno == 1) {		// second buffer is ready
 8000840:	4b7a      	ldr	r3, [pc, #488]	; (8000a2c <HAL_ADC_ConvCpltCallback+0x208>)
	}

	adcbuf16 = &((uint16_t*) *buf)[8];
	(*buf)[3] = timestamp;		// this may not get set until now
//	(*buf)[0] = UDP seq and packet flags	// set in udpstream.c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000842:	4d7b      	ldr	r5, [pc, #492]	; (8000a30 <HAL_ADC_ConvCpltCallback+0x20c>)
	if (dmabufno == 1) {		// second buffer is ready
 8000844:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000846:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
	if (dmabufno == 1) {		// second buffer is ready
 800084a:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800084c:	4b79      	ldr	r3, [pc, #484]	; (8000a34 <HAL_ADC_ConvCpltCallback+0x210>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800084e:	487a      	ldr	r0, [pc, #488]	; (8000a38 <HAL_ADC_ConvCpltCallback+0x214>)
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000850:	681f      	ldr	r7, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000852:	4b7a      	ldr	r3, [pc, #488]	; (8000a3c <HAL_ADC_ConvCpltCallback+0x218>)
 8000854:	4a7a      	ldr	r2, [pc, #488]	; (8000a40 <HAL_ADC_ConvCpltCallback+0x21c>)
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000856:	bf08      	it	eq
 8000858:	f507 67b8 	addeq.w	r7, r7, #1472	; 0x5c0
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800085c:	781b      	ldrb	r3, [r3, #0]
	(*buf)[3] = timestamp;		// this may not get set until now
 800085e:	60fc      	str	r4, [r7, #12]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 8000860:	462c      	mov	r4, r5
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000862:	9305      	str	r3, [sp, #20]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086a:	7811      	ldrb	r1, [r2, #0]
 800086c:	7802      	ldrb	r2, [r0, #0]
 800086e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8000872:	f002 0103 	and.w	r1, r2, #3
 8000876:	3201      	adds	r2, #1
 8000878:	7002      	strb	r2, [r0, #0]
 800087a:	430b      	orrs	r3, r1

	if (sigsend) {		// oops overrun
 800087c:	4871      	ldr	r0, [pc, #452]	; (8000a44 <HAL_ADC_ConvCpltCallback+0x220>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 800087e:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
	if (sigsend) {		// oops overrun
 8000882:	6805      	ldr	r5, [r0, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 8000884:	e9c7 3101 	strd	r3, r1, [r7, #4]
	if (sigsend) {		// oops overrun
 8000888:	2d00      	cmp	r5, #0
 800088a:	f040 809a 	bne.w	80009c2 <HAL_ADC_ConvCpltCallback+0x19e>

		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
		windiff[j] = meanwindiff;	// store latest window mean of differences

//		trigthresh = (logampmode > 0) ? 37 : 10;	// SPLAT Logamp in operation?  now in idle task
		if ((abs(meanwindiff)) > ((abs(lastmeanwindiff)) + trigthresh)) { // if new mean diff > last mean diff +1
 800088e:	4b6e      	ldr	r3, [pc, #440]	; (8000a48 <HAL_ADC_ConvCpltCallback+0x224>)
 8000890:	370e      	adds	r7, #14
 8000892:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8000a8c <HAL_ADC_ConvCpltCallback+0x268>
 8000896:	f8b3 a000 	ldrh.w	sl, [r3]
 800089a:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8000a90 <HAL_ADC_ConvCpltCallback+0x26c>
			sigsend = 1;	// the real trigger
		}
		// more sensitive pretrigger, used to set the trigger level in LPTask 100ms loop
		if ((abs(meanwindiff)) > ((abs(lastmeanwindiff)) + (trigthresh-6))) { // provide margin of 6 over 'continuous' trigger level
 800089e:	f1aa 0306 	sub.w	r3, sl, #6
 80008a2:	9504      	str	r5, [sp, #16]
 80008a4:	9701      	str	r7, [sp, #4]
 80008a6:	9303      	str	r3, [sp, #12]
 80008a8:	4b68      	ldr	r3, [pc, #416]	; (8000a4c <HAL_ADC_ConvCpltCallback+0x228>)
 80008aa:	f8d3 c000 	ldr.w	ip, [r3]
 80008ae:	4b68      	ldr	r3, [pc, #416]	; (8000a50 <HAL_ADC_ConvCpltCallback+0x22c>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	4b68      	ldr	r3, [pc, #416]	; (8000a54 <HAL_ADC_ConvCpltCallback+0x230>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	4b68      	ldr	r3, [pc, #416]	; (8000a58 <HAL_ADC_ConvCpltCallback+0x234>)
 80008b8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80008bc:	4b67      	ldr	r3, [pc, #412]	; (8000a5c <HAL_ADC_ConvCpltCallback+0x238>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	9302      	str	r3, [sp, #8]
		thissamp = (*adcbuf16)[i];
 80008c2:	9b01      	ldr	r3, [sp, #4]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80008c4:	f005 041f 	and.w	r4, r5, #31
		lastmeanwindiff = meanwindiff;
 80008c8:	b28e      	uxth	r6, r1
		if ((abs(meanwindiff)) > ((abs(lastmeanwindiff)) + (trigthresh-6))) { // provide margin of 6 over 'continuous' trigger level
 80008ca:	9903      	ldr	r1, [sp, #12]
		thissamp = (*adcbuf16)[i];
 80008cc:	f833 bf02 	ldrh.w	fp, [r3, #2]!
 80008d0:	3501      	adds	r5, #1
		if ((abs(meanwindiff)) > ((abs(lastmeanwindiff)) + (trigthresh-6))) { // provide margin of 6 over 'continuous' trigger level
 80008d2:	eb06 0901 	add.w	r9, r6, r1
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80008d6:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80008da:	4458      	add	r0, fp
		thissamp = (*adcbuf16)[i];
 80008dc:	9301      	str	r3, [sp, #4]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80008de:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80008e2:	1a52      	subs	r2, r2, r1
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 80008e4:	44dc      	add	ip, fp
		lastsamp[j] = thissamp;			// save last samples
 80008e6:	f828 b014 	strh.w	fp, [r8, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80008ea:	1ac0      	subs	r0, r0, r3
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80008ec:	f340 134f 	sbfx	r3, r0, #5, #16
 80008f0:	ebab 0303 	sub.w	r3, fp, r3
		if ((abs(meanwindiff)) > ((abs(lastmeanwindiff)) + trigthresh)) { // if new mean diff > last mean diff +1
 80008f4:	eb06 0b0a 	add.w	fp, r6, sl
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bfb8      	it	lt
 80008fc:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80008fe:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000900:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff)) > ((abs(lastmeanwindiff)) + trigthresh)) { // if new mean diff > last mean diff +1
 8000904:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 8000908:	f84e 1024 	str.w	r1, [lr, r4, lsl #2]
		if ((abs(meanwindiff)) > ((abs(lastmeanwindiff)) + trigthresh)) { // if new mean diff > last mean diff +1
 800090c:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000910:	455b      	cmp	r3, fp
 8000912:	dd02      	ble.n	800091a <HAL_ADC_ConvCpltCallback+0xf6>
			sigsend = 1;	// the real trigger
 8000914:	4c4b      	ldr	r4, [pc, #300]	; (8000a44 <HAL_ADC_ConvCpltCallback+0x220>)
 8000916:	2701      	movs	r7, #1
 8000918:	6027      	str	r7, [r4, #0]
		if ((abs(meanwindiff)) > ((abs(lastmeanwindiff)) + (trigthresh-6))) { // provide margin of 6 over 'continuous' trigger level
 800091a:	454b      	cmp	r3, r9
 800091c:	dd04      	ble.n	8000928 <HAL_ADC_ConvCpltCallback+0x104>
			pretrigcnt++;
 800091e:	9b02      	ldr	r3, [sp, #8]
 8000920:	3301      	adds	r3, #1
 8000922:	9302      	str	r3, [sp, #8]
 8000924:	2301      	movs	r3, #1
 8000926:	9304      	str	r3, [sp, #16]
	for (i = 0; i < (ADCBUFSIZE / 2); i++) {	// 2 // scan the buffer content
 8000928:	f5b5 7f36 	cmp.w	r5, #728	; 0x2d8
 800092c:	d1c9      	bne.n	80008c2 <HAL_ADC_ConvCpltCallback+0x9e>
 800092e:	9b04      	ldr	r3, [sp, #16]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d174      	bne.n	8000a1e <HAL_ADC_ConvCpltCallback+0x1fa>
 8000934:	4d46      	ldr	r5, [pc, #280]	; (8000a50 <HAL_ADC_ConvCpltCallback+0x22c>)
 8000936:	4c45      	ldr	r4, [pc, #276]	; (8000a4c <HAL_ADC_ConvCpltCallback+0x228>)
 8000938:	6028      	str	r0, [r5, #0]
		}
#endif
	} // end for i

//sigsend = ((samplecnt & 0x1ff) == 0) ? 1 : 0;			// for testing create continual spaced triggers
	if (sigsend) {
 800093a:	4842      	ldr	r0, [pc, #264]	; (8000a44 <HAL_ADC_ConvCpltCallback+0x220>)
 800093c:	4d45      	ldr	r5, [pc, #276]	; (8000a54 <HAL_ADC_ConvCpltCallback+0x230>)
 800093e:	4b48      	ldr	r3, [pc, #288]	; (8000a60 <HAL_ADC_ConvCpltCallback+0x23c>)
 8000940:	f8c4 c000 	str.w	ip, [r4]
 8000944:	602a      	str	r2, [r5, #0]
 8000946:	4c47      	ldr	r4, [pc, #284]	; (8000a64 <HAL_ADC_ConvCpltCallback+0x240>)
 8000948:	4a43      	ldr	r2, [pc, #268]	; (8000a58 <HAL_ADC_ConvCpltCallback+0x234>)
 800094a:	6800      	ldr	r0, [r0, #0]
 800094c:	801e      	strh	r6, [r3, #0]
 800094e:	8011      	strh	r1, [r2, #0]
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	2800      	cmp	r0, #0
 8000954:	d02e      	beq.n	80009b4 <HAL_ADC_ConvCpltCallback+0x190>
#ifndef SPLAT1
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);	// blue led
#endif
		if (sigprev == 0)		// no trigger last time, so this is a new event
 8000956:	2b00      	cmp	r3, #0
 8000958:	d03b      	beq.n	80009d2 <HAL_ADC_ConvCpltCallback+0x1ae>
			adcbatchid++;		// start a new adc batch number
		sigprev = 1;	// remember this trigger for next packet
		ledhang = 100;		// 100 x 10ms in Idle proc
		statuspkt.trigcount++;	//  no of triggered packets detected
 800095a:	4d35      	ldr	r5, [pc, #212]	; (8000a30 <HAL_ADC_ConvCpltCallback+0x20c>)
		sigprev = 1;	// remember this trigger for next packet
 800095c:	2001      	movs	r0, #1
		ledhang = 100;		// 100 x 10ms in Idle proc
 800095e:	4a42      	ldr	r2, [pc, #264]	; (8000a68 <HAL_ADC_ConvCpltCallback+0x244>)
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000960:	6feb      	ldr	r3, [r5, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 8000962:	6020      	str	r0, [r4, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000964:	4403      	add	r3, r0
		ledhang = 100;		// 100 x 10ms in Idle proc
 8000966:	2064      	movs	r0, #100	; 0x64
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000968:	67eb      	str	r3, [r5, #124]	; 0x7c
		ledhang = 100;		// 100 x 10ms in Idle proc
 800096a:	6010      	str	r0, [r2, #0]
		statuspkt.adctrigoff = TRIG_THRES + (abs(globaladcnoise - statuspkt.adcbase));

		if (statuspkt.adctrigoff > 4095)
			statuspkt.adctrigoff = 4095;
#endif
	samplecnt++;
 800096c:	4a3f      	ldr	r2, [pc, #252]	; (8000a6c <HAL_ADC_ConvCpltCallback+0x248>)
 800096e:	6813      	ldr	r3, [r2, #0]
 8000970:	3301      	adds	r3, #1

	if (samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 8000972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	samplecnt++;
 8000976:	6013      	str	r3, [r2, #0]
	if (samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 8000978:	d030      	beq.n	80009dc <HAL_ADC_ConvCpltCallback+0x1b8>
 800097a:	4b3d      	ldr	r3, [pc, #244]	; (8000a70 <HAL_ADC_ConvCpltCallback+0x24c>)
 800097c:	681b      	ldr	r3, [r3, #0]
		adcbgbaseacc = 0;
		samplecnt = 0;
	}
	globaladcnoise = meanwindiff;
	statuspkt.adcnoise = (globaladcnoise & 0xfff);	// agc
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 800097e:	f3c3 030b 	ubfx	r3, r3, #0, #12
	statuspkt.adcnoise = (globaladcnoise & 0xfff);	// agc
 8000982:	f3c1 000b 	ubfx	r0, r1, #0, #12
 8000986:	4c2a      	ldr	r4, [pc, #168]	; (8000a30 <HAL_ADC_ConvCpltCallback+0x20c>)

	if (xTaskToNotify == NULL) {
 8000988:	4a3a      	ldr	r2, [pc, #232]	; (8000a74 <HAL_ADC_ConvCpltCallback+0x250>)
	statuspkt.adcnoise = (globaladcnoise & 0xfff);	// agc
 800098a:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 800098e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	globaladcnoise = meanwindiff;
 8000992:	4839      	ldr	r0, [pc, #228]	; (8000a78 <HAL_ADC_ConvCpltCallback+0x254>)
	if (xTaskToNotify == NULL) {
 8000994:	6813      	ldr	r3, [r2, #0]
	globaladcnoise = meanwindiff;
 8000996:	6001      	str	r1, [r0, #0]
	if (xTaskToNotify == NULL) {
 8000998:	2b00      	cmp	r3, #0
 800099a:	d03c      	beq.n	8000a16 <HAL_ADC_ConvCpltCallback+0x1f2>
		printf("Notify task null\n");
	} else if (sigsend) {
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <HAL_ADC_ConvCpltCallback+0x220>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	bb4b      	cbnz	r3, 80009f6 <HAL_ADC_ConvCpltCallback+0x1d2>
		 should be performed to ensure the interrupt returns directly to the highest
		 priority task.  The macro used for this purpose is dependent on the port in
		 use and may be called portEND_SWITCHING_ISR(). */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET /*PB11*/);	// debug pin
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a8:	481f      	ldr	r0, [pc, #124]	; (8000a28 <HAL_ADC_ConvCpltCallback+0x204>)
 80009aa:	f006 ff9d 	bl	80078e8 <HAL_GPIO_WritePin>
}
 80009ae:	b009      	add	sp, #36	; 0x24
 80009b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 80009b4:	b113      	cbz	r3, 80009bc <HAL_ADC_ConvCpltCallback+0x198>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <HAL_ADC_ConvCpltCallback+0x258>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
		sigprev = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	6023      	str	r3, [r4, #0]
 80009c0:	e7d4      	b.n	800096c <HAL_ADC_ConvCpltCallback+0x148>
		statuspkt.adcudpover++;		// debug adc overrun udp
 80009c2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80009c4:	2200      	movs	r2, #0
		statuspkt.adcudpover++;		// debug adc overrun udp
 80009c6:	3301      	adds	r3, #1
 80009c8:	67a3      	str	r3, [r4, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80009ca:	6002      	str	r2, [r0, #0]
}
 80009cc:	b009      	add	sp, #36	; 0x24
 80009ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			adcbatchid++;		// start a new adc batch number
 80009d2:	9b05      	ldr	r3, [sp, #20]
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <HAL_ADC_ConvCpltCallback+0x218>)
 80009d6:	3301      	adds	r3, #1
 80009d8:	7013      	strb	r3, [r2, #0]
 80009da:	e7be      	b.n	800095a <HAL_ADC_ConvCpltCallback+0x136>
		globaladcavg = adcbgbaseacc / (ADCBUFSIZE / 2) >> 11;
 80009dc:	4d1b      	ldr	r5, [pc, #108]	; (8000a4c <HAL_ADC_ConvCpltCallback+0x228>)
		adcbgbaseacc = 0;
 80009de:	2000      	movs	r0, #0
		globaladcavg = adcbgbaseacc / (ADCBUFSIZE / 2) >> 11;
 80009e0:	4c27      	ldr	r4, [pc, #156]	; (8000a80 <HAL_ADC_ConvCpltCallback+0x25c>)
 80009e2:	682b      	ldr	r3, [r5, #0]
		samplecnt = 0;
 80009e4:	6010      	str	r0, [r2, #0]
		globaladcavg = adcbgbaseacc / (ADCBUFSIZE / 2) >> 11;
 80009e6:	08db      	lsrs	r3, r3, #3
		adcbgbaseacc = 0;
 80009e8:	6028      	str	r0, [r5, #0]
		globaladcavg = adcbgbaseacc / (ADCBUFSIZE / 2) >> 11;
 80009ea:	fba4 2303 	umull	r2, r3, r4, r3
 80009ee:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <HAL_ADC_ConvCpltCallback+0x24c>)
 80009f0:	0b9b      	lsrs	r3, r3, #14
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	e7c3      	b.n	800097e <HAL_ADC_ConvCpltCallback+0x15a>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 80009f6:	6810      	ldr	r0, [r2, #0]
 80009f8:	a907      	add	r1, sp, #28
 80009fa:	f010 fc99 	bl	8011330 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80009fe:	9b07      	ldr	r3, [sp, #28]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0ce      	beq.n	80009a2 <HAL_ADC_ConvCpltCallback+0x17e>
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <HAL_ADC_ConvCpltCallback+0x260>)
 8000a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	f3bf 8f4f 	dsb	sy
 8000a10:	f3bf 8f6f 	isb	sy
 8000a14:	e7c5      	b.n	80009a2 <HAL_ADC_ConvCpltCallback+0x17e>
		printf("Notify task null\n");
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <HAL_ADC_ConvCpltCallback+0x264>)
 8000a18:	f01d fd6e 	bl	801e4f8 <puts>
 8000a1c:	e7c1      	b.n	80009a2 <HAL_ADC_ConvCpltCallback+0x17e>
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_ADC_ConvCpltCallback+0x238>)
 8000a20:	9c02      	ldr	r4, [sp, #8]
 8000a22:	601c      	str	r4, [r3, #0]
 8000a24:	e786      	b.n	8000934 <HAL_ADC_ConvCpltCallback+0x110>
 8000a26:	bf00      	nop
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	20000718 	.word	0x20000718
 8000a30:	2002183c 	.word	0x2002183c
 8000a34:	200218e4 	.word	0x200218e4
 8000a38:	20000714 	.word	0x20000714
 8000a3c:	2000070c 	.word	0x2000070c
 8000a40:	20000778 	.word	0x20000778
 8000a44:	20000788 	.word	0x20000788
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000710 	.word	0x20000710
 8000a50:	20000810 	.word	0x20000810
 8000a54:	2000078c 	.word	0x2000078c
 8000a58:	20000770 	.word	0x20000770
 8000a5c:	20000774 	.word	0x20000774
 8000a60:	20000728 	.word	0x20000728
 8000a64:	20000784 	.word	0x20000784
 8000a68:	2000076c 	.word	0x2000076c
 8000a6c:	2000077c 	.word	0x2000077c
 8000a70:	2000071c 	.word	0x2000071c
 8000a74:	20000814 	.word	0x20000814
 8000a78:	20000720 	.word	0x20000720
 8000a7c:	20000780 	.word	0x20000780
 8000a80:	16816817 	.word	0x16816817
 8000a84:	e000ed04 	.word	0xe000ed04
 8000a88:	08021930 	.word	0x08021930
 8000a8c:	2000072c 	.word	0x2000072c
 8000a90:	20000790 	.word	0x20000790

08000a94 <ADC_MultiModeDMAConvM0Cplt>:

void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 8000a94:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <ADC_MultiModeDMAConvM0Cplt+0xc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConvCpltCallback(hadc);
 8000a9a:	f7ff bec3 	b.w	8000824 <HAL_ADC_ConvCpltCallback>
 8000a9e:	bf00      	nop
 8000aa0:	20000718 	.word	0x20000718

08000aa4 <ADC_MultiModeDMAConvM1Cplt>:
}

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 1;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <ADC_MultiModeDMAConvM1Cplt+0xc>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConvCpltCallback(hadc);
 8000aaa:	f7ff bebb 	b.w	8000824 <HAL_ADC_ConvCpltCallback>
 8000aae:	bf00      	nop
 8000ab0:	20000718 	.word	0x20000718

08000ab4 <startadc>:
}

void startadc() {
 8000ab4:	b538      	push	{r3, r4, r5, lr}
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 107000000;
	statuspkt.adcpktssent = 0;
 8000ab6:	2200      	movs	r2, #0
	statuspkt.clktrim = 107000000;
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <startadc+0xb4>)
 8000aba:	492c      	ldr	r1, [pc, #176]	; (8000b6c <startadc+0xb8>)

	printf("Starting ADC DMA\n");
 8000abc:	482c      	ldr	r0, [pc, #176]	; (8000b70 <startadc+0xbc>)
	statuspkt.clktrim = 107000000;
 8000abe:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(1000);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ac0:	4c2c      	ldr	r4, [pc, #176]	; (8000b74 <startadc+0xc0>)
	statuspkt.adcpktssent = 0;
 8000ac2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ac6:	f01d fd17 	bl	801e4f8 <puts>
	osDelay(1000);
 8000aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ace:	f00f f813 	bl	800faf8 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ad2:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000ad6:	f011 f885 	bl	8011be4 <pvPortMalloc>
 8000ada:	6020      	str	r0, [r4, #0]
	if (pktbuf == NULL) {
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d03f      	beq.n	8000b60 <startadc+0xac>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000ae0:	0783      	lsls	r3, r0, #30
 8000ae2:	d003      	beq.n	8000aec <startadc+0x38>
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000ae4:	4824      	ldr	r0, [pc, #144]	; (8000b78 <startadc+0xc4>)
 8000ae6:	f01d fd07 	bl	801e4f8 <puts>
 8000aea:	6820      	ldr	r0, [r4, #0]
 8000aec:	1f03      	subs	r3, r0, #4
 8000aee:	f200 51bc 	addw	r1, r0, #1468	; 0x5bc

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000af2:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000af6:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d1fb      	bne.n	8000af6 <startadc+0x42>
 8000afe:	f600 317c 	addw	r1, r0, #2940	; 0xb7c
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b02:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000b06:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
 8000b0a:	4299      	cmp	r1, r3
 8000b0c:	d1fb      	bne.n	8000b06 <startadc+0x52>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b0e:	f100 0210 	add.w	r2, r0, #16
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b12:	f500 64ba 	add.w	r4, r0, #1488	; 0x5d0
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b16:	4819      	ldr	r0, [pc, #100]	; (8000b7c <startadc+0xc8>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b18:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	4d18      	ldr	r5, [pc, #96]	; (8000b80 <startadc+0xcc>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b1e:	4611      	mov	r1, r2
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b20:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b22:	4622      	mov	r2, r4
 8000b24:	4817      	ldr	r0, [pc, #92]	; (8000b84 <startadc+0xd0>)
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b26:	602c      	str	r4, [r5, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	f7ff fdd4 	bl	80006d4 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <startadc+0xd4>)
 8000b2e:	7018      	strb	r0, [r3, #0]

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b30:	4816      	ldr	r0, [pc, #88]	; (8000b8c <startadc+0xd8>)
 8000b32:	f004 f8db 	bl	8004cec <HAL_ADC_Start>
 8000b36:	b110      	cbz	r0, 8000b3e <startadc+0x8a>
		printf("ADC3 failed start\r\n");
 8000b38:	4815      	ldr	r0, [pc, #84]	; (8000b90 <startadc+0xdc>)
 8000b3a:	f01d fcdd 	bl	801e4f8 <puts>
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b3e:	4815      	ldr	r0, [pc, #84]	; (8000b94 <startadc+0xe0>)
 8000b40:	f004 f8d4 	bl	8004cec <HAL_ADC_Start>
 8000b44:	b110      	cbz	r0, 8000b4c <startadc+0x98>
		printf("ADC2 failed start\r\n");
 8000b46:	4814      	ldr	r0, [pc, #80]	; (8000b98 <startadc+0xe4>)
 8000b48:	f01d fcd6 	bl	801e4f8 <puts>
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <startadc+0xd0>)
 8000b4e:	f004 f8cd 	bl	8004cec <HAL_ADC_Start>
 8000b52:	b900      	cbnz	r0, 8000b56 <startadc+0xa2>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b54:	bd38      	pop	{r3, r4, r5, pc}
		printf("ADC1 failed start\r\n");
 8000b56:	4811      	ldr	r0, [pc, #68]	; (8000b9c <startadc+0xe8>)
}
 8000b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b5c:	f01d bccc 	b.w	801e4f8 <puts>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b60:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <startadc+0xec>)
 8000b62:	f01d fcc9 	bl	801e4f8 <puts>
 8000b66:	e7fe      	b.n	8000b66 <startadc+0xb2>
 8000b68:	2002183c 	.word	0x2002183c
 8000b6c:	0660b0c0 	.word	0x0660b0c0
 8000b70:	08021944 	.word	0x08021944
 8000b74:	200218e4 	.word	0x200218e4
 8000b78:	08021980 	.word	0x08021980
 8000b7c:	200218e8 	.word	0x200218e8
 8000b80:	200218dc 	.word	0x200218dc
 8000b84:	20021e4c 	.word	0x20021e4c
 8000b88:	200218ec 	.word	0x200218ec
 8000b8c:	20021e94 	.word	0x20021e94
 8000b90:	080219b8 	.word	0x080219b8
 8000b94:	20021b48 	.word	0x20021b48
 8000b98:	080219cc 	.word	0x080219cc
 8000b9c:	080219e0 	.word	0x080219e0
 8000ba0:	08021958 	.word	0x08021958

08000ba4 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <vApplicationMallocFailedHook>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	7483      	strb	r3, [r0, #18]

	return (ERR_OK);
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	4770      	bx	lr

08000bb8 <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000bb8:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000bc0:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460e      	mov	r6, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000bc8:	4617      	mov	r7, r2
 8000bca:	b102      	cbz	r2, 8000bce <hc_recv+0x16>
 8000bcc:	bb9b      	cbnz	r3, 8000c36 <hc_recv+0x7e>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000bce:	bb47      	cbnz	r7, 8000c22 <hc_recv+0x6a>
 8000bd0:	b33b      	cbz	r3, 8000c22 <hc_recv+0x6a>
		for (i = 0; i < state->Len; i++) {
 8000bd2:	8a23      	ldrh	r3, [r4, #16]
 8000bd4:	6967      	ldr	r7, [r4, #20]
 8000bd6:	f894 8000 	ldrb.w	r8, [r4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8095 	beq.w	8000d0a <hc_recv+0x152>
 8000be0:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8000be4:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000be6:	2504      	movs	r5, #4
			if (errormsg == GEN_ERROR) {
 8000be8:	2d04      	cmp	r5, #4
 8000bea:	f819 0002 	ldrb.w	r0, [r9, r2]
 8000bee:	f102 0101 	add.w	r1, r2, #1
 8000bf2:	d052      	beq.n	8000c9a <hc_recv+0xe2>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000bf4:	280d      	cmp	r0, #13
 8000bf6:	d018      	beq.n	8000c2a <hc_recv+0x72>
 8000bf8:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	dcf4      	bgt.n	8000be8 <hc_recv+0x30>
	char *page = NULL;
 8000bfe:	f04f 0a00 	mov.w	sl, #0
		if (errormsg == OK) {
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d163      	bne.n	8000cce <hc_recv+0x116>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000c06:	4652      	mov	r2, sl
 8000c08:	4629      	mov	r1, r5
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	47b8      	blx	r7
	if (pcb != NULL) {
 8000c0e:	b116      	cbz	r6, 8000c16 <hc_recv+0x5e>
		tcp_close(pcb);
 8000c10:	4630      	mov	r0, r6
 8000c12:	f015 fac5 	bl	80161a0 <tcp_close>
		free(state->RecvData);
 8000c16:	68e0      	ldr	r0, [r4, #12]
 8000c18:	f01c fc44 	bl	801d4a4 <free>
		free(state);
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f01c fc41 	bl	801d4a4 <free>
}
 8000c22:	2000      	movs	r0, #0
 8000c24:	b003      	add	sp, #12
 8000c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c2a:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000c2e:	280a      	cmp	r0, #10
 8000c30:	d045      	beq.n	8000cbe <hc_recv+0x106>
 8000c32:	1c4a      	adds	r2, r1, #1
 8000c34:	e7e1      	b.n	8000bfa <hc_recv+0x42>
		tcp_recved(pcb, p->tot_len);
 8000c36:	4608      	mov	r0, r1
 8000c38:	8911      	ldrh	r1, [r2, #8]
 8000c3a:	f014 fdad 	bl	8015798 <tcp_recved>
 8000c3e:	463d      	mov	r5, r7
 8000c40:	8a21      	ldrh	r1, [r4, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000c42:	2600      	movs	r6, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000c44:	896b      	ldrh	r3, [r5, #10]
 8000c46:	68e0      	ldr	r0, [r4, #12]
 8000c48:	4419      	add	r1, r3
 8000c4a:	3101      	adds	r1, #1
 8000c4c:	f01d fc90 	bl	801e570 <realloc>
 8000c50:	60e0      	str	r0, [r4, #12]
			if (state->RecvData == NULL) {
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d04a      	beq.n	8000cec <hc_recv+0x134>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000c56:	8a23      	ldrh	r3, [r4, #16]
 8000c58:	896a      	ldrh	r2, [r5, #10]
 8000c5a:	6869      	ldr	r1, [r5, #4]
 8000c5c:	4418      	add	r0, r3
 8000c5e:	f01d fda6 	bl	801e7ae <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000c62:	8969      	ldrh	r1, [r5, #10]
 8000c64:	68e3      	ldr	r3, [r4, #12]
 8000c66:	8a22      	ldrh	r2, [r4, #16]
 8000c68:	440b      	add	r3, r1
 8000c6a:	549e      	strb	r6, [r3, r2]
			state->Len += temp_p->len;
 8000c6c:	896b      	ldrh	r3, [r5, #10]
 8000c6e:	8a21      	ldrh	r1, [r4, #16]
			temp_p = temp_p->next;
 8000c70:	682d      	ldr	r5, [r5, #0]
			state->Len += temp_p->len;
 8000c72:	4419      	add	r1, r3
 8000c74:	b289      	uxth	r1, r1
 8000c76:	8221      	strh	r1, [r4, #16]
		while (temp_p != NULL) {
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d1e3      	bne.n	8000c44 <hc_recv+0x8c>
			temp_p = p->next;
 8000c7c:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000c7e:	4638      	mov	r0, r7
 8000c80:	f011 f99e 	bl	8011fc0 <pbuf_free_callback>
		while (p != NULL) {
 8000c84:	4627      	mov	r7, r4
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d0cb      	beq.n	8000c22 <hc_recv+0x6a>
			temp_p = p->next;
 8000c8a:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000c8c:	4638      	mov	r0, r7
 8000c8e:	f011 f997 	bl	8011fc0 <pbuf_free_callback>
		while (p != NULL) {
 8000c92:	4627      	mov	r7, r4
 8000c94:	2c00      	cmp	r4, #0
 8000c96:	d1f1      	bne.n	8000c7c <hc_recv+0xc4>
 8000c98:	e7c3      	b.n	8000c22 <hc_recv+0x6a>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000c9a:	2832      	cmp	r0, #50	; 0x32
 8000c9c:	d009      	beq.n	8000cb2 <hc_recv+0xfa>
				if (*(state->RecvData + i) == '\n')
 8000c9e:	280a      	cmp	r0, #10
 8000ca0:	d1aa      	bne.n	8000bf8 <hc_recv+0x40>
		for (i = 0; i < state->Len; i++) {
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	dd12      	ble.n	8000ccc <hc_recv+0x114>
 8000ca6:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000caa:	460a      	mov	r2, r1
					errormsg = NOT_FOUND;
 8000cac:	2503      	movs	r5, #3
		for (i = 0; i < state->Len; i++) {
 8000cae:	3101      	adds	r1, #1
 8000cb0:	e7a0      	b.n	8000bf4 <hc_recv+0x3c>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000cb2:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000cb6:	2830      	cmp	r0, #48	; 0x30
 8000cb8:	d00f      	beq.n	8000cda <hc_recv+0x122>
 8000cba:	1c91      	adds	r1, r2, #2
 8000cbc:	e7ef      	b.n	8000c9e <hc_recv+0xe6>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000cbe:	eb09 0102 	add.w	r1, r9, r2
 8000cc2:	7888      	ldrb	r0, [r1, #2]
 8000cc4:	280d      	cmp	r0, #13
 8000cc6:	d01b      	beq.n	8000d00 <hc_recv+0x148>
 8000cc8:	3203      	adds	r2, #3
 8000cca:	e796      	b.n	8000bfa <hc_recv+0x42>
					errormsg = NOT_FOUND;
 8000ccc:	2503      	movs	r5, #3
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000cce:	2300      	movs	r3, #0
 8000cd0:	4629      	mov	r1, r5
 8000cd2:	4640      	mov	r0, r8
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	47b8      	blx	r7
 8000cd8:	e799      	b.n	8000c0e <hc_recv+0x56>
						&& (*(state->RecvData + ++i) == '0'))
 8000cda:	eb09 0002 	add.w	r0, r9, r2
 8000cde:	1cd1      	adds	r1, r2, #3
 8000ce0:	7880      	ldrb	r0, [r0, #2]
 8000ce2:	2830      	cmp	r0, #48	; 0x30
 8000ce4:	d1db      	bne.n	8000c9e <hc_recv+0xe6>
 8000ce6:	460a      	mov	r2, r1
					errormsg = OK;
 8000ce8:	2500      	movs	r5, #0
 8000cea:	e786      	b.n	8000bfa <hc_recv+0x42>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000cec:	4603      	mov	r3, r0
 8000cee:	6965      	ldr	r5, [r4, #20]
 8000cf0:	7820      	ldrb	r0, [r4, #0]
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	47a8      	blx	r5
}
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	b003      	add	sp, #12
 8000cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000d00:	78c9      	ldrb	r1, [r1, #3]
 8000d02:	290a      	cmp	r1, #10
 8000d04:	d003      	beq.n	8000d0e <hc_recv+0x156>
 8000d06:	3204      	adds	r2, #4
 8000d08:	e777      	b.n	8000bfa <hc_recv+0x42>
	hc_errormsg errormsg = GEN_ERROR;
 8000d0a:	2504      	movs	r5, #4
 8000d0c:	e7df      	b.n	8000cce <hc_recv+0x116>
					i++;
 8000d0e:	3204      	adds	r2, #4
 8000d10:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000d12:	4491      	add	r9, r2
 8000d14:	4648      	mov	r0, r9
 8000d16:	f7ff fa9d 	bl	8000254 <strlen>
 8000d1a:	4683      	mov	fp, r0
 8000d1c:	f01c fbba 	bl	801d494 <malloc>
					strcpy(page, state->RecvData + i);
 8000d20:	4649      	mov	r1, r9
 8000d22:	f10b 0201 	add.w	r2, fp, #1
					page = malloc(strlen(state->RecvData + i));
 8000d26:	4682      	mov	sl, r0
					strcpy(page, state->RecvData + i);
 8000d28:	f01c fbd3 	bl	801d4d2 <memcpy>
					break;
 8000d2c:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	f43f af69 	beq.w	8000c06 <hc_recv+0x4e>
 8000d34:	e7cb      	b.n	8000cce <hc_recv+0x116>
 8000d36:	bf00      	nop

08000d38 <hc_error>:
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d38:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000d3a:	b570      	push	{r4, r5, r6, lr}
 8000d3c:	4604      	mov	r4, r0
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d3e:	461a      	mov	r2, r3
static void hc_error(void *arg, err_t err) {
 8000d40:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d42:	6946      	ldr	r6, [r0, #20]
 8000d44:	2104      	movs	r1, #4
 8000d46:	7800      	ldrb	r0, [r0, #0]
 8000d48:	47b0      	blx	r6
	free(state->RecvData);
 8000d4a:	68e0      	ldr	r0, [r4, #12]
 8000d4c:	f01c fbaa 	bl	801d4a4 <free>
	free(state->PostVars);
 8000d50:	68a0      	ldr	r0, [r4, #8]
 8000d52:	f01c fba7 	bl	801d4a4 <free>
	free(state->Page);
 8000d56:	6860      	ldr	r0, [r4, #4]
 8000d58:	f01c fba4 	bl	801d4a4 <free>
	free(state);
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f01c fba1 	bl	801d4a4 <free>
	printf("hc_error: err=%d\n", err);
 8000d62:	4629      	mov	r1, r5
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <hc_error+0x38>)
}
 8000d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000d6a:	f01d bb3d 	b.w	801e3e8 <iprintf>
 8000d6e:	bf00      	nop
 8000d70:	08021a70 	.word	0x08021a70

08000d74 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8000d74:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8000d76:	7c83      	ldrb	r3, [r0, #18]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8000d7c:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8000d7e:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8000d80:	d909      	bls.n	8000d96 <hc_poll+0x22>
 8000d82:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8000d84:	4608      	mov	r0, r1
 8000d86:	f015 fb4d 	bl	8016424 <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	6965      	ldr	r5, [r4, #20]
 8000d8e:	2102      	movs	r1, #2
 8000d90:	461a      	mov	r2, r3
 8000d92:	7820      	ldrb	r0, [r4, #0]
 8000d94:	47a8      	blx	r5
}
 8000d96:	2000      	movs	r0, #0
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000da0:	4604      	mov	r4, r0
 8000da2:	b083      	sub	sp, #12
 8000da4:	460d      	mov	r5, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000da6:	b19a      	cbz	r2, 8000dd0 <hc_connected+0x34>
	if (pcb != NULL) {
 8000da8:	b111      	cbz	r1, 8000db0 <hc_connected+0x14>
		tcp_close(pcb);
 8000daa:	4608      	mov	r0, r1
 8000dac:	f015 f9f8 	bl	80161a0 <tcp_close>
		hc_clearpcb(pcb);

		// Call return function
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000db0:	2300      	movs	r3, #0
 8000db2:	2104      	movs	r1, #4
 8000db4:	7820      	ldrb	r0, [r4, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	6965      	ldr	r5, [r4, #20]
 8000dba:	47a8      	blx	r5

		// Free wc state
		free(state->RecvData);
 8000dbc:	68e0      	ldr	r0, [r4, #12]
 8000dbe:	f01c fb71 	bl	801d4a4 <free>
		free(state);
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f01c fb6e 	bl	801d4a4 <free>
	free(headers);
	free(state->PostVars);			// postvars are send, so we don't need them anymore
	free(state->Page);		    	        // page is requested, so we don't need it anymore

	return (ERR_OK);
}
 8000dc8:	2000      	movs	r0, #0
 8000dca:	b003      	add	sp, #12
 8000dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state->PostVars == NULL) {
 8000dd0:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	f7ff fa3d 	bl	8000254 <strlen>
 8000dda:	4606      	mov	r6, r0
 8000ddc:	2f00      	cmp	r7, #0
 8000dde:	d039      	beq.n	8000e54 <hc_connected+0xb8>
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000de0:	4638      	mov	r0, r7
 8000de2:	f7ff fa37 	bl	8000254 <strlen>
 8000de6:	4681      	mov	r9, r0
 8000de8:	f106 0065 	add.w	r0, r6, #101	; 0x65
 8000dec:	4448      	add	r0, r9
 8000dee:	f01c fb51 	bl	801d494 <malloc>
		sprintf(headers,
 8000df2:	464b      	mov	r3, r9
 8000df4:	9700      	str	r7, [sp, #0]
 8000df6:	4642      	mov	r2, r8
 8000df8:	491b      	ldr	r1, [pc, #108]	; (8000e68 <hc_connected+0xcc>)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000dfa:	4606      	mov	r6, r0
		sprintf(headers,
 8000dfc:	f01d fc18 	bl	801e630 <siprintf>
	tcp_recv(pcb, hc_recv);
 8000e00:	491a      	ldr	r1, [pc, #104]	; (8000e6c <hc_connected+0xd0>)
 8000e02:	4628      	mov	r0, r5
 8000e04:	f014 fde4 	bl	80159d0 <tcp_recv>
	tcp_err(pcb, hc_error);
 8000e08:	4919      	ldr	r1, [pc, #100]	; (8000e70 <hc_connected+0xd4>)
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	f014 fe16 	bl	8015a3c <tcp_err>
	tcp_poll(pcb, hc_poll, 10);
 8000e10:	220a      	movs	r2, #10
 8000e12:	4918      	ldr	r1, [pc, #96]	; (8000e74 <hc_connected+0xd8>)
 8000e14:	4628      	mov	r0, r5
 8000e16:	f014 fe33 	bl	8015a80 <tcp_poll>
	tcp_sent(pcb, hc_sent);
 8000e1a:	4917      	ldr	r1, [pc, #92]	; (8000e78 <hc_connected+0xdc>)
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f014 fdf3 	bl	8015a08 <tcp_sent>
	tcp_write(pcb, headers, strlen(headers), 1);
 8000e22:	4630      	mov	r0, r6
 8000e24:	f7ff fa16 	bl	8000254 <strlen>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	4628      	mov	r0, r5
 8000e30:	f017 f9ae 	bl	8018190 <tcp_write>
	tcp_output(pcb);
 8000e34:	4628      	mov	r0, r5
 8000e36:	f017 fe0b 	bl	8018a50 <tcp_output>
	free(headers);
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	f01c fb32 	bl	801d4a4 <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 8000e40:	68a0      	ldr	r0, [r4, #8]
 8000e42:	f01c fb2f 	bl	801d4a4 <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8000e46:	6860      	ldr	r0, [r4, #4]
 8000e48:	f01c fb2c 	bl	801d4a4 <free>
}
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	b003      	add	sp, #12
 8000e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		headers = malloc(19 + strlen(state->Page));
 8000e54:	3013      	adds	r0, #19
 8000e56:	f01c fb1d 	bl	801d494 <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e5a:	4642      	mov	r2, r8
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <hc_connected+0xe0>)
		headers = malloc(19 + strlen(state->Page));
 8000e5e:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e60:	f01d fbe6 	bl	801e630 <siprintf>
 8000e64:	e7cc      	b.n	8000e00 <hc_connected+0x64>
 8000e66:	bf00      	nop
 8000e68:	08021a0c 	.word	0x08021a0c
 8000e6c:	08000bb9 	.word	0x08000bb9
 8000e70:	08000d39 	.word	0x08000d39
 8000e74:	08000d75 	.word	0x08000d75
 8000e78:	08000bb1 	.word	0x08000bb1
 8000e7c:	080219f4 	.word	0x080219f4

08000e80 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	460f      	mov	r7, r1
 8000e88:	4616      	mov	r6, r2
 8000e8a:	4699      	mov	r9, r3
 8000e8c:	9001      	str	r0, [sp, #4]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 8000e8e:	2018      	movs	r0, #24
 8000e90:	f01c fb00 	bl	801d494 <malloc>
 8000e94:	4604      	mov	r4, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 8000e96:	f015 fbc7 	bl	8016628 <tcp_new>
	if (pcb == NULL || state == NULL) {
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d074      	beq.n	8000f88 <hc_open+0x108>
 8000e9e:	fab4 f184 	clz	r1, r4
 8000ea2:	0949      	lsrs	r1, r1, #5
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	d16f      	bne.n	8000f88 <hc_open+0x108>
			;
		return 0;
	}

	// Define webclient state vars
	num++;
 8000ea8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8000fb0 <hc_open+0x130>
 8000eac:	4605      	mov	r5, r0
	state->Num = num;
	state->RecvData = NULL;
 8000eae:	60e1      	str	r1, [r4, #12]
	num++;
 8000eb0:	f898 2000 	ldrb.w	r2, [r8]
	state->ConnectionTimeout = 0;
 8000eb4:	74a1      	strb	r1, [r4, #18]
	num++;
 8000eb6:	3201      	adds	r2, #1
	state->Len = 0;
 8000eb8:	8221      	strh	r1, [r4, #16]
	state->ReturnPage = returnpage;
 8000eba:	f8c4 9014 	str.w	r9, [r4, #20]
	num++;
 8000ebe:	b2d3      	uxtb	r3, r2
 8000ec0:	f888 3000 	strb.w	r3, [r8]
	state->Num = num;
 8000ec4:	7023      	strb	r3, [r4, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d05b      	beq.n	8000f82 <hc_open+0x102>
		state->PostVars = malloc(strlen(PostVars) + 1);
 8000eca:	4630      	mov	r0, r6
 8000ecc:	f7ff f9c2 	bl	8000254 <strlen>
 8000ed0:	3001      	adds	r0, #1
 8000ed2:	f01c fadf 	bl	801d494 <malloc>
 8000ed6:	4681      	mov	r9, r0
 8000ed8:	60a0      	str	r0, [r4, #8]
	state->Page = malloc(strlen(Page) + 1);
 8000eda:	4638      	mov	r0, r7
 8000edc:	f7ff f9ba 	bl	8000254 <strlen>
 8000ee0:	f100 0a01 	add.w	sl, r0, #1
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	f01c fad5 	bl	801d494 <malloc>
 8000eea:	4603      	mov	r3, r0
 8000eec:	6060      	str	r0, [r4, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d037      	beq.n	8000f62 <hc_open+0xe2>
 8000ef2:	f1b9 0f00 	cmp.w	r9, #0
 8000ef6:	d032      	beq.n	8000f5e <hc_open+0xde>
		free(state);
		tcp_close(pcb);
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8000ef8:	4652      	mov	r2, sl
 8000efa:	4639      	mov	r1, r7
 8000efc:	f01c fae9 	bl	801d4d2 <memcpy>
	if (PostVars != NULL)
 8000f00:	b356      	cbz	r6, 8000f58 <hc_open+0xd8>
		strcpy(state->PostVars, PostVars);
 8000f02:	4631      	mov	r1, r6
 8000f04:	4648      	mov	r0, r9
 8000f06:	f01d fc38 	bl	801e77a <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000f0a:	f641 7690 	movw	r6, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f0e:	4f24      	ldr	r7, [pc, #144]	; (8000fa0 <hc_open+0x120>)
 8000f10:	e000      	b.n	8000f14 <hc_open+0x94>
		// Local port in use, use port+1
		port++;
 8000f12:	b2b6      	uxth	r6, r6
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f14:	4632      	mov	r2, r6
 8000f16:	4639      	mov	r1, r7
 8000f18:	4628      	mov	r0, r5
		port++;
 8000f1a:	3601      	adds	r6, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f1c:	f014 fb50 	bl	80155c0 <tcp_bind>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d1f6      	bne.n	8000f12 <hc_open+0x92>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8000f24:	4621      	mov	r1, r4
 8000f26:	4628      	mov	r0, r5
 8000f28:	f014 fd4e 	bl	80159c8 <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <hc_open+0x124>)
 8000f2e:	4628      	mov	r0, r5
 8000f30:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000f34:	a901      	add	r1, sp, #4
 8000f36:	f014 fc73 	bl	8015820 <tcp_connect>
 8000f3a:	b240      	sxtb	r0, r0
 8000f3c:	f88d 000f 	strb.w	r0, [sp, #15]

	if (err != ERR_OK) {
 8000f40:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000f44:	bb23      	cbnz	r3, 8000f90 <hc_open+0x110>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8000f46:	f898 0000 	ldrb.w	r0, [r8]
}
 8000f4a:	b004      	add	sp, #16
 8000f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	strcpy(state->Page, Page);
 8000f50:	4652      	mov	r2, sl
 8000f52:	4639      	mov	r1, r7
 8000f54:	f01c fabd 	bl	801d4d2 <memcpy>
		state->PostVars = NULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60a3      	str	r3, [r4, #8]
 8000f5c:	e7d5      	b.n	8000f0a <hc_open+0x8a>
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f5e:	2e00      	cmp	r6, #0
 8000f60:	d0f6      	beq.n	8000f50 <hc_open+0xd0>
		free(state->Page);
 8000f62:	4618      	mov	r0, r3
 8000f64:	f01c fa9e 	bl	801d4a4 <free>
		free(state->PostVars);
 8000f68:	4648      	mov	r0, r9
 8000f6a:	f01c fa9b 	bl	801d4a4 <free>
		free(state);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f01c fa98 	bl	801d4a4 <free>
		tcp_close(pcb);
 8000f74:	4628      	mov	r0, r5
 8000f76:	f015 f913 	bl	80161a0 <tcp_close>
		return 0;
 8000f7a:	2000      	movs	r0, #0
}
 8000f7c:	b004      	add	sp, #16
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8000f86:	e7a8      	b.n	8000eda <hc_open+0x5a>
		printf("hc_open: Not enough memory for pcb or state\n");
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <hc_open+0x128>)
 8000f8a:	f01d fab5 	bl	801e4f8 <puts>
 8000f8e:	e7fe      	b.n	8000f8e <hc_open+0x10e>
		printf("hc_open failed with %d\n", err);
 8000f90:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <hc_open+0x12c>)
 8000f96:	b249      	sxtb	r1, r1
 8000f98:	f01d fa26 	bl	801e3e8 <iprintf>
 8000f9c:	e7d3      	b.n	8000f46 <hc_open+0xc6>
 8000f9e:	bf00      	nop
 8000fa0:	0803bb0c 	.word	0x0803bb0c
 8000fa4:	08000d9d 	.word	0x08000d9d
 8000fa8:	08021a84 	.word	0x08021a84
 8000fac:	08021ab0 	.word	0x08021ab0
 8000fb0:	20000818 	.word	0x20000818

08000fb4 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8000fb4:	4801      	ldr	r0, [pc, #4]	; (8000fbc <netif_status_callbk_fn+0x8>)
 8000fb6:	f01d ba9f 	b.w	801e4f8 <puts>
 8000fba:	bf00      	nop
 8000fbc:	08022054 	.word	0x08022054

08000fc0 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8000fc0:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <Callback01+0x8>)
 8000fc2:	f01d ba99 	b.w	801e4f8 <puts>
 8000fc6:	bf00      	nop
 8000fc8:	08021ac8 	.word	0x08021ac8

08000fcc <_write>:
int _write(int file, char *ptr, int len) {
 8000fcc:	b570      	push	{r4, r5, r6, lr}
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000fce:	1e16      	subs	r6, r2, #0
 8000fd0:	dd07      	ble.n	8000fe2 <_write+0x16>
 8000fd2:	460c      	mov	r4, r1
 8000fd4:	198d      	adds	r5, r1, r6
		__io_putchar(*ptr++);
 8000fd6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000fda:	f001 fb3b 	bl	8002654 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000fde:	42a5      	cmp	r5, r4
 8000fe0:	d1f9      	bne.n	8000fd6 <_write+0xa>
}
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
 8000fe6:	bf00      	nop

08000fe8 <rebootme>:
void rebootme() {
 8000fe8:	b508      	push	{r3, lr}
		osDelay(2000);
 8000fea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fee:	f00e fd83 	bl	800faf8 <osDelay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ff6:	4905      	ldr	r1, [pc, #20]	; (800100c <rebootme+0x24>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <rebootme+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ffa:	68ca      	ldr	r2, [r1, #12]
 8000ffc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001000:	4313      	orrs	r3, r2
 8001002:	60cb      	str	r3, [r1, #12]
 8001004:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <rebootme+0x20>
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	05fa0004 	.word	0x05fa0004

08001014 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8001014:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
 8001018:	074a      	lsls	r2, r1, #29
 800101a:	d409      	bmi.n	8001030 <netif_link_callbk_fn+0x1c>
void netif_link_callbk_fn(struct netif *netif) {
 800101c:	b510      	push	{r4, lr}
 800101e:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <netif_link_callbk_fn+0x2c>)
 8001022:	f01d f9e1 	bl	801e3e8 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8001026:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800102a:	075b      	lsls	r3, r3, #29
 800102c:	d503      	bpl.n	8001036 <netif_link_callbk_fn+0x22>
}
 800102e:	bd10      	pop	{r4, pc}
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <netif_link_callbk_fn+0x30>)
 8001032:	f01d b9d9 	b.w	801e3e8 <iprintf>
			printf("LAN interface appears disconnected, rebooting...\n");
 8001036:	4804      	ldr	r0, [pc, #16]	; (8001048 <netif_link_callbk_fn+0x34>)
 8001038:	f01d fa5e 	bl	801e4f8 <puts>
			rebootme();
 800103c:	f7ff ffd4 	bl	8000fe8 <rebootme>
 8001040:	08022000 	.word	0x08022000
 8001044:	08021fe0 	.word	0x08021fe0
 8001048:	08022020 	.word	0x08022020

0800104c <StarLPTask>:
void StarLPTask(void const *argument) {
 800104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[32] = { "empty" };
 8001050:	2300      	movs	r3, #0
void StarLPTask(void const *argument) {
 8001052:	b093      	sub	sp, #76	; 0x4c
	statuspkt.adcudpover = 0;		// debug use count overruns
 8001054:	4d8e      	ldr	r5, [pc, #568]	; (8001290 <StarLPTask+0x244>)
	char str[32] = { "empty" };
 8001056:	4a8f      	ldr	r2, [pc, #572]	; (8001294 <StarLPTask+0x248>)
	while (main_init_done == 0)	// wait from main to complete the initilisation
 8001058:	4c8f      	ldr	r4, [pc, #572]	; (8001298 <StarLPTask+0x24c>)
	statuspkt.adcudpover = 0;		// debug use count overruns
 800105a:	67ab      	str	r3, [r5, #120]	; 0x78
	char str[32] = { "empty" };
 800105c:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8001060:	67eb      	str	r3, [r5, #124]	; 0x7c
	char str[32] = { "empty" };
 8001062:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
 8001066:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 800106a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	char str[32] = { "empty" };
 800106e:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
 8001072:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
 8001076:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
 800107a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
	while (main_init_done == 0)	// wait from main to complete the initilisation
 800107e:	6823      	ldr	r3, [r4, #0]
	char str[32] = { "empty" };
 8001080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001084:	900a      	str	r0, [sp, #40]	; 0x28
 8001086:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
	while (main_init_done == 0)	// wait from main to complete the initilisation
 800108a:	b92b      	cbnz	r3, 8001098 <StarLPTask+0x4c>
		osDelay(100);
 800108c:	2064      	movs	r0, #100	; 0x64
 800108e:	f00e fd33 	bl	800faf8 <osDelay>
	while (main_init_done == 0)	// wait from main to complete the initilisation
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f9      	beq.n	800108c <StarLPTask+0x40>
	uint16_t onesectimer = 0;
 8001098:	2200      	movs	r2, #0
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, MY_UID, statuspkt.majorversion, statuspkt.minorversion,
 800109a:	f8b5 805c 	ldrh.w	r8, [r5, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, TESTING Sw S/N=%d, Ver %d.%d, UDP Target=%s %s\"",
 800109e:	f240 401f 	movw	r0, #1055	; 0x41f
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, MY_UID, statuspkt.majorversion, statuspkt.minorversion,
 80010a2:	f895 e070 	ldrb.w	lr, [r5, #112]	; 0x70
	uint16_t onesectimer = 0;
 80010a6:	9209      	str	r2, [sp, #36]	; 0x24
 80010a8:	4614      	mov	r4, r2
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, MY_UID, statuspkt.majorversion, statuspkt.minorversion,
 80010aa:	f895 c071 	ldrb.w	ip, [r5, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, TESTING Sw S/N=%d, Ver %d.%d, UDP Target=%s %s\"",
 80010ae:	497b      	ldr	r1, [pc, #492]	; (800129c <StarLPTask+0x250>)
 80010b0:	4b7b      	ldr	r3, [pc, #492]	; (80012a0 <StarLPTask+0x254>)
 80010b2:	4a7c      	ldr	r2, [pc, #496]	; (80012a4 <StarLPTask+0x258>)
 80010b4:	4f7c      	ldr	r7, [pc, #496]	; (80012a8 <StarLPTask+0x25c>)
 80010b6:	4e7d      	ldr	r6, [pc, #500]	; (80012ac <StarLPTask+0x260>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80010c0:	9002      	str	r0, [sp, #8]
 80010c2:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8001320 <StarLPTask+0x2d4>
 80010c6:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8001324 <StarLPTask+0x2d8>
 80010ca:	f8df b25c 	ldr.w	fp, [pc, #604]	; 8001328 <StarLPTask+0x2dc>
		if (tenmstimer % 1000 == 0) {		// every 10 seconds
 80010ce:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800132c <StarLPTask+0x2e0>
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, TESTING Sw S/N=%d, Ver %d.%d, UDP Target=%s %s\"",
 80010d2:	e9cd ec03 	strd	lr, ip, [sp, #12]
 80010d6:	e9cd 6705 	strd	r6, r7, [sp, #20]
 80010da:	6808      	ldr	r0, [r1, #0]
 80010dc:	4974      	ldr	r1, [pc, #464]	; (80012b0 <StarLPTask+0x264>)
 80010de:	9000      	str	r0, [sp, #0]
 80010e0:	4874      	ldr	r0, [pc, #464]	; (80012b4 <StarLPTask+0x268>)
 80010e2:	f01d faa5 	bl	801e630 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 80010e6:	4874      	ldr	r0, [pc, #464]	; (80012b8 <StarLPTask+0x26c>)
 80010e8:	f009 fe9e 	bl	800ae28 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 80010ec:	4b73      	ldr	r3, [pc, #460]	; (80012bc <StarLPTask+0x270>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80010f2:	4873      	ldr	r0, [pc, #460]	; (80012c0 <StarLPTask+0x274>)
		tenmstimer++;
 80010f4:	3401      	adds	r4, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80010f6:	f007 f897 	bl	8008228 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 80010fa:	200a      	movs	r0, #10
 80010fc:	f00e fcfc 	bl	800faf8 <osDelay>
		if (ledhang) {	// trigger led
 8001100:	f8d9 2000 	ldr.w	r2, [r9]
		tenmstimer++;
 8001104:	b2a4      	uxth	r4, r4
		if (ledhang) {	// trigger led
 8001106:	2a00      	cmp	r2, #0
 8001108:	f000 816f 	beq.w	80013ea <StarLPTask+0x39e>
			ledhang--;
 800110c:	1e53      	subs	r3, r2, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 800110e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001112:	2201      	movs	r2, #1
 8001114:	486b      	ldr	r0, [pc, #428]	; (80012c4 <StarLPTask+0x278>)
			ledhang--;
 8001116:	f8c9 3000 	str.w	r3, [r9]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 800111a:	f006 fbe5 	bl	80078e8 <HAL_GPIO_WritePin>
		if (statuspkt.trigcount > (360 + trigs)) { // spamming: 3600 packets sent in 2 Sec (out of approx 7.2K packets)
 800111e:	f8d8 3000 	ldr.w	r3, [r8]
 8001122:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8001124:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8001128:	4291      	cmp	r1, r2
 800112a:	f240 8095 	bls.w	8001258 <StarLPTask+0x20c>
			statuspkt.jabcnt++;
 800112e:	f8b5 2086 	ldrh.w	r2, [r5, #134]	; 0x86
			jabber = 200;		// 2 seconds pause
 8001132:	21c8      	movs	r1, #200	; 0xc8
			statuspkt.jabcnt++;
 8001134:	3201      	adds	r2, #1
			jabber = 200;		// 2 seconds pause
 8001136:	f8cb 1000 	str.w	r1, [fp]
			statuspkt.jabcnt++;
 800113a:	b292      	uxth	r2, r2
 800113c:	f8a5 2086 	strh.w	r2, [r5, #134]	; 0x86
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8001140:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001142:	4293      	cmp	r3, r2
 8001144:	f040 8094 	bne.w	8001270 <StarLPTask+0x224>
		if (tenmstimer % 10 == 0) {
 8001148:	4b5f      	ldr	r3, [pc, #380]	; (80012c8 <StarLPTask+0x27c>)
 800114a:	fba3 2304 	umull	r2, r3, r3, r4
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001154:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 8001158:	b29b      	uxth	r3, r3
 800115a:	b9eb      	cbnz	r3, 8001198 <StarLPTask+0x14c>
			if (agc) {
 800115c:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <StarLPTask+0x280>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b14b      	cbz	r3, 8001176 <StarLPTask+0x12a>
				if (globaladcnoise < 200)
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <StarLPTask+0x284>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2bc7      	cmp	r3, #199	; 0xc7
 8001168:	f240 81ca 	bls.w	8001500 <StarLPTask+0x4b4>
				else if (globaladcnoise > 550)
 800116c:	f240 2226 	movw	r2, #550	; 0x226
 8001170:	4293      	cmp	r3, r2
 8001172:	f200 81cd 	bhi.w	8001510 <StarLPTask+0x4c4>
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8001176:	4b57      	ldr	r3, [pc, #348]	; (80012d4 <StarLPTask+0x288>)
 8001178:	4a57      	ldr	r2, [pc, #348]	; (80012d8 <StarLPTask+0x28c>)
 800117a:	6819      	ldr	r1, [r3, #0]
 800117c:	6813      	ldr	r3, [r2, #0]
 800117e:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8001180:	2b05      	cmp	r3, #5
 8001182:	f340 8138 	ble.w	80013f6 <StarLPTask+0x3aa>
					if (trigthresh < 4095)
 8001186:	4855      	ldr	r0, [pc, #340]	; (80012dc <StarLPTask+0x290>)
 8001188:	f640 76fe 	movw	r6, #4094	; 0xffe
 800118c:	8803      	ldrh	r3, [r0, #0]
 800118e:	42b3      	cmp	r3, r6
 8001190:	d801      	bhi.n	8001196 <StarLPTask+0x14a>
						trigthresh++;
 8001192:	3301      	adds	r3, #1
 8001194:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8001196:	6011      	str	r1, [r2, #0]
		if (tenmstimer % 100 == 0) {		// every second
 8001198:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <StarLPTask+0x294>)
 800119a:	fba3 3604 	umull	r3, r6, r3, r4
 800119e:	2364      	movs	r3, #100	; 0x64
 80011a0:	0976      	lsrs	r6, r6, #5
 80011a2:	fb03 4616 	mls	r6, r3, r6, r4
 80011a6:	b2b6      	uxth	r6, r6
 80011a8:	2e00      	cmp	r6, #0
 80011aa:	f000 812f 	beq.w	800140c <StarLPTask+0x3c0>
		if (tenmstimer % 1000 == 0) {		// every 10 seconds
 80011ae:	fbaa 2304 	umull	r2, r3, sl, r4
 80011b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b6:	099b      	lsrs	r3, r3, #6
 80011b8:	fb02 4313 	mls	r3, r2, r3, r4
 80011bc:	b29b      	uxth	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d197      	bne.n	80010f2 <StarLPTask+0xa6>
			if (tenmstimer > 3000) {		// reset timer after 30 seconds
 80011c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011c6:	429c      	cmp	r4, r3
 80011c8:	d935      	bls.n	8001236 <StarLPTask+0x1ea>
				if (gpsgood == 0) {	// gps is not talking to us
 80011ca:	4c46      	ldr	r4, [pc, #280]	; (80012e4 <StarLPTask+0x298>)
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8192 	beq.w	80014f8 <StarLPTask+0x4ac>
				if (psensor == MPL115A2) {
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <StarLPTask+0x29c>)
				gpsgood = 0;			// reset the good flag
 80011d6:	2200      	movs	r2, #0
				if (psensor == MPL115A2) {
 80011d8:	681b      	ldr	r3, [r3, #0]
				gpsgood = 0;			// reset the good flag
 80011da:	6022      	str	r2, [r4, #0]
				if (psensor == MPL115A2) {
 80011dc:	2b02      	cmp	r3, #2
 80011de:	f000 81a0 	beq.w	8001522 <StarLPTask+0x4d6>
				} else if (psensor == MPL3115A2) {
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	f000 81a6 	beq.w	8001534 <StarLPTask+0x4e8>
				printf("SN:%d/%lu %d:%d:%d:%d ", MY_UID, statuspkt.uid, myip & 0xFF, (myip & 0xFF00) >> 8,
 80011e8:	4b40      	ldr	r3, [pc, #256]	; (80012ec <StarLPTask+0x2a0>)
 80011ea:	f240 411f 	movw	r1, #1055	; 0x41f
 80011ee:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
				tenmstimer = 0;
 80011f2:	2400      	movs	r4, #0
				printf("SN:%d/%lu %d:%d:%d:%d ", MY_UID, statuspkt.uid, myip & 0xFF, (myip & 0xFF00) >> 8,
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80011fa:	0e1f      	lsrs	r7, r3, #24
 80011fc:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8001200:	b2db      	uxtb	r3, r3
 8001202:	9000      	str	r0, [sp, #0]
 8001204:	483a      	ldr	r0, [pc, #232]	; (80012f0 <StarLPTask+0x2a4>)
 8001206:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800120a:	f01d f8ed 	bl	801e3e8 <iprintf>
				printf("triggers:%04d, pressure:%03d.%d, temp:%02d.%d, time:%s\n", trigs, pressure, pressfrac,
 800120e:	4a39      	ldr	r2, [pc, #228]	; (80012f4 <StarLPTask+0x2a8>)
 8001210:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <StarLPTask+0x2ac>)
 8001212:	6811      	ldr	r1, [r2, #0]
 8001214:	4a39      	ldr	r2, [pc, #228]	; (80012fc <StarLPTask+0x2b0>)
 8001216:	fbaa 0101 	umull	r0, r1, sl, r1
 800121a:	4839      	ldr	r0, [pc, #228]	; (8001300 <StarLPTask+0x2b4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6800      	ldr	r0, [r0, #0]
 8001220:	0989      	lsrs	r1, r1, #6
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	9101      	str	r1, [sp, #4]
 8001226:	f8d8 1000 	ldr.w	r1, [r8]
 800122a:	9000      	str	r0, [sp, #0]
 800122c:	4835      	ldr	r0, [pc, #212]	; (8001304 <StarLPTask+0x2b8>)
 800122e:	9002      	str	r0, [sp, #8]
 8001230:	4835      	ldr	r0, [pc, #212]	; (8001308 <StarLPTask+0x2bc>)
 8001232:	f01d f8d9 	bl	801e3e8 <iprintf>
			if (onesectimer > 900) {			// 15 mins
 8001236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001238:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800123c:	f67f af59 	bls.w	80010f2 <StarLPTask+0xa6>
				if (locateudp() != uip)		// periodic check
 8001240:	f002 ff98 	bl	8004174 <locateudp>
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <StarLPTask+0x2c0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4298      	cmp	r0, r3
 800124a:	f040 817c 	bne.w	8001546 <StarLPTask+0x4fa>
				stats_display() ; // this needs stats in LwIP enabling to do anything
 800124e:	f014 f8fb 	bl	8015448 <stats_display>
				onesectimer = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	9309      	str	r3, [sp, #36]	; 0x24
 8001256:	e74c      	b.n	80010f2 <StarLPTask+0xa6>
			if (jabber)
 8001258:	f8db 2000 	ldr.w	r2, [fp]
 800125c:	2a00      	cmp	r2, #0
 800125e:	f43f af6f 	beq.w	8001140 <StarLPTask+0xf4>
				jabber--;		// de-arm count
 8001262:	3a01      	subs	r2, #1
 8001264:	f8cb 2000 	str.w	r2, [fp]
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8001268:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800126a:	4293      	cmp	r3, r2
 800126c:	f43f af6c 	beq.w	8001148 <StarLPTask+0xfc>
			trigs = statuspkt.trigcount;
 8001270:	6fee      	ldr	r6, [r5, #124]	; 0x7c
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8001272:	2108      	movs	r1, #8
 8001274:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001278:	4a25      	ldr	r2, [pc, #148]	; (8001310 <StarLPTask+0x2c4>)
 800127a:	9100      	str	r1, [sp, #0]
 800127c:	2100      	movs	r1, #0
			trigs = statuspkt.trigcount;
 800127e:	f8c8 6000 	str.w	r6, [r8]
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8001282:	4824      	ldr	r0, [pc, #144]	; (8001314 <StarLPTask+0x2c8>)
 8001284:	f004 f926 	bl	80054d4 <HAL_DAC_Start_DMA>
 8001288:	4e23      	ldr	r6, [pc, #140]	; (8001318 <StarLPTask+0x2cc>)
				printf("sem wait 1a\n");
 800128a:	4f24      	ldr	r7, [pc, #144]	; (800131c <StarLPTask+0x2d0>)
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 800128c:	e053      	b.n	8001336 <StarLPTask+0x2ea>
 800128e:	bf00      	nop
 8001290:	2002183c 	.word	0x2002183c
 8001294:	08021678 	.word	0x08021678
 8001298:	20000868 	.word	0x20000868
 800129c:	1ff0f428 	.word	0x1ff0f428
 80012a0:	1ff0f424 	.word	0x1ff0f424
 80012a4:	1ff0f420 	.word	0x1ff0f420
 80012a8:	200223a0 	.word	0x200223a0
 80012ac:	200223b4 	.word	0x200223b4
 80012b0:	08021b64 	.word	0x08021b64
 80012b4:	200000d0 	.word	0x200000d0
 80012b8:	20022224 	.word	0x20022224
 80012bc:	20000864 	.word	0x20000864
 80012c0:	20021be0 	.word	0x20021be0
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	cccccccd 	.word	0xcccccccd
 80012cc:	20000002 	.word	0x20000002
 80012d0:	20000720 	.word	0x20000720
 80012d4:	20000774 	.word	0x20000774
 80012d8:	20000860 	.word	0x20000860
 80012dc:	20000000 	.word	0x20000000
 80012e0:	51eb851f 	.word	0x51eb851f
 80012e4:	20000878 	.word	0x20000878
 80012e8:	200008ac 	.word	0x200008ac
 80012ec:	20021c64 	.word	0x20021c64
 80012f0:	08021d40 	.word	0x08021d40
 80012f4:	20022350 	.word	0x20022350
 80012f8:	2002235c 	.word	0x2002235c
 80012fc:	20022358 	.word	0x20022358
 8001300:	20022354 	.word	0x20022354
 8001304:	20000084 	.word	0x20000084
 8001308:	08021d58 	.word	0x08021d58
 800130c:	20021c60 	.word	0x20021c60
 8001310:	0802206c 	.word	0x0802206c
 8001314:	20021eec 	.word	0x20021eec
 8001318:	20021fc8 	.word	0x20021fc8
 800131c:	08021bc0 	.word	0x08021bc0
 8001320:	2000076c 	.word	0x2000076c
 8001324:	20000870 	.word	0x20000870
 8001328:	20000724 	.word	0x20000724
 800132c:	10624dd3 	.word	0x10624dd3
				printf("sem wait 1a\n");
 8001330:	4638      	mov	r0, r7
 8001332:	f01d f8e1 	bl	801e4f8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8001336:	2101      	movs	r1, #1
 8001338:	6830      	ldr	r0, [r6, #0]
 800133a:	f00f f8cf 	bl	80104dc <xQueueSemaphoreTake>
 800133e:	2801      	cmp	r0, #1
 8001340:	d1f6      	bne.n	8001330 <StarLPTask+0x2e4>
			strcpy(trigtimestr, ctime(&epochtime));		// ctime
 8001342:	4882      	ldr	r0, [pc, #520]	; (800154c <StarLPTask+0x500>)
 8001344:	f01b ff7c 	bl	801d240 <ctime>
 8001348:	4b81      	ldr	r3, [pc, #516]	; (8001550 <StarLPTask+0x504>)
 800134a:	4601      	mov	r1, r0
 800134c:	4618      	mov	r0, r3
 800134e:	f01d f9fe 	bl	801e74e <stpcpy>
			trigtimestr[strlen(trigtimestr) - 1] = '\0';	// replace newline with terminator
 8001352:	2300      	movs	r3, #0
 8001354:	4601      	mov	r1, r0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8001356:	6830      	ldr	r0, [r6, #0]
 8001358:	461a      	mov	r2, r3
			trigtimestr[strlen(trigtimestr) - 1] = '\0';	// replace newline with terminator
 800135a:	f801 3c01 	strb.w	r3, [r1, #-1]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800135e:	4619      	mov	r1, r3
 8001360:	f00e fe4c 	bl	800fffc <xQueueGenericSend>
 8001364:	2801      	cmp	r0, #1
 8001366:	d002      	beq.n	800136e <StarLPTask+0x322>
				printf("semaphore 1a release failed\n");
 8001368:	487a      	ldr	r0, [pc, #488]	; (8001554 <StarLPTask+0x508>)
 800136a:	f01d f8c5 	bl	801e4f8 <puts>
			strcpy(str, ctime(&epochtime));
 800136e:	ae0a      	add	r6, sp, #40	; 0x28
 8001370:	4876      	ldr	r0, [pc, #472]	; (800154c <StarLPTask+0x500>)
 8001372:	f01b ff65 	bl	801d240 <ctime>
 8001376:	4601      	mov	r1, r0
 8001378:	4630      	mov	r0, r6
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800137a:	2700      	movs	r7, #0
			strcpy(str, ctime(&epochtime));
 800137c:	f01d f9e7 	bl	801e74e <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001380:	ab12      	add	r3, sp, #72	; 0x48
 8001382:	1b80      	subs	r0, r0, r6
			sprintf(nowtimestr, "\"%s\"", str);
 8001384:	4632      	mov	r2, r6
 8001386:	4974      	ldr	r1, [pc, #464]	; (8001558 <StarLPTask+0x50c>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001388:	4403      	add	r3, r0
			sprintf(nowtimestr, "\"%s\"", str);
 800138a:	4874      	ldr	r0, [pc, #464]	; (800155c <StarLPTask+0x510>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800138c:	f803 7c21 	strb.w	r7, [r3, #-33]
			sprintf(nowtimestr, "\"%s\"", str);
 8001390:	f01d f94e 	bl	801e630 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8001394:	4b72      	ldr	r3, [pc, #456]	; (8001560 <StarLPTask+0x514>)
 8001396:	4a73      	ldr	r2, [pc, #460]	; (8001564 <StarLPTask+0x518>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4972      	ldr	r1, [pc, #456]	; (8001568 <StarLPTask+0x51c>)
 800139e:	4873      	ldr	r0, [pc, #460]	; (800156c <StarLPTask+0x520>)
 80013a0:	f01d f946 	bl	801e630 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 80013a4:	4b72      	ldr	r3, [pc, #456]	; (8001570 <StarLPTask+0x524>)
 80013a6:	4a73      	ldr	r2, [pc, #460]	; (8001574 <StarLPTask+0x528>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	496e      	ldr	r1, [pc, #440]	; (8001568 <StarLPTask+0x51c>)
 80013ae:	4872      	ldr	r0, [pc, #456]	; (8001578 <StarLPTask+0x52c>)
 80013b0:	f01d f93e 	bl	801e630 <siprintf>
			sprintf(statstr,
 80013b4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80013b6:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, statuspkt.adcnoise, statuspkt.adcbase);
 80013b8:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
 80013bc:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
			sprintf(statstr,
 80013c0:	e9cd 0100 	strd	r0, r1, [sp]
 80013c4:	9302      	str	r3, [sp, #8]
 80013c6:	496d      	ldr	r1, [pc, #436]	; (800157c <StarLPTask+0x530>)
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <StarLPTask+0x504>)
 80013ca:	486d      	ldr	r0, [pc, #436]	; (8001580 <StarLPTask+0x534>)
 80013cc:	f01d f930 	bl	801e630 <siprintf>
			if (gpslocked) {
 80013d0:	4b6c      	ldr	r3, [pc, #432]	; (8001584 <StarLPTask+0x538>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d077      	beq.n	80014c8 <StarLPTask+0x47c>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 80013d8:	7eea      	ldrb	r2, [r5, #27]
 80013da:	69eb      	ldr	r3, [r5, #28]
 80013dc:	6a28      	ldr	r0, [r5, #32]
 80013de:	496a      	ldr	r1, [pc, #424]	; (8001588 <StarLPTask+0x53c>)
 80013e0:	9000      	str	r0, [sp, #0]
 80013e2:	486a      	ldr	r0, [pc, #424]	; (800158c <StarLPTask+0x540>)
 80013e4:	f01d f924 	bl	801e630 <siprintf>
 80013e8:	e6ae      	b.n	8001148 <StarLPTask+0xfc>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80013ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ee:	4868      	ldr	r0, [pc, #416]	; (8001590 <StarLPTask+0x544>)
 80013f0:	f006 fa7a 	bl	80078e8 <HAL_GPIO_WritePin>
 80013f4:	e693      	b.n	800111e <StarLPTask+0xd2>
				if (n == 0) {		// no triggers in last 100mS
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f47f aecd 	bne.w	8001196 <StarLPTask+0x14a>
					if (trigthresh > 5)	// dont permit trigthresh < 5
 80013fc:	4865      	ldr	r0, [pc, #404]	; (8001594 <StarLPTask+0x548>)
 80013fe:	8803      	ldrh	r3, [r0, #0]
 8001400:	2b05      	cmp	r3, #5
 8001402:	f67f aec8 	bls.w	8001196 <StarLPTask+0x14a>
						trigthresh--;
 8001406:	3b01      	subs	r3, #1
 8001408:	8003      	strh	r3, [r0, #0]
 800140a:	e6c4      	b.n	8001196 <StarLPTask+0x14a>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800140c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			strcpy(str, ctime(&epochtime));
 8001410:	af0a      	add	r7, sp, #40	; 0x28
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8001412:	485f      	ldr	r0, [pc, #380]	; (8001590 <StarLPTask+0x544>)
 8001414:	f006 fa82 	bl	800791c <HAL_GPIO_TogglePin>
			strcpy(str, ctime(&epochtime));
 8001418:	484c      	ldr	r0, [pc, #304]	; (800154c <StarLPTask+0x500>)
 800141a:	f01b ff11 	bl	801d240 <ctime>
 800141e:	4601      	mov	r1, r0
 8001420:	4638      	mov	r0, r7
 8001422:	f01d f994 	bl	801e74e <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001426:	ab12      	add	r3, sp, #72	; 0x48
 8001428:	1bc0      	subs	r0, r0, r7
			sprintf(nowtimestr, "\"%s\"", str);
 800142a:	463a      	mov	r2, r7
 800142c:	494a      	ldr	r1, [pc, #296]	; (8001558 <StarLPTask+0x50c>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800142e:	4403      	add	r3, r0
			sprintf(nowtimestr, "\"%s\"", str);
 8001430:	484a      	ldr	r0, [pc, #296]	; (800155c <StarLPTask+0x510>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001432:	f803 6c21 	strb.w	r6, [r3, #-33]
			sprintf(nowtimestr, "\"%s\"", str);
 8001436:	f01d f8fb 	bl	801e630 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 800143a:	4b49      	ldr	r3, [pc, #292]	; (8001560 <StarLPTask+0x514>)
 800143c:	4a49      	ldr	r2, [pc, #292]	; (8001564 <StarLPTask+0x518>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	4949      	ldr	r1, [pc, #292]	; (8001568 <StarLPTask+0x51c>)
 8001444:	4849      	ldr	r0, [pc, #292]	; (800156c <StarLPTask+0x520>)
 8001446:	f01d f8f3 	bl	801e630 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <StarLPTask+0x524>)
 800144c:	4a49      	ldr	r2, [pc, #292]	; (8001574 <StarLPTask+0x528>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	4945      	ldr	r1, [pc, #276]	; (8001568 <StarLPTask+0x51c>)
 8001454:	4848      	ldr	r0, [pc, #288]	; (8001578 <StarLPTask+0x52c>)
 8001456:	f01d f8eb 	bl	801e630 <siprintf>
			sprintf(statstr,
 800145a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800145c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, statuspkt.adcnoise, statuspkt.adcbase);
 800145e:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
 8001462:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
			sprintf(statstr,
 8001466:	e9cd 0100 	strd	r0, r1, [sp]
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	4943      	ldr	r1, [pc, #268]	; (800157c <StarLPTask+0x530>)
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <StarLPTask+0x504>)
 8001470:	4843      	ldr	r0, [pc, #268]	; (8001580 <StarLPTask+0x534>)
 8001472:	f01d f8dd 	bl	801e630 <siprintf>
			if (gpslocked) {
 8001476:	4b43      	ldr	r3, [pc, #268]	; (8001584 <StarLPTask+0x538>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d030      	beq.n	80014e0 <StarLPTask+0x494>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 800147e:	7eea      	ldrb	r2, [r5, #27]
 8001480:	69eb      	ldr	r3, [r5, #28]
 8001482:	6a28      	ldr	r0, [r5, #32]
 8001484:	4940      	ldr	r1, [pc, #256]	; (8001588 <StarLPTask+0x53c>)
 8001486:	9000      	str	r0, [sp, #0]
 8001488:	4840      	ldr	r0, [pc, #256]	; (800158c <StarLPTask+0x540>)
 800148a:	f01d f8d1 	bl	801e630 <siprintf>
			onesectimer++;
 800148e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001490:	4e41      	ldr	r6, [pc, #260]	; (8001598 <StarLPTask+0x54c>)
 8001492:	3301      	adds	r3, #1
				printf("sem wait 1\n");
 8001494:	4f41      	ldr	r7, [pc, #260]	; (800159c <StarLPTask+0x550>)
			onesectimer++;
 8001496:	b29b      	uxth	r3, r3
 8001498:	9309      	str	r3, [sp, #36]	; 0x24
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 800149a:	e002      	b.n	80014a2 <StarLPTask+0x456>
				printf("sem wait 1\n");
 800149c:	4638      	mov	r0, r7
 800149e:	f01d f82b 	bl	801e4f8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 80014a2:	2119      	movs	r1, #25
 80014a4:	6830      	ldr	r0, [r6, #0]
 80014a6:	f00f f819 	bl	80104dc <xQueueSemaphoreTake>
 80014aa:	2801      	cmp	r0, #1
 80014ac:	d1f6      	bne.n	800149c <StarLPTask+0x450>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 80014ae:	2300      	movs	r3, #0
 80014b0:	6830      	ldr	r0, [r6, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	f00e fda1 	bl	800fffc <xQueueGenericSend>
 80014ba:	2801      	cmp	r0, #1
 80014bc:	f43f ae77 	beq.w	80011ae <StarLPTask+0x162>
				printf("semaphore release failed\n");
 80014c0:	4837      	ldr	r0, [pc, #220]	; (80015a0 <StarLPTask+0x554>)
 80014c2:	f01d f819 	bl	801e4f8 <puts>
 80014c6:	e672      	b.n	80011ae <StarLPTask+0x162>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");
 80014c8:	4f36      	ldr	r7, [pc, #216]	; (80015a4 <StarLPTask+0x558>)
 80014ca:	4e30      	ldr	r6, [pc, #192]	; (800158c <StarLPTask+0x540>)
 80014cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80014ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80014d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014d4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80014d8:	f846 0b04 	str.w	r0, [r6], #4
 80014dc:	8031      	strh	r1, [r6, #0]
 80014de:	e633      	b.n	8001148 <StarLPTask+0xfc>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");
 80014e0:	4f30      	ldr	r7, [pc, #192]	; (80015a4 <StarLPTask+0x558>)
 80014e2:	4e2a      	ldr	r6, [pc, #168]	; (800158c <StarLPTask+0x540>)
 80014e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80014e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80014ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014ec:	e897 0003 	ldmia.w	r7, {r0, r1}
 80014f0:	f846 0b04 	str.w	r0, [r6], #4
 80014f4:	8031      	strh	r1, [r6, #0]
 80014f6:	e7ca      	b.n	800148e <StarLPTask+0x442>
					printf("GPS serial comms problem?\n");
 80014f8:	482b      	ldr	r0, [pc, #172]	; (80015a8 <StarLPTask+0x55c>)
 80014fa:	f01c fffd 	bl	801e4f8 <puts>
 80014fe:	e669      	b.n	80011d4 <StarLPTask+0x188>
					gainchanged = bumppga(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f001 fb2b 	bl	8002b5c <bumppga>
 8001506:	b280      	uxth	r0, r0
			if (gainchanged == 0) {		// gain not just changed
 8001508:	2800      	cmp	r0, #0
 800150a:	f43f ae34 	beq.w	8001176 <StarLPTask+0x12a>
 800150e:	e643      	b.n	8001198 <StarLPTask+0x14c>
					gainchanged = bumppga(-1);
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f001 fb22 	bl	8002b5c <bumppga>
 8001518:	b280      	uxth	r0, r0
			if (gainchanged == 0) {		// gain not just changed
 800151a:	2800      	cmp	r0, #0
 800151c:	f43f ae2b 	beq.w	8001176 <StarLPTask+0x12a>
 8001520:	e63a      	b.n	8001198 <StarLPTask+0x14c>
					if (getpressure115() != HAL_OK) {
 8001522:	f001 fb5d 	bl	8002be0 <getpressure115>
 8001526:	2800      	cmp	r0, #0
 8001528:	f43f ae5e 	beq.w	80011e8 <StarLPTask+0x19c>
						printf("MPL115A2 error\n\r");
 800152c:	481f      	ldr	r0, [pc, #124]	; (80015ac <StarLPTask+0x560>)
 800152e:	f01c ff5b 	bl	801e3e8 <iprintf>
 8001532:	e659      	b.n	80011e8 <StarLPTask+0x19c>
					if (getpressure3115() != HAL_OK) {
 8001534:	f001 fce8 	bl	8002f08 <getpressure3115>
 8001538:	2800      	cmp	r0, #0
 800153a:	f43f ae55 	beq.w	80011e8 <StarLPTask+0x19c>
						printf("MPL3115A2 error\n\r");
 800153e:	481c      	ldr	r0, [pc, #112]	; (80015b0 <StarLPTask+0x564>)
 8001540:	f01c ff52 	bl	801e3e8 <iprintf>
 8001544:	e650      	b.n	80011e8 <StarLPTask+0x19c>
					rebootme();	// target udp host has changed or network has gone away
 8001546:	f7ff fd4f 	bl	8000fe8 <rebootme>
 800154a:	bf00      	nop
 800154c:	200222e8 	.word	0x200222e8
 8001550:	20000224 	.word	0x20000224
 8001554:	08021bcc 	.word	0x08021bcc
 8001558:	08021be8 	.word	0x08021be8
 800155c:	20000084 	.word	0x20000084
 8001560:	20022350 	.word	0x20022350
 8001564:	20022354 	.word	0x20022354
 8001568:	08021bf0 	.word	0x08021bf0
 800156c:	2000021c 	.word	0x2000021c
 8001570:	2002235c 	.word	0x2002235c
 8001574:	20022358 	.word	0x20022358
 8001578:	200000c4 	.word	0x200000c4
 800157c:	08021bf8 	.word	0x08021bf8
 8001580:	20000170 	.word	0x20000170
 8001584:	200008bd 	.word	0x200008bd
 8001588:	08021c84 	.word	0x08021c84
 800158c:	20000004 	.word	0x20000004
 8001590:	40020c00 	.word	0x40020c00
 8001594:	20000000 	.word	0x20000000
 8001598:	20021fc8 	.word	0x20021fc8
 800159c:	08021cd4 	.word	0x08021cd4
 80015a0:	08021ce0 	.word	0x08021ce0
 80015a4:	08021cac 	.word	0x08021cac
 80015a8:	08021cfc 	.word	0x08021cfc
 80015ac:	08021d18 	.word	0x08021d18
 80015b0:	08021d2c 	.word	0x08021d2c

080015b4 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 80015b4:	2100      	movs	r1, #0
 80015b6:	f004 b815 	b.w	80055e4 <HAL_DAC_Stop_DMA>
 80015ba:	bf00      	nop

080015bc <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80015c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c4:	481c      	ldr	r0, [pc, #112]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80015c6:	f006 f9a9 	bl	800791c <HAL_GPIO_TogglePin>
	if (htim->Instance == TIM2) {
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	d007      	beq.n	80015e2 <HAL_TIM_IC_CaptureCallback+0x26>
	if (htim->Instance == TIM4) {
 80015d2:	4a1a      	ldr	r2, [pc, #104]	; (800163c <HAL_TIM_IC_CaptureCallback+0x80>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d02a      	beq.n	800162e <HAL_TIM_IC_CaptureCallback+0x72>
	lastcap = t2cap[0];
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x84>)
 80015da:	4c1a      	ldr	r4, [pc, #104]	; (8001644 <HAL_TIM_IC_CaptureCallback+0x88>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6023      	str	r3, [r4, #0]
}
 80015e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60;// assume we get here before serial comms updates gps seconds field
 80015e2:	4e19      	ldr	r6, [pc, #100]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x8c>)
	uint32_t sum = 0;
 80015e4:	2100      	movs	r1, #0
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60;// assume we get here before serial comms updates gps seconds field
 80015e6:	4a19      	ldr	r2, [pc, #100]	; (800164c <HAL_TIM_IC_CaptureCallback+0x90>)
 80015e8:	7bb5      	ldrb	r5, [r6, #14]
 80015ea:	4f19      	ldr	r7, [pc, #100]	; (8001650 <HAL_TIM_IC_CaptureCallback+0x94>)
 80015ec:	3501      	adds	r5, #1
		diff = lastcap;
 80015ee:	4c15      	ldr	r4, [pc, #84]	; (8001644 <HAL_TIM_IC_CaptureCallback+0x88>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60;// assume we get here before serial comms updates gps seconds field
 80015f0:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001658 <HAL_TIM_IC_CaptureCallback+0x9c>
 80015f4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80015f8:	fba2 3205 	umull	r3, r2, r2, r5
		diff = lastcap;
 80015fc:	f8d4 c000 	ldr.w	ip, [r4]
 8001600:	463b      	mov	r3, r7
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60;// assume we get here before serial comms updates gps seconds field
 8001602:	0952      	lsrs	r2, r2, #5
 8001604:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001608:	eba5 0282 	sub.w	r2, r5, r2, lsl #2
 800160c:	f88e 2000 	strb.w	r2, [lr]
		data[i] = data[i + 1];		// old data is low index
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8001616:	4298      	cmp	r0, r3
		sum += data[i];
 8001618:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 800161a:	d1f9      	bne.n	8001610 <HAL_TIM_IC_CaptureCallback+0x54>
	sum += new;
 800161c:	4461      	add	r1, ip
	lastcap = t2cap[0];
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_TIM_IC_CaptureCallback+0x84>)
	data[15] = new;		// new data at the end
 8001620:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
	return (sum >> 4);
 8001624:	0909      	lsrs	r1, r1, #4
	lastcap = t2cap[0];
 8001626:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8001628:	65b1      	str	r1, [r6, #88]	; 0x58
	lastcap = t2cap[0];
 800162a:	6023      	str	r3, [r4, #0]
}
 800162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Timer4 callback\n");
 800162e:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001630:	f01c ff62 	bl	801e4f8 <puts>
 8001634:	e7d0      	b.n	80015d8 <HAL_TIM_IC_CaptureCallback+0x1c>
 8001636:	bf00      	nop
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40000800 	.word	0x40000800
 8001640:	200218e0 	.word	0x200218e0
 8001644:	2000085c 	.word	0x2000085c
 8001648:	2002183c 	.word	0x2002183c
 800164c:	88888889 	.word	0x88888889
 8001650:	2000081c 	.word	0x2000081c
 8001654:	08021aec 	.word	0x08021aec
 8001658:	20000778 	.word	0x20000778

0800165c <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 800165c:	6803      	ldr	r3, [r0, #0]
 800165e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001662:	d030      	beq.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x6a>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d034      	beq.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x78>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 800166a:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d005      	beq.n	800167c <HAL_TIM_PeriodElapsedCallback+0x20>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8001670:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d01a      	beq.n	80016ac <HAL_TIM_PeriodElapsedCallback+0x50>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001678:	f01c bf3e 	b.w	801e4f8 <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800167c:	b510      	push	{r4, lr}
		t1sec++;
 800167e:	491b      	ldr	r1, [pc, #108]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x90>)
		statuspkt.sysuptime++;
 8001680:	4c1b      	ldr	r4, [pc, #108]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
		t1sec++;
 8001682:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8001684:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8001686:	481b      	ldr	r0, [pc, #108]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
		t1sec++;
 8001688:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 800168a:	3301      	adds	r3, #1
		if (netup)
 800168c:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 800168e:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8001690:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8001692:	b110      	cbz	r0, 800169a <HAL_TIM_PeriodElapsedCallback+0x3e>
			statuspkt.netuptime++;
 8001694:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001696:	3301      	adds	r3, #1
 8001698:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b93b      	cbnz	r3, 80016b0 <HAL_TIM_PeriodElapsedCallback+0x54>
			epochvalid = 0;
 80016a0:	4a16      	ldr	r2, [pc, #88]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 80016a2:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 80016a4:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 80016a6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 80016aa:	bd10      	pop	{r4, pc}
		HAL_IncTick();
 80016ac:	f003 b972 	b.w	8004994 <HAL_IncTick>
			statuspkt.gpsuptime++;
 80016b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80016b2:	3301      	adds	r3, #1
 80016b4:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch();
 80016b6:	f000 ffeb 	bl	8002690 <calcepoch>
				epochvalid = 1;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80016bc:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch();
 80016be:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 80016c2:	701a      	strb	r2, [r3, #0]
}
 80016c4:	bd10      	pop	{r4, pc}
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80016ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80016d0:	f01c be8a 	b.w	801e3e8 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80016d6:	f01c bf0f 	b.w	801e4f8 <puts>
 80016da:	bf00      	nop
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40001000 	.word	0x40001000
 80016e4:	40001800 	.word	0x40001800
 80016e8:	08021b3c 	.word	0x08021b3c
 80016ec:	2000086c 	.word	0x2000086c
 80016f0:	2002183c 	.word	0x2002183c
 80016f4:	20000772 	.word	0x20000772
 80016f8:	200008bd 	.word	0x200008bd
 80016fc:	200008bc 	.word	0x200008bc
 8001700:	200218e0 	.word	0x200218e0
 8001704:	08021afc 	.word	0x08021afc
 8001708:	08021b20 	.word	0x08021b20

0800170c <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 800170c:	4c02      	ldr	r4, [pc, #8]	; (8001718 <Error_Handler+0xc>)
void Error_Handler(void) {
 800170e:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8001710:	4620      	mov	r0, r4
 8001712:	f01c fef1 	bl	801e4f8 <puts>
 8001716:	e7fb      	b.n	8001710 <Error_Handler+0x4>
 8001718:	08021ad4 	.word	0x08021ad4

0800171c <SystemClock_Config>:
void SystemClock_Config(void) {
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	b0b9      	sub	sp, #228	; 0xe4
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001720:	2234      	movs	r2, #52	; 0x34
 8001722:	2100      	movs	r1, #0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001724:	f44f 3680 	mov.w	r6, #65536	; 0x10000
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001728:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800172c:	f01b fedc 	bl	801d4e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001730:	2300      	movs	r3, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001732:	2290      	movs	r2, #144	; 0x90
 8001734:	a814      	add	r0, sp, #80	; 0x50
 8001736:	4619      	mov	r1, r3
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001738:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800173a:	2709      	movs	r7, #9
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800173c:	2501      	movs	r5, #1
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800173e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001742:	e9cd 3304 	strd	r3, r3, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001746:	f01b fecf 	bl	801d4e8 <memset>
	HAL_PWR_EnableBkUpAccess();
 800174a:	f007 fbf7 	bl	8008f3c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4a2c      	ldr	r2, [pc, #176]	; (8001800 <SystemClock_Config+0xe4>)
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <SystemClock_Config+0xe8>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001752:	a807      	add	r0, sp, #28
	__HAL_RCC_PWR_CLK_ENABLE();
 8001754:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001756:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800175a:	6411      	str	r1, [r2, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 4;
 800175c:	2104      	movs	r1, #4
	__HAL_RCC_PWR_CLK_ENABLE();
 800175e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001760:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001764:	9200      	str	r2, [sp, #0]
 8001766:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800176e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001770:	22d8      	movs	r2, #216	; 0xd8
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001772:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001774:	9608      	str	r6, [sp, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001776:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800177e:	9707      	str	r7, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001780:	950c      	str	r5, [sp, #48]	; 0x30
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	9b01      	ldr	r3, [sp, #4]
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8001786:	2306      	movs	r3, #6
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001788:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178a:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 216;
 800178c:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 6;
 800178e:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001790:	e9cd 610e 	strd	r6, r1, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001794:	f007 fc16 	bl	8008fc4 <HAL_RCC_OscConfig>
 8001798:	bb78      	cbnz	r0, 80017fa <SystemClock_Config+0xde>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800179a:	f007 fbd7 	bl	8008f4c <HAL_PWREx_EnableOverDrive>
 800179e:	4603      	mov	r3, r0
 80017a0:	bb58      	cbnz	r0, 80017fa <SystemClock_Config+0xde>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017a2:	210f      	movs	r1, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a8:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017ae:	9102      	str	r1, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80017b0:	a802      	add	r0, sp, #8
 80017b2:	2107      	movs	r1, #7
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b4:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80017ba:	f007 fea9 	bl	8009510 <HAL_RCC_ClockConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	b9d8      	cbnz	r0, 80017fa <SystemClock_Config+0xde>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_USART6
 80017c2:	4f11      	ldr	r7, [pc, #68]	; (8001808 <SystemClock_Config+0xec>)
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80017c4:	26c0      	movs	r6, #192	; 0xc0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017c6:	2103      	movs	r1, #3
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80017c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80017cc:	a814      	add	r0, sp, #80	; 0x50
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80017ce:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80017d0:	931f      	str	r3, [sp, #124]	; 0x7c
	PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80017d2:	9330      	str	r3, [sp, #192]	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_USART6
 80017d4:	9714      	str	r7, [sp, #80]	; 0x50
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80017d6:	9619      	str	r6, [sp, #100]	; 0x64
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017d8:	911c      	str	r1, [sp, #112]	; 0x70
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80017da:	9233      	str	r2, [sp, #204]	; 0xcc
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80017dc:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017e0:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80017e4:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80017e8:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017ec:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80017f0:	f007 fff4 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 80017f4:	b908      	cbnz	r0, 80017fa <SystemClock_Config+0xde>
}
 80017f6:	b039      	add	sp, #228	; 0xe4
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Error_Handler();
 80017fa:	f7ff ff87 	bl	800170c <Error_Handler>
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40007000 	.word	0x40007000
 8001808:	0022df80 	.word	0x0022df80

0800180c <main>:
int main(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b0d4      	sub	sp, #336	; 0x150
 8001810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001814:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001818:	4bb4      	ldr	r3, [pc, #720]	; (8001aec <main+0x2e0>)
 800181a:	2400      	movs	r4, #0
 800181c:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001820:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001824:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800182e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001830:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001834:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001838:	4dad      	ldr	r5, [pc, #692]	; (8001af0 <main+0x2e4>)
	HAL_Init();
 800183a:	f003 f899 	bl	8004970 <HAL_Init>
	SystemClock_Config();
 800183e:	f7ff ff6d 	bl	800171c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001842:	944d      	str	r4, [sp, #308]	; 0x134
 8001844:	944e      	str	r4, [sp, #312]	; 0x138
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001846:	f44f 7100 	mov.w	r1, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800184a:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800184c:	4622      	mov	r2, r4
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800184e:	9450      	str	r4, [sp, #320]	; 0x140
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2601      	movs	r6, #1
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001852:	9451      	str	r4, [sp, #324]	; 0x144
	GPIO_InitStruct.Pin = probe1_Pin;
 8001854:	4689      	mov	r9, r1
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001856:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001858:	f04f 0802 	mov.w	r8, #2
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800185c:	48a5      	ldr	r0, [pc, #660]	; (8001af4 <main+0x2e8>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185e:	2703      	movs	r7, #3
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001860:	f043 0310 	orr.w	r3, r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001864:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8001b1c <main+0x310>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001868:	632b      	str	r3, [r5, #48]	; 0x30
 800186a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001874:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	632b      	str	r3, [r5, #48]	; 0x30
 800187c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	9303      	str	r3, [sp, #12]
 8001884:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001886:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001888:	f043 0320 	orr.w	r3, r3, #32
 800188c:	632b      	str	r3, [r5, #48]	; 0x30
 800188e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	9304      	str	r3, [sp, #16]
 8001896:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001898:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800189a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189e:	632b      	str	r3, [r5, #48]	; 0x30
 80018a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a6:	9305      	str	r3, [sp, #20]
 80018a8:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	632b      	str	r3, [r5, #48]	; 0x30
 80018b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	9306      	str	r3, [sp, #24]
 80018ba:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	632b      	str	r3, [r5, #48]	; 0x30
 80018c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	9307      	str	r3, [sp, #28]
 80018cc:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80018ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d4:	632b      	str	r3, [r5, #48]	; 0x30
 80018d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018dc:	9308      	str	r3, [sp, #32]
 80018de:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	632b      	str	r3, [r5, #48]	; 0x30
 80018e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	9309      	str	r3, [sp, #36]	; 0x24
 80018f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 80018f2:	f005 fff9 	bl	80078e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80018f6:	4622      	mov	r2, r4
 80018f8:	f644 0181 	movw	r1, #18561	; 0x4881
 80018fc:	487e      	ldr	r0, [pc, #504]	; (8001af8 <main+0x2ec>)
 80018fe:	f005 fff3 	bl	80078e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | LP_FILT_Pin | XBEE_RST_Pin | GPIO_PIN_0, GPIO_PIN_RESET);
 8001902:	4622      	mov	r2, r4
 8001904:	f24c 4101 	movw	r1, #50177	; 0xc401
 8001908:	487c      	ldr	r0, [pc, #496]	; (8001afc <main+0x2f0>)
 800190a:	f005 ffed 	bl	80078e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 800190e:	4632      	mov	r2, r6
 8001910:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001914:	487a      	ldr	r0, [pc, #488]	; (8001b00 <main+0x2f4>)
 8001916:	f005 ffe7 	bl	80078e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800191a:	4622      	mov	r2, r4
 800191c:	2144      	movs	r1, #68	; 0x44
 800191e:	4879      	ldr	r0, [pc, #484]	; (8001b04 <main+0x2f8>)
 8001920:	f005 ffe2 	bl	80078e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8001924:	4622      	mov	r2, r4
 8001926:	4641      	mov	r1, r8
 8001928:	4875      	ldr	r0, [pc, #468]	; (8001b00 <main+0x2f4>)
 800192a:	f005 ffdd 	bl	80078e8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_1;
 800192e:	f643 138a 	movw	r3, #14730	; 0x398a
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001932:	a94d      	add	r1, sp, #308	; 0x134
 8001934:	4871      	ldr	r0, [pc, #452]	; (8001afc <main+0x2f0>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_1;
 8001936:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	974e      	str	r7, [sp, #312]	; 0x138
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193c:	f005 fe1e 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001944:	a94d      	add	r1, sp, #308	; 0x134
 8001946:	4870      	ldr	r0, [pc, #448]	; (8001b08 <main+0x2fc>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001948:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800194c:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001950:	f005 fe14 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 8001954:	f643 433c 	movw	r3, #15420	; 0x3c3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001958:	a94d      	add	r1, sp, #308	; 0x134
 800195a:	4866      	ldr	r0, [pc, #408]	; (8001af4 <main+0x2e8>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 800195c:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195e:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001962:	f005 fe0b 	bl	800757c <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8001966:	a94d      	add	r1, sp, #308	; 0x134
 8001968:	4862      	ldr	r0, [pc, #392]	; (8001af4 <main+0x2e8>)
	GPIO_InitStruct.Pin = probe1_Pin;
 800196a:	f8cd 9134 	str.w	r9, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001970:	964f      	str	r6, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001972:	f8cd 8140 	str.w	r8, [sp, #320]	; 0x140
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8001976:	f005 fe01 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9;
 800197a:	f240 3301 	movw	r3, #769	; 0x301
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	a94d      	add	r1, sp, #308	; 0x134
 8001980:	4861      	ldr	r0, [pc, #388]	; (8001b08 <main+0x2fc>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9;
 8001982:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001984:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001988:	f005 fdf8 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 800198c:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	a94d      	add	r1, sp, #308	; 0x134
 8001992:	4859      	ldr	r0, [pc, #356]	; (8001af8 <main+0x2ec>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8001994:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	9450      	str	r4, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f005 fdee 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80019a0:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	a94d      	add	r1, sp, #308	; 0x134
 80019a4:	4854      	ldr	r0, [pc, #336]	; (8001af8 <main+0x2ec>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80019a6:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a8:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f005 fde6 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_12
 80019b0:	f24d 433b 	movw	r3, #54331	; 0xd43b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019b4:	a94d      	add	r1, sp, #308	; 0x134
 80019b6:	4853      	ldr	r0, [pc, #332]	; (8001b04 <main+0x2f8>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_12
 80019b8:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ba:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019be:	f005 fddd 	bl	800757c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c2:	a94d      	add	r1, sp, #308	; 0x134
 80019c4:	484d      	ldr	r0, [pc, #308]	; (8001afc <main+0x2f0>)
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019c6:	f8cd 9134 	str.w	r9, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ca:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d0:	f005 fdd4 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | LP_FILT_Pin | XBEE_RST_Pin | GPIO_PIN_0;
 80019d4:	f24c 4301 	movw	r3, #50177	; 0xc401
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d8:	a94d      	add	r1, sp, #308	; 0x134
 80019da:	4848      	ldr	r0, [pc, #288]	; (8001afc <main+0x2f0>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | LP_FILT_Pin | XBEE_RST_Pin | GPIO_PIN_0;
 80019dc:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	9450      	str	r4, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e4:	f005 fdca 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 80019e8:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ec:	a94d      	add	r1, sp, #308	; 0x134
 80019ee:	4844      	ldr	r0, [pc, #272]	; (8001b00 <main+0x2f4>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 80019f0:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f2:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f6:	f005 fdc1 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 80019fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fe:	a94d      	add	r1, sp, #308	; 0x134
 8001a00:	483f      	ldr	r0, [pc, #252]	; (8001b00 <main+0x2f4>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8001a02:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	9450      	str	r4, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a0a:	f005 fdb7 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8001a0e:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a10:	a94d      	add	r1, sp, #308	; 0x134
 8001a12:	483c      	ldr	r0, [pc, #240]	; (8001b04 <main+0x2f8>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8001a14:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a16:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	9450      	str	r4, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a1c:	f005 fdae 	bl	800757c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a20:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a22:	a94d      	add	r1, sp, #308	; 0x134
 8001a24:	4837      	ldr	r0, [pc, #220]	; (8001b04 <main+0x2f8>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a26:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	944e      	str	r4, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f005 fda6 	bl	800757c <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8001a30:	a94d      	add	r1, sp, #308	; 0x134
 8001a32:	4833      	ldr	r0, [pc, #204]	; (8001b00 <main+0x2f4>)
	GPIO_InitStruct.Pin = probe2_Pin;
 8001a34:	f8cd 8134 	str.w	r8, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3a:	964f      	str	r6, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3c:	f8cd 8140 	str.w	r8, [sp, #320]	; 0x140
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f005 fd9c 	bl	800757c <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001a44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001a46:	4622      	mov	r2, r4
 8001a48:	2105      	movs	r1, #5
 8001a4a:	200c      	movs	r0, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a50:	632b      	str	r3, [r5, #48]	; 0x30
 8001a52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001a5c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001a5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a62:	632b      	str	r3, [r5, #48]	; 0x30
 8001a64:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001a6e:	f003 fbf1 	bl	8005254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a72:	200c      	movs	r0, #12
 8001a74:	f003 fc34 	bl	80052e0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8001a78:	4622      	mov	r2, r4
 8001a7a:	2106      	movs	r1, #6
 8001a7c:	2010      	movs	r0, #16
 8001a7e:	f003 fbe9 	bl	8005254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a82:	2010      	movs	r0, #16
 8001a84:	f003 fc2c 	bl	80052e0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8001a88:	4622      	mov	r2, r4
 8001a8a:	2106      	movs	r1, #6
 8001a8c:	2039      	movs	r0, #57	; 0x39
 8001a8e:	f003 fbe1 	bl	8005254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a92:	2039      	movs	r0, #57	; 0x39
 8001a94:	f003 fc24 	bl	80052e0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001a98:	4622      	mov	r2, r4
 8001a9a:	2105      	movs	r1, #5
 8001a9c:	203c      	movs	r0, #60	; 0x3c
 8001a9e:	f003 fbd9 	bl	8005254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001aa2:	203c      	movs	r0, #60	; 0x3c
 8001aa4:	f003 fc1c 	bl	80052e0 <HAL_NVIC_EnableIRQ>
	hmdios.Instance = MDIOS;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <main+0x300>)
 8001aaa:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <main+0x304>)
	if (HAL_MDIOS_Init(&hmdios) != HAL_OK) {
 8001aac:	4618      	mov	r0, r3
	hmdios.Instance = MDIOS;
 8001aae:	601a      	str	r2, [r3, #0]
	hmdios.Init.PreambleCheck = MDIOS_PREAMBLE_CHECK_ENABLE;
 8001ab0:	e9c3 4401 	strd	r4, r4, [r3, #4]
	if (HAL_MDIOS_Init(&hmdios) != HAL_OK) {
 8001ab4:	f006 fbbe 	bl	8008234 <HAL_MDIOS_Init>
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	f040 843d 	bne.w	8002338 <main+0xb2c>
 8001abe:	4603      	mov	r3, r0
	huart2.Instance = USART2;
 8001ac0:	4c14      	ldr	r4, [pc, #80]	; (8001b14 <main+0x308>)
	huart2.Init.BaudRate = 115200;
 8001ac2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart2.Instance = USART2;
 8001ac6:	4914      	ldr	r1, [pc, #80]	; (8001b18 <main+0x30c>)
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	250c      	movs	r5, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	60a0      	str	r0, [r4, #8]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001acc:	4620      	mov	r0, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ace:	6165      	str	r5, [r4, #20]
	huart2.Init.BaudRate = 115200;
 8001ad0:	e9c4 1200 	strd	r1, r2, [r4]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4619      	mov	r1, r3
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ad8:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	e9c4 3306 	strd	r3, r3, [r4, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001ae4:	f00c f8dc 	bl	800dca0 <HAL_RS485Ex_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	e019      	b.n	8001b20 <main+0x314>
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40021400 	.word	0x40021400
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	20021edc 	.word	0x20021edc
 8001b10:	40017800 	.word	0x40017800
 8001b14:	200221a4 	.word	0x200221a4
 8001b18:	40004400 	.word	0x40004400
 8001b1c:	10110000 	.word	0x10110000
 8001b20:	2800      	cmp	r0, #0
 8001b22:	f040 8409 	bne.w	8002338 <main+0xb2c>
	hadc1.Instance = ADC1;
 8001b26:	4cb4      	ldr	r4, [pc, #720]	; (8001df8 <main+0x5ec>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b28:	f44f 3580 	mov.w	r5, #65536	; 0x10000
	hadc1.Instance = ADC1;
 8001b2c:	49b3      	ldr	r1, [pc, #716]	; (8001dfc <main+0x5f0>)
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b2e:	4ab4      	ldr	r2, [pc, #720]	; (8001e00 <main+0x5f4>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8001b30:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001b32:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001b34:	933d      	str	r3, [sp, #244]	; 0xf4
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b36:	60a3      	str	r3, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b38:	6123      	str	r3, [r4, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001b3a:	61a6      	str	r6, [r4, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b3c:	f884 3020 	strb.w	r3, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b40:	62e3      	str	r3, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b42:	60e3      	str	r3, [r4, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001b44:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b46:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b4a:	6163      	str	r3, [r4, #20]
	hadc1.Instance = ADC1;
 8001b4c:	6021      	str	r1, [r4, #0]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b4e:	62a2      	str	r2, [r4, #40]	; 0x28
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b50:	6065      	str	r5, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001b52:	9340      	str	r3, [sp, #256]	; 0x100
	ADC_MultiModeTypeDef multimode = { 0 };
 8001b54:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001b58:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001b5c:	f002 ff3e 	bl	80049dc <HAL_ADC_Init>
 8001b60:	2800      	cmp	r0, #0
 8001b62:	f040 83e9 	bne.w	8002338 <main+0xb2c>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8001b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.Mode = ADC_TRIPLEMODE_INTERL;
 8001b6a:	2217      	movs	r2, #23
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001b6c:	9020      	str	r0, [sp, #128]	; 0x80
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001b6e:	a91e      	add	r1, sp, #120	; 0x78
 8001b70:	4620      	mov	r0, r4
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8001b72:	931f      	str	r3, [sp, #124]	; 0x7c
	multimode.Mode = ADC_TRIPLEMODE_INTERL;
 8001b74:	921e      	str	r2, [sp, #120]	; 0x78
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001b76:	f003 faef 	bl	8005158 <HAL_ADCEx_MultiModeConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	f040 83db 	bne.w	8002338 <main+0xb2c>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b82:	4620      	mov	r0, r4
 8001b84:	a93d      	add	r1, sp, #244	; 0xf4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b86:	933f      	str	r3, [sp, #252]	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b88:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b8c:	f003 fa02 	bl	8004f94 <HAL_ADC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2800      	cmp	r0, #0
 8001b94:	f040 83d0 	bne.w	8002338 <main+0xb2c>
	hadc2.Instance = ADC2;
 8001b98:	4c9a      	ldr	r4, [pc, #616]	; (8001e04 <main+0x5f8>)
 8001b9a:	4a9b      	ldr	r2, [pc, #620]	; (8001e08 <main+0x5fc>)
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001b9c:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001b9e:	9339      	str	r3, [sp, #228]	; 0xe4
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ba0:	6123      	str	r3, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ba2:	f884 3020 	strb.w	r3, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ba6:	60e3      	str	r3, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ba8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bac:	6163      	str	r3, [r4, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001bae:	933c      	str	r3, [sp, #240]	; 0xf0
	hadc2.Init.ContinuousConvMode = ENABLE;
 8001bb0:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8001bb2:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8001bb4:	6022      	str	r2, [r4, #0]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001bb6:	e9c4 5301 	strd	r5, r3, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001bba:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001bbe:	f002 ff0d 	bl	80049dc <HAL_ADC_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	f040 83b7 	bne.w	8002338 <main+0xb2c>
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001bca:	4620      	mov	r0, r4
 8001bcc:	a939      	add	r1, sp, #228	; 0xe4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bce:	933b      	str	r3, [sp, #236]	; 0xec
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bd0:	e9cd 7639 	strd	r7, r6, [sp, #228]	; 0xe4
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001bd4:	f003 f9de 	bl	8004f94 <HAL_ADC_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	f040 83ac 	bne.w	8002338 <main+0xb2c>
	hadc3.Instance = ADC3;
 8001be0:	4c8a      	ldr	r4, [pc, #552]	; (8001e0c <main+0x600>)
 8001be2:	4a8b      	ldr	r2, [pc, #556]	; (8001e10 <main+0x604>)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001be4:	9035      	str	r0, [sp, #212]	; 0xd4
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001be6:	4620      	mov	r0, r4
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001be8:	6123      	str	r3, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001bea:	f884 3020 	strb.w	r3, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bee:	60e3      	str	r3, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001bf0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bf4:	6163      	str	r3, [r4, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001bf6:	9338      	str	r3, [sp, #224]	; 0xe0
	hadc3.Init.ContinuousConvMode = ENABLE;
 8001bf8:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8001bfa:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8001bfc:	6022      	str	r2, [r4, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001bfe:	e9c4 5301 	strd	r5, r3, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001c02:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001c06:	f002 fee9 	bl	80049dc <HAL_ADC_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	f040 8393 	bne.w	8002338 <main+0xb2c>
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001c12:	4620      	mov	r0, r4
 8001c14:	a935      	add	r1, sp, #212	; 0xd4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c16:	9337      	str	r3, [sp, #220]	; 0xdc
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c18:	e9cd 7635 	strd	r7, r6, [sp, #212]	; 0xd4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001c1c:	f003 f9ba 	bl	8004f94 <HAL_ADC_ConfigChannel>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	f040 8389 	bne.w	8002338 <main+0xb2c>
	hrng.Instance = RNG;
 8001c26:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <main+0x608>)
 8001c28:	4a7b      	ldr	r2, [pc, #492]	; (8001e18 <main+0x60c>)
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001c2a:	4618      	mov	r0, r3
	hrng.Instance = RNG;
 8001c2c:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001c2e:	f008 fab5 	bl	800a19c <HAL_RNG_Init>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	f040 8380 	bne.w	8002338 <main+0xb2c>
	htim6.Instance = TIM6;
 8001c38:	4c78      	ldr	r4, [pc, #480]	; (8001e1c <main+0x610>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c3a:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8001c3c:	4a78      	ldr	r2, [pc, #480]	; (8001e20 <main+0x614>)
	htim6.Init.Prescaler = 10800;
 8001c3e:	f642 2730 	movw	r7, #10800	; 0x2a30
	htim6.Init.Period = 10000;
 8001c42:	f242 7510 	movw	r5, #10000	; 0x2710
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c46:	2680      	movs	r6, #128	; 0x80
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001c48:	4620      	mov	r0, r4
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c4c:	931d      	str	r3, [sp, #116]	; 0x74
	htim6.Init.Period = 10000;
 8001c4e:	60e5      	str	r5, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c50:	61a6      	str	r6, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c52:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	htim6.Init.Prescaler = 10800;
 8001c56:	e9c4 2700 	strd	r2, r7, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001c5a:	f009 fedb 	bl	800ba14 <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2800      	cmp	r0, #0
 8001c62:	f040 8369 	bne.w	8002338 <main+0xb2c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001c66:	2210      	movs	r2, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001c68:	a91b      	add	r1, sp, #108	; 0x6c
 8001c6a:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	931d      	str	r3, [sp, #116]	; 0x74
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001c6e:	921b      	str	r2, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001c70:	f00b f99e 	bl	800cfb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2800      	cmp	r0, #0
 8001c78:	f040 835e 	bne.w	8002338 <main+0xb2c>
	htim3.Instance = TIM3;
 8001c7c:	4c69      	ldr	r4, [pc, #420]	; (8001e24 <main+0x618>)
 8001c7e:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <main+0x61c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001c80:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c82:	9018      	str	r0, [sp, #96]	; 0x60
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c84:	904d      	str	r0, [sp, #308]	; 0x134
 8001c86:	904e      	str	r0, [sp, #312]	; 0x138
 8001c88:	904f      	str	r0, [sp, #316]	; 0x13c
 8001c8a:	9050      	str	r0, [sp, #320]	; 0x140
 8001c8c:	9051      	str	r0, [sp, #324]	; 0x144
 8001c8e:	9052      	str	r0, [sp, #328]	; 0x148
 8001c90:	9053      	str	r0, [sp, #332]	; 0x14c
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001c92:	4620      	mov	r0, r4
	htim3.Init.Prescaler = 10800;
 8001c94:	6067      	str	r7, [r4, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	6123      	str	r3, [r4, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c98:	61a6      	str	r6, [r4, #24]
	htim3.Instance = TIM3;
 8001c9a:	6022      	str	r2, [r4, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001c9c:	9334      	str	r3, [sp, #208]	; 0xd0
	htim3.Init.Period = 10000;
 8001c9e:	e9c4 3502 	strd	r3, r5, [r4, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ca2:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ca6:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001caa:	f009 feb3 	bl	800ba14 <HAL_TIM_Base_Init>
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	f040 8342 	bne.w	8002338 <main+0xb2c>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001cb8:	a931      	add	r1, sp, #196	; 0xc4
 8001cba:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbc:	9331      	str	r3, [sp, #196]	; 0xc4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001cbe:	f009 f9bb 	bl	800b038 <HAL_TIM_ConfigClockSource>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	f040 8338 	bne.w	8002338 <main+0xb2c>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f00a f81f 	bl	800bd0c <HAL_TIM_PWM_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	f040 8331 	bne.w	8002338 <main+0xb2c>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001cd6:	a918      	add	r1, sp, #96	; 0x60
 8001cd8:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cdc:	931a      	str	r3, [sp, #104]	; 0x68
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001cde:	f00b f967 	bl	800cfb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	f040 8328 	bne.w	8002338 <main+0xb2c>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce8:	2560      	movs	r5, #96	; 0x60
	sConfigOC.Pulse = 10;
 8001cea:	230a      	movs	r3, #10
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cec:	904f      	str	r0, [sp, #316]	; 0x13c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001cee:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf0:	9051      	str	r0, [sp, #324]	; 0x144
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001cf2:	a94d      	add	r1, sp, #308	; 0x134
 8001cf4:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf6:	954d      	str	r5, [sp, #308]	; 0x134
	sConfigOC.Pulse = 10;
 8001cf8:	934e      	str	r3, [sp, #312]	; 0x138
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001cfa:	f00a fb69 	bl	800c3d0 <HAL_TIM_PWM_ConfigChannel>
 8001cfe:	4605      	mov	r5, r0
 8001d00:	2800      	cmp	r0, #0
 8001d02:	f040 8319 	bne.w	8002338 <main+0xb2c>
	HAL_TIM_MspPostInit(&htim3);
 8001d06:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8001d08:	4c48      	ldr	r4, [pc, #288]	; (8001e2c <main+0x620>)
	HAL_TIM_MspPostInit(&htim3);
 8001d0a:	f001 fe3d 	bl	8003988 <HAL_TIM_MspPostInit>
	htim7.Init.Period = 9600;
 8001d0e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	htim7.Instance = TIM7;
 8001d12:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <main+0x624>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001d14:	4620      	mov	r0, r4
	htim7.Init.Period = 9600;
 8001d16:	60e3      	str	r3, [r4, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d18:	9515      	str	r5, [sp, #84]	; 0x54
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d1a:	61a6      	str	r6, [r4, #24]
	htim7.Instance = TIM7;
 8001d1c:	6022      	str	r2, [r4, #0]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1e:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d22:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001d26:	f009 fe75 	bl	800ba14 <HAL_TIM_Base_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	f040 8303 	bne.w	8002338 <main+0xb2c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d32:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8001d34:	a915      	add	r1, sp, #84	; 0x54
 8001d36:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d38:	9317      	str	r3, [sp, #92]	; 0x5c
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d3a:	9215      	str	r2, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8001d3c:	f00b f938 	bl	800cfb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2800      	cmp	r0, #0
 8001d44:	f040 82f8 	bne.w	8002338 <main+0xb2c>
	htim1.Instance = TIM1;
 8001d48:	4a3a      	ldr	r2, [pc, #232]	; (8001e34 <main+0x628>)
 8001d4a:	493b      	ldr	r1, [pc, #236]	; (8001e38 <main+0x62c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d4c:	902d      	str	r0, [sp, #180]	; 0xb4
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001d4e:	4610      	mov	r0, r2
	htim1.Instance = TIM1;
 8001d50:	6011      	str	r1, [r2, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d52:	9330      	str	r3, [sp, #192]	; 0xc0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d54:	9314      	str	r3, [sp, #80]	; 0x50
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	e9c2 3301 	strd	r3, r3, [r2, #4]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	e9c2 3303 	strd	r3, r3, [r2, #12]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5e:	e9c2 3305 	strd	r3, r3, [r2, #20]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d62:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d66:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001d6a:	f009 fe53 	bl	800ba14 <HAL_TIM_Base_Init>
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	f040 82e2 	bne.w	8002338 <main+0xb2c>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d74:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001d78:	a92d      	add	r1, sp, #180	; 0xb4
 8001d7a:	482e      	ldr	r0, [pc, #184]	; (8001e34 <main+0x628>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7c:	972d      	str	r7, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001d7e:	f009 f95b 	bl	800b038 <HAL_TIM_ConfigClockSource>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f040 82d8 	bne.w	8002338 <main+0xb2c>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	9014      	str	r0, [sp, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001d8a:	a912      	add	r1, sp, #72	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d8c:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001d90:	4828      	ldr	r0, [pc, #160]	; (8001e34 <main+0x628>)
 8001d92:	f00b f90d 	bl	800cfb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4602      	mov	r2, r0
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	f040 82cd 	bne.w	8002338 <main+0xb2c>
	hcrc.Instance = CRC;
 8001d9e:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <main+0x630>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001da0:	2601      	movs	r6, #1
	hcrc.Instance = CRC;
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <main+0x634>)
 8001da4:	8098      	strh	r0, [r3, #4]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001da6:	4618      	mov	r0, r3
	hcrc.Instance = CRC;
 8001da8:	6019      	str	r1, [r3, #0]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001daa:	621e      	str	r6, [r3, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001dac:	e9c3 2205 	strd	r2, r2, [r3, #20]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001db0:	f003 faaa 	bl	8005308 <HAL_CRC_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2800      	cmp	r0, #0
 8001db8:	f040 82be 	bne.w	8002338 <main+0xb2c>
	htim2.Instance = TIM2;
 8001dbc:	4c21      	ldr	r4, [pc, #132]	; (8001e44 <main+0x638>)
 8001dbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.Period = 4000000000;
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <main+0x63c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001dc4:	ad41      	add	r5, sp, #260	; 0x104
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001dc6:	9025      	str	r0, [sp, #148]	; 0x94
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001dc8:	9041      	str	r0, [sp, #260]	; 0x104
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001dca:	4620      	mov	r0, r4
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001dcc:	9329      	str	r3, [sp, #164]	; 0xa4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	61a3      	str	r3, [r4, #24]
	htim2.Instance = TIM2;
 8001dd2:	6021      	str	r1, [r4, #0]
	htim2.Init.Period = 4000000000;
 8001dd4:	60e2      	str	r2, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001dd6:	9328      	str	r3, [sp, #160]	; 0xa0
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001dd8:	9342      	str	r3, [sp, #264]	; 0x108
 8001dda:	9343      	str	r3, [sp, #268]	; 0x10c
 8001ddc:	9344      	str	r3, [sp, #272]	; 0x110
 8001dde:	9345      	str	r3, [sp, #276]	; 0x114
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001de0:	9311      	str	r3, [sp, #68]	; 0x44
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001de2:	932c      	str	r3, [sp, #176]	; 0xb0
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001de8:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001dec:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001df0:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
 8001df4:	e02a      	b.n	8001e4c <main+0x640>
 8001df6:	bf00      	nop
 8001df8:	20021e4c 	.word	0x20021e4c
 8001dfc:	40012000 	.word	0x40012000
 8001e00:	0f000001 	.word	0x0f000001
 8001e04:	20021b48 	.word	0x20021b48
 8001e08:	40012100 	.word	0x40012100
 8001e0c:	20021e94 	.word	0x20021e94
 8001e10:	40012200 	.word	0x40012200
 8001e14:	20022050 	.word	0x20022050
 8001e18:	50060800 	.word	0x50060800
 8001e1c:	20021fcc 	.word	0x20021fcc
 8001e20:	40001000 	.word	0x40001000
 8001e24:	20021cc8 	.word	0x20021cc8
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	20022224 	.word	0x20022224
 8001e30:	40001400 	.word	0x40001400
 8001e34:	2002200c 	.word	0x2002200c
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	20021bf0 	.word	0x20021bf0
 8001e40:	40023000 	.word	0x40023000
 8001e44:	20022164 	.word	0x20022164
 8001e48:	ee6b2800 	.word	0xee6b2800
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001e4c:	f009 fde2 	bl	800ba14 <HAL_TIM_Base_Init>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	f040 8271 	bne.w	8002338 <main+0xb2c>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e56:	a925      	add	r1, sp, #148	; 0x94
 8001e58:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5a:	9725      	str	r7, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e5c:	f009 f8ec 	bl	800b038 <HAL_TIM_ConfigClockSource>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	f040 8269 	bne.w	8002338 <main+0xb2c>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001e66:	4620      	mov	r0, r4
 8001e68:	f00a f80e 	bl	800be88 <HAL_TIM_IC_Init>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	f040 8263 	bne.w	8002338 <main+0xb2c>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001e72:	2704      	movs	r7, #4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e74:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e76:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8001e78:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8001e7a:	9045      	str	r0, [sp, #276]	; 0x114
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8001e7c:	4620      	mov	r0, r4
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001e7e:	9741      	str	r7, [sp, #260]	; 0x104
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e80:	9342      	str	r3, [sp, #264]	; 0x108
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8001e82:	f009 fba9 	bl	800b5d8 <HAL_TIM_SlaveConfigSynchro>
 8001e86:	2800      	cmp	r0, #0
 8001e88:	f040 8256 	bne.w	8002338 <main+0xb2c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8c:	900f      	str	r0, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001e8e:	a90f      	add	r1, sp, #60	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e90:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001e92:	4620      	mov	r0, r4
 8001e94:	f00b f88c 	bl	800cfb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	f040 824c 	bne.w	8002338 <main+0xb2c>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001ea0:	4602      	mov	r2, r0
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ea2:	9029      	str	r0, [sp, #164]	; 0xa4
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001ea4:	a929      	add	r1, sp, #164	; 0xa4
 8001ea6:	4620      	mov	r0, r4
	sConfigIC.ICFilter = 0;
 8001ea8:	932c      	str	r3, [sp, #176]	; 0xb0
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001eaa:	e9cd 632a 	strd	r6, r3, [sp, #168]	; 0xa8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001eae:	f00a fcb9 	bl	800c824 <HAL_TIM_IC_ConfigChannel>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	f040 8240 	bne.w	8002338 <main+0xb2c>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001eb8:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001eba:	463a      	mov	r2, r7
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	a929      	add	r1, sp, #164	; 0xa4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ec0:	932a      	str	r3, [sp, #168]	; 0xa8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001ec2:	f00a fcaf 	bl	800c824 <HAL_TIM_IC_ConfigChannel>
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	f040 8236 	bne.w	8002338 <main+0xb2c>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8001ecc:	a929      	add	r1, sp, #164	; 0xa4
 8001ece:	2208      	movs	r2, #8
 8001ed0:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ed2:	962a      	str	r6, [sp, #168]	; 0xa8
 8001ed4:	4637      	mov	r7, r6
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8001ed6:	f00a fca5 	bl	800c824 <HAL_TIM_IC_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2800      	cmp	r0, #0
 8001ede:	f040 822b 	bne.w	8002338 <main+0xb2c>
	huart6.Instance = USART6;
 8001ee2:	4cc3      	ldr	r4, [pc, #780]	; (80021f0 <main+0x9e4>)
	huart6.Init.BaudRate = 9600;
 8001ee4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	huart6.Instance = USART6;
 8001ee8:	f8df e364 	ldr.w	lr, [pc, #868]	; 8002250 <main+0xa44>
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001eec:	2130      	movs	r1, #48	; 0x30
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001eee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001ef2:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001ef6:	260c      	movs	r6, #12
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001ef8:	6261      	str	r1, [r4, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001efa:	63a2      	str	r2, [r4, #56]	; 0x38
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001efc:	4619      	mov	r1, r3
 8001efe:	461a      	mov	r2, r3
	huart6.Init.Parity = UART_PARITY_NONE;
 8001f00:	6123      	str	r3, [r4, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f02:	6223      	str	r3, [r4, #32]
	huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001f04:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001f08:	6166      	str	r6, [r4, #20]
	huart6.Init.BaudRate = 9600;
 8001f0a:	e9c4 e000 	strd	lr, r0, [r4]
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001f0e:	4620      	mov	r0, r4
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001f10:	e9c4 3302 	strd	r3, r3, [r4, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f14:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001f18:	f00b fec2 	bl	800dca0 <HAL_RS485Ex_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	f040 820a 	bne.w	8002338 <main+0xb2c>
	hdac.Instance = DAC;
 8001f24:	4cb3      	ldr	r4, [pc, #716]	; (80021f4 <main+0x9e8>)
 8001f26:	4ab4      	ldr	r2, [pc, #720]	; (80021f8 <main+0x9ec>)
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001f28:	4620      	mov	r0, r4
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8001f2c:	930b      	str	r3, [sp, #44]	; 0x2c
	hdac.Instance = DAC;
 8001f2e:	6022      	str	r2, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001f30:	f003 faac 	bl	800548c <HAL_DAC_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2800      	cmp	r0, #0
 8001f38:	f040 81fe 	bne.w	8002338 <main+0xb2c>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001f3c:	f04f 0c14 	mov.w	ip, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001f40:	461a      	mov	r2, r3
 8001f42:	4620      	mov	r0, r4
 8001f44:	a90a      	add	r1, sp, #40	; 0x28
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f46:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001f48:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001f4c:	f003 fbd2 	bl	80056f4 <HAL_DAC_ConfigChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2800      	cmp	r0, #0
 8001f54:	f040 81f0 	bne.w	8002338 <main+0xb2c>
	hi2c1.Instance = I2C1;
 8001f58:	4ca8      	ldr	r4, [pc, #672]	; (80021fc <main+0x9f0>)
 8001f5a:	4aa9      	ldr	r2, [pc, #676]	; (8002200 <main+0x9f4>)
	hi2c1.Init.OwnAddress1 = 0;
 8001f5c:	60a0      	str	r0, [r4, #8]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001f5e:	4620      	mov	r0, r4
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f60:	e9c4 7303 	strd	r7, r3, [r4, #12]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f64:	e9c4 3305 	strd	r3, r3, [r4, #20]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f68:	e9c4 3307 	strd	r3, r3, [r4, #28]
	hi2c1.Init.Timing = 0x20404768;
 8001f6c:	4ba5      	ldr	r3, [pc, #660]	; (8002204 <main+0x9f8>)
 8001f6e:	e9c4 2300 	strd	r2, r3, [r4]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001f72:	f005 fe53 	bl	8007c1c <HAL_I2C_Init>
 8001f76:	4601      	mov	r1, r0
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	f040 81dd 	bne.w	8002338 <main+0xb2c>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f006 f8b0 	bl	80080e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001f84:	4601      	mov	r1, r0
 8001f86:	2800      	cmp	r0, #0
 8001f88:	f040 81d6 	bne.w	8002338 <main+0xb2c>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f006 f8fb 	bl	8008188 <HAL_I2CEx_ConfigDigitalFilter>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	f040 81d0 	bne.w	8002338 <main+0xb2c>
	huart4.Instance = UART4;
 8001f98:	4b9b      	ldr	r3, [pc, #620]	; (8002208 <main+0x9fc>)
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001f9a:	f44f 7240 	mov.w	r2, #768	; 0x300
	huart4.Instance = UART4;
 8001f9e:	499b      	ldr	r1, [pc, #620]	; (800220c <main+0xa00>)
	huart4.Init.BaudRate = 115200;
 8001fa0:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa4:	6258      	str	r0, [r3, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001fa6:	619a      	str	r2, [r3, #24]
	huart4.Instance = UART4;
 8001fa8:	6019      	str	r1, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001faa:	605f      	str	r7, [r3, #4]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001fac:	e9c3 0002 	strd	r0, r0, [r3, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	e9c3 0604 	strd	r0, r6, [r3, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb4:	e9c3 0007 	strd	r0, r0, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00b fd9b 	bl	800daf4 <HAL_UART_Init>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	f040 81b9 	bne.w	8002338 <main+0xb2c>
	huart5.Instance = UART5;
 8001fc6:	4b92      	ldr	r3, [pc, #584]	; (8002210 <main+0xa04>)
 8001fc8:	4992      	ldr	r1, [pc, #584]	; (8002214 <main+0xa08>)
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001fca:	4618      	mov	r0, r3
	huart5.Init.BaudRate = 115200;
 8001fcc:	605f      	str	r7, [r3, #4]
	huart5.Instance = UART5;
 8001fce:	6019      	str	r1, [r3, #0]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	e9c3 2202 	strd	r2, r2, [r3, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	e9c3 2604 	strd	r2, r6, [r3, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	e9c3 2206 	strd	r2, r2, [r3, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fdc:	e9c3 2208 	strd	r2, r2, [r3, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001fe0:	f00b fd88 	bl	800daf4 <HAL_UART_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	f040 81a6 	bne.w	8002338 <main+0xb2c>
	huart7.Instance = UART7;
 8001fec:	4c8a      	ldr	r4, [pc, #552]	; (8002218 <main+0xa0c>)
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001fee:	461a      	mov	r2, r3
	huart7.Instance = UART7;
 8001ff0:	f8df c260 	ldr.w	ip, [pc, #608]	; 8002254 <main+0xa48>
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4620      	mov	r0, r4
	huart7.Init.BaudRate = 115200;
 8001ff8:	6067      	str	r7, [r4, #4]
	huart7.Instance = UART7;
 8001ffa:	f8c4 c000 	str.w	ip, [r4]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8001ffe:	e9c4 3302 	strd	r3, r3, [r4, #8]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8002002:	e9c4 3604 	strd	r3, r6, [r4, #16]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002006:	e9c4 3306 	strd	r3, r3, [r4, #24]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800200e:	f00b fe47 	bl	800dca0 <HAL_RS485Ex_Init>
 8002012:	2800      	cmp	r0, #0
 8002014:	f040 8190 	bne.w	8002338 <main+0xb2c>
	huart3.Instance = USART3;
 8002018:	4b80      	ldr	r3, [pc, #512]	; (800221c <main+0xa10>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	2400      	movs	r4, #0
	huart3.Instance = USART3;
 800201c:	4880      	ldr	r0, [pc, #512]	; (8002220 <main+0xa14>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800201e:	4622      	mov	r2, r4
 8002020:	4621      	mov	r1, r4
	huart3.Instance = USART3;
 8002022:	6018      	str	r0, [r3, #0]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8002024:	4618      	mov	r0, r3
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002026:	609c      	str	r4, [r3, #8]
	huart3.Init.BaudRate = 115200;
 8002028:	605f      	str	r7, [r3, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800202a:	615e      	str	r6, [r3, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 800202c:	e9c3 4403 	strd	r4, r4, [r3, #12]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	e9c3 4406 	strd	r4, r4, [r3, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002034:	e9c3 4408 	strd	r4, r4, [r3, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8002038:	f00b fdde 	bl	800dbf8 <HAL_MultiProcessor_Init>
 800203c:	2800      	cmp	r0, #0
 800203e:	f040 817b 	bne.w	8002338 <main+0xb2c>
	hspi4.Instance = SPI4;
 8002042:	4b78      	ldr	r3, [pc, #480]	; (8002224 <main+0xa18>)
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002044:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	hspi4.Instance = SPI4;
 8002048:	4977      	ldr	r1, [pc, #476]	; (8002228 <main+0xa1c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800204a:	f44f 7682 	mov.w	r6, #260	; 0x104
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800204e:	f44f 7940 	mov.w	r9, #768	; 0x300
	hspi4.Init.CRCPolynomial = 7;
 8002052:	2707      	movs	r7, #7
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002054:	2408      	movs	r4, #8
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002056:	6098      	str	r0, [r3, #8]
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002058:	6318      	str	r0, [r3, #48]	; 0x30
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800205a:	619a      	str	r2, [r3, #24]
	hspi4.Instance = SPI4;
 800205c:	6019      	str	r1, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800205e:	605e      	str	r6, [r3, #4]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8002060:	f8c3 900c 	str.w	r9, [r3, #12]
	hspi4.Init.CRCPolynomial = 7;
 8002064:	62df      	str	r7, [r3, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002066:	635c      	str	r4, [r3, #52]	; 0x34
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002068:	e9c3 0004 	strd	r0, r0, [r3, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800206c:	e9c3 0007 	strd	r0, r0, [r3, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002070:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8002074:	4618      	mov	r0, r3
 8002076:	f008 f937 	bl	800a2e8 <HAL_SPI_Init>
 800207a:	4602      	mov	r2, r0
 800207c:	2800      	cmp	r0, #0
 800207e:	f040 815b 	bne.w	8002338 <main+0xb2c>
	hspi3.Instance = SPI3;
 8002082:	4b6a      	ldr	r3, [pc, #424]	; (800222c <main+0xa20>)
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002084:	f44f 7800 	mov.w	r8, #512	; 0x200
	hspi3.Instance = SPI3;
 8002088:	4969      	ldr	r1, [pc, #420]	; (8002230 <main+0xa24>)
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800208a:	f8c3 900c 	str.w	r9, [r3, #12]
	hspi3.Instance = SPI3;
 800208e:	6019      	str	r1, [r3, #0]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002090:	f8c3 8018 	str.w	r8, [r3, #24]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002094:	e9c3 0001 	strd	r0, r0, [r3, #4]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002098:	4618      	mov	r0, r3
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800209a:	e9c3 2204 	strd	r2, r2, [r3, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800209e:	e9c3 2208 	strd	r2, r2, [r3, #32]
	hspi3.Init.CRCPolynomial = 7;
 80020a2:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020a6:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80020aa:	f008 f91d 	bl	800a2e8 <HAL_SPI_Init>
 80020ae:	4602      	mov	r2, r0
 80020b0:	2800      	cmp	r0, #0
 80020b2:	f040 8141 	bne.w	8002338 <main+0xb2c>
	hspi2.Instance = SPI2;
 80020b6:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <main+0xa28>)
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80020b8:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
	hspi2.Instance = SPI2;
 80020bc:	f8df e198 	ldr.w	lr, [pc, #408]	; 8002258 <main+0xa4c>
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80020c0:	2138      	movs	r1, #56	; 0x38
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80020c2:	f8c3 8018 	str.w	r8, [r3, #24]
	hspi2.Instance = SPI2;
 80020c6:	f8c3 e000 	str.w	lr, [r3]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80020ca:	f8c3 c00c 	str.w	ip, [r3, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80020ce:	61d9      	str	r1, [r3, #28]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020d0:	e9c3 6001 	strd	r6, r0, [r3, #4]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020d4:	e9c3 0004 	strd	r0, r0, [r3, #16]
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80020d8:	4618      	mov	r0, r3
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020da:	e9c3 2208 	strd	r2, r2, [r3, #32]
	hspi2.Init.CRCPolynomial = 7;
 80020de:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020e2:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80020e6:	f008 f8ff 	bl	800a2e8 <HAL_SPI_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2800      	cmp	r0, #0
 80020ee:	f040 8123 	bne.w	8002338 <main+0xb2c>
	hi2c4.Instance = I2C4;
 80020f2:	4c51      	ldr	r4, [pc, #324]	; (8002238 <main+0xa2c>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020f4:	2601      	movs	r6, #1
	hi2c4.Instance = I2C4;
 80020f6:	4a51      	ldr	r2, [pc, #324]	; (800223c <main+0xa30>)
	hi2c4.Init.Timing = 0x20404768;
 80020f8:	4f42      	ldr	r7, [pc, #264]	; (8002204 <main+0x9f8>)
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 80020fa:	4620      	mov	r0, r4
	hi2c4.Init.OwnAddress1 = 0;
 80020fc:	60a3      	str	r3, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020fe:	6223      	str	r3, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002100:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 8002102:	e9c4 3304 	strd	r3, r3, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002106:	e9c4 3306 	strd	r3, r3, [r4, #24]
	hi2c4.Init.Timing = 0x20404768;
 800210a:	e9c4 2700 	strd	r2, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 800210e:	f005 fd85 	bl	8007c1c <HAL_I2C_Init>
 8002112:	4601      	mov	r1, r0
 8002114:	2800      	cmp	r0, #0
 8002116:	f040 810f 	bne.w	8002338 <main+0xb2c>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800211a:	4620      	mov	r0, r4
 800211c:	f005 ffe2 	bl	80080e4 <HAL_I2CEx_ConfigAnalogFilter>
 8002120:	4601      	mov	r1, r0
 8002122:	2800      	cmp	r0, #0
 8002124:	f040 8108 	bne.w	8002338 <main+0xb2c>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8002128:	4620      	mov	r0, r4
 800212a:	f006 f82d 	bl	8008188 <HAL_I2CEx_ConfigDigitalFilter>
 800212e:	4603      	mov	r3, r0
 8002130:	2800      	cmp	r0, #0
 8002132:	f040 8101 	bne.w	8002338 <main+0xb2c>
	hi2c2.Instance = I2C2;
 8002136:	4c42      	ldr	r4, [pc, #264]	; (8002240 <main+0xa34>)
 8002138:	4a42      	ldr	r2, [pc, #264]	; (8002244 <main+0xa38>)
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800213a:	4620      	mov	r0, r4
	hi2c2.Init.Timing = 0x20404768;
 800213c:	6067      	str	r7, [r4, #4]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800213e:	6223      	str	r3, [r4, #32]
	hi2c2.Instance = I2C2;
 8002140:	6022      	str	r2, [r4, #0]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002142:	e9c4 3602 	strd	r3, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 8002146:	e9c4 3304 	strd	r3, r3, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800214a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800214e:	f005 fd65 	bl	8007c1c <HAL_I2C_Init>
 8002152:	4601      	mov	r1, r0
 8002154:	2800      	cmp	r0, #0
 8002156:	f040 80ef 	bne.w	8002338 <main+0xb2c>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800215a:	4620      	mov	r0, r4
 800215c:	f005 ffc2 	bl	80080e4 <HAL_I2CEx_ConfigAnalogFilter>
 8002160:	4601      	mov	r1, r0
 8002162:	2800      	cmp	r0, #0
 8002164:	f040 80e8 	bne.w	8002338 <main+0xb2c>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8002168:	4620      	mov	r0, r4
 800216a:	f006 f80d 	bl	8008188 <HAL_I2CEx_ConfigDigitalFilter>
 800216e:	2800      	cmp	r0, #0
 8002170:	f040 80e2 	bne.w	8002338 <main+0xb2c>
	htim4.Instance = TIM4;
 8002174:	4c34      	ldr	r4, [pc, #208]	; (8002248 <main+0xa3c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002176:	2300      	movs	r3, #0
	htim4.Instance = TIM4;
 8002178:	4834      	ldr	r0, [pc, #208]	; (800224c <main+0xa40>)
	htim4.Init.Period = 1100;
 800217a:	f240 414c 	movw	r1, #1100	; 0x44c
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800217e:	2280      	movs	r2, #128	; 0x80
	htim4.Init.Prescaler = 0;
 8002180:	6063      	str	r3, [r4, #4]
	htim4.Instance = TIM4;
 8002182:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002184:	4620      	mov	r0, r4
	htim4.Init.Period = 1100;
 8002186:	60e1      	str	r1, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002188:	61a2      	str	r2, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800218a:	9321      	str	r3, [sp, #132]	; 0x84
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800218c:	9346      	str	r3, [sp, #280]	; 0x118
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	60a3      	str	r3, [r4, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002190:	6123      	str	r3, [r4, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002192:	9324      	str	r3, [sp, #144]	; 0x90
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002194:	930e      	str	r3, [sp, #56]	; 0x38
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002196:	9347      	str	r3, [sp, #284]	; 0x11c
 8002198:	9348      	str	r3, [sp, #288]	; 0x120
 800219a:	9349      	str	r3, [sp, #292]	; 0x124
 800219c:	934a      	str	r3, [sp, #296]	; 0x128
 800219e:	934b      	str	r3, [sp, #300]	; 0x12c
 80021a0:	934c      	str	r3, [sp, #304]	; 0x130
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80021a2:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021a6:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80021aa:	f009 fc33 	bl	800ba14 <HAL_TIM_Base_Init>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	f040 80c2 	bne.w	8002338 <main+0xb2c>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80021b8:	a921      	add	r1, sp, #132	; 0x84
 80021ba:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021bc:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80021be:	f008 ff3b 	bl	800b038 <HAL_TIM_ConfigClockSource>
 80021c2:	2800      	cmp	r0, #0
 80021c4:	f040 80b8 	bne.w	8002338 <main+0xb2c>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 80021c8:	4620      	mov	r0, r4
 80021ca:	f009 fce1 	bl	800bb90 <HAL_TIM_OC_Init>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	f040 80b2 	bne.w	8002338 <main+0xb2c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80021d4:	2630      	movs	r6, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d6:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80021d8:	4620      	mov	r0, r4
 80021da:	eb0d 0106 	add.w	r1, sp, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80021de:	960c      	str	r6, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80021e0:	f00a fee6 	bl	800cfb0 <HAL_TIMEx_MasterConfigSynchronization>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2800      	cmp	r0, #0
 80021e8:	f040 80a6 	bne.w	8002338 <main+0xb2c>
 80021ec:	e036      	b.n	800225c <main+0xa50>
 80021ee:	bf00      	nop
 80021f0:	20022060 	.word	0x20022060
 80021f4:	20021eec 	.word	0x20021eec
 80021f8:	40007400 	.word	0x40007400
 80021fc:	20021b90 	.word	0x20021b90
 8002200:	40005400 	.word	0x40005400
 8002204:	20404768 	.word	0x20404768
 8002208:	200220e0 	.word	0x200220e0
 800220c:	40004c00 	.word	0x40004c00
 8002210:	20021dcc 	.word	0x20021dcc
 8002214:	40005000 	.word	0x40005000
 8002218:	20021a08 	.word	0x20021a08
 800221c:	20021ac8 	.word	0x20021ac8
 8002220:	40004800 	.word	0x40004800
 8002224:	20021f04 	.word	0x20021f04
 8002228:	40013400 	.word	0x40013400
 800222c:	20021d08 	.word	0x20021d08
 8002230:	40003c00 	.word	0x40003c00
 8002234:	200219a4 	.word	0x200219a4
 8002238:	200218f8 	.word	0x200218f8
 800223c:	40006000 	.word	0x40006000
 8002240:	20021c14 	.word	0x20021c14
 8002244:	40005800 	.word	0x40005800
 8002248:	20021a88 	.word	0x20021a88
 800224c:	40000800 	.word	0x40000800
 8002250:	40011400 	.word	0x40011400
 8002254:	40007800 	.word	0x40007800
 8002258:	40003800 	.word	0x40003800
	sConfigOC.Pulse = 550;
 800225c:	f240 2726 	movw	r7, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002260:	9048      	str	r0, [sp, #288]	; 0x120
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8002262:	2208      	movs	r2, #8
 8002264:	a946      	add	r1, sp, #280	; 0x118
 8002266:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002268:	9646      	str	r6, [sp, #280]	; 0x118
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226a:	934a      	str	r3, [sp, #296]	; 0x128
	sConfigOC.Pulse = 550;
 800226c:	9747      	str	r7, [sp, #284]	; 0x11c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800226e:	f009 ff2f 	bl	800c0d0 <HAL_TIM_OC_ConfigChannel>
 8002272:	4606      	mov	r6, r0
 8002274:	2800      	cmp	r0, #0
 8002276:	d15f      	bne.n	8002338 <main+0xb2c>
	HAL_TIM_MspPostInit(&htim4);
 8002278:	4620      	mov	r0, r4
	osMessageQDef(myQueue01, 256, uint16_t);
 800227a:	4c30      	ldr	r4, [pc, #192]	; (800233c <main+0xb30>)
	HAL_TIM_MspPostInit(&htim4);
 800227c:	f001 fb84 	bl	8003988 <HAL_TIM_MspPostInit>
	HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002280:	4632      	mov	r2, r6
 8002282:	2106      	movs	r1, #6
 8002284:	2026      	movs	r0, #38	; 0x26
 8002286:	f002 ffe5 	bl	8005254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800228a:	2026      	movs	r0, #38	; 0x26
 800228c:	f003 f828 	bl	80052e0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8002290:	4632      	mov	r2, r6
 8002292:	2106      	movs	r1, #6
 8002294:	2047      	movs	r0, #71	; 0x47
 8002296:	f002 ffdd 	bl	8005254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 800229a:	2047      	movs	r0, #71	; 0x47
 800229c:	f003 f820 	bl	80052e0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80022a0:	4632      	mov	r2, r6
 80022a2:	2106      	movs	r1, #6
 80022a4:	2012      	movs	r0, #18
 80022a6:	f002 ffd5 	bl	8005254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022aa:	2012      	movs	r0, #18
 80022ac:	f003 f818 	bl	80052e0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80022b0:	4632      	mov	r2, r6
 80022b2:	2106      	movs	r1, #6
 80022b4:	2028      	movs	r0, #40	; 0x28
 80022b6:	f002 ffcd 	bl	8005254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022ba:	2028      	movs	r0, #40	; 0x28
 80022bc:	f003 f810 	bl	80052e0 <HAL_NVIC_EnableIRQ>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80022c0:	a835      	add	r0, sp, #212	; 0xd4
	osMutexDef(myMutex01);
 80022c2:	9635      	str	r6, [sp, #212]	; 0xd4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80022c4:	f00d fc32 	bl	800fb2c <osMutexCreate>
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <main+0xb34>)
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80022ca:	2101      	movs	r1, #1
	osSemaphoreDef(ssicontent);
 80022cc:	9639      	str	r6, [sp, #228]	; 0xe4
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80022ce:	f104 0708 	add.w	r7, r4, #8
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80022d2:	6018      	str	r0, [r3, #0]
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80022d4:	a839      	add	r0, sp, #228	; 0xe4
 80022d6:	f00d fc81 	bl	800fbdc <osSemaphoreCreate>
 80022da:	491a      	ldr	r1, [pc, #104]	; (8002344 <main+0xb38>)
	osTimerDef(myTimer01, Callback01);
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <main+0xb3c>)
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80022de:	4632      	mov	r2, r6
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80022e0:	6008      	str	r0, [r1, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80022e2:	2101      	movs	r1, #1
 80022e4:	a83d      	add	r0, sp, #244	; 0xf4
	osTimerDef(myTimer01, Callback01);
 80022e6:	933d      	str	r3, [sp, #244]	; 0xf4
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80022e8:	f00d fc0e 	bl	800fb08 <osTimerCreate>
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <main+0xb40>)
 80022ee:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 80022f0:	e894 0003 	ldmia.w	r4, {r0, r1}
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 80022f4:	341c      	adds	r4, #28
	osMessageQDef(myQueue01, 256, uint16_t);
 80022f6:	e885 0003 	stmia.w	r5, {r0, r1}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80022fa:	4628      	mov	r0, r5
 80022fc:	4631      	mov	r1, r6
 80022fe:	f00d fcaf 	bl	800fc60 <osMessageCreate>
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <main+0xb44>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002304:	ad46      	add	r5, sp, #280	; 0x118
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8002306:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002308:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800230a:	683f      	ldr	r7, [r7, #0]
 800230c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800230e:	4631      	mov	r1, r6
 8002310:	a846      	add	r0, sp, #280	; 0x118
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002312:	602f      	str	r7, [r5, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002314:	f00d fbd8 	bl	800fac8 <osThreadCreate>
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <main+0xb48>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 800231a:	ad4d      	add	r5, sp, #308	; 0x134
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800231c:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 800231e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002320:	6824      	ldr	r4, [r4, #0]
 8002322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8002324:	4631      	mov	r1, r6
 8002326:	a84d      	add	r0, sp, #308	; 0x134
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 8002328:	602c      	str	r4, [r5, #0]
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 800232a:	f00d fbcd 	bl	800fac8 <osThreadCreate>
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <main+0xb4c>)
 8002330:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8002332:	f00d fbbb 	bl	800faac <osKernelStart>
 8002336:	e7fe      	b.n	8002336 <main+0xb2a>
		Error_Handler();
 8002338:	f7ff f9e8 	bl	800170c <Error_Handler>
 800233c:	08021698 	.word	0x08021698
 8002340:	20022264 	.word	0x20022264
 8002344:	20021fc8 	.word	0x20021fc8
 8002348:	08000fc1 	.word	0x08000fc1
 800234c:	2002204c 	.word	0x2002204c
 8002350:	20022160 	.word	0x20022160
 8002354:	200218f4 	.word	0x200218f4
 8002358:	20021bdc 	.word	0x20021bdc

0800235c <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 800235c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002360:	b094      	sub	sp, #80	; 0x50
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, SW S/n=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002362:	f240 471f 	movw	r7, #1055	; 0x41f
	MX_USB_DEVICE_Init();
 8002366:	f01a fcef 	bl	801cd48 <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, SW S/n=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 800236a:	2608      	movs	r6, #8
	MX_LWIP_Init();
 800236c:	f00c fa86 	bl	800e87c <MX_LWIP_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, SW S/n=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002370:	2500      	movs	r5, #0
	MX_FATFS_Init();
 8002372:	f00c fa5f 	bl	800e834 <MX_FATFS_Init>
	char stmuid[64] = { 0 };
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	2100      	movs	r1, #0
 800237a:	a804      	add	r0, sp, #16
 800237c:	f01b f8b4 	bl	801d4e8 <memset>
	printf("\n\n-------------------------------------------------------------------\n");
 8002380:	488b      	ldr	r0, [pc, #556]	; (80025b0 <StartDefaultTask+0x254>)
 8002382:	f01c f8b9 	bl	801e4f8 <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, SW S/n=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002386:	4b8b      	ldr	r3, [pc, #556]	; (80025b4 <StartDefaultTask+0x258>)
 8002388:	4a8b      	ldr	r2, [pc, #556]	; (80025b8 <StartDefaultTask+0x25c>)
 800238a:	498c      	ldr	r1, [pc, #560]	; (80025bc <StartDefaultTask+0x260>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	6809      	ldr	r1, [r1, #0]
 8002392:	488b      	ldr	r0, [pc, #556]	; (80025c0 <StartDefaultTask+0x264>)
 8002394:	9500      	str	r5, [sp, #0]
 8002396:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800239a:	f01c f825 	bl	801e3e8 <iprintf>
	if (!(netif_is_link_up(&gnetif))) {
 800239e:	4b89      	ldr	r3, [pc, #548]	; (80025c4 <StartDefaultTask+0x268>)
 80023a0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80023a4:	075b      	lsls	r3, r3, #29
 80023a6:	d41d      	bmi.n	80023e4 <StartDefaultTask+0x88>
		printf("LAN interface appears disconnected\n\r");
 80023a8:	4887      	ldr	r0, [pc, #540]	; (80025c8 <StartDefaultTask+0x26c>)
 80023aa:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80023ac:	4d87      	ldr	r5, [pc, #540]	; (80025cc <StartDefaultTask+0x270>)
		printf("LAN interface appears disconnected\n\r");
 80023ae:	f01c f81b 	bl	801e3e8 <iprintf>
			osDelay(50);
 80023b2:	2032      	movs	r0, #50	; 0x32
 80023b4:	f00d fba0 	bl	800faf8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023be:	4628      	mov	r0, r5
 80023c0:	f005 fa92 	bl	80078e8 <HAL_GPIO_WritePin>
			osDelay(50);
 80023c4:	2032      	movs	r0, #50	; 0x32
 80023c6:	f00d fb97 	bl	800faf8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80023ca:	2200      	movs	r2, #0
 80023cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023d0:	4628      	mov	r0, r5
 80023d2:	f005 fa89 	bl	80078e8 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 80023d6:	3c01      	subs	r4, #1
 80023d8:	d1eb      	bne.n	80023b2 <StartDefaultTask+0x56>
		printf("************* REBOOTING **************\n");
 80023da:	487d      	ldr	r0, [pc, #500]	; (80025d0 <StartDefaultTask+0x274>)
 80023dc:	f01c f88c 	bl	801e4f8 <puts>
		rebootme();
 80023e0:	f7fe fe02 	bl	8000fe8 <rebootme>
	netif = netif_default;
 80023e4:	4b7b      	ldr	r3, [pc, #492]	; (80025d4 <StartDefaultTask+0x278>)
 80023e6:	f8df 8264 	ldr.w	r8, [pc, #612]	; 800264c <StartDefaultTask+0x2f0>
 80023ea:	681b      	ldr	r3, [r3, #0]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80023ec:	497a      	ldr	r1, [pc, #488]	; (80025d8 <StartDefaultTask+0x27c>)
 80023ee:	4618      	mov	r0, r3
	netif = netif_default;
 80023f0:	f8c8 3000 	str.w	r3, [r8]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80023f4:	f012 f9e2 	bl	80147bc <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 80023f8:	f8d8 0000 	ldr.w	r0, [r8]
 80023fc:	4977      	ldr	r1, [pc, #476]	; (80025dc <StartDefaultTask+0x280>)
 80023fe:	f012 f9af 	bl	8014760 <netif_set_status_callback>
	statuspkt.uid = MY_UID;		// 16 bits
 8002402:	4c77      	ldr	r4, [pc, #476]	; (80025e0 <StartDefaultTask+0x284>)
	statuspkt.adctrigoff = TRIG_THRES;
 8002404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	t2cap[0] = 44444444;
 8002408:	4a76      	ldr	r2, [pc, #472]	; (80025e4 <StartDefaultTask+0x288>)
 800240a:	4977      	ldr	r1, [pc, #476]	; (80025e8 <StartDefaultTask+0x28c>)
	printf("*** TESTING BUILD USED ***\n");
 800240c:	4877      	ldr	r0, [pc, #476]	; (80025ec <StartDefaultTask+0x290>)
	statuspkt.uid = MY_UID;		// 16 bits
 800240e:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
	t2cap[0] = 44444444;
 8002412:	6011      	str	r1, [r2, #0]
	statuspkt.majorversion = MAJORVERSION;
 8002414:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8002418:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
	statuspkt.udppknum = 0;
 800241c:	6025      	str	r5, [r4, #0]
	statuspkt.sysuptime = 0;
 800241e:	6665      	str	r5, [r4, #100]	; 0x64
	statuspkt.netuptime = 0;
 8002420:	66a5      	str	r5, [r4, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8002422:	66e5      	str	r5, [r4, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8002424:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8002428:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	printf("*** TESTING BUILD USED ***\n");
 800242c:	f01c f864 	bl	801e4f8 <puts>
	stat = setupneo();
 8002430:	f000 fa38 	bl	80028a4 <setupneo>
	if (stat != HAL_OK) {
 8002434:	2800      	cmp	r0, #0
 8002436:	d17c      	bne.n	8002532 <StartDefaultTask+0x1d6>
	initsplat();
 8002438:	f000 fe8e 	bl	8003158 <initsplat>
	printf("Setting up timers\n");
 800243c:	486c      	ldr	r0, [pc, #432]	; (80025f0 <StartDefaultTask+0x294>)
 800243e:	f01c f85b 	bl	801e4f8 <puts>
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002442:	2300      	movs	r3, #0
 8002444:	4a6b      	ldr	r2, [pc, #428]	; (80025f4 <StartDefaultTask+0x298>)
 8002446:	4619      	mov	r1, r3
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8002448:	4d6b      	ldr	r5, [pc, #428]	; (80025f8 <StartDefaultTask+0x29c>)
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 800244a:	6810      	ldr	r0, [r2, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	f00d fdd5 	bl	800fffc <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8002452:	486a      	ldr	r0, [pc, #424]	; (80025fc <StartDefaultTask+0x2a0>)
 8002454:	f008 fd6a 	bl	800af2c <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8002458:	2200      	movs	r2, #0
 800245a:	6828      	ldr	r0, [r5, #0]
 800245c:	4611      	mov	r1, r2
 800245e:	f00a fb51 	bl	800cb04 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8002462:	6828      	ldr	r0, [r5, #0]
 8002464:	2200      	movs	r2, #0
 8002466:	2104      	movs	r1, #4
 8002468:	f00a fb4c 	bl	800cb04 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 800246c:	2200      	movs	r2, #0
 800246e:	6828      	ldr	r0, [r5, #0]
 8002470:	210c      	movs	r1, #12
 8002472:	f00a fb47 	bl	800cb04 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8002476:	2100      	movs	r1, #0
 8002478:	4628      	mov	r0, r5
 800247a:	f00a fccb 	bl	800ce14 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 800247e:	2104      	movs	r1, #4
 8002480:	4628      	mov	r0, r5
 8002482:	f00a fcc7 	bl	800ce14 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8002486:	210c      	movs	r1, #12
 8002488:	4628      	mov	r0, r5
 800248a:	f00a fcc3 	bl	800ce14 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 800248e:	4628      	mov	r0, r5
 8002490:	2301      	movs	r3, #1
 8002492:	4a54      	ldr	r2, [pc, #336]	; (80025e4 <StartDefaultTask+0x288>)
 8002494:	2108      	movs	r1, #8
 8002496:	f00a fb93 	bl	800cbc0 <HAL_TIM_IC_Start_DMA>
 800249a:	2800      	cmp	r0, #0
 800249c:	d143      	bne.n	8002526 <StartDefaultTask+0x1ca>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 800249e:	6828      	ldr	r0, [r5, #0]
 80024a0:	2201      	movs	r2, #1
 80024a2:	2108      	movs	r1, #8
	myip = ip.addr;
 80024a4:	4f56      	ldr	r7, [pc, #344]	; (8002600 <StartDefaultTask+0x2a4>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80024a6:	f00a fb2d 	bl	800cb04 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 80024aa:	f8d8 3000 	ldr.w	r3, [r8]
	printf("*****************************************\n");
 80024ae:	4855      	ldr	r0, [pc, #340]	; (8002604 <StartDefaultTask+0x2a8>)
	i = 1;
 80024b0:	2501      	movs	r5, #1
	ip = dhcp->offered_ip_addr;
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	while (statuspkt.uid == MY_UID)		// not yet found new S/N from server
 80024b4:	f240 461f 	movw	r6, #1055	; 0x41f
	myip = ip.addr;
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	603b      	str	r3, [r7, #0]
	printf("*****************************************\n");
 80024bc:	f01c f81c 	bl	801e4f8 <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	4851      	ldr	r0, [pc, #324]	; (8002608 <StartDefaultTask+0x2ac>)
 80024c4:	0e0a      	lsrs	r2, r1, #24
 80024c6:	f3c1 4307 	ubfx	r3, r1, #16, #8
		printf("Try to get new S/N using http client. Try=%d\n", i++);
 80024ca:	4f50      	ldr	r7, [pc, #320]	; (800260c <StartDefaultTask+0x2b0>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80024cc:	9200      	str	r2, [sp, #0]
 80024ce:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80024d2:	b2c9      	uxtb	r1, r1
 80024d4:	f01b ff88 	bl	801e3e8 <iprintf>
	printf("*****************************************\n");
 80024d8:	484a      	ldr	r0, [pc, #296]	; (8002604 <StartDefaultTask+0x2a8>)
 80024da:	f01c f80d 	bl	801e4f8 <puts>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80024de:	4a35      	ldr	r2, [pc, #212]	; (80025b4 <StartDefaultTask+0x258>)
 80024e0:	4b35      	ldr	r3, [pc, #212]	; (80025b8 <StartDefaultTask+0x25c>)
 80024e2:	a804      	add	r0, sp, #16
 80024e4:	6811      	ldr	r1, [r2, #0]
 80024e6:	3a08      	subs	r2, #8
 80024e8:	9100      	str	r1, [sp, #0]
 80024ea:	4949      	ldr	r1, [pc, #292]	; (8002610 <StartDefaultTask+0x2b4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	f01c f89e 	bl	801e630 <siprintf>
	while (statuspkt.uid == MY_UID)		// not yet found new S/N from server
 80024f4:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80024f8:	429e      	cmp	r6, r3
 80024fa:	d11e      	bne.n	800253a <StartDefaultTask+0x1de>
		printf("Try to get new S/N using http client. Try=%d\n", i++);
 80024fc:	4629      	mov	r1, r5
 80024fe:	4638      	mov	r0, r7
 8002500:	f01b ff72 	bl	801e3e8 <iprintf>
		if (i++ > 10) {
 8002504:	3502      	adds	r5, #2
		httpclient(stmuid);
 8002506:	a804      	add	r0, sp, #16
 8002508:	f002 f9dc 	bl	80048c4 <httpclient>
		osDelay(5000);
 800250c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002510:	f00d faf2 	bl	800faf8 <osDelay>
		stats_display() ; // this needs stats in LwIP enabling to do anything
 8002514:	f012 ff98 	bl	8015448 <stats_display>
		if (i++ > 10) {
 8002518:	2d0d      	cmp	r5, #13
 800251a:	d1eb      	bne.n	80024f4 <StartDefaultTask+0x198>
			printf("************* ABORTED **************\n");
 800251c:	483d      	ldr	r0, [pc, #244]	; (8002614 <StartDefaultTask+0x2b8>)
 800251e:	f01b ffeb 	bl	801e4f8 <puts>
			rebootme();
 8002522:	f7fe fd61 	bl	8000fe8 <rebootme>
		printf("TIM_Base_Start_DMA err %i", err);
 8002526:	4601      	mov	r1, r0
 8002528:	483b      	ldr	r0, [pc, #236]	; (8002618 <StartDefaultTask+0x2bc>)
 800252a:	f01b ff5d 	bl	801e3e8 <iprintf>
		Error_Handler();
 800252e:	f7ff f8ed 	bl	800170c <Error_Handler>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8002532:	483a      	ldr	r0, [pc, #232]	; (800261c <StartDefaultTask+0x2c0>)
 8002534:	f01b ff58 	bl	801e3e8 <iprintf>
 8002538:	e77e      	b.n	8002438 <StartDefaultTask+0xdc>
	osDelay(1000);
 800253a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uip = locateudp();
 800253e:	4d38      	ldr	r5, [pc, #224]	; (8002620 <StartDefaultTask+0x2c4>)
	osDelay(1000);
 8002540:	f00d fada 	bl	800faf8 <osDelay>
	printf("Starting httpd\n");
 8002544:	4837      	ldr	r0, [pc, #220]	; (8002624 <StartDefaultTask+0x2c8>)
 8002546:	f01b ffd7 	bl	801e4f8 <puts>
 800254a:	4c37      	ldr	r4, [pc, #220]	; (8002628 <StartDefaultTask+0x2cc>)
	httpd_init();		// start the www server
 800254c:	f010 fdcc 	bl	80130e8 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8002550:	f002 f9ac 	bl	80048ac <init_httpd_ssi>
	printf("Warming up phasors\n");
 8002554:	4835      	ldr	r0, [pc, #212]	; (800262c <StartDefaultTask+0x2d0>)
 8002556:	f01b ffcf 	bl	801e4f8 <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 800255a:	2108      	movs	r1, #8
 800255c:	4a34      	ldr	r2, [pc, #208]	; (8002630 <StartDefaultTask+0x2d4>)
 800255e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002562:	9100      	str	r1, [sp, #0]
 8002564:	2100      	movs	r1, #0
 8002566:	4833      	ldr	r0, [pc, #204]	; (8002634 <StartDefaultTask+0x2d8>)
 8002568:	f002 ffb4 	bl	80054d4 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);		// fast interval DAC timer sample rate
 800256c:	4832      	ldr	r0, [pc, #200]	; (8002638 <StartDefaultTask+0x2dc>)
 800256e:	f008 fc5b 	bl	800ae28 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8002572:	f00e fd6f 	bl	8011054 <xTaskGetCurrentTaskHandle>
 8002576:	4b31      	ldr	r3, [pc, #196]	; (800263c <StartDefaultTask+0x2e0>)
 8002578:	6018      	str	r0, [r3, #0]
	startadc();
 800257a:	f7fe fa9b 	bl	8000ab4 <startadc>
	uip = locateudp();
 800257e:	f001 fdf9 	bl	8004174 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <StartDefaultTask+0x2e4>)
 8002584:	2201      	movs	r2, #1
	uip = locateudp();
 8002586:	6028      	str	r0, [r5, #0]
	printf("Waiting for lptask\n");
 8002588:	482e      	ldr	r0, [pc, #184]	; (8002644 <StartDefaultTask+0x2e8>)
	main_init_done = 1; // let lptask now main has initialised
 800258a:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask\n");
 800258c:	f01b ffb4 	bl	801e4f8 <puts>
	while (lptask_init_done == 0)
 8002590:	e002      	b.n	8002598 <StartDefaultTask+0x23c>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8002592:	2064      	movs	r0, #100	; 0x64
 8002594:	f00d fab0 	bl	800faf8 <osDelay>
	while (lptask_init_done == 0)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f9      	beq.n	8002592 <StartDefaultTask+0x236>
		startudp(uip);		// should never return
 800259e:	6828      	ldr	r0, [r5, #0]
 80025a0:	f001 fe1c 	bl	80041dc <startudp>
		printf("UDP stream exited!!!\n\r");
 80025a4:	4828      	ldr	r0, [pc, #160]	; (8002648 <StartDefaultTask+0x2ec>)
 80025a6:	f01b ff1f 	bl	801e3e8 <iprintf>
		rebootme();
 80025aa:	f7fe fd1d 	bl	8000fe8 <rebootme>
 80025ae:	bf00      	nop
 80025b0:	08021d90 	.word	0x08021d90
 80025b4:	1ff0f428 	.word	0x1ff0f428
 80025b8:	1ff0f424 	.word	0x1ff0f424
 80025bc:	1ff0f420 	.word	0x1ff0f420
 80025c0:	08021dd8 	.word	0x08021dd8
 80025c4:	20022874 	.word	0x20022874
 80025c8:	08021e10 	.word	0x08021e10
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	08021e38 	.word	0x08021e38
 80025d4:	2003537c 	.word	0x2003537c
 80025d8:	08001015 	.word	0x08001015
 80025dc:	08000fb5 	.word	0x08000fb5
 80025e0:	2002183c 	.word	0x2002183c
 80025e4:	200218e0 	.word	0x200218e0
 80025e8:	02a62b1c 	.word	0x02a62b1c
 80025ec:	08021e60 	.word	0x08021e60
 80025f0:	08021e9c 	.word	0x08021e9c
 80025f4:	20021fc8 	.word	0x20021fc8
 80025f8:	20022164 	.word	0x20022164
 80025fc:	20021fcc 	.word	0x20021fcc
 8002600:	20021c64 	.word	0x20021c64
 8002604:	08021ecc 	.word	0x08021ecc
 8002608:	08021ef8 	.word	0x08021ef8
 800260c:	08021f38 	.word	0x08021f38
 8002610:	08021f20 	.word	0x08021f20
 8002614:	08021f68 	.word	0x08021f68
 8002618:	08021eb0 	.word	0x08021eb0
 800261c:	08021e7c 	.word	0x08021e7c
 8002620:	20021c60 	.word	0x20021c60
 8002624:	08021f90 	.word	0x08021f90
 8002628:	20000864 	.word	0x20000864
 800262c:	08021fa0 	.word	0x08021fa0
 8002630:	0802206c 	.word	0x0802206c
 8002634:	20021eec 	.word	0x20021eec
 8002638:	20022224 	.word	0x20022224
 800263c:	20000814 	.word	0x20000814
 8002640:	20000868 	.word	0x20000868
 8002644:	08021fb4 	.word	0x08021fb4
 8002648:	08021fc8 	.word	0x08021fc8
 800264c:	200218f0 	.word	0x200218f0

08002650 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop

08002654 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8002654:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	if (ch == '\n')
 8002656:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8002658:	b083      	sub	sp, #12
 800265a:	9001      	str	r0, [sp, #4]
	if (ch == '\n')
 800265c:	d009      	beq.n	8002672 <__io_putchar+0x1e>
		HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
	else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 800265e:	230a      	movs	r3, #10
 8002660:	2201      	movs	r2, #1
 8002662:	a901      	add	r1, sp, #4
 8002664:	4808      	ldr	r0, [pc, #32]	; (8002688 <__io_putchar+0x34>)
 8002666:	f00b f9bb 	bl	800d9e0 <HAL_UART_Transmit>
	return ch;
}
 800266a:	9801      	ldr	r0, [sp, #4]
 800266c:	b003      	add	sp, #12
 800266e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002672:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8002674:	2202      	movs	r2, #2
 8002676:	4905      	ldr	r1, [pc, #20]	; (800268c <__io_putchar+0x38>)
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <__io_putchar+0x34>)
 800267a:	f00b f9b1 	bl	800d9e0 <HAL_UART_Transmit>
}
 800267e:	9801      	ldr	r0, [sp, #4]
 8002680:	b003      	add	sp, #12
 8002682:	f85d fb04 	ldr.w	pc, [sp], #4
 8002686:	bf00      	nop
 8002688:	200221a4 	.word	0x200221a4
 800268c:	08022780 	.word	0x08022780

08002690 <calcepoch>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <calcepoch+0x40>)
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch() {
 8002692:	b538      	push	{r3, r4, r5, lr}
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002694:	8914      	ldrh	r4, [r2, #8]
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8002696:	f04f 35ff 	mov.w	r5, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 800269a:	7a91      	ldrb	r1, [r2, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <calcepoch+0x44>)
 800269e:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80026a2:	4429      	add	r1, r5
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80026a4:	621d      	str	r5, [r3, #32]

	epochtime = mktime(getgpstime());
 80026a6:	4618      	mov	r0, r3
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80026a8:	7ad5      	ldrb	r5, [r2, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80026aa:	615c      	str	r4, [r3, #20]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80026ac:	6119      	str	r1, [r3, #16]
	now.tm_hour = statuspkt.NavPvt.hour;
 80026ae:	7b14      	ldrb	r4, [r2, #12]
	now.tm_min = statuspkt.NavPvt.min;
 80026b0:	7b51      	ldrb	r1, [r2, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 80026b2:	7b92      	ldrb	r2, [r2, #14]
	now.tm_hour = statuspkt.NavPvt.hour;
 80026b4:	e9c3 4502 	strd	r4, r5, [r3, #8]
	now.tm_sec = statuspkt.NavPvt.sec;
 80026b8:	e9c3 2100 	strd	r2, r1, [r3]
	epochtime = mktime(getgpstime());
 80026bc:	f01a fff6 	bl	801d6ac <mktime>
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <calcepoch+0x48>)
 80026c2:	4602      	mov	r2, r0
	return ((uint32_t) epochtime + (10 * 60 * 60));		// add ten hours
#else
    return((uint32_t)epochtime);
#endif

}
 80026c4:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 80026c8:	e9c3 2100 	strd	r2, r1, [r3]
}
 80026cc:	4410      	add	r0, r2
 80026ce:	bd38      	pop	{r3, r4, r5, pc}
 80026d0:	2002183c 	.word	0x2002183c
 80026d4:	20022268 	.word	0x20022268
 80026d8:	200222e8 	.word	0x200222e8

080026dc <disableNmea>:

	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 80026dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80026e0:	4c20      	ldr	r4, [pc, #128]	; (8002764 <disableNmea+0x88>)
void disableNmea() {
 80026e2:	b08e      	sub	sp, #56	; 0x38
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80026e4:	4f20      	ldr	r7, [pc, #128]	; (8002768 <disableNmea+0x8c>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80026e6:	ae04      	add	r6, sp, #16
 80026e8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80026ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ee:	4635      	mov	r5, r6
 80026f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026f6:	e894 0003 	ldmia.w	r4, {r0, r1}
			{ 0xF0, 0x06 }, { 0xF0, 0x02 }, { 0xF0, 0x07 }, { 0xF0, 0x03 }, { 0xF0, 0x04 }, { 0xF0, 0x0E },
			{ 0xF0, 0x0F }, { 0xF0, 0x05 }, { 0xF0, 0x08 }, { 0xF1, 0x00 }, { 0xF1, 0x01 }, { 0xF1, 0x03 },
			{ 0xF1, 0x04 }, { 0xF1, 0x05 }, { 0xF1, 0x06 }, };

	// CFG-MSG packet buffer
	byte packet[] = { 0xB5, // sync char 1
 80026fa:	f104 0208 	add.w	r2, r4, #8
 80026fe:	ab01      	add	r3, sp, #4
 8002700:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8002704:	e886 0003 	stmia.w	r6, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8002708:	ca07      	ldmia	r2, {r0, r1, r2}
 800270a:	0c16      	lsrs	r6, r2, #16
 800270c:	c303      	stmia	r3!, {r0, r1}
 800270e:	f823 2b02 	strh.w	r2, [r3], #2
 8002712:	701e      	strb	r6, [r3, #0]
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8002714:	2600      	movs	r6, #0
		packet[packetSize - 1] = 0x00;
 8002716:	2200      	movs	r2, #0
			packet[payloadOffset + j] = messages[i][j];
 8002718:	f895 c000 	ldrb.w	ip, [r5]
 800271c:	7868      	ldrb	r0, [r5, #1]
 800271e:	f10d 0106 	add.w	r1, sp, #6
		packet[packetSize - 1] = 0x00;
 8002722:	4613      	mov	r3, r2
		packet[packetSize - 2] = 0x00;
 8002724:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8002728:	f88d 600e 	strb.w	r6, [sp, #14]
			packet[payloadOffset + j] = messages[i][j];
 800272c:	f88d c00a 	strb.w	ip, [sp, #10]
 8002730:	f88d 000b 	strb.w	r0, [sp, #11]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8002734:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002738:	4403      	add	r3, r0
		for (byte j = 0; j < packetSize - 4; j++) {
 800273a:	428c      	cmp	r4, r1
			packet[packetSize - 2] += packet[2 + j];
 800273c:	b2db      	uxtb	r3, r3
			packet[packetSize - 1] += packet[packetSize - 2];
 800273e:	441a      	add	r2, r3
			packet[packetSize - 2] += packet[2 + j];
 8002740:	f88d 300d 	strb.w	r3, [sp, #13]
			packet[packetSize - 1] += packet[packetSize - 2];
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f88d 200e 	strb.w	r2, [sp, #14]
		for (byte j = 0; j < packetSize - 4; j++) {
 800274a:	d1f3      	bne.n	8002734 <disableNmea+0x58>
 800274c:	3502      	adds	r5, #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 800274e:	2364      	movs	r3, #100	; 0x64
 8002750:	220b      	movs	r2, #11
 8002752:	a901      	add	r1, sp, #4
 8002754:	4638      	mov	r0, r7
 8002756:	f00b f943 	bl	800d9e0 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 800275a:	45a8      	cmp	r8, r5
 800275c:	d1db      	bne.n	8002716 <disableNmea+0x3a>
		}

		sendPacket(packet, packetSize);
	}
}
 800275e:	b00e      	add	sp, #56	; 0x38
 8002760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002764:	080216e0 	.word	0x080216e0
 8002768:	20022060 	.word	0x20022060

0800276c <changeFrequency>:
	sendPacket(packet, sizeof(packet));
}

// Function, sending packet to the receiver to change frequency to 100 ms
#define SEC 1
void changeFrequency() {
 800276c:	b510      	push	{r4, lr}
	// CFG-RATE packet
	byte packet[] = { 0xB5, // sync char 1
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <changeFrequency+0x20>)
void changeFrequency() {
 8002770:	b084      	sub	sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8002772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002774:	466c      	mov	r4, sp
 8002776:	c407      	stmia	r4!, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002778:	220e      	movs	r2, #14
	byte packet[] = { 0xB5, // sync char 1
 800277a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 800277c:	4669      	mov	r1, sp
 800277e:	2364      	movs	r3, #100	; 0x64
 8002780:	4803      	ldr	r0, [pc, #12]	; (8002790 <changeFrequency+0x24>)
 8002782:	f00b f92d 	bl	800d9e0 <HAL_UART_Transmit>
			0x01, // CK_A
			0x39, // CK_B
#endif
			};
	sendPacket(packet, sizeof(packet));
}
 8002786:	b004      	add	sp, #16
 8002788:	bd10      	pop	{r4, pc}
 800278a:	bf00      	nop
 800278c:	08021730 	.word	0x08021730
 8002790:	20022060 	.word	0x20022060

08002794 <disableUnnecessaryChannels>:

// Function, sending packet to the receiver to disable unnecessary channels
void disableUnnecessaryChannels() {
 8002794:	b530      	push	{r4, r5, lr}
	// CFG-GNSS packet
	byte packet[] = { 0xB5, // sync char 1
 8002796:	4d09      	ldr	r5, [pc, #36]	; (80027bc <disableUnnecessaryChannels+0x28>)
void disableUnnecessaryChannels() {
 8002798:	b08d      	sub	sp, #52	; 0x34
	byte packet[] = { 0xB5, // sync char 1
 800279a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279c:	ac01      	add	r4, sp, #4
 800279e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80027a8:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 80027aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80027ae:	222c      	movs	r2, #44	; 0x2c
 80027b0:	a901      	add	r1, sp, #4
 80027b2:	4803      	ldr	r0, [pc, #12]	; (80027c0 <disableUnnecessaryChannels+0x2c>)
 80027b4:	f00b f914 	bl	800d9e0 <HAL_UART_Transmit>
			0xA4, // CK_A
			0x25, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 80027b8:	b00d      	add	sp, #52	; 0x34
 80027ba:	bd30      	pop	{r4, r5, pc}
 80027bc:	08021740 	.word	0x08021740
 80027c0:	20022060 	.word	0x20022060

080027c4 <enableNavPvt>:

// Function, sending packet to the receiver to enable NAV-PVT messages
void enableNavPvt() {
 80027c4:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, // sync char 1
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <enableNavPvt+0x24>)
void enableNavPvt() {
 80027c8:	b085      	sub	sp, #20
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80027ca:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 80027cc:	ac01      	add	r4, sp, #4
 80027ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80027d0:	c403      	stmia	r4!, {r0, r1}
 80027d2:	0c15      	lsrs	r5, r2, #16
 80027d4:	f824 2b02 	strh.w	r2, [r4], #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80027d8:	a901      	add	r1, sp, #4
 80027da:	220b      	movs	r2, #11
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <enableNavPvt+0x28>)
	byte packet[] = { 0xB5, // sync char 1
 80027de:	7025      	strb	r5, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80027e0:	f00b f8fe 	bl	800d9e0 <HAL_UART_Transmit>
			0x13, // CK_A
			0x51, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 80027e4:	b005      	add	sp, #20
 80027e6:	bd30      	pop	{r4, r5, pc}
 80027e8:	0802176c 	.word	0x0802176c
 80027ec:	20022060 	.word	0x20022060

080027f0 <enableNaTP5>:

// Function, to set time pulse2 to interval of 1pps
// pulse only running when GPS locked to UTC
void enableNaTP5() {
 80027f0:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 80027f2:	4d09      	ldr	r5, [pc, #36]	; (8002818 <enableNaTP5+0x28>)
void enableNaTP5() {
 80027f4:	b08b      	sub	sp, #44	; 0x2c
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 80027f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f8:	466c      	mov	r4, sp
 80027fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002800:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002804:	2364      	movs	r3, #100	; 0x64
 8002806:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8002808:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 800280c:	4669      	mov	r1, sp
 800280e:	4803      	ldr	r0, [pc, #12]	; (800281c <enableNaTP5+0x2c>)
 8002810:	f00b f8e6 	bl	800d9e0 <HAL_UART_Transmit>
			0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF7, 0x00, 0x00, 0x00, 0xC9, 0x97 };

	sendPacket(packet, sizeof(packet));
}
 8002814:	b00b      	add	sp, #44	; 0x2c
 8002816:	bd30      	pop	{r4, r5, pc}
 8002818:	08021778 	.word	0x08021778
 800281c:	20022060 	.word	0x20022060

08002820 <IsPacketReady>:
	}
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
}

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8002820:	b470      	push	{r4, r5, r6}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8002822:	4d1c      	ldr	r5, [pc, #112]	; (8002894 <IsPacketReady+0x74>)
 8002824:	78eb      	ldrb	r3, [r5, #3]
	if (p < 4)     // this looks for PVT messages
 8002826:	2b03      	cmp	r3, #3
 8002828:	d809      	bhi.n	800283e <IsPacketReady+0x1e>
			{
		// are we starting a packet?
		if (c == UBXGPS_HEADER[p]) {
 800282a:	4a1b      	ldr	r2, [pc, #108]	; (8002898 <IsPacketReady+0x78>)
 800282c:	4619      	mov	r1, r3
 800282e:	5cd2      	ldrb	r2, [r2, r3]
 8002830:	4282      	cmp	r2, r0
 8002832:	d00e      	beq.n	8002852 <IsPacketReady+0x32>
			PACKETstore[p++] = c;
		} else {
			p = 0;
 8002834:	2300      	movs	r3, #0
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return false;
 8002836:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8002838:	70eb      	strb	r3, [r5, #3]
}
 800283a:	bc70      	pop	{r4, r5, r6}
 800283c:	4770      	bx	lr
		if (p < (2 + 4 + 84 + 2)) {
 800283e:	2b5b      	cmp	r3, #91	; 0x5b
 8002840:	d8f9      	bhi.n	8002836 <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	4e15      	ldr	r6, [pc, #84]	; (800289c <IsPacketReady+0x7c>)
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	54f0      	strb	r0, [r6, r3]
			if (p == (2 + 4 + 84 + 2)) {
 800284a:	2a5c      	cmp	r2, #92	; 0x5c
 800284c:	d006      	beq.n	800285c <IsPacketReady+0x3c>
 800284e:	4613      	mov	r3, r2
 8002850:	e7f1      	b.n	8002836 <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 8002852:	3301      	adds	r3, #1
 8002854:	4811      	ldr	r0, [pc, #68]	; (800289c <IsPacketReady+0x7c>)
 8002856:	b2db      	uxtb	r3, r3
 8002858:	5442      	strb	r2, [r0, r1]
 800285a:	e7ec      	b.n	8002836 <IsPacketReady+0x16>
				UbxGpsv.carriagePosition = p;
 800285c:	2300      	movs	r3, #0
 800285e:	1c71      	adds	r1, r6, #1
 8002860:	f106 0459 	add.w	r4, r6, #89	; 0x59
	unsigned char CK_B = 0;
 8002864:	461a      	mov	r2, r3
				UbxGpsv.carriagePosition = p;
 8002866:	70eb      	strb	r3, [r5, #3]
		CK_A = CK_A + PACKETstore[i];
 8002868:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800286c:	4403      	add	r3, r0
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 800286e:	428c      	cmp	r4, r1
		CK_A = CK_A + PACKETstore[i];
 8002870:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8002872:	441a      	add	r2, r3
 8002874:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 8002876:	d1f7      	bne.n	8002868 <IsPacketReady+0x48>
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
 8002878:	f896 105a 	ldrb.w	r1, [r6, #90]	; 0x5a
 800287c:	4299      	cmp	r1, r3
 800287e:	d1d9      	bne.n	8002834 <IsPacketReady+0x14>
 8002880:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8002884:	4293      	cmp	r3, r2
 8002886:	d1d5      	bne.n	8002834 <IsPacketReady+0x14>
					gpsgood = 1;
 8002888:	2301      	movs	r3, #1
 800288a:	4a05      	ldr	r2, [pc, #20]	; (80028a0 <IsPacketReady+0x80>)
					return true;
 800288c:	4618      	mov	r0, r3
					gpsgood = 1;
 800288e:	6013      	str	r3, [r2, #0]
					return true;
 8002890:	e7d3      	b.n	800283a <IsPacketReady+0x1a>
 8002892:	bf00      	nop
 8002894:	200002a4 	.word	0x200002a4
 8002898:	080227b8 	.word	0x080227b8
 800289c:	200222f4 	.word	0x200222f4
 80028a0:	20000878 	.word	0x20000878

080028a4 <setupneo>:
		printf("0x%02x ", data);
	}
}

// init neo7
HAL_StatusTypeDef setupneo() {
 80028a4:	b510      	push	{r4, lr}
	HAL_StatusTypeDef stat;

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 80028a6:	f7ff ff19 	bl	80026dc <disableNmea>
	 * @param Size: amount of data to be received.
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */
	stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 80028aa:	2201      	movs	r2, #1
 80028ac:	4912      	ldr	r1, [pc, #72]	; (80028f8 <setupneo+0x54>)
 80028ae:	4813      	ldr	r0, [pc, #76]	; (80028fc <setupneo+0x58>)
 80028b0:	f00a fc24 	bl	800d0fc <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 80028b4:	4604      	mov	r4, r0
 80028b6:	b9d0      	cbnz	r0, 80028ee <setupneo+0x4a>
		printf("Err HAL_UART_Receive_IT usart6\n");
		return (stat);
	}

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 80028b8:	4811      	ldr	r0, [pc, #68]	; (8002900 <setupneo+0x5c>)
 80028ba:	f01b fd95 	bl	801e3e8 <iprintf>

	changeFrequency();
 80028be:	f7ff ff55 	bl	800276c <changeFrequency>
	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 80028c2:	4810      	ldr	r0, [pc, #64]	; (8002904 <setupneo+0x60>)
 80028c4:	f01b fe18 	bl	801e4f8 <puts>
	disableUnnecessaryChannels();
 80028c8:	f7ff ff64 	bl	8002794 <disableUnnecessaryChannels>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 80028cc:	480e      	ldr	r0, [pc, #56]	; (8002908 <setupneo+0x64>)
 80028ce:	f01b fd8b 	bl	801e3e8 <iprintf>
	enableNavPvt();
 80028d2:	f7ff ff77 	bl	80027c4 <enableNavPvt>
	osDelay(100);
 80028d6:	2064      	movs	r0, #100	; 0x64
 80028d8:	f00d f90e 	bl	800faf8 <osDelay>
// Enable Time pulse
	enableNaTP5();
 80028dc:	f7ff ff88 	bl	80027f0 <enableNaTP5>
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <setupneo+0x68>)
	printf("NEO: Auto-configuration is complete\n\r");
 80028e2:	480b      	ldr	r0, [pc, #44]	; (8002910 <setupneo+0x6c>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 80028e4:	765c      	strb	r4, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 80028e6:	f01b fd7f 	bl	801e3e8 <iprintf>

//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 80028ea:	4620      	mov	r0, r4
 80028ec:	bd10      	pop	{r4, pc}
		printf("Err HAL_UART_Receive_IT usart6\n");
 80028ee:	4809      	ldr	r0, [pc, #36]	; (8002914 <setupneo+0x70>)
 80028f0:	f01b fe02 	bl	801e4f8 <puts>
}
 80028f4:	4620      	mov	r0, r4
 80028f6:	bd10      	pop	{r4, pc}
 80028f8:	2000087c 	.word	0x2000087c
 80028fc:	20022060 	.word	0x20022060
 8002900:	080227dc 	.word	0x080227dc
 8002904:	0802280c 	.word	0x0802280c
 8002908:	08022834 	.word	0x08022834
 800290c:	2002183c 	.word	0x2002183c
 8002910:	08022858 	.word	0x08022858
 8002914:	080227bc 	.word	0x080227bc

08002918 <HAL_UART_RxCpltCallback>:
	const unsigned char offset = 6;
//	unsigned char data;
//	HAL_StatusTypeDef stat;

//	printf("UART6 RxCpl");
	if (huart->Instance == USART6) { //our UART
 8002918:	6802      	ldr	r2, [r0, #0]
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_UART_RxCpltCallback+0x5c>)
 800291c:	429a      	cmp	r2, r3
 800291e:	d002      	beq.n	8002926 <HAL_UART_RxCpltCallback+0xe>
		if (stat != HAL_OK) {
			printf("Err HAL_UART_Receive_IT usart6\n");
		}
#endif
	} else {
		printf("USART unknown uart int\n");
 8002920:	4815      	ldr	r0, [pc, #84]	; (8002978 <HAL_UART_RxCpltCallback+0x60>)
 8002922:	f01b bde9 	b.w	801e4f8 <puts>
		data = rxdatabuf[0];
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_UART_RxCpltCallback+0x64>)
		flag = 1;
 8002928:	2101      	movs	r1, #1
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <HAL_UART_RxCpltCallback+0x68>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800292c:	b510      	push	{r4, lr}
		data = rxdatabuf[0];
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4c14      	ldr	r4, [pc, #80]	; (8002984 <HAL_UART_RxCpltCallback+0x6c>)
		if (IsPacketReady(data)) {
 8002932:	4618      	mov	r0, r3
		flag = 1;
 8002934:	6011      	str	r1, [r2, #0]
		data = rxdatabuf[0];
 8002936:	7023      	strb	r3, [r4, #0]
		if (IsPacketReady(data)) {
 8002938:	f7ff ff72 	bl	8002820 <IsPacketReady>
 800293c:	b180      	cbz	r0, 8002960 <HAL_UART_RxCpltCallback+0x48>
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_UART_RxCpltCallback+0x70>)
 8002940:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_UART_RxCpltCallback+0x74>)
 8002942:	f103 004e 	add.w	r0, r3, #78	; 0x4e
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8002946:	f813 1f01 	ldrb.w	r1, [r3, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 800294a:	4283      	cmp	r3, r0
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 800294c:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8002950:	d1f9      	bne.n	8002946 <HAL_UART_RxCpltCallback+0x2e>
			if (statuspkt.NavPvt.flags & 1) { // locked
 8002952:	4c0f      	ldr	r4, [pc, #60]	; (8002990 <HAL_UART_RxCpltCallback+0x78>)
 8002954:	7e63      	ldrb	r3, [r4, #25]
 8002956:	f013 0301 	ands.w	r3, r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_UART_RxCpltCallback+0x4a>
				gpslocked = 0;
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_UART_RxCpltCallback+0x7c>)
 800295e:	7013      	strb	r3, [r2, #0]
	}
}
 8002960:	bd10      	pop	{r4, pc}
				statuspkt.epochsecs = calcepoch();// should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8002962:	f7ff fe95 	bl	8002690 <calcepoch>
				gpslocked = 1;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_UART_RxCpltCallback+0x7c>)
 8002968:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch();// should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 800296a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				gpslocked = 1;
 800296e:	701a      	strb	r2, [r3, #0]
}
 8002970:	bd10      	pop	{r4, pc}
 8002972:	bf00      	nop
 8002974:	40011400 	.word	0x40011400
 8002978:	080227a0 	.word	0x080227a0
 800297c:	2000087c 	.word	0x2000087c
 8002980:	20000874 	.word	0x20000874
 8002984:	200222f0 	.word	0x200222f0
 8002988:	200222f9 	.word	0x200222f9
 800298c:	2002183f 	.word	0x2002183f
 8002990:	2002183c 	.word	0x2002183c
 8002994:	200008bd 	.word	0x200008bd

08002998 <HAL_UART_ErrorCallback>:

HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002998:	4603      	mov	r3, r0
	HAL_StatusTypeDef stat;
	uint8_t ch;

	printf("GPS UART_Err Callback %0lx\n", huart->ErrorCode);
 800299a:	4802      	ldr	r0, [pc, #8]	; (80029a4 <HAL_UART_ErrorCallback+0xc>)
 800299c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800299e:	f01b bd23 	b.w	801e3e8 <iprintf>
 80029a2:	bf00      	nop
 80029a4:	08022784 	.word	0x08022784

080029a8 <cycleleds>:
//////////////////////////////////////////////
//
// Initialise and test the LEDS by cycling them
//
//////////////////////////////////////////////
void cycleleds(void) {
 80029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029aa:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <cycleleds+0x74>)
	LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin };

	int i;

	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80029ae:	4c1c      	ldr	r4, [pc, #112]	; (8002a20 <cycleleds+0x78>)
 80029b0:	ae01      	add	r6, sp, #4
 80029b2:	f10d 070e 	add.w	r7, sp, #14
	const uint16_t pattern[] = {
 80029b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80029b8:	4633      	mov	r3, r6
 80029ba:	4635      	mov	r5, r6
 80029bc:	c303      	stmia	r3!, {r0, r1}
 80029be:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80029c0:	f835 1b02 	ldrh.w	r1, [r5], #2
 80029c4:	2200      	movs	r2, #0
 80029c6:	4620      	mov	r0, r4
 80029c8:	f004 ff8e 	bl	80078e8 <HAL_GPIO_WritePin>
		osDelay(140);
 80029cc:	208c      	movs	r0, #140	; 0x8c
 80029ce:	f00d f893 	bl	800faf8 <osDelay>
	for (i = 0; i < 5; i++) {
 80029d2:	42bd      	cmp	r5, r7
 80029d4:	d1f4      	bne.n	80029c0 <cycleleds+0x18>
	}
	osDelay(600);
 80029d6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80029da:	4634      	mov	r4, r6
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 80029dc:	4f10      	ldr	r7, [pc, #64]	; (8002a20 <cycleleds+0x78>)
	osDelay(600);
 80029de:	f00d f88b 	bl	800faf8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 80029e2:	f834 1b02 	ldrh.w	r1, [r4], #2
 80029e6:	2201      	movs	r2, #1
 80029e8:	4638      	mov	r0, r7
 80029ea:	f004 ff7d 	bl	80078e8 <HAL_GPIO_WritePin>
		osDelay(140);
 80029ee:	208c      	movs	r0, #140	; 0x8c
 80029f0:	f00d f882 	bl	800faf8 <osDelay>
	for (i = 0; i < 5; i++) {
 80029f4:	42ac      	cmp	r4, r5
 80029f6:	d1f4      	bne.n	80029e2 <cycleleds+0x3a>
	}
	osDelay(500);
 80029f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80029fc:	4d08      	ldr	r5, [pc, #32]	; (8002a20 <cycleleds+0x78>)
	osDelay(500);
 80029fe:	f00d f87b 	bl	800faf8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8002a02:	f836 1b02 	ldrh.w	r1, [r6], #2
 8002a06:	2200      	movs	r2, #0
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f004 ff6d 	bl	80078e8 <HAL_GPIO_WritePin>
		osDelay(140);
 8002a0e:	208c      	movs	r0, #140	; 0x8c
 8002a10:	f00d f872 	bl	800faf8 <osDelay>
	for (i = 0; i < 5; i++) {
 8002a14:	42b4      	cmp	r4, r6
 8002a16:	d1f4      	bne.n	8002a02 <cycleleds+0x5a>
	}
}
 8002a18:	b005      	add	sp, #20
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1c:	080217a0 	.word	0x080217a0
 8002a20:	40020c00 	.word	0x40020c00

08002a24 <setpgagain>:
//////////////////////////////////////////////
//
// Set the Programmable Gain Amplifier GAIN
//
//////////////////////////////////////////////
void setpgagain(int gain) {
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4604      	mov	r4, r0
	osDelay(5);
 8002a28:	2005      	movs	r0, #5
 8002a2a:	f00d f865 	bl	800faf8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2104      	movs	r1, #4
 8002a32:	4814      	ldr	r0, [pc, #80]	; (8002a84 <setpgagain+0x60>)
 8002a34:	f004 ff58 	bl	80078e8 <HAL_GPIO_WritePin>
	osDelay(5);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	osDelay(5);
	pgagain = 0x4000 | (gain & 0x07);
 8002a38:	f004 0407 	and.w	r4, r4, #7
	osDelay(5);
 8002a3c:	2005      	movs	r0, #5
	pgagain = 0x4000 | (gain & 0x07);
 8002a3e:	4d12      	ldr	r5, [pc, #72]	; (8002a88 <setpgagain+0x64>)
	osDelay(5);
 8002a40:	f00d f85a 	bl	800faf8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8002a44:	2200      	movs	r2, #0
 8002a46:	2104      	movs	r1, #4
 8002a48:	480e      	ldr	r0, [pc, #56]	; (8002a84 <setpgagain+0x60>)
 8002a4a:	f004 ff4d 	bl	80078e8 <HAL_GPIO_WritePin>
	pgagain = 0x4000 | (gain & 0x07);
 8002a4e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
	osDelay(5);
 8002a52:	2005      	movs	r0, #5
 8002a54:	f00d f850 	bl	800faf8 <osDelay>
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 8002a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4629      	mov	r1, r5
 8002a60:	480a      	ldr	r0, [pc, #40]	; (8002a8c <setpgagain+0x68>)
	pgagain = 0x4000 | (gain & 0x07);
 8002a62:	802c      	strh	r4, [r5, #0]
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 8002a64:	f007 fd7a 	bl	800a55c <HAL_SPI_Transmit>
 8002a68:	b110      	cbz	r0, 8002a70 <setpgagain+0x4c>
		printf("setpgagain: SPI Error\n");
 8002a6a:	4809      	ldr	r0, [pc, #36]	; (8002a90 <setpgagain+0x6c>)
 8002a6c:	f01b fd44 	bl	801e4f8 <puts>
	}
	osDelay(5);
 8002a70:	2005      	movs	r0, #5
 8002a72:	f00d f841 	bl	800faf8 <osDelay>
//printf("PGA Gain set to %d\n",pgagain & 7);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8002a76:	2201      	movs	r2, #1
 8002a78:	2104      	movs	r1, #4
 8002a7a:	4802      	ldr	r0, [pc, #8]	; (8002a84 <setpgagain+0x60>)
}
 8002a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8002a80:	f004 bf32 	b.w	80078e8 <HAL_GPIO_WritePin>
 8002a84:	40021800 	.word	0x40021800
 8002a88:	200002b2 	.word	0x200002b2
 8002a8c:	200219a4 	.word	0x200219a4
 8002a90:	08022b10 	.word	0x08022b10

08002a94 <initpga>:
//////////////////////////////////////////////
//
// Initialise the Programmable Gain Amplifier MCP6S93
//
//////////////////////////////////////////////
int initpga() {
 8002a94:	b510      	push	{r4, lr}
	// init spi based single ended PG Amp
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8002a96:	2201      	movs	r2, #1
int initpga() {
 8002a98:	b084      	sub	sp, #16
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	482b      	ldr	r0, [pc, #172]	; (8002b4c <initpga+0xb8>)
 8002a9e:	f004 ff23 	bl	80078e8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	4829      	ldr	r0, [pc, #164]	; (8002b4c <initpga+0xb8>)
 8002aa8:	f004 ff1e 	bl	80078e8 <HAL_GPIO_WritePin>
	osDelay(50);
 8002aac:	2032      	movs	r0, #50	; 0x32
 8002aae:	f00d f823 	bl	800faf8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	4825      	ldr	r0, [pc, #148]	; (8002b4c <initpga+0xb8>)
 8002ab8:	f004 ff16 	bl	80078e8 <HAL_GPIO_WritePin>
	osDelay(50);
 8002abc:	2032      	movs	r0, #50	; 0x32
 8002abe:	f00d f81b 	bl	800faf8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	4821      	ldr	r0, [pc, #132]	; (8002b4c <initpga+0xb8>)
 8002ac8:	f004 ff0e 	bl	80078e8 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000) != HAL_OK) {	// nop cmd
 8002acc:	2400      	movs	r4, #0
 8002ace:	a904      	add	r1, sp, #16
 8002ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	481e      	ldr	r0, [pc, #120]	; (8002b50 <initpga+0xbc>)
 8002ad8:	f821 4d0c 	strh.w	r4, [r1, #-12]!
 8002adc:	f007 fd3e 	bl	800a55c <HAL_SPI_Transmit>
 8002ae0:	bb70      	cbnz	r0, 8002b40 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 8002ae2:	9002      	str	r0, [sp, #8]
 8002ae4:	9b02      	ldr	r3, [sp, #8]
 8002ae6:	2b31      	cmp	r3, #49	; 0x31
 8002ae8:	dc05      	bgt.n	8002af6 <initpga+0x62>
 8002aea:	9b02      	ldr	r3, [sp, #8]
 8002aec:	3301      	adds	r3, #1
 8002aee:	9302      	str	r3, [sp, #8]
 8002af0:	9b02      	ldr	r3, [sp, #8]
 8002af2:	2b31      	cmp	r3, #49	; 0x31
 8002af4:	ddf9      	ble.n	8002aea <initpga+0x56>
			;
	}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8002af6:	2201      	movs	r2, #1
 8002af8:	2104      	movs	r1, #4
 8002afa:	4814      	ldr	r0, [pc, #80]	; (8002b4c <initpga+0xb8>)
 8002afc:	f004 fef4 	bl	80078e8 <HAL_GPIO_WritePin>
	osDelay(50);
 8002b00:	2032      	movs	r0, #50	; 0x32
 8002b02:	f00c fff9 	bl	800faf8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8002b06:	2200      	movs	r2, #0
 8002b08:	2104      	movs	r1, #4
 8002b0a:	4810      	ldr	r0, [pc, #64]	; (8002b4c <initpga+0xb8>)
 8002b0c:	f004 feec 	bl	80078e8 <HAL_GPIO_WritePin>
	//osDelay(5);
	if (HAL_SPI_Transmit(&hspi2, &spicmdchan[0], 1, 1000) != HAL_OK) {	// set the channel to ch1
 8002b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b14:	2201      	movs	r2, #1
 8002b16:	490f      	ldr	r1, [pc, #60]	; (8002b54 <initpga+0xc0>)
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <initpga+0xbc>)
 8002b1a:	f007 fd1f 	bl	800a55c <HAL_SPI_Transmit>
 8002b1e:	b978      	cbnz	r0, 8002b40 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 8002b20:	9003      	str	r0, [sp, #12]
 8002b22:	9b03      	ldr	r3, [sp, #12]
 8002b24:	2b31      	cmp	r3, #49	; 0x31
 8002b26:	dc05      	bgt.n	8002b34 <initpga+0xa0>
 8002b28:	9b03      	ldr	r3, [sp, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	9303      	str	r3, [sp, #12]
 8002b2e:	9b03      	ldr	r3, [sp, #12]
 8002b30:	2b31      	cmp	r3, #49	; 0x31
 8002b32:	ddf9      	ble.n	8002b28 <initpga+0x94>
			;
	}
	setpgagain(1);			// 1 == gain of 2x
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7ff ff75 	bl	8002a24 <setpgagain>
	return (0);
 8002b3a:	2000      	movs	r0, #0
}
 8002b3c:	b004      	add	sp, #16
 8002b3e:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2\n\r");
 8002b40:	4805      	ldr	r0, [pc, #20]	; (8002b58 <initpga+0xc4>)
 8002b42:	f01b fc51 	bl	801e3e8 <iprintf>
		return (1);
 8002b46:	2001      	movs	r0, #1
}
 8002b48:	b004      	add	sp, #16
 8002b4a:	bd10      	pop	{r4, pc}
 8002b4c:	40021800 	.word	0x40021800
 8002b50:	200219a4 	.word	0x200219a4
 8002b54:	08022b28 	.word	0x08022b28
 8002b58:	08022934 	.word	0x08022934

08002b5c <bumppga>:

// bump the pga by one step
int bumppga(int i) {
	volatile int gain;

	gain = pgagain & 0x7;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <bumppga+0x48>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
int bumppga(int i) {
 8002b60:	b500      	push	{lr}
	gain = pgagain & 0x7;
 8002b62:	f003 0307 	and.w	r3, r3, #7
int bumppga(int i) {
 8002b66:	b083      	sub	sp, #12
	gain = pgagain & 0x7;
 8002b68:	9301      	str	r3, [sp, #4]
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8002b6a:	9b01      	ldr	r3, [sp, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	dc02      	bgt.n	8002b76 <bumppga+0x1a>
 8002b70:	43c3      	mvns	r3, r0
 8002b72:	0fdb      	lsrs	r3, r3, #31
 8002b74:	b13b      	cbz	r3, 8002b86 <bumppga+0x2a>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	dd08      	ble.n	8002b8e <bumppga+0x32>
 8002b7c:	2b06      	cmp	r3, #6
 8002b7e:	bfcc      	ite	gt
 8002b80:	2300      	movgt	r3, #0
 8002b82:	2301      	movle	r3, #1
 8002b84:	b91b      	cbnz	r3, 8002b8e <bumppga+0x32>
		gain = gain + i;
		setpgagain(gain);
		return(gain);
	}
return(0);
 8002b86:	4618      	mov	r0, r3
}
 8002b88:	b003      	add	sp, #12
 8002b8a:	f85d fb04 	ldr.w	pc, [sp], #4
		gain = gain + i;
 8002b8e:	9b01      	ldr	r3, [sp, #4]
 8002b90:	4418      	add	r0, r3
 8002b92:	9001      	str	r0, [sp, #4]
		setpgagain(gain);
 8002b94:	9801      	ldr	r0, [sp, #4]
 8002b96:	f7ff ff45 	bl	8002a24 <setpgagain>
		return(gain);
 8002b9a:	9801      	ldr	r0, [sp, #4]
}
 8002b9c:	b003      	add	sp, #12
 8002b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ba2:	bf00      	nop
 8002ba4:	200002b2 	.word	0x200002b2

08002ba8 <initdualmux>:
//////////////////////////////////////////////
//
// Initialise the dual mux ADG729
//
//////////////////////////////////////////////
void initdualmux(void) {
 8002ba8:	b500      	push	{lr}
	//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8002baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void initdualmux(void) {
 8002bae:	b083      	sub	sp, #12
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <initdualmux+0x2c>)
 8002bb4:	9000      	str	r0, [sp, #0]
 8002bb6:	2188      	movs	r1, #136	; 0x88
 8002bb8:	4807      	ldr	r0, [pc, #28]	; (8002bd8 <initdualmux+0x30>)
 8002bba:	f005 f913 	bl	8007de4 <HAL_I2C_Master_Transmit>
 8002bbe:	b910      	cbnz	r0, 8002bc6 <initdualmux+0x1e>
		printf("I2C HAL returned error 1\n\r");
	}
}
 8002bc0:	b003      	add	sp, #12
 8002bc2:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <initdualmux+0x34>)
}
 8002bc8:	b003      	add	sp, #12
 8002bca:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 8002bce:	f01b bc0b 	b.w	801e3e8 <iprintf>
 8002bd2:	bf00      	nop
 8002bd4:	200002b0 	.word	0x200002b0
 8002bd8:	20021b90 	.word	0x20021b90
 8002bdc:	08022918 	.word	0x08022918

08002be0 <getpressure115>:

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8002be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002be4:	ed2d 8b02 	vpush	{d8}
 8002be8:	b091      	sub	sp, #68	; 0x44
	HAL_StatusTypeDef result;
	volatile double ffrac, p, t, n;
	uint16_t pr, tr;
	uint8_t testdat[8];

	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8002bea:	2112      	movs	r1, #18
 8002bec:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	aa10      	add	r2, sp, #64	; 0x40
 8002bf4:	4878      	ldr	r0, [pc, #480]	; (8002dd8 <getpressure115+0x1f8>)
 8002bf6:	f822 1d2c 	strh.w	r1, [r2, #-44]!
 8002bfa:	21c0      	movs	r1, #192	; 0xc0
 8002bfc:	9500      	str	r5, [sp, #0]
 8002bfe:	f005 f8f1 	bl	8007de4 <HAL_I2C_Master_Transmit>
	// CMD Start Conversion
	if (result != HAL_OK) {
 8002c02:	4607      	mov	r7, r0
 8002c04:	2800      	cmp	r0, #0
 8002c06:	f040 80c4 	bne.w	8002d92 <getpressure115+0x1b2>
		return (result);
	}

	osDelay(4);		// conversion time max 3mS

	for (i = 0; i < 4; i++) {
 8002c0a:	4604      	mov	r4, r0
	osDelay(4);		// conversion time max 3mS
 8002c0c:	2004      	movs	r0, #4
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 8002c0e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8002dd8 <getpressure115+0x1f8>
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8002c12:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8002e04 <getpressure115+0x224>
	osDelay(4);		// conversion time max 3mS
 8002c16:	f00c ff6f 	bl	800faf8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 8002c1a:	aa0e      	add	r2, sp, #56	; 0x38
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	9502      	str	r5, [sp, #8]
 8002c20:	4640      	mov	r0, r8
 8002c22:	1911      	adds	r1, r2, r4
 8002c24:	b2a2      	uxth	r2, r4
 8002c26:	e9cd 1300 	strd	r1, r3, [sp]
 8002c2a:	21c1      	movs	r1, #193	; 0xc1
 8002c2c:	f005 f980 	bl	8007f30 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8002c30:	4606      	mov	r6, r0
 8002c32:	2800      	cmp	r0, #0
 8002c34:	f040 809f 	bne.w	8002d76 <getpressure115+0x196>
	for (i = 0; i < 4; i++) {
 8002c38:	3401      	adds	r4, #1
 8002c3a:	2c04      	cmp	r4, #4
 8002c3c:	d1ed      	bne.n	8002c1a <getpressure115+0x3a>
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
	tr = (data[2] * 256 + data[3]) >> 6;
 8002c3e:	f89d 403a 	ldrb.w	r4, [sp, #58]	; 0x3a
//	printf("Comp: Press = %f\n", p);

	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
//	printf("kPA Press = %f\n", p);

	ffrac = modf(p, &n);
 8002c42:	a80c      	add	r0, sp, #48	; 0x30
	pr = (data[0] * 256 + data[1]) >> 6;
 8002c44:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
	tr = (data[2] * 256 + data[3]) >> 6;
 8002c48:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	pr = (data[0] * 256 + data[1]) >> 6;
 8002c4c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	tr = (data[2] * 256 + data[3]) >> 6;
 8002c50:	eb02 2204 	add.w	r2, r2, r4, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002c54:	4c61      	ldr	r4, [pc, #388]	; (8002ddc <getpressure115+0x1fc>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8002c56:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002c5a:	4961      	ldr	r1, [pc, #388]	; (8002de0 <getpressure115+0x200>)
	tr = (data[2] * 256 + data[3]) >> 6;
 8002c5c:	1192      	asrs	r2, r2, #6
	temperature = t;
	tempfrac = (t - temperature) * 100;

//	printf("\ntemperature1 = %d.%d  ", temperature, tempfrac);
//	printf("\ntemperature2 = %f  ", t);
	tempfrac = tempfrac * 100;	// now 10,000
 8002c5e:	4d61      	ldr	r5, [pc, #388]	; (8002de4 <getpressure115+0x204>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8002c60:	099b      	lsrs	r3, r3, #6
	tr = (data[2] * 256 + data[3]) >> 6;
 8002c62:	ee08 2a10 	vmov	s16, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002c66:	4a60      	ldr	r2, [pc, #384]	; (8002de8 <getpressure115+0x208>)
	p = pr;
 8002c68:	ee07 3a90 	vmov	s15, r3
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002c6c:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <getpressure115+0x20c>)
	t = tr;
 8002c6e:	eeb8 6b48 	vcvt.f64.u32	d6, s16
	p = pr;
 8002c72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	t = tr;
 8002c76:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	p = pr;
 8002c7a:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002c7e:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8002c82:	ed94 4b00 	vldr	d4, [r4]
 8002c86:	ed91 5b00 	vldr	d5, [r1]
 8002c8a:	ed9d 1b08 	vldr	d1, [sp, #32]
 8002c8e:	ed92 7b00 	vldr	d7, [r2]
 8002c92:	eea4 5b06 	vfma.f64	d5, d4, d6
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002c96:	4c56      	ldr	r4, [pc, #344]	; (8002df0 <getpressure115+0x210>)
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002c98:	ed9d 3b0a 	vldr	d3, [sp, #40]	; 0x28
 8002c9c:	ed93 2b00 	vldr	d2, [r3]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8002ca0:	ed9f 4b41 	vldr	d4, [pc, #260]	; 8002da8 <getpressure115+0x1c8>
 8002ca4:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8002db0 <getpressure115+0x1d0>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002ca8:	eea5 7b01 	vfma.f64	d7, d5, d1
 8002cac:	eea2 7b03 	vfma.f64	d7, d2, d3
 8002cb0:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8002cb4:	ed9d 7b08 	vldr	d7, [sp, #32]
 8002cb8:	eea7 6b04 	vfma.f64	d6, d7, d4
 8002cbc:	ed8d 6b08 	vstr	d6, [sp, #32]
	ffrac = modf(p, &n);
 8002cc0:	ed9d 0b08 	vldr	d0, [sp, #32]
 8002cc4:	f01b fc5c 	bl	801e580 <modf>
	t = tr * -0.1706 + 112.27; //C
 8002cc8:	eeb8 7bc8 	vcvt.f64.s32	d7, s16

				printf("myt 0x%x, %d, t=%f, myf=%f\n\r",myt,myt,t,myf);

			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002ccc:	eeb3 8b00 	vmov.f64	d8, #48	; 0x41800000  16.0
	tempfrac = tempfrac * 100;	// now 10,000
 8002cd0:	2264      	movs	r2, #100	; 0x64
	temperature = t;
 8002cd2:	4b48      	ldr	r3, [pc, #288]	; (8002df4 <getpressure115+0x214>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002cd4:	4848      	ldr	r0, [pc, #288]	; (8002df8 <getpressure115+0x218>)
	pressure = (uint32_t) n;
 8002cd6:	4949      	ldr	r1, [pc, #292]	; (8002dfc <getpressure115+0x21c>)
	t = tr * -0.1706 + 112.27; //C
 8002cd8:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8002db8 <getpressure115+0x1d8>
 8002cdc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8002dc0 <getpressure115+0x1e0>
	ffrac = modf(p, &n);
 8002ce0:	ed8d 0b06 	vstr	d0, [sp, #24]
	pressure = (uint32_t) n;
 8002ce4:	ed9d 3b0c 	vldr	d3, [sp, #48]	; 0x30
	t = tr * -0.1706 + 112.27; //C
 8002ce8:	eea7 6b05 	vfma.f64	d6, d7, d5
	pressure = (uint32_t) n;
 8002cec:	eebc 3bc3 	vcvt.u32.f64	s6, d3
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002cf0:	ed9d 4b06 	vldr	d4, [sp, #24]
 8002cf4:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8002dc8 <getpressure115+0x1e8>
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002cf8:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8002dd0 <getpressure115+0x1f0>
	pressure = (uint32_t) n;
 8002cfc:	ed81 3a00 	vstr	s6, [r1]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002d00:	ee24 4b00 	vmul.f64	d4, d4, d0
	t = tr * -0.1706 + 112.27; //C
 8002d04:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	temperature = t;
 8002d08:	ed9d 2b0a 	vldr	d2, [sp, #40]	; 0x28
	tempfrac = (t - temperature) * 100;
 8002d0c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002d10:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
	temperature = t;
 8002d14:	eebc 2bc2 	vcvt.u32.f64	s4, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002d18:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002d1c:	ee26 6b08 	vmul.f64	d6, d6, d8
	temperature = t;
 8002d20:	ed83 2a00 	vstr	s4, [r3]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002d24:	ed84 4a00 	vstr	s8, [r4]
	tempfrac = (t - temperature) * 100;
 8002d28:	eeb8 7b42 	vcvt.f64.u32	d7, s4
 8002d2c:	ee35 5b47 	vsub.f64	d5, d5, d7
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002d30:	feb8 6b46 	vrinta.f64	d6, d6
 8002d34:	eefc 6bc6 	vcvt.u32.f64	s13, d6
	tempfrac = (t - temperature) * 100;
 8002d38:	ee25 5b00 	vmul.f64	d5, d5, d0
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002d3c:	ee16 3a90 	vmov	r3, s13
 8002d40:	ed9d 7b08 	vldr	d7, [sp, #32]
	tempfrac = (t - temperature) * 100;
 8002d44:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002d48:	ee27 7b01 	vmul.f64	d7, d7, d1
	tempfrac = tempfrac * 100;	// now 10,000
 8002d4c:	ee15 6a10 	vmov	r6, s10
 8002d50:	fb02 f206 	mul.w	r2, r2, r6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002d54:	feb8 7b47 	vrinta.f64	d7, d7
 8002d58:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = tempfrac * 100;	// now 10,000
 8002d5c:	602a      	str	r2, [r5, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002d5e:	ee17 2a10 	vmov	r2, s14
 8002d62:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8002d66:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
}
 8002d6a:	4638      	mov	r0, r7
 8002d6c:	b011      	add	sp, #68	; 0x44
 8002d6e:	ecbd 8b02 	vpop	{d8}
 8002d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8002d76:	4601      	mov	r1, r0
 8002d78:	4648      	mov	r0, r9
 8002d7a:	f01b fb35 	bl	801e3e8 <iprintf>
			if (i == 3)
 8002d7e:	2c03      	cmp	r4, #3
 8002d80:	f47f af5a 	bne.w	8002c38 <getpressure115+0x58>
 8002d84:	4637      	mov	r7, r6
}
 8002d86:	4638      	mov	r0, r7
 8002d88:	b011      	add	sp, #68	; 0x44
 8002d8a:	ecbd 8b02 	vpop	{d8}
 8002d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8002d92:	481b      	ldr	r0, [pc, #108]	; (8002e00 <getpressure115+0x220>)
 8002d94:	f01b fb28 	bl	801e3e8 <iprintf>
}
 8002d98:	4638      	mov	r0, r7
 8002d9a:	b011      	add	sp, #68	; 0x44
 8002d9c:	ecbd 8b02 	vpop	{d8}
 8002da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002da4:	f3af 8000 	nop.w
 8002da8:	04411044 	.word	0x04411044
 8002dac:	3fb04411 	.word	0x3fb04411
 8002db0:	00000000 	.word	0x00000000
 8002db4:	40490000 	.word	0x40490000
 8002db8:	86594af5 	.word	0x86594af5
 8002dbc:	bfc5d638 	.word	0xbfc5d638
 8002dc0:	ae147ae1 	.word	0xae147ae1
 8002dc4:	405c1147 	.word	0x405c1147
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	40590000 	.word	0x40590000
 8002dd0:	00000000 	.word	0x00000000
 8002dd4:	40af4000 	.word	0x40af4000
 8002dd8:	20021b90 	.word	0x20021b90
 8002ddc:	200008a0 	.word	0x200008a0
 8002de0:	20000890 	.word	0x20000890
 8002de4:	20022350 	.word	0x20022350
 8002de8:	20000888 	.word	0x20000888
 8002dec:	20000898 	.word	0x20000898
 8002df0:	2002235c 	.word	0x2002235c
 8002df4:	20022354 	.word	0x20022354
 8002df8:	2002183c 	.word	0x2002183c
 8002dfc:	20022358 	.word	0x20022358
 8002e00:	08022880 	.word	0x08022880
 8002e04:	080228a4 	.word	0x080228a4

08002e08 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8002e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8002e0c:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
HAL_StatusTypeDef initpressure115(void) {
 8002e10:	b086      	sub	sp, #24

//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
 8002e12:	2400      	movs	r4, #0
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8002e14:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8002e18:	2701      	movs	r7, #1
 8002e1a:	4e33      	ldr	r6, [pc, #204]	; (8002ee8 <initpressure115+0xe0>)
		data[i] = 0x5A;
 8002e1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8002e20:	ab04      	add	r3, sp, #16
 8002e22:	1d22      	adds	r2, r4, #4
 8002e24:	21c0      	movs	r1, #192	; 0xc0
 8002e26:	4630      	mov	r0, r6
 8002e28:	4423      	add	r3, r4
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	3401      	adds	r4, #1
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2301      	movs	r3, #1
 8002e32:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8002e36:	f005 f87b 	bl	8007f30 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8002e3a:	4605      	mov	r5, r0
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d142      	bne.n	8002ec6 <initpressure115+0xbe>
	for (i = 0; i < 8; i++) {
 8002e40:	2c08      	cmp	r4, #8
 8002e42:	d1ed      	bne.n	8002e20 <initpressure115+0x18>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8002e44:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002e48:	2c5a      	cmp	r4, #90	; 0x5a
 8002e4a:	d044      	beq.n	8002ed6 <initpressure115+0xce>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8002e4c:	f89d 2012 	ldrb.w	r2, [sp, #18]
	b2co = (data[4] << 8) | data[5];
 8002e50:	f89d 3014 	ldrb.w	r3, [sp, #20]
	b1co = (data[2] << 8) | data[3];
 8002e54:	f89d 0013 	ldrb.w	r0, [sp, #19]
	b2co = (data[4] << 8) | data[5];
 8002e58:	f89d 1015 	ldrb.w	r1, [sp, #21]
	c12co = (data[6] << 8) | data[7];
 8002e5c:	f89d 6016 	ldrb.w	r6, [sp, #22]
	b1co = (data[2] << 8) | data[3];
 8002e60:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	b2co = (data[4] << 8) | data[5];
 8002e64:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	c12co = (data[6] << 8) | data[7];
 8002e68:	f89d 2017 	ldrb.w	r2, [sp, #23]
	a0co = (data[0] << 8) | data[1];
 8002e6c:	f89d 3011 	ldrb.w	r3, [sp, #17]
	b1co = (data[2] << 8) | data[3];
 8002e70:	b200      	sxth	r0, r0
	c12co = (data[6] << 8) | data[7];
 8002e72:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	a0co = (data[0] << 8) | data[1];
 8002e76:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
	b1 = (double) b1co / 8192;
 8002e7a:	ee04 0a10 	vmov	s8, r0
 8002e7e:	eeba 4be9 	vcvt.f64.s32	d4, d4, #13
	b2co = (data[4] << 8) | data[5];
 8002e82:	b209      	sxth	r1, r1
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8002e84:	f342 028d 	sbfx	r2, r2, #2, #14
	a0 = (double) a0co / 8;
 8002e88:	b21b      	sxth	r3, r3
	b1 = (double) b1co / 8192;
 8002e8a:	4818      	ldr	r0, [pc, #96]	; (8002eec <initpressure115+0xe4>)
	b2 = (double) b2co / 16384;
 8002e8c:	ee05 1a10 	vmov	s10, r1
 8002e90:	eeba 5bc9 	vcvt.f64.s32	d5, d5, #14
 8002e94:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <initpressure115+0xe8>)
	c12 /= (double) 4194304.0;
 8002e96:	ee06 2a10 	vmov	s12, r2
 8002e9a:	eeba 6bc5 	vcvt.f64.s32	d6, d6, #22
 8002e9e:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <initpressure115+0xec>)
	a0 = (double) a0co / 8;
 8002ea0:	ee07 3a10 	vmov	s14, r3
 8002ea4:	eeba 7bee 	vcvt.f64.s32	d7, d7, #3
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <initpressure115+0xf0>)
	b1 = (double) b1co / 8192;
 8002eaa:	ed80 4b00 	vstr	d4, [r0]
	b2 = (double) b2co / 16384;
 8002eae:	ed81 5b00 	vstr	d5, [r1]
	c12 /= (double) 4194304.0;
 8002eb2:	ed82 6b00 	vstr	d6, [r2]
	a0 = (double) a0co / 8;
 8002eb6:	ed83 7b00 	vstr	d7, [r3]

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
 8002eba:	f7ff fe91 	bl	8002be0 <getpressure115>
	return (HAL_OK);
}
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	b006      	add	sp, #24
 8002ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	480c      	ldr	r0, [pc, #48]	; (8002efc <initpressure115+0xf4>)
 8002eca:	f01b fa8d 	bl	801e3e8 <iprintf>
}
 8002ece:	4628      	mov	r0, r5
 8002ed0:	b006      	add	sp, #24
 8002ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8002ed6:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8002ed8:	4809      	ldr	r0, [pc, #36]	; (8002f00 <initpressure115+0xf8>)
 8002eda:	f01b fa85 	bl	801e3e8 <iprintf>
}
 8002ede:	4628      	mov	r0, r5
 8002ee0:	b006      	add	sp, #24
 8002ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20021b90 	.word	0x20021b90
 8002eec:	20000890 	.word	0x20000890
 8002ef0:	20000898 	.word	0x20000898
 8002ef4:	200008a0 	.word	0x200008a0
 8002ef8:	20000888 	.word	0x20000888
 8002efc:	0802294c 	.word	0x0802294c
 8002f00:	0802297c 	.word	0x0802297c
 8002f04:	00000000 	.word	0x00000000

08002f08 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8002f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0c:	b08a      	sub	sp, #40	; 0x28
	int i, trys;
	HAL_StatusTypeDef result;
	uint32_t p, t;
	double fp, fn, ffrac;

	data[0] = 0x55;
 8002f0e:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8002f10:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8002f12:	4f4b      	ldr	r7, [pc, #300]	; (8003040 <getpressure3115+0x138>)
	data[0] = 0x55;
 8002f14:	ae0a      	add	r6, sp, #40	; 0x28
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8002f16:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800305c <getpressure3115+0x154>
	data[0] = 0x55;
 8002f1a:	f806 3d10 	strb.w	r3, [r6, #-16]!
		osDelay(10);
 8002f1e:	200a      	movs	r0, #10
 8002f20:	f00c fdea 	bl	800faf8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8002f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f28:	2301      	movs	r3, #1
 8002f2a:	9600      	str	r6, [sp, #0]
 8002f2c:	9202      	str	r2, [sp, #8]
 8002f2e:	21c0      	movs	r1, #192	; 0xc0
 8002f30:	2200      	movs	r2, #0
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	4638      	mov	r0, r7
 8002f36:	f004 fffb 	bl	8007f30 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	d165      	bne.n	800300c <getpressure3115+0x104>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8002f40:	f89d 3018 	ldrb.w	r3, [sp, #24]
	for (trys = 0; trys < 4; trys++) {
 8002f44:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8002f46:	071b      	lsls	r3, r3, #28
 8002f48:	d401      	bmi.n	8002f4e <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8002f4a:	2d04      	cmp	r5, #4
 8002f4c:	d1e7      	bne.n	8002f1e <getpressure3115+0x16>
 8002f4e:	2501      	movs	r5, #1
 8002f50:	af08      	add	r7, sp, #32
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8002f52:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8002f56:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8003040 <getpressure3115+0x138>
 8002f5a:	46a8      	mov	r8, r5
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	b2aa      	uxth	r2, r5
 8002f60:	f8cd a008 	str.w	sl, [sp, #8]
 8002f64:	21c0      	movs	r1, #192	; 0xc0
 8002f66:	f8cd 8004 	str.w	r8, [sp, #4]
 8002f6a:	4648      	mov	r0, r9
 8002f6c:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8002f6e:	441d      	add	r5, r3
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8002f70:	f004 ffde 	bl	8007f30 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8002f74:	4604      	mov	r4, r0
 8002f76:	2800      	cmp	r0, #0
 8002f78:	d152      	bne.n	8003020 <getpressure3115+0x118>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8002f7a:	f89d 3018 	ldrb.w	r3, [sp, #24]
	for (i = 1; i < 6; i++) {
 8002f7e:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8002f80:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8002f84:	d1ea      	bne.n	8002f5c <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002f86:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21

//	pressure = p >> 2;  	// these are in Pascals not KPa as required
//	pressfrac = (p & 3) * 25;		// these are in Pascals not KPa as required

	fp = p / 4000.0;
	ffrac = modf(fp, &fn);
 8002f8a:	a804      	add	r0, sp, #16
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002f8c:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8002f90:	0212      	lsls	r2, r2, #8
 8002f92:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8002f96:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002f9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8002f9e:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8002fa2:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002fa6:	4313      	orrs	r3, r2
	statuspkt.temppress = t << 20 | p;								// update status packet
 8002fa8:	4a26      	ldr	r2, [pc, #152]	; (8003044 <getpressure3115+0x13c>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8002faa:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002fae:	091b      	lsrs	r3, r3, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8002fb0:	112d      	asrs	r5, r5, #4
	fp = p / 4000.0;
 8002fb2:	ee07 3a90 	vmov	s15, r3
	statuspkt.temppress = t << 20 | p;								// update status packet
 8002fb6:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
	fp = p / 4000.0;
 8002fba:	eeb8 0be7 	vcvt.f64.s32	d0, s15
	statuspkt.temppress = t << 20 | p;								// update status packet
 8002fbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	fp = p / 4000.0;
 8002fc2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8003030 <getpressure3115+0x128>
	ffrac = modf(fp, &fn);
 8002fc6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8002fca:	f01b fad9 	bl	801e580 <modf>
	pressure = (uint32_t) fn;
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8002fce:	f005 010f 	and.w	r1, r5, #15
 8002fd2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002fd6:	481c      	ldr	r0, [pc, #112]	; (8003048 <getpressure3115+0x140>)
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <getpressure3115+0x144>)
	temperature = t >> 4;
 8002fda:	092d      	lsrs	r5, r5, #4
	tempfrac = (t & 0x0F) * 625 * 100;
 8002fdc:	fb03 f301 	mul.w	r3, r3, r1
	temperature = t >> 4;
 8002fe0:	491b      	ldr	r1, [pc, #108]	; (8003050 <getpressure3115+0x148>)
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002fe2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8003038 <getpressure3115+0x130>
	pressure = (uint32_t) fn;
 8002fe6:	ed9d 6b04 	vldr	d6, [sp, #16]
	tempfrac = (t & 0x0F) * 625 * 100;
 8002fea:	6003      	str	r3, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8002fec:	4620      	mov	r0, r4
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002fee:	ee20 0b07 	vmul.f64	d0, d0, d7
	pressure = (uint32_t) fn;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <getpressure3115+0x14c>)
	temperature = t >> 4;
 8002ff4:	600d      	str	r5, [r1, #0]
	pressure = (uint32_t) fn;
 8002ff6:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002ffa:	eebc 0bc0 	vcvt.u32.f64	s0, d0
	pressure = (uint32_t) fn;
 8002ffe:	ed83 6a00 	vstr	s12, [r3]
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003002:	ed82 0a00 	vstr	s0, [r2]
}
 8003006:	b00a      	add	sp, #40	; 0x28
 8003008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 800300c:	4601      	mov	r1, r0
 800300e:	4640      	mov	r0, r8
 8003010:	f01b f9ea 	bl	801e3e8 <iprintf>
			if (trys == 3)
 8003014:	2d03      	cmp	r5, #3
 8003016:	d193      	bne.n	8002f40 <getpressure3115+0x38>
}
 8003018:	4620      	mov	r0, r4
 800301a:	b00a      	add	sp, #40	; 0x28
 800301c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8003020:	4601      	mov	r1, r0
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <getpressure3115+0x150>)
 8003024:	f01b f9e0 	bl	801e3e8 <iprintf>
}
 8003028:	4620      	mov	r0, r4
 800302a:	b00a      	add	sp, #40	; 0x28
 800302c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003030:	00000000 	.word	0x00000000
 8003034:	40af4000 	.word	0x40af4000
 8003038:	00000000 	.word	0x00000000
 800303c:	40f86a00 	.word	0x40f86a00
 8003040:	20021b90 	.word	0x20021b90
 8003044:	2002183c 	.word	0x2002183c
 8003048:	20022350 	.word	0x20022350
 800304c:	2002235c 	.word	0x2002235c
 8003050:	20022354 	.word	0x20022354
 8003054:	20022358 	.word	0x20022358
 8003058:	080228f0 	.word	0x080228f0
 800305c:	080228c8 	.word	0x080228c8

08003060 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8003060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003062:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8003064:	2501      	movs	r5, #1
 8003066:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800306a:	220c      	movs	r2, #12
 800306c:	a808      	add	r0, sp, #32
 800306e:	462b      	mov	r3, r5
 8003070:	9602      	str	r6, [sp, #8]
 8003072:	21c0      	movs	r1, #192	; 0xc0
 8003074:	9000      	str	r0, [sp, #0]
 8003076:	9501      	str	r5, [sp, #4]
 8003078:	482f      	ldr	r0, [pc, #188]	; (8003138 <initpressure3115+0xd8>)
 800307a:	f004 ff59 	bl	8007f30 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 800307e:	b938      	cbnz	r0, 8003090 <initpressure3115+0x30>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8003080:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003084:	2bc4      	cmp	r3, #196	; 0xc4
 8003086:	d00a      	beq.n	800309e <initpressure3115+0x3e>
		return (HAL_ERROR);
 8003088:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 800308a:	4620      	mov	r0, r4
 800308c:	b00b      	add	sp, #44	; 0x2c
 800308e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003090:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8003092:	482a      	ldr	r0, [pc, #168]	; (800313c <initpressure3115+0xdc>)
 8003094:	f01b f9a8 	bl	801e3e8 <iprintf>
}
 8003098:	4620      	mov	r0, r4
 800309a:	b00b      	add	sp, #44	; 0x2c
 800309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 800309e:	4f28      	ldr	r7, [pc, #160]	; (8003140 <initpressure3115+0xe0>)
 80030a0:	aa0a      	add	r2, sp, #40	; 0x28
 80030a2:	9600      	str	r6, [sp, #0]
 80030a4:	2302      	movs	r3, #2
 80030a6:	89bc      	ldrh	r4, [r7, #12]
 80030a8:	21c0      	movs	r1, #192	; 0xc0
 80030aa:	4823      	ldr	r0, [pc, #140]	; (8003138 <initpressure3115+0xd8>)
 80030ac:	f822 4d14 	strh.w	r4, [r2, #-20]!
 80030b0:	f004 fe98 	bl	8007de4 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80030b4:	4604      	mov	r4, r0
 80030b6:	bb78      	cbnz	r0, 8003118 <initpressure3115+0xb8>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 80030b8:	8a39      	ldrh	r1, [r7, #16]
 80030ba:	aa0a      	add	r2, sp, #40	; 0x28
 80030bc:	9600      	str	r6, [sp, #0]
 80030be:	2302      	movs	r3, #2
 80030c0:	f822 1d10 	strh.w	r1, [r2, #-16]!
 80030c4:	21c0      	movs	r1, #192	; 0xc0
 80030c6:	481c      	ldr	r0, [pc, #112]	; (8003138 <initpressure3115+0xd8>)
 80030c8:	f004 fe8c 	bl	8007de4 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80030cc:	4604      	mov	r4, r0
 80030ce:	bb38      	cbnz	r0, 8003120 <initpressure3115+0xc0>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 80030d0:	8ab9      	ldrh	r1, [r7, #20]
 80030d2:	aa0a      	add	r2, sp, #40	; 0x28
 80030d4:	9600      	str	r6, [sp, #0]
 80030d6:	2302      	movs	r3, #2
 80030d8:	f822 1d0c 	strh.w	r1, [r2, #-12]!
 80030dc:	21c0      	movs	r1, #192	; 0xc0
 80030de:	4816      	ldr	r0, [pc, #88]	; (8003138 <initpressure3115+0xd8>)
 80030e0:	f004 fe80 	bl	8007de4 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80030e4:	4604      	mov	r4, r0
 80030e6:	b9f8      	cbnz	r0, 8003128 <initpressure3115+0xc8>
	osDelay(100);	// allow chip to start up sampling
 80030e8:	2064      	movs	r0, #100	; 0x64
 80030ea:	f00c fd05 	bl	800faf8 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 80030ee:	aa08      	add	r2, sp, #32
 80030f0:	462b      	mov	r3, r5
 80030f2:	21c0      	movs	r1, #192	; 0xc0
 80030f4:	9200      	str	r2, [sp, #0]
 80030f6:	462a      	mov	r2, r5
 80030f8:	480f      	ldr	r0, [pc, #60]	; (8003138 <initpressure3115+0xd8>)
 80030fa:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80030fe:	f004 ff17 	bl	8007f30 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8003102:	4604      	mov	r4, r0
 8003104:	b9a0      	cbnz	r0, 8003130 <initpressure3115+0xd0>
	result = getpressure3115();
 8003106:	f7ff feff 	bl	8002f08 <getpressure3115>
	if (result != HAL_OK) {
 800310a:	4604      	mov	r4, r0
 800310c:	2800      	cmp	r0, #0
 800310e:	d0bc      	beq.n	800308a <initpressure3115+0x2a>
		printf("MPL3115A2 getpressure failed\n\r");
 8003110:	480c      	ldr	r0, [pc, #48]	; (8003144 <initpressure3115+0xe4>)
 8003112:	f01b f969 	bl	801e3e8 <iprintf>
 8003116:	e7b8      	b.n	800308a <initpressure3115+0x2a>
		printf("I2C HAL returned error 2b\n\r");
 8003118:	480b      	ldr	r0, [pc, #44]	; (8003148 <initpressure3115+0xe8>)
 800311a:	f01b f965 	bl	801e3e8 <iprintf>
		return (result);
 800311e:	e7b4      	b.n	800308a <initpressure3115+0x2a>
		printf("I2C HAL returned error 3\n\r");
 8003120:	480a      	ldr	r0, [pc, #40]	; (800314c <initpressure3115+0xec>)
 8003122:	f01b f961 	bl	801e3e8 <iprintf>
		return (result);
 8003126:	e7b0      	b.n	800308a <initpressure3115+0x2a>
		printf("I2C HAL returned error 4\n\r");
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <initpressure3115+0xf0>)
 800312a:	f01b f95d 	bl	801e3e8 <iprintf>
		return (result);
 800312e:	e7ac      	b.n	800308a <initpressure3115+0x2a>
		printf("I2C HAL returned error 5\n\r");
 8003130:	4808      	ldr	r0, [pc, #32]	; (8003154 <initpressure3115+0xf4>)
 8003132:	f01b f959 	bl	801e3e8 <iprintf>
		return (result);
 8003136:	e7a8      	b.n	800308a <initpressure3115+0x2a>
 8003138:	20021b90 	.word	0x20021b90
 800313c:	08022918 	.word	0x08022918
 8003140:	080217a0 	.word	0x080217a0
 8003144:	08022a14 	.word	0x08022a14
 8003148:	080229a4 	.word	0x080229a4
 800314c:	080229c0 	.word	0x080229c0
 8003150:	080229dc 	.word	0x080229dc
 8003154:	080229f8 	.word	0x080229f8

08003158 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8003158:	b510      	push	{r4, lr}
	int i, j, k;

	cycleleds();
 800315a:	f7ff fc25 	bl	80029a8 <cycleleds>
	osDelay(500);
 800315e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003162:	f00c fcc9 	bl	800faf8 <osDelay>
	printf("Initsplat: LED cycle\n");
 8003166:	4820      	ldr	r0, [pc, #128]	; (80031e8 <initsplat+0x90>)
 8003168:	f01b f9c6 	bl	801e4f8 <puts>

	printf("Initsplat: Dual Mux\n\r");
 800316c:	481f      	ldr	r0, [pc, #124]	; (80031ec <initsplat+0x94>)
 800316e:	f01b f93b 	bl	801e3e8 <iprintf>
	printf("Initsplat: Programmable Gain Amp\n");
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8003172:	4c1f      	ldr	r4, [pc, #124]	; (80031f0 <initsplat+0x98>)
	initdualmux();
 8003174:	f7ff fd18 	bl	8002ba8 <initdualmux>
	osDelay(500);
 8003178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800317c:	f00c fcbc 	bl	800faf8 <osDelay>
	printf("Initsplat: Programmable Gain Amp\n");
 8003180:	481c      	ldr	r0, [pc, #112]	; (80031f4 <initsplat+0x9c>)
 8003182:	f01b f9b9 	bl	801e4f8 <puts>
	initpga();
 8003186:	f7ff fc85 	bl	8002a94 <initpga>
	osDelay(500);
 800318a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800318e:	f00c fcb3 	bl	800faf8 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8003192:	4819      	ldr	r0, [pc, #100]	; (80031f8 <initsplat+0xa0>)
 8003194:	f01b f928 	bl	801e3e8 <iprintf>
	psensor = PNONE;
 8003198:	2300      	movs	r3, #0
 800319a:	6023      	str	r3, [r4, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 800319c:	f7ff ff60 	bl	8003060 <initpressure3115>
 80031a0:	b1b0      	cbz	r0, 80031d0 <initsplat+0x78>
		printf("MPL3115A2 pressure sensor present\n\r");
		psensor = MPL3115A2;
	} else {
		if (initpressure115() == HAL_OK) {
 80031a2:	f7ff fe31 	bl	8002e08 <initpressure115>
 80031a6:	b140      	cbz	r0, 80031ba <initsplat+0x62>
			printf("MPL115A2 pressure sensor present\n\r");
			psensor = MPL115A2;		// assume MPL115 fitted instead
		} else {
			printf("NO pressure sensor present\n\r");
 80031a8:	4814      	ldr	r0, [pc, #80]	; (80031fc <initsplat+0xa4>)
 80031aa:	f01b f91d 	bl	801e3e8 <iprintf>
		}
	}
	osDelay(500);
 80031ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80031b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 80031b6:	f00c bc9f 	b.w	800faf8 <osDelay>
			printf("MPL115A2 pressure sensor present\n\r");
 80031ba:	4811      	ldr	r0, [pc, #68]	; (8003200 <initsplat+0xa8>)
 80031bc:	f01b f914 	bl	801e3e8 <iprintf>
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80031c0:	2302      	movs	r3, #2
	osDelay(500);
 80031c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80031c6:	6023      	str	r3, [r4, #0]
}
 80031c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 80031cc:	f00c bc94 	b.w	800faf8 <osDelay>
		printf("MPL3115A2 pressure sensor present\n\r");
 80031d0:	480c      	ldr	r0, [pc, #48]	; (8003204 <initsplat+0xac>)
 80031d2:	f01b f909 	bl	801e3e8 <iprintf>
		psensor = MPL3115A2;
 80031d6:	2301      	movs	r3, #1
	osDelay(500);
 80031d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		psensor = MPL3115A2;
 80031dc:	6023      	str	r3, [r4, #0]
}
 80031de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 80031e2:	f00c bc89 	b.w	800faf8 <osDelay>
 80031e6:	bf00      	nop
 80031e8:	08022a34 	.word	0x08022a34
 80031ec:	08022a4c 	.word	0x08022a4c
 80031f0:	200008ac 	.word	0x200008ac
 80031f4:	08022a64 	.word	0x08022a64
 80031f8:	08022a88 	.word	0x08022a88
 80031fc:	08022af0 	.word	0x08022af0
 8003200:	08022acc 	.word	0x08022acc
 8003204:	08022aa8 	.word	0x08022aa8

08003208 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <HAL_MspInit+0x5c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	210f      	movs	r1, #15
 800320e:	f06f 0001 	mvn.w	r0, #1
{
 8003212:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003214:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8003216:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800321c:	641c      	str	r4, [r3, #64]	; 0x40
 800321e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003220:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8003224:	9400      	str	r4, [sp, #0]
 8003226:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003228:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800322a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800322e:	645c      	str	r4, [r3, #68]	; 0x44
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800323a:	f002 f80b 	bl	8005254 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2106      	movs	r1, #6
 8003242:	2005      	movs	r0, #5
 8003244:	f002 f806 	bl	8005254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003248:	2005      	movs	r0, #5
 800324a:	f002 f849 	bl	80052e0 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	2106      	movs	r1, #6
 8003252:	2051      	movs	r0, #81	; 0x51
 8003254:	f001 fffe 	bl	8005254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003258:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325a:	b002      	add	sp, #8
 800325c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003260:	f002 b83e 	b.w	80052e0 <HAL_NVIC_EnableIRQ>
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003268:	4a48      	ldr	r2, [pc, #288]	; (800338c <HAL_ADC_MspInit+0x124>)
 800326a:	6803      	ldr	r3, [r0, #0]
{
 800326c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 800326e:	4293      	cmp	r3, r2
{
 8003270:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003272:	f04f 0400 	mov.w	r4, #0
 8003276:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800327a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800327e:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hadc->Instance==ADC1)
 8003280:	d007      	beq.n	8003292 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003282:	4a43      	ldr	r2, [pc, #268]	; (8003390 <HAL_ADC_MspInit+0x128>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d063      	beq.n	8003350 <HAL_ADC_MspInit+0xe8>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8003288:	4a42      	ldr	r2, [pc, #264]	; (8003394 <HAL_ADC_MspInit+0x12c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d043      	beq.n	8003316 <HAL_ADC_MspInit+0xae>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800328e:	b00d      	add	sp, #52	; 0x34
 8003290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_ADC_MspInit+0x130>)
 8003294:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003296:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003298:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800329a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329c:	a907      	add	r1, sp, #28
    hdma_adc1.Instance = DMA2_Stream4;
 800329e:	4d3f      	ldr	r5, [pc, #252]	; (800339c <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44
 80032a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80032ac:	9201      	str	r2, [sp, #4]
 80032ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032ba:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032bc:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c0:	4837      	ldr	r0, [pc, #220]	; (80033a0 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032c2:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c4:	9302      	str	r3, [sp, #8]
 80032c6:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c8:	f004 f958 	bl	800757c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 80032cc:	4a35      	ldr	r2, [pc, #212]	; (80033a4 <HAL_ADC_MspInit+0x13c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032d6:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032da:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80032dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032e0:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 80032e4:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032e6:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032e8:	2204      	movs	r2, #4
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80032ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80032ee:	606c      	str	r4, [r5, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032f0:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f2:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032f4:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032f6:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80032f8:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032fa:	e9c5 c005 	strd	ip, r0, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032fe:	4628      	mov	r0, r5
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003300:	e9c5 7107 	strd	r7, r1, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003304:	f002 fa78 	bl	80057f8 <HAL_DMA_Init>
 8003308:	b108      	cbz	r0, 800330e <HAL_ADC_MspInit+0xa6>
      Error_Handler();
 800330a:	f7fe f9ff 	bl	800170c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800330e:	63b5      	str	r5, [r6, #56]	; 0x38
 8003310:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8003312:	b00d      	add	sp, #52	; 0x34
 8003314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003318:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800331a:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331c:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 800331e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003320:	481f      	ldr	r0, [pc, #124]	; (80033a0 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003326:	645a      	str	r2, [r3, #68]	; 0x44
 8003328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800332a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800332e:	9205      	str	r2, [sp, #20]
 8003330:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800333c:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003342:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003344:	9306      	str	r3, [sp, #24]
 8003346:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003348:	f004 f918 	bl	800757c <HAL_GPIO_Init>
}
 800334c:	b00d      	add	sp, #52	; 0x34
 800334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003352:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003354:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	4811      	ldr	r0, [pc, #68]	; (80033a0 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800335c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003360:	645a      	str	r2, [r3, #68]	; 0x44
 8003362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003364:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003368:	9203      	str	r2, [sp, #12]
 800336a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003376:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003378:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800337c:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	9304      	str	r3, [sp, #16]
 8003380:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	f004 f8fb 	bl	800757c <HAL_GPIO_Init>
}
 8003386:	b00d      	add	sp, #52	; 0x34
 8003388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800338a:	bf00      	nop
 800338c:	40012000 	.word	0x40012000
 8003390:	40012100 	.word	0x40012100
 8003394:	40012200 	.word	0x40012200
 8003398:	40023800 	.word	0x40023800
 800339c:	20021f68 	.word	0x20021f68
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40026470 	.word	0x40026470

080033a8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80033a8:	6802      	ldr	r2, [r0, #0]
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_CRC_MspInit+0x28>)
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d000      	beq.n	80033b2 <HAL_CRC_MspInit+0xa>
 80033b0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80033b2:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80033b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 80033ba:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 80033bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80033cc:	b002      	add	sp, #8
 80033ce:	4770      	bx	lr
 80033d0:	40023000 	.word	0x40023000

080033d4 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 80033d4:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_DAC_MspInit+0xb0>)
 80033d6:	6802      	ldr	r2, [r0, #0]
{
 80033d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC)
 80033da:	429a      	cmp	r2, r3
{
 80033dc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033de:	f04f 0400 	mov.w	r4, #0
 80033e2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80033e6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80033ea:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC)
 80033ec:	d001      	beq.n	80033f2 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80033ee:	b009      	add	sp, #36	; 0x24
 80033f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 80033f2:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80033f6:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033f8:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033fa:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 80033fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fe:	a903      	add	r1, sp, #12
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003400:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC_CLK_ENABLE();
 8003404:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003410:	9201      	str	r2, [sp, #4]
 8003412:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800341e:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003420:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003424:	4818      	ldr	r0, [pc, #96]	; (8003488 <HAL_DAC_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003426:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003428:	9302      	str	r3, [sp, #8]
    hdma_dac1.Instance = DMA1_Stream5;
 800342a:	4d18      	ldr	r5, [pc, #96]	; (800348c <HAL_DAC_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342e:	f004 f8a5 	bl	800757c <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <HAL_DAC_MspInit+0xbc>)
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003434:	2040      	movs	r0, #64	; 0x40
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003436:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800343a:	2104      	movs	r1, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 800343c:	2202      	movs	r2, #2
    hdma_dac1.Instance = DMA1_Stream5;
 800343e:	602b      	str	r3, [r5, #0]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8003440:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003444:	60ec      	str	r4, [r5, #12]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003446:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003448:	612f      	str	r7, [r5, #16]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 800344a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800344c:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003450:	4628      	mov	r0, r5
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003452:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003456:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 800345a:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800345e:	f002 f9cb 	bl	80057f8 <HAL_DMA_Init>
 8003462:	b958      	cbnz	r0, 800347c <HAL_DAC_MspInit+0xa8>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003464:	60b5      	str	r5, [r6, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2106      	movs	r1, #6
 800346a:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800346c:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800346e:	f001 fef1 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003472:	2036      	movs	r0, #54	; 0x36
 8003474:	f001 ff34 	bl	80052e0 <HAL_NVIC_EnableIRQ>
}
 8003478:	b009      	add	sp, #36	; 0x24
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800347c:	f7fe f946 	bl	800170c <Error_Handler>
 8003480:	e7f0      	b.n	8003464 <HAL_DAC_MspInit+0x90>
 8003482:	bf00      	nop
 8003484:	40007400 	.word	0x40007400
 8003488:	40020000 	.word	0x40020000
 800348c:	20021d6c 	.word	0x20021d6c
 8003490:	40026088 	.word	0x40026088

08003494 <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8003494:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003496:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8003498:	493d      	ldr	r1, [pc, #244]	; (8003590 <HAL_I2C_MspInit+0xfc>)
{
 800349a:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->Instance==I2C1)
 800349c:	428a      	cmp	r2, r1
{
 800349e:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80034a4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80034a8:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2c->Instance==I2C1)
 80034aa:	d007      	beq.n	80034bc <HAL_I2C_MspInit+0x28>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <HAL_I2C_MspInit+0x100>)
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d04c      	beq.n	800354c <HAL_I2C_MspInit+0xb8>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 80034b2:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_I2C_MspInit+0x104>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d025      	beq.n	8003504 <HAL_I2C_MspInit+0x70>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80034b8:	b00c      	add	sp, #48	; 0x30
 80034ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034bc:	4c37      	ldr	r4, [pc, #220]	; (800359c <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034be:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c0:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80034c2:	f44f 7610 	mov.w	r6, #576	; 0x240
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c8:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ca:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	6323      	str	r3, [r4, #48]	; 0x30
 80034d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034d4:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034d6:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d8:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034dc:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034de:	4830      	ldr	r0, [pc, #192]	; (80035a0 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80034e4:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034e6:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ea:	f004 f847 	bl	800757c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034f4:	6423      	str	r3, [r4, #64]	; 0x40
 80034f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034fc:	9302      	str	r3, [sp, #8]
 80034fe:	9b02      	ldr	r3, [sp, #8]
}
 8003500:	b00c      	add	sp, #48	; 0x30
 8003502:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003504:	4c25      	ldr	r4, [pc, #148]	; (800359c <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003506:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003508:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800350a:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800350e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003512:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	6323      	str	r3, [r4, #48]	; 0x30
 800351a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800351c:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800351e:	2204      	movs	r2, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003520:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003524:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003526:	481f      	ldr	r0, [pc, #124]	; (80035a4 <HAL_I2C_MspInit+0x110>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003528:	9305      	str	r3, [sp, #20]
 800352a:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800352c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800352e:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003532:	f004 f823 	bl	800757c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353c:	6423      	str	r3, [r4, #64]	; 0x40
 800353e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003544:	9306      	str	r3, [sp, #24]
 8003546:	9b06      	ldr	r3, [sp, #24]
}
 8003548:	b00c      	add	sp, #48	; 0x30
 800354a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800354c:	4c13      	ldr	r4, [pc, #76]	; (800359c <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800354e:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003550:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003552:	2601      	movs	r6, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003554:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003556:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003558:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800355a:	f043 0320 	orr.w	r3, r3, #32
 800355e:	6323      	str	r3, [r4, #48]	; 0x30
 8003560:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003562:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003564:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003568:	480e      	ldr	r0, [pc, #56]	; (80035a4 <HAL_I2C_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800356a:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800356c:	9303      	str	r3, [sp, #12]
 800356e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003570:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003572:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003574:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003576:	f004 f801 	bl	800757c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800357a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800357c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003580:	6423      	str	r3, [r4, #64]	; 0x40
 8003582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003588:	9304      	str	r3, [sp, #16]
 800358a:	9b04      	ldr	r3, [sp, #16]
}
 800358c:	b00c      	add	sp, #48	; 0x30
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	40005400 	.word	0x40005400
 8003594:	40005800 	.word	0x40005800
 8003598:	40006000 	.word	0x40006000
 800359c:	40023800 	.word	0x40023800
 80035a0:	40020400 	.word	0x40020400
 80035a4:	40021400 	.word	0x40021400

080035a8 <HAL_MDIOS_MspInit>:
* @retval None
*/
void HAL_MDIOS_MspInit(MDIOS_HandleTypeDef* hmdios)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hmdios->Instance==MDIOS)
 80035a8:	6802      	ldr	r2, [r0, #0]
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_MDIOS_MspInit+0x74>)
{
 80035ac:	b570      	push	{r4, r5, r6, lr}
  if(hmdios->Instance==MDIOS)
 80035ae:	429a      	cmp	r2, r3
{
 80035b0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b2:	f04f 0400 	mov.w	r4, #0
 80035b6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80035ba:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80035be:	9407      	str	r4, [sp, #28]
  if(hmdios->Instance==MDIOS)
 80035c0:	d001      	beq.n	80035c6 <HAL_MDIOS_MspInit+0x1e>
  /* USER CODE BEGIN MDIOS_MspInit 1 */

  /* USER CODE END MDIOS_MspInit 1 */
  }

}
 80035c2:	b008      	add	sp, #32
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_MDIO_CLK_ENABLE();
 80035c6:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80035cc:	f44f 6688 	mov.w	r6, #1088	; 0x440
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d0:	2503      	movs	r5, #3
    __HAL_RCC_MDIO_CLK_ENABLE();
 80035d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d4:	a903      	add	r1, sp, #12
    __HAL_RCC_MDIO_CLK_ENABLE();
 80035d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035da:	645a      	str	r2, [r3, #68]	; 0x44
 80035dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035e2:	9201      	str	r2, [sp, #4]
 80035e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 80035ee:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f4:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f8:	4809      	ldr	r0, [pc, #36]	; (8003620 <HAL_MDIOS_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80035fa:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fc:	9302      	str	r3, [sp, #8]
 80035fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003600:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003604:	f003 ffba 	bl	800757c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(MDIOS_IRQn, 6, 0);
 8003608:	4622      	mov	r2, r4
 800360a:	2106      	movs	r1, #6
 800360c:	206d      	movs	r0, #109	; 0x6d
 800360e:	f001 fe21 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MDIOS_IRQn);
 8003612:	206d      	movs	r0, #109	; 0x6d
 8003614:	f001 fe64 	bl	80052e0 <HAL_NVIC_EnableIRQ>
}
 8003618:	b008      	add	sp, #32
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	40017800 	.word	0x40017800
 8003620:	40020000 	.word	0x40020000

08003624 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8003624:	6802      	ldr	r2, [r0, #0]
 8003626:	4b08      	ldr	r3, [pc, #32]	; (8003648 <HAL_RNG_MspInit+0x24>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d000      	beq.n	800362e <HAL_RNG_MspInit+0xa>
 800362c:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_RNG_MspInit+0x28>)
{
 8003630:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8003632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003638:	635a      	str	r2, [r3, #52]	; 0x34
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003644:	b002      	add	sp, #8
 8003646:	4770      	bx	lr
 8003648:	50060800 	.word	0x50060800
 800364c:	40023800 	.word	0x40023800

08003650 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8003650:	6803      	ldr	r3, [r0, #0]
 8003652:	4a56      	ldr	r2, [pc, #344]	; (80037ac <HAL_SPI_MspInit+0x15c>)
{
 8003654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hspi->Instance==SPI2)
 8003658:	4293      	cmp	r3, r2
{
 800365a:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f04f 0400 	mov.w	r4, #0
 8003660:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003664:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003668:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 800366a:	d008      	beq.n	800367e <HAL_SPI_MspInit+0x2e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 800366c:	4a50      	ldr	r2, [pc, #320]	; (80037b0 <HAL_SPI_MspInit+0x160>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d05c      	beq.n	800372c <HAL_SPI_MspInit+0xdc>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8003672:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_SPI_MspInit+0x164>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d037      	beq.n	80036e8 <HAL_SPI_MspInit+0x98>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003678:	b00e      	add	sp, #56	; 0x38
 800367a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800367e:	4b4e      	ldr	r3, [pc, #312]	; (80037b8 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003680:	200c      	movs	r0, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003684:	2601      	movs	r6, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003688:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368a:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 800368c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003690:	641a      	str	r2, [r3, #64]	; 0x40
 8003692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003694:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003698:	9201      	str	r2, [sp, #4]
 800369a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800369c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369e:	f042 0204 	orr.w	r2, r2, #4
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
 80036a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a6:	f002 0204 	and.w	r2, r2, #4
 80036aa:	9202      	str	r2, [sp, #8]
 80036ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b0:	f042 0208 	orr.w	r2, r2, #8
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036b8:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036ba:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036be:	483f      	ldr	r0, [pc, #252]	; (80037bc <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c0:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036c2:	9303      	str	r3, [sp, #12]
 80036c4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036c6:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ca:	f003 ff57 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036ce:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d0:	a909      	add	r1, sp, #36	; 0x24
 80036d2:	483b      	ldr	r0, [pc, #236]	; (80037c0 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036d8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036da:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036de:	f003 ff4d 	bl	800757c <HAL_GPIO_Init>
}
 80036e2:	b00e      	add	sp, #56	; 0x38
 80036e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 80036e8:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80036ea:	2074      	movs	r0, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036ee:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 80036f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80036f4:	2405      	movs	r4, #5
    __HAL_RCC_SPI4_CLK_ENABLE();
 80036f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
 80036fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003702:	9207      	str	r2, [sp, #28]
 8003704:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003708:	f042 0210 	orr.w	r2, r2, #16
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003710:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003712:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003716:	482b      	ldr	r0, [pc, #172]	; (80037c4 <HAL_SPI_MspInit+0x174>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800371a:	9308      	str	r3, [sp, #32]
 800371c:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800371e:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003722:	f003 ff2b 	bl	800757c <HAL_GPIO_Init>
}
 8003726:	b00e      	add	sp, #56	; 0x38
 8003728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003730:	2004      	movs	r0, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003732:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003736:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003738:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800373a:	f04f 0806 	mov.w	r8, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 800373e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
 8003744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003746:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800374a:	9204      	str	r2, [sp, #16]
 800374c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003750:	4332      	orrs	r2, r6
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
 8003754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003756:	4032      	ands	r2, r6
 8003758:	9205      	str	r2, [sp, #20]
 800375a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800375c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375e:	4302      	orrs	r2, r0
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003764:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003766:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003768:	4817      	ldr	r0, [pc, #92]	; (80037c8 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376a:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800376c:	9306      	str	r3, [sp, #24]
 800376e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003770:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003772:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003774:	f003 ff02 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003778:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377c:	a909      	add	r1, sp, #36	; 0x24
 800377e:	480f      	ldr	r0, [pc, #60]	; (80037bc <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003780:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003784:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800378c:	f003 fef6 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003790:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003792:	a909      	add	r1, sp, #36	; 0x24
 8003794:	480c      	ldr	r0, [pc, #48]	; (80037c8 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800379a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800379c:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a0:	f003 feec 	bl	800757c <HAL_GPIO_Init>
}
 80037a4:	b00e      	add	sp, #56	; 0x38
 80037a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037aa:	bf00      	nop
 80037ac:	40003800 	.word	0x40003800
 80037b0:	40003c00 	.word	0x40003c00
 80037b4:	40013400 	.word	0x40013400
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40020800 	.word	0x40020800
 80037c0:	40020c00 	.word	0x40020c00
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40020400 	.word	0x40020400

080037cc <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80037cc:	4a64      	ldr	r2, [pc, #400]	; (8003960 <HAL_TIM_Base_MspInit+0x194>)
 80037ce:	6803      	ldr	r3, [r0, #0]
{
 80037d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(htim_base->Instance==TIM1)
 80037d4:	4293      	cmp	r3, r2
{
 80037d6:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	f04f 0400 	mov.w	r4, #0
 80037dc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80037e0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80037e4:	940d      	str	r4, [sp, #52]	; 0x34
  if(htim_base->Instance==TIM1)
 80037e6:	d01e      	beq.n	8003826 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ec:	4605      	mov	r5, r0
 80037ee:	d034      	beq.n	800385a <HAL_TIM_Base_MspInit+0x8e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80037f0:	4a5c      	ldr	r2, [pc, #368]	; (8003964 <HAL_TIM_Base_MspInit+0x198>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	f000 808d 	beq.w	8003912 <HAL_TIM_Base_MspInit+0x146>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80037f8:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <HAL_TIM_Base_MspInit+0x19c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d020      	beq.n	8003840 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80037fe:	4a5b      	ldr	r2, [pc, #364]	; (800396c <HAL_TIM_Base_MspInit+0x1a0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	f000 8099 	beq.w	8003938 <HAL_TIM_Base_MspInit+0x16c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8003806:	4a5a      	ldr	r2, [pc, #360]	; (8003970 <HAL_TIM_Base_MspInit+0x1a4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d109      	bne.n	8003820 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800380c:	4b59      	ldr	r3, [pc, #356]	; (8003974 <HAL_TIM_Base_MspInit+0x1a8>)
 800380e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003810:	f042 0220 	orr.w	r2, r2, #32
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	9308      	str	r3, [sp, #32]
 800381e:	9b08      	ldr	r3, [sp, #32]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003820:	b00f      	add	sp, #60	; 0x3c
 8003822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003826:	4b53      	ldr	r3, [pc, #332]	; (8003974 <HAL_TIM_Base_MspInit+0x1a8>)
 8003828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	9b01      	ldr	r3, [sp, #4]
}
 800383a:	b00f      	add	sp, #60	; 0x3c
 800383c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003840:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <HAL_TIM_Base_MspInit+0x1a8>)
 8003842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003844:	f042 0204 	orr.w	r2, r2, #4
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	9306      	str	r3, [sp, #24]
 8003852:	9b06      	ldr	r3, [sp, #24]
}
 8003854:	b00f      	add	sp, #60	; 0x3c
 8003856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800385a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800385e:	2701      	movs	r7, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003864:	2020      	movs	r0, #32
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003868:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800386a:	f44f 6980 	mov.w	r9, #1024	; 0x400
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800386e:	4e42      	ldr	r6, [pc, #264]	; (8003978 <HAL_TIM_Base_MspInit+0x1ac>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003870:	433a      	orrs	r2, r7
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
 8003874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003876:	403a      	ands	r2, r7
 8003878:	9202      	str	r2, [sp, #8]
 800387a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387e:	433a      	orrs	r2, r7
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
 8003882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003884:	403a      	ands	r2, r7
 8003886:	9203      	str	r2, [sp, #12]
 8003888:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388c:	ea42 0208 	orr.w	r2, r2, r8
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003894:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003896:	ea03 0308 	and.w	r3, r3, r8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389a:	4838      	ldr	r0, [pc, #224]	; (800397c <HAL_TIM_Base_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800389c:	970d      	str	r7, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a6:	f003 fe69 	bl	800757c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038aa:	a909      	add	r1, sp, #36	; 0x24
 80038ac:	4834      	ldr	r0, [pc, #208]	; (8003980 <HAL_TIM_Base_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038ae:	970d      	str	r7, [sp, #52]	; 0x34
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80038b0:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038bc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c0:	f003 fe5c 	bl	800757c <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80038c4:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8003984 <HAL_TIM_Base_MspInit+0x1b8>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80038d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80038d4:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80038d6:	f8c6 9010 	str.w	r9, [r6, #16]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038da:	60b4      	str	r4, [r6, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80038dc:	60f4      	str	r4, [r6, #12]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80038de:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038e0:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80038e4:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038e8:	e9c6 1205 	strd	r1, r2, [r6, #20]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80038ec:	f001 ff84 	bl	80057f8 <HAL_DMA_Init>
 80038f0:	b108      	cbz	r0, 80038f6 <HAL_TIM_Base_MspInit+0x12a>
      Error_Handler();
 80038f2:	f7fd ff0b 	bl	800170c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 80038f6:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80038f8:	2200      	movs	r2, #0
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 80038fa:	62ee      	str	r6, [r5, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80038fc:	2106      	movs	r1, #6
 80038fe:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8003900:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8003902:	f001 fca7 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003906:	201c      	movs	r0, #28
 8003908:	f001 fcea 	bl	80052e0 <HAL_NVIC_EnableIRQ>
}
 800390c:	b00f      	add	sp, #60	; 0x3c
 800390e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <HAL_TIM_Base_MspInit+0x1a8>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8003914:	4622      	mov	r2, r4
 8003916:	2106      	movs	r1, #6
 8003918:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800391a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800391c:	f044 0402 	orr.w	r4, r4, #2
 8003920:	641c      	str	r4, [r3, #64]	; 0x40
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	9305      	str	r3, [sp, #20]
 800392a:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800392c:	f001 fc92 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003930:	201d      	movs	r0, #29
 8003932:	f001 fcd5 	bl	80052e0 <HAL_NVIC_EnableIRQ>
 8003936:	e773      	b.n	8003820 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_TIM_Base_MspInit+0x1a8>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800393a:	4622      	mov	r2, r4
 800393c:	2106      	movs	r1, #6
 800393e:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003940:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003942:	f044 0410 	orr.w	r4, r4, #16
 8003946:	641c      	str	r4, [r3, #64]	; 0x40
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	9307      	str	r3, [sp, #28]
 8003950:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003952:	f001 fc7f 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003956:	2036      	movs	r0, #54	; 0x36
 8003958:	f001 fcc2 	bl	80052e0 <HAL_NVIC_EnableIRQ>
 800395c:	e760      	b.n	8003820 <HAL_TIM_Base_MspInit+0x54>
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40001000 	.word	0x40001000
 8003970:	40001400 	.word	0x40001400
 8003974:	40023800 	.word	0x40023800
 8003978:	20021c68 	.word	0x20021c68
 800397c:	40020000 	.word	0x40020000
 8003980:	40020400 	.word	0x40020400
 8003984:	40026028 	.word	0x40026028

08003988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8003988:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398a:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 800398c:	491c      	ldr	r1, [pc, #112]	; (8003a00 <HAL_TIM_MspPostInit+0x78>)
{
 800398e:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM3)
 8003990:	428a      	cmp	r2, r1
{
 8003992:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003994:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003998:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800399c:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 800399e:	d019      	beq.n	80039d4 <HAL_TIM_MspPostInit+0x4c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_TIM_MspPostInit+0x7c>)
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80039a6:	b009      	add	sp, #36	; 0x24
 80039a8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039aa:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ae:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80039b0:	f44f 7580 	mov.w	r5, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b8:	4813      	ldr	r0, [pc, #76]	; (8003a08 <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ba:	4322      	orrs	r2, r4
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80039c0:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c2:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039c6:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c8:	9302      	str	r3, [sp, #8]
 80039ca:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039cc:	f003 fdd6 	bl	800757c <HAL_GPIO_Init>
}
 80039d0:	b009      	add	sp, #36	; 0x24
 80039d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039d8:	2580      	movs	r5, #128	; 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039da:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039de:	480c      	ldr	r0, [pc, #48]	; (8003a10 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e0:	f042 0204 	orr.w	r2, r2, #4
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039e8:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ea:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039f0:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f6:	f003 fdc1 	bl	800757c <HAL_GPIO_Init>
}
 80039fa:	b009      	add	sp, #36	; 0x24
 80039fc:	bd30      	pop	{r4, r5, pc}
 80039fe:	bf00      	nop
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40020400 	.word	0x40020400
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020800 	.word	0x40020800

08003a14 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART4)
 8003a14:	4aad      	ldr	r2, [pc, #692]	; (8003ccc <HAL_UART_MspInit+0x2b8>)
 8003a16:	6803      	ldr	r3, [r0, #0]
{
 8003a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(huart->Instance==UART4)
 8003a1c:	4293      	cmp	r3, r2
{
 8003a1e:	b097      	sub	sp, #92	; 0x5c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a20:	f04f 0400 	mov.w	r4, #0
 8003a24:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8003a28:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8003a2c:	9415      	str	r4, [sp, #84]	; 0x54
  if(huart->Instance==UART4)
 8003a2e:	d035      	beq.n	8003a9c <HAL_UART_MspInit+0x88>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8003a30:	4aa7      	ldr	r2, [pc, #668]	; (8003cd0 <HAL_UART_MspInit+0x2bc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d07b      	beq.n	8003b2e <HAL_UART_MspInit+0x11a>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8003a36:	4aa7      	ldr	r2, [pc, #668]	; (8003cd4 <HAL_UART_MspInit+0x2c0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f000 80ac 	beq.w	8003b96 <HAL_UART_MspInit+0x182>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8003a3e:	4aa6      	ldr	r2, [pc, #664]	; (8003cd8 <HAL_UART_MspInit+0x2c4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	f000 80cb 	beq.w	8003bdc <HAL_UART_MspInit+0x1c8>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8003a46:	4aa5      	ldr	r2, [pc, #660]	; (8003cdc <HAL_UART_MspInit+0x2c8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d006      	beq.n	8003a5a <HAL_UART_MspInit+0x46>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8003a4c:	4aa4      	ldr	r2, [pc, #656]	; (8003ce0 <HAL_UART_MspInit+0x2cc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	f000 80e4 	beq.w	8003c1c <HAL_UART_MspInit+0x208>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a54:	b017      	add	sp, #92	; 0x5c
 8003a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a5a:	4ba2      	ldr	r3, [pc, #648]	; (8003ce4 <HAL_UART_MspInit+0x2d0>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003a5c:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a60:	2612      	movs	r6, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a62:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a66:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a68:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a72:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003a76:	920c      	str	r2, [sp, #48]	; 0x30
 8003a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7c:	f042 0208 	orr.w	r2, r2, #8
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003a84:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a86:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a8a:	4897      	ldr	r0, [pc, #604]	; (8003ce8 <HAL_UART_MspInit+0x2d4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a8c:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8003a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a92:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a96:	f003 fd71 	bl	800757c <HAL_GPIO_Init>
 8003a9a:	e7db      	b.n	8003a54 <HAL_UART_MspInit+0x40>
    __HAL_RCC_UART4_CLK_ENABLE();
 8003a9c:	4b91      	ldr	r3, [pc, #580]	; (8003ce4 <HAL_UART_MspInit+0x2d0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8003aa0:	f248 0001 	movw	r0, #32769	; 0x8001
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa4:	2603      	movs	r6, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8003aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003aa8:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aaa:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART4_CLK_ENABLE();
 8003aac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003ab8:	9201      	str	r2, [sp, #4]
 8003aba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac6:	f002 0201 	and.w	r2, r2, #1
 8003aca:	9202      	str	r2, [sp, #8]
 8003acc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad0:	433a      	orrs	r2, r7
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad6:	403a      	ands	r2, r7
 8003ad8:	9203      	str	r2, [sp, #12]
 8003ada:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ade:	f042 0204 	orr.w	r2, r2, #4
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8003ae6:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae8:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aec:	487f      	ldr	r0, [pc, #508]	; (8003cec <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aee:	9712      	str	r7, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af0:	9304      	str	r3, [sp, #16]
 8003af2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003af4:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f003 fd40 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b00:	a911      	add	r1, sp, #68	; 0x44
 8003b02:	487b      	ldr	r0, [pc, #492]	; (8003cf0 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b04:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b0a:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0e:	f003 fd35 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b16:	a911      	add	r1, sp, #68	; 0x44
 8003b18:	4876      	ldr	r0, [pc, #472]	; (8003cf4 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1a:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b1e:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b20:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b24:	f003 fd2a 	bl	800757c <HAL_GPIO_Init>
}
 8003b28:	b017      	add	sp, #92	; 0x5c
 8003b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ce4 <HAL_UART_MspInit+0x2d0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b32:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2603      	movs	r6, #3
    __HAL_RCC_UART5_CLK_ENABLE();
 8003b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003b3a:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3c:	a911      	add	r1, sp, #68	; 0x44
 8003b3e:	486c      	ldr	r0, [pc, #432]	; (8003cf0 <HAL_UART_MspInit+0x2dc>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8003b40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
 8003b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b4c:	9205      	str	r2, [sp, #20]
 8003b4e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b52:	433a      	orrs	r2, r7
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
 8003b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b58:	403a      	ands	r2, r7
 8003b5a:	9206      	str	r2, [sp, #24]
 8003b5c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b60:	f042 0204 	orr.w	r2, r2, #4
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b68:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6c:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b70:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b72:	9614      	str	r6, [sp, #80]	; 0x50
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b74:	9307      	str	r3, [sp, #28]
 8003b76:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003b78:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	f003 fcff 	bl	800757c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7e:	a911      	add	r1, sp, #68	; 0x44
 8003b80:	485c      	ldr	r0, [pc, #368]	; (8003cf4 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	e9cd 8711 	strd	r8, r7, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003b88:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b8c:	f003 fcf6 	bl	800757c <HAL_GPIO_Init>
}
 8003b90:	b017      	add	sp, #92	; 0x5c
 8003b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 8003b96:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <HAL_UART_MspInit+0x2d0>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003b98:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b9e:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART7_CLK_ENABLE();
 8003ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003ba4:	2408      	movs	r4, #8
    __HAL_RCC_UART7_CLK_ENABLE();
 8003ba6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
 8003bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bb2:	9208      	str	r2, [sp, #32]
 8003bb4:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb8:	f042 0220 	orr.w	r2, r2, #32
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003bc0:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bc2:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bc6:	484c      	ldr	r0, [pc, #304]	; (8003cf8 <HAL_UART_MspInit+0x2e4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bca:	9309      	str	r3, [sp, #36]	; 0x24
 8003bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003bce:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bd2:	f003 fcd3 	bl	800757c <HAL_GPIO_Init>
}
 8003bd6:	b017      	add	sp, #92	; 0x5c
 8003bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bdc:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_UART_MspInit+0x2d0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003bde:	2070      	movs	r0, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be0:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be2:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8003be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003be6:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003be8:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
 8003bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003bf6:	920a      	str	r2, [sp, #40]	; 0x28
 8003bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfc:	f042 0208 	orr.w	r2, r2, #8
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003c04:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c06:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c0a:	4837      	ldr	r0, [pc, #220]	; (8003ce8 <HAL_UART_MspInit+0x2d4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c12:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c16:	f003 fcb1 	bl	800757c <HAL_GPIO_Init>
 8003c1a:	e71b      	b.n	8003a54 <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c1c:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <HAL_UART_MspInit+0x2d0>)
 8003c1e:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c20:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c24:	2708      	movs	r7, #8
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c28:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2c:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c30:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c32:	f042 0220 	orr.w	r2, r2, #32
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003c36:	4e31      	ldr	r6, [pc, #196]	; (8003cfc <HAL_UART_MspInit+0x2e8>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
 8003c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3c:	f002 0220 	and.w	r2, r2, #32
 8003c40:	920e      	str	r2, [sp, #56]	; 0x38
 8003c42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003c52:	920f      	str	r2, [sp, #60]	; 0x3c
 8003c54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c58:	f042 0204 	orr.w	r2, r2, #4
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c60:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c62:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c66:	4826      	ldr	r0, [pc, #152]	; (8003d00 <HAL_UART_MspInit+0x2ec>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6c:	9310      	str	r3, [sp, #64]	; 0x40
 8003c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c70:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c74:	f003 fc82 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c78:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7a:	a911      	add	r1, sp, #68	; 0x44
 8003c7c:	481d      	ldr	r0, [pc, #116]	; (8003cf4 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c7e:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c80:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c86:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c8a:	f003 fc77 	bl	800757c <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003c8e:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003c92:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003d04 <HAL_UART_MspInit+0x2f0>
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003ca2:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ca4:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ca6:	6131      	str	r1, [r6, #16]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ca8:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cac:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003cb0:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003cb4:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003cb8:	f001 fd9e 	bl	80057f8 <HAL_DMA_Init>
 8003cbc:	b910      	cbnz	r0, 8003cc4 <HAL_UART_MspInit+0x2b0>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003cbe:	66ee      	str	r6, [r5, #108]	; 0x6c
 8003cc0:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8003cc2:	e6c7      	b.n	8003a54 <HAL_UART_MspInit+0x40>
      Error_Handler();
 8003cc4:	f7fd fd22 	bl	800170c <Error_Handler>
 8003cc8:	e7f9      	b.n	8003cbe <HAL_UART_MspInit+0x2aa>
 8003cca:	bf00      	nop
 8003ccc:	40004c00 	.word	0x40004c00
 8003cd0:	40005000 	.word	0x40005000
 8003cd4:	40007800 	.word	0x40007800
 8003cd8:	40004400 	.word	0x40004400
 8003cdc:	40004800 	.word	0x40004800
 8003ce0:	40011400 	.word	0x40011400
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020c00 	.word	0x40020c00
 8003cec:	40020000 	.word	0x40020000
 8003cf0:	40020400 	.word	0x40020400
 8003cf4:	40020800 	.word	0x40020800
 8003cf8:	40021400 	.word	0x40021400
 8003cfc:	20021944 	.word	0x20021944
 8003d00:	40021800 	.word	0x40021800
 8003d04:	40026428 	.word	0x40026428

08003d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d08:	b570      	push	{r4, r5, r6, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;

  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 8003d0a:	4601      	mov	r1, r0
{
 8003d0c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	202b      	movs	r0, #43	; 0x2b
 8003d12:	f001 fa9f 	bl	8005254 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003d16:	202b      	movs	r0, #43	; 0x2b
 8003d18:	f001 fae2 	bl	80052e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d1e:	a901      	add	r1, sp, #4
 8003d20:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 8003d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute TIM12 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003d24:	4e14      	ldr	r6, [pc, #80]	; (8003d78 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8003d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8003d2a:	4c14      	ldr	r4, [pc, #80]	; (8003d7c <HAL_InitTick+0x74>)
 8003d2c:	4d14      	ldr	r5, [pc, #80]	; (8003d80 <HAL_InitTick+0x78>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	9302      	str	r3, [sp, #8]
 8003d38:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d3a:	f005 fd2d 	bl	8009798 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d3e:	f005 fd0b 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000 / 1000) - 1;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 8003d42:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d44:	0043      	lsls	r3, r0, #1
  htim12.Init.Period = (1000000 / 1000) - 1;
 8003d46:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim12.Instance = TIM12;
 8003d4a:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003d4c:	fba6 0303 	umull	r0, r3, r6, r3
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8003d50:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003d52:	0c9b      	lsrs	r3, r3, #18
 8003d54:	3b01      	subs	r3, #1
  htim12.Init.ClockDivision = 0;
 8003d56:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
 8003d5a:	e9c4 3201 	strd	r3, r2, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8003d5e:	f007 fe59 	bl	800ba14 <HAL_TIM_Base_Init>
 8003d62:	b110      	cbz	r0, 8003d6a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 8003d64:	2001      	movs	r0, #1
}
 8003d66:	b008      	add	sp, #32
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f007 f8de 	bl	800af2c <HAL_TIM_Base_Start_IT>
}
 8003d70:	b008      	add	sp, #32
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	431bde83 	.word	0x431bde83
 8003d7c:	20022360 	.word	0x20022360
 8003d80:	40001800 	.word	0x40001800

08003d84 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop

08003d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d88:	e7fe      	b.n	8003d88 <HardFault_Handler>
 8003d8a:	bf00      	nop

08003d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d8c:	e7fe      	b.n	8003d8c <MemManage_Handler>
 8003d8e:	bf00      	nop

08003d90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d90:	e7fe      	b.n	8003d90 <BusFault_Handler>
 8003d92:	bf00      	nop

08003d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d94:	e7fe      	b.n	8003d94 <UsageFault_Handler>
 8003d96:	bf00      	nop

08003d98 <RCC_IRQHandler>:
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop

08003d9c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <DMA1_Stream1_IRQHandler+0x8>)
 8003d9e:	f001 bfa7 	b.w	8005cf0 <HAL_DMA_IRQHandler>
 8003da2:	bf00      	nop
 8003da4:	20021c68 	.word	0x20021c68

08003da8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <DMA1_Stream5_IRQHandler+0x8>)
 8003daa:	f001 bfa1 	b.w	8005cf0 <HAL_DMA_IRQHandler>
 8003dae:	bf00      	nop
 8003db0:	20021d6c 	.word	0x20021d6c

08003db4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003db4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003db6:	4805      	ldr	r0, [pc, #20]	; (8003dcc <ADC_IRQHandler+0x18>)
 8003db8:	f001 f836 	bl	8004e28 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003dbc:	4804      	ldr	r0, [pc, #16]	; (8003dd0 <ADC_IRQHandler+0x1c>)
 8003dbe:	f001 f833 	bl	8004e28 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8003dc2:	4804      	ldr	r0, [pc, #16]	; (8003dd4 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003dc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 8003dc8:	f001 b82e 	b.w	8004e28 <HAL_ADC_IRQHandler>
 8003dcc:	20021e4c 	.word	0x20021e4c
 8003dd0:	20021b48 	.word	0x20021b48
 8003dd4:	20021e94 	.word	0x20021e94

08003dd8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <TIM2_IRQHandler+0x8>)
 8003dda:	f007 bce7 	b.w	800b7ac <HAL_TIM_IRQHandler>
 8003dde:	bf00      	nop
 8003de0:	20022164 	.word	0x20022164

08003de4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <TIM3_IRQHandler+0x8>)
 8003de6:	f007 bce1 	b.w	800b7ac <HAL_TIM_IRQHandler>
 8003dea:	bf00      	nop
 8003dec:	20021cc8 	.word	0x20021cc8

08003df0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003df0:	4801      	ldr	r0, [pc, #4]	; (8003df8 <USART2_IRQHandler+0x8>)
 8003df2:	f009 ba3b 	b.w	800d26c <HAL_UART_IRQHandler>
 8003df6:	bf00      	nop
 8003df8:	200221a4 	.word	0x200221a4

08003dfc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003dfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e00:	f003 bda4 	b.w	800794c <HAL_GPIO_EXTI_IRQHandler>

08003e04 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <TIM8_BRK_TIM12_IRQHandler+0x8>)
 8003e06:	f007 bcd1 	b.w	800b7ac <HAL_TIM_IRQHandler>
 8003e0a:	bf00      	nop
 8003e0c:	20022360 	.word	0x20022360

08003e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003e12:	4804      	ldr	r0, [pc, #16]	; (8003e24 <TIM6_DAC_IRQHandler+0x14>)
 8003e14:	f001 fc40 	bl	8005698 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003e18:	4803      	ldr	r0, [pc, #12]	; (8003e28 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8003e1e:	f007 bcc5 	b.w	800b7ac <HAL_TIM_IRQHandler>
 8003e22:	bf00      	nop
 8003e24:	20021eec 	.word	0x20021eec
 8003e28:	20021fcc 	.word	0x20021fcc

08003e2c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <DMA2_Stream1_IRQHandler+0x8>)
 8003e2e:	f001 bf5f 	b.w	8005cf0 <HAL_DMA_IRQHandler>
 8003e32:	bf00      	nop
 8003e34:	20021944 	.word	0x20021944

08003e38 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e38:	4801      	ldr	r0, [pc, #4]	; (8003e40 <DMA2_Stream4_IRQHandler+0x8>)
 8003e3a:	f001 bf59 	b.w	8005cf0 <HAL_DMA_IRQHandler>
 8003e3e:	bf00      	nop
 8003e40:	20021f68 	.word	0x20021f68

08003e44 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003e44:	4801      	ldr	r0, [pc, #4]	; (8003e4c <ETH_IRQHandler+0x8>)
 8003e46:	f002 bea5 	b.w	8006b94 <HAL_ETH_IRQHandler>
 8003e4a:	bf00      	nop
 8003e4c:	2002418c 	.word	0x2002418c

08003e50 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e50:	4801      	ldr	r0, [pc, #4]	; (8003e58 <OTG_FS_IRQHandler+0x8>)
 8003e52:	f004 bb53 	b.w	80084fc <HAL_PCD_IRQHandler>
 8003e56:	bf00      	nop
 8003e58:	20036988 	.word	0x20036988

08003e5c <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003e5c:	4801      	ldr	r0, [pc, #4]	; (8003e64 <USART6_IRQHandler+0x8>)
 8003e5e:	f009 ba05 	b.w	800d26c <HAL_UART_IRQHandler>
 8003e62:	bf00      	nop
 8003e64:	20022060 	.word	0x20022060

08003e68 <FPU_IRQHandler>:
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop

08003e6c <MDIOS_IRQHandler>:
void MDIOS_IRQHandler(void)
{
  /* USER CODE BEGIN MDIOS_IRQn 0 */

  /* USER CODE END MDIOS_IRQn 0 */
  HAL_MDIOS_IRQHandler(&hmdios);
 8003e6c:	4801      	ldr	r0, [pc, #4]	; (8003e74 <MDIOS_IRQHandler+0x8>)
 8003e6e:	f004 ba35 	b.w	80082dc <HAL_MDIOS_IRQHandler>
 8003e72:	bf00      	nop
 8003e74:	20021edc 	.word	0x20021edc

08003e78 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003e78:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003e7a:	1e16      	subs	r6, r2, #0
 8003e7c:	dd07      	ble.n	8003e8e <_read+0x16>
 8003e7e:	460c      	mov	r4, r1
 8003e80:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8003e82:	f3af 8000 	nop.w
 8003e86:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003e8a:	42a5      	cmp	r5, r4
 8003e8c:	d1f9      	bne.n	8003e82 <_read+0xa>
	}

	return len;
}
 8003e8e:	4630      	mov	r0, r6
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
 8003e92:	bf00      	nop

08003e94 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop

08003e9c <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8003e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003ea0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003ea2:	604b      	str	r3, [r1, #4]
}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop

08003ea8 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	4770      	bx	lr

08003eac <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8003eac:	2000      	movs	r0, #0
 8003eae:	4770      	bx	lr

08003eb0 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003eb0:	490d      	ldr	r1, [pc, #52]	; (8003ee8 <_sbrk+0x38>)
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	; (8003eec <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8003eb4:	680b      	ldr	r3, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8003eb6:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8003eb8:	4c0d      	ldr	r4, [pc, #52]	; (8003ef0 <_sbrk+0x40>)
 8003eba:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8003ebc:	b183      	cbz	r3, 8003ee0 <_sbrk+0x30>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003ebe:	4418      	add	r0, r3
 8003ec0:	4290      	cmp	r0, r2
 8003ec2:	d804      	bhi.n	8003ece <_sbrk+0x1e>
		errno = ENOMEM;
		return (void*) -1;
	}

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;
 8003ec4:	6008      	str	r0, [r1, #0]

	return (void*) prev_heap_end;
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ecc:	4770      	bx	lr
		errno = ENOMEM;
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <_sbrk+0x44>)
 8003ed0:	210c      	movs	r1, #12
		return (void*) -1;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8003eda:	6011      	str	r1, [r2, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 8003ee0:	4c05      	ldr	r4, [pc, #20]	; (8003ef8 <_sbrk+0x48>)
 8003ee2:	4623      	mov	r3, r4
 8003ee4:	600c      	str	r4, [r1, #0]
 8003ee6:	e7ea      	b.n	8003ebe <_sbrk+0xe>
 8003ee8:	200008b4 	.word	0x200008b4
 8003eec:	20080000 	.word	0x20080000
 8003ef0:	00008000 	.word	0x00008000
 8003ef4:	200354e4 	.word	0x200354e4
 8003ef8:	20036d90 	.word	0x20036d90

08003efc <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003efc:	4a0f      	ldr	r2, [pc, #60]	; (8003f3c <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f00:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8003f04:	490f      	ldr	r1, [pc, #60]	; (8003f44 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f06:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8003f0a:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f0c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 8003f10:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 8003f12:	6818      	ldr	r0, [r3, #0]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f14:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	RCC->PLLCFGR = 0x24003010;
 8003f18:	4e0b      	ldr	r6, [pc, #44]	; (8003f48 <SystemInit+0x4c>)
	RCC->CR |= (uint32_t) 0x00000001;
 8003f1a:	f040 0001 	orr.w	r0, r0, #1
 8003f1e:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 8003f20:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	4001      	ands	r1, r0
 8003f26:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8003f28:	605e      	str	r6, [r3, #4]
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8003f2a:	6819      	ldr	r1, [r3, #0]
 8003f2c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003f30:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8003f32:	60dc      	str	r4, [r3, #12]
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f34:	6095      	str	r5, [r2, #8]
#endif
}
 8003f36:	bc70      	pop	{r4, r5, r6}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000ed00 	.word	0xe000ed00
 8003f40:	40023800 	.word	0x40023800
 8003f44:	fef6ffff 	.word	0xfef6ffff
 8003f48:	24003010 	.word	0x24003010

08003f4c <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8003f4c:	680b      	ldr	r3, [r1, #0]
 8003f4e:	b113      	cbz	r3, 8003f56 <dnsfound+0xa>
		ip_ready = -1;
	} else
		ip_ready = ipaddr->addr;
 8003f50:	4a03      	ldr	r2, [pc, #12]	; (8003f60 <dnsfound+0x14>)
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	4770      	bx	lr
		ip_ready = -1;
 8003f56:	4b02      	ldr	r3, [pc, #8]	; (8003f60 <dnsfound+0x14>)
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	4770      	bx	lr
 8003f60:	200008c0 	.word	0x200008c0

08003f64 <myreboot>:
	printf("%s, ... rebooting\n", msg);
 8003f64:	4601      	mov	r1, r0
 8003f66:	480a      	ldr	r0, [pc, #40]	; (8003f90 <myreboot+0x2c>)
void myreboot(char *msg) {
 8003f68:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 8003f6a:	f01a fa3d 	bl	801e3e8 <iprintf>
	osDelay(2000);
 8003f6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003f72:	f00b fdc1 	bl	800faf8 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f76:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f7a:	4906      	ldr	r1, [pc, #24]	; (8003f94 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f7e:	68ca      	ldr	r2, [r1, #12]
 8003f80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60cb      	str	r3, [r1, #12]
 8003f88:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <myreboot+0x28>
 8003f90:	08022be8 	.word	0x08022be8
 8003f94:	e000ed00 	.word	0xe000ed00
 8003f98:	05fa0004 	.word	0x05fa0004

08003f9c <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8003f9c:	b500      	push	{lr}
 8003f9e:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8003fa0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <sendudp+0x68>)
 8003fa6:	f015 fbc5 	bl	8019734 <udp_sendto>
 8003faa:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8003fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003fb2:	b25b      	sxtb	r3, r3
 8003fb4:	b93b      	cbnz	r3, 8003fc6 <sendudp+0x2a>
		busycount = 0;
 8003fb6:	4a14      	ldr	r2, [pc, #80]	; (8004008 <sendudp+0x6c>)
 8003fb8:	6013      	str	r3, [r2, #0]
	return (err);
 8003fba:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003fbe:	b240      	sxtb	r0, r0
 8003fc0:	b003      	add	sp, #12
 8003fc2:	f85d fb04 	ldr.w	pc, [sp], #4
	    stats_display() ; // this needs stats in LwIP enabling to do anything
 8003fc6:	f011 fa3f 	bl	8015448 <stats_display>
		printf("sendudp: err %i\n", err);
 8003fca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003fce:	480f      	ldr	r0, [pc, #60]	; (800400c <sendudp+0x70>)
 8003fd0:	b249      	sxtb	r1, r1
 8003fd2:	f01a fa09 	bl	801e3e8 <iprintf>
		vTaskDelay(100); //some delay!
 8003fd6:	2064      	movs	r0, #100	; 0x64
 8003fd8:	f00c feec 	bl	8010db4 <vTaskDelay>
		if (err == ERR_MEM) {
 8003fdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003fe0:	2bff      	cmp	r3, #255	; 0xff
 8003fe2:	d00c      	beq.n	8003ffe <sendudp+0x62>
		if (err == ERR_USE) {
 8003fe4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003fe8:	2bf8      	cmp	r3, #248	; 0xf8
 8003fea:	d1e6      	bne.n	8003fba <sendudp+0x1e>
			if (busycount++ > 10)
 8003fec:	4a06      	ldr	r2, [pc, #24]	; (8004008 <sendudp+0x6c>)
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	1c59      	adds	r1, r3, #1
 8003ff2:	2b0a      	cmp	r3, #10
 8003ff4:	6011      	str	r1, [r2, #0]
 8003ff6:	dde0      	ble.n	8003fba <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8003ff8:	4805      	ldr	r0, [pc, #20]	; (8004010 <sendudp+0x74>)
 8003ffa:	f7ff ffb3 	bl	8003f64 <myreboot>
			myreboot("sendudp: out of mem");
 8003ffe:	4805      	ldr	r0, [pc, #20]	; (8004014 <sendudp+0x78>)
 8004000:	f7ff ffb0 	bl	8003f64 <myreboot>
 8004004:	200223b0 	.word	0x200223b0
 8004008:	200008b8 	.word	0x200008b8
 800400c:	08022c5c 	.word	0x08022c5c
 8004010:	08022c84 	.word	0x08022c84
 8004014:	08022c70 	.word	0x08022c70

08004018 <sendstatus>:
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 800401c:	4f29      	ldr	r7, [pc, #164]	; (80040c4 <sendstatus+0xac>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 800401e:	460c      	mov	r4, r1
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 8004020:	4d29      	ldr	r5, [pc, #164]	; (80040c8 <sendstatus+0xb0>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004022:	4606      	mov	r6, r0
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 8004024:	f9b7 1000 	ldrsh.w	r1, [r7]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004028:	4617      	mov	r7, r2
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 800402a:	882a      	ldrh	r2, [r5, #0]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 800402c:	b082      	sub	sp, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 800402e:	4827      	ldr	r0, [pc, #156]	; (80040cc <sendstatus+0xb4>)
 8004030:	1a8a      	subs	r2, r1, r2
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8004032:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80040e4 <sendstatus+0xcc>
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 8004036:	4d26      	ldr	r5, [pc, #152]	; (80040d0 <sendstatus+0xb8>)
 8004038:	2a00      	cmp	r2, #0
 800403a:	8800      	ldrh	r0, [r0, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 800403c:	f8dc 1000 	ldr.w	r1, [ip]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 8004040:	bfb8      	it	lt
 8004042:	4252      	neglt	r2, r2
 8004044:	f8b5 c000 	ldrh.w	ip, [r5]
 8004048:	0300      	lsls	r0, r0, #12
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 800404a:	4d22      	ldr	r5, [pc, #136]	; (80040d4 <sendstatus+0xbc>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 800404c:	4462      	add	r2, ip
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 800404e:	0209      	lsls	r1, r1, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 8004050:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8004054:	f8d5 c074 	ldr.w	ip, [r5, #116]	; 0x74
 8004058:	b289      	uxth	r1, r1
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 800405a:	4302      	orrs	r2, r0
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 800405c:	481e      	ldr	r0, [pc, #120]	; (80040d8 <sendstatus+0xc0>)
 800405e:	430b      	orrs	r3, r1
	while (ps->ref != 1) { // old packet not finished with yet
 8004060:	89e1      	ldrh	r1, [r4, #14]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8004062:	ea0c 0000 	and.w	r0, ip, r0
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 8004066:	b292      	uxth	r2, r2
	while (ps->ref != 1) { // old packet not finished with yet
 8004068:	2901      	cmp	r1, #1
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 800406a:	ea43 0300 	orr.w	r3, r3, r0
 800406e:	676b      	str	r3, [r5, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7)<<12);
 8004070:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
	while (ps->ref != 1) { // old packet not finished with yet
 8004074:	d007      	beq.n	8004086 <sendstatus+0x6e>
		printf("******* timed status1: ps->ref = %d *******\n", ps->ref);
 8004076:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80040e8 <sendstatus+0xd0>
 800407a:	4640      	mov	r0, r8
 800407c:	f01a f9b4 	bl	801e3e8 <iprintf>
	while (ps->ref != 1) { // old packet not finished with yet
 8004080:	89e1      	ldrh	r1, [r4, #14]
 8004082:	2901      	cmp	r1, #1
 8004084:	d1f9      	bne.n	800407a <sendstatus+0x62>
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8004086:	6861      	ldr	r1, [r4, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004088:	4638      	mov	r0, r7
 800408a:	f241 3388 	movw	r3, #5000	; 0x1388
 800408e:	4a13      	ldr	r2, [pc, #76]	; (80040dc <sendstatus+0xc4>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8004090:	70ce      	strb	r6, [r1, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004092:	4621      	mov	r1, r4
 8004094:	f7ff ff82 	bl	8003f9c <sendudp>
	while (ps->ref != 1) { // old packet not finished with yet
 8004098:	89e1      	ldrh	r1, [r4, #14]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 800409a:	f88d 0007 	strb.w	r0, [sp, #7]
	while (ps->ref != 1) { // old packet not finished with yet
 800409e:	2901      	cmp	r1, #1
 80040a0:	d009      	beq.n	80040b6 <sendstatus+0x9e>
		printf("******* timed status2: ps->ref = %d *******\n", ps->ref);
 80040a2:	4e0f      	ldr	r6, [pc, #60]	; (80040e0 <sendstatus+0xc8>)
 80040a4:	4630      	mov	r0, r6
 80040a6:	f01a f99f 	bl	801e3e8 <iprintf>
		vTaskDelay(0); // but we need wait to update the data packet next, so wait
 80040aa:	2000      	movs	r0, #0
 80040ac:	f00c fe82 	bl	8010db4 <vTaskDelay>
	while (ps->ref != 1) { // old packet not finished with yet
 80040b0:	89e1      	ldrh	r1, [r4, #14]
 80040b2:	2901      	cmp	r1, #1
 80040b4:	d1f6      	bne.n	80040a4 <sendstatus+0x8c>
	statuspkt.udppknum++;
 80040b6:	682b      	ldr	r3, [r5, #0]
 80040b8:	3301      	adds	r3, #1
 80040ba:	602b      	str	r3, [r5, #0]
}
 80040bc:	b002      	add	sp, #8
 80040be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c2:	bf00      	nop
 80040c4:	20000770 	.word	0x20000770
 80040c8:	20000728 	.word	0x20000728
 80040cc:	200002b2 	.word	0x200002b2
 80040d0:	20000000 	.word	0x20000000
 80040d4:	2002183c 	.word	0x2002183c
 80040d8:	ffff0000 	.word	0xffff0000
 80040dc:	200223b0 	.word	0x200223b0
 80040e0:	08022c2c 	.word	0x08022c2c
 80040e4:	20000724 	.word	0x20000724
 80040e8:	08022bfc 	.word	0x08022bfc

080040ec <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	4605      	mov	r5, r0
 80040f0:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
//	osDelay(500);
	ip_ready = 0;
 80040f2:	2400      	movs	r4, #0
	printf("DNS Resolving %s ", name);
 80040f4:	4819      	ldr	r0, [pc, #100]	; (800415c <dnslookup+0x70>)
 80040f6:	4629      	mov	r1, r5
	ip_ready = 0;
 80040f8:	4e19      	ldr	r6, [pc, #100]	; (8004160 <dnslookup+0x74>)
	printf("DNS Resolving %s ", name);
 80040fa:	f01a f975 	bl	801e3e8 <iprintf>
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80040fe:	4628      	mov	r0, r5
 8004100:	4639      	mov	r1, r7
 8004102:	4623      	mov	r3, r4
 8004104:	4a17      	ldr	r2, [pc, #92]	; (8004164 <dnslookup+0x78>)
	ip_ready = 0;
 8004106:	6034      	str	r4, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8004108:	f00f fd4a 	bl	8013ba0 <dns_gethostbyname>
 800410c:	4605      	mov	r5, r0

	switch (err) {
 800410e:	3005      	adds	r0, #5
 8004110:	d007      	beq.n	8004122 <dnslookup+0x36>
 8004112:	b90d      	cbnz	r5, 8004118 <dnslookup+0x2c>
	default:
		printf("****** gethostbyname failed *****\n ");
		break;
	}
	return (err);
}
 8004114:	4628      	mov	r0, r5
 8004116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("****** gethostbyname failed *****\n ");
 8004118:	4813      	ldr	r0, [pc, #76]	; (8004168 <dnslookup+0x7c>)
 800411a:	f01a f965 	bl	801e3e8 <iprintf>
}
 800411e:	4628      	mov	r0, r5
 8004120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8004122:	4812      	ldr	r0, [pc, #72]	; (800416c <dnslookup+0x80>)
 8004124:	2414      	movs	r4, #20
 8004126:	f01a f95f 	bl	801e3e8 <iprintf>
 800412a:	e001      	b.n	8004130 <dnslookup+0x44>
		for (i = 0; i < 20; i++) {
 800412c:	3c01      	subs	r4, #1
 800412e:	d0f3      	beq.n	8004118 <dnslookup+0x2c>
			osDelay(1000);		// give it 20 seconds
 8004130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004134:	f00b fce0 	bl	800faf8 <osDelay>
			printf(".");
 8004138:	202e      	movs	r0, #46	; 0x2e
 800413a:	f01a f96d 	bl	801e418 <putchar>
			if (ip_ready) {
 800413e:	6833      	ldr	r3, [r6, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f3      	beq.n	800412c <dnslookup+0x40>
				if (ip_ready == -1) {
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	d003      	beq.n	8004150 <dnslookup+0x64>
				return (ERR_OK);
 8004148:	2500      	movs	r5, #0
				ip->addr = ip_ready;
 800414a:	603b      	str	r3, [r7, #0]
}
 800414c:	4628      	mov	r0, r5
 800414e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					ip->addr = "127.0.0.1";	// safe ?
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <dnslookup+0x84>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8004152:	f06f 0502 	mvn.w	r5, #2
					ip->addr = "127.0.0.1";	// safe ?
 8004156:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8004158:	e7dc      	b.n	8004114 <dnslookup+0x28>
 800415a:	bf00      	nop
 800415c:	08022b44 	.word	0x08022b44
 8004160:	200008c0 	.word	0x200008c0
 8004164:	08003f4d 	.word	0x08003f4d
 8004168:	08022b80 	.word	0x08022b80
 800416c:	08022b58 	.word	0x08022b58
 8004170:	08022b74 	.word	0x08022b74

08004174 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8004174:	b530      	push	{r4, r5, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8004176:	4913      	ldr	r1, [pc, #76]	; (80041c4 <locateudp+0x50>)
{
 8004178:	b085      	sub	sp, #20
	printf("Finding %s for UDP streaming\n", udp_target);
 800417a:	4813      	ldr	r0, [pc, #76]	; (80041c8 <locateudp+0x54>)
 800417c:	f01a f934 	bl	801e3e8 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8004180:	4912      	ldr	r1, [pc, #72]	; (80041cc <locateudp+0x58>)
 8004182:	4810      	ldr	r0, [pc, #64]	; (80041c4 <locateudp+0x50>)
 8004184:	f7ff ffb2 	bl	80040ec <dnslookup>
 8004188:	b240      	sxtb	r0, r0
 800418a:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 800418e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004192:	b10b      	cbz	r3, 8004198 <locateudp+0x24>
		rebootme();
 8004194:	f7fc ff28 	bl	8000fe8 <rebootme>

	ip = udpdestip.addr;
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <locateudp+0x58>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800419a:	490d      	ldr	r1, [pc, #52]	; (80041d0 <locateudp+0x5c>)
	ip = udpdestip.addr;
 800419c:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800419e:	480d      	ldr	r0, [pc, #52]	; (80041d4 <locateudp+0x60>)
 80041a0:	0e22      	lsrs	r2, r4, #24
 80041a2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80041a6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80041aa:	9201      	str	r2, [sp, #4]
 80041ac:	b2e2      	uxtb	r2, r4
 80041ae:	9500      	str	r5, [sp, #0]
 80041b0:	f01a fa3e 	bl	801e630 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 80041b4:	4907      	ldr	r1, [pc, #28]	; (80041d4 <locateudp+0x60>)
 80041b6:	4808      	ldr	r0, [pc, #32]	; (80041d8 <locateudp+0x64>)
 80041b8:	f01a f916 	bl	801e3e8 <iprintf>
	return (ip);
}
 80041bc:	4620      	mov	r0, r4
 80041be:	b005      	add	sp, #20
 80041c0:	bd30      	pop	{r4, r5, pc}
 80041c2:	bf00      	nop
 80041c4:	200223b4 	.word	0x200223b4
 80041c8:	08022ba4 	.word	0x08022ba4
 80041cc:	200223b0 	.word	0x200223b0
 80041d0:	08022bc4 	.word	0x08022bc4
 80041d4:	200223a0 	.word	0x200223a0
 80041d8:	08022bd4 	.word	0x08022bd4

080041dc <startudp>:

void startudp(uint32_t ip) {
 80041dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e0:	b087      	sub	sp, #28

	static uint8_t lastadcbatchid = 0;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80041e2:	f00c ff37 	bl	8011054 <xTaskGetCurrentTaskHandle>
 80041e6:	4b74      	ldr	r3, [pc, #464]	; (80043b8 <startudp+0x1dc>)
 80041e8:	6018      	str	r0, [r3, #0]
	osDelay(1000);
 80041ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041ee:	f00b fc83 	bl	800faf8 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 80041f2:	f015 fb0f 	bl	8019814 <udp_new>
	if (pcb == NULL) {
 80041f6:	9001      	str	r0, [sp, #4]
 80041f8:	2800      	cmp	r0, #0
 80041fa:	f000 80cf 	beq.w	800439c <startudp+0x1c0>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 80041fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004202:	496e      	ldr	r1, [pc, #440]	; (80043bc <startudp+0x1e0>)
 8004204:	f015 f992 	bl	801952c <udp_bind>
 8004208:	4605      	mov	r5, r0
 800420a:	b118      	cbz	r0, 8004214 <startudp+0x38>
		printf("startudp: udp_bind failed!\n");
 800420c:	486c      	ldr	r0, [pc, #432]	; (80043c0 <startudp+0x1e4>)
 800420e:	f01a f973 	bl	801e4f8 <puts>
 8004212:	e7fe      	b.n	8004212 <startudp+0x36>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004214:	2202      	movs	r2, #2
 8004216:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 800421a:	f010 fc03 	bl	8014a24 <pbuf_alloc>

	if (p1 == NULL) {
 800421e:	9002      	str	r0, [sp, #8]
 8004220:	2800      	cmp	r0, #0
 8004222:	f000 80bf 	beq.w	80043a4 <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8004226:	4c67      	ldr	r4, [pc, #412]	; (80043c4 <startudp+0x1e8>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004228:	2202      	movs	r2, #2
	p1->payload = &(*pktbuf)[0];
 800422a:	9e02      	ldr	r6, [sp, #8]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 800422c:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8004230:	6823      	ldr	r3, [r4, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004232:	4628      	mov	r0, r5
	p1->payload = &(*pktbuf)[0];
 8004234:	6073      	str	r3, [r6, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004236:	f010 fbf5 	bl	8014a24 <pbuf_alloc>
	if (p2 == NULL) {
 800423a:	9003      	str	r0, [sp, #12]
 800423c:	2800      	cmp	r0, #0
 800423e:	f000 80b9 	beq.w	80043b4 <startudp+0x1d8>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004242:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004244:	2201      	movs	r2, #1
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004246:	9c03      	ldr	r4, [sp, #12]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004248:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 800424a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800424e:	4628      	mov	r0, r5
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004250:	6063      	str	r3, [r4, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004252:	f010 fbe7 	bl	8014a24 <pbuf_alloc>
	if (ps == NULL) {
 8004256:	4683      	mov	fp, r0
 8004258:	2800      	cmp	r0, #0
 800425a:	f000 80a9 	beq.w	80043b0 <startudp+0x1d4>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 800425e:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 800440c <startudp+0x230>

	osDelay(5000);
 8004262:	f241 3088 	movw	r0, #5000	; 0x1388
 8004266:	4f58      	ldr	r7, [pc, #352]	; (80043c8 <startudp+0x1ec>)
	ps->payload = &statuspkt;	// point at status / GPS data
 8004268:	f8cb a004 	str.w	sl, [fp, #4]
	osDelay(5000);
 800426c:	f00b fc44 	bl	800faf8 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count uns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8004270:	4b56      	ldr	r3, [pc, #344]	; (80043cc <startudp+0x1f0>)

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8004272:	2101      	movs	r1, #1
 8004274:	4a56      	ldr	r2, [pc, #344]	; (80043d0 <startudp+0x1f4>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8004276:	4857      	ldr	r0, [pc, #348]	; (80043d4 <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 8004278:	f8ca 5074 	str.w	r5, [sl, #116]	; 0x74
 800427c:	4e56      	ldr	r6, [pc, #344]	; (80043d8 <startudp+0x1fc>)
	statuspkt.adcudpover = 0;		// debug use count uns
 800427e:	f8ca 5078 	str.w	r5, [sl, #120]	; 0x78
 8004282:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8004410 <startudp+0x234>
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8004286:	f8ca 507c 	str.w	r5, [sl, #124]	; 0x7c
 800428a:	4c54      	ldr	r4, [pc, #336]	; (80043dc <startudp+0x200>)
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 800428c:	f8ca 5080 	str.w	r5, [sl, #128]	; 0x80
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8004290:	7011      	strb	r1, [r2, #0]
			((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
			((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
			((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

			while (pd->ref != 1) {	// old packet not finished with yet
				printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8004292:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004414 <startudp+0x238>
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8004296:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 800429a:	f01a f92d 	bl	801e4f8 <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 800429e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042a2:	2001      	movs	r0, #1
 80042a4:	f00d f810 	bl	80112c8 <ulTaskNotifyTake>
		if ((sendendstatus > 0) && (jabber == 0)) {
 80042a8:	783b      	ldrb	r3, [r7, #0]
 80042aa:	b11b      	cbz	r3, 80042b4 <startudp+0xd8>
 80042ac:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <startudp+0x204>)
 80042ae:	681d      	ldr	r5, [r3, #0]
 80042b0:	2d00      	cmp	r5, #0
 80042b2:	d064      	beq.n	800437e <startudp+0x1a2>
		if ((sigsend) && (gpslocked)) { // only send if adc threshold was exceeded and GPS is locked
 80042b4:	6833      	ldr	r3, [r6, #0]
 80042b6:	b113      	cbz	r3, 80042be <startudp+0xe2>
 80042b8:	4b4a      	ldr	r3, [pc, #296]	; (80043e4 <startudp+0x208>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b96b      	cbnz	r3, 80042da <startudp+0xfe>
	if ((t1sec != talive) && (t1sec % 1 == 0)) { // this is a temporary mech to send timed status pkts...
 80042be:	f8d8 5000 	ldr.w	r5, [r8]
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	429d      	cmp	r5, r3
 80042c6:	d0ea      	beq.n	800429e <startudp+0xc2>
				sendtimedstatus(ps, pcb, lastadcbatchid); // on jabber, timed status sending masked by sigsend
			}

		} // if sigsend
		else {		// no adc sample to send, so send timed status
			sendtimedstatus(ps, pcb, lastadcbatchid);
 80042c8:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <startudp+0x20c>)
		sendstatus(TIMED, ps, pcb, batchid);
 80042ca:	4659      	mov	r1, fp
 80042cc:	9a01      	ldr	r2, [sp, #4]
 80042ce:	2002      	movs	r0, #2
			sendtimedstatus(ps, pcb, lastadcbatchid);
 80042d0:	781b      	ldrb	r3, [r3, #0]
		talive = t1sec;
 80042d2:	6025      	str	r5, [r4, #0]
		sendstatus(TIMED, ps, pcb, batchid);
 80042d4:	f7ff fea0 	bl	8004018 <sendstatus>
 80042d8:	e7e1      	b.n	800429e <startudp+0xc2>
			pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 80042da:	4b44      	ldr	r3, [pc, #272]	; (80043ec <startudp+0x210>)
			((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 80042dc:	2200      	movs	r2, #0
			pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 80042de:	681d      	ldr	r5, [r3, #0]
 80042e0:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80042e4:	4295      	cmp	r5, r2
 80042e6:	bf08      	it	eq
 80042e8:	460b      	moveq	r3, r1
 80042ea:	461d      	mov	r5, r3
			((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	70da      	strb	r2, [r3, #3]
			((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 80042f0:	f8da 2000 	ldr.w	r2, [sl]
 80042f4:	686b      	ldr	r3, [r5, #4]
 80042f6:	701a      	strb	r2, [r3, #0]
			((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 80042f8:	f8da 3000 	ldr.w	r3, [sl]
 80042fc:	686a      	ldr	r2, [r5, #4]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	7053      	strb	r3, [r2, #1]
			((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8004302:	f8da 3000 	ldr.w	r3, [sl]
 8004306:	686a      	ldr	r2, [r5, #4]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	7093      	strb	r3, [r2, #2]
			while (pd->ref != 1) {	// old packet not finished with yet
 800430c:	89e9      	ldrh	r1, [r5, #14]
 800430e:	2901      	cmp	r1, #1
 8004310:	d005      	beq.n	800431e <startudp+0x142>
				printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8004312:	4648      	mov	r0, r9
 8004314:	f01a f868 	bl	801e3e8 <iprintf>
			while (pd->ref != 1) {	// old packet not finished with yet
 8004318:	89e9      	ldrh	r1, [r5, #14]
 800431a:	2901      	cmp	r1, #1
 800431c:	d1f9      	bne.n	8004312 <startudp+0x136>
			if (jabber == 0) {		// don't actually send it if jabbering
 800431e:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <startudp+0x204>)
			sigsend = 0;	// assume its sent and the pb->p1 or p2 buffer is now clear
 8004320:	2200      	movs	r2, #0
			if (jabber == 0) {		// don't actually send it if jabbering
 8004322:	681b      	ldr	r3, [r3, #0]
			sigsend = 0;	// assume its sent and the pb->p1 or p2 buffer is now clear
 8004324:	6032      	str	r2, [r6, #0]
			if (jabber == 0) {		// don't actually send it if jabbering
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1c9      	bne.n	80042be <startudp+0xe2>
				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 800432a:	4629      	mov	r1, r5
 800432c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004330:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <startudp+0x214>)
 8004332:	9801      	ldr	r0, [sp, #4]
 8004334:	f7ff fe32 	bl	8003f9c <sendudp>
 8004338:	f88d 0017 	strb.w	r0, [sp, #23]
				statuspkt.udpsent++;	// debug no of sample packets set
 800433c:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
				while (ps->ref != 1) { // old status packet not finished with yet
 8004340:	f8bb 100e 	ldrh.w	r1, [fp, #14]
				statuspkt.udpsent++;	// debug no of sample packets set
 8004344:	3301      	adds	r3, #1
				while (ps->ref != 1) { // old status packet not finished with yet
 8004346:	2901      	cmp	r1, #1
				statuspkt.udpsent++;	// debug no of sample packets set
 8004348:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 800434c:	f8ba 305e 	ldrh.w	r3, [sl, #94]	; 0x5e
 8004350:	f103 0301 	add.w	r3, r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	f8aa 305e 	strh.w	r3, [sl, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 800435a:	f8da 3000 	ldr.w	r3, [sl]
 800435e:	f103 0301 	add.w	r3, r3, #1
 8004362:	f8ca 3000 	str.w	r3, [sl]
				while (ps->ref != 1) { // old status packet not finished with yet
 8004366:	d09a      	beq.n	800429e <startudp+0xc2>
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
 8004368:	4822      	ldr	r0, [pc, #136]	; (80043f4 <startudp+0x218>)
 800436a:	f01a f83d 	bl	801e3e8 <iprintf>
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
 800436e:	2000      	movs	r0, #0
 8004370:	f00c fd20 	bl	8010db4 <vTaskDelay>
				while (ps->ref != 1) { // old status packet not finished with yet
 8004374:	f8bb 100e 	ldrh.w	r1, [fp, #14]
 8004378:	2901      	cmp	r1, #1
 800437a:	d1f5      	bne.n	8004368 <startudp+0x18c>
 800437c:	e78f      	b.n	800429e <startudp+0xc2>
			sendstatus(ENDSEQ, ps, pcb, lastadcbatchid); // send end of seq status
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <startudp+0x20c>)
 8004380:	4659      	mov	r1, fp
 8004382:	9a01      	ldr	r2, [sp, #4]
 8004384:	2001      	movs	r0, #1
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f7ff fe46 	bl	8004018 <sendstatus>
			lastadcbatchid = adcbatchid;
 800438c:	491a      	ldr	r1, [pc, #104]	; (80043f8 <startudp+0x21c>)
 800438e:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <startudp+0x20c>)
 8004390:	780b      	ldrb	r3, [r1, #0]
			sendendstatus = 0;	// cancel the flag
 8004392:	703d      	strb	r5, [r7, #0]
			statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 8004394:	f8aa 505e 	strh.w	r5, [sl, #94]	; 0x5e
			lastadcbatchid = adcbatchid;
 8004398:	7013      	strb	r3, [r2, #0]
 800439a:	e78b      	b.n	80042b4 <startudp+0xd8>
		printf("startudp: udp_new failed!\n");
 800439c:	4817      	ldr	r0, [pc, #92]	; (80043fc <startudp+0x220>)
 800439e:	f01a f8ab 	bl	801e4f8 <puts>
 80043a2:	e7fe      	b.n	80043a2 <startudp+0x1c6>
		printf("startudp: p1 buf_alloc failed!\n");
 80043a4:	4816      	ldr	r0, [pc, #88]	; (8004400 <startudp+0x224>)
		}
	} // forever while
}
 80043a6:	b007      	add	sp, #28
 80043a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 80043ac:	f01a b8a4 	b.w	801e4f8 <puts>
 80043b0:	4814      	ldr	r0, [pc, #80]	; (8004404 <startudp+0x228>)
 80043b2:	e7f8      	b.n	80043a6 <startudp+0x1ca>
		printf("startudp: p2 buf_alloc failed!\n");
 80043b4:	4814      	ldr	r0, [pc, #80]	; (8004408 <startudp+0x22c>)
 80043b6:	e7f6      	b.n	80043a6 <startudp+0x1ca>
 80043b8:	20000814 	.word	0x20000814
 80043bc:	0803bb0c 	.word	0x0803bb0c
 80043c0:	08022cbc 	.word	0x08022cbc
 80043c4:	200218e4 	.word	0x200218e4
 80043c8:	20000780 	.word	0x20000780
 80043cc:	dec0edfe 	.word	0xdec0edfe
 80043d0:	20000772 	.word	0x20000772
 80043d4:	08022d38 	.word	0x08022d38
 80043d8:	20000788 	.word	0x20000788
 80043dc:	200008c8 	.word	0x200008c8
 80043e0:	20000724 	.word	0x20000724
 80043e4:	200008bd 	.word	0x200008bd
 80043e8:	200008c4 	.word	0x200008c4
 80043ec:	20000718 	.word	0x20000718
 80043f0:	200223b0 	.word	0x200223b0
 80043f4:	08022d9c 	.word	0x08022d9c
 80043f8:	2000070c 	.word	0x2000070c
 80043fc:	08022ca0 	.word	0x08022ca0
 8004400:	08022cd8 	.word	0x08022cd8
 8004404:	08022d18 	.word	0x08022d18
 8004408:	08022cf8 	.word	0x08022cf8
 800440c:	2002183c 	.word	0x2002183c
 8004410:	2000086c 	.word	0x2000086c
 8004414:	08022d6c 	.word	0x08022d6c

08004418 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	4606      	mov	r6, r0
 800441c:	460f      	mov	r7, r1
//  LOCK_TCPIP_CORE();

	HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 800441e:	4854      	ldr	r0, [pc, #336]	; (8004570 <tag_callback+0x158>)
 8004420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004424:	f003 fa7a 	bl	800791c <HAL_GPIO_TogglePin>
 8004428:	4c52      	ldr	r4, [pc, #328]	; (8004574 <tag_callback+0x15c>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 800442a:	4d53      	ldr	r5, [pc, #332]	; (8004578 <tag_callback+0x160>)
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 800442c:	e001      	b.n	8004432 <tag_callback+0x1a>
		printf("sem wait 2\n");
 800442e:	f01a f863 	bl	801e4f8 <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8004432:	2101      	movs	r1, #1
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	f00c f851 	bl	80104dc <xQueueSemaphoreTake>
 800443a:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 800443c:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 800443e:	2b01      	cmp	r3, #1
 8004440:	d1f5      	bne.n	800442e <tag_callback+0x16>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8004442:	1f32      	subs	r2, r6, #4
 8004444:	2a07      	cmp	r2, #7
 8004446:	d819      	bhi.n	800447c <tag_callback+0x64>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8004448:	494c      	ldr	r1, [pc, #304]	; (800457c <tag_callback+0x164>)
 800444a:	4093      	lsls	r3, r2
 800444c:	4a4c      	ldr	r2, [pc, #304]	; (8004580 <tag_callback+0x168>)
 800444e:	7809      	ldrb	r1, [r1, #0]
 8004450:	400b      	ands	r3, r1
 8004452:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8004454:	bb43      	cbnz	r3, 80044a8 <tag_callback+0x90>
			strcpy(newstring, "0");
 8004456:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <tag_callback+0x16c>)
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800445c:	2300      	movs	r3, #0
 800445e:	6820      	ldr	r0, [r4, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	4619      	mov	r1, r3
 8004464:	f00b fdca 	bl	800fffc <xQueueGenericSend>
 8004468:	2801      	cmp	r0, #1
 800446a:	d002      	beq.n	8004472 <tag_callback+0x5a>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 800446c:	4846      	ldr	r0, [pc, #280]	; (8004588 <tag_callback+0x170>)
 800446e:	f01a f843 	bl	801e4f8 <puts>
	}
	return (strlen(newstring));
 8004472:	4638      	mov	r0, r7
}
 8004474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8004478:	f7fb beec 	b.w	8000254 <strlen>
		switch (index) {
 800447c:	2e14      	cmp	r6, #20
 800447e:	d871      	bhi.n	8004564 <tag_callback+0x14c>
 8004480:	e8df f006 	tbb	[pc, r6]
 8004484:	0b6b5257 	.word	0x0b6b5257
 8004488:	70707070 	.word	0x70707070
 800448c:	70707070 	.word	0x70707070
 8004490:	323d5c67 	.word	0x323d5c67
 8004494:	161b2025 	.word	0x161b2025
 8004498:	48          	.byte	0x48
 8004499:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 800449a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800449e:	4834      	ldr	r0, [pc, #208]	; (8004570 <tag_callback+0x158>)
 80044a0:	f003 fa10 	bl	80078c4 <HAL_GPIO_ReadPin>
 80044a4:	2801      	cmp	r0, #1
 80044a6:	d1d6      	bne.n	8004456 <tag_callback+0x3e>
			strcpy(newstring, "1");
 80044a8:	4b38      	ldr	r3, [pc, #224]	; (800458c <tag_callback+0x174>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	803b      	strh	r3, [r7, #0]
 80044ae:	e7d5      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, gpsstr);		// GPS Status
 80044b0:	4937      	ldr	r1, [pc, #220]	; (8004590 <tag_callback+0x178>)
 80044b2:	4638      	mov	r0, r7
 80044b4:	f01a f961 	bl	801e77a <strcpy>
			break;
 80044b8:	e7d0      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, statstr);		// Detector Status
 80044ba:	4936      	ldr	r1, [pc, #216]	; (8004594 <tag_callback+0x17c>)
 80044bc:	4638      	mov	r0, r7
 80044be:	f01a f95c 	bl	801e77a <strcpy>
			break;
 80044c2:	e7cb      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, snstr);			// Detector ID
 80044c4:	4934      	ldr	r1, [pc, #208]	; (8004598 <tag_callback+0x180>)
 80044c6:	4638      	mov	r0, r7
 80044c8:	f01a f957 	bl	801e77a <strcpy>
			break;
 80044cc:	e7c6      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 80044ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044d2:	4832      	ldr	r0, [pc, #200]	; (800459c <tag_callback+0x184>)
 80044d4:	f003 f9f6 	bl	80078c4 <HAL_GPIO_ReadPin>
 80044d8:	4b2a      	ldr	r3, [pc, #168]	; (8004584 <tag_callback+0x16c>)
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <tag_callback+0x174>)
 80044dc:	2800      	cmp	r0, #0
 80044de:	bf08      	it	eq
 80044e0:	4613      	moveq	r3, r2
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	803b      	strh	r3, [r7, #0]
			break;
 80044e6:	e7b9      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 80044e8:	4a2d      	ldr	r2, [pc, #180]	; (80045a0 <tag_callback+0x188>)
 80044ea:	4b28      	ldr	r3, [pc, #160]	; (800458c <tag_callback+0x174>)
 80044ec:	8811      	ldrh	r1, [r2, #0]
 80044ee:	4a25      	ldr	r2, [pc, #148]	; (8004584 <tag_callback+0x16c>)
 80044f0:	f011 0f04 	tst.w	r1, #4
 80044f4:	bf08      	it	eq
 80044f6:	4613      	moveq	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	803b      	strh	r3, [r7, #0]
			break;
 80044fc:	e7ae      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 80044fe:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <tag_callback+0x188>)
 8004500:	4b22      	ldr	r3, [pc, #136]	; (800458c <tag_callback+0x174>)
 8004502:	8811      	ldrh	r1, [r2, #0]
 8004504:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <tag_callback+0x16c>)
 8004506:	f011 0f02 	tst.w	r1, #2
 800450a:	bf08      	it	eq
 800450c:	4613      	moveq	r3, r2
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	803b      	strh	r3, [r7, #0]
			break;
 8004512:	e7a3      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8004514:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <tag_callback+0x18c>)
 8004516:	4b1d      	ldr	r3, [pc, #116]	; (800458c <tag_callback+0x174>)
 8004518:	8811      	ldrh	r1, [r2, #0]
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <tag_callback+0x16c>)
 800451c:	2900      	cmp	r1, #0
 800451e:	bf08      	it	eq
 8004520:	4613      	moveq	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	803b      	strh	r3, [r7, #0]
			break;
 8004526:	e799      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, pressstr);		// pressure
 8004528:	491f      	ldr	r1, [pc, #124]	; (80045a8 <tag_callback+0x190>)
 800452a:	4638      	mov	r0, r7
 800452c:	f01a f925 	bl	801e77a <strcpy>
			break;
 8004530:	e794      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, tempstr);		// temperature
 8004532:	491e      	ldr	r1, [pc, #120]	; (80045ac <tag_callback+0x194>)
 8004534:	4638      	mov	r0, r7
 8004536:	f01a f920 	bl	801e77a <strcpy>
			break;
 800453a:	e78f      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <tag_callback+0x188>)
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <tag_callback+0x174>)
 8004540:	8811      	ldrh	r1, [r2, #0]
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <tag_callback+0x16c>)
 8004544:	f011 0f01 	tst.w	r1, #1
 8004548:	bf08      	it	eq
 800454a:	4613      	moveq	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	803b      	strh	r3, [r7, #0]
			break;
 8004550:	e784      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, "5");
 8004552:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <tag_callback+0x198>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	803b      	strh	r3, [r7, #0]
			break;
 8004558:	e780      	b.n	800445c <tag_callback+0x44>
			strcpy(newstring, nowtimestr);
 800455a:	4916      	ldr	r1, [pc, #88]	; (80045b4 <tag_callback+0x19c>)
 800455c:	4638      	mov	r0, r7
 800455e:	f01a f90c 	bl	801e77a <strcpy>
			break;
 8004562:	e77b      	b.n	800445c <tag_callback+0x44>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8004564:	4632      	mov	r2, r6
 8004566:	4914      	ldr	r1, [pc, #80]	; (80045b8 <tag_callback+0x1a0>)
 8004568:	4638      	mov	r0, r7
 800456a:	f01a f861 	bl	801e630 <siprintf>
			break;
 800456e:	e775      	b.n	800445c <tag_callback+0x44>
 8004570:	40020c00 	.word	0x40020c00
 8004574:	20021fc8 	.word	0x20021fc8
 8004578:	08023084 	.word	0x08023084
 800457c:	200002b0 	.word	0x200002b0
 8004580:	200223f8 	.word	0x200223f8
 8004584:	0803b6e0 	.word	0x0803b6e0
 8004588:	080230b4 	.word	0x080230b4
 800458c:	08022b7c 	.word	0x08022b7c
 8004590:	20000004 	.word	0x20000004
 8004594:	20000170 	.word	0x20000170
 8004598:	200000d0 	.word	0x200000d0
 800459c:	40021000 	.word	0x40021000
 80045a0:	200002b2 	.word	0x200002b2
 80045a4:	20000002 	.word	0x20000002
 80045a8:	200000c4 	.word	0x200000c4
 80045ac:	2000021c 	.word	0x2000021c
 80045b0:	08023090 	.word	0x08023090
 80045b4:	20000084 	.word	0x20000084
 80045b8:	08023094 	.word	0x08023094

080045bc <returnpage>:
/* ---------------------------------------------- */
// http client
/* ---------------------------------------------- */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 80045bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 80045be:	4d27      	ldr	r5, [pc, #156]	; (800465c <returnpage+0xa0>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 80045c0:	b08d      	sub	sp, #52	; 0x34
 80045c2:	4616      	mov	r6, r2
 80045c4:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 80045c8:	ac07      	add	r4, sp, #28
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 80045ca:	f88d 100e 	strb.w	r1, [sp, #14]
 80045ce:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile uint32_t sn;
	int nconv;
	int p1, p2;

	if (errorm == 0) {
 80045d2:	f89d 700e 	ldrb.w	r7, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 80045d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d8:	682d      	ldr	r5, [r5, #0]
 80045da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045dc:	6025      	str	r5, [r4, #0]
	if (errorm == 0) {
 80045de:	b10f      	cbz	r7, 80045e4 <returnpage+0x28>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 80045e0:	b00d      	add	sp, #52	; 0x34
 80045e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nconv = sscanf(content, "%5u%48s%u%u", &sn, udp_target, &p1, &p2);
 80045e4:	a906      	add	r1, sp, #24
 80045e6:	aa05      	add	r2, sp, #20
 80045e8:	4c1d      	ldr	r4, [pc, #116]	; (8004660 <returnpage+0xa4>)
 80045ea:	4630      	mov	r0, r6
 80045ec:	e9cd 2100 	strd	r2, r1, [sp]
 80045f0:	4623      	mov	r3, r4
 80045f2:	aa04      	add	r2, sp, #16
 80045f4:	491b      	ldr	r1, [pc, #108]	; (8004664 <returnpage+0xa8>)
 80045f6:	f01a f83b 	bl	801e670 <siscanf>
		if (nconv != EOF) {
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	d01f      	beq.n	800463e <returnpage+0x82>
			switch (nconv) {
 80045fe:	2801      	cmp	r0, #1
 8004600:	d00c      	beq.n	800461c <returnpage+0x60>
 8004602:	db17      	blt.n	8004634 <returnpage+0x78>
 8004604:	2804      	cmp	r0, #4
 8004606:	dc15      	bgt.n	8004634 <returnpage+0x78>
				strcpy(udp_target, SERVER_DESTINATION);
 8004608:	4d17      	ldr	r5, [pc, #92]	; (8004668 <returnpage+0xac>)
 800460a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800460c:	6020      	str	r0, [r4, #0]
 800460e:	6061      	str	r1, [r4, #4]
				printf("A response from Server -> Target UDP host changed to %s\n", udp_target);
 8004610:	4621      	mov	r1, r4
 8004612:	4816      	ldr	r0, [pc, #88]	; (800466c <returnpage+0xb0>)
				strcpy(udp_target, SERVER_DESTINATION);
 8004614:	60a2      	str	r2, [r4, #8]
 8004616:	60e3      	str	r3, [r4, #12]
				printf("A response from Server -> Target UDP host changed to %s\n", udp_target);
 8004618:	f019 fee6 	bl	801e3e8 <iprintf>
				statuspkt.uid = sn;
 800461c:	9b04      	ldr	r3, [sp, #16]
 800461e:	4a14      	ldr	r2, [pc, #80]	; (8004670 <returnpage+0xb4>)
 8004620:	b29b      	uxth	r3, r3
				printf("A response from Server -> Serial Number Changed to %lu\n", statuspkt.uid);
 8004622:	4814      	ldr	r0, [pc, #80]	; (8004674 <returnpage+0xb8>)
				statuspkt.uid = sn;
 8004624:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				printf("A response from Server -> Serial Number Changed to %lu\n", statuspkt.uid);
 8004628:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800462c:	f019 fedc 	bl	801e3e8 <iprintf>
}
 8004630:	b00d      	add	sp, #52	; 0x34
 8004632:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("Wrong number of params from Server -> %d\n", nconv);
 8004634:	4601      	mov	r1, r0
 8004636:	4810      	ldr	r0, [pc, #64]	; (8004678 <returnpage+0xbc>)
 8004638:	f019 fed6 	bl	801e3e8 <iprintf>
				break;
 800463c:	e7d0      	b.n	80045e0 <returnpage+0x24>
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 800463e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8004642:	ac0c      	add	r4, sp, #48	; 0x30
 8004644:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004648:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800464c:	480b      	ldr	r0, [pc, #44]	; (800467c <returnpage+0xc0>)
 800464e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004652:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8004656:	f019 fec7 	bl	801e3e8 <iprintf>
}
 800465a:	e7c1      	b.n	80045e0 <returnpage+0x24>
 800465c:	080217b8 	.word	0x080217b8
 8004660:	200223b4 	.word	0x200223b4
 8004664:	08022ed4 	.word	0x08022ed4
 8004668:	08022ee0 	.word	0x08022ee0
 800466c:	08022ef0 	.word	0x08022ef0
 8004670:	2002183c 	.word	0x2002183c
 8004674:	08022f2c 	.word	0x08022f2c
 8004678:	08022f64 	.word	0x08022f64
 800467c:	08022f90 	.word	0x08022f90

08004680 <httpd_cgi_handler>:
void httpd_cgi_handler(const char *uri, int count, char **http_cgi_params, char **http_cgi_param_vals) {
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	4692      	mov	sl, r2
 8004686:	b085      	sub	sp, #20
 8004688:	460e      	mov	r6, r1
 800468a:	4604      	mov	r4, r0
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 800468c:	220a      	movs	r2, #10
 800468e:	a903      	add	r1, sp, #12
 8004690:	f8da 0000 	ldr.w	r0, [sl]
void httpd_cgi_handler(const char *uri, int count, char **http_cgi_params, char **http_cgi_param_vals) {
 8004694:	461f      	mov	r7, r3
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8004696:	f01a f92d 	bl	801e8f4 <strtol>
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 800469a:	4632      	mov	r2, r6
 800469c:	4603      	mov	r3, r0
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 800469e:	4605      	mov	r5, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 80046a0:	4621      	mov	r1, r4
 80046a2:	4869      	ldr	r0, [pc, #420]	; (8004848 <httpd_cgi_handler+0x1c8>)
 80046a4:	f019 fea0 	bl	801e3e8 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80046a8:	2e00      	cmp	r6, #0
 80046aa:	dd3c      	ble.n	8004726 <httpd_cgi_handler+0xa6>
 80046ac:	2400      	movs	r4, #0
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 80046ae:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8004878 <httpd_cgi_handler+0x1f8>
 80046b2:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 800487c <httpd_cgi_handler+0x1fc>
 80046b6:	f1a5 010c 	sub.w	r1, r5, #12
 80046ba:	2201      	movs	r2, #1
		switch (j) {
 80046bc:	f1a5 030a 	sub.w	r3, r5, #10
			j -= 11;	// now offset 0
 80046c0:	f1a5 080b 	sub.w	r8, r5, #11
 80046c4:	408a      	lsls	r2, r1
		switch (j) {
 80046c6:	2b0e      	cmp	r3, #14
 80046c8:	d830      	bhi.n	800472c <httpd_cgi_handler+0xac>
 80046ca:	e8df f003 	tbb	[pc, r3]
 80046ce:	94a3      	.short	0x94a3
 80046d0:	08080808 	.word	0x08080808
 80046d4:	08080808 	.word	0x08080808
 80046d8:	7f394b5d 	.word	0x7f394b5d
 80046dc:	6f          	.byte	0x6f
 80046dd:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	b252      	sxtb	r2, r2
 80046e2:	f999 3000 	ldrsb.w	r3, [r9]
			j -= 11;	// now offset 0
 80046e6:	4645      	mov	r5, r8
			if (((*http_cgi_param_vals)[i]) == '0') {
 80046e8:	5d08      	ldrb	r0, [r1, r4]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80046ea:	ea42 0103 	orr.w	r1, r2, r3
			if (((*http_cgi_param_vals)[i]) == '0') {
 80046ee:	2830      	cmp	r0, #48	; 0x30
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80046f0:	4856      	ldr	r0, [pc, #344]	; (800484c <httpd_cgi_handler+0x1cc>)
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80046f2:	b2c9      	uxtb	r1, r1
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 80046f4:	bf04      	itt	eq
 80046f6:	ea23 0202 	biceq.w	r2, r3, r2
 80046fa:	b2d1      	uxtbeq	r1, r2
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80046fc:	4a54      	ldr	r2, [pc, #336]	; (8004850 <httpd_cgi_handler+0x1d0>)
 80046fe:	f001 0302 	and.w	r3, r1, #2
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8004702:	f889 1000 	strb.w	r1, [r9]
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8004706:	6013      	str	r3, [r2, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8004708:	f019 fe6e 	bl	801e3e8 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 800470c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004710:	2301      	movs	r3, #1
 8004712:	464a      	mov	r2, r9
 8004714:	2188      	movs	r1, #136	; 0x88
 8004716:	9000      	str	r0, [sp, #0]
 8004718:	484e      	ldr	r0, [pc, #312]	; (8004854 <httpd_cgi_handler+0x1d4>)
 800471a:	f003 fb63 	bl	8007de4 <HAL_I2C_Master_Transmit>
 800471e:	b958      	cbnz	r0, 8004738 <httpd_cgi_handler+0xb8>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004720:	3401      	adds	r4, #1
 8004722:	42a6      	cmp	r6, r4
 8004724:	d1c7      	bne.n	80046b6 <httpd_cgi_handler+0x36>
}
 8004726:	b005      	add	sp, #20
 8004728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 800472c:	f8da 1000 	ldr.w	r1, [sl]
 8004730:	4658      	mov	r0, fp
 8004732:	f019 fe59 	bl	801e3e8 <iprintf>
			break;
 8004736:	e7f3      	b.n	8004720 <httpd_cgi_handler+0xa0>
				printf("I2C HAL returned error 1\n\r");
 8004738:	4847      	ldr	r0, [pc, #284]	; (8004858 <httpd_cgi_handler+0x1d8>)
 800473a:	f019 fe55 	bl	801e3e8 <iprintf>
 800473e:	e7ef      	b.n	8004720 <httpd_cgi_handler+0xa0>
 8004740:	4d46      	ldr	r5, [pc, #280]	; (800485c <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	882b      	ldrh	r3, [r5, #0]
 8004746:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004748:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 800474a:	f043 0001 	orr.w	r0, r3, #1
 800474e:	2a30      	cmp	r2, #48	; 0x30
 8004750:	bf08      	it	eq
 8004752:	f023 0001 	biceq.w	r0, r3, #1
			setpgagain(val);
 8004756:	f7fe f965 	bl	8002a24 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800475a:	42a6      	cmp	r6, r4
 800475c:	dcf1      	bgt.n	8004742 <httpd_cgi_handler+0xc2>
}
 800475e:	b005      	add	sp, #20
 8004760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004764:	4d3d      	ldr	r5, [pc, #244]	; (800485c <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	882b      	ldrh	r3, [r5, #0]
 800476a:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800476c:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 800476e:	f043 0002 	orr.w	r0, r3, #2
 8004772:	2a30      	cmp	r2, #48	; 0x30
 8004774:	bf08      	it	eq
 8004776:	f023 0002 	biceq.w	r0, r3, #2
			setpgagain(val);
 800477a:	f7fe f953 	bl	8002a24 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800477e:	42a6      	cmp	r6, r4
 8004780:	dcf1      	bgt.n	8004766 <httpd_cgi_handler+0xe6>
}
 8004782:	b005      	add	sp, #20
 8004784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004788:	4d34      	ldr	r5, [pc, #208]	; (800485c <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	882b      	ldrh	r3, [r5, #0]
 800478e:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004790:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8004792:	f043 0004 	orr.w	r0, r3, #4
 8004796:	2a30      	cmp	r2, #48	; 0x30
 8004798:	bf08      	it	eq
 800479a:	f023 0004 	biceq.w	r0, r3, #4
			setpgagain(val);
 800479e:	f7fe f941 	bl	8002a24 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	dcf1      	bgt.n	800478a <httpd_cgi_handler+0x10a>
}
 80047a6:	b005      	add	sp, #20
 80047a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	1e62      	subs	r2, r4, #1
 80047b0:	492b      	ldr	r1, [pc, #172]	; (8004860 <httpd_cgi_handler+0x1e0>)
 80047b2:	441a      	add	r2, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80047b4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80047b8:	3401      	adds	r4, #1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80047ba:	3b30      	subs	r3, #48	; 0x30
 80047bc:	bf18      	it	ne
 80047be:	2301      	movne	r3, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80047c0:	42a6      	cmp	r6, r4
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80047c2:	800b      	strh	r3, [r1, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80047c4:	dcf6      	bgt.n	80047b4 <httpd_cgi_handler+0x134>
}
 80047c6:	b005      	add	sp, #20
 80047c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80047cc:	4d25      	ldr	r5, [pc, #148]	; (8004864 <httpd_cgi_handler+0x1e4>)
			if (((*http_cgi_param_vals)[i]) == '1')
 80047ce:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80047d0:	2201      	movs	r2, #1
 80047d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047d6:	4628      	mov	r0, r5
			if (((*http_cgi_param_vals)[i]) == '1')
 80047d8:	5d1b      	ldrb	r3, [r3, r4]
 80047da:	4414      	add	r4, r2
 80047dc:	2b31      	cmp	r3, #49	; 0x31
 80047de:	d004      	beq.n	80047ea <httpd_cgi_handler+0x16a>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80047e0:	f003 f882 	bl	80078e8 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80047e4:	42a6      	cmp	r6, r4
 80047e6:	dcf2      	bgt.n	80047ce <httpd_cgi_handler+0x14e>
 80047e8:	e79d      	b.n	8004726 <httpd_cgi_handler+0xa6>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 80047ea:	2200      	movs	r2, #0
 80047ec:	f003 f87c 	bl	80078e8 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80047f0:	42a6      	cmp	r6, r4
 80047f2:	dcec      	bgt.n	80047ce <httpd_cgi_handler+0x14e>
 80047f4:	e797      	b.n	8004726 <httpd_cgi_handler+0xa6>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 80047f6:	4d1c      	ldr	r5, [pc, #112]	; (8004868 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0')
 80047f8:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 80047fa:	2201      	movs	r2, #1
 80047fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004800:	4628      	mov	r0, r5
			if (((*http_cgi_param_vals)[i]) == '0')
 8004802:	5d1b      	ldrb	r3, [r3, r4]
 8004804:	4414      	add	r4, r2
 8004806:	2b30      	cmp	r3, #48	; 0x30
 8004808:	d018      	beq.n	800483c <httpd_cgi_handler+0x1bc>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 800480a:	f003 f86d 	bl	80078e8 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800480e:	42a6      	cmp	r6, r4
 8004810:	dcf2      	bgt.n	80047f8 <httpd_cgi_handler+0x178>
 8004812:	e788      	b.n	8004726 <httpd_cgi_handler+0xa6>
			printf("Reboot command from wwww\n");
 8004814:	4815      	ldr	r0, [pc, #84]	; (800486c <httpd_cgi_handler+0x1ec>)
 8004816:	f019 fe6f 	bl	801e4f8 <puts>
			osDelay(1000);
 800481a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800481e:	f00b f96b 	bl	800faf8 <osDelay>
 8004822:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004826:	4912      	ldr	r1, [pc, #72]	; (8004870 <httpd_cgi_handler+0x1f0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004828:	4b12      	ldr	r3, [pc, #72]	; (8004874 <httpd_cgi_handler+0x1f4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800482a:	68ca      	ldr	r2, [r1, #12]
 800482c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004830:	4313      	orrs	r3, r2
 8004832:	60cb      	str	r3, [r1, #12]
 8004834:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <httpd_cgi_handler+0x1b8>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 800483c:	2200      	movs	r2, #0
 800483e:	f003 f853 	bl	80078e8 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004842:	42a6      	cmp	r6, r4
 8004844:	dcd8      	bgt.n	80047f8 <httpd_cgi_handler+0x178>
 8004846:	e76e      	b.n	8004726 <httpd_cgi_handler+0xa6>
 8004848:	08022e08 	.word	0x08022e08
 800484c:	08022e50 	.word	0x08022e50
 8004850:	200008a8 	.word	0x200008a8
 8004854:	20021b90 	.word	0x20021b90
 8004858:	08022918 	.word	0x08022918
 800485c:	200002b2 	.word	0x200002b2
 8004860:	20000002 	.word	0x20000002
 8004864:	40021000 	.word	0x40021000
 8004868:	40020c00 	.word	0x40020c00
 800486c:	08022e34 	.word	0x08022e34
 8004870:	e000ed00 	.word	0xe000ed00
 8004874:	05fa0004 	.word	0x05fa0004
 8004878:	08022e6c 	.word	0x08022e6c
 800487c:	200002b0 	.word	0x200002b0

08004880 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8004880:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8004882:	4802      	ldr	r0, [pc, #8]	; (800488c <httpd_post_receive_data+0xc>)
 8004884:	f019 fe38 	bl	801e4f8 <puts>
}
 8004888:	2000      	movs	r0, #0
 800488a:	bd08      	pop	{r3, pc}
 800488c:	08022eb8 	.word	0x08022eb8

08004890 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8004890:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8004892:	4802      	ldr	r0, [pc, #8]	; (800489c <httpd_post_begin+0xc>)
 8004894:	f019 fe30 	bl	801e4f8 <puts>
}
 8004898:	2000      	movs	r0, #0
 800489a:	bd08      	pop	{r3, pc}
 800489c:	08022e8c 	.word	0x08022e8c

080048a0 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 80048a0:	4801      	ldr	r0, [pc, #4]	; (80048a8 <httpd_post_finished+0x8>)
 80048a2:	f019 be29 	b.w	801e4f8 <puts>
 80048a6:	bf00      	nop
 80048a8:	08022ea0 	.word	0x08022ea0

080048ac <init_httpd_ssi>:
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80048ac:	4803      	ldr	r0, [pc, #12]	; (80048bc <init_httpd_ssi+0x10>)
 80048ae:	2215      	movs	r2, #21
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 80048b2:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80048b4:	f00e fc66 	bl	8013184 <http_set_ssi_handler>
}
 80048b8:	bd08      	pop	{r3, pc}
 80048ba:	bf00      	nop
 80048bc:	08004419 	.word	0x08004419
 80048c0:	200002bc 	.word	0x200002bc

080048c4 <httpclient>:

void httpclient(char Page[64]) {
 80048c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t ip;
	int err;
	static ip_addr_t remoteip = { 0 };
	static char *Postvars = NULL;

	if (remoteip.addr == 0) {
 80048c6:	4c11      	ldr	r4, [pc, #68]	; (800490c <httpclient+0x48>)
void httpclient(char Page[64]) {
 80048c8:	b084      	sub	sp, #16
 80048ca:	4605      	mov	r5, r0
	if (remoteip.addr == 0) {
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	b143      	cbz	r3, 80048e2 <httpclient+0x1e>
		ip = remoteip.addr;
		printf("\nHTTP Target IP: %lu.%lu.%lu.%lu\n", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16,
				(ip & 0xff000000) >> 24);
	}

	result = hc_open(remoteip, Page, Postvars, returnpage);
 80048d0:	4629      	mov	r1, r5
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <httpclient+0x4c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	f7fc fad2 	bl	8000e80 <hc_open>
 80048dc:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 80048de:	b004      	add	sp, #16
 80048e0:	bd70      	pop	{r4, r5, r6, pc}
		err = dnslookup("lightning.vk4ya.com", &remoteip);
 80048e2:	4621      	mov	r1, r4
 80048e4:	480b      	ldr	r0, [pc, #44]	; (8004914 <httpclient+0x50>)
 80048e6:	f7ff fc01 	bl	80040ec <dnslookup>
		if (err != ERR_OK)
 80048ea:	b958      	cbnz	r0, 8004904 <httpclient+0x40>
		ip = remoteip.addr;
 80048ec:	6821      	ldr	r1, [r4, #0]
		printf("\nHTTP Target IP: %lu.%lu.%lu.%lu\n", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16,
 80048ee:	480a      	ldr	r0, [pc, #40]	; (8004918 <httpclient+0x54>)
 80048f0:	0e0e      	lsrs	r6, r1, #24
 80048f2:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80048f6:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80048fa:	b2c9      	uxtb	r1, r1
 80048fc:	9600      	str	r6, [sp, #0]
 80048fe:	f019 fd73 	bl	801e3e8 <iprintf>
 8004902:	e7e5      	b.n	80048d0 <httpclient+0xc>
			rebootme();
 8004904:	f7fc fb70 	bl	8000fe8 <rebootme>
 8004908:	e7f0      	b.n	80048ec <httpclient+0x28>
 800490a:	bf00      	nop
 800490c:	200008cc 	.word	0x200008cc
 8004910:	080045bd 	.word	0x080045bd
 8004914:	08022dd0 	.word	0x08022dd0
 8004918:	08022de4 	.word	0x08022de4

0800491c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800491c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004954 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004920:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004922:	e003      	b.n	800492c <LoopCopyDataInit>

08004924 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004926:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004928:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800492a:	3104      	adds	r1, #4

0800492c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800492c:	480b      	ldr	r0, [pc, #44]	; (800495c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004930:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004932:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004934:	d3f6      	bcc.n	8004924 <CopyDataInit>
  ldr  r2, =_sbss
 8004936:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004938:	e002      	b.n	8004940 <LoopFillZerobss>

0800493a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800493a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800493c:	f842 3b04 	str.w	r3, [r2], #4

08004940 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004942:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004944:	d3f9      	bcc.n	800493a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004946:	f7ff fad9 	bl	8003efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800494a:	f018 fc81 	bl	801d250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800494e:	f7fc ff5d 	bl	800180c <main>
  bx  lr    
 8004952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004954:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004958:	0803c19c 	.word	0x0803c19c
  ldr  r0, =_sdata
 800495c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004960:	200006ec 	.word	0x200006ec
  ldr  r2, =_sbss
 8004964:	200006f0 	.word	0x200006f0
  ldr  r3, = _ebss
 8004968:	20036d8c 	.word	0x20036d8c

0800496c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800496c:	e7fe      	b.n	800496c <CAN1_RX0_IRQHandler>
	...

08004970 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004970:	4a07      	ldr	r2, [pc, #28]	; (8004990 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004972:	2003      	movs	r0, #3
{
 8004974:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004976:	6813      	ldr	r3, [r2, #0]
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800497e:	f000 fc4d 	bl	800521c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004982:	2000      	movs	r0, #0
 8004984:	f7ff f9c0 	bl	8003d08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004988:	f7fe fc3e 	bl	8003208 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800498c:	2000      	movs	r0, #0
 800498e:	bd08      	pop	{r3, pc}
 8004990:	40023c00 	.word	0x40023c00

08004994 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004994:	4a03      	ldr	r2, [pc, #12]	; (80049a4 <HAL_IncTick+0x10>)
 8004996:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <HAL_IncTick+0x14>)
 8004998:	6811      	ldr	r1, [r2, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	440b      	add	r3, r1
 800499e:	6013      	str	r3, [r2, #0]
}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	200223fc 	.word	0x200223fc
 80049a8:	20000314 	.word	0x20000314

080049ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80049ac:	4b01      	ldr	r3, [pc, #4]	; (80049b4 <HAL_GetTick+0x8>)
 80049ae:	6818      	ldr	r0, [r3, #0]
}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	200223fc 	.word	0x200223fc

080049b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80049bc:	f7ff fff6 	bl	80049ac <HAL_GetTick>
 80049c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049c2:	1c63      	adds	r3, r4, #1
 80049c4:	d002      	beq.n	80049cc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80049c6:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <HAL_Delay+0x20>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049cc:	f7ff ffee 	bl	80049ac <HAL_GetTick>
 80049d0:	1b40      	subs	r0, r0, r5
 80049d2:	42a0      	cmp	r0, r4
 80049d4:	d3fa      	bcc.n	80049cc <HAL_Delay+0x14>
  {
  }
}
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	20000314 	.word	0x20000314

080049dc <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049dc:	2800      	cmp	r0, #0
 80049de:	f000 813f 	beq.w	8004c60 <HAL_ADC_Init+0x284>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80049e2:	49b2      	ldr	r1, [pc, #712]	; (8004cac <HAL_ADC_Init+0x2d0>)
 80049e4:	4ab2      	ldr	r2, [pc, #712]	; (8004cb0 <HAL_ADC_Init+0x2d4>)
{
 80049e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80049e8:	6803      	ldr	r3, [r0, #0]
 80049ea:	4604      	mov	r4, r0
 80049ec:	428b      	cmp	r3, r1
 80049ee:	bf18      	it	ne
 80049f0:	4293      	cmpne	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_ADC_Init+0x22>
 80049f4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80049f8:	4293      	cmp	r3, r2
 80049fa:	f040 8133 	bne.w	8004c64 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8004a04:	f040 8138 	bne.w	8004c78 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004a08:	68a3      	ldr	r3, [r4, #8]
 8004a0a:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8004a0e:	f040 813d 	bne.w	8004c8c <HAL_ADC_Init+0x2b0>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8004a12:	6923      	ldr	r3, [r4, #16]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d861      	bhi.n	8004adc <HAL_ADC_Init+0x100>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004a18:	69a3      	ldr	r3, [r4, #24]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d858      	bhi.n	8004ad0 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004a1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a20:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8004a24:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8004a28:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004a2c:	bf18      	it	ne
 8004a2e:	2900      	cmpne	r1, #0
 8004a30:	bf14      	ite	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	2300      	moveq	r3, #0
 8004a36:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	f003 0301 	andne.w	r3, r3, #1
 8004a42:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 8004a46:	bf0c      	ite	eq
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	f003 0301 	andne.w	r3, r3, #1
 8004a4e:	b123      	cbz	r3, 8004a5a <HAL_ADC_Init+0x7e>
 8004a50:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8004a54:	2a01      	cmp	r2, #1
 8004a56:	f200 8140 	bhi.w	8004cda <HAL_ADC_Init+0x2fe>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8004a60:	d159      	bne.n	8004b16 <HAL_ADC_Init+0x13a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004a62:	69e3      	ldr	r3, [r4, #28]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	2b0f      	cmp	r3, #15
 8004a68:	d84b      	bhi.n	8004b02 <HAL_ADC_Init+0x126>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8004a6a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d825      	bhi.n	8004abe <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004a72:	6963      	ldr	r3, [r4, #20]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d83a      	bhi.n	8004aee <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004a78:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d814      	bhi.n	8004aaa <HAL_ADC_Init+0xce>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a80:	4b8c      	ldr	r3, [pc, #560]	; (8004cb4 <HAL_ADC_Init+0x2d8>)
 8004a82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d004      	beq.n	8004a92 <HAL_ADC_Init+0xb6>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004a88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a8a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8004a8e:	f040 8119 	bne.w	8004cc4 <HAL_ADC_Init+0x2e8>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a92:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	f000 80d8 	beq.w	8004c4a <HAL_ADC_Init+0x26e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a9c:	06db      	lsls	r3, r3, #27
 8004a9e:	d544      	bpl.n	8004b2a <HAL_ADC_Init+0x14e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004aa0:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8004aa2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004aa4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004aaa:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8004aae:	4882      	ldr	r0, [pc, #520]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004ab0:	f7fd fdce 	bl	8002650 <assert_failed>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ab4:	4b7f      	ldr	r3, [pc, #508]	; (8004cb4 <HAL_ADC_Init+0x2d8>)
 8004ab6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1e5      	bne.n	8004a88 <HAL_ADC_Init+0xac>
 8004abc:	e7e9      	b.n	8004a92 <HAL_ADC_Init+0xb6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8004abe:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8004ac2:	487d      	ldr	r0, [pc, #500]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004ac4:	f7fd fdc4 	bl	8002650 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004ac8:	6963      	ldr	r3, [r4, #20]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d9d4      	bls.n	8004a78 <HAL_ADC_Init+0x9c>
 8004ace:	e00e      	b.n	8004aee <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004ad0:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004ad4:	4878      	ldr	r0, [pc, #480]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004ad6:	f7fd fdbb 	bl	8002650 <assert_failed>
 8004ada:	e7a0      	b.n	8004a1e <HAL_ADC_Init+0x42>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8004adc:	f240 114f 	movw	r1, #335	; 0x14f
 8004ae0:	4875      	ldr	r0, [pc, #468]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004ae2:	f7fd fdb5 	bl	8002650 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004ae6:	69a3      	ldr	r3, [r4, #24]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d998      	bls.n	8004a1e <HAL_ADC_Init+0x42>
 8004aec:	e7f0      	b.n	8004ad0 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004aee:	f240 1155 	movw	r1, #341	; 0x155
 8004af2:	4871      	ldr	r0, [pc, #452]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004af4:	f7fd fdac 	bl	8002650 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004af8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d9bf      	bls.n	8004a80 <HAL_ADC_Init+0xa4>
 8004b00:	e7d3      	b.n	8004aaa <HAL_ADC_Init+0xce>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004b02:	f240 1153 	movw	r1, #339	; 0x153
 8004b06:	486c      	ldr	r0, [pc, #432]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004b08:	f7fd fda2 	bl	8002650 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8004b0c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d9ae      	bls.n	8004a72 <HAL_ADC_Init+0x96>
 8004b14:	e7d3      	b.n	8004abe <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004b16:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004b1a:	4867      	ldr	r0, [pc, #412]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004b1c:	f7fd fd98 	bl	8002650 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004b20:	69e3      	ldr	r3, [r4, #28]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	2b0f      	cmp	r3, #15
 8004b26:	d9a0      	bls.n	8004a6a <HAL_ADC_Init+0x8e>
 8004b28:	e7eb      	b.n	8004b02 <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 8004b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b2c:	4a63      	ldr	r2, [pc, #396]	; (8004cbc <HAL_ADC_Init+0x2e0>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004b2e:	4964      	ldr	r1, [pc, #400]	; (8004cc0 <HAL_ADC_Init+0x2e4>)
    ADC_STATE_CLR_SET(hadc->State,
 8004b30:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b32:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b34:	4d5f      	ldr	r5, [pc, #380]	; (8004cb4 <HAL_ADC_Init+0x2d8>)
    ADC_STATE_CLR_SET(hadc->State,
 8004b36:	f042 0202 	orr.w	r2, r2, #2
 8004b3a:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004b3c:	684a      	ldr	r2, [r1, #4]
 8004b3e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004b42:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004b44:	684a      	ldr	r2, [r1, #4]
 8004b46:	6860      	ldr	r0, [r4, #4]
 8004b48:	4302      	orrs	r2, r0
 8004b4a:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b4c:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b4e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b54:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b58:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b5a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b5c:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b60:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b64:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b66:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b68:	6858      	ldr	r0, [r3, #4]
 8004b6a:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8004b6e:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b70:	6859      	ldr	r1, [r3, #4]
 8004b72:	ea41 010c 	orr.w	r1, r1, ip
 8004b76:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b78:	6899      	ldr	r1, [r3, #8]
 8004b7a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004b7e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	ea42 0207 	orr.w	r2, r2, r7
 8004b86:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b88:	f000 8086 	beq.w	8004c98 <HAL_ADC_Init+0x2bc>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b8c:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b90:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004b94:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	4316      	orrs	r6, r2
 8004b9a:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b9c:	6899      	ldr	r1, [r3, #8]
 8004b9e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004ba2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	4302      	orrs	r2, r0
 8004ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004baa:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bac:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bae:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bb2:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bb6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8004bbe:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	f000 8085 	beq.w	8004cd0 <HAL_ADC_Init+0x2f4>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004bc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004bc8:	3a01      	subs	r2, #1
 8004bca:	2a07      	cmp	r2, #7
 8004bcc:	d907      	bls.n	8004bde <HAL_ADC_Init+0x202>
 8004bce:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 8004bd2:	4839      	ldr	r0, [pc, #228]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004bd4:	f7fd fd3c 	bl	8002650 <assert_failed>
 8004bd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	3a01      	subs	r2, #1
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004be4:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004bec:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8004bf4:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004bf6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8004bf8:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004bfa:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004bfc:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c00:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c04:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c06:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c08:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c0a:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c0c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004c0e:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 8004c12:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c14:	689d      	ldr	r5, [r3, #8]
 8004c16:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8004c1a:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c1c:	6899      	ldr	r1, [r3, #8]
 8004c1e:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 8004c22:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c24:	6899      	ldr	r1, [r3, #8]
 8004c26:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004c2a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004c32:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004c34:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c38:	f023 0303 	bic.w	r3, r3, #3
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004c42:	2300      	movs	r3, #0
 8004c44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7fe fb0c 	bl	8003268 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004c50:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004c54:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c58:	06db      	lsls	r3, r3, #27
 8004c5a:	f53f af21 	bmi.w	8004aa0 <HAL_ADC_Init+0xc4>
 8004c5e:	e764      	b.n	8004b2a <HAL_ADC_Init+0x14e>
    return HAL_ERROR;
 8004c60:	2001      	movs	r0, #1
}
 8004c62:	4770      	bx	lr
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004c64:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004c68:	4813      	ldr	r0, [pc, #76]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004c6a:	f7fd fcf1 	bl	8002650 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8004c74:	f43f aec8 	beq.w	8004a08 <HAL_ADC_Init+0x2c>
 8004c78:	f240 114d 	movw	r1, #333	; 0x14d
 8004c7c:	480e      	ldr	r0, [pc, #56]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004c7e:	f7fd fce7 	bl	8002650 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8004c88:	f43f aec3 	beq.w	8004a12 <HAL_ADC_Init+0x36>
 8004c8c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004c90:	4809      	ldr	r0, [pc, #36]	; (8004cb8 <HAL_ADC_Init+0x2dc>)
 8004c92:	f7fd fcdd 	bl	8002650 <assert_failed>
 8004c96:	e6bc      	b.n	8004a12 <HAL_ADC_Init+0x36>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	e77f      	b.n	8004baa <HAL_ADC_Init+0x1ce>
 8004caa:	bf00      	nop
 8004cac:	40012000 	.word	0x40012000
 8004cb0:	40012100 	.word	0x40012100
 8004cb4:	0f000001 	.word	0x0f000001
 8004cb8:	080230cc 	.word	0x080230cc
 8004cbc:	ffffeefd 	.word	0xffffeefd
 8004cc0:	40012300 	.word	0x40012300
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004cc4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004cc8:	4807      	ldr	r0, [pc, #28]	; (8004ce8 <HAL_ADC_Init+0x30c>)
 8004cca:	f7fd fcc1 	bl	8002650 <assert_failed>
 8004cce:	e6e0      	b.n	8004a92 <HAL_ADC_Init+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	e78d      	b.n	8004bf6 <HAL_ADC_Init+0x21a>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004cda:	f240 1151 	movw	r1, #337	; 0x151
 8004cde:	4802      	ldr	r0, [pc, #8]	; (8004ce8 <HAL_ADC_Init+0x30c>)
 8004ce0:	f7fd fcb6 	bl	8002650 <assert_failed>
 8004ce4:	e6b9      	b.n	8004a5a <HAL_ADC_Init+0x7e>
 8004ce6:	bf00      	nop
 8004ce8:	080230cc 	.word	0x080230cc

08004cec <HAL_ADC_Start>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004cec:	6983      	ldr	r3, [r0, #24]
  __IO uint32_t counter = 0;
 8004cee:	2200      	movs	r2, #0
{
 8004cf0:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004cf2:	2b01      	cmp	r3, #1
{
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8004cf8:	9201      	str	r2, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004cfa:	d904      	bls.n	8004d06 <HAL_ADC_Start+0x1a>
 8004cfc:	f240 21de 	movw	r1, #734	; 0x2de
 8004d00:	4840      	ldr	r0, [pc, #256]	; (8004e04 <HAL_ADC_Start+0x118>)
 8004d02:	f7fd fca5 	bl	8002650 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8004d06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d08:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8004d0c:	d173      	bne.n	8004df6 <HAL_ADC_Start+0x10a>
  __HAL_LOCK(hadc);
 8004d0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d06c      	beq.n	8004df0 <HAL_ADC_Start+0x104>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d16:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 8004d18:	2101      	movs	r1, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d1a:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 8004d1c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d20:	07d9      	lsls	r1, r3, #31
 8004d22:	d414      	bmi.n	8004d4e <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d24:	4b38      	ldr	r3, [pc, #224]	; (8004e08 <HAL_ADC_Start+0x11c>)
 8004d26:	4839      	ldr	r0, [pc, #228]	; (8004e0c <HAL_ADC_Start+0x120>)
 8004d28:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8004d2a:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d2c:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8004d30:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d34:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8004d36:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004d3c:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8004d3e:	9b01      	ldr	r3, [sp, #4]
 8004d40:	b12b      	cbz	r3, 8004d4e <HAL_ADC_Start+0x62>
      counter--;
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f9      	bne.n	8004d42 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d4e:	6893      	ldr	r3, [r2, #8]
 8004d50:	07db      	lsls	r3, r3, #31
 8004d52:	d524      	bpl.n	8004d9e <HAL_ADC_Start+0xb2>
    ADC_STATE_CLR_SET(hadc->State,
 8004d54:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004d56:	4b2e      	ldr	r3, [pc, #184]	; (8004e10 <HAL_ADC_Start+0x124>)
 8004d58:	400b      	ands	r3, r1
 8004d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5e:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d60:	6853      	ldr	r3, [r2, #4]
 8004d62:	0558      	lsls	r0, r3, #21
 8004d64:	d505      	bpl.n	8004d72 <HAL_ADC_Start+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d70:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d74:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8004d78:	d026      	beq.n	8004dc8 <HAL_ADC_Start+0xdc>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d7c:	f023 0306 	bic.w	r3, r3, #6
 8004d80:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d82:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8004d86:	2000      	movs	r0, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004d88:	4b22      	ldr	r3, [pc, #136]	; (8004e14 <HAL_ADC_Start+0x128>)
    __HAL_UNLOCK(hadc);
 8004d8a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d8e:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	06c9      	lsls	r1, r1, #27
 8004d94:	d106      	bne.n	8004da4 <HAL_ADC_Start+0xb8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d96:	6890      	ldr	r0, [r2, #8]
 8004d98:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004d9c:	d016      	beq.n	8004dcc <HAL_ADC_Start+0xe0>
  return HAL_OK;
 8004d9e:	2000      	movs	r0, #0
}
 8004da0:	b002      	add	sp, #8
 8004da2:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004da4:	491c      	ldr	r1, [pc, #112]	; (8004e18 <HAL_ADC_Start+0x12c>)
 8004da6:	428a      	cmp	r2, r1
 8004da8:	d016      	beq.n	8004dd8 <HAL_ADC_Start+0xec>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004daa:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004dac:	06db      	lsls	r3, r3, #27
 8004dae:	d4f6      	bmi.n	8004d9e <HAL_ADC_Start+0xb2>
 8004db0:	491a      	ldr	r1, [pc, #104]	; (8004e1c <HAL_ADC_Start+0x130>)
 8004db2:	428a      	cmp	r2, r1
 8004db4:	d1f3      	bne.n	8004d9e <HAL_ADC_Start+0xb2>
 8004db6:	6888      	ldr	r0, [r1, #8]
 8004db8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004dbc:	d1ef      	bne.n	8004d9e <HAL_ADC_Start+0xb2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dbe:	688b      	ldr	r3, [r1, #8]
 8004dc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc4:	608b      	str	r3, [r1, #8]
 8004dc6:	e7eb      	b.n	8004da0 <HAL_ADC_Start+0xb4>
      ADC_CLEAR_ERRORCODE(hadc);
 8004dc8:	6463      	str	r3, [r4, #68]	; 0x44
 8004dca:	e7da      	b.n	8004d82 <HAL_ADC_Start+0x96>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dcc:	6893      	ldr	r3, [r2, #8]
 8004dce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dd2:	6093      	str	r3, [r2, #8]
}
 8004dd4:	b002      	add	sp, #8
 8004dd6:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004dd8:	6893      	ldr	r3, [r2, #8]
 8004dda:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8004dde:	d103      	bne.n	8004de8 <HAL_ADC_Start+0xfc>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004de0:	6893      	ldr	r3, [r2, #8]
 8004de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de6:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <HAL_ADC_Start+0x128>)
  return HAL_OK;
 8004dea:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	e7d7      	b.n	8004da0 <HAL_ADC_Start+0xb4>
  __HAL_LOCK(hadc);
 8004df0:	2002      	movs	r0, #2
}
 8004df2:	b002      	add	sp, #8
 8004df4:	bd10      	pop	{r4, pc}
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8004df6:	f240 21df 	movw	r1, #735	; 0x2df
 8004dfa:	4802      	ldr	r0, [pc, #8]	; (8004e04 <HAL_ADC_Start+0x118>)
 8004dfc:	f7fd fc28 	bl	8002650 <assert_failed>
 8004e00:	e785      	b.n	8004d0e <HAL_ADC_Start+0x22>
 8004e02:	bf00      	nop
 8004e04:	080230cc 	.word	0x080230cc
 8004e08:	200002b8 	.word	0x200002b8
 8004e0c:	431bde83 	.word	0x431bde83
 8004e10:	fffff8fe 	.word	0xfffff8fe
 8004e14:	40012300 	.word	0x40012300
 8004e18:	40012000 	.word	0x40012000
 8004e1c:	40012200 	.word	0x40012200

08004e20 <HAL_ADC_LevelOutOfWindowCallback>:
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop

08004e24 <HAL_ADC_ErrorCallback>:
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop

08004e28 <HAL_ADC_IRQHandler>:
{
 8004e28:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004e2a:	6983      	ldr	r3, [r0, #24]
{
 8004e2c:	4604      	mov	r4, r0
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d904      	bls.n	8004e3c <HAL_ADC_IRQHandler+0x14>
 8004e32:	f240 41a5 	movw	r1, #1189	; 0x4a5
 8004e36:	4856      	ldr	r0, [pc, #344]	; (8004f90 <HAL_ADC_IRQHandler+0x168>)
 8004e38:	f7fd fc0a 	bl	8002650 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004e3c:	69e3      	ldr	r3, [r4, #28]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	2b0f      	cmp	r3, #15
 8004e42:	f200 808f 	bhi.w	8004f64 <HAL_ADC_IRQHandler+0x13c>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004e46:	6963      	ldr	r3, [r4, #20]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	f200 8085 	bhi.w	8004f58 <HAL_ADC_IRQHandler+0x130>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004e52:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8004e54:	0790      	lsls	r0, r2, #30
 8004e56:	d513      	bpl.n	8004e80 <HAL_ADC_IRQHandler+0x58>
 8004e58:	068a      	lsls	r2, r1, #26
 8004e5a:	d511      	bpl.n	8004e80 <HAL_ADC_IRQHandler+0x58>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e5e:	06d5      	lsls	r5, r2, #27
 8004e60:	d403      	bmi.n	8004e6a <HAL_ADC_IRQHandler+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004e62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e68:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004e70:	d058      	beq.n	8004f24 <HAL_ADC_IRQHandler+0xfc>
    HAL_ADC_ConvCpltCallback(hadc);
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7fb fcd6 	bl	8000824 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	f06f 0212 	mvn.w	r2, #18
 8004e7e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004e80:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004e82:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8004e84:	0752      	lsls	r2, r2, #29
 8004e86:	d513      	bpl.n	8004eb0 <HAL_ADC_IRQHandler+0x88>
 8004e88:	060d      	lsls	r5, r1, #24
 8004e8a:	d511      	bpl.n	8004eb0 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e8e:	06d0      	lsls	r0, r2, #27
 8004e90:	d403      	bmi.n	8004e9a <HAL_ADC_IRQHandler+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004e92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e98:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004ea0:	d022      	beq.n	8004ee8 <HAL_ADC_IRQHandler+0xc0>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f956 	bl	8005154 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	f06f 020c 	mvn.w	r2, #12
 8004eae:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004eb0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004eb2:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8004eb4:	0650      	lsls	r0, r2, #25
 8004eb6:	d504      	bpl.n	8004ec2 <HAL_ADC_IRQHandler+0x9a>
 8004eb8:	07ca      	lsls	r2, r1, #31
 8004eba:	d502      	bpl.n	8004ec2 <HAL_ADC_IRQHandler+0x9a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	07d5      	lsls	r5, r2, #31
 8004ec0:	d456      	bmi.n	8004f70 <HAL_ADC_IRQHandler+0x148>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004ec2:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004ec4:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8004ec6:	0690      	lsls	r0, r2, #26
 8004ec8:	d50d      	bpl.n	8004ee6 <HAL_ADC_IRQHandler+0xbe>
 8004eca:	014a      	lsls	r2, r1, #5
 8004ecc:	d50b      	bpl.n	8004ee6 <HAL_ADC_IRQHandler+0xbe>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004ece:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ed0:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 8004ed4:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004ed6:	f042 0202 	orr.w	r2, r2, #2
 8004eda:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004edc:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8004ede:	f7ff ffa1 	bl	8004e24 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	601d      	str	r5, [r3, #0]
}
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004eea:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004eee:	d14b      	bne.n	8004f88 <HAL_ADC_IRQHandler+0x160>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004ef0:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004ef2:	0552      	lsls	r2, r2, #21
 8004ef4:	d4d5      	bmi.n	8004ea2 <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004ef6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004ef8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004efc:	d1d1      	bne.n	8004ea2 <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004efe:	69a2      	ldr	r2, [r4, #24]
 8004f00:	2a00      	cmp	r2, #0
 8004f02:	d1ce      	bne.n	8004ea2 <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f0a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f12:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f16:	05dd      	lsls	r5, r3, #23
 8004f18:	d4c3      	bmi.n	8004ea2 <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	6423      	str	r3, [r4, #64]	; 0x40
 8004f22:	e7be      	b.n	8004ea2 <HAL_ADC_IRQHandler+0x7a>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f24:	69a2      	ldr	r2, [r4, #24]
 8004f26:	2a00      	cmp	r2, #0
 8004f28:	d1a3      	bne.n	8004e72 <HAL_ADC_IRQHandler+0x4a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f2c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004f30:	d002      	beq.n	8004f38 <HAL_ADC_IRQHandler+0x110>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f32:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f34:	0550      	lsls	r0, r2, #21
 8004f36:	d49c      	bmi.n	8004e72 <HAL_ADC_IRQHandler+0x4a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	f022 0220 	bic.w	r2, r2, #32
 8004f3e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f46:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f4a:	04d9      	lsls	r1, r3, #19
 8004f4c:	d491      	bmi.n	8004e72 <HAL_ADC_IRQHandler+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	6423      	str	r3, [r4, #64]	; 0x40
 8004f56:	e78c      	b.n	8004e72 <HAL_ADC_IRQHandler+0x4a>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004f58:	f240 41a7 	movw	r1, #1191	; 0x4a7
 8004f5c:	480c      	ldr	r0, [pc, #48]	; (8004f90 <HAL_ADC_IRQHandler+0x168>)
 8004f5e:	f7fd fb77 	bl	8002650 <assert_failed>
 8004f62:	e774      	b.n	8004e4e <HAL_ADC_IRQHandler+0x26>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004f64:	f240 41a6 	movw	r1, #1190	; 0x4a6
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <HAL_ADC_IRQHandler+0x168>)
 8004f6a:	f7fd fb71 	bl	8002650 <assert_failed>
 8004f6e:	e76a      	b.n	8004e46 <HAL_ADC_IRQHandler+0x1e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f72:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f78:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f7a:	f7ff ff51 	bl	8004e20 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	f06f 0201 	mvn.w	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e79c      	b.n	8004ec2 <HAL_ADC_IRQHandler+0x9a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004f88:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004f8a:	0551      	lsls	r1, r2, #21
 8004f8c:	d489      	bmi.n	8004ea2 <HAL_ADC_IRQHandler+0x7a>
 8004f8e:	e7af      	b.n	8004ef0 <HAL_ADC_IRQHandler+0xc8>
 8004f90:	080230cc 	.word	0x080230cc

08004f94 <HAL_ADC_ConfigChannel>:
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004f94:	680b      	ldr	r3, [r1, #0]
  __IO uint32_t counter = 0;
 8004f96:	2200      	movs	r2, #0
{
 8004f98:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004f9a:	2b12      	cmp	r3, #18
{
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	460d      	mov	r5, r1
 8004fa0:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8004fa2:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004fa4:	d903      	bls.n	8004fae <HAL_ADC_ConfigChannel+0x1a>
 8004fa6:	4a66      	ldr	r2, [pc, #408]	; (8005140 <HAL_ADC_ConfigChannel+0x1ac>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	f040 808f 	bne.w	80050cc <HAL_ADC_ConfigChannel+0x138>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004fae:	686b      	ldr	r3, [r5, #4]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	2b0f      	cmp	r3, #15
 8004fb4:	f200 8094 	bhi.w	80050e0 <HAL_ADC_ConfigChannel+0x14c>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004fb8:	68ab      	ldr	r3, [r5, #8]
 8004fba:	2b07      	cmp	r3, #7
 8004fbc:	f200 8099 	bhi.w	80050f2 <HAL_ADC_ConfigChannel+0x15e>
  __HAL_LOCK(hadc);
 8004fc0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	f000 809e 	beq.w	8005106 <HAL_ADC_ConfigChannel+0x172>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004fca:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8004fcc:	2201      	movs	r2, #1
 8004fce:	6823      	ldr	r3, [r4, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004fd0:	2e09      	cmp	r6, #9
  __HAL_LOCK(hadc);
 8004fd2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8004fd6:	fa1f fc86 	uxth.w	ip, r6
 8004fda:	68aa      	ldr	r2, [r5, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004fdc:	d825      	bhi.n	800502a <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fde:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8004fe2:	2007      	movs	r0, #7
 8004fe4:	6919      	ldr	r1, [r3, #16]
 8004fe6:	40b8      	lsls	r0, r7
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004fe8:	fa02 f707 	lsl.w	r7, r2, r7
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fec:	ea21 0100 	bic.w	r1, r1, r0
 8004ff0:	6119      	str	r1, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	4317      	orrs	r7, r2
 8004ff6:	611f      	str	r7, [r3, #16]
  if (sConfig->Rank < 7)
 8004ff8:	6869      	ldr	r1, [r5, #4]
 8004ffa:	2906      	cmp	r1, #6
 8004ffc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005000:	d82a      	bhi.n	8005058 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005002:	3a05      	subs	r2, #5
 8005004:	201f      	movs	r0, #31
 8005006:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005008:	4090      	lsls	r0, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800500a:	fa0c f202 	lsl.w	r2, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800500e:	ea21 0100 	bic.w	r1, r1, r0
 8005012:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005014:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005016:	430a      	orrs	r2, r1
 8005018:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800501a:	4a4a      	ldr	r2, [pc, #296]	; (8005144 <HAL_ADC_ConfigChannel+0x1b0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d02d      	beq.n	800507c <HAL_ADC_ConfigChannel+0xe8>
  __HAL_UNLOCK(hadc);
 8005020:	2000      	movs	r0, #0
 8005022:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005026:	b003      	add	sp, #12
 8005028:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800502a:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
 800502e:	2007      	movs	r0, #7
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	3f1e      	subs	r7, #30
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005034:	f8df e108 	ldr.w	lr, [pc, #264]	; 8005140 <HAL_ADC_ConfigChannel+0x1ac>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005038:	40b8      	lsls	r0, r7
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800503a:	4576      	cmp	r6, lr
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800503c:	ea21 0100 	bic.w	r1, r1, r0
 8005040:	60d9      	str	r1, [r3, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005042:	d078      	beq.n	8005136 <HAL_ADC_ConfigChannel+0x1a2>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005044:	fa02 f707 	lsl.w	r7, r2, r7
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	4317      	orrs	r7, r2
 800504c:	60df      	str	r7, [r3, #12]
  if (sConfig->Rank < 7)
 800504e:	6869      	ldr	r1, [r5, #4]
 8005050:	2906      	cmp	r1, #6
 8005052:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005056:	d9d4      	bls.n	8005002 <HAL_ADC_ConfigChannel+0x6e>
  else if (sConfig->Rank < 13)
 8005058:	290c      	cmp	r1, #12
 800505a:	d857      	bhi.n	800510c <HAL_ADC_ConfigChannel+0x178>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800505c:	f1a2 0023 	sub.w	r0, r2, #35	; 0x23
 8005060:	251f      	movs	r5, #31
 8005062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005064:	4085      	lsls	r5, r0
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005066:	fa0c f200 	lsl.w	r2, ip, r0
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800506a:	ea21 0105 	bic.w	r1, r1, r5
 800506e:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005070:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005072:	4310      	orrs	r0, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005074:	4a33      	ldr	r2, [pc, #204]	; (8005144 <HAL_ADC_ConfigChannel+0x1b0>)
 8005076:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005078:	6318      	str	r0, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800507a:	d1d1      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x8c>
 800507c:	2e12      	cmp	r6, #18
 800507e:	d053      	beq.n	8005128 <HAL_ADC_ConfigChannel+0x194>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005080:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <HAL_ADC_ConfigChannel+0x1ac>)
 8005082:	429e      	cmp	r6, r3
 8005084:	d001      	beq.n	800508a <HAL_ADC_ConfigChannel+0xf6>
 8005086:	2e11      	cmp	r6, #17
 8005088:	d1ca      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x8c>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800508a:	4a2f      	ldr	r2, [pc, #188]	; (8005148 <HAL_ADC_ConfigChannel+0x1b4>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800508c:	492c      	ldr	r1, [pc, #176]	; (8005140 <HAL_ADC_ConfigChannel+0x1ac>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 800508e:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005090:	428e      	cmp	r6, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005092:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005096:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005098:	d1c2      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x8c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800509a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800509e:	4b2b      	ldr	r3, [pc, #172]	; (800514c <HAL_ADC_ConfigChannel+0x1b8>)
 80050a0:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f202 3283 	addw	r2, r2, #899	; 0x383
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	0c9b      	lsrs	r3, r3, #18
 80050b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80050b8:	9b01      	ldr	r3, [sp, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0b0      	beq.n	8005020 <HAL_ADC_ConfigChannel+0x8c>
        counter--;
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80050c4:	9b01      	ldr	r3, [sp, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f9      	bne.n	80050be <HAL_ADC_ConfigChannel+0x12a>
 80050ca:	e7a9      	b.n	8005020 <HAL_ADC_ConfigChannel+0x8c>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80050cc:	f240 615c 	movw	r1, #1628	; 0x65c
 80050d0:	481f      	ldr	r0, [pc, #124]	; (8005150 <HAL_ADC_ConfigChannel+0x1bc>)
 80050d2:	f7fd fabd 	bl	8002650 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80050d6:	686b      	ldr	r3, [r5, #4]
 80050d8:	3b01      	subs	r3, #1
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	f67f af6c 	bls.w	8004fb8 <HAL_ADC_ConfigChannel+0x24>
 80050e0:	f240 615d 	movw	r1, #1629	; 0x65d
 80050e4:	481a      	ldr	r0, [pc, #104]	; (8005150 <HAL_ADC_ConfigChannel+0x1bc>)
 80050e6:	f7fd fab3 	bl	8002650 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80050ea:	68ab      	ldr	r3, [r5, #8]
 80050ec:	2b07      	cmp	r3, #7
 80050ee:	f67f af67 	bls.w	8004fc0 <HAL_ADC_ConfigChannel+0x2c>
 80050f2:	f240 615e 	movw	r1, #1630	; 0x65e
 80050f6:	4816      	ldr	r0, [pc, #88]	; (8005150 <HAL_ADC_ConfigChannel+0x1bc>)
 80050f8:	f7fd faaa 	bl	8002650 <assert_failed>
  __HAL_LOCK(hadc);
 80050fc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005100:	2b01      	cmp	r3, #1
 8005102:	f47f af62 	bne.w	8004fca <HAL_ADC_ConfigChannel+0x36>
 8005106:	2002      	movs	r0, #2
}
 8005108:	b003      	add	sp, #12
 800510a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800510c:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8005110:	251f      	movs	r5, #31
 8005112:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005114:	408d      	lsls	r5, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005116:	fa0c f201 	lsl.w	r2, ip, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800511a:	ea20 0005 	bic.w	r0, r0, r5
 800511e:	62d8      	str	r0, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005122:	430a      	orrs	r2, r1
 8005124:	62da      	str	r2, [r3, #44]	; 0x2c
 8005126:	e778      	b.n	800501a <HAL_ADC_ConfigChannel+0x86>
    ADC->CCR |= ADC_CCR_VBATE;
 8005128:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800512c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005130:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8005134:	e774      	b.n	8005020 <HAL_ADC_ConfigChannel+0x8c>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005136:	68df      	ldr	r7, [r3, #12]
 8005138:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 800513c:	60df      	str	r7, [r3, #12]
 800513e:	e75b      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x64>
 8005140:	10000012 	.word	0x10000012
 8005144:	40012000 	.word	0x40012000
 8005148:	40012300 	.word	0x40012300
 800514c:	200002b8 	.word	0x200002b8
 8005150:	080230cc 	.word	0x080230cc

08005154 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop

08005158 <HAL_ADCEx_MultiModeConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005158:	680a      	ldr	r2, [r1, #0]
 800515a:	2a19      	cmp	r2, #25
{
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	460c      	mov	r4, r1
 8005160:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005162:	d93e      	bls.n	80051e2 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8005164:	f240 319f 	movw	r1, #927	; 0x39f
 8005168:	4829      	ldr	r0, [pc, #164]	; (8005210 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 800516a:	f7fd fa71 	bl	8002650 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 800516e:	6863      	ldr	r3, [r4, #4]
 8005170:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8005174:	d13d      	bne.n	80051f2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005180:	bf18      	it	ne
 8005182:	2b00      	cmpne	r3, #0
 8005184:	bf14      	ite	ne
 8005186:	2201      	movne	r2, #1
 8005188:	2200      	moveq	r2, #0
 800518a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518e:	bf0c      	ite	eq
 8005190:	2200      	moveq	r2, #0
 8005192:	f002 0201 	andne.w	r2, r2, #1
 8005196:	b112      	cbz	r2, 800519e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8005198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800519c:	d131      	bne.n	8005202 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800519e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d02b      	beq.n	80051fe <HAL_ADCEx_MultiModeConfigChannel+0xa6>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 80051a6:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051a8:	2100      	movs	r1, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 80051aa:	685a      	ldr	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80051ac:	4608      	mov	r0, r1
  ADC->CCR &= ~(ADC_CCR_MULTI);
 80051ae:	f022 021f 	bic.w	r2, r2, #31
 80051b2:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	6826      	ldr	r6, [r4, #0]
 80051b8:	4332      	orrs	r2, r6
 80051ba:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80051c2:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	6866      	ldr	r6, [r4, #4]
 80051c8:	4332      	orrs	r2, r6
 80051ca:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80051d2:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 80051d4:	68a4      	ldr	r4, [r4, #8]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	4322      	orrs	r2, r4
 80051da:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 80051dc:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 80051e0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80051e4:	40d3      	lsrs	r3, r2
 80051e6:	07db      	lsls	r3, r3, #31
 80051e8:	d5bc      	bpl.n	8005164 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 80051f0:	d0c1      	beq.n	8005176 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80051f2:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80051f6:	4806      	ldr	r0, [pc, #24]	; (8005210 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80051f8:	f7fd fa2a 	bl	8002650 <assert_failed>
 80051fc:	e7bb      	b.n	8005176 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 80051fe:	2002      	movs	r0, #2
}
 8005200:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005202:	f240 31a1 	movw	r1, #929	; 0x3a1
 8005206:	4802      	ldr	r0, [pc, #8]	; (8005210 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005208:	f7fd fa22 	bl	8002650 <assert_failed>
 800520c:	e7c7      	b.n	800519e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800520e:	bf00      	nop
 8005210:	08023104 	.word	0x08023104
 8005214:	40012300 	.word	0x40012300
 8005218:	02e602e7 	.word	0x02e602e7

0800521c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800521c:	1ec3      	subs	r3, r0, #3
 800521e:	2b04      	cmp	r3, #4
{
 8005220:	b510      	push	{r4, lr}
 8005222:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005224:	d903      	bls.n	800522e <HAL_NVIC_SetPriorityGrouping+0x12>
 8005226:	2192      	movs	r1, #146	; 0x92
 8005228:	4807      	ldr	r0, [pc, #28]	; (8005248 <HAL_NVIC_SetPriorityGrouping+0x2c>)
 800522a:	f7fd fa11 	bl	8002650 <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800522e:	4907      	ldr	r1, [pc, #28]	; (800524c <HAL_NVIC_SetPriorityGrouping+0x30>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005230:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005234:	0224      	lsls	r4, r4, #8
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005238:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800523a:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800523e:	4002      	ands	r2, r0
 8005240:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005242:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8005244:	60cc      	str	r4, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005246:	bd10      	pop	{r4, pc}
 8005248:	08023140 	.word	0x08023140
 800524c:	e000ed00 	.word	0xe000ed00
 8005250:	05fa0000 	.word	0x05fa0000

08005254 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005254:	2a0f      	cmp	r2, #15
{ 
 8005256:	b570      	push	{r4, r5, r6, lr}
 8005258:	4616      	mov	r6, r2
 800525a:	4605      	mov	r5, r0
 800525c:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800525e:	d832      	bhi.n	80052c6 <HAL_NVIC_SetPriority+0x72>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005260:	2c0f      	cmp	r4, #15
 8005262:	d82b      	bhi.n	80052bc <HAL_NVIC_SetPriority+0x68>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_NVIC_SetPriority+0x7c>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800526c:	f1c3 0107 	rsb	r1, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005270:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005272:	2904      	cmp	r1, #4
 8005274:	bf28      	it	cs
 8005276:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005278:	2a06      	cmp	r2, #6
 800527a:	d917      	bls.n	80052ac <HAL_NVIC_SetPriority+0x58>
 800527c:	3b03      	subs	r3, #3
 800527e:	f04f 32ff 	mov.w	r2, #4294967295
 8005282:	409a      	lsls	r2, r3
 8005284:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005288:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800528c:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800528e:	fa02 f201 	lsl.w	r2, r2, r1
 8005292:	ea24 0202 	bic.w	r2, r4, r2
 8005296:	fa02 f203 	lsl.w	r2, r2, r3
 800529a:	ea42 0206 	orr.w	r2, r2, r6
 800529e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80052a2:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80052a4:	db05      	blt.n	80052b2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_NVIC_SetPriority+0x80>)
 80052a8:	555a      	strb	r2, [r3, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052ac:	2600      	movs	r6, #0
 80052ae:	4633      	mov	r3, r6
 80052b0:	e7ea      	b.n	8005288 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b2:	f005 050f 	and.w	r5, r5, #15
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_NVIC_SetPriority+0x84>)
 80052b8:	555a      	strb	r2, [r3, r5]
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80052bc:	21ab      	movs	r1, #171	; 0xab
 80052be:	4807      	ldr	r0, [pc, #28]	; (80052dc <HAL_NVIC_SetPriority+0x88>)
 80052c0:	f7fd f9c6 	bl	8002650 <assert_failed>
 80052c4:	e7ce      	b.n	8005264 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80052c6:	21aa      	movs	r1, #170	; 0xaa
 80052c8:	4804      	ldr	r0, [pc, #16]	; (80052dc <HAL_NVIC_SetPriority+0x88>)
 80052ca:	f7fd f9c1 	bl	8002650 <assert_failed>
 80052ce:	e7c7      	b.n	8005260 <HAL_NVIC_SetPriority+0xc>
 80052d0:	e000ed00 	.word	0xe000ed00
 80052d4:	e000e400 	.word	0xe000e400
 80052d8:	e000ed14 	.word	0xe000ed14
 80052dc:	08023140 	.word	0x08023140

080052e0 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80052e0:	2800      	cmp	r0, #0
 80052e2:	db08      	blt.n	80052f6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052e4:	f000 011f 	and.w	r1, r0, #31
 80052e8:	2301      	movs	r3, #1
 80052ea:	0940      	lsrs	r0, r0, #5
 80052ec:	4a04      	ldr	r2, [pc, #16]	; (8005300 <HAL_NVIC_EnableIRQ+0x20>)
 80052ee:	408b      	lsls	r3, r1
 80052f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80052f4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80052f6:	21be      	movs	r1, #190	; 0xbe
 80052f8:	4802      	ldr	r0, [pc, #8]	; (8005304 <HAL_NVIC_EnableIRQ+0x24>)
 80052fa:	f7fd b9a9 	b.w	8002650 <assert_failed>
 80052fe:	bf00      	nop
 8005300:	e000e100 	.word	0xe000e100
 8005304:	08023140 	.word	0x08023140

08005308 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005308:	2800      	cmp	r0, #0
 800530a:	d077      	beq.n	80053fc <HAL_CRC_Init+0xf4>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800530c:	4b3c      	ldr	r3, [pc, #240]	; (8005400 <HAL_CRC_Init+0xf8>)
 800530e:	6802      	ldr	r2, [r0, #0]
 8005310:	429a      	cmp	r2, r3
{
 8005312:	b510      	push	{r4, lr}
 8005314:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8005316:	d003      	beq.n	8005320 <HAL_CRC_Init+0x18>
 8005318:	2170      	movs	r1, #112	; 0x70
 800531a:	483a      	ldr	r0, [pc, #232]	; (8005404 <HAL_CRC_Init+0xfc>)
 800531c:	f7fd f998 	bl	8002650 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005320:	7f63      	ldrb	r3, [r4, #29]
 8005322:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005326:	2b00      	cmp	r3, #0
 8005328:	d045      	beq.n	80053b6 <HAL_CRC_Init+0xae>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800532a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800532c:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800532e:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005330:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005332:	d830      	bhi.n	8005396 <HAL_CRC_Init+0x8e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005334:	2b00      	cmp	r3, #0
 8005336:	d135      	bne.n	80053a4 <HAL_CRC_Init+0x9c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	4a33      	ldr	r2, [pc, #204]	; (8005408 <HAL_CRC_Init+0x100>)
 800533c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	f022 0218 	bic.w	r2, r2, #24
 8005344:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8005346:	7962      	ldrb	r2, [r4, #5]
 8005348:	2a01      	cmp	r2, #1
 800534a:	d904      	bls.n	8005356 <HAL_CRC_Init+0x4e>
 800534c:	2190      	movs	r1, #144	; 0x90
 800534e:	482d      	ldr	r0, [pc, #180]	; (8005404 <HAL_CRC_Init+0xfc>)
 8005350:	f7fd f97e 	bl	8002650 <assert_failed>
 8005354:	7962      	ldrb	r2, [r4, #5]
 8005356:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005358:	2a00      	cmp	r2, #0
 800535a:	d136      	bne.n	80053ca <HAL_CRC_Init+0xc2>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800535c:	f04f 32ff 	mov.w	r2, #4294967295
 8005360:	611a      	str	r2, [r3, #16]
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8005362:	6962      	ldr	r2, [r4, #20]
 8005364:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8005368:	d135      	bne.n	80053d6 <HAL_CRC_Init+0xce>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800536a:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800536c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800536e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005372:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8005374:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005378:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800537a:	d138      	bne.n	80053ee <HAL_CRC_Init+0xe6>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800537c:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800537e:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005384:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005386:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005388:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800538a:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800538c:	d82a      	bhi.n	80053e4 <HAL_CRC_Init+0xdc>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800538e:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8005390:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8005392:	7763      	strb	r3, [r4, #29]
}
 8005394:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005396:	217e      	movs	r1, #126	; 0x7e
 8005398:	481a      	ldr	r0, [pc, #104]	; (8005404 <HAL_CRC_Init+0xfc>)
 800539a:	f7fd f959 	bl	8002650 <assert_failed>
 800539e:	7923      	ldrb	r3, [r4, #4]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0c9      	beq.n	8005338 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80053a4:	68e2      	ldr	r2, [r4, #12]
 80053a6:	4620      	mov	r0, r4
 80053a8:	68a1      	ldr	r1, [r4, #8]
 80053aa:	f000 f82f 	bl	800540c <HAL_CRCEx_Polynomial_Set>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d0c9      	beq.n	8005346 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 80053b2:	2001      	movs	r0, #1
}
 80053b4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80053b6:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7fd fff5 	bl	80033a8 <HAL_CRC_MspInit>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80053be:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80053c0:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80053c2:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 80053c4:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80053c6:	d9b5      	bls.n	8005334 <HAL_CRC_Init+0x2c>
 80053c8:	e7e5      	b.n	8005396 <HAL_CRC_Init+0x8e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80053ca:	6922      	ldr	r2, [r4, #16]
 80053cc:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80053ce:	6962      	ldr	r2, [r4, #20]
 80053d0:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 80053d4:	d0c9      	beq.n	800536a <HAL_CRC_Init+0x62>
 80053d6:	219c      	movs	r1, #156	; 0x9c
 80053d8:	480a      	ldr	r0, [pc, #40]	; (8005404 <HAL_CRC_Init+0xfc>)
 80053da:	f7fd f939 	bl	8002650 <assert_failed>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	6962      	ldr	r2, [r4, #20]
 80053e2:	e7c2      	b.n	800536a <HAL_CRC_Init+0x62>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80053e4:	21a5      	movs	r1, #165	; 0xa5
 80053e6:	4807      	ldr	r0, [pc, #28]	; (8005404 <HAL_CRC_Init+0xfc>)
 80053e8:	f7fd f932 	bl	8002650 <assert_failed>
 80053ec:	e7cf      	b.n	800538e <HAL_CRC_Init+0x86>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80053ee:	4805      	ldr	r0, [pc, #20]	; (8005404 <HAL_CRC_Init+0xfc>)
 80053f0:	21a0      	movs	r1, #160	; 0xa0
 80053f2:	f7fd f92d 	bl	8002650 <assert_failed>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	69a0      	ldr	r0, [r4, #24]
 80053fa:	e7bf      	b.n	800537c <HAL_CRC_Init+0x74>
    return HAL_ERROR;
 80053fc:	2001      	movs	r0, #1
}
 80053fe:	4770      	bx	lr
 8005400:	40023000 	.word	0x40023000
 8005404:	0802317c 	.word	0x0802317c
 8005408:	04c11db7 	.word	0x04c11db7

0800540c <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 800540c:	f032 0318 	bics.w	r3, r2, #24
{
 8005410:	b530      	push	{r4, r5, lr}
 8005412:	4605      	mov	r5, r0
 8005414:	b083      	sub	sp, #12
 8005416:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8005418:	d005      	beq.n	8005426 <HAL_CRCEx_Polynomial_Set+0x1a>
 800541a:	215f      	movs	r1, #95	; 0x5f
 800541c:	481a      	ldr	r0, [pc, #104]	; (8005488 <HAL_CRCEx_Polynomial_Set+0x7c>)
 800541e:	9201      	str	r2, [sp, #4]
 8005420:	f7fd f916 	bl	8002650 <assert_failed>
 8005424:	9a01      	ldr	r2, [sp, #4]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005426:	231e      	movs	r3, #30
 8005428:	e002      	b.n	8005430 <HAL_CRCEx_Polynomial_Set+0x24>
 800542a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800542e:	d320      	bcc.n	8005472 <HAL_CRCEx_Polynomial_Set+0x66>
 8005430:	fa24 f103 	lsr.w	r1, r4, r3
 8005434:	07c9      	lsls	r1, r1, #31
 8005436:	d5f8      	bpl.n	800542a <HAL_CRCEx_Polynomial_Set+0x1e>
  {
  }

  switch (PolyLength)
 8005438:	2a18      	cmp	r2, #24
 800543a:	d81c      	bhi.n	8005476 <HAL_CRCEx_Polynomial_Set+0x6a>
 800543c:	e8df f002 	tbb	[pc, r2]
 8005440:	1b1b1b0f 	.word	0x1b1b1b0f
 8005444:	1b1b1b1b 	.word	0x1b1b1b1b
 8005448:	1b1b1b21 	.word	0x1b1b1b21
 800544c:	1b1b1b1b 	.word	0x1b1b1b1b
 8005450:	1b1b1b0d 	.word	0x1b1b1b0d
 8005454:	1b1b1b1b 	.word	0x1b1b1b1b
 8005458:	1e          	.byte	0x1e
 8005459:	00          	.byte	0x00
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800545a:	2b07      	cmp	r3, #7
 800545c:	d80b      	bhi.n	8005476 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800545e:	6829      	ldr	r1, [r5, #0]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005460:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005462:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005464:	688b      	ldr	r3, [r1, #8]
 8005466:	f023 0318 	bic.w	r3, r3, #24
 800546a:	431a      	orrs	r2, r3
 800546c:	608a      	str	r2, [r1, #8]
  }
  /* Return function status */
  return status;
}
 800546e:	b003      	add	sp, #12
 8005470:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 8005472:	2a00      	cmp	r2, #0
 8005474:	d0f3      	beq.n	800545e <HAL_CRCEx_Polynomial_Set+0x52>
      status =  HAL_ERROR;
 8005476:	2001      	movs	r0, #1
}
 8005478:	b003      	add	sp, #12
 800547a:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800547c:	2b06      	cmp	r3, #6
 800547e:	d9ee      	bls.n	800545e <HAL_CRCEx_Polynomial_Set+0x52>
 8005480:	e7f9      	b.n	8005476 <HAL_CRCEx_Polynomial_Set+0x6a>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005482:	2b0f      	cmp	r3, #15
 8005484:	d9eb      	bls.n	800545e <HAL_CRCEx_Polynomial_Set+0x52>
 8005486:	e7f6      	b.n	8005476 <HAL_CRCEx_Polynomial_Set+0x6a>
 8005488:	080231b4 	.word	0x080231b4

0800548c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 800548c:	b1d8      	cbz	r0, 80054c6 <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800548e:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <HAL_DAC_Init+0x40>)
 8005490:	6802      	ldr	r2, [r0, #0]
 8005492:	429a      	cmp	r2, r3
{ 
 8005494:	b510      	push	{r4, lr}
 8005496:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8005498:	d004      	beq.n	80054a4 <HAL_DAC_Init+0x18>
 800549a:	f240 1113 	movw	r1, #275	; 0x113
 800549e:	480c      	ldr	r0, [pc, #48]	; (80054d0 <HAL_DAC_Init+0x44>)
 80054a0:	f7fd f8d6 	bl	8002650 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80054a4:	7923      	ldrb	r3, [r4, #4]
 80054a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054aa:	b13b      	cbz	r3, 80054bc <HAL_DAC_Init+0x30>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80054ac:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80054ae:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80054b0:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80054b2:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80054b4:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80054b6:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80054b8:	7122      	strb	r2, [r4, #4]
}
 80054ba:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED; 
 80054bc:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 80054be:	4620      	mov	r0, r4
 80054c0:	f7fd ff88 	bl	80033d4 <HAL_DAC_MspInit>
 80054c4:	e7f2      	b.n	80054ac <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 80054c6:	2001      	movs	r0, #1
}
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40007400 	.word	0x40007400
 80054d0:	080231f0 	.word	0x080231f0

080054d4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80054d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d8:	4699      	mov	r9, r3
  uint32_t tmpreg = 0;
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80054da:	f031 0310 	bics.w	r3, r1, #16
{
 80054de:	460f      	mov	r7, r1
 80054e0:	4604      	mov	r4, r0
 80054e2:	4690      	mov	r8, r2
 80054e4:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DAC_CHANNEL(Channel));
 80054e6:	d156      	bne.n	8005596 <HAL_DAC_Start_DMA+0xc2>
  assert_param(IS_DAC_ALIGN(Alignment));
 80054e8:	f036 0304 	bics.w	r3, r6, #4
 80054ec:	d001      	beq.n	80054f2 <HAL_DAC_Start_DMA+0x1e>
 80054ee:	2e08      	cmp	r6, #8
 80054f0:	d146      	bne.n	8005580 <HAL_DAC_Start_DMA+0xac>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80054f2:	7962      	ldrb	r2, [r4, #5]
 80054f4:	2a01      	cmp	r2, #1
 80054f6:	d04b      	beq.n	8005590 <HAL_DAC_Start_DMA+0xbc>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054f8:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 80054fa:	2201      	movs	r2, #1
 80054fc:	6825      	ldr	r5, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80054fe:	7123      	strb	r3, [r4, #4]
  __HAL_LOCK(hdac);
 8005500:	7162      	strb	r2, [r4, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005502:	682b      	ldr	r3, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 8005504:	b9cf      	cbnz	r7, 800553a <HAL_DAC_Start_DMA+0x66>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005506:	68a0      	ldr	r0, [r4, #8]
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800550c:	4a2e      	ldr	r2, [pc, #184]	; (80055c8 <HAL_DAC_Start_DMA+0xf4>)
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800550e:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005510:	492e      	ldr	r1, [pc, #184]	; (80055cc <HAL_DAC_Start_DMA+0xf8>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005512:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005514:	4a2e      	ldr	r2, [pc, #184]	; (80055d0 <HAL_DAC_Start_DMA+0xfc>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005516:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005518:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800551a:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 800551c:	d050      	beq.n	80055c0 <HAL_DAC_Start_DMA+0xec>
 800551e:	2e08      	cmp	r6, #8
 8005520:	d04b      	beq.n	80055ba <HAL_DAC_Start_DMA+0xe6>
 8005522:	2e00      	cmp	r6, #0
 8005524:	d03d      	beq.n	80055a2 <HAL_DAC_Start_DMA+0xce>
        break;
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8005526:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005528:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800552a:	464b      	mov	r3, r9
 800552c:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800552e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8005532:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005534:	f000 fb26 	bl	8005b84 <HAL_DMA_Start_IT>
 8005538:	e017      	b.n	800556a <HAL_DAC_Start_DMA+0x96>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800553a:	68e0      	ldr	r0, [r4, #12]
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800553c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005540:	4a24      	ldr	r2, [pc, #144]	; (80055d4 <HAL_DAC_Start_DMA+0x100>)
    switch(Alignment)
 8005542:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005544:	4924      	ldr	r1, [pc, #144]	; (80055d8 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005546:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005548:	4a24      	ldr	r2, [pc, #144]	; (80055dc <HAL_DAC_Start_DMA+0x108>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800554a:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800554c:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800554e:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 8005550:	d030      	beq.n	80055b4 <HAL_DAC_Start_DMA+0xe0>
 8005552:	2e08      	cmp	r6, #8
 8005554:	d02b      	beq.n	80055ae <HAL_DAC_Start_DMA+0xda>
 8005556:	b33e      	cbz	r6, 80055a8 <HAL_DAC_Start_DMA+0xd4>
  if(Channel == DAC_CHANNEL_1)
 8005558:	2200      	movs	r2, #0
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800555a:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800555c:	464b      	mov	r3, r9
 800555e:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005560:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005564:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005566:	f000 fb0d 	bl	8005b84 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	2101      	movs	r1, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800556e:	2300      	movs	r3, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8005570:	6815      	ldr	r5, [r2, #0]
 8005572:	40b9      	lsls	r1, r7
  
  /* Return function status */
  return HAL_OK;
 8005574:	4618      	mov	r0, r3
  __HAL_DAC_ENABLE(hdac, Channel);
 8005576:	4329      	orrs	r1, r5
 8005578:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hdac);
 800557a:	7163      	strb	r3, [r4, #5]
}
 800557c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8005580:	f240 210e 	movw	r1, #526	; 0x20e
 8005584:	4816      	ldr	r0, [pc, #88]	; (80055e0 <HAL_DAC_Start_DMA+0x10c>)
 8005586:	f7fd f863 	bl	8002650 <assert_failed>
  __HAL_LOCK(hdac);
 800558a:	7962      	ldrb	r2, [r4, #5]
 800558c:	2a01      	cmp	r2, #1
 800558e:	d1b3      	bne.n	80054f8 <HAL_DAC_Start_DMA+0x24>
 8005590:	2002      	movs	r0, #2
}
 8005592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8005596:	f240 210d 	movw	r1, #525	; 0x20d
 800559a:	4811      	ldr	r0, [pc, #68]	; (80055e0 <HAL_DAC_Start_DMA+0x10c>)
 800559c:	f7fd f858 	bl	8002650 <assert_failed>
 80055a0:	e7a2      	b.n	80054e8 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80055a2:	f105 0208 	add.w	r2, r5, #8
        break;
 80055a6:	e7bf      	b.n	8005528 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80055a8:	f105 0214 	add.w	r2, r5, #20
        break;
 80055ac:	e7d5      	b.n	800555a <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80055ae:	f105 021c 	add.w	r2, r5, #28
        break;
 80055b2:	e7d2      	b.n	800555a <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80055b4:	f105 0218 	add.w	r2, r5, #24
        break;
 80055b8:	e7cf      	b.n	800555a <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80055ba:	f105 0210 	add.w	r2, r5, #16
        break;
 80055be:	e7b3      	b.n	8005528 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80055c0:	f105 020c 	add.w	r2, r5, #12
        break;
 80055c4:	e7b0      	b.n	8005528 <HAL_DAC_Start_DMA+0x54>
 80055c6:	bf00      	nop
 80055c8:	08005659 	.word	0x08005659
 80055cc:	0800566d 	.word	0x0800566d
 80055d0:	0800567d 	.word	0x0800567d
 80055d4:	080057c5 	.word	0x080057c5
 80055d8:	080057d5 	.word	0x080057d5
 80055dc:	080057e1 	.word	0x080057e1
 80055e0:	080231f0 	.word	0x080231f0

080055e4 <HAL_DAC_Stop_DMA>:
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80055e4:	f031 0310 	bics.w	r3, r1, #16
{
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	460c      	mov	r4, r1
 80055ec:	4605      	mov	r5, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 80055ee:	d116      	bne.n	800561e <HAL_DAC_Stop_DMA+0x3a>
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80055f0:	6803      	ldr	r3, [r0, #0]
 80055f2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80055f6:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	408e      	lsls	r6, r1
  __HAL_DAC_DISABLE(hdac, Channel);
 80055fc:	fa02 f101 	lsl.w	r1, r2, r1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005600:	ea20 0006 	bic.w	r0, r0, r6
 8005604:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	ea22 0201 	bic.w	r2, r2, r1
 800560c:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800560e:	b9cc      	cbnz	r4, 8005644 <HAL_DAC_Stop_DMA+0x60>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8005610:	68a8      	ldr	r0, [r5, #8]
 8005612:	f000 fb11 	bl	8005c38 <HAL_DMA_Abort>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8005616:	b9d0      	cbnz	r0, 800564e <HAL_DAC_Stop_DMA+0x6a>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005618:	2301      	movs	r3, #1
 800561a:	712b      	strb	r3, [r5, #4]
  }

  /* Return function status */
  return status;
}
 800561c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800561e:	f44f 7121 	mov.w	r1, #644	; 0x284
 8005622:	480c      	ldr	r0, [pc, #48]	; (8005654 <HAL_DAC_Stop_DMA+0x70>)
 8005624:	f7fd f814 	bl	8002650 <assert_failed>
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800562e:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	40a0      	lsls	r0, r4
  __HAL_DAC_DISABLE(hdac, Channel);
 8005634:	40a2      	lsls	r2, r4
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005636:	ea21 0100 	bic.w	r1, r1, r0
 800563a:	6019      	str	r1, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800563c:	681c      	ldr	r4, [r3, #0]
 800563e:	ea24 0402 	bic.w	r4, r4, r2
 8005642:	601c      	str	r4, [r3, #0]
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8005644:	68e8      	ldr	r0, [r5, #12]
 8005646:	f000 faf7 	bl	8005c38 <HAL_DMA_Abort>
  if(status != HAL_OK)
 800564a:	2800      	cmp	r0, #0
 800564c:	d0e4      	beq.n	8005618 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 800564e:	2304      	movs	r3, #4
 8005650:	712b      	strb	r3, [r5, #4]
}
 8005652:	bd70      	pop	{r4, r5, r6, pc}
 8005654:	080231f0 	.word	0x080231f0

08005658 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005658:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800565a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800565c:	4620      	mov	r0, r4
 800565e:	f7fb ffa9 	bl	80015b4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005662:	2301      	movs	r3, #1
 8005664:	7123      	strb	r3, [r4, #4]
}
 8005666:	bd10      	pop	{r4, pc}

08005668 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop

0800566c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800566c:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800566e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005670:	f7ff fffa 	bl	8005668 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005674:	bd08      	pop	{r3, pc}
 8005676:	bf00      	nop

08005678 <HAL_DAC_ErrorCallbackCh1>:
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop

0800567c <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800567c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800567e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005680:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8005682:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005684:	f043 0304 	orr.w	r3, r3, #4
 8005688:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800568a:	f7ff fff5 	bl	8005678 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800568e:	2301      	movs	r3, #1
 8005690:	7123      	strb	r3, [r4, #4]
}
 8005692:	bd10      	pop	{r4, pc}

08005694 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop

08005698 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005698:	6803      	ldr	r3, [r0, #0]
 800569a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800569c:	0491      	lsls	r1, r2, #18
{
 800569e:	b510      	push	{r4, lr}
 80056a0:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80056a2:	d415      	bmi.n	80056d0 <HAL_DAC_IRQHandler+0x38>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80056a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a6:	0092      	lsls	r2, r2, #2
 80056a8:	d400      	bmi.n	80056ac <HAL_DAC_IRQHandler+0x14>
}
 80056aa:	bd10      	pop	{r4, pc}
    hdac->State = HAL_DAC_STATE_ERROR;
 80056ac:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80056ae:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80056b2:	4620      	mov	r0, r4
    hdac->State = HAL_DAC_STATE_ERROR;
 80056b4:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80056b6:	6922      	ldr	r2, [r4, #16]
 80056b8:	f042 0202 	orr.w	r2, r2, #2
 80056bc:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80056be:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 80056c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80056ca:	601a      	str	r2, [r3, #0]
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80056cc:	f000 b878 	b.w	80057c0 <HAL_DACEx_DMAUnderrunCallbackCh2>
    hdac->State = HAL_DAC_STATE_ERROR;
 80056d0:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80056d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdac->State = HAL_DAC_STATE_ERROR;
 80056d6:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80056d8:	6902      	ldr	r2, [r0, #16]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80056e0:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056e8:	601a      	str	r2, [r3, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80056ea:	f7ff ffd3 	bl	8005694 <HAL_DAC_DMAUnderrunCallbackCh1>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	e7d8      	b.n	80056a4 <HAL_DAC_IRQHandler+0xc>
 80056f2:	bf00      	nop

080056f4 <HAL_DAC_ConfigChannel>:
{
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	460e      	mov	r6, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80056f8:	6809      	ldr	r1, [r1, #0]
{
 80056fa:	4604      	mov	r4, r0
 80056fc:	4615      	mov	r5, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80056fe:	f031 0304 	bics.w	r3, r1, #4
 8005702:	f021 0008 	bic.w	r0, r1, #8
 8005706:	f021 0210 	bic.w	r2, r1, #16
 800570a:	bf14      	ite	ne
 800570c:	2301      	movne	r3, #1
 800570e:	2300      	moveq	r3, #0
 8005710:	2824      	cmp	r0, #36	; 0x24
 8005712:	bf0c      	ite	eq
 8005714:	2300      	moveq	r3, #0
 8005716:	f003 0301 	andne.w	r3, r3, #1
 800571a:	293c      	cmp	r1, #60	; 0x3c
 800571c:	bf0c      	ite	eq
 800571e:	2300      	moveq	r3, #0
 8005720:	f003 0301 	andne.w	r3, r3, #1
 8005724:	2a0c      	cmp	r2, #12
 8005726:	bf0c      	ite	eq
 8005728:	2300      	moveq	r3, #0
 800572a:	f003 0301 	andne.w	r3, r3, #1
 800572e:	b11b      	cbz	r3, 8005738 <HAL_DAC_ConfigChannel+0x44>
 8005730:	f021 0120 	bic.w	r1, r1, #32
 8005734:	2914      	cmp	r1, #20
 8005736:	d135      	bne.n	80057a4 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8005738:	6873      	ldr	r3, [r6, #4]
 800573a:	f033 0302 	bics.w	r3, r3, #2
 800573e:	d12b      	bne.n	8005798 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8005740:	f035 0310 	bics.w	r3, r5, #16
 8005744:	d11e      	bne.n	8005784 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8005746:	7963      	ldrb	r3, [r4, #5]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d023      	beq.n	8005794 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 = hdac->Instance->CR;
 800574c:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800574e:	2702      	movs	r7, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005750:	f640 70fe 	movw	r0, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005754:	e9d6 3200 	ldrd	r3, r2, [r6]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005758:	7127      	strb	r7, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800575a:	fa00 f605 	lsl.w	r6, r0, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800575e:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8005760:	6808      	ldr	r0, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005762:	22c0      	movs	r2, #192	; 0xc0
  hdac->State = HAL_DAC_STATE_READY;
 8005764:	2701      	movs	r7, #1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005766:	ea20 0006 	bic.w	r0, r0, r6
  tmpreg1 |= tmpreg2 << Channel;
 800576a:	40ab      	lsls	r3, r5
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800576c:	40aa      	lsls	r2, r5
  __HAL_UNLOCK(hdac);
 800576e:	2600      	movs	r6, #0
  tmpreg1 |= tmpreg2 << Channel;
 8005770:	4303      	orrs	r3, r0
  return HAL_OK;
 8005772:	4630      	mov	r0, r6
  hdac->Instance->CR = tmpreg1;
 8005774:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005776:	680d      	ldr	r5, [r1, #0]
 8005778:	ea25 0502 	bic.w	r5, r5, r2
 800577c:	600d      	str	r5, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800577e:	7127      	strb	r7, [r4, #4]
  __HAL_UNLOCK(hdac);
 8005780:	7166      	strb	r6, [r4, #5]
}
 8005782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8005784:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8005788:	4809      	ldr	r0, [pc, #36]	; (80057b0 <HAL_DAC_ConfigChannel+0xbc>)
 800578a:	f7fc ff61 	bl	8002650 <assert_failed>
  __HAL_LOCK(hdac);
 800578e:	7963      	ldrb	r3, [r4, #5]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d1db      	bne.n	800574c <HAL_DAC_ConfigChannel+0x58>
 8005794:	2002      	movs	r0, #2
}
 8005796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8005798:	f240 315b 	movw	r1, #859	; 0x35b
 800579c:	4804      	ldr	r0, [pc, #16]	; (80057b0 <HAL_DAC_ConfigChannel+0xbc>)
 800579e:	f7fc ff57 	bl	8002650 <assert_failed>
 80057a2:	e7cd      	b.n	8005740 <HAL_DAC_ConfigChannel+0x4c>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80057a4:	f240 315a 	movw	r1, #858	; 0x35a
 80057a8:	4801      	ldr	r0, [pc, #4]	; (80057b0 <HAL_DAC_ConfigChannel+0xbc>)
 80057aa:	f7fc ff51 	bl	8002650 <assert_failed>
 80057ae:	e7c3      	b.n	8005738 <HAL_DAC_ConfigChannel+0x44>
 80057b0:	080231f0 	.word	0x080231f0

080057b4 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop

080057bc <HAL_DACEx_ErrorCallbackCh2>:
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop

080057c0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop

080057c4 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80057c4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fff3 	bl	80057b4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80057ce:	2301      	movs	r3, #1
 80057d0:	7123      	strb	r3, [r4, #4]
}
 80057d2:	bd10      	pop	{r4, pc}

080057d4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80057d4:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80057d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80057d8:	f7ff ffee 	bl	80057b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80057dc:	bd08      	pop	{r3, pc}
 80057de:	bf00      	nop

080057e0 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80057e0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057e4:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80057e6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057e8:	f043 0304 	orr.w	r3, r3, #4
 80057ec:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80057ee:	f7ff ffe5 	bl	80057bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80057f2:	2301      	movs	r3, #1
 80057f4:	7123      	strb	r3, [r4, #4]
}
 80057f6:	bd10      	pop	{r4, pc}

080057f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80057fc:	f7ff f8d6 	bl	80049ac <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005800:	2c00      	cmp	r4, #0
 8005802:	f000 812b 	beq.w	8005a5c <HAL_DMA_Init+0x264>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	4605      	mov	r5, r0
 800580a:	4bbd      	ldr	r3, [pc, #756]	; (8005b00 <HAL_DMA_Init+0x308>)
 800580c:	48bd      	ldr	r0, [pc, #756]	; (8005b04 <HAL_DMA_Init+0x30c>)
 800580e:	49be      	ldr	r1, [pc, #760]	; (8005b08 <HAL_DMA_Init+0x310>)
 8005810:	429a      	cmp	r2, r3
 8005812:	bf18      	it	ne
 8005814:	4282      	cmpne	r2, r0
 8005816:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800581a:	bf14      	ite	ne
 800581c:	2301      	movne	r3, #1
 800581e:	2300      	moveq	r3, #0
 8005820:	428a      	cmp	r2, r1
 8005822:	bf0c      	ite	eq
 8005824:	2300      	moveq	r3, #0
 8005826:	f003 0301 	andne.w	r3, r3, #1
 800582a:	3130      	adds	r1, #48	; 0x30
 800582c:	4282      	cmp	r2, r0
 800582e:	bf0c      	ite	eq
 8005830:	2300      	moveq	r3, #0
 8005832:	f003 0301 	andne.w	r3, r3, #1
 8005836:	3030      	adds	r0, #48	; 0x30
 8005838:	428a      	cmp	r2, r1
 800583a:	bf0c      	ite	eq
 800583c:	2300      	moveq	r3, #0
 800583e:	f003 0301 	andne.w	r3, r3, #1
 8005842:	3130      	adds	r1, #48	; 0x30
 8005844:	4282      	cmp	r2, r0
 8005846:	bf0c      	ite	eq
 8005848:	2300      	moveq	r3, #0
 800584a:	f003 0301 	andne.w	r3, r3, #1
 800584e:	3030      	adds	r0, #48	; 0x30
 8005850:	428a      	cmp	r2, r1
 8005852:	bf0c      	ite	eq
 8005854:	2300      	moveq	r3, #0
 8005856:	f003 0301 	andne.w	r3, r3, #1
 800585a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800585e:	4282      	cmp	r2, r0
 8005860:	bf0c      	ite	eq
 8005862:	2300      	moveq	r3, #0
 8005864:	f003 0301 	andne.w	r3, r3, #1
 8005868:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800586c:	428a      	cmp	r2, r1
 800586e:	bf0c      	ite	eq
 8005870:	2300      	moveq	r3, #0
 8005872:	f003 0301 	andne.w	r3, r3, #1
 8005876:	3130      	adds	r1, #48	; 0x30
 8005878:	4282      	cmp	r2, r0
 800587a:	bf0c      	ite	eq
 800587c:	2300      	moveq	r3, #0
 800587e:	f003 0301 	andne.w	r3, r3, #1
 8005882:	3030      	adds	r0, #48	; 0x30
 8005884:	428a      	cmp	r2, r1
 8005886:	bf0c      	ite	eq
 8005888:	2300      	moveq	r3, #0
 800588a:	f003 0301 	andne.w	r3, r3, #1
 800588e:	3130      	adds	r1, #48	; 0x30
 8005890:	4282      	cmp	r2, r0
 8005892:	bf0c      	ite	eq
 8005894:	2300      	moveq	r3, #0
 8005896:	f003 0301 	andne.w	r3, r3, #1
 800589a:	3030      	adds	r0, #48	; 0x30
 800589c:	428a      	cmp	r2, r1
 800589e:	bf0c      	ite	eq
 80058a0:	2300      	moveq	r3, #0
 80058a2:	f003 0301 	andne.w	r3, r3, #1
 80058a6:	3130      	adds	r1, #48	; 0x30
 80058a8:	4282      	cmp	r2, r0
 80058aa:	bf0c      	ite	eq
 80058ac:	2300      	moveq	r3, #0
 80058ae:	f003 0301 	andne.w	r3, r3, #1
 80058b2:	428a      	cmp	r2, r1
 80058b4:	bf0c      	ite	eq
 80058b6:	2300      	moveq	r3, #0
 80058b8:	f003 0301 	andne.w	r3, r3, #1
 80058bc:	b11b      	cbz	r3, 80058c6 <HAL_DMA_Init+0xce>
 80058be:	4b93      	ldr	r3, [pc, #588]	; (8005b0c <HAL_DMA_Init+0x314>)
 80058c0:	429a      	cmp	r2, r3
 80058c2:	f040 8140 	bne.w	8005b46 <HAL_DMA_Init+0x34e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80058c6:	6863      	ldr	r3, [r4, #4]
 80058c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d0:	bf18      	it	ne
 80058d2:	2b00      	cmpne	r3, #0
 80058d4:	bf14      	ite	ne
 80058d6:	2201      	movne	r2, #1
 80058d8:	2200      	moveq	r2, #0
 80058da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058de:	bf0c      	ite	eq
 80058e0:	2200      	moveq	r2, #0
 80058e2:	f002 0201 	andne.w	r2, r2, #1
 80058e6:	b11a      	cbz	r2, 80058f0 <HAL_DMA_Init+0xf8>
 80058e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80058ec:	f040 8130 	bne.w	8005b50 <HAL_DMA_Init+0x358>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80058f0:	68a3      	ldr	r3, [r4, #8]
 80058f2:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80058f6:	d002      	beq.n	80058fe <HAL_DMA_Init+0x106>
 80058f8:	2b80      	cmp	r3, #128	; 0x80
 80058fa:	f040 80b1 	bne.w	8005a60 <HAL_DMA_Init+0x268>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8005904:	f040 8091 	bne.w	8005a2a <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800590e:	f040 8082 	bne.w	8005a16 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005912:	6963      	ldr	r3, [r4, #20]
 8005914:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8005918:	d003      	beq.n	8005922 <HAL_DMA_Init+0x12a>
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591e:	f040 80a9 	bne.w	8005a74 <HAL_DMA_Init+0x27c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005922:	69a3      	ldr	r3, [r4, #24]
 8005924:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8005928:	d003      	beq.n	8005932 <HAL_DMA_Init+0x13a>
 800592a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800592e:	f040 80ab 	bne.w	8005a88 <HAL_DMA_Init+0x290>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005932:	69e3      	ldr	r3, [r4, #28]
 8005934:	f033 0220 	bics.w	r2, r3, #32
 8005938:	d003      	beq.n	8005942 <HAL_DMA_Init+0x14a>
 800593a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593e:	f040 80ad 	bne.w	8005a9c <HAL_DMA_Init+0x2a4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005942:	6a23      	ldr	r3, [r4, #32]
 8005944:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005948:	f040 80b1 	bne.w	8005aae <HAL_DMA_Init+0x2b6>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800594c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800594e:	f033 0204 	bics.w	r2, r3, #4
 8005952:	d174      	bne.n	8005a3e <HAL_DMA_Init+0x246>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005954:	2b00      	cmp	r3, #0
 8005956:	d14c      	bne.n	80059f2 <HAL_DMA_Init+0x1fa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005958:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800595a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800595c:	2100      	movs	r1, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800595e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8005962:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8005964:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800596e:	e005      	b.n	800597c <HAL_DMA_Init+0x184>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005970:	f7ff f81c 	bl	80049ac <HAL_GetTick>
 8005974:	1b40      	subs	r0, r0, r5
 8005976:	2805      	cmp	r0, #5
 8005978:	d869      	bhi.n	8005a4e <HAL_DMA_Init+0x256>
 800597a:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	07d1      	lsls	r1, r2, #31
 8005980:	d4f6      	bmi.n	8005970 <HAL_DMA_Init+0x178>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005982:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005986:	68e1      	ldr	r1, [r4, #12]
 8005988:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 800598a:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800598c:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005990:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005992:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8005994:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005996:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800599a:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800599c:	4d5c      	ldr	r5, [pc, #368]	; (8005b10 <HAL_DMA_Init+0x318>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800599e:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059a0:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059a2:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80059a6:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059a8:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059aa:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059ae:	f000 8083 	beq.w	8005ab8 <HAL_DMA_Init+0x2c0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059b4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059b6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059ba:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4d55      	ldr	r5, [pc, #340]	; (8005b14 <HAL_DMA_Init+0x31c>)
  hdma->Instance->FCR = tmp;
 80059c0:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059c2:	3a10      	subs	r2, #16
 80059c4:	4954      	ldr	r1, [pc, #336]	; (8005b18 <HAL_DMA_Init+0x320>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059c6:	4855      	ldr	r0, [pc, #340]	; (8005b1c <HAL_DMA_Init+0x324>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059c8:	fba5 5202 	umull	r5, r2, r5, r2
 80059cc:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 80059ce:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059d0:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059d2:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059d4:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 80059d6:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059d8:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059dc:	bf88      	it	hi
 80059de:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059e0:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059e2:	4083      	lsls	r3, r0
  return HAL_OK;
 80059e4:	4610      	mov	r0, r2
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059e6:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059e8:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ea:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80059ec:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80059f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80059f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	f200 8095 	bhi.w	8005b24 <HAL_DMA_Init+0x32c>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80059fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059fc:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8005a00:	f040 8095 	bne.w	8005b2e <HAL_DMA_Init+0x336>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8005a04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a06:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8005a0a:	d0a5      	beq.n	8005958 <HAL_DMA_Init+0x160>
 8005a0c:	21c9      	movs	r1, #201	; 0xc9
 8005a0e:	4844      	ldr	r0, [pc, #272]	; (8005b20 <HAL_DMA_Init+0x328>)
 8005a10:	f7fc fe1e 	bl	8002650 <assert_failed>
 8005a14:	e7a0      	b.n	8005958 <HAL_DMA_Init+0x160>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005a16:	21bd      	movs	r1, #189	; 0xbd
 8005a18:	4841      	ldr	r0, [pc, #260]	; (8005b20 <HAL_DMA_Init+0x328>)
 8005a1a:	f7fc fe19 	bl	8002650 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005a1e:	6963      	ldr	r3, [r4, #20]
 8005a20:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8005a24:	f47f af79 	bne.w	800591a <HAL_DMA_Init+0x122>
 8005a28:	e77b      	b.n	8005922 <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005a2a:	21bc      	movs	r1, #188	; 0xbc
 8005a2c:	483c      	ldr	r0, [pc, #240]	; (8005b20 <HAL_DMA_Init+0x328>)
 8005a2e:	f7fc fe0f 	bl	8002650 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8005a38:	f43f af6b 	beq.w	8005912 <HAL_DMA_Init+0x11a>
 8005a3c:	e7eb      	b.n	8005a16 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8005a3e:	21c2      	movs	r1, #194	; 0xc2
 8005a40:	4837      	ldr	r0, [pc, #220]	; (8005b20 <HAL_DMA_Init+0x328>)
 8005a42:	f7fc fe05 	bl	8002650 <assert_failed>
 8005a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d085      	beq.n	8005958 <HAL_DMA_Init+0x160>
 8005a4c:	e7d1      	b.n	80059f2 <HAL_DMA_Init+0x1fa>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a50:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8005a52:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a54:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005a5c:	2001      	movs	r0, #1
}
 8005a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005a60:	21bb      	movs	r1, #187	; 0xbb
 8005a62:	482f      	ldr	r0, [pc, #188]	; (8005b20 <HAL_DMA_Init+0x328>)
 8005a64:	f7fc fdf4 	bl	8002650 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005a68:	68e3      	ldr	r3, [r4, #12]
 8005a6a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8005a6e:	f43f af4b 	beq.w	8005908 <HAL_DMA_Init+0x110>
 8005a72:	e7da      	b.n	8005a2a <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005a74:	21be      	movs	r1, #190	; 0xbe
 8005a76:	482a      	ldr	r0, [pc, #168]	; (8005b20 <HAL_DMA_Init+0x328>)
 8005a78:	f7fc fdea 	bl	8002650 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005a7c:	69a3      	ldr	r3, [r4, #24]
 8005a7e:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8005a82:	f47f af52 	bne.w	800592a <HAL_DMA_Init+0x132>
 8005a86:	e754      	b.n	8005932 <HAL_DMA_Init+0x13a>
 8005a88:	21bf      	movs	r1, #191	; 0xbf
 8005a8a:	4825      	ldr	r0, [pc, #148]	; (8005b20 <HAL_DMA_Init+0x328>)
 8005a8c:	f7fc fde0 	bl	8002650 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005a90:	69e3      	ldr	r3, [r4, #28]
 8005a92:	f033 0220 	bics.w	r2, r3, #32
 8005a96:	f47f af50 	bne.w	800593a <HAL_DMA_Init+0x142>
 8005a9a:	e752      	b.n	8005942 <HAL_DMA_Init+0x14a>
 8005a9c:	21c0      	movs	r1, #192	; 0xc0
 8005a9e:	4820      	ldr	r0, [pc, #128]	; (8005b20 <HAL_DMA_Init+0x328>)
 8005aa0:	f7fc fdd6 	bl	8002650 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005aa4:	6a23      	ldr	r3, [r4, #32]
 8005aa6:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005aaa:	f43f af4f 	beq.w	800594c <HAL_DMA_Init+0x154>
 8005aae:	21c1      	movs	r1, #193	; 0xc1
 8005ab0:	481b      	ldr	r0, [pc, #108]	; (8005b20 <HAL_DMA_Init+0x328>)
 8005ab2:	f7fc fdcd 	bl	8002650 <assert_failed>
 8005ab6:	e749      	b.n	800594c <HAL_DMA_Init+0x154>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ab8:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8005abc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005abe:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 8005ac2:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ac6:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 8005ac8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005aca:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005acc:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8005ad0:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	f43f af72 	beq.w	80059bc <HAL_DMA_Init+0x1c4>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ad8:	b376      	cbz	r6, 8005b38 <HAL_DMA_Init+0x340>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ada:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8005ade:	d041      	beq.n	8005b64 <HAL_DMA_Init+0x36c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ae0:	2f02      	cmp	r7, #2
 8005ae2:	d905      	bls.n	8005af0 <HAL_DMA_Init+0x2f8>
 8005ae4:	2f03      	cmp	r7, #3
 8005ae6:	f47f af69 	bne.w	80059bc <HAL_DMA_Init+0x1c4>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aea:	01ea      	lsls	r2, r5, #7
 8005aec:	f57f af66 	bpl.w	80059bc <HAL_DMA_Init+0x1c4>
        hdma->State = HAL_DMA_STATE_READY;
 8005af0:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005af2:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8005af4:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005af6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005af8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40026010 	.word	0x40026010
 8005b04:	40026028 	.word	0x40026028
 8005b08:	40026040 	.word	0x40026040
 8005b0c:	400264b8 	.word	0x400264b8
 8005b10:	e010803f 	.word	0xe010803f
 8005b14:	aaaaaaab 	.word	0xaaaaaaab
 8005b18:	fffffc00 	.word	0xfffffc00
 8005b1c:	08023260 	.word	0x08023260
 8005b20:	08023228 	.word	0x08023228
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005b24:	21c7      	movs	r1, #199	; 0xc7
 8005b26:	4816      	ldr	r0, [pc, #88]	; (8005b80 <HAL_DMA_Init+0x388>)
 8005b28:	f7fc fd92 	bl	8002650 <assert_failed>
 8005b2c:	e765      	b.n	80059fa <HAL_DMA_Init+0x202>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8005b2e:	21c8      	movs	r1, #200	; 0xc8
 8005b30:	4813      	ldr	r0, [pc, #76]	; (8005b80 <HAL_DMA_Init+0x388>)
 8005b32:	f7fc fd8d 	bl	8002650 <assert_failed>
 8005b36:	e765      	b.n	8005a04 <HAL_DMA_Init+0x20c>
    switch (tmp)
 8005b38:	2f01      	cmp	r7, #1
 8005b3a:	d00e      	beq.n	8005b5a <HAL_DMA_Init+0x362>
 8005b3c:	d3d5      	bcc.n	8005aea <HAL_DMA_Init+0x2f2>
 8005b3e:	2f02      	cmp	r7, #2
 8005b40:	f47f af3c 	bne.w	80059bc <HAL_DMA_Init+0x1c4>
 8005b44:	e7d1      	b.n	8005aea <HAL_DMA_Init+0x2f2>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005b46:	21b9      	movs	r1, #185	; 0xb9
 8005b48:	480d      	ldr	r0, [pc, #52]	; (8005b80 <HAL_DMA_Init+0x388>)
 8005b4a:	f7fc fd81 	bl	8002650 <assert_failed>
 8005b4e:	e6ba      	b.n	80058c6 <HAL_DMA_Init+0xce>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8005b50:	21ba      	movs	r1, #186	; 0xba
 8005b52:	480b      	ldr	r0, [pc, #44]	; (8005b80 <HAL_DMA_Init+0x388>)
 8005b54:	f7fc fd7c 	bl	8002650 <assert_failed>
 8005b58:	e6ca      	b.n	80058f0 <HAL_DMA_Init+0xf8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b5a:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8005b5e:	f47f af2d 	bne.w	80059bc <HAL_DMA_Init+0x1c4>
 8005b62:	e7c5      	b.n	8005af0 <HAL_DMA_Init+0x2f8>
    switch (tmp)
 8005b64:	2f03      	cmp	r7, #3
 8005b66:	f63f af29 	bhi.w	80059bc <HAL_DMA_Init+0x1c4>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <HAL_DMA_Init+0x378>)
 8005b6c:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8005b70:	08005af1 	.word	0x08005af1
 8005b74:	08005aeb 	.word	0x08005aeb
 8005b78:	08005af1 	.word	0x08005af1
 8005b7c:	08005b5b 	.word	0x08005b5b
 8005b80:	08023228 	.word	0x08023228

08005b84 <HAL_DMA_Start_IT>:
{
 8005b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b88:	461d      	mov	r5, r3
 8005b8a:	460f      	mov	r7, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005b8c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8005b90:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005b92:	1e69      	subs	r1, r5, #1
{
 8005b94:	4690      	mov	r8, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b96:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	d83a      	bhi.n	8005c12 <HAL_DMA_Start_IT+0x8e>
  __HAL_LOCK(hdma);
 8005b9c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d03f      	beq.n	8005c24 <HAL_DMA_Start_IT+0xa0>
 8005ba4:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ba6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005baa:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8005bac:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bb0:	d129      	bne.n	8005c06 <HAL_DMA_Start_IT+0x82>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bb2:	6821      	ldr	r1, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bb4:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bb6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bb8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bbc:	6563      	str	r3, [r4, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bbe:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bc0:	680b      	ldr	r3, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bc2:	2a40      	cmp	r2, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bc8:	600b      	str	r3, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 8005bca:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bcc:	d02d      	beq.n	8005c2a <HAL_DMA_Start_IT+0xa6>
    hdma->Instance->PAR = SrcAddress;
 8005bce:	608f      	str	r7, [r1, #8]
    hdma->Instance->M0AR = DstAddress;
 8005bd0:	f8c1 800c 	str.w	r8, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005bd6:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8005bd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bda:	4083      	lsls	r3, r0
 8005bdc:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bde:	680b      	ldr	r3, [r1, #0]
 8005be0:	f043 0316 	orr.w	r3, r3, #22
 8005be4:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005be6:	694b      	ldr	r3, [r1, #20]
 8005be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bec:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005bee:	b11a      	cbz	r2, 8005bf8 <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	f043 0308 	orr.w	r3, r3, #8
 8005bf6:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8005bf8:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	600b      	str	r3, [r1, #0]
}
 8005c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 8005c06:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8005c08:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8005c0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005c12:	f240 11cd 	movw	r1, #461	; 0x1cd
 8005c16:	4807      	ldr	r0, [pc, #28]	; (8005c34 <HAL_DMA_Start_IT+0xb0>)
 8005c18:	f7fc fd1a 	bl	8002650 <assert_failed>
  __HAL_LOCK(hdma);
 8005c1c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d1bf      	bne.n	8005ba4 <HAL_DMA_Start_IT+0x20>
 8005c24:	2002      	movs	r0, #2
}
 8005c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->Instance->PAR = DstAddress;
 8005c2a:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005c2e:	60cf      	str	r7, [r1, #12]
 8005c30:	e7d0      	b.n	8005bd4 <HAL_DMA_Start_IT+0x50>
 8005c32:	bf00      	nop
 8005c34:	08023228 	.word	0x08023228

08005c38 <HAL_DMA_Abort>:
{
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c3c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8005c3e:	f7fe feb5 	bl	80049ac <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c42:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d006      	beq.n	8005c58 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c4a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8005c4c:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005c4e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c50:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005c52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c5c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	f022 0216 	bic.w	r2, r2, #22
 8005c64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c66:	695a      	ldr	r2, [r3, #20]
 8005c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c6c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c6e:	b339      	cbz	r1, 8005cc0 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	f022 0208 	bic.w	r2, r2, #8
 8005c76:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c80:	e005      	b.n	8005c8e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c82:	f7fe fe93 	bl	80049ac <HAL_GetTick>
 8005c86:	1b40      	subs	r0, r0, r5
 8005c88:	2805      	cmp	r0, #5
 8005c8a:	d80f      	bhi.n	8005cac <HAL_DMA_Abort+0x74>
 8005c8c:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f013 0301 	ands.w	r3, r3, #1
 8005c94:	d1f5      	bne.n	8005c82 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c96:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005c98:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8005c9a:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c9c:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8005c9e:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ca0:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005ca2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005ca6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cae:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8005cb0:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cb2:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8005cb4:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 8005cb6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cc0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	d1d4      	bne.n	8005c70 <HAL_DMA_Abort+0x38>
 8005cc6:	e7d7      	b.n	8005c78 <HAL_DMA_Abort+0x40>

08005cc8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cc8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8005ccc:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cce:	2a02      	cmp	r2, #2
 8005cd0:	d003      	beq.n	8005cda <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cd2:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8005cd4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cd8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8005cda:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005cdc:	2105      	movs	r1, #5
  return HAL_OK;
 8005cde:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ce0:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	6013      	str	r3, [r2, #0]
}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop

08005cf0 <HAL_DMA_IRQHandler>:
{
 8005cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8005cf6:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf8:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8005cfa:	4966      	ldr	r1, [pc, #408]	; (8005e94 <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 8005cfc:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8005cfe:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d00:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 8005d04:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8005d06:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d08:	422a      	tst	r2, r5
 8005d0a:	d003      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d0c:	6821      	ldr	r1, [r4, #0]
 8005d0e:	6808      	ldr	r0, [r1, #0]
 8005d10:	0740      	lsls	r0, r0, #29
 8005d12:	d459      	bmi.n	8005dc8 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d14:	2201      	movs	r2, #1
 8005d16:	409a      	lsls	r2, r3
 8005d18:	422a      	tst	r2, r5
 8005d1a:	d003      	beq.n	8005d24 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d1c:	6821      	ldr	r1, [r4, #0]
 8005d1e:	6949      	ldr	r1, [r1, #20]
 8005d20:	0608      	lsls	r0, r1, #24
 8005d22:	d474      	bmi.n	8005e0e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d24:	2204      	movs	r2, #4
 8005d26:	409a      	lsls	r2, r3
 8005d28:	422a      	tst	r2, r5
 8005d2a:	d003      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d2c:	6821      	ldr	r1, [r4, #0]
 8005d2e:	6809      	ldr	r1, [r1, #0]
 8005d30:	0789      	lsls	r1, r1, #30
 8005d32:	d466      	bmi.n	8005e02 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d34:	2210      	movs	r2, #16
 8005d36:	409a      	lsls	r2, r3
 8005d38:	422a      	tst	r2, r5
 8005d3a:	d003      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d3c:	6821      	ldr	r1, [r4, #0]
 8005d3e:	6808      	ldr	r0, [r1, #0]
 8005d40:	0700      	lsls	r0, r0, #28
 8005d42:	d44b      	bmi.n	8005ddc <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d44:	2220      	movs	r2, #32
 8005d46:	409a      	lsls	r2, r3
 8005d48:	422a      	tst	r2, r5
 8005d4a:	d014      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d4c:	6821      	ldr	r1, [r4, #0]
 8005d4e:	6808      	ldr	r0, [r1, #0]
 8005d50:	06c0      	lsls	r0, r0, #27
 8005d52:	d510      	bpl.n	8005d76 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d54:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d56:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005d5a:	2a05      	cmp	r2, #5
 8005d5c:	d063      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d5e:	680b      	ldr	r3, [r1, #0]
 8005d60:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d64:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d66:	d07e      	beq.n	8005e66 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d68:	0319      	lsls	r1, r3, #12
 8005d6a:	f140 8089 	bpl.w	8005e80 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8005d6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d70:	b10b      	cbz	r3, 8005d76 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8005d72:	4620      	mov	r0, r4
 8005d74:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d78:	b323      	cbz	r3, 8005dc4 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d7c:	07da      	lsls	r2, r3, #31
 8005d7e:	d51a      	bpl.n	8005db6 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8005d80:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d82:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8005d84:	4b44      	ldr	r3, [pc, #272]	; (8005e98 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d86:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8005d8a:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8005d8e:	6813      	ldr	r3, [r2, #0]
 8005d90:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8005d94:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e002      	b.n	8005da0 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d9a:	6813      	ldr	r3, [r2, #0]
 8005d9c:	07db      	lsls	r3, r3, #31
 8005d9e:	d504      	bpl.n	8005daa <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8005da0:	9b01      	ldr	r3, [sp, #4]
 8005da2:	3301      	adds	r3, #1
 8005da4:	42b3      	cmp	r3, r6
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	d9f7      	bls.n	8005d9a <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8005daa:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005dac:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8005dae:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005db2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005db6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005db8:	b123      	cbz	r3, 8005dc4 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8005dba:	4620      	mov	r0, r4
}
 8005dbc:	b003      	add	sp, #12
 8005dbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8005dc2:	4718      	bx	r3
}
 8005dc4:	b003      	add	sp, #12
 8005dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005dc8:	6808      	ldr	r0, [r1, #0]
 8005dca:	f020 0004 	bic.w	r0, r0, #4
 8005dce:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005dd0:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005dd2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	6562      	str	r2, [r4, #84]	; 0x54
 8005dda:	e79b      	b.n	8005d14 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ddc:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dde:	680a      	ldr	r2, [r1, #0]
 8005de0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005de4:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005de6:	d118      	bne.n	8005e1a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005de8:	05d2      	lsls	r2, r2, #23
 8005dea:	d403      	bmi.n	8005df4 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dec:	680a      	ldr	r2, [r1, #0]
 8005dee:	f022 0208 	bic.w	r2, r2, #8
 8005df2:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005df4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	d0a4      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4790      	blx	r2
 8005dfe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005e00:	e7a0      	b.n	8005d44 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e02:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005e06:	f042 0204 	orr.w	r2, r2, #4
 8005e0a:	6562      	str	r2, [r4, #84]	; 0x54
 8005e0c:	e792      	b.n	8005d34 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e0e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e10:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005e12:	f042 0202 	orr.w	r2, r2, #2
 8005e16:	6562      	str	r2, [r4, #84]	; 0x54
 8005e18:	e784      	b.n	8005d24 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e1a:	0311      	lsls	r1, r2, #12
 8005e1c:	d5ea      	bpl.n	8005df4 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	d1ea      	bne.n	8005dfa <HAL_DMA_IRQHandler+0x10a>
 8005e24:	e78e      	b.n	8005d44 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e26:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e28:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e2a:	f022 0216 	bic.w	r2, r2, #22
 8005e2e:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e30:	694a      	ldr	r2, [r1, #20]
 8005e32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e36:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e38:	b338      	cbz	r0, 8005e8a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e3a:	680a      	ldr	r2, [r1, #0]
 8005e3c:	f022 0208 	bic.w	r2, r2, #8
 8005e40:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e42:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8005e44:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8005e46:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8005e4c:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e4e:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005e50:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005e54:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d0b3      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8005e5c:	4620      	mov	r0, r4
}
 8005e5e:	b003      	add	sp, #12
 8005e60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8005e64:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e66:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005e6a:	d180      	bne.n	8005d6e <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e6c:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005e6e:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e70:	f022 0210 	bic.w	r2, r2, #16
 8005e74:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8005e76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005e7a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8005e7e:	e776      	b.n	8005d6e <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8005e80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f47f af75 	bne.w	8005d72 <HAL_DMA_IRQHandler+0x82>
 8005e88:	e775      	b.n	8005d76 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e8a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005e8c:	2a00      	cmp	r2, #0
 8005e8e:	d1d4      	bne.n	8005e3a <HAL_DMA_IRQHandler+0x14a>
 8005e90:	e7d7      	b.n	8005e42 <HAL_DMA_IRQHandler+0x152>
 8005e92:	bf00      	nop
 8005e94:	200002b8 	.word	0x200002b8
 8005e98:	1b4e81b5 	.word	0x1b4e81b5

08005e9c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea0:	9d08      	ldr	r5, [sp, #32]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005ea2:	f64f 76fe 	movw	r6, #65534	; 0xfffe
{
 8005ea6:	460f      	mov	r7, r1
 8005ea8:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005eaa:	1e69      	subs	r1, r5, #1
{
 8005eac:	4690      	mov	r8, r2
 8005eae:	4699      	mov	r9, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005eb0:	42b1      	cmp	r1, r6
 8005eb2:	d861      	bhi.n	8005f78 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005eb4:	68a0      	ldr	r0, [r4, #8]
 8005eb6:	2880      	cmp	r0, #128	; 0x80
 8005eb8:	d065      	beq.n	8005f86 <HAL_DMAEx_MultiBufferStart_IT+0xea>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005eba:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8005ebe:	2901      	cmp	r1, #1
 8005ec0:	d07d      	beq.n	8005fbe <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8005ec2:	2201      	movs	r2, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ec4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005ec8:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8005eca:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ece:	d14d      	bne.n	8005f6c <HAL_DMAEx_MultiBufferStart_IT+0xd0>
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8005ed0:	6821      	ldr	r1, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ed2:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ed4:	2202      	movs	r2, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ed6:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ed8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005edc:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8005ede:	680b      	ldr	r3, [r1, #0]
 8005ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ee4:	600b      	str	r3, [r1, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8005ee6:	f8c1 9010 	str.w	r9, [r1, #16]
  hdma->Instance->NDTR = DataLength;
 8005eea:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eec:	d051      	beq.n	8005f92 <HAL_DMAEx_MultiBufferStart_IT+0xf6>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005eee:	608f      	str	r7, [r1, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8005ef0:	f8c1 800c 	str.w	r8, [r1, #12]
 8005ef4:	4b91      	ldr	r3, [pc, #580]	; (800613c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005ef6:	4a92      	ldr	r2, [pc, #584]	; (8006140 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005ef8:	4d92      	ldr	r5, [pc, #584]	; (8006144 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005efa:	4299      	cmp	r1, r3
 8005efc:	bf18      	it	ne
 8005efe:	4291      	cmpne	r1, r2
 8005f00:	4891      	ldr	r0, [pc, #580]	; (8006148 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f02:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8005f06:	bf14      	ite	ne
 8005f08:	2301      	movne	r3, #1
 8005f0a:	2300      	moveq	r3, #0
 8005f0c:	42a9      	cmp	r1, r5
 8005f0e:	bf0c      	ite	eq
 8005f10:	2300      	moveq	r3, #0
 8005f12:	f003 0301 	andne.w	r3, r3, #1
 8005f16:	4281      	cmp	r1, r0
 8005f18:	bf0c      	ite	eq
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	f003 0301 	andne.w	r3, r3, #1
 8005f20:	4291      	cmp	r1, r2
 8005f22:	d93a      	bls.n	8005f9a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d174      	bne.n	8006012 <HAL_DMAEx_MultiBufferStart_IT+0x176>
 8005f28:	4b88      	ldr	r3, [pc, #544]	; (800614c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005f2a:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f2c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005f2e:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f30:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005f32:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f34:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005f36:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005f38:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005f3a:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005f3c:	4b83      	ldr	r3, [pc, #524]	; (800614c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005f3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f40:	680b      	ldr	r3, [r1, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f42:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f44:	f043 0316 	orr.w	r3, r3, #22
 8005f48:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005f4a:	694b      	ldr	r3, [r1, #20]
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	614b      	str	r3, [r1, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	d036      	beq.n	8005fc4 <HAL_DMAEx_MultiBufferStart_IT+0x128>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f56:	680b      	ldr	r3, [r1, #0]
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma); 
 8005f5e:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f60:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	600b      	str	r3, [r1, #0]
}
 8005f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hdma);	  
 8005f6c:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8005f6e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8005f70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005f78:	4875      	ldr	r0, [pc, #468]	; (8006150 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005f7a:	21a2      	movs	r1, #162	; 0xa2
 8005f7c:	f7fc fb68 	bl	8002650 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f80:	68a0      	ldr	r0, [r4, #8]
 8005f82:	2880      	cmp	r0, #128	; 0x80
 8005f84:	d199      	bne.n	8005eba <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005f86:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 8005f8a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005f8c:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 8005f92:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005f96:	60cf      	str	r7, [r1, #12]
 8005f98:	e7ac      	b.n	8005ef4 <HAL_DMAEx_MultiBufferStart_IT+0x58>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f9a:	4a6e      	ldr	r2, [pc, #440]	; (8006154 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005f9c:	4291      	cmp	r1, r2
 8005f9e:	d915      	bls.n	8005fcc <HAL_DMAEx_MultiBufferStart_IT+0x130>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d15a      	bne.n	800605a <HAL_DMAEx_MultiBufferStart_IT+0x1be>
 8005fa4:	4b69      	ldr	r3, [pc, #420]	; (800614c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005fa6:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005fa8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005faa:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005fac:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005fae:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005fb0:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005fb2:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005fb4:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005fb6:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005fb8:	4b64      	ldr	r3, [pc, #400]	; (800614c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	e7c0      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
  __HAL_LOCK(hdma);
 8005fbe:	2002      	movs	r0, #2
}
 8005fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1c5      	bne.n	8005f56 <HAL_DMAEx_MultiBufferStart_IT+0xba>
 8005fca:	e7c8      	b.n	8005f5e <HAL_DMAEx_MultiBufferStart_IT+0xc2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005fcc:	4a62      	ldr	r2, [pc, #392]	; (8006158 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005fce:	4291      	cmp	r1, r2
 8005fd0:	d90f      	bls.n	8005ff2 <HAL_DMAEx_MultiBufferStart_IT+0x156>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f040 8140 	bne.w	8006258 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8005fd8:	4b60      	ldr	r3, [pc, #384]	; (800615c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005fda:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005fdc:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005fde:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005fe0:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005fe2:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005fe4:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005fe6:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005fe8:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005fea:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005fec:	4b5b      	ldr	r3, [pc, #364]	; (800615c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005fee:	60da      	str	r2, [r3, #12]
 8005ff0:	e7a6      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 80bc 	bne.w	8006170 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>
 8005ff8:	4b58      	ldr	r3, [pc, #352]	; (800615c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005ffa:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ffc:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005ffe:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006000:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006002:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006004:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006006:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006008:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800600a:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800600c:	4b53      	ldr	r3, [pc, #332]	; (800615c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	e796      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006012:	4b53      	ldr	r3, [pc, #332]	; (8006160 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006014:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8006018:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800601c:	4299      	cmp	r1, r3
 800601e:	bf18      	it	ne
 8006020:	4281      	cmpne	r1, r0
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	4291      	cmp	r1, r2
 800602a:	bf0c      	ite	eq
 800602c:	2300      	moveq	r3, #0
 800602e:	f003 0301 	andne.w	r3, r3, #1
 8006032:	b11b      	cbz	r3, 800603c <HAL_DMAEx_MultiBufferStart_IT+0x1a0>
 8006034:	4b4b      	ldr	r3, [pc, #300]	; (8006164 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006036:	4299      	cmp	r1, r3
 8006038:	f040 818a 	bne.w	8006350 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800603c:	4b43      	ldr	r3, [pc, #268]	; (800614c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800603e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006042:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006046:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800604a:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800604c:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006050:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006052:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006054:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006056:	60d8      	str	r0, [r3, #12]
 8006058:	e770      	b.n	8005f3c <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800605a:	4b43      	ldr	r3, [pc, #268]	; (8006168 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800605c:	3a30      	subs	r2, #48	; 0x30
 800605e:	4840      	ldr	r0, [pc, #256]	; (8006160 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006060:	4299      	cmp	r1, r3
 8006062:	bf18      	it	ne
 8006064:	4281      	cmpne	r1, r0
 8006066:	bf14      	ite	ne
 8006068:	2301      	movne	r3, #1
 800606a:	2300      	moveq	r3, #0
 800606c:	4291      	cmp	r1, r2
 800606e:	bf0c      	ite	eq
 8006070:	2300      	moveq	r3, #0
 8006072:	f003 0301 	andne.w	r3, r3, #1
 8006076:	b11b      	cbz	r3, 8006080 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8006078:	4b3a      	ldr	r3, [pc, #232]	; (8006164 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800607a:	4299      	cmp	r1, r3
 800607c:	f040 81e4 	bne.w	8006448 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8006080:	f44f 6500 	mov.w	r5, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006084:	4b36      	ldr	r3, [pc, #216]	; (8006160 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006086:	4a38      	ldr	r2, [pc, #224]	; (8006168 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006088:	4838      	ldr	r0, [pc, #224]	; (800616c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800608a:	4299      	cmp	r1, r3
 800608c:	bf18      	it	ne
 800608e:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006090:	f8c2 53e0 	str.w	r5, [r2, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006094:	bf14      	ite	ne
 8006096:	2301      	movne	r3, #1
 8006098:	2300      	moveq	r3, #0
 800609a:	4281      	cmp	r1, r0
 800609c:	bf0c      	ite	eq
 800609e:	2300      	moveq	r3, #0
 80060a0:	f003 0301 	andne.w	r3, r3, #1
 80060a4:	b11b      	cbz	r3, 80060ae <HAL_DMAEx_MultiBufferStart_IT+0x212>
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80060a8:	4299      	cmp	r1, r3
 80060aa:	f040 81e6 	bne.w	800647a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80060ae:	f44f 6580 	mov.w	r5, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80060b2:	4b2d      	ldr	r3, [pc, #180]	; (8006168 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80060b4:	4a2a      	ldr	r2, [pc, #168]	; (8006160 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80060b6:	482d      	ldr	r0, [pc, #180]	; (800616c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80060b8:	4299      	cmp	r1, r3
 80060ba:	bf18      	it	ne
 80060bc:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80060be:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	4281      	cmp	r1, r0
 80060ca:	bf0c      	ite	eq
 80060cc:	2300      	moveq	r3, #0
 80060ce:	f003 0301 	andne.w	r3, r3, #1
 80060d2:	b11b      	cbz	r3, 80060dc <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80060d4:	4b23      	ldr	r3, [pc, #140]	; (8006164 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80060d6:	4299      	cmp	r1, r3
 80060d8:	f040 81ff 	bne.w	80064da <HAL_DMAEx_MultiBufferStart_IT+0x63e>
 80060dc:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80060e0:	4b21      	ldr	r3, [pc, #132]	; (8006168 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80060e2:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80060e4:	4821      	ldr	r0, [pc, #132]	; (800616c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80060e6:	4299      	cmp	r1, r3
 80060e8:	bf18      	it	ne
 80060ea:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80060ec:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80060f0:	bf14      	ite	ne
 80060f2:	2301      	movne	r3, #1
 80060f4:	2300      	moveq	r3, #0
 80060f6:	4281      	cmp	r1, r0
 80060f8:	bf0c      	ite	eq
 80060fa:	2300      	moveq	r3, #0
 80060fc:	f003 0301 	andne.w	r3, r3, #1
 8006100:	b11b      	cbz	r3, 800610a <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006104:	4299      	cmp	r1, r3
 8006106:	f040 81d0 	bne.w	80064aa <HAL_DMAEx_MultiBufferStart_IT+0x60e>
 800610a:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800610e:	4b16      	ldr	r3, [pc, #88]	; (8006168 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006110:	4a13      	ldr	r2, [pc, #76]	; (8006160 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006112:	4816      	ldr	r0, [pc, #88]	; (800616c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006114:	4299      	cmp	r1, r3
 8006116:	bf18      	it	ne
 8006118:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800611a:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800611e:	bf14      	ite	ne
 8006120:	2301      	movne	r3, #1
 8006122:	2300      	moveq	r3, #0
 8006124:	4281      	cmp	r1, r0
 8006126:	bf0c      	ite	eq
 8006128:	2300      	moveq	r3, #0
 800612a:	f003 0301 	andne.w	r3, r3, #1
 800612e:	b11b      	cbz	r3, 8006138 <HAL_DMAEx_MultiBufferStart_IT+0x29c>
 8006130:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006132:	4299      	cmp	r1, r3
 8006134:	f040 81e9 	bne.w	800650a <HAL_DMAEx_MultiBufferStart_IT+0x66e>
 8006138:	2240      	movs	r2, #64	; 0x40
 800613a:	e73d      	b.n	8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800613c:	40026470 	.word	0x40026470
 8006140:	40026070 	.word	0x40026070
 8006144:	40026010 	.word	0x40026010
 8006148:	40026410 	.word	0x40026410
 800614c:	40026400 	.word	0x40026400
 8006150:	08023268 	.word	0x08023268
 8006154:	400260b8 	.word	0x400260b8
 8006158:	40026058 	.word	0x40026058
 800615c:	40026000 	.word	0x40026000
 8006160:	40026428 	.word	0x40026428
 8006164:	40026488 	.word	0x40026488
 8006168:	40026028 	.word	0x40026028
 800616c:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006170:	4b73      	ldr	r3, [pc, #460]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006172:	4874      	ldr	r0, [pc, #464]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006174:	4a74      	ldr	r2, [pc, #464]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006176:	4299      	cmp	r1, r3
 8006178:	bf18      	it	ne
 800617a:	4281      	cmpne	r1, r0
 800617c:	bf14      	ite	ne
 800617e:	2301      	movne	r3, #1
 8006180:	2300      	moveq	r3, #0
 8006182:	4291      	cmp	r1, r2
 8006184:	bf0c      	ite	eq
 8006186:	2300      	moveq	r3, #0
 8006188:	f003 0301 	andne.w	r3, r3, #1
 800618c:	b11b      	cbz	r3, 8006196 <HAL_DMAEx_MultiBufferStart_IT+0x2fa>
 800618e:	4b6f      	ldr	r3, [pc, #444]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006190:	4299      	cmp	r1, r3
 8006192:	f040 81d2 	bne.w	800653a <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8006196:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800619a:	4b6a      	ldr	r3, [pc, #424]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800619c:	4a68      	ldr	r2, [pc, #416]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800619e:	4d6a      	ldr	r5, [pc, #424]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 80061a0:	4299      	cmp	r1, r3
 80061a2:	bf18      	it	ne
 80061a4:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061a6:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061aa:	bf14      	ite	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061b0:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061b2:	42a9      	cmp	r1, r5
 80061b4:	bf0c      	ite	eq
 80061b6:	2300      	moveq	r3, #0
 80061b8:	f003 0301 	andne.w	r3, r3, #1
 80061bc:	b11b      	cbz	r3, 80061c6 <HAL_DMAEx_MultiBufferStart_IT+0x32a>
 80061be:	4b63      	ldr	r3, [pc, #396]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80061c0:	4299      	cmp	r1, r3
 80061c2:	f040 8205 	bne.w	80065d0 <HAL_DMAEx_MultiBufferStart_IT+0x734>
 80061c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80061ca:	4b5e      	ldr	r3, [pc, #376]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 80061cc:	4a5c      	ldr	r2, [pc, #368]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 80061ce:	4d5e      	ldr	r5, [pc, #376]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 80061d0:	4299      	cmp	r1, r3
 80061d2:	bf18      	it	ne
 80061d4:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061d6:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061e0:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80061e2:	42a9      	cmp	r1, r5
 80061e4:	bf0c      	ite	eq
 80061e6:	2300      	moveq	r3, #0
 80061e8:	f003 0301 	andne.w	r3, r3, #1
 80061ec:	b11b      	cbz	r3, 80061f6 <HAL_DMAEx_MultiBufferStart_IT+0x35a>
 80061ee:	4b57      	ldr	r3, [pc, #348]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80061f0:	4299      	cmp	r1, r3
 80061f2:	f040 8253 	bne.w	800669c <HAL_DMAEx_MultiBufferStart_IT+0x800>
 80061f6:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80061fa:	4b51      	ldr	r3, [pc, #324]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 80061fc:	4a51      	ldr	r2, [pc, #324]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 80061fe:	4d52      	ldr	r5, [pc, #328]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006200:	4299      	cmp	r1, r3
 8006202:	bf18      	it	ne
 8006204:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006206:	f842 0c20 	str.w	r0, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	42a9      	cmp	r1, r5
 8006212:	bf0c      	ite	eq
 8006214:	2300      	moveq	r3, #0
 8006216:	f003 0301 	andne.w	r3, r3, #1
 800621a:	b11b      	cbz	r3, 8006224 <HAL_DMAEx_MultiBufferStart_IT+0x388>
 800621c:	4b4b      	ldr	r3, [pc, #300]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 800621e:	4299      	cmp	r1, r3
 8006220:	f040 820e 	bne.w	8006640 <HAL_DMAEx_MultiBufferStart_IT+0x7a4>
 8006224:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006228:	4b46      	ldr	r3, [pc, #280]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800622a:	4a45      	ldr	r2, [pc, #276]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800622c:	4d46      	ldr	r5, [pc, #280]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 800622e:	4299      	cmp	r1, r3
 8006230:	bf18      	it	ne
 8006232:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006234:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006238:	bf14      	ite	ne
 800623a:	2301      	movne	r3, #1
 800623c:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800623e:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006240:	42a9      	cmp	r1, r5
 8006242:	bf0c      	ite	eq
 8006244:	2300      	moveq	r3, #0
 8006246:	f003 0301 	andne.w	r3, r3, #1
 800624a:	b11b      	cbz	r3, 8006254 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 800624c:	4b3f      	ldr	r3, [pc, #252]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 800624e:	4299      	cmp	r1, r3
 8006250:	f040 8250 	bne.w	80066f4 <HAL_DMAEx_MultiBufferStart_IT+0x858>
 8006254:	2240      	movs	r2, #64	; 0x40
 8006256:	e6d9      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006258:	4b3a      	ldr	r3, [pc, #232]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800625a:	3230      	adds	r2, #48	; 0x30
 800625c:	4838      	ldr	r0, [pc, #224]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800625e:	4299      	cmp	r1, r3
 8006260:	bf18      	it	ne
 8006262:	4281      	cmpne	r1, r0
 8006264:	bf14      	ite	ne
 8006266:	2301      	movne	r3, #1
 8006268:	2300      	moveq	r3, #0
 800626a:	4291      	cmp	r1, r2
 800626c:	bf0c      	ite	eq
 800626e:	2300      	moveq	r3, #0
 8006270:	f003 0301 	andne.w	r3, r3, #1
 8006274:	b11b      	cbz	r3, 800627e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8006276:	4b35      	ldr	r3, [pc, #212]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006278:	4299      	cmp	r1, r3
 800627a:	f040 8178 	bne.w	800656e <HAL_DMAEx_MultiBufferStart_IT+0x6d2>
 800627e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006282:	4b2f      	ldr	r3, [pc, #188]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006284:	4a2f      	ldr	r2, [pc, #188]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006286:	4d30      	ldr	r5, [pc, #192]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006288:	4299      	cmp	r1, r3
 800628a:	bf18      	it	ne
 800628c:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800628e:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006292:	bf14      	ite	ne
 8006294:	2301      	movne	r3, #1
 8006296:	2300      	moveq	r3, #0
 8006298:	42a9      	cmp	r1, r5
 800629a:	bf0c      	ite	eq
 800629c:	2300      	moveq	r3, #0
 800629e:	f003 0301 	andne.w	r3, r3, #1
 80062a2:	b11b      	cbz	r3, 80062ac <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80062a4:	4b29      	ldr	r3, [pc, #164]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80062a6:	4299      	cmp	r1, r3
 80062a8:	f040 817a 	bne.w	80065a0 <HAL_DMAEx_MultiBufferStart_IT+0x704>
 80062ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80062b0:	4b24      	ldr	r3, [pc, #144]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 80062b2:	4a23      	ldr	r2, [pc, #140]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 80062b4:	4d24      	ldr	r5, [pc, #144]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 80062b6:	4299      	cmp	r1, r3
 80062b8:	bf18      	it	ne
 80062ba:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062bc:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80062c0:	bf14      	ite	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062c6:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80062c8:	42a9      	cmp	r1, r5
 80062ca:	bf0c      	ite	eq
 80062cc:	2300      	moveq	r3, #0
 80062ce:	f003 0301 	andne.w	r3, r3, #1
 80062d2:	b11b      	cbz	r3, 80062dc <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80062d4:	4b1d      	ldr	r3, [pc, #116]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80062d6:	4299      	cmp	r1, r3
 80062d8:	f040 81ca 	bne.w	8006670 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>
 80062dc:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80062e0:	4b17      	ldr	r3, [pc, #92]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 80062e2:	4a18      	ldr	r2, [pc, #96]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 80062e4:	4d18      	ldr	r5, [pc, #96]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 80062e6:	4299      	cmp	r1, r3
 80062e8:	bf18      	it	ne
 80062ea:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80062ec:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80062f0:	bf14      	ite	ne
 80062f2:	2301      	movne	r3, #1
 80062f4:	2300      	moveq	r3, #0
 80062f6:	42a9      	cmp	r1, r5
 80062f8:	bf0c      	ite	eq
 80062fa:	2300      	moveq	r3, #0
 80062fc:	f003 0301 	andne.w	r3, r3, #1
 8006300:	b11b      	cbz	r3, 800630a <HAL_DMAEx_MultiBufferStart_IT+0x46e>
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006304:	4299      	cmp	r1, r3
 8006306:	f040 817b 	bne.w	8006600 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800630a:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006310:	4a0b      	ldr	r2, [pc, #44]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006312:	4d0d      	ldr	r5, [pc, #52]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006314:	4299      	cmp	r1, r3
 8006316:	bf18      	it	ne
 8006318:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800631a:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006324:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006326:	42a9      	cmp	r1, r5
 8006328:	bf0c      	ite	eq
 800632a:	2300      	moveq	r3, #0
 800632c:	f003 0301 	andne.w	r3, r3, #1
 8006330:	b11b      	cbz	r3, 800633a <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006334:	4299      	cmp	r1, r3
 8006336:	f040 81c7 	bne.w	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800633a:	2240      	movs	r2, #64	; 0x40
 800633c:	e656      	b.n	8005fec <HAL_DMAEx_MultiBufferStart_IT+0x150>
 800633e:	bf00      	nop
 8006340:	40026428 	.word	0x40026428
 8006344:	40026028 	.word	0x40026028
 8006348:	40026088 	.word	0x40026088
 800634c:	40026488 	.word	0x40026488
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006350:	3b48      	subs	r3, #72	; 0x48
 8006352:	3018      	adds	r0, #24
 8006354:	3218      	adds	r2, #24
 8006356:	4299      	cmp	r1, r3
 8006358:	bf18      	it	ne
 800635a:	4281      	cmpne	r1, r0
 800635c:	bf14      	ite	ne
 800635e:	2301      	movne	r3, #1
 8006360:	2300      	moveq	r3, #0
 8006362:	4291      	cmp	r1, r2
 8006364:	bf0c      	ite	eq
 8006366:	2300      	moveq	r3, #0
 8006368:	f003 0301 	andne.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 81e2 	beq.w	8006736 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 8006372:	4baf      	ldr	r3, [pc, #700]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006374:	4299      	cmp	r1, r3
 8006376:	f000 81de 	beq.w	8006736 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 800637a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800637e:	4bad      	ldr	r3, [pc, #692]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006380:	4aad      	ldr	r2, [pc, #692]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006382:	4dae      	ldr	r5, [pc, #696]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006384:	4299      	cmp	r1, r3
 8006386:	bf18      	it	ne
 8006388:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800638a:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	42a9      	cmp	r1, r5
 8006396:	bf0c      	ite	eq
 8006398:	2300      	moveq	r3, #0
 800639a:	f003 0301 	andne.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 81c6 	beq.w	8006730 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80063a4:	4ba2      	ldr	r3, [pc, #648]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80063a6:	4299      	cmp	r1, r3
 80063a8:	f000 81c2 	beq.w	8006730 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80063ac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80063b0:	4ba0      	ldr	r3, [pc, #640]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80063b2:	4aa1      	ldr	r2, [pc, #644]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80063b4:	4da1      	ldr	r5, [pc, #644]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80063b6:	4299      	cmp	r1, r3
 80063b8:	bf18      	it	ne
 80063ba:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80063bc:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80063c0:	bf14      	ite	ne
 80063c2:	2301      	movne	r3, #1
 80063c4:	2300      	moveq	r3, #0
 80063c6:	42a9      	cmp	r1, r5
 80063c8:	bf0c      	ite	eq
 80063ca:	2300      	moveq	r3, #0
 80063cc:	f003 0301 	andne.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 81aa 	beq.w	800672a <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 80063d6:	4b96      	ldr	r3, [pc, #600]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80063d8:	4299      	cmp	r1, r3
 80063da:	f000 81a6 	beq.w	800672a <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 80063de:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80063e2:	4b94      	ldr	r3, [pc, #592]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80063e4:	4a94      	ldr	r2, [pc, #592]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80063e6:	4d95      	ldr	r5, [pc, #596]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80063e8:	4299      	cmp	r1, r3
 80063ea:	bf18      	it	ne
 80063ec:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80063ee:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80063f2:	bf14      	ite	ne
 80063f4:	2301      	movne	r3, #1
 80063f6:	2300      	moveq	r3, #0
 80063f8:	42a9      	cmp	r1, r5
 80063fa:	bf0c      	ite	eq
 80063fc:	2300      	moveq	r3, #0
 80063fe:	f003 0301 	andne.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 818e 	beq.w	8006724 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 8006408:	4b89      	ldr	r3, [pc, #548]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800640a:	4299      	cmp	r1, r3
 800640c:	f000 818a 	beq.w	8006724 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 8006410:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006414:	4b87      	ldr	r3, [pc, #540]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006416:	4a88      	ldr	r2, [pc, #544]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006418:	4d88      	ldr	r5, [pc, #544]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 800641a:	4299      	cmp	r1, r3
 800641c:	bf18      	it	ne
 800641e:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006420:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006424:	bf14      	ite	ne
 8006426:	2301      	movne	r3, #1
 8006428:	2300      	moveq	r3, #0
 800642a:	42a9      	cmp	r1, r5
 800642c:	bf0c      	ite	eq
 800642e:	2300      	moveq	r3, #0
 8006430:	f003 0301 	andne.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8172 	beq.w	800671e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 800643a:	4b7d      	ldr	r3, [pc, #500]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800643c:	4299      	cmp	r1, r3
 800643e:	f000 816e 	beq.w	800671e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8006442:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006446:	e579      	b.n	8005f3c <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006448:	3b48      	subs	r3, #72	; 0x48
 800644a:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 800644e:	3218      	adds	r2, #24
 8006450:	4299      	cmp	r1, r3
 8006452:	bf18      	it	ne
 8006454:	4281      	cmpne	r1, r0
 8006456:	bf14      	ite	ne
 8006458:	2301      	movne	r3, #1
 800645a:	2300      	moveq	r3, #0
 800645c:	4291      	cmp	r1, r2
 800645e:	bf0c      	ite	eq
 8006460:	2300      	moveq	r3, #0
 8006462:	f003 0301 	andne.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 816b 	beq.w	8006742 <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 800646c:	4b70      	ldr	r3, [pc, #448]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800646e:	4299      	cmp	r1, r3
 8006470:	f000 8167 	beq.w	8006742 <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 8006474:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8006478:	e604      	b.n	8006084 <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800647a:	4b6f      	ldr	r3, [pc, #444]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800647c:	486d      	ldr	r0, [pc, #436]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800647e:	4a6f      	ldr	r2, [pc, #444]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006480:	4299      	cmp	r1, r3
 8006482:	bf18      	it	ne
 8006484:	4281      	cmpne	r1, r0
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	4291      	cmp	r1, r2
 800648e:	bf0c      	ite	eq
 8006490:	2300      	moveq	r3, #0
 8006492:	f003 0301 	andne.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8159 	beq.w	800674e <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 800649c:	4b64      	ldr	r3, [pc, #400]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800649e:	4299      	cmp	r1, r3
 80064a0:	f000 8155 	beq.w	800674e <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 80064a4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80064a8:	e603      	b.n	80060b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80064aa:	4b62      	ldr	r3, [pc, #392]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80064ac:	4862      	ldr	r0, [pc, #392]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80064ae:	4a63      	ldr	r2, [pc, #396]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80064b0:	4299      	cmp	r1, r3
 80064b2:	bf18      	it	ne
 80064b4:	4281      	cmpne	r1, r0
 80064b6:	bf14      	ite	ne
 80064b8:	2301      	movne	r3, #1
 80064ba:	2300      	moveq	r3, #0
 80064bc:	4291      	cmp	r1, r2
 80064be:	bf0c      	ite	eq
 80064c0:	2300      	moveq	r3, #0
 80064c2:	f003 0301 	andne.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 813e 	beq.w	8006748 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 80064cc:	4b58      	ldr	r3, [pc, #352]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80064ce:	4299      	cmp	r1, r3
 80064d0:	f000 813a 	beq.w	8006748 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 80064d4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80064d8:	e619      	b.n	800610e <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80064da:	4b56      	ldr	r3, [pc, #344]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80064dc:	4856      	ldr	r0, [pc, #344]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80064de:	4a57      	ldr	r2, [pc, #348]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80064e0:	4299      	cmp	r1, r3
 80064e2:	bf18      	it	ne
 80064e4:	4281      	cmpne	r1, r0
 80064e6:	bf14      	ite	ne
 80064e8:	2301      	movne	r3, #1
 80064ea:	2300      	moveq	r3, #0
 80064ec:	4291      	cmp	r1, r2
 80064ee:	bf0c      	ite	eq
 80064f0:	2300      	moveq	r3, #0
 80064f2:	f003 0301 	andne.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 812c 	beq.w	8006754 <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 80064fc:	4b4c      	ldr	r3, [pc, #304]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80064fe:	4299      	cmp	r1, r3
 8006500:	f000 8128 	beq.w	8006754 <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 8006504:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8006508:	e5ea      	b.n	80060e0 <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800650a:	4b4a      	ldr	r3, [pc, #296]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800650c:	484a      	ldr	r0, [pc, #296]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800650e:	4a4b      	ldr	r2, [pc, #300]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006510:	4299      	cmp	r1, r3
 8006512:	bf18      	it	ne
 8006514:	4281      	cmpne	r1, r0
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	4291      	cmp	r1, r2
 800651e:	bf0c      	ite	eq
 8006520:	2300      	moveq	r3, #0
 8006522:	f003 0301 	andne.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 8108 	beq.w	800673c <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 800652c:	4b40      	ldr	r3, [pc, #256]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800652e:	4299      	cmp	r1, r3
 8006530:	f000 8104 	beq.w	800673c <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 8006534:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006538:	e53e      	b.n	8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800653a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800653e:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8006542:	3218      	adds	r2, #24
 8006544:	4299      	cmp	r1, r3
 8006546:	bf18      	it	ne
 8006548:	4281      	cmpne	r1, r0
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	4291      	cmp	r1, r2
 8006552:	bf0c      	ite	eq
 8006554:	2300      	moveq	r3, #0
 8006556:	f003 0301 	andne.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80fd 	beq.w	800675a <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 8006560:	4b33      	ldr	r3, [pc, #204]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006562:	4299      	cmp	r1, r3
 8006564:	f000 80f9 	beq.w	800675a <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 8006568:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800656c:	e615      	b.n	800619a <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
 800656e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006572:	3018      	adds	r0, #24
 8006574:	3218      	adds	r2, #24
 8006576:	4299      	cmp	r1, r3
 8006578:	bf18      	it	ne
 800657a:	4281      	cmpne	r1, r0
 800657c:	bf14      	ite	ne
 800657e:	2301      	movne	r3, #1
 8006580:	2300      	moveq	r3, #0
 8006582:	4291      	cmp	r1, r2
 8006584:	bf0c      	ite	eq
 8006586:	2300      	moveq	r3, #0
 8006588:	f003 0301 	andne.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80ea 	beq.w	8006766 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 8006592:	4b27      	ldr	r3, [pc, #156]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006594:	4299      	cmp	r1, r3
 8006596:	f000 80e6 	beq.w	8006766 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 800659a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800659e:	e670      	b.n	8006282 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80065a2:	4824      	ldr	r0, [pc, #144]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80065a4:	4a25      	ldr	r2, [pc, #148]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80065a6:	4299      	cmp	r1, r3
 80065a8:	bf18      	it	ne
 80065aa:	4281      	cmpne	r1, r0
 80065ac:	bf14      	ite	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	2300      	moveq	r3, #0
 80065b2:	4291      	cmp	r1, r2
 80065b4:	bf0c      	ite	eq
 80065b6:	2300      	moveq	r3, #0
 80065b8:	f003 0301 	andne.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 80de 	beq.w	800677e <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 80065c2:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80065c4:	4299      	cmp	r1, r3
 80065c6:	f000 80da 	beq.w	800677e <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 80065ca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80065ce:	e66f      	b.n	80062b0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80065d0:	4b18      	ldr	r3, [pc, #96]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80065d2:	4819      	ldr	r0, [pc, #100]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80065d4:	4a19      	ldr	r2, [pc, #100]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80065d6:	4299      	cmp	r1, r3
 80065d8:	bf18      	it	ne
 80065da:	4281      	cmpne	r1, r0
 80065dc:	bf14      	ite	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	2300      	moveq	r3, #0
 80065e2:	4291      	cmp	r1, r2
 80065e4:	bf0c      	ite	eq
 80065e6:	2300      	moveq	r3, #0
 80065e8:	f003 0301 	andne.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80c0 	beq.w	8006772 <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80065f4:	4299      	cmp	r1, r3
 80065f6:	f000 80bc 	beq.w	8006772 <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 80065fa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80065fe:	e5e4      	b.n	80061ca <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006600:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006602:	480c      	ldr	r0, [pc, #48]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006604:	4a0d      	ldr	r2, [pc, #52]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006606:	4299      	cmp	r1, r3
 8006608:	bf18      	it	ne
 800660a:	4281      	cmpne	r1, r0
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	4291      	cmp	r1, r2
 8006614:	bf0c      	ite	eq
 8006616:	2300      	moveq	r3, #0
 8006618:	f003 0301 	andne.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80b4 	beq.w	800678a <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 8006622:	4b03      	ldr	r3, [pc, #12]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006624:	4299      	cmp	r1, r3
 8006626:	f000 80b0 	beq.w	800678a <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 800662a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800662e:	e66e      	b.n	800630e <HAL_DMAEx_MultiBufferStart_IT+0x472>
 8006630:	400264a0 	.word	0x400264a0
 8006634:	40026440 	.word	0x40026440
 8006638:	40026040 	.word	0x40026040
 800663c:	400260a0 	.word	0x400260a0
 8006640:	4b55      	ldr	r3, [pc, #340]	; (8006798 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8006642:	4856      	ldr	r0, [pc, #344]	; (800679c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8006644:	4a56      	ldr	r2, [pc, #344]	; (80067a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8006646:	4299      	cmp	r1, r3
 8006648:	bf18      	it	ne
 800664a:	4281      	cmpne	r1, r0
 800664c:	bf14      	ite	ne
 800664e:	2301      	movne	r3, #1
 8006650:	2300      	moveq	r3, #0
 8006652:	4291      	cmp	r1, r2
 8006654:	bf0c      	ite	eq
 8006656:	2300      	moveq	r3, #0
 8006658:	f003 0301 	andne.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8085 	beq.w	800676c <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 8006662:	4b50      	ldr	r3, [pc, #320]	; (80067a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8006664:	4299      	cmp	r1, r3
 8006666:	f000 8081 	beq.w	800676c <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 800666a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800666e:	e5db      	b.n	8006228 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006670:	4b4a      	ldr	r3, [pc, #296]	; (800679c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8006672:	4849      	ldr	r0, [pc, #292]	; (8006798 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8006674:	4a4a      	ldr	r2, [pc, #296]	; (80067a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8006676:	4299      	cmp	r1, r3
 8006678:	bf18      	it	ne
 800667a:	4281      	cmpne	r1, r0
 800667c:	bf14      	ite	ne
 800667e:	2301      	movne	r3, #1
 8006680:	2300      	moveq	r3, #0
 8006682:	4291      	cmp	r1, r2
 8006684:	bf0c      	ite	eq
 8006686:	2300      	moveq	r3, #0
 8006688:	f003 0301 	andne.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d079      	beq.n	8006784 <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 8006690:	4b44      	ldr	r3, [pc, #272]	; (80067a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8006692:	4299      	cmp	r1, r3
 8006694:	d076      	beq.n	8006784 <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 8006696:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800669a:	e621      	b.n	80062e0 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 800669c:	4b3e      	ldr	r3, [pc, #248]	; (8006798 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 800669e:	483f      	ldr	r0, [pc, #252]	; (800679c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80066a0:	4a3f      	ldr	r2, [pc, #252]	; (80067a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80066a2:	4299      	cmp	r1, r3
 80066a4:	bf18      	it	ne
 80066a6:	4281      	cmpne	r1, r0
 80066a8:	bf14      	ite	ne
 80066aa:	2301      	movne	r3, #1
 80066ac:	2300      	moveq	r3, #0
 80066ae:	4291      	cmp	r1, r2
 80066b0:	bf0c      	ite	eq
 80066b2:	2300      	moveq	r3, #0
 80066b4:	f003 0301 	andne.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d05d      	beq.n	8006778 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 80066bc:	4b39      	ldr	r3, [pc, #228]	; (80067a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80066be:	4299      	cmp	r1, r3
 80066c0:	d05a      	beq.n	8006778 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 80066c2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80066c6:	e598      	b.n	80061fa <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80066c8:	4b34      	ldr	r3, [pc, #208]	; (800679c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80066ca:	4833      	ldr	r0, [pc, #204]	; (8006798 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80066cc:	4a34      	ldr	r2, [pc, #208]	; (80067a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80066ce:	4299      	cmp	r1, r3
 80066d0:	bf18      	it	ne
 80066d2:	4281      	cmpne	r1, r0
 80066d4:	bf14      	ite	ne
 80066d6:	2301      	movne	r3, #1
 80066d8:	2300      	moveq	r3, #0
 80066da:	4291      	cmp	r1, r2
 80066dc:	bf0c      	ite	eq
 80066de:	2300      	moveq	r3, #0
 80066e0:	f003 0301 	andne.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d053      	beq.n	8006790 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 80066e8:	4b2e      	ldr	r3, [pc, #184]	; (80067a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80066ea:	4299      	cmp	r1, r3
 80066ec:	d050      	beq.n	8006790 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 80066ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80066f2:	e47b      	b.n	8005fec <HAL_DMAEx_MultiBufferStart_IT+0x150>
 80066f4:	4b29      	ldr	r3, [pc, #164]	; (800679c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80066f6:	4828      	ldr	r0, [pc, #160]	; (8006798 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80066f8:	4a29      	ldr	r2, [pc, #164]	; (80067a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80066fa:	4299      	cmp	r1, r3
 80066fc:	bf18      	it	ne
 80066fe:	4281      	cmpne	r1, r0
 8006700:	bf14      	ite	ne
 8006702:	2301      	movne	r3, #1
 8006704:	2300      	moveq	r3, #0
 8006706:	4291      	cmp	r1, r2
 8006708:	bf0c      	ite	eq
 800670a:	2300      	moveq	r3, #0
 800670c:	f003 0301 	andne.w	r3, r3, #1
 8006710:	b333      	cbz	r3, 8006760 <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 8006712:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8006714:	4299      	cmp	r1, r3
 8006716:	d023      	beq.n	8006760 <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 8006718:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800671c:	e476      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x170>
 800671e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006722:	e40b      	b.n	8005f3c <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006724:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006728:	e674      	b.n	8006414 <HAL_DMAEx_MultiBufferStart_IT+0x578>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800672a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800672e:	e658      	b.n	80063e2 <HAL_DMAEx_MultiBufferStart_IT+0x546>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006730:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006734:	e63c      	b.n	80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x514>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006736:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800673a:	e620      	b.n	800637e <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800673c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006740:	e43a      	b.n	8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006742:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8006746:	e49d      	b.n	8006084 <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006748:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800674c:	e4df      	b.n	800610e <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800674e:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8006752:	e4ae      	b.n	80060b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006754:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8006758:	e4c2      	b.n	80060e0 <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800675a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800675e:	e51c      	b.n	800619a <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006760:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006764:	e452      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006766:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800676a:	e58a      	b.n	8006282 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800676c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006770:	e55a      	b.n	8006228 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006772:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006776:	e528      	b.n	80061ca <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006778:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800677c:	e53d      	b.n	80061fa <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800677e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006782:	e595      	b.n	80062b0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006784:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006788:	e5aa      	b.n	80062e0 <HAL_DMAEx_MultiBufferStart_IT+0x444>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800678a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800678e:	e5be      	b.n	800630e <HAL_DMAEx_MultiBufferStart_IT+0x472>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006794:	e42a      	b.n	8005fec <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8006796:	bf00      	nop
 8006798:	40026040 	.word	0x40026040
 800679c:	40026440 	.word	0x40026440
 80067a0:	400260a0 	.word	0x400260a0
 80067a4:	400264a0 	.word	0x400264a0

080067a8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80067a8:	b530      	push	{r4, r5, lr}
 80067aa:	4605      	mov	r5, r0
 80067ac:	b083      	sub	sp, #12
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80067ae:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80067b2:	2200      	movs	r2, #0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80067b4:	682b      	ldr	r3, [r5, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80067b6:	2001      	movs	r0, #1
  __IO uint32_t tmpreg = 0;
 80067b8:	9201      	str	r2, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80067ba:	591a      	ldr	r2, [r3, r4]
 80067bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80067c0:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 80067c2:	591b      	ldr	r3, [r3, r4]
 80067c4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80067c6:	f7fe f8f7 	bl	80049b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	9a01      	ldr	r2, [sp, #4]
 80067ce:	511a      	str	r2, [r3, r4]
}
 80067d0:	b003      	add	sp, #12
 80067d2:	bd30      	pop	{r4, r5, pc}

080067d4 <ETH_MACDMAConfig>:
{
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80067d8:	2900      	cmp	r1, #0
 80067da:	d164      	bne.n	80068a6 <ETH_MACDMAConfig+0xd2>
 80067dc:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 80067e0:	430b      	orrs	r3, r1
 80067e2:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  tmpreg = (heth->Instance)->MACCR;
 80067e6:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80067e8:	2001      	movs	r0, #1
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80067ea:	69e5      	ldr	r5, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 80067ec:	6816      	ldr	r6, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80067ee:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <ETH_MACDMAConfig+0xe4>)
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80067f0:	2d00      	cmp	r5, #0
    tmpreg = (heth->Instance)->DMAOMR;
 80067f2:	f241 0518 	movw	r5, #4120	; 0x1018
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80067f6:	ea03 0306 	and.w	r3, r3, r6
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80067fa:	f04f 0600 	mov.w	r6, #0
 80067fe:	ea43 0301 	orr.w	r3, r3, r1
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8006802:	bf14      	ite	ne
 8006804:	4631      	movne	r1, r6
 8006806:	f44f 6180 	moveq.w	r1, #1024	; 0x400
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800680a:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800680c:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800680e:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006810:	f7fe f8d2 	bl	80049b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8006814:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006816:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8006818:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800681a:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800681c:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800681e:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8006820:	f7fe f8ca 	bl	80049b8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8006824:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8006826:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800682a:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800682c:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800682e:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8006830:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8006832:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8006834:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8006836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800683a:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800683c:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800683e:	f7fe f8bb 	bl	80049b8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8006842:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006844:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8006846:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8006848:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800684a:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800684c:	f7fe f8b4 	bl	80049b8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8006850:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006852:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8006854:	4919      	ldr	r1, [pc, #100]	; (80068bc <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8006856:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8006858:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800685a:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800685c:	4a18      	ldr	r2, [pc, #96]	; (80068c0 <ETH_MACDMAConfig+0xec>)
 800685e:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8006860:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8006862:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006864:	f7fe f8a8 	bl	80049b8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8006868:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800686a:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800686c:	4a15      	ldr	r2, [pc, #84]	; (80068c4 <ETH_MACDMAConfig+0xf0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800686e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8006870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006874:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8006876:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8006878:	f7fe f89e 	bl	80049b8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800687c:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800687e:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 8006880:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006884:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8006886:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006888:	d105      	bne.n	8006896 <ETH_MACDMAConfig+0xc2>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800688a:	f241 011c 	movw	r1, #4124	; 0x101c
 800688e:	4a0e      	ldr	r2, [pc, #56]	; (80068c8 <ETH_MACDMAConfig+0xf4>)
 8006890:	5858      	ldr	r0, [r3, r1]
 8006892:	4302      	orrs	r2, r0
 8006894:	505a      	str	r2, [r3, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006896:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8006898:	490c      	ldr	r1, [pc, #48]	; (80068cc <ETH_MACDMAConfig+0xf8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800689a:	8898      	ldrh	r0, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800689c:	4a0c      	ldr	r2, [pc, #48]	; (80068d0 <ETH_MACDMAConfig+0xfc>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800689e:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80068a0:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80068a2:	6013      	str	r3, [r2, #0]
}
 80068a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80068a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 80068aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068ae:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 80068b2:	e9c0 3202 	strd	r3, r2, [r0, #8]
 80068b6:	e796      	b.n	80067e6 <ETH_MACDMAConfig+0x12>
 80068b8:	ff20810f 	.word	0xff20810f
 80068bc:	f8de3f23 	.word	0xf8de3f23
 80068c0:	02200004 	.word	0x02200004
 80068c4:	02c12080 	.word	0x02c12080
 80068c8:	00010040 	.word	0x00010040
 80068cc:	40028040 	.word	0x40028040
 80068d0:	40028044 	.word	0x40028044

080068d4 <HAL_ETH_DMATxDescListInit>:
{
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80068d8:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80068dc:	2c01      	cmp	r4, #1
 80068de:	d03f      	beq.n	8006960 <HAL_ETH_DMATxDescListInit+0x8c>
 80068e0:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80068e2:	2402      	movs	r4, #2
  heth->TxDesc = DMATxDescTab;
 80068e4:	62c1      	str	r1, [r0, #44]	; 0x2c
  __HAL_LOCK(heth);
 80068e6:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80068ea:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 80068ee:	b34b      	cbz	r3, 8006944 <HAL_ETH_DMATxDescListInit+0x70>
 80068f0:	f103 3eff 	add.w	lr, r3, #4294967295
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80068f4:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80068f8:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 80068fc:	460c      	mov	r4, r1
 80068fe:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8006900:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006904:	e007      	b.n	8006916 <HAL_ETH_DMATxDescListInit+0x42>
  for(i=0; i < TxBuffCount; i++)
 8006906:	42b3      	cmp	r3, r6
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8006908:	60e6      	str	r6, [r4, #12]
 800690a:	f105 0501 	add.w	r5, r5, #1
 800690e:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8006912:	4634      	mov	r4, r6
  for(i=0; i < TxBuffCount; i++)
 8006914:	d016      	beq.n	8006944 <HAL_ETH_DMATxDescListInit+0x70>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8006916:	f104 0620 	add.w	r6, r4, #32
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800691a:	f8c4 c000 	str.w	ip, [r4]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800691e:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006920:	f1b8 0f00 	cmp.w	r8, #0
 8006924:	d103      	bne.n	800692e <HAL_ETH_DMATxDescListInit+0x5a>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8006926:	6827      	ldr	r7, [r4, #0]
 8006928:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 800692c:	6027      	str	r7, [r4, #0]
    if(i < (TxBuffCount-1))
 800692e:	4575      	cmp	r5, lr
 8006930:	d3e9      	bcc.n	8006906 <HAL_ETH_DMATxDescListInit+0x32>
 8006932:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8006936:	60e1      	str	r1, [r4, #12]
 8006938:	3501      	adds	r5, #1
 800693a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 800693e:	42b3      	cmp	r3, r6
 8006940:	4634      	mov	r4, r6
 8006942:	d1e8      	bne.n	8006916 <HAL_ETH_DMATxDescListInit+0x42>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8006944:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 8006946:	2300      	movs	r3, #0
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8006948:	f241 0210 	movw	r2, #4112	; 0x1010
  heth->State= HAL_ETH_STATE_READY;
 800694c:	2401      	movs	r4, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800694e:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 8006950:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 8006952:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006956:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 800695a:	4610      	mov	r0, r2
 800695c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 8006960:	2202      	movs	r2, #2
}
 8006962:	4610      	mov	r0, r2
 8006964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006968 <HAL_ETH_DMARxDescListInit>:
{
 8006968:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800696a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800696e:	2c01      	cmp	r4, #1
 8006970:	d038      	beq.n	80069e4 <HAL_ETH_DMARxDescListInit+0x7c>
 8006972:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8006974:	2402      	movs	r4, #2
  heth->RxDesc = DMARxDescTab; 
 8006976:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 8006978:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800697c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 8006980:	b31b      	cbz	r3, 80069ca <HAL_ETH_DMARxDescListInit+0x62>
 8006982:	f103 3eff 	add.w	lr, r3, #4294967295
 8006986:	460c      	mov	r4, r1
 8006988:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 800698c:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800698e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8006992:	f244 57f4 	movw	r7, #17908	; 0x45f4
 8006996:	e007      	b.n	80069a8 <HAL_ETH_DMARxDescListInit+0x40>
  for(i=0; i < RxBuffCount; i++)
 8006998:	42b3      	cmp	r3, r6
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800699a:	60e6      	str	r6, [r4, #12]
 800699c:	f105 0501 	add.w	r5, r5, #1
 80069a0:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 80069a4:	4634      	mov	r4, r6
  for(i=0; i < RxBuffCount; i++)
 80069a6:	d010      	beq.n	80069ca <HAL_ETH_DMARxDescListInit+0x62>
    if(i < (RxBuffCount-1))
 80069a8:	4575      	cmp	r5, lr
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80069aa:	f8c4 c000 	str.w	ip, [r4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80069ae:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80069b2:	e9c4 7201 	strd	r7, r2, [r4, #4]
    if(i < (RxBuffCount-1))
 80069b6:	d3ef      	bcc.n	8006998 <HAL_ETH_DMARxDescListInit+0x30>
 80069b8:	f104 0620 	add.w	r6, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80069bc:	60e1      	str	r1, [r4, #12]
 80069be:	3501      	adds	r5, #1
 80069c0:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < RxBuffCount; i++)
 80069c4:	42b3      	cmp	r3, r6
 80069c6:	4634      	mov	r4, r6
 80069c8:	d1ee      	bne.n	80069a8 <HAL_ETH_DMARxDescListInit+0x40>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80069ca:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 80069cc:	2300      	movs	r3, #0
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80069ce:	f241 020c 	movw	r2, #4108	; 0x100c
  heth->State= HAL_ETH_STATE_READY;
 80069d2:	2401      	movs	r4, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80069d4:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 80069d6:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 80069d8:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80069dc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80069e0:	4610      	mov	r0, r2
 80069e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 80069e4:	2202      	movs	r2, #2
}
 80069e6:	4610      	mov	r0, r2
 80069e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ea:	bf00      	nop

080069ec <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80069ec:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d065      	beq.n	8006ac0 <HAL_ETH_TransmitFrame+0xd4>
 80069f4:	4602      	mov	r2, r0
  heth->State = HAL_ETH_STATE_BUSY;
 80069f6:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 80069f8:	2001      	movs	r0, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80069fa:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_LOCK(heth);
 80069fe:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
  if (FrameLength == 0) 
 8006a02:	2900      	cmp	r1, #0
 8006a04:	d033      	beq.n	8006a6e <HAL_ETH_TransmitFrame+0x82>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006a06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
 8006a08:	b4f0      	push	{r4, r5, r6, r7}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006a0a:	681c      	ldr	r4, [r3, #0]
 8006a0c:	2c00      	cmp	r4, #0
 8006a0e:	db59      	blt.n	8006ac4 <HAL_ETH_TransmitFrame+0xd8>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8006a10:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8006a14:	4281      	cmp	r1, r0
 8006a16:	d931      	bls.n	8006a7c <HAL_ETH_TransmitFrame+0x90>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8006a18:	4d31      	ldr	r5, [pc, #196]	; (8006ae0 <HAL_ETH_TransmitFrame+0xf4>)
 8006a1a:	fba5 4501 	umull	r4, r5, r5, r1
 8006a1e:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8006a20:	fb00 1015 	mls	r0, r0, r5, r1
 8006a24:	b340      	cbz	r0, 8006a78 <HAL_ETH_TransmitFrame+0x8c>
      bufcount++;
 8006a26:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8006a28:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8006a2c:	4c2d      	ldr	r4, [pc, #180]	; (8006ae4 <HAL_ETH_TransmitFrame+0xf8>)
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8006a2e:	2000      	movs	r0, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006a30:	f240 56f4 	movw	r6, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8006a34:	fb04 1105 	mla	r1, r4, r5, r1
      if (i == (bufcount-1))
 8006a38:	1e6f      	subs	r7, r5, #1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8006a3a:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8006a3e:	681c      	ldr	r4, [r3, #0]
 8006a40:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 8006a44:	601c      	str	r4, [r3, #0]
      if (i == 0) 
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d044      	beq.n	8006ad4 <HAL_ETH_TransmitFrame+0xe8>
      if (i == (bufcount-1))
 8006a4a:	4287      	cmp	r7, r0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006a4c:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8006a4e:	d104      	bne.n	8006a5a <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8006a50:	681c      	ldr	r4, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8006a52:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8006a54:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8006a58:	601c      	str	r4, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006a5a:	681c      	ldr	r4, [r3, #0]
    for (i=0; i< bufcount; i++)
 8006a5c:	3001      	adds	r0, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006a5e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8006a62:	42a8      	cmp	r0, r5
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006a64:	601c      	str	r4, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006a66:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8006a68:	d1e9      	bne.n	8006a3e <HAL_ETH_TransmitFrame+0x52>
 8006a6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a6c:	e013      	b.n	8006a96 <HAL_ETH_TransmitFrame+0xaa>
    heth->State = HAL_ETH_STATE_READY;
 8006a6e:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006a72:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 8006a76:	4770      	bx	lr
  if (bufcount == 1)
 8006a78:	2d01      	cmp	r5, #1
 8006a7a:	d1d5      	bne.n	8006a28 <HAL_ETH_TransmitFrame+0x3c>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8006a7c:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8006a7e:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006a82:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8006a84:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8006a88:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8006a8a:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006a8c:	6819      	ldr	r1, [r3, #0]
 8006a8e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006a92:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006a94:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8006a96:	6813      	ldr	r3, [r2, #0]
 8006a98:	f241 0114 	movw	r1, #4116	; 0x1014
 8006a9c:	5858      	ldr	r0, [r3, r1]
 8006a9e:	0740      	lsls	r0, r0, #29
 8006aa0:	d505      	bpl.n	8006aae <HAL_ETH_TransmitFrame+0xc2>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8006aa2:	2504      	movs	r5, #4
    (heth->Instance)->DMATPDR = 0;
 8006aa4:	f241 0004 	movw	r0, #4100	; 0x1004
 8006aa8:	2400      	movs	r4, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8006aaa:	505d      	str	r5, [r3, r1]
    (heth->Instance)->DMATPDR = 0;
 8006aac:	501c      	str	r4, [r3, r0]
  __HAL_UNLOCK(heth);
 8006aae:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8006ab0:	2101      	movs	r1, #1
  return HAL_OK;
 8006ab2:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8006ab4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006ab8:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8006abc:	bcf0      	pop	{r4, r5, r6, r7}
 8006abe:	4770      	bx	lr
  __HAL_LOCK(heth);
 8006ac0:	2002      	movs	r0, #2
}
 8006ac2:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8006ac4:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 8006ac6:	2300      	movs	r3, #0
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8006ac8:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006acc:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8006ad0:	bcf0      	pop	{r4, r5, r6, r7}
 8006ad2:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8006ad4:	681c      	ldr	r4, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006ad6:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8006ad8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006adc:	601c      	str	r4, [r3, #0]
 8006ade:	e7bc      	b.n	8006a5a <HAL_ETH_TransmitFrame+0x6e>
 8006ae0:	ac02b00b 	.word	0xac02b00b
 8006ae4:	fffffa0c 	.word	0xfffffa0c

08006ae8 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8006ae8:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 8006aec:	2a01      	cmp	r2, #1
 8006aee:	d032      	beq.n	8006b56 <HAL_ETH_GetReceivedFrame_IT+0x6e>
 8006af0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006af2:	4603      	mov	r3, r0
 8006af4:	2101      	movs	r1, #1
  uint32_t descriptorscancounter = 0;
 8006af6:	2000      	movs	r0, #0
{
 8006af8:	b470      	push	{r4, r5, r6}
  heth->State = HAL_ETH_STATE_BUSY;
 8006afa:	2402      	movs	r4, #2
  __HAL_LOCK(heth);
 8006afc:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.SegCount = 1;   
 8006b00:	460d      	mov	r5, r1
  heth->State = HAL_ETH_STATE_BUSY;
 8006b02:	f883 4044 	strb.w	r4, [r3, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8006b06:	6811      	ldr	r1, [r2, #0]
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	db17      	blt.n	8006b3c <HAL_ETH_GetReceivedFrame_IT+0x54>
 8006b0c:	2804      	cmp	r0, #4
    descriptorscancounter++;
 8006b0e:	f100 0001 	add.w	r0, r0, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8006b12:	d013      	beq.n	8006b3c <HAL_ETH_GetReceivedFrame_IT+0x54>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8006b14:	6811      	ldr	r1, [r2, #0]
 8006b16:	68d4      	ldr	r4, [r2, #12]
 8006b18:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8006b1c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006b20:	d014      	beq.n	8006b4c <HAL_ETH_GetReceivedFrame_IT+0x64>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8006b22:	6816      	ldr	r6, [r2, #0]
 8006b24:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006b26:	f416 7f40 	tst.w	r6, #768	; 0x300
 8006b2a:	f101 0101 	add.w	r1, r1, #1
 8006b2e:	d114      	bne.n	8006b5a <HAL_ETH_GetReceivedFrame_IT+0x72>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8006b30:	4622      	mov	r2, r4
      (heth->RxFrameInfos.SegCount)++;
 8006b32:	6399      	str	r1, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8006b34:	629c      	str	r4, [r3, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8006b36:	6811      	ldr	r1, [r2, #0]
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	dae7      	bge.n	8006b0c <HAL_ETH_GetReceivedFrame_IT+0x24>
  heth->State = HAL_ETH_STATE_READY;
 8006b3c:	2001      	movs	r0, #1
  __HAL_UNLOCK(heth);
 8006b3e:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8006b40:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8006b48:	bc70      	pop	{r4, r5, r6}
 8006b4a:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8006b4e:	4622      	mov	r2, r4
      heth->RxFrameInfos.SegCount = 1;   
 8006b50:	639d      	str	r5, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8006b52:	629c      	str	r4, [r3, #40]	; 0x28
 8006b54:	e7ef      	b.n	8006b36 <HAL_ETH_GetReceivedFrame_IT+0x4e>
  __HAL_LOCK(heth);
 8006b56:	2002      	movs	r0, #2
}
 8006b58:	4770      	bx	lr
      if ((heth->RxFrameInfos.SegCount) == 1)
 8006b5a:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 8006b5c:	e9c3 210d 	strd	r2, r1, [r3, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8006b60:	d010      	beq.n	8006b84 <HAL_ETH_GetReceivedFrame_IT+0x9c>
 8006b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8006b64:	6812      	ldr	r2, [r2, #0]
      heth->State = HAL_ETH_STATE_READY;
 8006b66:	2501      	movs	r5, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8006b68:	6888      	ldr	r0, [r1, #8]
      __HAL_UNLOCK(heth);
 8006b6a:	2100      	movs	r1, #0
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8006b6c:	f3c2 420d 	ubfx	r2, r2, #16, #14
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8006b70:	629c      	str	r4, [r3, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8006b72:	6418      	str	r0, [r3, #64]	; 0x40
      return HAL_OK;
 8006b74:	4608      	mov	r0, r1
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8006b76:	3a04      	subs	r2, #4
      heth->State = HAL_ETH_STATE_READY;
 8006b78:	f883 5044 	strb.w	r5, [r3, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8006b7c:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8006b80:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_OK;
 8006b82:	e7e1      	b.n	8006b48 <HAL_ETH_GetReceivedFrame_IT+0x60>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8006b84:	4611      	mov	r1, r2
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
 8006b88:	e7ec      	b.n	8006b64 <HAL_ETH_GetReceivedFrame_IT+0x7c>
 8006b8a:	bf00      	nop

08006b8c <HAL_ETH_TxCpltCallback>:
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop

08006b90 <HAL_ETH_ErrorCallback>:
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop

08006b94 <HAL_ETH_IRQHandler>:
{
 8006b94:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8006b96:	6803      	ldr	r3, [r0, #0]
 8006b98:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8006b9c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8006b9e:	599d      	ldr	r5, [r3, r6]
 8006ba0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006ba4:	d123      	bne.n	8006bee <HAL_ETH_IRQHandler+0x5a>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8006ba6:	599a      	ldr	r2, [r3, r6]
 8006ba8:	07d2      	lsls	r2, r2, #31
 8006baa:	d416      	bmi.n	8006bda <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8006bac:	f241 0514 	movw	r5, #4116	; 0x1014
 8006bb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006bb4:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8006bb6:	595b      	ldr	r3, [r3, r5]
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	d400      	bmi.n	8006bbe <HAL_ETH_IRQHandler+0x2a>
}
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_ErrorCallback(heth);
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f7ff ffe6 	bl	8006b90 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8006bc4:	6821      	ldr	r1, [r4, #0]
 8006bc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8006bca:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 8006bcc:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8006bce:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 8006bd0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8006bd8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_TxCpltCallback(heth);
 8006bda:	f7ff ffd7 	bl	8006b8c <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8006bde:	2201      	movs	r2, #1
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8006be4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006be8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006bec:	e7de      	b.n	8006bac <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 8006bee:	f008 f80b 	bl	800ec08 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 8006bf6:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 8006bf8:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8006bfa:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8006bfc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006c00:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006c04:	e7d2      	b.n	8006bac <HAL_ETH_IRQHandler+0x18>
 8006c06:	bf00      	nop

08006c08 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006c08:	8a03      	ldrh	r3, [r0, #16]
 8006c0a:	2b20      	cmp	r3, #32
{
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4604      	mov	r4, r0
 8006c10:	460d      	mov	r5, r1
 8006c12:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006c14:	d833      	bhi.n	8006c7e <HAL_ETH_ReadPHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8006c16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006c1a:	2b82      	cmp	r3, #130	; 0x82
 8006c1c:	d038      	beq.n	8006c90 <HAL_ETH_ReadPHYRegister+0x88>
  tmpreg = heth->Instance->MACMIIAR;
 8006c1e:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8006c20:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8006c22:	2282      	movs	r2, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8006c24:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8006c28:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006c2c:	8a22      	ldrh	r2, [r4, #16]
 8006c2e:	f043 0301 	orr.w	r3, r3, #1
  tmpreg = heth->Instance->MACMIIAR;
 8006c32:	6901      	ldr	r1, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006c34:	02d2      	lsls	r2, r2, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8006c36:	f001 011c 	and.w	r1, r1, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	430b      	orrs	r3, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8006c3e:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 8006c40:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8006c42:	f7fd feb3 	bl	80049ac <HAL_GetTick>
 8006c46:	4605      	mov	r5, r0
 8006c48:	e004      	b.n	8006c54 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006c4e:	f010 0001 	ands.w	r0, r0, #1
 8006c52:	d00d      	beq.n	8006c70 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8006c54:	f7fd feaa 	bl	80049ac <HAL_GetTick>
 8006c58:	1b40      	subs	r0, r0, r5
 8006c5a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8006c5e:	d3f4      	bcc.n	8006c4a <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8006c60:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8006c62:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006c64:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8006c66:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8006c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006c70:	695b      	ldr	r3, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 8006c72:	2201      	movs	r2, #1
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8006c78:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 8006c7c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006c7e:	f240 5116 	movw	r1, #1302	; 0x516
 8006c82:	4804      	ldr	r0, [pc, #16]	; (8006c94 <HAL_ETH_ReadPHYRegister+0x8c>)
 8006c84:	f7fb fce4 	bl	8002650 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8006c88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006c8c:	2b82      	cmp	r3, #130	; 0x82
 8006c8e:	d1c6      	bne.n	8006c1e <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 8006c90:	2002      	movs	r0, #2
}
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	080232a4 	.word	0x080232a4

08006c98 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006c98:	8a03      	ldrh	r3, [r0, #16]
 8006c9a:	2b20      	cmp	r3, #32
{
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006ca4:	d832      	bhi.n	8006d0c <HAL_ETH_WritePHYRegister+0x74>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8006ca6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006caa:	2b42      	cmp	r3, #66	; 0x42
 8006cac:	d037      	beq.n	8006d1e <HAL_ETH_WritePHYRegister+0x86>
  tmpreg = heth->Instance->MACMIIAR;
 8006cae:	6821      	ldr	r1, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8006cb0:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8006cb2:	2242      	movs	r2, #66	; 0x42
 8006cb4:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8006cb6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8006cba:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006cbe:	8a22      	ldrh	r2, [r4, #16]
 8006cc0:	f043 0303 	orr.w	r3, r3, #3
  tmpreg = heth->Instance->MACMIIAR;
 8006cc4:	6908      	ldr	r0, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006cc6:	02d2      	lsls	r2, r2, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8006cc8:	614e      	str	r6, [r1, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8006cca:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006cce:	b292      	uxth	r2, r2
 8006cd0:	4303      	orrs	r3, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8006cd2:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 8006cd4:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 8006cd6:	f7fd fe69 	bl	80049ac <HAL_GetTick>
 8006cda:	4605      	mov	r5, r0
 8006cdc:	e004      	b.n	8006ce8 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006ce2:	f010 0001 	ands.w	r0, r0, #1
 8006ce6:	d00d      	beq.n	8006d04 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8006ce8:	f7fd fe60 	bl	80049ac <HAL_GetTick>
 8006cec:	1b40      	subs	r0, r0, r5
 8006cee:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8006cf2:	d3f4      	bcc.n	8006cde <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 8006cf4:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8006cf6:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006cf8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8006cfa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8006cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006d0c:	f240 515e 	movw	r1, #1374	; 0x55e
 8006d10:	4804      	ldr	r0, [pc, #16]	; (8006d24 <HAL_ETH_WritePHYRegister+0x8c>)
 8006d12:	f7fb fc9d 	bl	8002650 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8006d16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d1a:	2b42      	cmp	r3, #66	; 0x42
 8006d1c:	d1c7      	bne.n	8006cae <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 8006d1e:	2002      	movs	r0, #2
}
 8006d20:	bd70      	pop	{r4, r5, r6, pc}
 8006d22:	bf00      	nop
 8006d24:	080232a4 	.word	0x080232a4

08006d28 <HAL_ETH_Init>:
{
 8006d28:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 8006d2a:	2300      	movs	r3, #0
{
 8006d2c:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 8006d2e:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f000 80bb 	beq.w	8006eac <HAL_ETH_Init+0x184>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8006d36:	6843      	ldr	r3, [r0, #4]
 8006d38:	4604      	mov	r4, r0
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	f200 8092 	bhi.w	8006e64 <HAL_ETH_Init+0x13c>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8006d40:	69a3      	ldr	r3, [r4, #24]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	f200 8085 	bhi.w	8006e52 <HAL_ETH_Init+0x12a>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8006d48:	69e3      	ldr	r3, [r4, #28]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d878      	bhi.n	8006e40 <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8006d4e:	6a23      	ldr	r3, [r4, #32]
 8006d50:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8006d54:	f040 8095 	bne.w	8006e82 <HAL_ETH_Init+0x15a>
  if(heth->State == HAL_ETH_STATE_RESET)
 8006d58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8088 	beq.w	8006e76 <HAL_ETH_Init+0x14e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d66:	4b90      	ldr	r3, [pc, #576]	; (8006fa8 <HAL_ETH_Init+0x280>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8006d68:	6821      	ldr	r1, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006d6c:	488f      	ldr	r0, [pc, #572]	; (8006fac <HAL_ETH_Init+0x284>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8006d6e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d76:	645a      	str	r2, [r3, #68]	; 0x44
 8006d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d7e:	9301      	str	r3, [sp, #4]
 8006d80:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006d82:	6843      	ldr	r3, [r0, #4]
 8006d84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d88:	6043      	str	r3, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006d8a:	6843      	ldr	r3, [r0, #4]
 8006d8c:	6a22      	ldr	r2, [r4, #32]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	6043      	str	r3, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8006d92:	680b      	ldr	r3, [r1, #0]
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8006d9a:	f7fd fe07 	bl	80049ac <HAL_GetTick>
 8006d9e:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006da0:	e005      	b.n	8006dae <HAL_ETH_Init+0x86>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8006da2:	f7fd fe03 	bl	80049ac <HAL_GetTick>
 8006da6:	1b40      	subs	r0, r0, r5
 8006da8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8006dac:	d875      	bhi.n	8006e9a <HAL_ETH_Init+0x172>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006db4:	6812      	ldr	r2, [r2, #0]
 8006db6:	07d0      	lsls	r0, r2, #31
 8006db8:	d4f3      	bmi.n	8006da2 <HAL_ETH_Init+0x7a>
  tempreg = (heth->Instance)->MACMIIAR;
 8006dba:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8006dbc:	f002 fcc6 	bl	800974c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8006dc0:	4b7b      	ldr	r3, [pc, #492]	; (8006fb0 <HAL_ETH_Init+0x288>)
 8006dc2:	4a7c      	ldr	r2, [pc, #496]	; (8006fb4 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8006dc4:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8006dc8:	4403      	add	r3, r0
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d972      	bls.n	8006eb4 <HAL_ETH_Init+0x18c>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8006dce:	4b7a      	ldr	r3, [pc, #488]	; (8006fb8 <HAL_ETH_Init+0x290>)
 8006dd0:	4a7a      	ldr	r2, [pc, #488]	; (8006fbc <HAL_ETH_Init+0x294>)
 8006dd2:	4403      	add	r3, r0
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d87a      	bhi.n	8006ece <HAL_ETH_Init+0x1a6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8006dd8:	f045 050c 	orr.w	r5, r5, #12
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8006ddc:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8006dde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006de2:	2100      	movs	r1, #0
 8006de4:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8006de6:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8006de8:	f7ff ff56 	bl	8006c98 <HAL_ETH_WritePHYRegister>
 8006dec:	4605      	mov	r5, r0
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d163      	bne.n	8006eba <HAL_ETH_Init+0x192>
  HAL_Delay(PHY_RESET_DELAY);
 8006df2:	20ff      	movs	r0, #255	; 0xff
 8006df4:	f7fd fde0 	bl	80049b8 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006df8:	6863      	ldr	r3, [r4, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d176      	bne.n	8006eec <HAL_ETH_Init+0x1c4>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8006dfe:	68a3      	ldr	r3, [r4, #8]
 8006e00:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8006e04:	f040 8098 	bne.w	8006f38 <HAL_ETH_Init+0x210>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8006e08:	68e3      	ldr	r3, [r4, #12]
 8006e0a:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006e0e:	f040 808c 	bne.w	8006f2a <HAL_ETH_Init+0x202>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8006e12:	08db      	lsrs	r3, r3, #3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8006e14:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8006e16:	2100      	movs	r1, #0
 8006e18:	4620      	mov	r0, r4
 8006e1a:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8006e1e:	b292      	uxth	r2, r2
 8006e20:	f7ff ff3a 	bl	8006c98 <HAL_ETH_WritePHYRegister>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d148      	bne.n	8006eba <HAL_ETH_Init+0x192>
    HAL_Delay(PHY_CONFIG_DELAY);
 8006e28:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006e2c:	f7fd fdc4 	bl	80049b8 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8006e30:	2100      	movs	r1, #0
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7ff fcce 	bl	80067d4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8006e3e:	e032      	b.n	8006ea6 <HAL_ETH_Init+0x17e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8006e40:	21e0      	movs	r1, #224	; 0xe0
 8006e42:	485f      	ldr	r0, [pc, #380]	; (8006fc0 <HAL_ETH_Init+0x298>)
 8006e44:	f7fb fc04 	bl	8002650 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8006e48:	6a23      	ldr	r3, [r4, #32]
 8006e4a:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8006e4e:	d083      	beq.n	8006d58 <HAL_ETH_Init+0x30>
 8006e50:	e017      	b.n	8006e82 <HAL_ETH_Init+0x15a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8006e52:	21df      	movs	r1, #223	; 0xdf
 8006e54:	485a      	ldr	r0, [pc, #360]	; (8006fc0 <HAL_ETH_Init+0x298>)
 8006e56:	f7fb fbfb 	bl	8002650 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8006e5a:	69e3      	ldr	r3, [r4, #28]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	f67f af76 	bls.w	8006d4e <HAL_ETH_Init+0x26>
 8006e62:	e7ed      	b.n	8006e40 <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8006e64:	21de      	movs	r1, #222	; 0xde
 8006e66:	4856      	ldr	r0, [pc, #344]	; (8006fc0 <HAL_ETH_Init+0x298>)
 8006e68:	f7fb fbf2 	bl	8002650 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8006e6c:	69a3      	ldr	r3, [r4, #24]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	f67f af6a 	bls.w	8006d48 <HAL_ETH_Init+0x20>
 8006e74:	e7ed      	b.n	8006e52 <HAL_ETH_Init+0x12a>
    heth->Lock = HAL_UNLOCKED;
 8006e76:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f007 fe36 	bl	800eaec <HAL_ETH_MspInit>
 8006e80:	e771      	b.n	8006d66 <HAL_ETH_Init+0x3e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8006e82:	21e1      	movs	r1, #225	; 0xe1
 8006e84:	484e      	ldr	r0, [pc, #312]	; (8006fc0 <HAL_ETH_Init+0x298>)
 8006e86:	f7fb fbe3 	bl	8002650 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 8006e8a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006e8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f47f af67 	bne.w	8006d66 <HAL_ETH_Init+0x3e>
 8006e98:	e7ed      	b.n	8006e76 <HAL_ETH_Init+0x14e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8006e9a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8006e9c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8006e9e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8006ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	b003      	add	sp, #12
 8006eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006eac:	2501      	movs	r5, #1
}
 8006eae:	4628      	mov	r0, r5
 8006eb0:	b003      	add	sp, #12
 8006eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8006eb4:	f045 0508 	orr.w	r5, r5, #8
 8006eb8:	e790      	b.n	8006ddc <HAL_ETH_Init+0xb4>
      heth->State = HAL_ETH_STATE_READY;
 8006eba:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	f7ff fc88 	bl	80067d4 <ETH_MACDMAConfig>
}
 8006ec4:	4628      	mov	r0, r5
      heth->State = HAL_ETH_STATE_READY;
 8006ec6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
}
 8006eca:	b003      	add	sp, #12
 8006ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8006ece:	4b3d      	ldr	r3, [pc, #244]	; (8006fc4 <HAL_ETH_Init+0x29c>)
 8006ed0:	4a3d      	ldr	r2, [pc, #244]	; (8006fc8 <HAL_ETH_Init+0x2a0>)
 8006ed2:	4403      	add	r3, r0
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d981      	bls.n	8006ddc <HAL_ETH_Init+0xb4>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8006ed8:	4b3c      	ldr	r3, [pc, #240]	; (8006fcc <HAL_ETH_Init+0x2a4>)
 8006eda:	4a3d      	ldr	r2, [pc, #244]	; (8006fd0 <HAL_ETH_Init+0x2a8>)
 8006edc:	4403      	add	r3, r0
 8006ede:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8006ee0:	bf94      	ite	ls
 8006ee2:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8006ee6:	f045 0510 	orrhi.w	r5, r5, #16
 8006eea:	e777      	b.n	8006ddc <HAL_ETH_Init+0xb4>
    tickstart = HAL_GetTick();
 8006eec:	f7fd fd5e 	bl	80049ac <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8006ef0:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	e002      	b.n	8006efe <HAL_ETH_Init+0x1d6>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8006ef8:	9b00      	ldr	r3, [sp, #0]
 8006efa:	0759      	lsls	r1, r3, #29
 8006efc:	d422      	bmi.n	8006f44 <HAL_ETH_Init+0x21c>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006efe:	466a      	mov	r2, sp
 8006f00:	2101      	movs	r1, #1
 8006f02:	4620      	mov	r0, r4
 8006f04:	f7ff fe80 	bl	8006c08 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8006f08:	f7fd fd50 	bl	80049ac <HAL_GetTick>
 8006f0c:	1bc0      	subs	r0, r0, r7
 8006f0e:	42b0      	cmp	r0, r6
 8006f10:	d9f2      	bls.n	8006ef8 <HAL_ETH_Init+0x1d0>
        ETH_MACDMAConfig(heth, err);
 8006f12:	2101      	movs	r1, #1
 8006f14:	4620      	mov	r0, r4
 8006f16:	f7ff fc5d 	bl	80067d4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8006f1a:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 8006f1c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8006f1e:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8006f20:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8006f24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8006f28:	e7bd      	b.n	8006ea6 <HAL_ETH_Init+0x17e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8006f2a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8006f2e:	4824      	ldr	r0, [pc, #144]	; (8006fc0 <HAL_ETH_Init+0x298>)
 8006f30:	f7fb fb8e 	bl	8002650 <assert_failed>
 8006f34:	68e3      	ldr	r3, [r4, #12]
 8006f36:	e76c      	b.n	8006e12 <HAL_ETH_Init+0xea>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8006f38:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006f3c:	4820      	ldr	r0, [pc, #128]	; (8006fc0 <HAL_ETH_Init+0x298>)
 8006f3e:	f7fb fb87 	bl	8002650 <assert_failed>
 8006f42:	e761      	b.n	8006e08 <HAL_ETH_Init+0xe0>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8006f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f7ff fea4 	bl	8006c98 <HAL_ETH_WritePHYRegister>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d1b2      	bne.n	8006eba <HAL_ETH_Init+0x192>
    tickstart = HAL_GetTick();
 8006f54:	f7fd fd2a 	bl	80049ac <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8006f58:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	e002      	b.n	8006f66 <HAL_ETH_Init+0x23e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	069a      	lsls	r2, r3, #26
 8006f64:	d40a      	bmi.n	8006f7c <HAL_ETH_Init+0x254>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006f66:	466a      	mov	r2, sp
 8006f68:	2101      	movs	r1, #1
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f7ff fe4c 	bl	8006c08 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8006f70:	f7fd fd1c 	bl	80049ac <HAL_GetTick>
 8006f74:	1bc0      	subs	r0, r0, r7
 8006f76:	42b0      	cmp	r0, r6
 8006f78:	d9f2      	bls.n	8006f60 <HAL_ETH_Init+0x238>
 8006f7a:	e7ca      	b.n	8006f12 <HAL_ETH_Init+0x1ea>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8006f7c:	466a      	mov	r2, sp
 8006f7e:	211f      	movs	r1, #31
 8006f80:	4620      	mov	r0, r4
 8006f82:	f7ff fe41 	bl	8006c08 <HAL_ETH_ReadPHYRegister>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d197      	bne.n	8006eba <HAL_ETH_Init+0x192>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006f8a:	9b00      	ldr	r3, [sp, #0]
 8006f8c:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8006f90:	bf18      	it	ne
 8006f92:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8006f96:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8006f98:	bf4c      	ite	mi
 8006f9a:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8006f9c:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8006fa0:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8006fa2:	60a3      	str	r3, [r4, #8]
 8006fa4:	e744      	b.n	8006e30 <HAL_ETH_Init+0x108>
 8006fa6:	bf00      	nop
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	40013800 	.word	0x40013800
 8006fb0:	feced300 	.word	0xfeced300
 8006fb4:	00e4e1bf 	.word	0x00e4e1bf
 8006fb8:	fde9f140 	.word	0xfde9f140
 8006fbc:	017d783f 	.word	0x017d783f
 8006fc0:	080232a4 	.word	0x080232a4
 8006fc4:	fc6c7900 	.word	0xfc6c7900
 8006fc8:	026259ff 	.word	0x026259ff
 8006fcc:	fa0a1f00 	.word	0xfa0a1f00
 8006fd0:	02faf07f 	.word	0x02faf07f

08006fd4 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8006fd4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d039      	beq.n	8007050 <HAL_ETH_Start+0x7c>
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8006fdc:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8006fde:	2202      	movs	r2, #2
{  
 8006fe0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t tmpreg = 0;
 8006fe2:	2500      	movs	r5, #0
{  
 8006fe4:	b082      	sub	sp, #8
  heth->State = HAL_ETH_STATE_BUSY;
 8006fe6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8006fea:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8006fec:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 8006fee:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8006ff0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8006ff2:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006ff6:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8006ff8:	f042 0208 	orr.w	r2, r2, #8
 8006ffc:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007002:	f7fd fcd9 	bl	80049b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007006:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007008:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800700e:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	f042 0204 	orr.w	r2, r2, #4
 8007016:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800701c:	f7fd fccc 	bl	80049b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007020:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8007022:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8007024:	9a00      	ldr	r2, [sp, #0]
 8007026:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8007028:	f7ff fbbe 	bl	80067a8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800702c:	6822      	ldr	r2, [r4, #0]
 800702e:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8007032:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007034:	58d1      	ldr	r1, [r2, r3]
 8007036:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800703a:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800703c:	58d1      	ldr	r1, [r2, r3]
 800703e:	f041 0102 	orr.w	r1, r1, #2
 8007042:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8007044:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007048:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800704c:	b002      	add	sp, #8
 800704e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8007050:	2002      	movs	r0, #2
}
 8007052:	4770      	bx	lr

08007054 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8007054:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007058:	2b01      	cmp	r3, #1
 800705a:	d039      	beq.n	80070d0 <HAL_ETH_Stop+0x7c>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800705c:	6803      	ldr	r3, [r0, #0]
 800705e:	f241 0218 	movw	r2, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 8007062:	2102      	movs	r1, #2
{  
 8007064:	b570      	push	{r4, r5, r6, lr}
  heth->State = HAL_ETH_STATE_BUSY;
 8007066:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800706a:	2601      	movs	r6, #1
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800706c:	5899      	ldr	r1, [r3, r2]
{  
 800706e:	b082      	sub	sp, #8
  __HAL_LOCK(heth);
 8007070:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 8007074:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007076:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800707a:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800707c:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800707e:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8007080:	5899      	ldr	r1, [r3, r2]
 8007082:	f021 0102 	bic.w	r1, r1, #2
 8007086:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 8007088:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	f022 0204 	bic.w	r2, r2, #4
 8007090:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007096:	f7fd fc8f 	bl	80049b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800709a:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 800709c:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 800709e:	9a01      	ldr	r2, [sp, #4]
 80070a0:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 80070a2:	f7ff fb81 	bl	80067a8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80070a6:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t tmpreg = 0;
 80070a8:	9500      	str	r5, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80070aa:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	f022 0208 	bic.w	r2, r2, #8
 80070b2:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80070b8:	f7fd fc7e 	bl	80049b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80070bc:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
 80070be:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 80070c4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80070c8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 80070cc:	b002      	add	sp, #8
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 80070d0:	2002      	movs	r0, #2
}
 80070d2:	4770      	bx	lr

080070d4 <HAL_ETH_ConfigMAC>:
{
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80070d6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80070da:	2b01      	cmp	r3, #1
 80070dc:	f000 8242 	beq.w	8007564 <HAL_ETH_ConfigMAC+0x490>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 80070e0:	6883      	ldr	r3, [r0, #8]
 80070e2:	460c      	mov	r4, r1
  heth->State= HAL_ETH_STATE_BUSY;
 80070e4:	2202      	movs	r2, #2
  __HAL_LOCK(heth);
 80070e6:	2101      	movs	r1, #1
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 80070e8:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80070ec:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 80070ee:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 80070f2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 80070f6:	f040 8207 	bne.w	8007508 <HAL_ETH_ConfigMAC+0x434>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 80070fa:	68eb      	ldr	r3, [r5, #12]
 80070fc:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8007100:	f040 8114 	bne.w	800732c <HAL_ETH_ConfigMAC+0x258>
  if (macconf != NULL)
 8007104:	2c00      	cmp	r4, #0
 8007106:	f000 8119 	beq.w	800733c <HAL_ETH_ConfigMAC+0x268>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8007110:	f040 8139 	bne.w	8007386 <HAL_ETH_ConfigMAC+0x2b2>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8007114:	6863      	ldr	r3, [r4, #4]
 8007116:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800711a:	f040 816b 	bne.w	80073f4 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800711e:	68a3      	ldr	r3, [r4, #8]
 8007120:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8007124:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007128:	d002      	beq.n	8007130 <HAL_ETH_ConfigMAC+0x5c>
 800712a:	2b00      	cmp	r3, #0
 800712c:	f040 821c 	bne.w	8007568 <HAL_ETH_ConfigMAC+0x494>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8007130:	68e3      	ldr	r3, [r4, #12]
 8007132:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007136:	f040 8152 	bne.w	80073de <HAL_ETH_ConfigMAC+0x30a>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8007140:	f040 8142 	bne.w	80073c8 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8007144:	6963      	ldr	r3, [r4, #20]
 8007146:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800714a:	f040 8132 	bne.w	80073b2 <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800714e:	69a3      	ldr	r3, [r4, #24]
 8007150:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007154:	f040 8122 	bne.w	800739c <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8007158:	69e3      	ldr	r3, [r4, #28]
 800715a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800715e:	f040 81a3 	bne.w	80074a8 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8007162:	6a23      	ldr	r3, [r4, #32]
 8007164:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007168:	f040 818e 	bne.w	8007488 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800716c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800716e:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8007172:	f040 8193 	bne.w	800749c <HAL_ETH_ConfigMAC+0x3c8>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8007176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007178:	f033 0310 	bics.w	r3, r3, #16
 800717c:	f040 8179 	bne.w	8007472 <HAL_ETH_ConfigMAC+0x39e>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8007180:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007182:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8007186:	f040 819a 	bne.w	80074be <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800718a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800718c:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8007190:	d003      	beq.n	800719a <HAL_ETH_ConfigMAC+0xc6>
 8007192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007196:	f040 81d3 	bne.w	8007540 <HAL_ETH_ConfigMAC+0x46c>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800719a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800719c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071a0:	2a40      	cmp	r2, #64	; 0x40
 80071a2:	d002      	beq.n	80071aa <HAL_ETH_ConfigMAC+0xd6>
 80071a4:	2b80      	cmp	r3, #128	; 0x80
 80071a6:	f040 81b5 	bne.w	8007514 <HAL_ETH_ConfigMAC+0x440>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 80071aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071ac:	f033 0320 	bics.w	r3, r3, #32
 80071b0:	f040 80de 	bne.w	8007370 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80071b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80071b6:	f033 0308 	bics.w	r3, r3, #8
 80071ba:	f040 80cf 	bne.w	800735c <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 80071be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	f200 80a5 	bhi.w	8007310 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 80071c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80071c8:	f240 4204 	movw	r2, #1028	; 0x404
 80071cc:	4293      	cmp	r3, r2
 80071ce:	bf18      	it	ne
 80071d0:	2b10      	cmpne	r3, #16
 80071d2:	d003      	beq.n	80071dc <HAL_ETH_ConfigMAC+0x108>
 80071d4:	f033 0304 	bics.w	r3, r3, #4
 80071d8:	f040 81be 	bne.w	8007558 <HAL_ETH_ConfigMAC+0x484>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 80071dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80071de:	f033 0202 	bics.w	r2, r3, #2
 80071e2:	d004      	beq.n	80071ee <HAL_ETH_ConfigMAC+0x11a>
 80071e4:	f240 4202 	movw	r2, #1026	; 0x402
 80071e8:	4293      	cmp	r3, r2
 80071ea:	f040 819e 	bne.w	800752a <HAL_ETH_ConfigMAC+0x456>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 80071ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80071f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f4:	f080 816e 	bcs.w	80074d4 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 80071f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071fa:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80071fe:	f040 8173 	bne.w	80074e8 <HAL_ETH_ConfigMAC+0x414>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8007202:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007204:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8007208:	f040 8178 	bne.w	80074fc <HAL_ETH_ConfigMAC+0x428>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800720c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800720e:	f033 0308 	bics.w	r3, r3, #8
 8007212:	f040 8123 	bne.w	800745c <HAL_ETH_ConfigMAC+0x388>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8007216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007218:	f033 0304 	bics.w	r3, r3, #4
 800721c:	f040 8113 	bne.w	8007446 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8007220:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007222:	f033 0302 	bics.w	r3, r3, #2
 8007226:	f040 8103 	bne.w	8007430 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800722a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800722c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007230:	f040 80f3 	bne.w	800741a <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8007234:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723a:	f080 80e8 	bcs.w	800740e <HAL_ETH_ConfigMAC+0x33a>
                         macconf->BackOffLimit | 
 800723e:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007240:	2001      	movs	r0, #1
                         macconf->BackOffLimit | 
 8007242:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007246:	430b      	orrs	r3, r1
 8007248:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	6962      	ldr	r2, [r4, #20]
 8007250:	4333      	orrs	r3, r6
 8007252:	69a6      	ldr	r6, [r4, #24]
 8007254:	430b      	orrs	r3, r1
 8007256:	69e1      	ldr	r1, [r4, #28]
 8007258:	4313      	orrs	r3, r2
 800725a:	6a22      	ldr	r2, [r4, #32]
 800725c:	4333      	orrs	r3, r6
 800725e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007260:	430b      	orrs	r3, r1
 8007262:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007264:	4313      	orrs	r3, r2
 8007266:	68aa      	ldr	r2, [r5, #8]
 8007268:	4333      	orrs	r3, r6
    tmpreg = (heth->Instance)->MACCR;
 800726a:	682e      	ldr	r6, [r5, #0]
                         macconf->BackOffLimit | 
 800726c:	430b      	orrs	r3, r1
    tmpreg = (heth->Instance)->MACCR;
 800726e:	6837      	ldr	r7, [r6, #0]
                         macconf->BackOffLimit | 
 8007270:	68e9      	ldr	r1, [r5, #12]
 8007272:	4313      	orrs	r3, r2
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8007274:	4abf      	ldr	r2, [pc, #764]	; (8007574 <HAL_ETH_ConfigMAC+0x4a0>)
                         macconf->BackOffLimit | 
 8007276:	430b      	orrs	r3, r1
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8007278:	403a      	ands	r2, r7
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800727a:	f64f 7741 	movw	r7, #65345	; 0xff41
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800727e:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8007280:	6033      	str	r3, [r6, #0]
    tmpreg = (heth->Instance)->MACCR;
 8007282:	6836      	ldr	r6, [r6, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007284:	f7fd fb98 	bl	80049b8 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007288:	6b21      	ldr	r1, [r4, #48]	; 0x30
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800728a:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800728c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800728e:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007290:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 8007292:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg; 
 8007294:	6016      	str	r6, [r2, #0]
                                          macconf->SourceAddrFilter |
 8007296:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8007298:	e9d4 160e 	ldrd	r1, r6, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 800729c:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800729e:	6c21      	ldr	r1, [r4, #64]	; 0x40
                                          macconf->BroadcastFramesReception | 
 80072a0:	4333      	orrs	r3, r6
                                          macconf->PromiscuousMode |
 80072a2:	6c66      	ldr	r6, [r4, #68]	; 0x44
                                          macconf->DestinationAddrFilter |
 80072a4:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 80072a6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                          macconf->PromiscuousMode |
 80072a8:	4333      	orrs	r3, r6
                                          macconf->MulticastFramesFilter |
 80072aa:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80072ac:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 80072ae:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80072b0:	f7fd fb82 	bl	80049b8 <HAL_Delay>
                          macconf->ReceiveFlowControl |
 80072b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80072b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
     (heth->Instance)->MACFFR = tmpreg;
 80072b8:	682a      	ldr	r2, [r5, #0]
                          macconf->ReceiveFlowControl |
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6e21      	ldr	r1, [r4, #96]	; 0x60
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80072be:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
                          macconf->ReceiveFlowControl |
 80072c0:	430b      	orrs	r3, r1
 80072c2:	6e61      	ldr	r1, [r4, #100]	; 0x64
     (heth->Instance)->MACFFR = tmpreg;
 80072c4:	6056      	str	r6, [r2, #4]
                          macconf->ReceiveFlowControl |
 80072c6:	430b      	orrs	r3, r1
 80072c8:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80072ca:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          macconf->ReceiveFlowControl |
 80072cc:	4333      	orrs	r3, r6
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80072ce:	6090      	str	r0, [r2, #8]
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80072d0:	6d66      	ldr	r6, [r4, #84]	; 0x54
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80072d2:	2001      	movs	r0, #1
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80072d4:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 80072d6:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 80072d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80072dc:	4039      	ands	r1, r7
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80072de:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80072e0:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 80072e2:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80072e4:	f7fd fb68 	bl	80049b8 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80072e8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80072ea:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80072ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACFCR = tmpreg;
 80072ee:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80072f0:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg;
 80072f2:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80072f4:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 80072f6:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80072f8:	f7fd fb5e 	bl	80049b8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 8007300:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 8007302:	2201      	movs	r2, #1
  return HAL_OK;  
 8007304:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 8007306:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800730a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800730e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8007310:	f240 6123 	movw	r1, #1571	; 0x623
 8007314:	4898      	ldr	r0, [pc, #608]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007316:	f7fb f99b 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800731a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800731c:	f240 4204 	movw	r2, #1028	; 0x404
 8007320:	4293      	cmp	r3, r2
 8007322:	bf18      	it	ne
 8007324:	2b10      	cmpne	r3, #16
 8007326:	f47f af55 	bne.w	80071d4 <HAL_ETH_ConfigMAC+0x100>
 800732a:	e757      	b.n	80071dc <HAL_ETH_ConfigMAC+0x108>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800732c:	f240 610e 	movw	r1, #1550	; 0x60e
 8007330:	4891      	ldr	r0, [pc, #580]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007332:	f7fb f98d 	bl	8002650 <assert_failed>
  if (macconf != NULL)
 8007336:	2c00      	cmp	r4, #0
 8007338:	f47f aee7 	bne.w	800710a <HAL_ETH_ConfigMAC+0x36>
    tmpreg = (heth->Instance)->MACCR;
 800733c:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800733e:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8007340:	68ec      	ldr	r4, [r5, #12]
    tmpreg = (heth->Instance)->MACCR;
 8007342:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8007344:	68ab      	ldr	r3, [r5, #8]
    tmpreg &= ~((uint32_t)0x00004800);
 8007346:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800734a:	4323      	orrs	r3, r4
 800734c:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800734e:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 8007350:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007352:	f7fd fb31 	bl	80049b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8007356:	682b      	ldr	r3, [r5, #0]
 8007358:	601c      	str	r4, [r3, #0]
 800735a:	e7d1      	b.n	8007300 <HAL_ETH_ConfigMAC+0x22c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800735c:	f240 6122 	movw	r1, #1570	; 0x622
 8007360:	4885      	ldr	r0, [pc, #532]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007362:	f7fb f975 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8007366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007368:	2b01      	cmp	r3, #1
 800736a:	f67f af2c 	bls.w	80071c6 <HAL_ETH_ConfigMAC+0xf2>
 800736e:	e7cf      	b.n	8007310 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8007370:	f240 6121 	movw	r1, #1569	; 0x621
 8007374:	4880      	ldr	r0, [pc, #512]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007376:	f7fb f96b 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800737a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800737c:	f033 0308 	bics.w	r3, r3, #8
 8007380:	f43f af1d 	beq.w	80071be <HAL_ETH_ConfigMAC+0xea>
 8007384:	e7ea      	b.n	800735c <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8007386:	f240 6113 	movw	r1, #1555	; 0x613
 800738a:	487b      	ldr	r0, [pc, #492]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 800738c:	f7fb f960 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8007390:	6863      	ldr	r3, [r4, #4]
 8007392:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8007396:	f43f aec2 	beq.w	800711e <HAL_ETH_ConfigMAC+0x4a>
 800739a:	e02b      	b.n	80073f4 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800739c:	f240 6119 	movw	r1, #1561	; 0x619
 80073a0:	4875      	ldr	r0, [pc, #468]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80073a2:	f7fb f955 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 80073a6:	69e3      	ldr	r3, [r4, #28]
 80073a8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80073ac:	f43f aed9 	beq.w	8007162 <HAL_ETH_ConfigMAC+0x8e>
 80073b0:	e07a      	b.n	80074a8 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 80073b2:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 80073b6:	4870      	ldr	r0, [pc, #448]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80073b8:	f7fb f94a 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 80073bc:	69a3      	ldr	r3, [r4, #24]
 80073be:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80073c2:	f43f aec9 	beq.w	8007158 <HAL_ETH_ConfigMAC+0x84>
 80073c6:	e7e9      	b.n	800739c <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 80073c8:	f240 6117 	movw	r1, #1559	; 0x617
 80073cc:	486a      	ldr	r0, [pc, #424]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80073ce:	f7fb f93f 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 80073d2:	6963      	ldr	r3, [r4, #20]
 80073d4:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80073d8:	f43f aeb9 	beq.w	800714e <HAL_ETH_ConfigMAC+0x7a>
 80073dc:	e7e9      	b.n	80073b2 <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 80073de:	f240 6116 	movw	r1, #1558	; 0x616
 80073e2:	4865      	ldr	r0, [pc, #404]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80073e4:	f7fb f934 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80073ee:	f43f aea9 	beq.w	8007144 <HAL_ETH_ConfigMAC+0x70>
 80073f2:	e7e9      	b.n	80073c8 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 80073f4:	f240 6114 	movw	r1, #1556	; 0x614
 80073f8:	485f      	ldr	r0, [pc, #380]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80073fa:	f7fb f929 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 80073fe:	68a3      	ldr	r3, [r4, #8]
 8007400:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8007404:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007408:	f47f ae8f 	bne.w	800712a <HAL_ETH_ConfigMAC+0x56>
 800740c:	e690      	b.n	8007130 <HAL_ETH_ConfigMAC+0x5c>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800740e:	f240 612d 	movw	r1, #1581	; 0x62d
 8007412:	4859      	ldr	r0, [pc, #356]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007414:	f7fb f91c 	bl	8002650 <assert_failed>
 8007418:	e711      	b.n	800723e <HAL_ETH_ConfigMAC+0x16a>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800741a:	f240 612c 	movw	r1, #1580	; 0x62c
 800741e:	4856      	ldr	r0, [pc, #344]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007420:	f7fb f916 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8007424:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800742a:	f4ff af08 	bcc.w	800723e <HAL_ETH_ConfigMAC+0x16a>
 800742e:	e7ee      	b.n	800740e <HAL_ETH_ConfigMAC+0x33a>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8007430:	f240 612b 	movw	r1, #1579	; 0x62b
 8007434:	4850      	ldr	r0, [pc, #320]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007436:	f7fb f90b 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800743a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800743c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007440:	f43f aef8 	beq.w	8007234 <HAL_ETH_ConfigMAC+0x160>
 8007444:	e7e9      	b.n	800741a <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8007446:	f240 612a 	movw	r1, #1578	; 0x62a
 800744a:	484b      	ldr	r0, [pc, #300]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 800744c:	f7fb f900 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8007450:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007452:	f033 0302 	bics.w	r3, r3, #2
 8007456:	f43f aee8 	beq.w	800722a <HAL_ETH_ConfigMAC+0x156>
 800745a:	e7e9      	b.n	8007430 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800745c:	f240 6129 	movw	r1, #1577	; 0x629
 8007460:	4845      	ldr	r0, [pc, #276]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007462:	f7fb f8f5 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8007466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007468:	f033 0304 	bics.w	r3, r3, #4
 800746c:	f43f aed8 	beq.w	8007220 <HAL_ETH_ConfigMAC+0x14c>
 8007470:	e7e9      	b.n	8007446 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8007472:	f240 611d 	movw	r1, #1565	; 0x61d
 8007476:	4840      	ldr	r0, [pc, #256]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007478:	f7fb f8ea 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800747c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800747e:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8007482:	f43f ae82 	beq.w	800718a <HAL_ETH_ConfigMAC+0xb6>
 8007486:	e01a      	b.n	80074be <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8007488:	f240 611b 	movw	r1, #1563	; 0x61b
 800748c:	483a      	ldr	r0, [pc, #232]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 800748e:	f7fb f8df 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8007492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007494:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8007498:	f43f ae6d 	beq.w	8007176 <HAL_ETH_ConfigMAC+0xa2>
 800749c:	f240 611c 	movw	r1, #1564	; 0x61c
 80074a0:	4835      	ldr	r0, [pc, #212]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80074a2:	f7fb f8d5 	bl	8002650 <assert_failed>
 80074a6:	e666      	b.n	8007176 <HAL_ETH_ConfigMAC+0xa2>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 80074a8:	f240 611a 	movw	r1, #1562	; 0x61a
 80074ac:	4832      	ldr	r0, [pc, #200]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80074ae:	f7fb f8cf 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 80074b2:	6a23      	ldr	r3, [r4, #32]
 80074b4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80074b8:	f43f ae58 	beq.w	800716c <HAL_ETH_ConfigMAC+0x98>
 80074bc:	e7e4      	b.n	8007488 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 80074be:	f240 611e 	movw	r1, #1566	; 0x61e
 80074c2:	482d      	ldr	r0, [pc, #180]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80074c4:	f7fb f8c4 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 80074c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074ca:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 80074ce:	f47f ae60 	bne.w	8007192 <HAL_ETH_ConfigMAC+0xbe>
 80074d2:	e662      	b.n	800719a <HAL_ETH_ConfigMAC+0xc6>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 80074d4:	f240 6126 	movw	r1, #1574	; 0x626
 80074d8:	4827      	ldr	r0, [pc, #156]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80074da:	f7fb f8b9 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 80074de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074e0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80074e4:	f43f ae8d 	beq.w	8007202 <HAL_ETH_ConfigMAC+0x12e>
 80074e8:	f240 6127 	movw	r1, #1575	; 0x627
 80074ec:	4822      	ldr	r0, [pc, #136]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 80074ee:	f7fb f8af 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 80074f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80074f4:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 80074f8:	f43f ae88 	beq.w	800720c <HAL_ETH_ConfigMAC+0x138>
 80074fc:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 8007500:	481d      	ldr	r0, [pc, #116]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007502:	f7fb f8a5 	bl	8002650 <assert_failed>
 8007506:	e681      	b.n	800720c <HAL_ETH_ConfigMAC+0x138>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007508:	f240 610d 	movw	r1, #1549	; 0x60d
 800750c:	481a      	ldr	r0, [pc, #104]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 800750e:	f7fb f89f 	bl	8002650 <assert_failed>
 8007512:	e5f2      	b.n	80070fa <HAL_ETH_ConfigMAC+0x26>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8007514:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8007518:	4817      	ldr	r0, [pc, #92]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 800751a:	f7fb f899 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800751e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007520:	f033 0320 	bics.w	r3, r3, #32
 8007524:	f43f ae46 	beq.w	80071b4 <HAL_ETH_ConfigMAC+0xe0>
 8007528:	e722      	b.n	8007370 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800752a:	f240 6125 	movw	r1, #1573	; 0x625
 800752e:	4812      	ldr	r0, [pc, #72]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007530:	f7fb f88e 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8007534:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753a:	f4ff ae5d 	bcc.w	80071f8 <HAL_ETH_ConfigMAC+0x124>
 800753e:	e7c9      	b.n	80074d4 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8007540:	f240 611f 	movw	r1, #1567	; 0x61f
 8007544:	480c      	ldr	r0, [pc, #48]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 8007546:	f7fb f883 	bl	8002650 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800754a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800754c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007550:	2a40      	cmp	r2, #64	; 0x40
 8007552:	f47f ae27 	bne.w	80071a4 <HAL_ETH_ConfigMAC+0xd0>
 8007556:	e628      	b.n	80071aa <HAL_ETH_ConfigMAC+0xd6>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8007558:	f240 6124 	movw	r1, #1572	; 0x624
 800755c:	4806      	ldr	r0, [pc, #24]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 800755e:	f7fb f877 	bl	8002650 <assert_failed>
 8007562:	e63b      	b.n	80071dc <HAL_ETH_ConfigMAC+0x108>
  __HAL_LOCK(heth);
 8007564:	2002      	movs	r0, #2
}
 8007566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8007568:	f240 6115 	movw	r1, #1557	; 0x615
 800756c:	4802      	ldr	r0, [pc, #8]	; (8007578 <HAL_ETH_ConfigMAC+0x4a4>)
 800756e:	f7fb f86f 	bl	8002650 <assert_failed>
 8007572:	e5dd      	b.n	8007130 <HAL_ETH_ConfigMAC+0x5c>
 8007574:	ff20810f 	.word	0xff20810f
 8007578:	080232a4 	.word	0x080232a4

0800757c <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800757c:	4bbf      	ldr	r3, [pc, #764]	; (800787c <HAL_GPIO_Init+0x300>)
 800757e:	4ac0      	ldr	r2, [pc, #768]	; (8007880 <HAL_GPIO_Init+0x304>)
 8007580:	4290      	cmp	r0, r2
 8007582:	bf18      	it	ne
 8007584:	4298      	cmpne	r0, r3
{
 8007586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800758a:	bf18      	it	ne
 800758c:	2301      	movne	r3, #1
{
 800758e:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007590:	bf08      	it	eq
 8007592:	2300      	moveq	r3, #0
{
 8007594:	4681      	mov	r9, r0
 8007596:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	d026      	beq.n	80075ea <HAL_GPIO_Init+0x6e>
 800759c:	4bb9      	ldr	r3, [pc, #740]	; (8007884 <HAL_GPIO_Init+0x308>)
 800759e:	4298      	cmp	r0, r3
 80075a0:	d023      	beq.n	80075ea <HAL_GPIO_Init+0x6e>
 80075a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075a6:	4298      	cmp	r0, r3
 80075a8:	d01f      	beq.n	80075ea <HAL_GPIO_Init+0x6e>
 80075aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ae:	4298      	cmp	r0, r3
 80075b0:	d01b      	beq.n	80075ea <HAL_GPIO_Init+0x6e>
 80075b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075b6:	4298      	cmp	r0, r3
 80075b8:	d017      	beq.n	80075ea <HAL_GPIO_Init+0x6e>
 80075ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075be:	4298      	cmp	r0, r3
 80075c0:	d013      	beq.n	80075ea <HAL_GPIO_Init+0x6e>
 80075c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075c6:	4298      	cmp	r0, r3
 80075c8:	d00f      	beq.n	80075ea <HAL_GPIO_Init+0x6e>
 80075ca:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80075ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d2:	4290      	cmp	r0, r2
 80075d4:	bf18      	it	ne
 80075d6:	4298      	cmpne	r0, r3
 80075d8:	d007      	beq.n	80075ea <HAL_GPIO_Init+0x6e>
 80075da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075de:	4298      	cmp	r0, r3
 80075e0:	d003      	beq.n	80075ea <HAL_GPIO_Init+0x6e>
 80075e2:	21b1      	movs	r1, #177	; 0xb1
 80075e4:	48a8      	ldr	r0, [pc, #672]	; (8007888 <HAL_GPIO_Init+0x30c>)
 80075e6:	f7fb f833 	bl	8002650 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80075ea:	f8bb 3000 	ldrh.w	r3, [fp]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8116 	beq.w	8007820 <HAL_GPIO_Init+0x2a4>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80075f4:	f8db 2004 	ldr.w	r2, [fp, #4]
 80075f8:	4ba4      	ldr	r3, [pc, #656]	; (800788c <HAL_GPIO_Init+0x310>)
 80075fa:	4ca5      	ldr	r4, [pc, #660]	; (8007890 <HAL_GPIO_Init+0x314>)
 80075fc:	f1a2 0011 	sub.w	r0, r2, #17
 8007600:	429a      	cmp	r2, r3
 8007602:	bf18      	it	ne
 8007604:	2a03      	cmpne	r2, #3
 8007606:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800760a:	bf8c      	ite	hi
 800760c:	2301      	movhi	r3, #1
 800760e:	2300      	movls	r3, #0
 8007610:	42a2      	cmp	r2, r4
 8007612:	bf0c      	ite	eq
 8007614:	2300      	moveq	r3, #0
 8007616:	f003 0301 	andne.w	r3, r3, #1
 800761a:	4a9e      	ldr	r2, [pc, #632]	; (8007894 <HAL_GPIO_Init+0x318>)
 800761c:	2801      	cmp	r0, #1
 800761e:	bf94      	ite	ls
 8007620:	2300      	movls	r3, #0
 8007622:	f003 0301 	andhi.w	r3, r3, #1
 8007626:	4291      	cmp	r1, r2
 8007628:	bf0c      	ite	eq
 800762a:	2300      	moveq	r3, #0
 800762c:	f003 0301 	andne.w	r3, r3, #1
 8007630:	b11b      	cbz	r3, 800763a <HAL_GPIO_Init+0xbe>
 8007632:	4b99      	ldr	r3, [pc, #612]	; (8007898 <HAL_GPIO_Init+0x31c>)
 8007634:	4299      	cmp	r1, r3
 8007636:	f040 8116 	bne.w	8007866 <HAL_GPIO_Init+0x2ea>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800763a:	f8db 3008 	ldr.w	r3, [fp, #8]
 800763e:	2b02      	cmp	r3, #2
 8007640:	f200 80f3 	bhi.w	800782a <HAL_GPIO_Init+0x2ae>
{
 8007644:	f04f 0800 	mov.w	r8, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007648:	f8df a274 	ldr.w	sl, [pc, #628]	; 80078c0 <HAL_GPIO_Init+0x344>
 800764c:	e005      	b.n	800765a <HAL_GPIO_Init+0xde>
  for(position = 0; position < GPIO_NUMBER; position++)
 800764e:	f108 0801 	add.w	r8, r8, #1
 8007652:	f1b8 0f10 	cmp.w	r8, #16
 8007656:	f000 80c2 	beq.w	80077de <HAL_GPIO_Init+0x262>
    ioposition = ((uint32_t)0x01) << position;
 800765a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800765c:	f8db 5000 	ldr.w	r5, [fp]
    ioposition = ((uint32_t)0x01) << position;
 8007660:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007664:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8007666:	42ac      	cmp	r4, r5
 8007668:	d1f1      	bne.n	800764e <HAL_GPIO_Init+0xd2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800766a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800766e:	f023 0010 	bic.w	r0, r3, #16
 8007672:	2802      	cmp	r0, #2
 8007674:	d117      	bne.n	80076a6 <HAL_GPIO_Init+0x12a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007676:	f8db 2010 	ldr.w	r2, [fp, #16]
 800767a:	2a0f      	cmp	r2, #15
 800767c:	f200 80c0 	bhi.w	8007800 <HAL_GPIO_Init+0x284>
        temp = GPIOx->AFR[position >> 3];
 8007680:	ea4f 01d8 	mov.w	r1, r8, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007684:	f008 0e07 	and.w	lr, r8, #7
 8007688:	f04f 0c0f 	mov.w	ip, #15
 800768c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8007690:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8007694:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007696:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800769a:	fa02 f20e 	lsl.w	r2, r2, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800769e:	ea26 060c 	bic.w	r6, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80076a2:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 80076a4:	620a      	str	r2, [r1, #32]
 80076a6:	ea4f 0748 	mov.w	r7, r8, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80076aa:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 80076ac:	f8d9 2000 	ldr.w	r2, [r9]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076b0:	3801      	subs	r0, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80076b2:	ea03 0106 	and.w	r1, r3, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80076b6:	40be      	lsls	r6, r7
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076b8:	2801      	cmp	r0, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80076ba:	ea6f 0606 	mvn.w	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80076be:	fa01 f107 	lsl.w	r1, r1, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80076c2:	ea06 0c02 	and.w	ip, r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80076c6:	ea41 010c 	orr.w	r1, r1, ip
      GPIOx->MODER = temp;
 80076ca:	f8c9 1000 	str.w	r1, [r9]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076ce:	d818      	bhi.n	8007702 <HAL_GPIO_Init+0x186>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80076d0:	f8db 000c 	ldr.w	r0, [fp, #12]
 80076d4:	2803      	cmp	r0, #3
 80076d6:	f200 8085 	bhi.w	80077e4 <HAL_GPIO_Init+0x268>
        temp = GPIOx->OSPEEDR; 
 80076da:	f8d9 2008 	ldr.w	r2, [r9, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 80076de:	40b8      	lsls	r0, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80076e0:	f3c3 1100 	ubfx	r1, r3, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80076e4:	ea06 0c02 	and.w	ip, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80076e8:	fa01 f108 	lsl.w	r1, r1, r8
        temp |= (GPIO_Init->Speed << (position * 2));
 80076ec:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->OSPEEDR = temp;
 80076f0:	f8c9 0008 	str.w	r0, [r9, #8]
        temp = GPIOx->OTYPER;
 80076f4:	f8d9 0004 	ldr.w	r0, [r9, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076f8:	ea20 0404 	bic.w	r4, r0, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80076fc:	430c      	orrs	r4, r1
        GPIOx->OTYPER = temp;
 80076fe:	f8c9 4004 	str.w	r4, [r9, #4]
      temp = GPIOx->PUPDR;
 8007702:	f8d9 000c 	ldr.w	r0, [r9, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007706:	f8db 1008 	ldr.w	r1, [fp, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800770a:	4006      	ands	r6, r0
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800770c:	fa01 f207 	lsl.w	r2, r1, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007710:	00df      	lsls	r7, r3, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007712:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8007716:	f8c9 200c 	str.w	r2, [r9, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800771a:	d598      	bpl.n	800764e <HAL_GPIO_Init+0xd2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800771c:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
 8007720:	f028 0603 	bic.w	r6, r8, #3
 8007724:	4c5d      	ldr	r4, [pc, #372]	; (800789c <HAL_GPIO_Init+0x320>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007726:	f008 0203 	and.w	r2, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800772a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800772e:	210f      	movs	r1, #15
 8007730:	4434      	add	r4, r6
 8007732:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007734:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
 8007738:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800773c:	4091      	lsls	r1, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800773e:	4e50      	ldr	r6, [pc, #320]	; (8007880 <HAL_GPIO_Init+0x304>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007740:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007744:	45b1      	cmp	r9, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007746:	9003      	str	r0, [sp, #12]
 8007748:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800774a:	68a0      	ldr	r0, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800774c:	ea20 0101 	bic.w	r1, r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007750:	d01f      	beq.n	8007792 <HAL_GPIO_Init+0x216>
 8007752:	9801      	ldr	r0, [sp, #4]
 8007754:	2800      	cmp	r0, #0
 8007756:	d04e      	beq.n	80077f6 <HAL_GPIO_Init+0x27a>
 8007758:	484a      	ldr	r0, [pc, #296]	; (8007884 <HAL_GPIO_Init+0x308>)
 800775a:	4581      	cmp	r9, r0
 800775c:	d05b      	beq.n	8007816 <HAL_GPIO_Init+0x29a>
 800775e:	4850      	ldr	r0, [pc, #320]	; (80078a0 <HAL_GPIO_Init+0x324>)
 8007760:	4581      	cmp	r9, r0
 8007762:	d067      	beq.n	8007834 <HAL_GPIO_Init+0x2b8>
 8007764:	484f      	ldr	r0, [pc, #316]	; (80078a4 <HAL_GPIO_Init+0x328>)
 8007766:	4581      	cmp	r9, r0
 8007768:	d069      	beq.n	800783e <HAL_GPIO_Init+0x2c2>
 800776a:	484f      	ldr	r0, [pc, #316]	; (80078a8 <HAL_GPIO_Init+0x32c>)
 800776c:	4581      	cmp	r9, r0
 800776e:	d070      	beq.n	8007852 <HAL_GPIO_Init+0x2d6>
 8007770:	484e      	ldr	r0, [pc, #312]	; (80078ac <HAL_GPIO_Init+0x330>)
 8007772:	4581      	cmp	r9, r0
 8007774:	d072      	beq.n	800785c <HAL_GPIO_Init+0x2e0>
 8007776:	484e      	ldr	r0, [pc, #312]	; (80078b0 <HAL_GPIO_Init+0x334>)
 8007778:	4581      	cmp	r9, r0
 800777a:	d065      	beq.n	8007848 <HAL_GPIO_Init+0x2cc>
 800777c:	484d      	ldr	r0, [pc, #308]	; (80078b4 <HAL_GPIO_Init+0x338>)
 800777e:	4581      	cmp	r9, r0
 8007780:	d076      	beq.n	8007870 <HAL_GPIO_Init+0x2f4>
 8007782:	484d      	ldr	r0, [pc, #308]	; (80078b8 <HAL_GPIO_Init+0x33c>)
 8007784:	4581      	cmp	r9, r0
 8007786:	bf0c      	ite	eq
 8007788:	2009      	moveq	r0, #9
 800778a:	200a      	movne	r0, #10
 800778c:	fa00 f202 	lsl.w	r2, r0, r2
 8007790:	4311      	orrs	r1, r2
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007792:	4a4a      	ldr	r2, [pc, #296]	; (80078bc <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007794:	03de      	lsls	r6, r3, #15
        SYSCFG->EXTICR[position >> 2] = temp;
 8007796:	60a1      	str	r1, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8007798:	ea6f 0105 	mvn.w	r1, r5
        temp = EXTI->IMR;
 800779c:	6812      	ldr	r2, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800779e:	f108 0801 	add.w	r8, r8, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80077a2:	4846      	ldr	r0, [pc, #280]	; (80078bc <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
 80077a4:	bf54      	ite	pl
 80077a6:	400a      	andpl	r2, r1
          temp |= iocurrent;
 80077a8:	432a      	orrmi	r2, r5

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077aa:	039c      	lsls	r4, r3, #14
        EXTI->IMR = temp;
 80077ac:	6002      	str	r2, [r0, #0]
        temp = EXTI->EMR;
 80077ae:	6842      	ldr	r2, [r0, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80077b0:	4842      	ldr	r0, [pc, #264]	; (80078bc <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
 80077b2:	bf54      	ite	pl
 80077b4:	400a      	andpl	r2, r1
          temp |= iocurrent;
 80077b6:	432a      	orrmi	r2, r5
        EXTI->EMR = temp;
 80077b8:	6042      	str	r2, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077ba:	6882      	ldr	r2, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077bc:	02d8      	lsls	r0, r3, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80077be:	483f      	ldr	r0, [pc, #252]	; (80078bc <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
 80077c0:	bf54      	ite	pl
 80077c2:	400a      	andpl	r2, r1
          temp |= iocurrent;
 80077c4:	432a      	orrmi	r2, r5

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077c6:	029b      	lsls	r3, r3, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80077c8:	4b3c      	ldr	r3, [pc, #240]	; (80078bc <HAL_GPIO_Init+0x340>)
        EXTI->RTSR = temp;
 80077ca:	6082      	str	r2, [r0, #8]
        temp = EXTI->FTSR;
 80077cc:	68c2      	ldr	r2, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
 80077ce:	bf54      	ite	pl
 80077d0:	400a      	andpl	r2, r1
          temp |= iocurrent;
 80077d2:	432a      	orrmi	r2, r5
  for(position = 0; position < GPIO_NUMBER; position++)
 80077d4:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 80077d8:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80077da:	f47f af3e 	bne.w	800765a <HAL_GPIO_Init+0xde>
      }
    }
  }
}
 80077de:	b005      	add	sp, #20
 80077e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80077e4:	4828      	ldr	r0, [pc, #160]	; (8007888 <HAL_GPIO_Init+0x30c>)
 80077e6:	21d9      	movs	r1, #217	; 0xd9
 80077e8:	f7fa ff32 	bl	8002650 <assert_failed>
 80077ec:	f8db 000c 	ldr.w	r0, [fp, #12]
 80077f0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80077f4:	e771      	b.n	80076da <HAL_GPIO_Init+0x15e>
 80077f6:	2001      	movs	r0, #1
 80077f8:	fa00 f202 	lsl.w	r2, r0, r2
 80077fc:	4311      	orrs	r1, r2
 80077fe:	e7c8      	b.n	8007792 <HAL_GPIO_Init+0x216>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007800:	4821      	ldr	r0, [pc, #132]	; (8007888 <HAL_GPIO_Init+0x30c>)
 8007802:	21c5      	movs	r1, #197	; 0xc5
 8007804:	f7fa ff24 	bl	8002650 <assert_failed>
 8007808:	f8db 3004 	ldr.w	r3, [fp, #4]
 800780c:	f8db 2010 	ldr.w	r2, [fp, #16]
 8007810:	f023 0010 	bic.w	r0, r3, #16
 8007814:	e734      	b.n	8007680 <HAL_GPIO_Init+0x104>
 8007816:	2002      	movs	r0, #2
 8007818:	fa00 f202 	lsl.w	r2, r0, r2
 800781c:	4311      	orrs	r1, r2
 800781e:	e7b8      	b.n	8007792 <HAL_GPIO_Init+0x216>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8007820:	21b2      	movs	r1, #178	; 0xb2
 8007822:	4819      	ldr	r0, [pc, #100]	; (8007888 <HAL_GPIO_Init+0x30c>)
 8007824:	f7fa ff14 	bl	8002650 <assert_failed>
 8007828:	e6e4      	b.n	80075f4 <HAL_GPIO_Init+0x78>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800782a:	21b4      	movs	r1, #180	; 0xb4
 800782c:	4816      	ldr	r0, [pc, #88]	; (8007888 <HAL_GPIO_Init+0x30c>)
 800782e:	f7fa ff0f 	bl	8002650 <assert_failed>
 8007832:	e707      	b.n	8007644 <HAL_GPIO_Init+0xc8>
 8007834:	2003      	movs	r0, #3
 8007836:	fa00 f202 	lsl.w	r2, r0, r2
 800783a:	4311      	orrs	r1, r2
 800783c:	e7a9      	b.n	8007792 <HAL_GPIO_Init+0x216>
 800783e:	2004      	movs	r0, #4
 8007840:	fa00 f202 	lsl.w	r2, r0, r2
 8007844:	4311      	orrs	r1, r2
 8007846:	e7a4      	b.n	8007792 <HAL_GPIO_Init+0x216>
 8007848:	2007      	movs	r0, #7
 800784a:	fa00 f202 	lsl.w	r2, r0, r2
 800784e:	4311      	orrs	r1, r2
 8007850:	e79f      	b.n	8007792 <HAL_GPIO_Init+0x216>
 8007852:	2005      	movs	r0, #5
 8007854:	fa00 f202 	lsl.w	r2, r0, r2
 8007858:	4311      	orrs	r1, r2
 800785a:	e79a      	b.n	8007792 <HAL_GPIO_Init+0x216>
 800785c:	2006      	movs	r0, #6
 800785e:	fa00 f202 	lsl.w	r2, r0, r2
 8007862:	4311      	orrs	r1, r2
 8007864:	e795      	b.n	8007792 <HAL_GPIO_Init+0x216>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007866:	21b3      	movs	r1, #179	; 0xb3
 8007868:	4807      	ldr	r0, [pc, #28]	; (8007888 <HAL_GPIO_Init+0x30c>)
 800786a:	f7fa fef1 	bl	8002650 <assert_failed>
 800786e:	e6e4      	b.n	800763a <HAL_GPIO_Init+0xbe>
 8007870:	2008      	movs	r0, #8
 8007872:	fa00 f202 	lsl.w	r2, r0, r2
 8007876:	4311      	orrs	r1, r2
 8007878:	e78b      	b.n	8007792 <HAL_GPIO_Init+0x216>
 800787a:	bf00      	nop
 800787c:	40020400 	.word	0x40020400
 8007880:	40020000 	.word	0x40020000
 8007884:	40020800 	.word	0x40020800
 8007888:	080232dc 	.word	0x080232dc
 800788c:	10210000 	.word	0x10210000
 8007890:	10220000 	.word	0x10220000
 8007894:	10110000 	.word	0x10110000
 8007898:	10120000 	.word	0x10120000
 800789c:	40013800 	.word	0x40013800
 80078a0:	40020c00 	.word	0x40020c00
 80078a4:	40021000 	.word	0x40021000
 80078a8:	40021400 	.word	0x40021400
 80078ac:	40021800 	.word	0x40021800
 80078b0:	40021c00 	.word	0x40021c00
 80078b4:	40022000 	.word	0x40022000
 80078b8:	40022400 	.word	0x40022400
 80078bc:	40013c00 	.word	0x40013c00
 80078c0:	40023800 	.word	0x40023800

080078c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80078c8:	460c      	mov	r4, r1
 80078ca:	b129      	cbz	r1, 80078d8 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80078cc:	692b      	ldr	r3, [r5, #16]
 80078ce:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80078d0:	bf14      	ite	ne
 80078d2:	2001      	movne	r0, #1
 80078d4:	2000      	moveq	r0, #0
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80078d8:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80078dc:	4801      	ldr	r0, [pc, #4]	; (80078e4 <HAL_GPIO_ReadPin+0x20>)
 80078de:	f7fa feb7 	bl	8002650 <assert_failed>
 80078e2:	e7f3      	b.n	80078cc <HAL_GPIO_ReadPin+0x8>
 80078e4:	080232dc 	.word	0x080232dc

080078e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	4606      	mov	r6, r0
 80078ec:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80078ee:	460c      	mov	r4, r1
 80078f0:	b161      	cbz	r1, 800790c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80078f2:	2d01      	cmp	r5, #1
 80078f4:	d803      	bhi.n	80078fe <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 80078f6:	b905      	cbnz	r5, 80078fa <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80078f8:	0424      	lsls	r4, r4, #16
 80078fa:	61b4      	str	r4, [r6, #24]
  }
}
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80078fe:	f240 119b 	movw	r1, #411	; 0x19b
 8007902:	4805      	ldr	r0, [pc, #20]	; (8007918 <HAL_GPIO_WritePin+0x30>)
 8007904:	f7fa fea4 	bl	8002650 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007908:	61b4      	str	r4, [r6, #24]
}
 800790a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800790c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8007910:	4801      	ldr	r0, [pc, #4]	; (8007918 <HAL_GPIO_WritePin+0x30>)
 8007912:	f7fa fe9d 	bl	8002650 <assert_failed>
 8007916:	e7ec      	b.n	80078f2 <HAL_GPIO_WritePin+0xa>
 8007918:	080232dc 	.word	0x080232dc

0800791c <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007920:	460c      	mov	r4, r1
 8007922:	b129      	cbz	r1, 8007930 <HAL_GPIO_TogglePin+0x14>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007924:	6943      	ldr	r3, [r0, #20]
 8007926:	ea31 0303 	bics.w	r3, r1, r3
 800792a:	d007      	beq.n	800793c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800792c:	61a9      	str	r1, [r5, #24]
  }
}
 800792e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007930:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007934:	4803      	ldr	r0, [pc, #12]	; (8007944 <HAL_GPIO_TogglePin+0x28>)
 8007936:	f7fa fe8b 	bl	8002650 <assert_failed>
  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800793a:	696b      	ldr	r3, [r5, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800793c:	0424      	lsls	r4, r4, #16
 800793e:	61ac      	str	r4, [r5, #24]
}
 8007940:	bd38      	pop	{r3, r4, r5, pc}
 8007942:	bf00      	nop
 8007944:	080232dc 	.word	0x080232dc

08007948 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop

0800794c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800794c:	4a04      	ldr	r2, [pc, #16]	; (8007960 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800794e:	6951      	ldr	r1, [r2, #20]
 8007950:	4201      	tst	r1, r0
 8007952:	d100      	bne.n	8007956 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8007954:	4770      	bx	lr
{
 8007956:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007958:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800795a:	f7ff fff5 	bl	8007948 <HAL_GPIO_EXTI_Callback>
}
 800795e:	bd08      	pop	{r3, pc}
 8007960:	40013c00 	.word	0x40013c00

08007964 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007968:	4680      	mov	r8, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800796a:	4d25      	ldr	r5, [pc, #148]	; (8007a00 <I2C_TransferConfig+0x9c>)
 800796c:	4825      	ldr	r0, [pc, #148]	; (8007a04 <I2C_TransferConfig+0xa0>)
{
 800796e:	460e      	mov	r6, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007970:	f8d8 1000 	ldr.w	r1, [r8]
{
 8007974:	4614      	mov	r4, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007976:	4a24      	ldr	r2, [pc, #144]	; (8007a08 <I2C_TransferConfig+0xa4>)
{
 8007978:	461f      	mov	r7, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800797a:	4281      	cmp	r1, r0
 800797c:	bf18      	it	ne
 800797e:	42a9      	cmpne	r1, r5
{
 8007980:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007982:	bf14      	ite	ne
 8007984:	2001      	movne	r0, #1
 8007986:	2000      	moveq	r0, #0
 8007988:	4291      	cmp	r1, r2
 800798a:	bf0c      	ite	eq
 800798c:	2000      	moveq	r0, #0
 800798e:	f000 0001 	andne.w	r0, r0, #1
 8007992:	b110      	cbz	r0, 800799a <I2C_TransferConfig+0x36>
 8007994:	4b1d      	ldr	r3, [pc, #116]	; (8007a0c <I2C_TransferConfig+0xa8>)
 8007996:	4299      	cmp	r1, r3
 8007998:	d126      	bne.n	80079e8 <I2C_TransferConfig+0x84>
  assert_param(IS_TRANSFER_MODE(Mode));
 800799a:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 800799e:	d002      	beq.n	80079a6 <I2C_TransferConfig+0x42>
 80079a0:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80079a4:	d126      	bne.n	80079f4 <I2C_TransferConfig+0x90>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <I2C_TransferConfig+0xac>)
 80079a8:	429d      	cmp	r5, r3
 80079aa:	d00a      	beq.n	80079c2 <I2C_TransferConfig+0x5e>
 80079ac:	f425 6380 	bic.w	r3, r5, #1024	; 0x400
 80079b0:	4a18      	ldr	r2, [pc, #96]	; (8007a14 <I2C_TransferConfig+0xb0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d005      	beq.n	80079c2 <I2C_TransferConfig+0x5e>
 80079b6:	b125      	cbz	r5, 80079c2 <I2C_TransferConfig+0x5e>
 80079b8:	f641 01c3 	movw	r1, #6339	; 0x18c3
 80079bc:	4816      	ldr	r0, [pc, #88]	; (8007a18 <I2C_TransferConfig+0xb4>)
 80079be:	f7fa fe47 	bl	8002650 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80079c2:	f8d8 1000 	ldr.w	r1, [r8]
 80079c6:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80079ca:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80079ce:	4a13      	ldr	r2, [pc, #76]	; (8007a1c <I2C_TransferConfig+0xb8>)
 80079d0:	431c      	orrs	r4, r3
 80079d2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
 80079d6:	684d      	ldr	r5, [r1, #4]
 80079d8:	ea44 0307 	orr.w	r3, r4, r7
 80079dc:	ea25 0502 	bic.w	r5, r5, r2
 80079e0:	432b      	orrs	r3, r5
 80079e2:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80079e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80079e8:	f641 01c1 	movw	r1, #6337	; 0x18c1
 80079ec:	480a      	ldr	r0, [pc, #40]	; (8007a18 <I2C_TransferConfig+0xb4>)
 80079ee:	f7fa fe2f 	bl	8002650 <assert_failed>
 80079f2:	e7d2      	b.n	800799a <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_MODE(Mode));
 80079f4:	f641 01c2 	movw	r1, #6338	; 0x18c2
 80079f8:	4807      	ldr	r0, [pc, #28]	; (8007a18 <I2C_TransferConfig+0xb4>)
 80079fa:	f7fa fe29 	bl	8002650 <assert_failed>
 80079fe:	e7d2      	b.n	80079a6 <I2C_TransferConfig+0x42>
 8007a00:	40005800 	.word	0x40005800
 8007a04:	40005400 	.word	0x40005400
 8007a08:	40005c00 	.word	0x40005c00
 8007a0c:	40006000 	.word	0x40006000
 8007a10:	80004000 	.word	0x80004000
 8007a14:	80002000 	.word	0x80002000
 8007a18:	08023318 	.word	0x08023318
 8007a1c:	03ff63ff 	.word	0x03ff63ff

08007a20 <I2C_IsAcknowledgeFailed.part.1>:
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	4605      	mov	r5, r0
 8007a24:	460c      	mov	r4, r1
 8007a26:	4616      	mov	r6, r2
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a28:	6828      	ldr	r0, [r5, #0]
 8007a2a:	e001      	b.n	8007a30 <I2C_IsAcknowledgeFailed.part.1+0x10>
      if (Timeout != HAL_MAX_DELAY)
 8007a2c:	1c63      	adds	r3, r4, #1
 8007a2e:	d120      	bne.n	8007a72 <I2C_IsAcknowledgeFailed.part.1+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a30:	6983      	ldr	r3, [r0, #24]
 8007a32:	0699      	lsls	r1, r3, #26
 8007a34:	d5fa      	bpl.n	8007a2c <I2C_IsAcknowledgeFailed.part.1+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a36:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a38:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a3a:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a3c:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007a3e:	6983      	ldr	r3, [r0, #24]
 8007a40:	079a      	lsls	r2, r3, #30
 8007a42:	d501      	bpl.n	8007a48 <I2C_IsAcknowledgeFailed.part.1+0x28>
    hi2c->Instance->TXDR = 0x00U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	6283      	str	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a48:	6983      	ldr	r3, [r0, #24]
 8007a4a:	07db      	lsls	r3, r3, #31
 8007a4c:	d524      	bpl.n	8007a98 <I2C_IsAcknowledgeFailed.part.1+0x78>
    I2C_RESET_CR2(hi2c);
 8007a4e:	6843      	ldr	r3, [r0, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a50:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8007a52:	4c14      	ldr	r4, [pc, #80]	; (8007aa4 <I2C_IsAcknowledgeFailed.part.1+0x84>)
    hi2c->State = HAL_I2C_STATE_READY;
 8007a54:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8007a56:	4023      	ands	r3, r4
 8007a58:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a5a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8007a5c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a60:	f043 0304 	orr.w	r3, r3, #4
 8007a64:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a66:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a6a:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8007a6e:	2001      	movs	r0, #1
 8007a70:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a72:	f7fc ff9b 	bl	80049ac <HAL_GetTick>
 8007a76:	1b80      	subs	r0, r0, r6
 8007a78:	4284      	cmp	r4, r0
 8007a7a:	d301      	bcc.n	8007a80 <I2C_IsAcknowledgeFailed.part.1+0x60>
 8007a7c:	2c00      	cmp	r4, #0
 8007a7e:	d1d3      	bne.n	8007a28 <I2C_IsAcknowledgeFailed.part.1+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a80:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a82:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a84:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a86:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8007a88:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a8c:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a92:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8007a96:	e7ea      	b.n	8007a6e <I2C_IsAcknowledgeFailed.part.1+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007a98:	6983      	ldr	r3, [r0, #24]
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	6183      	str	r3, [r0, #24]
 8007aa0:	e7d5      	b.n	8007a4e <I2C_IsAcknowledgeFailed.part.1+0x2e>
 8007aa2:	bf00      	nop
 8007aa4:	fe00e800 	.word	0xfe00e800

08007aa8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	4605      	mov	r5, r0
 8007aac:	460c      	mov	r4, r1
 8007aae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ab0:	e001      	b.n	8007ab6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8007ab2:	1c61      	adds	r1, r4, #1
 8007ab4:	d111      	bne.n	8007ada <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ab6:	682b      	ldr	r3, [r5, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	0792      	lsls	r2, r2, #30
 8007abc:	d40b      	bmi.n	8007ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	06d8      	lsls	r0, r3, #27
 8007ac2:	d5f6      	bpl.n	8007ab2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8007ac4:	4632      	mov	r2, r6
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f7ff ffa9 	bl	8007a20 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d0ef      	beq.n	8007ab2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 8007ad2:	2001      	movs	r0, #1
}
 8007ad4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8007ad6:	2000      	movs	r0, #0
}
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ada:	f7fc ff67 	bl	80049ac <HAL_GetTick>
 8007ade:	1b80      	subs	r0, r0, r6
 8007ae0:	42a0      	cmp	r0, r4
 8007ae2:	d801      	bhi.n	8007ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007ae4:	2c00      	cmp	r4, #0
 8007ae6:	d1e6      	bne.n	8007ab6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ae8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007aea:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aec:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8007aee:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007af0:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8007af2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007af6:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007af8:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007afc:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
 8007b02:	bf00      	nop

08007b04 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	4605      	mov	r5, r0
 8007b08:	460c      	mov	r4, r1
 8007b0a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b0c:	e00b      	b.n	8007b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	06db      	lsls	r3, r3, #27
 8007b12:	d502      	bpl.n	8007b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8007b14:	f7ff ff84 	bl	8007a20 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b18:	b9d8      	cbnz	r0, 8007b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1a:	f7fc ff47 	bl	80049ac <HAL_GetTick>
 8007b1e:	1b80      	subs	r0, r0, r6
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d809      	bhi.n	8007b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8007b24:	b144      	cbz	r4, 8007b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	4632      	mov	r2, r6
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	699f      	ldr	r7, [r3, #24]
 8007b30:	06bf      	lsls	r7, r7, #26
 8007b32:	d5ec      	bpl.n	8007b0e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8007b34:	2000      	movs	r0, #0
}
 8007b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b38:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b3a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b3c:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8007b3e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b40:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8007b42:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b46:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b48:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b4c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8007b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8007b52:	2001      	movs	r0, #1
}
 8007b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b56:	bf00      	nop

08007b58 <I2C_WaitOnFlagUntilTimeout>:
{
 8007b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	460f      	mov	r7, r1
 8007b60:	4616      	mov	r6, r2
 8007b62:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b64:	f8d8 4000 	ldr.w	r4, [r8]
 8007b68:	e001      	b.n	8007b6e <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8007b6a:	1c6b      	adds	r3, r5, #1
 8007b6c:	d10a      	bne.n	8007b84 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b6e:	69a0      	ldr	r0, [r4, #24]
 8007b70:	ea37 0300 	bics.w	r3, r7, r0
 8007b74:	bf0c      	ite	eq
 8007b76:	2001      	moveq	r0, #1
 8007b78:	2000      	movne	r0, #0
 8007b7a:	42b0      	cmp	r0, r6
 8007b7c:	d0f5      	beq.n	8007b6a <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8007b7e:	2000      	movs	r0, #0
}
 8007b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b84:	f7fc ff12 	bl	80049ac <HAL_GetTick>
 8007b88:	9b06      	ldr	r3, [sp, #24]
 8007b8a:	1ac0      	subs	r0, r0, r3
 8007b8c:	42a8      	cmp	r0, r5
 8007b8e:	d801      	bhi.n	8007b94 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	d1e7      	bne.n	8007b64 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b94:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b98:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b9a:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8007b9c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b9e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8007ba0:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ba4:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ba8:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bac:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
 8007bb0:	e7e6      	b.n	8007b80 <I2C_WaitOnFlagUntilTimeout+0x28>
 8007bb2:	bf00      	nop

08007bb4 <I2C_RequestMemoryRead>:
{
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	461d      	mov	r5, r3
 8007bb8:	b082      	sub	sp, #8
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007bba:	4b17      	ldr	r3, [pc, #92]	; (8007c18 <I2C_RequestMemoryRead+0x64>)
{
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007bc0:	b2ea      	uxtb	r2, r5
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f7ff fecd 	bl	8007964 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bca:	4620      	mov	r0, r4
 8007bcc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007bd0:	f7ff ff6a 	bl	8007aa8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bd4:	b9c8      	cbnz	r0, 8007c0a <I2C_RequestMemoryRead+0x56>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bd6:	2d01      	cmp	r5, #1
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	d10e      	bne.n	8007bfa <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bdc:	b2f6      	uxtb	r6, r6
 8007bde:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007be0:	9b07      	ldr	r3, [sp, #28]
 8007be2:	4620      	mov	r0, r4
 8007be4:	2200      	movs	r2, #0
 8007be6:	2140      	movs	r1, #64	; 0x40
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	9b06      	ldr	r3, [sp, #24]
 8007bec:	f7ff ffb4 	bl	8007b58 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8007bf0:	3000      	adds	r0, #0
 8007bf2:	bf18      	it	ne
 8007bf4:	2001      	movne	r0, #1
}
 8007bf6:	b002      	add	sp, #8
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bfa:	0a30      	lsrs	r0, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bfc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c00:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c02:	4620      	mov	r0, r4
 8007c04:	f7ff ff50 	bl	8007aa8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c08:	b110      	cbz	r0, 8007c10 <I2C_RequestMemoryRead+0x5c>
    return HAL_ERROR;
 8007c0a:	2001      	movs	r0, #1
}
 8007c0c:	b002      	add	sp, #8
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c10:	b2f6      	uxtb	r6, r6
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	629e      	str	r6, [r3, #40]	; 0x28
 8007c16:	e7e3      	b.n	8007be0 <I2C_RequestMemoryRead+0x2c>
 8007c18:	80002000 	.word	0x80002000

08007c1c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f000 80c8 	beq.w	8007db2 <HAL_I2C_Init+0x196>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007c22:	6802      	ldr	r2, [r0, #0]
 8007c24:	4969      	ldr	r1, [pc, #420]	; (8007dcc <HAL_I2C_Init+0x1b0>)
{
 8007c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007c28:	4b69      	ldr	r3, [pc, #420]	; (8007dd0 <HAL_I2C_Init+0x1b4>)
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4869      	ldr	r0, [pc, #420]	; (8007dd4 <HAL_I2C_Init+0x1b8>)
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	bf18      	it	ne
 8007c32:	4282      	cmpne	r2, r0
 8007c34:	bf14      	ite	ne
 8007c36:	2301      	movne	r3, #1
 8007c38:	2300      	moveq	r3, #0
 8007c3a:	428a      	cmp	r2, r1
 8007c3c:	bf0c      	ite	eq
 8007c3e:	2300      	moveq	r3, #0
 8007c40:	f003 0301 	andne.w	r3, r3, #1
 8007c44:	b11b      	cbz	r3, 8007c4e <HAL_I2C_Init+0x32>
 8007c46:	4b64      	ldr	r3, [pc, #400]	; (8007dd8 <HAL_I2C_Init+0x1bc>)
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	f040 80b4 	bne.w	8007db6 <HAL_I2C_Init+0x19a>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8007c4e:	68a3      	ldr	r3, [r4, #8]
 8007c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c54:	d268      	bcs.n	8007d28 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007c56:	68e3      	ldr	r3, [r4, #12]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d856      	bhi.n	8007d0c <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8007c64:	f040 809b 	bne.w	8007d9e <HAL_I2C_Init+0x182>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007c68:	6963      	ldr	r3, [r4, #20]
 8007c6a:	2bff      	cmp	r3, #255	; 0xff
 8007c6c:	f200 808d 	bhi.w	8007d8a <HAL_I2C_Init+0x16e>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8007c70:	69a3      	ldr	r3, [r4, #24]
 8007c72:	2b07      	cmp	r3, #7
 8007c74:	d87e      	bhi.n	8007d74 <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007c76:	69e3      	ldr	r3, [r4, #28]
 8007c78:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8007c7c:	d170      	bne.n	8007d60 <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007c7e:	6a23      	ldr	r3, [r4, #32]
 8007c80:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8007c84:	d160      	bne.n	8007d48 <HAL_I2C_Init+0x12c>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c86:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007c8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d054      	beq.n	8007d3c <HAL_I2C_Init+0x120>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c92:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c94:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c96:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c9a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c9e:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8007ca0:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ca2:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8007ca6:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8007ca8:	f020 0001 	bic.w	r0, r0, #1
 8007cac:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007cae:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007cb0:	6899      	ldr	r1, [r3, #8]
 8007cb2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007cb6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cb8:	d032      	beq.n	8007d20 <HAL_I2C_Init+0x104>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007cba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cbe:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007cc0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cc2:	d102      	bne.n	8007cca <HAL_I2C_Init+0xae>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cc8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cca:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ccc:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cce:	4843      	ldr	r0, [pc, #268]	; (8007ddc <HAL_I2C_Init+0x1c0>)
  hi2c->State = HAL_I2C_STATE_READY;
 8007cd0:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007cd2:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cd4:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007cd6:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cda:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007cdc:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007cde:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007ce0:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007ce2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007ce6:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007ce8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cec:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007cee:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8007cf0:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007cf2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cf4:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	f042 0201 	orr.w	r2, r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cfe:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d00:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d04:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d06:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8007d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007d0c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007d10:	4833      	ldr	r0, [pc, #204]	; (8007de0 <HAL_I2C_Init+0x1c4>)
 8007d12:	f7fa fc9d 	bl	8002650 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8007d1c:	d0a4      	beq.n	8007c68 <HAL_I2C_Init+0x4c>
 8007d1e:	e03e      	b.n	8007d9e <HAL_I2C_Init+0x182>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d24:	609a      	str	r2, [r3, #8]
 8007d26:	e7d0      	b.n	8007cca <HAL_I2C_Init+0xae>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8007d28:	f240 11df 	movw	r1, #479	; 0x1df
 8007d2c:	482c      	ldr	r0, [pc, #176]	; (8007de0 <HAL_I2C_Init+0x1c4>)
 8007d2e:	f7fa fc8f 	bl	8002650 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007d32:	68e3      	ldr	r3, [r4, #12]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d991      	bls.n	8007c5e <HAL_I2C_Init+0x42>
 8007d3a:	e7e7      	b.n	8007d0c <HAL_I2C_Init+0xf0>
    hi2c->Lock = HAL_UNLOCKED;
 8007d3c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8007d40:	4620      	mov	r0, r4
 8007d42:	f7fb fba7 	bl	8003494 <HAL_I2C_MspInit>
 8007d46:	e7a4      	b.n	8007c92 <HAL_I2C_Init+0x76>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007d48:	f240 11e5 	movw	r1, #485	; 0x1e5
 8007d4c:	4824      	ldr	r0, [pc, #144]	; (8007de0 <HAL_I2C_Init+0x1c4>)
 8007d4e:	f7fa fc7f 	bl	8002650 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d52:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007d56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d199      	bne.n	8007c92 <HAL_I2C_Init+0x76>
 8007d5e:	e7ed      	b.n	8007d3c <HAL_I2C_Init+0x120>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007d60:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8007d64:	481e      	ldr	r0, [pc, #120]	; (8007de0 <HAL_I2C_Init+0x1c4>)
 8007d66:	f7fa fc73 	bl	8002650 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007d6a:	6a23      	ldr	r3, [r4, #32]
 8007d6c:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8007d70:	d089      	beq.n	8007c86 <HAL_I2C_Init+0x6a>
 8007d72:	e7e9      	b.n	8007d48 <HAL_I2C_Init+0x12c>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8007d74:	f240 11e3 	movw	r1, #483	; 0x1e3
 8007d78:	4819      	ldr	r0, [pc, #100]	; (8007de0 <HAL_I2C_Init+0x1c4>)
 8007d7a:	f7fa fc69 	bl	8002650 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007d7e:	69e3      	ldr	r3, [r4, #28]
 8007d80:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8007d84:	f43f af7b 	beq.w	8007c7e <HAL_I2C_Init+0x62>
 8007d88:	e7ea      	b.n	8007d60 <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007d8a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8007d8e:	4814      	ldr	r0, [pc, #80]	; (8007de0 <HAL_I2C_Init+0x1c4>)
 8007d90:	f7fa fc5e 	bl	8002650 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8007d94:	69a3      	ldr	r3, [r4, #24]
 8007d96:	2b07      	cmp	r3, #7
 8007d98:	f67f af6d 	bls.w	8007c76 <HAL_I2C_Init+0x5a>
 8007d9c:	e7ea      	b.n	8007d74 <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007d9e:	f240 11e1 	movw	r1, #481	; 0x1e1
 8007da2:	480f      	ldr	r0, [pc, #60]	; (8007de0 <HAL_I2C_Init+0x1c4>)
 8007da4:	f7fa fc54 	bl	8002650 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007da8:	6963      	ldr	r3, [r4, #20]
 8007daa:	2bff      	cmp	r3, #255	; 0xff
 8007dac:	f67f af60 	bls.w	8007c70 <HAL_I2C_Init+0x54>
 8007db0:	e7eb      	b.n	8007d8a <HAL_I2C_Init+0x16e>
    return HAL_ERROR;
 8007db2:	2001      	movs	r0, #1
}
 8007db4:	4770      	bx	lr
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007db6:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007dba:	4809      	ldr	r0, [pc, #36]	; (8007de0 <HAL_I2C_Init+0x1c4>)
 8007dbc:	f7fa fc48 	bl	8002650 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8007dc0:	68a3      	ldr	r3, [r4, #8]
 8007dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc6:	f4ff af46 	bcc.w	8007c56 <HAL_I2C_Init+0x3a>
 8007dca:	e7ad      	b.n	8007d28 <HAL_I2C_Init+0x10c>
 8007dcc:	40005c00 	.word	0x40005c00
 8007dd0:	40005400 	.word	0x40005400
 8007dd4:	40005800 	.word	0x40005800
 8007dd8:	40006000 	.word	0x40006000
 8007ddc:	02008000 	.word	0x02008000
 8007de0:	08023318 	.word	0x08023318

08007de4 <HAL_I2C_Master_Transmit>:
{
 8007de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007de8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8007dec:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dee:	2c20      	cmp	r4, #32
 8007df0:	d169      	bne.n	8007ec6 <HAL_I2C_Master_Transmit+0xe2>
    __HAL_LOCK(hi2c);
 8007df2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8007df6:	2c01      	cmp	r4, #1
 8007df8:	d065      	beq.n	8007ec6 <HAL_I2C_Master_Transmit+0xe2>
 8007dfa:	f04f 0901 	mov.w	r9, #1
 8007dfe:	4604      	mov	r4, r0
 8007e00:	4698      	mov	r8, r3
 8007e02:	4615      	mov	r5, r2
 8007e04:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
 8007e08:	460f      	mov	r7, r1
    tickstart = HAL_GetTick();
 8007e0a:	f7fc fdcf 	bl	80049ac <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e0e:	464a      	mov	r2, r9
    tickstart = HAL_GetTick();
 8007e10:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e12:	9000      	str	r0, [sp, #0]
 8007e14:	2319      	movs	r3, #25
 8007e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7ff fe9c 	bl	8007b58 <I2C_WaitOnFlagUntilTimeout>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d154      	bne.n	8007ece <HAL_I2C_Master_Transmit+0xea>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e24:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e26:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8007e28:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e2a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e32:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8007e34:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e3a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e3c:	2bff      	cmp	r3, #255	; 0xff
 8007e3e:	d954      	bls.n	8007eea <HAL_I2C_Master_Transmit+0x106>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e40:	4839      	ldr	r0, [pc, #228]	; (8007f28 <HAL_I2C_Master_Transmit+0x144>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e42:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e48:	4639      	mov	r1, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e4a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e4c:	9000      	str	r0, [sp, #0]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f7ff fd88 	bl	8007964 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e56:	4632      	mov	r2, r6
 8007e58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e5a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d050      	beq.n	8007f04 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e62:	f7ff fe21 	bl	8007aa8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d131      	bne.n	8007ece <HAL_I2C_Master_Transmit+0xea>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	f811 5b01 	ldrb.w	r5, [r1], #1
      hi2c->XferSize--;
 8007e72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e74:	6295      	str	r5, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8007e76:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007e78:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8007e7a:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007e7c:	3d01      	subs	r5, #1
      hi2c->XferSize--;
 8007e7e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8007e80:	b2ad      	uxth	r5, r5
      hi2c->XferSize--;
 8007e82:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007e84:	8565      	strh	r5, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e86:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8007e88:	b289      	uxth	r1, r1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e2      	bne.n	8007e54 <HAL_I2C_Master_Transmit+0x70>
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	d0e0      	beq.n	8007e54 <HAL_I2C_Master_Transmit+0x70>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e92:	4602      	mov	r2, r0
 8007e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e96:	2180      	movs	r1, #128	; 0x80
 8007e98:	9600      	str	r6, [sp, #0]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f7ff fe5c 	bl	8007b58 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ea0:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ea4:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007eaa:	4639      	mov	r1, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007eac:	b978      	cbnz	r0, 8007ece <HAL_I2C_Master_Transmit+0xea>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eae:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007eb2:	4662      	mov	r2, ip
 8007eb4:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eb6:	45e6      	cmp	lr, ip
 8007eb8:	d90d      	bls.n	8007ed6 <HAL_I2C_Master_Transmit+0xf2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007eba:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ebe:	9500      	str	r5, [sp, #0]
 8007ec0:	f7ff fd50 	bl	8007964 <I2C_TransferConfig>
 8007ec4:	e7c6      	b.n	8007e54 <HAL_I2C_Master_Transmit+0x70>
    return HAL_BUSY;
 8007ec6:	2002      	movs	r0, #2
}
 8007ec8:	b003      	add	sp, #12
 8007eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8007ece:	2001      	movs	r0, #1
}
 8007ed0:	b003      	add	sp, #12
 8007ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8007ed6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007edc:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007ede:	b292      	uxth	r2, r2
 8007ee0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	f7ff fd3e 	bl	8007964 <I2C_TransferConfig>
 8007ee8:	e7b4      	b.n	8007e54 <HAL_I2C_Master_Transmit+0x70>
      hi2c->XferSize = hi2c->XferCount;
 8007eea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007eec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ef0:	4d0d      	ldr	r5, [pc, #52]	; (8007f28 <HAL_I2C_Master_Transmit+0x144>)
 8007ef2:	4639      	mov	r1, r7
      hi2c->XferSize = hi2c->XferCount;
 8007ef4:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8007efa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	f7ff fd31 	bl	8007964 <I2C_TransferConfig>
 8007f02:	e7a7      	b.n	8007e54 <HAL_I2C_Master_Transmit+0x70>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f04:	f7ff fdfe 	bl	8007b04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d1e0      	bne.n	8007ece <HAL_I2C_Master_Transmit+0xea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8007f10:	4d06      	ldr	r5, [pc, #24]	; (8007f2c <HAL_I2C_Master_Transmit+0x148>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f12:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	402a      	ands	r2, r5
 8007f18:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007f1a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007f1e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f22:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007f26:	e7cf      	b.n	8007ec8 <HAL_I2C_Master_Transmit+0xe4>
 8007f28:	80002000 	.word	0x80002000
 8007f2c:	fe00e800 	.word	0xfe00e800

08007f30 <HAL_I2C_Mem_Read>:
{
 8007f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	4698      	mov	r8, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007f36:	3b01      	subs	r3, #1
{
 8007f38:	b083      	sub	sp, #12
 8007f3a:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007f3c:	2b01      	cmp	r3, #1
{
 8007f3e:	460e      	mov	r6, r1
 8007f40:	4692      	mov	sl, r2
 8007f42:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007f46:	d904      	bls.n	8007f52 <HAL_I2C_Mem_Read+0x22>
 8007f48:	f640 1174 	movw	r1, #2420	; 0x974
 8007f4c:	4862      	ldr	r0, [pc, #392]	; (80080d8 <HAL_I2C_Mem_Read+0x1a8>)
 8007f4e:	f7fa fb7f 	bl	8002650 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f52:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d11c      	bne.n	8007f94 <HAL_I2C_Mem_Read+0x64>
    if ((pData == NULL) || (Size == 0U))
 8007f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f5c:	b1f3      	cbz	r3, 8007f9c <HAL_I2C_Mem_Read+0x6c>
 8007f5e:	f1b9 0f00 	cmp.w	r9, #0
 8007f62:	d01b      	beq.n	8007f9c <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 8007f64:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d013      	beq.n	8007f94 <HAL_I2C_Mem_Read+0x64>
 8007f6c:	2501      	movs	r5, #1
 8007f6e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007f72:	f7fc fd1b 	bl	80049ac <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f76:	462a      	mov	r2, r5
 8007f78:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007f7a:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f7c:	2319      	movs	r3, #25
 8007f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f82:	4620      	mov	r0, r4
 8007f84:	f7ff fde8 	bl	8007b58 <I2C_WaitOnFlagUntilTimeout>
 8007f88:	4683      	mov	fp, r0
 8007f8a:	b170      	cbz	r0, 8007faa <HAL_I2C_Mem_Read+0x7a>
      return HAL_ERROR;
 8007f8c:	2001      	movs	r0, #1
}
 8007f8e:	b003      	add	sp, #12
 8007f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8007f94:	2002      	movs	r0, #2
}
 8007f96:	b003      	add	sp, #12
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8007fa0:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007fa2:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007fa4:	b003      	add	sp, #12
 8007fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007faa:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8007fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fae:	990e      	ldr	r1, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007fb0:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8007fb4:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fb6:	4652      	mov	r2, sl
    hi2c->XferISR   = NULL;
 8007fb8:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fbc:	4643      	mov	r3, r8
 8007fbe:	9100      	str	r1, [sp, #0]
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	9701      	str	r7, [sp, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007fc4:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fc8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fcc:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fce:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8007fd2:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fd6:	f7ff fded 	bl	8007bb4 <I2C_RequestMemoryRead>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d14a      	bne.n	8008074 <HAL_I2C_Mem_Read+0x144>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007fe0:	2bff      	cmp	r3, #255	; 0xff
 8007fe2:	d955      	bls.n	8008090 <HAL_I2C_Mem_Read+0x160>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fe4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007fe6:	483d      	ldr	r0, [pc, #244]	; (80080dc <HAL_I2C_Mem_Read+0x1ac>)
 8007fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fec:	4631      	mov	r1, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007ff0:	9000      	str	r0, [sp, #0]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f7ff fcb6 	bl	8007964 <I2C_TransferConfig>
 8007ff8:	e003      	b.n	8008002 <HAL_I2C_Mem_Read+0xd2>
    while (hi2c->XferCount > 0U);
 8007ffa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d053      	beq.n	80080aa <HAL_I2C_Mem_Read+0x17a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008002:	9700      	str	r7, [sp, #0]
 8008004:	2200      	movs	r2, #0
 8008006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008008:	2104      	movs	r1, #4
 800800a:	4620      	mov	r0, r4
 800800c:	f7ff fda4 	bl	8007b58 <I2C_WaitOnFlagUntilTimeout>
 8008010:	2800      	cmp	r0, #0
 8008012:	d1bb      	bne.n	8007f8c <HAL_I2C_Mem_Read+0x5c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008014:	6822      	ldr	r2, [r4, #0]
 8008016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800801a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800801c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800801e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008020:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8008022:	6a65      	ldr	r5, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8008024:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8008026:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8008028:	3501      	adds	r5, #1
      hi2c->XferSize--;
 800802a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800802c:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800802e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008030:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008032:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8008034:	6265      	str	r5, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1df      	bne.n	8007ffa <HAL_I2C_Mem_Read+0xca>
 800803a:	2900      	cmp	r1, #0
 800803c:	d0dd      	beq.n	8007ffa <HAL_I2C_Mem_Read+0xca>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800803e:	4602      	mov	r2, r0
 8008040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008042:	2180      	movs	r1, #128	; 0x80
 8008044:	9700      	str	r7, [sp, #0]
 8008046:	4620      	mov	r0, r4
 8008048:	f7ff fd86 	bl	8007b58 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800804c:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008050:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008052:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008056:	4631      	mov	r1, r6
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008058:	2800      	cmp	r0, #0
 800805a:	d197      	bne.n	8007f8c <HAL_I2C_Mem_Read+0x5c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800805c:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008060:	4662      	mov	r2, ip
 8008062:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008064:	45e6      	cmp	lr, ip
 8008066:	d909      	bls.n	800807c <HAL_I2C_Mem_Read+0x14c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008068:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800806c:	9500      	str	r5, [sp, #0]
 800806e:	f7ff fc79 	bl	8007964 <I2C_TransferConfig>
 8008072:	e7c2      	b.n	8007ffa <HAL_I2C_Mem_Read+0xca>
      __HAL_UNLOCK(hi2c);
 8008074:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008078:	4628      	mov	r0, r5
 800807a:	e78c      	b.n	8007f96 <HAL_I2C_Mem_Read+0x66>
          hi2c->XferSize = hi2c->XferCount;
 800807c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800807e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008082:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8008084:	b292      	uxth	r2, r2
 8008086:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	f7ff fc6b 	bl	8007964 <I2C_TransferConfig>
 800808e:	e7b4      	b.n	8007ffa <HAL_I2C_Mem_Read+0xca>
      hi2c->XferSize = hi2c->XferCount;
 8008090:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008096:	4d11      	ldr	r5, [pc, #68]	; (80080dc <HAL_I2C_Mem_Read+0x1ac>)
 8008098:	4631      	mov	r1, r6
      hi2c->XferSize = hi2c->XferCount;
 800809a:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800809c:	4620      	mov	r0, r4
 800809e:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80080a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	f7ff fc5e 	bl	8007964 <I2C_TransferConfig>
 80080a8:	e7ab      	b.n	8008002 <HAL_I2C_Mem_Read+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080aa:	463a      	mov	r2, r7
 80080ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7ff fd28 	bl	8007b04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	f47f af69 	bne.w	8007f8c <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80080be:	4d08      	ldr	r5, [pc, #32]	; (80080e0 <HAL_I2C_Mem_Read+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080c0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	402a      	ands	r2, r5
 80080c6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80080c8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80080cc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80080d4:	e75f      	b.n	8007f96 <HAL_I2C_Mem_Read+0x66>
 80080d6:	bf00      	nop
 80080d8:	08023318 	.word	0x08023318
 80080dc:	80002400 	.word	0x80002400
 80080e0:	fe00e800 	.word	0xfe00e800

080080e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80080e8:	4b22      	ldr	r3, [pc, #136]	; (8008174 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 80080ea:	4823      	ldr	r0, [pc, #140]	; (8008178 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 80080ec:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	4922      	ldr	r1, [pc, #136]	; (800817c <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 80080f2:	429a      	cmp	r2, r3
 80080f4:	bf18      	it	ne
 80080f6:	4282      	cmpne	r2, r0
 80080f8:	bf14      	ite	ne
 80080fa:	2301      	movne	r3, #1
 80080fc:	2300      	moveq	r3, #0
 80080fe:	428a      	cmp	r2, r1
 8008100:	bf0c      	ite	eq
 8008102:	2300      	moveq	r3, #0
 8008104:	f003 0301 	andne.w	r3, r3, #1
 8008108:	b113      	cbz	r3, 8008110 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800810a:	4b1d      	ldr	r3, [pc, #116]	; (8008180 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800810c:	429a      	cmp	r2, r3
 800810e:	d12c      	bne.n	800816a <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8008110:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 8008114:	d124      	bne.n	8008160 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008116:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b20      	cmp	r3, #32
 800811e:	d11d      	bne.n	800815c <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008120:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008124:	2a01      	cmp	r2, #1
 8008126:	d019      	beq.n	800815c <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008128:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800812a:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800812c:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800812e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008132:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8008134:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8008136:	f021 0101 	bic.w	r1, r1, #1
 800813a:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008142:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8008144:	6811      	ldr	r1, [r2, #0]
 8008146:	430d      	orrs	r5, r1
 8008148:	6015      	str	r5, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800814a:	6811      	ldr	r1, [r2, #0]
 800814c:	f041 0101 	orr.w	r1, r1, #1
 8008150:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008152:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008156:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800815a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800815c:	2002      	movs	r0, #2
}
 800815e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8008160:	2160      	movs	r1, #96	; 0x60
 8008162:	4808      	ldr	r0, [pc, #32]	; (8008184 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 8008164:	f7fa fa74 	bl	8002650 <assert_failed>
 8008168:	e7d5      	b.n	8008116 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800816a:	215f      	movs	r1, #95	; 0x5f
 800816c:	4805      	ldr	r0, [pc, #20]	; (8008184 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800816e:	f7fa fa6f 	bl	8002650 <assert_failed>
 8008172:	e7cd      	b.n	8008110 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8008174:	40005400 	.word	0x40005400
 8008178:	40005800 	.word	0x40005800
 800817c:	40005c00 	.word	0x40005c00
 8008180:	40006000 	.word	0x40006000
 8008184:	08023350 	.word	0x08023350

08008188 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800818c:	4b21      	ldr	r3, [pc, #132]	; (8008214 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800818e:	4822      	ldr	r0, [pc, #136]	; (8008218 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 8008190:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008192:	6822      	ldr	r2, [r4, #0]
 8008194:	4921      	ldr	r1, [pc, #132]	; (800821c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008196:	429a      	cmp	r2, r3
 8008198:	bf18      	it	ne
 800819a:	4282      	cmpne	r2, r0
 800819c:	bf14      	ite	ne
 800819e:	2301      	movne	r3, #1
 80081a0:	2300      	moveq	r3, #0
 80081a2:	428a      	cmp	r2, r1
 80081a4:	bf0c      	ite	eq
 80081a6:	2300      	moveq	r3, #0
 80081a8:	f003 0301 	andne.w	r3, r3, #1
 80081ac:	b113      	cbz	r3, 80081b4 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 80081ae:	4b1c      	ldr	r3, [pc, #112]	; (8008220 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d12a      	bne.n	800820a <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80081b4:	2d0f      	cmp	r5, #15
 80081b6:	d823      	bhi.n	8008200 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081b8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d11c      	bne.n	80081fc <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081c2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80081c6:	2a01      	cmp	r2, #1
 80081c8:	d018      	beq.n	80081fc <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081ca:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80081cc:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ce:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80081d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80081d4:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 80081d6:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 80081d8:	f021 0101 	bic.w	r1, r1, #1
 80081dc:	6011      	str	r1, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80081de:	6811      	ldr	r1, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80081e0:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80081e4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80081e8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80081ea:	6811      	ldr	r1, [r2, #0]
 80081ec:	f041 0101 	orr.w	r1, r1, #1
 80081f0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80081f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80081f6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80081fc:	2002      	movs	r0, #2
}
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8008200:	218e      	movs	r1, #142	; 0x8e
 8008202:	4808      	ldr	r0, [pc, #32]	; (8008224 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8008204:	f7fa fa24 	bl	8002650 <assert_failed>
 8008208:	e7d6      	b.n	80081b8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800820a:	218d      	movs	r1, #141	; 0x8d
 800820c:	4805      	ldr	r0, [pc, #20]	; (8008224 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800820e:	f7fa fa1f 	bl	8002650 <assert_failed>
 8008212:	e7cf      	b.n	80081b4 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8008214:	40005400 	.word	0x40005400
 8008218:	40005800 	.word	0x40005800
 800821c:	40005c00 	.word	0x40005c00
 8008220:	40006000 	.word	0x40006000
 8008224:	08023350 	.word	0x08023350

08008228 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008228:	6803      	ldr	r3, [r0, #0]
 800822a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800822e:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008230:	601a      	str	r2, [r3, #0]
}
 8008232:	4770      	bx	lr

08008234 <HAL_MDIOS_Init>:
HAL_StatusTypeDef HAL_MDIOS_Init(MDIOS_HandleTypeDef *hmdios)
{
  uint32_t tmpcr = 0;

  /* Check the MDIOS handle allocation */
  if(hmdios == NULL)
 8008234:	2800      	cmp	r0, #0
 8008236:	d03c      	beq.n	80082b2 <HAL_MDIOS_Init+0x7e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 8008238:	4b21      	ldr	r3, [pc, #132]	; (80082c0 <HAL_MDIOS_Init+0x8c>)
 800823a:	6802      	ldr	r2, [r0, #0]
 800823c:	429a      	cmp	r2, r3
{
 800823e:	b570      	push	{r4, r5, r6, lr}
 8008240:	4604      	mov	r4, r0
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 8008242:	d003      	beq.n	800824c <HAL_MDIOS_Init+0x18>
 8008244:	21c7      	movs	r1, #199	; 0xc7
 8008246:	481f      	ldr	r0, [pc, #124]	; (80082c4 <HAL_MDIOS_Init+0x90>)
 8008248:	f7fa fa02 	bl	8002650 <assert_failed>
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 800824c:	6863      	ldr	r3, [r4, #4]
 800824e:	2b1f      	cmp	r3, #31
 8008250:	d826      	bhi.n	80082a0 <HAL_MDIOS_Init+0x6c>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008258:	d119      	bne.n	800828e <HAL_MDIOS_Init+0x5a>
  
  /* Process Locked */
  __HAL_LOCK(hmdios);
 800825a:	7b63      	ldrb	r3, [r4, #13]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d01d      	beq.n	800829c <HAL_MDIOS_Init+0x68>
 8008260:	2201      	movs	r2, #1
  
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 8008262:	7b23      	ldrb	r3, [r4, #12]
  __HAL_LOCK(hmdios);
 8008264:	7362      	strb	r2, [r4, #13]
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 8008266:	b333      	cbz	r3, 80082b6 <HAL_MDIOS_Init+0x82>
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_BUSY;
  
  /* Get the MDIOS CR value */
  tmpcr = hmdios->Instance->CR;
 8008268:	6825      	ldr	r5, [r4, #0]
  
  /* Write the MDIOS CR */
  hmdios->Instance->CR = tmpcr;
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_READY;
 800826a:	2601      	movs	r6, #1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 800826c:	68a3      	ldr	r3, [r4, #8]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 800826e:	2202      	movs	r2, #2
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008270:	6861      	ldr	r1, [r4, #4]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 8008272:	7322      	strb	r2, [r4, #12]
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008274:	4333      	orrs	r3, r6
  tmpcr = hmdios->Instance->CR;
 8008276:	6828      	ldr	r0, [r5, #0]
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 8008278:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <HAL_MDIOS_Init+0x94>)
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 800827a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  
  /* Release Lock */
  __HAL_UNLOCK(hmdios);
 800827e:	2100      	movs	r1, #0
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 8008280:	4002      	ands	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8008282:	4608      	mov	r0, r1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008284:	4313      	orrs	r3, r2
  hmdios->Instance->CR = tmpcr;
 8008286:	602b      	str	r3, [r5, #0]
  hmdios->State = HAL_MDIOS_STATE_READY;
 8008288:	7326      	strb	r6, [r4, #12]
  __HAL_UNLOCK(hmdios);
 800828a:	7361      	strb	r1, [r4, #13]

}
 800828c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 800828e:	21c9      	movs	r1, #201	; 0xc9
 8008290:	480c      	ldr	r0, [pc, #48]	; (80082c4 <HAL_MDIOS_Init+0x90>)
 8008292:	f7fa f9dd 	bl	8002650 <assert_failed>
  __HAL_LOCK(hmdios);
 8008296:	7b63      	ldrb	r3, [r4, #13]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d1e1      	bne.n	8008260 <HAL_MDIOS_Init+0x2c>
 800829c:	2002      	movs	r0, #2
}
 800829e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 80082a0:	21c8      	movs	r1, #200	; 0xc8
 80082a2:	4808      	ldr	r0, [pc, #32]	; (80082c4 <HAL_MDIOS_Init+0x90>)
 80082a4:	f7fa f9d4 	bl	8002650 <assert_failed>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 80082a8:	68a3      	ldr	r3, [r4, #8]
 80082aa:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80082ae:	d0d4      	beq.n	800825a <HAL_MDIOS_Init+0x26>
 80082b0:	e7ed      	b.n	800828e <HAL_MDIOS_Init+0x5a>
    return HAL_ERROR;
 80082b2:	2001      	movs	r0, #1
}
 80082b4:	4770      	bx	lr
    HAL_MDIOS_MspInit(hmdios);
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7fb f976 	bl	80035a8 <HAL_MDIOS_MspInit>
 80082bc:	e7d4      	b.n	8008268 <HAL_MDIOS_Init+0x34>
 80082be:	bf00      	nop
 80082c0:	40017800 	.word	0x40017800
 80082c4:	0802338c 	.word	0x0802338c
 80082c8:	ffffe07e 	.word	0xffffe07e

080082cc <HAL_MDIOS_WriteCpltCallback>:
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <HAL_MDIOS_ReadCpltCallback>:
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop

080082d4 <HAL_MDIOS_ErrorCallback>:
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop

080082d8 <HAL_MDIOS_WakeUpCallback>:
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop

080082dc <HAL_MDIOS_IRQHandler>:
  * @brief This function handles MDIOS interrupt request.
  * @param hmdios MDIOS handle
  * @retval None
  */
void HAL_MDIOS_IRQHandler(MDIOS_HandleTypeDef *hmdios)
{
 80082dc:	b538      	push	{r3, r4, r5, lr}
  /* Write Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 80082de:	6803      	ldr	r3, [r0, #0]
{
 80082e0:	4604      	mov	r4, r0
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	0795      	lsls	r5, r2, #30
 80082e6:	d501      	bpl.n	80082ec <HAL_MDIOS_IRQHandler+0x10>
  return hmdios->Instance->WRFR;   
 80082e8:	685a      	ldr	r2, [r3, #4]
  {
    /* Write register flag */
    if(HAL_MDIOS_GetWrittenRegAddress(hmdios) != RESET)
 80082ea:	bb22      	cbnz	r2, 8008336 <HAL_MDIOS_IRQHandler+0x5a>
      HAL_MDIOS_ClearWriteRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Read Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_READ) != RESET)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	0750      	lsls	r0, r2, #29
 80082f0:	d502      	bpl.n	80082f8 <HAL_MDIOS_IRQHandler+0x1c>
  return hmdios->Instance->RDFR;   
 80082f2:	68da      	ldr	r2, [r3, #12]
  {
    /* Read register flag */
    if(HAL_MDIOS_GetReadRegAddress(hmdios) != RESET)
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	d130      	bne.n	800835a <HAL_MDIOS_IRQHandler+0x7e>
      HAL_MDIOS_ClearReadRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Error Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_ERROR) != RESET)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	0711      	lsls	r1, r2, #28
 80082fc:	d502      	bpl.n	8008304 <HAL_MDIOS_IRQHandler+0x28>
  {
    /* All Errors Flag */
    if(__HAL_MDIOS_GET_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG) !=RESET)
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	075a      	lsls	r2, r3, #29
 8008302:	d10b      	bne.n	800831c <HAL_MDIOS_IRQHandler+0x40>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
    }
  }
   
  /* check MDIOS WAKEUP exti flag */
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 8008304:	4d1e      	ldr	r5, [pc, #120]	; (8008380 <HAL_MDIOS_IRQHandler+0xa4>)
 8008306:	696b      	ldr	r3, [r5, #20]
 8008308:	01db      	lsls	r3, r3, #7
 800830a:	d400      	bmi.n	800830e <HAL_MDIOS_IRQHandler+0x32>
#endif /* USE_HAL_MDIOS_REGISTER_CALLBACKS */

    /* Clear MDIOS WAKEUP Exti pending bit */
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
  }
}
 800830c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_MDIOS_WakeUpCallback(hmdios);
 800830e:	4620      	mov	r0, r4
 8008310:	f7ff ffe2 	bl	80082d8 <HAL_MDIOS_WakeUpCallback>
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
 8008314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008318:	616b      	str	r3, [r5, #20]
}
 800831a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_MDIOS_ErrorCallback(hmdios);
 800831c:	4620      	mov	r0, r4
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800831e:	4d18      	ldr	r5, [pc, #96]	; (8008380 <HAL_MDIOS_IRQHandler+0xa4>)
      HAL_MDIOS_ErrorCallback(hmdios);
 8008320:	f7ff ffd8 	bl	80082d4 <HAL_MDIOS_ErrorCallback>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
 8008324:	6822      	ldr	r2, [r4, #0]
 8008326:	6993      	ldr	r3, [r2, #24]
 8008328:	f043 0307 	orr.w	r3, r3, #7
 800832c:	6193      	str	r3, [r2, #24]
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800832e:	696b      	ldr	r3, [r5, #20]
 8008330:	01db      	lsls	r3, r3, #7
 8008332:	d5eb      	bpl.n	800830c <HAL_MDIOS_IRQHandler+0x30>
 8008334:	e7eb      	b.n	800830e <HAL_MDIOS_IRQHandler+0x32>
      HAL_MDIOS_WriteCpltCallback(hmdios);
 8008336:	f7ff ffc9 	bl	80082cc <HAL_MDIOS_WriteCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 800833a:	f44f 7121 	mov.w	r1, #644	; 0x284
 800833e:	4811      	ldr	r0, [pc, #68]	; (8008384 <HAL_MDIOS_IRQHandler+0xa8>)
 8008340:	f7fa f986 	bl	8002650 <assert_failed>
  __HAL_LOCK(hmdios);
 8008344:	7b63      	ldrb	r3, [r4, #13]
 8008346:	2b01      	cmp	r3, #1
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	d0cf      	beq.n	80082ec <HAL_MDIOS_IRQHandler+0x10>
  hmdios->Instance->CWRFR |= (RegNum);
 800834c:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 8008350:	2200      	movs	r2, #0
  hmdios->Instance->CWRFR |= (RegNum);
 8008352:	6898      	ldr	r0, [r3, #8]
 8008354:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(hmdios);
 8008356:	7362      	strb	r2, [r4, #13]
 8008358:	e7c8      	b.n	80082ec <HAL_MDIOS_IRQHandler+0x10>
      HAL_MDIOS_ReadCpltCallback(hmdios);
 800835a:	4620      	mov	r0, r4
 800835c:	f7ff ffb8 	bl	80082d0 <HAL_MDIOS_ReadCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 8008360:	f240 219b 	movw	r1, #667	; 0x29b
 8008364:	4807      	ldr	r0, [pc, #28]	; (8008384 <HAL_MDIOS_IRQHandler+0xa8>)
 8008366:	f7fa f973 	bl	8002650 <assert_failed>
  __HAL_LOCK(hmdios);
 800836a:	7b63      	ldrb	r3, [r4, #13]
 800836c:	2b01      	cmp	r3, #1
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	d0c2      	beq.n	80082f8 <HAL_MDIOS_IRQHandler+0x1c>
  hmdios->Instance->CRDFR |= (RegNum); 
 8008372:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 8008376:	2200      	movs	r2, #0
  hmdios->Instance->CRDFR |= (RegNum); 
 8008378:	6918      	ldr	r0, [r3, #16]
 800837a:	6119      	str	r1, [r3, #16]
  __HAL_UNLOCK(hmdios);
 800837c:	7362      	strb	r2, [r4, #13]
 800837e:	e7bb      	b.n	80082f8 <HAL_MDIOS_IRQHandler+0x1c>
 8008380:	40013c00 	.word	0x40013c00
 8008384:	0802338c 	.word	0x0802338c

08008388 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838a:	b08b      	sub	sp, #44	; 0x2c
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800838c:	2800      	cmp	r0, #0
 800838e:	f000 8092 	beq.w	80084b6 <HAL_PCD_Init+0x12e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8008392:	6803      	ldr	r3, [r0, #0]
 8008394:	4604      	mov	r4, r0
 8008396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800839a:	d006      	beq.n	80083aa <HAL_PCD_Init+0x22>
 800839c:	4a4a      	ldr	r2, [pc, #296]	; (80084c8 <HAL_PCD_Init+0x140>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d003      	beq.n	80083aa <HAL_PCD_Init+0x22>
 80083a2:	2186      	movs	r1, #134	; 0x86
 80083a4:	4849      	ldr	r0, [pc, #292]	; (80084cc <HAL_PCD_Init+0x144>)
 80083a6:	f7fa f953 	bl	8002650 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80083aa:	f894 33bd 	ldrb.w	r3, [r4, #957]	; 0x3bd
 80083ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d079      	beq.n	80084aa <HAL_PCD_Init+0x122>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80083b6:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083b8:	4625      	mov	r5, r4
  __HAL_PCD_DISABLE(hpcd);
 80083ba:	6820      	ldr	r0, [r4, #0]
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083bc:	466f      	mov	r7, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 80083be:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083c2:	1d26      	adds	r6, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 80083c4:	f005 fdf2 	bl	800dfac <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083c8:	f855 eb10 	ldr.w	lr, [r5], #16
 80083cc:	46ac      	mov	ip, r5
 80083ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80083d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80083d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80083d8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80083da:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80083de:	e887 0003 	stmia.w	r7, {r0, r1}
 80083e2:	4670      	mov	r0, lr
 80083e4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80083e8:	f005 fd1a 	bl	800de20 <USB_CoreInit>
 80083ec:	4607      	mov	r7, r0
 80083ee:	b130      	cbz	r0, 80083fe <HAL_PCD_Init+0x76>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 80083f0:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083f2:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80083f4:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083f6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 80083fa:	b00b      	add	sp, #44	; 0x2c
 80083fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80083fe:	4601      	mov	r1, r0
 8008400:	6820      	ldr	r0, [r4, #0]
 8008402:	f005 fddb 	bl	800dfbc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008406:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800840a:	f1bc 0f00 	cmp.w	ip, #0
 800840e:	d02b      	beq.n	8008468 <HAL_PCD_Init+0xe0>
 8008410:	4638      	mov	r0, r7
    hpcd->IN_ep[i].is_in = 1U;
 8008412:	2701      	movs	r7, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008414:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8008416:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800841a:	1c41      	adds	r1, r0, #1
    hpcd->IN_ep[i].is_in = 1U;
 800841c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8008420:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008424:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008428:	b2c8      	uxtb	r0, r1
    hpcd->IN_ep[i].is_in = 1U;
 800842a:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800842e:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8008434:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008436:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800843a:	d3ec      	bcc.n	8008416 <HAL_PCD_Init+0x8e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800843c:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800843e:	4611      	mov	r1, r2
 8008440:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008444:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8008446:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800844a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800844e:	b2c2      	uxtb	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 8008450:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008454:	4562      	cmp	r2, ip
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008456:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800845a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800845e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008462:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008466:	d3eb      	bcc.n	8008440 <HAL_PCD_Init+0xb8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008468:	466f      	mov	r7, sp
 800846a:	f8d4 c000 	ldr.w	ip, [r4]
 800846e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008470:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008474:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008476:	e895 0003 	ldmia.w	r5, {r0, r1}
 800847a:	e887 0003 	stmia.w	r7, {r0, r1}
 800847e:	4660      	mov	r0, ip
 8008480:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8008484:	f005 fdb2 	bl	800dfec <USB_DevInit>
 8008488:	4605      	mov	r5, r0
 800848a:	2800      	cmp	r0, #0
 800848c:	d1b0      	bne.n	80083f0 <HAL_PCD_Init+0x68>
  hpcd->State = HAL_PCD_STATE_READY;
 800848e:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8008490:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8008492:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8008496:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8008498:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800849c:	d00f      	beq.n	80084be <HAL_PCD_Init+0x136>
  (void)USB_DevDisconnect(hpcd->Instance);
 800849e:	6820      	ldr	r0, [r4, #0]
 80084a0:	f006 f942 	bl	800e728 <USB_DevDisconnect>
}
 80084a4:	4628      	mov	r0, r5
 80084a6:	b00b      	add	sp, #44	; 0x2c
 80084a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80084aa:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80084ae:	4620      	mov	r0, r4
 80084b0:	f014 fd24 	bl	801cefc <HAL_PCD_MspInit>
 80084b4:	e77f      	b.n	80083b6 <HAL_PCD_Init+0x2e>
    return HAL_ERROR;
 80084b6:	2501      	movs	r5, #1
}
 80084b8:	4628      	mov	r0, r5
 80084ba:	b00b      	add	sp, #44	; 0x2c
 80084bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 fd26 	bl	8008f10 <HAL_PCDEx_ActivateLPM>
 80084c4:	e7eb      	b.n	800849e <HAL_PCD_Init+0x116>
 80084c6:	bf00      	nop
 80084c8:	40040000 	.word	0x40040000
 80084cc:	080233c8 	.word	0x080233c8

080084d0 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80084d0:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d00e      	beq.n	80084f6 <HAL_PCD_Start+0x26>
 80084d8:	2301      	movs	r3, #1
{
 80084da:	b510      	push	{r4, lr}
 80084dc:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 80084de:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80084e0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80084e4:	f006 f914 	bl	800e710 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80084e8:	6820      	ldr	r0, [r4, #0]
 80084ea:	f005 fd57 	bl	800df9c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80084ee:	2000      	movs	r0, #0
 80084f0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 80084f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80084f6:	2002      	movs	r0, #2
}
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop

080084fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008500:	6806      	ldr	r6, [r0, #0]
{
 8008502:	b089      	sub	sp, #36	; 0x24
 8008504:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum = 0U;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008506:	4630      	mov	r0, r6
 8008508:	f006 f94c 	bl	800e7a4 <USB_GetMode>
 800850c:	b110      	cbz	r0, 8008514 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800850e:	b009      	add	sp, #36	; 0x24
 8008510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008514:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008516:	6820      	ldr	r0, [r4, #0]
 8008518:	f006 f912 	bl	800e740 <USB_ReadInterrupts>
 800851c:	2800      	cmp	r0, #0
 800851e:	d0f6      	beq.n	800850e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008520:	6820      	ldr	r0, [r4, #0]
 8008522:	f006 f90d 	bl	800e740 <USB_ReadInterrupts>
 8008526:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800852a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800852c:	d003      	beq.n	8008536 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800852e:	6943      	ldr	r3, [r0, #20]
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008536:	f006 f903 	bl	800e740 <USB_ReadInterrupts>
 800853a:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800853e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008540:	f040 81ce 	bne.w	80088e0 <HAL_PCD_IRQHandler+0x3e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008544:	f006 f8fc 	bl	800e740 <USB_ReadInterrupts>
 8008548:	0343      	lsls	r3, r0, #13
 800854a:	f100 8124 	bmi.w	8008796 <HAL_PCD_IRQHandler+0x29a>
 800854e:	f8d4 a000 	ldr.w	sl, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008552:	4650      	mov	r0, sl
 8008554:	f006 f8f4 	bl	800e740 <USB_ReadInterrupts>
 8008558:	2800      	cmp	r0, #0
 800855a:	f2c0 809c 	blt.w	8008696 <HAL_PCD_IRQHandler+0x19a>
 800855e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008560:	f006 f8ee 	bl	800e740 <USB_ReadInterrupts>
 8008564:	0500      	lsls	r0, r0, #20
 8008566:	d463      	bmi.n	8008630 <HAL_PCD_IRQHandler+0x134>
 8008568:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800856a:	f006 f8e9 	bl	800e740 <USB_ReadInterrupts>
 800856e:	0102      	lsls	r2, r0, #4
 8008570:	d513      	bpl.n	800859a <HAL_PCD_IRQHandler+0x9e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008572:	6822      	ldr	r2, [r4, #0]
      if (hpcd->LPM_State == LPM_L0)
 8008574:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008578:	6953      	ldr	r3, [r2, #20]
 800857a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800857e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8008580:	2900      	cmp	r1, #0
 8008582:	d15f      	bne.n	8008644 <HAL_PCD_IRQHandler+0x148>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008584:	6d53      	ldr	r3, [r2, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8008586:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008588:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800858a:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800858e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008592:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008596:	f014 fe1f 	bl	801d1d8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800859a:	6820      	ldr	r0, [r4, #0]
 800859c:	f006 f8d0 	bl	800e740 <USB_ReadInterrupts>
 80085a0:	04c3      	lsls	r3, r0, #19
 80085a2:	f100 80a6 	bmi.w	80086f2 <HAL_PCD_IRQHandler+0x1f6>
 80085a6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80085a8:	f006 f8ca 	bl	800e740 <USB_ReadInterrupts>
 80085ac:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 80085b0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80085b2:	f040 8084 	bne.w	80086be <HAL_PCD_IRQHandler+0x1c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085b6:	f006 f8c3 	bl	800e740 <USB_ReadInterrupts>
 80085ba:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085be:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085c0:	d011      	beq.n	80085e6 <HAL_PCD_IRQHandler+0xea>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085c2:	6983      	ldr	r3, [r0, #24]
 80085c4:	f023 0310 	bic.w	r3, r3, #16
 80085c8:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80085ca:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80085cc:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80085d0:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d03e      	beq.n	8008656 <HAL_PCD_IRQHandler+0x15a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80085d8:	2b06      	cmp	r3, #6
 80085da:	f000 82ab 	beq.w	8008b34 <HAL_PCD_IRQHandler+0x638>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085de:	6983      	ldr	r3, [r0, #24]
 80085e0:	f043 0310 	orr.w	r3, r3, #16
 80085e4:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80085e6:	f006 f8ab 	bl	800e740 <USB_ReadInterrupts>
 80085ea:	0707      	lsls	r7, r0, #28
 80085ec:	f100 81c2 	bmi.w	8008974 <HAL_PCD_IRQHandler+0x478>
 80085f0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80085f2:	f006 f8a5 	bl	800e740 <USB_ReadInterrupts>
 80085f6:	02c6      	lsls	r6, r0, #11
 80085f8:	f100 81b1 	bmi.w	800895e <HAL_PCD_IRQHandler+0x462>
 80085fc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80085fe:	f006 f89f 	bl	800e740 <USB_ReadInterrupts>
 8008602:	0285      	lsls	r5, r0, #10
 8008604:	f100 81bf 	bmi.w	8008986 <HAL_PCD_IRQHandler+0x48a>
 8008608:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800860a:	f006 f899 	bl	800e740 <USB_ReadInterrupts>
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	f100 80b8 	bmi.w	8008784 <HAL_PCD_IRQHandler+0x288>
 8008614:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008616:	f006 f893 	bl	800e740 <USB_ReadInterrupts>
 800861a:	0741      	lsls	r1, r0, #29
 800861c:	f57f af77 	bpl.w	800850e <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008624:	076a      	lsls	r2, r5, #29
 8008626:	d411      	bmi.n	800864c <HAL_PCD_IRQHandler+0x150>
      hpcd->Instance->GOTGINT |= temp;
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	432a      	orrs	r2, r5
 800862c:	605a      	str	r2, [r3, #4]
 800862e:	e76e      	b.n	800850e <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008630:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8008634:	07d9      	lsls	r1, r3, #31
 8008636:	d42a      	bmi.n	800868e <HAL_PCD_IRQHandler+0x192>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	6943      	ldr	r3, [r0, #20]
 800863c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008640:	6143      	str	r3, [r0, #20]
 8008642:	e792      	b.n	800856a <HAL_PCD_IRQHandler+0x6e>
        HAL_PCD_SuspendCallback(hpcd);
 8008644:	4620      	mov	r0, r4
 8008646:	f014 fcdd 	bl	801d004 <HAL_PCD_SuspendCallback>
 800864a:	e7a6      	b.n	800859a <HAL_PCD_IRQHandler+0x9e>
        HAL_PCD_DisconnectCallback(hpcd);
 800864c:	4620      	mov	r0, r4
 800864e:	f014 fd01 	bl	801d054 <HAL_PCD_DisconnectCallback>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	e7e8      	b.n	8008628 <HAL_PCD_IRQHandler+0x12c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008656:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800865a:	421d      	tst	r5, r3
 800865c:	d0bf      	beq.n	80085de <HAL_PCD_IRQHandler+0xe2>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800865e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8008662:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8008666:	4630      	mov	r0, r6
 8008668:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800866c:	462a      	mov	r2, r5
 800866e:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8008672:	f005 ffcd 	bl	800e610 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008676:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800867a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800867e:	442a      	add	r2, r5
 8008680:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008682:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008684:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008688:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 800868c:	e7a7      	b.n	80085de <HAL_PCD_IRQHandler+0xe2>
        HAL_PCD_SuspendCallback(hpcd);
 800868e:	4620      	mov	r0, r4
 8008690:	f014 fcb8 	bl	801d004 <HAL_PCD_SuspendCallback>
 8008694:	e7d0      	b.n	8008638 <HAL_PCD_IRQHandler+0x13c>
      if (hpcd->LPM_State == LPM_L1)
 8008696:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800869a:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800869e:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086a0:	f022 0201 	bic.w	r2, r2, #1
 80086a4:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80086a8:	f000 8201 	beq.w	8008aae <HAL_PCD_IRQHandler+0x5b2>
        HAL_PCD_ResumeCallback(hpcd);
 80086ac:	4620      	mov	r0, r4
 80086ae:	f014 fcc1 	bl	801d034 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80086b2:	6820      	ldr	r0, [r4, #0]
 80086b4:	6943      	ldr	r3, [r0, #20]
 80086b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ba:	6143      	str	r3, [r0, #20]
 80086bc:	e750      	b.n	8008560 <HAL_PCD_IRQHandler+0x64>
      (void)USB_ActivateSetup(hpcd->Instance);
 80086be:	f006 f875 	bl	800e7ac <USB_ActivateSetup>
      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80086c2:	6820      	ldr	r0, [r4, #0]
 80086c4:	f005 fd84 	bl	800e1d0 <USB_GetDevSpeed>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	f040 81e3 	bne.w	8008a94 <HAL_PCD_IRQHandler+0x598>
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 80086ce:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80086d0:	6825      	ldr	r5, [r4, #0]
 80086d2:	f001 f83b 	bl	800974c <HAL_RCC_GetHCLKFreq>
 80086d6:	7b22      	ldrb	r2, [r4, #12]
 80086d8:	4601      	mov	r1, r0
 80086da:	4628      	mov	r0, r5
 80086dc:	f005 fbde 	bl	800de9c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80086e0:	4620      	mov	r0, r4
 80086e2:	f014 fc79 	bl	801cfd8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80086e6:	6820      	ldr	r0, [r4, #0]
 80086e8:	6943      	ldr	r3, [r0, #20]
 80086ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086ee:	6143      	str	r3, [r0, #20]
 80086f0:	e761      	b.n	80085b6 <HAL_PCD_IRQHandler+0xba>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086f2:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 80086f6:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80086f8:	6820      	ldr	r0, [r4, #0]
 80086fa:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086fc:	f023 0301 	bic.w	r3, r3, #1
 8008700:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008702:	f005 fd53 	bl	800e1ac <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008706:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800870a:	f1bc 0f00 	cmp.w	ip, #0
 800870e:	d015      	beq.n	800873c <HAL_PCD_IRQHandler+0x240>
 8008710:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008714:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8008718:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800871a:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008720:	4565      	cmp	r5, ip
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008722:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008726:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800872a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800872e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008732:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008736:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800873a:	d1ed      	bne.n	8008718 <HAL_PCD_IRQHandler+0x21c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800873c:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800873e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008740:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008744:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008746:	2a00      	cmp	r2, #0
 8008748:	f000 81a7 	beq.w	8008a9a <HAL_PCD_IRQHandler+0x59e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800874c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008750:	f043 030b 	orr.w	r3, r3, #11
 8008754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800875a:	f043 030b 	orr.w	r3, r3, #11
 800875e:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008760:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008764:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008768:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800876a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800876e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008770:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008774:	f006 f836 	bl	800e7e4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008778:	6820      	ldr	r0, [r4, #0]
 800877a:	6943      	ldr	r3, [r0, #20]
 800877c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008780:	6143      	str	r3, [r0, #20]
 8008782:	e711      	b.n	80085a8 <HAL_PCD_IRQHandler+0xac>
      HAL_PCD_ConnectCallback(hpcd);
 8008784:	4620      	mov	r0, r4
 8008786:	f014 fc61 	bl	801d04c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800878a:	6820      	ldr	r0, [r4, #0]
 800878c:	6943      	ldr	r3, [r0, #20]
 800878e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008792:	6143      	str	r3, [r0, #20]
 8008794:	e73f      	b.n	8008616 <HAL_PCD_IRQHandler+0x11a>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008796:	6820      	ldr	r0, [r4, #0]
 8008798:	f005 ffde 	bl	800e758 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800879c:	4681      	mov	r9, r0
 800879e:	2800      	cmp	r0, #0
 80087a0:	f000 81e7 	beq.w	8008b72 <HAL_PCD_IRQHandler+0x676>
 80087a4:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 80087a8:	f8d4 a000 	ldr.w	sl, [r4]
 80087ac:	46a0      	mov	r8, r4
      epnum = 0U;
 80087ae:	f04f 0b00 	mov.w	fp, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80087b2:	9505      	str	r5, [sp, #20]
 80087b4:	e9cd 3603 	strd	r3, r6, [sp, #12]
 80087b8:	e007      	b.n	80087ca <HAL_PCD_IRQHandler+0x2ce>
      while (ep_intr != 0U)
 80087ba:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80087be:	f10b 0b01 	add.w	fp, fp, #1
 80087c2:	f108 081c 	add.w	r8, r8, #28
      while (ep_intr != 0U)
 80087c6:	f000 811d 	beq.w	8008a04 <HAL_PCD_IRQHandler+0x508>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80087ca:	f019 0f01 	tst.w	r9, #1
 80087ce:	d0f4      	beq.n	80087ba <HAL_PCD_IRQHandler+0x2be>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087d0:	fa5f f68b 	uxtb.w	r6, fp
 80087d4:	4650      	mov	r0, sl
 80087d6:	4631      	mov	r1, r6
 80087d8:	f005 ffd0 	bl	800e77c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80087dc:	07c7      	lsls	r7, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087de:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80087e0:	f100 80dc 	bmi.w	800899c <HAL_PCD_IRQHandler+0x4a0>
 80087e4:	f8d4 a000 	ldr.w	sl, [r4]
 80087e8:	4657      	mov	r7, sl
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80087ea:	0728      	lsls	r0, r5, #28
 80087ec:	d504      	bpl.n	80087f8 <HAL_PCD_IRQHandler+0x2fc>
 80087ee:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80087f0:	2208      	movs	r2, #8
 80087f2:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 80087f6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80087f8:	06e9      	lsls	r1, r5, #27
 80087fa:	d504      	bpl.n	8008806 <HAL_PCD_IRQHandler+0x30a>
 80087fc:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80087fe:	2210      	movs	r2, #16
 8008800:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 8008804:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008806:	066a      	lsls	r2, r5, #25
 8008808:	d504      	bpl.n	8008814 <HAL_PCD_IRQHandler+0x318>
 800880a:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800880c:	2240      	movs	r2, #64	; 0x40
 800880e:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 8008812:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008814:	07ab      	lsls	r3, r5, #30
 8008816:	d504      	bpl.n	8008822 <HAL_PCD_IRQHandler+0x326>
 8008818:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800881a:	2202      	movs	r2, #2
 800881c:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 8008820:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008822:	062d      	lsls	r5, r5, #24
 8008824:	d5c9      	bpl.n	80087ba <HAL_PCD_IRQHandler+0x2be>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8008826:	e9d8 2314 	ldrd	r2, r3, [r8, #80]	; 0x50
 800882a:	4293      	cmp	r3, r2
 800882c:	d8c5      	bhi.n	80087ba <HAL_PCD_IRQHandler+0x2be>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800882e:	1ad5      	subs	r5, r2, r3

  if (len > ep->maxpacket)
 8008830:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008834:	eb07 114b 	add.w	r1, r7, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8008838:	4285      	cmp	r5, r0
 800883a:	46ac      	mov	ip, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800883c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8008840:	bf28      	it	cs
 8008842:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008844:	9106      	str	r1, [sp, #24]
 8008846:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8008848:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800884c:	b289      	uxth	r1, r1
 800884e:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
 8008852:	d335      	bcc.n	80088c0 <HAL_PCD_IRQHandler+0x3c4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008854:	4293      	cmp	r3, r2
 8008856:	d233      	bcs.n	80088c0 <HAL_PCD_IRQHandler+0x3c4>
 8008858:	b392      	cbz	r2, 80088c0 <HAL_PCD_IRQHandler+0x3c4>
 800885a:	f8cd b01c 	str.w	fp, [sp, #28]
 800885e:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 8008862:	f8dd b018 	ldr.w	fp, [sp, #24]
 8008866:	e00b      	b.n	8008880 <HAL_PCD_IRQHandler+0x384>
 8008868:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800886c:	429a      	cmp	r2, r3
 800886e:	eba2 0503 	sub.w	r5, r2, r3
 8008872:	f240 8178 	bls.w	8008b66 <HAL_PCD_IRQHandler+0x66a>
 8008876:	2a00      	cmp	r2, #0
 8008878:	f000 8175 	beq.w	8008b66 <HAL_PCD_IRQHandler+0x66a>
 800887c:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8008880:	4285      	cmp	r5, r0
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008882:	4632      	mov	r2, r6
 8008884:	bf28      	it	cs
 8008886:	4605      	movcs	r5, r0
 8008888:	7c20      	ldrb	r0, [r4, #16]
 800888a:	b2ab      	uxth	r3, r5
 800888c:	9000      	str	r0, [sp, #0]
 800888e:	4638      	mov	r0, r7
 8008890:	f005 fea8 	bl	800e5e4 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008894:	f8db 2018 	ldr.w	r2, [fp, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8008898:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 800889c:	1ce8      	adds	r0, r5, #3
    ep->xfer_count += len;
 800889e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088a2:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 80088a4:	4429      	add	r1, r5
    ep->xfer_count += len;
 80088a6:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088a8:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 80088ac:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 80088b0:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088b4:	d2d8      	bcs.n	8008868 <HAL_PCD_IRQHandler+0x36c>
 80088b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80088ba:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80088be:	6827      	ldr	r7, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
 80088c0:	429a      	cmp	r2, r3
 80088c2:	f200 8154 	bhi.w	8008b6e <HAL_PCD_IRQHandler+0x672>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088c6:	f50a 6100 	add.w	r1, sl, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088ca:	f00b 020f 	and.w	r2, fp, #15
 80088ce:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80088d2:	46ba      	mov	sl, r7
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088d4:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088d8:	ea23 0302 	bic.w	r3, r3, r2
 80088dc:	634b      	str	r3, [r1, #52]	; 0x34
 80088de:	e76c      	b.n	80087ba <HAL_PCD_IRQHandler+0x2be>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80088e0:	f005 ff32 	bl	800e748 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80088e4:	4607      	mov	r7, r0
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f000 8147 	beq.w	8008b7a <HAL_PCD_IRQHandler+0x67e>
 80088ec:	6820      	ldr	r0, [r4, #0]
      epnum = 0U;
 80088ee:	f04f 0b00 	mov.w	fp, #0
 80088f2:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80088f6:	e9cd 6503 	strd	r6, r5, [sp, #12]
 80088fa:	e004      	b.n	8008906 <HAL_PCD_IRQHandler+0x40a>
      while (ep_intr != 0U)
 80088fc:	087f      	lsrs	r7, r7, #1
        epnum++;
 80088fe:	f10b 0b01 	add.w	fp, fp, #1
      while (ep_intr != 0U)
 8008902:	f000 8082 	beq.w	8008a0a <HAL_PCD_IRQHandler+0x50e>
        if ((ep_intr & 0x1U) != 0U)
 8008906:	07fd      	lsls	r5, r7, #31
 8008908:	d5f8      	bpl.n	80088fc <HAL_PCD_IRQHandler+0x400>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800890a:	fa5f f68b 	uxtb.w	r6, fp
 800890e:	4631      	mov	r1, r6
 8008910:	f005 ff2a 	bl	800e768 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008914:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008918:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800891a:	d179      	bne.n	8008a10 <HAL_PCD_IRQHandler+0x514>
 800891c:	f000 0308 	and.w	r3, r0, #8
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008920:	2b00      	cmp	r3, #0
 8008922:	f040 809a 	bne.w	8008a5a <HAL_PCD_IRQHandler+0x55e>
 8008926:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008928:	f018 0f10 	tst.w	r8, #16
 800892c:	d003      	beq.n	8008936 <HAL_PCD_IRQHandler+0x43a>
 800892e:	eb0a 134b 	add.w	r3, sl, fp, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008932:	2210      	movs	r2, #16
 8008934:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008936:	f018 0f20 	tst.w	r8, #32
 800893a:	d007      	beq.n	800894c <HAL_PCD_IRQHandler+0x450>
            if (hpcd->Init.dma_enable == 1U)
 800893c:	6921      	ldr	r1, [r4, #16]
 800893e:	2901      	cmp	r1, #1
 8008940:	f000 810b 	beq.w	8008b5a <HAL_PCD_IRQHandler+0x65e>
 8008944:	eb0a 134b 	add.w	r3, sl, fp, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008948:	2220      	movs	r2, #32
 800894a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800894c:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8008950:	d0d4      	beq.n	80088fc <HAL_PCD_IRQHandler+0x400>
 8008952:	eb0a 134b 	add.w	r3, sl, fp, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800895a:	609a      	str	r2, [r3, #8]
 800895c:	e7ce      	b.n	80088fc <HAL_PCD_IRQHandler+0x400>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800895e:	4620      	mov	r0, r4
 8008960:	fa5f f18b 	uxtb.w	r1, fp
 8008964:	f014 fb6e 	bl	801d044 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	6943      	ldr	r3, [r0, #20]
 800896c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008970:	6143      	str	r3, [r0, #20]
 8008972:	e644      	b.n	80085fe <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 8008974:	4620      	mov	r0, r4
 8008976:	f014 fb2b 	bl	801cfd0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800897a:	6820      	ldr	r0, [r4, #0]
 800897c:	6943      	ldr	r3, [r0, #20]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	6143      	str	r3, [r0, #20]
 8008984:	e635      	b.n	80085f2 <HAL_PCD_IRQHandler+0xf6>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008986:	4620      	mov	r0, r4
 8008988:	fa5f f18b 	uxtb.w	r1, fp
 800898c:	f014 fb56 	bl	801d03c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008990:	6820      	ldr	r0, [r4, #0]
 8008992:	6943      	ldr	r3, [r0, #20]
 8008994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008998:	6143      	str	r3, [r0, #20]
 800899a:	e636      	b.n	800860a <HAL_PCD_IRQHandler+0x10e>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800899c:	9b04      	ldr	r3, [sp, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800899e:	2701      	movs	r7, #1
 80089a0:	f00b 000f 	and.w	r0, fp, #15
 80089a4:	9a03      	ldr	r2, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80089a6:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80089aa:	fa07 f000 	lsl.w	r0, r7, r0
 80089ae:	eb02 124b 	add.w	r2, r2, fp, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80089b2:	ea21 0100 	bic.w	r1, r1, r0
            if (hpcd->Init.dma_enable == 1U)
 80089b6:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80089b8:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 80089bc:	42b8      	cmp	r0, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80089be:	4613      	mov	r3, r2
 80089c0:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 80089c2:	d104      	bne.n	80089ce <HAL_PCD_IRQHandler+0x4d2>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80089c4:	e9d8 2311 	ldrd	r2, r3, [r8, #68]	; 0x44
 80089c8:	4413      	add	r3, r2
 80089ca:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80089ce:	4631      	mov	r1, r6
 80089d0:	4620      	mov	r0, r4
 80089d2:	f014 faf3 	bl	801cfbc <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	6827      	ldr	r7, [r4, #0]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d102      	bne.n	80089e4 <HAL_PCD_IRQHandler+0x4e8>
 80089de:	f1bb 0f00 	cmp.w	fp, #0
 80089e2:	d001      	beq.n	80089e8 <HAL_PCD_IRQHandler+0x4ec>
 80089e4:	46ba      	mov	sl, r7
 80089e6:	e700      	b.n	80087ea <HAL_PCD_IRQHandler+0x2ee>
 80089e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80089ea:	46ba      	mov	sl, r7
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f47f aefc 	bne.w	80087ea <HAL_PCD_IRQHandler+0x2ee>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089f2:	4638      	mov	r0, r7
 80089f4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80089f8:	2101      	movs	r1, #1
 80089fa:	f005 fef3 	bl	800e7e4 <USB_EP0_OutStart>
 80089fe:	6827      	ldr	r7, [r4, #0]
 8008a00:	46ba      	mov	sl, r7
 8008a02:	e6f2      	b.n	80087ea <HAL_PCD_IRQHandler+0x2ee>
 8008a04:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 8008a08:	e5a3      	b.n	8008552 <HAL_PCD_IRQHandler+0x56>
 8008a0a:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8008a0e:	e599      	b.n	8008544 <HAL_PCD_IRQHandler+0x48>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a10:	6820      	ldr	r0, [r4, #0]
 8008a12:	ea4f 194b 	mov.w	r9, fp, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8008a16:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008a18:	2201      	movs	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a1a:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
 8008a1e:	eb0a 0509 	add.w	r5, sl, r9
  if (hpcd->Init.dma_enable == 1U)
 8008a22:	2901      	cmp	r1, #1
 8008a24:	f008 0308 	and.w	r3, r8, #8
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a28:	44f1      	add	r9, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008a2a:	60aa      	str	r2, [r5, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a2c:	f8d0 e040 	ldr.w	lr, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a30:	f8d9 2008 	ldr.w	r2, [r9, #8]
  if (hpcd->Init.dma_enable == 1U)
 8008a34:	d064      	beq.n	8008b00 <HAL_PCD_IRQHandler+0x604>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008a36:	4974      	ldr	r1, [pc, #464]	; (8008c08 <HAL_PCD_IRQHandler+0x70c>)
 8008a38:	458e      	cmp	lr, r1
 8008a3a:	d107      	bne.n	8008a4c <HAL_PCD_IRQHandler+0x550>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008a3c:	0411      	lsls	r1, r2, #16
 8008a3e:	f100 80d3 	bmi.w	8008be8 <HAL_PCD_IRQHandler+0x6ec>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a42:	0691      	lsls	r1, r2, #26
 8008a44:	d502      	bpl.n	8008a4c <HAL_PCD_IRQHandler+0x550>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a46:	2120      	movs	r1, #32
 8008a48:	f8c9 1008 	str.w	r1, [r9, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4620      	mov	r0, r4
 8008a50:	9305      	str	r3, [sp, #20]
 8008a52:	f014 faa9 	bl	801cfa8 <HAL_PCD_DataOutStageCallback>
 8008a56:	9b05      	ldr	r3, [sp, #20]
 8008a58:	e762      	b.n	8008920 <HAL_PCD_IRQHandler+0x424>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	ea4f 194b 	mov.w	r9, fp, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8008a60:	6922      	ldr	r2, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a62:	f503 6130 	add.w	r1, r3, #2816	; 0xb00
 8008a66:	eb0a 0509 	add.w	r5, sl, r9
  if (hpcd->Init.dma_enable == 1U)
 8008a6a:	2a01      	cmp	r2, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a6e:	4489      	add	r9, r1
 8008a70:	f8d9 1008 	ldr.w	r1, [r9, #8]
  if (hpcd->Init.dma_enable == 1U)
 8008a74:	d03d      	beq.n	8008af2 <HAL_PCD_IRQHandler+0x5f6>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008a76:	4a64      	ldr	r2, [pc, #400]	; (8008c08 <HAL_PCD_IRQHandler+0x70c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d01f      	beq.n	8008abc <HAL_PCD_IRQHandler+0x5c0>
  HAL_PCD_SetupStageCallback(hpcd);
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	9305      	str	r3, [sp, #20]
 8008a80:	f014 fa8c 	bl	801cf9c <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008a84:	4a61      	ldr	r2, [pc, #388]	; (8008c0c <HAL_PCD_IRQHandler+0x710>)
 8008a86:	9b05      	ldr	r3, [sp, #20]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d820      	bhi.n	8008ace <HAL_PCD_IRQHandler+0x5d2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	6820      	ldr	r0, [r4, #0]
 8008a90:	60ab      	str	r3, [r5, #8]
 8008a92:	e749      	b.n	8008928 <HAL_PCD_IRQHandler+0x42c>
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8008a94:	2303      	movs	r3, #3
 8008a96:	60e3      	str	r3, [r4, #12]
 8008a98:	e61a      	b.n	80086d0 <HAL_PCD_IRQHandler+0x1d4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f043 030b 	orr.w	r3, r3, #11
 8008aaa:	613b      	str	r3, [r7, #16]
 8008aac:	e658      	b.n	8008760 <HAL_PCD_IRQHandler+0x264>
        hpcd->LPM_State = LPM_L0;
 8008aae:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008ab0:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8008ab2:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008ab6:	f014 fb8f 	bl	801d1d8 <HAL_PCDEx_LPM_Callback>
 8008aba:	e5fa      	b.n	80086b2 <HAL_PCD_IRQHandler+0x1b6>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008abc:	040a      	lsls	r2, r1, #16
 8008abe:	d503      	bpl.n	8008ac8 <HAL_PCD_IRQHandler+0x5cc>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ac4:	f8c9 3008 	str.w	r3, [r9, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f014 fa67 	bl	801cf9c <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008ace:	6921      	ldr	r1, [r4, #16]
 8008ad0:	2901      	cmp	r1, #1
 8008ad2:	d1db      	bne.n	8008a8c <HAL_PCD_IRQHandler+0x590>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ad4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008ad8:	6820      	ldr	r0, [r4, #0]
 8008ada:	f005 fe83 	bl	800e7e4 <USB_EP0_OutStart>
 8008ade:	e7d5      	b.n	8008a8c <HAL_PCD_IRQHandler+0x590>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f8c9 2008 	str.w	r2, [r9, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f43f af1e 	beq.w	8008928 <HAL_PCD_IRQHandler+0x42c>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008aec:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008aee:	f8d9 1008 	ldr.w	r1, [r9, #8]
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008af2:	4a46      	ldr	r2, [pc, #280]	; (8008c0c <HAL_PCD_IRQHandler+0x710>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d8e1      	bhi.n	8008abc <HAL_PCD_IRQHandler+0x5c0>
  HAL_PCD_SetupStageCallback(hpcd);
 8008af8:	4620      	mov	r0, r4
 8008afa:	f014 fa4f 	bl	801cf9c <HAL_PCD_SetupStageCallback>
 8008afe:	e7c5      	b.n	8008a8c <HAL_PCD_IRQHandler+0x590>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008b00:	0711      	lsls	r1, r2, #28
 8008b02:	d53d      	bpl.n	8008b80 <HAL_PCD_IRQHandler+0x684>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b04:	4941      	ldr	r1, [pc, #260]	; (8008c0c <HAL_PCD_IRQHandler+0x710>)
 8008b06:	458e      	cmp	lr, r1
 8008b08:	d905      	bls.n	8008b16 <HAL_PCD_IRQHandler+0x61a>
 8008b0a:	0410      	lsls	r0, r2, #16
 8008b0c:	d503      	bpl.n	8008b16 <HAL_PCD_IRQHandler+0x61a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b12:	f8c9 2008 	str.w	r2, [r9, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 8008b16:	4620      	mov	r0, r4
 8008b18:	9305      	str	r3, [sp, #20]
 8008b1a:	f014 fa3f 	bl	801cf9c <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b1e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008b22:	2101      	movs	r1, #1
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	f005 fe5d 	bl	800e7e4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008b2a:	2208      	movs	r2, #8
 8008b2c:	9b05      	ldr	r3, [sp, #20]
 8008b2e:	f8c9 2008 	str.w	r2, [r9, #8]
 8008b32:	e6f5      	b.n	8008920 <HAL_PCD_IRQHandler+0x424>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b34:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008b38:	2208      	movs	r2, #8
 8008b3a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f005 fd66 	bl	800e610 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b44:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8008b48:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8008b4c:	6820      	ldr	r0, [r4, #0]
 8008b4e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8008b52:	440b      	add	r3, r1
 8008b54:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8008b58:	e541      	b.n	80085de <HAL_PCD_IRQHandler+0xe2>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b5a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008b5e:	f005 fe41 	bl	800e7e4 <USB_EP0_OutStart>
 8008b62:	6820      	ldr	r0, [r4, #0]
 8008b64:	e6ee      	b.n	8008944 <HAL_PCD_IRQHandler+0x448>
 8008b66:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008b6a:	6827      	ldr	r7, [r4, #0]
 8008b6c:	e6a8      	b.n	80088c0 <HAL_PCD_IRQHandler+0x3c4>
 8008b6e:	46ba      	mov	sl, r7
 8008b70:	e623      	b.n	80087ba <HAL_PCD_IRQHandler+0x2be>
      epnum = 0U;
 8008b72:	4683      	mov	fp, r0
 8008b74:	f8d4 a000 	ldr.w	sl, [r4]
 8008b78:	e4eb      	b.n	8008552 <HAL_PCD_IRQHandler+0x56>
      epnum = 0U;
 8008b7a:	4683      	mov	fp, r0
 8008b7c:	6820      	ldr	r0, [r4, #0]
 8008b7e:	e4e1      	b.n	8008544 <HAL_PCD_IRQHandler+0x48>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008b80:	0691      	lsls	r1, r2, #26
 8008b82:	d4ad      	bmi.n	8008ae0 <HAL_PCD_IRQHandler+0x5e4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008b84:	f012 0f28 	tst.w	r2, #40	; 0x28
 8008b88:	d1ad      	bne.n	8008ae6 <HAL_PCD_IRQHandler+0x5ea>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b8a:	4920      	ldr	r1, [pc, #128]	; (8008c0c <HAL_PCD_IRQHandler+0x710>)
 8008b8c:	458e      	cmp	lr, r1
 8008b8e:	d901      	bls.n	8008b94 <HAL_PCD_IRQHandler+0x698>
 8008b90:	0412      	lsls	r2, r2, #16
 8008b92:	d434      	bmi.n	8008bfe <HAL_PCD_IRQHandler+0x702>
 8008b94:	f04f 0c1c 	mov.w	ip, #28
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b98:	f8d9 e010 	ldr.w	lr, [r9, #16]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	fb0c 4c0b 	mla	ip, ip, fp, r4
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ba4:	f3ce 0e12 	ubfx	lr, lr, #0, #19
 8008ba8:	9305      	str	r3, [sp, #20]
          hpcd->OUT_ep[epnum].maxpacket -
 8008baa:	f8dc 2204 	ldr.w	r2, [ip, #516]	; 0x204
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008bae:	f8dc 5208 	ldr.w	r5, [ip, #520]	; 0x208
          hpcd->OUT_ep[epnum].maxpacket -
 8008bb2:	eba2 0e0e 	sub.w	lr, r2, lr
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008bb6:	442a      	add	r2, r5
        hpcd->OUT_ep[epnum].xfer_count =
 8008bb8:	f8cc e214 	str.w	lr, [ip, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008bbc:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008bc0:	f014 f9f2 	bl	801cfa8 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008bc4:	9b05      	ldr	r3, [sp, #20]
 8008bc6:	f1bb 0f00 	cmp.w	fp, #0
 8008bca:	f47f aea9 	bne.w	8008920 <HAL_PCD_IRQHandler+0x424>
 8008bce:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	f47f aea4 	bne.w	8008920 <HAL_PCD_IRQHandler+0x424>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bd8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008bdc:	2101      	movs	r1, #1
 8008bde:	6820      	ldr	r0, [r4, #0]
 8008be0:	f005 fe00 	bl	800e7e4 <USB_EP0_OutStart>
 8008be4:	9b05      	ldr	r3, [sp, #20]
 8008be6:	e69b      	b.n	8008920 <HAL_PCD_IRQHandler+0x424>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008be8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008bec:	f8c9 2008 	str.w	r2, [r9, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f43f ae99 	beq.w	8008928 <HAL_PCD_IRQHandler+0x42c>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008bf6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008bf8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008bfc:	e73b      	b.n	8008a76 <HAL_PCD_IRQHandler+0x57a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008bfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008c02:	f8c9 2008 	str.w	r2, [r9, #8]
 8008c06:	e76e      	b.n	8008ae6 <HAL_PCD_IRQHandler+0x5ea>
 8008c08:	4f54310a 	.word	0x4f54310a
 8008c0c:	4f54300a 	.word	0x4f54300a

08008c10 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008c10:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008c14:	2a01      	cmp	r2, #1
 8008c16:	d00d      	beq.n	8008c34 <HAL_PCD_SetAddress+0x24>
 8008c18:	2201      	movs	r2, #1
{
 8008c1a:	b510      	push	{r4, lr}
 8008c1c:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8008c1e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008c22:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008c24:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008c28:	f005 fd60 	bl	800e6ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008c32:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008c34:	2002      	movs	r0, #2
}
 8008c36:	4770      	bx	lr

08008c38 <HAL_PCD_EP_Open>:
{
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8008c3e:	0609      	lsls	r1, r1, #24
 8008c40:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008c44:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8008c48:	d422      	bmi.n	8008c90 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c4a:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 8008c4e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008c52:	2600      	movs	r6, #0
 8008c54:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c58:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008c5a:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8008c5e:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c60:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8008c62:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8008c64:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8008c66:	b105      	cbz	r5, 8008c6a <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8008c68:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d101      	bne.n	8008c72 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8008c72:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d015      	beq.n	8008ca6 <HAL_PCD_EP_Open+0x6e>
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c7e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008c80:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c84:	f005 fab0 	bl	800e1e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c88:	2000      	movs	r0, #0
 8008c8a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8008c90:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c94:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 8008c98:	2701      	movs	r7, #1
 8008c9a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c9e:	4401      	add	r1, r0
    ep->is_in = 1U;
 8008ca0:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 8008ca4:	e7db      	b.n	8008c5e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8008ca6:	2002      	movs	r0, #2
}
 8008ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008caa:	bf00      	nop

08008cac <HAL_PCD_EP_Close>:
{
 8008cac:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8008cb0:	0609      	lsls	r1, r1, #24
{
 8008cb2:	b538      	push	{r3, r4, r5, lr}
 8008cb4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8008cb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8008cbc:	d419      	bmi.n	8008cf2 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cbe:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008cc2:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8008cc6:	2400      	movs	r4, #0
 8008cc8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ccc:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008cce:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008cd2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008cd4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d019      	beq.n	8008d10 <HAL_PCD_EP_Close+0x64>
 8008cdc:	4604      	mov	r4, r0
 8008cde:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008ce0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008ce2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008ce6:	f005 fac1 	bl	800e26c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008cea:	2000      	movs	r0, #0
 8008cec:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008cf0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cf2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8008cf6:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8008cfa:	2501      	movs	r5, #1
 8008cfc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d00:	4401      	add	r1, r0
    ep->is_in = 1U;
 8008d02:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008d06:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008d08:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d1e5      	bne.n	8008cdc <HAL_PCD_EP_Close+0x30>
 8008d10:	2002      	movs	r0, #2
}
 8008d12:	bd38      	pop	{r3, r4, r5, pc}

08008d14 <HAL_PCD_EP_Receive>:
{
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8008d1a:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d1c:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8008d1e:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d22:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8008d26:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d2a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8008d2e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8008d32:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d36:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8008d3a:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8008d3e:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8008d42:	6903      	ldr	r3, [r0, #16]
 8008d44:	6800      	ldr	r0, [r0, #0]
 8008d46:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8008d48:	bf08      	it	eq
 8008d4a:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8008d4e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d50:	b11d      	cbz	r5, 8008d5a <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d52:	f005 fabf 	bl	800e2d4 <USB_EPStartXfer>
}
 8008d56:	2000      	movs	r0, #0
 8008d58:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d5a:	f005 fbb7 	bl	800e4cc <USB_EP0StartXfer>
}
 8008d5e:	2000      	movs	r0, #0
 8008d60:	bd70      	pop	{r4, r5, r6, pc}
 8008d62:	bf00      	nop

08008d64 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d64:	f001 010f 	and.w	r1, r1, #15
 8008d68:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008d6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008d70:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop

08008d78 <HAL_PCD_EP_Transmit>:
{
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8008d7e:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8008d80:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d82:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8008d84:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d88:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8008d8c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d90:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8008d92:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8008d94:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d96:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8008d9a:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8008d9c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8008da0:	6903      	ldr	r3, [r0, #16]
 8008da2:	6800      	ldr	r0, [r0, #0]
 8008da4:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 8008da6:	bf08      	it	eq
 8008da8:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8008daa:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008dac:	b11d      	cbz	r5, 8008db6 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008dae:	f005 fa91 	bl	800e2d4 <USB_EPStartXfer>
}
 8008db2:	2000      	movs	r0, #0
 8008db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008db6:	f005 fb89 	bl	800e4cc <USB_EP0StartXfer>
}
 8008dba:	2000      	movs	r0, #0
 8008dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbe:	bf00      	nop

08008dc0 <HAL_PCD_EP_SetStall>:
{
 8008dc0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008dc2:	6843      	ldr	r3, [r0, #4]
 8008dc4:	f001 050f 	and.w	r5, r1, #15
 8008dc8:	429d      	cmp	r5, r3
 8008dca:	d81f      	bhi.n	8008e0c <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8008dcc:	060b      	lsls	r3, r1, #24
 8008dce:	d41f      	bmi.n	8008e10 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8008dd0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8008dd4:	241c      	movs	r4, #28
    ep->is_in = 0U;
 8008dd6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8008dd8:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8008ddc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8008de0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8008de4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8008de8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008dea:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8008dec:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8008dee:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d01e      	beq.n	8008e34 <HAL_PCD_EP_SetStall+0x74>
 8008df6:	4604      	mov	r4, r0
 8008df8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008dfc:	6800      	ldr	r0, [r0, #0]
 8008dfe:	f005 fc19 	bl	800e634 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e02:	b1cd      	cbz	r5, 8008e38 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8008e04:	2000      	movs	r0, #0
 8008e06:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008e0c:	2001      	movs	r0, #1
}
 8008e0e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e10:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8008e12:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8008e16:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e18:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8008e1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e20:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8008e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8008e26:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e28:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8008e2a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8008e2c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d1e0      	bne.n	8008df6 <HAL_PCD_EP_SetStall+0x36>
 8008e34:	2002      	movs	r0, #2
}
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e38:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008e3c:	7c21      	ldrb	r1, [r4, #16]
 8008e3e:	6820      	ldr	r0, [r4, #0]
 8008e40:	f005 fcd0 	bl	800e7e4 <USB_EP0_OutStart>
 8008e44:	e7de      	b.n	8008e04 <HAL_PCD_EP_SetStall+0x44>
 8008e46:	bf00      	nop

08008e48 <HAL_PCD_EP_ClrStall>:
{
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008e4e:	6843      	ldr	r3, [r0, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d821      	bhi.n	8008e98 <HAL_PCD_EP_ClrStall+0x50>
 8008e54:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8008e58:	0609      	lsls	r1, r1, #24
 8008e5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008e5e:	d41d      	bmi.n	8008e9c <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e60:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008e64:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8008e68:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e6a:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8008e6c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8008e70:	f883 51fd 	strb.w	r5, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8008e74:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e76:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8008e78:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8008e7a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d01c      	beq.n	8008ebc <HAL_PCD_EP_ClrStall+0x74>
 8008e82:	4604      	mov	r4, r0
 8008e84:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008e86:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008e88:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008e8c:	f005 fc02 	bl	800e694 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008e90:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8008e94:	4628      	mov	r0, r5
}
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008e98:	2001      	movs	r0, #1
}
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8008e9c:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ea0:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8008ea2:	2501      	movs	r5, #1
 8008ea4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ea8:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8008eaa:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8008eae:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eb0:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8008eb2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8008eb4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d1e2      	bne.n	8008e82 <HAL_PCD_EP_ClrStall+0x3a>
 8008ebc:	2002      	movs	r0, #2
}
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}

08008ec0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008ec0:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008ec2:	6805      	ldr	r5, [r0, #0]
 8008ec4:	0412      	lsls	r2, r2, #16
 8008ec6:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8008ec8:	b1c1      	cbz	r1, 8008efc <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008eca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8008ecc:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008ece:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8008ed2:	d00b      	beq.n	8008eec <HAL_PCDEx_SetTxFiFo+0x2c>
 8008ed4:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008ed6:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8008eda:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008edc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8008ee0:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008ee2:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8008ee4:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008ee6:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8008eea:	d3f4      	bcc.n	8008ed6 <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008eec:	3140      	adds	r1, #64	; 0x40
 8008eee:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 8008ef0:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008ef2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8008ef6:	604c      	str	r4, [r1, #4]
}
 8008ef8:	bc30      	pop	{r4, r5}
 8008efa:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008efc:	4314      	orrs	r4, r2
}
 8008efe:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008f00:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8008f02:	bc30      	pop	{r4, r5}
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop

08008f08 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8008f08:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8008f0a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8008f0c:	6259      	str	r1, [r3, #36]	; 0x24
}
 8008f0e:	4770      	bx	lr

08008f10 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f10:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8008f12:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008f14:	4a08      	ldr	r2, [pc, #32]	; (8008f38 <HAL_PCDEx_ActivateLPM+0x28>)
{
 8008f16:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 8008f18:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 8008f1c:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008f1e:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8008f20:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008f22:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 8008f26:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 8008f2a:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008f2c:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008f2e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f30:	430a      	orrs	r2, r1
}
 8008f32:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008f34:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008f36:	4770      	bx	lr
 8008f38:	10000003 	.word	0x10000003

08008f3c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f3c:	4a02      	ldr	r2, [pc, #8]	; (8008f48 <HAL_PWR_EnableBkUpAccess+0xc>)
 8008f3e:	6813      	ldr	r3, [r2, #0]
 8008f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f44:	6013      	str	r3, [r2, #0]
}
 8008f46:	4770      	bx	lr
 8008f48:	40007000 	.word	0x40007000

08008f4c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8008f4c:	4a1b      	ldr	r2, [pc, #108]	; (8008fbc <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008f4e:	4b1c      	ldr	r3, [pc, #112]	; (8008fc0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f50:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8008f52:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8008f56:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f58:	6411      	str	r1, [r2, #64]	; 0x40
{
 8008f5a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f5c:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f5e:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f60:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8008f64:	9201      	str	r2, [sp, #4]
 8008f66:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008f6e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8008f70:	f7fb fd1c 	bl	80049ac <HAL_GetTick>
 8008f74:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f76:	e005      	b.n	8008f84 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f78:	f7fb fd18 	bl	80049ac <HAL_GetTick>
 8008f7c:	1b40      	subs	r0, r0, r5
 8008f7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008f82:	d817      	bhi.n	8008fb4 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f84:	6863      	ldr	r3, [r4, #4]
 8008f86:	03da      	lsls	r2, r3, #15
 8008f88:	d5f6      	bpl.n	8008f78 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008f8a:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f8c:	4d0c      	ldr	r5, [pc, #48]	; (8008fc0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f92:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008f94:	f7fb fd0a 	bl	80049ac <HAL_GetTick>
 8008f98:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f9a:	e005      	b.n	8008fa8 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f9c:	f7fb fd06 	bl	80049ac <HAL_GetTick>
 8008fa0:	1b00      	subs	r0, r0, r4
 8008fa2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008fa6:	d805      	bhi.n	8008fb4 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008fa8:	686b      	ldr	r3, [r5, #4]
 8008faa:	039b      	lsls	r3, r3, #14
 8008fac:	d5f6      	bpl.n	8008f9c <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8008fae:	2000      	movs	r0, #0
}
 8008fb0:	b003      	add	sp, #12
 8008fb2:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8008fb4:	2003      	movs	r0, #3
}
 8008fb6:	b003      	add	sp, #12
 8008fb8:	bd30      	pop	{r4, r5, pc}
 8008fba:	bf00      	nop
 8008fbc:	40023800 	.word	0x40023800
 8008fc0:	40007000 	.word	0x40007000

08008fc4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	f000 81d3 	beq.w	8009370 <HAL_RCC_OscConfig+0x3ac>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008fca:	6803      	ldr	r3, [r0, #0]
 8008fcc:	2b0f      	cmp	r3, #15
{
 8008fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008fd6:	f200 80be 	bhi.w	8009156 <HAL_RCC_OscConfig+0x192>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fda:	07dd      	lsls	r5, r3, #31
 8008fdc:	d534      	bpl.n	8009048 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8008fe4:	d003      	beq.n	8008fee <HAL_RCC_OscConfig+0x2a>
 8008fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fea:	f040 817f 	bne.w	80092ec <HAL_RCC_OscConfig+0x328>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008fee:	4ab3      	ldr	r2, [pc, #716]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 8008ff0:	6893      	ldr	r3, [r2, #8]
 8008ff2:	f003 030c 	and.w	r3, r3, #12
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d01d      	beq.n	8009036 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ffa:	6893      	ldr	r3, [r2, #8]
 8008ffc:	f003 030c 	and.w	r3, r3, #12
 8009000:	2b08      	cmp	r3, #8
 8009002:	d015      	beq.n	8009030 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009004:	6863      	ldr	r3, [r4, #4]
 8009006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800900a:	f000 817f 	beq.w	800930c <HAL_RCC_OscConfig+0x348>
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 81b0 	beq.w	8009374 <HAL_RCC_OscConfig+0x3b0>
 8009014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009018:	4ba8      	ldr	r3, [pc, #672]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	f000 81ff 	beq.w	800941e <HAL_RCC_OscConfig+0x45a>
 8009020:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	e172      	b.n	8009316 <HAL_RCC_OscConfig+0x352>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009030:	6853      	ldr	r3, [r2, #4]
 8009032:	0258      	lsls	r0, r3, #9
 8009034:	d5e6      	bpl.n	8009004 <HAL_RCC_OscConfig+0x40>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009036:	4ba1      	ldr	r3, [pc, #644]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	0399      	lsls	r1, r3, #14
 800903c:	d503      	bpl.n	8009046 <HAL_RCC_OscConfig+0x82>
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 8126 	beq.w	8009292 <HAL_RCC_OscConfig+0x2ce>
 8009046:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009048:	079f      	lsls	r7, r3, #30
 800904a:	d450      	bmi.n	80090ee <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800904c:	071a      	lsls	r2, r3, #28
 800904e:	d51a      	bpl.n	8009086 <HAL_RCC_OscConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8009050:	6963      	ldr	r3, [r4, #20]
 8009052:	2b01      	cmp	r3, #1
 8009054:	f200 8141 	bhi.w	80092da <HAL_RCC_OscConfig+0x316>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 8124 	beq.w	80092a6 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800905e:	4b97      	ldr	r3, [pc, #604]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 8009060:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009062:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8009064:	f042 0201 	orr.w	r2, r2, #1
 8009068:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800906a:	f7fb fc9f 	bl	80049ac <HAL_GetTick>
 800906e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009070:	e005      	b.n	800907e <HAL_RCC_OscConfig+0xba>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009072:	f7fb fc9b 	bl	80049ac <HAL_GetTick>
 8009076:	1b80      	subs	r0, r0, r6
 8009078:	2802      	cmp	r0, #2
 800907a:	f200 816b 	bhi.w	8009354 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800907e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009080:	079b      	lsls	r3, r3, #30
 8009082:	d5f6      	bpl.n	8009072 <HAL_RCC_OscConfig+0xae>
 8009084:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009086:	075e      	lsls	r6, r3, #29
 8009088:	f140 808b 	bpl.w	80091a2 <HAL_RCC_OscConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800908c:	68a3      	ldr	r3, [r4, #8]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d906      	bls.n	80090a0 <HAL_RCC_OscConfig+0xdc>
 8009092:	2b05      	cmp	r3, #5
 8009094:	d004      	beq.n	80090a0 <HAL_RCC_OscConfig+0xdc>
 8009096:	f240 2107 	movw	r1, #519	; 0x207
 800909a:	4889      	ldr	r0, [pc, #548]	; (80092c0 <HAL_RCC_OscConfig+0x2fc>)
 800909c:	f7f9 fad8 	bl	8002650 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090a0:	4b86      	ldr	r3, [pc, #536]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 80090a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090a4:	00d5      	lsls	r5, r2, #3
 80090a6:	f100 8182 	bmi.w	80093ae <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80090aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80090ac:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80090ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80090b2:	641a      	str	r2, [r3, #64]	; 0x40
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090be:	4b81      	ldr	r3, [pc, #516]	; (80092c4 <HAL_RCC_OscConfig+0x300>)
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	05d0      	lsls	r0, r2, #23
 80090c4:	f140 8135 	bpl.w	8009332 <HAL_RCC_OscConfig+0x36e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d04d      	beq.n	800916a <HAL_RCC_OscConfig+0x1a6>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 816f 	beq.w	80093b2 <HAL_RCC_OscConfig+0x3ee>
 80090d4:	2b05      	cmp	r3, #5
 80090d6:	4b79      	ldr	r3, [pc, #484]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 80090d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090da:	f000 81a8 	beq.w	800942e <HAL_RCC_OscConfig+0x46a>
 80090de:	f022 0201 	bic.w	r2, r2, #1
 80090e2:	671a      	str	r2, [r3, #112]	; 0x70
 80090e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090e6:	f022 0204 	bic.w	r2, r2, #4
 80090ea:	671a      	str	r2, [r3, #112]	; 0x70
 80090ec:	e042      	b.n	8009174 <HAL_RCC_OscConfig+0x1b0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80090ee:	68e3      	ldr	r3, [r4, #12]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	f200 80d2 	bhi.w	800929a <HAL_RCC_OscConfig+0x2d6>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80090f6:	6923      	ldr	r3, [r4, #16]
 80090f8:	2b1f      	cmp	r3, #31
 80090fa:	f200 8152 	bhi.w	80093a2 <HAL_RCC_OscConfig+0x3de>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80090fe:	4b6f      	ldr	r3, [pc, #444]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 8009100:	689a      	ldr	r2, [r3, #8]
 8009102:	f012 0f0c 	tst.w	r2, #12
 8009106:	f000 80bd 	beq.w	8009284 <HAL_RCC_OscConfig+0x2c0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	f002 020c 	and.w	r2, r2, #12
 8009110:	2a08      	cmp	r2, #8
 8009112:	f000 80b3 	beq.w	800927c <HAL_RCC_OscConfig+0x2b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009116:	68e3      	ldr	r3, [r4, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 8166 	beq.w	80093ea <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_HSI_ENABLE();
 800911e:	4b67      	ldr	r3, [pc, #412]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 8009120:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009122:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8009124:	f042 0201 	orr.w	r2, r2, #1
 8009128:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800912a:	f7fb fc3f 	bl	80049ac <HAL_GetTick>
 800912e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009130:	e005      	b.n	800913e <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009132:	f7fb fc3b 	bl	80049ac <HAL_GetTick>
 8009136:	1b80      	subs	r0, r0, r6
 8009138:	2802      	cmp	r0, #2
 800913a:	f200 810b 	bhi.w	8009354 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800913e:	682b      	ldr	r3, [r5, #0]
 8009140:	0798      	lsls	r0, r3, #30
 8009142:	d5f6      	bpl.n	8009132 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	6922      	ldr	r2, [r4, #16]
 8009148:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800914c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	e77a      	b.n	800904c <HAL_RCC_OscConfig+0x88>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8009156:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800915a:	4859      	ldr	r0, [pc, #356]	; (80092c0 <HAL_RCC_OscConfig+0x2fc>)
 800915c:	f7f9 fa78 	bl	8002650 <assert_failed>
 8009160:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009162:	07dd      	lsls	r5, r3, #31
 8009164:	f57f af70 	bpl.w	8009048 <HAL_RCC_OscConfig+0x84>
 8009168:	e739      	b.n	8008fde <HAL_RCC_OscConfig+0x1a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800916a:	4a54      	ldr	r2, [pc, #336]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 800916c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800916e:	f043 0301 	orr.w	r3, r3, #1
 8009172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009174:	f7fb fc1a 	bl	80049ac <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009178:	4e50      	ldr	r6, [pc, #320]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
      tickstart = HAL_GetTick();
 800917a:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800917c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009180:	e006      	b.n	8009190 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009182:	f7fb fc13 	bl	80049ac <HAL_GetTick>
 8009186:	eba0 0008 	sub.w	r0, r0, r8
 800918a:	42b8      	cmp	r0, r7
 800918c:	f200 80e2 	bhi.w	8009354 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009190:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009192:	079a      	lsls	r2, r3, #30
 8009194:	d5f5      	bpl.n	8009182 <HAL_RCC_OscConfig+0x1be>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009196:	b125      	cbz	r5, 80091a2 <HAL_RCC_OscConfig+0x1de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009198:	4a48      	ldr	r2, [pc, #288]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 800919a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800919c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80091a2:	69a3      	ldr	r3, [r4, #24]
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	f200 80a7 	bhi.w	80092f8 <HAL_RCC_OscConfig+0x334>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d062      	beq.n	8009274 <HAL_RCC_OscConfig+0x2b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091ae:	4943      	ldr	r1, [pc, #268]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 80091b0:	688a      	ldr	r2, [r1, #8]
 80091b2:	f002 020c 	and.w	r2, r2, #12
 80091b6:	2a08      	cmp	r2, #8
 80091b8:	d06b      	beq.n	8009292 <HAL_RCC_OscConfig+0x2ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	f040 815d 	bne.w	800947a <HAL_RCC_OscConfig+0x4b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80091c0:	69e3      	ldr	r3, [r4, #28]
 80091c2:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80091c6:	f040 813a 	bne.w	800943e <HAL_RCC_OscConfig+0x47a>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80091ca:	6a23      	ldr	r3, [r4, #32]
 80091cc:	3b02      	subs	r3, #2
 80091ce:	2b3d      	cmp	r3, #61	; 0x3d
 80091d0:	f200 814d 	bhi.w	800946e <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80091d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d6:	3b32      	subs	r3, #50	; 0x32
 80091d8:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80091dc:	f200 8141 	bhi.w	8009462 <HAL_RCC_OscConfig+0x49e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80091e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80091e2:	2a08      	cmp	r2, #8
 80091e4:	f200 8115 	bhi.w	8009412 <HAL_RCC_OscConfig+0x44e>
 80091e8:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80091ec:	40d3      	lsrs	r3, r2
 80091ee:	07d8      	lsls	r0, r3, #31
 80091f0:	f140 810f 	bpl.w	8009412 <HAL_RCC_OscConfig+0x44e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80091f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80091f6:	3b02      	subs	r3, #2
 80091f8:	2b0d      	cmp	r3, #13
 80091fa:	f200 812c 	bhi.w	8009456 <HAL_RCC_OscConfig+0x492>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80091fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009200:	3b02      	subs	r3, #2
 8009202:	2b05      	cmp	r3, #5
 8009204:	f200 8121 	bhi.w	800944a <HAL_RCC_OscConfig+0x486>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009208:	4b2c      	ldr	r3, [pc, #176]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 800920a:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800920c:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800920e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009212:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009214:	f7fb fbca 	bl	80049ac <HAL_GetTick>
 8009218:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800921a:	e005      	b.n	8009228 <HAL_RCC_OscConfig+0x264>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800921c:	f7fb fbc6 	bl	80049ac <HAL_GetTick>
 8009220:	1b80      	subs	r0, r0, r6
 8009222:	2802      	cmp	r0, #2
 8009224:	f200 8096 	bhi.w	8009354 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	0199      	lsls	r1, r3, #6
 800922c:	d4f6      	bmi.n	800921c <HAL_RCC_OscConfig+0x258>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800922e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009232:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009234:	4313      	orrs	r3, r2
 8009236:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800923a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800923e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009240:	0852      	lsrs	r2, r2, #1

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009242:	4c1e      	ldr	r4, [pc, #120]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009244:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009248:	3a01      	subs	r2, #1
 800924a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800924e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009252:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800925a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800925c:	f7fb fba6 	bl	80049ac <HAL_GetTick>
 8009260:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009262:	e004      	b.n	800926e <HAL_RCC_OscConfig+0x2aa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009264:	f7fb fba2 	bl	80049ac <HAL_GetTick>
 8009268:	1b40      	subs	r0, r0, r5
 800926a:	2802      	cmp	r0, #2
 800926c:	d872      	bhi.n	8009354 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	019a      	lsls	r2, r3, #6
 8009272:	d5f7      	bpl.n	8009264 <HAL_RCC_OscConfig+0x2a0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8009274:	2000      	movs	r0, #0
}
 8009276:	b002      	add	sp, #8
 8009278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	025e      	lsls	r6, r3, #9
 8009280:	f53f af49 	bmi.w	8009116 <HAL_RCC_OscConfig+0x152>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009284:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	079d      	lsls	r5, r3, #30
 800928a:	d567      	bpl.n	800935c <HAL_RCC_OscConfig+0x398>
 800928c:	68e3      	ldr	r3, [r4, #12]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d064      	beq.n	800935c <HAL_RCC_OscConfig+0x398>
    return HAL_ERROR;
 8009292:	2001      	movs	r0, #1
}
 8009294:	b002      	add	sp, #8
 8009296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800929a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800929e:	4808      	ldr	r0, [pc, #32]	; (80092c0 <HAL_RCC_OscConfig+0x2fc>)
 80092a0:	f7f9 f9d6 	bl	8002650 <assert_failed>
 80092a4:	e727      	b.n	80090f6 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_LSI_DISABLE();
 80092a6:	4b05      	ldr	r3, [pc, #20]	; (80092bc <HAL_RCC_OscConfig+0x2f8>)
 80092a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092aa:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80092ac:	f022 0201 	bic.w	r2, r2, #1
 80092b0:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80092b2:	f7fb fb7b 	bl	80049ac <HAL_GetTick>
 80092b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092b8:	e00b      	b.n	80092d2 <HAL_RCC_OscConfig+0x30e>
 80092ba:	bf00      	nop
 80092bc:	40023800 	.word	0x40023800
 80092c0:	08023400 	.word	0x08023400
 80092c4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092c8:	f7fb fb70 	bl	80049ac <HAL_GetTick>
 80092cc:	1b80      	subs	r0, r0, r6
 80092ce:	2802      	cmp	r0, #2
 80092d0:	d840      	bhi.n	8009354 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80092d4:	079f      	lsls	r7, r3, #30
 80092d6:	d4f7      	bmi.n	80092c8 <HAL_RCC_OscConfig+0x304>
 80092d8:	e6d4      	b.n	8009084 <HAL_RCC_OscConfig+0xc0>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80092da:	f240 11dd 	movw	r1, #477	; 0x1dd
 80092de:	4870      	ldr	r0, [pc, #448]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 80092e0:	f7f9 f9b6 	bl	8002650 <assert_failed>
 80092e4:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0dd      	beq.n	80092a6 <HAL_RCC_OscConfig+0x2e2>
 80092ea:	e6b8      	b.n	800905e <HAL_RCC_OscConfig+0x9a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80092ec:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80092f0:	486b      	ldr	r0, [pc, #428]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 80092f2:	f7f9 f9ad 	bl	8002650 <assert_failed>
 80092f6:	e67a      	b.n	8008fee <HAL_RCC_OscConfig+0x2a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80092f8:	f240 214b 	movw	r1, #587	; 0x24b
 80092fc:	4868      	ldr	r0, [pc, #416]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 80092fe:	f7f9 f9a7 	bl	8002650 <assert_failed>
 8009302:	69a3      	ldr	r3, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009304:	2b00      	cmp	r3, #0
 8009306:	f47f af52 	bne.w	80091ae <HAL_RCC_OscConfig+0x1ea>
 800930a:	e7b3      	b.n	8009274 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800930c:	4a65      	ldr	r2, [pc, #404]	; (80094a4 <HAL_RCC_OscConfig+0x4e0>)
 800930e:	6813      	ldr	r3, [r2, #0]
 8009310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009314:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009316:	f7fb fb49 	bl	80049ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800931a:	4d62      	ldr	r5, [pc, #392]	; (80094a4 <HAL_RCC_OscConfig+0x4e0>)
        tickstart = HAL_GetTick();
 800931c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800931e:	e004      	b.n	800932a <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009320:	f7fb fb44 	bl	80049ac <HAL_GetTick>
 8009324:	1b80      	subs	r0, r0, r6
 8009326:	2864      	cmp	r0, #100	; 0x64
 8009328:	d814      	bhi.n	8009354 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800932a:	682b      	ldr	r3, [r5, #0]
 800932c:	039a      	lsls	r2, r3, #14
 800932e:	d5f7      	bpl.n	8009320 <HAL_RCC_OscConfig+0x35c>
 8009330:	e689      	b.n	8009046 <HAL_RCC_OscConfig+0x82>
      PWR->CR1 |= PWR_CR1_DBP;
 8009332:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009334:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8009336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800933a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800933c:	f7fb fb36 	bl	80049ac <HAL_GetTick>
 8009340:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009342:	6833      	ldr	r3, [r6, #0]
 8009344:	05d9      	lsls	r1, r3, #23
 8009346:	f53f aebf 	bmi.w	80090c8 <HAL_RCC_OscConfig+0x104>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800934a:	f7fb fb2f 	bl	80049ac <HAL_GetTick>
 800934e:	1bc0      	subs	r0, r0, r7
 8009350:	2864      	cmp	r0, #100	; 0x64
 8009352:	d9f6      	bls.n	8009342 <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 8009354:	2003      	movs	r0, #3
}
 8009356:	b002      	add	sp, #8
 8009358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800935c:	4a51      	ldr	r2, [pc, #324]	; (80094a4 <HAL_RCC_OscConfig+0x4e0>)
 800935e:	6921      	ldr	r1, [r4, #16]
 8009360:	6813      	ldr	r3, [r2, #0]
 8009362:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009366:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800936e:	e66d      	b.n	800904c <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 8009370:	2001      	movs	r0, #1
}
 8009372:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009374:	4b4b      	ldr	r3, [pc, #300]	; (80094a4 <HAL_RCC_OscConfig+0x4e0>)
 8009376:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009378:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800937a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009386:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009388:	f7fb fb10 	bl	80049ac <HAL_GetTick>
 800938c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800938e:	e004      	b.n	800939a <HAL_RCC_OscConfig+0x3d6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009390:	f7fb fb0c 	bl	80049ac <HAL_GetTick>
 8009394:	1b80      	subs	r0, r0, r6
 8009396:	2864      	cmp	r0, #100	; 0x64
 8009398:	d8dc      	bhi.n	8009354 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800939a:	682b      	ldr	r3, [r5, #0]
 800939c:	039b      	lsls	r3, r3, #14
 800939e:	d4f7      	bmi.n	8009390 <HAL_RCC_OscConfig+0x3cc>
 80093a0:	e651      	b.n	8009046 <HAL_RCC_OscConfig+0x82>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80093a2:	f240 119d 	movw	r1, #413	; 0x19d
 80093a6:	483e      	ldr	r0, [pc, #248]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 80093a8:	f7f9 f952 	bl	8002650 <assert_failed>
 80093ac:	e6a7      	b.n	80090fe <HAL_RCC_OscConfig+0x13a>
  FlagStatus pwrclkchanged = RESET;
 80093ae:	2500      	movs	r5, #0
 80093b0:	e685      	b.n	80090be <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093b2:	4b3c      	ldr	r3, [pc, #240]	; (80094a4 <HAL_RCC_OscConfig+0x4e0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093b4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093ba:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093bc:	f022 0201 	bic.w	r2, r2, #1
 80093c0:	671a      	str	r2, [r3, #112]	; 0x70
 80093c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093c4:	f022 0204 	bic.w	r2, r2, #4
 80093c8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80093ca:	f7fb faef 	bl	80049ac <HAL_GetTick>
 80093ce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093d0:	e004      	b.n	80093dc <HAL_RCC_OscConfig+0x418>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093d2:	f7fb faeb 	bl	80049ac <HAL_GetTick>
 80093d6:	1bc0      	subs	r0, r0, r7
 80093d8:	4540      	cmp	r0, r8
 80093da:	d8bb      	bhi.n	8009354 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093dc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80093de:	079b      	lsls	r3, r3, #30
 80093e0:	d4f7      	bmi.n	80093d2 <HAL_RCC_OscConfig+0x40e>
    if(pwrclkchanged == SET)
 80093e2:	2d00      	cmp	r5, #0
 80093e4:	f43f aedd 	beq.w	80091a2 <HAL_RCC_OscConfig+0x1de>
 80093e8:	e6d6      	b.n	8009198 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_DISABLE();
 80093ea:	4b2e      	ldr	r3, [pc, #184]	; (80094a4 <HAL_RCC_OscConfig+0x4e0>)
 80093ec:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ee:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80093f0:	f022 0201 	bic.w	r2, r2, #1
 80093f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80093f6:	f7fb fad9 	bl	80049ac <HAL_GetTick>
 80093fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093fc:	e004      	b.n	8009408 <HAL_RCC_OscConfig+0x444>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093fe:	f7fb fad5 	bl	80049ac <HAL_GetTick>
 8009402:	1b80      	subs	r0, r0, r6
 8009404:	2802      	cmp	r0, #2
 8009406:	d8a5      	bhi.n	8009354 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	0799      	lsls	r1, r3, #30
 800940c:	d4f7      	bmi.n	80093fe <HAL_RCC_OscConfig+0x43a>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	e61c      	b.n	800904c <HAL_RCC_OscConfig+0x88>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009412:	f240 2157 	movw	r1, #599	; 0x257
 8009416:	4822      	ldr	r0, [pc, #136]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 8009418:	f7f9 f91a 	bl	8002650 <assert_failed>
 800941c:	e6ea      	b.n	80091f4 <HAL_RCC_OscConfig+0x230>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800941e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	e773      	b.n	8009316 <HAL_RCC_OscConfig+0x352>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800942e:	f042 0204 	orr.w	r2, r2, #4
 8009432:	671a      	str	r2, [r3, #112]	; 0x70
 8009434:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009436:	f042 0201 	orr.w	r2, r2, #1
 800943a:	671a      	str	r2, [r3, #112]	; 0x70
 800943c:	e69a      	b.n	8009174 <HAL_RCC_OscConfig+0x1b0>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800943e:	f44f 7115 	mov.w	r1, #596	; 0x254
 8009442:	4817      	ldr	r0, [pc, #92]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 8009444:	f7f9 f904 	bl	8002650 <assert_failed>
 8009448:	e6bf      	b.n	80091ca <HAL_RCC_OscConfig+0x206>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800944a:	f240 215a 	movw	r1, #602	; 0x25a
 800944e:	4814      	ldr	r0, [pc, #80]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 8009450:	f7f9 f8fe 	bl	8002650 <assert_failed>
 8009454:	e6d8      	b.n	8009208 <HAL_RCC_OscConfig+0x244>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009456:	f44f 7116 	mov.w	r1, #600	; 0x258
 800945a:	4811      	ldr	r0, [pc, #68]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 800945c:	f7f9 f8f8 	bl	8002650 <assert_failed>
 8009460:	e6cd      	b.n	80091fe <HAL_RCC_OscConfig+0x23a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009462:	f240 2156 	movw	r1, #598	; 0x256
 8009466:	480e      	ldr	r0, [pc, #56]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 8009468:	f7f9 f8f2 	bl	8002650 <assert_failed>
 800946c:	e6b8      	b.n	80091e0 <HAL_RCC_OscConfig+0x21c>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800946e:	f240 2155 	movw	r1, #597	; 0x255
 8009472:	480b      	ldr	r0, [pc, #44]	; (80094a0 <HAL_RCC_OscConfig+0x4dc>)
 8009474:	f7f9 f8ec 	bl	8002650 <assert_failed>
 8009478:	e6ac      	b.n	80091d4 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_PLL_DISABLE();
 800947a:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800947c:	460c      	mov	r4, r1
        __HAL_RCC_PLL_DISABLE();
 800947e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009482:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8009484:	f7fb fa92 	bl	80049ac <HAL_GetTick>
 8009488:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800948a:	e005      	b.n	8009498 <HAL_RCC_OscConfig+0x4d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800948c:	f7fb fa8e 	bl	80049ac <HAL_GetTick>
 8009490:	1b40      	subs	r0, r0, r5
 8009492:	2802      	cmp	r0, #2
 8009494:	f63f af5e 	bhi.w	8009354 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	019b      	lsls	r3, r3, #6
 800949c:	d4f6      	bmi.n	800948c <HAL_RCC_OscConfig+0x4c8>
 800949e:	e6e9      	b.n	8009274 <HAL_RCC_OscConfig+0x2b0>
 80094a0:	08023400 	.word	0x08023400
 80094a4:	40023800 	.word	0x40023800

080094a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094a8:	4916      	ldr	r1, [pc, #88]	; (8009504 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80094aa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094ac:	688b      	ldr	r3, [r1, #8]
 80094ae:	f003 030c 	and.w	r3, r3, #12
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d01b      	beq.n	80094ee <HAL_RCC_GetSysClockFreq+0x46>
 80094b6:	2b08      	cmp	r3, #8
 80094b8:	d117      	bne.n	80094ea <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094ba:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80094bc:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094c2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80094c4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80094c8:	d113      	bne.n	80094f2 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094ca:	480f      	ldr	r0, [pc, #60]	; (8009508 <HAL_RCC_GetSysClockFreq+0x60>)
 80094cc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80094d0:	fba1 0100 	umull	r0, r1, r1, r0
 80094d4:	f7f6 ff6c 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80094d8:	4b0a      	ldr	r3, [pc, #40]	; (8009504 <HAL_RCC_GetSysClockFreq+0x5c>)
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80094e0:	3301      	adds	r3, #1
 80094e2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80094e4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80094e8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80094ea:	4807      	ldr	r0, [pc, #28]	; (8009508 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80094ec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80094ee:	4807      	ldr	r0, [pc, #28]	; (800950c <HAL_RCC_GetSysClockFreq+0x64>)
}
 80094f0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094f2:	4806      	ldr	r0, [pc, #24]	; (800950c <HAL_RCC_GetSysClockFreq+0x64>)
 80094f4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80094f8:	2300      	movs	r3, #0
 80094fa:	fba1 0100 	umull	r0, r1, r1, r0
 80094fe:	f7f6 ff57 	bl	80003b0 <__aeabi_uldivmod>
 8009502:	e7e9      	b.n	80094d8 <HAL_RCC_GetSysClockFreq+0x30>
 8009504:	40023800 	.word	0x40023800
 8009508:	00f42400 	.word	0x00f42400
 800950c:	007a1200 	.word	0x007a1200

08009510 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009510:	2800      	cmp	r0, #0
 8009512:	f000 80e5 	beq.w	80096e0 <HAL_RCC_ClockConfig+0x1d0>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009516:	6803      	ldr	r3, [r0, #0]
 8009518:	3b01      	subs	r3, #1
 800951a:	2b0e      	cmp	r3, #14
{
 800951c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009520:	4604      	mov	r4, r0
 8009522:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009524:	f200 80c8 	bhi.w	80096b8 <HAL_RCC_ClockConfig+0x1a8>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009528:	2d0f      	cmp	r5, #15
 800952a:	f200 80b5 	bhi.w	8009698 <HAL_RCC_ClockConfig+0x188>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800952e:	4a82      	ldr	r2, [pc, #520]	; (8009738 <HAL_RCC_ClockConfig+0x228>)
 8009530:	6813      	ldr	r3, [r2, #0]
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	42ab      	cmp	r3, r5
 8009538:	f0c0 80d4 	bcc.w	80096e4 <HAL_RCC_ClockConfig+0x1d4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	0798      	lsls	r0, r3, #30
 8009540:	d532      	bpl.n	80095a8 <HAL_RCC_ClockConfig+0x98>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009542:	0759      	lsls	r1, r3, #29
 8009544:	d504      	bpl.n	8009550 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009546:	497d      	ldr	r1, [pc, #500]	; (800973c <HAL_RCC_ClockConfig+0x22c>)
 8009548:	688a      	ldr	r2, [r1, #8]
 800954a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800954e:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009550:	071a      	lsls	r2, r3, #28
 8009552:	d504      	bpl.n	800955e <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009554:	4979      	ldr	r1, [pc, #484]	; (800973c <HAL_RCC_ClockConfig+0x22c>)
 8009556:	688a      	ldr	r2, [r1, #8]
 8009558:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800955c:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800955e:	68a1      	ldr	r1, [r4, #8]
 8009560:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8009564:	f021 0620 	bic.w	r6, r1, #32
 8009568:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800956c:	bf14      	ite	ne
 800956e:	2201      	movne	r2, #1
 8009570:	2200      	moveq	r2, #0
 8009572:	2e90      	cmp	r6, #144	; 0x90
 8009574:	bf0c      	ite	eq
 8009576:	2200      	moveq	r2, #0
 8009578:	f002 0201 	andne.w	r2, r2, #1
 800957c:	29f0      	cmp	r1, #240	; 0xf0
 800957e:	bf0c      	ite	eq
 8009580:	2200      	moveq	r2, #0
 8009582:	f002 0201 	andne.w	r2, r2, #1
 8009586:	28a0      	cmp	r0, #160	; 0xa0
 8009588:	bf0c      	ite	eq
 800958a:	2200      	moveq	r2, #0
 800958c:	f002 0201 	andne.w	r2, r2, #1
 8009590:	b122      	cbz	r2, 800959c <HAL_RCC_ClockConfig+0x8c>
 8009592:	f021 0210 	bic.w	r2, r1, #16
 8009596:	2ac0      	cmp	r2, #192	; 0xc0
 8009598:	f040 80c5 	bne.w	8009726 <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800959c:	4867      	ldr	r0, [pc, #412]	; (800973c <HAL_RCC_ClockConfig+0x22c>)
 800959e:	6882      	ldr	r2, [r0, #8]
 80095a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80095a4:	4311      	orrs	r1, r2
 80095a6:	6081      	str	r1, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095a8:	07df      	lsls	r7, r3, #31
 80095aa:	d527      	bpl.n	80095fc <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80095ac:	6863      	ldr	r3, [r4, #4]
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	f200 808f 	bhi.w	80096d2 <HAL_RCC_ClockConfig+0x1c2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095b4:	4a61      	ldr	r2, [pc, #388]	; (800973c <HAL_RCC_ClockConfig+0x22c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095b6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095b8:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095ba:	f000 8086 	beq.w	80096ca <HAL_RCC_ClockConfig+0x1ba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095be:	2b02      	cmp	r3, #2
 80095c0:	f000 809e 	beq.w	8009700 <HAL_RCC_ClockConfig+0x1f0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095c4:	0791      	lsls	r1, r2, #30
 80095c6:	d574      	bpl.n	80096b2 <HAL_RCC_ClockConfig+0x1a2>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095c8:	495c      	ldr	r1, [pc, #368]	; (800973c <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ca:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095ce:	688a      	ldr	r2, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095d0:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095d2:	f022 0203 	bic.w	r2, r2, #3
 80095d6:	4313      	orrs	r3, r2
 80095d8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80095da:	f7fb f9e7 	bl	80049ac <HAL_GetTick>
 80095de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095e0:	e005      	b.n	80095ee <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095e2:	f7fb f9e3 	bl	80049ac <HAL_GetTick>
 80095e6:	1bc0      	subs	r0, r0, r7
 80095e8:	4540      	cmp	r0, r8
 80095ea:	f200 8087 	bhi.w	80096fc <HAL_RCC_ClockConfig+0x1ec>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095ee:	68b3      	ldr	r3, [r6, #8]
 80095f0:	6862      	ldr	r2, [r4, #4]
 80095f2:	f003 030c 	and.w	r3, r3, #12
 80095f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80095fa:	d1f2      	bne.n	80095e2 <HAL_RCC_ClockConfig+0xd2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095fc:	4a4e      	ldr	r2, [pc, #312]	; (8009738 <HAL_RCC_ClockConfig+0x228>)
 80095fe:	6813      	ldr	r3, [r2, #0]
 8009600:	f003 030f 	and.w	r3, r3, #15
 8009604:	42ab      	cmp	r3, r5
 8009606:	d909      	bls.n	800961c <HAL_RCC_ClockConfig+0x10c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009608:	6813      	ldr	r3, [r2, #0]
 800960a:	f023 030f 	bic.w	r3, r3, #15
 800960e:	432b      	orrs	r3, r5
 8009610:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009612:	6813      	ldr	r3, [r2, #0]
 8009614:	f003 030f 	and.w	r3, r3, #15
 8009618:	42ab      	cmp	r3, r5
 800961a:	d14a      	bne.n	80096b2 <HAL_RCC_ClockConfig+0x1a2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	075a      	lsls	r2, r3, #29
 8009620:	d512      	bpl.n	8009648 <HAL_RCC_ClockConfig+0x138>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009622:	68e1      	ldr	r1, [r4, #12]
 8009624:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 8009628:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800962c:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 8009630:	bf18      	it	ne
 8009632:	2a00      	cmpne	r2, #0
 8009634:	d002      	beq.n	800963c <HAL_RCC_ClockConfig+0x12c>
 8009636:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800963a:	d16c      	bne.n	8009716 <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800963c:	483f      	ldr	r0, [pc, #252]	; (800973c <HAL_RCC_ClockConfig+0x22c>)
 800963e:	6882      	ldr	r2, [r0, #8]
 8009640:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009644:	430a      	orrs	r2, r1
 8009646:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009648:	071b      	lsls	r3, r3, #28
 800964a:	d513      	bpl.n	8009674 <HAL_RCC_ClockConfig+0x164>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800964c:	6922      	ldr	r2, [r4, #16]
 800964e:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 8009652:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 8009656:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800965a:	bf18      	it	ne
 800965c:	2b00      	cmpne	r3, #0
 800965e:	d002      	beq.n	8009666 <HAL_RCC_ClockConfig+0x156>
 8009660:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8009664:	d150      	bne.n	8009708 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009666:	4935      	ldr	r1, [pc, #212]	; (800973c <HAL_RCC_ClockConfig+0x22c>)
 8009668:	688b      	ldr	r3, [r1, #8]
 800966a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800966e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009672:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009674:	f7ff ff18 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 8009678:	4b30      	ldr	r3, [pc, #192]	; (800973c <HAL_RCC_ClockConfig+0x22c>)
 800967a:	4931      	ldr	r1, [pc, #196]	; (8009740 <HAL_RCC_ClockConfig+0x230>)
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	4a31      	ldr	r2, [pc, #196]	; (8009744 <HAL_RCC_ClockConfig+0x234>)
 8009680:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009684:	5ccb      	ldrb	r3, [r1, r3]
 8009686:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 800968a:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800968c:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800968e:	f7fa fb3b 	bl	8003d08 <HAL_InitTick>
  return HAL_OK;
 8009692:	2000      	movs	r0, #0
}
 8009694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009698:	f240 21cb 	movw	r1, #715	; 0x2cb
 800969c:	482a      	ldr	r0, [pc, #168]	; (8009748 <HAL_RCC_ClockConfig+0x238>)
 800969e:	f7f8 ffd7 	bl	8002650 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096a2:	4b25      	ldr	r3, [pc, #148]	; (8009738 <HAL_RCC_ClockConfig+0x228>)
 80096a4:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096a6:	6819      	ldr	r1, [r3, #0]
 80096a8:	f021 010f 	bic.w	r1, r1, #15
 80096ac:	430d      	orrs	r5, r1
 80096ae:	601d      	str	r5, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096b0:	681b      	ldr	r3, [r3, #0]
    return HAL_ERROR;
 80096b2:	2001      	movs	r0, #1
}
 80096b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80096b8:	f240 21ca 	movw	r1, #714	; 0x2ca
 80096bc:	4822      	ldr	r0, [pc, #136]	; (8009748 <HAL_RCC_ClockConfig+0x238>)
 80096be:	f7f8 ffc7 	bl	8002650 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80096c2:	2d0f      	cmp	r5, #15
 80096c4:	f67f af33 	bls.w	800952e <HAL_RCC_ClockConfig+0x1e>
 80096c8:	e7e6      	b.n	8009698 <HAL_RCC_ClockConfig+0x188>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ca:	0396      	lsls	r6, r2, #14
 80096cc:	f53f af7c 	bmi.w	80095c8 <HAL_RCC_ClockConfig+0xb8>
 80096d0:	e7ef      	b.n	80096b2 <HAL_RCC_ClockConfig+0x1a2>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80096d2:	f240 21f6 	movw	r1, #758	; 0x2f6
 80096d6:	481c      	ldr	r0, [pc, #112]	; (8009748 <HAL_RCC_ClockConfig+0x238>)
 80096d8:	f7f8 ffba 	bl	8002650 <assert_failed>
 80096dc:	6863      	ldr	r3, [r4, #4]
 80096de:	e769      	b.n	80095b4 <HAL_RCC_ClockConfig+0xa4>
    return HAL_ERROR;
 80096e0:	2001      	movs	r0, #1
}
 80096e2:	4770      	bx	lr
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096e4:	6813      	ldr	r3, [r2, #0]
 80096e6:	f023 030f 	bic.w	r3, r3, #15
 80096ea:	432b      	orrs	r3, r5
 80096ec:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096ee:	6813      	ldr	r3, [r2, #0]
 80096f0:	f003 030f 	and.w	r3, r3, #15
 80096f4:	42ab      	cmp	r3, r5
 80096f6:	f43f af21 	beq.w	800953c <HAL_RCC_ClockConfig+0x2c>
 80096fa:	e7da      	b.n	80096b2 <HAL_RCC_ClockConfig+0x1a2>
        return HAL_TIMEOUT;
 80096fc:	2003      	movs	r0, #3
 80096fe:	e7d9      	b.n	80096b4 <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009700:	0190      	lsls	r0, r2, #6
 8009702:	f53f af61 	bmi.w	80095c8 <HAL_RCC_ClockConfig+0xb8>
 8009706:	e7d4      	b.n	80096b2 <HAL_RCC_ClockConfig+0x1a2>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009708:	f240 313a 	movw	r1, #826	; 0x33a
 800970c:	480e      	ldr	r0, [pc, #56]	; (8009748 <HAL_RCC_ClockConfig+0x238>)
 800970e:	f7f8 ff9f 	bl	8002650 <assert_failed>
 8009712:	6922      	ldr	r2, [r4, #16]
 8009714:	e7a7      	b.n	8009666 <HAL_RCC_ClockConfig+0x156>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009716:	f240 3133 	movw	r1, #819	; 0x333
 800971a:	480b      	ldr	r0, [pc, #44]	; (8009748 <HAL_RCC_ClockConfig+0x238>)
 800971c:	f7f8 ff98 	bl	8002650 <assert_failed>
 8009720:	68e1      	ldr	r1, [r4, #12]
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	e78a      	b.n	800963c <HAL_RCC_ClockConfig+0x12c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009726:	f240 21ef 	movw	r1, #751	; 0x2ef
 800972a:	4807      	ldr	r0, [pc, #28]	; (8009748 <HAL_RCC_ClockConfig+0x238>)
 800972c:	f7f8 ff90 	bl	8002650 <assert_failed>
 8009730:	68a1      	ldr	r1, [r4, #8]
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	e732      	b.n	800959c <HAL_RCC_ClockConfig+0x8c>
 8009736:	bf00      	nop
 8009738:	40023c00 	.word	0x40023c00
 800973c:	40023800 	.word	0x40023800
 8009740:	08022b2c 	.word	0x08022b2c
 8009744:	200002b8 	.word	0x200002b8
 8009748:	08023400 	.word	0x08023400

0800974c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800974c:	4b01      	ldr	r3, [pc, #4]	; (8009754 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	200002b8 	.word	0x200002b8

08009758 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009758:	4b04      	ldr	r3, [pc, #16]	; (800976c <HAL_RCC_GetPCLK1Freq+0x14>)
 800975a:	4a05      	ldr	r2, [pc, #20]	; (8009770 <HAL_RCC_GetPCLK1Freq+0x18>)
 800975c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800975e:	4905      	ldr	r1, [pc, #20]	; (8009774 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009760:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009764:	6808      	ldr	r0, [r1, #0]
 8009766:	5cd3      	ldrb	r3, [r2, r3]
}
 8009768:	40d8      	lsrs	r0, r3
 800976a:	4770      	bx	lr
 800976c:	40023800 	.word	0x40023800
 8009770:	08022b3c 	.word	0x08022b3c
 8009774:	200002b8 	.word	0x200002b8

08009778 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009778:	4b04      	ldr	r3, [pc, #16]	; (800978c <HAL_RCC_GetPCLK2Freq+0x14>)
 800977a:	4a05      	ldr	r2, [pc, #20]	; (8009790 <HAL_RCC_GetPCLK2Freq+0x18>)
 800977c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800977e:	4905      	ldr	r1, [pc, #20]	; (8009794 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009780:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009784:	6808      	ldr	r0, [r1, #0]
 8009786:	5cd3      	ldrb	r3, [r2, r3]
}
 8009788:	40d8      	lsrs	r0, r3
 800978a:	4770      	bx	lr
 800978c:	40023800 	.word	0x40023800
 8009790:	08022b3c 	.word	0x08022b3c
 8009794:	200002b8 	.word	0x200002b8

08009798 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009798:	4b0e      	ldr	r3, [pc, #56]	; (80097d4 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800979a:	220f      	movs	r2, #15
 800979c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	f002 0203 	and.w	r2, r2, #3
 80097a4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80097ac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80097b4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	08db      	lsrs	r3, r3, #3
{
 80097ba:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80097bc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80097c0:	4c05      	ldr	r4, [pc, #20]	; (80097d8 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80097c2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80097c4:	6823      	ldr	r3, [r4, #0]
}
 80097c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	600b      	str	r3, [r1, #0]
}
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	40023800 	.word	0x40023800
 80097d8:	40023c00 	.word	0x40023c00

080097dc <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80097dc:	4a54      	ldr	r2, [pc, #336]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80097de:	6803      	ldr	r3, [r0, #0]
 80097e0:	401a      	ands	r2, r3
{
 80097e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097e6:	4604      	mov	r4, r0
 80097e8:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	f000 8349 	beq.w	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80097f0:	f013 0601 	ands.w	r6, r3, #1
 80097f4:	d00f      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80097f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097f8:	f431 0200 	bics.w	r2, r1, #8388608	; 0x800000
 80097fc:	f040 834c 	bne.w	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x6bc>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009800:	4a4c      	ldr	r2, [pc, #304]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009802:	fab1 f681 	clz	r6, r1
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009806:	6890      	ldr	r0, [r2, #8]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009808:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800980a:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 800980e:	6090      	str	r0, [r2, #8]
 8009810:	6890      	ldr	r0, [r2, #8]
 8009812:	4301      	orrs	r1, r0
 8009814:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009816:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800981a:	d014      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800981c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800981e:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 8009822:	f040 836f 	bne.w	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x728>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009826:	4943      	ldr	r1, [pc, #268]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x158>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009828:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800982c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8009830:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009834:	ea42 0205 	orr.w	r2, r2, r5
 8009838:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800983c:	f000 8327 	beq.w	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009840:	fab5 f585 	clz	r5, r5
 8009844:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009846:	02da      	lsls	r2, r3, #11
 8009848:	d514      	bpl.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800984a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800984c:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 8009850:	f040 8351 	bne.w	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009854:	4837      	ldr	r0, [pc, #220]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009856:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800985a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800985e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8009862:	ea42 0201 	orr.w	r2, r2, r1
 8009866:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800986a:	f000 8313 	beq.w	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800986e:	2900      	cmp	r1, #0
 8009870:	bf08      	it	eq
 8009872:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8009874:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009878:	bf18      	it	ne
 800987a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800987c:	069f      	lsls	r7, r3, #26
 800987e:	f140 8099 	bpl.w	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009882:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009884:	492c      	ldr	r1, [pc, #176]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009886:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800988a:	bf18      	it	ne
 800988c:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 8009890:	f422 2ca0 	bic.w	ip, r2, #327680	; 0x50000
 8009894:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 8009898:	4828      	ldr	r0, [pc, #160]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800989a:	bf14      	ite	ne
 800989c:	2301      	movne	r3, #1
 800989e:	2300      	moveq	r3, #0
 80098a0:	458c      	cmp	ip, r1
 80098a2:	bf0c      	ite	eq
 80098a4:	2300      	moveq	r3, #0
 80098a6:	f003 0301 	andne.w	r3, r3, #1
 80098aa:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 80098ae:	f8df c098 	ldr.w	ip, [pc, #152]	; 8009948 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80098b2:	4287      	cmp	r7, r0
 80098b4:	bf0c      	ite	eq
 80098b6:	2300      	moveq	r3, #0
 80098b8:	f003 0301 	andne.w	r3, r3, #1
 80098bc:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 80098c0:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 80098c4:	4561      	cmp	r1, ip
 80098c6:	bf0c      	ite	eq
 80098c8:	2300      	moveq	r3, #0
 80098ca:	f003 0301 	andne.w	r3, r3, #1
 80098ce:	f50c 2c00 	add.w	ip, ip, #524288	; 0x80000
 80098d2:	4287      	cmp	r7, r0
 80098d4:	bf0c      	ite	eq
 80098d6:	2300      	moveq	r3, #0
 80098d8:	f003 0301 	andne.w	r3, r3, #1
 80098dc:	4f18      	ldr	r7, [pc, #96]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80098de:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 80098e2:	4561      	cmp	r1, ip
 80098e4:	bf0c      	ite	eq
 80098e6:	2300      	moveq	r3, #0
 80098e8:	f003 0301 	andne.w	r3, r3, #1
 80098ec:	42b9      	cmp	r1, r7
 80098ee:	bf0c      	ite	eq
 80098f0:	2300      	moveq	r3, #0
 80098f2:	f003 0301 	andne.w	r3, r3, #1
 80098f6:	4281      	cmp	r1, r0
 80098f8:	bf0c      	ite	eq
 80098fa:	2300      	moveq	r3, #0
 80098fc:	f003 0301 	andne.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	f040 823f 	bne.w	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009906:	4a0b      	ldr	r2, [pc, #44]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009908:	4b0e      	ldr	r3, [pc, #56]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x168>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800990a:	6c11      	ldr	r1, [r2, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800990c:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800990e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8009912:	6411      	str	r1, [r2, #64]	; 0x40
 8009914:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009916:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800991a:	9201      	str	r2, [sp, #4]
 800991c:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009924:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009926:	f7fb f841 	bl	80049ac <HAL_GetTick>
 800992a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800992c:	e015      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800992e:	bf00      	nop
 8009930:	1dfffff9 	.word	0x1dfffff9
 8009934:	40023800 	.word	0x40023800
 8009938:	00020300 	.word	0x00020300
 800993c:	00040300 	.word	0x00040300
 8009940:	00140300 	.word	0x00140300
 8009944:	40007000 	.word	0x40007000
 8009948:	00080300 	.word	0x00080300
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800994c:	f7fb f82e 	bl	80049ac <HAL_GetTick>
 8009950:	eba0 0008 	sub.w	r0, r0, r8
 8009954:	2864      	cmp	r0, #100	; 0x64
 8009956:	f200 8211 	bhi.w	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	05d8      	lsls	r0, r3, #23
 800995e:	d5f5      	bpl.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009960:	4ac4      	ldr	r2, [pc, #784]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009962:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009964:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009966:	f403 7040 	and.w	r0, r3, #768	; 0x300

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800996a:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 800996e:	d011      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009970:	4281      	cmp	r1, r0
 8009972:	d00f      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009974:	6f11      	ldr	r1, [r2, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009976:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009978:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800997c:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8009980:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009982:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8009984:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8009988:	6717      	str	r7, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800998a:	6711      	str	r1, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800998c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800998e:	07c9      	lsls	r1, r1, #31
 8009990:	f100 8388 	bmi.w	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009994:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8009998:	f000 82a4 	beq.w	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800999c:	49b5      	ldr	r1, [pc, #724]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800999e:	688a      	ldr	r2, [r1, #8]
 80099a0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80099a4:	608a      	str	r2, [r1, #8]
 80099a6:	4ab3      	ldr	r2, [pc, #716]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099ac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80099ae:	430b      	orrs	r3, r1
 80099b0:	6713      	str	r3, [r2, #112]	; 0x70
 80099b2:	6823      	ldr	r3, [r4, #0]
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80099b4:	06df      	lsls	r7, r3, #27
 80099b6:	d510      	bpl.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80099b8:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80099ba:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 80099be:	f040 82a8 	bne.w	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x736>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099c2:	4aac      	ldr	r2, [pc, #688]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099c4:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80099c8:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 80099cc:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 80099d0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80099d4:	4339      	orrs	r1, r7
 80099d6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099da:	0458      	lsls	r0, r3, #17
 80099dc:	d50f      	bpl.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80099de:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80099e0:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 80099e4:	d003      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x212>
 80099e6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80099ea:	f040 8264 	bne.w	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x6da>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80099ee:	48a1      	ldr	r0, [pc, #644]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099f0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80099f4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80099f8:	430a      	orrs	r2, r1
 80099fa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80099fe:	0419      	lsls	r1, r3, #16
 8009a00:	d50f      	bpl.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8009a02:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009a04:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8009a08:	d003      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8009a0a:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8009a0e:	f040 8259 	bne.w	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a12:	4898      	ldr	r0, [pc, #608]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a14:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009a18:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a22:	03da      	lsls	r2, r3, #15
 8009a24:	d50f      	bpl.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8009a26:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009a28:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 8009a2c:	d003      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009a2e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8009a32:	f040 824f 	bne.w	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a36:	488f      	ldr	r0, [pc, #572]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a38:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009a3c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009a40:	430a      	orrs	r2, r1
 8009a42:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a46:	039f      	lsls	r7, r3, #14
 8009a48:	d50f      	bpl.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8009a4a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009a4c:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 8009a50:	d003      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8009a52:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8009a56:	f040 8226 	bne.w	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x6ca>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a5a:	4886      	ldr	r0, [pc, #536]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a5c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009a60:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8009a64:	430a      	orrs	r2, r1
 8009a66:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a6a:	0658      	lsls	r0, r3, #25
 8009a6c:	d50b      	bpl.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8009a6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a70:	2903      	cmp	r1, #3
 8009a72:	f200 8290 	bhi.w	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x7ba>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a76:	487f      	ldr	r0, [pc, #508]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a78:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009a7c:	f022 0203 	bic.w	r2, r2, #3
 8009a80:	430a      	orrs	r2, r1
 8009a82:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a86:	0619      	lsls	r1, r3, #24
 8009a88:	d50c      	bpl.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8009a8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a8c:	f031 020c 	bics.w	r2, r1, #12
 8009a90:	f040 828f 	bne.w	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x7d6>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a94:	4877      	ldr	r0, [pc, #476]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a96:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009a9a:	f022 020c 	bic.w	r2, r2, #12
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009aa4:	05da      	lsls	r2, r3, #23
 8009aa6:	d50c      	bpl.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8009aa8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009aaa:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 8009aae:	f040 8288 	bne.w	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009ab2:	4870      	ldr	r0, [pc, #448]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ab4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009ab8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009abc:	430a      	orrs	r2, r1
 8009abe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ac2:	059f      	lsls	r7, r3, #22
 8009ac4:	d50c      	bpl.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8009ac6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009ac8:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 8009acc:	f040 8291 	bne.w	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x816>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ad0:	4868      	ldr	r0, [pc, #416]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ad2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009ad6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009ada:	430a      	orrs	r2, r1
 8009adc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009ae0:	0558      	lsls	r0, r3, #21
 8009ae2:	d50c      	bpl.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8009ae4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009ae6:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 8009aea:	f040 828a 	bne.w	800a002 <HAL_RCCEx_PeriphCLKConfig+0x826>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009aee:	4861      	ldr	r0, [pc, #388]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009af0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009af4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009af8:	430a      	orrs	r2, r1
 8009afa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009afe:	0519      	lsls	r1, r3, #20
 8009b00:	d50c      	bpl.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8009b02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009b04:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 8009b08:	f040 8283 	bne.w	800a012 <HAL_RCCEx_PeriphCLKConfig+0x836>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009b0c:	4859      	ldr	r0, [pc, #356]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b0e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009b12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b16:	430a      	orrs	r2, r1
 8009b18:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009b1c:	04da      	lsls	r2, r3, #19
 8009b1e:	d50c      	bpl.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8009b20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009b22:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 8009b26:	f040 827c 	bne.w	800a022 <HAL_RCCEx_PeriphCLKConfig+0x846>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009b2a:	4852      	ldr	r0, [pc, #328]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b2c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009b30:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009b34:	430a      	orrs	r2, r1
 8009b36:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009b3a:	049f      	lsls	r7, r3, #18
 8009b3c:	d50c      	bpl.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8009b3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009b40:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 8009b44:	f040 824d 	bne.w	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x806>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009b48:	484a      	ldr	r0, [pc, #296]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b4a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009b4e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b52:	430a      	orrs	r2, r1
 8009b54:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b58:	0258      	lsls	r0, r3, #9
 8009b5a:	d50c      	bpl.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8009b5c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009b5e:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 8009b62:	f040 81dd 	bne.w	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b66:	4843      	ldr	r0, [pc, #268]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b68:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009b6c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009b70:	430a      	orrs	r2, r1
 8009b72:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009b76:	0299      	lsls	r1, r3, #10
 8009b78:	d510      	bpl.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8009b7a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009b7c:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 8009b80:	f040 81d6 	bne.w	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x754>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009b84:	483b      	ldr	r0, [pc, #236]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8009b86:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009b8a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 8009b8e:	bf08      	it	eq
 8009b90:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009b92:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8009b96:	430a      	orrs	r2, r1
 8009b98:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8009b9c:	f013 0f08 	tst.w	r3, #8
 8009ba0:	bf18      	it	ne
 8009ba2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ba4:	035a      	lsls	r2, r3, #13
 8009ba6:	d50c      	bpl.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8009ba8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009baa:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 8009bae:	f040 8210 	bne.w	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bb2:	4830      	ldr	r0, [pc, #192]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bb4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009bb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009bc2:	021f      	lsls	r7, r3, #8
 8009bc4:	d50d      	bpl.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8009bc6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009bca:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 8009bce:	f040 81b7 	bne.w	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009bd2:	4828      	ldr	r0, [pc, #160]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bd4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009bd8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009be2:	0158      	lsls	r0, r3, #5
 8009be4:	d50d      	bpl.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8009be6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009bea:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 8009bee:	f040 81b0 	bne.w	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x776>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009bf2:	4820      	ldr	r0, [pc, #128]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bf4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009bf8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c02:	0119      	lsls	r1, r3, #4
 8009c04:	d50d      	bpl.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8009c06:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8009c0a:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 8009c0e:	f040 81b1 	bne.w	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x798>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c12:	4818      	ldr	r0, [pc, #96]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c14:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009c18:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009c22:	00da      	lsls	r2, r3, #3
 8009c24:	d50d      	bpl.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x466>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8009c26:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009c2a:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 8009c2e:	f040 81aa 	bne.w	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009c32:	4910      	ldr	r1, [pc, #64]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c34:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8009c38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009c42:	2e01      	cmp	r6, #1
 8009c44:	f000 80a9 	beq.w	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c4e:	f000 80a4 	beq.w	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009c52:	2d01      	cmp	r5, #1
 8009c54:	d003      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x482>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8009c56:	2000      	movs	r0, #0
}
 8009c58:	b003      	add	sp, #12
 8009c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c60:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009c62:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8009c64:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009c68:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009c6a:	f7fa fe9f 	bl	80049ac <HAL_GetTick>
 8009c6e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009c70:	e007      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009c72:	bf00      	nop
 8009c74:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009c78:	f7fa fe98 	bl	80049ac <HAL_GetTick>
 8009c7c:	1b80      	subs	r0, r0, r6
 8009c7e:	2864      	cmp	r0, #100	; 0x64
 8009c80:	d87c      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	009f      	lsls	r7, r3, #2
 8009c86:	d4f7      	bmi.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8009c88:	6963      	ldr	r3, [r4, #20]
 8009c8a:	3b32      	subs	r3, #50	; 0x32
 8009c8c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8009c90:	d904      	bls.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8009c92:	f240 2146 	movw	r1, #582	; 0x246
 8009c96:	48b3      	ldr	r0, [pc, #716]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009c98:	f7f8 fcda 	bl	8002650 <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	031d      	lsls	r5, r3, #12
 8009ca0:	d501      	bpl.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009ca2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009ca4:	b11a      	cbz	r2, 8009cae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ca6:	02d8      	lsls	r0, r3, #11
 8009ca8:	d526      	bpl.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009caa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009cac:	bb22      	cbnz	r2, 8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8009cae:	69a3      	ldr	r3, [r4, #24]
 8009cb0:	3b02      	subs	r3, #2
 8009cb2:	2b0d      	cmp	r3, #13
 8009cb4:	f200 8259 	bhi.w	800a16a <HAL_RCCEx_PeriphCLKConfig+0x98e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8009cb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cba:	1e59      	subs	r1, r3, #1
 8009cbc:	291f      	cmp	r1, #31
 8009cbe:	f200 824c 	bhi.w	800a15a <HAL_RCCEx_PeriphCLKConfig+0x97e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009cc2:	4aa9      	ldr	r2, [pc, #676]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009cc4:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009cc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009cca:	f8d2 6088 	ldr.w	r6, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009cd2:	69a0      	ldr	r0, [r4, #24]
 8009cd4:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8009cd8:	4333      	orrs	r3, r6
 8009cda:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8009cde:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009ce2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009ce6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009cea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8009cee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009cf6:	6823      	ldr	r3, [r4, #0]
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009cf8:	0299      	lsls	r1, r3, #10
 8009cfa:	d504      	bpl.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009cfc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009cfe:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8009d02:	f000 8215 	beq.w	800a130 <HAL_RCCEx_PeriphCLKConfig+0x954>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009d06:	071a      	lsls	r2, r3, #28
 8009d08:	d526      	bpl.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8009d0a:	69e3      	ldr	r3, [r4, #28]
 8009d0c:	3b02      	subs	r3, #2
 8009d0e:	2b05      	cmp	r3, #5
 8009d10:	d904      	bls.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x540>
 8009d12:	f240 2171 	movw	r1, #625	; 0x271
 8009d16:	4893      	ldr	r0, [pc, #588]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009d18:	f7f8 fc9a 	bl	8002650 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8009d1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009d1e:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 8009d22:	f040 8228 	bne.w	800a176 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d26:	4a90      	ldr	r2, [pc, #576]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009d28:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d2a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009d2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009d32:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8009d36:	69e4      	ldr	r4, [r4, #28]
 8009d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8009d42:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
 8009d46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009d4a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009d4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009d52:	4303      	orrs	r3, r0
 8009d54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8009d58:	4b83      	ldr	r3, [pc, #524]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d5c:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8009d5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009d62:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009d64:	f7fa fe22 	bl	80049ac <HAL_GetTick>
 8009d68:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	f53f af72 	bmi.w	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009d72:	f7fa fe1b 	bl	80049ac <HAL_GetTick>
 8009d76:	1b40      	subs	r0, r0, r5
 8009d78:	2864      	cmp	r0, #100	; 0x64
 8009d7a:	d9f6      	bls.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x58e>
        return HAL_TIMEOUT;
 8009d7c:	2003      	movs	r0, #3
}
 8009d7e:	b003      	add	sp, #12
 8009d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009d84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d88:	4b78      	ldr	r3, [pc, #480]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x790>)
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	f43f adbb 	beq.w	8009906 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8009d90:	21b9      	movs	r1, #185	; 0xb9
 8009d92:	4874      	ldr	r0, [pc, #464]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009d94:	f7f8 fc5c 	bl	8002650 <assert_failed>
 8009d98:	e5b5      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_PLLI2S_DISABLE();
 8009d9a:	4b73      	ldr	r3, [pc, #460]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d9e:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8009da0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009da4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009da6:	f7fa fe01 	bl	80049ac <HAL_GetTick>
 8009daa:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009dac:	e004      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009dae:	f7fa fdfd 	bl	80049ac <HAL_GetTick>
 8009db2:	1bc0      	subs	r0, r0, r7
 8009db4:	2864      	cmp	r0, #100	; 0x64
 8009db6:	d8e1      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009db8:	6833      	ldr	r3, [r6, #0]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	d4f7      	bmi.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8009dbe:	6863      	ldr	r3, [r4, #4]
 8009dc0:	3b32      	subs	r3, #50	; 0x32
 8009dc2:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8009dc6:	f200 80ee 	bhi.w	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	07df      	lsls	r7, r3, #31
 8009dce:	d503      	bpl.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8009dd0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	f000 8150 	beq.w	800a078 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009dd8:	031e      	lsls	r6, r3, #12
 8009dda:	d504      	bpl.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8009ddc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009dde:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009de2:	f000 8126 	beq.w	800a032 <HAL_RCCEx_PeriphCLKConfig+0x856>
 8009de6:	02d8      	lsls	r0, r3, #11
 8009de8:	d504      	bpl.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x618>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009dea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009dec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8009df0:	f000 811f 	beq.w	800a032 <HAL_RCCEx_PeriphCLKConfig+0x856>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009df4:	01d9      	lsls	r1, r3, #7
 8009df6:	d514      	bpl.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x646>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009df8:	6927      	ldr	r7, [r4, #16]
 8009dfa:	2f03      	cmp	r7, #3
 8009dfc:	f200 8175 	bhi.w	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x90e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e00:	4959      	ldr	r1, [pc, #356]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009e02:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e04:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009e08:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009e0c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8009e10:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8009e14:	4332      	orrs	r2, r6
 8009e16:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8009e1a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8009e1e:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009e22:	019a      	lsls	r2, r3, #6
 8009e24:	d51a      	bpl.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x680>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009e26:	6923      	ldr	r3, [r4, #16]
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	f200 8173 	bhi.w	800a114 <HAL_RCCEx_PeriphCLKConfig+0x938>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8009e2e:	68a3      	ldr	r3, [r4, #8]
 8009e30:	3b02      	subs	r3, #2
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	f200 8168 	bhi.w	800a108 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8009e38:	68e2      	ldr	r2, [r4, #12]
 8009e3a:	1e93      	subs	r3, r2, #2
 8009e3c:	2b0d      	cmp	r3, #13
 8009e3e:	f200 815c 	bhi.w	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e42:	6923      	ldr	r3, [r4, #16]
 8009e44:	6861      	ldr	r1, [r4, #4]
 8009e46:	041b      	lsls	r3, r3, #16
 8009e48:	68a0      	ldr	r0, [r4, #8]
 8009e4a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8009e4e:	4946      	ldr	r1, [pc, #280]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009e50:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8009e54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8009e5c:	4b42      	ldr	r3, [pc, #264]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e60:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8009e62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009e66:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009e68:	f7fa fda0 	bl	80049ac <HAL_GetTick>
 8009e6c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e6e:	e004      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009e70:	f7fa fd9c 	bl	80049ac <HAL_GetTick>
 8009e74:	1bc0      	subs	r0, r0, r7
 8009e76:	2864      	cmp	r0, #100	; 0x64
 8009e78:	d880      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e7a:	6833      	ldr	r3, [r6, #0]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	d5f7      	bpl.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009e80:	e6e7      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x476>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8009e82:	2174      	movs	r1, #116	; 0x74
 8009e84:	4837      	ldr	r0, [pc, #220]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009e86:	f7f8 fbe3 	bl	8002650 <assert_failed>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	e4b0      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x14>
  uint32_t pllsaiused = 0;
 8009e8e:	2500      	movs	r5, #0
      plli2sused = 1;
 8009e90:	2601      	movs	r6, #1
 8009e92:	e4d8      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      plli2sused = 1;
 8009e94:	2601      	movs	r6, #1
 8009e96:	e4ed      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x98>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8009e98:	217a      	movs	r1, #122	; 0x7a
 8009e9a:	4832      	ldr	r0, [pc, #200]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009e9c:	f7f8 fbd8 	bl	8002650 <assert_failed>
 8009ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	e4ac      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x24>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8009ea6:	f240 111b 	movw	r1, #283	; 0x11b
 8009eaa:	482e      	ldr	r0, [pc, #184]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009eac:	f7f8 fbd0 	bl	8002650 <assert_failed>
 8009eb0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	e5d1      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8009eb6:	21fd      	movs	r1, #253	; 0xfd
 8009eb8:	482a      	ldr	r0, [pc, #168]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009eba:	f7f8 fbc9 	bl	8002650 <assert_failed>
 8009ebe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	e594      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x212>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8009ec4:	f240 1107 	movw	r1, #263	; 0x107
 8009ec8:	4826      	ldr	r0, [pc, #152]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009eca:	f7f8 fbc1 	bl	8002650 <assert_failed>
 8009ece:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	e59e      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8009ed4:	f240 1111 	movw	r1, #273	; 0x111
 8009ed8:	4822      	ldr	r0, [pc, #136]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009eda:	f7f8 fbb9 	bl	8002650 <assert_failed>
 8009ede:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	e5a8      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ee4:	4820      	ldr	r0, [pc, #128]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009ee6:	4922      	ldr	r1, [pc, #136]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8009ee8:	6882      	ldr	r2, [r0, #8]
 8009eea:	4019      	ands	r1, r3
 8009eec:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	6082      	str	r2, [r0, #8]
 8009ef4:	e557      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8009ef6:	219e      	movs	r1, #158	; 0x9e
 8009ef8:	481a      	ldr	r0, [pc, #104]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009efa:	f7f8 fba9 	bl	8002650 <assert_failed>
 8009efe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	e4a7      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8009f04:	218a      	movs	r1, #138	; 0x8a
 8009f06:	4817      	ldr	r0, [pc, #92]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009f08:	f7f8 fba2 	bl	8002650 <assert_failed>
 8009f0c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	e489      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8009f12:	21f3      	movs	r1, #243	; 0xf3
 8009f14:	4813      	ldr	r0, [pc, #76]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009f16:	f7f8 fb9b 	bl	8002650 <assert_failed>
 8009f1a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	e550      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8009f20:	f240 1175 	movw	r1, #373	; 0x175
 8009f24:	480f      	ldr	r0, [pc, #60]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009f26:	f7f8 fb93 	bl	8002650 <assert_failed>
 8009f2a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	e61a      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8009f30:	f240 117f 	movw	r1, #383	; 0x17f
 8009f34:	480b      	ldr	r0, [pc, #44]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009f36:	f7f8 fb8b 	bl	8002650 <assert_failed>
 8009f3a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	e621      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8009f40:	f240 11a1 	movw	r1, #417	; 0x1a1
 8009f44:	4807      	ldr	r0, [pc, #28]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009f46:	f7f8 fb83 	bl	8002650 <assert_failed>
 8009f4a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	e63f      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8009f52:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8009f56:	4803      	ldr	r0, [pc, #12]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009f58:	f7f8 fb7a 	bl	8002650 <assert_failed>
 8009f5c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	e646      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009f64:	08023438 	.word	0x08023438
 8009f68:	40023800 	.word	0x40023800
 8009f6c:	001c0300 	.word	0x001c0300
 8009f70:	0ffffcff 	.word	0x0ffffcff
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8009f74:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8009f78:	4886      	ldr	r0, [pc, #536]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009f7a:	f7f8 fb69 	bl	8002650 <assert_failed>
 8009f7e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	e645      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8009f86:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8009f8a:	4882      	ldr	r0, [pc, #520]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009f8c:	f7f8 fb60 	bl	8002650 <assert_failed>
 8009f90:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009f94:	e64d      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x456>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8009f96:	f240 1125 	movw	r1, #293	; 0x125
 8009f9a:	487e      	ldr	r0, [pc, #504]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009f9c:	f7f8 fb58 	bl	8002650 <assert_failed>
 8009fa0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	e567      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8009fa6:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8009faa:	487a      	ldr	r0, [pc, #488]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009fac:	f7f8 fb50 	bl	8002650 <assert_failed>
 8009fb0:	e70b      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8009fb2:	f240 112f 	movw	r1, #303	; 0x12f
 8009fb6:	4877      	ldr	r0, [pc, #476]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009fb8:	f7f8 fb4a 	bl	8002650 <assert_failed>
 8009fbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	e568      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8009fc2:	f240 1139 	movw	r1, #313	; 0x139
 8009fc6:	4873      	ldr	r0, [pc, #460]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009fc8:	f7f8 fb42 	bl	8002650 <assert_failed>
 8009fcc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	e56f      	b.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8009fd2:	f240 1197 	movw	r1, #407	; 0x197
 8009fd6:	486f      	ldr	r0, [pc, #444]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009fd8:	f7f8 fb3a 	bl	8002650 <assert_failed>
 8009fdc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	e5e7      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8009fe2:	f240 116b 	movw	r1, #363	; 0x16b
 8009fe6:	486b      	ldr	r0, [pc, #428]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009fe8:	f7f8 fb32 	bl	8002650 <assert_failed>
 8009fec:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	e5aa      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8009ff2:	f240 1143 	movw	r1, #323	; 0x143
 8009ff6:	4867      	ldr	r0, [pc, #412]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009ff8:	f7f8 fb2a 	bl	8002650 <assert_failed>
 8009ffc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	e566      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800a002:	f240 114d 	movw	r1, #333	; 0x14d
 800a006:	4863      	ldr	r0, [pc, #396]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a008:	f7f8 fb22 	bl	8002650 <assert_failed>
 800a00c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	e56d      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800a012:	f240 1157 	movw	r1, #343	; 0x157
 800a016:	485f      	ldr	r0, [pc, #380]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a018:	f7f8 fb1a 	bl	8002650 <assert_failed>
 800a01c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	e574      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800a022:	f240 1161 	movw	r1, #353	; 0x161
 800a026:	485b      	ldr	r0, [pc, #364]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a028:	f7f8 fb12 	bl	8002650 <assert_failed>
 800a02c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	e57b      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800a032:	68e3      	ldr	r3, [r4, #12]
 800a034:	3b02      	subs	r3, #2
 800a036:	2b0d      	cmp	r3, #13
 800a038:	d851      	bhi.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x902>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800a03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a03c:	1e5e      	subs	r6, r3, #1
 800a03e:	2e1f      	cmp	r6, #31
 800a040:	d845      	bhi.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a042:	4a55      	ldr	r2, [pc, #340]	; (800a198 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a044:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a046:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a04a:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a04e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a052:	68e1      	ldr	r1, [r4, #12]
 800a054:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800a058:	433b      	orrs	r3, r7
 800a05a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800a05e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a062:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a066:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800a06a:	f023 031f 	bic.w	r3, r3, #31
 800a06e:	4333      	orrs	r3, r6
 800a070:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	e6bd      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x618>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800a078:	68a7      	ldr	r7, [r4, #8]
 800a07a:	1eba      	subs	r2, r7, #2
 800a07c:	2a05      	cmp	r2, #5
 800a07e:	d84f      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x944>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a080:	4945      	ldr	r1, [pc, #276]	; (800a198 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a082:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a084:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a088:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a08c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800a090:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800a094:	4332      	orrs	r2, r6
 800a096:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800a09a:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800a09e:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 800a0a2:	e699      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0a4:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0a6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a0aa:	f7fa fc7f 	bl	80049ac <HAL_GetTick>
 800a0ae:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0b0:	e006      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0b2:	f7fa fc7b 	bl	80049ac <HAL_GetTick>
 800a0b6:	eba0 0009 	sub.w	r0, r0, r9
 800a0ba:	4540      	cmp	r0, r8
 800a0bc:	f63f ae5e 	bhi.w	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0c2:	079b      	lsls	r3, r3, #30
 800a0c4:	d5f5      	bpl.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 800a0c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a0c8:	f403 7040 	and.w	r0, r3, #768	; 0x300
 800a0cc:	e462      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800a0ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a0d2:	4830      	ldr	r0, [pc, #192]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a0d4:	f7f8 fabc 	bl	8002650 <assert_failed>
 800a0d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0da:	1e5e      	subs	r6, r3, #1
 800a0dc:	e7b1      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x866>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800a0de:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800a0e2:	482c      	ldr	r0, [pc, #176]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a0e4:	f7f8 fab4 	bl	8002650 <assert_failed>
 800a0e8:	e7a7      	b.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x85e>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800a0ea:	f240 2107 	movw	r1, #519	; 0x207
 800a0ee:	4829      	ldr	r0, [pc, #164]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a0f0:	f7f8 faae 	bl	8002650 <assert_failed>
 800a0f4:	6927      	ldr	r7, [r4, #16]
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	e682      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x624>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800a0fa:	f44f 7106 	mov.w	r1, #536	; 0x218
 800a0fe:	4825      	ldr	r0, [pc, #148]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a100:	f7f8 faa6 	bl	8002650 <assert_failed>
 800a104:	68e2      	ldr	r2, [r4, #12]
 800a106:	e69c      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800a108:	f240 2117 	movw	r1, #535	; 0x217
 800a10c:	4821      	ldr	r0, [pc, #132]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a10e:	f7f8 fa9f 	bl	8002650 <assert_failed>
 800a112:	e691      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800a114:	f240 2116 	movw	r1, #534	; 0x216
 800a118:	481e      	ldr	r0, [pc, #120]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a11a:	f7f8 fa99 	bl	8002650 <assert_failed>
 800a11e:	e686      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x652>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800a120:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800a124:	481b      	ldr	r0, [pc, #108]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a126:	f7f8 fa93 	bl	8002650 <assert_failed>
 800a12a:	68a7      	ldr	r7, [r4, #8]
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	e7a7      	b.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800a130:	6a26      	ldr	r6, [r4, #32]
 800a132:	2e03      	cmp	r6, #3
 800a134:	d826      	bhi.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a136:	4918      	ldr	r1, [pc, #96]	; (800a198 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a138:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a13a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a13e:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a142:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800a146:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800a14a:	4302      	orrs	r2, r0
 800a14c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800a150:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800a154:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800a158:	e5d5      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800a15a:	f240 214f 	movw	r1, #591	; 0x24f
 800a15e:	480d      	ldr	r0, [pc, #52]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a160:	f7f8 fa76 	bl	8002650 <assert_failed>
 800a164:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a166:	1e59      	subs	r1, r3, #1
 800a168:	e5ab      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800a16a:	f240 214d 	movw	r1, #589	; 0x24d
 800a16e:	4809      	ldr	r0, [pc, #36]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a170:	f7f8 fa6e 	bl	8002650 <assert_failed>
 800a174:	e5a0      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800a176:	4807      	ldr	r0, [pc, #28]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a178:	f240 2172 	movw	r1, #626	; 0x272
 800a17c:	f7f8 fa68 	bl	8002650 <assert_failed>
 800a180:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a182:	e5d0      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800a184:	f240 2162 	movw	r1, #610	; 0x262
 800a188:	4802      	ldr	r0, [pc, #8]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a18a:	f7f8 fa61 	bl	8002650 <assert_failed>
 800a18e:	6a26      	ldr	r6, [r4, #32]
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	e7d0      	b.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800a194:	08023438 	.word	0x08023438
 800a198:	40023800 	.word	0x40023800

0800a19c <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a19c:	b1f8      	cbz	r0, 800a1de <HAL_RNG_Init+0x42>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800a19e:	6802      	ldr	r2, [r0, #0]
{
 800a1a0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800a1a2:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <HAL_RNG_Init+0x48>)
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d003      	beq.n	800a1b2 <HAL_RNG_Init+0x16>
 800a1aa:	21a3      	movs	r1, #163	; 0xa3
 800a1ac:	480e      	ldr	r0, [pc, #56]	; (800a1e8 <HAL_RNG_Init+0x4c>)
 800a1ae:	f7f8 fa4f 	bl	8002650 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a1b2:	7963      	ldrb	r3, [r4, #5]
 800a1b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a1b8:	b163      	cbz	r3, 800a1d4 <HAL_RNG_Init+0x38>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a1ba:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800a1bc:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a1be:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800a1c0:	2501      	movs	r5, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800a1c2:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800a1c4:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800a1c6:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800a1c8:	f043 0304 	orr.w	r3, r3, #4
 800a1cc:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800a1ce:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a1d0:	60a2      	str	r2, [r4, #8]
}
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800a1d4:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f7f9 fa24 	bl	8003624 <HAL_RNG_MspInit>
 800a1dc:	e7ed      	b.n	800a1ba <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800a1de:	2001      	movs	r0, #1
}
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	50060800 	.word	0x50060800
 800a1e8:	08023474 	.word	0x08023474

0800a1ec <SPI_WaitFifoStateUntilTimeout.part.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800a1ec:	4603      	mov	r3, r0
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ee:	e9d0 2000 	ldrd	r2, r0, [r0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1f2:	6851      	ldr	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1f4:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1f8:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800a1fc:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1fe:	d013      	beq.n	800a228 <SPI_WaitFifoStateUntilTimeout.part.1+0x3c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a200:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a202:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800a206:	d107      	bne.n	800a218 <SPI_WaitFifoStateUntilTimeout.part.1+0x2c>
        {
          SPI_RESET_CRC(hspi);
 800a208:	6811      	ldr	r1, [r2, #0]
 800a20a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a20e:	6011      	str	r1, [r2, #0]
 800a210:	6811      	ldr	r1, [r2, #0]
 800a212:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800a216:	6011      	str	r1, [r2, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a218:	2101      	movs	r1, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a21a:	2200      	movs	r2, #0
      }
    }
  }

  return HAL_OK;
}
 800a21c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800a21e:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800a222:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800a226:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a228:	6899      	ldr	r1, [r3, #8]
 800a22a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a22e:	d002      	beq.n	800a236 <SPI_WaitFifoStateUntilTimeout.part.1+0x4a>
 800a230:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a234:	d1e4      	bne.n	800a200 <SPI_WaitFifoStateUntilTimeout.part.1+0x14>
          __HAL_SPI_DISABLE(hspi);
 800a236:	6811      	ldr	r1, [r2, #0]
 800a238:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a23c:	6011      	str	r1, [r2, #0]
 800a23e:	e7df      	b.n	800a200 <SPI_WaitFifoStateUntilTimeout.part.1+0x14>

0800a240 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	4605      	mov	r5, r0
 800a244:	460c      	mov	r4, r1
 800a246:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	e001      	b.n	800a250 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x10>
    if (Timeout != HAL_MAX_DELAY)
 800a24c:	1c62      	adds	r2, r4, #1
 800a24e:	d104      	bne.n	800a25a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a250:	6898      	ldr	r0, [r3, #8]
 800a252:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a256:	d1f9      	bne.n	800a24c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
}
 800a258:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a25a:	f7fa fba7 	bl	80049ac <HAL_GetTick>
 800a25e:	1b80      	subs	r0, r0, r6
 800a260:	4284      	cmp	r4, r0
 800a262:	d8f1      	bhi.n	800a248 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x8>
 800a264:	4628      	mov	r0, r5
}
 800a266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a26a:	f7ff bfbf 	b.w	800a1ec <SPI_WaitFifoStateUntilTimeout.part.1>
 800a26e:	bf00      	nop

0800a270 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800a270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a272:	4606      	mov	r6, r0
 800a274:	460c      	mov	r4, r1
 800a276:	4615      	mov	r5, r2
 800a278:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 800a27a:	6831      	ldr	r1, [r6, #0]
 800a27c:	e005      	b.n	800a28a <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a27e:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800a282:	d100      	bne.n	800a286 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a284:	7b0a      	ldrb	r2, [r1, #12]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a286:	1c6b      	adds	r3, r5, #1
 800a288:	d103      	bne.n	800a292 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x22>
  while ((hspi->Instance->SR & Fifo) != State)
 800a28a:	6888      	ldr	r0, [r1, #8]
 800a28c:	4020      	ands	r0, r4
 800a28e:	d1f6      	bne.n	800a27e <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
      }
    }
  }

  return HAL_OK;
}
 800a290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a292:	f7fa fb8b 	bl	80049ac <HAL_GetTick>
 800a296:	1bc0      	subs	r0, r0, r7
 800a298:	4285      	cmp	r5, r0
 800a29a:	d8ee      	bhi.n	800a27a <SPI_WaitFifoStateUntilTimeout.constprop.10+0xa>
 800a29c:	4630      	mov	r0, r6
}
 800a29e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2a2:	f7ff bfa3 	b.w	800a1ec <SPI_WaitFifoStateUntilTimeout.part.1>
 800a2a6:	bf00      	nop

0800a2a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a2a8:	b570      	push	{r4, r5, r6, lr}
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a2b4:	462a      	mov	r2, r5
{
 800a2b6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2b8:	f7ff ffda 	bl	800a270 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800a2bc:	b970      	cbnz	r0, 800a2dc <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2be:	4632      	mov	r2, r6
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f7ff ffbc 	bl	800a240 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 800a2c8:	b940      	cbnz	r0, 800a2dc <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2ca:	4633      	mov	r3, r6
 800a2cc:	462a      	mov	r2, r5
 800a2ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f7ff ffcc 	bl	800a270 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800a2d8:	b900      	cbnz	r0, 800a2dc <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800a2da:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2de:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2e0:	f043 0320 	orr.w	r3, r3, #32
 800a2e4:	6623      	str	r3, [r4, #96]	; 0x60
}
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}

0800a2e8 <HAL_SPI_Init>:
  if (hspi == NULL)
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	f000 80f9 	beq.w	800a4e0 <HAL_SPI_Init+0x1f8>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a2ee:	6802      	ldr	r2, [r0, #0]
 800a2f0:	4b94      	ldr	r3, [pc, #592]	; (800a544 <HAL_SPI_Init+0x25c>)
 800a2f2:	4995      	ldr	r1, [pc, #596]	; (800a548 <HAL_SPI_Init+0x260>)
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	bf18      	it	ne
 800a2f8:	428a      	cmpne	r2, r1
 800a2fa:	f501 318c 	add.w	r1, r1, #71680	; 0x11800
 800a2fe:	bf14      	ite	ne
 800a300:	2301      	movne	r3, #1
 800a302:	2300      	moveq	r3, #0
{
 800a304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a308:	4d90      	ldr	r5, [pc, #576]	; (800a54c <HAL_SPI_Init+0x264>)
 800a30a:	4604      	mov	r4, r0
 800a30c:	4890      	ldr	r0, [pc, #576]	; (800a550 <HAL_SPI_Init+0x268>)
 800a30e:	42aa      	cmp	r2, r5
 800a310:	bf0c      	ite	eq
 800a312:	2300      	moveq	r3, #0
 800a314:	f003 0301 	andne.w	r3, r3, #1
 800a318:	4282      	cmp	r2, r0
 800a31a:	bf0c      	ite	eq
 800a31c:	2300      	moveq	r3, #0
 800a31e:	f003 0301 	andne.w	r3, r3, #1
 800a322:	428a      	cmp	r2, r1
 800a324:	bf0c      	ite	eq
 800a326:	2300      	moveq	r3, #0
 800a328:	f003 0301 	andne.w	r3, r3, #1
 800a32c:	b11b      	cbz	r3, 800a336 <HAL_SPI_Init+0x4e>
 800a32e:	4b89      	ldr	r3, [pc, #548]	; (800a554 <HAL_SPI_Init+0x26c>)
 800a330:	429a      	cmp	r2, r3
 800a332:	f040 80ee 	bne.w	800a512 <HAL_SPI_Init+0x22a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a336:	6863      	ldr	r3, [r4, #4]
 800a338:	b13b      	cbz	r3, 800a34a <HAL_SPI_Init+0x62>
 800a33a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a33e:	d004      	beq.n	800a34a <HAL_SPI_Init+0x62>
 800a340:	f240 1145 	movw	r1, #325	; 0x145
 800a344:	4884      	ldr	r0, [pc, #528]	; (800a558 <HAL_SPI_Init+0x270>)
 800a346:	f7f8 f983 	bl	8002650 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a34a:	68a3      	ldr	r3, [r4, #8]
 800a34c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800a350:	d003      	beq.n	800a35a <HAL_SPI_Init+0x72>
 800a352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a356:	f040 80c5 	bne.w	800a4e4 <HAL_SPI_Init+0x1fc>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a35a:	68e2      	ldr	r2, [r4, #12]
 800a35c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800a360:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800a364:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800a368:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a36c:	bf18      	it	ne
 800a36e:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800a372:	bf14      	ite	ne
 800a374:	2301      	movne	r3, #1
 800a376:	2300      	moveq	r3, #0
 800a378:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800a37c:	bf0c      	ite	eq
 800a37e:	2300      	moveq	r3, #0
 800a380:	f003 0301 	andne.w	r3, r3, #1
 800a384:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a388:	bf0c      	ite	eq
 800a38a:	2300      	moveq	r3, #0
 800a38c:	f003 0301 	andne.w	r3, r3, #1
 800a390:	b12b      	cbz	r3, 800a39e <HAL_SPI_Init+0xb6>
 800a392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a396:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a39a:	f040 80cc 	bne.w	800a536 <HAL_SPI_Init+0x24e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a39e:	69a3      	ldr	r3, [r4, #24]
 800a3a0:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a3a4:	d003      	beq.n	800a3ae <HAL_SPI_Init+0xc6>
 800a3a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3aa:	f040 80a1 	bne.w	800a4f0 <HAL_SPI_Init+0x208>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a3ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3b0:	f033 0308 	bics.w	r3, r3, #8
 800a3b4:	d17f      	bne.n	800a4b6 <HAL_SPI_Init+0x1ce>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a3b6:	69e3      	ldr	r3, [r4, #28]
 800a3b8:	f023 0318 	bic.w	r3, r3, #24
 800a3bc:	2b20      	cmp	r3, #32
 800a3be:	d002      	beq.n	800a3c6 <HAL_SPI_Init+0xde>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f040 80b2 	bne.w	800a52a <HAL_SPI_Init+0x242>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a3c6:	6a23      	ldr	r3, [r4, #32]
 800a3c8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a3cc:	d169      	bne.n	800a4a2 <HAL_SPI_Init+0x1ba>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a3ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3d0:	f033 0210 	bics.w	r2, r3, #16
 800a3d4:	d17b      	bne.n	800a4ce <HAL_SPI_Init+0x1e6>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3d6:	b943      	cbnz	r3, 800a3ea <HAL_SPI_Init+0x102>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	f033 0302 	bics.w	r3, r3, #2
 800a3de:	f040 809e 	bne.w	800a51e <HAL_SPI_Init+0x236>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a3e2:	6963      	ldr	r3, [r4, #20]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	f200 808e 	bhi.w	800a506 <HAL_SPI_Init+0x21e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3ea:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3ec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3f0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d04d      	beq.n	800a496 <HAL_SPI_Init+0x1ae>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3fa:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a3fc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800a3fe:	6822      	ldr	r2, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a400:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800a404:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a408:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800a40c:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a40e:	bf94      	ite	ls
 800a410:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 800a414:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 800a416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a41a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800a41e:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a420:	d135      	bne.n	800a48e <HAL_SPI_Init+0x1a6>
 800a422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a424:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a426:	b92b      	cbnz	r3, 800a434 <HAL_SPI_Init+0x14c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a428:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a42c:	bf8c      	ite	hi
 800a42e:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a430:	2301      	movls	r3, #1
 800a432:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a434:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a436:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a43a:	6863      	ldr	r3, [r4, #4]
 800a43c:	6920      	ldr	r0, [r4, #16]
 800a43e:	430b      	orrs	r3, r1
 800a440:	6961      	ldr	r1, [r4, #20]
 800a442:	4303      	orrs	r3, r0
 800a444:	430b      	orrs	r3, r1
 800a446:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800a44a:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a44c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a44e:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a452:	f400 7e00 	and.w	lr, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a456:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a458:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a45a:	f00c 0c04 	and.w	ip, ip, #4
  return HAL_OK;
 800a45e:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a460:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a464:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a466:	ea43 030e 	orr.w	r3, r3, lr
  hspi->State     = HAL_SPI_STATE_READY;
 800a46a:	f04f 0e01 	mov.w	lr, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a46e:	ea47 070c 	orr.w	r7, r7, ip
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a472:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a474:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a476:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a478:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a47a:	69d3      	ldr	r3, [r2, #28]
 800a47c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a480:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a482:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a486:	f884 e05d 	strb.w	lr, [r4, #93]	; 0x5d
}
 800a48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a48e:	2300      	movs	r3, #0
 800a490:	461e      	mov	r6, r3
 800a492:	62a3      	str	r3, [r4, #40]	; 0x28
 800a494:	e7c6      	b.n	800a424 <HAL_SPI_Init+0x13c>
    hspi->Lock = HAL_UNLOCKED;
 800a496:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800a49a:	4620      	mov	r0, r4
 800a49c:	f7f9 f8d8 	bl	8003650 <HAL_SPI_MspInit>
 800a4a0:	e7ab      	b.n	800a3fa <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a4a2:	f240 114b 	movw	r1, #331	; 0x14b
 800a4a6:	482c      	ldr	r0, [pc, #176]	; (800a558 <HAL_SPI_Init+0x270>)
 800a4a8:	f7f8 f8d2 	bl	8002650 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a4ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4ae:	f033 0210 	bics.w	r2, r3, #16
 800a4b2:	d090      	beq.n	800a3d6 <HAL_SPI_Init+0xee>
 800a4b4:	e00b      	b.n	800a4ce <HAL_SPI_Init+0x1e6>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a4b6:	f240 1149 	movw	r1, #329	; 0x149
 800a4ba:	4827      	ldr	r0, [pc, #156]	; (800a558 <HAL_SPI_Init+0x270>)
 800a4bc:	f7f8 f8c8 	bl	8002650 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a4c0:	69e3      	ldr	r3, [r4, #28]
 800a4c2:	f023 0318 	bic.w	r3, r3, #24
 800a4c6:	2b20      	cmp	r3, #32
 800a4c8:	f47f af7a 	bne.w	800a3c0 <HAL_SPI_Init+0xd8>
 800a4cc:	e77b      	b.n	800a3c6 <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a4ce:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800a4d2:	4821      	ldr	r0, [pc, #132]	; (800a558 <HAL_SPI_Init+0x270>)
 800a4d4:	f7f8 f8bc 	bl	8002650 <assert_failed>
 800a4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d185      	bne.n	800a3ea <HAL_SPI_Init+0x102>
 800a4de:	e77b      	b.n	800a3d8 <HAL_SPI_Init+0xf0>
    return HAL_ERROR;
 800a4e0:	2001      	movs	r0, #1
}
 800a4e2:	4770      	bx	lr
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a4e4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800a4e8:	481b      	ldr	r0, [pc, #108]	; (800a558 <HAL_SPI_Init+0x270>)
 800a4ea:	f7f8 f8b1 	bl	8002650 <assert_failed>
 800a4ee:	e734      	b.n	800a35a <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a4f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800a4f4:	4818      	ldr	r0, [pc, #96]	; (800a558 <HAL_SPI_Init+0x270>)
 800a4f6:	f7f8 f8ab 	bl	8002650 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a4fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4fc:	f033 0308 	bics.w	r3, r3, #8
 800a500:	f43f af59 	beq.w	800a3b6 <HAL_SPI_Init+0xce>
 800a504:	e7d7      	b.n	800a4b6 <HAL_SPI_Init+0x1ce>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a506:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800a50a:	4813      	ldr	r0, [pc, #76]	; (800a558 <HAL_SPI_Init+0x270>)
 800a50c:	f7f8 f8a0 	bl	8002650 <assert_failed>
 800a510:	e76b      	b.n	800a3ea <HAL_SPI_Init+0x102>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a512:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a516:	4810      	ldr	r0, [pc, #64]	; (800a558 <HAL_SPI_Init+0x270>)
 800a518:	f7f8 f89a 	bl	8002650 <assert_failed>
 800a51c:	e70b      	b.n	800a336 <HAL_SPI_Init+0x4e>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a51e:	f240 114f 	movw	r1, #335	; 0x14f
 800a522:	480d      	ldr	r0, [pc, #52]	; (800a558 <HAL_SPI_Init+0x270>)
 800a524:	f7f8 f894 	bl	8002650 <assert_failed>
 800a528:	e75b      	b.n	800a3e2 <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a52a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800a52e:	480a      	ldr	r0, [pc, #40]	; (800a558 <HAL_SPI_Init+0x270>)
 800a530:	f7f8 f88e 	bl	8002650 <assert_failed>
 800a534:	e747      	b.n	800a3c6 <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a536:	f240 1147 	movw	r1, #327	; 0x147
 800a53a:	4807      	ldr	r0, [pc, #28]	; (800a558 <HAL_SPI_Init+0x270>)
 800a53c:	f7f8 f888 	bl	8002650 <assert_failed>
 800a540:	e72d      	b.n	800a39e <HAL_SPI_Init+0xb6>
 800a542:	bf00      	nop
 800a544:	40013000 	.word	0x40013000
 800a548:	40003800 	.word	0x40003800
 800a54c:	40003c00 	.word	0x40003c00
 800a550:	40013400 	.word	0x40013400
 800a554:	40015400 	.word	0x40015400
 800a558:	080234ac 	.word	0x080234ac

0800a55c <HAL_SPI_Transmit>:
{
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a562:	6883      	ldr	r3, [r0, #8]
{
 800a564:	b082      	sub	sp, #8
 800a566:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a568:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800a56c:	4688      	mov	r8, r1
 800a56e:	4617      	mov	r7, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a570:	f040 8081 	bne.w	800a676 <HAL_SPI_Transmit+0x11a>
  __HAL_LOCK(hspi);
 800a574:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800a578:	2b01      	cmp	r3, #1
 800a57a:	f000 8086 	beq.w	800a68a <HAL_SPI_Transmit+0x12e>
 800a57e:	2301      	movs	r3, #1
 800a580:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800a584:	f7fa fa12 	bl	80049ac <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a588:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800a58c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d009      	beq.n	800a5a6 <HAL_SPI_Transmit+0x4a>
    errorcode = HAL_BUSY;
 800a592:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800a594:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800a596:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800a598:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a59c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800a5a0:	b002      	add	sp, #8
 800a5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800a5a6:	f1b8 0f00 	cmp.w	r8, #0
 800a5aa:	d072      	beq.n	800a692 <HAL_SPI_Transmit+0x136>
 800a5ac:	fab7 f387 	clz	r3, r7
 800a5b0:	095b      	lsrs	r3, r3, #5
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d16d      	bne.n	800a692 <HAL_SPI_Transmit+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5b6:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5b8:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a5ba:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5c0:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = 0U;
 800a5c4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5c8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a5ca:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a5ce:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a5d0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a5d2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a5d6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 800a5da:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5dc:	d103      	bne.n	800a5e6 <HAL_SPI_Transmit+0x8a>
    SPI_1LINE_TX(hspi);
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5e4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	0652      	lsls	r2, r2, #25
 800a5ea:	d403      	bmi.n	800a5f4 <HAL_SPI_Transmit+0x98>
    __HAL_SPI_ENABLE(hspi);
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	f1a7 0701 	sub.w	r7, r7, #1
 800a5f8:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5fa:	68e2      	ldr	r2, [r4, #12]
 800a5fc:	fab7 f787 	clz	r7, r7
 800a600:	097f      	lsrs	r7, r7, #5
 800a602:	2900      	cmp	r1, #0
 800a604:	bf08      	it	eq
 800a606:	2701      	moveq	r7, #1
 800a608:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800a60c:	d94c      	bls.n	800a6a8 <HAL_SPI_Transmit+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a60e:	b147      	cbz	r7, 800a622 <HAL_SPI_Transmit+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a610:	4642      	mov	r2, r8
 800a612:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a616:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 800a618:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a61a:	63a2      	str	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800a61c:	3b01      	subs	r3, #1
 800a61e:	b29b      	uxth	r3, r3
 800a620:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a622:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a624:	b29b      	uxth	r3, r3
 800a626:	b183      	cbz	r3, 800a64a <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	0790      	lsls	r0, r2, #30
 800a62e:	d532      	bpl.n	800a696 <HAL_SPI_Transmit+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a630:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a632:	f831 2b02 	ldrh.w	r2, [r1], #2
 800a636:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800a638:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a63a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29b      	uxth	r3, r3
 800a640:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a642:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a644:	b29b      	uxth	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1ee      	bne.n	800a628 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a64a:	4632      	mov	r2, r6
 800a64c:	4629      	mov	r1, r5
 800a64e:	4620      	mov	r0, r4
 800a650:	f7ff fe2a 	bl	800a2a8 <SPI_EndRxTxTransaction>
 800a654:	b108      	cbz	r0, 800a65a <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a656:	2320      	movs	r3, #32
 800a658:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	b933      	cbnz	r3, 800a66c <HAL_SPI_Transmit+0x110>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a65e:	6822      	ldr	r2, [r4, #0]
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	68d3      	ldr	r3, [r2, #12]
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	6893      	ldr	r3, [r2, #8]
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a66c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800a66e:	3000      	adds	r0, #0
 800a670:	bf18      	it	ne
 800a672:	2001      	movne	r0, #1
error:
 800a674:	e78e      	b.n	800a594 <HAL_SPI_Transmit+0x38>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a676:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800a67a:	4827      	ldr	r0, [pc, #156]	; (800a718 <HAL_SPI_Transmit+0x1bc>)
 800a67c:	f7f7 ffe8 	bl	8002650 <assert_failed>
  __HAL_LOCK(hspi);
 800a680:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800a684:	2b01      	cmp	r3, #1
 800a686:	f47f af7a 	bne.w	800a57e <HAL_SPI_Transmit+0x22>
 800a68a:	2002      	movs	r0, #2
}
 800a68c:	b002      	add	sp, #8
 800a68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 800a692:	2001      	movs	r0, #1
 800a694:	e77e      	b.n	800a594 <HAL_SPI_Transmit+0x38>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a696:	f7fa f989 	bl	80049ac <HAL_GetTick>
 800a69a:	1b80      	subs	r0, r0, r6
 800a69c:	42a8      	cmp	r0, r5
 800a69e:	d3c0      	bcc.n	800a622 <HAL_SPI_Transmit+0xc6>
 800a6a0:	1c69      	adds	r1, r5, #1
 800a6a2:	d0be      	beq.n	800a622 <HAL_SPI_Transmit+0xc6>
          errorcode = HAL_TIMEOUT;
 800a6a4:	2003      	movs	r0, #3
 800a6a6:	e775      	b.n	800a594 <HAL_SPI_Transmit+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6a8:	b16f      	cbz	r7, 800a6c6 <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 800a6aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a6ac:	2a01      	cmp	r2, #1
 800a6ae:	d92f      	bls.n	800a710 <HAL_SPI_Transmit+0x1b4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6b0:	4642      	mov	r2, r8
 800a6b2:	e015      	b.n	800a6e0 <HAL_SPI_Transmit+0x184>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6b4:	780a      	ldrb	r2, [r1, #0]
 800a6b6:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800a6b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800a6ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800a6bc:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800a6be:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800a6c0:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800a6c2:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800a6c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a6c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0bd      	beq.n	800a64a <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	0792      	lsls	r2, r2, #30
 800a6d4:	d514      	bpl.n	800a700 <HAL_SPI_Transmit+0x1a4>
        if (hspi->TxXferCount > 1U)
 800a6d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a6d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a6da:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6dc:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 800a6de:	d9e9      	bls.n	800a6b4 <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6e0:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a6e4:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 800a6e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6e8:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a6ea:	3b02      	subs	r3, #2
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a6f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d0a8      	beq.n	800a64a <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	0792      	lsls	r2, r2, #30
 800a6fe:	d4ea      	bmi.n	800a6d6 <HAL_SPI_Transmit+0x17a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a700:	f7fa f954 	bl	80049ac <HAL_GetTick>
 800a704:	1b80      	subs	r0, r0, r6
 800a706:	42a8      	cmp	r0, r5
 800a708:	d3dd      	bcc.n	800a6c6 <HAL_SPI_Transmit+0x16a>
 800a70a:	1c6b      	adds	r3, r5, #1
 800a70c:	d0db      	beq.n	800a6c6 <HAL_SPI_Transmit+0x16a>
 800a70e:	e7c9      	b.n	800a6a4 <HAL_SPI_Transmit+0x148>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a710:	f898 2000 	ldrb.w	r2, [r8]
 800a714:	e7cf      	b.n	800a6b6 <HAL_SPI_Transmit+0x15a>
 800a716:	bf00      	nop
 800a718:	080234ac 	.word	0x080234ac

0800a71c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a71c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a71e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a720:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a722:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 800a726:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a728:	4a0f      	ldr	r2, [pc, #60]	; (800a768 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a72a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800a72c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a72e:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 800a730:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 800a734:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a736:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a73a:	4d0c      	ldr	r5, [pc, #48]	; (800a76c <TIM_OC5_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a73c:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a73e:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 800a740:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a744:	d00a      	beq.n	800a75c <TIM_OC5_SetConfig+0x40>
 800a746:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a74a:	42a8      	cmp	r0, r5
 800a74c:	d006      	beq.n	800a75c <TIM_OC5_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a74e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800a750:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800a752:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800a754:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a756:	6203      	str	r3, [r0, #32]
}
 800a758:	bcf0      	pop	{r4, r5, r6, r7}
 800a75a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a75c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a760:	694d      	ldr	r5, [r1, #20]
 800a762:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800a766:	e7f2      	b.n	800a74e <TIM_OC5_SetConfig+0x32>
 800a768:	fffeff8f 	.word	0xfffeff8f
 800a76c:	40010000 	.word	0x40010000

0800a770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a770:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a772:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a774:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a776:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a77a:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a77c:	4a0f      	ldr	r2, [pc, #60]	; (800a7bc <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a77e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800a780:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a782:	6844      	ldr	r4, [r0, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a784:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 800a788:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a78a:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a78e:	4d0c      	ldr	r5, [pc, #48]	; (800a7c0 <TIM_OC6_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a790:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a792:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a794:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a798:	d00a      	beq.n	800a7b0 <TIM_OC6_SetConfig+0x40>
 800a79a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a79e:	42a8      	cmp	r0, r5
 800a7a0:	d006      	beq.n	800a7b0 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a7a2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800a7a4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800a7a6:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800a7a8:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7aa:	6203      	str	r3, [r0, #32]
}
 800a7ac:	bcf0      	pop	{r4, r5, r6, r7}
 800a7ae:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a7b0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a7b4:	694d      	ldr	r5, [r1, #20]
 800a7b6:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800a7ba:	e7f2      	b.n	800a7a2 <TIM_OC6_SetConfig+0x32>
 800a7bc:	feff8fff 	.word	0xfeff8fff
 800a7c0:	40010000 	.word	0x40010000

0800a7c4 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7c4:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7c6:	4b2c      	ldr	r3, [pc, #176]	; (800a878 <TIM_OC1_SetConfig+0xb4>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7c8:	f022 0201 	bic.w	r2, r2, #1
{
 800a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	460e      	mov	r6, r1
  tmpccer |= OC_Config->OCPolarity;
 800a7d2:	6889      	ldr	r1, [r1, #8]
{
 800a7d4:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800a7d6:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7d8:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800a7da:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a7dc:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a7e0:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800a7e2:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7e6:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7e8:	4a24      	ldr	r2, [pc, #144]	; (800a87c <TIM_OC1_SetConfig+0xb8>)
  tmpccer |= OC_Config->OCPolarity;
 800a7ea:	430d      	orrs	r5, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7ec:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800a7ee:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7f2:	d00a      	beq.n	800a80a <TIM_OC1_SetConfig+0x46>
 800a7f4:	4b22      	ldr	r3, [pc, #136]	; (800a880 <TIM_OC1_SetConfig+0xbc>)
 800a7f6:	4298      	cmp	r0, r3
 800a7f8:	d007      	beq.n	800a80a <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800a7fa:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800a7fc:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a800:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800a802:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800a804:	6225      	str	r5, [r4, #32]
}
 800a806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a80a:	68f2      	ldr	r2, [r6, #12]
 800a80c:	f032 0308 	bics.w	r3, r2, #8
 800a810:	d12a      	bne.n	800a868 <TIM_OC1_SetConfig+0xa4>
    tmpccer &= ~TIM_CCER_CC1NP;
 800a812:	f025 0508 	bic.w	r5, r5, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a816:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800a818:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a81a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800a81e:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a822:	d117      	bne.n	800a854 <TIM_OC1_SetConfig+0x90>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a824:	6973      	ldr	r3, [r6, #20]
 800a826:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a82a:	d106      	bne.n	800a83a <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a82c:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800a830:	69b1      	ldr	r1, [r6, #24]
 800a832:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800a834:	ea42 0803 	orr.w	r8, r2, r3
 800a838:	e7df      	b.n	800a7fa <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a83a:	f241 7184 	movw	r1, #6020	; 0x1784
 800a83e:	4811      	ldr	r0, [pc, #68]	; (800a884 <TIM_OC1_SetConfig+0xc0>)
 800a840:	f7f7 ff06 	bl	8002650 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a844:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800a848:	69b1      	ldr	r1, [r6, #24]
 800a84a:	6973      	ldr	r3, [r6, #20]
 800a84c:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800a84e:	ea42 0803 	orr.w	r8, r2, r3
 800a852:	e7d2      	b.n	800a7fa <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a854:	f241 7183 	movw	r1, #6019	; 0x1783
 800a858:	480a      	ldr	r0, [pc, #40]	; (800a884 <TIM_OC1_SetConfig+0xc0>)
 800a85a:	f7f7 fef9 	bl	8002650 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a85e:	6973      	ldr	r3, [r6, #20]
 800a860:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a864:	d0e2      	beq.n	800a82c <TIM_OC1_SetConfig+0x68>
 800a866:	e7e8      	b.n	800a83a <TIM_OC1_SetConfig+0x76>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a868:	f241 7176 	movw	r1, #6006	; 0x1776
 800a86c:	4805      	ldr	r0, [pc, #20]	; (800a884 <TIM_OC1_SetConfig+0xc0>)
 800a86e:	f7f7 feef 	bl	8002650 <assert_failed>
 800a872:	68f2      	ldr	r2, [r6, #12]
 800a874:	e7cd      	b.n	800a812 <TIM_OC1_SetConfig+0x4e>
 800a876:	bf00      	nop
 800a878:	fffeff8c 	.word	0xfffeff8c
 800a87c:	40010000 	.word	0x40010000
 800a880:	40010400 	.word	0x40010400
 800a884:	080234e4 	.word	0x080234e4

0800a888 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a888:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a88a:	4b2e      	ldr	r3, [pc, #184]	; (800a944 <TIM_OC3_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a88c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
{
 800a890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a894:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a896:	6889      	ldr	r1, [r1, #8]
{
 800a898:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800a89a:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a89c:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800a89e:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a8a0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800a8a4:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800a8a6:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8aa:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8ac:	4a26      	ldr	r2, [pc, #152]	; (800a948 <TIM_OC3_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8ae:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8b2:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800a8b4:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8b8:	d00a      	beq.n	800a8d0 <TIM_OC3_SetConfig+0x48>
 800a8ba:	4b24      	ldr	r3, [pc, #144]	; (800a94c <TIM_OC3_SetConfig+0xc4>)
 800a8bc:	4298      	cmp	r0, r3
 800a8be:	d007      	beq.n	800a8d0 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800a8c0:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800a8c2:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800a8c6:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800a8c8:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800a8ca:	6225      	str	r5, [r4, #32]
}
 800a8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a8d0:	68f2      	ldr	r2, [r6, #12]
 800a8d2:	f032 0308 	bics.w	r3, r2, #8
 800a8d6:	d12d      	bne.n	800a934 <TIM_OC3_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8d8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a8dc:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8de:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a8e2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8e6:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a8ea:	d119      	bne.n	800a920 <TIM_OC3_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a8ec:	6973      	ldr	r3, [r6, #20]
 800a8ee:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a8f2:	d107      	bne.n	800a904 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8f4:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8f8:	69b1      	ldr	r1, [r6, #24]
 800a8fa:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800a8fe:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800a902:	e7dd      	b.n	800a8c0 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a904:	f641 011a 	movw	r1, #6170	; 0x181a
 800a908:	4811      	ldr	r0, [pc, #68]	; (800a950 <TIM_OC3_SetConfig+0xc8>)
 800a90a:	f7f7 fea1 	bl	8002650 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a90e:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a912:	69b1      	ldr	r1, [r6, #24]
 800a914:	6973      	ldr	r3, [r6, #20]
 800a916:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800a91a:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800a91e:	e7cf      	b.n	800a8c0 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a920:	f641 0119 	movw	r1, #6169	; 0x1819
 800a924:	480a      	ldr	r0, [pc, #40]	; (800a950 <TIM_OC3_SetConfig+0xc8>)
 800a926:	f7f7 fe93 	bl	8002650 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a92a:	6973      	ldr	r3, [r6, #20]
 800a92c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a930:	d0e0      	beq.n	800a8f4 <TIM_OC3_SetConfig+0x6c>
 800a932:	e7e7      	b.n	800a904 <TIM_OC3_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a934:	f641 010c 	movw	r1, #6156	; 0x180c
 800a938:	4805      	ldr	r0, [pc, #20]	; (800a950 <TIM_OC3_SetConfig+0xc8>)
 800a93a:	f7f7 fe89 	bl	8002650 <assert_failed>
 800a93e:	68f2      	ldr	r2, [r6, #12]
 800a940:	e7ca      	b.n	800a8d8 <TIM_OC3_SetConfig+0x50>
 800a942:	bf00      	nop
 800a944:	fffeff8c 	.word	0xfffeff8c
 800a948:	40010000 	.word	0x40010000
 800a94c:	40010400 	.word	0x40010400
 800a950:	080234e4 	.word	0x080234e4

0800a954 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a954:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a956:	4b1b      	ldr	r3, [pc, #108]	; (800a9c4 <TIM_OC4_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a958:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
{
 800a95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a95e:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a960:	6889      	ldr	r1, [r1, #8]
{
 800a962:	4604      	mov	r4, r0
 800a964:	b083      	sub	sp, #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a966:	683e      	ldr	r6, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a968:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800a96a:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a96c:	6842      	ldr	r2, [r0, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800a96e:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 800a972:	69c0      	ldr	r0, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a974:	ea45 3501 	orr.w	r5, r5, r1, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a978:	4913      	ldr	r1, [pc, #76]	; (800a9c8 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a97a:	4003      	ands	r3, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a97c:	428c      	cmp	r4, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a97e:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a982:	d009      	beq.n	800a998 <TIM_OC4_SetConfig+0x44>
 800a984:	4b11      	ldr	r3, [pc, #68]	; (800a9cc <TIM_OC4_SetConfig+0x78>)
 800a986:	429c      	cmp	r4, r3
 800a988:	d006      	beq.n	800a998 <TIM_OC4_SetConfig+0x44>
  TIMx->CCR4 = OC_Config->Pulse;
 800a98a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800a98c:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800a98e:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800a990:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800a992:	6225      	str	r5, [r4, #32]
}
 800a994:	b003      	add	sp, #12
 800a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800a99e:	d104      	bne.n	800a9aa <TIM_OC4_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9a4:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800a9a8:	e7ef      	b.n	800a98a <TIM_OC4_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a9aa:	f641 0158 	movw	r1, #6232	; 0x1858
 800a9ae:	4808      	ldr	r0, [pc, #32]	; (800a9d0 <TIM_OC4_SetConfig+0x7c>)
 800a9b0:	9201      	str	r2, [sp, #4]
 800a9b2:	f7f7 fe4d 	bl	8002650 <assert_failed>
 800a9b6:	9a01      	ldr	r2, [sp, #4]
 800a9b8:	697b      	ldr	r3, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9be:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800a9c2:	e7e2      	b.n	800a98a <TIM_OC4_SetConfig+0x36>
 800a9c4:	feff8cff 	.word	0xfeff8cff
 800a9c8:	40010000 	.word	0x40010000
 800a9cc:	40010400 	.word	0x40010400
 800a9d0:	080234e4 	.word	0x080234e4

0800a9d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9d6:	6803      	ldr	r3, [r0, #0]
{
 800a9d8:	460c      	mov	r4, r1
 800a9da:	4606      	mov	r6, r0

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a9dc:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a9de:	6899      	ldr	r1, [r3, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a9e0:	4aac      	ldr	r2, [pc, #688]	; (800ac94 <TIM_SlaveTimer_SetConfig+0x2c0>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a9e2:	2830      	cmp	r0, #48	; 0x30
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a9e8:	6825      	ldr	r5, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a9ea:	ea41 0100 	orr.w	r1, r1, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a9ee:	ea02 0201 	and.w	r2, r2, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a9f2:	ea42 0205 	orr.w	r2, r2, r5
  htim->Instance->SMCR = tmpsmcr;
 800a9f6:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800a9f8:	f000 80c9 	beq.w	800ab8e <TIM_SlaveTimer_SetConfig+0x1ba>
 800a9fc:	f240 80c2 	bls.w	800ab84 <TIM_SlaveTimer_SetConfig+0x1b0>
 800aa00:	2850      	cmp	r0, #80	; 0x50
 800aa02:	f000 8159 	beq.w	800acb8 <TIM_SlaveTimer_SetConfig+0x2e4>
 800aa06:	d958      	bls.n	800aaba <TIM_SlaveTimer_SetConfig+0xe6>
 800aa08:	2860      	cmp	r0, #96	; 0x60
 800aa0a:	f000 80ee 	beq.w	800abea <TIM_SlaveTimer_SetConfig+0x216>
 800aa0e:	2870      	cmp	r0, #112	; 0x70
 800aa10:	f040 80e9 	bne.w	800abe6 <TIM_SlaveTimer_SetConfig+0x212>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800aa14:	4aa0      	ldr	r2, [pc, #640]	; (800ac98 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800aa16:	49a1      	ldr	r1, [pc, #644]	; (800ac9c <TIM_SlaveTimer_SetConfig+0x2c8>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	bf18      	it	ne
 800aa1c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800aa20:	489f      	ldr	r0, [pc, #636]	; (800aca0 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800aa22:	bf14      	ite	ne
 800aa24:	2201      	movne	r2, #1
 800aa26:	2200      	moveq	r2, #0
 800aa28:	428b      	cmp	r3, r1
 800aa2a:	bf0c      	ite	eq
 800aa2c:	2200      	moveq	r2, #0
 800aa2e:	f002 0201 	andne.w	r2, r2, #1
 800aa32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa36:	4283      	cmp	r3, r0
 800aa38:	bf0c      	ite	eq
 800aa3a:	2200      	moveq	r2, #0
 800aa3c:	f002 0201 	andne.w	r2, r2, #1
 800aa40:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800aa44:	428b      	cmp	r3, r1
 800aa46:	bf0c      	ite	eq
 800aa48:	2200      	moveq	r2, #0
 800aa4a:	f002 0201 	andne.w	r2, r2, #1
 800aa4e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800aa52:	4283      	cmp	r3, r0
 800aa54:	bf0c      	ite	eq
 800aa56:	2200      	moveq	r2, #0
 800aa58:	f002 0201 	andne.w	r2, r2, #1
 800aa5c:	428b      	cmp	r3, r1
 800aa5e:	bf0c      	ite	eq
 800aa60:	2200      	moveq	r2, #0
 800aa62:	f002 0201 	andne.w	r2, r2, #1
 800aa66:	b11a      	cbz	r2, 800aa70 <TIM_SlaveTimer_SetConfig+0x9c>
 800aa68:	4a8e      	ldr	r2, [pc, #568]	; (800aca4 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	f040 81bf 	bne.w	800adee <TIM_SlaveTimer_SetConfig+0x41a>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800aa70:	68e3      	ldr	r3, [r4, #12]
 800aa72:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800aa76:	f040 819c 	bne.w	800adb2 <TIM_SlaveTimer_SetConfig+0x3de>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800aa7a:	68a3      	ldr	r3, [r4, #8]
 800aa7c:	2b0a      	cmp	r3, #10
 800aa7e:	bf18      	it	ne
 800aa80:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800aa84:	d003      	beq.n	800aa8e <TIM_SlaveTimer_SetConfig+0xba>
 800aa86:	f033 0302 	bics.w	r3, r3, #2
 800aa8a:	f040 8198 	bne.w	800adbe <TIM_SlaveTimer_SetConfig+0x3ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800aa8e:	6921      	ldr	r1, [r4, #16]
 800aa90:	290f      	cmp	r1, #15
 800aa92:	d905      	bls.n	800aaa0 <TIM_SlaveTimer_SetConfig+0xcc>
 800aa94:	f641 01ff 	movw	r1, #6399	; 0x18ff
 800aa98:	4883      	ldr	r0, [pc, #524]	; (800aca8 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800aa9a:	f7f7 fdd9 	bl	8002650 <assert_failed>
 800aa9e:	6921      	ldr	r1, [r4, #16]
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800aaa0:	6835      	ldr	r5, [r6, #0]
    }

    default:
      break;
  }
  return HAL_OK;
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	68e3      	ldr	r3, [r4, #12]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aaa6:	68aa      	ldr	r2, [r5, #8]
 800aaa8:	68a4      	ldr	r4, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaaa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800aaae:	4323      	orrs	r3, r4
 800aab0:	4313      	orrs	r3, r2

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aab2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aab6:	60ab      	str	r3, [r5, #8]
}
 800aab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800aaba:	2840      	cmp	r0, #64	; 0x40
 800aabc:	f040 8093 	bne.w	800abe6 <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800aac0:	4a75      	ldr	r2, [pc, #468]	; (800ac98 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800aac2:	4976      	ldr	r1, [pc, #472]	; (800ac9c <TIM_SlaveTimer_SetConfig+0x2c8>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	bf18      	it	ne
 800aac8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800aacc:	4874      	ldr	r0, [pc, #464]	; (800aca0 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800aace:	bf14      	ite	ne
 800aad0:	2201      	movne	r2, #1
 800aad2:	2200      	moveq	r2, #0
 800aad4:	428b      	cmp	r3, r1
 800aad6:	bf0c      	ite	eq
 800aad8:	2200      	moveq	r2, #0
 800aada:	f002 0201 	andne.w	r2, r2, #1
 800aade:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aae2:	4283      	cmp	r3, r0
 800aae4:	bf0c      	ite	eq
 800aae6:	2200      	moveq	r2, #0
 800aae8:	f002 0201 	andne.w	r2, r2, #1
 800aaec:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800aaf0:	428b      	cmp	r3, r1
 800aaf2:	bf0c      	ite	eq
 800aaf4:	2200      	moveq	r2, #0
 800aaf6:	f002 0201 	andne.w	r2, r2, #1
 800aafa:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800aafe:	4283      	cmp	r3, r0
 800ab00:	bf0c      	ite	eq
 800ab02:	2200      	moveq	r2, #0
 800ab04:	f002 0201 	andne.w	r2, r2, #1
 800ab08:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800ab0c:	428b      	cmp	r3, r1
 800ab0e:	bf0c      	ite	eq
 800ab10:	2200      	moveq	r2, #0
 800ab12:	f002 0201 	andne.w	r2, r2, #1
 800ab16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab1a:	4283      	cmp	r3, r0
 800ab1c:	bf0c      	ite	eq
 800ab1e:	2200      	moveq	r2, #0
 800ab20:	f002 0201 	andne.w	r2, r2, #1
 800ab24:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800ab28:	428b      	cmp	r3, r1
 800ab2a:	bf0c      	ite	eq
 800ab2c:	2200      	moveq	r2, #0
 800ab2e:	f002 0201 	andne.w	r2, r2, #1
 800ab32:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ab36:	4283      	cmp	r3, r0
 800ab38:	bf0c      	ite	eq
 800ab3a:	2200      	moveq	r2, #0
 800ab3c:	f002 0201 	andne.w	r2, r2, #1
 800ab40:	428b      	cmp	r3, r1
 800ab42:	bf0c      	ite	eq
 800ab44:	2200      	moveq	r2, #0
 800ab46:	f002 0201 	andne.w	r2, r2, #1
 800ab4a:	b11a      	cbz	r2, 800ab54 <TIM_SlaveTimer_SetConfig+0x180>
 800ab4c:	4a57      	ldr	r2, [pc, #348]	; (800acac <TIM_SlaveTimer_SetConfig+0x2d8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	f040 8159 	bne.w	800ae06 <TIM_SlaveTimer_SetConfig+0x432>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	2b0f      	cmp	r3, #15
 800ab58:	f200 811e 	bhi.w	800ad98 <TIM_SlaveTimer_SetConfig+0x3c4>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	2b05      	cmp	r3, #5
 800ab60:	f000 8118 	beq.w	800ad94 <TIM_SlaveTimer_SetConfig+0x3c0>
      tmpccer = htim->Instance->CCER;
 800ab64:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800ab66:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ab68:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800ab6a:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ab6c:	6a19      	ldr	r1, [r3, #32]
 800ab6e:	f021 0101 	bic.w	r1, r1, #1
 800ab72:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ab74:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ab7a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800ab7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ab80:	621c      	str	r4, [r3, #32]
}
 800ab82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800ab84:	2810      	cmp	r0, #16
 800ab86:	d002      	beq.n	800ab8e <TIM_SlaveTimer_SetConfig+0x1ba>
 800ab88:	2820      	cmp	r0, #32
 800ab8a:	d000      	beq.n	800ab8e <TIM_SlaveTimer_SetConfig+0x1ba>
 800ab8c:	bb58      	cbnz	r0, 800abe6 <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ab8e:	4a42      	ldr	r2, [pc, #264]	; (800ac98 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800ab90:	4942      	ldr	r1, [pc, #264]	; (800ac9c <TIM_SlaveTimer_SetConfig+0x2c8>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	bf18      	it	ne
 800ab96:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ab9a:	4d41      	ldr	r5, [pc, #260]	; (800aca0 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800ab9c:	4c44      	ldr	r4, [pc, #272]	; (800acb0 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800ab9e:	bf14      	ite	ne
 800aba0:	2201      	movne	r2, #1
 800aba2:	2200      	moveq	r2, #0
 800aba4:	4843      	ldr	r0, [pc, #268]	; (800acb4 <TIM_SlaveTimer_SetConfig+0x2e0>)
 800aba6:	428b      	cmp	r3, r1
 800aba8:	bf0c      	ite	eq
 800abaa:	2200      	moveq	r2, #0
 800abac:	f002 0201 	andne.w	r2, r2, #1
 800abb0:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 800abb4:	42ab      	cmp	r3, r5
 800abb6:	bf0c      	ite	eq
 800abb8:	2200      	moveq	r2, #0
 800abba:	f002 0201 	andne.w	r2, r2, #1
 800abbe:	42a3      	cmp	r3, r4
 800abc0:	bf0c      	ite	eq
 800abc2:	2200      	moveq	r2, #0
 800abc4:	f002 0201 	andne.w	r2, r2, #1
 800abc8:	4283      	cmp	r3, r0
 800abca:	bf0c      	ite	eq
 800abcc:	2200      	moveq	r2, #0
 800abce:	f002 0201 	andne.w	r2, r2, #1
 800abd2:	428b      	cmp	r3, r1
 800abd4:	bf0c      	ite	eq
 800abd6:	2200      	moveq	r2, #0
 800abd8:	f002 0201 	andne.w	r2, r2, #1
 800abdc:	b11a      	cbz	r2, 800abe6 <TIM_SlaveTimer_SetConfig+0x212>
 800abde:	4a31      	ldr	r2, [pc, #196]	; (800aca4 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	f040 80df 	bne.w	800ada4 <TIM_SlaveTimer_SetConfig+0x3d0>
  return HAL_OK;
 800abe6:	2000      	movs	r0, #0
}
 800abe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800abea:	4a2b      	ldr	r2, [pc, #172]	; (800ac98 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800abec:	492b      	ldr	r1, [pc, #172]	; (800ac9c <TIM_SlaveTimer_SetConfig+0x2c8>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	bf18      	it	ne
 800abf2:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800abf6:	482a      	ldr	r0, [pc, #168]	; (800aca0 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800abf8:	bf14      	ite	ne
 800abfa:	2201      	movne	r2, #1
 800abfc:	2200      	moveq	r2, #0
 800abfe:	428b      	cmp	r3, r1
 800ac00:	bf0c      	ite	eq
 800ac02:	2200      	moveq	r2, #0
 800ac04:	f002 0201 	andne.w	r2, r2, #1
 800ac08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac0c:	4283      	cmp	r3, r0
 800ac0e:	bf0c      	ite	eq
 800ac10:	2200      	moveq	r2, #0
 800ac12:	f002 0201 	andne.w	r2, r2, #1
 800ac16:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800ac1a:	428b      	cmp	r3, r1
 800ac1c:	bf0c      	ite	eq
 800ac1e:	2200      	moveq	r2, #0
 800ac20:	f002 0201 	andne.w	r2, r2, #1
 800ac24:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800ac28:	4283      	cmp	r3, r0
 800ac2a:	bf0c      	ite	eq
 800ac2c:	2200      	moveq	r2, #0
 800ac2e:	f002 0201 	andne.w	r2, r2, #1
 800ac32:	428b      	cmp	r3, r1
 800ac34:	bf0c      	ite	eq
 800ac36:	2200      	moveq	r2, #0
 800ac38:	f002 0201 	andne.w	r2, r2, #1
 800ac3c:	b11a      	cbz	r2, 800ac46 <TIM_SlaveTimer_SetConfig+0x272>
 800ac3e:	4a19      	ldr	r2, [pc, #100]	; (800aca4 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	f040 80ce 	bne.w	800ade2 <TIM_SlaveTimer_SetConfig+0x40e>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ac46:	68a3      	ldr	r3, [r4, #8]
 800ac48:	2b0a      	cmp	r3, #10
 800ac4a:	bf18      	it	ne
 800ac4c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800ac50:	d003      	beq.n	800ac5a <TIM_SlaveTimer_SetConfig+0x286>
 800ac52:	f033 0302 	bics.w	r3, r3, #2
 800ac56:	f040 80be 	bne.w	800add6 <TIM_SlaveTimer_SetConfig+0x402>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ac5a:	6925      	ldr	r5, [r4, #16]
 800ac5c:	2d0f      	cmp	r5, #15
 800ac5e:	d905      	bls.n	800ac6c <TIM_SlaveTimer_SetConfig+0x298>
 800ac60:	f641 1135 	movw	r1, #6453	; 0x1935
 800ac64:	4810      	ldr	r0, [pc, #64]	; (800aca8 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800ac66:	f7f7 fcf3 	bl	8002650 <assert_failed>
 800ac6a:	6925      	ldr	r5, [r4, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac6c:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800ac6e:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac70:	68a6      	ldr	r6, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac72:	6a1c      	ldr	r4, [r3, #32]
 800ac74:	f024 0410 	bic.w	r4, r4, #16
 800ac78:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac7a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800ac7c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac7e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac86:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac8a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ac8e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac90:	621a      	str	r2, [r3, #32]
}
 800ac92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac94:	fffefff8 	.word	0xfffefff8
 800ac98:	40010000 	.word	0x40010000
 800ac9c:	40000400 	.word	0x40000400
 800aca0:	40000800 	.word	0x40000800
 800aca4:	40001800 	.word	0x40001800
 800aca8:	080234e4 	.word	0x080234e4
 800acac:	40002000 	.word	0x40002000
 800acb0:	40000c00 	.word	0x40000c00
 800acb4:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800acb8:	4a56      	ldr	r2, [pc, #344]	; (800ae14 <TIM_SlaveTimer_SetConfig+0x440>)
 800acba:	4957      	ldr	r1, [pc, #348]	; (800ae18 <TIM_SlaveTimer_SetConfig+0x444>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	bf18      	it	ne
 800acc0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800acc4:	4855      	ldr	r0, [pc, #340]	; (800ae1c <TIM_SlaveTimer_SetConfig+0x448>)
 800acc6:	bf14      	ite	ne
 800acc8:	2201      	movne	r2, #1
 800acca:	2200      	moveq	r2, #0
 800accc:	428b      	cmp	r3, r1
 800acce:	bf0c      	ite	eq
 800acd0:	2200      	moveq	r2, #0
 800acd2:	f002 0201 	andne.w	r2, r2, #1
 800acd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acda:	4283      	cmp	r3, r0
 800acdc:	bf0c      	ite	eq
 800acde:	2200      	moveq	r2, #0
 800ace0:	f002 0201 	andne.w	r2, r2, #1
 800ace4:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800ace8:	428b      	cmp	r3, r1
 800acea:	bf0c      	ite	eq
 800acec:	2200      	moveq	r2, #0
 800acee:	f002 0201 	andne.w	r2, r2, #1
 800acf2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800acf6:	4283      	cmp	r3, r0
 800acf8:	bf0c      	ite	eq
 800acfa:	2200      	moveq	r2, #0
 800acfc:	f002 0201 	andne.w	r2, r2, #1
 800ad00:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800ad04:	428b      	cmp	r3, r1
 800ad06:	bf0c      	ite	eq
 800ad08:	2200      	moveq	r2, #0
 800ad0a:	f002 0201 	andne.w	r2, r2, #1
 800ad0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad12:	4283      	cmp	r3, r0
 800ad14:	bf0c      	ite	eq
 800ad16:	2200      	moveq	r2, #0
 800ad18:	f002 0201 	andne.w	r2, r2, #1
 800ad1c:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800ad20:	428b      	cmp	r3, r1
 800ad22:	bf0c      	ite	eq
 800ad24:	2200      	moveq	r2, #0
 800ad26:	f002 0201 	andne.w	r2, r2, #1
 800ad2a:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ad2e:	4283      	cmp	r3, r0
 800ad30:	bf0c      	ite	eq
 800ad32:	2200      	moveq	r2, #0
 800ad34:	f002 0201 	andne.w	r2, r2, #1
 800ad38:	428b      	cmp	r3, r1
 800ad3a:	bf0c      	ite	eq
 800ad3c:	2200      	moveq	r2, #0
 800ad3e:	f002 0201 	andne.w	r2, r2, #1
 800ad42:	b112      	cbz	r2, 800ad4a <TIM_SlaveTimer_SetConfig+0x376>
 800ad44:	4a36      	ldr	r2, [pc, #216]	; (800ae20 <TIM_SlaveTimer_SetConfig+0x44c>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d157      	bne.n	800adfa <TIM_SlaveTimer_SetConfig+0x426>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ad4a:	68a3      	ldr	r3, [r4, #8]
 800ad4c:	2b0a      	cmp	r3, #10
 800ad4e:	bf18      	it	ne
 800ad50:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800ad54:	d002      	beq.n	800ad5c <TIM_SlaveTimer_SetConfig+0x388>
 800ad56:	f033 0302 	bics.w	r3, r3, #2
 800ad5a:	d136      	bne.n	800adca <TIM_SlaveTimer_SetConfig+0x3f6>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ad5c:	6927      	ldr	r7, [r4, #16]
 800ad5e:	2f0f      	cmp	r7, #15
 800ad60:	d905      	bls.n	800ad6e <TIM_SlaveTimer_SetConfig+0x39a>
 800ad62:	f641 1127 	movw	r1, #6439	; 0x1927
 800ad66:	482f      	ldr	r0, [pc, #188]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ad68:	f7f7 fc72 	bl	8002650 <assert_failed>
 800ad6c:	6927      	ldr	r7, [r4, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad6e:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800ad70:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad72:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800ad74:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad76:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad78:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad7c:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800ad80:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad82:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad84:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad8a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ad8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad90:	6219      	str	r1, [r3, #32]
}
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800ad94:	2001      	movs	r0, #1
}
 800ad96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ad98:	f641 110c 	movw	r1, #6412	; 0x190c
 800ad9c:	4821      	ldr	r0, [pc, #132]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ad9e:	f7f7 fc57 	bl	8002650 <assert_failed>
 800ada2:	e6db      	b.n	800ab5c <TIM_SlaveTimer_SetConfig+0x188>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ada4:	f641 1144 	movw	r1, #6468	; 0x1944
 800ada8:	481e      	ldr	r0, [pc, #120]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800adaa:	f7f7 fc51 	bl	8002650 <assert_failed>
  return HAL_OK;
 800adae:	2000      	movs	r0, #0
}
 800adb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800adb2:	f641 01fd 	movw	r1, #6397	; 0x18fd
 800adb6:	481b      	ldr	r0, [pc, #108]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800adb8:	f7f7 fc4a 	bl	8002650 <assert_failed>
 800adbc:	e65d      	b.n	800aa7a <TIM_SlaveTimer_SetConfig+0xa6>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800adbe:	f641 01fe 	movw	r1, #6398	; 0x18fe
 800adc2:	4818      	ldr	r0, [pc, #96]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800adc4:	f7f7 fc44 	bl	8002650 <assert_failed>
 800adc8:	e661      	b.n	800aa8e <TIM_SlaveTimer_SetConfig+0xba>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800adca:	f641 1126 	movw	r1, #6438	; 0x1926
 800adce:	4815      	ldr	r0, [pc, #84]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800add0:	f7f7 fc3e 	bl	8002650 <assert_failed>
 800add4:	e7c2      	b.n	800ad5c <TIM_SlaveTimer_SetConfig+0x388>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800add6:	f641 1134 	movw	r1, #6452	; 0x1934
 800adda:	4812      	ldr	r0, [pc, #72]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800addc:	f7f7 fc38 	bl	8002650 <assert_failed>
 800ade0:	e73b      	b.n	800ac5a <TIM_SlaveTimer_SetConfig+0x286>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ade2:	f641 1133 	movw	r1, #6451	; 0x1933
 800ade6:	480f      	ldr	r0, [pc, #60]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ade8:	f7f7 fc32 	bl	8002650 <assert_failed>
 800adec:	e72b      	b.n	800ac46 <TIM_SlaveTimer_SetConfig+0x272>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800adee:	f641 01fc 	movw	r1, #6396	; 0x18fc
 800adf2:	480c      	ldr	r0, [pc, #48]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800adf4:	f7f7 fc2c 	bl	8002650 <assert_failed>
 800adf8:	e63a      	b.n	800aa70 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800adfa:	f641 1125 	movw	r1, #6437	; 0x1925
 800adfe:	4809      	ldr	r0, [pc, #36]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ae00:	f7f7 fc26 	bl	8002650 <assert_failed>
 800ae04:	e7a1      	b.n	800ad4a <TIM_SlaveTimer_SetConfig+0x376>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ae06:	f641 110b 	movw	r1, #6411	; 0x190b
 800ae0a:	4806      	ldr	r0, [pc, #24]	; (800ae24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ae0c:	f7f7 fc20 	bl	8002650 <assert_failed>
 800ae10:	e6a0      	b.n	800ab54 <TIM_SlaveTimer_SetConfig+0x180>
 800ae12:	bf00      	nop
 800ae14:	40010000 	.word	0x40010000
 800ae18:	40000400 	.word	0x40000400
 800ae1c:	40000800 	.word	0x40000800
 800ae20:	40002000 	.word	0x40002000
 800ae24:	080234e4 	.word	0x080234e4

0800ae28 <HAL_TIM_Base_Start>:
{
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ae2c:	4b38      	ldr	r3, [pc, #224]	; (800af10 <HAL_TIM_Base_Start+0xe8>)
 800ae2e:	4839      	ldr	r0, [pc, #228]	; (800af14 <HAL_TIM_Base_Start+0xec>)
 800ae30:	6822      	ldr	r2, [r4, #0]
 800ae32:	4939      	ldr	r1, [pc, #228]	; (800af18 <HAL_TIM_Base_Start+0xf0>)
 800ae34:	429a      	cmp	r2, r3
 800ae36:	bf18      	it	ne
 800ae38:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ae3c:	4d37      	ldr	r5, [pc, #220]	; (800af1c <HAL_TIM_Base_Start+0xf4>)
 800ae3e:	bf14      	ite	ne
 800ae40:	2301      	movne	r3, #1
 800ae42:	2300      	moveq	r3, #0
 800ae44:	4282      	cmp	r2, r0
 800ae46:	bf0c      	ite	eq
 800ae48:	2300      	moveq	r3, #0
 800ae4a:	f003 0301 	andne.w	r3, r3, #1
 800ae4e:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800ae52:	428a      	cmp	r2, r1
 800ae54:	bf0c      	ite	eq
 800ae56:	2300      	moveq	r3, #0
 800ae58:	f003 0301 	andne.w	r3, r3, #1
 800ae5c:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ae60:	42aa      	cmp	r2, r5
 800ae62:	bf0c      	ite	eq
 800ae64:	2300      	moveq	r3, #0
 800ae66:	f003 0301 	andne.w	r3, r3, #1
 800ae6a:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800ae6e:	4282      	cmp	r2, r0
 800ae70:	bf0c      	ite	eq
 800ae72:	2300      	moveq	r3, #0
 800ae74:	f003 0301 	andne.w	r3, r3, #1
 800ae78:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800ae7c:	428a      	cmp	r2, r1
 800ae7e:	bf0c      	ite	eq
 800ae80:	2300      	moveq	r3, #0
 800ae82:	f003 0301 	andne.w	r3, r3, #1
 800ae86:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800ae8a:	42aa      	cmp	r2, r5
 800ae8c:	bf0c      	ite	eq
 800ae8e:	2300      	moveq	r3, #0
 800ae90:	f003 0301 	andne.w	r3, r3, #1
 800ae94:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800ae98:	4282      	cmp	r2, r0
 800ae9a:	bf0c      	ite	eq
 800ae9c:	2300      	moveq	r3, #0
 800ae9e:	f003 0301 	andne.w	r3, r3, #1
 800aea2:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800aea6:	428a      	cmp	r2, r1
 800aea8:	bf0c      	ite	eq
 800aeaa:	2300      	moveq	r3, #0
 800aeac:	f003 0301 	andne.w	r3, r3, #1
 800aeb0:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800aeb4:	42aa      	cmp	r2, r5
 800aeb6:	bf0c      	ite	eq
 800aeb8:	2300      	moveq	r3, #0
 800aeba:	f003 0301 	andne.w	r3, r3, #1
 800aebe:	4282      	cmp	r2, r0
 800aec0:	bf0c      	ite	eq
 800aec2:	2300      	moveq	r3, #0
 800aec4:	f003 0301 	andne.w	r3, r3, #1
 800aec8:	428a      	cmp	r2, r1
 800aeca:	bf0c      	ite	eq
 800aecc:	2300      	moveq	r3, #0
 800aece:	f003 0301 	andne.w	r3, r3, #1
 800aed2:	b113      	cbz	r3, 800aeda <HAL_TIM_Base_Start+0xb2>
 800aed4:	4b12      	ldr	r3, [pc, #72]	; (800af20 <HAL_TIM_Base_Start+0xf8>)
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d113      	bne.n	800af02 <HAL_TIM_Base_Start+0xda>
  htim->State = HAL_TIM_STATE_BUSY;
 800aeda:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aedc:	4b11      	ldr	r3, [pc, #68]	; (800af24 <HAL_TIM_Base_Start+0xfc>)
  htim->State = HAL_TIM_STATE_BUSY;
 800aede:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aee2:	6891      	ldr	r1, [r2, #8]
 800aee4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aee6:	2b06      	cmp	r3, #6
 800aee8:	d006      	beq.n	800aef8 <HAL_TIM_Base_Start+0xd0>
 800aeea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeee:	d003      	beq.n	800aef8 <HAL_TIM_Base_Start+0xd0>
    __HAL_TIM_ENABLE(htim);
 800aef0:	6813      	ldr	r3, [r2, #0]
 800aef2:	f043 0301 	orr.w	r3, r3, #1
 800aef6:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800aef8:	2301      	movs	r3, #1
}
 800aefa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800aefc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800af00:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800af02:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800af06:	4808      	ldr	r0, [pc, #32]	; (800af28 <HAL_TIM_Base_Start+0x100>)
 800af08:	f7f7 fba2 	bl	8002650 <assert_failed>
 800af0c:	6822      	ldr	r2, [r4, #0]
 800af0e:	e7e4      	b.n	800aeda <HAL_TIM_Base_Start+0xb2>
 800af10:	40010000 	.word	0x40010000
 800af14:	40000400 	.word	0x40000400
 800af18:	40000800 	.word	0x40000800
 800af1c:	40000c00 	.word	0x40000c00
 800af20:	40002000 	.word	0x40002000
 800af24:	00010007 	.word	0x00010007
 800af28:	080234e4 	.word	0x080234e4

0800af2c <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800af2c:	6802      	ldr	r2, [r0, #0]
 800af2e:	4938      	ldr	r1, [pc, #224]	; (800b010 <HAL_TIM_Base_Start_IT+0xe4>)
{
 800af30:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800af32:	4b38      	ldr	r3, [pc, #224]	; (800b014 <HAL_TIM_Base_Start_IT+0xe8>)
 800af34:	4c38      	ldr	r4, [pc, #224]	; (800b018 <HAL_TIM_Base_Start_IT+0xec>)
 800af36:	429a      	cmp	r2, r3
 800af38:	bf18      	it	ne
 800af3a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800af3e:	4d37      	ldr	r5, [pc, #220]	; (800b01c <HAL_TIM_Base_Start_IT+0xf0>)
 800af40:	bf14      	ite	ne
 800af42:	2301      	movne	r3, #1
 800af44:	2300      	moveq	r3, #0
 800af46:	42a2      	cmp	r2, r4
 800af48:	bf0c      	ite	eq
 800af4a:	2300      	moveq	r3, #0
 800af4c:	f003 0301 	andne.w	r3, r3, #1
 800af50:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800af54:	428a      	cmp	r2, r1
 800af56:	bf0c      	ite	eq
 800af58:	2300      	moveq	r3, #0
 800af5a:	f003 0301 	andne.w	r3, r3, #1
 800af5e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800af62:	42aa      	cmp	r2, r5
 800af64:	bf0c      	ite	eq
 800af66:	2300      	moveq	r3, #0
 800af68:	f003 0301 	andne.w	r3, r3, #1
 800af6c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800af70:	42a2      	cmp	r2, r4
 800af72:	bf0c      	ite	eq
 800af74:	2300      	moveq	r3, #0
 800af76:	f003 0301 	andne.w	r3, r3, #1
 800af7a:	f504 3498 	add.w	r4, r4, #77824	; 0x13000
 800af7e:	428a      	cmp	r2, r1
 800af80:	bf0c      	ite	eq
 800af82:	2300      	moveq	r3, #0
 800af84:	f003 0301 	andne.w	r3, r3, #1
 800af88:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800af8c:	42aa      	cmp	r2, r5
 800af8e:	bf0c      	ite	eq
 800af90:	2300      	moveq	r3, #0
 800af92:	f003 0301 	andne.w	r3, r3, #1
 800af96:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800af9a:	42a2      	cmp	r2, r4
 800af9c:	bf0c      	ite	eq
 800af9e:	2300      	moveq	r3, #0
 800afa0:	f003 0301 	andne.w	r3, r3, #1
 800afa4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800afa8:	428a      	cmp	r2, r1
 800afaa:	bf0c      	ite	eq
 800afac:	2300      	moveq	r3, #0
 800afae:	f003 0301 	andne.w	r3, r3, #1
 800afb2:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800afb6:	42aa      	cmp	r2, r5
 800afb8:	bf0c      	ite	eq
 800afba:	2300      	moveq	r3, #0
 800afbc:	f003 0301 	andne.w	r3, r3, #1
 800afc0:	42a2      	cmp	r2, r4
 800afc2:	bf0c      	ite	eq
 800afc4:	2300      	moveq	r3, #0
 800afc6:	f003 0301 	andne.w	r3, r3, #1
 800afca:	428a      	cmp	r2, r1
 800afcc:	bf0c      	ite	eq
 800afce:	2300      	moveq	r3, #0
 800afd0:	f003 0301 	andne.w	r3, r3, #1
 800afd4:	b113      	cbz	r3, 800afdc <HAL_TIM_Base_Start_IT+0xb0>
 800afd6:	4b12      	ldr	r3, [pc, #72]	; (800b020 <HAL_TIM_Base_Start_IT+0xf4>)
 800afd8:	429a      	cmp	r2, r3
 800afda:	d111      	bne.n	800b000 <HAL_TIM_Base_Start_IT+0xd4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afdc:	68d1      	ldr	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afde:	4b11      	ldr	r3, [pc, #68]	; (800b024 <HAL_TIM_Base_Start_IT+0xf8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afe0:	f041 0101 	orr.w	r1, r1, #1
 800afe4:	60d1      	str	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afe6:	6891      	ldr	r1, [r2, #8]
 800afe8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afea:	2b06      	cmp	r3, #6
 800afec:	d006      	beq.n	800affc <HAL_TIM_Base_Start_IT+0xd0>
 800afee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff2:	d003      	beq.n	800affc <HAL_TIM_Base_Start_IT+0xd0>
    __HAL_TIM_ENABLE(htim);
 800aff4:	6813      	ldr	r3, [r2, #0]
 800aff6:	f043 0301 	orr.w	r3, r3, #1
 800affa:	6013      	str	r3, [r2, #0]
}
 800affc:	2000      	movs	r0, #0
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b002:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800b006:	4808      	ldr	r0, [pc, #32]	; (800b028 <HAL_TIM_Base_Start_IT+0xfc>)
 800b008:	f7f7 fb22 	bl	8002650 <assert_failed>
 800b00c:	6822      	ldr	r2, [r4, #0]
 800b00e:	e7e5      	b.n	800afdc <HAL_TIM_Base_Start_IT+0xb0>
 800b010:	40000800 	.word	0x40000800
 800b014:	40010000 	.word	0x40010000
 800b018:	40000400 	.word	0x40000400
 800b01c:	40000c00 	.word	0x40000c00
 800b020:	40002000 	.word	0x40002000
 800b024:	00010007 	.word	0x00010007
 800b028:	080234e4 	.word	0x080234e4

0800b02c <HAL_TIM_OC_MspInit>:
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop

0800b030 <HAL_TIM_PWM_MspInit>:
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop

0800b034 <HAL_TIM_IC_MspInit>:
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop

0800b038 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b038:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	f000 81c8 	beq.w	800b3d2 <HAL_TIM_ConfigClockSource+0x39a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b042:	680a      	ldr	r2, [r1, #0]
 800b044:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b048:	bf18      	it	ne
 800b04a:	f5b2 5f00 	cmpne.w	r2, #8192	; 0x2000
{
 800b04e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b050:	bf14      	ite	ne
 800b052:	2301      	movne	r3, #1
 800b054:	2300      	moveq	r3, #0
 800b056:	f032 0630 	bics.w	r6, r2, #48	; 0x30
 800b05a:	4604      	mov	r4, r0
 800b05c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800b05e:	f04f 0001 	mov.w	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b062:	f04f 0102 	mov.w	r1, #2
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b066:	bf08      	it	eq
 800b068:	2300      	moveq	r3, #0
  __HAL_LOCK(htim);
 800b06a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b06e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b072:	b113      	cbz	r3, 800b07a <HAL_TIM_ConfigClockSource+0x42>
 800b074:	2e40      	cmp	r6, #64	; 0x40
 800b076:	f040 8242 	bne.w	800b4fe <HAL_TIM_ConfigClockSource+0x4c6>
  tmpsmcr = htim->Instance->SMCR;
 800b07a:	6823      	ldr	r3, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800b07c:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b07e:	49a5      	ldr	r1, [pc, #660]	; (800b314 <HAL_TIM_ConfigClockSource+0x2dc>)
  tmpsmcr = htim->Instance->SMCR;
 800b080:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b082:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800b086:	6099      	str	r1, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800b088:	f000 81d3 	beq.w	800b432 <HAL_TIM_ConfigClockSource+0x3fa>
 800b08c:	f240 81a3 	bls.w	800b3d6 <HAL_TIM_ConfigClockSource+0x39e>
 800b090:	2a70      	cmp	r2, #112	; 0x70
 800b092:	f000 814d 	beq.w	800b330 <HAL_TIM_ConfigClockSource+0x2f8>
 800b096:	d84c      	bhi.n	800b132 <HAL_TIM_ConfigClockSource+0xfa>
 800b098:	2a50      	cmp	r2, #80	; 0x50
 800b09a:	f000 8095 	beq.w	800b1c8 <HAL_TIM_ConfigClockSource+0x190>
 800b09e:	2a60      	cmp	r2, #96	; 0x60
 800b0a0:	f040 812f 	bne.w	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b0a4:	4a9c      	ldr	r2, [pc, #624]	; (800b318 <HAL_TIM_ConfigClockSource+0x2e0>)
 800b0a6:	499d      	ldr	r1, [pc, #628]	; (800b31c <HAL_TIM_ConfigClockSource+0x2e4>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	bf18      	it	ne
 800b0ac:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b0b0:	489b      	ldr	r0, [pc, #620]	; (800b320 <HAL_TIM_ConfigClockSource+0x2e8>)
 800b0b2:	bf14      	ite	ne
 800b0b4:	2201      	movne	r2, #1
 800b0b6:	2200      	moveq	r2, #0
 800b0b8:	428b      	cmp	r3, r1
 800b0ba:	bf0c      	ite	eq
 800b0bc:	2200      	moveq	r2, #0
 800b0be:	f002 0201 	andne.w	r2, r2, #1
 800b0c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0c6:	4283      	cmp	r3, r0
 800b0c8:	bf0c      	ite	eq
 800b0ca:	2200      	moveq	r2, #0
 800b0cc:	f002 0201 	andne.w	r2, r2, #1
 800b0d0:	428b      	cmp	r3, r1
 800b0d2:	bf0c      	ite	eq
 800b0d4:	2200      	moveq	r2, #0
 800b0d6:	f002 0201 	andne.w	r2, r2, #1
 800b0da:	b11a      	cbz	r2, 800b0e4 <HAL_TIM_ConfigClockSource+0xac>
 800b0dc:	4a91      	ldr	r2, [pc, #580]	; (800b324 <HAL_TIM_ConfigClockSource+0x2ec>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	f040 8201 	bne.w	800b4e6 <HAL_TIM_ConfigClockSource+0x4ae>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b0e4:	686b      	ldr	r3, [r5, #4]
 800b0e6:	2b0a      	cmp	r3, #10
 800b0e8:	bf18      	it	ne
 800b0ea:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b0ee:	d003      	beq.n	800b0f8 <HAL_TIM_ConfigClockSource+0xc0>
 800b0f0:	f033 0302 	bics.w	r3, r3, #2
 800b0f4:	f040 8216 	bne.w	800b524 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b0f8:	68ee      	ldr	r6, [r5, #12]
 800b0fa:	2e0f      	cmp	r6, #15
 800b0fc:	f200 823f 	bhi.w	800b57e <HAL_TIM_ConfigClockSource+0x546>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b104:	6a18      	ldr	r0, [r3, #32]
 800b106:	f020 0010 	bic.w	r0, r0, #16
 800b10a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b10c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800b10e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b110:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b114:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b118:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800b11c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800b120:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800b122:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b124:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b126:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b12a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800b12e:	609a      	str	r2, [r3, #8]
 800b130:	e0e7      	b.n	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800b132:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b136:	f000 808d 	beq.w	800b254 <HAL_TIM_ConfigClockSource+0x21c>
 800b13a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b13e:	f040 80e0 	bne.w	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b142:	4a75      	ldr	r2, [pc, #468]	; (800b318 <HAL_TIM_ConfigClockSource+0x2e0>)
 800b144:	4975      	ldr	r1, [pc, #468]	; (800b31c <HAL_TIM_ConfigClockSource+0x2e4>)
 800b146:	4293      	cmp	r3, r2
 800b148:	bf18      	it	ne
 800b14a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b14e:	4874      	ldr	r0, [pc, #464]	; (800b320 <HAL_TIM_ConfigClockSource+0x2e8>)
 800b150:	bf14      	ite	ne
 800b152:	2201      	movne	r2, #1
 800b154:	2200      	moveq	r2, #0
 800b156:	428b      	cmp	r3, r1
 800b158:	bf0c      	ite	eq
 800b15a:	2200      	moveq	r2, #0
 800b15c:	f002 0201 	andne.w	r2, r2, #1
 800b160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b164:	4283      	cmp	r3, r0
 800b166:	bf0c      	ite	eq
 800b168:	2200      	moveq	r2, #0
 800b16a:	f002 0201 	andne.w	r2, r2, #1
 800b16e:	428b      	cmp	r3, r1
 800b170:	bf0c      	ite	eq
 800b172:	2200      	moveq	r2, #0
 800b174:	f002 0201 	andne.w	r2, r2, #1
 800b178:	b11a      	cbz	r2, 800b182 <HAL_TIM_ConfigClockSource+0x14a>
 800b17a:	4a6a      	ldr	r2, [pc, #424]	; (800b324 <HAL_TIM_ConfigClockSource+0x2ec>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	f040 81b8 	bne.w	800b4f2 <HAL_TIM_ConfigClockSource+0x4ba>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b182:	68ab      	ldr	r3, [r5, #8]
 800b184:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b188:	f040 8207 	bne.w	800b59a <HAL_TIM_ConfigClockSource+0x562>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b18c:	686b      	ldr	r3, [r5, #4]
 800b18e:	2b0a      	cmp	r3, #10
 800b190:	bf18      	it	ne
 800b192:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b196:	d003      	beq.n	800b1a0 <HAL_TIM_ConfigClockSource+0x168>
 800b198:	f033 0302 	bics.w	r3, r3, #2
 800b19c:	f040 81bc 	bne.w	800b518 <HAL_TIM_ConfigClockSource+0x4e0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b1a0:	68e8      	ldr	r0, [r5, #12]
 800b1a2:	280f      	cmp	r0, #15
 800b1a4:	f200 81dd 	bhi.w	800b562 <HAL_TIM_ConfigClockSource+0x52a>
      TIM_ETR_SetConfig(htim->Instance,
 800b1a8:	6822      	ldr	r2, [r4, #0]
 800b1aa:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800b1ac:	6891      	ldr	r1, [r2, #8]
 800b1ae:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1b0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800b1b4:	432b      	orrs	r3, r5
 800b1b6:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800b1bc:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1be:	6893      	ldr	r3, [r2, #8]
 800b1c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1c4:	6093      	str	r3, [r2, #8]
      break;
 800b1c6:	e09c      	b.n	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b1c8:	4a53      	ldr	r2, [pc, #332]	; (800b318 <HAL_TIM_ConfigClockSource+0x2e0>)
 800b1ca:	4954      	ldr	r1, [pc, #336]	; (800b31c <HAL_TIM_ConfigClockSource+0x2e4>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	bf18      	it	ne
 800b1d0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b1d4:	4852      	ldr	r0, [pc, #328]	; (800b320 <HAL_TIM_ConfigClockSource+0x2e8>)
 800b1d6:	bf14      	ite	ne
 800b1d8:	2201      	movne	r2, #1
 800b1da:	2200      	moveq	r2, #0
 800b1dc:	428b      	cmp	r3, r1
 800b1de:	bf0c      	ite	eq
 800b1e0:	2200      	moveq	r2, #0
 800b1e2:	f002 0201 	andne.w	r2, r2, #1
 800b1e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1ea:	4283      	cmp	r3, r0
 800b1ec:	bf0c      	ite	eq
 800b1ee:	2200      	moveq	r2, #0
 800b1f0:	f002 0201 	andne.w	r2, r2, #1
 800b1f4:	428b      	cmp	r3, r1
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2200      	moveq	r2, #0
 800b1fa:	f002 0201 	andne.w	r2, r2, #1
 800b1fe:	b11a      	cbz	r2, 800b208 <HAL_TIM_ConfigClockSource+0x1d0>
 800b200:	4a48      	ldr	r2, [pc, #288]	; (800b324 <HAL_TIM_ConfigClockSource+0x2ec>)
 800b202:	4293      	cmp	r3, r2
 800b204:	f040 8169 	bne.w	800b4da <HAL_TIM_ConfigClockSource+0x4a2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b208:	686b      	ldr	r3, [r5, #4]
 800b20a:	2b0a      	cmp	r3, #10
 800b20c:	bf18      	it	ne
 800b20e:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b212:	d003      	beq.n	800b21c <HAL_TIM_ConfigClockSource+0x1e4>
 800b214:	f033 0302 	bics.w	r3, r3, #2
 800b218:	f040 818a 	bne.w	800b530 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b21c:	68ee      	ldr	r6, [r5, #12]
 800b21e:	2e0f      	cmp	r6, #15
 800b220:	f200 81b4 	bhi.w	800b58c <HAL_TIM_ConfigClockSource+0x554>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800b228:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b22a:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b22c:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b230:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800b234:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b236:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b238:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b23a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b23e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b244:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b246:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b248:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b24c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800b250:	609a      	str	r2, [r3, #8]
 800b252:	e056      	b.n	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b254:	4a30      	ldr	r2, [pc, #192]	; (800b318 <HAL_TIM_ConfigClockSource+0x2e0>)
 800b256:	4831      	ldr	r0, [pc, #196]	; (800b31c <HAL_TIM_ConfigClockSource+0x2e4>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	bf18      	it	ne
 800b25c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b260:	492f      	ldr	r1, [pc, #188]	; (800b320 <HAL_TIM_ConfigClockSource+0x2e8>)
 800b262:	4d31      	ldr	r5, [pc, #196]	; (800b328 <HAL_TIM_ConfigClockSource+0x2f0>)
 800b264:	bf14      	ite	ne
 800b266:	2201      	movne	r2, #1
 800b268:	2200      	moveq	r2, #0
 800b26a:	4283      	cmp	r3, r0
 800b26c:	bf0c      	ite	eq
 800b26e:	2200      	moveq	r2, #0
 800b270:	f002 0201 	andne.w	r2, r2, #1
 800b274:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800b278:	428b      	cmp	r3, r1
 800b27a:	bf0c      	ite	eq
 800b27c:	2200      	moveq	r2, #0
 800b27e:	f002 0201 	andne.w	r2, r2, #1
 800b282:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800b286:	42ab      	cmp	r3, r5
 800b288:	bf0c      	ite	eq
 800b28a:	2200      	moveq	r2, #0
 800b28c:	f002 0201 	andne.w	r2, r2, #1
 800b290:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800b294:	4283      	cmp	r3, r0
 800b296:	bf0c      	ite	eq
 800b298:	2200      	moveq	r2, #0
 800b29a:	f002 0201 	andne.w	r2, r2, #1
 800b29e:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800b2a2:	428b      	cmp	r3, r1
 800b2a4:	bf0c      	ite	eq
 800b2a6:	2200      	moveq	r2, #0
 800b2a8:	f002 0201 	andne.w	r2, r2, #1
 800b2ac:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800b2b0:	42ab      	cmp	r3, r5
 800b2b2:	bf0c      	ite	eq
 800b2b4:	2200      	moveq	r2, #0
 800b2b6:	f002 0201 	andne.w	r2, r2, #1
 800b2ba:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800b2be:	4283      	cmp	r3, r0
 800b2c0:	bf0c      	ite	eq
 800b2c2:	2200      	moveq	r2, #0
 800b2c4:	f002 0201 	andne.w	r2, r2, #1
 800b2c8:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800b2cc:	428b      	cmp	r3, r1
 800b2ce:	bf0c      	ite	eq
 800b2d0:	2200      	moveq	r2, #0
 800b2d2:	f002 0201 	andne.w	r2, r2, #1
 800b2d6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800b2da:	42ab      	cmp	r3, r5
 800b2dc:	bf0c      	ite	eq
 800b2de:	2200      	moveq	r2, #0
 800b2e0:	f002 0201 	andne.w	r2, r2, #1
 800b2e4:	4283      	cmp	r3, r0
 800b2e6:	bf0c      	ite	eq
 800b2e8:	2200      	moveq	r2, #0
 800b2ea:	f002 0201 	andne.w	r2, r2, #1
 800b2ee:	428b      	cmp	r3, r1
 800b2f0:	bf0c      	ite	eq
 800b2f2:	2200      	moveq	r2, #0
 800b2f4:	f002 0201 	andne.w	r2, r2, #1
 800b2f8:	b11a      	cbz	r2, 800b302 <HAL_TIM_ConfigClockSource+0x2ca>
 800b2fa:	4a0c      	ldr	r2, [pc, #48]	; (800b32c <HAL_TIM_ConfigClockSource+0x2f4>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	f040 8158 	bne.w	800b5b2 <HAL_TIM_ConfigClockSource+0x57a>
  __HAL_UNLOCK(htim);
 800b302:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800b304:	2201      	movs	r2, #1
  return HAL_OK;
 800b306:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800b308:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b30c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b310:	bd70      	pop	{r4, r5, r6, pc}
 800b312:	bf00      	nop
 800b314:	fffe0088 	.word	0xfffe0088
 800b318:	40010000 	.word	0x40010000
 800b31c:	40000400 	.word	0x40000400
 800b320:	40000800 	.word	0x40000800
 800b324:	40010400 	.word	0x40010400
 800b328:	40000c00 	.word	0x40000c00
 800b32c:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b330:	4aa3      	ldr	r2, [pc, #652]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x588>)
 800b332:	49a4      	ldr	r1, [pc, #656]	; (800b5c4 <HAL_TIM_ConfigClockSource+0x58c>)
 800b334:	4293      	cmp	r3, r2
 800b336:	bf18      	it	ne
 800b338:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b33c:	48a2      	ldr	r0, [pc, #648]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x590>)
 800b33e:	bf14      	ite	ne
 800b340:	2201      	movne	r2, #1
 800b342:	2200      	moveq	r2, #0
 800b344:	428b      	cmp	r3, r1
 800b346:	bf0c      	ite	eq
 800b348:	2200      	moveq	r2, #0
 800b34a:	f002 0201 	andne.w	r2, r2, #1
 800b34e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b352:	4283      	cmp	r3, r0
 800b354:	bf0c      	ite	eq
 800b356:	2200      	moveq	r2, #0
 800b358:	f002 0201 	andne.w	r2, r2, #1
 800b35c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800b360:	428b      	cmp	r3, r1
 800b362:	bf0c      	ite	eq
 800b364:	2200      	moveq	r2, #0
 800b366:	f002 0201 	andne.w	r2, r2, #1
 800b36a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800b36e:	4283      	cmp	r3, r0
 800b370:	bf0c      	ite	eq
 800b372:	2200      	moveq	r2, #0
 800b374:	f002 0201 	andne.w	r2, r2, #1
 800b378:	428b      	cmp	r3, r1
 800b37a:	bf0c      	ite	eq
 800b37c:	2200      	moveq	r2, #0
 800b37e:	f002 0201 	andne.w	r2, r2, #1
 800b382:	b11a      	cbz	r2, 800b38c <HAL_TIM_ConfigClockSource+0x354>
 800b384:	4a91      	ldr	r2, [pc, #580]	; (800b5cc <HAL_TIM_ConfigClockSource+0x594>)
 800b386:	4293      	cmp	r3, r2
 800b388:	f040 80de 	bne.w	800b548 <HAL_TIM_ConfigClockSource+0x510>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b38c:	68ab      	ldr	r3, [r5, #8]
 800b38e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b392:	f040 8108 	bne.w	800b5a6 <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b396:	686b      	ldr	r3, [r5, #4]
 800b398:	2b0a      	cmp	r3, #10
 800b39a:	bf18      	it	ne
 800b39c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b3a0:	d003      	beq.n	800b3aa <HAL_TIM_ConfigClockSource+0x372>
 800b3a2:	f033 0302 	bics.w	r3, r3, #2
 800b3a6:	f040 80c9 	bne.w	800b53c <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b3aa:	68e8      	ldr	r0, [r5, #12]
 800b3ac:	280f      	cmp	r0, #15
 800b3ae:	f200 80d1 	bhi.w	800b554 <HAL_TIM_ConfigClockSource+0x51c>
      TIM_ETR_SetConfig(htim->Instance,
 800b3b2:	6822      	ldr	r2, [r4, #0]
 800b3b4:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800b3b6:	6891      	ldr	r1, [r2, #8]
 800b3b8:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3ba:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800b3be:	432b      	orrs	r3, r5
 800b3c0:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3c2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800b3c6:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800b3c8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800b3ce:	6093      	str	r3, [r2, #8]
      break;
 800b3d0:	e797      	b.n	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
  __HAL_LOCK(htim);
 800b3d2:	2002      	movs	r0, #2
}
 800b3d4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800b3d6:	2a10      	cmp	r2, #16
 800b3d8:	d004      	beq.n	800b3e4 <HAL_TIM_ConfigClockSource+0x3ac>
 800b3da:	d96d      	bls.n	800b4b8 <HAL_TIM_ConfigClockSource+0x480>
 800b3dc:	2a20      	cmp	r2, #32
 800b3de:	d001      	beq.n	800b3e4 <HAL_TIM_ConfigClockSource+0x3ac>
 800b3e0:	2a30      	cmp	r2, #48	; 0x30
 800b3e2:	d18e      	bne.n	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b3e4:	4976      	ldr	r1, [pc, #472]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x588>)
 800b3e6:	4877      	ldr	r0, [pc, #476]	; (800b5c4 <HAL_TIM_ConfigClockSource+0x58c>)
 800b3e8:	428b      	cmp	r3, r1
 800b3ea:	bf18      	it	ne
 800b3ec:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b3f0:	4e75      	ldr	r6, [pc, #468]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x590>)
 800b3f2:	bf14      	ite	ne
 800b3f4:	2101      	movne	r1, #1
 800b3f6:	2100      	moveq	r1, #0
 800b3f8:	4283      	cmp	r3, r0
 800b3fa:	bf0c      	ite	eq
 800b3fc:	2100      	moveq	r1, #0
 800b3fe:	f001 0101 	andne.w	r1, r1, #1
 800b402:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800b406:	42b3      	cmp	r3, r6
 800b408:	bf0c      	ite	eq
 800b40a:	2100      	moveq	r1, #0
 800b40c:	f001 0101 	andne.w	r1, r1, #1
 800b410:	4283      	cmp	r3, r0
 800b412:	bf0c      	ite	eq
 800b414:	2100      	moveq	r1, #0
 800b416:	f001 0101 	andne.w	r1, r1, #1
 800b41a:	b111      	cbz	r1, 800b422 <HAL_TIM_ConfigClockSource+0x3ea>
 800b41c:	496c      	ldr	r1, [pc, #432]	; (800b5d0 <HAL_TIM_ConfigClockSource+0x598>)
 800b41e:	428b      	cmp	r3, r1
 800b420:	d153      	bne.n	800b4ca <HAL_TIM_ConfigClockSource+0x492>
  tmpsmcr = TIMx->SMCR;
 800b422:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b424:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800b428:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b42c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800b42e:	609a      	str	r2, [r3, #8]
 800b430:	e767      	b.n	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b432:	4a63      	ldr	r2, [pc, #396]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x588>)
 800b434:	4963      	ldr	r1, [pc, #396]	; (800b5c4 <HAL_TIM_ConfigClockSource+0x58c>)
 800b436:	4293      	cmp	r3, r2
 800b438:	bf18      	it	ne
 800b43a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b43e:	4862      	ldr	r0, [pc, #392]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x590>)
 800b440:	bf14      	ite	ne
 800b442:	2201      	movne	r2, #1
 800b444:	2200      	moveq	r2, #0
 800b446:	428b      	cmp	r3, r1
 800b448:	bf0c      	ite	eq
 800b44a:	2200      	moveq	r2, #0
 800b44c:	f002 0201 	andne.w	r2, r2, #1
 800b450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b454:	4283      	cmp	r3, r0
 800b456:	bf0c      	ite	eq
 800b458:	2200      	moveq	r2, #0
 800b45a:	f002 0201 	andne.w	r2, r2, #1
 800b45e:	428b      	cmp	r3, r1
 800b460:	bf0c      	ite	eq
 800b462:	2200      	moveq	r2, #0
 800b464:	f002 0201 	andne.w	r2, r2, #1
 800b468:	b112      	cbz	r2, 800b470 <HAL_TIM_ConfigClockSource+0x438>
 800b46a:	4a59      	ldr	r2, [pc, #356]	; (800b5d0 <HAL_TIM_ConfigClockSource+0x598>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d126      	bne.n	800b4be <HAL_TIM_ConfigClockSource+0x486>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b470:	686b      	ldr	r3, [r5, #4]
 800b472:	2b0a      	cmp	r3, #10
 800b474:	bf18      	it	ne
 800b476:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b47a:	d002      	beq.n	800b482 <HAL_TIM_ConfigClockSource+0x44a>
 800b47c:	f033 0302 	bics.w	r3, r3, #2
 800b480:	d144      	bne.n	800b50c <HAL_TIM_ConfigClockSource+0x4d4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b482:	68ee      	ldr	r6, [r5, #12]
 800b484:	2e0f      	cmp	r6, #15
 800b486:	d873      	bhi.n	800b570 <HAL_TIM_ConfigClockSource+0x538>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800b48c:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b48e:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b490:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b494:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800b498:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b49a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b49c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b49e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b4a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4a8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b4aa:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4b0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800b4b4:	609a      	str	r2, [r3, #8]
 800b4b6:	e724      	b.n	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800b4b8:	2a00      	cmp	r2, #0
 800b4ba:	d093      	beq.n	800b3e4 <HAL_TIM_ConfigClockSource+0x3ac>
 800b4bc:	e721      	b.n	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b4be:	f241 2155 	movw	r1, #4693	; 0x1255
 800b4c2:	4844      	ldr	r0, [pc, #272]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b4c4:	f7f7 f8c4 	bl	8002650 <assert_failed>
 800b4c8:	e7d2      	b.n	800b470 <HAL_TIM_ConfigClockSource+0x438>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b4ca:	f241 2168 	movw	r1, #4712	; 0x1268
 800b4ce:	4841      	ldr	r0, [pc, #260]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b4d0:	f7f7 f8be 	bl	8002650 <assert_failed>
 800b4d4:	682a      	ldr	r2, [r5, #0]
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	e7a3      	b.n	800b422 <HAL_TIM_ConfigClockSource+0x3ea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b4da:	f241 2135 	movw	r1, #4661	; 0x1235
 800b4de:	483d      	ldr	r0, [pc, #244]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b4e0:	f7f7 f8b6 	bl	8002650 <assert_failed>
 800b4e4:	e690      	b.n	800b208 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b4e6:	f241 2145 	movw	r1, #4677	; 0x1245
 800b4ea:	483a      	ldr	r0, [pc, #232]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b4ec:	f7f7 f8b0 	bl	8002650 <assert_failed>
 800b4f0:	e5f8      	b.n	800b0e4 <HAL_TIM_ConfigClockSource+0xac>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b4f2:	f241 2121 	movw	r1, #4641	; 0x1221
 800b4f6:	4837      	ldr	r0, [pc, #220]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b4f8:	f7f7 f8aa 	bl	8002650 <assert_failed>
 800b4fc:	e641      	b.n	800b182 <HAL_TIM_ConfigClockSource+0x14a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b4fe:	f241 11f6 	movw	r1, #4598	; 0x11f6
 800b502:	4834      	ldr	r0, [pc, #208]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b504:	f7f7 f8a4 	bl	8002650 <assert_failed>
 800b508:	682a      	ldr	r2, [r5, #0]
 800b50a:	e5b6      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b50c:	f241 2158 	movw	r1, #4696	; 0x1258
 800b510:	4830      	ldr	r0, [pc, #192]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b512:	f7f7 f89d 	bl	8002650 <assert_failed>
 800b516:	e7b4      	b.n	800b482 <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b518:	f241 2125 	movw	r1, #4645	; 0x1225
 800b51c:	482d      	ldr	r0, [pc, #180]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b51e:	f7f7 f897 	bl	8002650 <assert_failed>
 800b522:	e63d      	b.n	800b1a0 <HAL_TIM_ConfigClockSource+0x168>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b524:	f241 2148 	movw	r1, #4680	; 0x1248
 800b528:	482a      	ldr	r0, [pc, #168]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b52a:	f7f7 f891 	bl	8002650 <assert_failed>
 800b52e:	e5e3      	b.n	800b0f8 <HAL_TIM_ConfigClockSource+0xc0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b530:	f241 2138 	movw	r1, #4664	; 0x1238
 800b534:	4827      	ldr	r0, [pc, #156]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b536:	f7f7 f88b 	bl	8002650 <assert_failed>
 800b53a:	e66f      	b.n	800b21c <HAL_TIM_ConfigClockSource+0x1e4>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b53c:	f241 210d 	movw	r1, #4621	; 0x120d
 800b540:	4824      	ldr	r0, [pc, #144]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b542:	f7f7 f885 	bl	8002650 <assert_failed>
 800b546:	e730      	b.n	800b3aa <HAL_TIM_ConfigClockSource+0x372>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b548:	f241 2109 	movw	r1, #4617	; 0x1209
 800b54c:	4821      	ldr	r0, [pc, #132]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b54e:	f7f7 f87f 	bl	8002650 <assert_failed>
 800b552:	e71b      	b.n	800b38c <HAL_TIM_ConfigClockSource+0x354>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b554:	481f      	ldr	r0, [pc, #124]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b556:	f241 210e 	movw	r1, #4622	; 0x120e
 800b55a:	f7f7 f879 	bl	8002650 <assert_failed>
 800b55e:	68e8      	ldr	r0, [r5, #12]
 800b560:	e727      	b.n	800b3b2 <HAL_TIM_ConfigClockSource+0x37a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b562:	481c      	ldr	r0, [pc, #112]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b564:	f241 2126 	movw	r1, #4646	; 0x1226
 800b568:	f7f7 f872 	bl	8002650 <assert_failed>
 800b56c:	68e8      	ldr	r0, [r5, #12]
 800b56e:	e61b      	b.n	800b1a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b570:	f241 2159 	movw	r1, #4697	; 0x1259
 800b574:	4817      	ldr	r0, [pc, #92]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b576:	f7f7 f86b 	bl	8002650 <assert_failed>
 800b57a:	68ee      	ldr	r6, [r5, #12]
 800b57c:	e784      	b.n	800b488 <HAL_TIM_ConfigClockSource+0x450>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b57e:	f241 2149 	movw	r1, #4681	; 0x1249
 800b582:	4814      	ldr	r0, [pc, #80]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b584:	f7f7 f864 	bl	8002650 <assert_failed>
 800b588:	68ee      	ldr	r6, [r5, #12]
 800b58a:	e5b9      	b.n	800b100 <HAL_TIM_ConfigClockSource+0xc8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b58c:	f241 2139 	movw	r1, #4665	; 0x1239
 800b590:	4810      	ldr	r0, [pc, #64]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b592:	f7f7 f85d 	bl	8002650 <assert_failed>
 800b596:	68ee      	ldr	r6, [r5, #12]
 800b598:	e644      	b.n	800b224 <HAL_TIM_ConfigClockSource+0x1ec>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b59a:	f241 2124 	movw	r1, #4644	; 0x1224
 800b59e:	480d      	ldr	r0, [pc, #52]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b5a0:	f7f7 f856 	bl	8002650 <assert_failed>
 800b5a4:	e5f2      	b.n	800b18c <HAL_TIM_ConfigClockSource+0x154>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b5a6:	f241 210c 	movw	r1, #4620	; 0x120c
 800b5aa:	480a      	ldr	r0, [pc, #40]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b5ac:	f7f7 f850 	bl	8002650 <assert_failed>
 800b5b0:	e6f1      	b.n	800b396 <HAL_TIM_ConfigClockSource+0x35e>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b5b2:	f241 2102 	movw	r1, #4610	; 0x1202
 800b5b6:	4807      	ldr	r0, [pc, #28]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b5b8:	f7f7 f84a 	bl	8002650 <assert_failed>
 800b5bc:	e6a1      	b.n	800b302 <HAL_TIM_ConfigClockSource+0x2ca>
 800b5be:	bf00      	nop
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40000400 	.word	0x40000400
 800b5c8:	40000800 	.word	0x40000800
 800b5cc:	40001800 	.word	0x40001800
 800b5d0:	40010400 	.word	0x40010400
 800b5d4:	080234e4 	.word	0x080234e4

0800b5d8 <HAL_TIM_SlaveConfigSynchro>:
{
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800b5dc:	4b39      	ldr	r3, [pc, #228]	; (800b6c4 <HAL_TIM_SlaveConfigSynchro+0xec>)
 800b5de:	483a      	ldr	r0, [pc, #232]	; (800b6c8 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800b5e0:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800b5e2:	6822      	ldr	r2, [r4, #0]
 800b5e4:	4939      	ldr	r1, [pc, #228]	; (800b6cc <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	bf18      	it	ne
 800b5ea:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800b5ee:	4e38      	ldr	r6, [pc, #224]	; (800b6d0 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800b5f0:	bf14      	ite	ne
 800b5f2:	2301      	movne	r3, #1
 800b5f4:	2300      	moveq	r3, #0
 800b5f6:	4282      	cmp	r2, r0
 800b5f8:	bf0c      	ite	eq
 800b5fa:	2300      	moveq	r3, #0
 800b5fc:	f003 0301 	andne.w	r3, r3, #1
 800b600:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800b604:	428a      	cmp	r2, r1
 800b606:	bf0c      	ite	eq
 800b608:	2300      	moveq	r3, #0
 800b60a:	f003 0301 	andne.w	r3, r3, #1
 800b60e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800b612:	42b2      	cmp	r2, r6
 800b614:	bf0c      	ite	eq
 800b616:	2300      	moveq	r3, #0
 800b618:	f003 0301 	andne.w	r3, r3, #1
 800b61c:	4282      	cmp	r2, r0
 800b61e:	bf0c      	ite	eq
 800b620:	2300      	moveq	r3, #0
 800b622:	f003 0301 	andne.w	r3, r3, #1
 800b626:	428a      	cmp	r2, r1
 800b628:	bf0c      	ite	eq
 800b62a:	2300      	moveq	r3, #0
 800b62c:	f003 0301 	andne.w	r3, r3, #1
 800b630:	b113      	cbz	r3, 800b638 <HAL_TIM_SlaveConfigSynchro+0x60>
 800b632:	4b28      	ldr	r3, [pc, #160]	; (800b6d4 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800b634:	429a      	cmp	r2, r3
 800b636:	d138      	bne.n	800b6aa <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	1f1a      	subs	r2, r3, #4
 800b63c:	2a03      	cmp	r2, #3
 800b63e:	d902      	bls.n	800b646 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800b640:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800b644:	d12b      	bne.n	800b69e <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800b646:	686b      	ldr	r3, [r5, #4]
 800b648:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b64c:	2b40      	cmp	r3, #64	; 0x40
 800b64e:	d000      	beq.n	800b652 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800b650:	bb8b      	cbnz	r3, 800b6b6 <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800b652:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b656:	2b01      	cmp	r3, #1
 800b658:	d01f      	beq.n	800b69a <HAL_TIM_SlaveConfigSynchro+0xc2>
 800b65a:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b65c:	2302      	movs	r3, #2
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b65e:	4629      	mov	r1, r5
 800b660:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800b662:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b66a:	f7ff f9b3 	bl	800a9d4 <TIM_SlaveTimer_SetConfig>
 800b66e:	b968      	cbnz	r0, 800b68c <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b670:	6823      	ldr	r3, [r4, #0]
 800b672:	68da      	ldr	r2, [r3, #12]
 800b674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b678:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b67a:	68da      	ldr	r2, [r3, #12]
 800b67c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b680:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800b682:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b686:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b68a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(htim);
 800b68c:	2300      	movs	r3, #0
      htim->State = HAL_TIM_STATE_READY;
 800b68e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800b692:	4630      	mov	r0, r6
    __HAL_UNLOCK(htim);
 800b694:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b698:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800b69a:	2002      	movs	r0, #2
}
 800b69c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800b69e:	f241 21a8 	movw	r1, #4776	; 0x12a8
 800b6a2:	480d      	ldr	r0, [pc, #52]	; (800b6d8 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800b6a4:	f7f6 ffd4 	bl	8002650 <assert_failed>
 800b6a8:	e7cd      	b.n	800b646 <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800b6aa:	f241 21a7 	movw	r1, #4775	; 0x12a7
 800b6ae:	480a      	ldr	r0, [pc, #40]	; (800b6d8 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800b6b0:	f7f6 ffce 	bl	8002650 <assert_failed>
 800b6b4:	e7c0      	b.n	800b638 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800b6b6:	f241 21a9 	movw	r1, #4777	; 0x12a9
 800b6ba:	4807      	ldr	r0, [pc, #28]	; (800b6d8 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800b6bc:	f7f6 ffc8 	bl	8002650 <assert_failed>
 800b6c0:	e7c7      	b.n	800b652 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800b6c2:	bf00      	nop
 800b6c4:	40010000 	.word	0x40010000
 800b6c8:	40000400 	.word	0x40000400
 800b6cc:	40000800 	.word	0x40000800
 800b6d0:	40000c00 	.word	0x40000c00
 800b6d4:	40001800 	.word	0x40001800
 800b6d8:	080234e4 	.word	0x080234e4

0800b6dc <HAL_TIM_OC_DelayElapsedCallback>:
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop

0800b6e0 <TIM_DMACaptureCplt>:
{
 800b6e0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800b6e4:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b6e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800b6e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b6ec:	4282      	cmp	r2, r0
 800b6ee:	d00f      	beq.n	800b710 <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b6f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b6f2:	4283      	cmp	r3, r0
 800b6f4:	d01b      	beq.n	800b72e <TIM_DMACaptureCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b6f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b6f8:	4283      	cmp	r3, r0
 800b6fa:	d010      	beq.n	800b71e <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b6fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b6fe:	4283      	cmp	r3, r0
 800b700:	d005      	beq.n	800b70e <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 800b702:	4620      	mov	r0, r4
 800b704:	f7f5 ff5a 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b708:	2300      	movs	r3, #0
 800b70a:	7723      	strb	r3, [r4, #28]
}
 800b70c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b70e:	2308      	movs	r3, #8
 800b710:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800b712:	4620      	mov	r0, r4
 800b714:	f7f5 ff52 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b718:	2300      	movs	r3, #0
 800b71a:	7723      	strb	r3, [r4, #28]
}
 800b71c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b71e:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureCallback(htim);
 800b720:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b722:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800b724:	f7f5 ff4a 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b728:	2300      	movs	r3, #0
 800b72a:	7723      	strb	r3, [r4, #28]
}
 800b72c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b72e:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureCallback(htim);
 800b730:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b732:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800b734:	f7f5 ff42 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b738:	2300      	movs	r3, #0
 800b73a:	7723      	strb	r3, [r4, #28]
}
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	bf00      	nop

0800b740 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop

0800b744 <TIM_DMACaptureHalfCplt>:
{
 800b744:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b746:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800b748:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b74a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800b74c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b750:	4282      	cmp	r2, r0
 800b752:	d00f      	beq.n	800b774 <TIM_DMACaptureHalfCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b756:	4283      	cmp	r3, r0
 800b758:	d01b      	beq.n	800b792 <TIM_DMACaptureHalfCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b75a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b75c:	4283      	cmp	r3, r0
 800b75e:	d010      	beq.n	800b782 <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b760:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b762:	4283      	cmp	r3, r0
 800b764:	d005      	beq.n	800b772 <TIM_DMACaptureHalfCplt+0x2e>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b766:	4620      	mov	r0, r4
 800b768:	f7ff ffea 	bl	800b740 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b76c:	2300      	movs	r3, #0
 800b76e:	7723      	strb	r3, [r4, #28]
}
 800b770:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b772:	2308      	movs	r3, #8
 800b774:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b776:	4620      	mov	r0, r4
 800b778:	f7ff ffe2 	bl	800b740 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b77c:	2300      	movs	r3, #0
 800b77e:	7723      	strb	r3, [r4, #28]
}
 800b780:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b782:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b784:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b786:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b788:	f7ff ffda 	bl	800b740 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b78c:	2300      	movs	r3, #0
 800b78e:	7723      	strb	r3, [r4, #28]
}
 800b790:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b792:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b794:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b796:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b798:	f7ff ffd2 	bl	800b740 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b79c:	2300      	movs	r3, #0
 800b79e:	7723      	strb	r3, [r4, #28]
}
 800b7a0:	bd10      	pop	{r4, pc}
 800b7a2:	bf00      	nop

0800b7a4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop

0800b7a8 <HAL_TIM_TriggerCallback>:
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop

0800b7ac <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b7ac:	6803      	ldr	r3, [r0, #0]
 800b7ae:	691a      	ldr	r2, [r3, #16]
 800b7b0:	0791      	lsls	r1, r2, #30
{
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b7b6:	d502      	bpl.n	800b7be <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	0792      	lsls	r2, r2, #30
 800b7bc:	d468      	bmi.n	800b890 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b7be:	691a      	ldr	r2, [r3, #16]
 800b7c0:	0752      	lsls	r2, r2, #29
 800b7c2:	d502      	bpl.n	800b7ca <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b7c4:	68da      	ldr	r2, [r3, #12]
 800b7c6:	0750      	lsls	r0, r2, #29
 800b7c8:	d44f      	bmi.n	800b86a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b7ca:	691a      	ldr	r2, [r3, #16]
 800b7cc:	0711      	lsls	r1, r2, #28
 800b7ce:	d502      	bpl.n	800b7d6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7d0:	68da      	ldr	r2, [r3, #12]
 800b7d2:	0712      	lsls	r2, r2, #28
 800b7d4:	d437      	bmi.n	800b846 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7d6:	691a      	ldr	r2, [r3, #16]
 800b7d8:	06d0      	lsls	r0, r2, #27
 800b7da:	d502      	bpl.n	800b7e2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7dc:	68da      	ldr	r2, [r3, #12]
 800b7de:	06d1      	lsls	r1, r2, #27
 800b7e0:	d41e      	bmi.n	800b820 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7e2:	691a      	ldr	r2, [r3, #16]
 800b7e4:	07d2      	lsls	r2, r2, #31
 800b7e6:	d502      	bpl.n	800b7ee <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7e8:	68da      	ldr	r2, [r3, #12]
 800b7ea:	07d0      	lsls	r0, r2, #31
 800b7ec:	d469      	bmi.n	800b8c2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b7ee:	691a      	ldr	r2, [r3, #16]
 800b7f0:	0611      	lsls	r1, r2, #24
 800b7f2:	d502      	bpl.n	800b7fa <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7f4:	68da      	ldr	r2, [r3, #12]
 800b7f6:	0612      	lsls	r2, r2, #24
 800b7f8:	d46b      	bmi.n	800b8d2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b7fa:	691a      	ldr	r2, [r3, #16]
 800b7fc:	05d0      	lsls	r0, r2, #23
 800b7fe:	d502      	bpl.n	800b806 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b800:	68da      	ldr	r2, [r3, #12]
 800b802:	0611      	lsls	r1, r2, #24
 800b804:	d46d      	bmi.n	800b8e2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b806:	691a      	ldr	r2, [r3, #16]
 800b808:	0652      	lsls	r2, r2, #25
 800b80a:	d502      	bpl.n	800b812 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b80c:	68da      	ldr	r2, [r3, #12]
 800b80e:	0650      	lsls	r0, r2, #25
 800b810:	d46f      	bmi.n	800b8f2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b812:	691a      	ldr	r2, [r3, #16]
 800b814:	0691      	lsls	r1, r2, #26
 800b816:	d502      	bpl.n	800b81e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b818:	68da      	ldr	r2, [r3, #12]
 800b81a:	0692      	lsls	r2, r2, #26
 800b81c:	d449      	bmi.n	800b8b2 <HAL_TIM_IRQHandler+0x106>
}
 800b81e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b820:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b824:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800b826:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b828:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b82a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b82c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b82e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b832:	d16f      	bne.n	800b914 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b834:	f7ff ff52 	bl	800b6dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b838:	4620      	mov	r0, r4
 800b83a:	f7ff ffb3 	bl	800b7a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b83e:	2200      	movs	r2, #0
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	7722      	strb	r2, [r4, #28]
 800b844:	e7cd      	b.n	800b7e2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b846:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b84a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800b84c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b84e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b850:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b852:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b854:	079b      	lsls	r3, r3, #30
 800b856:	d15a      	bne.n	800b90e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b858:	f7ff ff40 	bl	800b6dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7ff ffa1 	bl	800b7a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b862:	2200      	movs	r2, #0
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	7722      	strb	r2, [r4, #28]
 800b868:	e7b5      	b.n	800b7d6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b86a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b86e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800b870:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b872:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b874:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b876:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b878:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b87c:	d144      	bne.n	800b908 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b87e:	f7ff ff2d 	bl	800b6dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b882:	4620      	mov	r0, r4
 800b884:	f7ff ff8e 	bl	800b7a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b888:	2200      	movs	r2, #0
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	7722      	strb	r2, [r4, #28]
 800b88e:	e79c      	b.n	800b7ca <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b890:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b894:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b896:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b898:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b89a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b89c:	0799      	lsls	r1, r3, #30
 800b89e:	d130      	bne.n	800b902 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8a0:	f7ff ff1c 	bl	800b6dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f7ff ff7d 	bl	800b7a4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	6823      	ldr	r3, [r4, #0]
 800b8ae:	7722      	strb	r2, [r4, #28]
 800b8b0:	e785      	b.n	800b7be <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8b2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800b8b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8b8:	611a      	str	r2, [r3, #16]
}
 800b8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b8be:	f001 bc17 	b.w	800d0f0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b8c2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b8c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8ca:	f7f5 fec7 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	e78d      	b.n	800b7ee <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b8d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800b8d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b8d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b8da:	f001 fc0b 	bl	800d0f4 <HAL_TIMEx_BreakCallback>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	e78b      	b.n	800b7fa <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800b8e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b8ea:	f001 fc05 	bl	800d0f8 <HAL_TIMEx_Break2Callback>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	e789      	b.n	800b806 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800b8f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b8fa:	f7ff ff55 	bl	800b7a8 <HAL_TIM_TriggerCallback>
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	e787      	b.n	800b812 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800b902:	f7f5 fe5b 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
 800b906:	e7d0      	b.n	800b8aa <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800b908:	f7f5 fe58 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
 800b90c:	e7bc      	b.n	800b888 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800b90e:	f7f5 fe55 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
 800b912:	e7a6      	b.n	800b862 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800b914:	f7f5 fe52 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
 800b918:	e791      	b.n	800b83e <HAL_TIM_IRQHandler+0x92>
 800b91a:	bf00      	nop

0800b91c <HAL_TIM_ErrorCallback>:
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop

0800b920 <TIM_DMAError>:
{
 800b920:	b508      	push	{r3, lr}
  htim->State = HAL_TIM_STATE_READY;
 800b922:	2201      	movs	r2, #1
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b924:	6b83      	ldr	r3, [r0, #56]	; 0x38
  HAL_TIM_ErrorCallback(htim);
 800b926:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800b928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800b92c:	f7ff fff6 	bl	800b91c <HAL_TIM_ErrorCallback>
}
 800b930:	bd08      	pop	{r3, pc}
 800b932:	bf00      	nop

0800b934 <TIM_Base_SetConfig>:
{
 800b934:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b936:	4e32      	ldr	r6, [pc, #200]	; (800ba00 <TIM_Base_SetConfig+0xcc>)
 800b938:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b93c:	4f31      	ldr	r7, [pc, #196]	; (800ba04 <TIM_Base_SetConfig+0xd0>)
 800b93e:	eba0 0606 	sub.w	r6, r0, r6
  tmpcr1 = TIMx->CR1;
 800b942:	6803      	ldr	r3, [r0, #0]
 800b944:	eba0 0707 	sub.w	r7, r0, r7
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b948:	fab6 f686 	clz	r6, r6
 800b94c:	fab7 f787 	clz	r7, r7
 800b950:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800b954:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800b958:	d025      	beq.n	800b9a6 <TIM_Base_SetConfig+0x72>
 800b95a:	bb26      	cbnz	r6, 800b9a6 <TIM_Base_SetConfig+0x72>
 800b95c:	4a2a      	ldr	r2, [pc, #168]	; (800ba08 <TIM_Base_SetConfig+0xd4>)
 800b95e:	4290      	cmp	r0, r2
 800b960:	d03e      	beq.n	800b9e0 <TIM_Base_SetConfig+0xac>
 800b962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b966:	4290      	cmp	r0, r2
 800b968:	d03a      	beq.n	800b9e0 <TIM_Base_SetConfig+0xac>
 800b96a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b96e:	4290      	cmp	r0, r2
 800b970:	d03b      	beq.n	800b9ea <TIM_Base_SetConfig+0xb6>
 800b972:	2f00      	cmp	r7, #0
 800b974:	d139      	bne.n	800b9ea <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b976:	4a25      	ldr	r2, [pc, #148]	; (800ba0c <TIM_Base_SetConfig+0xd8>)
 800b978:	4290      	cmp	r0, r2
 800b97a:	d018      	beq.n	800b9ae <TIM_Base_SetConfig+0x7a>
 800b97c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b980:	4290      	cmp	r0, r2
 800b982:	d014      	beq.n	800b9ae <TIM_Base_SetConfig+0x7a>
 800b984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b988:	4290      	cmp	r0, r2
 800b98a:	d010      	beq.n	800b9ae <TIM_Base_SetConfig+0x7a>
 800b98c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b990:	4290      	cmp	r0, r2
 800b992:	d00c      	beq.n	800b9ae <TIM_Base_SetConfig+0x7a>
 800b994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b998:	4290      	cmp	r0, r2
 800b99a:	d008      	beq.n	800b9ae <TIM_Base_SetConfig+0x7a>
 800b99c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9a0:	4290      	cmp	r0, r2
 800b9a2:	d108      	bne.n	800b9b6 <TIM_Base_SetConfig+0x82>
 800b9a4:	e003      	b.n	800b9ae <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b9aa:	684d      	ldr	r5, [r1, #4]
 800b9ac:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9b2:	68cd      	ldr	r5, [r1, #12]
 800b9b4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9b6:	694a      	ldr	r2, [r1, #20]
 800b9b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9bc:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9be:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800b9c0:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800b9c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9c4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b9c6:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9c8:	b926      	cbnz	r6, 800b9d4 <TIM_Base_SetConfig+0xa0>
 800b9ca:	b91f      	cbnz	r7, 800b9d4 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800b9cc:	2301      	movs	r3, #1
}
 800b9ce:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800b9d0:	6143      	str	r3, [r0, #20]
}
 800b9d2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800b9d4:	690b      	ldr	r3, [r1, #16]
 800b9d6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800b9d8:	2301      	movs	r3, #1
}
 800b9da:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800b9dc:	6143      	str	r3, [r0, #20]
}
 800b9de:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b9e4:	684a      	ldr	r2, [r1, #4]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	e7e1      	b.n	800b9ae <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9ea:	4a09      	ldr	r2, [pc, #36]	; (800ba10 <TIM_Base_SetConfig+0xdc>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b9f0:	684c      	ldr	r4, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9f2:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800b9f4:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9f8:	d0d9      	beq.n	800b9ae <TIM_Base_SetConfig+0x7a>
 800b9fa:	2f00      	cmp	r7, #0
 800b9fc:	d1d7      	bne.n	800b9ae <TIM_Base_SetConfig+0x7a>
 800b9fe:	e7ba      	b.n	800b976 <TIM_Base_SetConfig+0x42>
 800ba00:	40010000 	.word	0x40010000
 800ba04:	40010400 	.word	0x40010400
 800ba08:	40000400 	.word	0x40000400
 800ba0c:	40014000 	.word	0x40014000
 800ba10:	40000c00 	.word	0x40000c00

0800ba14 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800ba14:	2800      	cmp	r0, #0
 800ba16:	f000 8097 	beq.w	800bb48 <HAL_TIM_Base_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ba1a:	6802      	ldr	r2, [r0, #0]
 800ba1c:	4956      	ldr	r1, [pc, #344]	; (800bb78 <HAL_TIM_Base_Init+0x164>)
{
 800ba1e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ba20:	4b56      	ldr	r3, [pc, #344]	; (800bb7c <HAL_TIM_Base_Init+0x168>)
 800ba22:	4604      	mov	r4, r0
 800ba24:	4856      	ldr	r0, [pc, #344]	; (800bb80 <HAL_TIM_Base_Init+0x16c>)
 800ba26:	429a      	cmp	r2, r3
 800ba28:	bf18      	it	ne
 800ba2a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ba2e:	4d55      	ldr	r5, [pc, #340]	; (800bb84 <HAL_TIM_Base_Init+0x170>)
 800ba30:	bf14      	ite	ne
 800ba32:	2301      	movne	r3, #1
 800ba34:	2300      	moveq	r3, #0
 800ba36:	4282      	cmp	r2, r0
 800ba38:	bf0c      	ite	eq
 800ba3a:	2300      	moveq	r3, #0
 800ba3c:	f003 0301 	andne.w	r3, r3, #1
 800ba40:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800ba44:	428a      	cmp	r2, r1
 800ba46:	bf0c      	ite	eq
 800ba48:	2300      	moveq	r3, #0
 800ba4a:	f003 0301 	andne.w	r3, r3, #1
 800ba4e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ba52:	42aa      	cmp	r2, r5
 800ba54:	bf0c      	ite	eq
 800ba56:	2300      	moveq	r3, #0
 800ba58:	f003 0301 	andne.w	r3, r3, #1
 800ba5c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800ba60:	4282      	cmp	r2, r0
 800ba62:	bf0c      	ite	eq
 800ba64:	2300      	moveq	r3, #0
 800ba66:	f003 0301 	andne.w	r3, r3, #1
 800ba6a:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800ba6e:	428a      	cmp	r2, r1
 800ba70:	bf0c      	ite	eq
 800ba72:	2300      	moveq	r3, #0
 800ba74:	f003 0301 	andne.w	r3, r3, #1
 800ba78:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800ba7c:	42aa      	cmp	r2, r5
 800ba7e:	bf0c      	ite	eq
 800ba80:	2300      	moveq	r3, #0
 800ba82:	f003 0301 	andne.w	r3, r3, #1
 800ba86:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800ba8a:	4282      	cmp	r2, r0
 800ba8c:	bf0c      	ite	eq
 800ba8e:	2300      	moveq	r3, #0
 800ba90:	f003 0301 	andne.w	r3, r3, #1
 800ba94:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800ba98:	428a      	cmp	r2, r1
 800ba9a:	bf0c      	ite	eq
 800ba9c:	2300      	moveq	r3, #0
 800ba9e:	f003 0301 	andne.w	r3, r3, #1
 800baa2:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800baa6:	42aa      	cmp	r2, r5
 800baa8:	bf0c      	ite	eq
 800baaa:	2300      	moveq	r3, #0
 800baac:	f003 0301 	andne.w	r3, r3, #1
 800bab0:	4282      	cmp	r2, r0
 800bab2:	bf0c      	ite	eq
 800bab4:	2300      	moveq	r3, #0
 800bab6:	f003 0301 	andne.w	r3, r3, #1
 800baba:	428a      	cmp	r2, r1
 800babc:	bf0c      	ite	eq
 800babe:	2300      	moveq	r3, #0
 800bac0:	f003 0301 	andne.w	r3, r3, #1
 800bac4:	b113      	cbz	r3, 800bacc <HAL_TIM_Base_Init+0xb8>
 800bac6:	4b30      	ldr	r3, [pc, #192]	; (800bb88 <HAL_TIM_Base_Init+0x174>)
 800bac8:	429a      	cmp	r2, r3
 800baca:	d14f      	bne.n	800bb6c <HAL_TIM_Base_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bacc:	68a2      	ldr	r2, [r4, #8]
 800bace:	f032 0310 	bics.w	r3, r2, #16
 800bad2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800bad6:	bf14      	ite	ne
 800bad8:	2301      	movne	r3, #1
 800bada:	2300      	moveq	r3, #0
 800badc:	2920      	cmp	r1, #32
 800bade:	bf0c      	ite	eq
 800bae0:	2300      	moveq	r3, #0
 800bae2:	f003 0301 	andne.w	r3, r3, #1
 800bae6:	b10b      	cbz	r3, 800baec <HAL_TIM_Base_Init+0xd8>
 800bae8:	2a40      	cmp	r2, #64	; 0x40
 800baea:	d139      	bne.n	800bb60 <HAL_TIM_Base_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800baec:	6923      	ldr	r3, [r4, #16]
 800baee:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800baf2:	d002      	beq.n	800bafa <HAL_TIM_Base_Init+0xe6>
 800baf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baf8:	d128      	bne.n	800bb4c <HAL_TIM_Base_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bafa:	69a3      	ldr	r3, [r4, #24]
 800bafc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bb00:	d116      	bne.n	800bb30 <HAL_TIM_Base_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bb02:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bb06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bb0a:	b15b      	cbz	r3, 800bb24 <HAL_TIM_Base_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800bb0c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb0e:	6820      	ldr	r0, [r4, #0]
 800bb10:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bb12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb16:	f7ff ff0d 	bl	800b934 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800bb1a:	2301      	movs	r3, #1
  return HAL_OK;
 800bb1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800bb1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800bb24:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f7f7 fe4f 	bl	80037cc <HAL_TIM_Base_MspInit>
 800bb2e:	e7ed      	b.n	800bb0c <HAL_TIM_Base_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bb30:	f44f 7188 	mov.w	r1, #272	; 0x110
 800bb34:	4815      	ldr	r0, [pc, #84]	; (800bb8c <HAL_TIM_Base_Init+0x178>)
 800bb36:	f7f6 fd8b 	bl	8002650 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bb3a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bb3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e2      	bne.n	800bb0c <HAL_TIM_Base_Init+0xf8>
 800bb46:	e7ed      	b.n	800bb24 <HAL_TIM_Base_Init+0x110>
    return HAL_ERROR;
 800bb48:	2001      	movs	r0, #1
}
 800bb4a:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bb4c:	f240 110f 	movw	r1, #271	; 0x10f
 800bb50:	480e      	ldr	r0, [pc, #56]	; (800bb8c <HAL_TIM_Base_Init+0x178>)
 800bb52:	f7f6 fd7d 	bl	8002650 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bb56:	69a3      	ldr	r3, [r4, #24]
 800bb58:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bb5c:	d0d1      	beq.n	800bb02 <HAL_TIM_Base_Init+0xee>
 800bb5e:	e7e7      	b.n	800bb30 <HAL_TIM_Base_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bb60:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800bb64:	4809      	ldr	r0, [pc, #36]	; (800bb8c <HAL_TIM_Base_Init+0x178>)
 800bb66:	f7f6 fd73 	bl	8002650 <assert_failed>
 800bb6a:	e7bf      	b.n	800baec <HAL_TIM_Base_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bb6c:	f240 110d 	movw	r1, #269	; 0x10d
 800bb70:	4806      	ldr	r0, [pc, #24]	; (800bb8c <HAL_TIM_Base_Init+0x178>)
 800bb72:	f7f6 fd6d 	bl	8002650 <assert_failed>
 800bb76:	e7a9      	b.n	800bacc <HAL_TIM_Base_Init+0xb8>
 800bb78:	40000800 	.word	0x40000800
 800bb7c:	40010000 	.word	0x40010000
 800bb80:	40000400 	.word	0x40000400
 800bb84:	40000c00 	.word	0x40000c00
 800bb88:	40002000 	.word	0x40002000
 800bb8c:	080234e4 	.word	0x080234e4

0800bb90 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800bb90:	2800      	cmp	r0, #0
 800bb92:	f000 8097 	beq.w	800bcc4 <HAL_TIM_OC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bb96:	6802      	ldr	r2, [r0, #0]
 800bb98:	4956      	ldr	r1, [pc, #344]	; (800bcf4 <HAL_TIM_OC_Init+0x164>)
{
 800bb9a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bb9c:	4b56      	ldr	r3, [pc, #344]	; (800bcf8 <HAL_TIM_OC_Init+0x168>)
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4856      	ldr	r0, [pc, #344]	; (800bcfc <HAL_TIM_OC_Init+0x16c>)
 800bba2:	429a      	cmp	r2, r3
 800bba4:	bf18      	it	ne
 800bba6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800bbaa:	4d55      	ldr	r5, [pc, #340]	; (800bd00 <HAL_TIM_OC_Init+0x170>)
 800bbac:	bf14      	ite	ne
 800bbae:	2301      	movne	r3, #1
 800bbb0:	2300      	moveq	r3, #0
 800bbb2:	4282      	cmp	r2, r0
 800bbb4:	bf0c      	ite	eq
 800bbb6:	2300      	moveq	r3, #0
 800bbb8:	f003 0301 	andne.w	r3, r3, #1
 800bbbc:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800bbc0:	428a      	cmp	r2, r1
 800bbc2:	bf0c      	ite	eq
 800bbc4:	2300      	moveq	r3, #0
 800bbc6:	f003 0301 	andne.w	r3, r3, #1
 800bbca:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800bbce:	42aa      	cmp	r2, r5
 800bbd0:	bf0c      	ite	eq
 800bbd2:	2300      	moveq	r3, #0
 800bbd4:	f003 0301 	andne.w	r3, r3, #1
 800bbd8:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800bbdc:	4282      	cmp	r2, r0
 800bbde:	bf0c      	ite	eq
 800bbe0:	2300      	moveq	r3, #0
 800bbe2:	f003 0301 	andne.w	r3, r3, #1
 800bbe6:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800bbea:	428a      	cmp	r2, r1
 800bbec:	bf0c      	ite	eq
 800bbee:	2300      	moveq	r3, #0
 800bbf0:	f003 0301 	andne.w	r3, r3, #1
 800bbf4:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800bbf8:	42aa      	cmp	r2, r5
 800bbfa:	bf0c      	ite	eq
 800bbfc:	2300      	moveq	r3, #0
 800bbfe:	f003 0301 	andne.w	r3, r3, #1
 800bc02:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800bc06:	4282      	cmp	r2, r0
 800bc08:	bf0c      	ite	eq
 800bc0a:	2300      	moveq	r3, #0
 800bc0c:	f003 0301 	andne.w	r3, r3, #1
 800bc10:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800bc14:	428a      	cmp	r2, r1
 800bc16:	bf0c      	ite	eq
 800bc18:	2300      	moveq	r3, #0
 800bc1a:	f003 0301 	andne.w	r3, r3, #1
 800bc1e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800bc22:	42aa      	cmp	r2, r5
 800bc24:	bf0c      	ite	eq
 800bc26:	2300      	moveq	r3, #0
 800bc28:	f003 0301 	andne.w	r3, r3, #1
 800bc2c:	4282      	cmp	r2, r0
 800bc2e:	bf0c      	ite	eq
 800bc30:	2300      	moveq	r3, #0
 800bc32:	f003 0301 	andne.w	r3, r3, #1
 800bc36:	428a      	cmp	r2, r1
 800bc38:	bf0c      	ite	eq
 800bc3a:	2300      	moveq	r3, #0
 800bc3c:	f003 0301 	andne.w	r3, r3, #1
 800bc40:	b113      	cbz	r3, 800bc48 <HAL_TIM_OC_Init+0xb8>
 800bc42:	4b30      	ldr	r3, [pc, #192]	; (800bd04 <HAL_TIM_OC_Init+0x174>)
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d14f      	bne.n	800bce8 <HAL_TIM_OC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bc48:	68a2      	ldr	r2, [r4, #8]
 800bc4a:	f032 0310 	bics.w	r3, r2, #16
 800bc4e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800bc52:	bf14      	ite	ne
 800bc54:	2301      	movne	r3, #1
 800bc56:	2300      	moveq	r3, #0
 800bc58:	2920      	cmp	r1, #32
 800bc5a:	bf0c      	ite	eq
 800bc5c:	2300      	moveq	r3, #0
 800bc5e:	f003 0301 	andne.w	r3, r3, #1
 800bc62:	b10b      	cbz	r3, 800bc68 <HAL_TIM_OC_Init+0xd8>
 800bc64:	2a40      	cmp	r2, #64	; 0x40
 800bc66:	d139      	bne.n	800bcdc <HAL_TIM_OC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800bc6e:	d002      	beq.n	800bc76 <HAL_TIM_OC_Init+0xe6>
 800bc70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc74:	d128      	bne.n	800bcc8 <HAL_TIM_OC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bc76:	69a3      	ldr	r3, [r4, #24]
 800bc78:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bc7c:	d116      	bne.n	800bcac <HAL_TIM_OC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bc7e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bc82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bc86:	b15b      	cbz	r3, 800bca0 <HAL_TIM_OC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800bc88:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800bc8a:	6820      	ldr	r0, [r4, #0]
 800bc8c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bc8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800bc92:	f7ff fe4f 	bl	800b934 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800bc96:	2301      	movs	r3, #1
  return HAL_OK;
 800bc98:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800bc9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800bca0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800bca4:	4620      	mov	r0, r4
 800bca6:	f7ff f9c1 	bl	800b02c <HAL_TIM_OC_MspInit>
 800bcaa:	e7ed      	b.n	800bc88 <HAL_TIM_OC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bcac:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800bcb0:	4815      	ldr	r0, [pc, #84]	; (800bd08 <HAL_TIM_OC_Init+0x178>)
 800bcb2:	f7f6 fccd 	bl	8002650 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bcb6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bcba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1e2      	bne.n	800bc88 <HAL_TIM_OC_Init+0xf8>
 800bcc2:	e7ed      	b.n	800bca0 <HAL_TIM_OC_Init+0x110>
    return HAL_ERROR;
 800bcc4:	2001      	movs	r0, #1
}
 800bcc6:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bcc8:	f240 215b 	movw	r1, #603	; 0x25b
 800bccc:	480e      	ldr	r0, [pc, #56]	; (800bd08 <HAL_TIM_OC_Init+0x178>)
 800bcce:	f7f6 fcbf 	bl	8002650 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bcd2:	69a3      	ldr	r3, [r4, #24]
 800bcd4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bcd8:	d0d1      	beq.n	800bc7e <HAL_TIM_OC_Init+0xee>
 800bcda:	e7e7      	b.n	800bcac <HAL_TIM_OC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bcdc:	f240 215a 	movw	r1, #602	; 0x25a
 800bce0:	4809      	ldr	r0, [pc, #36]	; (800bd08 <HAL_TIM_OC_Init+0x178>)
 800bce2:	f7f6 fcb5 	bl	8002650 <assert_failed>
 800bce6:	e7bf      	b.n	800bc68 <HAL_TIM_OC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bce8:	f240 2159 	movw	r1, #601	; 0x259
 800bcec:	4806      	ldr	r0, [pc, #24]	; (800bd08 <HAL_TIM_OC_Init+0x178>)
 800bcee:	f7f6 fcaf 	bl	8002650 <assert_failed>
 800bcf2:	e7a9      	b.n	800bc48 <HAL_TIM_OC_Init+0xb8>
 800bcf4:	40000800 	.word	0x40000800
 800bcf8:	40010000 	.word	0x40010000
 800bcfc:	40000400 	.word	0x40000400
 800bd00:	40000c00 	.word	0x40000c00
 800bd04:	40002000 	.word	0x40002000
 800bd08:	080234e4 	.word	0x080234e4

0800bd0c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	f000 8097 	beq.w	800be40 <HAL_TIM_PWM_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bd12:	6802      	ldr	r2, [r0, #0]
 800bd14:	4956      	ldr	r1, [pc, #344]	; (800be70 <HAL_TIM_PWM_Init+0x164>)
{
 800bd16:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bd18:	4b56      	ldr	r3, [pc, #344]	; (800be74 <HAL_TIM_PWM_Init+0x168>)
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	4856      	ldr	r0, [pc, #344]	; (800be78 <HAL_TIM_PWM_Init+0x16c>)
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	bf18      	it	ne
 800bd22:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800bd26:	4d55      	ldr	r5, [pc, #340]	; (800be7c <HAL_TIM_PWM_Init+0x170>)
 800bd28:	bf14      	ite	ne
 800bd2a:	2301      	movne	r3, #1
 800bd2c:	2300      	moveq	r3, #0
 800bd2e:	4282      	cmp	r2, r0
 800bd30:	bf0c      	ite	eq
 800bd32:	2300      	moveq	r3, #0
 800bd34:	f003 0301 	andne.w	r3, r3, #1
 800bd38:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800bd3c:	428a      	cmp	r2, r1
 800bd3e:	bf0c      	ite	eq
 800bd40:	2300      	moveq	r3, #0
 800bd42:	f003 0301 	andne.w	r3, r3, #1
 800bd46:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800bd4a:	42aa      	cmp	r2, r5
 800bd4c:	bf0c      	ite	eq
 800bd4e:	2300      	moveq	r3, #0
 800bd50:	f003 0301 	andne.w	r3, r3, #1
 800bd54:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800bd58:	4282      	cmp	r2, r0
 800bd5a:	bf0c      	ite	eq
 800bd5c:	2300      	moveq	r3, #0
 800bd5e:	f003 0301 	andne.w	r3, r3, #1
 800bd62:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800bd66:	428a      	cmp	r2, r1
 800bd68:	bf0c      	ite	eq
 800bd6a:	2300      	moveq	r3, #0
 800bd6c:	f003 0301 	andne.w	r3, r3, #1
 800bd70:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800bd74:	42aa      	cmp	r2, r5
 800bd76:	bf0c      	ite	eq
 800bd78:	2300      	moveq	r3, #0
 800bd7a:	f003 0301 	andne.w	r3, r3, #1
 800bd7e:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800bd82:	4282      	cmp	r2, r0
 800bd84:	bf0c      	ite	eq
 800bd86:	2300      	moveq	r3, #0
 800bd88:	f003 0301 	andne.w	r3, r3, #1
 800bd8c:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800bd90:	428a      	cmp	r2, r1
 800bd92:	bf0c      	ite	eq
 800bd94:	2300      	moveq	r3, #0
 800bd96:	f003 0301 	andne.w	r3, r3, #1
 800bd9a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800bd9e:	42aa      	cmp	r2, r5
 800bda0:	bf0c      	ite	eq
 800bda2:	2300      	moveq	r3, #0
 800bda4:	f003 0301 	andne.w	r3, r3, #1
 800bda8:	4282      	cmp	r2, r0
 800bdaa:	bf0c      	ite	eq
 800bdac:	2300      	moveq	r3, #0
 800bdae:	f003 0301 	andne.w	r3, r3, #1
 800bdb2:	428a      	cmp	r2, r1
 800bdb4:	bf0c      	ite	eq
 800bdb6:	2300      	moveq	r3, #0
 800bdb8:	f003 0301 	andne.w	r3, r3, #1
 800bdbc:	b113      	cbz	r3, 800bdc4 <HAL_TIM_PWM_Init+0xb8>
 800bdbe:	4b30      	ldr	r3, [pc, #192]	; (800be80 <HAL_TIM_PWM_Init+0x174>)
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d14f      	bne.n	800be64 <HAL_TIM_PWM_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bdc4:	68a2      	ldr	r2, [r4, #8]
 800bdc6:	f032 0310 	bics.w	r3, r2, #16
 800bdca:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800bdce:	bf14      	ite	ne
 800bdd0:	2301      	movne	r3, #1
 800bdd2:	2300      	moveq	r3, #0
 800bdd4:	2920      	cmp	r1, #32
 800bdd6:	bf0c      	ite	eq
 800bdd8:	2300      	moveq	r3, #0
 800bdda:	f003 0301 	andne.w	r3, r3, #1
 800bdde:	b10b      	cbz	r3, 800bde4 <HAL_TIM_PWM_Init+0xd8>
 800bde0:	2a40      	cmp	r2, #64	; 0x40
 800bde2:	d139      	bne.n	800be58 <HAL_TIM_PWM_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bde4:	6923      	ldr	r3, [r4, #16]
 800bde6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800bdea:	d002      	beq.n	800bdf2 <HAL_TIM_PWM_Init+0xe6>
 800bdec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdf0:	d128      	bne.n	800be44 <HAL_TIM_PWM_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bdf2:	69a3      	ldr	r3, [r4, #24]
 800bdf4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bdf8:	d116      	bne.n	800be28 <HAL_TIM_PWM_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bdfa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bdfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800be02:	b15b      	cbz	r3, 800be1c <HAL_TIM_PWM_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800be04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be06:	6820      	ldr	r0, [r4, #0]
 800be08:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800be0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be0e:	f7ff fd91 	bl	800b934 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800be12:	2301      	movs	r3, #1
  return HAL_OK;
 800be14:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800be16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800be1c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800be20:	4620      	mov	r0, r4
 800be22:	f7ff f905 	bl	800b030 <HAL_TIM_PWM_MspInit>
 800be26:	e7ed      	b.n	800be04 <HAL_TIM_PWM_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800be28:	f240 419d 	movw	r1, #1181	; 0x49d
 800be2c:	4815      	ldr	r0, [pc, #84]	; (800be84 <HAL_TIM_PWM_Init+0x178>)
 800be2e:	f7f6 fc0f 	bl	8002650 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800be32:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800be36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1e2      	bne.n	800be04 <HAL_TIM_PWM_Init+0xf8>
 800be3e:	e7ed      	b.n	800be1c <HAL_TIM_PWM_Init+0x110>
    return HAL_ERROR;
 800be40:	2001      	movs	r0, #1
}
 800be42:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800be44:	f240 419c 	movw	r1, #1180	; 0x49c
 800be48:	480e      	ldr	r0, [pc, #56]	; (800be84 <HAL_TIM_PWM_Init+0x178>)
 800be4a:	f7f6 fc01 	bl	8002650 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800be4e:	69a3      	ldr	r3, [r4, #24]
 800be50:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800be54:	d0d1      	beq.n	800bdfa <HAL_TIM_PWM_Init+0xee>
 800be56:	e7e7      	b.n	800be28 <HAL_TIM_PWM_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800be58:	f240 419b 	movw	r1, #1179	; 0x49b
 800be5c:	4809      	ldr	r0, [pc, #36]	; (800be84 <HAL_TIM_PWM_Init+0x178>)
 800be5e:	f7f6 fbf7 	bl	8002650 <assert_failed>
 800be62:	e7bf      	b.n	800bde4 <HAL_TIM_PWM_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800be64:	f240 419a 	movw	r1, #1178	; 0x49a
 800be68:	4806      	ldr	r0, [pc, #24]	; (800be84 <HAL_TIM_PWM_Init+0x178>)
 800be6a:	f7f6 fbf1 	bl	8002650 <assert_failed>
 800be6e:	e7a9      	b.n	800bdc4 <HAL_TIM_PWM_Init+0xb8>
 800be70:	40000800 	.word	0x40000800
 800be74:	40010000 	.word	0x40010000
 800be78:	40000400 	.word	0x40000400
 800be7c:	40000c00 	.word	0x40000c00
 800be80:	40002000 	.word	0x40002000
 800be84:	080234e4 	.word	0x080234e4

0800be88 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800be88:	2800      	cmp	r0, #0
 800be8a:	f000 8097 	beq.w	800bfbc <HAL_TIM_IC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800be8e:	6802      	ldr	r2, [r0, #0]
 800be90:	4956      	ldr	r1, [pc, #344]	; (800bfec <HAL_TIM_IC_Init+0x164>)
{
 800be92:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800be94:	4b56      	ldr	r3, [pc, #344]	; (800bff0 <HAL_TIM_IC_Init+0x168>)
 800be96:	4604      	mov	r4, r0
 800be98:	4856      	ldr	r0, [pc, #344]	; (800bff4 <HAL_TIM_IC_Init+0x16c>)
 800be9a:	429a      	cmp	r2, r3
 800be9c:	bf18      	it	ne
 800be9e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800bea2:	4d55      	ldr	r5, [pc, #340]	; (800bff8 <HAL_TIM_IC_Init+0x170>)
 800bea4:	bf14      	ite	ne
 800bea6:	2301      	movne	r3, #1
 800bea8:	2300      	moveq	r3, #0
 800beaa:	4282      	cmp	r2, r0
 800beac:	bf0c      	ite	eq
 800beae:	2300      	moveq	r3, #0
 800beb0:	f003 0301 	andne.w	r3, r3, #1
 800beb4:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800beb8:	428a      	cmp	r2, r1
 800beba:	bf0c      	ite	eq
 800bebc:	2300      	moveq	r3, #0
 800bebe:	f003 0301 	andne.w	r3, r3, #1
 800bec2:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800bec6:	42aa      	cmp	r2, r5
 800bec8:	bf0c      	ite	eq
 800beca:	2300      	moveq	r3, #0
 800becc:	f003 0301 	andne.w	r3, r3, #1
 800bed0:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800bed4:	4282      	cmp	r2, r0
 800bed6:	bf0c      	ite	eq
 800bed8:	2300      	moveq	r3, #0
 800beda:	f003 0301 	andne.w	r3, r3, #1
 800bede:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800bee2:	428a      	cmp	r2, r1
 800bee4:	bf0c      	ite	eq
 800bee6:	2300      	moveq	r3, #0
 800bee8:	f003 0301 	andne.w	r3, r3, #1
 800beec:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800bef0:	42aa      	cmp	r2, r5
 800bef2:	bf0c      	ite	eq
 800bef4:	2300      	moveq	r3, #0
 800bef6:	f003 0301 	andne.w	r3, r3, #1
 800befa:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800befe:	4282      	cmp	r2, r0
 800bf00:	bf0c      	ite	eq
 800bf02:	2300      	moveq	r3, #0
 800bf04:	f003 0301 	andne.w	r3, r3, #1
 800bf08:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800bf0c:	428a      	cmp	r2, r1
 800bf0e:	bf0c      	ite	eq
 800bf10:	2300      	moveq	r3, #0
 800bf12:	f003 0301 	andne.w	r3, r3, #1
 800bf16:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800bf1a:	42aa      	cmp	r2, r5
 800bf1c:	bf0c      	ite	eq
 800bf1e:	2300      	moveq	r3, #0
 800bf20:	f003 0301 	andne.w	r3, r3, #1
 800bf24:	4282      	cmp	r2, r0
 800bf26:	bf0c      	ite	eq
 800bf28:	2300      	moveq	r3, #0
 800bf2a:	f003 0301 	andne.w	r3, r3, #1
 800bf2e:	428a      	cmp	r2, r1
 800bf30:	bf0c      	ite	eq
 800bf32:	2300      	moveq	r3, #0
 800bf34:	f003 0301 	andne.w	r3, r3, #1
 800bf38:	b113      	cbz	r3, 800bf40 <HAL_TIM_IC_Init+0xb8>
 800bf3a:	4b30      	ldr	r3, [pc, #192]	; (800bffc <HAL_TIM_IC_Init+0x174>)
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d14f      	bne.n	800bfe0 <HAL_TIM_IC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bf40:	68a2      	ldr	r2, [r4, #8]
 800bf42:	f032 0310 	bics.w	r3, r2, #16
 800bf46:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800bf4a:	bf14      	ite	ne
 800bf4c:	2301      	movne	r3, #1
 800bf4e:	2300      	moveq	r3, #0
 800bf50:	2920      	cmp	r1, #32
 800bf52:	bf0c      	ite	eq
 800bf54:	2300      	moveq	r3, #0
 800bf56:	f003 0301 	andne.w	r3, r3, #1
 800bf5a:	b10b      	cbz	r3, 800bf60 <HAL_TIM_IC_Init+0xd8>
 800bf5c:	2a40      	cmp	r2, #64	; 0x40
 800bf5e:	d139      	bne.n	800bfd4 <HAL_TIM_IC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800bf66:	d002      	beq.n	800bf6e <HAL_TIM_IC_Init+0xe6>
 800bf68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf6c:	d128      	bne.n	800bfc0 <HAL_TIM_IC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bf6e:	69a3      	ldr	r3, [r4, #24]
 800bf70:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bf74:	d116      	bne.n	800bfa4 <HAL_TIM_IC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bf76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bf7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bf7e:	b15b      	cbz	r3, 800bf98 <HAL_TIM_IC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800bf80:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf82:	6820      	ldr	r0, [r4, #0]
 800bf84:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bf86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf8a:	f7ff fcd3 	bl	800b934 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800bf8e:	2301      	movs	r3, #1
  return HAL_OK;
 800bf90:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800bf92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bf96:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800bf98:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f7ff f849 	bl	800b034 <HAL_TIM_IC_MspInit>
 800bfa2:	e7ed      	b.n	800bf80 <HAL_TIM_IC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bfa4:	f240 61df 	movw	r1, #1759	; 0x6df
 800bfa8:	4815      	ldr	r0, [pc, #84]	; (800c000 <HAL_TIM_IC_Init+0x178>)
 800bfaa:	f7f6 fb51 	bl	8002650 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bfae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bfb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1e2      	bne.n	800bf80 <HAL_TIM_IC_Init+0xf8>
 800bfba:	e7ed      	b.n	800bf98 <HAL_TIM_IC_Init+0x110>
    return HAL_ERROR;
 800bfbc:	2001      	movs	r0, #1
}
 800bfbe:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bfc0:	f240 61de 	movw	r1, #1758	; 0x6de
 800bfc4:	480e      	ldr	r0, [pc, #56]	; (800c000 <HAL_TIM_IC_Init+0x178>)
 800bfc6:	f7f6 fb43 	bl	8002650 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bfca:	69a3      	ldr	r3, [r4, #24]
 800bfcc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bfd0:	d0d1      	beq.n	800bf76 <HAL_TIM_IC_Init+0xee>
 800bfd2:	e7e7      	b.n	800bfa4 <HAL_TIM_IC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bfd4:	f240 61dd 	movw	r1, #1757	; 0x6dd
 800bfd8:	4809      	ldr	r0, [pc, #36]	; (800c000 <HAL_TIM_IC_Init+0x178>)
 800bfda:	f7f6 fb39 	bl	8002650 <assert_failed>
 800bfde:	e7bf      	b.n	800bf60 <HAL_TIM_IC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bfe0:	f240 61dc 	movw	r1, #1756	; 0x6dc
 800bfe4:	4806      	ldr	r0, [pc, #24]	; (800c000 <HAL_TIM_IC_Init+0x178>)
 800bfe6:	f7f6 fb33 	bl	8002650 <assert_failed>
 800bfea:	e7a9      	b.n	800bf40 <HAL_TIM_IC_Init+0xb8>
 800bfec:	40000800 	.word	0x40000800
 800bff0:	40010000 	.word	0x40010000
 800bff4:	40000400 	.word	0x40000400
 800bff8:	40000c00 	.word	0x40000c00
 800bffc:	40002000 	.word	0x40002000
 800c000:	080234e4 	.word	0x080234e4

0800c004 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c004:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c006:	4b2e      	ldr	r3, [pc, #184]	; (800c0c0 <TIM_OC2_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c008:	f022 0210 	bic.w	r2, r2, #16
{
 800c00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c010:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c012:	6889      	ldr	r1, [r1, #8]
{
 800c014:	4604      	mov	r4, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c016:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c018:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800c01a:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c01c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c020:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800c022:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c026:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c028:	4a26      	ldr	r2, [pc, #152]	; (800c0c4 <TIM_OC2_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c02a:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c02e:	4290      	cmp	r0, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c030:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c034:	d00a      	beq.n	800c04c <TIM_OC2_SetConfig+0x48>
 800c036:	4b24      	ldr	r3, [pc, #144]	; (800c0c8 <TIM_OC2_SetConfig+0xc4>)
 800c038:	4298      	cmp	r0, r3
 800c03a:	d007      	beq.n	800c04c <TIM_OC2_SetConfig+0x48>
  TIMx->CCR2 = OC_Config->Pulse;
 800c03c:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800c03e:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c042:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c044:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800c046:	6225      	str	r5, [r4, #32]
}
 800c048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c04c:	68f2      	ldr	r2, [r6, #12]
 800c04e:	f032 0308 	bics.w	r3, r2, #8
 800c052:	d12d      	bne.n	800c0b0 <TIM_OC2_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC2NP;
 800c054:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c058:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c05a:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c05e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800c062:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c066:	d119      	bne.n	800c09c <TIM_OC2_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c068:	6973      	ldr	r3, [r6, #20]
 800c06a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c06e:	d107      	bne.n	800c080 <TIM_OC2_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c070:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c074:	69b1      	ldr	r1, [r6, #24]
 800c076:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800c07a:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800c07e:	e7dd      	b.n	800c03c <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c080:	f241 71d0 	movw	r1, #6096	; 0x17d0
 800c084:	4811      	ldr	r0, [pc, #68]	; (800c0cc <TIM_OC2_SetConfig+0xc8>)
 800c086:	f7f6 fae3 	bl	8002650 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c08a:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c08e:	69b1      	ldr	r1, [r6, #24]
 800c090:	6973      	ldr	r3, [r6, #20]
 800c092:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800c096:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800c09a:	e7cf      	b.n	800c03c <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c09c:	f241 71cf 	movw	r1, #6095	; 0x17cf
 800c0a0:	480a      	ldr	r0, [pc, #40]	; (800c0cc <TIM_OC2_SetConfig+0xc8>)
 800c0a2:	f7f6 fad5 	bl	8002650 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c0a6:	6973      	ldr	r3, [r6, #20]
 800c0a8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c0ac:	d0e0      	beq.n	800c070 <TIM_OC2_SetConfig+0x6c>
 800c0ae:	e7e7      	b.n	800c080 <TIM_OC2_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c0b0:	f241 71c1 	movw	r1, #6081	; 0x17c1
 800c0b4:	4805      	ldr	r0, [pc, #20]	; (800c0cc <TIM_OC2_SetConfig+0xc8>)
 800c0b6:	f7f6 facb 	bl	8002650 <assert_failed>
 800c0ba:	68f2      	ldr	r2, [r6, #12]
 800c0bc:	e7ca      	b.n	800c054 <TIM_OC2_SetConfig+0x50>
 800c0be:	bf00      	nop
 800c0c0:	feff8cff 	.word	0xfeff8cff
 800c0c4:	40010000 	.word	0x40010000
 800c0c8:	40010400 	.word	0x40010400
 800c0cc:	080234e4 	.word	0x080234e4

0800c0d0 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800c0d0:	2a14      	cmp	r2, #20
{
 800c0d2:	b570      	push	{r4, r5, r6, lr}
 800c0d4:	4615      	mov	r5, r2
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800c0da:	f240 808f 	bls.w	800c1fc <HAL_TIM_OC_ConfigChannel+0x12c>
 800c0de:	2a3c      	cmp	r2, #60	; 0x3c
 800c0e0:	f040 8091 	bne.w	800c206 <HAL_TIM_OC_ConfigChannel+0x136>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800c0e4:	6833      	ldr	r3, [r6, #0]
 800c0e6:	f023 0210 	bic.w	r2, r3, #16
 800c0ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c0ee:	2a40      	cmp	r2, #64	; 0x40
 800c0f0:	bf18      	it	ne
 800c0f2:	2b00      	cmpne	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <HAL_TIM_OC_ConfigChannel+0x2e>
 800c0f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c0fa:	f040 8137 	bne.w	800c36c <HAL_TIM_OC_ConfigChannel+0x29c>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c0fe:	68b3      	ldr	r3, [r6, #8]
 800c100:	f033 0302 	bics.w	r3, r3, #2
 800c104:	f040 8085 	bne.w	800c212 <HAL_TIM_OC_ConfigChannel+0x142>
  __HAL_LOCK(htim);
 800c108:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	f000 808a 	beq.w	800c226 <HAL_TIM_OC_ConfigChannel+0x156>
 800c112:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c114:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800c116:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c11a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800c11e:	2d14      	cmp	r5, #20
 800c120:	d864      	bhi.n	800c1ec <HAL_TIM_OC_ConfigChannel+0x11c>
 800c122:	e8df f015 	tbh	[pc, r5, lsl #1]
 800c126:	0015      	.short	0x0015
 800c128:	00630063 	.word	0x00630063
 800c12c:	00820063 	.word	0x00820063
 800c130:	00630063 	.word	0x00630063
 800c134:	00b50063 	.word	0x00b50063
 800c138:	00630063 	.word	0x00630063
 800c13c:	00d90063 	.word	0x00d90063
 800c140:	00630063 	.word	0x00630063
 800c144:	00fd0063 	.word	0x00fd0063
 800c148:	00630063 	.word	0x00630063
 800c14c:	01090063 	.word	0x01090063
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c150:	6820      	ldr	r0, [r4, #0]
 800c152:	4b97      	ldr	r3, [pc, #604]	; (800c3b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c154:	4a97      	ldr	r2, [pc, #604]	; (800c3b4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800c156:	4298      	cmp	r0, r3
 800c158:	bf18      	it	ne
 800c15a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c15e:	4996      	ldr	r1, [pc, #600]	; (800c3b8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800c160:	bf14      	ite	ne
 800c162:	2301      	movne	r3, #1
 800c164:	2300      	moveq	r3, #0
 800c166:	4290      	cmp	r0, r2
 800c168:	bf0c      	ite	eq
 800c16a:	2300      	moveq	r3, #0
 800c16c:	f003 0301 	andne.w	r3, r3, #1
 800c170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c174:	4288      	cmp	r0, r1
 800c176:	bf0c      	ite	eq
 800c178:	2300      	moveq	r3, #0
 800c17a:	f003 0301 	andne.w	r3, r3, #1
 800c17e:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800c182:	4290      	cmp	r0, r2
 800c184:	bf0c      	ite	eq
 800c186:	2300      	moveq	r3, #0
 800c188:	f003 0301 	andne.w	r3, r3, #1
 800c18c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800c190:	4288      	cmp	r0, r1
 800c192:	bf0c      	ite	eq
 800c194:	2300      	moveq	r3, #0
 800c196:	f003 0301 	andne.w	r3, r3, #1
 800c19a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800c19e:	4290      	cmp	r0, r2
 800c1a0:	bf0c      	ite	eq
 800c1a2:	2300      	moveq	r3, #0
 800c1a4:	f003 0301 	andne.w	r3, r3, #1
 800c1a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1ac:	4288      	cmp	r0, r1
 800c1ae:	bf0c      	ite	eq
 800c1b0:	2300      	moveq	r3, #0
 800c1b2:	f003 0301 	andne.w	r3, r3, #1
 800c1b6:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800c1ba:	4290      	cmp	r0, r2
 800c1bc:	bf0c      	ite	eq
 800c1be:	2300      	moveq	r3, #0
 800c1c0:	f003 0301 	andne.w	r3, r3, #1
 800c1c4:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800c1c8:	4288      	cmp	r0, r1
 800c1ca:	bf0c      	ite	eq
 800c1cc:	2300      	moveq	r3, #0
 800c1ce:	f003 0301 	andne.w	r3, r3, #1
 800c1d2:	4290      	cmp	r0, r2
 800c1d4:	bf0c      	ite	eq
 800c1d6:	2300      	moveq	r3, #0
 800c1d8:	f003 0301 	andne.w	r3, r3, #1
 800c1dc:	b11b      	cbz	r3, 800c1e6 <HAL_TIM_OC_ConfigChannel+0x116>
 800c1de:	4b77      	ldr	r3, [pc, #476]	; (800c3bc <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800c1e0:	4298      	cmp	r0, r3
 800c1e2:	f040 80de 	bne.w	800c3a2 <HAL_TIM_OC_ConfigChannel+0x2d2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	f7fe faec 	bl	800a7c4 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800c1ec:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c1ee:	2201      	movs	r2, #1
  return HAL_OK;
 800c1f0:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c1f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c1f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800c1fc:	4b70      	ldr	r3, [pc, #448]	; (800c3c0 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800c1fe:	40d3      	lsrs	r3, r2
 800c200:	07db      	lsls	r3, r3, #31
 800c202:	f53f af6f 	bmi.w	800c0e4 <HAL_TIM_OC_ConfigChannel+0x14>
 800c206:	f640 514c 	movw	r1, #3404	; 0xd4c
 800c20a:	486e      	ldr	r0, [pc, #440]	; (800c3c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c20c:	f7f6 fa20 	bl	8002650 <assert_failed>
 800c210:	e768      	b.n	800c0e4 <HAL_TIM_OC_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c212:	f640 514e 	movw	r1, #3406	; 0xd4e
 800c216:	486b      	ldr	r0, [pc, #428]	; (800c3c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c218:	f7f6 fa1a 	bl	8002650 <assert_failed>
  __HAL_LOCK(htim);
 800c21c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c220:	2b01      	cmp	r3, #1
 800c222:	f47f af76 	bne.w	800c112 <HAL_TIM_OC_ConfigChannel+0x42>
 800c226:	2002      	movs	r0, #2
}
 800c228:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c22a:	6820      	ldr	r0, [r4, #0]
 800c22c:	4b60      	ldr	r3, [pc, #384]	; (800c3b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c22e:	4a61      	ldr	r2, [pc, #388]	; (800c3b4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800c230:	4298      	cmp	r0, r3
 800c232:	bf18      	it	ne
 800c234:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c238:	495f      	ldr	r1, [pc, #380]	; (800c3b8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800c23a:	bf14      	ite	ne
 800c23c:	2301      	movne	r3, #1
 800c23e:	2300      	moveq	r3, #0
 800c240:	4290      	cmp	r0, r2
 800c242:	bf0c      	ite	eq
 800c244:	2300      	moveq	r3, #0
 800c246:	f003 0301 	andne.w	r3, r3, #1
 800c24a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c24e:	4288      	cmp	r0, r1
 800c250:	bf0c      	ite	eq
 800c252:	2300      	moveq	r3, #0
 800c254:	f003 0301 	andne.w	r3, r3, #1
 800c258:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800c25c:	4290      	cmp	r0, r2
 800c25e:	bf0c      	ite	eq
 800c260:	2300      	moveq	r3, #0
 800c262:	f003 0301 	andne.w	r3, r3, #1
 800c266:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800c26a:	4288      	cmp	r0, r1
 800c26c:	bf0c      	ite	eq
 800c26e:	2300      	moveq	r3, #0
 800c270:	f003 0301 	andne.w	r3, r3, #1
 800c274:	4290      	cmp	r0, r2
 800c276:	bf0c      	ite	eq
 800c278:	2300      	moveq	r3, #0
 800c27a:	f003 0301 	andne.w	r3, r3, #1
 800c27e:	b11b      	cbz	r3, 800c288 <HAL_TIM_OC_ConfigChannel+0x1b8>
 800c280:	4b51      	ldr	r3, [pc, #324]	; (800c3c8 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800c282:	4298      	cmp	r0, r3
 800c284:	f040 8086 	bne.w	800c394 <HAL_TIM_OC_ConfigChannel+0x2c4>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c288:	4631      	mov	r1, r6
 800c28a:	f7ff febb 	bl	800c004 <TIM_OC2_SetConfig>
      break;
 800c28e:	e7ad      	b.n	800c1ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	4b47      	ldr	r3, [pc, #284]	; (800c3b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c294:	4a47      	ldr	r2, [pc, #284]	; (800c3b4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800c296:	4298      	cmp	r0, r3
 800c298:	bf18      	it	ne
 800c29a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c29e:	4946      	ldr	r1, [pc, #280]	; (800c3b8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800c2a0:	bf14      	ite	ne
 800c2a2:	2301      	movne	r3, #1
 800c2a4:	2300      	moveq	r3, #0
 800c2a6:	4290      	cmp	r0, r2
 800c2a8:	bf0c      	ite	eq
 800c2aa:	2300      	moveq	r3, #0
 800c2ac:	f003 0301 	andne.w	r3, r3, #1
 800c2b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2b4:	4288      	cmp	r0, r1
 800c2b6:	bf0c      	ite	eq
 800c2b8:	2300      	moveq	r3, #0
 800c2ba:	f003 0301 	andne.w	r3, r3, #1
 800c2be:	4290      	cmp	r0, r2
 800c2c0:	bf0c      	ite	eq
 800c2c2:	2300      	moveq	r3, #0
 800c2c4:	f003 0301 	andne.w	r3, r3, #1
 800c2c8:	b113      	cbz	r3, 800c2d0 <HAL_TIM_OC_ConfigChannel+0x200>
 800c2ca:	4b40      	ldr	r3, [pc, #256]	; (800c3cc <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800c2cc:	4298      	cmp	r0, r3
 800c2ce:	d15a      	bne.n	800c386 <HAL_TIM_OC_ConfigChannel+0x2b6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c2d0:	4631      	mov	r1, r6
 800c2d2:	f7fe fad9 	bl	800a888 <TIM_OC3_SetConfig>
      break;
 800c2d6:	e789      	b.n	800c1ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c2d8:	6820      	ldr	r0, [r4, #0]
 800c2da:	4b35      	ldr	r3, [pc, #212]	; (800c3b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c2dc:	4a35      	ldr	r2, [pc, #212]	; (800c3b4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800c2de:	4298      	cmp	r0, r3
 800c2e0:	bf18      	it	ne
 800c2e2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c2e6:	4934      	ldr	r1, [pc, #208]	; (800c3b8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800c2e8:	bf14      	ite	ne
 800c2ea:	2301      	movne	r3, #1
 800c2ec:	2300      	moveq	r3, #0
 800c2ee:	4290      	cmp	r0, r2
 800c2f0:	bf0c      	ite	eq
 800c2f2:	2300      	moveq	r3, #0
 800c2f4:	f003 0301 	andne.w	r3, r3, #1
 800c2f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2fc:	4288      	cmp	r0, r1
 800c2fe:	bf0c      	ite	eq
 800c300:	2300      	moveq	r3, #0
 800c302:	f003 0301 	andne.w	r3, r3, #1
 800c306:	4290      	cmp	r0, r2
 800c308:	bf0c      	ite	eq
 800c30a:	2300      	moveq	r3, #0
 800c30c:	f003 0301 	andne.w	r3, r3, #1
 800c310:	b113      	cbz	r3, 800c318 <HAL_TIM_OC_ConfigChannel+0x248>
 800c312:	4b2e      	ldr	r3, [pc, #184]	; (800c3cc <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800c314:	4298      	cmp	r0, r3
 800c316:	d12f      	bne.n	800c378 <HAL_TIM_OC_ConfigChannel+0x2a8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c318:	4631      	mov	r1, r6
 800c31a:	f7fe fb1b 	bl	800a954 <TIM_OC4_SetConfig>
      break;
 800c31e:	e765      	b.n	800c1ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c320:	6820      	ldr	r0, [r4, #0]
 800c322:	4b23      	ldr	r3, [pc, #140]	; (800c3b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c324:	4298      	cmp	r0, r3
 800c326:	d003      	beq.n	800c330 <HAL_TIM_OC_ConfigChannel+0x260>
 800c328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c32c:	4298      	cmp	r0, r3
 800c32e:	d116      	bne.n	800c35e <HAL_TIM_OC_ConfigChannel+0x28e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c330:	4631      	mov	r1, r6
 800c332:	f7fe f9f3 	bl	800a71c <TIM_OC5_SetConfig>
      break;
 800c336:	e759      	b.n	800c1ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c338:	6820      	ldr	r0, [r4, #0]
 800c33a:	4b1d      	ldr	r3, [pc, #116]	; (800c3b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c33c:	4298      	cmp	r0, r3
 800c33e:	d003      	beq.n	800c348 <HAL_TIM_OC_ConfigChannel+0x278>
 800c340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c344:	4298      	cmp	r0, r3
 800c346:	d103      	bne.n	800c350 <HAL_TIM_OC_ConfigChannel+0x280>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c348:	4631      	mov	r1, r6
 800c34a:	f7fe fa11 	bl	800a770 <TIM_OC6_SetConfig>
      break;
 800c34e:	e74d      	b.n	800c1ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c350:	481c      	ldr	r0, [pc, #112]	; (800c3c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c352:	f640 518c 	movw	r1, #3468	; 0xd8c
 800c356:	f7f6 f97b 	bl	8002650 <assert_failed>
 800c35a:	6820      	ldr	r0, [r4, #0]
 800c35c:	e7f4      	b.n	800c348 <HAL_TIM_OC_ConfigChannel+0x278>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c35e:	4819      	ldr	r0, [pc, #100]	; (800c3c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c360:	f640 5182 	movw	r1, #3458	; 0xd82
 800c364:	f7f6 f974 	bl	8002650 <assert_failed>
 800c368:	6820      	ldr	r0, [r4, #0]
 800c36a:	e7e1      	b.n	800c330 <HAL_TIM_OC_ConfigChannel+0x260>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800c36c:	f640 514d 	movw	r1, #3405	; 0xd4d
 800c370:	4814      	ldr	r0, [pc, #80]	; (800c3c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c372:	f7f6 f96d 	bl	8002650 <assert_failed>
 800c376:	e6c2      	b.n	800c0fe <HAL_TIM_OC_ConfigChannel+0x2e>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c378:	4812      	ldr	r0, [pc, #72]	; (800c3c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c37a:	f640 5178 	movw	r1, #3448	; 0xd78
 800c37e:	f7f6 f967 	bl	8002650 <assert_failed>
 800c382:	6820      	ldr	r0, [r4, #0]
 800c384:	e7c8      	b.n	800c318 <HAL_TIM_OC_ConfigChannel+0x248>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c386:	480f      	ldr	r0, [pc, #60]	; (800c3c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c388:	f640 516e 	movw	r1, #3438	; 0xd6e
 800c38c:	f7f6 f960 	bl	8002650 <assert_failed>
 800c390:	6820      	ldr	r0, [r4, #0]
 800c392:	e79d      	b.n	800c2d0 <HAL_TIM_OC_ConfigChannel+0x200>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c394:	480b      	ldr	r0, [pc, #44]	; (800c3c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c396:	f640 5164 	movw	r1, #3428	; 0xd64
 800c39a:	f7f6 f959 	bl	8002650 <assert_failed>
 800c39e:	6820      	ldr	r0, [r4, #0]
 800c3a0:	e772      	b.n	800c288 <HAL_TIM_OC_ConfigChannel+0x1b8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c3a2:	4808      	ldr	r0, [pc, #32]	; (800c3c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c3a4:	f640 515a 	movw	r1, #3418	; 0xd5a
 800c3a8:	f7f6 f952 	bl	8002650 <assert_failed>
 800c3ac:	6820      	ldr	r0, [r4, #0]
 800c3ae:	e71a      	b.n	800c1e6 <HAL_TIM_OC_ConfigChannel+0x116>
 800c3b0:	40010000 	.word	0x40010000
 800c3b4:	40000400 	.word	0x40000400
 800c3b8:	40000800 	.word	0x40000800
 800c3bc:	40002000 	.word	0x40002000
 800c3c0:	00111111 	.word	0x00111111
 800c3c4:	080234e4 	.word	0x080234e4
 800c3c8:	40001800 	.word	0x40001800
 800c3cc:	40010400 	.word	0x40010400

0800c3d0 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800c3d0:	2a14      	cmp	r2, #20
{
 800c3d2:	b570      	push	{r4, r5, r6, lr}
 800c3d4:	4616      	mov	r6, r2
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800c3da:	f240 809f 	bls.w	800c51c <HAL_TIM_PWM_ConfigChannel+0x14c>
 800c3de:	2a3c      	cmp	r2, #60	; 0x3c
 800c3e0:	f040 80a1 	bne.w	800c526 <HAL_TIM_PWM_ConfigChannel+0x156>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800c3e4:	682a      	ldr	r2, [r5, #0]
 800c3e6:	4b97      	ldr	r3, [pc, #604]	; (800c644 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	2b60      	cmp	r3, #96	; 0x60
 800c3ec:	d005      	beq.n	800c3fa <HAL_TIM_PWM_ConfigChannel+0x2a>
 800c3ee:	f022 0210 	bic.w	r2, r2, #16
 800c3f2:	4b95      	ldr	r3, [pc, #596]	; (800c648 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	f040 819e 	bne.w	800c736 <HAL_TIM_PWM_ConfigChannel+0x366>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c3fa:	68ab      	ldr	r3, [r5, #8]
 800c3fc:	f033 0302 	bics.w	r3, r3, #2
 800c400:	f040 8097 	bne.w	800c532 <HAL_TIM_PWM_ConfigChannel+0x162>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800c404:	692b      	ldr	r3, [r5, #16]
 800c406:	f033 0304 	bics.w	r3, r3, #4
 800c40a:	f040 809c 	bne.w	800c546 <HAL_TIM_PWM_ConfigChannel+0x176>
  __HAL_LOCK(htim);
 800c40e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c412:	2b01      	cmp	r3, #1
 800c414:	f000 80a1 	beq.w	800c55a <HAL_TIM_PWM_ConfigChannel+0x18a>
 800c418:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c41a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800c41c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c420:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800c424:	2e14      	cmp	r6, #20
 800c426:	d871      	bhi.n	800c50c <HAL_TIM_PWM_ConfigChannel+0x13c>
 800c428:	e8df f016 	tbh	[pc, r6, lsl #1]
 800c42c:	00700015 	.word	0x00700015
 800c430:	00700070 	.word	0x00700070
 800c434:	00700099 	.word	0x00700099
 800c438:	00700070 	.word	0x00700070
 800c43c:	007000da 	.word	0x007000da
 800c440:	00700070 	.word	0x00700070
 800c444:	00700120 	.word	0x00700120
 800c448:	00700070 	.word	0x00700070
 800c44c:	00700152 	.word	0x00700152
 800c450:	00700070 	.word	0x00700070
 800c454:	016b      	.short	0x016b
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c456:	6820      	ldr	r0, [r4, #0]
 800c458:	4b7c      	ldr	r3, [pc, #496]	; (800c64c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800c45a:	4a7d      	ldr	r2, [pc, #500]	; (800c650 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c45c:	4298      	cmp	r0, r3
 800c45e:	bf18      	it	ne
 800c460:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c464:	497b      	ldr	r1, [pc, #492]	; (800c654 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c466:	bf14      	ite	ne
 800c468:	2301      	movne	r3, #1
 800c46a:	2300      	moveq	r3, #0
 800c46c:	4290      	cmp	r0, r2
 800c46e:	bf0c      	ite	eq
 800c470:	2300      	moveq	r3, #0
 800c472:	f003 0301 	andne.w	r3, r3, #1
 800c476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c47a:	4288      	cmp	r0, r1
 800c47c:	bf0c      	ite	eq
 800c47e:	2300      	moveq	r3, #0
 800c480:	f003 0301 	andne.w	r3, r3, #1
 800c484:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800c488:	4290      	cmp	r0, r2
 800c48a:	bf0c      	ite	eq
 800c48c:	2300      	moveq	r3, #0
 800c48e:	f003 0301 	andne.w	r3, r3, #1
 800c492:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800c496:	4288      	cmp	r0, r1
 800c498:	bf0c      	ite	eq
 800c49a:	2300      	moveq	r3, #0
 800c49c:	f003 0301 	andne.w	r3, r3, #1
 800c4a0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800c4a4:	4290      	cmp	r0, r2
 800c4a6:	bf0c      	ite	eq
 800c4a8:	2300      	moveq	r3, #0
 800c4aa:	f003 0301 	andne.w	r3, r3, #1
 800c4ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4b2:	4288      	cmp	r0, r1
 800c4b4:	bf0c      	ite	eq
 800c4b6:	2300      	moveq	r3, #0
 800c4b8:	f003 0301 	andne.w	r3, r3, #1
 800c4bc:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800c4c0:	4290      	cmp	r0, r2
 800c4c2:	bf0c      	ite	eq
 800c4c4:	2300      	moveq	r3, #0
 800c4c6:	f003 0301 	andne.w	r3, r3, #1
 800c4ca:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800c4ce:	4288      	cmp	r0, r1
 800c4d0:	bf0c      	ite	eq
 800c4d2:	2300      	moveq	r3, #0
 800c4d4:	f003 0301 	andne.w	r3, r3, #1
 800c4d8:	4290      	cmp	r0, r2
 800c4da:	bf0c      	ite	eq
 800c4dc:	2300      	moveq	r3, #0
 800c4de:	f003 0301 	andne.w	r3, r3, #1
 800c4e2:	b11b      	cbz	r3, 800c4ec <HAL_TIM_PWM_ConfigChannel+0x11c>
 800c4e4:	4b5c      	ldr	r3, [pc, #368]	; (800c658 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800c4e6:	4298      	cmp	r0, r3
 800c4e8:	f040 814e 	bne.w	800c788 <HAL_TIM_PWM_ConfigChannel+0x3b8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	f7fe f969 	bl	800a7c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4f4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4f6:	6999      	ldr	r1, [r3, #24]
 800c4f8:	f041 0108 	orr.w	r1, r1, #8
 800c4fc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4fe:	6999      	ldr	r1, [r3, #24]
 800c500:	f021 0104 	bic.w	r1, r1, #4
 800c504:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c506:	699a      	ldr	r2, [r3, #24]
 800c508:	4302      	orrs	r2, r0
 800c50a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800c50c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c50e:	2201      	movs	r2, #1
  return HAL_OK;
 800c510:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c512:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c516:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800c51c:	4b4f      	ldr	r3, [pc, #316]	; (800c65c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800c51e:	40d3      	lsrs	r3, r2
 800c520:	07db      	lsls	r3, r3, #31
 800c522:	f53f af5f 	bmi.w	800c3e4 <HAL_TIM_PWM_ConfigChannel+0x14>
 800c526:	f640 6113 	movw	r1, #3603	; 0xe13
 800c52a:	484d      	ldr	r0, [pc, #308]	; (800c660 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c52c:	f7f6 f890 	bl	8002650 <assert_failed>
 800c530:	e758      	b.n	800c3e4 <HAL_TIM_PWM_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c532:	f640 6115 	movw	r1, #3605	; 0xe15
 800c536:	484a      	ldr	r0, [pc, #296]	; (800c660 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c538:	f7f6 f88a 	bl	8002650 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800c53c:	692b      	ldr	r3, [r5, #16]
 800c53e:	f033 0304 	bics.w	r3, r3, #4
 800c542:	f43f af64 	beq.w	800c40e <HAL_TIM_PWM_ConfigChannel+0x3e>
 800c546:	f640 6116 	movw	r1, #3606	; 0xe16
 800c54a:	4845      	ldr	r0, [pc, #276]	; (800c660 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c54c:	f7f6 f880 	bl	8002650 <assert_failed>
  __HAL_LOCK(htim);
 800c550:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c554:	2b01      	cmp	r3, #1
 800c556:	f47f af5f 	bne.w	800c418 <HAL_TIM_PWM_ConfigChannel+0x48>
 800c55a:	2002      	movs	r0, #2
}
 800c55c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c55e:	6820      	ldr	r0, [r4, #0]
 800c560:	4b3a      	ldr	r3, [pc, #232]	; (800c64c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800c562:	4a3b      	ldr	r2, [pc, #236]	; (800c650 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c564:	4298      	cmp	r0, r3
 800c566:	bf18      	it	ne
 800c568:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c56c:	4939      	ldr	r1, [pc, #228]	; (800c654 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c56e:	bf14      	ite	ne
 800c570:	2301      	movne	r3, #1
 800c572:	2300      	moveq	r3, #0
 800c574:	4290      	cmp	r0, r2
 800c576:	bf0c      	ite	eq
 800c578:	2300      	moveq	r3, #0
 800c57a:	f003 0301 	andne.w	r3, r3, #1
 800c57e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c582:	4288      	cmp	r0, r1
 800c584:	bf0c      	ite	eq
 800c586:	2300      	moveq	r3, #0
 800c588:	f003 0301 	andne.w	r3, r3, #1
 800c58c:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800c590:	4290      	cmp	r0, r2
 800c592:	bf0c      	ite	eq
 800c594:	2300      	moveq	r3, #0
 800c596:	f003 0301 	andne.w	r3, r3, #1
 800c59a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800c59e:	4288      	cmp	r0, r1
 800c5a0:	bf0c      	ite	eq
 800c5a2:	2300      	moveq	r3, #0
 800c5a4:	f003 0301 	andne.w	r3, r3, #1
 800c5a8:	4290      	cmp	r0, r2
 800c5aa:	bf0c      	ite	eq
 800c5ac:	2300      	moveq	r3, #0
 800c5ae:	f003 0301 	andne.w	r3, r3, #1
 800c5b2:	b11b      	cbz	r3, 800c5bc <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800c5b4:	4b2b      	ldr	r3, [pc, #172]	; (800c664 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c5b6:	4298      	cmp	r0, r3
 800c5b8:	f040 80df 	bne.w	800c77a <HAL_TIM_PWM_ConfigChannel+0x3aa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c5bc:	4629      	mov	r1, r5
 800c5be:	f7ff fd21 	bl	800c004 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c5c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c5c4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c5c6:	6999      	ldr	r1, [r3, #24]
 800c5c8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800c5cc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c5ce:	6999      	ldr	r1, [r3, #24]
 800c5d0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800c5d4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c5d6:	699a      	ldr	r2, [r3, #24]
 800c5d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800c5dc:	619a      	str	r2, [r3, #24]
      break;
 800c5de:	e795      	b.n	800c50c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c5e0:	6820      	ldr	r0, [r4, #0]
 800c5e2:	4b1a      	ldr	r3, [pc, #104]	; (800c64c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800c5e4:	4a1a      	ldr	r2, [pc, #104]	; (800c650 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c5e6:	4298      	cmp	r0, r3
 800c5e8:	bf18      	it	ne
 800c5ea:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c5ee:	4919      	ldr	r1, [pc, #100]	; (800c654 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c5f0:	bf14      	ite	ne
 800c5f2:	2301      	movne	r3, #1
 800c5f4:	2300      	moveq	r3, #0
 800c5f6:	4290      	cmp	r0, r2
 800c5f8:	bf0c      	ite	eq
 800c5fa:	2300      	moveq	r3, #0
 800c5fc:	f003 0301 	andne.w	r3, r3, #1
 800c600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c604:	4288      	cmp	r0, r1
 800c606:	bf0c      	ite	eq
 800c608:	2300      	moveq	r3, #0
 800c60a:	f003 0301 	andne.w	r3, r3, #1
 800c60e:	4290      	cmp	r0, r2
 800c610:	bf0c      	ite	eq
 800c612:	2300      	moveq	r3, #0
 800c614:	f003 0301 	andne.w	r3, r3, #1
 800c618:	b11b      	cbz	r3, 800c622 <HAL_TIM_PWM_ConfigChannel+0x252>
 800c61a:	4b13      	ldr	r3, [pc, #76]	; (800c668 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800c61c:	4298      	cmp	r0, r3
 800c61e:	f040 80a5 	bne.w	800c76c <HAL_TIM_PWM_ConfigChannel+0x39c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c622:	4629      	mov	r1, r5
 800c624:	f7fe f930 	bl	800a888 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c628:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c62a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c62c:	69d9      	ldr	r1, [r3, #28]
 800c62e:	f041 0108 	orr.w	r1, r1, #8
 800c632:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c634:	69d9      	ldr	r1, [r3, #28]
 800c636:	f021 0104 	bic.w	r1, r1, #4
 800c63a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c63c:	69da      	ldr	r2, [r3, #28]
 800c63e:	4302      	orrs	r2, r0
 800c640:	61da      	str	r2, [r3, #28]
      break;
 800c642:	e763      	b.n	800c50c <HAL_TIM_PWM_ConfigChannel+0x13c>
 800c644:	fffeffef 	.word	0xfffeffef
 800c648:	00010040 	.word	0x00010040
 800c64c:	40010000 	.word	0x40010000
 800c650:	40000400 	.word	0x40000400
 800c654:	40000800 	.word	0x40000800
 800c658:	40002000 	.word	0x40002000
 800c65c:	00111111 	.word	0x00111111
 800c660:	080234e4 	.word	0x080234e4
 800c664:	40001800 	.word	0x40001800
 800c668:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	4b4a      	ldr	r3, [pc, #296]	; (800c798 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800c670:	4a4a      	ldr	r2, [pc, #296]	; (800c79c <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800c672:	4298      	cmp	r0, r3
 800c674:	bf18      	it	ne
 800c676:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c67a:	4949      	ldr	r1, [pc, #292]	; (800c7a0 <HAL_TIM_PWM_ConfigChannel+0x3d0>)
 800c67c:	bf14      	ite	ne
 800c67e:	2301      	movne	r3, #1
 800c680:	2300      	moveq	r3, #0
 800c682:	4290      	cmp	r0, r2
 800c684:	bf0c      	ite	eq
 800c686:	2300      	moveq	r3, #0
 800c688:	f003 0301 	andne.w	r3, r3, #1
 800c68c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c690:	4288      	cmp	r0, r1
 800c692:	bf0c      	ite	eq
 800c694:	2300      	moveq	r3, #0
 800c696:	f003 0301 	andne.w	r3, r3, #1
 800c69a:	4290      	cmp	r0, r2
 800c69c:	bf0c      	ite	eq
 800c69e:	2300      	moveq	r3, #0
 800c6a0:	f003 0301 	andne.w	r3, r3, #1
 800c6a4:	b113      	cbz	r3, 800c6ac <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800c6a6:	4b3f      	ldr	r3, [pc, #252]	; (800c7a4 <HAL_TIM_PWM_ConfigChannel+0x3d4>)
 800c6a8:	4298      	cmp	r0, r3
 800c6aa:	d158      	bne.n	800c75e <HAL_TIM_PWM_ConfigChannel+0x38e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	f7fe f951 	bl	800a954 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c6b2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c6b4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c6b6:	69d9      	ldr	r1, [r3, #28]
 800c6b8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800c6bc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c6be:	69d9      	ldr	r1, [r3, #28]
 800c6c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800c6c4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c6c6:	69da      	ldr	r2, [r3, #28]
 800c6c8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800c6cc:	61da      	str	r2, [r3, #28]
      break;
 800c6ce:	e71d      	b.n	800c50c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	4b31      	ldr	r3, [pc, #196]	; (800c798 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800c6d4:	4298      	cmp	r0, r3
 800c6d6:	d003      	beq.n	800c6e0 <HAL_TIM_PWM_ConfigChannel+0x310>
 800c6d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6dc:	4298      	cmp	r0, r3
 800c6de:	d137      	bne.n	800c750 <HAL_TIM_PWM_ConfigChannel+0x380>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	f7fe f81b 	bl	800a71c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c6e6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c6e8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c6ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c6ec:	f041 0108 	orr.w	r1, r1, #8
 800c6f0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c6f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c6f4:	f021 0104 	bic.w	r1, r1, #4
 800c6f8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c6fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c6fc:	4302      	orrs	r2, r0
 800c6fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c700:	e704      	b.n	800c50c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c702:	6820      	ldr	r0, [r4, #0]
 800c704:	4b24      	ldr	r3, [pc, #144]	; (800c798 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800c706:	4298      	cmp	r0, r3
 800c708:	d003      	beq.n	800c712 <HAL_TIM_PWM_ConfigChannel+0x342>
 800c70a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c70e:	4298      	cmp	r0, r3
 800c710:	d117      	bne.n	800c742 <HAL_TIM_PWM_ConfigChannel+0x372>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c712:	4629      	mov	r1, r5
 800c714:	f7fe f82c 	bl	800a770 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c718:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c71a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c71c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c71e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800c722:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c726:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800c72a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c72c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c72e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800c732:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c734:	e6ea      	b.n	800c50c <HAL_TIM_PWM_ConfigChannel+0x13c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800c736:	f640 6114 	movw	r1, #3604	; 0xe14
 800c73a:	481b      	ldr	r0, [pc, #108]	; (800c7a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c73c:	f7f5 ff88 	bl	8002650 <assert_failed>
 800c740:	e65b      	b.n	800c3fa <HAL_TIM_PWM_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c742:	4819      	ldr	r0, [pc, #100]	; (800c7a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c744:	f640 6177 	movw	r1, #3703	; 0xe77
 800c748:	f7f5 ff82 	bl	8002650 <assert_failed>
 800c74c:	6820      	ldr	r0, [r4, #0]
 800c74e:	e7e0      	b.n	800c712 <HAL_TIM_PWM_ConfigChannel+0x342>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c750:	4815      	ldr	r0, [pc, #84]	; (800c7a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c752:	f640 6166 	movw	r1, #3686	; 0xe66
 800c756:	f7f5 ff7b 	bl	8002650 <assert_failed>
 800c75a:	6820      	ldr	r0, [r4, #0]
 800c75c:	e7c0      	b.n	800c6e0 <HAL_TIM_PWM_ConfigChannel+0x310>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c75e:	4812      	ldr	r0, [pc, #72]	; (800c7a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c760:	f640 6155 	movw	r1, #3669	; 0xe55
 800c764:	f7f5 ff74 	bl	8002650 <assert_failed>
 800c768:	6820      	ldr	r0, [r4, #0]
 800c76a:	e79f      	b.n	800c6ac <HAL_TIM_PWM_ConfigChannel+0x2dc>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c76c:	480e      	ldr	r0, [pc, #56]	; (800c7a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c76e:	f640 6144 	movw	r1, #3652	; 0xe44
 800c772:	f7f5 ff6d 	bl	8002650 <assert_failed>
 800c776:	6820      	ldr	r0, [r4, #0]
 800c778:	e753      	b.n	800c622 <HAL_TIM_PWM_ConfigChannel+0x252>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c77a:	480b      	ldr	r0, [pc, #44]	; (800c7a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c77c:	f640 6133 	movw	r1, #3635	; 0xe33
 800c780:	f7f5 ff66 	bl	8002650 <assert_failed>
 800c784:	6820      	ldr	r0, [r4, #0]
 800c786:	e719      	b.n	800c5bc <HAL_TIM_PWM_ConfigChannel+0x1ec>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c788:	4807      	ldr	r0, [pc, #28]	; (800c7a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c78a:	f640 6122 	movw	r1, #3618	; 0xe22
 800c78e:	f7f5 ff5f 	bl	8002650 <assert_failed>
 800c792:	6820      	ldr	r0, [r4, #0]
 800c794:	e6aa      	b.n	800c4ec <HAL_TIM_PWM_ConfigChannel+0x11c>
 800c796:	bf00      	nop
 800c798:	40010000 	.word	0x40010000
 800c79c:	40000400 	.word	0x40000400
 800c7a0:	40000800 	.word	0x40000800
 800c7a4:	40010400 	.word	0x40010400
 800c7a8:	080234e4 	.word	0x080234e4

0800c7ac <TIM_TI1_SetConfig>:
{
 800c7ac:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7ae:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c7b0:	4e1b      	ldr	r6, [pc, #108]	; (800c820 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7b2:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c7b6:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7b8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7ba:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800c7bc:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c7be:	d01d      	beq.n	800c7fc <TIM_TI1_SetConfig+0x50>
 800c7c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c7c4:	d01a      	beq.n	800c7fc <TIM_TI1_SetConfig+0x50>
 800c7c6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800c7ca:	42b0      	cmp	r0, r6
 800c7cc:	d016      	beq.n	800c7fc <TIM_TI1_SetConfig+0x50>
 800c7ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c7d2:	42b0      	cmp	r0, r6
 800c7d4:	d012      	beq.n	800c7fc <TIM_TI1_SetConfig+0x50>
 800c7d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c7da:	42b0      	cmp	r0, r6
 800c7dc:	d00e      	beq.n	800c7fc <TIM_TI1_SetConfig+0x50>
 800c7de:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800c7e2:	42b0      	cmp	r0, r6
 800c7e4:	d00a      	beq.n	800c7fc <TIM_TI1_SetConfig+0x50>
 800c7e6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800c7ea:	42b0      	cmp	r0, r6
 800c7ec:	d006      	beq.n	800c7fc <TIM_TI1_SetConfig+0x50>
 800c7ee:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800c7f2:	42b0      	cmp	r0, r6
 800c7f4:	d002      	beq.n	800c7fc <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c7f6:	f044 0201 	orr.w	r2, r4, #1
 800c7fa:	e002      	b.n	800c802 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c7fc:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800c800:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c802:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c804:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c808:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c80c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c810:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c812:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c814:	4313      	orrs	r3, r2
}
 800c816:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 800c818:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800c81a:	6201      	str	r1, [r0, #32]
}
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	40010000 	.word	0x40010000

0800c824 <HAL_TIM_IC_ConfigChannel>:
{
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c826:	4bb1      	ldr	r3, [pc, #708]	; (800caec <HAL_TIM_IC_ConfigChannel+0x2c8>)
{
 800c828:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c82a:	6801      	ldr	r1, [r0, #0]
{
 800c82c:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c82e:	4fb0      	ldr	r7, [pc, #704]	; (800caf0 <HAL_TIM_IC_ConfigChannel+0x2cc>)
{
 800c830:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c832:	4299      	cmp	r1, r3
 800c834:	bf18      	it	ne
 800c836:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800c83a:	48ae      	ldr	r0, [pc, #696]	; (800caf4 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800c83c:	4aae      	ldr	r2, [pc, #696]	; (800caf8 <HAL_TIM_IC_ConfigChannel+0x2d4>)
 800c83e:	bf14      	ite	ne
 800c840:	2301      	movne	r3, #1
 800c842:	2300      	moveq	r3, #0
 800c844:	42b9      	cmp	r1, r7
 800c846:	bf0c      	ite	eq
 800c848:	2300      	moveq	r3, #0
 800c84a:	f003 0301 	andne.w	r3, r3, #1
 800c84e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800c852:	4281      	cmp	r1, r0
 800c854:	bf0c      	ite	eq
 800c856:	2300      	moveq	r3, #0
 800c858:	f003 0301 	andne.w	r3, r3, #1
 800c85c:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
 800c860:	4291      	cmp	r1, r2
 800c862:	bf0c      	ite	eq
 800c864:	2300      	moveq	r3, #0
 800c866:	f003 0301 	andne.w	r3, r3, #1
 800c86a:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800c86e:	42b9      	cmp	r1, r7
 800c870:	bf0c      	ite	eq
 800c872:	2300      	moveq	r3, #0
 800c874:	f003 0301 	andne.w	r3, r3, #1
 800c878:	f507 4788 	add.w	r7, r7, #17408	; 0x4400
 800c87c:	4281      	cmp	r1, r0
 800c87e:	bf0c      	ite	eq
 800c880:	2300      	moveq	r3, #0
 800c882:	f003 0301 	andne.w	r3, r3, #1
 800c886:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800c88a:	4291      	cmp	r1, r2
 800c88c:	bf0c      	ite	eq
 800c88e:	2300      	moveq	r3, #0
 800c890:	f003 0301 	andne.w	r3, r3, #1
 800c894:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c898:	42b9      	cmp	r1, r7
 800c89a:	bf0c      	ite	eq
 800c89c:	2300      	moveq	r3, #0
 800c89e:	f003 0301 	andne.w	r3, r3, #1
 800c8a2:	4281      	cmp	r1, r0
 800c8a4:	bf0c      	ite	eq
 800c8a6:	2300      	moveq	r3, #0
 800c8a8:	f003 0301 	andne.w	r3, r3, #1
 800c8ac:	4291      	cmp	r1, r2
 800c8ae:	bf0c      	ite	eq
 800c8b0:	2300      	moveq	r3, #0
 800c8b2:	f003 0301 	andne.w	r3, r3, #1
 800c8b6:	b11b      	cbz	r3, 800c8c0 <HAL_TIM_IC_ConfigChannel+0x9c>
 800c8b8:	4b90      	ldr	r3, [pc, #576]	; (800cafc <HAL_TIM_IC_ConfigChannel+0x2d8>)
 800c8ba:	4299      	cmp	r1, r3
 800c8bc:	f040 80fb 	bne.w	800cab6 <HAL_TIM_IC_ConfigChannel+0x292>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	f033 0202 	bics.w	r2, r3, #2
 800c8c6:	d001      	beq.n	800c8cc <HAL_TIM_IC_ConfigChannel+0xa8>
 800c8c8:	2b0a      	cmp	r3, #10
 800c8ca:	d16d      	bne.n	800c9a8 <HAL_TIM_IC_ConfigChannel+0x184>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800c8cc:	6863      	ldr	r3, [r4, #4]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d872      	bhi.n	800c9ba <HAL_TIM_IC_ConfigChannel+0x196>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800c8d4:	68a3      	ldr	r3, [r4, #8]
 800c8d6:	f033 030c 	bics.w	r3, r3, #12
 800c8da:	d177      	bne.n	800c9cc <HAL_TIM_IC_ConfigChannel+0x1a8>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800c8dc:	68e3      	ldr	r3, [r4, #12]
 800c8de:	2b0f      	cmp	r3, #15
 800c8e0:	d87c      	bhi.n	800c9dc <HAL_TIM_IC_ConfigChannel+0x1b8>
  __HAL_LOCK(htim);
 800c8e2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	f000 8082 	beq.w	800c9f0 <HAL_TIM_IC_ConfigChannel+0x1cc>
 800c8ec:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(htim);
 800c8f2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c8f6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800c8fa:	2e00      	cmp	r6, #0
 800c8fc:	d07a      	beq.n	800c9f4 <HAL_TIM_IC_ConfigChannel+0x1d0>
 800c8fe:	4b7b      	ldr	r3, [pc, #492]	; (800caec <HAL_TIM_IC_ConfigChannel+0x2c8>)
 800c900:	497b      	ldr	r1, [pc, #492]	; (800caf0 <HAL_TIM_IC_ConfigChannel+0x2cc>)
 800c902:	4298      	cmp	r0, r3
 800c904:	bf18      	it	ne
 800c906:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c90a:	4a7a      	ldr	r2, [pc, #488]	; (800caf4 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800c90c:	bf14      	ite	ne
 800c90e:	2301      	movne	r3, #1
 800c910:	2300      	moveq	r3, #0
 800c912:	4288      	cmp	r0, r1
 800c914:	bf0c      	ite	eq
 800c916:	2300      	moveq	r3, #0
 800c918:	f003 0301 	andne.w	r3, r3, #1
 800c91c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c920:	4290      	cmp	r0, r2
 800c922:	bf0c      	ite	eq
 800c924:	2300      	moveq	r3, #0
 800c926:	f003 0301 	andne.w	r3, r3, #1
 800c92a:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800c92e:	4288      	cmp	r0, r1
 800c930:	bf0c      	ite	eq
 800c932:	2300      	moveq	r3, #0
 800c934:	f003 0301 	andne.w	r3, r3, #1
 800c938:	4290      	cmp	r0, r2
 800c93a:	bf0c      	ite	eq
 800c93c:	2300      	moveq	r3, #0
 800c93e:	f003 0301 	andne.w	r3, r3, #1
  else if (Channel == TIM_CHANNEL_2)
 800c942:	2e04      	cmp	r6, #4
 800c944:	d065      	beq.n	800ca12 <HAL_TIM_IC_ConfigChannel+0x1ee>
  else if (Channel == TIM_CHANNEL_3)
 800c946:	2e08      	cmp	r6, #8
 800c948:	f000 8091 	beq.w	800ca6e <HAL_TIM_IC_ConfigChannel+0x24a>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f040 80b8 	bne.w	800cac2 <HAL_TIM_IC_ConfigChannel+0x29e>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c952:	6a01      	ldr	r1, [r0, #32]
    TIM_TI4_SetConfig(htim->Instance,
 800c954:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c956:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800c95a:	6867      	ldr	r7, [r4, #4]
 800c95c:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c95e:	031b      	lsls	r3, r3, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c960:	6201      	str	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c962:	69c1      	ldr	r1, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c964:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800c966:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c968:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c96c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c970:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c972:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c976:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c978:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c97c:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c97e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c982:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800c984:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800c986:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c988:	69c2      	ldr	r2, [r0, #28]
 800c98a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c98e:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c990:	69c3      	ldr	r3, [r0, #28]
 800c992:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800c996:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800c998:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c99a:	2201      	movs	r2, #1
  return HAL_OK;
 800c99c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c99e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c9a2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800c9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800c9a8:	f640 51af 	movw	r1, #3503	; 0xdaf
 800c9ac:	4854      	ldr	r0, [pc, #336]	; (800cb00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c9ae:	f7f5 fe4f 	bl	8002650 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800c9b2:	6863      	ldr	r3, [r4, #4]
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d98c      	bls.n	800c8d4 <HAL_TIM_IC_ConfigChannel+0xb0>
 800c9ba:	f44f 615b 	mov.w	r1, #3504	; 0xdb0
 800c9be:	4850      	ldr	r0, [pc, #320]	; (800cb00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c9c0:	f7f5 fe46 	bl	8002650 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800c9c4:	68a3      	ldr	r3, [r4, #8]
 800c9c6:	f033 030c 	bics.w	r3, r3, #12
 800c9ca:	d087      	beq.n	800c8dc <HAL_TIM_IC_ConfigChannel+0xb8>
 800c9cc:	f640 51b1 	movw	r1, #3505	; 0xdb1
 800c9d0:	484b      	ldr	r0, [pc, #300]	; (800cb00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c9d2:	f7f5 fe3d 	bl	8002650 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800c9d6:	68e3      	ldr	r3, [r4, #12]
 800c9d8:	2b0f      	cmp	r3, #15
 800c9da:	d982      	bls.n	800c8e2 <HAL_TIM_IC_ConfigChannel+0xbe>
 800c9dc:	f640 51b2 	movw	r1, #3506	; 0xdb2
 800c9e0:	4847      	ldr	r0, [pc, #284]	; (800cb00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c9e2:	f7f5 fe35 	bl	8002650 <assert_failed>
  __HAL_LOCK(htim);
 800c9e6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	f47f af7e 	bne.w	800c8ec <HAL_TIM_IC_ConfigChannel+0xc8>
 800c9f0:	2002      	movs	r0, #2
}
 800c9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800c9f4:	e9d4 1200 	ldrd	r1, r2, [r4]
 800c9f8:	68e3      	ldr	r3, [r4, #12]
 800c9fa:	f7ff fed7 	bl	800c7ac <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c9fe:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ca00:	68a0      	ldr	r0, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ca02:	6999      	ldr	r1, [r3, #24]
 800ca04:	f021 010c 	bic.w	r1, r1, #12
 800ca08:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ca0a:	699a      	ldr	r2, [r3, #24]
 800ca0c:	4302      	orrs	r2, r0
 800ca0e:	619a      	str	r2, [r3, #24]
 800ca10:	e7c2      	b.n	800c998 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ca12:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ca16:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ca1a:	4288      	cmp	r0, r1
 800ca1c:	bf18      	it	ne
 800ca1e:	4290      	cmpne	r0, r2
 800ca20:	d001      	beq.n	800ca26 <HAL_TIM_IC_ConfigChannel+0x202>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d15b      	bne.n	800cade <HAL_TIM_IC_ConfigChannel+0x2ba>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca26:	6a01      	ldr	r1, [r0, #32]
    TIM_TI2_SetConfig(htim->Instance,
 800ca28:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca2a:	f021 0110 	bic.w	r1, r1, #16
    TIM_TI2_SetConfig(htim->Instance,
 800ca2e:	6867      	ldr	r7, [r4, #4]
 800ca30:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ca32:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca34:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca36:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ca38:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800ca3a:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ca3c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ca40:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ca44:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca46:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ca4a:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ca4c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ca50:	4333      	orrs	r3, r6
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca52:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ca56:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800ca58:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ca5a:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ca5c:	6982      	ldr	r2, [r0, #24]
 800ca5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ca62:	6182      	str	r2, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ca64:	6983      	ldr	r3, [r0, #24]
 800ca66:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800ca6a:	6183      	str	r3, [r0, #24]
 800ca6c:	e794      	b.n	800c998 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d12e      	bne.n	800cad0 <HAL_TIM_IC_ConfigChannel+0x2ac>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca72:	6a06      	ldr	r6, [r0, #32]
    TIM_TI3_SetConfig(htim->Instance,
 800ca74:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca76:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800ca7a:	6861      	ldr	r1, [r4, #4]
 800ca7c:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ca7e:	021b      	lsls	r3, r3, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca80:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ca82:	69c7      	ldr	r7, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ca84:	0112      	lsls	r2, r2, #4
  tmpccer = TIMx->CCER;
 800ca86:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ca88:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ca8c:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ca90:	b2d2      	uxtb	r2, r2
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ca92:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ca96:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= TIM_ICSelection;
 800ca98:	4339      	orrs	r1, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ca9a:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ca9c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800caa0:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800caa2:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800caa4:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800caa6:	69c2      	ldr	r2, [r0, #28]
 800caa8:	f022 020c 	bic.w	r2, r2, #12
 800caac:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800caae:	69c3      	ldr	r3, [r0, #28]
 800cab0:	4323      	orrs	r3, r4
 800cab2:	61c3      	str	r3, [r0, #28]
 800cab4:	e770      	b.n	800c998 <HAL_TIM_IC_ConfigChannel+0x174>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cab6:	f640 51ae 	movw	r1, #3502	; 0xdae
 800caba:	4811      	ldr	r0, [pc, #68]	; (800cb00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800cabc:	f7f5 fdc8 	bl	8002650 <assert_failed>
 800cac0:	e6fe      	b.n	800c8c0 <HAL_TIM_IC_ConfigChannel+0x9c>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800cac2:	480f      	ldr	r0, [pc, #60]	; (800cb00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800cac4:	f640 51ea 	movw	r1, #3562	; 0xdea
 800cac8:	f7f5 fdc2 	bl	8002650 <assert_failed>
 800cacc:	6828      	ldr	r0, [r5, #0]
 800cace:	e740      	b.n	800c952 <HAL_TIM_IC_ConfigChannel+0x12e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800cad0:	480b      	ldr	r0, [pc, #44]	; (800cb00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800cad2:	f640 51da 	movw	r1, #3546	; 0xdda
 800cad6:	f7f5 fdbb 	bl	8002650 <assert_failed>
 800cada:	6828      	ldr	r0, [r5, #0]
 800cadc:	e7c9      	b.n	800ca72 <HAL_TIM_IC_ConfigChannel+0x24e>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cade:	4808      	ldr	r0, [pc, #32]	; (800cb00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800cae0:	f640 51ca 	movw	r1, #3530	; 0xdca
 800cae4:	f7f5 fdb4 	bl	8002650 <assert_failed>
 800cae8:	6828      	ldr	r0, [r5, #0]
 800caea:	e79c      	b.n	800ca26 <HAL_TIM_IC_ConfigChannel+0x202>
 800caec:	40010000 	.word	0x40010000
 800caf0:	40000400 	.word	0x40000400
 800caf4:	40000800 	.word	0x40000800
 800caf8:	40000c00 	.word	0x40000c00
 800cafc:	40002000 	.word	0x40002000
 800cb00:	080234e4 	.word	0x080234e4

0800cb04 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800cb04:	4b2b      	ldr	r3, [pc, #172]	; (800cbb4 <TIM_CCxChannelCmd+0xb0>)
 800cb06:	4298      	cmp	r0, r3
{
 800cb08:	b530      	push	{r4, r5, lr}
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	b083      	sub	sp, #12
 800cb0e:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800cb10:	d031      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800cb16:	d02e      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb18:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800cb1c:	4298      	cmp	r0, r3
 800cb1e:	d02a      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb24:	4298      	cmp	r0, r3
 800cb26:	d026      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb2c:	4298      	cmp	r0, r3
 800cb2e:	d022      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb30:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800cb34:	4298      	cmp	r0, r3
 800cb36:	d01e      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb38:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800cb3c:	4298      	cmp	r0, r3
 800cb3e:	d01a      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb44:	4298      	cmp	r0, r3
 800cb46:	d016      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb4c:	4298      	cmp	r0, r3
 800cb4e:	d012      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb50:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800cb54:	4298      	cmp	r0, r3
 800cb56:	d00e      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb5c:	4298      	cmp	r0, r3
 800cb5e:	d00a      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb64:	4298      	cmp	r0, r3
 800cb66:	d006      	beq.n	800cb76 <TIM_CCxChannelCmd+0x72>
 800cb68:	f641 21ad 	movw	r1, #6829	; 0x1aad
 800cb6c:	4812      	ldr	r0, [pc, #72]	; (800cbb8 <TIM_CCxChannelCmd+0xb4>)
 800cb6e:	9201      	str	r2, [sp, #4]
 800cb70:	f7f5 fd6e 	bl	8002650 <assert_failed>
 800cb74:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800cb76:	2d14      	cmp	r5, #20
 800cb78:	d910      	bls.n	800cb9c <TIM_CCxChannelCmd+0x98>
 800cb7a:	2d3c      	cmp	r5, #60	; 0x3c
 800cb7c:	d112      	bne.n	800cba4 <TIM_CCxChannelCmd+0xa0>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb7e:	f005 051f 	and.w	r5, r5, #31
 800cb82:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb84:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb86:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb88:	fa02 f505 	lsl.w	r5, r2, r5
  TIMx->CCER &= ~tmp;
 800cb8c:	ea23 0301 	bic.w	r3, r3, r1
 800cb90:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb92:	6a22      	ldr	r2, [r4, #32]
 800cb94:	4315      	orrs	r5, r2
 800cb96:	6225      	str	r5, [r4, #32]
}
 800cb98:	b003      	add	sp, #12
 800cb9a:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800cb9c:	4b07      	ldr	r3, [pc, #28]	; (800cbbc <TIM_CCxChannelCmd+0xb8>)
 800cb9e:	40eb      	lsrs	r3, r5
 800cba0:	07db      	lsls	r3, r3, #31
 800cba2:	d4ec      	bmi.n	800cb7e <TIM_CCxChannelCmd+0x7a>
 800cba4:	f641 21ae 	movw	r1, #6830	; 0x1aae
 800cba8:	4803      	ldr	r0, [pc, #12]	; (800cbb8 <TIM_CCxChannelCmd+0xb4>)
 800cbaa:	9201      	str	r2, [sp, #4]
 800cbac:	f7f5 fd50 	bl	8002650 <assert_failed>
 800cbb0:	9a01      	ldr	r2, [sp, #4]
 800cbb2:	e7e4      	b.n	800cb7e <TIM_CCxChannelCmd+0x7a>
 800cbb4:	40010000 	.word	0x40010000
 800cbb8:	080234e4 	.word	0x080234e4
 800cbbc:	00111111 	.word	0x00111111

0800cbc0 <HAL_TIM_IC_Start_DMA>:
{
 800cbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cbc6:	4883      	ldr	r0, [pc, #524]	; (800cdd4 <HAL_TIM_IC_Start_DMA+0x214>)
{
 800cbc8:	b083      	sub	sp, #12
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cbca:	6821      	ldr	r1, [r4, #0]
 800cbcc:	4281      	cmp	r1, r0
 800cbce:	f000 8083 	beq.w	800ccd8 <HAL_TIM_IC_Start_DMA+0x118>
 800cbd2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800cbd6:	d053      	beq.n	800cc80 <HAL_TIM_IC_Start_DMA+0xc0>
 800cbd8:	487f      	ldr	r0, [pc, #508]	; (800cdd8 <HAL_TIM_IC_Start_DMA+0x218>)
 800cbda:	4281      	cmp	r1, r0
 800cbdc:	d050      	beq.n	800cc80 <HAL_TIM_IC_Start_DMA+0xc0>
 800cbde:	487f      	ldr	r0, [pc, #508]	; (800cddc <HAL_TIM_IC_Start_DMA+0x21c>)
 800cbe0:	4281      	cmp	r1, r0
 800cbe2:	d04d      	beq.n	800cc80 <HAL_TIM_IC_Start_DMA+0xc0>
 800cbe4:	487e      	ldr	r0, [pc, #504]	; (800cde0 <HAL_TIM_IC_Start_DMA+0x220>)
 800cbe6:	4281      	cmp	r1, r0
 800cbe8:	d04a      	beq.n	800cc80 <HAL_TIM_IC_Start_DMA+0xc0>
 800cbea:	487e      	ldr	r0, [pc, #504]	; (800cde4 <HAL_TIM_IC_Start_DMA+0x224>)
 800cbec:	4281      	cmp	r1, r0
 800cbee:	d073      	beq.n	800ccd8 <HAL_TIM_IC_Start_DMA+0x118>
 800cbf0:	487d      	ldr	r0, [pc, #500]	; (800cde8 <HAL_TIM_IC_Start_DMA+0x228>)
 800cbf2:	4281      	cmp	r1, r0
 800cbf4:	f000 80d5 	beq.w	800cda2 <HAL_TIM_IC_Start_DMA+0x1e2>
 800cbf8:	487c      	ldr	r0, [pc, #496]	; (800cdec <HAL_TIM_IC_Start_DMA+0x22c>)
 800cbfa:	4281      	cmp	r1, r0
 800cbfc:	f040 80d6 	bne.w	800cdac <HAL_TIM_IC_Start_DMA+0x1ec>
 800cc00:	2d00      	cmp	r5, #0
 800cc02:	f000 80c4 	beq.w	800cd8e <HAL_TIM_IC_Start_DMA+0x1ce>
 800cc06:	f640 010d 	movw	r1, #2061	; 0x80d
 800cc0a:	4879      	ldr	r0, [pc, #484]	; (800cdf0 <HAL_TIM_IC_Start_DMA+0x230>)
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800cc0c:	4e72      	ldr	r6, [pc, #456]	; (800cdd8 <HAL_TIM_IC_Start_DMA+0x218>)
 800cc0e:	4f73      	ldr	r7, [pc, #460]	; (800cddc <HAL_TIM_IC_Start_DMA+0x21c>)
 800cc10:	e9cd 2300 	strd	r2, r3, [sp]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cc14:	f7f5 fd1c 	bl	8002650 <assert_failed>
 800cc18:	6820      	ldr	r0, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800cc1a:	496e      	ldr	r1, [pc, #440]	; (800cdd4 <HAL_TIM_IC_Start_DMA+0x214>)
 800cc1c:	4288      	cmp	r0, r1
 800cc1e:	bf18      	it	ne
 800cc20:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800cc24:	bf14      	ite	ne
 800cc26:	2101      	movne	r1, #1
 800cc28:	2100      	moveq	r1, #0
 800cc2a:	42b0      	cmp	r0, r6
 800cc2c:	bf0c      	ite	eq
 800cc2e:	2100      	moveq	r1, #0
 800cc30:	f001 0101 	andne.w	r1, r1, #1
 800cc34:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800cc38:	42b8      	cmp	r0, r7
 800cc3a:	bf0c      	ite	eq
 800cc3c:	2100      	moveq	r1, #0
 800cc3e:	f001 0101 	andne.w	r1, r1, #1
 800cc42:	42b0      	cmp	r0, r6
 800cc44:	bf0c      	ite	eq
 800cc46:	2100      	moveq	r1, #0
 800cc48:	f001 0101 	andne.w	r1, r1, #1
 800cc4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc50:	2900      	cmp	r1, #0
 800cc52:	f040 8098 	bne.w	800cd86 <HAL_TIM_IC_Start_DMA+0x1c6>
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800cc56:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800cc5a:	b2c0      	uxtb	r0, r0
 800cc5c:	2802      	cmp	r0, #2
 800cc5e:	d039      	beq.n	800ccd4 <HAL_TIM_IC_Start_DMA+0x114>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800cc60:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800cc64:	2901      	cmp	r1, #1
 800cc66:	d03e      	beq.n	800cce6 <HAL_TIM_IC_Start_DMA+0x126>
 800cc68:	6820      	ldr	r0, [r4, #0]
  switch (Channel)
 800cc6a:	2d0c      	cmp	r5, #12
 800cc6c:	d820      	bhi.n	800ccb0 <HAL_TIM_IC_Start_DMA+0xf0>
 800cc6e:	e8df f005 	tbb	[pc, r5]
 800cc72:	1f0b      	.short	0x1f0b
 800cc74:	1f411f1f 	.word	0x1f411f1f
 800cc78:	1f571f1f 	.word	0x1f571f1f
 800cc7c:	1f1f      	.short	0x1f1f
 800cc7e:	6d          	.byte	0x6d
 800cc7f:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cc80:	f035 010c 	bics.w	r1, r5, #12
 800cc84:	d1bf      	bne.n	800cc06 <HAL_TIM_IC_Start_DMA+0x46>
 800cc86:	e7e6      	b.n	800cc56 <HAL_TIM_IC_Start_DMA+0x96>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc88:	6a66      	ldr	r6, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800cc8a:	f100 0134 	add.w	r1, r0, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cc8e:	4f59      	ldr	r7, [pc, #356]	; (800cdf4 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc90:	f8df c17c 	ldr.w	ip, [pc, #380]	; 800ce10 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800cc94:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cc96:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800cc98:	4f57      	ldr	r7, [pc, #348]	; (800cdf8 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc9a:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800cc9e:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800cca0:	f7f8 ff70 	bl	8005b84 <HAL_DMA_Start_IT>
 800cca4:	bb18      	cbnz	r0, 800ccee <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800cca6:	6820      	ldr	r0, [r4, #0]
 800cca8:	68c3      	ldr	r3, [r0, #12]
 800ccaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ccae:	60c3      	str	r3, [r0, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f7ff ff26 	bl	800cb04 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccb8:	6822      	ldr	r2, [r4, #0]
 800ccba:	4b50      	ldr	r3, [pc, #320]	; (800cdfc <HAL_TIM_IC_Start_DMA+0x23c>)
 800ccbc:	6891      	ldr	r1, [r2, #8]
 800ccbe:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccc0:	2b06      	cmp	r3, #6
 800ccc2:	d05d      	beq.n	800cd80 <HAL_TIM_IC_Start_DMA+0x1c0>
 800ccc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccc8:	d05a      	beq.n	800cd80 <HAL_TIM_IC_Start_DMA+0x1c0>
    __HAL_TIM_ENABLE(htim);
 800ccca:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800cccc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800ccce:	f043 0301 	orr.w	r3, r3, #1
 800ccd2:	6013      	str	r3, [r2, #0]
}
 800ccd4:	b003      	add	sp, #12
 800ccd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ccd8:	2d14      	cmp	r5, #20
 800ccda:	d894      	bhi.n	800cc06 <HAL_TIM_IC_Start_DMA+0x46>
 800ccdc:	4948      	ldr	r1, [pc, #288]	; (800ce00 <HAL_TIM_IC_Start_DMA+0x240>)
 800ccde:	40e9      	lsrs	r1, r5
 800cce0:	07c9      	lsls	r1, r1, #31
 800cce2:	d4b8      	bmi.n	800cc56 <HAL_TIM_IC_Start_DMA+0x96>
 800cce4:	e78f      	b.n	800cc06 <HAL_TIM_IC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 800cce6:	2a00      	cmp	r2, #0
 800cce8:	d146      	bne.n	800cd78 <HAL_TIM_IC_Start_DMA+0x1b8>
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d044      	beq.n	800cd78 <HAL_TIM_IC_Start_DMA+0x1b8>
      return HAL_ERROR;
 800ccee:	2001      	movs	r0, #1
}
 800ccf0:	b003      	add	sp, #12
 800ccf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800ccf4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800ccf6:	f100 0138 	add.w	r1, r0, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ccfa:	4f3e      	ldr	r7, [pc, #248]	; (800cdf4 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800ccfc:	f8df c110 	ldr.w	ip, [pc, #272]	; 800ce10 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800cd00:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cd02:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800cd04:	4f3c      	ldr	r7, [pc, #240]	; (800cdf8 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800cd06:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800cd0a:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800cd0c:	f7f8 ff3a 	bl	8005b84 <HAL_DMA_Start_IT>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d1ec      	bne.n	800ccee <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800cd14:	6820      	ldr	r0, [r4, #0]
 800cd16:	68c3      	ldr	r3, [r0, #12]
 800cd18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cd1c:	60c3      	str	r3, [r0, #12]
      break;
 800cd1e:	e7c7      	b.n	800ccb0 <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800cd20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800cd22:	f100 013c 	add.w	r1, r0, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cd26:	4f33      	ldr	r7, [pc, #204]	; (800cdf4 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800cd28:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ce10 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800cd2c:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cd2e:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800cd30:	4f31      	ldr	r7, [pc, #196]	; (800cdf8 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800cd32:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800cd36:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800cd38:	f7f8 ff24 	bl	8005b84 <HAL_DMA_Start_IT>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d1d6      	bne.n	800ccee <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800cd40:	6820      	ldr	r0, [r4, #0]
 800cd42:	68c3      	ldr	r3, [r0, #12]
 800cd44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cd48:	60c3      	str	r3, [r0, #12]
      break;
 800cd4a:	e7b1      	b.n	800ccb0 <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800cd4c:	6b26      	ldr	r6, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800cd4e:	f100 0140 	add.w	r1, r0, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cd52:	4f28      	ldr	r7, [pc, #160]	; (800cdf4 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800cd54:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800ce10 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800cd58:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cd5a:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800cd5c:	4f26      	ldr	r7, [pc, #152]	; (800cdf8 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800cd5e:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800cd62:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800cd64:	f7f8 ff0e 	bl	8005b84 <HAL_DMA_Start_IT>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d1c0      	bne.n	800ccee <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	68c3      	ldr	r3, [r0, #12]
 800cd70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd74:	60c3      	str	r3, [r0, #12]
      break;
 800cd76:	e79b      	b.n	800ccb0 <HAL_TIM_IC_Start_DMA+0xf0>
      htim->State = HAL_TIM_STATE_BUSY;
 800cd78:	2102      	movs	r1, #2
 800cd7a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800cd7e:	e773      	b.n	800cc68 <HAL_TIM_IC_Start_DMA+0xa8>
  return HAL_OK;
 800cd80:	2000      	movs	r0, #0
}
 800cd82:	b003      	add	sp, #12
 800cd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800cd86:	4917      	ldr	r1, [pc, #92]	; (800cde4 <HAL_TIM_IC_Start_DMA+0x224>)
 800cd88:	4288      	cmp	r0, r1
 800cd8a:	f43f af64 	beq.w	800cc56 <HAL_TIM_IC_Start_DMA+0x96>
 800cd8e:	f640 010e 	movw	r1, #2062	; 0x80e
 800cd92:	4817      	ldr	r0, [pc, #92]	; (800cdf0 <HAL_TIM_IC_Start_DMA+0x230>)
 800cd94:	e9cd 2300 	strd	r2, r3, [sp]
 800cd98:	f7f5 fc5a 	bl	8002650 <assert_failed>
 800cd9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cda0:	e759      	b.n	800cc56 <HAL_TIM_IC_Start_DMA+0x96>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cda2:	f035 0104 	bics.w	r1, r5, #4
 800cda6:	f47f af2e 	bne.w	800cc06 <HAL_TIM_IC_Start_DMA+0x46>
 800cdaa:	e7f0      	b.n	800cd8e <HAL_TIM_IC_Start_DMA+0x1ce>
 800cdac:	4815      	ldr	r0, [pc, #84]	; (800ce04 <HAL_TIM_IC_Start_DMA+0x244>)
 800cdae:	4281      	cmp	r1, r0
 800cdb0:	f43f af26 	beq.w	800cc00 <HAL_TIM_IC_Start_DMA+0x40>
 800cdb4:	f5a0 3098 	sub.w	r0, r0, #77824	; 0x13000
 800cdb8:	4281      	cmp	r1, r0
 800cdba:	d0f2      	beq.n	800cda2 <HAL_TIM_IC_Start_DMA+0x1e2>
 800cdbc:	4812      	ldr	r0, [pc, #72]	; (800ce08 <HAL_TIM_IC_Start_DMA+0x248>)
 800cdbe:	4281      	cmp	r1, r0
 800cdc0:	f43f af1e 	beq.w	800cc00 <HAL_TIM_IC_Start_DMA+0x40>
 800cdc4:	4811      	ldr	r0, [pc, #68]	; (800ce0c <HAL_TIM_IC_Start_DMA+0x24c>)
 800cdc6:	4281      	cmp	r1, r0
 800cdc8:	f47f af1d 	bne.w	800cc06 <HAL_TIM_IC_Start_DMA+0x46>
 800cdcc:	2d00      	cmp	r5, #0
 800cdce:	f47f af1a 	bne.w	800cc06 <HAL_TIM_IC_Start_DMA+0x46>
 800cdd2:	e7dc      	b.n	800cd8e <HAL_TIM_IC_Start_DMA+0x1ce>
 800cdd4:	40010000 	.word	0x40010000
 800cdd8:	40000400 	.word	0x40000400
 800cddc:	40000800 	.word	0x40000800
 800cde0:	40000c00 	.word	0x40000c00
 800cde4:	40010400 	.word	0x40010400
 800cde8:	40014000 	.word	0x40014000
 800cdec:	40014400 	.word	0x40014400
 800cdf0:	080234e4 	.word	0x080234e4
 800cdf4:	0800b745 	.word	0x0800b745
 800cdf8:	0800b921 	.word	0x0800b921
 800cdfc:	00010007 	.word	0x00010007
 800ce00:	00111111 	.word	0x00111111
 800ce04:	40014800 	.word	0x40014800
 800ce08:	40001c00 	.word	0x40001c00
 800ce0c:	40002000 	.word	0x40002000
 800ce10:	0800b6e1 	.word	0x0800b6e1

0800ce14 <HAL_TIM_IC_Stop_DMA>:
{
 800ce14:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ce16:	4a5a      	ldr	r2, [pc, #360]	; (800cf80 <HAL_TIM_IC_Stop_DMA+0x16c>)
{
 800ce18:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ce1a:	6803      	ldr	r3, [r0, #0]
{
 800ce1c:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	f000 808e 	beq.w	800cf40 <HAL_TIM_IC_Stop_DMA+0x12c>
 800ce24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce28:	d04a      	beq.n	800cec0 <HAL_TIM_IC_Stop_DMA+0xac>
 800ce2a:	4a56      	ldr	r2, [pc, #344]	; (800cf84 <HAL_TIM_IC_Stop_DMA+0x170>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d047      	beq.n	800cec0 <HAL_TIM_IC_Stop_DMA+0xac>
 800ce30:	4a55      	ldr	r2, [pc, #340]	; (800cf88 <HAL_TIM_IC_Stop_DMA+0x174>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d044      	beq.n	800cec0 <HAL_TIM_IC_Stop_DMA+0xac>
 800ce36:	4a55      	ldr	r2, [pc, #340]	; (800cf8c <HAL_TIM_IC_Stop_DMA+0x178>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d041      	beq.n	800cec0 <HAL_TIM_IC_Stop_DMA+0xac>
 800ce3c:	4a54      	ldr	r2, [pc, #336]	; (800cf90 <HAL_TIM_IC_Stop_DMA+0x17c>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d07e      	beq.n	800cf40 <HAL_TIM_IC_Stop_DMA+0x12c>
 800ce42:	4a54      	ldr	r2, [pc, #336]	; (800cf94 <HAL_TIM_IC_Stop_DMA+0x180>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	f000 8082 	beq.w	800cf4e <HAL_TIM_IC_Stop_DMA+0x13a>
 800ce4a:	4a53      	ldr	r2, [pc, #332]	; (800cf98 <HAL_TIM_IC_Stop_DMA+0x184>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	f040 8083 	bne.w	800cf58 <HAL_TIM_IC_Stop_DMA+0x144>
 800ce52:	b325      	cbz	r5, 800ce9e <HAL_TIM_IC_Stop_DMA+0x8a>
 800ce54:	f640 0192 	movw	r1, #2194	; 0x892
 800ce58:	4850      	ldr	r0, [pc, #320]	; (800cf9c <HAL_TIM_IC_Stop_DMA+0x188>)
 800ce5a:	f7f5 fbf9 	bl	8002650 <assert_failed>
 800ce5e:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800ce60:	4a47      	ldr	r2, [pc, #284]	; (800cf80 <HAL_TIM_IC_Stop_DMA+0x16c>)
 800ce62:	4948      	ldr	r1, [pc, #288]	; (800cf84 <HAL_TIM_IC_Stop_DMA+0x170>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	bf18      	it	ne
 800ce68:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ce6c:	4846      	ldr	r0, [pc, #280]	; (800cf88 <HAL_TIM_IC_Stop_DMA+0x174>)
 800ce6e:	bf14      	ite	ne
 800ce70:	2201      	movne	r2, #1
 800ce72:	2200      	moveq	r2, #0
 800ce74:	428b      	cmp	r3, r1
 800ce76:	bf0c      	ite	eq
 800ce78:	2200      	moveq	r2, #0
 800ce7a:	f002 0201 	andne.w	r2, r2, #1
 800ce7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce82:	4283      	cmp	r3, r0
 800ce84:	bf0c      	ite	eq
 800ce86:	2200      	moveq	r2, #0
 800ce88:	f002 0201 	andne.w	r2, r2, #1
 800ce8c:	428b      	cmp	r3, r1
 800ce8e:	bf0c      	ite	eq
 800ce90:	2200      	moveq	r2, #0
 800ce92:	f002 0201 	andne.w	r2, r2, #1
 800ce96:	b142      	cbz	r2, 800ceaa <HAL_TIM_IC_Stop_DMA+0x96>
 800ce98:	4a3d      	ldr	r2, [pc, #244]	; (800cf90 <HAL_TIM_IC_Stop_DMA+0x17c>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d005      	beq.n	800ceaa <HAL_TIM_IC_Stop_DMA+0x96>
 800ce9e:	f640 0193 	movw	r1, #2195	; 0x893
 800cea2:	483e      	ldr	r0, [pc, #248]	; (800cf9c <HAL_TIM_IC_Stop_DMA+0x188>)
 800cea4:	f7f5 fbd4 	bl	8002650 <assert_failed>
 800cea8:	6823      	ldr	r3, [r4, #0]
  switch (Channel)
 800ceaa:	2d0c      	cmp	r5, #12
 800ceac:	d814      	bhi.n	800ced8 <HAL_TIM_IC_Stop_DMA+0xc4>
 800ceae:	e8df f005 	tbb	[pc, r5]
 800ceb2:	130b      	.short	0x130b
 800ceb4:	133e1313 	.word	0x133e1313
 800ceb8:	13351313 	.word	0x13351313
 800cebc:	1313      	.short	0x1313
 800cebe:	2c          	.byte	0x2c
 800cebf:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cec0:	f035 020c 	bics.w	r2, r5, #12
 800cec4:	d1c6      	bne.n	800ce54 <HAL_TIM_IC_Stop_DMA+0x40>
 800cec6:	e7f0      	b.n	800ceaa <HAL_TIM_IC_Stop_DMA+0x96>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800cec8:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ceca:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800cecc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ced0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ced2:	f7f8 fef9 	bl	8005cc8 <HAL_DMA_Abort_IT>
 800ced6:	6823      	ldr	r3, [r4, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ced8:	4629      	mov	r1, r5
 800ceda:	4618      	mov	r0, r3
 800cedc:	2200      	movs	r2, #0
 800cede:	f7ff fe11 	bl	800cb04 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	f241 1211 	movw	r2, #4369	; 0x1111
 800cee8:	6a19      	ldr	r1, [r3, #32]
 800ceea:	4211      	tst	r1, r2
 800ceec:	d108      	bne.n	800cf00 <HAL_TIM_IC_Stop_DMA+0xec>
 800ceee:	6a19      	ldr	r1, [r3, #32]
 800cef0:	f240 4244 	movw	r2, #1092	; 0x444
 800cef4:	4211      	tst	r1, r2
 800cef6:	d103      	bne.n	800cf00 <HAL_TIM_IC_Stop_DMA+0xec>
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	f022 0201 	bic.w	r2, r2, #1
 800cefe:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800cf00:	2301      	movs	r3, #1
}
 800cf02:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cf04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cf08:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800cf0a:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800cf0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800cf0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cf12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800cf14:	f7f8 fed8 	bl	8005cc8 <HAL_DMA_Abort_IT>
 800cf18:	6823      	ldr	r3, [r4, #0]
      break;
 800cf1a:	e7dd      	b.n	800ced8 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800cf1c:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800cf1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800cf20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf24:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800cf26:	f7f8 fecf 	bl	8005cc8 <HAL_DMA_Abort_IT>
 800cf2a:	6823      	ldr	r3, [r4, #0]
      break;
 800cf2c:	e7d4      	b.n	800ced8 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800cf2e:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800cf30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800cf32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800cf38:	f7f8 fec6 	bl	8005cc8 <HAL_DMA_Abort_IT>
 800cf3c:	6823      	ldr	r3, [r4, #0]
      break;
 800cf3e:	e7cb      	b.n	800ced8 <HAL_TIM_IC_Stop_DMA+0xc4>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cf40:	2d14      	cmp	r5, #20
 800cf42:	d887      	bhi.n	800ce54 <HAL_TIM_IC_Stop_DMA+0x40>
 800cf44:	4a16      	ldr	r2, [pc, #88]	; (800cfa0 <HAL_TIM_IC_Stop_DMA+0x18c>)
 800cf46:	40ea      	lsrs	r2, r5
 800cf48:	07d2      	lsls	r2, r2, #31
 800cf4a:	d4ae      	bmi.n	800ceaa <HAL_TIM_IC_Stop_DMA+0x96>
 800cf4c:	e782      	b.n	800ce54 <HAL_TIM_IC_Stop_DMA+0x40>
 800cf4e:	f035 0304 	bics.w	r3, r5, #4
 800cf52:	f47f af7f 	bne.w	800ce54 <HAL_TIM_IC_Stop_DMA+0x40>
 800cf56:	e7a2      	b.n	800ce9e <HAL_TIM_IC_Stop_DMA+0x8a>
 800cf58:	4a12      	ldr	r2, [pc, #72]	; (800cfa4 <HAL_TIM_IC_Stop_DMA+0x190>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	f43f af79 	beq.w	800ce52 <HAL_TIM_IC_Stop_DMA+0x3e>
 800cf60:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d0f2      	beq.n	800cf4e <HAL_TIM_IC_Stop_DMA+0x13a>
 800cf68:	4a0f      	ldr	r2, [pc, #60]	; (800cfa8 <HAL_TIM_IC_Stop_DMA+0x194>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	f43f af71 	beq.w	800ce52 <HAL_TIM_IC_Stop_DMA+0x3e>
 800cf70:	4a0e      	ldr	r2, [pc, #56]	; (800cfac <HAL_TIM_IC_Stop_DMA+0x198>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	f47f af6e 	bne.w	800ce54 <HAL_TIM_IC_Stop_DMA+0x40>
 800cf78:	2d00      	cmp	r5, #0
 800cf7a:	f47f af6b 	bne.w	800ce54 <HAL_TIM_IC_Stop_DMA+0x40>
 800cf7e:	e78e      	b.n	800ce9e <HAL_TIM_IC_Stop_DMA+0x8a>
 800cf80:	40010000 	.word	0x40010000
 800cf84:	40000400 	.word	0x40000400
 800cf88:	40000800 	.word	0x40000800
 800cf8c:	40000c00 	.word	0x40000c00
 800cf90:	40010400 	.word	0x40010400
 800cf94:	40014000 	.word	0x40014000
 800cf98:	40014400 	.word	0x40014400
 800cf9c:	080234e4 	.word	0x080234e4
 800cfa0:	00111111 	.word	0x00111111
 800cfa4:	40014800 	.word	0x40014800
 800cfa8:	40001c00 	.word	0x40001c00
 800cfac:	40002000 	.word	0x40002000

0800cfb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb2:	4604      	mov	r4, r0
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800cfb4:	4b48      	ldr	r3, [pc, #288]	; (800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cfb6:	4849      	ldr	r0, [pc, #292]	; (800d0dc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
{
 800cfb8:	460d      	mov	r5, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800cfba:	6822      	ldr	r2, [r4, #0]
 800cfbc:	4948      	ldr	r1, [pc, #288]	; (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	bf18      	it	ne
 800cfc2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cfc6:	4e47      	ldr	r6, [pc, #284]	; (800d0e4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cfc8:	bf14      	ite	ne
 800cfca:	2301      	movne	r3, #1
 800cfcc:	2300      	moveq	r3, #0
 800cfce:	4282      	cmp	r2, r0
 800cfd0:	bf0c      	ite	eq
 800cfd2:	2300      	moveq	r3, #0
 800cfd4:	f003 0301 	andne.w	r3, r3, #1
 800cfd8:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800cfdc:	428a      	cmp	r2, r1
 800cfde:	bf0c      	ite	eq
 800cfe0:	2300      	moveq	r3, #0
 800cfe2:	f003 0301 	andne.w	r3, r3, #1
 800cfe6:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800cfea:	42b2      	cmp	r2, r6
 800cfec:	bf0c      	ite	eq
 800cfee:	2300      	moveq	r3, #0
 800cff0:	f003 0301 	andne.w	r3, r3, #1
 800cff4:	4282      	cmp	r2, r0
 800cff6:	bf0c      	ite	eq
 800cff8:	2300      	moveq	r3, #0
 800cffa:	f003 0301 	andne.w	r3, r3, #1
 800cffe:	428a      	cmp	r2, r1
 800d000:	bf0c      	ite	eq
 800d002:	2300      	moveq	r3, #0
 800d004:	f003 0301 	andne.w	r3, r3, #1
 800d008:	b113      	cbz	r3, 800d010 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800d00a:	4b37      	ldr	r3, [pc, #220]	; (800d0e8 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d14e      	bne.n	800d0ae <HAL_TIMEx_MasterConfigSynchronization+0xfe>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d016:	2b40      	cmp	r3, #64	; 0x40
 800d018:	d001      	beq.n	800d01e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d14d      	bne.n	800d0ba <HAL_TIMEx_MasterConfigSynchronization+0x10a>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800d01e:	68ab      	ldr	r3, [r5, #8]
 800d020:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d024:	d13d      	bne.n	800d0a2 <HAL_TIMEx_MasterConfigSynchronization+0xf2>

  /* Check input state */
  __HAL_LOCK(htim);
 800d026:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d02a:	2002      	movs	r0, #2
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d01f      	beq.n	800d070 <HAL_TIMEx_MasterConfigSynchronization+0xc0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d030:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(htim);
 800d032:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d034:	4a28      	ldr	r2, [pc, #160]	; (800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d036:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d03a:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 800d03c:	685e      	ldr	r6, [r3, #4]
  __HAL_LOCK(htim);
 800d03e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800d042:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d044:	d015      	beq.n	800d072 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800d046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d011      	beq.n	800d072 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d04e:	682a      	ldr	r2, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800d050:	f026 0670 	bic.w	r6, r6, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d054:	68a8      	ldr	r0, [r5, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d056:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d05a:	4316      	orrs	r6, r2
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800d05c:	2200      	movs	r2, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d05e:	4307      	orrs	r7, r0
  htim->State = HAL_TIM_STATE_READY;
 800d060:	2101      	movs	r1, #1

  return HAL_OK;
 800d062:	4610      	mov	r0, r2
  htim->Instance->CR2 = tmpcr2;
 800d064:	605e      	str	r6, [r3, #4]
  htim->Instance->SMCR = tmpsmcr;
 800d066:	609f      	str	r7, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800d068:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d06c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800d070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800d072:	6868      	ldr	r0, [r5, #4]
 800d074:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
 800d078:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800d07c:	bf18      	it	ne
 800d07e:	2a00      	cmpne	r2, #0
 800d080:	bf14      	ite	ne
 800d082:	2101      	movne	r1, #1
 800d084:	2100      	moveq	r1, #0
 800d086:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800d08a:	bf0c      	ite	eq
 800d08c:	2100      	moveq	r1, #0
 800d08e:	f001 0101 	andne.w	r1, r1, #1
 800d092:	b111      	cbz	r1, 800d09a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d094:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 800d098:	d115      	bne.n	800d0c6 <HAL_TIMEx_MasterConfigSynchronization+0x116>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d09a:	f426 0670 	bic.w	r6, r6, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d09e:	4306      	orrs	r6, r0
 800d0a0:	e7d5      	b.n	800d04e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800d0a2:	f240 6165 	movw	r1, #1637	; 0x665
 800d0a6:	4811      	ldr	r0, [pc, #68]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800d0a8:	f7f5 fad2 	bl	8002650 <assert_failed>
 800d0ac:	e7bb      	b.n	800d026 <HAL_TIMEx_MasterConfigSynchronization+0x76>
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800d0ae:	f240 6163 	movw	r1, #1635	; 0x663
 800d0b2:	480e      	ldr	r0, [pc, #56]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800d0b4:	f7f5 facc 	bl	8002650 <assert_failed>
 800d0b8:	e7aa      	b.n	800d010 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800d0ba:	f240 6164 	movw	r1, #1636	; 0x664
 800d0be:	480b      	ldr	r0, [pc, #44]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800d0c0:	f7f5 fac6 	bl	8002650 <assert_failed>
 800d0c4:	e7ab      	b.n	800d01e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800d0c6:	4809      	ldr	r0, [pc, #36]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800d0c8:	f240 6177 	movw	r1, #1655	; 0x677
 800d0cc:	f7f5 fac0 	bl	8002650 <assert_failed>
 800d0d0:	6868      	ldr	r0, [r5, #4]
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	e7e1      	b.n	800d09a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d0d6:	bf00      	nop
 800d0d8:	40010000 	.word	0x40010000
 800d0dc:	40000400 	.word	0x40000400
 800d0e0:	40000800 	.word	0x40000800
 800d0e4:	40000c00 	.word	0x40000c00
 800d0e8:	40010400 	.word	0x40010400
 800d0ec:	0802351c 	.word	0x0802351c

0800d0f0 <HAL_TIMEx_CommutCallback>:
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop

0800d0f4 <HAL_TIMEx_BreakCallback>:
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop

0800d0f8 <HAL_TIMEx_Break2Callback>:
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop

0800d0fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d100:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800d102:	2e20      	cmp	r6, #32
 800d104:	d149      	bne.n	800d19a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d106:	2900      	cmp	r1, #0
 800d108:	d04a      	beq.n	800d1a0 <HAL_UART_Receive_DMA+0xa4>
 800d10a:	fab2 f782 	clz	r7, r2
 800d10e:	097f      	lsrs	r7, r7, #5
 800d110:	2f00      	cmp	r7, #0
 800d112:	d145      	bne.n	800d1a0 <HAL_UART_Receive_DMA+0xa4>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d114:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d03e      	beq.n	800d19a <HAL_UART_Receive_DMA+0x9e>
 800d11c:	4613      	mov	r3, r2
 800d11e:	2401      	movs	r4, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d120:	2222      	movs	r2, #34	; 0x22

    if (huart->hdmarx != NULL)
 800d122:	f8d0 e06c 	ldr.w	lr, [r0, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d126:	67c7      	str	r7, [r0, #124]	; 0x7c
 800d128:	4605      	mov	r5, r0
    huart->pRxBuffPtr = pData;
 800d12a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800d12c:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    __HAL_LOCK(huart);
 800d130:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d134:	6782      	str	r2, [r0, #120]	; 0x78
 800d136:	f8d0 c000 	ldr.w	ip, [r0]
    if (huart->hdmarx != NULL)
 800d13a:	f1be 0f00 	cmp.w	lr, #0
 800d13e:	d015      	beq.n	800d16c <HAL_UART_Receive_DMA+0x70>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d140:	481c      	ldr	r0, [pc, #112]	; (800d1b4 <HAL_UART_Receive_DMA+0xb8>)

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d142:	460a      	mov	r2, r1
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d144:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800d1b8 <HAL_UART_Receive_DMA+0xbc>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d148:	f10c 0124 	add.w	r1, ip, #36	; 0x24
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d14c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800d1bc <HAL_UART_Receive_DMA+0xc0>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d150:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d154:	4670      	mov	r0, lr
      huart->hdmarx->XferAbortCallback = NULL;
 800d156:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d15a:	f8ce 8040 	str.w	r8, [lr, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d15e:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d162:	f7f8 fd0f 	bl	8005b84 <HAL_DMA_Start_IT>
 800d166:	b9f0      	cbnz	r0, 800d1a6 <HAL_UART_Receive_DMA+0xaa>
 800d168:	f8d5 c000 	ldr.w	ip, [r5]
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d16c:	f8dc 3000 	ldr.w	r3, [ip]
    __HAL_UNLOCK(huart);
 800d170:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_UNLOCK(huart);
 800d176:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d17a:	f8cc 3000 	str.w	r3, [ip]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d17e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d182:	f043 0301 	orr.w	r3, r3, #1
 800d186:	f8cc 3008 	str.w	r3, [ip, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d18a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d192:	f8cc 3008 	str.w	r3, [ip, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800d19a:	2002      	movs	r0, #2
}
 800d19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800d1a0:	2001      	movs	r0, #1
}
 800d1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1a6:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800d1a8:	f885 7070 	strb.w	r7, [r5, #112]	; 0x70
        return HAL_ERROR;
 800d1ac:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1ae:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800d1b0:	676e      	str	r6, [r5, #116]	; 0x74
        return HAL_ERROR;
 800d1b2:	e7f3      	b.n	800d19c <HAL_UART_Receive_DMA+0xa0>
 800d1b4:	0800d1c5 	.word	0x0800d1c5
 800d1b8:	0800d201 	.word	0x0800d201
 800d1bc:	0800d20d 	.word	0x0800d20d

0800d1c0 <HAL_UART_TxCpltCallback>:
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop

0800d1c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d1c4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d1c6:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d1c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1ce:	d011      	beq.n	800d1f4 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1d0:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 800d1d2:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d1d4:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 800d1d6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d1e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1e2:	689a      	ldr	r2, [r3, #8]
 800d1e4:	f022 0201 	bic.w	r2, r2, #1
 800d1e8:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1ea:	689a      	ldr	r2, [r3, #8]
 800d1ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1f0:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800d1f2:	6781      	str	r1, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800d1f4:	f7f5 fb90 	bl	8002918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1f8:	bd08      	pop	{r3, pc}
 800d1fa:	bf00      	nop

0800d1fc <HAL_UART_RxHalfCpltCallback>:
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop

0800d200 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d200:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800d202:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d204:	f7ff fffa 	bl	800d1fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d208:	bd08      	pop	{r3, pc}
 800d20a:	bf00      	nop

0800d20c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d20c:	6b83      	ldr	r3, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d20e:	681a      	ldr	r2, [r3, #0]
{
 800d210:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d212:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d214:	6f98      	ldr	r0, [r3, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d216:	6891      	ldr	r1, [r2, #8]
 800d218:	0609      	lsls	r1, r1, #24
 800d21a:	d501      	bpl.n	800d220 <UART_DMAError+0x14>
 800d21c:	2c21      	cmp	r4, #33	; 0x21
 800d21e:	d01b      	beq.n	800d258 <UART_DMAError+0x4c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d220:	6891      	ldr	r1, [r2, #8]
 800d222:	0649      	lsls	r1, r1, #25
 800d224:	d501      	bpl.n	800d22a <UART_DMAError+0x1e>
 800d226:	2822      	cmp	r0, #34	; 0x22
 800d228:	d007      	beq.n	800d23a <UART_DMAError+0x2e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d22a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d22c:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d22e:	f042 0210 	orr.w	r2, r2, #16
 800d232:	67da      	str	r2, [r3, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800d234:	f7f5 fbb0 	bl	8002998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d238:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800d23a:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d23c:	2420      	movs	r4, #32
    huart->RxXferCount = 0U;
 800d23e:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d242:	6811      	ldr	r1, [r2, #0]
 800d244:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800d248:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d24a:	6891      	ldr	r1, [r2, #8]
 800d24c:	f021 0101 	bic.w	r1, r1, #1
 800d250:	6091      	str	r1, [r2, #8]
  huart->RxISR = NULL;
 800d252:	6618      	str	r0, [r3, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 800d254:	679c      	str	r4, [r3, #120]	; 0x78
 800d256:	e7e8      	b.n	800d22a <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 800d258:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800d25a:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 800d25c:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d260:	6811      	ldr	r1, [r2, #0]
 800d262:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800d266:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d268:	675c      	str	r4, [r3, #116]	; 0x74
 800d26a:	e7d9      	b.n	800d220 <UART_DMAError+0x14>

0800d26c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d26c:	6803      	ldr	r3, [r0, #0]
 800d26e:	69da      	ldr	r2, [r3, #28]
{
 800d270:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800d272:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d274:	681d      	ldr	r5, [r3, #0]
{
 800d276:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d278:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800d27a:	d047      	beq.n	800d30c <HAL_UART_IRQHandler+0xa0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d27c:	f011 0101 	ands.w	r1, r1, #1
 800d280:	d04b      	beq.n	800d31a <HAL_UART_IRQHandler+0xae>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d282:	07d0      	lsls	r0, r2, #31
 800d284:	d507      	bpl.n	800d296 <HAL_UART_IRQHandler+0x2a>
 800d286:	05ee      	lsls	r6, r5, #23
 800d288:	d505      	bpl.n	800d296 <HAL_UART_IRQHandler+0x2a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d28a:	2001      	movs	r0, #1
 800d28c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d28e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d290:	f040 0001 	orr.w	r0, r0, #1
 800d294:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d296:	0790      	lsls	r0, r2, #30
 800d298:	d45d      	bmi.n	800d356 <HAL_UART_IRQHandler+0xea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d29a:	0750      	lsls	r0, r2, #29
 800d29c:	d501      	bpl.n	800d2a2 <HAL_UART_IRQHandler+0x36>
 800d29e:	2900      	cmp	r1, #0
 800d2a0:	d163      	bne.n	800d36a <HAL_UART_IRQHandler+0xfe>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d2a2:	0716      	lsls	r6, r2, #28
 800d2a4:	d503      	bpl.n	800d2ae <HAL_UART_IRQHandler+0x42>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d2a6:	06a8      	lsls	r0, r5, #26
 800d2a8:	d466      	bmi.n	800d378 <HAL_UART_IRQHandler+0x10c>
 800d2aa:	2900      	cmp	r1, #0
 800d2ac:	d164      	bne.n	800d378 <HAL_UART_IRQHandler+0x10c>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d2ae:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800d2b0:	2900      	cmp	r1, #0
 800d2b2:	d031      	beq.n	800d318 <HAL_UART_IRQHandler+0xac>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d2b4:	0696      	lsls	r6, r2, #26
 800d2b6:	d501      	bpl.n	800d2bc <HAL_UART_IRQHandler+0x50>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d2b8:	06a8      	lsls	r0, r5, #26
 800d2ba:	d468      	bmi.n	800d38e <HAL_UART_IRQHandler+0x122>
      errorcode = huart->ErrorCode;
 800d2bc:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d2be:	6899      	ldr	r1, [r3, #8]
 800d2c0:	0649      	lsls	r1, r1, #25
 800d2c2:	d402      	bmi.n	800d2ca <HAL_UART_IRQHandler+0x5e>
 800d2c4:	f015 0508 	ands.w	r5, r5, #8
 800d2c8:	d068      	beq.n	800d39c <HAL_UART_IRQHandler+0x130>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2ca:	681a      	ldr	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800d2cc:	2020      	movs	r0, #32
  huart->RxISR = NULL;
 800d2ce:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d2d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2d6:	689a      	ldr	r2, [r3, #8]
 800d2d8:	f022 0201 	bic.w	r2, r2, #1
 800d2dc:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800d2de:	67a0      	str	r0, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2e0:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 800d2e2:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2e4:	0652      	lsls	r2, r2, #25
 800d2e6:	d54e      	bpl.n	800d386 <HAL_UART_IRQHandler+0x11a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2e8:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800d2ea:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2f0:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800d2f2:	2900      	cmp	r1, #0
 800d2f4:	d047      	beq.n	800d386 <HAL_UART_IRQHandler+0x11a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2f6:	4b2c      	ldr	r3, [pc, #176]	; (800d3a8 <HAL_UART_IRQHandler+0x13c>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2f8:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2fa:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2fc:	f7f8 fce4 	bl	8005cc8 <HAL_DMA_Abort_IT>
 800d300:	b150      	cbz	r0, 800d318 <HAL_UART_IRQHandler+0xac>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d302:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 800d304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d308:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d30a:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d30c:	0691      	lsls	r1, r2, #26
 800d30e:	d507      	bpl.n	800d320 <HAL_UART_IRQHandler+0xb4>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d310:	06ae      	lsls	r6, r5, #26
 800d312:	d505      	bpl.n	800d320 <HAL_UART_IRQHandler+0xb4>
      if (huart->RxISR != NULL)
 800d314:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d316:	b9db      	cbnz	r3, 800d350 <HAL_UART_IRQHandler+0xe4>
}
 800d318:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800d31a:	f415 7f90 	tst.w	r5, #288	; 0x120
 800d31e:	d1b0      	bne.n	800d282 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d320:	0616      	lsls	r6, r2, #24
 800d322:	d40f      	bmi.n	800d344 <HAL_UART_IRQHandler+0xd8>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d324:	0651      	lsls	r1, r2, #25
 800d326:	d5f7      	bpl.n	800d318 <HAL_UART_IRQHandler+0xac>
 800d328:	066a      	lsls	r2, r5, #25
 800d32a:	d5f5      	bpl.n	800d318 <HAL_UART_IRQHandler+0xac>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d32c:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d32e:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d330:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d332:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d338:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d33a:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800d33c:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800d33e:	f7ff ff3f 	bl	800d1c0 <HAL_UART_TxCpltCallback>
}
 800d342:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d344:	0628      	lsls	r0, r5, #24
 800d346:	d5ed      	bpl.n	800d324 <HAL_UART_IRQHandler+0xb8>
    if (huart->TxISR != NULL)
 800d348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d0e4      	beq.n	800d318 <HAL_UART_IRQHandler+0xac>
      huart->TxISR(huart);
 800d34e:	4620      	mov	r0, r4
}
 800d350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800d354:	4718      	bx	r3
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d356:	2900      	cmp	r1, #0
 800d358:	d0a3      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d35a:	2002      	movs	r0, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d35c:	0756      	lsls	r6, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d35e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d360:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d362:	f040 0004 	orr.w	r0, r0, #4
 800d366:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d368:	d59b      	bpl.n	800d2a2 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d36a:	2004      	movs	r0, #4
 800d36c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d36e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d370:	f040 0002 	orr.w	r0, r0, #2
 800d374:	67e0      	str	r0, [r4, #124]	; 0x7c
 800d376:	e794      	b.n	800d2a2 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d378:	2108      	movs	r1, #8
 800d37a:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d37c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800d37e:	f041 0108 	orr.w	r1, r1, #8
 800d382:	67e1      	str	r1, [r4, #124]	; 0x7c
 800d384:	e793      	b.n	800d2ae <HAL_UART_IRQHandler+0x42>
            HAL_UART_ErrorCallback(huart);
 800d386:	4620      	mov	r0, r4
 800d388:	f7f5 fb06 	bl	8002998 <HAL_UART_ErrorCallback>
}
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 800d38e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800d390:	2a00      	cmp	r2, #0
 800d392:	d093      	beq.n	800d2bc <HAL_UART_IRQHandler+0x50>
          huart->RxISR(huart);
 800d394:	4620      	mov	r0, r4
 800d396:	4790      	blx	r2
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	e78f      	b.n	800d2bc <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 800d39c:	4620      	mov	r0, r4
 800d39e:	f7f5 fafb 	bl	8002998 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3a2:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 800d3a4:	bd70      	pop	{r4, r5, r6, pc}
 800d3a6:	bf00      	nop
 800d3a8:	0800d3ad 	.word	0x0800d3ad

0800d3ac <UART_DMAAbortOnError>:
{
 800d3ac:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 800d3ae:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800d3b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  HAL_UART_ErrorCallback(huart);
 800d3b6:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800d3b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800d3bc:	f7f5 faec 	bl	8002998 <HAL_UART_ErrorCallback>
}
 800d3c0:	bd08      	pop	{r3, pc}
 800d3c2:	bf00      	nop

0800d3c4 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d3c4:	4bba      	ldr	r3, [pc, #744]	; (800d6b0 <UART_SetConfig+0x2ec>)
 800d3c6:	6842      	ldr	r2, [r0, #4]
 800d3c8:	429a      	cmp	r2, r3
{
 800d3ca:	b570      	push	{r4, r5, r6, lr}
 800d3cc:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d3ce:	f200 80bf 	bhi.w	800d550 <UART_SetConfig+0x18c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800d3d8:	d002      	beq.n	800d3e0 <UART_SetConfig+0x1c>
 800d3da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3de:	d17c      	bne.n	800d4da <UART_SetConfig+0x116>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800d3e0:	68e3      	ldr	r3, [r4, #12]
 800d3e2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800d3e6:	f040 8082 	bne.w	800d4ee <UART_SetConfig+0x12a>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800d3ea:	6a23      	ldr	r3, [r4, #32]
 800d3ec:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800d3f0:	f040 8087 	bne.w	800d502 <UART_SetConfig+0x13e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800d3f4:	6923      	ldr	r3, [r4, #16]
 800d3f6:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800d3fa:	d002      	beq.n	800d402 <UART_SetConfig+0x3e>
 800d3fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d400:	d165      	bne.n	800d4ce <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800d402:	6963      	ldr	r3, [r4, #20]
 800d404:	f033 020c 	bics.w	r2, r3, #12
 800d408:	d148      	bne.n	800d49c <UART_SetConfig+0xd8>
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d046      	beq.n	800d49c <UART_SetConfig+0xd8>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800d40e:	69a3      	ldr	r3, [r4, #24]
 800d410:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800d414:	d14b      	bne.n	800d4ae <UART_SetConfig+0xea>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800d416:	69e0      	ldr	r0, [r4, #28]
 800d418:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800d41c:	d150      	bne.n	800d4c0 <UART_SetConfig+0xfc>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	6921      	ldr	r1, [r4, #16]
 800d422:	68a2      	ldr	r2, [r4, #8]
 800d424:	681e      	ldr	r6, [r3, #0]
 800d426:	430a      	orrs	r2, r1
 800d428:	4da2      	ldr	r5, [pc, #648]	; (800d6b4 <UART_SetConfig+0x2f0>)
 800d42a:	6961      	ldr	r1, [r4, #20]
 800d42c:	4035      	ands	r5, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d42e:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d430:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d432:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d434:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800d436:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d438:	4302      	orrs	r2, r0
  tmpreg |= huart->Init.OneBitSampling;
 800d43a:	4329      	orrs	r1, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d43c:	4d9e      	ldr	r5, [pc, #632]	; (800d6b8 <UART_SetConfig+0x2f4>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d43e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d440:	685a      	ldr	r2, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d442:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d444:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800d448:	ea42 0206 	orr.w	r2, r2, r6
 800d44c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d44e:	689a      	ldr	r2, [r3, #8]
 800d450:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800d454:	ea41 0102 	orr.w	r1, r1, r2
 800d458:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d45a:	d07f      	beq.n	800d55c <UART_SetConfig+0x198>
 800d45c:	4a97      	ldr	r2, [pc, #604]	; (800d6bc <UART_SetConfig+0x2f8>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d055      	beq.n	800d50e <UART_SetConfig+0x14a>
 800d462:	4a97      	ldr	r2, [pc, #604]	; (800d6c0 <UART_SetConfig+0x2fc>)
 800d464:	4293      	cmp	r3, r2
 800d466:	f000 80f1 	beq.w	800d64c <UART_SetConfig+0x288>
 800d46a:	4a96      	ldr	r2, [pc, #600]	; (800d6c4 <UART_SetConfig+0x300>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	f000 813b 	beq.w	800d6e8 <UART_SetConfig+0x324>
 800d472:	4a95      	ldr	r2, [pc, #596]	; (800d6c8 <UART_SetConfig+0x304>)
 800d474:	4293      	cmp	r3, r2
 800d476:	f000 8091 	beq.w	800d59c <UART_SetConfig+0x1d8>
 800d47a:	4a94      	ldr	r2, [pc, #592]	; (800d6cc <UART_SetConfig+0x308>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	f000 80fd 	beq.w	800d67c <UART_SetConfig+0x2b8>
 800d482:	4a93      	ldr	r2, [pc, #588]	; (800d6d0 <UART_SetConfig+0x30c>)
 800d484:	4293      	cmp	r3, r2
 800d486:	f000 8160 	beq.w	800d74a <UART_SetConfig+0x386>
 800d48a:	4a92      	ldr	r2, [pc, #584]	; (800d6d4 <UART_SetConfig+0x310>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	f000 816e 	beq.w	800d76e <UART_SetConfig+0x3aa>
  huart->RxISR = NULL;
 800d492:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 800d494:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 800d496:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800d49c:	f640 2157 	movw	r1, #2647	; 0xa57
 800d4a0:	488d      	ldr	r0, [pc, #564]	; (800d6d8 <UART_SetConfig+0x314>)
 800d4a2:	f7f5 f8d5 	bl	8002650 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800d4a6:	69a3      	ldr	r3, [r4, #24]
 800d4a8:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800d4ac:	d0b3      	beq.n	800d416 <UART_SetConfig+0x52>
 800d4ae:	488a      	ldr	r0, [pc, #552]	; (800d6d8 <UART_SetConfig+0x314>)
 800d4b0:	f640 2158 	movw	r1, #2648	; 0xa58
 800d4b4:	f7f5 f8cc 	bl	8002650 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800d4b8:	69e0      	ldr	r0, [r4, #28]
 800d4ba:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800d4be:	d0ae      	beq.n	800d41e <UART_SetConfig+0x5a>
 800d4c0:	4885      	ldr	r0, [pc, #532]	; (800d6d8 <UART_SetConfig+0x314>)
 800d4c2:	f640 2159 	movw	r1, #2649	; 0xa59
 800d4c6:	f7f5 f8c3 	bl	8002650 <assert_failed>
 800d4ca:	69e0      	ldr	r0, [r4, #28]
 800d4cc:	e7a7      	b.n	800d41e <UART_SetConfig+0x5a>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800d4ce:	f640 2156 	movw	r1, #2646	; 0xa56
 800d4d2:	4881      	ldr	r0, [pc, #516]	; (800d6d8 <UART_SetConfig+0x314>)
 800d4d4:	f7f5 f8bc 	bl	8002650 <assert_failed>
 800d4d8:	e793      	b.n	800d402 <UART_SetConfig+0x3e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800d4da:	f640 2152 	movw	r1, #2642	; 0xa52
 800d4de:	487e      	ldr	r0, [pc, #504]	; (800d6d8 <UART_SetConfig+0x314>)
 800d4e0:	f7f5 f8b6 	bl	8002650 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800d4e4:	68e3      	ldr	r3, [r4, #12]
 800d4e6:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800d4ea:	f43f af7e 	beq.w	800d3ea <UART_SetConfig+0x26>
 800d4ee:	f640 2153 	movw	r1, #2643	; 0xa53
 800d4f2:	4879      	ldr	r0, [pc, #484]	; (800d6d8 <UART_SetConfig+0x314>)
 800d4f4:	f7f5 f8ac 	bl	8002650 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800d4f8:	6a23      	ldr	r3, [r4, #32]
 800d4fa:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800d4fe:	f43f af79 	beq.w	800d3f4 <UART_SetConfig+0x30>
 800d502:	f640 2154 	movw	r1, #2644	; 0xa54
 800d506:	4874      	ldr	r0, [pc, #464]	; (800d6d8 <UART_SetConfig+0x314>)
 800d508:	f7f5 f8a2 	bl	8002650 <assert_failed>
 800d50c:	e772      	b.n	800d3f4 <UART_SetConfig+0x30>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d50e:	4b73      	ldr	r3, [pc, #460]	; (800d6dc <UART_SetConfig+0x318>)
 800d510:	4a73      	ldr	r2, [pc, #460]	; (800d6e0 <UART_SetConfig+0x31c>)
 800d512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d516:	f003 030c 	and.w	r3, r3, #12
 800d51a:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d51c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d520:	d024      	beq.n	800d56c <UART_SetConfig+0x1a8>
    switch (clocksource)
 800d522:	2b08      	cmp	r3, #8
 800d524:	d8b5      	bhi.n	800d492 <UART_SetConfig+0xce>
 800d526:	a201      	add	r2, pc, #4	; (adr r2, 800d52c <UART_SetConfig+0x168>)
 800d528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d52c:	0800d63b 	.word	0x0800d63b
 800d530:	0800d5cb 	.word	0x0800d5cb
 800d534:	0800d723 	.word	0x0800d723
 800d538:	0800d493 	.word	0x0800d493
 800d53c:	0800d693 	.word	0x0800d693
 800d540:	0800d493 	.word	0x0800d493
 800d544:	0800d493 	.word	0x0800d493
 800d548:	0800d493 	.word	0x0800d493
 800d54c:	0800d66d 	.word	0x0800d66d
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d550:	f640 2151 	movw	r1, #2641	; 0xa51
 800d554:	4860      	ldr	r0, [pc, #384]	; (800d6d8 <UART_SetConfig+0x314>)
 800d556:	f7f5 f87b 	bl	8002650 <assert_failed>
 800d55a:	e73a      	b.n	800d3d2 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d55c:	4b5f      	ldr	r3, [pc, #380]	; (800d6dc <UART_SetConfig+0x318>)
 800d55e:	4a61      	ldr	r2, [pc, #388]	; (800d6e4 <UART_SetConfig+0x320>)
 800d560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d564:	f003 0303 	and.w	r3, r3, #3
 800d568:	5cd3      	ldrb	r3, [r2, r3]
 800d56a:	e7d7      	b.n	800d51c <UART_SetConfig+0x158>
    switch (clocksource)
 800d56c:	2b08      	cmp	r3, #8
 800d56e:	d890      	bhi.n	800d492 <UART_SetConfig+0xce>
 800d570:	a201      	add	r2, pc, #4	; (adr r2, 800d578 <UART_SetConfig+0x1b4>)
 800d572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d576:	bf00      	nop
 800d578:	0800d6a5 	.word	0x0800d6a5
 800d57c:	0800d5f7 	.word	0x0800d5f7
 800d580:	0800d703 	.word	0x0800d703
 800d584:	0800d493 	.word	0x0800d493
 800d588:	0800d6ab 	.word	0x0800d6ab
 800d58c:	0800d493 	.word	0x0800d493
 800d590:	0800d493 	.word	0x0800d493
 800d594:	0800d493 	.word	0x0800d493
 800d598:	0800d713 	.word	0x0800d713
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d59c:	4b4f      	ldr	r3, [pc, #316]	; (800d6dc <UART_SetConfig+0x318>)
 800d59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5aa:	d06f      	beq.n	800d68c <UART_SetConfig+0x2c8>
 800d5ac:	d93f      	bls.n	800d62e <UART_SetConfig+0x26a>
 800d5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5b2:	f000 80a3 	beq.w	800d6fc <UART_SetConfig+0x338>
 800d5b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5ba:	d054      	beq.n	800d666 <UART_SetConfig+0x2a2>
 800d5bc:	e769      	b.n	800d492 <UART_SetConfig+0xce>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f47f af67 	bne.w	800d492 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d5c8:	d015      	beq.n	800d5f6 <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d5ca:	f7fc f8d5 	bl	8009778 <HAL_RCC_GetPCLK2Freq>
 800d5ce:	6862      	ldr	r2, [r4, #4]
 800d5d0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800d5d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5d8:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5da:	f1a3 0110 	sub.w	r1, r3, #16
 800d5de:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800d5e2:	4291      	cmp	r1, r2
 800d5e4:	f63f af55 	bhi.w	800d492 <UART_SetConfig+0xce>
      huart->Instance->BRR = usartdiv;
 800d5e8:	6822      	ldr	r2, [r4, #0]
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800d5ee:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800d5f0:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800d5f4:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d5f6:	f7fc f8bf 	bl	8009778 <HAL_RCC_GetPCLK2Freq>
 800d5fa:	6862      	ldr	r2, [r4, #4]
 800d5fc:	0853      	lsrs	r3, r2, #1
 800d5fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d602:	fbb3 f3f2 	udiv	r3, r3, r2
 800d606:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d608:	f1a3 0110 	sub.w	r1, r3, #16
 800d60c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800d610:	4291      	cmp	r1, r2
 800d612:	f63f af3e 	bhi.w	800d492 <UART_SetConfig+0xce>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d616:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d61a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800d61e:	6821      	ldr	r1, [r4, #0]
 800d620:	2000      	movs	r0, #0
 800d622:	4313      	orrs	r3, r2
 800d624:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 800d626:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800d628:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800d62c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f47f af2f 	bne.w	800d492 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d634:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d638:	d034      	beq.n	800d6a4 <UART_SetConfig+0x2e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d63a:	f7fc f88d 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800d63e:	6862      	ldr	r2, [r4, #4]
 800d640:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800d644:	fbb3 f3f2 	udiv	r3, r3, r2
 800d648:	b29b      	uxth	r3, r3
        break;
 800d64a:	e7c6      	b.n	800d5da <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d64c:	4b23      	ldr	r3, [pc, #140]	; (800d6dc <UART_SetConfig+0x318>)
 800d64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d652:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d656:	2b10      	cmp	r3, #16
 800d658:	d018      	beq.n	800d68c <UART_SetConfig+0x2c8>
 800d65a:	d9e8      	bls.n	800d62e <UART_SetConfig+0x26a>
 800d65c:	2b20      	cmp	r3, #32
 800d65e:	d04d      	beq.n	800d6fc <UART_SetConfig+0x338>
 800d660:	2b30      	cmp	r3, #48	; 0x30
 800d662:	f47f af16 	bne.w	800d492 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d666:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d66a:	d052      	beq.n	800d712 <UART_SetConfig+0x34e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d66c:	6862      	ldr	r2, [r4, #4]
 800d66e:	0853      	lsrs	r3, r2, #1
 800d670:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d674:	fbb3 f3f2 	udiv	r3, r3, r2
 800d678:	b29b      	uxth	r3, r3
        break;
 800d67a:	e7ae      	b.n	800d5da <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d67c:	4b17      	ldr	r3, [pc, #92]	; (800d6dc <UART_SetConfig+0x318>)
 800d67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d682:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d68a:	d152      	bne.n	800d732 <UART_SetConfig+0x36e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d68c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d690:	d00b      	beq.n	800d6aa <UART_SetConfig+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d692:	f7fb ff09 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 800d696:	6862      	ldr	r2, [r4, #4]
 800d698:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800d69c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6a0:	b29b      	uxth	r3, r3
        break;
 800d6a2:	e79a      	b.n	800d5da <UART_SetConfig+0x216>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d6a4:	f7fc f858 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800d6a8:	e7a7      	b.n	800d5fa <UART_SetConfig+0x236>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d6aa:	f7fb fefd 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 800d6ae:	e7a4      	b.n	800d5fa <UART_SetConfig+0x236>
 800d6b0:	019bfcc0 	.word	0x019bfcc0
 800d6b4:	efff69f3 	.word	0xefff69f3
 800d6b8:	40011000 	.word	0x40011000
 800d6bc:	40004400 	.word	0x40004400
 800d6c0:	40004800 	.word	0x40004800
 800d6c4:	40004c00 	.word	0x40004c00
 800d6c8:	40005000 	.word	0x40005000
 800d6cc:	40011400 	.word	0x40011400
 800d6d0:	40007800 	.word	0x40007800
 800d6d4:	40007c00 	.word	0x40007c00
 800d6d8:	0802356c 	.word	0x0802356c
 800d6dc:	40023800 	.word	0x40023800
 800d6e0:	0802355c 	.word	0x0802355c
 800d6e4:	08023558 	.word	0x08023558
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6e8:	4b2a      	ldr	r3, [pc, #168]	; (800d794 <UART_SetConfig+0x3d0>)
 800d6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d6f2:	2b40      	cmp	r3, #64	; 0x40
 800d6f4:	d0ca      	beq.n	800d68c <UART_SetConfig+0x2c8>
 800d6f6:	d99a      	bls.n	800d62e <UART_SetConfig+0x26a>
 800d6f8:	2b80      	cmp	r3, #128	; 0x80
 800d6fa:	d123      	bne.n	800d744 <UART_SetConfig+0x380>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d6fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d700:	d10f      	bne.n	800d722 <UART_SetConfig+0x35e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d702:	6862      	ldr	r2, [r4, #4]
 800d704:	4b24      	ldr	r3, [pc, #144]	; (800d798 <UART_SetConfig+0x3d4>)
 800d706:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800d70a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d70e:	b29b      	uxth	r3, r3
        break;
 800d710:	e77a      	b.n	800d608 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d712:	6862      	ldr	r2, [r4, #4]
 800d714:	0853      	lsrs	r3, r2, #1
 800d716:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d71a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d71e:	b29b      	uxth	r3, r3
        break;
 800d720:	e772      	b.n	800d608 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d722:	6862      	ldr	r2, [r4, #4]
 800d724:	4b1d      	ldr	r3, [pc, #116]	; (800d79c <UART_SetConfig+0x3d8>)
 800d726:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800d72a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d72e:	b29b      	uxth	r3, r3
        break;
 800d730:	e753      	b.n	800d5da <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d732:	f67f af44 	bls.w	800d5be <UART_SetConfig+0x1fa>
 800d736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d73a:	d0df      	beq.n	800d6fc <UART_SetConfig+0x338>
 800d73c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d740:	d091      	beq.n	800d666 <UART_SetConfig+0x2a2>
 800d742:	e6a6      	b.n	800d492 <UART_SetConfig+0xce>
 800d744:	2bc0      	cmp	r3, #192	; 0xc0
 800d746:	d08e      	beq.n	800d666 <UART_SetConfig+0x2a2>
 800d748:	e6a3      	b.n	800d492 <UART_SetConfig+0xce>
 800d74a:	4b12      	ldr	r3, [pc, #72]	; (800d794 <UART_SetConfig+0x3d0>)
 800d74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d750:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d758:	d098      	beq.n	800d68c <UART_SetConfig+0x2c8>
 800d75a:	f67f af68 	bls.w	800d62e <UART_SetConfig+0x26a>
 800d75e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d762:	d0cb      	beq.n	800d6fc <UART_SetConfig+0x338>
 800d764:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d768:	f43f af7d 	beq.w	800d666 <UART_SetConfig+0x2a2>
 800d76c:	e691      	b.n	800d492 <UART_SetConfig+0xce>
 800d76e:	4b09      	ldr	r3, [pc, #36]	; (800d794 <UART_SetConfig+0x3d0>)
 800d770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d77c:	d086      	beq.n	800d68c <UART_SetConfig+0x2c8>
 800d77e:	f67f af56 	bls.w	800d62e <UART_SetConfig+0x26a>
 800d782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d786:	d0b9      	beq.n	800d6fc <UART_SetConfig+0x338>
 800d788:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d78c:	f43f af6b 	beq.w	800d666 <UART_SetConfig+0x2a2>
 800d790:	e67f      	b.n	800d492 <UART_SetConfig+0xce>
 800d792:	bf00      	nop
 800d794:	40023800 	.word	0x40023800
 800d798:	01e84800 	.word	0x01e84800
 800d79c:	00f42400 	.word	0x00f42400

0800d7a0 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800d7a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d7a2:	2bff      	cmp	r3, #255	; 0xff
{
 800d7a4:	b510      	push	{r4, lr}
 800d7a6:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800d7a8:	d87d      	bhi.n	800d8a6 <UART_AdvFeatureConfig+0x106>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7aa:	07da      	lsls	r2, r3, #31
 800d7ac:	d50a      	bpl.n	800d7c4 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800d7ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d7b0:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 800d7b4:	f040 8097 	bne.w	800d8e6 <UART_AdvFeatureConfig+0x146>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7b8:	6820      	ldr	r0, [r4, #0]
 800d7ba:	6842      	ldr	r2, [r0, #4]
 800d7bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d7c0:	430a      	orrs	r2, r1
 800d7c2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7c4:	0798      	lsls	r0, r3, #30
 800d7c6:	d50a      	bpl.n	800d7de <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800d7c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d7ca:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800d7ce:	f040 8092 	bne.w	800d8f6 <UART_AdvFeatureConfig+0x156>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7d2:	6820      	ldr	r0, [r4, #0]
 800d7d4:	6842      	ldr	r2, [r0, #4]
 800d7d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d7da:	430a      	orrs	r2, r1
 800d7dc:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d7de:	0759      	lsls	r1, r3, #29
 800d7e0:	d50a      	bpl.n	800d7f8 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800d7e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d7e4:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800d7e8:	f040 808d 	bne.w	800d906 <UART_AdvFeatureConfig+0x166>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d7ec:	6820      	ldr	r0, [r4, #0]
 800d7ee:	6842      	ldr	r2, [r0, #4]
 800d7f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d7f4:	430a      	orrs	r2, r1
 800d7f6:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7f8:	071a      	lsls	r2, r3, #28
 800d7fa:	d50a      	bpl.n	800d812 <UART_AdvFeatureConfig+0x72>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800d7fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7fe:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 800d802:	f040 8088 	bne.w	800d916 <UART_AdvFeatureConfig+0x176>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d806:	6820      	ldr	r0, [r4, #0]
 800d808:	6842      	ldr	r2, [r0, #4]
 800d80a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d80e:	430a      	orrs	r2, r1
 800d810:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d812:	06d8      	lsls	r0, r3, #27
 800d814:	d50a      	bpl.n	800d82c <UART_AdvFeatureConfig+0x8c>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800d816:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d818:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800d81c:	f040 8083 	bne.w	800d926 <UART_AdvFeatureConfig+0x186>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d820:	6820      	ldr	r0, [r4, #0]
 800d822:	6882      	ldr	r2, [r0, #8]
 800d824:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d828:	430a      	orrs	r2, r1
 800d82a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d82c:	0699      	lsls	r1, r3, #26
 800d82e:	d509      	bpl.n	800d844 <UART_AdvFeatureConfig+0xa4>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800d830:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d832:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 800d836:	d17e      	bne.n	800d936 <UART_AdvFeatureConfig+0x196>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d838:	6820      	ldr	r0, [r4, #0]
 800d83a:	6882      	ldr	r2, [r0, #8]
 800d83c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d840:	430a      	orrs	r2, r1
 800d842:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d844:	065a      	lsls	r2, r3, #25
 800d846:	d521      	bpl.n	800d88c <UART_AdvFeatureConfig+0xec>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800d848:	4b46      	ldr	r3, [pc, #280]	; (800d964 <UART_AdvFeatureConfig+0x1c4>)
 800d84a:	6822      	ldr	r2, [r4, #0]
 800d84c:	4846      	ldr	r0, [pc, #280]	; (800d968 <UART_AdvFeatureConfig+0x1c8>)
 800d84e:	4947      	ldr	r1, [pc, #284]	; (800d96c <UART_AdvFeatureConfig+0x1cc>)
 800d850:	429a      	cmp	r2, r3
 800d852:	bf18      	it	ne
 800d854:	4282      	cmpne	r2, r0
 800d856:	bf14      	ite	ne
 800d858:	2301      	movne	r3, #1
 800d85a:	2300      	moveq	r3, #0
 800d85c:	428a      	cmp	r2, r1
 800d85e:	bf0c      	ite	eq
 800d860:	2300      	moveq	r3, #0
 800d862:	f003 0301 	andne.w	r3, r3, #1
 800d866:	b113      	cbz	r3, 800d86e <UART_AdvFeatureConfig+0xce>
 800d868:	4b41      	ldr	r3, [pc, #260]	; (800d970 <UART_AdvFeatureConfig+0x1d0>)
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d16b      	bne.n	800d946 <UART_AdvFeatureConfig+0x1a6>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800d86e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d870:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 800d874:	d130      	bne.n	800d8d8 <UART_AdvFeatureConfig+0x138>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d876:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d878:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d87c:	684b      	ldr	r3, [r1, #4]
 800d87e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d882:	ea43 0302 	orr.w	r3, r3, r2
 800d886:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d888:	d01b      	beq.n	800d8c2 <UART_AdvFeatureConfig+0x122>
 800d88a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d88c:	061b      	lsls	r3, r3, #24
 800d88e:	d509      	bpl.n	800d8a4 <UART_AdvFeatureConfig+0x104>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800d890:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d892:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 800d896:	d10d      	bne.n	800d8b4 <UART_AdvFeatureConfig+0x114>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d898:	6821      	ldr	r1, [r4, #0]
 800d89a:	684b      	ldr	r3, [r1, #4]
 800d89c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	604b      	str	r3, [r1, #4]
}
 800d8a4:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800d8a6:	f640 21d2 	movw	r1, #2770	; 0xad2
 800d8aa:	4832      	ldr	r0, [pc, #200]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d8ac:	f7f4 fed0 	bl	8002650 <assert_failed>
 800d8b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8b2:	e77a      	b.n	800d7aa <UART_AdvFeatureConfig+0xa>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800d8b4:	f640 310f 	movw	r1, #2831	; 0xb0f
 800d8b8:	482e      	ldr	r0, [pc, #184]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d8ba:	f7f4 fec9 	bl	8002650 <assert_failed>
 800d8be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d8c0:	e7ea      	b.n	800d898 <UART_AdvFeatureConfig+0xf8>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800d8c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d8c4:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 800d8c8:	d143      	bne.n	800d952 <UART_AdvFeatureConfig+0x1b2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8ca:	684a      	ldr	r2, [r1, #4]
 800d8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8ce:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800d8d2:	4302      	orrs	r2, r0
 800d8d4:	604a      	str	r2, [r1, #4]
 800d8d6:	e7d9      	b.n	800d88c <UART_AdvFeatureConfig+0xec>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800d8d8:	f640 3102 	movw	r1, #2818	; 0xb02
 800d8dc:	4825      	ldr	r0, [pc, #148]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d8de:	f7f4 feb7 	bl	8002650 <assert_failed>
 800d8e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d8e4:	e7c7      	b.n	800d876 <UART_AdvFeatureConfig+0xd6>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800d8e6:	f640 21d7 	movw	r1, #2775	; 0xad7
 800d8ea:	4822      	ldr	r0, [pc, #136]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d8ec:	f7f4 feb0 	bl	8002650 <assert_failed>
 800d8f0:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 800d8f4:	e760      	b.n	800d7b8 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800d8f6:	f640 21de 	movw	r1, #2782	; 0xade
 800d8fa:	481e      	ldr	r0, [pc, #120]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d8fc:	f7f4 fea8 	bl	8002650 <assert_failed>
 800d900:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d904:	e765      	b.n	800d7d2 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800d906:	f640 21e5 	movw	r1, #2789	; 0xae5
 800d90a:	481a      	ldr	r0, [pc, #104]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d90c:	f7f4 fea0 	bl	8002650 <assert_failed>
 800d910:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d914:	e76a      	b.n	800d7ec <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800d916:	f640 21ec 	movw	r1, #2796	; 0xaec
 800d91a:	4816      	ldr	r0, [pc, #88]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d91c:	f7f4 fe98 	bl	8002650 <assert_failed>
 800d920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d924:	e76f      	b.n	800d806 <UART_AdvFeatureConfig+0x66>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800d926:	f640 21f3 	movw	r1, #2803	; 0xaf3
 800d92a:	4812      	ldr	r0, [pc, #72]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d92c:	f7f4 fe90 	bl	8002650 <assert_failed>
 800d930:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d934:	e774      	b.n	800d820 <UART_AdvFeatureConfig+0x80>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800d936:	f640 21fa 	movw	r1, #2810	; 0xafa
 800d93a:	480e      	ldr	r0, [pc, #56]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d93c:	f7f4 fe88 	bl	8002650 <assert_failed>
 800d940:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d944:	e778      	b.n	800d838 <UART_AdvFeatureConfig+0x98>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800d946:	f640 3101 	movw	r1, #2817	; 0xb01
 800d94a:	480a      	ldr	r0, [pc, #40]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d94c:	f7f4 fe80 	bl	8002650 <assert_failed>
 800d950:	e78d      	b.n	800d86e <UART_AdvFeatureConfig+0xce>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800d952:	f640 3107 	movw	r1, #2823	; 0xb07
 800d956:	4807      	ldr	r0, [pc, #28]	; (800d974 <UART_AdvFeatureConfig+0x1d4>)
 800d958:	f7f4 fe7a 	bl	8002650 <assert_failed>
 800d95c:	6821      	ldr	r1, [r4, #0]
 800d95e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d960:	e7b3      	b.n	800d8ca <UART_AdvFeatureConfig+0x12a>
 800d962:	bf00      	nop
 800d964:	40011000 	.word	0x40011000
 800d968:	40004400 	.word	0x40004400
 800d96c:	40004800 	.word	0x40004800
 800d970:	40011400 	.word	0x40011400
 800d974:	0802356c 	.word	0x0802356c

0800d978 <UART_WaitOnFlagUntilTimeout>:
{
 800d978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d97c:	9d08      	ldr	r5, [sp, #32]
 800d97e:	4680      	mov	r8, r0
 800d980:	460f      	mov	r7, r1
 800d982:	4616      	mov	r6, r2
 800d984:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d986:	f8d8 4000 	ldr.w	r4, [r8]
 800d98a:	e001      	b.n	800d990 <UART_WaitOnFlagUntilTimeout+0x18>
    if (Timeout != HAL_MAX_DELAY)
 800d98c:	1c6b      	adds	r3, r5, #1
 800d98e:	d10a      	bne.n	800d9a6 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d990:	69e0      	ldr	r0, [r4, #28]
 800d992:	ea37 0300 	bics.w	r3, r7, r0
 800d996:	bf0c      	ite	eq
 800d998:	2001      	moveq	r0, #1
 800d99a:	2000      	movne	r0, #0
 800d99c:	42b0      	cmp	r0, r6
 800d99e:	d0f5      	beq.n	800d98c <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800d9a0:	2000      	movs	r0, #0
}
 800d9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9a6:	f7f7 f801 	bl	80049ac <HAL_GetTick>
 800d9aa:	eba0 0009 	sub.w	r0, r0, r9
 800d9ae:	42a8      	cmp	r0, r5
 800d9b0:	d801      	bhi.n	800d9b6 <UART_WaitOnFlagUntilTimeout+0x3e>
 800d9b2:	2d00      	cmp	r5, #0
 800d9b4:	d1e7      	bne.n	800d986 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d9b6:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 800d9ba:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800d9bc:	2400      	movs	r4, #0
 800d9be:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d9c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9c8:	689a      	ldr	r2, [r3, #8]
 800d9ca:	f022 0201 	bic.w	r2, r2, #1
 800d9ce:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d9d0:	f8c8 1074 	str.w	r1, [r8, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800d9d4:	f888 4070 	strb.w	r4, [r8, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800d9d8:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800d9dc:	e7e1      	b.n	800d9a2 <UART_WaitOnFlagUntilTimeout+0x2a>
 800d9de:	bf00      	nop

0800d9e0 <HAL_UART_Transmit>:
{
 800d9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800d9e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800d9e8:	b084      	sub	sp, #16
  if (huart->gState == HAL_UART_STATE_READY)
 800d9ea:	2b20      	cmp	r3, #32
 800d9ec:	d13e      	bne.n	800da6c <HAL_UART_Transmit+0x8c>
 800d9ee:	460d      	mov	r5, r1
    if ((pData == NULL) || (Size == 0U))
 800d9f0:	2900      	cmp	r1, #0
 800d9f2:	d03f      	beq.n	800da74 <HAL_UART_Transmit+0x94>
 800d9f4:	fab2 f682 	clz	r6, r2
 800d9f8:	9203      	str	r2, [sp, #12]
 800d9fa:	0976      	lsrs	r6, r6, #5
 800d9fc:	2e00      	cmp	r6, #0
 800d9fe:	d139      	bne.n	800da74 <HAL_UART_Transmit+0x94>
    __HAL_LOCK(huart);
 800da00:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800da04:	4604      	mov	r4, r0
 800da06:	2b01      	cmp	r3, #1
 800da08:	d030      	beq.n	800da6c <HAL_UART_Transmit+0x8c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da0a:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800da0c:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da0e:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800da10:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da14:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800da16:	f7f6 ffc9 	bl	80049ac <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da1a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800da1c:	9a03      	ldr	r2, [sp, #12]
    tickstart = HAL_GetTick();
 800da1e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 800da24:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800da28:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da2c:	d109      	bne.n	800da42 <HAL_UART_Transmit+0x62>
 800da2e:	e036      	b.n	800da9e <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da30:	f815 2b01 	ldrb.w	r2, [r5], #1
 800da34:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800da36:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800da3a:	3b01      	subs	r3, #1
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800da42:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da46:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 800da48:	b29b      	uxth	r3, r3
 800da4a:	b1db      	cbz	r3, 800da84 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da4c:	4643      	mov	r3, r8
 800da4e:	2200      	movs	r2, #0
 800da50:	2180      	movs	r1, #128	; 0x80
 800da52:	4620      	mov	r0, r4
 800da54:	f7ff ff90 	bl	800d978 <UART_WaitOnFlagUntilTimeout>
 800da58:	b980      	cbnz	r0, 800da7c <HAL_UART_Transmit+0x9c>
 800da5a:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800da5c:	2d00      	cmp	r5, #0
 800da5e:	d1e7      	bne.n	800da30 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da60:	f836 2b02 	ldrh.w	r2, [r6], #2
 800da64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da68:	629a      	str	r2, [r3, #40]	; 0x28
 800da6a:	e7e4      	b.n	800da36 <HAL_UART_Transmit+0x56>
    return HAL_BUSY;
 800da6c:	2002      	movs	r0, #2
}
 800da6e:	b004      	add	sp, #16
 800da70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800da74:	2001      	movs	r0, #1
}
 800da76:	b004      	add	sp, #16
 800da78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 800da7c:	2003      	movs	r0, #3
}
 800da7e:	b004      	add	sp, #16
 800da80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da84:	4643      	mov	r3, r8
 800da86:	2200      	movs	r2, #0
 800da88:	2140      	movs	r1, #64	; 0x40
 800da8a:	4620      	mov	r0, r4
 800da8c:	f7ff ff74 	bl	800d978 <UART_WaitOnFlagUntilTimeout>
 800da90:	2800      	cmp	r0, #0
 800da92:	d1f3      	bne.n	800da7c <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_READY;
 800da94:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800da96:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800da9a:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800da9c:	e7e7      	b.n	800da6e <HAL_UART_Transmit+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da9e:	6923      	ldr	r3, [r4, #16]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1ce      	bne.n	800da42 <HAL_UART_Transmit+0x62>
 800daa4:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800daa6:	461d      	mov	r5, r3
 800daa8:	e7cb      	b.n	800da42 <HAL_UART_Transmit+0x62>
 800daaa:	bf00      	nop

0800daac <UART_CheckIdleState>:
{
 800daac:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daae:	2500      	movs	r5, #0
{
 800dab0:	4604      	mov	r4, r0
 800dab2:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dab4:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800dab6:	f7f6 ff79 	bl	80049ac <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800daba:	6822      	ldr	r2, [r4, #0]
 800dabc:	6812      	ldr	r2, [r2, #0]
 800dabe:	0713      	lsls	r3, r2, #28
 800dac0:	d408      	bmi.n	800dad4 <UART_CheckIdleState+0x28>
  __HAL_UNLOCK(huart);
 800dac2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800dac4:	2220      	movs	r2, #32
  return HAL_OK;
 800dac6:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800dac8:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800daca:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800dace:	67a2      	str	r2, [r4, #120]	; 0x78
}
 800dad0:	b002      	add	sp, #8
 800dad2:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dad4:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 800dad8:	4603      	mov	r3, r0
 800dada:	462a      	mov	r2, r5
 800dadc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dae0:	9600      	str	r6, [sp, #0]
 800dae2:	4620      	mov	r0, r4
 800dae4:	f7ff ff48 	bl	800d978 <UART_WaitOnFlagUntilTimeout>
 800dae8:	2800      	cmp	r0, #0
 800daea:	d0ea      	beq.n	800dac2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800daec:	2003      	movs	r0, #3
}
 800daee:	b002      	add	sp, #8
 800daf0:	bd70      	pop	{r4, r5, r6, pc}
 800daf2:	bf00      	nop

0800daf4 <HAL_UART_Init>:
  if (huart == NULL)
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d06c      	beq.n	800dbd2 <HAL_UART_Init+0xde>
 800daf8:	6802      	ldr	r2, [r0, #0]
 800dafa:	493a      	ldr	r1, [pc, #232]	; (800dbe4 <HAL_UART_Init+0xf0>)
{
 800dafc:	b538      	push	{r3, r4, r5, lr}
 800dafe:	4b3a      	ldr	r3, [pc, #232]	; (800dbe8 <HAL_UART_Init+0xf4>)
 800db00:	4604      	mov	r4, r0
 800db02:	483a      	ldr	r0, [pc, #232]	; (800dbec <HAL_UART_Init+0xf8>)
 800db04:	4d3a      	ldr	r5, [pc, #232]	; (800dbf0 <HAL_UART_Init+0xfc>)
 800db06:	429a      	cmp	r2, r3
 800db08:	bf18      	it	ne
 800db0a:	4282      	cmpne	r2, r0
 800db0c:	f5a0 6040 	sub.w	r0, r0, #3072	; 0xc00
 800db10:	bf14      	ite	ne
 800db12:	2301      	movne	r3, #1
 800db14:	2300      	moveq	r3, #0
 800db16:	428a      	cmp	r2, r1
 800db18:	bf0c      	ite	eq
 800db1a:	2300      	moveq	r3, #0
 800db1c:	f003 0301 	andne.w	r3, r3, #1
 800db20:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800db24:	42aa      	cmp	r2, r5
 800db26:	bf0c      	ite	eq
 800db28:	2300      	moveq	r3, #0
 800db2a:	f003 0301 	andne.w	r3, r3, #1
 800db2e:	f5a5 4518 	sub.w	r5, r5, #38912	; 0x9800
 800db32:	4282      	cmp	r2, r0
 800db34:	bf0c      	ite	eq
 800db36:	2300      	moveq	r3, #0
 800db38:	f003 0301 	andne.w	r3, r3, #1
 800db3c:	f500 5060 	add.w	r0, r0, #14336	; 0x3800
 800db40:	428a      	cmp	r2, r1
 800db42:	bf0c      	ite	eq
 800db44:	2300      	moveq	r3, #0
 800db46:	f003 0301 	andne.w	r3, r3, #1
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800db4a:	69a1      	ldr	r1, [r4, #24]
 800db4c:	42aa      	cmp	r2, r5
 800db4e:	bf0c      	ite	eq
 800db50:	2300      	moveq	r3, #0
 800db52:	f003 0301 	andne.w	r3, r3, #1
 800db56:	4282      	cmp	r2, r0
 800db58:	bf0c      	ite	eq
 800db5a:	2300      	moveq	r3, #0
 800db5c:	f003 0301 	andne.w	r3, r3, #1
 800db60:	bb19      	cbnz	r1, 800dbaa <HAL_UART_Init+0xb6>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800db62:	2b00      	cmp	r3, #0
 800db64:	d137      	bne.n	800dbd6 <HAL_UART_Init+0xe2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800db66:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800db68:	b34b      	cbz	r3, 800dbbe <HAL_UART_Init+0xca>
  __HAL_UART_DISABLE(huart);
 800db6a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800db6c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db6e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800db70:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800db72:	6813      	ldr	r3, [r2, #0]
 800db74:	f023 0301 	bic.w	r3, r3, #1
 800db78:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db7a:	f7ff fc23 	bl	800d3c4 <UART_SetConfig>
 800db7e:	2801      	cmp	r0, #1
 800db80:	d01b      	beq.n	800dbba <HAL_UART_Init+0xc6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db84:	bb0b      	cbnz	r3, 800dbca <HAL_UART_Init+0xd6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db86:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800db88:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db92:	689a      	ldr	r2, [r3, #8]
 800db94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db98:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	f042 0201 	orr.w	r2, r2, #1
 800dba0:	601a      	str	r2, [r3, #0]
}
 800dba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 800dba6:	f7ff bf81 	b.w	800daac <UART_CheckIdleState>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d0db      	beq.n	800db66 <HAL_UART_Init+0x72>
 800dbae:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800dbb2:	4810      	ldr	r0, [pc, #64]	; (800dbf4 <HAL_UART_Init+0x100>)
 800dbb4:	f7f4 fd4c 	bl	8002650 <assert_failed>
 800dbb8:	e7d5      	b.n	800db66 <HAL_UART_Init+0x72>
}
 800dbba:	2001      	movs	r0, #1
 800dbbc:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800dbbe:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f7f5 ff26 	bl	8003a14 <HAL_UART_MspInit>
 800dbc8:	e7cf      	b.n	800db6a <HAL_UART_Init+0x76>
    UART_AdvFeatureConfig(huart);
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f7ff fde8 	bl	800d7a0 <UART_AdvFeatureConfig>
 800dbd0:	e7d9      	b.n	800db86 <HAL_UART_Init+0x92>
}
 800dbd2:	2001      	movs	r0, #1
 800dbd4:	4770      	bx	lr
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800dbd6:	f240 112f 	movw	r1, #303	; 0x12f
 800dbda:	4806      	ldr	r0, [pc, #24]	; (800dbf4 <HAL_UART_Init+0x100>)
 800dbdc:	f7f4 fd38 	bl	8002650 <assert_failed>
 800dbe0:	e7c1      	b.n	800db66 <HAL_UART_Init+0x72>
 800dbe2:	bf00      	nop
 800dbe4:	40004c00 	.word	0x40004c00
 800dbe8:	40011400 	.word	0x40011400
 800dbec:	40005000 	.word	0x40005000
 800dbf0:	40011000 	.word	0x40011000
 800dbf4:	0802356c 	.word	0x0802356c

0800dbf8 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	d04d      	beq.n	800dc98 <HAL_MultiProcessor_Init+0xa0>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800dbfc:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	4604      	mov	r4, r0
 800dc04:	4615      	mov	r5, r2
 800dc06:	460e      	mov	r6, r1
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800dc08:	d130      	bne.n	800dc6c <HAL_MultiProcessor_Init+0x74>
  if (huart->gState == HAL_UART_STATE_RESET)
 800dc0a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800dc0c:	b343      	cbz	r3, 800dc60 <HAL_MultiProcessor_Init+0x68>
  __HAL_UART_DISABLE(huart);
 800dc0e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800dc10:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc12:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800dc14:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800dc16:	6813      	ldr	r3, [r2, #0]
 800dc18:	f023 0301 	bic.w	r3, r3, #1
 800dc1c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc1e:	f7ff fbd1 	bl	800d3c4 <UART_SetConfig>
 800dc22:	2801      	cmp	r0, #1
 800dc24:	d02b      	beq.n	800dc7e <HAL_MultiProcessor_Init+0x86>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d131      	bne.n	800dc90 <HAL_MultiProcessor_Init+0x98>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc2c:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800dc2e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc32:	685a      	ldr	r2, [r3, #4]
 800dc34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc3a:	689a      	ldr	r2, [r3, #8]
 800dc3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc40:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800dc42:	d01e      	beq.n	800dc82 <HAL_MultiProcessor_Init+0x8a>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800dc44:	6819      	ldr	r1, [r3, #0]
  return (UART_CheckIdleState(huart));
 800dc46:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800dc48:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800dc4c:	4329      	orrs	r1, r5
 800dc4e:	6019      	str	r1, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	f042 0201 	orr.w	r2, r2, #1
}
 800dc56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 800dc5a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800dc5c:	f7ff bf26 	b.w	800daac <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800dc60:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800dc64:	4620      	mov	r0, r4
 800dc66:	f7f5 fed5 	bl	8003a14 <HAL_UART_MspInit>
 800dc6a:	e7d0      	b.n	800dc0e <HAL_MultiProcessor_Init+0x16>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800dc6c:	f240 2121 	movw	r1, #545	; 0x221
 800dc70:	480a      	ldr	r0, [pc, #40]	; (800dc9c <HAL_MultiProcessor_Init+0xa4>)
 800dc72:	f7f4 fced 	bl	8002650 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800dc76:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1c8      	bne.n	800dc0e <HAL_MultiProcessor_Init+0x16>
 800dc7c:	e7f0      	b.n	800dc60 <HAL_MultiProcessor_Init+0x68>
}
 800dc7e:	2001      	movs	r0, #1
 800dc80:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800dc82:	6859      	ldr	r1, [r3, #4]
 800dc84:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800dc88:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 800dc8c:	605e      	str	r6, [r3, #4]
 800dc8e:	e7d9      	b.n	800dc44 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 800dc90:	4620      	mov	r0, r4
 800dc92:	f7ff fd85 	bl	800d7a0 <UART_AdvFeatureConfig>
 800dc96:	e7c9      	b.n	800dc2c <HAL_MultiProcessor_Init+0x34>
}
 800dc98:	2001      	movs	r0, #1
 800dc9a:	4770      	bx	lr
 800dc9c:	0802356c 	.word	0x0802356c

0800dca0 <HAL_RS485Ex_Init>:
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800dca0:	2800      	cmp	r0, #0
 800dca2:	f000 8092 	beq.w	800ddca <HAL_RS485Ex_Init+0x12a>
{
 800dca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800dcaa:	4c4b      	ldr	r4, [pc, #300]	; (800ddd8 <HAL_RS485Ex_Init+0x138>)
 800dcac:	461d      	mov	r5, r3
 800dcae:	460e      	mov	r6, r1
 800dcb0:	6803      	ldr	r3, [r0, #0]
 800dcb2:	494a      	ldr	r1, [pc, #296]	; (800dddc <HAL_RS485Ex_Init+0x13c>)
 800dcb4:	4617      	mov	r7, r2
 800dcb6:	4a4a      	ldr	r2, [pc, #296]	; (800dde0 <HAL_RS485Ex_Init+0x140>)
 800dcb8:	4680      	mov	r8, r0
 800dcba:	42a3      	cmp	r3, r4
 800dcbc:	bf18      	it	ne
 800dcbe:	428b      	cmpne	r3, r1
 800dcc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcc4:	bf14      	ite	ne
 800dcc6:	2401      	movne	r4, #1
 800dcc8:	2400      	moveq	r4, #0
 800dcca:	4293      	cmp	r3, r2
 800dccc:	bf0c      	ite	eq
 800dcce:	2400      	moveq	r4, #0
 800dcd0:	f004 0401 	andne.w	r4, r4, #1
 800dcd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dcd8:	428b      	cmp	r3, r1
 800dcda:	bf0c      	ite	eq
 800dcdc:	2400      	moveq	r4, #0
 800dcde:	f004 0401 	andne.w	r4, r4, #1
 800dce2:	f501 4148 	add.w	r1, r1, #51200	; 0xc800
 800dce6:	4293      	cmp	r3, r2
 800dce8:	bf0c      	ite	eq
 800dcea:	2400      	moveq	r4, #0
 800dcec:	f004 0401 	andne.w	r4, r4, #1
 800dcf0:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 800dcf4:	428b      	cmp	r3, r1
 800dcf6:	bf0c      	ite	eq
 800dcf8:	2400      	moveq	r4, #0
 800dcfa:	f004 0401 	andne.w	r4, r4, #1
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	bf0c      	ite	eq
 800dd02:	2400      	moveq	r4, #0
 800dd04:	f004 0401 	andne.w	r4, r4, #1
 800dd08:	b11c      	cbz	r4, 800dd12 <HAL_RS485Ex_Init+0x72>
 800dd0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d15d      	bne.n	800ddce <HAL_RS485Ex_Init+0x12e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800dd12:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 800dd16:	d14a      	bne.n	800ddae <HAL_RS485Ex_Init+0x10e>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800dd18:	2f1f      	cmp	r7, #31
 800dd1a:	d841      	bhi.n	800dda0 <HAL_RS485Ex_Init+0x100>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800dd1c:	2d1f      	cmp	r5, #31
 800dd1e:	d836      	bhi.n	800dd8e <HAL_RS485Ex_Init+0xee>

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd20:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800dd24:	b36b      	cbz	r3, 800dd82 <HAL_RS485Ex_Init+0xe2>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800dd26:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 800dd2a:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd2c:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 800dd2e:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800dd32:	6813      	ldr	r3, [r2, #0]
 800dd34:	f023 0301 	bic.w	r3, r3, #1
 800dd38:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd3a:	f7ff fb43 	bl	800d3c4 <UART_SetConfig>
 800dd3e:	2801      	cmp	r0, #1
 800dd40:	d03c      	beq.n	800ddbc <HAL_RS485Ex_Init+0x11c>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd42:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d13b      	bne.n	800ddc2 <HAL_RS485Ex_Init+0x122>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800dd4a:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800dd4e:	042d      	lsls	r5, r5, #16
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800dd50:	4a24      	ldr	r2, [pc, #144]	; (800dde4 <HAL_RS485Ex_Init+0x144>)

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd52:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800dd54:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800dd56:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800dd5a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800dd5e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800dd60:	6899      	ldr	r1, [r3, #8]
 800dd62:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800dd66:	430e      	orrs	r6, r1
 800dd68:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800dd6a:	6819      	ldr	r1, [r3, #0]
 800dd6c:	400a      	ands	r2, r1
 800dd6e:	4317      	orrs	r7, r2
 800dd70:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	f042 0201 	orr.w	r2, r2, #1
}
 800dd78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 800dd7c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800dd7e:	f7ff be95 	b.w	800daac <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800dd82:	f888 3070 	strb.w	r3, [r8, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800dd86:	4640      	mov	r0, r8
 800dd88:	f7f5 fe44 	bl	8003a14 <HAL_UART_MspInit>
 800dd8c:	e7cb      	b.n	800dd26 <HAL_RS485Ex_Init+0x86>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800dd8e:	21a6      	movs	r1, #166	; 0xa6
 800dd90:	4815      	ldr	r0, [pc, #84]	; (800dde8 <HAL_RS485Ex_Init+0x148>)
 800dd92:	f7f4 fc5d 	bl	8002650 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800dd96:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1c3      	bne.n	800dd26 <HAL_RS485Ex_Init+0x86>
 800dd9e:	e7f0      	b.n	800dd82 <HAL_RS485Ex_Init+0xe2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800dda0:	21a3      	movs	r1, #163	; 0xa3
 800dda2:	4811      	ldr	r0, [pc, #68]	; (800dde8 <HAL_RS485Ex_Init+0x148>)
 800dda4:	f7f4 fc54 	bl	8002650 <assert_failed>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800dda8:	2d1f      	cmp	r5, #31
 800ddaa:	d9b9      	bls.n	800dd20 <HAL_RS485Ex_Init+0x80>
 800ddac:	e7ef      	b.n	800dd8e <HAL_RS485Ex_Init+0xee>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800ddae:	21a0      	movs	r1, #160	; 0xa0
 800ddb0:	480d      	ldr	r0, [pc, #52]	; (800dde8 <HAL_RS485Ex_Init+0x148>)
 800ddb2:	f7f4 fc4d 	bl	8002650 <assert_failed>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800ddb6:	2f1f      	cmp	r7, #31
 800ddb8:	d9b0      	bls.n	800dd1c <HAL_RS485Ex_Init+0x7c>
 800ddba:	e7f1      	b.n	800dda0 <HAL_RS485Ex_Init+0x100>
}
 800ddbc:	2001      	movs	r0, #1
 800ddbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_AdvFeatureConfig(huart);
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	f7ff fcec 	bl	800d7a0 <UART_AdvFeatureConfig>
 800ddc8:	e7bf      	b.n	800dd4a <HAL_RS485Ex_Init+0xaa>
}
 800ddca:	2001      	movs	r0, #1
 800ddcc:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800ddce:	219d      	movs	r1, #157	; 0x9d
 800ddd0:	4805      	ldr	r0, [pc, #20]	; (800dde8 <HAL_RS485Ex_Init+0x148>)
 800ddd2:	f7f4 fc3d 	bl	8002650 <assert_failed>
 800ddd6:	e79c      	b.n	800dd12 <HAL_RS485Ex_Init+0x72>
 800ddd8:	40011000 	.word	0x40011000
 800dddc:	40004400 	.word	0x40004400
 800dde0:	40004800 	.word	0x40004800
 800dde4:	fc00ffff 	.word	0xfc00ffff
 800dde8:	080235a8 	.word	0x080235a8

0800ddec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ddec:	4b0b      	ldr	r3, [pc, #44]	; (800de1c <USB_CoreReset+0x30>)
 800ddee:	e001      	b.n	800ddf4 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	d010      	beq.n	800de16 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddf4:	6902      	ldr	r2, [r0, #16]
 800ddf6:	2a00      	cmp	r2, #0
 800ddf8:	dafa      	bge.n	800ddf0 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ddfa:	6903      	ldr	r3, [r0, #16]
 800ddfc:	4a07      	ldr	r2, [pc, #28]	; (800de1c <USB_CoreReset+0x30>)
 800ddfe:	f043 0301 	orr.w	r3, r3, #1
 800de02:	6103      	str	r3, [r0, #16]
 800de04:	e001      	b.n	800de0a <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 800de06:	3a01      	subs	r2, #1
 800de08:	d005      	beq.n	800de16 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de0a:	6903      	ldr	r3, [r0, #16]
 800de0c:	f013 0301 	ands.w	r3, r3, #1
 800de10:	d1f9      	bne.n	800de06 <USB_CoreReset+0x1a>

  return HAL_OK;
 800de12:	4618      	mov	r0, r3
}
 800de14:	4770      	bx	lr
      return HAL_TIMEOUT;
 800de16:	2003      	movs	r0, #3
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	00030d40 	.word	0x00030d40

0800de20 <USB_CoreInit>:
{
 800de20:	b084      	sub	sp, #16
 800de22:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 800de26:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de28:	2d01      	cmp	r5, #1
{
 800de2a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800de2e:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de30:	d121      	bne.n	800de76 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de32:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de34:	4b18      	ldr	r3, [pc, #96]	; (800de98 <USB_CoreInit+0x78>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800de3a:	9811      	ldr	r0, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de3c:	638a      	str	r2, [r1, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800de3e:	2801      	cmp	r0, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de40:	68ca      	ldr	r2, [r1, #12]
 800de42:	ea03 0302 	and.w	r3, r3, r2
 800de46:	60cb      	str	r3, [r1, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800de48:	68cb      	ldr	r3, [r1, #12]
 800de4a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800de4e:	60cb      	str	r3, [r1, #12]
    if (cfg.use_external_vbus == 1U)
 800de50:	d01c      	beq.n	800de8c <USB_CoreInit+0x6c>
    ret = USB_CoreReset(USBx);
 800de52:	4608      	mov	r0, r1
 800de54:	f7ff ffca 	bl	800ddec <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800de58:	9b08      	ldr	r3, [sp, #32]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d107      	bne.n	800de6e <USB_CoreInit+0x4e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800de5e:	688b      	ldr	r3, [r1, #8]
 800de60:	f043 0306 	orr.w	r3, r3, #6
 800de64:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800de66:	688b      	ldr	r3, [r1, #8]
 800de68:	f043 0320 	orr.w	r3, r3, #32
 800de6c:	608b      	str	r3, [r1, #8]
}
 800de6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de72:	b004      	add	sp, #16
 800de74:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800de76:	68c3      	ldr	r3, [r0, #12]
 800de78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de7c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800de7e:	f7ff ffb5 	bl	800ddec <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800de82:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800de84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de88:	638b      	str	r3, [r1, #56]	; 0x38
 800de8a:	e7e5      	b.n	800de58 <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800de8c:	68cb      	ldr	r3, [r1, #12]
 800de8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de92:	60cb      	str	r3, [r1, #12]
 800de94:	e7dd      	b.n	800de52 <USB_CoreInit+0x32>
 800de96:	bf00      	nop
 800de98:	ffbdffbf 	.word	0xffbdffbf

0800de9c <USB_SetTurnaroundTime>:
  if (speed == USB_OTG_SPEED_FULL)
 800de9c:	2a03      	cmp	r2, #3
{
 800de9e:	4603      	mov	r3, r0
 800dea0:	b410      	push	{r4}
  if (speed == USB_OTG_SPEED_FULL)
 800dea2:	d00c      	beq.n	800debe <USB_SetTurnaroundTime+0x22>
 800dea4:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dea8:	68d9      	ldr	r1, [r3, #12]
}
 800deaa:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800deac:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800deb0:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800deb2:	68da      	ldr	r2, [r3, #12]
 800deb4:	4322      	orrs	r2, r4
}
 800deb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800deba:	60da      	str	r2, [r3, #12]
}
 800debc:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800debe:	4a29      	ldr	r2, [pc, #164]	; (800df64 <USB_SetTurnaroundTime+0xc8>)
 800dec0:	4829      	ldr	r0, [pc, #164]	; (800df68 <USB_SetTurnaroundTime+0xcc>)
 800dec2:	440a      	add	r2, r1
 800dec4:	4282      	cmp	r2, r0
 800dec6:	d93a      	bls.n	800df3e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dec8:	4a28      	ldr	r2, [pc, #160]	; (800df6c <USB_SetTurnaroundTime+0xd0>)
 800deca:	4829      	ldr	r0, [pc, #164]	; (800df70 <USB_SetTurnaroundTime+0xd4>)
 800decc:	440a      	add	r2, r1
 800dece:	4282      	cmp	r2, r0
 800ded0:	d932      	bls.n	800df38 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ded2:	4a28      	ldr	r2, [pc, #160]	; (800df74 <USB_SetTurnaroundTime+0xd8>)
 800ded4:	4828      	ldr	r0, [pc, #160]	; (800df78 <USB_SetTurnaroundTime+0xdc>)
 800ded6:	440a      	add	r2, r1
 800ded8:	4282      	cmp	r2, r0
 800deda:	d933      	bls.n	800df44 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dedc:	4a27      	ldr	r2, [pc, #156]	; (800df7c <USB_SetTurnaroundTime+0xe0>)
 800dede:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 800dee2:	440a      	add	r2, r1
 800dee4:	30a0      	adds	r0, #160	; 0xa0
 800dee6:	4282      	cmp	r2, r0
 800dee8:	d92f      	bls.n	800df4a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800deea:	4a25      	ldr	r2, [pc, #148]	; (800df80 <USB_SetTurnaroundTime+0xe4>)
 800deec:	4825      	ldr	r0, [pc, #148]	; (800df84 <USB_SetTurnaroundTime+0xe8>)
 800deee:	440a      	add	r2, r1
 800def0:	4282      	cmp	r2, r0
 800def2:	d92d      	bls.n	800df50 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800def4:	4a24      	ldr	r2, [pc, #144]	; (800df88 <USB_SetTurnaroundTime+0xec>)
 800def6:	f500 2092 	add.w	r0, r0, #299008	; 0x49000
 800defa:	440a      	add	r2, r1
 800defc:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
 800df00:	4282      	cmp	r2, r0
 800df02:	d928      	bls.n	800df56 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800df04:	4a21      	ldr	r2, [pc, #132]	; (800df8c <USB_SetTurnaroundTime+0xf0>)
 800df06:	f500 20c3 	add.w	r0, r0, #399360	; 0x61800
 800df0a:	440a      	add	r2, r1
 800df0c:	f500 7020 	add.w	r0, r0, #640	; 0x280
 800df10:	4282      	cmp	r2, r0
 800df12:	d9c7      	bls.n	800dea4 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800df14:	4a1e      	ldr	r2, [pc, #120]	; (800df90 <USB_SetTurnaroundTime+0xf4>)
 800df16:	f500 10b7 	add.w	r0, r0, #1499136	; 0x16e000
 800df1a:	440a      	add	r2, r1
 800df1c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800df20:	4282      	cmp	r2, r0
 800df22:	d91b      	bls.n	800df5c <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800df24:	4a1b      	ldr	r2, [pc, #108]	; (800df94 <USB_SetTurnaroundTime+0xf8>)
 800df26:	4c1c      	ldr	r4, [pc, #112]	; (800df98 <USB_SetTurnaroundTime+0xfc>)
 800df28:	440a      	add	r2, r1
 800df2a:	42a2      	cmp	r2, r4
 800df2c:	bf8c      	ite	hi
 800df2e:	f44f 54c0 	movhi.w	r4, #6144	; 0x1800
 800df32:	f44f 54e0 	movls.w	r4, #7168	; 0x1c00
 800df36:	e7b7      	b.n	800dea8 <USB_SetTurnaroundTime+0xc>
 800df38:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800df3c:	e7b4      	b.n	800dea8 <USB_SetTurnaroundTime+0xc>
 800df3e:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 800df42:	e7b1      	b.n	800dea8 <USB_SetTurnaroundTime+0xc>
 800df44:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 800df48:	e7ae      	b.n	800dea8 <USB_SetTurnaroundTime+0xc>
 800df4a:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800df4e:	e7ab      	b.n	800dea8 <USB_SetTurnaroundTime+0xc>
 800df50:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 800df54:	e7a8      	b.n	800dea8 <USB_SetTurnaroundTime+0xc>
 800df56:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800df5a:	e7a5      	b.n	800dea8 <USB_SetTurnaroundTime+0xc>
 800df5c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800df60:	e7a2      	b.n	800dea8 <USB_SetTurnaroundTime+0xc>
 800df62:	bf00      	nop
 800df64:	ff275340 	.word	0xff275340
 800df68:	000c34ff 	.word	0x000c34ff
 800df6c:	ff1b1e40 	.word	0xff1b1e40
 800df70:	000f423f 	.word	0x000f423f
 800df74:	ff0bdc00 	.word	0xff0bdc00
 800df78:	00124f7f 	.word	0x00124f7f
 800df7c:	fef98c80 	.word	0xfef98c80
 800df80:	fee5b660 	.word	0xfee5b660
 800df84:	0016e35f 	.word	0x0016e35f
 800df88:	feced300 	.word	0xfeced300
 800df8c:	feb35bc0 	.word	0xfeb35bc0
 800df90:	fe91ca00 	.word	0xfe91ca00
 800df94:	fe5954e0 	.word	0xfe5954e0
 800df98:	00419cdf 	.word	0x00419cdf

0800df9c <USB_EnableGlobalInt>:
{
 800df9c:	4602      	mov	r2, r0
}
 800df9e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dfa0:	6893      	ldr	r3, [r2, #8]
 800dfa2:	f043 0301 	orr.w	r3, r3, #1
 800dfa6:	6093      	str	r3, [r2, #8]
}
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop

0800dfac <USB_DisableGlobalInt>:
{
 800dfac:	4602      	mov	r2, r0
}
 800dfae:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dfb0:	6893      	ldr	r3, [r2, #8]
 800dfb2:	f023 0301 	bic.w	r3, r3, #1
 800dfb6:	6093      	str	r3, [r2, #8]
}
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop

0800dfbc <USB_SetCurrentMode>:
{
 800dfbc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dfbe:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800dfc0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dfc2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dfc6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800dfc8:	d00b      	beq.n	800dfe2 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800dfca:	b941      	cbnz	r1, 800dfde <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dfcc:	68c3      	ldr	r3, [r0, #12]
 800dfce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dfd2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800dfd4:	2032      	movs	r0, #50	; 0x32
 800dfd6:	f7f6 fcef 	bl	80049b8 <HAL_Delay>
  return HAL_OK;
 800dfda:	2000      	movs	r0, #0
}
 800dfdc:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800dfde:	2001      	movs	r0, #1
}
 800dfe0:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dfe2:	68c3      	ldr	r3, [r0, #12]
 800dfe4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dfe8:	60c3      	str	r3, [r0, #12]
 800dfea:	e7f3      	b.n	800dfd4 <USB_SetCurrentMode+0x18>

0800dfec <USB_DevInit>:
{
 800dfec:	b084      	sub	sp, #16
 800dfee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (i = 0U; i < 15U; i++)
 800dff2:	2400      	movs	r4, #0
{
 800dff4:	af09      	add	r7, sp, #36	; 0x24
 800dff6:	4605      	mov	r5, r0
 800dff8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dffa:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 800dffe:	4620      	mov	r0, r4
{
 800e000:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800e004:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e006:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    USBx->DIEPTXF[i] = 0U;
 800e00a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800e00e:	3401      	adds	r4, #1
    USBx->DIEPTXF[i] = 0U;
 800e010:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 800e014:	2c0f      	cmp	r4, #15
    USBx->DIEPTXF[i] = 0U;
 800e016:	6058      	str	r0, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e018:	d1f7      	bne.n	800e00a <USB_DevInit+0x1e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e01a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800e01c:	2900      	cmp	r1, #0
 800e01e:	f040 80a1 	bne.w	800e164 <USB_DevInit+0x178>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e022:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e026:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e028:	682b      	ldr	r3, [r5, #0]
 800e02a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e02e:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e036:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0U;
 800e038:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e03a:	f1bc 0f01 	cmp.w	ip, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e03e:	f505 6400 	add.w	r4, r5, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 800e042:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e046:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800e04a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx_DEVICE->DCFG |= speed;
 800e04e:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e052:	d03e      	beq.n	800e0d2 <USB_DevInit+0xe6>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800e054:	f1bc 0f03 	cmp.w	ip, #3
 800e058:	d03b      	beq.n	800e0d2 <USB_DevInit+0xe6>
  USBx_DEVICE->DCFG |= speed;
 800e05a:	f043 0303 	orr.w	r3, r3, #3
 800e05e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e062:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800e066:	4b4c      	ldr	r3, [pc, #304]	; (800e198 <USB_DevInit+0x1ac>)
 800e068:	612a      	str	r2, [r5, #16]
 800e06a:	e002      	b.n	800e072 <USB_DevInit+0x86>
    if (++count > 200000U)
 800e06c:	3b01      	subs	r3, #1
 800e06e:	f000 808b 	beq.w	800e188 <USB_DevInit+0x19c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e072:	6928      	ldr	r0, [r5, #16]
 800e074:	f010 0020 	ands.w	r0, r0, #32
 800e078:	d1f8      	bne.n	800e06c <USB_DevInit+0x80>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e07a:	2210      	movs	r2, #16
 800e07c:	4b46      	ldr	r3, [pc, #280]	; (800e198 <USB_DevInit+0x1ac>)
 800e07e:	612a      	str	r2, [r5, #16]
 800e080:	e001      	b.n	800e086 <USB_DevInit+0x9a>
    if (++count > 200000U)
 800e082:	3b01      	subs	r3, #1
 800e084:	d07e      	beq.n	800e184 <USB_DevInit+0x198>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e086:	692a      	ldr	r2, [r5, #16]
 800e088:	06d2      	lsls	r2, r2, #27
 800e08a:	d4fa      	bmi.n	800e082 <USB_DevInit+0x96>
  USBx_DEVICE->DIEPMSK = 0U;
 800e08c:	2200      	movs	r2, #0
 800e08e:	6122      	str	r2, [r4, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e090:	6162      	str	r2, [r4, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e092:	61e2      	str	r2, [r4, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e094:	b327      	cbz	r7, 800e0e0 <USB_DevInit+0xf4>
 800e096:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e09a:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e09e:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800e0a2:	4696      	mov	lr, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e0a4:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 800e0a8:	e009      	b.n	800e0be <USB_DevInit+0xd2>
      USBx_INEP(i)->DIEPCTL = 0U;
 800e0aa:	f8c3 e000 	str.w	lr, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0ae:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e0b0:	f8c3 e010 	str.w	lr, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e0b4:	f8c3 8008 	str.w	r8, [r3, #8]
 800e0b8:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0ba:	42ba      	cmp	r2, r7
 800e0bc:	d034      	beq.n	800e128 <USB_DevInit+0x13c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e0be:	f8d3 c000 	ldr.w	ip, [r3]
 800e0c2:	f1bc 0f00 	cmp.w	ip, #0
 800e0c6:	daf0      	bge.n	800e0aa <USB_DevInit+0xbe>
      if (i == 0U)
 800e0c8:	2a00      	cmp	r2, #0
 800e0ca:	d05f      	beq.n	800e18c <USB_DevInit+0x1a0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e0cc:	f8c3 9000 	str.w	r9, [r3]
 800e0d0:	e7ed      	b.n	800e0ae <USB_DevInit+0xc2>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800e0d2:	2a00      	cmp	r2, #0
 800e0d4:	d0c3      	beq.n	800e05e <USB_DevInit+0x72>
  USBx_DEVICE->DCFG |= speed;
 800e0d6:	f043 0301 	orr.w	r3, r3, #1
 800e0da:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 800e0de:	e7c0      	b.n	800e062 <USB_DevInit+0x76>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e0e0:	6923      	ldr	r3, [r4, #16]
  if (cfg.dma_enable == 1U)
 800e0e2:	2e01      	cmp	r6, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e0e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0e8:	6123      	str	r3, [r4, #16]
  if (cfg.dma_enable == 1U)
 800e0ea:	d03f      	beq.n	800e16c <USB_DevInit+0x180>
  USBx->GINTMSK = 0U;
 800e0ec:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e0ee:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800e0f2:	61aa      	str	r2, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e0f4:	616b      	str	r3, [r5, #20]
  if (cfg.dma_enable == 0U)
 800e0f6:	b91e      	cbnz	r6, 800e100 <USB_DevInit+0x114>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e0f8:	69ab      	ldr	r3, [r5, #24]
 800e0fa:	f043 0310 	orr.w	r3, r3, #16
 800e0fe:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e100:	69ac      	ldr	r4, [r5, #24]
 800e102:	4b26      	ldr	r3, [pc, #152]	; (800e19c <USB_DevInit+0x1b0>)
  if (cfg.Sof_enable != 0U)
 800e104:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e106:	4323      	orrs	r3, r4
 800e108:	61ab      	str	r3, [r5, #24]
  if (cfg.Sof_enable != 0U)
 800e10a:	b11a      	cbz	r2, 800e114 <USB_DevInit+0x128>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e10c:	69ab      	ldr	r3, [r5, #24]
 800e10e:	f043 0308 	orr.w	r3, r3, #8
 800e112:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800e114:	2901      	cmp	r1, #1
 800e116:	d103      	bne.n	800e120 <USB_DevInit+0x134>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e118:	69aa      	ldr	r2, [r5, #24]
 800e11a:	4b21      	ldr	r3, [pc, #132]	; (800e1a0 <USB_DevInit+0x1b4>)
 800e11c:	4313      	orrs	r3, r2
 800e11e:	61ab      	str	r3, [r5, #24]
}
 800e120:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e124:	b004      	add	sp, #16
 800e126:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e128:	2700      	movs	r7, #0
 800e12a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e12e:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e132:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e136:	46be      	mov	lr, r7
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e138:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 800e13c:	e009      	b.n	800e152 <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e13e:	f8c3 e000 	str.w	lr, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e142:	3701      	adds	r7, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e144:	f8c3 e010 	str.w	lr, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e148:	f8c3 8008 	str.w	r8, [r3, #8]
 800e14c:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e14e:	4297      	cmp	r7, r2
 800e150:	d0c6      	beq.n	800e0e0 <USB_DevInit+0xf4>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e152:	f8d3 c000 	ldr.w	ip, [r3]
 800e156:	f1bc 0f00 	cmp.w	ip, #0
 800e15a:	daf0      	bge.n	800e13e <USB_DevInit+0x152>
      if (i == 0U)
 800e15c:	b1cf      	cbz	r7, 800e192 <USB_DevInit+0x1a6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e15e:	f8c3 9000 	str.w	r9, [r3]
 800e162:	e7ee      	b.n	800e142 <USB_DevInit+0x156>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e168:	63ab      	str	r3, [r5, #56]	; 0x38
 800e16a:	e765      	b.n	800e038 <USB_DevInit+0x4c>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800e16c:	4a0d      	ldr	r2, [pc, #52]	; (800e1a4 <USB_DevInit+0x1b8>)
  USBx->GINTMSK = 0U;
 800e16e:	2600      	movs	r6, #0
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800e170:	4b0d      	ldr	r3, [pc, #52]	; (800e1a8 <USB_DevInit+0x1bc>)
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800e172:	6322      	str	r2, [r4, #48]	; 0x30
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e174:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800e178:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800e17a:	433b      	orrs	r3, r7
 800e17c:	6323      	str	r3, [r4, #48]	; 0x30
  USBx->GINTMSK = 0U;
 800e17e:	61ae      	str	r6, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e180:	616a      	str	r2, [r5, #20]
 800e182:	e7bd      	b.n	800e100 <USB_DevInit+0x114>
    ret = HAL_ERROR;
 800e184:	2001      	movs	r0, #1
 800e186:	e781      	b.n	800e08c <USB_DevInit+0xa0>
    ret = HAL_ERROR;
 800e188:	2001      	movs	r0, #1
 800e18a:	e776      	b.n	800e07a <USB_DevInit+0x8e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e18c:	f8c3 a000 	str.w	sl, [r3]
 800e190:	e78d      	b.n	800e0ae <USB_DevInit+0xc2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e192:	f8c3 a000 	str.w	sl, [r3]
 800e196:	e7d4      	b.n	800e142 <USB_DevInit+0x156>
 800e198:	00030d40 	.word	0x00030d40
 800e19c:	803c3800 	.word	0x803c3800
 800e1a0:	40000004 	.word	0x40000004
 800e1a4:	00800100 	.word	0x00800100
 800e1a8:	00010003 	.word	0x00010003

0800e1ac <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e1ac:	0189      	lsls	r1, r1, #6
 800e1ae:	4a07      	ldr	r2, [pc, #28]	; (800e1cc <USB_FlushTxFifo+0x20>)
 800e1b0:	f041 0120 	orr.w	r1, r1, #32
 800e1b4:	6101      	str	r1, [r0, #16]
 800e1b6:	e001      	b.n	800e1bc <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 800e1b8:	3a01      	subs	r2, #1
 800e1ba:	d005      	beq.n	800e1c8 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e1bc:	6903      	ldr	r3, [r0, #16]
 800e1be:	f013 0320 	ands.w	r3, r3, #32
 800e1c2:	d1f9      	bne.n	800e1b8 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	4770      	bx	lr
      return HAL_TIMEOUT;
 800e1c8:	2003      	movs	r0, #3
}
 800e1ca:	4770      	bx	lr
 800e1cc:	00030d40 	.word	0x00030d40

0800e1d0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e1d0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e1d4:	f013 0006 	ands.w	r0, r3, #6
 800e1d8:	d004      	beq.n	800e1e4 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e1da:	f013 0f02 	tst.w	r3, #2
    speed = USB_OTG_SPEED_FULL;
 800e1de:	bf0c      	ite	eq
 800e1e0:	2000      	moveq	r0, #0
 800e1e2:	2003      	movne	r0, #3
}
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop

0800e1e8 <USB_ActivateEndpoint>:
{
 800e1e8:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800e1ea:	780a      	ldrb	r2, [r1, #0]
 800e1ec:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 800e1ee:	784d      	ldrb	r5, [r1, #1]
 800e1f0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800e1f4:	f002 060f 	and.w	r6, r2, #15
 800e1f8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800e1fc:	2d01      	cmp	r5, #1
 800e1fe:	fa03 f306 	lsl.w	r3, r3, r6
 800e202:	d017      	beq.n	800e234 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e204:	69e2      	ldr	r2, [r4, #28]
 800e206:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800e20a:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e20c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e210:	041b      	lsls	r3, r3, #16
 800e212:	d40c      	bmi.n	800e22e <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e214:	688a      	ldr	r2, [r1, #8]
 800e216:	4b14      	ldr	r3, [pc, #80]	; (800e268 <USB_ActivateEndpoint+0x80>)
 800e218:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e21c:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e21e:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 800e222:	4313      	orrs	r3, r2
 800e224:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800e228:	430b      	orrs	r3, r1
 800e22a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e22e:	2000      	movs	r0, #0
 800e230:	bc70      	pop	{r4, r5, r6}
 800e232:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e234:	69e5      	ldr	r5, [r4, #28]
 800e236:	432b      	orrs	r3, r5
 800e238:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e23a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e23e:	041c      	lsls	r4, r3, #16
 800e240:	d4f5      	bmi.n	800e22e <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e242:	688c      	ldr	r4, [r1, #8]
 800e244:	4b08      	ldr	r3, [pc, #32]	; (800e268 <USB_ActivateEndpoint+0x80>)
 800e246:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e24a:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e24c:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800e250:	4323      	orrs	r3, r4
 800e252:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 800e256:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800e25a:	430a      	orrs	r2, r1
}
 800e25c:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e25e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 800e262:	2000      	movs	r0, #0
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	10008000 	.word	0x10008000

0800e26c <USB_DeactivateEndpoint>:
{
 800e26c:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800e26e:	780c      	ldrb	r4, [r1, #0]
 800e270:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 800e272:	7849      	ldrb	r1, [r1, #1]
 800e274:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800e278:	f004 050f 	and.w	r5, r4, #15
 800e27c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800e280:	2901      	cmp	r1, #1
 800e282:	fa03 f305 	lsl.w	r3, r3, r5
 800e286:	d010      	beq.n	800e2aa <USB_DeactivateEndpoint+0x3e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e288:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800e28a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e28e:	490f      	ldr	r1, [pc, #60]	; (800e2cc <USB_DeactivateEndpoint+0x60>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e290:	401c      	ands	r4, r3
 800e292:	63d4      	str	r4, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e294:	69d4      	ldr	r4, [r2, #28]
 800e296:	4023      	ands	r3, r4
 800e298:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e29a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e29e:	4019      	ands	r1, r3
}
 800e2a0:	bc30      	pop	{r4, r5}
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e2a2:	f8c0 1b00 	str.w	r1, [r0, #2816]	; 0xb00
}
 800e2a6:	2000      	movs	r0, #0
 800e2a8:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e2aa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800e2ac:	43db      	mvns	r3, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e2ae:	4908      	ldr	r1, [pc, #32]	; (800e2d0 <USB_DeactivateEndpoint+0x64>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e2b0:	401c      	ands	r4, r3
 800e2b2:	63d4      	str	r4, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e2b4:	69d4      	ldr	r4, [r2, #28]
 800e2b6:	4023      	ands	r3, r4
 800e2b8:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e2ba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e2be:	4019      	ands	r1, r3
}
 800e2c0:	bc30      	pop	{r4, r5}
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e2c2:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	eff37800 	.word	0xeff37800
 800e2d0:	ec337800 	.word	0xec337800

0800e2d4 <USB_EPStartXfer>:
{
 800e2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800e2d8:	784f      	ldrb	r7, [r1, #1]
 800e2da:	780b      	ldrb	r3, [r1, #0]
 800e2dc:	2f01      	cmp	r7, #1
 800e2de:	694c      	ldr	r4, [r1, #20]
 800e2e0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800e2e4:	78ce      	ldrb	r6, [r1, #3]
 800e2e6:	d055      	beq.n	800e394 <USB_EPStartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2e8:	f503 6730 	add.w	r7, r3, #2816	; 0xb00
 800e2ec:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 800e4c8 <USB_EPStartXfer+0x1f4>
 800e2f0:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e2f4:	4d72      	ldr	r5, [pc, #456]	; (800e4c0 <USB_EPStartXfer+0x1ec>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2f6:	ea0c 0e0e 	and.w	lr, ip, lr
 800e2fa:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800e2fe:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e302:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800e306:	ea0e 0505 	and.w	r5, lr, r5
 800e30a:	613d      	str	r5, [r7, #16]
    if (ep->xfer_len == 0U)
 800e30c:	b38c      	cbz	r4, 800e372 <USB_EPStartXfer+0x9e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e30e:	eb0c 0504 	add.w	r5, ip, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e312:	4c6c      	ldr	r4, [pc, #432]	; (800e4c4 <USB_EPStartXfer+0x1f0>)
 800e314:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 800e318:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e31a:	f105 35ff 	add.w	r5, r5, #4294967295
 800e31e:	fbb5 f5fc 	udiv	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e322:	ea04 4ec5 	and.w	lr, r4, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e326:	b2ad      	uxth	r5, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e328:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e32c:	fb0c f405 	mul.w	r4, ip, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e330:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e334:	693d      	ldr	r5, [r7, #16]
 800e336:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800e33a:	ea44 0405 	orr.w	r4, r4, r5
 800e33e:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800e340:	d023      	beq.n	800e38a <USB_EPStartXfer+0xb6>
    if (ep->type == EP_TYPE_ISOC)
 800e342:	2e01      	cmp	r6, #1
 800e344:	d10c      	bne.n	800e360 <USB_EPStartXfer+0x8c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e346:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800e34a:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e34e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800e352:	bf0c      	ite	eq
 800e354:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e358:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800e35c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e360:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800e364:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e368:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800e36c:	2000      	movs	r0, #0
 800e36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e372:	693d      	ldr	r5, [r7, #16]
 800e374:	f3cc 0412 	ubfx	r4, ip, #0, #19
    if (dma == 1U)
 800e378:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e37a:	ea44 0405 	orr.w	r4, r4, r5
 800e37e:	613c      	str	r4, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e380:	693c      	ldr	r4, [r7, #16]
 800e382:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800e386:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800e388:	d1db      	bne.n	800e342 <USB_EPStartXfer+0x6e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800e38a:	68ca      	ldr	r2, [r1, #12]
 800e38c:	2a00      	cmp	r2, #0
 800e38e:	d0d8      	beq.n	800e342 <USB_EPStartXfer+0x6e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e390:	617a      	str	r2, [r7, #20]
 800e392:	e7d6      	b.n	800e342 <USB_EPStartXfer+0x6e>
 800e394:	f503 6510 	add.w	r5, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800e398:	2c00      	cmp	r4, #0
 800e39a:	d13e      	bne.n	800e41a <USB_EPStartXfer+0x146>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e39c:	f8d5 e010 	ldr.w	lr, [r5, #16]
    if (dma == 1U)
 800e3a0:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3a2:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800e4c0 <USB_EPStartXfer+0x1ec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3a6:	4f48      	ldr	r7, [pc, #288]	; (800e4c8 <USB_EPStartXfer+0x1f4>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3a8:	ea0e 0c0c 	and.w	ip, lr, ip
 800e3ac:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3b0:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800e3b4:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 800e3b8:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3bc:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800e3c0:	ea0c 0707 	and.w	r7, ip, r7
 800e3c4:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800e3c6:	d072      	beq.n	800e4ae <USB_EPStartXfer+0x1da>
    if (ep->type == EP_TYPE_ISOC)
 800e3c8:	2e01      	cmp	r6, #1
 800e3ca:	d15d      	bne.n	800e488 <USB_EPStartXfer+0x1b4>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e3cc:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800e3d0:	f415 7f80 	tst.w	r5, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e3d4:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800e3d8:	bf0c      	ite	eq
 800e3da:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e3de:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800e3e2:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e3e6:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800e3ea:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800e3ee:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
  if (dma == 0U)
 800e3f2:	2a00      	cmp	r2, #0
 800e3f4:	d1ba      	bne.n	800e36c <USB_EPStartXfer+0x98>
    count32b = ((uint32_t)len + 3U) / 4U;
 800e3f6:	b2a2      	uxth	r2, r4
 800e3f8:	3203      	adds	r2, #3
    for (i = 0U; i < count32b; i++)
 800e3fa:	0892      	lsrs	r2, r2, #2
 800e3fc:	d0b6      	beq.n	800e36c <USB_EPStartXfer+0x98>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e3fe:	780c      	ldrb	r4, [r1, #0]
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e400:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e402:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800e406:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e40a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800e40e:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 800e412:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e414:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800e416:	d1fa      	bne.n	800e40e <USB_EPStartXfer+0x13a>
 800e418:	e7a8      	b.n	800e36c <USB_EPStartXfer+0x98>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e41a:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e41e:	f3c4 0c12 	ubfx	ip, r4, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e422:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800e426:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e428:	eb08 0e04 	add.w	lr, r8, r4
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e42c:	f8df a098 	ldr.w	sl, [pc, #152]	; 800e4c8 <USB_EPStartXfer+0x1f4>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e430:	f10e 3eff 	add.w	lr, lr, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e434:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e438:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800e4c0 <USB_EPStartXfer+0x1ec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e43c:	f8c5 a010 	str.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e440:	f8d5 a010 	ldr.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e444:	fbbe f8f8 	udiv	r8, lr, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e448:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e44c:	f8df e074 	ldr.w	lr, [pc, #116]	; 800e4c4 <USB_EPStartXfer+0x1f0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e450:	f8c5 9010 	str.w	r9, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e454:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 800e458:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800e45c:	ea4e 0e08 	orr.w	lr, lr, r8
 800e460:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e464:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800e468:	ea4c 0c0e 	orr.w	ip, ip, lr
 800e46c:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800e470:	d013      	beq.n	800e49a <USB_EPStartXfer+0x1c6>
    if (dma == 1U)
 800e472:	2a01      	cmp	r2, #1
 800e474:	d020      	beq.n	800e4b8 <USB_EPStartXfer+0x1e4>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e476:	780a      	ldrb	r2, [r1, #0]
 800e478:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 800e47c:	f002 020f 	and.w	r2, r2, #15
 800e480:	4097      	lsls	r7, r2
 800e482:	430f      	orrs	r7, r1
 800e484:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e488:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
}
 800e48c:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e48e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e492:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800e496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e49a:	692f      	ldr	r7, [r5, #16]
    if (dma == 1U)
 800e49c:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e49e:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800e4a2:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e4a4:	692f      	ldr	r7, [r5, #16]
 800e4a6:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800e4aa:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800e4ac:	d18e      	bne.n	800e3cc <USB_EPStartXfer+0xf8>
      if ((uint32_t)ep->dma_addr != 0U)
 800e4ae:	690f      	ldr	r7, [r1, #16]
 800e4b0:	2f00      	cmp	r7, #0
 800e4b2:	d089      	beq.n	800e3c8 <USB_EPStartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e4b4:	616f      	str	r7, [r5, #20]
 800e4b6:	e787      	b.n	800e3c8 <USB_EPStartXfer+0xf4>
      if ((uint32_t)ep->dma_addr != 0U)
 800e4b8:	690f      	ldr	r7, [r1, #16]
 800e4ba:	2f00      	cmp	r7, #0
 800e4bc:	d1fa      	bne.n	800e4b4 <USB_EPStartXfer+0x1e0>
 800e4be:	e7e3      	b.n	800e488 <USB_EPStartXfer+0x1b4>
 800e4c0:	e007ffff 	.word	0xe007ffff
 800e4c4:	1ff80000 	.word	0x1ff80000
 800e4c8:	fff80000 	.word	0xfff80000

0800e4cc <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800e4cc:	784b      	ldrb	r3, [r1, #1]
{
 800e4ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800e4d0:	2b01      	cmp	r3, #1
  uint32_t epnum = (uint32_t)ep->num;
 800e4d2:	780d      	ldrb	r5, [r1, #0]
 800e4d4:	694f      	ldr	r7, [r1, #20]
 800e4d6:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800e4da:	d025      	beq.n	800e528 <USB_EP0StartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e4dc:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800e4e0:	4e3e      	ldr	r6, [pc, #248]	; (800e5dc <USB_EP0StartXfer+0x110>)
 800e4e2:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e4e4:	4d3e      	ldr	r5, [pc, #248]	; (800e5e0 <USB_EP0StartXfer+0x114>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e4e6:	4006      	ands	r6, r0
 800e4e8:	6888      	ldr	r0, [r1, #8]
 800e4ea:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e4ec:	691e      	ldr	r6, [r3, #16]
 800e4ee:	4035      	ands	r5, r6
 800e4f0:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 800e4f2:	b107      	cbz	r7, 800e4f6 <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800e4f4:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e4f6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e4f8:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800e4fc:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e4fe:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800e502:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e504:	691d      	ldr	r5, [r3, #16]
 800e506:	ea40 0005 	orr.w	r0, r0, r5
 800e50a:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800e50c:	d007      	beq.n	800e51e <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e50e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
}
 800e512:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e518:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800e51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800e51e:	68ca      	ldr	r2, [r1, #12]
 800e520:	2a00      	cmp	r2, #0
 800e522:	d0f4      	beq.n	800e50e <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e524:	615a      	str	r2, [r3, #20]
 800e526:	e7f2      	b.n	800e50e <USB_EP0StartXfer+0x42>
 800e528:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800e52c:	b39f      	cbz	r7, 800e596 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e52e:	f8d3 e010 	ldr.w	lr, [r3, #16]
 800e532:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800e5dc <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e536:	4e2a      	ldr	r6, [pc, #168]	; (800e5e0 <USB_EP0StartXfer+0x114>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e538:	ea0e 0c0c 	and.w	ip, lr, ip
      if (ep->xfer_len > ep->maxpacket)
 800e53c:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e540:	f8c3 c010 	str.w	ip, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800e544:	45be      	cmp	lr, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e546:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800e54a:	ea0c 0606 	and.w	r6, ip, r6
 800e54e:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800e550:	d236      	bcs.n	800e5c0 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e552:	691f      	ldr	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e554:	f3ce 0612 	ubfx	r6, lr, #0, #19
        ep->xfer_len = ep->maxpacket;
 800e558:	f8c1 e014 	str.w	lr, [r1, #20]
    if (dma == 1U)
 800e55c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e55e:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800e562:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e564:	691f      	ldr	r7, [r3, #16]
 800e566:	ea46 0607 	orr.w	r6, r6, r7
 800e56a:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 800e56c:	d023      	beq.n	800e5b6 <USB_EP0StartXfer+0xea>
      if (ep->xfer_len > 0U)
 800e56e:	f1be 0f00 	cmp.w	lr, #0
 800e572:	d008      	beq.n	800e586 <USB_EP0StartXfer+0xba>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e574:	f005 020f 	and.w	r2, r5, #15
 800e578:	2501      	movs	r5, #1
 800e57a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800e57e:	4095      	lsls	r5, r2
 800e580:	431d      	orrs	r5, r3
 800e582:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e586:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 800e58a:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e58c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e590:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800e594:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e596:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 800e598:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e59a:	4d11      	ldr	r5, [pc, #68]	; (800e5e0 <USB_EP0StartXfer+0x114>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e59c:	480f      	ldr	r0, [pc, #60]	; (800e5dc <USB_EP0StartXfer+0x110>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e59e:	ea05 0506 	and.w	r5, r5, r6
 800e5a2:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5a4:	691d      	ldr	r5, [r3, #16]
 800e5a6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800e5aa:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e5ac:	691d      	ldr	r5, [r3, #16]
 800e5ae:	ea00 0005 	and.w	r0, r0, r5
 800e5b2:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800e5b4:	d1e7      	bne.n	800e586 <USB_EP0StartXfer+0xba>
      if ((uint32_t)ep->dma_addr != 0U)
 800e5b6:	690a      	ldr	r2, [r1, #16]
 800e5b8:	2a00      	cmp	r2, #0
 800e5ba:	d0e4      	beq.n	800e586 <USB_EP0StartXfer+0xba>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e5bc:	615a      	str	r2, [r3, #20]
 800e5be:	e7e2      	b.n	800e586 <USB_EP0StartXfer+0xba>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5c0:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e5c2:	f3c7 0712 	ubfx	r7, r7, #0, #19
    if (dma == 1U)
 800e5c6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5c8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800e5cc:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e5ce:	691e      	ldr	r6, [r3, #16]
 800e5d0:	ea47 0706 	orr.w	r7, r7, r6
 800e5d4:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 800e5d6:	d1cd      	bne.n	800e574 <USB_EP0StartXfer+0xa8>
 800e5d8:	e7ed      	b.n	800e5b6 <USB_EP0StartXfer+0xea>
 800e5da:	bf00      	nop
 800e5dc:	fff80000 	.word	0xfff80000
 800e5e0:	e007ffff 	.word	0xe007ffff

0800e5e4 <USB_WritePacket>:
{
 800e5e4:	b410      	push	{r4}
 800e5e6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800e5ea:	b96c      	cbnz	r4, 800e608 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 800e5ec:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800e5ee:	089b      	lsrs	r3, r3, #2
 800e5f0:	d00a      	beq.n	800e608 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e5f2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800e5f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e5fa:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800e5fe:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800e602:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e604:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800e606:	d1fa      	bne.n	800e5fe <USB_WritePacket+0x1a>
}
 800e608:	2000      	movs	r0, #0
 800e60a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e610:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800e612:	0892      	lsrs	r2, r2, #2
 800e614:	d00c      	beq.n	800e630 <USB_ReadPacket+0x20>
{
 800e616:	b410      	push	{r4}
 800e618:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800e61c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800e626:	4281      	cmp	r1, r0
 800e628:	d1fa      	bne.n	800e620 <USB_ReadPacket+0x10>
}
 800e62a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e62e:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800e630:	4608      	mov	r0, r1
}
 800e632:	4770      	bx	lr

0800e634 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800e634:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e636:	784a      	ldrb	r2, [r1, #1]
 800e638:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e63c:	3300      	adds	r3, #0
 800e63e:	bf18      	it	ne
 800e640:	2301      	movne	r3, #1
 800e642:	2a01      	cmp	r2, #1
 800e644:	d012      	beq.n	800e66c <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e646:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e64a:	2a00      	cmp	r2, #0
 800e64c:	db06      	blt.n	800e65c <USB_EPSetStall+0x28>
 800e64e:	b12b      	cbz	r3, 800e65c <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e650:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e654:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e658:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e65c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e664:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e668:	2000      	movs	r0, #0
 800e66a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e66c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800e670:	2a00      	cmp	r2, #0
 800e672:	db06      	blt.n	800e682 <USB_EPSetStall+0x4e>
 800e674:	b12b      	cbz	r3, 800e682 <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e676:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e67a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e67e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e682:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e68a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e68e:	2000      	movs	r0, #0
 800e690:	4770      	bx	lr
 800e692:	bf00      	nop

0800e694 <USB_EPClearStall>:
{
 800e694:	78cb      	ldrb	r3, [r1, #3]
 800e696:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800e698:	7849      	ldrb	r1, [r1, #1]
 800e69a:	3b02      	subs	r3, #2
 800e69c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800e6a0:	2901      	cmp	r1, #1
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	d011      	beq.n	800e6ca <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e6a6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e6aa:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e6ac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e6b0:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e6b4:	d901      	bls.n	800e6ba <USB_EPClearStall+0x26>
}
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e6ba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e6be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6c2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e6ca:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e6ce:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e6d0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e6d4:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e6d8:	d8ed      	bhi.n	800e6b6 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e6da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e6de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6e2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e6e6:	2000      	movs	r0, #0
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop

0800e6ec <USB_SetDevAddress>:
{
 800e6ec:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e6ee:	0109      	lsls	r1, r1, #4
}
 800e6f0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e6f2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e6f6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e6fa:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800e6fe:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e702:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800e706:	4311      	orrs	r1, r2
 800e708:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop

0800e710 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e710:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800e714:	2003      	movs	r0, #3
{
 800e716:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e718:	6853      	ldr	r3, [r2, #4]
 800e71a:	f023 0302 	bic.w	r3, r3, #2
 800e71e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e720:	f7f6 f94a 	bl	80049b8 <HAL_Delay>
}
 800e724:	2000      	movs	r0, #0
 800e726:	bd08      	pop	{r3, pc}

0800e728 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e728:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800e72c:	2003      	movs	r0, #3
{
 800e72e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e730:	6853      	ldr	r3, [r2, #4]
 800e732:	f043 0302 	orr.w	r3, r3, #2
 800e736:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e738:	f7f6 f93e 	bl	80049b8 <HAL_Delay>
}
 800e73c:	2000      	movs	r0, #0
 800e73e:	bd08      	pop	{r3, pc}

0800e740 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800e740:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800e742:	6980      	ldr	r0, [r0, #24]
}
 800e744:	4010      	ands	r0, r2
 800e746:	4770      	bx	lr

0800e748 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e748:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800e74c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e750:	69c0      	ldr	r0, [r0, #28]
 800e752:	4018      	ands	r0, r3
}
 800e754:	0c00      	lsrs	r0, r0, #16
 800e756:	4770      	bx	lr

0800e758 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e758:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800e75c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e760:	69c0      	ldr	r0, [r0, #28]
 800e762:	4018      	ands	r0, r3
}
 800e764:	b280      	uxth	r0, r0
 800e766:	4770      	bx	lr

0800e768 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e768:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e76c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e770:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e774:	6940      	ldr	r0, [r0, #20]
}
 800e776:	4010      	ands	r0, r2
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop

0800e77c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800e77c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e780:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 800e784:	b410      	push	{r4}
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e786:	f001 040f 	and.w	r4, r1, #15
  msk = USBx_DEVICE->DIEPMSK;
 800e78a:	6911      	ldr	r1, [r2, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e78c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e78e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e792:	40e3      	lsrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e794:	6880      	ldr	r0, [r0, #8]
}
 800e796:	f85d 4b04 	ldr.w	r4, [sp], #4
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e79a:	01db      	lsls	r3, r3, #7
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	430b      	orrs	r3, r1
}
 800e7a0:	4018      	ands	r0, r3
 800e7a2:	4770      	bx	lr

0800e7a4 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800e7a4:	6940      	ldr	r0, [r0, #20]
}
 800e7a6:	f000 0001 	and.w	r0, r0, #1
 800e7aa:	4770      	bx	lr

0800e7ac <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e7ac:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800e7b0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e7b4:	4a0a      	ldr	r2, [pc, #40]	; (800e7e0 <USB_ActivateSetup+0x34>)
 800e7b6:	400a      	ands	r2, r1
 800e7b8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800e7bc:	689a      	ldr	r2, [r3, #8]
 800e7be:	f002 0206 	and.w	r2, r2, #6
 800e7c2:	2a04      	cmp	r2, #4
 800e7c4:	d105      	bne.n	800e7d2 <USB_ActivateSetup+0x26>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800e7c6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800e7ca:	f042 0203 	orr.w	r2, r2, #3
 800e7ce:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e7d2:	685a      	ldr	r2, [r3, #4]
}
 800e7d4:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e7d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e7da:	605a      	str	r2, [r3, #4]
}
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop
 800e7e0:	fffff800 	.word	0xfffff800

0800e7e4 <USB_EP0_OutStart>:
{
 800e7e4:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e7e6:	4c12      	ldr	r4, [pc, #72]	; (800e830 <USB_EP0_OutStart+0x4c>)
 800e7e8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e7ec:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e7ee:	42a5      	cmp	r5, r4
 800e7f0:	d903      	bls.n	800e7fa <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e7f2:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800e7f6:	2c00      	cmp	r4, #0
 800e7f8:	db16      	blt.n	800e828 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e7fa:	2400      	movs	r4, #0
  if (dma == 1U)
 800e7fc:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e7fe:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e800:	691c      	ldr	r4, [r3, #16]
 800e802:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800e806:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e808:	691c      	ldr	r4, [r3, #16]
 800e80a:	f044 0418 	orr.w	r4, r4, #24
 800e80e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e810:	691c      	ldr	r4, [r3, #16]
 800e812:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800e816:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800e818:	d106      	bne.n	800e828 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e81a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e81c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e820:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e824:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e828:	2000      	movs	r0, #0
 800e82a:	bc30      	pop	{r4, r5}
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	4f54300a 	.word	0x4f54300a

0800e834 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e834:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e836:	4903      	ldr	r1, [pc, #12]	; (800e844 <MX_FATFS_Init+0x10>)
 800e838:	4803      	ldr	r0, [pc, #12]	; (800e848 <MX_FATFS_Init+0x14>)
 800e83a:	f001 f911 	bl	800fa60 <FATFS_LinkDriver>
 800e83e:	4b03      	ldr	r3, [pc, #12]	; (800e84c <MX_FATFS_Init+0x18>)
 800e840:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e842:	bd08      	pop	{r3, pc}
 800e844:	20022400 	.word	0x20022400
 800e848:	20000318 	.word	0x20000318
 800e84c:	20022404 	.word	0x20022404

0800e850 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800e850:	4b02      	ldr	r3, [pc, #8]	; (800e85c <USER_initialize+0xc>)
 800e852:	2201      	movs	r2, #1
 800e854:	701a      	strb	r2, [r3, #0]
    return Stat;
 800e856:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	20000315 	.word	0x20000315

0800e860 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 800e860:	2000      	movs	r0, #0
 800e862:	4770      	bx	lr

0800e864 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 800e864:	2001      	movs	r0, #1
 800e866:	4770      	bx	lr

0800e868 <USER_write>:
 800e868:	2000      	movs	r0, #0
 800e86a:	4770      	bx	lr

0800e86c <USER_status>:
 800e86c:	4b02      	ldr	r3, [pc, #8]	; (800e878 <USER_status+0xc>)
 800e86e:	2201      	movs	r2, #1
 800e870:	701a      	strb	r2, [r3, #0]
 800e872:	7818      	ldrb	r0, [r3, #0]
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	20000315 	.word	0x20000315

0800e87c <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800e87c:	2100      	movs	r1, #0
{
 800e87e:	b5f0      	push	{r4, r5, r6, r7, lr}
  tcpip_init( NULL, NULL );
 800e880:	4608      	mov	r0, r1
{
 800e882:	b08b      	sub	sp, #44	; 0x2c
  tcpip_init( NULL, NULL );
 800e884:	f003 fb5a 	bl	8011f3c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800e888:	2400      	movs	r4, #0
  netmask.addr = 0;
 800e88a:	4f1f      	ldr	r7, [pc, #124]	; (800e908 <MX_LWIP_Init+0x8c>)
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800e88c:	4b1f      	ldr	r3, [pc, #124]	; (800e90c <MX_LWIP_Init+0x90>)
 800e88e:	4e20      	ldr	r6, [pc, #128]	; (800e910 <MX_LWIP_Init+0x94>)
 800e890:	463a      	mov	r2, r7
 800e892:	9302      	str	r3, [sp, #8]
 800e894:	9400      	str	r4, [sp, #0]
  ipaddr.addr = 0;
 800e896:	481f      	ldr	r0, [pc, #124]	; (800e914 <MX_LWIP_Init+0x98>)
  netmask.addr = 0;
 800e898:	603c      	str	r4, [r7, #0]
  gw.addr = 0;
 800e89a:	4d1f      	ldr	r5, [pc, #124]	; (800e918 <MX_LWIP_Init+0x9c>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800e89c:	4601      	mov	r1, r0
 800e89e:	4f1f      	ldr	r7, [pc, #124]	; (800e91c <MX_LWIP_Init+0xa0>)
 800e8a0:	462b      	mov	r3, r5
  ipaddr.addr = 0;
 800e8a2:	6004      	str	r4, [r0, #0]
  gw.addr = 0;
 800e8a4:	602c      	str	r4, [r5, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	9701      	str	r7, [sp, #4]
 800e8aa:	f005 fed9 	bl	8014660 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	f005 ff1e 	bl	80146f0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e8b4:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e8b8:	4630      	mov	r0, r6
  if (netif_is_link_up(&gnetif))
 800e8ba:	075b      	lsls	r3, r3, #29
 800e8bc:	d420      	bmi.n	800e900 <MX_LWIP_Init+0x84>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e8be:	f005 ff37 	bl	8014730 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800e8c2:	4917      	ldr	r1, [pc, #92]	; (800e920 <MX_LWIP_Init+0xa4>)
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );

  link_arg.netif = &gnetif;
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800e8c4:	ac05      	add	r4, sp, #20
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800e8c6:	4812      	ldr	r0, [pc, #72]	; (800e910 <MX_LWIP_Init+0x94>)
 800e8c8:	f005 ff78 	bl	80147bc <netif_set_link_callback>
  osSemaphoreDef(Netif_SEM);
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	a80a      	add	r0, sp, #40	; 0x28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800e8d0:	2101      	movs	r1, #1
  link_arg.netif = &gnetif;
 800e8d2:	4f14      	ldr	r7, [pc, #80]	; (800e924 <MX_LWIP_Init+0xa8>)
  osSemaphoreDef(Netif_SEM);
 800e8d4:	f840 3d18 	str.w	r3, [r0, #-24]!
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800e8d8:	f001 f980 	bl	800fbdc <osSemaphoreCreate>
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800e8dc:	4d12      	ldr	r5, [pc, #72]	; (800e928 <MX_LWIP_Init+0xac>)
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800e8de:	4b13      	ldr	r3, [pc, #76]	; (800e92c <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 800e8e0:	6078      	str	r0, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800e8e2:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 800e8e4:	603e      	str	r6, [r7, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800e8e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8e8:	682d      	ldr	r5, [r5, #0]
 800e8ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800e8ec:	4639      	mov	r1, r7
 800e8ee:	a805      	add	r0, sp, #20
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800e8f0:	6025      	str	r5, [r4, #0]
  osThreadCreate (osThread(LinkThr), &link_arg);
 800e8f2:	f001 f8e9 	bl	800fac8 <osThreadCreate>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800e8f6:	4806      	ldr	r0, [pc, #24]	; (800e910 <MX_LWIP_Init+0x94>)
 800e8f8:	f00c facc 	bl	801ae94 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e8fc:	b00b      	add	sp, #44	; 0x2c
 800e8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800e900:	f005 fefc 	bl	80146fc <netif_set_up>
 800e904:	e7dd      	b.n	800e8c2 <MX_LWIP_Init+0x46>
 800e906:	bf00      	nop
 800e908:	200228b4 	.word	0x200228b4
 800e90c:	08011ead 	.word	0x08011ead
 800e910:	20022874 	.word	0x20022874
 800e914:	200228b0 	.word	0x200228b0
 800e918:	200228b8 	.word	0x200228b8
 800e91c:	0800ec15 	.word	0x0800ec15
 800e920:	0800ee01 	.word	0x0800ee01
 800e924:	2002286c 	.word	0x2002286c
 800e928:	080217cc 	.word	0x080217cc
 800e92c:	200008d0 	.word	0x200008d0

0800e930 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800e934:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800e9e8 <low_level_output+0xb8>
{
 800e938:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800e93a:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800e93c:	f8da 402c 	ldr.w	r4, [sl, #44]	; 0x2c
 800e940:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 800e942:	2900      	cmp	r1, #0
 800e944:	d048      	beq.n	800e9d8 <low_level_output+0xa8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e946:	6822      	ldr	r2, [r4, #0]
 800e948:	2a00      	cmp	r2, #0
 800e94a:	db1f      	blt.n	800e98c <low_level_output+0x5c>
  bufferoffset = 0;
 800e94c:	2000      	movs	r0, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e94e:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 800e952:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800e954:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800e958:	2700      	movs	r7, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e95a:	1816      	adds	r6, r2, r0
 800e95c:	454e      	cmp	r6, r9
 800e95e:	d803      	bhi.n	800e968 <low_level_output+0x38>
 800e960:	e027      	b.n	800e9b2 <low_level_output+0x82>
 800e962:	454e      	cmp	r6, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800e964:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e966:	d923      	bls.n	800e9b0 <low_level_output+0x80>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800e968:	eba9 0500 	sub.w	r5, r9, r0
 800e96c:	f8db 1004 	ldr.w	r1, [fp, #4]
 800e970:	4418      	add	r0, r3

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800e972:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800e976:	4439      	add	r1, r7
 800e978:	462a      	mov	r2, r5
 800e97a:	f00e fdaa 	bl	801d4d2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800e97e:	68e4      	ldr	r4, [r4, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 800e980:	2000      	movs	r0, #0
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800e982:	442f      	add	r7, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e984:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800e986:	44a8      	add	r8, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e988:	4283      	cmp	r3, r0
 800e98a:	daea      	bge.n	800e962 <low_level_output+0x32>
        errval = ERR_USE;
 800e98c:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800e990:	f8da 3000 	ldr.w	r3, [sl]
 800e994:	f241 0214 	movw	r2, #4116	; 0x1014
 800e998:	5899      	ldr	r1, [r3, r2]
 800e99a:	0689      	lsls	r1, r1, #26
 800e99c:	d505      	bpl.n	800e9aa <low_level_output+0x7a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800e99e:	2520      	movs	r5, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800e9a0:	f241 0104 	movw	r1, #4100	; 0x1004
 800e9a4:	2400      	movs	r4, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800e9a6:	509d      	str	r5, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800e9a8:	505c      	str	r4, [r3, r1]
  }
  return errval;
}
 800e9aa:	b003      	add	sp, #12
 800e9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800e9b0:	4632      	mov	r2, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800e9b2:	f8db 1004 	ldr.w	r1, [fp, #4]
 800e9b6:	4418      	add	r0, r3
 800e9b8:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800e9ba:	4490      	add	r8, r2
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800e9bc:	4439      	add	r1, r7
 800e9be:	f00e fd88 	bl	801d4d2 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800e9c2:	f8db b000 	ldr.w	fp, [fp]
 800e9c6:	9b01      	ldr	r3, [sp, #4]
 800e9c8:	f1bb 0f00 	cmp.w	fp, #0
 800e9cc:	d005      	beq.n	800e9da <low_level_output+0xaa>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e9ce:	6822      	ldr	r2, [r4, #0]
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	2a00      	cmp	r2, #0
 800e9d4:	dabe      	bge.n	800e954 <low_level_output+0x24>
 800e9d6:	e7d9      	b.n	800e98c <low_level_output+0x5c>
  uint32_t framelength = 0;
 800e9d8:	4688      	mov	r8, r1
  HAL_ETH_TransmitFrame(&heth, framelength);
 800e9da:	4641      	mov	r1, r8
 800e9dc:	4802      	ldr	r0, [pc, #8]	; (800e9e8 <low_level_output+0xb8>)
 800e9de:	f7f8 f805 	bl	80069ec <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	e7d4      	b.n	800e990 <low_level_output+0x60>
 800e9e6:	bf00      	nop
 800e9e8:	2002418c 	.word	0x2002418c

0800e9ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800eae8 <ethernetif_input+0xfc>
 800e9f4:	b083      	sub	sp, #12
 800e9f6:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e9f8:	4b3a      	ldr	r3, [pc, #232]	; (800eae4 <ethernetif_input+0xf8>)
 800e9fa:	f04f 31ff 	mov.w	r1, #4294967295
 800e9fe:	6818      	ldr	r0, [r3, #0]
 800ea00:	f001 f900 	bl	800fc04 <osSemaphoreWait>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d1f7      	bne.n	800e9f8 <ethernetif_input+0xc>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800ea08:	4837      	ldr	r0, [pc, #220]	; (800eae8 <ethernetif_input+0xfc>)
 800ea0a:	f7f8 f86d 	bl	8006ae8 <HAL_ETH_GetReceivedFrame_IT>
 800ea0e:	4604      	mov	r4, r0
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d1f1      	bne.n	800e9f8 <ethernetif_input+0xc>
  len = heth.RxFrameInfos.length;
 800ea14:	f8ba 103c 	ldrh.w	r1, [sl, #60]	; 0x3c
  if (len > 0)
 800ea18:	bb59      	cbnz	r1, 800ea72 <ethernetif_input+0x86>
  struct pbuf *p = NULL;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	9300      	str	r3, [sp, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ea1e:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ea22:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ea26:	b140      	cbz	r0, 800ea3a <ethernetif_input+0x4e>
 800ea28:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ea2a:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ea2c:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ea2e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ea32:	4288      	cmp	r0, r1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ea34:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ea36:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ea38:	d1f7      	bne.n	800ea2a <ethernetif_input+0x3e>
    heth.RxFrameInfos.SegCount =0;
 800ea3a:	2100      	movs	r1, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800ea3c:	f8da 3000 	ldr.w	r3, [sl]
 800ea40:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
 800ea44:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800ea48:	5899      	ldr	r1, [r3, r2]
 800ea4a:	0609      	lsls	r1, r1, #24
 800ea4c:	d505      	bpl.n	800ea5a <ethernetif_input+0x6e>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ea4e:	2080      	movs	r0, #128	; 0x80
    heth.Instance->DMARPDR = 0;
 800ea50:	f241 0108 	movw	r1, #4104	; 0x1008
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ea54:	5098      	str	r0, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800ea56:	2200      	movs	r2, #0
 800ea58:	505a      	str	r2, [r3, r1]
    {
      do
      {
        p = low_level_input( netif );
        if   (p != NULL)
 800ea5a:	9800      	ldr	r0, [sp, #0]
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d0cb      	beq.n	800e9f8 <ethernetif_input+0xc>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ea60:	9901      	ldr	r1, [sp, #4]
 800ea62:	690b      	ldr	r3, [r1, #16]
 800ea64:	4798      	blx	r3
 800ea66:	2800      	cmp	r0, #0
 800ea68:	d0ce      	beq.n	800ea08 <ethernetif_input+0x1c>
          {
            pbuf_free(p);
 800ea6a:	9800      	ldr	r0, [sp, #0]
 800ea6c:	f005 ff6c 	bl	8014948 <pbuf_free>
 800ea70:	e7ca      	b.n	800ea08 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ea72:	2203      	movs	r2, #3
 800ea74:	2004      	movs	r0, #4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ea76:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ea7a:	f005 ffd3 	bl	8014a24 <pbuf_alloc>
  if (p != NULL)
 800ea7e:	9000      	str	r0, [sp, #0]
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d0ca      	beq.n	800ea1a <ethernetif_input+0x2e>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ea84:	46a8      	mov	r8, r5
    bufferoffset = 0;
 800ea86:	4621      	mov	r1, r4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ea88:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 800ea8c:	4683      	mov	fp, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ea8e:	f240 59f4 	movw	r9, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800ea92:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800ea96:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ea98:	1854      	adds	r4, r2, r1
 800ea9a:	454c      	cmp	r4, r9
 800ea9c:	d914      	bls.n	800eac8 <ethernetif_input+0xdc>
      payloadoffset = 0;
 800ea9e:	4643      	mov	r3, r8
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800eaa0:	eba9 0701 	sub.w	r7, r9, r1
 800eaa4:	f8db 0004 	ldr.w	r0, [fp, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800eaa8:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800eaac:	4419      	add	r1, r3
 800eaae:	4428      	add	r0, r5
 800eab0:	463a      	mov	r2, r7
 800eab2:	f00e fd0e 	bl	801d4d2 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800eab6:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800eab8:	454c      	cmp	r4, r9
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800eaba:	443d      	add	r5, r7
        bufferoffset = 0;
 800eabc:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800eac0:	68b3      	ldr	r3, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800eac2:	d8ed      	bhi.n	800eaa0 <ethernetif_input+0xb4>
 800eac4:	4698      	mov	r8, r3
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800eac6:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800eac8:	f8db 0004 	ldr.w	r0, [fp, #4]
 800eacc:	4441      	add	r1, r8
 800eace:	4428      	add	r0, r5
 800ead0:	f00e fcff 	bl	801d4d2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800ead4:	f8db b000 	ldr.w	fp, [fp]
 800ead8:	4621      	mov	r1, r4
 800eada:	f1bb 0f00 	cmp.w	fp, #0
 800eade:	d1d8      	bne.n	800ea92 <ethernetif_input+0xa6>
 800eae0:	e79d      	b.n	800ea1e <ethernetif_input+0x32>
 800eae2:	bf00      	nop
 800eae4:	200008d4 	.word	0x200008d4
 800eae8:	2002418c 	.word	0x2002418c

0800eaec <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800eaec:	6802      	ldr	r2, [r0, #0]
 800eaee:	4b41      	ldr	r3, [pc, #260]	; (800ebf4 <HAL_ETH_MspInit+0x108>)
{
 800eaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800eaf2:	429a      	cmp	r2, r3
{
 800eaf4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eaf6:	f04f 0400 	mov.w	r4, #0
 800eafa:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800eafe:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800eb02:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800eb04:	d001      	beq.n	800eb0a <HAL_ETH_MspInit+0x1e>
}
 800eb06:	b00d      	add	sp, #52	; 0x34
 800eb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800eb0a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb0e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800eb10:	2032      	movs	r0, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb12:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800eb14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800eb16:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eb18:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH_CLK_ENABLE();
 800eb1a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800eb1e:	631a      	str	r2, [r3, #48]	; 0x30
 800eb20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb22:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800eb26:	9200      	str	r2, [sp, #0]
 800eb28:	9a00      	ldr	r2, [sp, #0]
 800eb2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb2c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800eb30:	631a      	str	r2, [r3, #48]	; 0x30
 800eb32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb34:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800eb38:	9201      	str	r2, [sp, #4]
 800eb3a:	9a01      	ldr	r2, [sp, #4]
 800eb3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb3e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800eb42:	631a      	str	r2, [r3, #48]	; 0x30
 800eb44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb46:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800eb4a:	9202      	str	r2, [sp, #8]
 800eb4c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eb4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb50:	f042 0204 	orr.w	r2, r2, #4
 800eb54:	631a      	str	r2, [r3, #48]	; 0x30
 800eb56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb58:	f002 0204 	and.w	r2, r2, #4
 800eb5c:	9203      	str	r2, [sp, #12]
 800eb5e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb62:	f042 0201 	orr.w	r2, r2, #1
 800eb66:	631a      	str	r2, [r3, #48]	; 0x30
 800eb68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb6a:	f002 0201 	and.w	r2, r2, #1
 800eb6e:	9204      	str	r2, [sp, #16]
 800eb70:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb74:	433a      	orrs	r2, r7
 800eb76:	631a      	str	r2, [r3, #48]	; 0x30
 800eb78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb7a:	403a      	ands	r2, r7
 800eb7c:	9205      	str	r2, [sp, #20]
 800eb7e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800eb80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb86:	631a      	str	r2, [r3, #48]	; 0x30
 800eb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800eb8a:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800eb8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eb90:	4819      	ldr	r0, [pc, #100]	; (800ebf8 <HAL_ETH_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb92:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800eb94:	9306      	str	r3, [sp, #24]
 800eb96:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800eb98:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eb9c:	f7f8 fcee 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800eba0:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eba2:	a907      	add	r1, sp, #28
 800eba4:	4815      	ldr	r0, [pc, #84]	; (800ebfc <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800eba6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eba8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebaa:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ebac:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ebb0:	f7f8 fce4 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ebb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ebb8:	a907      	add	r1, sp, #28
 800ebba:	4811      	ldr	r0, [pc, #68]	; (800ec00 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ebbc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebbe:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebc0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ebc2:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ebc6:	f7f8 fcd9 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ebca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ebce:	a907      	add	r1, sp, #28
 800ebd0:	480c      	ldr	r0, [pc, #48]	; (800ec04 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ebd2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebd4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebd6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ebd8:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ebdc:	f7f8 fcce 	bl	800757c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 800ebe0:	4622      	mov	r2, r4
 800ebe2:	2106      	movs	r1, #6
 800ebe4:	203d      	movs	r0, #61	; 0x3d
 800ebe6:	f7f6 fb35 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ebea:	203d      	movs	r0, #61	; 0x3d
 800ebec:	f7f6 fb78 	bl	80052e0 <HAL_NVIC_EnableIRQ>
}
 800ebf0:	b00d      	add	sp, #52	; 0x34
 800ebf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebf4:	40028000 	.word	0x40028000
 800ebf8:	40020800 	.word	0x40020800
 800ebfc:	40020000 	.word	0x40020000
 800ec00:	40020400 	.word	0x40020400
 800ec04:	40021800 	.word	0x40021800

0800ec08 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800ec08:	4b01      	ldr	r3, [pc, #4]	; (800ec10 <HAL_ETH_RxCpltCallback+0x8>)
 800ec0a:	6818      	ldr	r0, [r3, #0]
 800ec0c:	f001 b826 	b.w	800fc5c <osSemaphoreRelease>
 800ec10:	200008d4 	.word	0x200008d4

0800ec14 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ec14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ec18:	4604      	mov	r4, r0
{
 800ec1a:	b08b      	sub	sp, #44	; 0x2c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	f000 8097 	beq.w	800ed50 <ethernetif_init+0x13c>
  uint32_t regvalue = 0;
 800ec22:	f04f 0800 	mov.w	r8, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ec26:	f247 4073 	movw	r0, #29811	; 0x7473
  MACAddr[0] = 0x00;
 800ec2a:	a90a      	add	r1, sp, #40	; 0x28
 800ec2c:	4b4c      	ldr	r3, [pc, #304]	; (800ed60 <ethernetif_init+0x14c>)
  heth.Instance = ETH;
 800ec2e:	4d4d      	ldr	r5, [pc, #308]	; (800ed64 <ethernetif_init+0x150>)
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ec30:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  heth.Instance = ETH;
 800ec34:	4a4c      	ldr	r2, [pc, #304]	; (800ed68 <ethernetif_init+0x154>)
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ec36:	f8df e164 	ldr.w	lr, [pc, #356]	; 800ed9c <ethernetif_init+0x188>
 800ec3a:	4f4c      	ldr	r7, [pc, #304]	; (800ed6c <ethernetif_init+0x158>)
  netif->name[0] = IFNAME0;
 800ec3c:	8720      	strh	r0, [r4, #56]	; 0x38
  uint32_t regvalue = 0;
 800ec3e:	f8cd 8004 	str.w	r8, [sp, #4]
  MACAddr[0] = 0x00;
 800ec42:	f841 3d1c 	str.w	r3, [r1, #-28]!
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ec46:	683e      	ldr	r6, [r7, #0]
 800ec48:	f8de 3000 	ldr.w	r3, [lr]
 800ec4c:	4848      	ldr	r0, [pc, #288]	; (800ed70 <ethernetif_init+0x15c>)
  heth.Instance = ETH;
 800ec4e:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ec50:	2201      	movs	r2, #1
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ec52:	4073      	eors	r3, r6
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ec54:	f8a5 8010 	strh.w	r8, [r5, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ec58:	606a      	str	r2, [r5, #4]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ec5a:	6806      	ldr	r6, [r0, #0]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ec5c:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800eda0 <ethernetif_init+0x18c>
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800ec60:	4073      	eors	r3, r6
 800ec62:	f88d 3011 	strb.w	r3, [sp, #17]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800ec66:	683f      	ldr	r7, [r7, #0]
 800ec68:	f8de 3000 	ldr.w	r3, [lr]
 800ec6c:	f8d0 c000 	ldr.w	ip, [r0]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ec70:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800ec72:	407b      	eors	r3, r7

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ec74:	4f3f      	ldr	r7, [pc, #252]	; (800ed74 <ethernetif_init+0x160>)
  netif->output = etharp_output;
 800ec76:	f8c4 8014 	str.w	r8, [r4, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800ec7a:	ea83 030c 	eor.w	r3, r3, ip
  netif->linkoutput = low_level_output;
 800ec7e:	61a7      	str	r7, [r4, #24]
  heth.Init.MACAddr = &MACAddr[0];
 800ec80:	6169      	str	r1, [r5, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800ec82:	f88d 3010 	strb.w	r3, [sp, #16]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ec86:	f8c5 9020 	str.w	r9, [r5, #32]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 800ec8a:	e9c5 2206 	strd	r2, r2, [r5, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ec8e:	f7f8 f84b 	bl	8006d28 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800ec92:	b928      	cbnz	r0, 800eca0 <ethernetif_init+0x8c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ec94:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800ec98:	f043 0304 	orr.w	r3, r3, #4
 800ec9c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800eca0:	2304      	movs	r3, #4
 800eca2:	4a35      	ldr	r2, [pc, #212]	; (800ed78 <ethernetif_init+0x164>)
 800eca4:	4935      	ldr	r1, [pc, #212]	; (800ed7c <ethernetif_init+0x168>)
  osSemaphoreDef(SEM);
 800eca6:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800eca8:	482e      	ldr	r0, [pc, #184]	; (800ed64 <ethernetif_init+0x150>)
 800ecaa:	f7f7 fe13 	bl	80068d4 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ecae:	2304      	movs	r3, #4
 800ecb0:	4a33      	ldr	r2, [pc, #204]	; (800ed80 <ethernetif_init+0x16c>)
 800ecb2:	4934      	ldr	r1, [pc, #208]	; (800ed84 <ethernetif_init+0x170>)
 800ecb4:	482b      	ldr	r0, [pc, #172]	; (800ed64 <ethernetif_init+0x150>)
 800ecb6:	f7f7 fe57 	bl	8006968 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ecba:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ecbc:	2106      	movs	r1, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ecbe:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
  osSemaphoreDef(SEM);
 800ecc2:	a80a      	add	r0, sp, #40	; 0x28
  netif->mtu = 1500;
 800ecc4:	f240 55dc 	movw	r5, #1500	; 0x5dc
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ecc8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800eccc:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ecd0:	781e      	ldrb	r6, [r3, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ecd2:	2101      	movs	r1, #1
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ecd4:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ecd8:	785e      	ldrb	r6, [r3, #1]
 800ecda:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ecde:	789e      	ldrb	r6, [r3, #2]
 800ece0:	f884 6033 	strb.w	r6, [r4, #51]	; 0x33
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ece4:	78de      	ldrb	r6, [r3, #3]
  osSemaphoreDef(SEM);
 800ece6:	f840 7d20 	str.w	r7, [r0, #-32]!
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ecea:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ecee:	791e      	ldrb	r6, [r3, #4]
 800ecf0:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ecf4:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ecf6:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ecfa:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  netif->mtu = 1500;
 800ecfe:	85e5      	strh	r5, [r4, #46]	; 0x2e
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ed00:	ad05      	add	r5, sp, #20
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ed02:	f000 ff6b 	bl	800fbdc <osSemaphoreCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ed06:	4e20      	ldr	r6, [pc, #128]	; (800ed88 <ethernetif_init+0x174>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ed08:	4b20      	ldr	r3, [pc, #128]	; (800ed8c <ethernetif_init+0x178>)
 800ed0a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ed0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ed0e:	6836      	ldr	r6, [r6, #0]
 800ed10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  osThreadCreate (osThread(EthIf), netif);
 800ed12:	4621      	mov	r1, r4
 800ed14:	a805      	add	r0, sp, #20
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ed16:	602e      	str	r6, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800ed18:	f000 fed6 	bl	800fac8 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800ed1c:	4811      	ldr	r0, [pc, #68]	; (800ed64 <ethernetif_init+0x150>)
 800ed1e:	f7f8 f959 	bl	8006fd4 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800ed22:	aa01      	add	r2, sp, #4
 800ed24:	211d      	movs	r1, #29
 800ed26:	480f      	ldr	r0, [pc, #60]	; (800ed64 <ethernetif_init+0x150>)
 800ed28:	f7f7 ff6e 	bl	8006c08 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800ed2c:	9b01      	ldr	r3, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ed2e:	211d      	movs	r1, #29
 800ed30:	480c      	ldr	r0, [pc, #48]	; (800ed64 <ethernetif_init+0x150>)
  regvalue |= (PHY_ISFR_INT4);
 800ed32:	f043 030b 	orr.w	r3, r3, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ed36:	461a      	mov	r2, r3
  regvalue |= (PHY_ISFR_INT4);
 800ed38:	9301      	str	r3, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ed3a:	f7f7 ffad 	bl	8006c98 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800ed3e:	aa01      	add	r2, sp, #4
 800ed40:	211d      	movs	r1, #29
 800ed42:	4808      	ldr	r0, [pc, #32]	; (800ed64 <ethernetif_init+0x150>)
 800ed44:	f7f7 ff60 	bl	8006c08 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800ed48:	4638      	mov	r0, r7
 800ed4a:	b00b      	add	sp, #44	; 0x2c
 800ed4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ed50:	4b0f      	ldr	r3, [pc, #60]	; (800ed90 <ethernetif_init+0x17c>)
 800ed52:	f240 222e 	movw	r2, #558	; 0x22e
 800ed56:	490f      	ldr	r1, [pc, #60]	; (800ed94 <ethernetif_init+0x180>)
 800ed58:	480f      	ldr	r0, [pc, #60]	; (800ed98 <ethernetif_init+0x184>)
 800ed5a:	f00f fb45 	bl	801e3e8 <iprintf>
 800ed5e:	e760      	b.n	800ec22 <ethernetif_init+0xe>
 800ed60:	00e18000 	.word	0x00e18000
 800ed64:	2002418c 	.word	0x2002418c
 800ed68:	40028000 	.word	0x40028000
 800ed6c:	1ff0f424 	.word	0x1ff0f424
 800ed70:	1ff0f428 	.word	0x1ff0f428
 800ed74:	0800e931 	.word	0x0800e931
 800ed78:	200241d4 	.word	0x200241d4
 800ed7c:	200228bc 	.word	0x200228bc
 800ed80:	2002293c 	.word	0x2002293c
 800ed84:	2002410c 	.word	0x2002410c
 800ed88:	080217e0 	.word	0x080217e0
 800ed8c:	200008d4 	.word	0x200008d4
 800ed90:	080235ec 	.word	0x080235ec
 800ed94:	08023608 	.word	0x08023608
 800ed98:	08023618 	.word	0x08023618
 800ed9c:	1ff0f420 	.word	0x1ff0f420
 800eda0:	0801b799 	.word	0x0801b799

0800eda4 <sys_now>:
 800eda4:	f7f5 be02 	b.w	80049ac <HAL_GetTick>

0800eda8 <ethernetif_set_link>:
  * @brief  This function sets the netif link status.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)
{
 800eda8:	b570      	push	{r4, r5, r6, lr}
 800edaa:	b082      	sub	sp, #8
  uint32_t regvalue = 0;
 800edac:	2300      	movs	r3, #0
{
 800edae:	4606      	mov	r6, r0
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800edb0:	4d11      	ldr	r5, [pc, #68]	; (800edf8 <ethernetif_set_link+0x50>)
  uint32_t regvalue = 0;
 800edb2:	ac02      	add	r4, sp, #8
 800edb4:	f844 3d04 	str.w	r3, [r4, #-4]!
 800edb8:	e005      	b.n	800edc6 <ethernetif_set_link+0x1e>

    regvalue &= PHY_LINKED_STATUS;

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800edba:	b9cb      	cbnz	r3, 800edf0 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800edbc:	0753      	lsls	r3, r2, #29
 800edbe:	d414      	bmi.n	800edea <ethernetif_set_link+0x42>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800edc0:	20c8      	movs	r0, #200	; 0xc8
 800edc2:	f000 fe99 	bl	800faf8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800edc6:	4622      	mov	r2, r4
 800edc8:	2101      	movs	r1, #1
 800edca:	4628      	mov	r0, r5
 800edcc:	f7f7 ff1c 	bl	8006c08 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800edd0:	6830      	ldr	r0, [r6, #0]
    regvalue &= PHY_LINKED_STATUS;
 800edd2:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800edd4:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    regvalue &= PHY_LINKED_STATUS;
 800edd8:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800eddc:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 800edde:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800ede0:	d5eb      	bpl.n	800edba <ethernetif_set_link+0x12>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800ede2:	0752      	lsls	r2, r2, #29
 800ede4:	d5ec      	bpl.n	800edc0 <ethernetif_set_link+0x18>
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1ea      	bne.n	800edc0 <ethernetif_set_link+0x18>
      netif_set_link_down(link_arg->netif);
 800edea:	f005 fcdb 	bl	80147a4 <netif_set_link_down>
 800edee:	e7e7      	b.n	800edc0 <ethernetif_set_link+0x18>
      netif_set_link_up(link_arg->netif);
 800edf0:	f005 fcba 	bl	8014768 <netif_set_link_up>
 800edf4:	e7e4      	b.n	800edc0 <ethernetif_set_link+0x18>
 800edf6:	bf00      	nop
 800edf8:	2002418c 	.word	0x2002418c

0800edfc <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop

0800ee00 <ethernetif_update_config>:
{
 800ee00:	b570      	push	{r4, r5, r6, lr}
  if(netif_is_link_up(netif))
 800ee02:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
{
 800ee06:	b082      	sub	sp, #8
  __IO uint32_t tickstart = 0;
 800ee08:	2100      	movs	r1, #0
{
 800ee0a:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 800ee0c:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 800ee0e:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 800ee10:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 800ee12:	d539      	bpl.n	800ee88 <ethernetif_update_config+0x88>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800ee14:	4c32      	ldr	r4, [pc, #200]	; (800eee0 <ethernetif_update_config+0xe0>)
 800ee16:	6863      	ldr	r3, [r4, #4]
 800ee18:	b9e3      	cbnz	r3, 800ee54 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 800ee1a:	68a3      	ldr	r3, [r4, #8]
 800ee1c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800ee20:	d141      	bne.n	800eea6 <ethernetif_update_config+0xa6>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800ee22:	68e3      	ldr	r3, [r4, #12]
 800ee24:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800ee28:	d136      	bne.n	800ee98 <ethernetif_update_config+0x98>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800ee2a:	68a2      	ldr	r2, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800ee2c:	08db      	lsrs	r3, r3, #3
 800ee2e:	2100      	movs	r1, #0
 800ee30:	482b      	ldr	r0, [pc, #172]	; (800eee0 <ethernetif_update_config+0xe0>)
 800ee32:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800ee36:	b292      	uxth	r2, r2
 800ee38:	f7f7 ff2e 	bl	8006c98 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	4828      	ldr	r0, [pc, #160]	; (800eee0 <ethernetif_update_config+0xe0>)
 800ee40:	f7f8 f948 	bl	80070d4 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 800ee44:	4826      	ldr	r0, [pc, #152]	; (800eee0 <ethernetif_update_config+0xe0>)
 800ee46:	f7f8 f8c5 	bl	8006fd4 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f7ff ffd6 	bl	800edfc <ethernetif_notify_conn_changed>
}
 800ee50:	b002      	add	sp, #8
 800ee52:	bd70      	pop	{r4, r5, r6, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800ee54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f7f7 ff1d 	bl	8006c98 <HAL_ETH_WritePHYRegister>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800ee5e:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 800ee60:	f7f5 fda4 	bl	80049ac <HAL_GetTick>
 800ee64:	9000      	str	r0, [sp, #0]
 800ee66:	e002      	b.n	800ee6e <ethernetif_update_config+0x6e>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800ee68:	9b01      	ldr	r3, [sp, #4]
 800ee6a:	069a      	lsls	r2, r3, #26
 800ee6c:	d425      	bmi.n	800eeba <ethernetif_update_config+0xba>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800ee6e:	aa01      	add	r2, sp, #4
 800ee70:	2101      	movs	r1, #1
 800ee72:	4630      	mov	r0, r6
 800ee74:	f7f7 fec8 	bl	8006c08 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 800ee78:	f7f5 fd98 	bl	80049ac <HAL_GetTick>
 800ee7c:	9b00      	ldr	r3, [sp, #0]
 800ee7e:	1ac0      	subs	r0, r0, r3
 800ee80:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ee84:	d9f0      	bls.n	800ee68 <ethernetif_update_config+0x68>
    error :
 800ee86:	e7c8      	b.n	800ee1a <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 800ee88:	4815      	ldr	r0, [pc, #84]	; (800eee0 <ethernetif_update_config+0xe0>)
 800ee8a:	f7f8 f8e3 	bl	8007054 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f7ff ffb4 	bl	800edfc <ethernetif_notify_conn_changed>
}
 800ee94:	b002      	add	sp, #8
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800ee98:	f240 21d6 	movw	r1, #726	; 0x2d6
 800ee9c:	4811      	ldr	r0, [pc, #68]	; (800eee4 <ethernetif_update_config+0xe4>)
 800ee9e:	f7f3 fbd7 	bl	8002650 <assert_failed>
 800eea2:	68e3      	ldr	r3, [r4, #12]
 800eea4:	e7c1      	b.n	800ee2a <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 800eea6:	f240 21d5 	movw	r1, #725	; 0x2d5
 800eeaa:	480e      	ldr	r0, [pc, #56]	; (800eee4 <ethernetif_update_config+0xe4>)
 800eeac:	f7f3 fbd0 	bl	8002650 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800eeb0:	68e3      	ldr	r3, [r4, #12]
 800eeb2:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800eeb6:	d0b8      	beq.n	800ee2a <ethernetif_update_config+0x2a>
 800eeb8:	e7ee      	b.n	800ee98 <ethernetif_update_config+0x98>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800eeba:	aa01      	add	r2, sp, #4
 800eebc:	211f      	movs	r1, #31
 800eebe:	4808      	ldr	r0, [pc, #32]	; (800eee0 <ethernetif_update_config+0xe0>)
 800eec0:	f7f7 fea2 	bl	8006c08 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800eec4:	9b01      	ldr	r3, [sp, #4]
 800eec6:	f013 0210 	ands.w	r2, r3, #16
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800eeca:	bf18      	it	ne
 800eecc:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 800eed0:	075b      	lsls	r3, r3, #29
        heth.Init.Speed = ETH_SPEED_10M;
 800eed2:	bf4c      	ite	mi
 800eed4:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 800eed6:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800eeda:	60e2      	str	r2, [r4, #12]
        heth.Init.Speed = ETH_SPEED_100M;
 800eedc:	60a3      	str	r3, [r4, #8]
 800eede:	e7ad      	b.n	800ee3c <ethernetif_update_config+0x3c>
 800eee0:	2002418c 	.word	0x2002418c
 800eee4:	080235ec 	.word	0x080235ec

0800eee8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800eee8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800eeec:	b183      	cbz	r3, 800ef10 <USBD_CDC_EP0_RxReady+0x28>
{
 800eeee:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800eef0:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800eef4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800eef8:	28ff      	cmp	r0, #255	; 0xff
 800eefa:	d007      	beq.n	800ef0c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	4621      	mov	r1, r4
 800ef00:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800ef04:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800ef06:	23ff      	movs	r3, #255	; 0xff
 800ef08:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	bd10      	pop	{r4, pc}
 800ef10:	2000      	movs	r0, #0
 800ef12:	4770      	bx	lr

0800ef14 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800ef14:	2343      	movs	r3, #67	; 0x43
 800ef16:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800ef18:	4800      	ldr	r0, [pc, #0]	; (800ef1c <USBD_CDC_GetFSCfgDesc+0x8>)
 800ef1a:	4770      	bx	lr
 800ef1c:	20000364 	.word	0x20000364

0800ef20 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800ef20:	2343      	movs	r3, #67	; 0x43
 800ef22:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800ef24:	4800      	ldr	r0, [pc, #0]	; (800ef28 <USBD_CDC_GetHSCfgDesc+0x8>)
 800ef26:	4770      	bx	lr
 800ef28:	200003a8 	.word	0x200003a8

0800ef2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800ef2c:	2343      	movs	r3, #67	; 0x43
 800ef2e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800ef30:	4800      	ldr	r0, [pc, #0]	; (800ef34 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800ef32:	4770      	bx	lr
 800ef34:	200003f8 	.word	0x200003f8

0800ef38 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800ef38:	230a      	movs	r3, #10
 800ef3a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800ef3c:	4800      	ldr	r0, [pc, #0]	; (800ef40 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800ef3e:	4770      	bx	lr
 800ef40:	200003ec 	.word	0x200003ec

0800ef44 <USBD_CDC_DataOut>:
{
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ef48:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800ef4c:	f00e f940 	bl	801d1d0 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800ef50:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800ef54:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800ef58:	b14b      	cbz	r3, 800ef6e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ef5a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800ef5e:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800ef62:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	4798      	blx	r3
    return USBD_OK;
 800ef6a:	2000      	movs	r0, #0
}
 800ef6c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800ef6e:	2002      	movs	r0, #2
}
 800ef70:	bd38      	pop	{r3, r4, r5, pc}
 800ef72:	bf00      	nop

0800ef74 <USBD_CDC_DataIn>:
{
 800ef74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800ef76:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800ef7a:	b1e6      	cbz	r6, 800efb6 <USBD_CDC_DataIn+0x42>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ef7c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800ef80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ef84:	69d7      	ldr	r7, [r2, #28]
 800ef86:	b15f      	cbz	r7, 800efa0 <USBD_CDC_DataIn+0x2c>
 800ef88:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800ef8c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800ef90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef96:	fbb7 f4f3 	udiv	r4, r7, r3
 800ef9a:	fb03 7414 	mls	r4, r3, r4, r7
 800ef9e:	b11c      	cbz	r4, 800efa8 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800efa0:	2000      	movs	r0, #0
 800efa2:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
}
 800efa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800efa8:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800efaa:	4623      	mov	r3, r4
 800efac:	4622      	mov	r2, r4
 800efae:	f00e f8f3 	bl	801d198 <USBD_LL_Transmit>
    return USBD_OK;
 800efb2:	4620      	mov	r0, r4
}
 800efb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800efb6:	2002      	movs	r0, #2
}
 800efb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efba:	bf00      	nop

0800efbc <USBD_CDC_Setup>:
{
 800efbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efc0:	780b      	ldrb	r3, [r1, #0]
{
 800efc2:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800efc4:	2700      	movs	r7, #0
{
 800efc6:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efc8:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 800efcc:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800efce:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800efd2:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800efd6:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efda:	d00f      	beq.n	800effc <USBD_CDC_Setup+0x40>
 800efdc:	2c20      	cmp	r4, #32
 800efde:	d117      	bne.n	800f010 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 800efe0:	88cc      	ldrh	r4, [r1, #6]
 800efe2:	f891 c001 	ldrb.w	ip, [r1, #1]
 800efe6:	bb64      	cbnz	r4, 800f042 <USBD_CDC_Setup+0x86>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800efe8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800efec:	4622      	mov	r2, r4
 800efee:	4660      	mov	r0, ip
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 800eff4:	4620      	mov	r0, r4
}
 800eff6:	b002      	add	sp, #8
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 800effc:	784f      	ldrb	r7, [r1, #1]
 800effe:	2f0a      	cmp	r7, #10
 800f000:	d014      	beq.n	800f02c <USBD_CDC_Setup+0x70>
 800f002:	2f0b      	cmp	r7, #11
 800f004:	d00c      	beq.n	800f020 <USBD_CDC_Setup+0x64>
 800f006:	b91f      	cbnz	r7, 800f010 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f008:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f00c:	2b03      	cmp	r3, #3
 800f00e:	d028      	beq.n	800f062 <USBD_CDC_Setup+0xa6>
      USBD_CtlError (pdev, req);
 800f010:	4630      	mov	r0, r6
 800f012:	4629      	mov	r1, r5
 800f014:	f000 fcac 	bl	800f970 <USBD_CtlError>
      ret = USBD_FAIL;
 800f018:	2002      	movs	r0, #2
}
 800f01a:	b002      	add	sp, #8
 800f01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f020:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f024:	2b03      	cmp	r3, #3
 800f026:	d1f3      	bne.n	800f010 <USBD_CDC_Setup+0x54>
  uint8_t ret = USBD_OK;
 800f028:	4620      	mov	r0, r4
 800f02a:	e7f6      	b.n	800f01a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f02c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f030:	2b03      	cmp	r3, #3
 800f032:	d1ed      	bne.n	800f010 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800f034:	2201      	movs	r2, #1
 800f036:	f10d 0105 	add.w	r1, sp, #5
 800f03a:	f000 fccb 	bl	800f9d4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800f03e:	4620      	mov	r0, r4
 800f040:	e7eb      	b.n	800f01a <USBD_CDC_Setup+0x5e>
      if (req->bmRequest & 0x80U)
 800f042:	061b      	lsls	r3, r3, #24
 800f044:	d514      	bpl.n	800f070 <USBD_CDC_Setup+0xb4>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f046:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800f04a:	4622      	mov	r2, r4
 800f04c:	4660      	mov	r0, ip
 800f04e:	4641      	mov	r1, r8
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f054:	88ea      	ldrh	r2, [r5, #6]
 800f056:	4641      	mov	r1, r8
 800f058:	4630      	mov	r0, r6
 800f05a:	f000 fcbb 	bl	800f9d4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800f05e:	4638      	mov	r0, r7
 800f060:	e7db      	b.n	800f01a <USBD_CDC_Setup+0x5e>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800f062:	2202      	movs	r2, #2
 800f064:	f10d 0106 	add.w	r1, sp, #6
 800f068:	f000 fcb4 	bl	800f9d4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800f06c:	4638      	mov	r0, r7
 800f06e:	e7d4      	b.n	800f01a <USBD_CDC_Setup+0x5e>
        hcdc->CmdOpCode = req->bRequest;
 800f070:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f074:	4622      	mov	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 800f076:	f888 4201 	strb.w	r4, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f07a:	4641      	mov	r1, r8
 800f07c:	f000 fcc0 	bl	800fa00 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800f080:	4638      	mov	r0, r7
 800f082:	e7ca      	b.n	800f01a <USBD_CDC_Setup+0x5e>

0800f084 <USBD_CDC_DeInit>:
{
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f088:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f08a:	2181      	movs	r1, #129	; 0x81
 800f08c:	f00e f838 	bl	801d100 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f090:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f092:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f094:	4620      	mov	r0, r4
 800f096:	f00e f833 	bl	801d100 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f09a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f09e:	4620      	mov	r0, r4
 800f0a0:	2182      	movs	r1, #130	; 0x82
 800f0a2:	f00e f82d 	bl	801d100 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800f0a6:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f0aa:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800f0ac:	b14b      	cbz	r3, 800f0c2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f0ae:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800f0b6:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800f0ba:	f00e f9f3 	bl	801d4a4 <free>
    pdev->pClassData = NULL;
 800f0be:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800f0c2:	2000      	movs	r0, #0
 800f0c4:	bd38      	pop	{r3, r4, r5, pc}
 800f0c6:	bf00      	nop

0800f0c8 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f0c8:	7c03      	ldrb	r3, [r0, #16]
{
 800f0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ce:	4604      	mov	r4, r0
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f0d0:	2501      	movs	r5, #1
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f0d2:	bbbb      	cbnz	r3, 800f144 <USBD_CDC_Init+0x7c>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f0d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0d8:	2202      	movs	r2, #2
 800f0da:	2181      	movs	r1, #129	; 0x81
 800f0dc:	f00d fffe 	bl	801d0dc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f0e0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f0e2:	4629      	mov	r1, r5
 800f0e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0e8:	2202      	movs	r2, #2
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f00d fff6 	bl	801d0dc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f0f0:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f0f4:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f0f6:	2308      	movs	r3, #8
 800f0f8:	2203      	movs	r2, #3
 800f0fa:	2182      	movs	r1, #130	; 0x82
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f00d ffed 	bl	801d0dc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f102:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800f104:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f108:	f00e f9c4 	bl	801d494 <malloc>
 800f10c:	4605      	mov	r5, r0
 800f10e:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800f112:	b368      	cbz	r0, 800f170 <USBD_CDC_Init+0xa8>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f114:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    hcdc->TxState = 0U;
 800f118:	2600      	movs	r6, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f11e:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 800f122:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f126:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 800f128:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f12c:	4620      	mov	r0, r4
 800f12e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f132:	f1b8 0f00 	cmp.w	r8, #0
 800f136:	d014      	beq.n	800f162 <USBD_CDC_Init+0x9a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f138:	2340      	movs	r3, #64	; 0x40
 800f13a:	f00e f83b 	bl	801d1b4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800f13e:	4630      	mov	r0, r6
}
 800f140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f144:	2340      	movs	r3, #64	; 0x40
 800f146:	2202      	movs	r2, #2
 800f148:	2181      	movs	r1, #129	; 0x81
 800f14a:	f00d ffc7 	bl	801d0dc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f14e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f150:	4629      	mov	r1, r5
 800f152:	2340      	movs	r3, #64	; 0x40
 800f154:	2202      	movs	r2, #2
 800f156:	4620      	mov	r0, r4
 800f158:	f00d ffc0 	bl	801d0dc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f15c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800f160:	e7c8      	b.n	800f0f4 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f162:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f166:	f00e f825 	bl	801d1b4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800f16a:	4640      	mov	r0, r8
}
 800f16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800f170:	4638      	mov	r0, r7
 800f172:	e7e5      	b.n	800f140 <USBD_CDC_Init+0x78>

0800f174 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800f174:	b119      	cbz	r1, 800f17e <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800f176:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 800f17a:	2000      	movs	r0, #0
 800f17c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800f17e:	2002      	movs	r0, #2
  }

  return ret;
}
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop

0800f184 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f184:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800f188:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800f18a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f18e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800f192:	4770      	bx	lr

0800f194 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800f194:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 800f198:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800f19a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800f19e:	4770      	bx	lr

0800f1a0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f1a0:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800f1a4:	b18a      	cbz	r2, 800f1ca <USBD_CDC_ReceivePacket+0x2a>
 800f1a6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{
 800f1aa:	b510      	push	{r4, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f1ac:	7c04      	ldrb	r4, [r0, #16]
 800f1ae:	b12c      	cbz	r4, 800f1bc <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f1b0:	2340      	movs	r3, #64	; 0x40
 800f1b2:	2101      	movs	r1, #1
 800f1b4:	f00d fffe 	bl	801d1b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800f1b8:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800f1ba:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800f1bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1c0:	2101      	movs	r1, #1
 800f1c2:	f00d fff7 	bl	801d1b4 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800f1c6:	4620      	mov	r0, r4
}
 800f1c8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800f1ca:	2002      	movs	r0, #2
}
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop

0800f1d0 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800f1d0:	b188      	cbz	r0, 800f1f6 <USBD_Init+0x26>
{
 800f1d2:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800f1d4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f1d8:	b113      	cbz	r3, 800f1e0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800f1e0:	b109      	cbz	r1, 800f1e6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800f1e2:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800f1e6:	2101      	movs	r1, #1
  pdev->id = id;
 800f1e8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800f1ea:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f1ee:	f00d ff35 	bl	801d05c <USBD_LL_Init>

  return USBD_OK;
 800f1f2:	2000      	movs	r0, #0
}
 800f1f4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800f1f6:	2002      	movs	r0, #2
}
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop

0800f1fc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800f1fc:	b119      	cbz	r1, 800f206 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f1fe:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800f202:	2000      	movs	r0, #0
 800f204:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f206:	2002      	movs	r0, #2
  }

  return status;
}
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop

0800f20c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800f20c:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f20e:	f00d ff57 	bl	801d0c0 <USBD_LL_Start>

  return USBD_OK;
}
 800f212:	2000      	movs	r0, #0
 800f214:	bd08      	pop	{r3, pc}
 800f216:	bf00      	nop

0800f218 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f218:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800f21a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f21e:	b11b      	cbz	r3, 800f228 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4798      	blx	r3
 800f224:	b900      	cbnz	r0, 800f228 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800f226:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800f228:	2002      	movs	r0, #2
}
 800f22a:	bd08      	pop	{r3, pc}

0800f22c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f22c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f22e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	4798      	blx	r3
  return USBD_OK;
}
 800f236:	2000      	movs	r0, #0
 800f238:	bd08      	pop	{r3, pc}
 800f23a:	bf00      	nop

0800f23c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f23c:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f23e:	f500 7520 	add.w	r5, r0, #640	; 0x280
{
 800f242:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f244:	4628      	mov	r0, r5
 800f246:	f000 fb7f 	bl	800f948 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800f24a:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 800f24e:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800f250:	f8b4 2286 	ldrh.w	r2, [r4, #646]	; 0x286
  switch (pdev->request.bmRequest & 0x1FU)
 800f254:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800f258:	f8c4 026c 	str.w	r0, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800f25c:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 800f25e:	f8c4 2270 	str.w	r2, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 800f262:	d015      	beq.n	800f290 <USBD_LL_SetupStage+0x54>
 800f264:	d30e      	bcc.n	800f284 <USBD_LL_SetupStage+0x48>
 800f266:	2b02      	cmp	r3, #2
 800f268:	d006      	beq.n	800f278 <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f26a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800f26e:	4620      	mov	r0, r4
 800f270:	f00d ff54 	bl	801d11c <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 800f274:	2000      	movs	r0, #0
 800f276:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800f278:	4629      	mov	r1, r5
 800f27a:	4620      	mov	r0, r4
 800f27c:	f000 facc 	bl	800f818 <USBD_StdEPReq>
}
 800f280:	2000      	movs	r0, #0
 800f282:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 800f284:	4629      	mov	r1, r5
 800f286:	4620      	mov	r0, r4
 800f288:	f000 f900 	bl	800f48c <USBD_StdDevReq>
}
 800f28c:	2000      	movs	r0, #0
 800f28e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800f290:	4629      	mov	r1, r5
 800f292:	4620      	mov	r0, r4
 800f294:	f000 fa94 	bl	800f7c0 <USBD_StdItfReq>
}
 800f298:	2000      	movs	r0, #0
 800f29a:	bd38      	pop	{r3, r4, r5, pc}

0800f29c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800f2a0:	b941      	cbnz	r1, 800f2b4 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f2a2:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800f2a6:	2b03      	cmp	r3, #3
 800f2a8:	d00f      	beq.n	800f2ca <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f2aa:	2b05      	cmp	r3, #5
 800f2ac:	460c      	mov	r4, r1
 800f2ae:	d02e      	beq.n	800f30e <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800f2b0:	2000      	movs	r0, #0
}
 800f2b2:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 800f2b4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f2b8:	699b      	ldr	r3, [r3, #24]
 800f2ba:	b1c3      	cbz	r3, 800f2ee <USBD_LL_DataOutStage+0x52>
 800f2bc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800f2c0:	2a03      	cmp	r2, #3
 800f2c2:	d114      	bne.n	800f2ee <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 800f2c4:	4798      	blx	r3
  return USBD_OK;
 800f2c6:	2000      	movs	r0, #0
}
 800f2c8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ca:	4616      	mov	r6, r2
      if(pep->rem_length > pep->maxpacket)
 800f2cc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800f2d0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d90c      	bls.n	800f2f2 <USBD_LL_DataOutStage+0x56>
        pep->rem_length -=  pep->maxpacket;
 800f2d8:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx (pdev,
 800f2da:	4631      	mov	r1, r6
 800f2dc:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800f2de:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800f2e2:	bf8c      	ite	hi
 800f2e4:	b29a      	uxthhi	r2, r3
 800f2e6:	b292      	uxthls	r2, r2
 800f2e8:	f000 fb9a 	bl	800fa20 <USBD_CtlContinueRx>
 800f2ec:	e7e0      	b.n	800f2b0 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 800f2ee:	2002      	movs	r0, #2
}
 800f2f0:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f2f2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	b123      	cbz	r3, 800f304 <USBD_LL_DataOutStage+0x68>
 800f2fa:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800f2fe:	2a03      	cmp	r2, #3
 800f300:	d100      	bne.n	800f304 <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 800f302:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800f304:	4628      	mov	r0, r5
 800f306:	f000 fb93 	bl	800fa30 <USBD_CtlSendStatus>
  return USBD_OK;
 800f30a:	2000      	movs	r0, #0
}
 800f30c:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 800f30e:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800f312:	f00d ff03 	bl	801d11c <USBD_LL_StallEP>
  return USBD_OK;
 800f316:	4620      	mov	r0, r4
}
 800f318:	bd70      	pop	{r4, r5, r6, pc}
 800f31a:	bf00      	nop

0800f31c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800f320:	b961      	cbnz	r1, 800f33c <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800f322:	f8d0 526c 	ldr.w	r5, [r0, #620]	; 0x26c
 800f326:	2d02      	cmp	r5, #2
 800f328:	d016      	beq.n	800f358 <USBD_LL_DataInStage+0x3c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f32a:	f035 0304 	bics.w	r3, r5, #4
 800f32e:	d034      	beq.n	800f39a <USBD_LL_DataInStage+0x7e>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f330:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800f334:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 800f336:	2b01      	cmp	r3, #1
 800f338:	d00b      	beq.n	800f352 <USBD_LL_DataInStage+0x36>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800f33a:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 800f33c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f340:	695b      	ldr	r3, [r3, #20]
 800f342:	b343      	cbz	r3, 800f396 <USBD_LL_DataInStage+0x7a>
 800f344:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800f348:	2a03      	cmp	r2, #3
 800f34a:	d124      	bne.n	800f396 <USBD_LL_DataInStage+0x7a>
    pdev->pClass->DataIn(pdev, epnum);
 800f34c:	4798      	blx	r3
  return USBD_OK;
 800f34e:	2000      	movs	r0, #0
}
 800f350:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 800f352:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
}
 800f356:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 800f358:	e9d0 5308 	ldrd	r5, r3, [r0, #32]
 800f35c:	460e      	mov	r6, r1
 800f35e:	429d      	cmp	r5, r3
 800f360:	d81f      	bhi.n	800f3a2 <USBD_LL_DataInStage+0x86>
        if((pep->total_length % pep->maxpacket == 0U) &&
 800f362:	69c5      	ldr	r5, [r0, #28]
 800f364:	fbb5 f2f3 	udiv	r2, r5, r3
 800f368:	fb03 5212 	mls	r2, r3, r2, r5
 800f36c:	b90a      	cbnz	r2, 800f372 <USBD_LL_DataInStage+0x56>
 800f36e:	42ab      	cmp	r3, r5
 800f370:	d924      	bls.n	800f3bc <USBD_LL_DataInStage+0xa0>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f372:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	b12b      	cbz	r3, 800f386 <USBD_LL_DataInStage+0x6a>
 800f37a:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800f37e:	2a03      	cmp	r2, #3
 800f380:	d101      	bne.n	800f386 <USBD_LL_DataInStage+0x6a>
            pdev->pClass->EP0_TxSent(pdev);
 800f382:	4620      	mov	r0, r4
 800f384:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800f386:	2180      	movs	r1, #128	; 0x80
 800f388:	4620      	mov	r0, r4
 800f38a:	f00d fec7 	bl	801d11c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f38e:	4620      	mov	r0, r4
 800f390:	f000 fb5a 	bl	800fa48 <USBD_CtlReceiveStatus>
 800f394:	e7cc      	b.n	800f330 <USBD_LL_DataInStage+0x14>
    return USBD_FAIL;
 800f396:	2002      	movs	r0, #2
}
 800f398:	bd70      	pop	{r4, r5, r6, pc}
        USBD_LL_StallEP(pdev, 0x80U);
 800f39a:	2180      	movs	r1, #128	; 0x80
 800f39c:	f00d febe 	bl	801d11c <USBD_LL_StallEP>
 800f3a0:	e7c6      	b.n	800f330 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800f3a2:	1aeb      	subs	r3, r5, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800f3a4:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800f3a6:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	f000 fb21 	bl	800f9f0 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f3ae:	4633      	mov	r3, r6
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	4631      	mov	r1, r6
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f00d fefd 	bl	801d1b4 <USBD_LL_PrepareReceive>
 800f3ba:	e7b9      	b.n	800f330 <USBD_LL_DataInStage+0x14>
           (pep->total_length >= pep->maxpacket) &&
 800f3bc:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800f3c0:	429d      	cmp	r5, r3
 800f3c2:	d2d6      	bcs.n	800f372 <USBD_LL_DataInStage+0x56>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f3c4:	460a      	mov	r2, r1
 800f3c6:	f000 fb13 	bl	800f9f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f3ca:	f8c4 6270 	str.w	r6, [r4, #624]	; 0x270
 800f3ce:	e7ee      	b.n	800f3ae <USBD_LL_DataInStage+0x92>

0800f3d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800f3d0:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3d2:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f3d4:	2640      	movs	r6, #64	; 0x40
{
 800f3d6:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f3d8:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3da:	4611      	mov	r1, r2
 800f3dc:	4633      	mov	r3, r6
 800f3de:	f00d fe7d 	bl	801d0dc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3e2:	4633      	mov	r3, r6
 800f3e4:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f3e6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f3ea:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	f00d fe73 	bl	801d0dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800f3f6:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800f3f8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f3fc:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f3fe:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f400:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800f404:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800f408:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800f40a:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800f40e:	b123      	cbz	r3, 800f41a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f410:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f414:	4620      	mov	r0, r4
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	4798      	blx	r3
  }

  return USBD_OK;
}
 800f41a:	2000      	movs	r0, #0
 800f41c:	bd70      	pop	{r4, r5, r6, pc}
 800f41e:	bf00      	nop

0800f420 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800f420:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800f422:	2000      	movs	r0, #0
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop

0800f428 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800f428:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f42a:	2104      	movs	r1, #4
  return USBD_OK;
}
 800f42c:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 800f42e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f432:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 800f436:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 800f43a:	4770      	bx	lr

0800f43c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800f43c:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
  return USBD_OK;
}
 800f43e:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800f440:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800f444:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop

0800f44c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800f44c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800f450:	2a03      	cmp	r2, #3
 800f452:	d001      	beq.n	800f458 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800f454:	2000      	movs	r0, #0
 800f456:	4770      	bx	lr
{
 800f458:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800f45a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f45e:	69db      	ldr	r3, [r3, #28]
 800f460:	b103      	cbz	r3, 800f464 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800f462:	4798      	blx	r3
}
 800f464:	2000      	movs	r0, #0
 800f466:	bd08      	pop	{r3, pc}

0800f468 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800f468:	2000      	movs	r0, #0
 800f46a:	4770      	bx	lr

0800f46c <USBD_LL_IsoOUTIncomplete>:
 800f46c:	2000      	movs	r0, #0
 800f46e:	4770      	bx	lr

0800f470 <USBD_LL_DevConnected>:
 800f470:	2000      	movs	r0, #0
 800f472:	4770      	bx	lr

0800f474 <USBD_LL_DevDisconnected>:
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f474:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f478:	2101      	movs	r1, #1
{
 800f47a:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f47c:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f480:	7901      	ldrb	r1, [r0, #4]
 800f482:	6853      	ldr	r3, [r2, #4]
 800f484:	4798      	blx	r3

  return USBD_OK;
}
 800f486:	2000      	movs	r0, #0
 800f488:	bd08      	pop	{r3, pc}
 800f48a:	bf00      	nop

0800f48c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f48c:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f48e:	780b      	ldrb	r3, [r1, #0]
{
 800f490:	b083      	sub	sp, #12
 800f492:	460d      	mov	r5, r1
 800f494:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f496:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f49a:	2b20      	cmp	r3, #32
 800f49c:	d028      	beq.n	800f4f0 <USBD_StdDevReq+0x64>
 800f49e:	2b40      	cmp	r3, #64	; 0x40
 800f4a0:	d026      	beq.n	800f4f0 <USBD_StdDevReq+0x64>
 800f4a2:	b153      	cbz	r3, 800f4ba <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800f4a4:	2180      	movs	r1, #128	; 0x80
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f00d fe38 	bl	801d11c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	f00d fe34 	bl	801d11c <USBD_LL_StallEP>
}
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	b003      	add	sp, #12
 800f4b8:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800f4ba:	784b      	ldrb	r3, [r1, #1]
 800f4bc:	2b09      	cmp	r3, #9
 800f4be:	d8f1      	bhi.n	800f4a4 <USBD_StdDevReq+0x18>
 800f4c0:	a201      	add	r2, pc, #4	; (adr r2, 800f4c8 <USBD_StdDevReq+0x3c>)
 800f4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c6:	bf00      	nop
 800f4c8:	0800f545 	.word	0x0800f545
 800f4cc:	0800f571 	.word	0x0800f571
 800f4d0:	0800f4a5 	.word	0x0800f4a5
 800f4d4:	0800f58d 	.word	0x0800f58d
 800f4d8:	0800f4a5 	.word	0x0800f4a5
 800f4dc:	0800f599 	.word	0x0800f599
 800f4e0:	0800f5d7 	.word	0x0800f5d7
 800f4e4:	0800f4a5 	.word	0x0800f4a5
 800f4e8:	0800f625 	.word	0x0800f625
 800f4ec:	0800f503 	.word	0x0800f503
    pdev->pClass->Setup(pdev, req);
 800f4f0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	4798      	blx	r3
}
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	b003      	add	sp, #12
 800f500:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 800f502:	7889      	ldrb	r1, [r1, #2]
 800f504:	4dad      	ldr	r5, [pc, #692]	; (800f7bc <USBD_StdDevReq+0x330>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f506:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800f508:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f50a:	d8cb      	bhi.n	800f4a4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800f50c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f510:	2b02      	cmp	r3, #2
 800f512:	f000 8128 	beq.w	800f766 <USBD_StdDevReq+0x2da>
 800f516:	2b03      	cmp	r3, #3
 800f518:	f040 8119 	bne.w	800f74e <USBD_StdDevReq+0x2c2>
      if (cfgidx == 0U)
 800f51c:	2900      	cmp	r1, #0
 800f51e:	f000 813e 	beq.w	800f79e <USBD_StdDevReq+0x312>
      else if (cfgidx != pdev->dev_config)
 800f522:	6841      	ldr	r1, [r0, #4]
 800f524:	2901      	cmp	r1, #1
 800f526:	d009      	beq.n	800f53c <USBD_StdDevReq+0xb0>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f528:	b2c9      	uxtb	r1, r1
 800f52a:	f7ff fe7f 	bl	800f22c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f52e:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f530:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 800f532:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f534:	f7ff fe70 	bl	800f218 <USBD_SetClassConfig>
 800f538:	2802      	cmp	r0, #2
 800f53a:	d0b3      	beq.n	800f4a4 <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 800f53c:	4620      	mov	r0, r4
 800f53e:	f000 fa77 	bl	800fa30 <USBD_CtlSendStatus>
 800f542:	e7b7      	b.n	800f4b4 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800f544:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f548:	2203      	movs	r2, #3
 800f54a:	3b01      	subs	r3, #1
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d8a9      	bhi.n	800f4a4 <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 800f550:	88cb      	ldrh	r3, [r1, #6]
 800f552:	2b02      	cmp	r3, #2
 800f554:	d1a6      	bne.n	800f4a4 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f556:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup)
 800f558:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f55c:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800f55e:	b103      	cbz	r3, 800f562 <USBD_StdDevReq+0xd6>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f560:	60c2      	str	r2, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f562:	2202      	movs	r2, #2
 800f564:	f104 010c 	add.w	r1, r4, #12
 800f568:	4620      	mov	r0, r4
 800f56a:	f000 fa33 	bl	800f9d4 <USBD_CtlSendData>
 800f56e:	e7a1      	b.n	800f4b4 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800f570:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f574:	3b01      	subs	r3, #1
 800f576:	2b02      	cmp	r3, #2
 800f578:	d894      	bhi.n	800f4a4 <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f57a:	884b      	ldrh	r3, [r1, #2]
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	d199      	bne.n	800f4b4 <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 800f580:	2300      	movs	r3, #0
 800f582:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800f586:	f000 fa53 	bl	800fa30 <USBD_CtlSendStatus>
 800f58a:	e793      	b.n	800f4b4 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f58c:	884b      	ldrh	r3, [r1, #2]
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d190      	bne.n	800f4b4 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 800f592:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
 800f596:	e7d1      	b.n	800f53c <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f598:	888b      	ldrh	r3, [r1, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d182      	bne.n	800f4a4 <USBD_StdDevReq+0x18>
 800f59e:	88cb      	ldrh	r3, [r1, #6]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	f47f af7f 	bne.w	800f4a4 <USBD_StdDevReq+0x18>
 800f5a6:	884d      	ldrh	r5, [r1, #2]
 800f5a8:	2d7f      	cmp	r5, #127	; 0x7f
 800f5aa:	f63f af7b 	bhi.w	800f4a4 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5ae:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f5b2:	2b03      	cmp	r3, #3
 800f5b4:	f43f af76 	beq.w	800f4a4 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f5b8:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800f5ba:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f5be:	f00d fddd 	bl	801d17c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f000 fa34 	bl	800fa30 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800f5c8:	2d00      	cmp	r5, #0
 800f5ca:	f000 80f2 	beq.w	800f7b2 <USBD_StdDevReq+0x326>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800f5d4:	e76e      	b.n	800f4b4 <USBD_StdDevReq+0x28>
      USBD_GetDescriptor (pdev, req);
 800f5d6:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 800f5d8:	0a13      	lsrs	r3, r2, #8
 800f5da:	3b01      	subs	r3, #1
 800f5dc:	2b0e      	cmp	r3, #14
 800f5de:	f63f af61 	bhi.w	800f4a4 <USBD_StdDevReq+0x18>
 800f5e2:	a101      	add	r1, pc, #4	; (adr r1, 800f5e8 <USBD_StdDevReq+0x15c>)
 800f5e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5e8:	0800f6cd 	.word	0x0800f6cd
 800f5ec:	0800f6b5 	.word	0x0800f6b5
 800f5f0:	0800f6dd 	.word	0x0800f6dd
 800f5f4:	0800f4a5 	.word	0x0800f4a5
 800f5f8:	0800f4a5 	.word	0x0800f4a5
 800f5fc:	0800f685 	.word	0x0800f685
 800f600:	0800f69b 	.word	0x0800f69b
 800f604:	0800f4a5 	.word	0x0800f4a5
 800f608:	0800f4a5 	.word	0x0800f4a5
 800f60c:	0800f4a5 	.word	0x0800f4a5
 800f610:	0800f4a5 	.word	0x0800f4a5
 800f614:	0800f4a5 	.word	0x0800f4a5
 800f618:	0800f4a5 	.word	0x0800f4a5
 800f61c:	0800f4a5 	.word	0x0800f4a5
 800f620:	0800f64b 	.word	0x0800f64b
  if (req->wLength != 1U)
 800f624:	88ca      	ldrh	r2, [r1, #6]
 800f626:	2a01      	cmp	r2, #1
 800f628:	f47f af3c 	bne.w	800f4a4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800f62c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f630:	2b00      	cmp	r3, #0
 800f632:	f43f af37 	beq.w	800f4a4 <USBD_StdDevReq+0x18>
 800f636:	2b02      	cmp	r3, #2
 800f638:	f240 80a3 	bls.w	800f782 <USBD_StdDevReq+0x2f6>
 800f63c:	2b03      	cmp	r3, #3
 800f63e:	f47f af31 	bne.w	800f4a4 <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f642:	1d01      	adds	r1, r0, #4
 800f644:	f000 f9c6 	bl	800f9d4 <USBD_CtlSendData>
 800f648:	e734      	b.n	800f4b4 <USBD_StdDevReq+0x28>
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f64a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f64e:	f10d 0106 	add.w	r1, sp, #6
 800f652:	7c00      	ldrb	r0, [r0, #16]
 800f654:	69db      	ldr	r3, [r3, #28]
 800f656:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 800f658:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f65c:	88ea      	ldrh	r2, [r5, #6]
 800f65e:	b16b      	cbz	r3, 800f67c <USBD_StdDevReq+0x1f0>
 800f660:	2a00      	cmp	r2, #0
 800f662:	f43f af6b 	beq.w	800f53c <USBD_StdDevReq+0xb0>
    len = MIN(len, req->wLength);
 800f666:	4293      	cmp	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 800f668:	4601      	mov	r1, r0
 800f66a:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800f66c:	bf28      	it	cs
 800f66e:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 800f670:	461a      	mov	r2, r3
    len = MIN(len, req->wLength);
 800f672:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800f676:	f000 f9ad 	bl	800f9d4 <USBD_CtlSendData>
 800f67a:	88ea      	ldrh	r2, [r5, #6]
  if(req->wLength == 0U)
 800f67c:	2a00      	cmp	r2, #0
 800f67e:	f47f af19 	bne.w	800f4b4 <USBD_StdDevReq+0x28>
 800f682:	e75b      	b.n	800f53c <USBD_StdDevReq+0xb0>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f684:	7c03      	ldrb	r3, [r0, #16]
 800f686:	2b00      	cmp	r3, #0
 800f688:	f47f af0c 	bne.w	800f4a4 <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f68c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f690:	f10d 0006 	add.w	r0, sp, #6
 800f694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f696:	4798      	blx	r3
 800f698:	e7de      	b.n	800f658 <USBD_StdDevReq+0x1cc>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f69a:	7c03      	ldrb	r3, [r0, #16]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f47f af01 	bne.w	800f4a4 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f6a2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f6a6:	f10d 0006 	add.w	r0, sp, #6
 800f6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ac:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f6ae:	2307      	movs	r3, #7
 800f6b0:	7043      	strb	r3, [r0, #1]
 800f6b2:	e7d1      	b.n	800f658 <USBD_StdDevReq+0x1cc>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800f6b4:	7c02      	ldrb	r2, [r0, #16]
 800f6b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f6ba:	2a00      	cmp	r2, #0
 800f6bc:	d168      	bne.n	800f790 <USBD_StdDevReq+0x304>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c0:	f10d 0006 	add.w	r0, sp, #6
 800f6c4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	7043      	strb	r3, [r0, #1]
 800f6ca:	e7c5      	b.n	800f658 <USBD_StdDevReq+0x1cc>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f6cc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f6d0:	f10d 0106 	add.w	r1, sp, #6
 800f6d4:	7c00      	ldrb	r0, [r0, #16]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4798      	blx	r3
 800f6da:	e7bd      	b.n	800f658 <USBD_StdDevReq+0x1cc>
    switch ((uint8_t)(req->wValue))
 800f6dc:	b2d2      	uxtb	r2, r2
 800f6de:	2a05      	cmp	r2, #5
 800f6e0:	f63f aee0 	bhi.w	800f4a4 <USBD_StdDevReq+0x18>
 800f6e4:	e8df f002 	tbb	[pc, r2]
 800f6e8:	131b232b 	.word	0x131b232b
 800f6ec:	030b      	.short	0x030b
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f6ee:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f6f2:	f10d 0106 	add.w	r1, sp, #6
 800f6f6:	7c00      	ldrb	r0, [r0, #16]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	4798      	blx	r3
 800f6fc:	e7ac      	b.n	800f658 <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f6fe:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f702:	f10d 0106 	add.w	r1, sp, #6
 800f706:	7c00      	ldrb	r0, [r0, #16]
 800f708:	695b      	ldr	r3, [r3, #20]
 800f70a:	4798      	blx	r3
 800f70c:	e7a4      	b.n	800f658 <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f70e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f712:	f10d 0106 	add.w	r1, sp, #6
 800f716:	7c00      	ldrb	r0, [r0, #16]
 800f718:	691b      	ldr	r3, [r3, #16]
 800f71a:	4798      	blx	r3
 800f71c:	e79c      	b.n	800f658 <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f71e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f722:	f10d 0106 	add.w	r1, sp, #6
 800f726:	7c00      	ldrb	r0, [r0, #16]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	4798      	blx	r3
 800f72c:	e794      	b.n	800f658 <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f72e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f732:	f10d 0106 	add.w	r1, sp, #6
 800f736:	7c00      	ldrb	r0, [r0, #16]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	4798      	blx	r3
 800f73c:	e78c      	b.n	800f658 <USBD_StdDevReq+0x1cc>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f73e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f742:	f10d 0106 	add.w	r1, sp, #6
 800f746:	7c00      	ldrb	r0, [r0, #16]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	4798      	blx	r3
 800f74c:	e784      	b.n	800f658 <USBD_StdDevReq+0x1cc>
  USBD_LL_StallEP(pdev , 0x80U);
 800f74e:	2180      	movs	r1, #128	; 0x80
 800f750:	f00d fce4 	bl	801d11c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f754:	2100      	movs	r1, #0
 800f756:	4620      	mov	r0, r4
 800f758:	f00d fce0 	bl	801d11c <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 800f75c:	7829      	ldrb	r1, [r5, #0]
 800f75e:	4620      	mov	r0, r4
 800f760:	f7ff fd64 	bl	800f22c <USBD_ClrClassConfig>
 800f764:	e6a6      	b.n	800f4b4 <USBD_StdDevReq+0x28>
      if (cfgidx)
 800f766:	2900      	cmp	r1, #0
 800f768:	f43f aee8 	beq.w	800f53c <USBD_StdDevReq+0xb0>
        pdev->dev_config = cfgidx;
 800f76c:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f76e:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800f770:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f772:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f776:	f7ff fd4f 	bl	800f218 <USBD_SetClassConfig>
 800f77a:	2802      	cmp	r0, #2
 800f77c:	f47f aede 	bne.w	800f53c <USBD_StdDevReq+0xb0>
 800f780:	e690      	b.n	800f4a4 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 800f782:	2300      	movs	r3, #0
 800f784:	4601      	mov	r1, r0
 800f786:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f78a:	f000 f923 	bl	800f9d4 <USBD_CtlSendData>
 800f78e:	e691      	b.n	800f4b4 <USBD_StdDevReq+0x28>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f792:	f10d 0006 	add.w	r0, sp, #6
 800f796:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f798:	2302      	movs	r3, #2
 800f79a:	7043      	strb	r3, [r0, #1]
 800f79c:	e75c      	b.n	800f658 <USBD_StdDevReq+0x1cc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f79e:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800f7a0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7a2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800f7a6:	f7ff fd41 	bl	800f22c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	f000 f940 	bl	800fa30 <USBD_CtlSendStatus>
 800f7b0:	e680      	b.n	800f4b4 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800f7b8:	e67c      	b.n	800f4b4 <USBD_StdDevReq+0x28>
 800f7ba:	bf00      	nop
 800f7bc:	200008d8 	.word	0x200008d8

0800f7c0 <USBD_StdItfReq>:
{
 800f7c0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7c2:	780b      	ldrb	r3, [r1, #0]
{
 800f7c4:	460d      	mov	r5, r1
 800f7c6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7cc:	2b20      	cmp	r3, #32
 800f7ce:	d00c      	beq.n	800f7ea <USBD_StdItfReq+0x2a>
 800f7d0:	2b40      	cmp	r3, #64	; 0x40
 800f7d2:	d00a      	beq.n	800f7ea <USBD_StdItfReq+0x2a>
 800f7d4:	b14b      	cbz	r3, 800f7ea <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev , 0x80U);
 800f7d6:	2180      	movs	r1, #128	; 0x80
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f00d fc9f 	bl	801d11c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f7de:	4620      	mov	r0, r4
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	f00d fc9b 	bl	801d11c <USBD_LL_StallEP>
}
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800f7ea:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	2b02      	cmp	r3, #2
 800f7f2:	d8f0      	bhi.n	800f7d6 <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f7f4:	792b      	ldrb	r3, [r5, #4]
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d8ed      	bhi.n	800f7d6 <USBD_StdItfReq+0x16>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800f7fa:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f7fe:	4629      	mov	r1, r5
 800f800:	4620      	mov	r0, r4
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f806:	88eb      	ldrh	r3, [r5, #6]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d1ec      	bne.n	800f7e6 <USBD_StdItfReq+0x26>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d1ea      	bne.n	800f7e6 <USBD_StdItfReq+0x26>
          USBD_CtlSendStatus(pdev);
 800f810:	4620      	mov	r0, r4
 800f812:	f000 f90d 	bl	800fa30 <USBD_CtlSendStatus>
 800f816:	e7e6      	b.n	800f7e6 <USBD_StdItfReq+0x26>

0800f818 <USBD_StdEPReq>:
{
 800f818:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f81a:	780b      	ldrb	r3, [r1, #0]
{
 800f81c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f81e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f822:	2b20      	cmp	r3, #32
 800f824:	d00c      	beq.n	800f840 <USBD_StdEPReq+0x28>
 800f826:	2b40      	cmp	r3, #64	; 0x40
 800f828:	d00a      	beq.n	800f840 <USBD_StdEPReq+0x28>
 800f82a:	b183      	cbz	r3, 800f84e <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 800f82c:	2180      	movs	r1, #128	; 0x80
 800f82e:	4620      	mov	r0, r4
 800f830:	f00d fc74 	bl	801d11c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f834:	4620      	mov	r0, r4
 800f836:	2100      	movs	r1, #0
 800f838:	f00d fc70 	bl	801d11c <USBD_LL_StallEP>
}
 800f83c:	2000      	movs	r0, #0
 800f83e:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
 800f840:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f844:	4620      	mov	r0, r4
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	4798      	blx	r3
}
 800f84a:	2000      	movs	r0, #0
 800f84c:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 800f84e:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800f850:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800f852:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 800f854:	b2d5      	uxtb	r5, r2
    switch (req->bRequest)
 800f856:	d037      	beq.n	800f8c8 <USBD_StdEPReq+0xb0>
 800f858:	d314      	bcc.n	800f884 <USBD_StdEPReq+0x6c>
 800f85a:	2b03      	cmp	r3, #3
 800f85c:	d1e6      	bne.n	800f82c <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800f85e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f862:	2b02      	cmp	r3, #2
 800f864:	d03f      	beq.n	800f8e6 <USBD_StdEPReq+0xce>
 800f866:	2b03      	cmp	r3, #3
 800f868:	d1e0      	bne.n	800f82c <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f86a:	884b      	ldrh	r3, [r1, #2]
 800f86c:	b933      	cbnz	r3, 800f87c <USBD_StdEPReq+0x64>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f86e:	066a      	lsls	r2, r5, #25
 800f870:	d004      	beq.n	800f87c <USBD_StdEPReq+0x64>
 800f872:	88cb      	ldrh	r3, [r1, #6]
 800f874:	b913      	cbnz	r3, 800f87c <USBD_StdEPReq+0x64>
            USBD_LL_StallEP(pdev, ep_addr);
 800f876:	4629      	mov	r1, r5
 800f878:	f00d fc50 	bl	801d11c <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 800f87c:	4620      	mov	r0, r4
 800f87e:	f000 f8d7 	bl	800fa30 <USBD_CtlSendStatus>
        break;
 800f882:	e7db      	b.n	800f83c <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800f884:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f888:	2b02      	cmp	r3, #2
 800f88a:	d036      	beq.n	800f8fa <USBD_StdEPReq+0xe2>
 800f88c:	2b03      	cmp	r3, #3
 800f88e:	d1cd      	bne.n	800f82c <USBD_StdEPReq+0x14>
 800f890:	f005 030f 	and.w	r3, r5, #15
        if((ep_addr & 0x80U) == 0x80U)
 800f894:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f896:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f89a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800f89e:	d43e      	bmi.n	800f91e <USBD_StdEPReq+0x106>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f8a0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d0c1      	beq.n	800f82c <USBD_StdEPReq+0x14>
 800f8a8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f8ac:	2614      	movs	r6, #20
 800f8ae:	fb06 0603 	mla	r6, r6, r3, r0
 800f8b2:	f506 76a0 	add.w	r6, r6, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d13c      	bne.n	800f934 <USBD_StdEPReq+0x11c>
            pep->status = 0x0001U;
 800f8ba:	6033      	str	r3, [r6, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f8bc:	4631      	mov	r1, r6
 800f8be:	4620      	mov	r0, r4
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	f000 f887 	bl	800f9d4 <USBD_CtlSendData>
          break;
 800f8c6:	e7b9      	b.n	800f83c <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800f8c8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f8cc:	2b02      	cmp	r3, #2
 800f8ce:	d00a      	beq.n	800f8e6 <USBD_StdEPReq+0xce>
 800f8d0:	2b03      	cmp	r3, #3
 800f8d2:	d1ab      	bne.n	800f82c <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f8d4:	884b      	ldrh	r3, [r1, #2]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d1b0      	bne.n	800f83c <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800f8da:	066e      	lsls	r6, r5, #25
 800f8dc:	d0ce      	beq.n	800f87c <USBD_StdEPReq+0x64>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800f8de:	4629      	mov	r1, r5
 800f8e0:	f00d fc2a 	bl	801d138 <USBD_LL_ClearStallEP>
 800f8e4:	e7ca      	b.n	800f87c <USBD_StdEPReq+0x64>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8e6:	066b      	lsls	r3, r5, #25
 800f8e8:	d0a0      	beq.n	800f82c <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800f8ea:	4629      	mov	r1, r5
 800f8ec:	f00d fc16 	bl	801d11c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	2180      	movs	r1, #128	; 0x80
 800f8f4:	f00d fc12 	bl	801d11c <USBD_LL_StallEP>
 800f8f8:	e7a0      	b.n	800f83c <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8fa:	0668      	lsls	r0, r5, #25
 800f8fc:	d196      	bne.n	800f82c <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f8fe:	0611      	lsls	r1, r2, #24
          pep->status = 0x0000U;
 800f900:	f04f 0500 	mov.w	r5, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f904:	4620      	mov	r0, r4
 800f906:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f90a:	bf4c      	ite	mi
 800f90c:	f104 0314 	addmi.w	r3, r4, #20
 800f910:	f504 73a0 	addpl.w	r3, r4, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f914:	4619      	mov	r1, r3
          pep->status = 0x0000U;
 800f916:	601d      	str	r5, [r3, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f918:	f000 f85c 	bl	800f9d4 <USBD_CtlSendData>
          break;
 800f91c:	e78e      	b.n	800f83c <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f91e:	699b      	ldr	r3, [r3, #24]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d083      	beq.n	800f82c <USBD_StdEPReq+0x14>
 800f924:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f928:	1c5e      	adds	r6, r3, #1
 800f92a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800f92e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800f932:	e7c0      	b.n	800f8b6 <USBD_StdEPReq+0x9e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800f934:	4629      	mov	r1, r5
 800f936:	4620      	mov	r0, r4
 800f938:	f00d fc0c 	bl	801d154 <USBD_LL_IsStallEP>
 800f93c:	b108      	cbz	r0, 800f942 <USBD_StdEPReq+0x12a>
            pep->status = 0x0001U;
 800f93e:	2301      	movs	r3, #1
 800f940:	e7bb      	b.n	800f8ba <USBD_StdEPReq+0xa2>
            pep->status = 0x0000U;
 800f942:	6030      	str	r0, [r6, #0]
 800f944:	e7ba      	b.n	800f8bc <USBD_StdEPReq+0xa4>
 800f946:	bf00      	nop

0800f948 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800f948:	780b      	ldrb	r3, [r1, #0]
 800f94a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800f94c:	784b      	ldrb	r3, [r1, #1]
 800f94e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800f950:	78ca      	ldrb	r2, [r1, #3]
 800f952:	788b      	ldrb	r3, [r1, #2]
 800f954:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f958:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800f95a:	794a      	ldrb	r2, [r1, #5]
 800f95c:	790b      	ldrb	r3, [r1, #4]
 800f95e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f962:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800f964:	79ca      	ldrb	r2, [r1, #7]
 800f966:	798b      	ldrb	r3, [r1, #6]
 800f968:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f96c:	80c3      	strh	r3, [r0, #6]
}
 800f96e:	4770      	bx	lr

0800f970 <USBD_CtlError>:
{
 800f970:	b510      	push	{r4, lr}
 800f972:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800f974:	2180      	movs	r1, #128	; 0x80
 800f976:	f00d fbd1 	bl	801d11c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f97a:	2100      	movs	r1, #0
 800f97c:	4620      	mov	r0, r4
}
 800f97e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800f982:	f00d bbcb 	b.w	801d11c <USBD_LL_StallEP>
 800f986:	bf00      	nop

0800f988 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800f988:	b300      	cbz	r0, 800f9cc <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800f98a:	7803      	ldrb	r3, [r0, #0]
{
 800f98c:	b430      	push	{r4, r5}
    while (*buf != '\0')
 800f98e:	b1f3      	cbz	r3, 800f9ce <USBD_GetString+0x46>
 800f990:	4604      	mov	r4, r0
    uint8_t  len = 0U;
 800f992:	2300      	movs	r3, #0
    {
        len++;
 800f994:	3301      	adds	r3, #1
    while (*buf != '\0')
 800f996:	f814 5f01 	ldrb.w	r5, [r4, #1]!
        len++;
 800f99a:	b2db      	uxtb	r3, r3
    while (*buf != '\0')
 800f99c:	2d00      	cmp	r5, #0
 800f99e:	d1f9      	bne.n	800f994 <USBD_GetString+0xc>
 800f9a0:	005b      	lsls	r3, r3, #1
 800f9a2:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f9a4:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f9a6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f9a8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f9aa:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 800f9ac:	7804      	ldrb	r4, [r0, #0]
 800f9ae:	b15c      	cbz	r4, 800f9c8 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f9b0:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800f9b2:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800f9b8:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 800f9ba:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800f9c0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800f9c4:	2c00      	cmp	r4, #0
 800f9c6:	d1f5      	bne.n	800f9b4 <USBD_GetString+0x2c>
}
 800f9c8:	bc30      	pop	{r4, r5}
 800f9ca:	4770      	bx	lr
 800f9cc:	4770      	bx	lr
    while (*buf != '\0')
 800f9ce:	2302      	movs	r3, #2
 800f9d0:	e7e8      	b.n	800f9a4 <USBD_GetString+0x1c>
 800f9d2:	bf00      	nop

0800f9d4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800f9d4:	b570      	push	{r4, r5, r6, lr}
 800f9d6:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f9d8:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f9da:	460a      	mov	r2, r1
 800f9dc:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 800f9de:	61c5      	str	r5, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f9e0:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length   = len;
 800f9e2:	6205      	str	r5, [r0, #32]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f9e4:	f8c0 626c 	str.w	r6, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f9e8:	f00d fbd6 	bl	801d198 <USBD_LL_Transmit>

  return USBD_OK;
}
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	bd70      	pop	{r4, r5, r6, pc}

0800f9f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800f9f0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	460a      	mov	r2, r1
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	f00d fbce 	bl	801d198 <USBD_LL_Transmit>

  return USBD_OK;
}
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	bd08      	pop	{r3, pc}

0800fa00 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800fa00:	b570      	push	{r4, r5, r6, lr}
 800fa02:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fa04:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800fa06:	460a      	mov	r2, r1
 800fa08:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 800fa0a:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800fa0e:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length   = len;
 800fa10:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fa14:	f8c0 626c 	str.w	r6, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800fa18:	f00d fbcc 	bl	801d1b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}

0800fa20 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800fa20:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fa22:	4613      	mov	r3, r2
 800fa24:	460a      	mov	r2, r1
 800fa26:	2100      	movs	r1, #0
 800fa28:	f00d fbc4 	bl	801d1b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	bd08      	pop	{r3, pc}

0800fa30 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800fa30:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fa32:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fa34:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fa36:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	f00d fbab 	bl	801d198 <USBD_LL_Transmit>

  return USBD_OK;
}
 800fa42:	2000      	movs	r0, #0
 800fa44:	bd08      	pop	{r3, pc}
 800fa46:	bf00      	nop

0800fa48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800fa48:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fa4a:	2205      	movs	r2, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800fa4c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fa4e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800fa52:	4619      	mov	r1, r3
 800fa54:	461a      	mov	r2, r3
 800fa56:	f00d fbad 	bl	801d1b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	bd08      	pop	{r3, pc}
 800fa5e:	bf00      	nop

0800fa60 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800fa60:	4b11      	ldr	r3, [pc, #68]	; (800faa8 <FATFS_LinkDriver+0x48>)
 800fa62:	7a5a      	ldrb	r2, [r3, #9]
 800fa64:	b10a      	cbz	r2, 800fa6a <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 800fa66:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800fa68:	4770      	bx	lr
{
 800fa6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa6c:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 800fa70:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800fa74:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 800fa76:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 800fa7a:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 800fa7c:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 800fa7e:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800fa80:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 800fa84:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 800fa86:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 800fa8a:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 800fa8c:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 800fa8e:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 800fa90:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800fa92:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800fa94:	b2c0      	uxtb	r0, r0
 800fa96:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 800fa98:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800fa9a:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 800fa9c:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 800fa9e:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 800faa2:	708f      	strb	r7, [r1, #2]
}
 800faa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faa6:	bf00      	nop
 800faa8:	200008dc 	.word	0x200008dc

0800faac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800faac:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800faae:	f000 fff5 	bl	8010a9c <vTaskStartScheduler>
  
  return osOK;
}
 800fab2:	2000      	movs	r0, #0
 800fab4:	bd08      	pop	{r3, pc}
 800fab6:	bf00      	nop

0800fab8 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fab8:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800fabc:	b90b      	cbnz	r3, 800fac2 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 800fabe:	f001 b83b 	b.w	8010b38 <xTaskGetTickCount>
    return xTaskGetTickCountFromISR();
 800fac2:	f001 b83f 	b.w	8010b44 <xTaskGetTickCountFromISR>
 800fac6:	bf00      	nop

0800fac8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fac8:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800faca:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800face:	b085      	sub	sp, #20
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 800fad4:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fad6:	ad03      	add	r5, sp, #12
 800fad8:	6811      	ldr	r1, [r2, #0]
    fpriority += (priority - osPriorityIdle);
 800fada:	bf14      	ite	ne
 800fadc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fade:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fae0:	8a12      	ldrh	r2, [r2, #16]
 800fae2:	6840      	ldr	r0, [r0, #4]
 800fae4:	e9cd 4500 	strd	r4, r5, [sp]
 800fae8:	f000 fee8 	bl	80108bc <xTaskCreate>
 800faec:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800faee:	bf0c      	ite	eq
 800faf0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800faf2:	2000      	movne	r0, #0
}
 800faf4:	b005      	add	sp, #20
 800faf6:	bd30      	pop	{r4, r5, pc}

0800faf8 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800faf8:	2800      	cmp	r0, #0
 800fafa:	bf08      	it	eq
 800fafc:	2001      	moveq	r0, #1
{
 800fafe:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fb00:	f001 f958 	bl	8010db4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fb04:	2000      	movs	r0, #0
 800fb06:	bd08      	pop	{r3, pc}

0800fb08 <osTimerCreate>:
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 800fb08:	4613      	mov	r3, r2
 800fb0a:	f1a1 0201 	sub.w	r2, r1, #1
 800fb0e:	2101      	movs	r1, #1
 800fb10:	fab2 f282 	clz	r2, r2
{
 800fb14:	b510      	push	{r4, lr}
  return xTimerCreate((const char *)"",
 800fb16:	6804      	ldr	r4, [r0, #0]
{
 800fb18:	b082      	sub	sp, #8
  return xTimerCreate((const char *)"",
 800fb1a:	0952      	lsrs	r2, r2, #5
 800fb1c:	4802      	ldr	r0, [pc, #8]	; (800fb28 <osTimerCreate+0x20>)
 800fb1e:	9400      	str	r4, [sp, #0]
 800fb20:	f001 fcf8 	bl	8011514 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800fb24:	b002      	add	sp, #8
 800fb26:	bd10      	pop	{r4, pc}
 800fb28:	0803a550 	.word	0x0803a550

0800fb2c <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800fb2c:	2001      	movs	r0, #1
 800fb2e:	f000 bb2f 	b.w	8010190 <xQueueCreateMutex>
 800fb32:	bf00      	nop

0800fb34 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800fb34:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fb36:	2400      	movs	r4, #0
{
 800fb38:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 800fb3a:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800fb3c:	b300      	cbz	r0, 800fb80 <osMutexWait+0x4c>
 800fb3e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800fb42:	b933      	cbnz	r3, 800fb52 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800fb44:	f000 fcca 	bl	80104dc <xQueueSemaphoreTake>
 800fb48:	2801      	cmp	r0, #1
 800fb4a:	d116      	bne.n	800fb7a <osMutexWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 800fb4c:	2000      	movs	r0, #0
}
 800fb4e:	b002      	add	sp, #8
 800fb50:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fb52:	aa01      	add	r2, sp, #4
 800fb54:	4621      	mov	r1, r4
 800fb56:	f000 fd97 	bl	8010688 <xQueueReceiveFromISR>
 800fb5a:	2801      	cmp	r0, #1
 800fb5c:	d10d      	bne.n	800fb7a <osMutexWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 800fb5e:	9b01      	ldr	r3, [sp, #4]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d0f3      	beq.n	800fb4c <osMutexWait+0x18>
 800fb64:	4b08      	ldr	r3, [pc, #32]	; (800fb88 <osMutexWait+0x54>)
 800fb66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb6a:	601a      	str	r2, [r3, #0]
 800fb6c:	f3bf 8f4f 	dsb	sy
 800fb70:	f3bf 8f6f 	isb	sy
  return osOK;
 800fb74:	4620      	mov	r0, r4
}
 800fb76:	b002      	add	sp, #8
 800fb78:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800fb7a:	20ff      	movs	r0, #255	; 0xff
}
 800fb7c:	b002      	add	sp, #8
 800fb7e:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 800fb80:	2080      	movs	r0, #128	; 0x80
}
 800fb82:	b002      	add	sp, #8
 800fb84:	bd10      	pop	{r4, pc}
 800fb86:	bf00      	nop
 800fb88:	e000ed04 	.word	0xe000ed04

0800fb8c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800fb8c:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800fb8e:	2400      	movs	r4, #0
{
 800fb90:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 800fb92:	9401      	str	r4, [sp, #4]
 800fb94:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800fb98:	b14b      	cbz	r3, 800fbae <osMutexRelease+0x22>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fb9a:	a901      	add	r1, sp, #4
 800fb9c:	f000 fb7c 	bl	8010298 <xQueueGiveFromISR>
 800fba0:	2801      	cmp	r0, #1
 800fba2:	d10a      	bne.n	800fbba <osMutexRelease+0x2e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fba4:	9b01      	ldr	r3, [sp, #4]
 800fba6:	b95b      	cbnz	r3, 800fbc0 <osMutexRelease+0x34>
  osStatus result = osOK;
 800fba8:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800fbaa:	b002      	add	sp, #8
 800fbac:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800fbae:	461a      	mov	r2, r3
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	f000 fa23 	bl	800fffc <xQueueGenericSend>
 800fbb6:	2801      	cmp	r0, #1
 800fbb8:	d0f6      	beq.n	800fba8 <osMutexRelease+0x1c>
    result = osErrorOS;
 800fbba:	20ff      	movs	r0, #255	; 0xff
}
 800fbbc:	b002      	add	sp, #8
 800fbbe:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800fbc0:	4b05      	ldr	r3, [pc, #20]	; (800fbd8 <osMutexRelease+0x4c>)
 800fbc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbc6:	601a      	str	r2, [r3, #0]
 800fbc8:	f3bf 8f4f 	dsb	sy
 800fbcc:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800fbd0:	4620      	mov	r0, r4
}
 800fbd2:	b002      	add	sp, #8
 800fbd4:	bd10      	pop	{r4, pc}
 800fbd6:	bf00      	nop
 800fbd8:	e000ed04 	.word	0xe000ed04

0800fbdc <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800fbdc:	2901      	cmp	r1, #1
{ 
 800fbde:	b510      	push	{r4, lr}
  if (count == 1) {
 800fbe0:	d10d      	bne.n	800fbfe <osSemaphoreCreate+0x22>
 800fbe2:	4608      	mov	r0, r1
    vSemaphoreCreateBinary(sema);
 800fbe4:	2203      	movs	r2, #3
 800fbe6:	2100      	movs	r1, #0
 800fbe8:	f000 f9dc 	bl	800ffa4 <xQueueGenericCreate>
 800fbec:	4604      	mov	r4, r0
 800fbee:	b120      	cbz	r0, 800fbfa <osSemaphoreCreate+0x1e>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	f000 fa01 	bl	800fffc <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	bd10      	pop	{r4, pc}
    return NULL;
 800fbfe:	2400      	movs	r4, #0
}
 800fc00:	4620      	mov	r0, r4
 800fc02:	bd10      	pop	{r4, pc}

0800fc04 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fc04:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fc06:	2400      	movs	r4, #0
{
 800fc08:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 800fc0a:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800fc0c:	b300      	cbz	r0, 800fc50 <osSemaphoreWait+0x4c>
 800fc0e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800fc12:	b933      	cbnz	r3, 800fc22 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fc14:	f000 fc62 	bl	80104dc <xQueueSemaphoreTake>
 800fc18:	2801      	cmp	r0, #1
 800fc1a:	d116      	bne.n	800fc4a <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 800fc1c:	2000      	movs	r0, #0
}
 800fc1e:	b002      	add	sp, #8
 800fc20:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fc22:	aa01      	add	r2, sp, #4
 800fc24:	4621      	mov	r1, r4
 800fc26:	f000 fd2f 	bl	8010688 <xQueueReceiveFromISR>
 800fc2a:	2801      	cmp	r0, #1
 800fc2c:	d10d      	bne.n	800fc4a <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 800fc2e:	9b01      	ldr	r3, [sp, #4]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d0f3      	beq.n	800fc1c <osSemaphoreWait+0x18>
 800fc34:	4b08      	ldr	r3, [pc, #32]	; (800fc58 <osSemaphoreWait+0x54>)
 800fc36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc3a:	601a      	str	r2, [r3, #0]
 800fc3c:	f3bf 8f4f 	dsb	sy
 800fc40:	f3bf 8f6f 	isb	sy
  return osOK;
 800fc44:	4620      	mov	r0, r4
}
 800fc46:	b002      	add	sp, #8
 800fc48:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800fc4a:	20ff      	movs	r0, #255	; 0xff
}
 800fc4c:	b002      	add	sp, #8
 800fc4e:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 800fc50:	2080      	movs	r0, #128	; 0x80
}
 800fc52:	b002      	add	sp, #8
 800fc54:	bd10      	pop	{r4, pc}
 800fc56:	bf00      	nop
 800fc58:	e000ed04 	.word	0xe000ed04

0800fc5c <osSemaphoreRelease>:
 800fc5c:	f7ff bf96 	b.w	800fb8c <osMutexRelease>

0800fc60 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fc60:	2200      	movs	r2, #0
 800fc62:	e9d0 0100 	ldrd	r0, r1, [r0]
 800fc66:	f000 b99d 	b.w	800ffa4 <xQueueGenericCreate>
 800fc6a:	bf00      	nop

0800fc6c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fc6c:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800fc6e:	2400      	movs	r4, #0
{
 800fc70:	b084      	sub	sp, #16
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800fc72:	42a2      	cmp	r2, r4
 800fc74:	bf08      	it	eq
 800fc76:	2201      	moveq	r2, #1
{
 800fc78:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fc7a:	9403      	str	r4, [sp, #12]
 800fc7c:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800fc80:	b15b      	cbz	r3, 800fc9a <osMessagePut+0x2e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fc82:	4623      	mov	r3, r4
 800fc84:	aa03      	add	r2, sp, #12
 800fc86:	a901      	add	r1, sp, #4
 800fc88:	f000 fa94 	bl	80101b4 <xQueueGenericSendFromISR>
 800fc8c:	2801      	cmp	r0, #1
 800fc8e:	d109      	bne.n	800fca4 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fc90:	9b03      	ldr	r3, [sp, #12]
 800fc92:	b953      	cbnz	r3, 800fcaa <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 800fc94:	2000      	movs	r0, #0
}
 800fc96:	b004      	add	sp, #16
 800fc98:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fc9a:	a901      	add	r1, sp, #4
 800fc9c:	f000 f9ae 	bl	800fffc <xQueueGenericSend>
 800fca0:	2801      	cmp	r0, #1
 800fca2:	d0f7      	beq.n	800fc94 <osMessagePut+0x28>
      return osErrorOS;
 800fca4:	20ff      	movs	r0, #255	; 0xff
}
 800fca6:	b004      	add	sp, #16
 800fca8:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800fcaa:	4b05      	ldr	r3, [pc, #20]	; (800fcc0 <osMessagePut+0x54>)
 800fcac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcb0:	601a      	str	r2, [r3, #0]
 800fcb2:	f3bf 8f4f 	dsb	sy
 800fcb6:	f3bf 8f6f 	isb	sy
  return osOK;
 800fcba:	4620      	mov	r0, r4
}
 800fcbc:	b004      	add	sp, #16
 800fcbe:	bd10      	pop	{r4, pc}
 800fcc0:	e000ed04 	.word	0xe000ed04

0800fcc4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fcc4:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800fcc6:	2500      	movs	r5, #0
{
 800fcc8:	b084      	sub	sp, #16
 800fcca:	4604      	mov	r4, r0
  event.value.v = 0;
 800fccc:	e9cd 5102 	strd	r5, r1, [sp, #8]
  
  if (queue_id == NULL) {
 800fcd0:	b359      	cbz	r1, 800fd2a <osMessageGet+0x66>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800fcd2:	9500      	str	r5, [sp, #0]
 800fcd4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800fcd8:	b99b      	cbnz	r3, 800fd02 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fcda:	4608      	mov	r0, r1
 800fcdc:	a902      	add	r1, sp, #8
 800fcde:	4616      	mov	r6, r2
 800fce0:	f000 fb3a 	bl	8010358 <xQueueReceive>
 800fce4:	2801      	cmp	r0, #1
 800fce6:	d02e      	beq.n	800fd46 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fce8:	2e00      	cmp	r6, #0
 800fcea:	bf0c      	ite	eq
 800fcec:	2300      	moveq	r3, #0
 800fcee:	2340      	movne	r3, #64	; 0x40
 800fcf0:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 800fcf2:	ab04      	add	r3, sp, #16
 800fcf4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fcf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	b004      	add	sp, #16
 800fd00:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fd02:	4608      	mov	r0, r1
 800fd04:	466a      	mov	r2, sp
 800fd06:	a902      	add	r1, sp, #8
 800fd08:	f000 fcbe 	bl	8010688 <xQueueReceiveFromISR>
 800fd0c:	2801      	cmp	r0, #1
 800fd0e:	d017      	beq.n	800fd40 <osMessageGet+0x7c>
      event.status = osOK;
 800fd10:	9501      	str	r5, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800fd12:	9b00      	ldr	r3, [sp, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d0ec      	beq.n	800fcf2 <osMessageGet+0x2e>
 800fd18:	4b0c      	ldr	r3, [pc, #48]	; (800fd4c <osMessageGet+0x88>)
 800fd1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd1e:	601a      	str	r2, [r3, #0]
 800fd20:	f3bf 8f4f 	dsb	sy
 800fd24:	f3bf 8f6f 	isb	sy
 800fd28:	e7e3      	b.n	800fcf2 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 800fd2a:	ab04      	add	r3, sp, #16
 800fd2c:	2280      	movs	r2, #128	; 0x80
 800fd2e:	f843 2d0c 	str.w	r2, [r3, #-12]!
    return event;
 800fd32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	b004      	add	sp, #16
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 800fd40:	2310      	movs	r3, #16
 800fd42:	9301      	str	r3, [sp, #4]
 800fd44:	e7e5      	b.n	800fd12 <osMessageGet+0x4e>
      event.status = osEventMessage;
 800fd46:	2310      	movs	r3, #16
 800fd48:	9301      	str	r3, [sp, #4]
 800fd4a:	e7d2      	b.n	800fcf2 <osMessageGet+0x2e>
 800fd4c:	e000ed04 	.word	0xe000ed04

0800fd50 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd50:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fd54:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fd58:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fd5a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fd5c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd5e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd60:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop

0800fd68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop

0800fd70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fd70:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800fd72:	6802      	ldr	r2, [r0, #0]
{
 800fd74:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fd76:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 800fd78:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fd7a:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fd7e:	689c      	ldr	r4, [r3, #8]
 800fd80:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fd82:	6099      	str	r1, [r3, #8]
}
 800fd84:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fd88:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fd8a:	6002      	str	r2, [r0, #0]
}
 800fd8c:	4770      	bx	lr
 800fd8e:	bf00      	nop

0800fd90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd90:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fd92:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fd94:	1c6b      	adds	r3, r5, #1
 800fd96:	d011      	beq.n	800fdbc <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd98:	f100 0208 	add.w	r2, r0, #8
 800fd9c:	e000      	b.n	800fda0 <vListInsert+0x10>
 800fd9e:	461a      	mov	r2, r3
 800fda0:	6853      	ldr	r3, [r2, #4]
 800fda2:	681c      	ldr	r4, [r3, #0]
 800fda4:	42ac      	cmp	r4, r5
 800fda6:	d9fa      	bls.n	800fd9e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800fda8:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800fdaa:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800fdac:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fdae:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fdb0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fdb2:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fdb4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fdb6:	6004      	str	r4, [r0, #0]
}
 800fdb8:	bc30      	pop	{r4, r5}
 800fdba:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800fdbc:	6902      	ldr	r2, [r0, #16]
 800fdbe:	6853      	ldr	r3, [r2, #4]
 800fdc0:	e7f2      	b.n	800fda8 <vListInsert+0x18>
 800fdc2:	bf00      	nop

0800fdc4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800fdc4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fdc6:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
{
 800fdca:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fdcc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fdce:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fdd0:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800fdd2:	4284      	cmp	r4, r0

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 800fdd4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fdd8:	604a      	str	r2, [r1, #4]
	( pxList->uxNumberOfItems )--;
 800fdda:	681a      	ldr	r2, [r3, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fddc:	bf08      	it	eq
 800fdde:	6059      	streq	r1, [r3, #4]
	pxItemToRemove->pvContainer = NULL;
 800fde0:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800fde2:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 800fde4:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fde6:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800fde8:	6818      	ldr	r0, [r3, #0]
}
 800fdea:	4770      	bx	lr

0800fdec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fdec:	b570      	push	{r4, r5, r6, lr}
 800fdee:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdf0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800fdf2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdf4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdf6:	b92a      	cbnz	r2, 800fe04 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fdf8:	6806      	ldr	r6, [r0, #0]
 800fdfa:	3501      	adds	r5, #1
 800fdfc:	b366      	cbz	r6, 800fe58 <prvCopyDataToQueue+0x6c>
BaseType_t xReturn = pdFALSE;
 800fdfe:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe00:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800fe02:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800fe04:	b97e      	cbnz	r6, 800fe26 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800fe06:	6880      	ldr	r0, [r0, #8]
 800fe08:	3501      	adds	r5, #1
 800fe0a:	f00d fb62 	bl	801d4d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fe0e:	68a3      	ldr	r3, [r4, #8]
 800fe10:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe12:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fe14:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe16:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fe18:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe1a:	d3f0      	bcc.n	800fdfe <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe1c:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800fe1e:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe20:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe22:	60a3      	str	r3, [r4, #8]
}
 800fe24:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe26:	68c0      	ldr	r0, [r0, #12]
 800fe28:	f00d fb53 	bl	801d4d2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fe2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fe2e:	68e3      	ldr	r3, [r4, #12]
 800fe30:	4252      	negs	r2, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe32:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fe34:	4413      	add	r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe36:	428b      	cmp	r3, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fe38:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe3a:	d202      	bcs.n	800fe42 <prvCopyDataToQueue+0x56>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800fe3c:	6863      	ldr	r3, [r4, #4]
 800fe3e:	441a      	add	r2, r3
 800fe40:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800fe42:	2e02      	cmp	r6, #2
 800fe44:	d003      	beq.n	800fe4e <prvCopyDataToQueue+0x62>
 800fe46:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800fe48:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe4a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800fe4c:	bd70      	pop	{r4, r5, r6, pc}
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe4e:	2d00      	cmp	r5, #0
 800fe50:	d1d5      	bne.n	800fdfe <prvCopyDataToQueue+0x12>
 800fe52:	2501      	movs	r5, #1
BaseType_t xReturn = pdFALSE;
 800fe54:	2000      	movs	r0, #0
 800fe56:	e7d3      	b.n	800fe00 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800fe58:	6840      	ldr	r0, [r0, #4]
 800fe5a:	f001 f969 	bl	8011130 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800fe5e:	6066      	str	r6, [r4, #4]
 800fe60:	e7ce      	b.n	800fe00 <prvCopyDataToQueue+0x14>
 800fe62:	bf00      	nop

0800fe64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fe66:	b172      	cbz	r2, 800fe86 <prvCopyDataFromQueue+0x22>
 800fe68:	460b      	mov	r3, r1
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fe6a:	68c1      	ldr	r1, [r0, #12]
{
 800fe6c:	b410      	push	{r4}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fe6e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe70:	6844      	ldr	r4, [r0, #4]
 800fe72:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fe74:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe76:	d301      	bcc.n	800fe7c <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800fe78:	6801      	ldr	r1, [r0, #0]
 800fe7a:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800fe7c:	4618      	mov	r0, r3
	}
}
 800fe7e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800fe82:	f00d bb26 	b.w	801d4d2 <memcpy>
 800fe86:	4770      	bx	lr

0800fe88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fe88:	b570      	push	{r4, r5, r6, lr}
 800fe8a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fe8c:	f001 fd42 	bl	8011914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fe90:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800fe94:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe96:	2c00      	cmp	r4, #0
 800fe98:	dd16      	ble.n	800fec8 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fe9c:	b1a3      	cbz	r3, 800fec8 <prvUnlockQueue+0x40>
 800fe9e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800fea2:	e005      	b.n	800feb0 <prvUnlockQueue+0x28>
 800fea4:	3c01      	subs	r4, #1
 800fea6:	b2e3      	uxtb	r3, r4
 800fea8:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800feaa:	b16b      	cbz	r3, 800fec8 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800feac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800feae:	b15b      	cbz	r3, 800fec8 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800feb0:	4630      	mov	r0, r6
 800feb2:	f001 f82b 	bl	8010f0c <xTaskRemoveFromEventList>
 800feb6:	2800      	cmp	r0, #0
 800feb8:	d0f4      	beq.n	800fea4 <prvUnlockQueue+0x1c>
 800feba:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800febc:	f001 f8c4 	bl	8011048 <vTaskMissedYield>
 800fec0:	b2e3      	uxtb	r3, r4
 800fec2:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1f1      	bne.n	800feac <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fec8:	23ff      	movs	r3, #255	; 0xff
 800feca:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fece:	f001 fd47 	bl	8011960 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fed2:	f001 fd1f 	bl	8011914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fed6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800feda:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fedc:	2c00      	cmp	r4, #0
 800fede:	dd16      	ble.n	800ff0e <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fee0:	692b      	ldr	r3, [r5, #16]
 800fee2:	b1a3      	cbz	r3, 800ff0e <prvUnlockQueue+0x86>
 800fee4:	f105 0610 	add.w	r6, r5, #16
 800fee8:	e005      	b.n	800fef6 <prvUnlockQueue+0x6e>
 800feea:	3c01      	subs	r4, #1
 800feec:	b2e3      	uxtb	r3, r4
 800feee:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fef0:	b16b      	cbz	r3, 800ff0e <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fef2:	692b      	ldr	r3, [r5, #16]
 800fef4:	b15b      	cbz	r3, 800ff0e <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fef6:	4630      	mov	r0, r6
 800fef8:	f001 f808 	bl	8010f0c <xTaskRemoveFromEventList>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d0f4      	beq.n	800feea <prvUnlockQueue+0x62>
 800ff00:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800ff02:	f001 f8a1 	bl	8011048 <vTaskMissedYield>
 800ff06:	b2e3      	uxtb	r3, r4
 800ff08:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1f1      	bne.n	800fef2 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff0e:	23ff      	movs	r3, #255	; 0xff
 800ff10:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800ff14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800ff18:	f001 bd22 	b.w	8011960 <vPortExitCritical>

0800ff1c <xQueueGenericReset>:
{
 800ff1c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800ff1e:	b1e0      	cbz	r0, 800ff5a <xQueueGenericReset+0x3e>
 800ff20:	4604      	mov	r4, r0
 800ff22:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800ff24:	f001 fcf6 	bl	8011914 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ff28:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ff2a:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ff2c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ff2e:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff30:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800ff32:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ff36:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ff3a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 800ff3e:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ff42:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ff44:	4413      	add	r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ff46:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ff48:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ff4a:	60e2      	str	r2, [r4, #12]
		if( xNewQueue == pdFALSE )
 800ff4c:	b985      	cbnz	r5, 800ff70 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff4e:	6923      	ldr	r3, [r4, #16]
 800ff50:	b9bb      	cbnz	r3, 800ff82 <xQueueGenericReset+0x66>
	taskEXIT_CRITICAL();
 800ff52:	f001 fd05 	bl	8011960 <vPortExitCritical>
}
 800ff56:	2001      	movs	r0, #1
 800ff58:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ff5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5e:	b672      	cpsid	i
 800ff60:	f383 8811 	msr	BASEPRI, r3
 800ff64:	f3bf 8f6f 	isb	sy
 800ff68:	f3bf 8f4f 	dsb	sy
 800ff6c:	b662      	cpsie	i
 800ff6e:	e7fe      	b.n	800ff6e <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ff70:	f104 0010 	add.w	r0, r4, #16
 800ff74:	f7ff feec 	bl	800fd50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ff78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ff7c:	f7ff fee8 	bl	800fd50 <vListInitialise>
 800ff80:	e7e7      	b.n	800ff52 <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff82:	f104 0010 	add.w	r0, r4, #16
 800ff86:	f000 ffc1 	bl	8010f0c <xTaskRemoveFromEventList>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	d0e1      	beq.n	800ff52 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800ff8e:	4b04      	ldr	r3, [pc, #16]	; (800ffa0 <xQueueGenericReset+0x84>)
 800ff90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff94:	601a      	str	r2, [r3, #0]
 800ff96:	f3bf 8f4f 	dsb	sy
 800ff9a:	f3bf 8f6f 	isb	sy
 800ff9e:	e7d8      	b.n	800ff52 <xQueueGenericReset+0x36>
 800ffa0:	e000ed04 	.word	0xe000ed04

0800ffa4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ffa4:	b950      	cbnz	r0, 800ffbc <xQueueGenericCreate+0x18>
 800ffa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffaa:	b672      	cpsid	i
 800ffac:	f383 8811 	msr	BASEPRI, r3
 800ffb0:	f3bf 8f6f 	isb	sy
 800ffb4:	f3bf 8f4f 	dsb	sy
 800ffb8:	b662      	cpsie	i
 800ffba:	e7fe      	b.n	800ffba <xQueueGenericCreate+0x16>
	{
 800ffbc:	b570      	push	{r4, r5, r6, lr}
 800ffbe:	4606      	mov	r6, r0
 800ffc0:	460d      	mov	r5, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 800ffc2:	b151      	cbz	r1, 800ffda <xQueueGenericCreate+0x36>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffc4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ffc8:	3048      	adds	r0, #72	; 0x48
 800ffca:	f001 fe0b 	bl	8011be4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ffce:	4604      	mov	r4, r0
 800ffd0:	b188      	cbz	r0, 800fff6 <xQueueGenericCreate+0x52>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ffd2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ffd6:	6003      	str	r3, [r0, #0]
 800ffd8:	e005      	b.n	800ffe6 <xQueueGenericCreate+0x42>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ffda:	2048      	movs	r0, #72	; 0x48
 800ffdc:	f001 fe02 	bl	8011be4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	b140      	cbz	r0, 800fff6 <xQueueGenericCreate+0x52>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ffe4:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800ffe6:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ffe8:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800ffea:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ffec:	4620      	mov	r0, r4
 800ffee:	f7ff ff95 	bl	800ff1c <xQueueGenericReset>
	}
 800fff2:	4620      	mov	r0, r4
 800fff4:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800fff6:	2400      	movs	r4, #0
	}
 800fff8:	4620      	mov	r0, r4
 800fffa:	bd70      	pop	{r4, r5, r6, pc}

0800fffc <xQueueGenericSend>:
{
 800fffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010000:	b084      	sub	sp, #16
 8010002:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010004:	2800      	cmp	r0, #0
 8010006:	f000 80a3 	beq.w	8010150 <xQueueGenericSend+0x154>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801000a:	2900      	cmp	r1, #0
 801000c:	f000 8091 	beq.w	8010132 <xQueueGenericSend+0x136>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010010:	2b02      	cmp	r3, #2
 8010012:	d10d      	bne.n	8010030 <xQueueGenericSend+0x34>
 8010014:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010016:	2a01      	cmp	r2, #1
 8010018:	d00a      	beq.n	8010030 <xQueueGenericSend+0x34>
 801001a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001e:	b672      	cpsid	i
 8010020:	f383 8811 	msr	BASEPRI, r3
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	f3bf 8f4f 	dsb	sy
 801002c:	b662      	cpsie	i
 801002e:	e7fe      	b.n	801002e <xQueueGenericSend+0x32>
 8010030:	4604      	mov	r4, r0
 8010032:	461e      	mov	r6, r3
 8010034:	4689      	mov	r9, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010036:	f001 f813 	bl	8011060 <xTaskGetSchedulerState>
 801003a:	b960      	cbnz	r0, 8010056 <xQueueGenericSend+0x5a>
 801003c:	9b01      	ldr	r3, [sp, #4]
 801003e:	b153      	cbz	r3, 8010056 <xQueueGenericSend+0x5a>
 8010040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010044:	b672      	cpsid	i
 8010046:	f383 8811 	msr	BASEPRI, r3
 801004a:	f3bf 8f6f 	isb	sy
 801004e:	f3bf 8f4f 	dsb	sy
 8010052:	b662      	cpsie	i
 8010054:	e7fe      	b.n	8010054 <xQueueGenericSend+0x58>
 8010056:	f1a6 0502 	sub.w	r5, r6, #2
{
 801005a:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 801005c:	f8df a12c 	ldr.w	sl, [pc, #300]	; 801018c <xQueueGenericSend+0x190>
 8010060:	fab5 f585 	clz	r5, r5
		prvLockQueue( pxQueue );
 8010064:	46b8      	mov	r8, r7
 8010066:	096d      	lsrs	r5, r5, #5
 8010068:	e007      	b.n	801007a <xQueueGenericSend+0x7e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801006a:	f001 fc79 	bl	8011960 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801006e:	4620      	mov	r0, r4
 8010070:	f7ff ff0a 	bl	800fe88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010074:	f000 fe18 	bl	8010ca8 <xTaskResumeAll>
 8010078:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 801007a:	f001 fc4b 	bl	8011914 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801007e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010082:	429a      	cmp	r2, r3
 8010084:	d33f      	bcc.n	8010106 <xQueueGenericSend+0x10a>
 8010086:	2d00      	cmp	r5, #0
 8010088:	d13d      	bne.n	8010106 <xQueueGenericSend+0x10a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801008a:	9b01      	ldr	r3, [sp, #4]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d06a      	beq.n	8010166 <xQueueGenericSend+0x16a>
				else if( xEntryTimeSet == pdFALSE )
 8010090:	b917      	cbnz	r7, 8010098 <xQueueGenericSend+0x9c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010092:	a802      	add	r0, sp, #8
 8010094:	f000 ff82 	bl	8010f9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010098:	f001 fc62 	bl	8011960 <vPortExitCritical>
		vTaskSuspendAll();
 801009c:	f000 fd44 	bl	8010b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80100a0:	f001 fc38 	bl	8011914 <vPortEnterCritical>
 80100a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80100a8:	2bff      	cmp	r3, #255	; 0xff
 80100aa:	d101      	bne.n	80100b0 <xQueueGenericSend+0xb4>
 80100ac:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80100b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80100b4:	2bff      	cmp	r3, #255	; 0xff
 80100b6:	d101      	bne.n	80100bc <xQueueGenericSend+0xc0>
 80100b8:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80100bc:	f001 fc50 	bl	8011960 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80100c0:	a901      	add	r1, sp, #4
 80100c2:	a802      	add	r0, sp, #8
 80100c4:	f000 ff76 	bl	8010fb4 <xTaskCheckForTimeOut>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	d157      	bne.n	801017c <xQueueGenericSend+0x180>
	taskENTER_CRITICAL();
 80100cc:	f001 fc22 	bl	8011914 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80100d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80100d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d1c8      	bne.n	801006a <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 80100d8:	f001 fc42 	bl	8011960 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80100dc:	9901      	ldr	r1, [sp, #4]
 80100de:	f104 0010 	add.w	r0, r4, #16
 80100e2:	f000 fed7 	bl	8010e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80100e6:	4620      	mov	r0, r4
 80100e8:	f7ff fece 	bl	800fe88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80100ec:	f000 fddc 	bl	8010ca8 <xTaskResumeAll>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d1c1      	bne.n	8010078 <xQueueGenericSend+0x7c>
					portYIELD_WITHIN_API();
 80100f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80100f8:	f8ca 3000 	str.w	r3, [sl]
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	f3bf 8f6f 	isb	sy
 8010104:	e7b8      	b.n	8010078 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010106:	4632      	mov	r2, r6
 8010108:	4649      	mov	r1, r9
 801010a:	4620      	mov	r0, r4
 801010c:	f7ff fe6e 	bl	800fdec <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010112:	bb63      	cbnz	r3, 801016e <xQueueGenericSend+0x172>
					else if( xYieldRequired != pdFALSE )
 8010114:	b138      	cbz	r0, 8010126 <xQueueGenericSend+0x12a>
						queueYIELD_IF_USING_PREEMPTION();
 8010116:	4b1d      	ldr	r3, [pc, #116]	; (801018c <xQueueGenericSend+0x190>)
 8010118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801011c:	601a      	str	r2, [r3, #0]
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010126:	f001 fc1b 	bl	8011960 <vPortExitCritical>
				return pdPASS;
 801012a:	2001      	movs	r0, #1
}
 801012c:	b004      	add	sp, #16
 801012e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010132:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010134:	2a00      	cmp	r2, #0
 8010136:	f43f af6b 	beq.w	8010010 <xQueueGenericSend+0x14>
 801013a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013e:	b672      	cpsid	i
 8010140:	f383 8811 	msr	BASEPRI, r3
 8010144:	f3bf 8f6f 	isb	sy
 8010148:	f3bf 8f4f 	dsb	sy
 801014c:	b662      	cpsie	i
 801014e:	e7fe      	b.n	801014e <xQueueGenericSend+0x152>
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	b672      	cpsid	i
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	b662      	cpsie	i
 8010164:	e7fe      	b.n	8010164 <xQueueGenericSend+0x168>
					taskEXIT_CRITICAL();
 8010166:	f001 fbfb 	bl	8011960 <vPortExitCritical>
					return errQUEUE_FULL;
 801016a:	4628      	mov	r0, r5
 801016c:	e7de      	b.n	801012c <xQueueGenericSend+0x130>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801016e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010172:	f000 fecb 	bl	8010f0c <xTaskRemoveFromEventList>
 8010176:	2800      	cmp	r0, #0
 8010178:	d1cd      	bne.n	8010116 <xQueueGenericSend+0x11a>
 801017a:	e7d4      	b.n	8010126 <xQueueGenericSend+0x12a>
			prvUnlockQueue( pxQueue );
 801017c:	4620      	mov	r0, r4
 801017e:	f7ff fe83 	bl	800fe88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010182:	f000 fd91 	bl	8010ca8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8010186:	2000      	movs	r0, #0
 8010188:	e7d0      	b.n	801012c <xQueueGenericSend+0x130>
 801018a:	bf00      	nop
 801018c:	e000ed04 	.word	0xe000ed04

08010190 <xQueueCreateMutex>:
	{
 8010190:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010192:	4602      	mov	r2, r0
 8010194:	2100      	movs	r1, #0
 8010196:	2001      	movs	r0, #1
 8010198:	f7ff ff04 	bl	800ffa4 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 801019c:	4604      	mov	r4, r0
 801019e:	b138      	cbz	r0, 80101b0 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 80101a0:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80101a2:	e9c0 3300 	strd	r3, r3, [r0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80101a6:	461a      	mov	r2, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80101a8:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80101aa:	4619      	mov	r1, r3
 80101ac:	f7ff ff26 	bl	800fffc <xQueueGenericSend>
	}
 80101b0:	4620      	mov	r0, r4
 80101b2:	bd10      	pop	{r4, pc}

080101b4 <xQueueGenericSendFromISR>:
{
 80101b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d03e      	beq.n	801023a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101bc:	b379      	cbz	r1, 801021e <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80101be:	2b02      	cmp	r3, #2
 80101c0:	d10d      	bne.n	80101de <xQueueGenericSendFromISR+0x2a>
 80101c2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80101c4:	2c01      	cmp	r4, #1
 80101c6:	d00a      	beq.n	80101de <xQueueGenericSendFromISR+0x2a>
 80101c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101cc:	b672      	cpsid	i
 80101ce:	f383 8811 	msr	BASEPRI, r3
 80101d2:	f3bf 8f6f 	isb	sy
 80101d6:	f3bf 8f4f 	dsb	sy
 80101da:	b662      	cpsie	i
 80101dc:	e7fe      	b.n	80101dc <xQueueGenericSendFromISR+0x28>
 80101de:	4604      	mov	r4, r0
 80101e0:	461f      	mov	r7, r3
 80101e2:	4690      	mov	r8, r2
 80101e4:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101e6:	f001 fca3 	bl	8011b30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80101ea:	f3ef 8611 	mrs	r6, BASEPRI
 80101ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f2:	b672      	cpsid	i
 80101f4:	f383 8811 	msr	BASEPRI, r3
 80101f8:	f3bf 8f6f 	isb	sy
 80101fc:	f3bf 8f4f 	dsb	sy
 8010200:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010202:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010204:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010206:	429a      	cmp	r2, r3
 8010208:	d322      	bcc.n	8010250 <xQueueGenericSendFromISR+0x9c>
 801020a:	f1a7 0002 	sub.w	r0, r7, #2
 801020e:	fab0 f080 	clz	r0, r0
 8010212:	0940      	lsrs	r0, r0, #5
 8010214:	b9e0      	cbnz	r0, 8010250 <xQueueGenericSendFromISR+0x9c>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010216:	f386 8811 	msr	BASEPRI, r6
}
 801021a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801021e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8010220:	2c00      	cmp	r4, #0
 8010222:	d0cc      	beq.n	80101be <xQueueGenericSendFromISR+0xa>
	__asm volatile
 8010224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010228:	b672      	cpsid	i
 801022a:	f383 8811 	msr	BASEPRI, r3
 801022e:	f3bf 8f6f 	isb	sy
 8010232:	f3bf 8f4f 	dsb	sy
 8010236:	b662      	cpsie	i
 8010238:	e7fe      	b.n	8010238 <xQueueGenericSendFromISR+0x84>
 801023a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023e:	b672      	cpsid	i
 8010240:	f383 8811 	msr	BASEPRI, r3
 8010244:	f3bf 8f6f 	isb	sy
 8010248:	f3bf 8f4f 	dsb	sy
 801024c:	b662      	cpsie	i
 801024e:	e7fe      	b.n	801024e <xQueueGenericSendFromISR+0x9a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8010250:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010254:	463a      	mov	r2, r7
 8010256:	4649      	mov	r1, r9
 8010258:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 801025a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801025c:	f7ff fdc6 	bl	800fdec <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010260:	1c6b      	adds	r3, r5, #1
 8010262:	d008      	beq.n	8010276 <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010264:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8010266:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010268:	b25b      	sxtb	r3, r3
 801026a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 801026e:	f386 8811 	msr	BASEPRI, r6
}
 8010272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010278:	b90b      	cbnz	r3, 801027e <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 801027a:	2001      	movs	r0, #1
 801027c:	e7cb      	b.n	8010216 <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801027e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010282:	f000 fe43 	bl	8010f0c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8010286:	2800      	cmp	r0, #0
 8010288:	d0f7      	beq.n	801027a <xQueueGenericSendFromISR+0xc6>
 801028a:	f1b8 0f00 	cmp.w	r8, #0
 801028e:	d0f4      	beq.n	801027a <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010290:	2001      	movs	r0, #1
 8010292:	f8c8 0000 	str.w	r0, [r8]
 8010296:	e7be      	b.n	8010216 <xQueueGenericSendFromISR+0x62>

08010298 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8010298:	2800      	cmp	r0, #0
 801029a:	d032      	beq.n	8010302 <xQueueGiveFromISR+0x6a>
	configASSERT( pxQueue->uxItemSize == 0 );
 801029c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801029e:	b153      	cbz	r3, 80102b6 <xQueueGiveFromISR+0x1e>
	__asm volatile
 80102a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a4:	b672      	cpsid	i
 80102a6:	f383 8811 	msr	BASEPRI, r3
 80102aa:	f3bf 8f6f 	isb	sy
 80102ae:	f3bf 8f4f 	dsb	sy
 80102b2:	b662      	cpsie	i
 80102b4:	e7fe      	b.n	80102b4 <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80102b6:	6803      	ldr	r3, [r0, #0]
 80102b8:	b373      	cbz	r3, 8010318 <xQueueGiveFromISR+0x80>
{
 80102ba:	b570      	push	{r4, r5, r6, lr}
 80102bc:	4604      	mov	r4, r0
 80102be:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102c0:	f001 fc36 	bl	8011b30 <vPortValidateInterruptPriority>
	__asm volatile
 80102c4:	f3ef 8611 	mrs	r6, BASEPRI
 80102c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102cc:	b672      	cpsid	i
 80102ce:	f383 8811 	msr	BASEPRI, r3
 80102d2:	f3bf 8f6f 	isb	sy
 80102d6:	f3bf 8f4f 	dsb	sy
 80102da:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80102de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d92b      	bls.n	801033c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80102e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102e8:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80102ea:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102ec:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80102ee:	1c5a      	adds	r2, r3, #1
 80102f0:	d020      	beq.n	8010334 <xQueueGiveFromISR+0x9c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102f2:	3301      	adds	r3, #1
			xReturn = pdPASS;
 80102f4:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102f6:	b25b      	sxtb	r3, r3
 80102f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80102fc:	f386 8811 	msr	BASEPRI, r6
}
 8010300:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	b672      	cpsid	i
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	b662      	cpsie	i
 8010316:	e7fe      	b.n	8010316 <xQueueGiveFromISR+0x7e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010318:	6843      	ldr	r3, [r0, #4]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d0cd      	beq.n	80102ba <xQueueGiveFromISR+0x22>
 801031e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010322:	b672      	cpsid	i
 8010324:	f383 8811 	msr	BASEPRI, r3
 8010328:	f3bf 8f6f 	isb	sy
 801032c:	f3bf 8f4f 	dsb	sy
 8010330:	b662      	cpsie	i
 8010332:	e7fe      	b.n	8010332 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010336:	b91b      	cbnz	r3, 8010340 <xQueueGiveFromISR+0xa8>
			xReturn = pdPASS;
 8010338:	2001      	movs	r0, #1
 801033a:	e7df      	b.n	80102fc <xQueueGiveFromISR+0x64>
			xReturn = errQUEUE_FULL;
 801033c:	2000      	movs	r0, #0
 801033e:	e7dd      	b.n	80102fc <xQueueGiveFromISR+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010340:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010344:	f000 fde2 	bl	8010f0c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8010348:	2d00      	cmp	r5, #0
 801034a:	d0f5      	beq.n	8010338 <xQueueGiveFromISR+0xa0>
 801034c:	2800      	cmp	r0, #0
 801034e:	d0f3      	beq.n	8010338 <xQueueGiveFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010350:	2001      	movs	r0, #1
 8010352:	6028      	str	r0, [r5, #0]
 8010354:	e7d2      	b.n	80102fc <xQueueGiveFromISR+0x64>
 8010356:	bf00      	nop

08010358 <xQueueReceive>:
{
 8010358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801035c:	b085      	sub	sp, #20
 801035e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010360:	2800      	cmp	r0, #0
 8010362:	f000 809f 	beq.w	80104a4 <xQueueReceive+0x14c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010366:	2900      	cmp	r1, #0
 8010368:	f000 808d 	beq.w	8010486 <xQueueReceive+0x12e>
 801036c:	4604      	mov	r4, r0
 801036e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010370:	f000 fe76 	bl	8011060 <xTaskGetSchedulerState>
 8010374:	b960      	cbnz	r0, 8010390 <xQueueReceive+0x38>
 8010376:	9b01      	ldr	r3, [sp, #4]
 8010378:	b153      	cbz	r3, 8010390 <xQueueReceive+0x38>
 801037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037e:	b672      	cpsid	i
 8010380:	f383 8811 	msr	BASEPRI, r3
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	b662      	cpsie	i
 801038e:	e7fe      	b.n	801038e <xQueueReceive+0x36>
		taskENTER_CRITICAL();
 8010390:	f001 fac0 	bl	8011914 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010394:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010396:	2d00      	cmp	r5, #0
 8010398:	d144      	bne.n	8010424 <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 801039a:	9b01      	ldr	r3, [sp, #4]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d06c      	beq.n	801047a <xQueueReceive+0x122>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103a0:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 80103a2:	462e      	mov	r6, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80103a4:	f104 0924 	add.w	r9, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 80103a8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80104d8 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103ac:	f000 fdf6 	bl	8010f9c <vTaskInternalSetTimeOutState>
 80103b0:	e012      	b.n	80103d8 <xQueueReceive+0x80>
	taskENTER_CRITICAL();
 80103b2:	f001 faaf 	bl	8011914 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80103b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d048      	beq.n	801044e <xQueueReceive+0xf6>
	taskEXIT_CRITICAL();
 80103bc:	f001 fad0 	bl	8011960 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80103c0:	4620      	mov	r0, r4
 80103c2:	f7ff fd61 	bl	800fe88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80103c6:	f000 fc6f 	bl	8010ca8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80103ca:	f001 faa3 	bl	8011914 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103d0:	bb45      	cbnz	r5, 8010424 <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80103d2:	9b01      	ldr	r3, [sp, #4]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d050      	beq.n	801047a <xQueueReceive+0x122>
		taskEXIT_CRITICAL();
 80103d8:	f001 fac2 	bl	8011960 <vPortExitCritical>
		vTaskSuspendAll();
 80103dc:	f000 fba4 	bl	8010b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80103e0:	f001 fa98 	bl	8011914 <vPortEnterCritical>
 80103e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80103e8:	2bff      	cmp	r3, #255	; 0xff
 80103ea:	d02d      	beq.n	8010448 <xQueueReceive+0xf0>
 80103ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80103f0:	2bff      	cmp	r3, #255	; 0xff
 80103f2:	d026      	beq.n	8010442 <xQueueReceive+0xea>
 80103f4:	f001 fab4 	bl	8011960 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103f8:	a901      	add	r1, sp, #4
 80103fa:	a802      	add	r0, sp, #8
 80103fc:	f000 fdda 	bl	8010fb4 <xTaskCheckForTimeOut>
 8010400:	2800      	cmp	r0, #0
 8010402:	d0d6      	beq.n	80103b2 <xQueueReceive+0x5a>
			prvUnlockQueue( pxQueue );
 8010404:	4620      	mov	r0, r4
 8010406:	f7ff fd3f 	bl	800fe88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801040a:	f000 fc4d 	bl	8010ca8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 801040e:	f001 fa81 	bl	8011914 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010412:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010414:	b38b      	cbz	r3, 801047a <xQueueReceive+0x122>
	taskEXIT_CRITICAL();
 8010416:	f001 faa3 	bl	8011960 <vPortExitCritical>
		taskENTER_CRITICAL();
 801041a:	f001 fa7b 	bl	8011914 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801041e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010420:	2d00      	cmp	r5, #0
 8010422:	d0d6      	beq.n	80103d2 <xQueueReceive+0x7a>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010424:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010426:	4639      	mov	r1, r7
 8010428:	4620      	mov	r0, r4
 801042a:	f7ff fd1b 	bl	800fe64 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801042e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010430:	6923      	ldr	r3, [r4, #16]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d141      	bne.n	80104ba <xQueueReceive+0x162>
				taskEXIT_CRITICAL();
 8010436:	f001 fa93 	bl	8011960 <vPortExitCritical>
				return pdPASS;
 801043a:	2001      	movs	r0, #1
}
 801043c:	b005      	add	sp, #20
 801043e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		prvLockQueue( pxQueue );
 8010442:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 8010446:	e7d5      	b.n	80103f4 <xQueueReceive+0x9c>
 8010448:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 801044c:	e7ce      	b.n	80103ec <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 801044e:	f001 fa87 	bl	8011960 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010452:	9901      	ldr	r1, [sp, #4]
 8010454:	4648      	mov	r0, r9
 8010456:	f000 fd1d 	bl	8010e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801045a:	4620      	mov	r0, r4
 801045c:	f7ff fd14 	bl	800fe88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010460:	f000 fc22 	bl	8010ca8 <xTaskResumeAll>
 8010464:	2800      	cmp	r0, #0
 8010466:	d1d8      	bne.n	801041a <xQueueReceive+0xc2>
					portYIELD_WITHIN_API();
 8010468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801046c:	f8c8 3000 	str.w	r3, [r8]
 8010470:	f3bf 8f4f 	dsb	sy
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	e7cf      	b.n	801041a <xQueueReceive+0xc2>
					taskEXIT_CRITICAL();
 801047a:	f001 fa71 	bl	8011960 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801047e:	2000      	movs	r0, #0
}
 8010480:	b005      	add	sp, #20
 8010482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010486:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010488:	2b00      	cmp	r3, #0
 801048a:	f43f af6f 	beq.w	801036c <xQueueReceive+0x14>
 801048e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010492:	b672      	cpsid	i
 8010494:	f383 8811 	msr	BASEPRI, r3
 8010498:	f3bf 8f6f 	isb	sy
 801049c:	f3bf 8f4f 	dsb	sy
 80104a0:	b662      	cpsie	i
 80104a2:	e7fe      	b.n	80104a2 <xQueueReceive+0x14a>
 80104a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a8:	b672      	cpsid	i
 80104aa:	f383 8811 	msr	BASEPRI, r3
 80104ae:	f3bf 8f6f 	isb	sy
 80104b2:	f3bf 8f4f 	dsb	sy
 80104b6:	b662      	cpsie	i
 80104b8:	e7fe      	b.n	80104b8 <xQueueReceive+0x160>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104ba:	f104 0010 	add.w	r0, r4, #16
 80104be:	f000 fd25 	bl	8010f0c <xTaskRemoveFromEventList>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d0b7      	beq.n	8010436 <xQueueReceive+0xde>
						queueYIELD_IF_USING_PREEMPTION();
 80104c6:	4b04      	ldr	r3, [pc, #16]	; (80104d8 <xQueueReceive+0x180>)
 80104c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	f3bf 8f6f 	isb	sy
 80104d6:	e7ae      	b.n	8010436 <xQueueReceive+0xde>
 80104d8:	e000ed04 	.word	0xe000ed04

080104dc <xQueueSemaphoreTake>:
{
 80104dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e0:	b084      	sub	sp, #16
 80104e2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80104e4:	b160      	cbz	r0, 8010500 <xQueueSemaphoreTake+0x24>
	configASSERT( pxQueue->uxItemSize == 0 );
 80104e6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80104e8:	b1ad      	cbz	r5, 8010516 <xQueueSemaphoreTake+0x3a>
 80104ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ee:	b672      	cpsid	i
 80104f0:	f383 8811 	msr	BASEPRI, r3
 80104f4:	f3bf 8f6f 	isb	sy
 80104f8:	f3bf 8f4f 	dsb	sy
 80104fc:	b662      	cpsie	i
 80104fe:	e7fe      	b.n	80104fe <xQueueSemaphoreTake+0x22>
 8010500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010504:	b672      	cpsid	i
 8010506:	f383 8811 	msr	BASEPRI, r3
 801050a:	f3bf 8f6f 	isb	sy
 801050e:	f3bf 8f4f 	dsb	sy
 8010512:	b662      	cpsie	i
 8010514:	e7fe      	b.n	8010514 <xQueueSemaphoreTake+0x38>
 8010516:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010518:	f000 fda2 	bl	8011060 <xTaskGetSchedulerState>
 801051c:	b960      	cbnz	r0, 8010538 <xQueueSemaphoreTake+0x5c>
 801051e:	9d01      	ldr	r5, [sp, #4]
 8010520:	b155      	cbz	r5, 8010538 <xQueueSemaphoreTake+0x5c>
 8010522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010526:	b672      	cpsid	i
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	b662      	cpsie	i
 8010536:	e7fe      	b.n	8010536 <xQueueSemaphoreTake+0x5a>
 8010538:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 801053a:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 801053c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8010684 <xQueueSemaphoreTake+0x1a8>
 8010540:	e00c      	b.n	801055c <xQueueSemaphoreTake+0x80>
	taskENTER_CRITICAL();
 8010542:	f001 f9e7 	bl	8011914 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010548:	2b00      	cmp	r3, #0
 801054a:	d039      	beq.n	80105c0 <xQueueSemaphoreTake+0xe4>
	taskEXIT_CRITICAL();
 801054c:	f001 fa08 	bl	8011960 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8010550:	4620      	mov	r0, r4
 8010552:	f7ff fc99 	bl	800fe88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010556:	f000 fba7 	bl	8010ca8 <xTaskResumeAll>
 801055a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801055c:	f001 f9da 	bl	8011914 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010562:	2b00      	cmp	r3, #0
 8010564:	d171      	bne.n	801064a <xQueueSemaphoreTake+0x16e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010566:	9b01      	ldr	r3, [sp, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d061      	beq.n	8010630 <xQueueSemaphoreTake+0x154>
				else if( xEntryTimeSet == pdFALSE )
 801056c:	b916      	cbnz	r6, 8010574 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801056e:	a802      	add	r0, sp, #8
 8010570:	f000 fd14 	bl	8010f9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010574:	f001 f9f4 	bl	8011960 <vPortExitCritical>
		vTaskSuspendAll();
 8010578:	f000 fad6 	bl	8010b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801057c:	f001 f9ca 	bl	8011914 <vPortEnterCritical>
 8010580:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010584:	2bff      	cmp	r3, #255	; 0xff
 8010586:	d101      	bne.n	801058c <xQueueSemaphoreTake+0xb0>
 8010588:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 801058c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010590:	2bff      	cmp	r3, #255	; 0xff
 8010592:	d101      	bne.n	8010598 <xQueueSemaphoreTake+0xbc>
 8010594:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010598:	f001 f9e2 	bl	8011960 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801059c:	a901      	add	r1, sp, #4
 801059e:	a802      	add	r0, sp, #8
 80105a0:	f000 fd08 	bl	8010fb4 <xTaskCheckForTimeOut>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	d0cc      	beq.n	8010542 <xQueueSemaphoreTake+0x66>
			prvUnlockQueue( pxQueue );
 80105a8:	4620      	mov	r0, r4
 80105aa:	f7ff fc6d 	bl	800fe88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105ae:	f000 fb7b 	bl	8010ca8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80105b2:	f001 f9af 	bl	8011914 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80105b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80105b8:	b1db      	cbz	r3, 80105f2 <xQueueSemaphoreTake+0x116>
	taskEXIT_CRITICAL();
 80105ba:	f001 f9d1 	bl	8011960 <vPortExitCritical>
 80105be:	e7cc      	b.n	801055a <xQueueSemaphoreTake+0x7e>
 80105c0:	f001 f9ce 	bl	8011960 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80105c4:	6823      	ldr	r3, [r4, #0]
 80105c6:	b1db      	cbz	r3, 8010600 <xQueueSemaphoreTake+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80105c8:	9901      	ldr	r1, [sp, #4]
 80105ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80105ce:	f000 fc61 	bl	8010e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80105d2:	4620      	mov	r0, r4
 80105d4:	f7ff fc58 	bl	800fe88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80105d8:	f000 fb66 	bl	8010ca8 <xTaskResumeAll>
 80105dc:	2800      	cmp	r0, #0
 80105de:	d1bc      	bne.n	801055a <xQueueSemaphoreTake+0x7e>
					portYIELD_WITHIN_API();
 80105e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80105e4:	f8c8 3000 	str.w	r3, [r8]
 80105e8:	f3bf 8f4f 	dsb	sy
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	e7b3      	b.n	801055a <xQueueSemaphoreTake+0x7e>
	taskEXIT_CRITICAL();
 80105f2:	f001 f9b5 	bl	8011960 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80105f6:	b965      	cbnz	r5, 8010612 <xQueueSemaphoreTake+0x136>
}
 80105f8:	4628      	mov	r0, r5
 80105fa:	b004      	add	sp, #16
 80105fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskENTER_CRITICAL();
 8010600:	f001 f988 	bl	8011914 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010604:	6860      	ldr	r0, [r4, #4]
 8010606:	f000 fd3b 	bl	8011080 <xTaskPriorityInherit>
 801060a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 801060c:	f001 f9a8 	bl	8011960 <vPortExitCritical>
 8010610:	e7da      	b.n	80105c8 <xQueueSemaphoreTake+0xec>
						taskENTER_CRITICAL();
 8010612:	f001 f97f 	bl	8011914 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010616:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010618:	b119      	cbz	r1, 8010622 <xQueueSemaphoreTake+0x146>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801061a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801061c:	6819      	ldr	r1, [r3, #0]
 801061e:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010622:	6860      	ldr	r0, [r4, #4]
				return errQUEUE_EMPTY;
 8010624:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010626:	f000 fde1 	bl	80111ec <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801062a:	f001 f999 	bl	8011960 <vPortExitCritical>
 801062e:	e7e3      	b.n	80105f8 <xQueueSemaphoreTake+0x11c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010630:	2d00      	cmp	r5, #0
 8010632:	d0fa      	beq.n	801062a <xQueueSemaphoreTake+0x14e>
 8010634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010638:	b672      	cpsid	i
 801063a:	f383 8811 	msr	BASEPRI, r3
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	f3bf 8f4f 	dsb	sy
 8010646:	b662      	cpsie	i
 8010648:	e7fe      	b.n	8010648 <xQueueSemaphoreTake+0x16c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801064a:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801064c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801064e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010650:	b912      	cbnz	r2, 8010658 <xQueueSemaphoreTake+0x17c>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010652:	f000 fe2d 	bl	80112b0 <pvTaskIncrementMutexHeldCount>
 8010656:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010658:	6923      	ldr	r3, [r4, #16]
 801065a:	b91b      	cbnz	r3, 8010664 <xQueueSemaphoreTake+0x188>
				taskEXIT_CRITICAL();
 801065c:	f001 f980 	bl	8011960 <vPortExitCritical>
				return pdPASS;
 8010660:	2501      	movs	r5, #1
 8010662:	e7c9      	b.n	80105f8 <xQueueSemaphoreTake+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010664:	f104 0010 	add.w	r0, r4, #16
 8010668:	f000 fc50 	bl	8010f0c <xTaskRemoveFromEventList>
 801066c:	2800      	cmp	r0, #0
 801066e:	d0f5      	beq.n	801065c <xQueueSemaphoreTake+0x180>
						queueYIELD_IF_USING_PREEMPTION();
 8010670:	4b04      	ldr	r3, [pc, #16]	; (8010684 <xQueueSemaphoreTake+0x1a8>)
 8010672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010676:	601a      	str	r2, [r3, #0]
 8010678:	f3bf 8f4f 	dsb	sy
 801067c:	f3bf 8f6f 	isb	sy
 8010680:	e7ec      	b.n	801065c <xQueueSemaphoreTake+0x180>
 8010682:	bf00      	nop
 8010684:	e000ed04 	.word	0xe000ed04

08010688 <xQueueReceiveFromISR>:
{
 8010688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801068c:	b1c8      	cbz	r0, 80106c2 <xQueueReceiveFromISR+0x3a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801068e:	2900      	cmp	r1, #0
 8010690:	d033      	beq.n	80106fa <xQueueReceiveFromISR+0x72>
 8010692:	4605      	mov	r5, r0
 8010694:	4690      	mov	r8, r2
 8010696:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010698:	f001 fa4a 	bl	8011b30 <vPortValidateInterruptPriority>
	__asm volatile
 801069c:	f3ef 8711 	mrs	r7, BASEPRI
 80106a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a4:	b672      	cpsid	i
 80106a6:	f383 8811 	msr	BASEPRI, r3
 80106aa:	f3bf 8f6f 	isb	sy
 80106ae:	f3bf 8f4f 	dsb	sy
 80106b2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106b4:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80106b6:	b97c      	cbnz	r4, 80106d8 <xQueueReceiveFromISR+0x50>
			xReturn = pdFAIL;
 80106b8:	4620      	mov	r0, r4
	__asm volatile
 80106ba:	f387 8811 	msr	BASEPRI, r7
}
 80106be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c6:	b672      	cpsid	i
 80106c8:	f383 8811 	msr	BASEPRI, r3
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	f3bf 8f4f 	dsb	sy
 80106d4:	b662      	cpsie	i
 80106d6:	e7fe      	b.n	80106d6 <xQueueReceiveFromISR+0x4e>
			const int8_t cRxLock = pxQueue->cRxLock;
 80106d8:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80106dc:	4649      	mov	r1, r9
 80106de:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106e0:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 80106e2:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80106e4:	f7ff fbbe 	bl	800fe64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106e8:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80106ea:	1c73      	adds	r3, r6, #1
 80106ec:	d013      	beq.n	8010716 <xQueueReceiveFromISR+0x8e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80106ee:	1c73      	adds	r3, r6, #1
			xReturn = pdPASS;
 80106f0:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80106f2:	b25b      	sxtb	r3, r3
 80106f4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80106f8:	e7df      	b.n	80106ba <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d0c8      	beq.n	8010692 <xQueueReceiveFromISR+0xa>
 8010700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010704:	b672      	cpsid	i
 8010706:	f383 8811 	msr	BASEPRI, r3
 801070a:	f3bf 8f6f 	isb	sy
 801070e:	f3bf 8f4f 	dsb	sy
 8010712:	b662      	cpsie	i
 8010714:	e7fe      	b.n	8010714 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010716:	692b      	ldr	r3, [r5, #16]
 8010718:	b90b      	cbnz	r3, 801071e <xQueueReceiveFromISR+0x96>
			xReturn = pdPASS;
 801071a:	2001      	movs	r0, #1
 801071c:	e7cd      	b.n	80106ba <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801071e:	f105 0010 	add.w	r0, r5, #16
 8010722:	f000 fbf3 	bl	8010f0c <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8010726:	f1b8 0f00 	cmp.w	r8, #0
 801072a:	d0f6      	beq.n	801071a <xQueueReceiveFromISR+0x92>
 801072c:	2800      	cmp	r0, #0
 801072e:	d0f4      	beq.n	801071a <xQueueReceiveFromISR+0x92>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010730:	2001      	movs	r0, #1
 8010732:	f8c8 0000 	str.w	r0, [r8]
 8010736:	e7c0      	b.n	80106ba <xQueueReceiveFromISR+0x32>

08010738 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010738:	2300      	movs	r3, #0
 801073a:	4a08      	ldr	r2, [pc, #32]	; (801075c <vQueueAddToRegistry+0x24>)
	{
 801073c:	b430      	push	{r4, r5}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801073e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8010742:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010746:	b124      	cbz	r4, 8010752 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010748:	3301      	adds	r3, #1
 801074a:	2b08      	cmp	r3, #8
 801074c:	d1f7      	bne.n	801073e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801074e:	bc30      	pop	{r4, r5}
 8010750:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010752:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010754:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 8010758:	bc30      	pop	{r4, r5}
 801075a:	4770      	bx	lr
 801075c:	200259a4 	.word	0x200259a4

08010760 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010760:	b570      	push	{r4, r5, r6, lr}
 8010762:	4604      	mov	r4, r0
 8010764:	460d      	mov	r5, r1
 8010766:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010768:	f001 f8d4 	bl	8011914 <vPortEnterCritical>
 801076c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010770:	2bff      	cmp	r3, #255	; 0xff
 8010772:	d102      	bne.n	801077a <vQueueWaitForMessageRestricted+0x1a>
 8010774:	2300      	movs	r3, #0
 8010776:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801077a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801077e:	2bff      	cmp	r3, #255	; 0xff
 8010780:	d102      	bne.n	8010788 <vQueueWaitForMessageRestricted+0x28>
 8010782:	2300      	movs	r3, #0
 8010784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010788:	f001 f8ea 	bl	8011960 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801078c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801078e:	b92b      	cbnz	r3, 801079c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010790:	4632      	mov	r2, r6
 8010792:	4629      	mov	r1, r5
 8010794:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010798:	f000 fb98 	bl	8010ecc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801079c:	4620      	mov	r0, r4
	}
 801079e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80107a2:	f7ff bb71 	b.w	800fe88 <prvUnlockQueue>
 80107a6:	bf00      	nop

080107a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80107a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80107aa:	4b1a      	ldr	r3, [pc, #104]	; (8010814 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 80107ac:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107ae:	4d1a      	ldr	r5, [pc, #104]	; (8010818 <prvAddCurrentTaskToDelayedList+0x70>)
{
 80107b0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80107b2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107b4:	6828      	ldr	r0, [r5, #0]
 80107b6:	3004      	adds	r0, #4
 80107b8:	f7ff fb04 	bl	800fdc4 <uxListRemove>
 80107bc:	b940      	cbnz	r0, 80107d0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80107be:	682b      	ldr	r3, [r5, #0]
 80107c0:	2201      	movs	r2, #1
 80107c2:	4916      	ldr	r1, [pc, #88]	; (801081c <prvAddCurrentTaskToDelayedList+0x74>)
 80107c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80107c6:	680b      	ldr	r3, [r1, #0]
 80107c8:	4082      	lsls	r2, r0
 80107ca:	ea23 0302 	bic.w	r3, r3, r2
 80107ce:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80107d0:	1c73      	adds	r3, r6, #1
 80107d2:	d100      	bne.n	80107d6 <prvAddCurrentTaskToDelayedList+0x2e>
 80107d4:	b9bf      	cbnz	r7, 8010806 <prvAddCurrentTaskToDelayedList+0x5e>
 80107d6:	19a4      	adds	r4, r4, r6
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80107d8:	682b      	ldr	r3, [r5, #0]
 80107da:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80107dc:	d20b      	bcs.n	80107f6 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107de:	4b10      	ldr	r3, [pc, #64]	; (8010820 <prvAddCurrentTaskToDelayedList+0x78>)
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	6829      	ldr	r1, [r5, #0]
 80107e4:	3104      	adds	r1, #4
 80107e6:	f7ff fad3 	bl	800fd90 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80107ea:	4b0e      	ldr	r3, [pc, #56]	; (8010824 <prvAddCurrentTaskToDelayedList+0x7c>)
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	42a2      	cmp	r2, r4
 80107f0:	d900      	bls.n	80107f4 <prvAddCurrentTaskToDelayedList+0x4c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80107f2:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80107f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107f6:	4b0c      	ldr	r3, [pc, #48]	; (8010828 <prvAddCurrentTaskToDelayedList+0x80>)
 80107f8:	6818      	ldr	r0, [r3, #0]
 80107fa:	6829      	ldr	r1, [r5, #0]
}
 80107fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010800:	3104      	adds	r1, #4
 8010802:	f7ff bac5 	b.w	800fd90 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010806:	6829      	ldr	r1, [r5, #0]
 8010808:	4808      	ldr	r0, [pc, #32]	; (801082c <prvAddCurrentTaskToDelayedList+0x84>)
 801080a:	3104      	adds	r1, #4
}
 801080c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010810:	f7ff baae 	b.w	800fd70 <vListInsertEnd>
 8010814:	20000a0c 	.word	0x20000a0c
 8010818:	200008e8 	.word	0x200008e8
 801081c:	20000994 	.word	0x20000994
 8010820:	200008ec 	.word	0x200008ec
 8010824:	200009c4 	.word	0x200009c4
 8010828:	200008f0 	.word	0x200008f0
 801082c:	200009e4 	.word	0x200009e4

08010830 <prvIdleTask>:
{
 8010830:	b580      	push	{r7, lr}
 8010832:	4d17      	ldr	r5, [pc, #92]	; (8010890 <prvIdleTask+0x60>)
				taskYIELD();
 8010834:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8010838:	4f16      	ldr	r7, [pc, #88]	; (8010894 <prvIdleTask+0x64>)
 801083a:	4e17      	ldr	r6, [pc, #92]	; (8010898 <prvIdleTask+0x68>)
 801083c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 801089c <prvIdleTask+0x6c>
 8010840:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80108a0 <prvIdleTask+0x70>
 8010844:	e014      	b.n	8010870 <prvIdleTask+0x40>
			taskENTER_CRITICAL();
 8010846:	f001 f865 	bl	8011914 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801084e:	1d20      	adds	r0, r4, #4
 8010850:	f7ff fab8 	bl	800fdc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010854:	6833      	ldr	r3, [r6, #0]
 8010856:	3b01      	subs	r3, #1
 8010858:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 801085a:	682b      	ldr	r3, [r5, #0]
 801085c:	3b01      	subs	r3, #1
 801085e:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8010860:	f001 f87e 	bl	8011960 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8010864:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010866:	f001 fa5b 	bl	8011d20 <vPortFree>
			vPortFree( pxTCB );
 801086a:	4620      	mov	r0, r4
 801086c:	f001 fa58 	bl	8011d20 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010870:	682b      	ldr	r3, [r5, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d1e7      	bne.n	8010846 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010876:	f8d8 3000 	ldr.w	r3, [r8]
 801087a:	2b01      	cmp	r3, #1
 801087c:	d905      	bls.n	801088a <prvIdleTask+0x5a>
				taskYIELD();
 801087e:	f8c9 a000 	str.w	sl, [r9]
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 801088a:	f7f0 f98b 	bl	8000ba4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801088e:	e7ef      	b.n	8010870 <prvIdleTask+0x40>
 8010890:	20000984 	.word	0x20000984
 8010894:	200009f8 	.word	0x200009f8
 8010898:	20000980 	.word	0x20000980
 801089c:	200008f4 	.word	0x200008f4
 80108a0:	e000ed04 	.word	0xe000ed04

080108a4 <prvResetNextTaskUnblockTime.part.1>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80108a4:	4a03      	ldr	r2, [pc, #12]	; (80108b4 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80108a6:	4b04      	ldr	r3, [pc, #16]	; (80108b8 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80108a8:	6812      	ldr	r2, [r2, #0]
 80108aa:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80108ac:	68d2      	ldr	r2, [r2, #12]
 80108ae:	6852      	ldr	r2, [r2, #4]
 80108b0:	601a      	str	r2, [r3, #0]
}
 80108b2:	4770      	bx	lr
 80108b4:	200008ec 	.word	0x200008ec
 80108b8:	200009c4 	.word	0x200009c4

080108bc <xTaskCreate>:
	{
 80108bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108c0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80108c4:	4607      	mov	r7, r0
 80108c6:	460d      	mov	r5, r1
 80108c8:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ca:	4650      	mov	r0, sl
	{
 80108cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ce:	f001 f989 	bl	8011be4 <pvPortMalloc>
			if( pxStack != NULL )
 80108d2:	2800      	cmp	r0, #0
 80108d4:	f000 80c2 	beq.w	8010a5c <xTaskCreate+0x1a0>
 80108d8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80108da:	2054      	movs	r0, #84	; 0x54
 80108dc:	f001 f982 	bl	8011be4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80108e0:	4604      	mov	r4, r0
 80108e2:	2800      	cmp	r0, #0
 80108e4:	f000 808e 	beq.w	8010a04 <xTaskCreate+0x148>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80108e8:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80108ec:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
 80108f0:	1e6b      	subs	r3, r5, #1
 80108f2:	f105 010f 	add.w	r1, r5, #15
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80108f6:	44d1      	add	r9, sl
 80108f8:	f100 0233 	add.w	r2, r0, #51	; 0x33
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80108fc:	f029 0907 	bic.w	r9, r9, #7
 8010900:	e001      	b.n	8010906 <xTaskCreate+0x4a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010902:	428b      	cmp	r3, r1
 8010904:	d006      	beq.n	8010914 <xTaskCreate+0x58>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010906:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 801090a:	f802 5f01 	strb.w	r5, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 801090e:	781d      	ldrb	r5, [r3, #0]
 8010910:	2d00      	cmp	r5, #0
 8010912:	d1f6      	bne.n	8010902 <xTaskCreate+0x46>
 8010914:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010916:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801091a:	f104 0a04 	add.w	sl, r4, #4
 801091e:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010920:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010924:	4650      	mov	r0, sl
		pxNewTCB->uxMutexesHeld = 0;
 8010926:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 801092a:	bf28      	it	cs
 801092c:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 801092e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8010930:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010932:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010936:	f7ff fa17 	bl	800fd68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801093a:	f104 0018 	add.w	r0, r4, #24
 801093e:	f7ff fa13 	bl	800fd68 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8010942:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010946:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010948:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801094a:	4639      	mov	r1, r7
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801094c:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010950:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010952:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010954:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010956:	f000 ffad 	bl	80118b4 <pxPortInitialiseStack>
 801095a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 801095c:	b106      	cbz	r6, 8010960 <xTaskCreate+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801095e:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8010960:	f000 ffd8 	bl	8011914 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8010964:	4a3f      	ldr	r2, [pc, #252]	; (8010a64 <xTaskCreate+0x1a8>)
		if( pxCurrentTCB == NULL )
 8010966:	4e40      	ldr	r6, [pc, #256]	; (8010a68 <xTaskCreate+0x1ac>)
		uxCurrentNumberOfTasks++;
 8010968:	6813      	ldr	r3, [r2, #0]
 801096a:	3301      	adds	r3, #1
 801096c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801096e:	6833      	ldr	r3, [r6, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d03e      	beq.n	80109f2 <xTaskCreate+0x136>
			if( xSchedulerRunning == pdFALSE )
 8010974:	4f3d      	ldr	r7, [pc, #244]	; (8010a6c <xTaskCreate+0x1b0>)
 8010976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	b37a      	cbz	r2, 80109dc <xTaskCreate+0x120>
 801097c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8010a8c <xTaskCreate+0x1d0>
		uxTaskNumber++;
 8010980:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8010a90 <xTaskCreate+0x1d4>
		prvAddTaskToReadyList( pxNewTCB );
 8010984:	f04f 0b01 	mov.w	fp, #1
 8010988:	f8df c108 	ldr.w	ip, [pc, #264]	; 8010a94 <xTaskCreate+0x1d8>
 801098c:	4651      	mov	r1, sl
		uxTaskNumber++;
 801098e:	f8de 5000 	ldr.w	r5, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8010992:	fa0b f203 	lsl.w	r2, fp, r3
 8010996:	f8dc 0000 	ldr.w	r0, [ip]
 801099a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 801099e:	eb05 090b 	add.w	r9, r5, fp
		prvAddTaskToReadyList( pxNewTCB );
 80109a2:	4302      	orrs	r2, r0
 80109a4:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 80109a8:	f8ce 9000 	str.w	r9, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 80109ac:	f8cc 2000 	str.w	r2, [ip]
 80109b0:	f7ff f9de 	bl	800fd70 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80109b4:	f000 ffd4 	bl	8011960 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	b1bb      	cbz	r3, 80109ec <xTaskCreate+0x130>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80109bc:	6832      	ldr	r2, [r6, #0]
 80109be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80109c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d212      	bcs.n	80109ec <xTaskCreate+0x130>
			taskYIELD_IF_USING_PREEMPTION();
 80109c6:	4b2a      	ldr	r3, [pc, #168]	; (8010a70 <xTaskCreate+0x1b4>)
 80109c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109cc:	601a      	str	r2, [r3, #0]
 80109ce:	f3bf 8f4f 	dsb	sy
 80109d2:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 80109d6:	4658      	mov	r0, fp
	}
 80109d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80109dc:	6832      	ldr	r2, [r6, #0]
 80109de:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8010a8c <xTaskCreate+0x1d0>
 80109e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d8cb      	bhi.n	8010980 <xTaskCreate+0xc4>
					pxCurrentTCB = pxNewTCB;
 80109e8:	6034      	str	r4, [r6, #0]
 80109ea:	e7c9      	b.n	8010980 <xTaskCreate+0xc4>
			xReturn = pdPASS;
 80109ec:	4658      	mov	r0, fp
	}
 80109ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 80109f2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80109f4:	6813      	ldr	r3, [r2, #0]
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d00b      	beq.n	8010a12 <xTaskCreate+0x156>
 80109fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80109fc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8010a8c <xTaskCreate+0x1d0>
 8010a00:	4f1a      	ldr	r7, [pc, #104]	; (8010a6c <xTaskCreate+0x1b0>)
 8010a02:	e7bd      	b.n	8010980 <xTaskCreate+0xc4>
					vPortFree( pxStack );
 8010a04:	4648      	mov	r0, r9
 8010a06:	f001 f98b 	bl	8011d20 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010a0a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8010a0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a12:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8010a8c <xTaskCreate+0x1d0>
 8010a16:	4645      	mov	r5, r8
 8010a18:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	3514      	adds	r5, #20
 8010a20:	f7ff f996 	bl	800fd50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a24:	42af      	cmp	r7, r5
 8010a26:	d1f9      	bne.n	8010a1c <xTaskCreate+0x160>
	vListInitialise( &xDelayedTaskList1 );
 8010a28:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8010a98 <xTaskCreate+0x1dc>
	vListInitialise( &xDelayedTaskList2 );
 8010a2c:	4d11      	ldr	r5, [pc, #68]	; (8010a74 <xTaskCreate+0x1b8>)
	vListInitialise( &xDelayedTaskList1 );
 8010a2e:	4648      	mov	r0, r9
 8010a30:	4f0e      	ldr	r7, [pc, #56]	; (8010a6c <xTaskCreate+0x1b0>)
 8010a32:	f7ff f98d 	bl	800fd50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010a36:	4628      	mov	r0, r5
 8010a38:	f7ff f98a 	bl	800fd50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010a3c:	480e      	ldr	r0, [pc, #56]	; (8010a78 <xTaskCreate+0x1bc>)
 8010a3e:	f7ff f987 	bl	800fd50 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8010a42:	480e      	ldr	r0, [pc, #56]	; (8010a7c <xTaskCreate+0x1c0>)
 8010a44:	f7ff f984 	bl	800fd50 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8010a48:	480d      	ldr	r0, [pc, #52]	; (8010a80 <xTaskCreate+0x1c4>)
 8010a4a:	f7ff f981 	bl	800fd50 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010a4e:	4b0d      	ldr	r3, [pc, #52]	; (8010a84 <xTaskCreate+0x1c8>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8010a50:	4a0d      	ldr	r2, [pc, #52]	; (8010a88 <xTaskCreate+0x1cc>)
 8010a52:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010a56:	601d      	str	r5, [r3, #0]
 8010a58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010a5a:	e791      	b.n	8010980 <xTaskCreate+0xc4>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a60:	e7ba      	b.n	80109d8 <xTaskCreate+0x11c>
 8010a62:	bf00      	nop
 8010a64:	20000980 	.word	0x20000980
 8010a68:	200008e8 	.word	0x200008e8
 8010a6c:	200009e0 	.word	0x200009e0
 8010a70:	e000ed04 	.word	0xe000ed04
 8010a74:	200009ac 	.word	0x200009ac
 8010a78:	200009cc 	.word	0x200009cc
 8010a7c:	200009f8 	.word	0x200009f8
 8010a80:	200009e4 	.word	0x200009e4
 8010a84:	200008f0 	.word	0x200008f0
 8010a88:	200008ec 	.word	0x200008ec
 8010a8c:	200008f4 	.word	0x200008f4
 8010a90:	20000990 	.word	0x20000990
 8010a94:	20000994 	.word	0x20000994
 8010a98:	20000998 	.word	0x20000998

08010a9c <vTaskStartScheduler>:
{
 8010a9c:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8010a9e:	4b1c      	ldr	r3, [pc, #112]	; (8010b10 <vTaskStartScheduler+0x74>)
{
 8010aa0:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8010aa2:	2400      	movs	r4, #0
 8010aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	491a      	ldr	r1, [pc, #104]	; (8010b14 <vTaskStartScheduler+0x78>)
 8010aac:	4623      	mov	r3, r4
 8010aae:	9400      	str	r4, [sp, #0]
 8010ab0:	4819      	ldr	r0, [pc, #100]	; (8010b18 <vTaskStartScheduler+0x7c>)
 8010ab2:	f7ff ff03 	bl	80108bc <xTaskCreate>
		if( xReturn == pdPASS )
 8010ab6:	2801      	cmp	r0, #1
 8010ab8:	d003      	beq.n	8010ac2 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010aba:	3001      	adds	r0, #1
 8010abc:	d01c      	beq.n	8010af8 <vTaskStartScheduler+0x5c>
}
 8010abe:	b003      	add	sp, #12
 8010ac0:	bd30      	pop	{r4, r5, pc}
			xReturn = xTimerCreateTimerTask();
 8010ac2:	f000 fcfd 	bl	80114c0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8010ac6:	2801      	cmp	r0, #1
 8010ac8:	d1f7      	bne.n	8010aba <vTaskStartScheduler+0x1e>
 8010aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ace:	b672      	cpsid	i
 8010ad0:	f383 8811 	msr	BASEPRI, r3
 8010ad4:	f3bf 8f6f 	isb	sy
 8010ad8:	f3bf 8f4f 	dsb	sy
 8010adc:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8010ade:	490f      	ldr	r1, [pc, #60]	; (8010b1c <vTaskStartScheduler+0x80>)
 8010ae0:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8010ae4:	4a0e      	ldr	r2, [pc, #56]	; (8010b20 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) 0U;
 8010ae6:	4b0f      	ldr	r3, [pc, #60]	; (8010b24 <vTaskStartScheduler+0x88>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8010ae8:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8010aea:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8010aec:	601c      	str	r4, [r3, #0]
}
 8010aee:	b003      	add	sp, #12
 8010af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8010af4:	f000 bfb4 	b.w	8011a60 <xPortStartScheduler>
 8010af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afc:	b672      	cpsid	i
 8010afe:	f383 8811 	msr	BASEPRI, r3
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	b662      	cpsie	i
 8010b0c:	e7fe      	b.n	8010b0c <vTaskStartScheduler+0x70>
 8010b0e:	bf00      	nop
 8010b10:	200009c0 	.word	0x200009c0
 8010b14:	08023648 	.word	0x08023648
 8010b18:	08010831 	.word	0x08010831
 8010b1c:	200009c4 	.word	0x200009c4
 8010b20:	200009e0 	.word	0x200009e0
 8010b24:	20000a0c 	.word	0x20000a0c

08010b28 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010b28:	4a02      	ldr	r2, [pc, #8]	; (8010b34 <vTaskSuspendAll+0xc>)
 8010b2a:	6813      	ldr	r3, [r2, #0]
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	6013      	str	r3, [r2, #0]
}
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop
 8010b34:	2000098c 	.word	0x2000098c

08010b38 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010b38:	4b01      	ldr	r3, [pc, #4]	; (8010b40 <xTaskGetTickCount+0x8>)
 8010b3a:	6818      	ldr	r0, [r3, #0]
}
 8010b3c:	4770      	bx	lr
 8010b3e:	bf00      	nop
 8010b40:	20000a0c 	.word	0x20000a0c

08010b44 <xTaskGetTickCountFromISR>:
{
 8010b44:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b46:	f000 fff3 	bl	8011b30 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8010b4a:	4b01      	ldr	r3, [pc, #4]	; (8010b50 <xTaskGetTickCountFromISR+0xc>)
 8010b4c:	6818      	ldr	r0, [r3, #0]
}
 8010b4e:	bd08      	pop	{r3, pc}
 8010b50:	20000a0c 	.word	0x20000a0c

08010b54 <xTaskIncrementTick>:
{
 8010b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b58:	4b48      	ldr	r3, [pc, #288]	; (8010c7c <xTaskIncrementTick+0x128>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	b9bb      	cbnz	r3, 8010b8e <xTaskIncrementTick+0x3a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010b5e:	4b48      	ldr	r3, [pc, #288]	; (8010c80 <xTaskIncrementTick+0x12c>)
 8010b60:	681e      	ldr	r6, [r3, #0]
 8010b62:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8010b64:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010b66:	b1fe      	cbz	r6, 8010ba8 <xTaskIncrementTick+0x54>
 8010b68:	4d46      	ldr	r5, [pc, #280]	; (8010c84 <xTaskIncrementTick+0x130>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010b6a:	682b      	ldr	r3, [r5, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8010b6c:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010b6e:	42b3      	cmp	r3, r6
 8010b70:	d92c      	bls.n	8010bcc <xTaskIncrementTick+0x78>
 8010b72:	4f45      	ldr	r7, [pc, #276]	; (8010c88 <xTaskIncrementTick+0x134>)
 8010b74:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8010ca0 <xTaskIncrementTick+0x14c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010b78:	f8d8 3000 	ldr.w	r3, [r8]
 8010b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	bf28      	it	cs
 8010b8a:	2401      	movcs	r4, #1
 8010b8c:	e004      	b.n	8010b98 <xTaskIncrementTick+0x44>
		++uxPendedTicks;
 8010b8e:	4a3f      	ldr	r2, [pc, #252]	; (8010c8c <xTaskIncrementTick+0x138>)
BaseType_t xSwitchRequired = pdFALSE;
 8010b90:	2400      	movs	r4, #0
		++uxPendedTicks;
 8010b92:	6813      	ldr	r3, [r2, #0]
 8010b94:	3301      	adds	r3, #1
 8010b96:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8010b98:	4b3d      	ldr	r3, [pc, #244]	; (8010c90 <xTaskIncrementTick+0x13c>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8010b9c:	2b00      	cmp	r3, #0
}
 8010b9e:	bf0c      	ite	eq
 8010ba0:	4620      	moveq	r0, r4
 8010ba2:	2001      	movne	r0, #1
 8010ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8010ba8:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8010ca4 <xTaskIncrementTick+0x150>
 8010bac:	f8db 2000 	ldr.w	r2, [fp]
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	2a00      	cmp	r2, #0
 8010bb4:	d04b      	beq.n	8010c4e <xTaskIncrementTick+0xfa>
 8010bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bba:	b672      	cpsid	i
 8010bbc:	f383 8811 	msr	BASEPRI, r3
 8010bc0:	f3bf 8f6f 	isb	sy
 8010bc4:	f3bf 8f4f 	dsb	sy
 8010bc8:	b662      	cpsie	i
 8010bca:	e7fe      	b.n	8010bca <xTaskIncrementTick+0x76>
 8010bcc:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8010ca4 <xTaskIncrementTick+0x150>
 8010bd0:	4f2d      	ldr	r7, [pc, #180]	; (8010c88 <xTaskIncrementTick+0x134>)
 8010bd2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8010ca0 <xTaskIncrementTick+0x14c>
 8010bd6:	e02f      	b.n	8010c38 <xTaskIncrementTick+0xe4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010bd8:	f8db 2000 	ldr.w	r2, [fp]
 8010bdc:	68d2      	ldr	r2, [r2, #12]
 8010bde:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010be2:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010be6:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8010bea:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bec:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8010bee:	d32c      	bcc.n	8010c4a <xTaskIncrementTick+0xf6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bf0:	f7ff f8e8 	bl	800fdc4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010bf4:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bf8:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010bfc:	b109      	cbz	r1, 8010c02 <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bfe:	f7ff f8e1 	bl	800fdc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010c02:	4a24      	ldr	r2, [pc, #144]	; (8010c94 <xTaskIncrementTick+0x140>)
 8010c04:	f04f 0c01 	mov.w	ip, #1
 8010c08:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8010c0c:	4651      	mov	r1, sl
 8010c0e:	6813      	ldr	r3, [r2, #0]
 8010c10:	fa0c fc00 	lsl.w	ip, ip, r0
 8010c14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010c18:	ea4c 0c03 	orr.w	ip, ip, r3
 8010c1c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8010c20:	f8c2 c000 	str.w	ip, [r2]
 8010c24:	f7ff f8a4 	bl	800fd70 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c28:	f8d8 0000 	ldr.w	r0, [r8]
 8010c2c:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8010c30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8010c32:	4291      	cmp	r1, r2
 8010c34:	bf28      	it	cs
 8010c36:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c38:	f8db 2000 	ldr.w	r2, [fp]
 8010c3c:	6812      	ldr	r2, [r2, #0]
 8010c3e:	2a00      	cmp	r2, #0
 8010c40:	d1ca      	bne.n	8010bd8 <xTaskIncrementTick+0x84>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c42:	f04f 33ff 	mov.w	r3, #4294967295
 8010c46:	602b      	str	r3, [r5, #0]
					break;
 8010c48:	e796      	b.n	8010b78 <xTaskIncrementTick+0x24>
						xNextTaskUnblockTime = xItemValue;
 8010c4a:	6029      	str	r1, [r5, #0]
						break;
 8010c4c:	e794      	b.n	8010b78 <xTaskIncrementTick+0x24>
			taskSWITCH_DELAYED_LISTS();
 8010c4e:	4a12      	ldr	r2, [pc, #72]	; (8010c98 <xTaskIncrementTick+0x144>)
 8010c50:	f8db 0000 	ldr.w	r0, [fp]
 8010c54:	4911      	ldr	r1, [pc, #68]	; (8010c9c <xTaskIncrementTick+0x148>)
 8010c56:	6814      	ldr	r4, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8010c58:	4d0a      	ldr	r5, [pc, #40]	; (8010c84 <xTaskIncrementTick+0x130>)
			taskSWITCH_DELAYED_LISTS();
 8010c5a:	f8cb 4000 	str.w	r4, [fp]
 8010c5e:	6010      	str	r0, [r2, #0]
 8010c60:	680a      	ldr	r2, [r1, #0]
 8010c62:	3201      	adds	r2, #1
 8010c64:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c66:	f8db 3000 	ldr.w	r3, [fp]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	b91b      	cbnz	r3, 8010c76 <xTaskIncrementTick+0x122>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c72:	602b      	str	r3, [r5, #0]
 8010c74:	e779      	b.n	8010b6a <xTaskIncrementTick+0x16>
 8010c76:	f7ff fe15 	bl	80108a4 <prvResetNextTaskUnblockTime.part.1>
 8010c7a:	e776      	b.n	8010b6a <xTaskIncrementTick+0x16>
 8010c7c:	2000098c 	.word	0x2000098c
 8010c80:	20000a0c 	.word	0x20000a0c
 8010c84:	200009c4 	.word	0x200009c4
 8010c88:	200008f4 	.word	0x200008f4
 8010c8c:	20000988 	.word	0x20000988
 8010c90:	20000a10 	.word	0x20000a10
 8010c94:	20000994 	.word	0x20000994
 8010c98:	200008f0 	.word	0x200008f0
 8010c9c:	200009c8 	.word	0x200009c8
 8010ca0:	200008e8 	.word	0x200008e8
 8010ca4:	200008ec 	.word	0x200008ec

08010ca8 <xTaskResumeAll>:
{
 8010ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8010cac:	4c36      	ldr	r4, [pc, #216]	; (8010d88 <xTaskResumeAll+0xe0>)
 8010cae:	6823      	ldr	r3, [r4, #0]
 8010cb0:	b953      	cbnz	r3, 8010cc8 <xTaskResumeAll+0x20>
 8010cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb6:	b672      	cpsid	i
 8010cb8:	f383 8811 	msr	BASEPRI, r3
 8010cbc:	f3bf 8f6f 	isb	sy
 8010cc0:	f3bf 8f4f 	dsb	sy
 8010cc4:	b662      	cpsie	i
 8010cc6:	e7fe      	b.n	8010cc6 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8010cc8:	f000 fe24 	bl	8011914 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010ccc:	6823      	ldr	r3, [r4, #0]
 8010cce:	3b01      	subs	r3, #1
 8010cd0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cd2:	6824      	ldr	r4, [r4, #0]
 8010cd4:	bb74      	cbnz	r4, 8010d34 <xTaskResumeAll+0x8c>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010cd6:	4b2d      	ldr	r3, [pc, #180]	; (8010d8c <xTaskResumeAll+0xe4>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	b35b      	cbz	r3, 8010d34 <xTaskResumeAll+0x8c>
 8010cdc:	4d2c      	ldr	r5, [pc, #176]	; (8010d90 <xTaskResumeAll+0xe8>)
 8010cde:	4f2d      	ldr	r7, [pc, #180]	; (8010d94 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8010ce0:	4e2d      	ldr	r6, [pc, #180]	; (8010d98 <xTaskResumeAll+0xf0>)
 8010ce2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8010dac <xTaskResumeAll+0x104>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ce6:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8010db0 <xTaskResumeAll+0x108>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cea:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8010cec:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cf0:	b333      	cbz	r3, 8010d40 <xTaskResumeAll+0x98>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010cf6:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010cfa:	f104 0018 	add.w	r0, r4, #24
 8010cfe:	f7ff f861 	bl	800fdc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d02:	4650      	mov	r0, sl
 8010d04:	f7ff f85e 	bl	800fdc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010d0a:	6832      	ldr	r2, [r6, #0]
 8010d0c:	4651      	mov	r1, sl
 8010d0e:	fa08 f300 	lsl.w	r3, r8, r0
 8010d12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010d16:	4313      	orrs	r3, r2
 8010d18:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010d1c:	6033      	str	r3, [r6, #0]
 8010d1e:	f7ff f827 	bl	800fd70 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d22:	f8db 3000 	ldr.w	r3, [fp]
 8010d26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d3dd      	bcc.n	8010cea <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8010d2e:	f8c5 8000 	str.w	r8, [r5]
 8010d32:	e7da      	b.n	8010cea <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 8010d34:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010d36:	f000 fe13 	bl	8011960 <vPortExitCritical>
}
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8010d40:	b13c      	cbz	r4, 8010d52 <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d42:	4b16      	ldr	r3, [pc, #88]	; (8010d9c <xTaskResumeAll+0xf4>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	b9db      	cbnz	r3, 8010d82 <xTaskResumeAll+0xda>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010d4a:	4b15      	ldr	r3, [pc, #84]	; (8010da0 <xTaskResumeAll+0xf8>)
 8010d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d50:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010d52:	4e14      	ldr	r6, [pc, #80]	; (8010da4 <xTaskResumeAll+0xfc>)
 8010d54:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010d56:	b13c      	cbz	r4, 8010d68 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8010d58:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8010d5a:	f7ff fefb 	bl	8010b54 <xTaskIncrementTick>
 8010d5e:	b100      	cbz	r0, 8010d62 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8010d60:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010d62:	3c01      	subs	r4, #1
 8010d64:	d1f9      	bne.n	8010d5a <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8010d66:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8010d68:	682b      	ldr	r3, [r5, #0]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d0e2      	beq.n	8010d34 <xTaskResumeAll+0x8c>
					taskYIELD_IF_USING_PREEMPTION();
 8010d6e:	4b0e      	ldr	r3, [pc, #56]	; (8010da8 <xTaskResumeAll+0x100>)
 8010d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d74:	601a      	str	r2, [r3, #0]
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8010d7e:	2401      	movs	r4, #1
 8010d80:	e7d9      	b.n	8010d36 <xTaskResumeAll+0x8e>
 8010d82:	f7ff fd8f 	bl	80108a4 <prvResetNextTaskUnblockTime.part.1>
 8010d86:	e7e4      	b.n	8010d52 <xTaskResumeAll+0xaa>
 8010d88:	2000098c 	.word	0x2000098c
 8010d8c:	20000980 	.word	0x20000980
 8010d90:	20000a10 	.word	0x20000a10
 8010d94:	200009cc 	.word	0x200009cc
 8010d98:	20000994 	.word	0x20000994
 8010d9c:	200008ec 	.word	0x200008ec
 8010da0:	200009c4 	.word	0x200009c4
 8010da4:	20000988 	.word	0x20000988
 8010da8:	e000ed04 	.word	0xe000ed04
 8010dac:	200008f4 	.word	0x200008f4
 8010db0:	200008e8 	.word	0x200008e8

08010db4 <vTaskDelay>:
	{
 8010db4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010db6:	b1a8      	cbz	r0, 8010de4 <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 8010db8:	4b0f      	ldr	r3, [pc, #60]	; (8010df8 <vTaskDelay+0x44>)
 8010dba:	6819      	ldr	r1, [r3, #0]
 8010dbc:	b151      	cbz	r1, 8010dd4 <vTaskDelay+0x20>
 8010dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc2:	b672      	cpsid	i
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	b662      	cpsie	i
 8010dd2:	e7fe      	b.n	8010dd2 <vTaskDelay+0x1e>
	++uxSchedulerSuspended;
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	3201      	adds	r2, #1
 8010dd8:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010dda:	f7ff fce5 	bl	80107a8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8010dde:	f7ff ff63 	bl	8010ca8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8010de2:	b938      	cbnz	r0, 8010df4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8010de4:	4b05      	ldr	r3, [pc, #20]	; (8010dfc <vTaskDelay+0x48>)
 8010de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dea:	601a      	str	r2, [r3, #0]
 8010dec:	f3bf 8f4f 	dsb	sy
 8010df0:	f3bf 8f6f 	isb	sy
	}
 8010df4:	bd08      	pop	{r3, pc}
 8010df6:	bf00      	nop
 8010df8:	2000098c 	.word	0x2000098c
 8010dfc:	e000ed04 	.word	0xe000ed04

08010e00 <vTaskSwitchContext>:
{
 8010e00:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010e02:	4b1f      	ldr	r3, [pc, #124]	; (8010e80 <vTaskSwitchContext+0x80>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	bb03      	cbnz	r3, 8010e4a <vTaskSwitchContext+0x4a>
		xYieldPending = pdFALSE;
 8010e08:	4a1e      	ldr	r2, [pc, #120]	; (8010e84 <vTaskSwitchContext+0x84>)
		taskCHECK_FOR_STACK_OVERFLOW();
 8010e0a:	4c1f      	ldr	r4, [pc, #124]	; (8010e88 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 8010e0c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010e0e:	6822      	ldr	r2, [r4, #0]
 8010e10:	6823      	ldr	r3, [r4, #0]
 8010e12:	6812      	ldr	r2, [r2, #0]
 8010e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d926      	bls.n	8010e68 <vTaskSwitchContext+0x68>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010e1a:	4b1c      	ldr	r3, [pc, #112]	; (8010e8c <vTaskSwitchContext+0x8c>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010e1e:	fab3 f383 	clz	r3, r3
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	481a      	ldr	r0, [pc, #104]	; (8010e90 <vTaskSwitchContext+0x90>)
 8010e26:	f1c3 031f 	rsb	r3, r3, #31
 8010e2a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8010e2e:	0092      	lsls	r2, r2, #2
 8010e30:	5881      	ldr	r1, [r0, r2]
 8010e32:	1885      	adds	r5, r0, r2
 8010e34:	b169      	cbz	r1, 8010e52 <vTaskSwitchContext+0x52>
 8010e36:	6869      	ldr	r1, [r5, #4]
 8010e38:	3208      	adds	r2, #8
 8010e3a:	6849      	ldr	r1, [r1, #4]
 8010e3c:	4402      	add	r2, r0
 8010e3e:	4291      	cmp	r1, r2
 8010e40:	6069      	str	r1, [r5, #4]
 8010e42:	d017      	beq.n	8010e74 <vTaskSwitchContext+0x74>
 8010e44:	68cb      	ldr	r3, [r1, #12]
 8010e46:	6023      	str	r3, [r4, #0]
}
 8010e48:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdTRUE;
 8010e4a:	4b0e      	ldr	r3, [pc, #56]	; (8010e84 <vTaskSwitchContext+0x84>)
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	601a      	str	r2, [r3, #0]
}
 8010e50:	bd38      	pop	{r3, r4, r5, pc}
	__asm volatile
 8010e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e56:	b672      	cpsid	i
 8010e58:	f383 8811 	msr	BASEPRI, r3
 8010e5c:	f3bf 8f6f 	isb	sy
 8010e60:	f3bf 8f4f 	dsb	sy
 8010e64:	b662      	cpsie	i
 8010e66:	e7fe      	b.n	8010e66 <vTaskSwitchContext+0x66>
		taskCHECK_FOR_STACK_OVERFLOW();
 8010e68:	6820      	ldr	r0, [r4, #0]
 8010e6a:	6821      	ldr	r1, [r4, #0]
 8010e6c:	3134      	adds	r1, #52	; 0x34
 8010e6e:	f7ef fe9b 	bl	8000ba8 <vApplicationStackOverflowHook>
 8010e72:	e7d2      	b.n	8010e1a <vTaskSwitchContext+0x1a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010e74:	2214      	movs	r2, #20
 8010e76:	6849      	ldr	r1, [r1, #4]
 8010e78:	fb02 0303 	mla	r3, r2, r3, r0
 8010e7c:	6059      	str	r1, [r3, #4]
 8010e7e:	e7e1      	b.n	8010e44 <vTaskSwitchContext+0x44>
 8010e80:	2000098c 	.word	0x2000098c
 8010e84:	20000a10 	.word	0x20000a10
 8010e88:	200008e8 	.word	0x200008e8
 8010e8c:	20000994 	.word	0x20000994
 8010e90:	200008f4 	.word	0x200008f4

08010e94 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8010e94:	b950      	cbnz	r0, 8010eac <vTaskPlaceOnEventList+0x18>
 8010e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9a:	b672      	cpsid	i
 8010e9c:	f383 8811 	msr	BASEPRI, r3
 8010ea0:	f3bf 8f6f 	isb	sy
 8010ea4:	f3bf 8f4f 	dsb	sy
 8010ea8:	b662      	cpsie	i
 8010eaa:	e7fe      	b.n	8010eaa <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010eac:	4b06      	ldr	r3, [pc, #24]	; (8010ec8 <vTaskPlaceOnEventList+0x34>)
{
 8010eae:	b510      	push	{r4, lr}
 8010eb0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010eb2:	6819      	ldr	r1, [r3, #0]
 8010eb4:	3118      	adds	r1, #24
 8010eb6:	f7fe ff6b 	bl	800fd90 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010eba:	4620      	mov	r0, r4
 8010ebc:	2101      	movs	r1, #1
}
 8010ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010ec2:	f7ff bc71 	b.w	80107a8 <prvAddCurrentTaskToDelayedList>
 8010ec6:	bf00      	nop
 8010ec8:	200008e8 	.word	0x200008e8

08010ecc <vTaskPlaceOnEventListRestricted>:
	{
 8010ecc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8010ece:	b180      	cbz	r0, 8010ef2 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010ed0:	4b0d      	ldr	r3, [pc, #52]	; (8010f08 <vTaskPlaceOnEventListRestricted+0x3c>)
 8010ed2:	460d      	mov	r5, r1
 8010ed4:	4614      	mov	r4, r2
 8010ed6:	6819      	ldr	r1, [r3, #0]
 8010ed8:	3118      	adds	r1, #24
 8010eda:	f7fe ff49 	bl	800fd70 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8010ede:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010ee0:	4621      	mov	r1, r4
 8010ee2:	bf0c      	ite	eq
 8010ee4:	4628      	moveq	r0, r5
 8010ee6:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8010eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010eee:	f7ff bc5b 	b.w	80107a8 <prvAddCurrentTaskToDelayedList>
 8010ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef6:	b672      	cpsid	i
 8010ef8:	f383 8811 	msr	BASEPRI, r3
 8010efc:	f3bf 8f6f 	isb	sy
 8010f00:	f3bf 8f4f 	dsb	sy
 8010f04:	b662      	cpsie	i
 8010f06:	e7fe      	b.n	8010f06 <vTaskPlaceOnEventListRestricted+0x3a>
 8010f08:	200008e8 	.word	0x200008e8

08010f0c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010f0c:	68c3      	ldr	r3, [r0, #12]
{
 8010f0e:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010f10:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8010f12:	b34c      	cbz	r4, 8010f68 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010f14:	f104 0518 	add.w	r5, r4, #24
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f7fe ff53 	bl	800fdc4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f1e:	4b19      	ldr	r3, [pc, #100]	; (8010f84 <xTaskRemoveFromEventList+0x78>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	b9e3      	cbnz	r3, 8010f5e <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010f24:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010f26:	4d18      	ldr	r5, [pc, #96]	; (8010f88 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f7fe ff4b 	bl	800fdc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010f2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010f30:	2301      	movs	r3, #1
 8010f32:	4631      	mov	r1, r6
 8010f34:	682e      	ldr	r6, [r5, #0]
 8010f36:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8010f3a:	4093      	lsls	r3, r2
 8010f3c:	4a13      	ldr	r2, [pc, #76]	; (8010f8c <xTaskRemoveFromEventList+0x80>)
 8010f3e:	4333      	orrs	r3, r6
 8010f40:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8010f44:	602b      	str	r3, [r5, #0]
 8010f46:	f7fe ff13 	bl	800fd70 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f4a:	4b11      	ldr	r3, [pc, #68]	; (8010f90 <xTaskRemoveFromEventList+0x84>)
 8010f4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d913      	bls.n	8010f7e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8010f56:	4b0f      	ldr	r3, [pc, #60]	; (8010f94 <xTaskRemoveFromEventList+0x88>)
 8010f58:	2001      	movs	r0, #1
 8010f5a:	6018      	str	r0, [r3, #0]
}
 8010f5c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010f5e:	4629      	mov	r1, r5
 8010f60:	480d      	ldr	r0, [pc, #52]	; (8010f98 <xTaskRemoveFromEventList+0x8c>)
 8010f62:	f7fe ff05 	bl	800fd70 <vListInsertEnd>
 8010f66:	e7f0      	b.n	8010f4a <xTaskRemoveFromEventList+0x3e>
 8010f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6c:	b672      	cpsid	i
 8010f6e:	f383 8811 	msr	BASEPRI, r3
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	f3bf 8f4f 	dsb	sy
 8010f7a:	b662      	cpsie	i
 8010f7c:	e7fe      	b.n	8010f7c <xTaskRemoveFromEventList+0x70>
		xReturn = pdFALSE;
 8010f7e:	2000      	movs	r0, #0
}
 8010f80:	bd70      	pop	{r4, r5, r6, pc}
 8010f82:	bf00      	nop
 8010f84:	2000098c 	.word	0x2000098c
 8010f88:	20000994 	.word	0x20000994
 8010f8c:	200008f4 	.word	0x200008f4
 8010f90:	200008e8 	.word	0x200008e8
 8010f94:	20000a10 	.word	0x20000a10
 8010f98:	200009cc 	.word	0x200009cc

08010f9c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010f9c:	4a03      	ldr	r2, [pc, #12]	; (8010fac <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f9e:	4b04      	ldr	r3, [pc, #16]	; (8010fb0 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010fa0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	e9c0 2300 	strd	r2, r3, [r0]
}
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop
 8010fac:	200009c8 	.word	0x200009c8
 8010fb0:	20000a0c 	.word	0x20000a0c

08010fb4 <xTaskCheckForTimeOut>:
{
 8010fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8010fb6:	b350      	cbz	r0, 801100e <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 8010fb8:	b1f1      	cbz	r1, 8010ff8 <xTaskCheckForTimeOut+0x44>
 8010fba:	460d      	mov	r5, r1
 8010fbc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010fbe:	f000 fca9 	bl	8011914 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8010fc2:	f8df c080 	ldr.w	ip, [pc, #128]	; 8011044 <xTaskCheckForTimeOut+0x90>
			if( *pxTicksToWait == portMAX_DELAY )
 8010fc6:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010fc8:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 8010fca:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8010fce:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010fd0:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 8010fd4:	d026      	beq.n	8011024 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010fd6:	491a      	ldr	r1, [pc, #104]	; (8011040 <xTaskCheckForTimeOut+0x8c>)
 8010fd8:	6822      	ldr	r2, [r4, #0]
 8010fda:	f8d1 e000 	ldr.w	lr, [r1]
 8010fde:	4572      	cmp	r2, lr
 8010fe0:	d001      	beq.n	8010fe6 <xTaskCheckForTimeOut+0x32>
 8010fe2:	42b7      	cmp	r7, r6
 8010fe4:	d929      	bls.n	801103a <xTaskCheckForTimeOut+0x86>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010fe6:	4283      	cmp	r3, r0
 8010fe8:	d81e      	bhi.n	8011028 <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait = 0;
 8010fea:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8010fec:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8010fee:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 8010ff0:	f000 fcb6 	bl	8011960 <vPortExitCritical>
}
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffc:	b672      	cpsid	i
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	b662      	cpsie	i
 801100c:	e7fe      	b.n	801100c <xTaskCheckForTimeOut+0x58>
 801100e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011012:	b672      	cpsid	i
 8011014:	f383 8811 	msr	BASEPRI, r3
 8011018:	f3bf 8f6f 	isb	sy
 801101c:	f3bf 8f4f 	dsb	sy
 8011020:	b662      	cpsie	i
 8011022:	e7fe      	b.n	8011022 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8011024:	2600      	movs	r6, #0
 8011026:	e7e3      	b.n	8010ff0 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011028:	6809      	ldr	r1, [r1, #0]
			*pxTicksToWait -= xElapsedTime;
 801102a:	1a1b      	subs	r3, r3, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
 801102c:	f8dc 2000 	ldr.w	r2, [ip]
			xReturn = pdFALSE;
 8011030:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 8011032:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011034:	e9c4 1200 	strd	r1, r2, [r4]
 8011038:	e7da      	b.n	8010ff0 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 801103a:	2601      	movs	r6, #1
 801103c:	e7d8      	b.n	8010ff0 <xTaskCheckForTimeOut+0x3c>
 801103e:	bf00      	nop
 8011040:	200009c8 	.word	0x200009c8
 8011044:	20000a0c 	.word	0x20000a0c

08011048 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011048:	4b01      	ldr	r3, [pc, #4]	; (8011050 <vTaskMissedYield+0x8>)
 801104a:	2201      	movs	r2, #1
 801104c:	601a      	str	r2, [r3, #0]
}
 801104e:	4770      	bx	lr
 8011050:	20000a10 	.word	0x20000a10

08011054 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8011054:	4b01      	ldr	r3, [pc, #4]	; (801105c <xTaskGetCurrentTaskHandle+0x8>)
 8011056:	6818      	ldr	r0, [r3, #0]
	}
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop
 801105c:	200008e8 	.word	0x200008e8

08011060 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011060:	4b05      	ldr	r3, [pc, #20]	; (8011078 <xTaskGetSchedulerState+0x18>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	b133      	cbz	r3, 8011074 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011066:	4b05      	ldr	r3, [pc, #20]	; (801107c <xTaskGetSchedulerState+0x1c>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 801106c:	bf0c      	ite	eq
 801106e:	2002      	moveq	r0, #2
 8011070:	2000      	movne	r0, #0
 8011072:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011074:	2001      	movs	r0, #1
	}
 8011076:	4770      	bx	lr
 8011078:	200009e0 	.word	0x200009e0
 801107c:	2000098c 	.word	0x2000098c

08011080 <xTaskPriorityInherit>:
	{
 8011080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8011084:	4607      	mov	r7, r0
 8011086:	b1c8      	cbz	r0, 80110bc <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011088:	4c26      	ldr	r4, [pc, #152]	; (8011124 <xTaskPriorityInherit+0xa4>)
 801108a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801108c:	6821      	ldr	r1, [r4, #0]
 801108e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011090:	428a      	cmp	r2, r1
 8011092:	d215      	bcs.n	80110c0 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011094:	6981      	ldr	r1, [r0, #24]
 8011096:	2900      	cmp	r1, #0
 8011098:	db04      	blt.n	80110a4 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801109a:	6821      	ldr	r1, [r4, #0]
 801109c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801109e:	f1c1 0107 	rsb	r1, r1, #7
 80110a2:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80110a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80110a8:	4d1f      	ldr	r5, [pc, #124]	; (8011128 <xTaskPriorityInherit+0xa8>)
 80110aa:	6979      	ldr	r1, [r7, #20]
 80110ac:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80110b0:	4291      	cmp	r1, r2
 80110b2:	d00e      	beq.n	80110d2 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80110b4:	6822      	ldr	r2, [r4, #0]
				xReturn = pdTRUE;
 80110b6:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80110b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80110ba:	62fa      	str	r2, [r7, #44]	; 0x2c
	}
 80110bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80110c0:	6822      	ldr	r2, [r4, #0]
 80110c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80110c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80110c6:	4298      	cmp	r0, r3
 80110c8:	bf2c      	ite	cs
 80110ca:	2000      	movcs	r0, #0
 80110cc:	2001      	movcc	r0, #1
	}
 80110ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110d2:	f107 0804 	add.w	r8, r7, #4
 80110d6:	4640      	mov	r0, r8
 80110d8:	f7fe fe74 	bl	800fdc4 <uxListRemove>
 80110dc:	b9f8      	cbnz	r0, 801111e <xTaskPriorityInherit+0x9e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80110de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110e0:	4e12      	ldr	r6, [pc, #72]	; (801112c <xTaskPriorityInherit+0xac>)
 80110e2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	58eb      	ldr	r3, [r5, r3]
 80110ea:	b933      	cbnz	r3, 80110fa <xTaskPriorityInherit+0x7a>
 80110ec:	2101      	movs	r1, #1
 80110ee:	6833      	ldr	r3, [r6, #0]
 80110f0:	fa01 f202 	lsl.w	r2, r1, r2
 80110f4:	ea23 0202 	bic.w	r2, r3, r2
 80110f8:	6032      	str	r2, [r6, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80110fa:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80110fc:	2401      	movs	r4, #1
 80110fe:	6833      	ldr	r3, [r6, #0]
 8011100:	4641      	mov	r1, r8
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011102:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011104:	fa04 f200 	lsl.w	r2, r4, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011108:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801110a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801110e:	4313      	orrs	r3, r2
 8011110:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8011114:	6033      	str	r3, [r6, #0]
 8011116:	f7fe fe2b 	bl	800fd70 <vListInsertEnd>
				xReturn = pdTRUE;
 801111a:	4620      	mov	r0, r4
 801111c:	e7ce      	b.n	80110bc <xTaskPriorityInherit+0x3c>
 801111e:	4e03      	ldr	r6, [pc, #12]	; (801112c <xTaskPriorityInherit+0xac>)
 8011120:	e7eb      	b.n	80110fa <xTaskPriorityInherit+0x7a>
 8011122:	bf00      	nop
 8011124:	200008e8 	.word	0x200008e8
 8011128:	200008f4 	.word	0x200008f4
 801112c:	20000994 	.word	0x20000994

08011130 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8011130:	b178      	cbz	r0, 8011152 <xTaskPriorityDisinherit+0x22>
	{
 8011132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8011134:	4b2a      	ldr	r3, [pc, #168]	; (80111e0 <xTaskPriorityDisinherit+0xb0>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	4283      	cmp	r3, r0
 801113a:	d00c      	beq.n	8011156 <xTaskPriorityDisinherit+0x26>
 801113c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011140:	b672      	cpsid	i
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	b662      	cpsie	i
 8011150:	e7fe      	b.n	8011150 <xTaskPriorityDisinherit+0x20>
	BaseType_t xReturn = pdFALSE;
 8011152:	2000      	movs	r0, #0
	}
 8011154:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 8011156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011158:	b953      	cbnz	r3, 8011170 <xTaskPriorityDisinherit+0x40>
 801115a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115e:	b672      	cpsid	i
 8011160:	f383 8811 	msr	BASEPRI, r3
 8011164:	f3bf 8f6f 	isb	sy
 8011168:	f3bf 8f4f 	dsb	sy
 801116c:	b662      	cpsie	i
 801116e:	e7fe      	b.n	801116e <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011170:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8011172:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011174:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8011176:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011178:	4291      	cmp	r1, r2
 801117a:	d000      	beq.n	801117e <xTaskPriorityDisinherit+0x4e>
 801117c:	b10b      	cbz	r3, 8011182 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 801117e:	2000      	movs	r0, #0
	}
 8011180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011182:	1d07      	adds	r7, r0, #4
 8011184:	4604      	mov	r4, r0
 8011186:	4638      	mov	r0, r7
 8011188:	f7fe fe1c 	bl	800fdc4 <uxListRemove>
 801118c:	b1b8      	cbz	r0, 80111be <xTaskPriorityDisinherit+0x8e>
 801118e:	4815      	ldr	r0, [pc, #84]	; (80111e4 <xTaskPriorityDisinherit+0xb4>)
 8011190:	4a15      	ldr	r2, [pc, #84]	; (80111e8 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011192:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8011194:	2501      	movs	r5, #1
 8011196:	f04f 0c14 	mov.w	ip, #20
 801119a:	f8d2 e000 	ldr.w	lr, [r2]
 801119e:	fa05 f603 	lsl.w	r6, r5, r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80111a2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80111a4:	fb0c 0003 	mla	r0, ip, r3, r0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111a8:	f1c3 0307 	rsb	r3, r3, #7
					prvAddTaskToReadyList( pxTCB );
 80111ac:	ea46 060e 	orr.w	r6, r6, lr
 80111b0:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111b2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80111b4:	6016      	str	r6, [r2, #0]
 80111b6:	f7fe fddb 	bl	800fd70 <vListInsertEnd>
					xReturn = pdTRUE;
 80111ba:	4628      	mov	r0, r5
	}
 80111bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80111be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80111c0:	2314      	movs	r3, #20
 80111c2:	4808      	ldr	r0, [pc, #32]	; (80111e4 <xTaskPriorityDisinherit+0xb4>)
 80111c4:	fb03 f301 	mul.w	r3, r3, r1
 80111c8:	4a07      	ldr	r2, [pc, #28]	; (80111e8 <xTaskPriorityDisinherit+0xb8>)
 80111ca:	58c3      	ldr	r3, [r0, r3]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d1e0      	bne.n	8011192 <xTaskPriorityDisinherit+0x62>
 80111d0:	2501      	movs	r5, #1
 80111d2:	6813      	ldr	r3, [r2, #0]
 80111d4:	408d      	lsls	r5, r1
 80111d6:	ea23 0305 	bic.w	r3, r3, r5
 80111da:	6013      	str	r3, [r2, #0]
 80111dc:	e7d9      	b.n	8011192 <xTaskPriorityDisinherit+0x62>
 80111de:	bf00      	nop
 80111e0:	200008e8 	.word	0x200008e8
 80111e4:	200008f4 	.word	0x200008f4
 80111e8:	20000994 	.word	0x20000994

080111ec <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80111ec:	b1b8      	cbz	r0, 801121e <vTaskPriorityDisinheritAfterTimeout+0x32>
	{
 80111ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 80111f0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80111f2:	b954      	cbnz	r4, 801120a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80111f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f8:	b672      	cpsid	i
 80111fa:	f383 8811 	msr	BASEPRI, r3
 80111fe:	f3bf 8f6f 	isb	sy
 8011202:	f3bf 8f4f 	dsb	sy
 8011206:	b662      	cpsie	i
 8011208:	e7fe      	b.n	8011208 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 801120a:	6c43      	ldr	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 801120c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801120e:	428b      	cmp	r3, r1
 8011210:	bf38      	it	cc
 8011212:	460b      	movcc	r3, r1
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011214:	429a      	cmp	r2, r3
 8011216:	d001      	beq.n	801121c <vTaskPriorityDisinheritAfterTimeout+0x30>
 8011218:	2c01      	cmp	r4, #1
 801121a:	d001      	beq.n	8011220 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 801121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801121e:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 8011220:	4920      	ldr	r1, [pc, #128]	; (80112a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8011222:	6809      	ldr	r1, [r1, #0]
 8011224:	4281      	cmp	r1, r0
 8011226:	d022      	beq.n	801126e <vTaskPriorityDisinheritAfterTimeout+0x82>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011228:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 801122a:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801122c:	2900      	cmp	r1, #0
 801122e:	db02      	blt.n	8011236 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011230:	f1c3 0307 	rsb	r3, r3, #7
 8011234:	6183      	str	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011236:	4e1c      	ldr	r6, [pc, #112]	; (80112a8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8011238:	2514      	movs	r5, #20
 801123a:	6943      	ldr	r3, [r0, #20]
 801123c:	fb05 6202 	mla	r2, r5, r2, r6
 8011240:	4293      	cmp	r3, r2
 8011242:	d1eb      	bne.n	801121c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011244:	1d07      	adds	r7, r0, #4
 8011246:	4604      	mov	r4, r0
 8011248:	4638      	mov	r0, r7
 801124a:	f7fe fdbb 	bl	800fdc4 <uxListRemove>
 801124e:	b1c8      	cbz	r0, 8011284 <vTaskPriorityDisinheritAfterTimeout+0x98>
 8011250:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011252:	4b16      	ldr	r3, [pc, #88]	; (80112ac <vTaskPriorityDisinheritAfterTimeout+0xc0>)
						prvAddTaskToReadyList( pxTCB );
 8011254:	2201      	movs	r2, #1
 8011256:	681c      	ldr	r4, [r3, #0]
 8011258:	2514      	movs	r5, #20
 801125a:	4639      	mov	r1, r7
 801125c:	4082      	lsls	r2, r0
 801125e:	fb05 6000 	mla	r0, r5, r0, r6
 8011262:	4322      	orrs	r2, r4
 8011264:	601a      	str	r2, [r3, #0]
	}
 8011266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 801126a:	f7fe bd81 	b.w	800fd70 <vListInsertEnd>
 801126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011272:	b672      	cpsid	i
 8011274:	f383 8811 	msr	BASEPRI, r3
 8011278:	f3bf 8f6f 	isb	sy
 801127c:	f3bf 8f4f 	dsb	sy
 8011280:	b662      	cpsie	i
 8011282:	e7fe      	b.n	8011282 <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011284:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011286:	2201      	movs	r2, #1
 8011288:	fb05 f500 	mul.w	r5, r5, r0
 801128c:	fa02 f400 	lsl.w	r4, r2, r0
 8011290:	5973      	ldr	r3, [r6, r5]
 8011292:	b10b      	cbz	r3, 8011298 <vTaskPriorityDisinheritAfterTimeout+0xac>
 8011294:	4b05      	ldr	r3, [pc, #20]	; (80112ac <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8011296:	e7dd      	b.n	8011254 <vTaskPriorityDisinheritAfterTimeout+0x68>
 8011298:	4b04      	ldr	r3, [pc, #16]	; (80112ac <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	ea22 0204 	bic.w	r2, r2, r4
 80112a0:	601a      	str	r2, [r3, #0]
 80112a2:	e7d7      	b.n	8011254 <vTaskPriorityDisinheritAfterTimeout+0x68>
 80112a4:	200008e8 	.word	0x200008e8
 80112a8:	200008f4 	.word	0x200008f4
 80112ac:	20000994 	.word	0x20000994

080112b0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80112b0:	4b04      	ldr	r3, [pc, #16]	; (80112c4 <pvTaskIncrementMutexHeldCount+0x14>)
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	b11a      	cbz	r2, 80112be <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80112b6:	6819      	ldr	r1, [r3, #0]
 80112b8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80112ba:	3201      	adds	r2, #1
 80112bc:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80112be:	6818      	ldr	r0, [r3, #0]
	}
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	200008e8 	.word	0x200008e8

080112c8 <ulTaskNotifyTake>:
	{
 80112c8:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80112ca:	4c17      	ldr	r4, [pc, #92]	; (8011328 <ulTaskNotifyTake+0x60>)
	{
 80112cc:	4606      	mov	r6, r0
 80112ce:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 80112d0:	f000 fb20 	bl	8011914 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80112d4:	6823      	ldr	r3, [r4, #0]
 80112d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112d8:	b923      	cbnz	r3, 80112e4 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80112da:	6823      	ldr	r3, [r4, #0]
 80112dc:	2101      	movs	r1, #1
 80112de:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80112e2:	b9ad      	cbnz	r5, 8011310 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 80112e4:	f000 fb3c 	bl	8011960 <vPortExitCritical>
		taskENTER_CRITICAL();
 80112e8:	f000 fb14 	bl	8011914 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80112ec:	6823      	ldr	r3, [r4, #0]
 80112ee:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 80112f0:	b11d      	cbz	r5, 80112fa <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80112f2:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80112f4:	b94e      	cbnz	r6, 801130a <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80112f6:	1e6a      	subs	r2, r5, #1
 80112f8:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80112fa:	6823      	ldr	r3, [r4, #0]
 80112fc:	2200      	movs	r2, #0
 80112fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8011302:	f000 fb2d 	bl	8011960 <vPortExitCritical>
	}
 8011306:	4628      	mov	r0, r5
 8011308:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801130a:	2200      	movs	r2, #0
 801130c:	64da      	str	r2, [r3, #76]	; 0x4c
 801130e:	e7f4      	b.n	80112fa <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011310:	4628      	mov	r0, r5
 8011312:	f7ff fa49 	bl	80107a8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8011316:	4b05      	ldr	r3, [pc, #20]	; (801132c <ulTaskNotifyTake+0x64>)
 8011318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801131c:	601a      	str	r2, [r3, #0]
 801131e:	f3bf 8f4f 	dsb	sy
 8011322:	f3bf 8f6f 	isb	sy
 8011326:	e7dd      	b.n	80112e4 <ulTaskNotifyTake+0x1c>
 8011328:	200008e8 	.word	0x200008e8
 801132c:	e000ed04 	.word	0xe000ed04

08011330 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8011330:	b308      	cbz	r0, 8011376 <vTaskNotifyGiveFromISR+0x46>
	{
 8011332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011336:	4604      	mov	r4, r0
 8011338:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801133a:	f000 fbf9 	bl	8011b30 <vPortValidateInterruptPriority>
	__asm volatile
 801133e:	f3ef 8711 	mrs	r7, BASEPRI
 8011342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011346:	b672      	cpsid	i
 8011348:	f383 8811 	msr	BASEPRI, r3
 801134c:	f3bf 8f6f 	isb	sy
 8011350:	f3bf 8f4f 	dsb	sy
 8011354:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011356:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011358:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801135c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011360:	b2ed      	uxtb	r5, r5
			( pxTCB->ulNotifiedValue )++;
 8011362:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011364:	2d01      	cmp	r5, #1
			( pxTCB->ulNotifiedValue )++;
 8011366:	f103 0301 	add.w	r3, r3, #1
 801136a:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801136c:	d00e      	beq.n	801138c <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
 801136e:	f387 8811 	msr	BASEPRI, r7
	}
 8011372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8011376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801137a:	b672      	cpsid	i
 801137c:	f383 8811 	msr	BASEPRI, r3
 8011380:	f3bf 8f6f 	isb	sy
 8011384:	f3bf 8f4f 	dsb	sy
 8011388:	b662      	cpsie	i
 801138a:	e7fe      	b.n	801138a <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801138c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801138e:	b153      	cbz	r3, 80113a6 <vTaskNotifyGiveFromISR+0x76>
 8011390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011394:	b672      	cpsid	i
 8011396:	f383 8811 	msr	BASEPRI, r3
 801139a:	f3bf 8f6f 	isb	sy
 801139e:	f3bf 8f4f 	dsb	sy
 80113a2:	b662      	cpsie	i
 80113a4:	e7fe      	b.n	80113a4 <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113a6:	4b16      	ldr	r3, [pc, #88]	; (8011400 <vTaskNotifyGiveFromISR+0xd0>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	b9fb      	cbnz	r3, 80113ec <vTaskNotifyGiveFromISR+0xbc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113ac:	f104 0804 	add.w	r8, r4, #4
 80113b0:	4640      	mov	r0, r8
 80113b2:	f7fe fd07 	bl	800fdc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80113b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80113b8:	4a12      	ldr	r2, [pc, #72]	; (8011404 <vTaskNotifyGiveFromISR+0xd4>)
 80113ba:	f04f 0c14 	mov.w	ip, #20
 80113be:	fa05 f300 	lsl.w	r3, r5, r0
 80113c2:	4d11      	ldr	r5, [pc, #68]	; (8011408 <vTaskNotifyGiveFromISR+0xd8>)
 80113c4:	f8d2 e000 	ldr.w	lr, [r2]
 80113c8:	4641      	mov	r1, r8
 80113ca:	fb0c 5000 	mla	r0, ip, r0, r5
 80113ce:	ea43 030e 	orr.w	r3, r3, lr
 80113d2:	6013      	str	r3, [r2, #0]
 80113d4:	f7fe fccc 	bl	800fd70 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80113d8:	4b0c      	ldr	r3, [pc, #48]	; (801140c <vTaskNotifyGiveFromISR+0xdc>)
 80113da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d9c4      	bls.n	801136e <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
 80113e4:	b146      	cbz	r6, 80113f8 <vTaskNotifyGiveFromISR+0xc8>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80113e6:	2301      	movs	r3, #1
 80113e8:	6033      	str	r3, [r6, #0]
 80113ea:	e7c0      	b.n	801136e <vTaskNotifyGiveFromISR+0x3e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80113ec:	f104 0118 	add.w	r1, r4, #24
 80113f0:	4807      	ldr	r0, [pc, #28]	; (8011410 <vTaskNotifyGiveFromISR+0xe0>)
 80113f2:	f7fe fcbd 	bl	800fd70 <vListInsertEnd>
 80113f6:	e7ef      	b.n	80113d8 <vTaskNotifyGiveFromISR+0xa8>
						xYieldPending = pdTRUE;
 80113f8:	4b06      	ldr	r3, [pc, #24]	; (8011414 <vTaskNotifyGiveFromISR+0xe4>)
 80113fa:	2201      	movs	r2, #1
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	e7b6      	b.n	801136e <vTaskNotifyGiveFromISR+0x3e>
 8011400:	2000098c 	.word	0x2000098c
 8011404:	20000994 	.word	0x20000994
 8011408:	200008f4 	.word	0x200008f4
 801140c:	200008e8 	.word	0x200008e8
 8011410:	200009cc 	.word	0x200009cc
 8011414:	20000a10 	.word	0x20000a10

08011418 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 801141a:	4c12      	ldr	r4, [pc, #72]	; (8011464 <prvCheckForValidListAndQueue+0x4c>)
	taskENTER_CRITICAL();
 801141c:	f000 fa7a 	bl	8011914 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8011420:	6825      	ldr	r5, [r4, #0]
 8011422:	b11d      	cbz	r5, 801142c <prvCheckForValidListAndQueue+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8011424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8011428:	f000 ba9a 	b.w	8011960 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 801142c:	4f0e      	ldr	r7, [pc, #56]	; (8011468 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 801142e:	4e0f      	ldr	r6, [pc, #60]	; (801146c <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8011430:	4638      	mov	r0, r7
 8011432:	f7fe fc8d 	bl	800fd50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011436:	4630      	mov	r0, r6
 8011438:	f7fe fc8a 	bl	800fd50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801143c:	490c      	ldr	r1, [pc, #48]	; (8011470 <prvCheckForValidListAndQueue+0x58>)
			pxOverflowTimerList = &xActiveTimerList2;
 801143e:	4b0d      	ldr	r3, [pc, #52]	; (8011474 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8011440:	462a      	mov	r2, r5
			pxCurrentTimerList = &xActiveTimerList1;
 8011442:	600f      	str	r7, [r1, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8011444:	200a      	movs	r0, #10
 8011446:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8011448:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801144a:	f7fe fdab 	bl	800ffa4 <xQueueGenericCreate>
 801144e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8011450:	2800      	cmp	r0, #0
 8011452:	d0e7      	beq.n	8011424 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011454:	4908      	ldr	r1, [pc, #32]	; (8011478 <prvCheckForValidListAndQueue+0x60>)
 8011456:	f7ff f96f 	bl	8010738 <vQueueAddToRegistry>
}
 801145a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 801145e:	f000 ba7f 	b.w	8011960 <vPortExitCritical>
 8011462:	bf00      	nop
 8011464:	20000a48 	.word	0x20000a48
 8011468:	20000a1c 	.word	0x20000a1c
 801146c:	20000a30 	.word	0x20000a30
 8011470:	20000a14 	.word	0x20000a14
 8011474:	20000a18 	.word	0x20000a18
 8011478:	08023650 	.word	0x08023650

0801147c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 801147c:	4291      	cmp	r1, r2
{
 801147e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011480:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011482:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 8011484:	d805      	bhi.n	8011492 <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011486:	1ad2      	subs	r2, r2, r3
 8011488:	6983      	ldr	r3, [r0, #24]
 801148a:	429a      	cmp	r2, r3
 801148c:	d30c      	bcc.n	80114a8 <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 801148e:	2001      	movs	r0, #1
}
 8011490:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011492:	429a      	cmp	r2, r3
 8011494:	d201      	bcs.n	801149a <prvInsertTimerInActiveList+0x1e>
 8011496:	4299      	cmp	r1, r3
 8011498:	d2f9      	bcs.n	801148e <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801149a:	4b07      	ldr	r3, [pc, #28]	; (80114b8 <prvInsertTimerInActiveList+0x3c>)
 801149c:	1d01      	adds	r1, r0, #4
 801149e:	6818      	ldr	r0, [r3, #0]
 80114a0:	f7fe fc76 	bl	800fd90 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80114a4:	2000      	movs	r0, #0
}
 80114a6:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80114a8:	4b04      	ldr	r3, [pc, #16]	; (80114bc <prvInsertTimerInActiveList+0x40>)
 80114aa:	1d01      	adds	r1, r0, #4
 80114ac:	6818      	ldr	r0, [r3, #0]
 80114ae:	f7fe fc6f 	bl	800fd90 <vListInsert>
 80114b2:	2000      	movs	r0, #0
}
 80114b4:	bd08      	pop	{r3, pc}
 80114b6:	bf00      	nop
 80114b8:	20000a14 	.word	0x20000a14
 80114bc:	20000a18 	.word	0x20000a18

080114c0 <xTimerCreateTimerTask>:
{
 80114c0:	b500      	push	{lr}
 80114c2:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
 80114c4:	f7ff ffa8 	bl	8011418 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80114c8:	4b0e      	ldr	r3, [pc, #56]	; (8011504 <xTimerCreateTimerTask+0x44>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	b15b      	cbz	r3, 80114e6 <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
 80114ce:	480e      	ldr	r0, [pc, #56]	; (8011508 <xTimerCreateTimerTask+0x48>)
 80114d0:	2102      	movs	r1, #2
 80114d2:	2300      	movs	r3, #0
 80114d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80114d8:	e9cd 1000 	strd	r1, r0, [sp]
 80114dc:	490b      	ldr	r1, [pc, #44]	; (801150c <xTimerCreateTimerTask+0x4c>)
 80114de:	480c      	ldr	r0, [pc, #48]	; (8011510 <xTimerCreateTimerTask+0x50>)
 80114e0:	f7ff f9ec 	bl	80108bc <xTaskCreate>
	configASSERT( xReturn );
 80114e4:	b950      	cbnz	r0, 80114fc <xTimerCreateTimerTask+0x3c>
 80114e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ea:	b672      	cpsid	i
 80114ec:	f383 8811 	msr	BASEPRI, r3
 80114f0:	f3bf 8f6f 	isb	sy
 80114f4:	f3bf 8f4f 	dsb	sy
 80114f8:	b662      	cpsie	i
 80114fa:	e7fe      	b.n	80114fa <xTimerCreateTimerTask+0x3a>
}
 80114fc:	b003      	add	sp, #12
 80114fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011502:	bf00      	nop
 8011504:	20000a48 	.word	0x20000a48
 8011508:	20000a4c 	.word	0x20000a4c
 801150c:	08023658 	.word	0x08023658
 8011510:	08011651 	.word	0x08011651

08011514 <xTimerCreate>:
	{
 8011514:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8011518:	4681      	mov	r9, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801151a:	2028      	movs	r0, #40	; 0x28
	{
 801151c:	460d      	mov	r5, r1
 801151e:	4616      	mov	r6, r2
 8011520:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8011522:	f000 fb5f 	bl	8011be4 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8011526:	4604      	mov	r4, r0
 8011528:	b1b8      	cbz	r0, 801155a <xTimerCreate+0x46>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801152a:	b955      	cbnz	r5, 8011542 <xTimerCreate+0x2e>
 801152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011530:	b672      	cpsid	i
 8011532:	f383 8811 	msr	BASEPRI, r3
 8011536:	f3bf 8f6f 	isb	sy
 801153a:	f3bf 8f4f 	dsb	sy
 801153e:	b662      	cpsie	i
 8011540:	e7fe      	b.n	8011540 <xTimerCreate+0x2c>
		prvCheckForValidListAndQueue();
 8011542:	f7ff ff69 	bl	8011418 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011546:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8011548:	f8c4 9000 	str.w	r9, [r4]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801154c:	1d20      	adds	r0, r4, #4
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801154e:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011550:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pvTimerID = pvTimerID;
 8011552:	e9c4 6707 	strd	r6, r7, [r4, #28]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011556:	f7fe fc07 	bl	800fd68 <vListInitialiseItem>
	}
 801155a:	4620      	mov	r0, r4
 801155c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

08011560 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8011560:	b1c0      	cbz	r0, 8011594 <xTimerGenericCommand+0x34>
{
 8011562:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8011564:	4d17      	ldr	r5, [pc, #92]	; (80115c4 <xTimerGenericCommand+0x64>)
 8011566:	4604      	mov	r4, r0
{
 8011568:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 801156a:	6828      	ldr	r0, [r5, #0]
 801156c:	b180      	cbz	r0, 8011590 <xTimerGenericCommand+0x30>
 801156e:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011570:	2905      	cmp	r1, #5
 8011572:	461a      	mov	r2, r3
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8011574:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011576:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801157a:	dc16      	bgt.n	80115aa <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801157c:	f7ff fd70 	bl	8011060 <xTaskGetSchedulerState>
 8011580:	2802      	cmp	r0, #2
 8011582:	d018      	beq.n	80115b6 <xTimerGenericCommand+0x56>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011584:	2300      	movs	r3, #0
 8011586:	6828      	ldr	r0, [r5, #0]
 8011588:	4669      	mov	r1, sp
 801158a:	461a      	mov	r2, r3
 801158c:	f7fe fd36 	bl	800fffc <xQueueGenericSend>
}
 8011590:	b004      	add	sp, #16
 8011592:	bd70      	pop	{r4, r5, r6, pc}
 8011594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011598:	b672      	cpsid	i
 801159a:	f383 8811 	msr	BASEPRI, r3
 801159e:	f3bf 8f6f 	isb	sy
 80115a2:	f3bf 8f4f 	dsb	sy
 80115a6:	b662      	cpsie	i
 80115a8:	e7fe      	b.n	80115a8 <xTimerGenericCommand+0x48>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80115aa:	2300      	movs	r3, #0
 80115ac:	4669      	mov	r1, sp
 80115ae:	f7fe fe01 	bl	80101b4 <xQueueGenericSendFromISR>
}
 80115b2:	b004      	add	sp, #16
 80115b4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80115b6:	6828      	ldr	r0, [r5, #0]
 80115b8:	2300      	movs	r3, #0
 80115ba:	9a08      	ldr	r2, [sp, #32]
 80115bc:	4669      	mov	r1, sp
 80115be:	f7fe fd1d 	bl	800fffc <xQueueGenericSend>
 80115c2:	e7e5      	b.n	8011590 <xTimerGenericCommand+0x30>
 80115c4:	20000a48 	.word	0x20000a48

080115c8 <prvSwitchTimerLists>:
{
 80115c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115cc:	4e1e      	ldr	r6, [pc, #120]	; (8011648 <prvSwitchTimerLists+0x80>)
 80115ce:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115d0:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80115d4:	e00c      	b.n	80115f0 <prvSwitchTimerLists+0x28>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115d6:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115d8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115da:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115dc:	1d25      	adds	r5, r4, #4
 80115de:	4628      	mov	r0, r5
 80115e0:	f7fe fbf0 	bl	800fdc4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115e6:	4620      	mov	r0, r4
 80115e8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80115ea:	69e3      	ldr	r3, [r4, #28]
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d00a      	beq.n	8011606 <prvSwitchTimerLists+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80115f0:	6833      	ldr	r3, [r6, #0]
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	2a00      	cmp	r2, #0
 80115f6:	d1ee      	bne.n	80115d6 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 80115f8:	4a14      	ldr	r2, [pc, #80]	; (801164c <prvSwitchTimerLists+0x84>)
 80115fa:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80115fc:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80115fe:	6031      	str	r1, [r6, #0]
}
 8011600:	b002      	add	sp, #8
 8011602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011606:	69a0      	ldr	r0, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011608:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801160a:	2300      	movs	r3, #0
 801160c:	463a      	mov	r2, r7
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801160e:	183d      	adds	r5, r7, r0
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011610:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
 8011612:	42af      	cmp	r7, r5
 8011614:	d205      	bcs.n	8011622 <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011616:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011618:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801161a:	6830      	ldr	r0, [r6, #0]
 801161c:	f7fe fbb8 	bl	800fd90 <vListInsert>
 8011620:	e7e6      	b.n	80115f0 <prvSwitchTimerLists+0x28>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011622:	f8cd 8000 	str.w	r8, [sp]
 8011626:	4619      	mov	r1, r3
 8011628:	f7ff ff9a 	bl	8011560 <xTimerGenericCommand>
				configASSERT( xResult );
 801162c:	2800      	cmp	r0, #0
 801162e:	d1df      	bne.n	80115f0 <prvSwitchTimerLists+0x28>
 8011630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011634:	b672      	cpsid	i
 8011636:	f383 8811 	msr	BASEPRI, r3
 801163a:	f3bf 8f6f 	isb	sy
 801163e:	f3bf 8f4f 	dsb	sy
 8011642:	b662      	cpsie	i
 8011644:	e7fe      	b.n	8011644 <prvSwitchTimerLists+0x7c>
 8011646:	bf00      	nop
 8011648:	20000a14 	.word	0x20000a14
 801164c:	20000a18 	.word	0x20000a18

08011650 <prvTimerTask>:
{
 8011650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011654:	4f71      	ldr	r7, [pc, #452]	; (801181c <prvTimerTask+0x1cc>)
 8011656:	b087      	sub	sp, #28
 8011658:	4e71      	ldr	r6, [pc, #452]	; (8011820 <prvTimerTask+0x1d0>)
 801165a:	f04f 0801 	mov.w	r8, #1
 801165e:	4d71      	ldr	r5, [pc, #452]	; (8011824 <prvTimerTask+0x1d4>)
 8011660:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 801182c <prvTimerTask+0x1dc>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011668:	2c00      	cmp	r4, #0
 801166a:	d04e      	beq.n	801170a <prvTimerTask+0xba>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8011670:	f7ff fa5a 	bl	8010b28 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8011674:	f7ff fa60 	bl	8010b38 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8011678:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 801167a:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 801167c:	4298      	cmp	r0, r3
 801167e:	d34c      	bcc.n	801171a <prvTimerTask+0xca>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011680:	4284      	cmp	r4, r0
	xLastTime = xTimeNow;
 8011682:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011684:	d95c      	bls.n	8011740 <prvTimerTask+0xf0>
 8011686:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011688:	eba4 0109 	sub.w	r1, r4, r9
 801168c:	6828      	ldr	r0, [r5, #0]
 801168e:	f7ff f867 	bl	8010760 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011692:	f7ff fb09 	bl	8010ca8 <xTaskResumeAll>
 8011696:	b938      	cbnz	r0, 80116a8 <prvTimerTask+0x58>
					portYIELD_WITHIN_API();
 8011698:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801169c:	4a62      	ldr	r2, [pc, #392]	; (8011828 <prvTimerTask+0x1d8>)
 801169e:	6013      	str	r3, [r2, #0]
 80116a0:	f3bf 8f4f 	dsb	sy
 80116a4:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116a8:	2200      	movs	r2, #0
 80116aa:	a902      	add	r1, sp, #8
 80116ac:	6828      	ldr	r0, [r5, #0]
 80116ae:	f7fe fe53 	bl	8010358 <xQueueReceive>
 80116b2:	2800      	cmp	r0, #0
 80116b4:	d0d6      	beq.n	8011664 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80116b6:	9b02      	ldr	r3, [sp, #8]
 80116b8:	9c04      	ldr	r4, [sp, #16]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	da07      	bge.n	80116ce <prvTimerTask+0x7e>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80116be:	9b03      	ldr	r3, [sp, #12]
 80116c0:	4620      	mov	r0, r4
 80116c2:	9905      	ldr	r1, [sp, #20]
 80116c4:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80116c6:	9b02      	ldr	r3, [sp, #8]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	dbed      	blt.n	80116a8 <prvTimerTask+0x58>
 80116cc:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80116ce:	6963      	ldr	r3, [r4, #20]
 80116d0:	b113      	cbz	r3, 80116d8 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116d2:	1d20      	adds	r0, r4, #4
 80116d4:	f7fe fb76 	bl	800fdc4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80116d8:	f7ff fa2e 	bl	8010b38 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80116dc:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80116de:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 80116e0:	4298      	cmp	r0, r3
 80116e2:	d321      	bcc.n	8011728 <prvTimerTask+0xd8>
 80116e4:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80116e6:	f8c6 9000 	str.w	r9, [r6]
 80116ea:	2b09      	cmp	r3, #9
 80116ec:	d8dc      	bhi.n	80116a8 <prvTimerTask+0x58>
 80116ee:	fa08 f303 	lsl.w	r3, r8, r3
 80116f2:	f413 7b04 	ands.w	fp, r3, #528	; 0x210
 80116f6:	d136      	bne.n	8011766 <prvTimerTask+0x116>
 80116f8:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80116fc:	d13e      	bne.n	801177c <prvTimerTask+0x12c>
 80116fe:	069b      	lsls	r3, r3, #26
 8011700:	d5d2      	bpl.n	80116a8 <prvTimerTask+0x58>
						vPortFree( pxTimer );
 8011702:	4620      	mov	r0, r4
 8011704:	f000 fb0c 	bl	8011d20 <vPortFree>
 8011708:	e7ce      	b.n	80116a8 <prvTimerTask+0x58>
	vTaskSuspendAll();
 801170a:	f7ff fa0d 	bl	8010b28 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801170e:	f7ff fa13 	bl	8010b38 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8011712:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8011714:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8011716:	4283      	cmp	r3, r0
 8011718:	d909      	bls.n	801172e <prvTimerTask+0xde>
		prvSwitchTimerLists();
 801171a:	f7ff ff55 	bl	80115c8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 801171e:	f8c6 9000 	str.w	r9, [r6]
			( void ) xTaskResumeAll();
 8011722:	f7ff fac1 	bl	8010ca8 <xTaskResumeAll>
 8011726:	e7bf      	b.n	80116a8 <prvTimerTask+0x58>
		prvSwitchTimerLists();
 8011728:	f7ff ff4e 	bl	80115c8 <prvSwitchTimerLists>
 801172c:	e7da      	b.n	80116e4 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801172e:	f8da 3000 	ldr.w	r3, [sl]
	xLastTime = xTimeNow;
 8011732:	f8c6 9000 	str.w	r9, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	fab2 f282 	clz	r2, r2
 801173c:	0952      	lsrs	r2, r2, #5
 801173e:	e7a3      	b.n	8011688 <prvTimerTask+0x38>
				( void ) xTaskResumeAll();
 8011740:	f7ff fab2 	bl	8010ca8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801174c:	f10b 0004 	add.w	r0, fp, #4
 8011750:	f7fe fb38 	bl	800fdc4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011754:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d036      	beq.n	80117ca <prvTimerTask+0x17a>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801175c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8011760:	4658      	mov	r0, fp
 8011762:	4798      	blx	r3
 8011764:	e7a0      	b.n	80116a8 <prvTimerTask+0x58>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011766:	9903      	ldr	r1, [sp, #12]
 8011768:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801176a:	2900      	cmp	r1, #0
 801176c:	d04b      	beq.n	8011806 <prvTimerTask+0x1b6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801176e:	4449      	add	r1, r9
 8011770:	4620      	mov	r0, r4
 8011772:	464b      	mov	r3, r9
 8011774:	464a      	mov	r2, r9
 8011776:	f7ff fe81 	bl	801147c <prvInsertTimerInActiveList>
 801177a:	e795      	b.n	80116a8 <prvTimerTask+0x58>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801177c:	9b03      	ldr	r3, [sp, #12]
 801177e:	464a      	mov	r2, r9
 8011780:	69a1      	ldr	r1, [r4, #24]
 8011782:	4620      	mov	r0, r4
 8011784:	4419      	add	r1, r3
 8011786:	f7ff fe79 	bl	801147c <prvInsertTimerInActiveList>
 801178a:	2800      	cmp	r0, #0
 801178c:	d08c      	beq.n	80116a8 <prvTimerTask+0x58>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801178e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011790:	4620      	mov	r0, r4
 8011792:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011794:	69e3      	ldr	r3, [r4, #28]
 8011796:	2b01      	cmp	r3, #1
 8011798:	d186      	bne.n	80116a8 <prvTimerTask+0x58>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801179a:	9a03      	ldr	r2, [sp, #12]
 801179c:	4620      	mov	r0, r4
 801179e:	69a4      	ldr	r4, [r4, #24]
 80117a0:	465b      	mov	r3, fp
 80117a2:	f8cd b000 	str.w	fp, [sp]
 80117a6:	4659      	mov	r1, fp
 80117a8:	4422      	add	r2, r4
 80117aa:	f7ff fed9 	bl	8011560 <xTimerGenericCommand>
							configASSERT( xResult );
 80117ae:	2800      	cmp	r0, #0
 80117b0:	f47f af7a 	bne.w	80116a8 <prvTimerTask+0x58>
 80117b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b8:	b672      	cpsid	i
 80117ba:	f383 8811 	msr	BASEPRI, r3
 80117be:	f3bf 8f6f 	isb	sy
 80117c2:	f3bf 8f4f 	dsb	sy
 80117c6:	b662      	cpsie	i
 80117c8:	e7fe      	b.n	80117c8 <prvTimerTask+0x178>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80117ca:	f8db 1018 	ldr.w	r1, [fp, #24]
 80117ce:	464a      	mov	r2, r9
 80117d0:	4623      	mov	r3, r4
 80117d2:	4658      	mov	r0, fp
 80117d4:	4421      	add	r1, r4
 80117d6:	f7ff fe51 	bl	801147c <prvInsertTimerInActiveList>
 80117da:	2800      	cmp	r0, #0
 80117dc:	d0be      	beq.n	801175c <prvTimerTask+0x10c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80117de:	2300      	movs	r3, #0
 80117e0:	4622      	mov	r2, r4
 80117e2:	4658      	mov	r0, fp
 80117e4:	9300      	str	r3, [sp, #0]
 80117e6:	4619      	mov	r1, r3
 80117e8:	f7ff feba 	bl	8011560 <xTimerGenericCommand>
			configASSERT( xResult );
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d1b5      	bne.n	801175c <prvTimerTask+0x10c>
 80117f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f4:	b672      	cpsid	i
 80117f6:	f383 8811 	msr	BASEPRI, r3
 80117fa:	f3bf 8f6f 	isb	sy
 80117fe:	f3bf 8f4f 	dsb	sy
 8011802:	b662      	cpsie	i
 8011804:	e7fe      	b.n	8011804 <prvTimerTask+0x1b4>
 8011806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801180a:	b672      	cpsid	i
 801180c:	f383 8811 	msr	BASEPRI, r3
 8011810:	f3bf 8f6f 	isb	sy
 8011814:	f3bf 8f4f 	dsb	sy
 8011818:	b662      	cpsie	i
 801181a:	e7fe      	b.n	801181a <prvTimerTask+0x1ca>
 801181c:	20000a14 	.word	0x20000a14
 8011820:	20000a44 	.word	0x20000a44
 8011824:	20000a48 	.word	0x20000a48
 8011828:	e000ed04 	.word	0xe000ed04
 801182c:	20000a18 	.word	0x20000a18

08011830 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011830:	4b10      	ldr	r3, [pc, #64]	; (8011874 <prvTaskExitError+0x44>)
{
 8011832:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8011834:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8011836:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8011838:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 801183a:	3301      	adds	r3, #1
 801183c:	d00a      	beq.n	8011854 <prvTaskExitError+0x24>
 801183e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011842:	b672      	cpsid	i
 8011844:	f383 8811 	msr	BASEPRI, r3
 8011848:	f3bf 8f6f 	isb	sy
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	b662      	cpsie	i
 8011852:	e7fe      	b.n	8011852 <prvTaskExitError+0x22>
 8011854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011858:	b672      	cpsid	i
 801185a:	f383 8811 	msr	BASEPRI, r3
 801185e:	f3bf 8f6f 	isb	sy
 8011862:	f3bf 8f4f 	dsb	sy
 8011866:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011868:	9b01      	ldr	r3, [sp, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d0fc      	beq.n	8011868 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801186e:	b002      	add	sp, #8
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	2000043c 	.word	0x2000043c

08011878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011878:	4808      	ldr	r0, [pc, #32]	; (801189c <prvPortStartFirstTask+0x24>)
 801187a:	6800      	ldr	r0, [r0, #0]
 801187c:	6800      	ldr	r0, [r0, #0]
 801187e:	f380 8808 	msr	MSP, r0
 8011882:	f04f 0000 	mov.w	r0, #0
 8011886:	f380 8814 	msr	CONTROL, r0
 801188a:	b662      	cpsie	i
 801188c:	b661      	cpsie	f
 801188e:	f3bf 8f4f 	dsb	sy
 8011892:	f3bf 8f6f 	isb	sy
 8011896:	df00      	svc	0
 8011898:	bf00      	nop
 801189a:	0000      	.short	0x0000
 801189c:	e000ed08 	.word	0xe000ed08

080118a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80118a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80118b0 <vPortEnableVFP+0x10>
 80118a4:	6801      	ldr	r1, [r0, #0]
 80118a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80118aa:	6001      	str	r1, [r0, #0]
 80118ac:	4770      	bx	lr
 80118ae:	0000      	.short	0x0000
 80118b0:	e000ed88 	.word	0xe000ed88

080118b4 <pxPortInitialiseStack>:
{
 80118b4:	b470      	push	{r4, r5, r6}
 80118b6:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80118b8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80118bc:	4d08      	ldr	r5, [pc, #32]	; (80118e0 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80118be:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80118c2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80118c6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80118ca:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80118cc:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80118ce:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80118d2:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80118d6:	f843 4c24 	str.w	r4, [r3, #-36]
}
 80118da:	bc70      	pop	{r4, r5, r6}
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop
 80118e0:	08011831 	.word	0x08011831
	...

080118f0 <SVC_Handler>:
	__asm volatile (
 80118f0:	4b07      	ldr	r3, [pc, #28]	; (8011910 <pxCurrentTCBConst2>)
 80118f2:	6819      	ldr	r1, [r3, #0]
 80118f4:	6808      	ldr	r0, [r1, #0]
 80118f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fa:	f380 8809 	msr	PSP, r0
 80118fe:	f3bf 8f6f 	isb	sy
 8011902:	f04f 0000 	mov.w	r0, #0
 8011906:	f380 8811 	msr	BASEPRI, r0
 801190a:	4770      	bx	lr
 801190c:	f3af 8000 	nop.w

08011910 <pxCurrentTCBConst2>:
 8011910:	200008e8 	.word	0x200008e8

08011914 <vPortEnterCritical>:
 8011914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011918:	b672      	cpsid	i
 801191a:	f383 8811 	msr	BASEPRI, r3
 801191e:	f3bf 8f6f 	isb	sy
 8011922:	f3bf 8f4f 	dsb	sy
 8011926:	b662      	cpsie	i
	uxCriticalNesting++;
 8011928:	4a0b      	ldr	r2, [pc, #44]	; (8011958 <vPortEnterCritical+0x44>)
 801192a:	6813      	ldr	r3, [r2, #0]
 801192c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801192e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8011930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8011932:	d000      	beq.n	8011936 <vPortEnterCritical+0x22>
}
 8011934:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011936:	4b09      	ldr	r3, [pc, #36]	; (801195c <vPortEnterCritical+0x48>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801193e:	d0f9      	beq.n	8011934 <vPortEnterCritical+0x20>
 8011940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011944:	b672      	cpsid	i
 8011946:	f383 8811 	msr	BASEPRI, r3
 801194a:	f3bf 8f6f 	isb	sy
 801194e:	f3bf 8f4f 	dsb	sy
 8011952:	b662      	cpsie	i
 8011954:	e7fe      	b.n	8011954 <vPortEnterCritical+0x40>
 8011956:	bf00      	nop
 8011958:	2000043c 	.word	0x2000043c
 801195c:	e000ed04 	.word	0xe000ed04

08011960 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8011960:	4a09      	ldr	r2, [pc, #36]	; (8011988 <vPortExitCritical+0x28>)
 8011962:	6813      	ldr	r3, [r2, #0]
 8011964:	b953      	cbnz	r3, 801197c <vPortExitCritical+0x1c>
 8011966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801196a:	b672      	cpsid	i
 801196c:	f383 8811 	msr	BASEPRI, r3
 8011970:	f3bf 8f6f 	isb	sy
 8011974:	f3bf 8f4f 	dsb	sy
 8011978:	b662      	cpsie	i
 801197a:	e7fe      	b.n	801197a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 801197c:	3b01      	subs	r3, #1
 801197e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011980:	b90b      	cbnz	r3, 8011986 <vPortExitCritical+0x26>
	__asm volatile
 8011982:	f383 8811 	msr	BASEPRI, r3
}
 8011986:	4770      	bx	lr
 8011988:	2000043c 	.word	0x2000043c
 801198c:	00000000 	.word	0x00000000

08011990 <PendSV_Handler>:
	__asm volatile
 8011990:	f3ef 8009 	mrs	r0, PSP
 8011994:	f3bf 8f6f 	isb	sy
 8011998:	4b15      	ldr	r3, [pc, #84]	; (80119f0 <pxCurrentTCBConst>)
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	f01e 0f10 	tst.w	lr, #16
 80119a0:	bf08      	it	eq
 80119a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80119a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119aa:	6010      	str	r0, [r2, #0]
 80119ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80119b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80119b4:	b672      	cpsid	i
 80119b6:	f380 8811 	msr	BASEPRI, r0
 80119ba:	f3bf 8f4f 	dsb	sy
 80119be:	f3bf 8f6f 	isb	sy
 80119c2:	b662      	cpsie	i
 80119c4:	f7ff fa1c 	bl	8010e00 <vTaskSwitchContext>
 80119c8:	f04f 0000 	mov.w	r0, #0
 80119cc:	f380 8811 	msr	BASEPRI, r0
 80119d0:	bc09      	pop	{r0, r3}
 80119d2:	6819      	ldr	r1, [r3, #0]
 80119d4:	6808      	ldr	r0, [r1, #0]
 80119d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119da:	f01e 0f10 	tst.w	lr, #16
 80119de:	bf08      	it	eq
 80119e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80119e4:	f380 8809 	msr	PSP, r0
 80119e8:	f3bf 8f6f 	isb	sy
 80119ec:	4770      	bx	lr
 80119ee:	bf00      	nop

080119f0 <pxCurrentTCBConst>:
 80119f0:	200008e8 	.word	0x200008e8

080119f4 <SysTick_Handler>:
{
 80119f4:	b508      	push	{r3, lr}
	__asm volatile
 80119f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119fa:	b672      	cpsid	i
 80119fc:	f383 8811 	msr	BASEPRI, r3
 8011a00:	f3bf 8f6f 	isb	sy
 8011a04:	f3bf 8f4f 	dsb	sy
 8011a08:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8011a0a:	f7ff f8a3 	bl	8010b54 <xTaskIncrementTick>
 8011a0e:	b118      	cbz	r0, 8011a18 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011a10:	4b03      	ldr	r3, [pc, #12]	; (8011a20 <SysTick_Handler+0x2c>)
 8011a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a16:	601a      	str	r2, [r3, #0]
	__asm volatile
 8011a18:	2300      	movs	r3, #0
 8011a1a:	f383 8811 	msr	BASEPRI, r3
}
 8011a1e:	bd08      	pop	{r3, pc}
 8011a20:	e000ed04 	.word	0xe000ed04

08011a24 <vPortSetupTimerInterrupt>:
{
 8011a24:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a26:	2300      	movs	r3, #0
 8011a28:	4a08      	ldr	r2, [pc, #32]	; (8011a4c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a2a:	4c09      	ldr	r4, [pc, #36]	; (8011a50 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011a2c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a2e:	4809      	ldr	r0, [pc, #36]	; (8011a54 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a32:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a34:	4c08      	ldr	r4, [pc, #32]	; (8011a58 <vPortSetupTimerInterrupt+0x34>)
 8011a36:	6803      	ldr	r3, [r0, #0]
 8011a38:	4808      	ldr	r0, [pc, #32]	; (8011a5c <vPortSetupTimerInterrupt+0x38>)
 8011a3a:	fba4 4303 	umull	r4, r3, r4, r3
}
 8011a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a42:	099b      	lsrs	r3, r3, #6
 8011a44:	3b01      	subs	r3, #1
 8011a46:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011a48:	6011      	str	r1, [r2, #0]
}
 8011a4a:	4770      	bx	lr
 8011a4c:	e000e010 	.word	0xe000e010
 8011a50:	e000e018 	.word	0xe000e018
 8011a54:	200002b8 	.word	0x200002b8
 8011a58:	10624dd3 	.word	0x10624dd3
 8011a5c:	e000e014 	.word	0xe000e014

08011a60 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011a60:	4b2d      	ldr	r3, [pc, #180]	; (8011b18 <xPortStartScheduler+0xb8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011a62:	492e      	ldr	r1, [pc, #184]	; (8011b1c <xPortStartScheduler+0xbc>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011a64:	482e      	ldr	r0, [pc, #184]	; (8011b20 <xPortStartScheduler+0xc0>)
{
 8011a66:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011a68:	781a      	ldrb	r2, [r3, #0]
{
 8011a6a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011a6c:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011a6e:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011a70:	b2d2      	uxtb	r2, r2
 8011a72:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011a74:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011a76:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011a78:	6004      	str	r4, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011a7a:	b2db      	uxtb	r3, r3
 8011a7c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011a80:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011a84:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011a88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011a8c:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011a8e:	0611      	lsls	r1, r2, #24
 8011a90:	d510      	bpl.n	8011ab4 <xPortStartScheduler+0x54>
 8011a92:	2306      	movs	r3, #6
 8011a94:	e000      	b.n	8011a98 <xPortStartScheduler+0x38>
 8011a96:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011a98:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011a9c:	1e59      	subs	r1, r3, #1
 8011a9e:	0052      	lsls	r2, r2, #1
 8011aa0:	b2d2      	uxtb	r2, r2
 8011aa2:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011aa6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011aaa:	0612      	lsls	r2, r2, #24
 8011aac:	d4f3      	bmi.n	8011a96 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011aae:	2b03      	cmp	r3, #3
 8011ab0:	6003      	str	r3, [r0, #0]
 8011ab2:	d00a      	beq.n	8011aca <xPortStartScheduler+0x6a>
	__asm volatile
 8011ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab8:	b672      	cpsid	i
 8011aba:	f383 8811 	msr	BASEPRI, r3
 8011abe:	f3bf 8f6f 	isb	sy
 8011ac2:	f3bf 8f4f 	dsb	sy
 8011ac6:	b662      	cpsie	i
 8011ac8:	e7fe      	b.n	8011ac8 <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011aca:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011acc:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011ace:	4a15      	ldr	r2, [pc, #84]	; (8011b24 <xPortStartScheduler+0xc4>)
	uxCriticalNesting = 0;
 8011ad0:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011ad2:	b2c9      	uxtb	r1, r1
 8011ad4:	4d10      	ldr	r5, [pc, #64]	; (8011b18 <xPortStartScheduler+0xb8>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011ada:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011adc:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011ade:	6813      	ldr	r3, [r2, #0]
 8011ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ae4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ae6:	6813      	ldr	r3, [r2, #0]
 8011ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011aec:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 8011aee:	f7ff ff99 	bl	8011a24 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8011af2:	4b0d      	ldr	r3, [pc, #52]	; (8011b28 <xPortStartScheduler+0xc8>)
 8011af4:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8011af6:	f7ff fed3 	bl	80118a0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011afa:	4a0c      	ldr	r2, [pc, #48]	; (8011b2c <xPortStartScheduler+0xcc>)
 8011afc:	6813      	ldr	r3, [r2, #0]
 8011afe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011b02:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8011b04:	f7ff feb8 	bl	8011878 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8011b08:	f7ff f97a 	bl	8010e00 <vTaskSwitchContext>
	prvTaskExitError();
 8011b0c:	f7ff fe90 	bl	8011830 <prvTaskExitError>
}
 8011b10:	4620      	mov	r0, r4
 8011b12:	b003      	add	sp, #12
 8011b14:	bd30      	pop	{r4, r5, pc}
 8011b16:	bf00      	nop
 8011b18:	e000e400 	.word	0xe000e400
 8011b1c:	20000a50 	.word	0x20000a50
 8011b20:	20000a54 	.word	0x20000a54
 8011b24:	e000ed20 	.word	0xe000ed20
 8011b28:	2000043c 	.word	0x2000043c
 8011b2c:	e000ef34 	.word	0xe000ef34

08011b30 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011b30:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011b34:	2b0f      	cmp	r3, #15
 8011b36:	d910      	bls.n	8011b5a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011b38:	4912      	ldr	r1, [pc, #72]	; (8011b84 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011b3a:	4a13      	ldr	r2, [pc, #76]	; (8011b88 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011b3c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011b3e:	7812      	ldrb	r2, [r2, #0]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d90a      	bls.n	8011b5a <vPortValidateInterruptPriority+0x2a>
 8011b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b48:	b672      	cpsid	i
 8011b4a:	f383 8811 	msr	BASEPRI, r3
 8011b4e:	f3bf 8f6f 	isb	sy
 8011b52:	f3bf 8f4f 	dsb	sy
 8011b56:	b662      	cpsie	i
 8011b58:	e7fe      	b.n	8011b58 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011b5a:	4b0c      	ldr	r3, [pc, #48]	; (8011b8c <vPortValidateInterruptPriority+0x5c>)
 8011b5c:	4a0c      	ldr	r2, [pc, #48]	; (8011b90 <vPortValidateInterruptPriority+0x60>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	6812      	ldr	r2, [r2, #0]
 8011b62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d90a      	bls.n	8011b80 <vPortValidateInterruptPriority+0x50>
 8011b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6e:	b672      	cpsid	i
 8011b70:	f383 8811 	msr	BASEPRI, r3
 8011b74:	f3bf 8f6f 	isb	sy
 8011b78:	f3bf 8f4f 	dsb	sy
 8011b7c:	b662      	cpsie	i
 8011b7e:	e7fe      	b.n	8011b7e <vPortValidateInterruptPriority+0x4e>
	}
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop
 8011b84:	e000e3f0 	.word	0xe000e3f0
 8011b88:	20000a50 	.word	0x20000a50
 8011b8c:	e000ed0c 	.word	0xe000ed0c
 8011b90:	20000a54 	.word	0x20000a54

08011b94 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011b94:	4b11      	ldr	r3, [pc, #68]	; (8011bdc <prvInsertBlockIntoFreeList+0x48>)
{
 8011b96:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011b98:	681a      	ldr	r2, [r3, #0]
 8011b9a:	4282      	cmp	r2, r0
 8011b9c:	d201      	bcs.n	8011ba2 <prvInsertBlockIntoFreeList+0xe>
 8011b9e:	4613      	mov	r3, r2
 8011ba0:	e7fa      	b.n	8011b98 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011ba2:	685c      	ldr	r4, [r3, #4]
 8011ba4:	1919      	adds	r1, r3, r4
 8011ba6:	4288      	cmp	r0, r1
 8011ba8:	d103      	bne.n	8011bb2 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011baa:	6841      	ldr	r1, [r0, #4]
 8011bac:	4618      	mov	r0, r3
 8011bae:	4421      	add	r1, r4
 8011bb0:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011bb2:	6844      	ldr	r4, [r0, #4]
 8011bb4:	1901      	adds	r1, r0, r4
 8011bb6:	428a      	cmp	r2, r1
 8011bb8:	d109      	bne.n	8011bce <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011bba:	4909      	ldr	r1, [pc, #36]	; (8011be0 <prvInsertBlockIntoFreeList+0x4c>)
 8011bbc:	6809      	ldr	r1, [r1, #0]
 8011bbe:	428a      	cmp	r2, r1
 8011bc0:	d005      	beq.n	8011bce <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011bc2:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011bc6:	4421      	add	r1, r4
 8011bc8:	e9c0 5100 	strd	r5, r1, [r0]
 8011bcc:	e000      	b.n	8011bd0 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011bce:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011bd0:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011bd2:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011bd4:	bf18      	it	ne
 8011bd6:	6018      	strne	r0, [r3, #0]
}
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop
 8011bdc:	20020a68 	.word	0x20020a68
 8011be0:	20000a58 	.word	0x20000a58

08011be4 <pvPortMalloc>:
{
 8011be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8011bea:	f7fe ff9d 	bl	8010b28 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8011bee:	4845      	ldr	r0, [pc, #276]	; (8011d04 <pvPortMalloc+0x120>)
 8011bf0:	6803      	ldr	r3, [r0, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d037      	beq.n	8011c66 <pvPortMalloc+0x82>
 8011bf6:	4b44      	ldr	r3, [pc, #272]	; (8011d08 <pvPortMalloc+0x124>)
 8011bf8:	681f      	ldr	r7, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011bfa:	423c      	tst	r4, r7
 8011bfc:	d156      	bne.n	8011cac <pvPortMalloc+0xc8>
			if( xWantedSize > 0 )
 8011bfe:	2c00      	cmp	r4, #0
 8011c00:	d054      	beq.n	8011cac <pvPortMalloc+0xc8>
				xWantedSize += xHeapStructSize;
 8011c02:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c06:	0759      	lsls	r1, r3, #29
 8011c08:	d002      	beq.n	8011c10 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c0a:	f023 0307 	bic.w	r3, r3, #7
 8011c0e:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d04b      	beq.n	8011cac <pvPortMalloc+0xc8>
 8011c14:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8011d1c <pvPortMalloc+0x138>
 8011c18:	f8d8 6000 	ldr.w	r6, [r8]
 8011c1c:	429e      	cmp	r6, r3
 8011c1e:	d345      	bcc.n	8011cac <pvPortMalloc+0xc8>
				pxBlock = xStart.pxNextFreeBlock;
 8011c20:	493a      	ldr	r1, [pc, #232]	; (8011d0c <pvPortMalloc+0x128>)
 8011c22:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c24:	e003      	b.n	8011c2e <pvPortMalloc+0x4a>
 8011c26:	6825      	ldr	r5, [r4, #0]
 8011c28:	b125      	cbz	r5, 8011c34 <pvPortMalloc+0x50>
 8011c2a:	4621      	mov	r1, r4
 8011c2c:	462c      	mov	r4, r5
 8011c2e:	6862      	ldr	r2, [r4, #4]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d3f8      	bcc.n	8011c26 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8011c34:	6800      	ldr	r0, [r0, #0]
 8011c36:	42a0      	cmp	r0, r4
 8011c38:	d038      	beq.n	8011cac <pvPortMalloc+0xc8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011c3a:	eba2 0c03 	sub.w	ip, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011c3e:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011c40:	680d      	ldr	r5, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011c42:	f1bc 0f10 	cmp.w	ip, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011c46:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011c48:	d93e      	bls.n	8011cc8 <pvPortMalloc+0xe4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011c4a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c4c:	0742      	lsls	r2, r0, #29
 8011c4e:	d035      	beq.n	8011cbc <pvPortMalloc+0xd8>
 8011c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c54:	b672      	cpsid	i
 8011c56:	f383 8811 	msr	BASEPRI, r3
 8011c5a:	f3bf 8f6f 	isb	sy
 8011c5e:	f3bf 8f4f 	dsb	sy
 8011c62:	b662      	cpsie	i
 8011c64:	e7fe      	b.n	8011c64 <pvPortMalloc+0x80>
	uxAddress = ( size_t ) ucHeap;
 8011c66:	4b2a      	ldr	r3, [pc, #168]	; (8011d10 <pvPortMalloc+0x12c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c68:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 8011c6c:	4a29      	ldr	r2, [pc, #164]	; (8011d14 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011c6e:	075d      	lsls	r5, r3, #29
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c70:	4f29      	ldr	r7, [pc, #164]	; (8011d18 <pvPortMalloc+0x134>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c72:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8011c76:	f04f 0500 	mov.w	r5, #0
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011c7a:	bf18      	it	ne
 8011c7c:	3307      	addne	r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c7e:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8011d1c <pvPortMalloc+0x138>
	pxEnd = ( void * ) uxAddress;
 8011c82:	6002      	str	r2, [r0, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c84:	bf18      	it	ne
 8011c86:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011c8a:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c8c:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c8e:	603b      	str	r3, [r7, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c90:	4637      	mov	r7, r6
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c92:	f8cc 3000 	str.w	r3, [ip]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c96:	423c      	tst	r4, r7
	pxEnd->pxNextFreeBlock = NULL;
 8011c98:	e9c2 5500 	strd	r5, r5, [r2]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c9c:	e9c1 2300 	strd	r2, r3, [r1]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ca0:	4b1a      	ldr	r3, [pc, #104]	; (8011d0c <pvPortMalloc+0x128>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ca2:	4a19      	ldr	r2, [pc, #100]	; (8011d08 <pvPortMalloc+0x124>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ca4:	e9c3 1500 	strd	r1, r5, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ca8:	6016      	str	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011caa:	d0a8      	beq.n	8011bfe <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 8011cac:	f7fe fffc 	bl	8010ca8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8011cb0:	2500      	movs	r5, #0
 8011cb2:	f7ee ff7b 	bl	8000bac <vApplicationMallocFailedHook>
}
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011cbc:	f8c0 c004 	str.w	ip, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011cc0:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011cc2:	f7ff ff67 	bl	8011b94 <prvInsertBlockIntoFreeList>
 8011cc6:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011cc8:	4913      	ldr	r1, [pc, #76]	; (8011d18 <pvPortMalloc+0x134>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011cca:	1ab6      	subs	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8011ccc:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011cce:	433a      	orrs	r2, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011cd0:	6808      	ldr	r0, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011cd2:	3508      	adds	r5, #8
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011cd4:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011cd8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8011cda:	e9c4 3200 	strd	r3, r2, [r4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011cde:	bf38      	it	cc
 8011ce0:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8011ce2:	f7fe ffe1 	bl	8010ca8 <xTaskResumeAll>
		if( pvReturn == NULL )
 8011ce6:	2d00      	cmp	r5, #0
 8011ce8:	d0e2      	beq.n	8011cb0 <pvPortMalloc+0xcc>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011cea:	076b      	lsls	r3, r5, #29
 8011cec:	d0e3      	beq.n	8011cb6 <pvPortMalloc+0xd2>
 8011cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf2:	b672      	cpsid	i
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	b662      	cpsie	i
 8011d02:	e7fe      	b.n	8011d02 <pvPortMalloc+0x11e>
 8011d04:	20000a58 	.word	0x20000a58
 8011d08:	20020a5c 	.word	0x20020a5c
 8011d0c:	20020a68 	.word	0x20020a68
 8011d10:	20000a5c 	.word	0x20000a5c
 8011d14:	20020a54 	.word	0x20020a54
 8011d18:	20020a64 	.word	0x20020a64
 8011d1c:	20020a60 	.word	0x20020a60

08011d20 <vPortFree>:
	if( pv != NULL )
 8011d20:	b1f0      	cbz	r0, 8011d60 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011d22:	4a1b      	ldr	r2, [pc, #108]	; (8011d90 <vPortFree+0x70>)
 8011d24:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011d28:	6812      	ldr	r2, [r2, #0]
 8011d2a:	4213      	tst	r3, r2
 8011d2c:	d10a      	bne.n	8011d44 <vPortFree+0x24>
 8011d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d32:	b672      	cpsid	i
 8011d34:	f383 8811 	msr	BASEPRI, r3
 8011d38:	f3bf 8f6f 	isb	sy
 8011d3c:	f3bf 8f4f 	dsb	sy
 8011d40:	b662      	cpsie	i
 8011d42:	e7fe      	b.n	8011d42 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011d44:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8011d48:	b159      	cbz	r1, 8011d62 <vPortFree+0x42>
 8011d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4e:	b672      	cpsid	i
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	b662      	cpsie	i
 8011d5e:	e7fe      	b.n	8011d5e <vPortFree+0x3e>
 8011d60:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011d62:	ea23 0302 	bic.w	r3, r3, r2
{
 8011d66:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011d68:	f840 3c04 	str.w	r3, [r0, #-4]
 8011d6c:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8011d6e:	f7fe fedb 	bl	8010b28 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011d72:	4a08      	ldr	r2, [pc, #32]	; (8011d94 <vPortFree+0x74>)
 8011d74:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011d78:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011d7c:	6811      	ldr	r1, [r2, #0]
 8011d7e:	440b      	add	r3, r1
 8011d80:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011d82:	f7ff ff07 	bl	8011b94 <prvInsertBlockIntoFreeList>
}
 8011d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8011d8a:	f7fe bf8d 	b.w	8010ca8 <xTaskResumeAll>
 8011d8e:	bf00      	nop
 8011d90:	20020a5c 	.word	0x20020a5c
 8011d94:	20020a60 	.word	0x20020a60

08011d98 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8011d98:	4b22      	ldr	r3, [pc, #136]	; (8011e24 <tcpip_thread+0x8c>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
  if (tcpip_init_done != NULL) {
 8011da0:	b113      	cbz	r3, 8011da8 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 8011da2:	4a21      	ldr	r2, [pc, #132]	; (8011e28 <tcpip_thread+0x90>)
 8011da4:	6810      	ldr	r0, [r2, #0]
 8011da6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8011da8:	4e20      	ldr	r6, [pc, #128]	; (8011e2c <tcpip_thread+0x94>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8011daa:	4f21      	ldr	r7, [pc, #132]	; (8011e30 <tcpip_thread+0x98>)
  LOCK_TCPIP_CORE();
 8011dac:	4630      	mov	r0, r6
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011dae:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8011e3c <tcpip_thread+0xa4>
  LOCK_TCPIP_CORE();
 8011db2:	f00a ffaf 	bl	801cd14 <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8011db6:	4630      	mov	r0, r6
 8011db8:	f00a ffb2 	bl	801cd20 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8011dbc:	a901      	add	r1, sp, #4
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	f007 fa80 	bl	80192c4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011dc4:	4630      	mov	r0, r6
 8011dc6:	f00a ffa5 	bl	801cd14 <sys_mutex_lock>
    if (msg == NULL) {
 8011dca:	9c01      	ldr	r4, [sp, #4]
 8011dcc:	b31c      	cbz	r4, 8011e16 <tcpip_thread+0x7e>
    switch (msg->type) {
 8011dce:	7825      	ldrb	r5, [r4, #0]
 8011dd0:	2d03      	cmp	r5, #3
 8011dd2:	d00b      	beq.n	8011dec <tcpip_thread+0x54>
 8011dd4:	2d04      	cmp	r5, #4
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011dd6:	4643      	mov	r3, r8
 8011dd8:	f04f 029b 	mov.w	r2, #155	; 0x9b
 8011ddc:	4915      	ldr	r1, [pc, #84]	; (8011e34 <tcpip_thread+0x9c>)
 8011dde:	4816      	ldr	r0, [pc, #88]	; (8011e38 <tcpip_thread+0xa0>)
    switch (msg->type) {
 8011de0:	d015      	beq.n	8011e0e <tcpip_thread+0x76>
 8011de2:	2d02      	cmp	r5, #2
 8011de4:	d00a      	beq.n	8011dfc <tcpip_thread+0x64>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011de6:	f00c faff 	bl	801e3e8 <iprintf>
      break;
 8011dea:	e7e4      	b.n	8011db6 <tcpip_thread+0x1e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011dec:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8011df0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011df2:	9901      	ldr	r1, [sp, #4]
 8011df4:	2009      	movs	r0, #9
 8011df6:	f002 fbaf 	bl	8014558 <memp_free>
      break;
 8011dfa:	e7dc      	b.n	8011db6 <tcpip_thread+0x1e>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8011dfc:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8011e00:	6860      	ldr	r0, [r4, #4]
 8011e02:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011e04:	9901      	ldr	r1, [sp, #4]
 8011e06:	200a      	movs	r0, #10
 8011e08:	f002 fba6 	bl	8014558 <memp_free>
      break;
 8011e0c:	e7d3      	b.n	8011db6 <tcpip_thread+0x1e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011e0e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8011e12:	4798      	blx	r3
      break;
 8011e14:	e7cf      	b.n	8011db6 <tcpip_thread+0x1e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011e16:	4643      	mov	r3, r8
 8011e18:	2269      	movs	r2, #105	; 0x69
 8011e1a:	4906      	ldr	r1, [pc, #24]	; (8011e34 <tcpip_thread+0x9c>)
 8011e1c:	4806      	ldr	r0, [pc, #24]	; (8011e38 <tcpip_thread+0xa0>)
 8011e1e:	f00c fae3 	bl	801e3e8 <iprintf>
      continue;
 8011e22:	e7c8      	b.n	8011db6 <tcpip_thread+0x1e>
 8011e24:	20020a74 	.word	0x20020a74
 8011e28:	20020a78 	.word	0x20020a78
 8011e2c:	200259e4 	.word	0x200259e4
 8011e30:	20020a70 	.word	0x20020a70
 8011e34:	080236f8 	.word	0x080236f8
 8011e38:	08023618 	.word	0x08023618
 8011e3c:	080236c8 	.word	0x080236c8

08011e40 <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8011e40:	f002 bd82 	b.w	8014948 <pbuf_free>

08011e44 <tcpip_inpkt>:
{
 8011e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e46:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011e48:	4814      	ldr	r0, [pc, #80]	; (8011e9c <tcpip_inpkt+0x58>)
{
 8011e4a:	460e      	mov	r6, r1
 8011e4c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011e4e:	f00a ff29 	bl	801cca4 <sys_mbox_valid>
 8011e52:	b188      	cbz	r0, 8011e78 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011e54:	22b7      	movs	r2, #183	; 0xb7
 8011e56:	4912      	ldr	r1, [pc, #72]	; (8011ea0 <tcpip_inpkt+0x5c>)
 8011e58:	200a      	movs	r0, #10
 8011e5a:	f002 fb59 	bl	8014510 <memp_malloc_fn>
  if (msg == NULL) {
 8011e5e:	4604      	mov	r4, r0
 8011e60:	b1c0      	cbz	r0, 8011e94 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8011e62:	2302      	movs	r3, #2
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8011e64:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8011e66:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8011e68:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8011e6a:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8011e6e:	480b      	ldr	r0, [pc, #44]	; (8011e9c <tcpip_inpkt+0x58>)
 8011e70:	f00a fee4 	bl	801cc3c <sys_mbox_trypost>
 8011e74:	b938      	cbnz	r0, 8011e86 <tcpip_inpkt+0x42>
}
 8011e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011e78:	4b09      	ldr	r3, [pc, #36]	; (8011ea0 <tcpip_inpkt+0x5c>)
 8011e7a:	22b5      	movs	r2, #181	; 0xb5
 8011e7c:	4909      	ldr	r1, [pc, #36]	; (8011ea4 <tcpip_inpkt+0x60>)
 8011e7e:	480a      	ldr	r0, [pc, #40]	; (8011ea8 <tcpip_inpkt+0x64>)
 8011e80:	f00c fab2 	bl	801e3e8 <iprintf>
 8011e84:	e7e6      	b.n	8011e54 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011e86:	4621      	mov	r1, r4
 8011e88:	200a      	movs	r0, #10
 8011e8a:	f002 fb65 	bl	8014558 <memp_free>
    return ERR_MEM;
 8011e8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8011e94:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e9a:	bf00      	nop
 8011e9c:	20020a70 	.word	0x20020a70
 8011ea0:	080236c8 	.word	0x080236c8
 8011ea4:	080236b8 	.word	0x080236b8
 8011ea8:	08023618 	.word	0x08023618

08011eac <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011eac:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
 8011eb0:	f013 0f18 	tst.w	r3, #24
 8011eb4:	d102      	bne.n	8011ebc <tcpip_input+0x10>
  return tcpip_inpkt(p, inp, ip_input);
 8011eb6:	4a03      	ldr	r2, [pc, #12]	; (8011ec4 <tcpip_input+0x18>)
 8011eb8:	f7ff bfc4 	b.w	8011e44 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011ebc:	4a02      	ldr	r2, [pc, #8]	; (8011ec8 <tcpip_input+0x1c>)
 8011ebe:	f7ff bfc1 	b.w	8011e44 <tcpip_inpkt>
 8011ec2:	bf00      	nop
 8011ec4:	0801bc61 	.word	0x0801bc61
 8011ec8:	0801caad 	.word	0x0801caad

08011ecc <tcpip_callback_with_block>:
{
 8011ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ece:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011ed0:	4816      	ldr	r0, [pc, #88]	; (8011f2c <tcpip_callback_with_block+0x60>)
{
 8011ed2:	460e      	mov	r6, r1
 8011ed4:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011ed6:	f00a fee5 	bl	801cca4 <sys_mbox_valid>
 8011eda:	b1a8      	cbz	r0, 8011f08 <tcpip_callback_with_block+0x3c>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011edc:	22f0      	movs	r2, #240	; 0xf0
 8011ede:	4914      	ldr	r1, [pc, #80]	; (8011f30 <tcpip_callback_with_block+0x64>)
 8011ee0:	2009      	movs	r0, #9
 8011ee2:	f002 fb15 	bl	8014510 <memp_malloc_fn>
  if (msg == NULL) {
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	b1e0      	cbz	r0, 8011f24 <tcpip_callback_with_block+0x58>
  msg->type = TCPIP_MSG_CALLBACK;
 8011eea:	2303      	movs	r3, #3
    sys_mbox_post(&mbox, msg);
 8011eec:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8011eee:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 8011ef2:	7003      	strb	r3, [r0, #0]
    sys_mbox_post(&mbox, msg);
 8011ef4:	480d      	ldr	r0, [pc, #52]	; (8011f2c <tcpip_callback_with_block+0x60>)
  if (block) {
 8011ef6:	b91d      	cbnz	r5, 8011f00 <tcpip_callback_with_block+0x34>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8011ef8:	f00a fea0 	bl	801cc3c <sys_mbox_trypost>
 8011efc:	b958      	cbnz	r0, 8011f16 <tcpip_callback_with_block+0x4a>
}
 8011efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_post(&mbox, msg);
 8011f00:	f00a fe90 	bl	801cc24 <sys_mbox_post>
  return ERR_OK;
 8011f04:	2000      	movs	r0, #0
}
 8011f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011f08:	4b09      	ldr	r3, [pc, #36]	; (8011f30 <tcpip_callback_with_block+0x64>)
 8011f0a:	22ee      	movs	r2, #238	; 0xee
 8011f0c:	4909      	ldr	r1, [pc, #36]	; (8011f34 <tcpip_callback_with_block+0x68>)
 8011f0e:	480a      	ldr	r0, [pc, #40]	; (8011f38 <tcpip_callback_with_block+0x6c>)
 8011f10:	f00c fa6a 	bl	801e3e8 <iprintf>
 8011f14:	e7e2      	b.n	8011edc <tcpip_callback_with_block+0x10>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011f16:	4621      	mov	r1, r4
 8011f18:	2009      	movs	r0, #9
 8011f1a:	f002 fb1d 	bl	8014558 <memp_free>
      return ERR_MEM;
 8011f1e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8011f24:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f2a:	bf00      	nop
 8011f2c:	20020a70 	.word	0x20020a70
 8011f30:	080236c8 	.word	0x080236c8
 8011f34:	080236b8 	.word	0x080236b8
 8011f38:	08023618 	.word	0x08023618

08011f3c <tcpip_init>:
{
 8011f3c:	b530      	push	{r4, r5, lr}
 8011f3e:	b083      	sub	sp, #12
 8011f40:	4605      	mov	r5, r0
 8011f42:	460c      	mov	r4, r1
  lwip_init();
 8011f44:	f001 feea 	bl	8013d1c <lwip_init>
  tcpip_init_done = initfunc;
 8011f48:	4a13      	ldr	r2, [pc, #76]	; (8011f98 <tcpip_init+0x5c>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011f4a:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8011f4c:	4b13      	ldr	r3, [pc, #76]	; (8011f9c <tcpip_init+0x60>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011f4e:	4814      	ldr	r0, [pc, #80]	; (8011fa0 <tcpip_init+0x64>)
  tcpip_init_done = initfunc;
 8011f50:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8011f52:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011f54:	f00a fe46 	bl	801cbe4 <sys_mbox_new>
 8011f58:	b9a8      	cbnz	r0, 8011f86 <tcpip_init+0x4a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011f5a:	4812      	ldr	r0, [pc, #72]	; (8011fa4 <tcpip_init+0x68>)
 8011f5c:	f00a feb4 	bl	801ccc8 <sys_mutex_new>
 8011f60:	b130      	cbz	r0, 8011f70 <tcpip_init+0x34>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011f62:	4b11      	ldr	r3, [pc, #68]	; (8011fa8 <tcpip_init+0x6c>)
 8011f64:	f240 12d9 	movw	r2, #473	; 0x1d9
 8011f68:	4910      	ldr	r1, [pc, #64]	; (8011fac <tcpip_init+0x70>)
 8011f6a:	4811      	ldr	r0, [pc, #68]	; (8011fb0 <tcpip_init+0x74>)
 8011f6c:	f00c fa3c 	bl	801e3e8 <iprintf>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011f70:	2003      	movs	r0, #3
 8011f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f76:	2200      	movs	r2, #0
 8011f78:	490e      	ldr	r1, [pc, #56]	; (8011fb4 <tcpip_init+0x78>)
 8011f7a:	9000      	str	r0, [sp, #0]
 8011f7c:	480e      	ldr	r0, [pc, #56]	; (8011fb8 <tcpip_init+0x7c>)
 8011f7e:	f00a fed3 	bl	801cd28 <sys_thread_new>
}
 8011f82:	b003      	add	sp, #12
 8011f84:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011f86:	4b08      	ldr	r3, [pc, #32]	; (8011fa8 <tcpip_init+0x6c>)
 8011f88:	f240 12d5 	movw	r2, #469	; 0x1d5
 8011f8c:	490b      	ldr	r1, [pc, #44]	; (8011fbc <tcpip_init+0x80>)
 8011f8e:	4808      	ldr	r0, [pc, #32]	; (8011fb0 <tcpip_init+0x74>)
 8011f90:	f00c fa2a 	bl	801e3e8 <iprintf>
 8011f94:	e7e1      	b.n	8011f5a <tcpip_init+0x1e>
 8011f96:	bf00      	nop
 8011f98:	20020a74 	.word	0x20020a74
 8011f9c:	20020a78 	.word	0x20020a78
 8011fa0:	20020a70 	.word	0x20020a70
 8011fa4:	200259e4 	.word	0x200259e4
 8011fa8:	080236c8 	.word	0x080236c8
 8011fac:	08023684 	.word	0x08023684
 8011fb0:	08023618 	.word	0x08023618
 8011fb4:	08011d99 	.word	0x08011d99
 8011fb8:	080236a8 	.word	0x080236a8
 8011fbc:	08023660 	.word	0x08023660

08011fc0 <pbuf_free_callback>:
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
 8011fc0:	4601      	mov	r1, r0
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	4801      	ldr	r0, [pc, #4]	; (8011fcc <pbuf_free_callback+0xc>)
 8011fc6:	f7ff bf81 	b.w	8011ecc <tcpip_callback_with_block>
 8011fca:	bf00      	nop
 8011fcc:	08011e41 	.word	0x08011e41

08011fd0 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8011fd0:	b1e8      	cbz	r0, 801200e <fs_open+0x3e>
 8011fd2:	b1e1      	cbz	r1, 801200e <fs_open+0x3e>
{
 8011fd4:	b570      	push	{r4, r5, r6, lr}
 8011fd6:	460d      	mov	r5, r1
 8011fd8:	4606      	mov	r6, r0
 8011fda:	490f      	ldr	r1, [pc, #60]	; (8012018 <fs_open+0x48>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011fdc:	4c0f      	ldr	r4, [pc, #60]	; (801201c <fs_open+0x4c>)
 8011fde:	e000      	b.n	8011fe2 <fs_open+0x12>
 8011fe0:	6861      	ldr	r1, [r4, #4]
    if (!strcmp(name, (const char *)f->name)) {
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	f7ee f92c 	bl	8000240 <strcmp>
 8011fe8:	b130      	cbz	r0, 8011ff8 <fs_open+0x28>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011fea:	6824      	ldr	r4, [r4, #0]
 8011fec:	2c00      	cmp	r4, #0
 8011fee:	d1f7      	bne.n	8011fe0 <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8011ff0:	f06f 0305 	mvn.w	r3, #5
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8011ff8:	68e2      	ldr	r2, [r4, #12]
      return ERR_OK;
 8011ffa:	4603      	mov	r3, r0
      file->data = (const char *)f->data;
 8011ffc:	68a1      	ldr	r1, [r4, #8]
      file->pextension = NULL;
 8011ffe:	e9c6 2002 	strd	r2, r0, [r6, #8]
      file->len = f->len;
 8012002:	e9c6 1200 	strd	r1, r2, [r6]
      file->flags = f->flags;
 8012006:	7c22      	ldrb	r2, [r4, #16]
}
 8012008:	4618      	mov	r0, r3
      file->flags = f->flags;
 801200a:	7432      	strb	r2, [r6, #16]
}
 801200c:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 801200e:	f06f 030f 	mvn.w	r3, #15
}
 8012012:	4618      	mov	r0, r3
 8012014:	4770      	bx	lr
 8012016:	bf00      	nop
 8012018:	0802e59c 	.word	0x0802e59c
 801201c:	08039708 	.word	0x08039708

08012020 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8012020:	4770      	bx	lr
 8012022:	bf00      	nop

08012024 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8012024:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8012028:	1a10      	subs	r0, r2, r0
 801202a:	4770      	bx	lr

0801202c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 801202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8012030:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8012032:	b374      	cbz	r4, 8012092 <http_write+0x66>
 8012034:	461f      	mov	r7, r3
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8012036:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8012038:	4605      	mov	r5, r0
 801203a:	4690      	mov	r8, r2
 801203c:	005b      	lsls	r3, r3, #1
 801203e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8012042:	460e      	mov	r6, r1
 8012044:	b298      	uxth	r0, r3
 8012046:	4290      	cmp	r0, r2
 8012048:	bf28      	it	cs
 801204a:	4610      	movcs	r0, r2
 801204c:	4284      	cmp	r4, r0
 801204e:	bf28      	it	cs
 8012050:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 8012052:	463b      	mov	r3, r7
 8012054:	4622      	mov	r2, r4
 8012056:	4631      	mov	r1, r6
 8012058:	4628      	mov	r0, r5
 801205a:	f006 f899 	bl	8018190 <tcp_write>
    if (err == ERR_MEM) {
 801205e:	1c43      	adds	r3, r0, #1
 8012060:	d003      	beq.n	801206a <http_write+0x3e>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8012062:	b950      	cbnz	r0, 801207a <http_write+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8012064:	f8a8 4000 	strh.w	r4, [r8]
 8012068:	e00a      	b.n	8012080 <http_write+0x54>
      if ((tcp_sndbuf(pcb) == 0) ||
 801206a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 801206e:	b123      	cbz	r3, 801207a <http_write+0x4e>
 8012070:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
        len /= 2;
 8012074:	0864      	lsrs	r4, r4, #1
      if ((tcp_sndbuf(pcb) == 0) ||
 8012076:	2b08      	cmp	r3, #8
 8012078:	d908      	bls.n	801208c <http_write+0x60>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 801207a:	2300      	movs	r3, #0
 801207c:	f8a8 3000 	strh.w	r3, [r8]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
   /* ensure nagle is normally enabled (only disabled for persistent connections
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
 8012080:	7eab      	ldrb	r3, [r5, #26]
 8012082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012086:	76ab      	strb	r3, [r5, #26]
#endif

  return err;
}
 8012088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while ((err == ERR_MEM) && (len > 1));
 801208c:	2c01      	cmp	r4, #1
 801208e:	d8e0      	bhi.n	8012052 <http_write+0x26>
 8012090:	e7f3      	b.n	801207a <http_write+0x4e>
    return ERR_OK;
 8012092:	4620      	mov	r0, r4
}
 8012094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012098 <http_state_eof>:
{
 8012098:	b510      	push	{r4, lr}
 801209a:	4604      	mov	r4, r0
  if(hs->handle) {
 801209c:	6940      	ldr	r0, [r0, #20]
 801209e:	b118      	cbz	r0, 80120a8 <http_state_eof+0x10>
    fs_close(hs->handle);
 80120a0:	f7ff ffbe 	bl	8012020 <fs_close>
    hs->handle = NULL;
 80120a4:	2300      	movs	r3, #0
 80120a6:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80120a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80120aa:	b118      	cbz	r0, 80120b4 <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 80120ac:	f001 fe88 	bl	8013dc0 <mem_free>
    hs->ssi = NULL;
 80120b0:	2300      	movs	r3, #0
 80120b2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80120b4:	6a20      	ldr	r0, [r4, #32]
 80120b6:	b118      	cbz	r0, 80120c0 <http_state_eof+0x28>
    pbuf_free(hs->req);
 80120b8:	f002 fc46 	bl	8014948 <pbuf_free>
    hs->req = NULL;
 80120bc:	2300      	movs	r3, #0
 80120be:	6223      	str	r3, [r4, #32]
}
 80120c0:	bd10      	pop	{r4, pc}
 80120c2:	bf00      	nop

080120c4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80120c4:	b538      	push	{r3, r4, r5, lr}
 80120c6:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 80120c8:	490c      	ldr	r1, [pc, #48]	; (80120fc <http_get_404_file+0x38>)
  err = fs_open(&hs->file_handle, *uri);
 80120ca:	4604      	mov	r4, r0
  *uri = "/404.html";
 80120cc:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 80120ce:	f7ff ff7f 	bl	8011fd0 <fs_open>
  if (err != ERR_OK) {
 80120d2:	b908      	cbnz	r0, 80120d8 <http_get_404_file+0x14>
      }
    }
  }

  return &hs->file_handle;
}
 80120d4:	4620      	mov	r0, r4
 80120d6:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 80120d8:	4909      	ldr	r1, [pc, #36]	; (8012100 <http_get_404_file+0x3c>)
    err = fs_open(&hs->file_handle, *uri);
 80120da:	4620      	mov	r0, r4
    *uri = "/404.htm";
 80120dc:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 80120de:	f7ff ff77 	bl	8011fd0 <fs_open>
    if (err != ERR_OK) {
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d0f6      	beq.n	80120d4 <http_get_404_file+0x10>
      *uri = "/404.shtml";
 80120e6:	4907      	ldr	r1, [pc, #28]	; (8012104 <http_get_404_file+0x40>)
      err = fs_open(&hs->file_handle, *uri);
 80120e8:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 80120ea:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 80120ec:	f7ff ff70 	bl	8011fd0 <fs_open>
      if (err != ERR_OK) {
 80120f0:	2800      	cmp	r0, #0
 80120f2:	d0ef      	beq.n	80120d4 <http_get_404_file+0x10>
        *uri = NULL;
 80120f4:	2300      	movs	r3, #0
        return NULL;
 80120f6:	461c      	mov	r4, r3
        *uri = NULL;
 80120f8:	602b      	str	r3, [r5, #0]
        return NULL;
 80120fa:	e7eb      	b.n	80120d4 <http_get_404_file+0x10>
 80120fc:	0803979c 	.word	0x0803979c
 8012100:	080397a8 	.word	0x080397a8
 8012104:	080397b4 	.word	0x080397b4

08012108 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8012108:	bb82      	cbnz	r2, 801216c <http_accept+0x64>
{
 801210a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 801210c:	fab1 f581 	clz	r5, r1
 8012110:	096d      	lsrs	r5, r5, #5
 8012112:	bb45      	cbnz	r5, 8012166 <http_accept+0x5e>
 8012114:	460c      	mov	r4, r1
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8012116:	2101      	movs	r1, #1
 8012118:	4620      	mov	r0, r4
 801211a:	f003 fc37 	bl	801598c <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 801211e:	2034      	movs	r0, #52	; 0x34
 8012120:	f001 ffd8 	bl	80140d4 <mem_malloc>
  if (ret != NULL) {
 8012124:	4606      	mov	r6, r0
 8012126:	b1d8      	cbz	r0, 8012160 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8012128:	2234      	movs	r2, #52	; 0x34
 801212a:	4629      	mov	r1, r5
 801212c:	f00b f9dc 	bl	801d4e8 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8012130:	4631      	mov	r1, r6
 8012132:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8012134:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 8012136:	f003 fc47 	bl	80159c8 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 801213a:	4620      	mov	r0, r4
 801213c:	490d      	ldr	r1, [pc, #52]	; (8012174 <http_accept+0x6c>)
 801213e:	f003 fc47 	bl	80159d0 <tcp_recv>
  tcp_err(pcb, http_err);
 8012142:	4620      	mov	r0, r4
 8012144:	490c      	ldr	r1, [pc, #48]	; (8012178 <http_accept+0x70>)
 8012146:	f003 fc79 	bl	8015a3c <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801214a:	2204      	movs	r2, #4
 801214c:	4620      	mov	r0, r4
 801214e:	490b      	ldr	r1, [pc, #44]	; (801217c <http_accept+0x74>)
 8012150:	f003 fc96 	bl	8015a80 <tcp_poll>
  tcp_sent(pcb, http_sent);
 8012154:	4620      	mov	r0, r4
 8012156:	490a      	ldr	r1, [pc, #40]	; (8012180 <http_accept+0x78>)
 8012158:	f003 fc56 	bl	8015a08 <tcp_sent>

  return ERR_OK;
 801215c:	4628      	mov	r0, r5
}
 801215e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8012160:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012164:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8012166:	f06f 0005 	mvn.w	r0, #5
}
 801216a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 801216c:	f06f 0005 	mvn.w	r0, #5
}
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	08012c79 	.word	0x08012c79
 8012178:	080130d1 	.word	0x080130d1
 801217c:	08012c21 	.word	0x08012c21
 8012180:	08012c05 	.word	0x08012c05

08012184 <http_init_file>:
{
 8012184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012188:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801218a:	469a      	mov	sl, r3
 801218c:	4604      	mov	r4, r0
 801218e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  if (file != NULL) {
 8012192:	460d      	mov	r5, r1
 8012194:	2900      	cmp	r1, #0
 8012196:	f000 80af 	beq.w	80122f8 <http_init_file+0x174>
 801219a:	4617      	mov	r7, r2
    if (tag_check) {
 801219c:	2b00      	cmp	r3, #0
 801219e:	f040 8084 	bne.w	80122aa <http_init_file+0x126>
 80121a2:	e9d5 3200 	ldrd	r3, r2, [r5]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80121a6:	2a00      	cmp	r2, #0
    hs->file = file->data;
 80121a8:	e9c4 5305 	strd	r5, r3, [r4, #20]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80121ac:	f2c0 809a 	blt.w	80122e4 <http_init_file+0x160>
    hs->retries = 0;
 80121b0:	2300      	movs	r3, #0
      hs->left = file->len;
 80121b2:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 80121b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80121b8:	7c2b      	ldrb	r3, [r5, #16]
 80121ba:	07d9      	lsls	r1, r3, #31
 80121bc:	d559      	bpl.n	8012272 <http_init_file+0xee>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80121be:	2f00      	cmp	r7, #0
 80121c0:	d165      	bne.n	801228e <http_init_file+0x10a>
    if (params != NULL) {
 80121c2:	2e00      	cmp	r6, #0
 80121c4:	d049      	beq.n	801225a <http_init_file+0xd6>
  if(!params || (params[0] == '\0')) {
 80121c6:	7835      	ldrb	r5, [r6, #0]
 80121c8:	2d00      	cmp	r5, #0
 80121ca:	d040      	beq.n	801224e <http_init_file+0xca>
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80121cc:	2500      	movs	r5, #0
 80121ce:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8012320 <http_init_file+0x19c>
 80121d2:	f8df 8148 	ldr.w	r8, [pc, #328]	; 801231c <http_init_file+0x198>
 80121d6:	e016      	b.n	8012206 <http_init_file+0x82>
      *pair = '\0';
 80121d8:	f04f 0300 	mov.w	r3, #0
 80121dc:	f80b 3b01 	strb.w	r3, [fp], #1
 80121e0:	f1bb 0f00 	cmp.w	fp, #0
 80121e4:	bf08      	it	eq
 80121e6:	2700      	moveq	r7, #0
    equals = strchr(equals, '=');
 80121e8:	4630      	mov	r0, r6
 80121ea:	213d      	movs	r1, #61	; 0x3d
 80121ec:	f00c fab8 	bl	801e760 <strchr>
    if(equals) {
 80121f0:	b330      	cbz	r0, 8012240 <http_init_file+0xbc>
      *equals = '\0';
 80121f2:	f04f 0300 	mov.w	r3, #0
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80121f6:	465e      	mov	r6, fp
 80121f8:	f108 0804 	add.w	r8, r8, #4
      *equals = '\0';
 80121fc:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8012200:	f848 0c04 	str.w	r0, [r8, #-4]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8012204:	b31f      	cbz	r7, 801224e <http_init_file+0xca>
 8012206:	3501      	adds	r5, #1
    pair = strchr(pair, '&');
 8012208:	2126      	movs	r1, #38	; 0x26
 801220a:	4630      	mov	r0, r6
    http_cgi_params[loop] = pair;
 801220c:	f849 6b04 	str.w	r6, [r9], #4
    pair = strchr(pair, '&');
 8012210:	f00c faa6 	bl	801e760 <strchr>
 8012214:	2d0f      	cmp	r5, #15
    if(pair) {
 8012216:	4683      	mov	fp, r0
 8012218:	bfcc      	ite	gt
 801221a:	2700      	movgt	r7, #0
 801221c:	2701      	movle	r7, #1
 801221e:	2800      	cmp	r0, #0
 8012220:	d1da      	bne.n	80121d8 <http_init_file+0x54>
        pair = strchr(equals, ' ');
 8012222:	2120      	movs	r1, #32
 8012224:	4630      	mov	r0, r6
 8012226:	f00c fa9b 	bl	801e760 <strchr>
        if(pair) {
 801222a:	2800      	cmp	r0, #0
 801222c:	d073      	beq.n	8012316 <http_init_file+0x192>
            *pair = '\0';
 801222e:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8012232:	213d      	movs	r1, #61	; 0x3d
 8012234:	4630      	mov	r0, r6
            *pair = '\0';
 8012236:	465f      	mov	r7, fp
    equals = strchr(equals, '=');
 8012238:	f00c fa92 	bl	801e760 <strchr>
    if(equals) {
 801223c:	2800      	cmp	r0, #0
 801223e:	d1d8      	bne.n	80121f2 <http_init_file+0x6e>
      http_cgi_param_vals[loop] = NULL;
 8012240:	f8c8 0000 	str.w	r0, [r8]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8012244:	465e      	mov	r6, fp
 8012246:	f108 0804 	add.w	r8, r8, #4
 801224a:	2f00      	cmp	r7, #0
 801224c:	d1db      	bne.n	8012206 <http_init_file+0x82>
      httpd_cgi_handler(uri, count, http_cgi_params, http_cgi_param_vals
 801224e:	4629      	mov	r1, r5
 8012250:	4650      	mov	r0, sl
 8012252:	4b32      	ldr	r3, [pc, #200]	; (801231c <http_init_file+0x198>)
 8012254:	4a32      	ldr	r2, [pc, #200]	; (8012320 <http_init_file+0x19c>)
 8012256:	f7f2 fa13 	bl	8004680 <httpd_cgi_handler>
  if (hs->keepalive) {
 801225a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 801225e:	b12b      	cbz	r3, 801226c <http_init_file+0xe8>
     if (hs->ssi != NULL) {
 8012260:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012262:	2b00      	cmp	r3, #0
 8012264:	d04e      	beq.n	8012304 <http_init_file+0x180>
       hs->keepalive = 0;
 8012266:	2300      	movs	r3, #0
 8012268:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 801226c:	2000      	movs	r0, #0
 801226e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("HTTP headers not included in file system",
 8012272:	4b2c      	ldr	r3, [pc, #176]	; (8012324 <http_init_file+0x1a0>)
 8012274:	f640 02df 	movw	r2, #2271	; 0x8df
 8012278:	492b      	ldr	r1, [pc, #172]	; (8012328 <http_init_file+0x1a4>)
 801227a:	482c      	ldr	r0, [pc, #176]	; (801232c <http_init_file+0x1a8>)
 801227c:	f00c f8b4 	bl	801e3e8 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8012280:	2f00      	cmp	r7, #0
 8012282:	d09e      	beq.n	80121c2 <http_init_file+0x3e>
 8012284:	6963      	ldr	r3, [r4, #20]
 8012286:	7c1b      	ldrb	r3, [r3, #16]
 8012288:	07db      	lsls	r3, r3, #31
 801228a:	d59a      	bpl.n	80121c2 <http_init_file+0x3e>
 801228c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 801228e:	4928      	ldr	r1, [pc, #160]	; (8012330 <http_init_file+0x1ac>)
 8012290:	69a0      	ldr	r0, [r4, #24]
 8012292:	f000 ffb5 	bl	8013200 <lwip_strnstr>
      if (file_start != NULL) {
 8012296:	2800      	cmp	r0, #0
 8012298:	d093      	beq.n	80121c2 <http_init_file+0x3e>
        size_t diff = file_start + 4 - hs->file;
 801229a:	3004      	adds	r0, #4
 801229c:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 801229e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        size_t diff = file_start + 4 - hs->file;
 80122a0:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 80122a2:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 80122a4:	1a9b      	subs	r3, r3, r2
 80122a6:	6263      	str	r3, [r4, #36]	; 0x24
 80122a8:	e78b      	b.n	80121c2 <http_init_file+0x3e>
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80122aa:	20e0      	movs	r0, #224	; 0xe0
 80122ac:	f001 ff12 	bl	80140d4 <mem_malloc>
  if (ret != NULL) {
 80122b0:	4680      	mov	r8, r0
 80122b2:	2800      	cmp	r0, #0
 80122b4:	f43f af75 	beq.w	80121a2 <http_init_file+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80122b8:	22e0      	movs	r2, #224	; 0xe0
 80122ba:	2100      	movs	r1, #0
 80122bc:	f00b f914 	bl	801d4e8 <memset>
        ssi->tag_index = 0;
 80122c0:	2100      	movs	r1, #0
        ssi->parse_left = file->len;
 80122c2:	e9d5 3200 	ldrd	r3, r2, [r5]
        ssi->tag_index = 0;
 80122c6:	f8a8 1010 	strh.w	r1, [r8, #16]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80122ca:	2a00      	cmp	r2, #0
        ssi->tag_state = TAG_NONE;
 80122cc:	f888 10df 	strb.w	r1, [r8, #223]	; 0xdf
        ssi->parsed = file->data;
 80122d0:	f8c8 3000 	str.w	r3, [r8]
        ssi->parse_left = file->len;
 80122d4:	e9c8 3202 	strd	r3, r2, [r8, #8]
        hs->ssi = ssi;
 80122d8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    hs->file = file->data;
 80122dc:	e9c4 5305 	strd	r5, r3, [r4, #20]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80122e0:	f6bf af66 	bge.w	80121b0 <http_init_file+0x2c>
 80122e4:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80122e8:	4b0e      	ldr	r3, [pc, #56]	; (8012324 <http_init_file+0x1a0>)
 80122ea:	4912      	ldr	r1, [pc, #72]	; (8012334 <http_init_file+0x1b0>)
 80122ec:	480f      	ldr	r0, [pc, #60]	; (801232c <http_init_file+0x1a8>)
 80122ee:	f00c f87b 	bl	801e3e8 <iprintf>
 80122f2:	686a      	ldr	r2, [r5, #4]
 80122f4:	6965      	ldr	r5, [r4, #20]
 80122f6:	e75b      	b.n	80121b0 <http_init_file+0x2c>
    hs->file = NULL;
 80122f8:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 80122fc:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 80122fe:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8012302:	e7aa      	b.n	801225a <http_init_file+0xd6>
       if ((hs->handle != NULL) &&
 8012304:	6963      	ldr	r3, [r4, #20]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d0b0      	beq.n	801226c <http_init_file+0xe8>
 801230a:	7c1b      	ldrb	r3, [r3, #16]
 801230c:	f003 0303 	and.w	r3, r3, #3
 8012310:	2b01      	cmp	r3, #1
 8012312:	d1ab      	bne.n	801226c <http_init_file+0xe8>
 8012314:	e7a7      	b.n	8012266 <http_init_file+0xe2>
        if(pair) {
 8012316:	465f      	mov	r7, fp
 8012318:	e766      	b.n	80121e8 <http_init_file+0x64>
 801231a:	bf00      	nop
 801231c:	20025a28 	.word	0x20025a28
 8012320:	200259e8 	.word	0x200259e8
 8012324:	080397c0 	.word	0x080397c0
 8012328:	08039818 	.word	0x08039818
 801232c:	08023618 	.word	0x08023618
 8012330:	08021a04 	.word	0x08021a04
 8012334:	080397f8 	.word	0x080397f8

08012338 <http_find_file>:
{
 8012338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801233c:	4605      	mov	r5, r0
 801233e:	b087      	sub	sp, #28
  size_t uri_len = strlen(uri);
 8012340:	4608      	mov	r0, r1
 8012342:	460c      	mov	r4, r1
{
 8012344:	9105      	str	r1, [sp, #20]
 8012346:	4691      	mov	r9, r2
 8012348:	462f      	mov	r7, r5
  size_t uri_len = strlen(uri);
 801234a:	f7ed ff83 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 801234e:	4606      	mov	r6, r0
 8012350:	b130      	cbz	r0, 8012360 <http_find_file+0x28>
 8012352:	f100 38ff 	add.w	r8, r0, #4294967295
 8012356:	f814 3008 	ldrb.w	r3, [r4, r8]
 801235a:	2b2f      	cmp	r3, #47	; 0x2f
 801235c:	d05f      	beq.n	801241e <http_find_file+0xe6>
  u8_t tag_check = 0;
 801235e:	2600      	movs	r6, #0
    params = (char *)strchr(uri, '?');
 8012360:	213f      	movs	r1, #63	; 0x3f
 8012362:	4620      	mov	r0, r4
 8012364:	f00c f9fc 	bl	801e760 <strchr>
    if (params != NULL) {
 8012368:	4680      	mov	r8, r0
 801236a:	b118      	cbz	r0, 8012374 <http_find_file+0x3c>
      *params = '\0';
 801236c:	2300      	movs	r3, #0
 801236e:	f808 3b01 	strb.w	r3, [r8], #1
 8012372:	9c05      	ldr	r4, [sp, #20]
    err = fs_open(&hs->file_handle, uri);
 8012374:	4621      	mov	r1, r4
 8012376:	4628      	mov	r0, r5
 8012378:	f7ff fe2a 	bl	8011fd0 <fs_open>
    if (err == ERR_OK) {
 801237c:	2800      	cmp	r0, #0
 801237e:	d13e      	bne.n	80123fe <http_find_file+0xc6>
    if (file != NULL) {
 8012380:	2f00      	cmp	r7, #0
 8012382:	d043      	beq.n	801240c <http_find_file+0xd4>
      char* param = (char*)strstr(uri, "?");
 8012384:	9e05      	ldr	r6, [sp, #20]
 8012386:	213f      	movs	r1, #63	; 0x3f
 8012388:	4630      	mov	r0, r6
 801238a:	f00c f9e9 	bl	801e760 <strchr>
      if (param != NULL) {
 801238e:	4682      	mov	sl, r0
 8012390:	b110      	cbz	r0, 8012398 <http_find_file+0x60>
         *param = 0;
 8012392:	2300      	movs	r3, #0
 8012394:	7003      	strb	r3, [r0, #0]
 8012396:	9e05      	ldr	r6, [sp, #20]
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 8012398:	212e      	movs	r1, #46	; 0x2e
 801239a:	4630      	mov	r0, r6
 801239c:	f00c f9e0 	bl	801e760 <strchr>
 80123a0:	4604      	mov	r4, r0
 80123a2:	b908      	cbnz	r0, 80123a8 <http_find_file+0x70>
 80123a4:	e086      	b.n	80124b4 <http_find_file+0x17c>
 80123a6:	4604      	mov	r4, r0
 80123a8:	212e      	movs	r1, #46	; 0x2e
 80123aa:	1c60      	adds	r0, r4, #1
 80123ac:	f00c f9d8 	bl	801e760 <strchr>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	d1f8      	bne.n	80123a6 <http_find_file+0x6e>
 80123b4:	4e47      	ldr	r6, [pc, #284]	; (80124d4 <http_find_file+0x19c>)
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80123b6:	4620      	mov	r0, r4
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 80123b8:	4947      	ldr	r1, [pc, #284]	; (80124d8 <http_find_file+0x1a0>)
 80123ba:	f106 0b0c 	add.w	fp, r6, #12
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80123be:	f000 ff47 	bl	8013250 <lwip_stricmp>
 80123c2:	b140      	cbz	r0, 80123d6 <http_find_file+0x9e>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80123c4:	45b3      	cmp	fp, r6
 80123c6:	d028      	beq.n	801241a <http_find_file+0xe2>
 80123c8:	f856 1b04 	ldr.w	r1, [r6], #4
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80123cc:	4620      	mov	r0, r4
 80123ce:	f000 ff3f 	bl	8013250 <lwip_stricmp>
 80123d2:	2800      	cmp	r0, #0
 80123d4:	d1f6      	bne.n	80123c4 <http_find_file+0x8c>
          tag_check = 1;
 80123d6:	2601      	movs	r6, #1
      if (param != NULL) {
 80123d8:	f1ba 0f00 	cmp.w	sl, #0
 80123dc:	d002      	beq.n	80123e4 <http_find_file+0xac>
         *param = '?';
 80123de:	233f      	movs	r3, #63	; 0x3f
 80123e0:	f88a 3000 	strb.w	r3, [sl]
 80123e4:	9c05      	ldr	r4, [sp, #20]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80123e6:	4623      	mov	r3, r4
 80123e8:	464a      	mov	r2, r9
 80123ea:	4639      	mov	r1, r7
 80123ec:	f8cd 8004 	str.w	r8, [sp, #4]
 80123f0:	9600      	str	r6, [sp, #0]
 80123f2:	4628      	mov	r0, r5
 80123f4:	f7ff fec6 	bl	8012184 <http_init_file>
}
 80123f8:	b007      	add	sp, #28
 80123fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 80123fe:	a905      	add	r1, sp, #20
 8012400:	4628      	mov	r0, r5
 8012402:	f7ff fe5f 	bl	80120c4 <http_get_404_file>
 8012406:	4607      	mov	r7, r0
    if (file != NULL) {
 8012408:	2f00      	cmp	r7, #0
 801240a:	d1bb      	bne.n	8012384 <http_find_file+0x4c>
    file = http_get_404_file(hs, &uri);
 801240c:	a905      	add	r1, sp, #20
 801240e:	4628      	mov	r0, r5
 8012410:	f7ff fe58 	bl	80120c4 <http_get_404_file>
 8012414:	9c05      	ldr	r4, [sp, #20]
 8012416:	4607      	mov	r7, r0
 8012418:	e7e5      	b.n	80123e6 <http_find_file+0xae>
      tag_check = 0;
 801241a:	2600      	movs	r6, #0
 801241c:	e7dc      	b.n	80123d8 <http_find_file+0xa0>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 801241e:	4b2f      	ldr	r3, [pc, #188]	; (80124dc <http_find_file+0x1a4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8012420:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8012422:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8012424:	d106      	bne.n	8012434 <http_find_file+0xfc>
 8012426:	f1a0 0301 	sub.w	r3, r0, #1
 801242a:	fab3 f383 	clz	r3, r3
 801242e:	095b      	lsrs	r3, r3, #5
 8012430:	2b00      	cmp	r3, #0
 8012432:	d04b      	beq.n	80124cc <http_find_file+0x194>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8012434:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8012438:	bf28      	it	cs
 801243a:	f04f 083f 	movcs.w	r8, #63	; 0x3f
    if (copy_len > 0) {
 801243e:	2e01      	cmp	r6, #1
 8012440:	d008      	beq.n	8012454 <http_find_file+0x11c>
      MEMCPY(http_uri_buf, uri, copy_len);
 8012442:	4642      	mov	r2, r8
 8012444:	4621      	mov	r1, r4
 8012446:	4825      	ldr	r0, [pc, #148]	; (80124dc <http_find_file+0x1a4>)
 8012448:	f00b f843 	bl	801d4d2 <memcpy>
      http_uri_buf[copy_len] = 0;
 801244c:	2300      	movs	r3, #0
 801244e:	9a02      	ldr	r2, [sp, #8]
 8012450:	f802 3008 	strb.w	r3, [r2, r8]
{
 8012454:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 8012458:	f8df a080 	ldr.w	sl, [pc, #128]	; 80124dc <http_find_file+0x1a4>
      if (copy_len > 0) {
 801245c:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 801245e:	4654      	mov	r4, sl
      if (copy_len > 0) {
 8012460:	d00f      	beq.n	8012482 <http_find_file+0x14a>
        if (len_left > 0) {
 8012462:	f1d8 023f 	rsbs	r2, r8, #63	; 0x3f
 8012466:	d110      	bne.n	801248a <http_find_file+0x152>
      err = fs_open(&hs->file_handle, file_name);
 8012468:	4621      	mov	r1, r4
 801246a:	4628      	mov	r0, r5
 801246c:	f7ff fdb0 	bl	8011fd0 <fs_open>
      if(err == ERR_OK) {
 8012470:	b310      	cbz	r0, 80124b8 <http_find_file+0x180>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8012472:	f10b 0b01 	add.w	fp, fp, #1
 8012476:	f1bb 0f05 	cmp.w	fp, #5
 801247a:	d1ef      	bne.n	801245c <http_find_file+0x124>
 801247c:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 801247e:	2600      	movs	r6, #0
 8012480:	e76e      	b.n	8012360 <http_find_file+0x28>
        file_name = g_psDefaultFilenames[loop].name;
 8012482:	4b17      	ldr	r3, [pc, #92]	; (80124e0 <http_find_file+0x1a8>)
 8012484:	f853 403b 	ldr.w	r4, [r3, fp, lsl #3]
 8012488:	e7ee      	b.n	8012468 <http_find_file+0x130>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 801248a:	4b15      	ldr	r3, [pc, #84]	; (80124e0 <http_find_file+0x1a8>)
 801248c:	9204      	str	r2, [sp, #16]
 801248e:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 8012492:	4608      	mov	r0, r1
 8012494:	9103      	str	r1, [sp, #12]
 8012496:	f7ed fedd 	bl	8000254 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 801249a:	9b02      	ldr	r3, [sp, #8]
 801249c:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 80124a0:	4443      	add	r3, r8
 80124a2:	4282      	cmp	r2, r0
 80124a4:	bf28      	it	cs
 80124a6:	4602      	movcs	r2, r0
 80124a8:	4618      	mov	r0, r3
 80124aa:	f00b f812 	bl	801d4d2 <memcpy>
        file_name = http_uri_buf;
 80124ae:	f8cd a008 	str.w	sl, [sp, #8]
 80124b2:	e7d9      	b.n	8012468 <http_find_file+0x130>
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 80124b4:	4634      	mov	r4, r6
 80124b6:	e77d      	b.n	80123b4 <http_find_file+0x7c>
        tag_check = g_psDefaultFilenames[loop].shtml;
 80124b8:	4a09      	ldr	r2, [pc, #36]	; (80124e0 <http_find_file+0x1a8>)
        uri = file_name;
 80124ba:	9405      	str	r4, [sp, #20]
        tag_check = g_psDefaultFilenames[loop].shtml;
 80124bc:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
 80124c0:	791e      	ldrb	r6, [r3, #4]
  if (file == NULL) {
 80124c2:	2d00      	cmp	r5, #0
 80124c4:	f43f af4c 	beq.w	8012360 <http_find_file+0x28>
  char *params = NULL;
 80124c8:	4680      	mov	r8, r0
 80124ca:	e78c      	b.n	80123e6 <http_find_file+0xae>
 80124cc:	9c02      	ldr	r4, [sp, #8]
  u8_t tag_check = 0;
 80124ce:	461e      	mov	r6, r3
 80124d0:	e746      	b.n	8012360 <http_find_file+0x28>
 80124d2:	bf00      	nop
 80124d4:	08039720 	.word	0x08039720
 80124d8:	0803977c 	.word	0x0803977c
 80124dc:	20020a7c 	.word	0x20020a7c
 80124e0:	0803972c 	.word	0x0803972c

080124e4 <http_post_rxpbuf>:
{
 80124e4:	b570      	push	{r4, r5, r6, lr}
 80124e6:	4604      	mov	r4, r0
  if (p != NULL) {
 80124e8:	b131      	cbz	r1, 80124f8 <http_post_rxpbuf+0x14>
    if (hs->post_content_len_left < p->tot_len) {
 80124ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80124ec:	890a      	ldrh	r2, [r1, #8]
 80124ee:	4293      	cmp	r3, r2
      hs->post_content_len_left = 0;
 80124f0:	bf34      	ite	cc
 80124f2:	2300      	movcc	r3, #0
      hs->post_content_len_left -= p->tot_len;
 80124f4:	1a9b      	subcs	r3, r3, r2
 80124f6:	6303      	str	r3, [r0, #48]	; 0x30
  err = httpd_post_receive_data(hs, p);
 80124f8:	4620      	mov	r0, r4
 80124fa:	f7f2 f9c1 	bl	8004880 <httpd_post_receive_data>
  if (err != ERR_OK) {
 80124fe:	b180      	cbz	r0, 8012522 <http_post_rxpbuf+0x3e>
    hs->post_content_len_left = 0;
 8012500:	2300      	movs	r3, #0
 8012502:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 8012504:	4d09      	ldr	r5, [pc, #36]	; (801252c <http_post_rxpbuf+0x48>)
 8012506:	2600      	movs	r6, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8012508:	4620      	mov	r0, r4
 801250a:	223f      	movs	r2, #63	; 0x3f
 801250c:	4629      	mov	r1, r5
  http_uri_buf[0] = 0;
 801250e:	702e      	strb	r6, [r5, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8012510:	f7f2 f9c6 	bl	80048a0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8012514:	4632      	mov	r2, r6
 8012516:	4629      	mov	r1, r5
 8012518:	4620      	mov	r0, r4
}
 801251a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return http_find_file(hs, http_uri_buf, 0);
 801251e:	f7ff bf0b 	b.w	8012338 <http_find_file>
  if (hs->post_content_len_left == 0) {
 8012522:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012524:	2b00      	cmp	r3, #0
 8012526:	d0ed      	beq.n	8012504 <http_post_rxpbuf+0x20>
}
 8012528:	bd70      	pop	{r4, r5, r6, pc}
 801252a:	bf00      	nop
 801252c:	20020a7c 	.word	0x20020a7c

08012530 <http_find_error_file>:
  if (error_nr == 501) {
 8012530:	f240 12f5 	movw	r2, #501	; 0x1f5
    uri3 = "/400.shtml";
 8012534:	4b15      	ldr	r3, [pc, #84]	; (801258c <http_find_error_file+0x5c>)
 8012536:	4291      	cmp	r1, r2
 8012538:	4a15      	ldr	r2, [pc, #84]	; (8012590 <http_find_error_file+0x60>)
{
 801253a:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 801253c:	4c15      	ldr	r4, [pc, #84]	; (8012594 <http_find_error_file+0x64>)
  err = fs_open(&hs->file_handle, uri1);
 801253e:	bf18      	it	ne
 8012540:	4619      	movne	r1, r3
    uri3 = "/400.shtml";
 8012542:	4b15      	ldr	r3, [pc, #84]	; (8012598 <http_find_error_file+0x68>)
{
 8012544:	b082      	sub	sp, #8
  err = fs_open(&hs->file_handle, uri1);
 8012546:	bf08      	it	eq
 8012548:	4621      	moveq	r1, r4
    uri3 = "/400.shtml";
 801254a:	4d14      	ldr	r5, [pc, #80]	; (801259c <http_find_error_file+0x6c>)
 801254c:	4c14      	ldr	r4, [pc, #80]	; (80125a0 <http_find_error_file+0x70>)
 801254e:	bf04      	itt	eq
 8012550:	4615      	moveq	r5, r2
 8012552:	461c      	moveq	r4, r3
{
 8012554:	4606      	mov	r6, r0
  err = fs_open(&hs->file_handle, uri1);
 8012556:	f7ff fd3b 	bl	8011fd0 <fs_open>
  if (err != ERR_OK) {
 801255a:	b120      	cbz	r0, 8012566 <http_find_error_file+0x36>
    err = fs_open(&hs->file_handle, uri2);
 801255c:	4621      	mov	r1, r4
 801255e:	4630      	mov	r0, r6
 8012560:	f7ff fd36 	bl	8011fd0 <fs_open>
    if (err != ERR_OK) {
 8012564:	b948      	cbnz	r0, 801257a <http_find_error_file+0x4a>
  return http_init_file(hs, &hs->file_handle, 0, NULL, 0, NULL);
 8012566:	2300      	movs	r3, #0
 8012568:	4631      	mov	r1, r6
 801256a:	4630      	mov	r0, r6
 801256c:	461a      	mov	r2, r3
 801256e:	e9cd 3300 	strd	r3, r3, [sp]
 8012572:	f7ff fe07 	bl	8012184 <http_init_file>
}
 8012576:	b002      	add	sp, #8
 8012578:	bd70      	pop	{r4, r5, r6, pc}
      err = fs_open(&hs->file_handle, uri3);
 801257a:	4629      	mov	r1, r5
 801257c:	4630      	mov	r0, r6
 801257e:	f7ff fd27 	bl	8011fd0 <fs_open>
      if (err != ERR_OK) {
 8012582:	2800      	cmp	r0, #0
 8012584:	d0ef      	beq.n	8012566 <http_find_error_file+0x36>
        return ERR_ARG;
 8012586:	f06f 000f 	mvn.w	r0, #15
 801258a:	e7f4      	b.n	8012576 <http_find_error_file+0x46>
 801258c:	08039790 	.word	0x08039790
 8012590:	08039754 	.word	0x08039754
 8012594:	0803976c 	.word	0x0803976c
 8012598:	08039760 	.word	0x08039760
 801259c:	08039778 	.word	0x08039778
 80125a0:	08039784 	.word	0x08039784

080125a4 <http_close_or_abort_conn.constprop.7>:
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 80125a4:	b538      	push	{r3, r4, r5, lr}
 80125a6:	4604      	mov	r4, r0
  if (hs != NULL) {
 80125a8:	460d      	mov	r5, r1
 80125aa:	b381      	cbz	r1, 801260e <http_close_or_abort_conn.constprop.7+0x6a>
    if ((hs->post_content_len_left != 0)
 80125ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80125ae:	bb33      	cbnz	r3, 80125fe <http_close_or_abort_conn.constprop.7+0x5a>
  tcp_arg(pcb, NULL);
 80125b0:	2100      	movs	r1, #0
 80125b2:	4620      	mov	r0, r4
 80125b4:	f003 fa08 	bl	80159c8 <tcp_arg>
  tcp_recv(pcb, NULL);
 80125b8:	2100      	movs	r1, #0
 80125ba:	4620      	mov	r0, r4
 80125bc:	f003 fa08 	bl	80159d0 <tcp_recv>
  tcp_err(pcb, NULL);
 80125c0:	2100      	movs	r1, #0
 80125c2:	4620      	mov	r0, r4
 80125c4:	f003 fa3a 	bl	8015a3c <tcp_err>
  tcp_poll(pcb, NULL, 0);
 80125c8:	2200      	movs	r2, #0
 80125ca:	4620      	mov	r0, r4
 80125cc:	4611      	mov	r1, r2
 80125ce:	f003 fa57 	bl	8015a80 <tcp_poll>
  tcp_sent(pcb, NULL);
 80125d2:	2100      	movs	r1, #0
 80125d4:	4620      	mov	r0, r4
 80125d6:	f003 fa17 	bl	8015a08 <tcp_sent>
    http_state_eof(hs);
 80125da:	4628      	mov	r0, r5
 80125dc:	f7ff fd5c 	bl	8012098 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80125e0:	4628      	mov	r0, r5
 80125e2:	f001 fbed 	bl	8013dc0 <mem_free>
  err = tcp_close(pcb);
 80125e6:	4620      	mov	r0, r4
 80125e8:	f003 fdda 	bl	80161a0 <tcp_close>
  if (err != ERR_OK) {
 80125ec:	4605      	mov	r5, r0
 80125ee:	b120      	cbz	r0, 80125fa <http_close_or_abort_conn.constprop.7+0x56>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80125f0:	4620      	mov	r0, r4
 80125f2:	2204      	movs	r2, #4
 80125f4:	4910      	ldr	r1, [pc, #64]	; (8012638 <http_close_or_abort_conn.constprop.7+0x94>)
 80125f6:	f003 fa43 	bl	8015a80 <tcp_poll>
}
 80125fa:	4628      	mov	r0, r5
 80125fc:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 80125fe:	490f      	ldr	r1, [pc, #60]	; (801263c <http_close_or_abort_conn.constprop.7+0x98>)
 8012600:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8012602:	223f      	movs	r2, #63	; 0x3f
 8012604:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 8012606:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8012608:	f7f2 f94a 	bl	80048a0 <httpd_post_finished>
 801260c:	e7d0      	b.n	80125b0 <http_close_or_abort_conn.constprop.7+0xc>
  tcp_arg(pcb, NULL);
 801260e:	f003 f9db 	bl	80159c8 <tcp_arg>
  tcp_recv(pcb, NULL);
 8012612:	4629      	mov	r1, r5
 8012614:	4620      	mov	r0, r4
 8012616:	f003 f9db 	bl	80159d0 <tcp_recv>
  tcp_err(pcb, NULL);
 801261a:	4629      	mov	r1, r5
 801261c:	4620      	mov	r0, r4
 801261e:	f003 fa0d 	bl	8015a3c <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8012622:	4629      	mov	r1, r5
 8012624:	4620      	mov	r0, r4
 8012626:	462a      	mov	r2, r5
 8012628:	f003 fa2a 	bl	8015a80 <tcp_poll>
  tcp_sent(pcb, NULL);
 801262c:	4629      	mov	r1, r5
 801262e:	4620      	mov	r0, r4
 8012630:	f003 f9ea 	bl	8015a08 <tcp_sent>
 8012634:	e7d7      	b.n	80125e6 <http_close_or_abort_conn.constprop.7+0x42>
 8012636:	bf00      	nop
 8012638:	08012c21 	.word	0x08012c21
 801263c:	20020a7c 	.word	0x20020a7c

08012640 <http_eof>:
  if (hs->keepalive) {
 8012640:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8012644:	b90a      	cbnz	r2, 801264a <http_eof+0xa>
   return http_close_or_abort_conn(pcb, hs, 0);
 8012646:	f7ff bfad 	b.w	80125a4 <http_close_or_abort_conn.constprop.7>
{
 801264a:	b538      	push	{r3, r4, r5, lr}
 801264c:	460c      	mov	r4, r1
 801264e:	4605      	mov	r5, r0
    http_state_eof(hs);
 8012650:	4608      	mov	r0, r1
 8012652:	f7ff fd21 	bl	8012098 <http_state_eof>
  memset(hs, 0, sizeof(struct http_state));
 8012656:	2234      	movs	r2, #52	; 0x34
 8012658:	2100      	movs	r1, #0
 801265a:	4620      	mov	r0, r4
 801265c:	f00a ff44 	bl	801d4e8 <memset>
    hs->keepalive = 1;
 8012660:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8012662:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 8012664:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    tcp_nagle_disable(pcb);
 8012668:	7eab      	ldrb	r3, [r5, #26]
 801266a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801266e:	76ab      	strb	r3, [r5, #26]
}
 8012670:	bd38      	pop	{r3, r4, r5, pc}
 8012672:	bf00      	nop

08012674 <http_send>:
{
 8012674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012678:	b089      	sub	sp, #36	; 0x24
  if (hs == NULL) {
 801267a:	b371      	cbz	r1, 80126da <http_send+0x66>
  if (hs->left == 0) {
 801267c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801267e:	460d      	mov	r5, r1
 8012680:	4606      	mov	r6, r0
 8012682:	b37b      	cbz	r3, 80126e4 <http_send+0x70>
  if(hs->ssi) {
 8012684:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8012686:	69a9      	ldr	r1, [r5, #24]
 8012688:	2c00      	cmp	r4, #0
 801268a:	f000 8180 	beq.w	801298e <http_send+0x31a>
  if(ssi->parsed > hs->file) {
 801268e:	6827      	ldr	r7, [r4, #0]
  len = tcp_sndbuf(pcb);
 8012690:	f8b6 2060 	ldrh.w	r2, [r6, #96]	; 0x60
  if(ssi->parsed > hs->file) {
 8012694:	428f      	cmp	r7, r1
  len = tcp_sndbuf(pcb);
 8012696:	f8ad 201e 	strh.w	r2, [sp, #30]
  if(ssi->parsed > hs->file) {
 801269a:	d936      	bls.n	801270a <http_send+0x96>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801269c:	1a7f      	subs	r7, r7, r1
 801269e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126a2:	aa08      	add	r2, sp, #32
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80126a4:	4630      	mov	r0, r6
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80126a6:	429f      	cmp	r7, r3
 80126a8:	bfa8      	it	ge
 80126aa:	461f      	movge	r7, r3
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80126ac:	2301      	movs	r3, #1
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80126ae:	f822 7d02 	strh.w	r7, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80126b2:	f7ff fcbb 	bl	801202c <http_write>
    if (err == ERR_OK) {
 80126b6:	2800      	cmp	r0, #0
 80126b8:	f000 8190 	beq.w	80129dc <http_send+0x368>
  u8_t data_to_send = 0;
 80126bc:	2700      	movs	r7, #0
    if(tcp_sndbuf(pcb) == 0) {
 80126be:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
 80126c2:	bb23      	cbnz	r3, 801270e <http_send+0x9a>
 80126c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80126c6:	b94b      	cbnz	r3, 80126dc <http_send+0x68>
 80126c8:	6968      	ldr	r0, [r5, #20]
 80126ca:	f7ff fcab 	bl	8012024 <fs_bytes_left>
 80126ce:	2800      	cmp	r0, #0
 80126d0:	dc04      	bgt.n	80126dc <http_send+0x68>
    http_eof(pcb, hs);
 80126d2:	4629      	mov	r1, r5
 80126d4:	4630      	mov	r0, r6
 80126d6:	f7ff ffb3 	bl	8012640 <http_eof>
      return 0;
 80126da:	2700      	movs	r7, #0
}
 80126dc:	4638      	mov	r0, r7
 80126de:	b009      	add	sp, #36	; 0x24
 80126e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (hs->handle == NULL) {
 80126e4:	6948      	ldr	r0, [r1, #20]
 80126e6:	2800      	cmp	r0, #0
 80126e8:	d0f3      	beq.n	80126d2 <http_send+0x5e>
  bytes_left = fs_bytes_left(hs->handle);
 80126ea:	f7ff fc9b 	bl	8012024 <fs_bytes_left>
  if (bytes_left <= 0) {
 80126ee:	2800      	cmp	r0, #0
 80126f0:	ddef      	ble.n	80126d2 <http_send+0x5e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80126f2:	49b4      	ldr	r1, [pc, #720]	; (80129c4 <http_send+0x350>)
 80126f4:	f240 4283 	movw	r2, #1155	; 0x483
 80126f8:	4bb3      	ldr	r3, [pc, #716]	; (80129c8 <http_send+0x354>)
 80126fa:	48b4      	ldr	r0, [pc, #720]	; (80129cc <http_send+0x358>)
 80126fc:	f00b fe74 	bl	801e3e8 <iprintf>
  if(hs->ssi) {
 8012700:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8012702:	69a9      	ldr	r1, [r5, #24]
 8012704:	2c00      	cmp	r4, #0
 8012706:	d1c2      	bne.n	801268e <http_send+0x1a>
 8012708:	e141      	b.n	801298e <http_send+0x31a>
  u8_t data_to_send = 0;
 801270a:	2700      	movs	r7, #0
  err_t err = ERR_OK;
 801270c:	4638      	mov	r0, r7
 801270e:	68e1      	ldr	r1, [r4, #12]
              ssi->tag_index = 0;
 8012710:	f04f 0800 	mov.w	r8, #0
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8012714:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 80129c8 <http_send+0x354>
  while((ssi->parse_left) && (err == ERR_OK)) {
 8012718:	2900      	cmp	r1, #0
 801271a:	d044      	beq.n	80127a6 <http_send+0x132>
 801271c:	2800      	cmp	r0, #0
 801271e:	d142      	bne.n	80127a6 <http_send+0x132>
    if (len == 0) {
 8012720:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012724:	2a00      	cmp	r2, #0
 8012726:	d0cd      	beq.n	80126c4 <http_send+0x50>
    switch(ssi->tag_state) {
 8012728:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 801272c:	2b04      	cmp	r3, #4
 801272e:	d8f9      	bhi.n	8012724 <http_send+0xb0>
 8012730:	e8df f003 	tbb	[pc, r3]
 8012734:	556e8da0 	.word	0x556e8da0
 8012738:	03          	.byte	0x03
 8012739:	00          	.byte	0x00
        if(ssi->tag_end > hs->file) {
 801273a:	68a2      	ldr	r2, [r4, #8]
 801273c:	69ab      	ldr	r3, [r5, #24]
 801273e:	429a      	cmp	r2, r3
 8012740:	f240 80e4 	bls.w	801290c <http_send+0x298>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8012744:	6861      	ldr	r1, [r4, #4]
 8012746:	428b      	cmp	r3, r1
 8012748:	f200 8164 	bhi.w	8012a14 <http_send+0x3a0>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801274c:	1aca      	subs	r2, r1, r3
 801274e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8012752:	4282      	cmp	r2, r0
 8012754:	f340 810e 	ble.w	8012974 <http_send+0x300>
 8012758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801275c:	f8ad 201e 	strh.w	r2, [sp, #30]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8012760:	4619      	mov	r1, r3
 8012762:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012764:	f10d 021e 	add.w	r2, sp, #30
 8012768:	4630      	mov	r0, r6
 801276a:	3300      	adds	r3, #0
 801276c:	bf18      	it	ne
 801276e:	2301      	movne	r3, #1
 8012770:	f7ff fc5c 	bl	801202c <http_write>
          if (err == ERR_OK) {
 8012774:	2800      	cmp	r0, #0
 8012776:	f040 814b 	bne.w	8012a10 <http_send+0x39c>
 801277a:	6861      	ldr	r1, [r4, #4]
 801277c:	69ab      	ldr	r3, [r5, #24]
 801277e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
            if(ssi->tag_started <= hs->file) {
 8012782:	428b      	cmp	r3, r1
 8012784:	d305      	bcc.n	8012792 <http_send+0x11e>
              len += ssi->tag_end - ssi->tag_started;
 8012786:	68a0      	ldr	r0, [r4, #8]
 8012788:	1a41      	subs	r1, r0, r1
 801278a:	440a      	add	r2, r1
 801278c:	b292      	uxth	r2, r2
 801278e:	f8ad 201e 	strh.w	r2, [sp, #30]
            hs->left -= len;
 8012792:	6a68      	ldr	r0, [r5, #36]	; 0x24
            hs->file += len;
 8012794:	4413      	add	r3, r2
 8012796:	68e1      	ldr	r1, [r4, #12]
            data_to_send = 1;
 8012798:	2701      	movs	r7, #1
            hs->left -= len;
 801279a:	1a82      	subs	r2, r0, r2
            hs->file += len;
 801279c:	61ab      	str	r3, [r5, #24]
            hs->left -= len;
 801279e:	2000      	movs	r0, #0
 80127a0:	626a      	str	r2, [r5, #36]	; 0x24
  while((ssi->parse_left) && (err == ERR_OK)) {
 80127a2:	2900      	cmp	r1, #0
 80127a4:	d1ba      	bne.n	801271c <http_send+0xa8>
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80127a6:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 80127aa:	2b04      	cmp	r3, #4
 80127ac:	d08a      	beq.n	80126c4 <http_send+0x50>
 80127ae:	6824      	ldr	r4, [r4, #0]
 80127b0:	69a9      	ldr	r1, [r5, #24]
 80127b2:	428c      	cmp	r4, r1
 80127b4:	d986      	bls.n	80126c4 <http_send+0x50>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80127b6:	1a64      	subs	r4, r4, r1
 80127b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80127bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80127be:	aa08      	add	r2, sp, #32
 80127c0:	4284      	cmp	r4, r0
 80127c2:	bfa8      	it	ge
 80127c4:	4604      	movge	r4, r0
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80127c6:	3300      	adds	r3, #0
 80127c8:	4630      	mov	r0, r6
 80127ca:	bf18      	it	ne
 80127cc:	2301      	movne	r3, #1
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80127ce:	f822 4d02 	strh.w	r4, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80127d2:	f7ff fc2b 	bl	801202c <http_write>
    if (err == ERR_OK) {
 80127d6:	2800      	cmp	r0, #0
 80127d8:	f000 80ea 	beq.w	80129b0 <http_send+0x33c>
 80127dc:	e772      	b.n	80126c4 <http_send+0x50>
 80127de:	6823      	ldr	r3, [r4, #0]
 80127e0:	3901      	subs	r1, #1
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80127e2:	8a22      	ldrh	r2, [r4, #16]
 80127e4:	f813 eb01 	ldrb.w	lr, [r3], #1
 80127e8:	2a00      	cmp	r2, #0
 80127ea:	f040 8082 	bne.w	80128f2 <http_send+0x27e>
 80127ee:	f1ae 0009 	sub.w	r0, lr, #9
 80127f2:	fa5f fc80 	uxtb.w	ip, r0
 80127f6:	f1bc 0f17 	cmp.w	ip, #23
 80127fa:	d970      	bls.n	80128de <http_send+0x26a>
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 80127fc:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 8012800:	f000 812a 	beq.w	8012a58 <http_send+0x3e4>
          ssi->parse_left--;
 8012804:	60e1      	str	r1, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8012806:	2000      	movs	r0, #0
          ssi->parsed++;
 8012808:	6023      	str	r3, [r4, #0]
          ssi->tag_state = TAG_NONE;
 801280a:	f884 80df 	strb.w	r8, [r4, #223]	; 0xdf
 801280e:	e783      	b.n	8012718 <http_send+0xa4>
 8012810:	6822      	ldr	r2, [r4, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8012812:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012816:	7810      	ldrb	r0, [r2, #0]
 8012818:	f1a0 0309 	sub.w	r3, r0, #9
 801281c:	b2db      	uxtb	r3, r3
 801281e:	f1bc 0f00 	cmp.w	ip, #0
 8012822:	d136      	bne.n	8012892 <http_send+0x21e>
 8012824:	2b17      	cmp	r3, #23
 8012826:	d94d      	bls.n	80128c4 <http_send+0x250>
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8012828:	282d      	cmp	r0, #45	; 0x2d
 801282a:	f101 31ff 	add.w	r1, r1, #4294967295
 801282e:	f102 0e01 	add.w	lr, r2, #1
 8012832:	f000 8098 	beq.w	8012966 <http_send+0x2f2>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8012836:	f10c 0301 	add.w	r3, ip, #1
 801283a:	44a4      	add	ip, r4
 801283c:	8223      	strh	r3, [r4, #16]
 801283e:	7813      	ldrb	r3, [r2, #0]
 8012840:	f88c 3015 	strb.w	r3, [ip, #21]
        ssi->parse_left--;
 8012844:	60e1      	str	r1, [r4, #12]
        ssi->parsed++;
 8012846:	2000      	movs	r0, #0
 8012848:	f8c4 e000 	str.w	lr, [r4]
 801284c:	e764      	b.n	8012718 <http_send+0xa4>
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 801284e:	8a23      	ldrh	r3, [r4, #16]
 8012850:	2b05      	cmp	r3, #5
 8012852:	d067      	beq.n	8012924 <http_send+0x2b0>
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 8012854:	6822      	ldr	r2, [r4, #0]
 8012856:	485e      	ldr	r0, [pc, #376]	; (80129d0 <http_send+0x35c>)
 8012858:	f892 c000 	ldrb.w	ip, [r2]
 801285c:	5c18      	ldrb	r0, [r3, r0]
 801285e:	4584      	cmp	ip, r0
 8012860:	f000 8092 	beq.w	8012988 <http_send+0x314>
            ssi->tag_state = TAG_NONE;
 8012864:	f884 80df 	strb.w	r8, [r4, #223]	; 0xdf
          ssi->parse_left--;
 8012868:	3901      	subs	r1, #1
          ssi->parsed++;
 801286a:	3201      	adds	r2, #1
 801286c:	2000      	movs	r0, #0
          ssi->parse_left--;
 801286e:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8012870:	6022      	str	r2, [r4, #0]
 8012872:	e751      	b.n	8012718 <http_send+0xa4>
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 8012874:	6823      	ldr	r3, [r4, #0]
 8012876:	781a      	ldrb	r2, [r3, #0]
 8012878:	2a3c      	cmp	r2, #60	; 0x3c
 801287a:	d104      	bne.n	8012886 <http_send+0x212>
          ssi->tag_state = TAG_LEADIN;
 801287c:	2201      	movs	r2, #1
          ssi->tag_started = ssi->parsed;
 801287e:	6063      	str	r3, [r4, #4]
          ssi->tag_state = TAG_LEADIN;
 8012880:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
          ssi->tag_index = 1;
 8012884:	8222      	strh	r2, [r4, #16]
        ssi->parse_left--;
 8012886:	3901      	subs	r1, #1
        ssi->parsed++;
 8012888:	3301      	adds	r3, #1
 801288a:	2000      	movs	r0, #0
        ssi->parse_left--;
 801288c:	60e1      	str	r1, [r4, #12]
        ssi->parsed++;
 801288e:	6023      	str	r3, [r4, #0]
 8012890:	e742      	b.n	8012718 <http_send+0xa4>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8012892:	f000 0edf 	and.w	lr, r0, #223	; 0xdf
 8012896:	f1be 0f0d 	cmp.w	lr, #13
 801289a:	bf18      	it	ne
 801289c:	2b01      	cmpne	r3, #1
 801289e:	d948      	bls.n	8012932 <http_send+0x2be>
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 80128a0:	f1a0 0020 	sub.w	r0, r0, #32
 80128a4:	fab0 f080 	clz	r0, r0
 80128a8:	0940      	lsrs	r0, r0, #5
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80128aa:	2800      	cmp	r0, #0
 80128ac:	d141      	bne.n	8012932 <http_send+0x2be>
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80128ae:	f1bc 0f07 	cmp.w	ip, #7
 80128b2:	f101 31ff 	add.w	r1, r1, #4294967295
 80128b6:	f102 0e01 	add.w	lr, r2, #1
            ssi->tag_state = TAG_NONE;
 80128ba:	bf88      	it	hi
 80128bc:	f884 00df 	strbhi.w	r0, [r4, #223]	; 0xdf
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80128c0:	d8c0      	bhi.n	8012844 <http_send+0x1d0>
 80128c2:	e7b8      	b.n	8012836 <http_send+0x1c2>
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80128c4:	4843      	ldr	r0, [pc, #268]	; (80129d4 <http_send+0x360>)
 80128c6:	3901      	subs	r1, #1
 80128c8:	f102 0e01 	add.w	lr, r2, #1
 80128cc:	40d8      	lsrs	r0, r3
 80128ce:	43c0      	mvns	r0, r0
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80128d0:	f010 0001 	ands.w	r0, r0, #1
 80128d4:	d1af      	bne.n	8012836 <http_send+0x1c2>
          ssi->parse_left--;
 80128d6:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 80128d8:	f8c4 e000 	str.w	lr, [r4]
 80128dc:	e71c      	b.n	8012718 <http_send+0xa4>
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80128de:	483d      	ldr	r0, [pc, #244]	; (80129d4 <http_send+0x360>)
 80128e0:	fa20 f00c 	lsr.w	r0, r0, ip
 80128e4:	43c0      	mvns	r0, r0
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80128e6:	f010 0001 	ands.w	r0, r0, #1
 80128ea:	d18b      	bne.n	8012804 <http_send+0x190>
          ssi->parse_left--;
 80128ec:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 80128ee:	6023      	str	r3, [r4, #0]
 80128f0:	e712      	b.n	8012718 <http_send+0xa4>
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 80128f2:	4839      	ldr	r0, [pc, #228]	; (80129d8 <http_send+0x364>)
 80128f4:	5c10      	ldrb	r0, [r2, r0]
 80128f6:	4570      	cmp	r0, lr
 80128f8:	d184      	bne.n	8012804 <http_send+0x190>
          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 80128fa:	2a02      	cmp	r2, #2
          ssi->parse_left--;
 80128fc:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 80128fe:	6023      	str	r3, [r4, #0]
          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 8012900:	f000 80ad 	beq.w	8012a5e <http_send+0x3ea>
            ssi->tag_index++;
 8012904:	3201      	adds	r2, #1
 8012906:	2000      	movs	r0, #0
 8012908:	8222      	strh	r2, [r4, #16]
 801290a:	e705      	b.n	8012718 <http_send+0xa4>
          if(ssi->tag_index < ssi->tag_insert_len) {
 801290c:	8a23      	ldrh	r3, [r4, #16]
 801290e:	8a60      	ldrh	r0, [r4, #18]
 8012910:	4283      	cmp	r3, r0
 8012912:	f0c0 8089 	bcc.w	8012a28 <http_send+0x3b4>
              ssi->tag_index = 0;
 8012916:	f8a4 8010 	strh.w	r8, [r4, #16]
              ssi->parsed = ssi->tag_end;
 801291a:	2000      	movs	r0, #0
              ssi->tag_state = TAG_NONE;
 801291c:	f884 80df 	strb.w	r8, [r4, #223]	; 0xdf
              ssi->parsed = ssi->tag_end;
 8012920:	6022      	str	r2, [r4, #0]
 8012922:	e6f9      	b.n	8012718 <http_send+0xa4>
          ssi->tag_state = TAG_FOUND;
 8012924:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8012926:	f8a4 8010 	strh.w	r8, [r4, #16]
          ssi->tag_state = TAG_FOUND;
 801292a:	2000      	movs	r0, #0
 801292c:	f884 30df 	strb.w	r3, [r4, #223]	; 0xdf
 8012930:	e6f2      	b.n	8012718 <http_send+0xa4>
            ssi->tag_state = TAG_LEADOUT;
 8012932:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8012934:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8012938:	f884 30df 	strb.w	r3, [r4, #223]	; 0xdf
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 801293c:	d85d      	bhi.n	80129fa <http_send+0x386>
            ssi->tag_name[ssi->tag_index] = '\0';
 801293e:	eb04 030c 	add.w	r3, r4, ip
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8012942:	f884 c014 	strb.w	ip, [r4, #20]
 8012946:	f102 0e01 	add.w	lr, r2, #1
            ssi->tag_name[ssi->tag_index] = '\0';
 801294a:	f883 8015 	strb.w	r8, [r3, #21]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 801294e:	7813      	ldrb	r3, [r2, #0]
 8012950:	2b2d      	cmp	r3, #45	; 0x2d
 8012952:	d04d      	beq.n	80129f0 <http_send+0x37c>
 8012954:	68e1      	ldr	r1, [r4, #12]
        ssi->parsed++;
 8012956:	2000      	movs	r0, #0
              ssi->tag_index = 0;
 8012958:	f8a4 8010 	strh.w	r8, [r4, #16]
 801295c:	3901      	subs	r1, #1
        ssi->parsed++;
 801295e:	f8c4 e000 	str.w	lr, [r4]
        ssi->parse_left--;
 8012962:	60e1      	str	r1, [r4, #12]
 8012964:	e6d8      	b.n	8012718 <http_send+0xa4>
            ssi->tag_state = TAG_NONE;
 8012966:	f884 c0df 	strb.w	ip, [r4, #223]	; 0xdf
        ssi->parsed++;
 801296a:	2000      	movs	r0, #0
        ssi->parse_left--;
 801296c:	60e1      	str	r1, [r4, #12]
        ssi->parsed++;
 801296e:	f8c4 e000 	str.w	lr, [r4]
 8012972:	e6d1      	b.n	8012718 <http_send+0xa4>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8012974:	b292      	uxth	r2, r2
 8012976:	f8ad 201e 	strh.w	r2, [sp, #30]
          if (len != 0) {
 801297a:	2a00      	cmp	r2, #0
 801297c:	f47f aef0 	bne.w	8012760 <http_send+0xec>
            if(ssi->tag_started <= hs->file) {
 8012980:	428b      	cmp	r3, r1
 8012982:	f4ff af06 	bcc.w	8012792 <http_send+0x11e>
 8012986:	e6fe      	b.n	8012786 <http_send+0x112>
            ssi->tag_index++;
 8012988:	3301      	adds	r3, #1
 801298a:	8223      	strh	r3, [r4, #16]
 801298c:	e76c      	b.n	8012868 <http_send+0x1f4>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801298e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8012992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012996:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8012998:	aa08      	add	r2, sp, #32
 801299a:	4287      	cmp	r7, r0
 801299c:	bf88      	it	hi
 801299e:	461f      	movhi	r7, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80129a0:	4623      	mov	r3, r4
 80129a2:	4630      	mov	r0, r6
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80129a4:	f822 7d02 	strh.w	r7, [r2, #-2]!
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80129a8:	f7ff fb40 	bl	801202c <http_write>
  if (err == ERR_OK) {
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d151      	bne.n	8012a54 <http_send+0x3e0>
    hs->file += len;
 80129b0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    data_to_send = 1;
 80129b4:	2701      	movs	r7, #1
    hs->file += len;
 80129b6:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 80129b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 80129ba:	440a      	add	r2, r1
    hs->left -= len;
 80129bc:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 80129be:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 80129c0:	626b      	str	r3, [r5, #36]	; 0x24
 80129c2:	e680      	b.n	80126c6 <http_send+0x52>
 80129c4:	080398c4 	.word	0x080398c4
 80129c8:	080397c0 	.word	0x080397c0
 80129cc:	08023618 	.word	0x08023618
 80129d0:	080398fc 	.word	0x080398fc
 80129d4:	00800013 	.word	0x00800013
 80129d8:	0803991c 	.word	0x0803991c
      hs->file += len;
 80129dc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
      data_to_send = 1;
 80129e0:	2701      	movs	r7, #1
      hs->file += len;
 80129e2:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 80129e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 80129e6:	440a      	add	r2, r1
      hs->left -= len;
 80129e8:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 80129ea:	61aa      	str	r2, [r5, #24]
      hs->left -= len;
 80129ec:	626b      	str	r3, [r5, #36]	; 0x24
 80129ee:	e666      	b.n	80126be <http_send+0x4a>
              ssi->tag_index = 1;
 80129f0:	2301      	movs	r3, #1
 80129f2:	68e1      	ldr	r1, [r4, #12]
 80129f4:	8223      	strh	r3, [r4, #16]
 80129f6:	3901      	subs	r1, #1
 80129f8:	e724      	b.n	8012844 <http_send+0x1d0>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80129fa:	f240 521b 	movw	r2, #1307	; 0x51b
 80129fe:	465b      	mov	r3, fp
 8012a00:	4976      	ldr	r1, [pc, #472]	; (8012bdc <http_send+0x568>)
 8012a02:	4877      	ldr	r0, [pc, #476]	; (8012be0 <http_send+0x56c>)
 8012a04:	f00b fcf0 	bl	801e3e8 <iprintf>
 8012a08:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012a0c:	6822      	ldr	r2, [r4, #0]
 8012a0e:	e796      	b.n	801293e <http_send+0x2ca>
 8012a10:	68e1      	ldr	r1, [r4, #12]
 8012a12:	e681      	b.n	8012718 <http_send+0xa4>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8012a14:	465b      	mov	r3, fp
 8012a16:	4973      	ldr	r1, [pc, #460]	; (8012be4 <http_send+0x570>)
 8012a18:	f240 528e 	movw	r2, #1422	; 0x58e
 8012a1c:	4870      	ldr	r0, [pc, #448]	; (8012be0 <http_send+0x56c>)
 8012a1e:	f00b fce3 	bl	801e3e8 <iprintf>
 8012a22:	6861      	ldr	r1, [r4, #4]
 8012a24:	69ab      	ldr	r3, [r5, #24]
 8012a26:	e691      	b.n	801274c <http_send+0xd8>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8012a28:	eba0 0c03 	sub.w	ip, r0, r3
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8012a2c:	f103 011e 	add.w	r1, r3, #30
            len = (ssi->tag_insert_len - ssi->tag_index);
 8012a30:	aa08      	add	r2, sp, #32
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8012a32:	2301      	movs	r3, #1
 8012a34:	4421      	add	r1, r4
 8012a36:	4630      	mov	r0, r6
            len = (ssi->tag_insert_len - ssi->tag_index);
 8012a38:	f822 cd02 	strh.w	ip, [r2, #-2]!
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8012a3c:	f7ff faf6 	bl	801202c <http_write>
            if (err == ERR_OK) {
 8012a40:	2800      	cmp	r0, #0
 8012a42:	d1e5      	bne.n	8012a10 <http_send+0x39c>
              ssi->tag_index += len;
 8012a44:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8012a46:	2701      	movs	r7, #1
              ssi->tag_index += len;
 8012a48:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012a4c:	68e1      	ldr	r1, [r4, #12]
 8012a4e:	4413      	add	r3, r2
 8012a50:	8223      	strh	r3, [r4, #16]
 8012a52:	e661      	b.n	8012718 <http_send+0xa4>
  u8_t data_to_send = 0;
 8012a54:	4627      	mov	r7, r4
 8012a56:	e635      	b.n	80126c4 <http_send+0x50>
          ssi->parse_left--;
 8012a58:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8012a5a:	6023      	str	r3, [r4, #0]
 8012a5c:	e752      	b.n	8012904 <http_send+0x290>
  ssi = hs->ssi;
 8012a5e:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8012a62:	f1b9 0f00 	cmp.w	r9, #0
 8012a66:	f000 80b1 	beq.w	8012bcc <http_send+0x558>
  if(g_pfnSSIHandler
 8012a6a:	4b5f      	ldr	r3, [pc, #380]	; (8012be8 <http_send+0x574>)
 8012a6c:	f109 0115 	add.w	r1, r9, #21
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	9101      	str	r1, [sp, #4]
 8012a74:	9302      	str	r3, [sp, #8]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d061      	beq.n	8012b3e <http_send+0x4ca>
     && g_ppcTags && g_iNumTags
 8012a7a:	4b5c      	ldr	r3, [pc, #368]	; (8012bec <http_send+0x578>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d05d      	beq.n	8012b3e <http_send+0x4ca>
 8012a82:	4a5b      	ldr	r2, [pc, #364]	; (8012bf0 <http_send+0x57c>)
 8012a84:	6812      	ldr	r2, [r2, #0]
    for(tag = 0; tag < g_iNumTags; tag++) {
 8012a86:	2a00      	cmp	r2, #0
 8012a88:	dd59      	ble.n	8012b3e <http_send+0x4ca>
 8012a8a:	f04f 0a00 	mov.w	sl, #0
 8012a8e:	3b04      	subs	r3, #4
 8012a90:	9403      	str	r4, [sp, #12]
 8012a92:	4614      	mov	r4, r2
 8012a94:	9704      	str	r7, [sp, #16]
 8012a96:	460f      	mov	r7, r1
 8012a98:	9605      	str	r6, [sp, #20]
 8012a9a:	4656      	mov	r6, sl
 8012a9c:	46aa      	mov	sl, r5
 8012a9e:	461d      	mov	r5, r3
 8012aa0:	e002      	b.n	8012aa8 <http_send+0x434>
 8012aa2:	3601      	adds	r6, #1
 8012aa4:	42b4      	cmp	r4, r6
 8012aa6:	d046      	beq.n	8012b36 <http_send+0x4c2>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 8012aa8:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8012aac:	4638      	mov	r0, r7
 8012aae:	f7ed fbc7 	bl	8000240 <strcmp>
 8012ab2:	2800      	cmp	r0, #0
 8012ab4:	d1f5      	bne.n	8012aa2 <http_send+0x42e>
 8012ab6:	4655      	mov	r5, sl
 8012ab8:	46b2      	mov	sl, r6
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 8012aba:	22c0      	movs	r2, #192	; 0xc0
 8012abc:	f109 011e 	add.w	r1, r9, #30
 8012ac0:	4650      	mov	r0, sl
 8012ac2:	9b02      	ldr	r3, [sp, #8]
 8012ac4:	9e05      	ldr	r6, [sp, #20]
 8012ac6:	e9dd 4703 	ldrd	r4, r7, [sp, #12]
 8012aca:	4798      	blx	r3
 8012acc:	f8a9 0012 	strh.w	r0, [r9, #18]
            if (ssi->tag_end > hs->file) {
 8012ad0:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_state = TAG_SENDING;
 8012ad2:	2004      	movs	r0, #4
            ssi->tag_index = 0;
 8012ad4:	f8a4 8010 	strh.w	r8, [r4, #16]
            ssi->tag_state = TAG_SENDING;
 8012ad8:	f884 00df 	strb.w	r0, [r4, #223]	; 0xdf
            ssi->parsed = ssi->tag_started;
 8012adc:	e9d4 2300 	ldrd	r2, r3, [r4]
            if (ssi->tag_end > hs->file) {
 8012ae0:	428a      	cmp	r2, r1
            ssi->tag_end = ssi->parsed;
 8012ae2:	60a2      	str	r2, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8012ae4:	6023      	str	r3, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8012ae6:	d966      	bls.n	8012bb6 <http_send+0x542>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8012ae8:	eba3 0c01 	sub.w	ip, r3, r1
 8012aec:	f64f 70ff 	movw	r0, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8012af0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8012af2:	aa08      	add	r2, sp, #32
 8012af4:	4584      	cmp	ip, r0
 8012af6:	bfa8      	it	ge
 8012af8:	4684      	movge	ip, r0
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8012afa:	3300      	adds	r3, #0
 8012afc:	4630      	mov	r0, r6
 8012afe:	bf18      	it	ne
 8012b00:	2301      	movne	r3, #1
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8012b02:	f822 cd02 	strh.w	ip, [r2, #-2]!
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8012b06:	f7ff fa91 	bl	801202c <http_write>
              if (err == ERR_OK) {
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	d180      	bne.n	8012a10 <http_send+0x39c>
                if(ssi->tag_started <= hs->file) {
 8012b0e:	6867      	ldr	r7, [r4, #4]
 8012b10:	69aa      	ldr	r2, [r5, #24]
 8012b12:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012b16:	4297      	cmp	r7, r2
 8012b18:	d805      	bhi.n	8012b26 <http_send+0x4b2>
                  len += ssi->tag_end - ssi->tag_started;
 8012b1a:	68a1      	ldr	r1, [r4, #8]
 8012b1c:	1bc9      	subs	r1, r1, r7
 8012b1e:	440b      	add	r3, r1
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	f8ad 301e 	strh.w	r3, [sp, #30]
                hs->left -= len;
 8012b26:	6a69      	ldr	r1, [r5, #36]	; 0x24
                hs->file += len;
 8012b28:	441a      	add	r2, r3
                data_to_send = 1;
 8012b2a:	2701      	movs	r7, #1
                hs->left -= len;
 8012b2c:	1acb      	subs	r3, r1, r3
                hs->file += len;
 8012b2e:	61aa      	str	r2, [r5, #24]
 8012b30:	68e1      	ldr	r1, [r4, #12]
                hs->left -= len;
 8012b32:	626b      	str	r3, [r5, #36]	; 0x24
 8012b34:	e5f0      	b.n	8012718 <http_send+0xa4>
 8012b36:	e9dd 4703 	ldrd	r4, r7, [sp, #12]
 8012b3a:	9e05      	ldr	r6, [sp, #20]
 8012b3c:	4655      	mov	r5, sl
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8012b3e:	9801      	ldr	r0, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8012b40:	f109 0a1e 	add.w	sl, r9, #30
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8012b44:	f7ed fb86 	bl	8000254 <strlen>
 8012b48:	2809      	cmp	r0, #9
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8012b4a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8012c00 <http_send+0x58c>
 8012b4e:	bf28      	it	cs
 8012b50:	2009      	movcs	r0, #9
 8012b52:	9002      	str	r0, [sp, #8]
 8012b54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b58:	f8bc c000 	ldrh.w	ip, [ip]
 8012b5c:	f8c9 001e 	str.w	r0, [r9, #30]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8012b60:	f109 0030 	add.w	r0, r9, #48	; 0x30
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8012b64:	f8a9 c02e 	strh.w	ip, [r9, #46]	; 0x2e
 8012b68:	f8c9 1022 	str.w	r1, [r9, #34]	; 0x22
 8012b6c:	f8c9 2026 	str.w	r2, [r9, #38]	; 0x26
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8012b70:	9901      	ldr	r1, [sp, #4]
 8012b72:	9a02      	ldr	r2, [sp, #8]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8012b74:	f8c9 302a 	str.w	r3, [r9, #42]	; 0x2a
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8012b78:	f00a fcab 	bl	801d4d2 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8012b7c:	9a02      	ldr	r2, [sp, #8]
 8012b7e:	4b1d      	ldr	r3, [pc, #116]	; (8012bf4 <http_send+0x580>)
 8012b80:	f102 0130 	add.w	r1, r2, #48	; 0x30
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8012b84:	eb09 0c02 	add.w	ip, r9, r2
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8012b88:	6818      	ldr	r0, [r3, #0]
 8012b8a:	eb09 0201 	add.w	r2, r9, r1
 8012b8e:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 8012b92:	799b      	ldrb	r3, [r3, #6]
 8012b94:	f849 0001 	str.w	r0, [r9, r1]
  len = strlen(ssi->tag_insert);
 8012b98:	4650      	mov	r0, sl
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8012b9a:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012b9e:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8012ba0:	f88c 8037 	strb.w	r8, [ip, #55]	; 0x37
  len = strlen(ssi->tag_insert);
 8012ba4:	f7ed fb56 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8012ba8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8012bac:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8012bae:	d205      	bcs.n	8012bbc <http_send+0x548>
  ssi->tag_insert_len = (u16_t)len;
 8012bb0:	f8a9 a012 	strh.w	sl, [r9, #18]
 8012bb4:	e78c      	b.n	8012ad0 <http_send+0x45c>
 8012bb6:	68e1      	ldr	r1, [r4, #12]
            if (ssi->tag_end > hs->file) {
 8012bb8:	2000      	movs	r0, #0
 8012bba:	e5ad      	b.n	8012718 <http_send+0xa4>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8012bbc:	465b      	mov	r3, fp
 8012bbe:	f240 3236 	movw	r2, #822	; 0x336
 8012bc2:	490d      	ldr	r1, [pc, #52]	; (8012bf8 <http_send+0x584>)
 8012bc4:	4806      	ldr	r0, [pc, #24]	; (8012be0 <http_send+0x56c>)
 8012bc6:	f00b fc0f 	bl	801e3e8 <iprintf>
 8012bca:	e7f1      	b.n	8012bb0 <http_send+0x53c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8012bcc:	465b      	mov	r3, fp
 8012bce:	f240 22fd 	movw	r2, #765	; 0x2fd
 8012bd2:	490a      	ldr	r1, [pc, #40]	; (8012bfc <http_send+0x588>)
 8012bd4:	4802      	ldr	r0, [pc, #8]	; (8012be0 <http_send+0x56c>)
 8012bd6:	f00b fc07 	bl	801e3e8 <iprintf>
 8012bda:	e746      	b.n	8012a6a <http_send+0x3f6>
 8012bdc:	08039904 	.word	0x08039904
 8012be0:	08023618 	.word	0x08023618
 8012be4:	08039958 	.word	0x08039958
 8012be8:	20025a68 	.word	0x20025a68
 8012bec:	20025a70 	.word	0x20025a70
 8012bf0:	20025a6c 	.word	0x20025a6c
 8012bf4:	08039940 	.word	0x08039940
 8012bf8:	08039948 	.word	0x08039948
 8012bfc:	08039920 	.word	0x08039920
 8012c00:	0803992c 	.word	0x0803992c

08012c04 <http_sent>:
  if (hs == NULL) {
 8012c04:	b150      	cbz	r0, 8012c1c <http_sent+0x18>
  hs->retries = 0;
 8012c06:	2200      	movs	r2, #0
{
 8012c08:	b508      	push	{r3, lr}
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	4608      	mov	r0, r1
  hs->retries = 0;
 8012c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8012c12:	4619      	mov	r1, r3
 8012c14:	f7ff fd2e 	bl	8012674 <http_send>
}
 8012c18:	2000      	movs	r0, #0
 8012c1a:	bd08      	pop	{r3, pc}
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	4770      	bx	lr

08012c20 <http_poll>:
{
 8012c20:	b510      	push	{r4, lr}
 8012c22:	460c      	mov	r4, r1
  if (hs == NULL) {
 8012c24:	b1a8      	cbz	r0, 8012c52 <http_poll+0x32>
    hs->retries++;
 8012c26:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8012c2e:	2b04      	cmp	r3, #4
    hs->retries++;
 8012c30:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8012c34:	d019      	beq.n	8012c6a <http_poll+0x4a>
    if(hs && (hs->handle)) {
 8012c36:	6943      	ldr	r3, [r0, #20]
 8012c38:	b123      	cbz	r3, 8012c44 <http_poll+0x24>
      if(http_send(pcb, hs)) {
 8012c3a:	4601      	mov	r1, r0
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f7ff fd19 	bl	8012674 <http_send>
 8012c42:	b908      	cbnz	r0, 8012c48 <http_poll+0x28>
  return ERR_OK;
 8012c44:	2000      	movs	r0, #0
}
 8012c46:	bd10      	pop	{r4, pc}
        tcp_output(pcb);
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f005 ff01 	bl	8018a50 <tcp_output>
  return ERR_OK;
 8012c4e:	2000      	movs	r0, #0
 8012c50:	e7f9      	b.n	8012c46 <http_poll+0x26>
   return http_close_or_abort_conn(pcb, hs, 0);
 8012c52:	4601      	mov	r1, r0
 8012c54:	4620      	mov	r0, r4
 8012c56:	f7ff fca5 	bl	80125a4 <http_close_or_abort_conn.constprop.7>
    if (closed == ERR_MEM) {
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	d1f2      	bne.n	8012c44 <http_poll+0x24>
       tcp_abort(pcb);
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f003 fbe0 	bl	8016424 <tcp_abort>
       return ERR_ABRT;
 8012c64:	f06f 000c 	mvn.w	r0, #12
}
 8012c68:	bd10      	pop	{r4, pc}
   return http_close_or_abort_conn(pcb, hs, 0);
 8012c6a:	4601      	mov	r1, r0
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	f7ff fc99 	bl	80125a4 <http_close_or_abort_conn.constprop.7>
      return ERR_OK;
 8012c72:	2000      	movs	r0, #0
}
 8012c74:	bd10      	pop	{r4, pc}
 8012c76:	bf00      	nop

08012c78 <http_recv>:
{
 8012c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c7c:	4605      	mov	r5, r0
 8012c7e:	b08d      	sub	sp, #52	; 0x34
 8012c80:	460e      	mov	r6, r1
 8012c82:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8012c84:	b99b      	cbnz	r3, 8012cae <http_recv+0x36>
 8012c86:	fab2 f782 	clz	r7, r2
 8012c8a:	097f      	lsrs	r7, r7, #5
 8012c8c:	b97f      	cbnz	r7, 8012cae <http_recv+0x36>
 8012c8e:	8911      	ldrh	r1, [r2, #8]
 8012c90:	b1b8      	cbz	r0, 8012cc2 <http_recv+0x4a>
    tcp_recved(pcb, p->tot_len);
 8012c92:	4630      	mov	r0, r6
 8012c94:	f002 fd80 	bl	8015798 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8012c98:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012c9a:	b9cb      	cbnz	r3, 8012cd0 <http_recv+0x58>
    if (hs->handle == NULL) {
 8012c9c:	696f      	ldr	r7, [r5, #20]
 8012c9e:	b32f      	cbz	r7, 8012cec <http_recv+0x74>
      pbuf_free(p);
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f001 fe51 	bl	8014948 <pbuf_free>
}
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	b00d      	add	sp, #52	; 0x34
 8012caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8012cae:	b93c      	cbnz	r4, 8012cc0 <http_recv+0x48>
   return http_close_or_abort_conn(pcb, hs, 0);
 8012cb0:	4629      	mov	r1, r5
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f7ff fc76 	bl	80125a4 <http_close_or_abort_conn.constprop.7>
}
 8012cb8:	2000      	movs	r0, #0
 8012cba:	b00d      	add	sp, #52	; 0x34
 8012cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cc0:	8921      	ldrh	r1, [r4, #8]
      tcp_recved(pcb, p->tot_len);
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	f002 fd68 	bl	8015798 <tcp_recved>
      pbuf_free(p);
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f001 fe3d 	bl	8014948 <pbuf_free>
 8012cce:	e7ef      	b.n	8012cb0 <http_recv+0x38>
    hs->retries = 0;
 8012cd0:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8012cd4:	4621      	mov	r1, r4
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	f7ff fc04 	bl	80124e4 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8012cdc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d1ea      	bne.n	8012cb8 <http_recv+0x40>
      http_send(pcb, hs);
 8012ce2:	4629      	mov	r1, r5
 8012ce4:	4630      	mov	r0, r6
 8012ce6:	f7ff fcc5 	bl	8012674 <http_send>
 8012cea:	e7e5      	b.n	8012cb8 <http_recv+0x40>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8012cec:	69ab      	ldr	r3, [r5, #24]
 8012cee:	6a28      	ldr	r0, [r5, #32]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	f040 814b 	bne.w	8012f8c <http_recv+0x314>
  if (hs->req == NULL) {
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	f000 80e9 	beq.w	8012ece <http_recv+0x256>
    pbuf_cat(hs->req, p);
 8012cfc:	4621      	mov	r1, r4
 8012cfe:	f002 f837 	bl	8014d70 <pbuf_cat>
  pbuf_ref(p);
 8012d02:	4620      	mov	r0, r4
 8012d04:	f002 f820 	bl	8014d48 <pbuf_ref>
  if (hs->req->next != NULL) {
 8012d08:	6a28      	ldr	r0, [r5, #32]
 8012d0a:	6803      	ldr	r3, [r0, #0]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	f000 8110 	beq.w	8012f32 <http_recv+0x2ba>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8012d12:	8907      	ldrh	r7, [r0, #8]
 8012d14:	f240 32ff 	movw	r2, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8012d18:	49bb      	ldr	r1, [pc, #748]	; (8013008 <http_recv+0x390>)
 8012d1a:	2300      	movs	r3, #0
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8012d1c:	4297      	cmp	r7, r2
    data = httpd_req_buf;
 8012d1e:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8012d20:	bf28      	it	cs
 8012d22:	4617      	movcs	r7, r2
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8012d24:	463a      	mov	r2, r7
 8012d26:	f002 f93b 	bl	8014fa0 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8012d2a:	2f06      	cmp	r7, #6
 8012d2c:	f240 80d1 	bls.w	8012ed2 <http_recv+0x25a>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8012d30:	463a      	mov	r2, r7
 8012d32:	49b6      	ldr	r1, [pc, #728]	; (801300c <http_recv+0x394>)
 8012d34:	4640      	mov	r0, r8
 8012d36:	f000 fa63 	bl	8013200 <lwip_strnstr>
    if (crlf != NULL) {
 8012d3a:	2800      	cmp	r0, #0
 8012d3c:	f000 80c9 	beq.w	8012ed2 <http_recv+0x25a>
      if (!strncmp(data, "GET ", 4)) {
 8012d40:	2204      	movs	r2, #4
 8012d42:	49b3      	ldr	r1, [pc, #716]	; (8013010 <http_recv+0x398>)
 8012d44:	4640      	mov	r0, r8
 8012d46:	f00b fd20 	bl	801e78a <strncmp>
 8012d4a:	9005      	str	r0, [sp, #20]
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	f040 80fa 	bne.w	8012f46 <http_recv+0x2ce>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8012d52:	f1a7 0a04 	sub.w	sl, r7, #4
 8012d56:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8012d5a:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012d5e:	49ad      	ldr	r1, [pc, #692]	; (8013014 <http_recv+0x39c>)
 8012d60:	fa1f fa8a 	uxth.w	sl, sl
 8012d64:	4658      	mov	r0, fp
        sp1 = data + 3;
 8012d66:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012d68:	4652      	mov	r2, sl
 8012d6a:	f000 fa49 	bl	8013200 <lwip_strnstr>
      if (sp2 == NULL) {
 8012d6e:	9b05      	ldr	r3, [sp, #20]
 8012d70:	4681      	mov	r9, r0
 8012d72:	2800      	cmp	r0, #0
 8012d74:	f000 811b 	beq.w	8012fae <http_recv+0x336>
      int is_09 = 0;
 8012d78:	469a      	mov	sl, r3
 8012d7a:	9305      	str	r3, [sp, #20]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8012d7c:	f1b9 0f00 	cmp.w	r9, #0
 8012d80:	f000 80a7 	beq.w	8012ed2 <http_recv+0x25a>
 8012d84:	9b04      	ldr	r3, [sp, #16]
 8012d86:	4599      	cmp	r9, r3
 8012d88:	f240 80a3 	bls.w	8012ed2 <http_recv+0x25a>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8012d8c:	463a      	mov	r2, r7
 8012d8e:	49a2      	ldr	r1, [pc, #648]	; (8013018 <http_recv+0x3a0>)
 8012d90:	4640      	mov	r0, r8
 8012d92:	f000 fa35 	bl	8013200 <lwip_strnstr>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	f000 809b 	beq.w	8012ed2 <http_recv+0x25a>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8012d9c:	9b05      	ldr	r3, [sp, #20]
 8012d9e:	f1ba 0f00 	cmp.w	sl, #0
 8012da2:	f000 8115 	beq.w	8012fd0 <http_recv+0x358>
            hs->keepalive = 0;
 8012da6:	2200      	movs	r2, #0
 8012da8:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8012dac:	eba9 020b 	sub.w	r2, r9, fp
          *sp1 = 0;
 8012db0:	2100      	movs	r1, #0
 8012db2:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 8012db4:	b292      	uxth	r2, r2
          *sp1 = 0;
 8012db6:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8012db8:	eb0b 0002 	add.w	r0, fp, r2
 8012dbc:	f80b 1002 	strb.w	r1, [fp, r2]
 8012dc0:	9005      	str	r0, [sp, #20]
          if (is_post) {
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	f000 80ec 	beq.w	8012fa0 <http_recv+0x328>
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8012dc8:	f109 0301 	add.w	r3, r9, #1
 8012dcc:	4992      	ldr	r1, [pc, #584]	; (8013018 <http_recv+0x3a0>)
            struct pbuf *q = hs->req;
 8012dce:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8012dd2:	eba3 0208 	sub.w	r2, r3, r8
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	9306      	str	r3, [sp, #24]
 8012dda:	1aba      	subs	r2, r7, r2
 8012ddc:	f000 fa10 	bl	8013200 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8012de0:	9008      	str	r0, [sp, #32]
 8012de2:	2800      	cmp	r0, #0
 8012de4:	f000 8168 	beq.w	80130b8 <http_recv+0x440>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8012de8:	9b06      	ldr	r3, [sp, #24]
 8012dea:	498c      	ldr	r1, [pc, #560]	; (801301c <http_recv+0x3a4>)
 8012dec:	1ac2      	subs	r2, r0, r3
 8012dee:	4618      	mov	r0, r3
 8012df0:	f000 fa06 	bl	8013200 <lwip_strnstr>
    if (scontent_len != NULL) {
 8012df4:	2800      	cmp	r0, #0
 8012df6:	f000 80ff 	beq.w	8012ff8 <http_recv+0x380>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8012dfa:	f100 0310 	add.w	r3, r0, #16
 8012dfe:	9009      	str	r0, [sp, #36]	; 0x24
 8012e00:	220a      	movs	r2, #10
 8012e02:	4982      	ldr	r1, [pc, #520]	; (801300c <http_recv+0x394>)
 8012e04:	4618      	mov	r0, r3
 8012e06:	9307      	str	r3, [sp, #28]
 8012e08:	f000 f9fa 	bl	8013200 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	f000 80f3 	beq.w	8012ff8 <http_recv+0x380>
        content_len = atoi(content_len_num);
 8012e12:	9b07      	ldr	r3, [sp, #28]
 8012e14:	4618      	mov	r0, r3
 8012e16:	f00a fa0f 	bl	801d238 <atoi>
        if (content_len == 0) {
 8012e1a:	1e01      	subs	r1, r0, #0
 8012e1c:	9107      	str	r1, [sp, #28]
 8012e1e:	f000 80e3 	beq.w	8012fe8 <http_recv+0x370>
        if (content_len >= 0) {
 8012e22:	f2c0 80e9 	blt.w	8012ff8 <http_recv+0x380>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012e26:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8012e28:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8012e2a:	9a06      	ldr	r2, [sp, #24]
          u8_t post_auto_wnd = 1;
 8012e2c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012e30:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 8012e32:	f04f 0e00 	mov.w	lr, #0
          u8_t post_auto_wnd = 1;
 8012e36:	f80c 0d01 	strb.w	r0, [ip, #-1]!
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012e3a:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012e3c:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8012e40:	1a9b      	subs	r3, r3, r2
          http_uri_buf[0] = 0;
 8012e42:	4877      	ldr	r0, [pc, #476]	; (8013020 <http_recv+0x3a8>)
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012e44:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012e48:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012e4a:	9a06      	ldr	r2, [sp, #24]
          http_uri_buf[0] = 0;
 8012e4c:	f880 e000 	strb.w	lr, [r0]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012e50:	bfb4      	ite	lt
 8012e52:	46b8      	movlt	r8, r7
 8012e54:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8012e58:	429f      	cmp	r7, r3
 8012e5a:	bfa8      	it	ge
 8012e5c:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012e5e:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8012e60:	4607      	mov	r7, r0
          *crlfcrlf = 0;
 8012e62:	9808      	ldr	r0, [sp, #32]
 8012e64:	f880 e000 	strb.w	lr, [r0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012e68:	4628      	mov	r0, r5
 8012e6a:	9701      	str	r7, [sp, #4]
 8012e6c:	9f07      	ldr	r7, [sp, #28]
 8012e6e:	f8cd c00c 	str.w	ip, [sp, #12]
 8012e72:	9700      	str	r7, [sp, #0]
 8012e74:	f8cd b008 	str.w	fp, [sp, #8]
 8012e78:	f7f1 fd0a 	bl	8004890 <httpd_post_begin>
          if (err == ERR_OK) {
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	f040 80fb 	bne.w	8013078 <http_recv+0x400>
            hs->post_content_len_left = (u32_t)content_len;
 8012e82:	632f      	str	r7, [r5, #48]	; 0x30
            while((q != NULL) && (q->len <= start_offset)) {
 8012e84:	f1ba 0f00 	cmp.w	sl, #0
 8012e88:	d011      	beq.n	8012eae <http_recv+0x236>
 8012e8a:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012e8e:	4598      	cmp	r8, r3
 8012e90:	f0c0 80d5 	bcc.w	801303e <http_recv+0x3c6>
 8012e94:	4652      	mov	r2, sl
 8012e96:	e003      	b.n	8012ea0 <http_recv+0x228>
 8012e98:	8953      	ldrh	r3, [r2, #10]
 8012e9a:	4543      	cmp	r3, r8
 8012e9c:	f200 80ce 	bhi.w	801303c <http_recv+0x3c4>
              start_offset -= q->len;
 8012ea0:	eba8 0803 	sub.w	r8, r8, r3
              q = q->next;
 8012ea4:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8012ea6:	fa1f f888 	uxth.w	r8, r8
            while((q != NULL) && (q->len <= start_offset)) {
 8012eaa:	2a00      	cmp	r2, #0
 8012eac:	d1f4      	bne.n	8012e98 <http_recv+0x220>
            } else if (hs->post_content_len_left == 0) {
 8012eae:	9b07      	ldr	r3, [sp, #28]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	f000 80f6 	beq.w	80130a2 <http_recv+0x42a>
        if (hs->req != NULL) {
 8012eb6:	6a28      	ldr	r0, [r5, #32]
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	f000 80ee 	beq.w	801309a <http_recv+0x422>
          pbuf_free(hs->req);
 8012ebe:	f001 fd43 	bl	8014948 <pbuf_free>
          hs->req = NULL;
 8012ec2:	2300      	movs	r3, #0
      pbuf_free(p);
 8012ec4:	4620      	mov	r0, r4
          hs->req = NULL;
 8012ec6:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8012ec8:	f001 fd3e 	bl	8014948 <pbuf_free>
 8012ecc:	e706      	b.n	8012cdc <http_recv+0x64>
    hs->req = p;
 8012ece:	622c      	str	r4, [r5, #32]
 8012ed0:	e717      	b.n	8012d02 <http_recv+0x8a>
  clen = pbuf_clen(hs->req);
 8012ed2:	6a28      	ldr	r0, [r5, #32]
 8012ed4:	f001 ff2c 	bl	8014d30 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8012ed8:	6a2b      	ldr	r3, [r5, #32]
 8012eda:	891b      	ldrh	r3, [r3, #8]
 8012edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ee0:	d202      	bcs.n	8012ee8 <http_recv+0x270>
 8012ee2:	2805      	cmp	r0, #5
 8012ee4:	f67f aedc 	bls.w	8012ca0 <http_recv+0x28>
    return http_find_error_file(hs, 400);
 8012ee8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012eec:	4628      	mov	r0, r5
 8012eee:	f7ff fb1f 	bl	8012530 <http_find_error_file>
 8012ef2:	4607      	mov	r7, r0
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8012ef4:	f107 0310 	add.w	r3, r7, #16
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	2b10      	cmp	r3, #16
 8012efc:	d91d      	bls.n	8012f3a <http_recv+0x2c2>
 8012efe:	4b49      	ldr	r3, [pc, #292]	; (8013024 <http_recv+0x3ac>)
 8012f00:	f640 12b5 	movw	r2, #2485	; 0x9b5
 8012f04:	4948      	ldr	r1, [pc, #288]	; (8013028 <http_recv+0x3b0>)
 8012f06:	4849      	ldr	r0, [pc, #292]	; (801302c <http_recv+0x3b4>)
 8012f08:	f00b fa6e 	bl	801e3e8 <iprintf>
      if (parsed != ERR_INPROGRESS) {
 8012f0c:	1d7b      	adds	r3, r7, #5
 8012f0e:	f43f aec7 	beq.w	8012ca0 <http_recv+0x28>
        if (hs->req != NULL) {
 8012f12:	6a28      	ldr	r0, [r5, #32]
 8012f14:	b118      	cbz	r0, 8012f1e <http_recv+0x2a6>
          pbuf_free(hs->req);
 8012f16:	f001 fd17 	bl	8014948 <pbuf_free>
          hs->req = NULL;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f001 fd12 	bl	8014948 <pbuf_free>
      if (parsed == ERR_OK) {
 8012f24:	2f00      	cmp	r7, #0
 8012f26:	f43f aed9 	beq.w	8012cdc <http_recv+0x64>
      } else if (parsed == ERR_ARG) {
 8012f2a:	3710      	adds	r7, #16
 8012f2c:	f43f aec0 	beq.w	8012cb0 <http_recv+0x38>
 8012f30:	e6c2      	b.n	8012cb8 <http_recv+0x40>
    data = (char *)p->payload;
 8012f32:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8012f36:	8967      	ldrh	r7, [r4, #10]
 8012f38:	e6f7      	b.n	8012d2a <http_recv+0xb2>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8012f3a:	4a3d      	ldr	r2, [pc, #244]	; (8013030 <http_recv+0x3b8>)
 8012f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8012f40:	07da      	lsls	r2, r3, #31
 8012f42:	d4e3      	bmi.n	8012f0c <http_recv+0x294>
 8012f44:	e7db      	b.n	8012efe <http_recv+0x286>
      } else if (!strncmp(data, "POST ", 5)) {
 8012f46:	2205      	movs	r2, #5
 8012f48:	493a      	ldr	r1, [pc, #232]	; (8013034 <http_recv+0x3bc>)
 8012f4a:	4640      	mov	r0, r8
 8012f4c:	f00b fc1d 	bl	801e78a <strncmp>
 8012f50:	4682      	mov	sl, r0
 8012f52:	b988      	cbnz	r0, 8012f78 <http_recv+0x300>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8012f54:	1f7b      	subs	r3, r7, #5
        sp1 = data + 4;
 8012f56:	f108 0204 	add.w	r2, r8, #4
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8012f5a:	f108 0b05 	add.w	fp, r8, #5
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012f5e:	492d      	ldr	r1, [pc, #180]	; (8013014 <http_recv+0x39c>)
 8012f60:	b29b      	uxth	r3, r3
        sp1 = data + 4;
 8012f62:	9204      	str	r2, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012f64:	4658      	mov	r0, fp
 8012f66:	461a      	mov	r2, r3
 8012f68:	9305      	str	r3, [sp, #20]
 8012f6a:	f000 f949 	bl	8013200 <lwip_strnstr>
      if (sp2 == NULL) {
 8012f6e:	9b05      	ldr	r3, [sp, #20]
 8012f70:	4681      	mov	r9, r0
 8012f72:	b338      	cbz	r0, 8012fc4 <http_recv+0x34c>
        is_post = 1;
 8012f74:	2301      	movs	r3, #1
 8012f76:	e700      	b.n	8012d7a <http_recv+0x102>
        data[4] = 0;
 8012f78:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8012f7a:	f240 11f5 	movw	r1, #501	; 0x1f5
 8012f7e:	4628      	mov	r0, r5
        data[4] = 0;
 8012f80:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8012f84:	f7ff fad4 	bl	8012530 <http_find_error_file>
 8012f88:	4607      	mov	r7, r0
 8012f8a:	e7b3      	b.n	8012ef4 <http_recv+0x27c>
        if (hs->req != NULL) {
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	f43f ae87 	beq.w	8012ca0 <http_recv+0x28>
          pbuf_free(hs->req);
 8012f92:	f001 fcd9 	bl	8014948 <pbuf_free>
          hs->req = NULL;
 8012f96:	622f      	str	r7, [r5, #32]
      pbuf_free(p);
 8012f98:	4620      	mov	r0, r4
 8012f9a:	f001 fcd5 	bl	8014948 <pbuf_free>
 8012f9e:	e68b      	b.n	8012cb8 <http_recv+0x40>
            return http_find_file(hs, uri, is_09);
 8012fa0:	4652      	mov	r2, sl
 8012fa2:	4659      	mov	r1, fp
 8012fa4:	4628      	mov	r0, r5
 8012fa6:	f7ff f9c7 	bl	8012338 <http_find_file>
 8012faa:	4607      	mov	r7, r0
 8012fac:	e7a2      	b.n	8012ef4 <http_recv+0x27c>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8012fae:	4652      	mov	r2, sl
 8012fb0:	4916      	ldr	r1, [pc, #88]	; (801300c <http_recv+0x394>)
 8012fb2:	4658      	mov	r0, fp
 8012fb4:	9305      	str	r3, [sp, #20]
        is_09 = 1;
 8012fb6:	f04f 0a01 	mov.w	sl, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8012fba:	f000 f921 	bl	8013200 <lwip_strnstr>
 8012fbe:	9b05      	ldr	r3, [sp, #20]
 8012fc0:	4681      	mov	r9, r0
 8012fc2:	e6da      	b.n	8012d7a <http_recv+0x102>
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	4658      	mov	r0, fp
 8012fc8:	4910      	ldr	r1, [pc, #64]	; (801300c <http_recv+0x394>)
 8012fca:	f000 f919 	bl	8013200 <lwip_strnstr>
 8012fce:	e78b      	b.n	8012ee8 <http_recv+0x270>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8012fd0:	463a      	mov	r2, r7
 8012fd2:	4919      	ldr	r1, [pc, #100]	; (8013038 <http_recv+0x3c0>)
 8012fd4:	4640      	mov	r0, r8
 8012fd6:	f000 f913 	bl	8013200 <lwip_strnstr>
 8012fda:	9b05      	ldr	r3, [sp, #20]
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	d052      	beq.n	8013086 <http_recv+0x40e>
            hs->keepalive = 1;
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 8012fe6:	e6e1      	b.n	8012dac <http_recv+0x134>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8012fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012fea:	7c13      	ldrb	r3, [r2, #16]
 8012fec:	2b30      	cmp	r3, #48	; 0x30
 8012fee:	d103      	bne.n	8012ff8 <http_recv+0x380>
 8012ff0:	7c53      	ldrb	r3, [r2, #17]
 8012ff2:	2b0d      	cmp	r3, #13
 8012ff4:	f43f af17 	beq.w	8012e26 <http_recv+0x1ae>
              *sp1 = ' ';
 8012ff8:	2320      	movs	r3, #32
 8012ffa:	9a04      	ldr	r2, [sp, #16]
 8012ffc:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8012ffe:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8013000:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8013004:	7013      	strb	r3, [r2, #0]
 8013006:	e76f      	b.n	8012ee8 <http_recv+0x270>
 8013008:	20020abc 	.word	0x20020abc
 801300c:	08022780 	.word	0x08022780
 8013010:	08039844 	.word	0x08039844
 8013014:	08022ed0 	.word	0x08022ed0
 8013018:	08021a04 	.word	0x08021a04
 801301c:	08039884 	.word	0x08039884
 8013020:	20020a7c 	.word	0x20020a7c
 8013024:	080397c0 	.word	0x080397c0
 8013028:	08039898 	.word	0x08039898
 801302c:	08023618 	.word	0x08023618
 8013030:	00010901 	.word	0x00010901
 8013034:	0803984c 	.word	0x0803984c
 8013038:	08039854 	.word	0x08039854
 801303c:	4692      	mov	sl, r2
              pbuf_header(q, -(s16_t)start_offset);
 801303e:	f1c8 0100 	rsb	r1, r8, #0
 8013042:	4650      	mov	r0, sl
 8013044:	b209      	sxth	r1, r1
 8013046:	f001 fc77 	bl	8014938 <pbuf_header>
              pbuf_ref(q);
 801304a:	4650      	mov	r0, sl
 801304c:	f001 fe7c 	bl	8014d48 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8013050:	4651      	mov	r1, sl
 8013052:	4628      	mov	r0, r5
 8013054:	f7ff fa46 	bl	80124e4 <http_post_rxpbuf>
 8013058:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 801305a:	2f00      	cmp	r7, #0
 801305c:	f43f af2b 	beq.w	8012eb6 <http_recv+0x23e>
              *sp1 = ' ';
 8013060:	2320      	movs	r3, #32
 8013062:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8013064:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8013068:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801306a:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 801306c:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8013070:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8013072:	f43f af39 	beq.w	8012ee8 <http_recv+0x270>
 8013076:	e73d      	b.n	8012ef4 <http_recv+0x27c>
            return http_find_file(hs, http_uri_buf, 0);
 8013078:	2200      	movs	r2, #0
 801307a:	4913      	ldr	r1, [pc, #76]	; (80130c8 <http_recv+0x450>)
 801307c:	4628      	mov	r0, r5
 801307e:	f7ff f95b 	bl	8012338 <http_find_file>
 8013082:	4607      	mov	r7, r0
 8013084:	e7e9      	b.n	801305a <http_recv+0x3e2>
              lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8013086:	463a      	mov	r2, r7
 8013088:	4910      	ldr	r1, [pc, #64]	; (80130cc <http_recv+0x454>)
 801308a:	4640      	mov	r0, r8
 801308c:	9305      	str	r3, [sp, #20]
 801308e:	f000 f8b7 	bl	8013200 <lwip_strnstr>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8013092:	9b05      	ldr	r3, [sp, #20]
 8013094:	2800      	cmp	r0, #0
 8013096:	d1a3      	bne.n	8012fe0 <http_recv+0x368>
 8013098:	e685      	b.n	8012da6 <http_recv+0x12e>
      pbuf_free(p);
 801309a:	4620      	mov	r0, r4
 801309c:	f001 fc54 	bl	8014948 <pbuf_free>
 80130a0:	e61c      	b.n	8012cdc <http_recv+0x64>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 80130a2:	9907      	ldr	r1, [sp, #28]
 80130a4:	2202      	movs	r2, #2
 80130a6:	2004      	movs	r0, #4
 80130a8:	f001 fcbc 	bl	8014a24 <pbuf_alloc>
              return http_post_rxpbuf(hs, q);
 80130ac:	4601      	mov	r1, r0
 80130ae:	4628      	mov	r0, r5
 80130b0:	f7ff fa18 	bl	80124e4 <http_post_rxpbuf>
 80130b4:	4607      	mov	r7, r0
 80130b6:	e7d0      	b.n	801305a <http_recv+0x3e2>
              *sp1 = ' ';
 80130b8:	2320      	movs	r3, #32
 80130ba:	9a04      	ldr	r2, [sp, #16]
 80130bc:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80130be:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 80130c0:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 80130c4:	7013      	strb	r3, [r2, #0]
 80130c6:	e5eb      	b.n	8012ca0 <http_recv+0x28>
 80130c8:	20020a7c 	.word	0x20020a7c
 80130cc:	0803986c 	.word	0x0803986c

080130d0 <http_err>:
  if (hs != NULL) {
 80130d0:	b140      	cbz	r0, 80130e4 <http_err+0x14>
{
 80130d2:	b510      	push	{r4, lr}
 80130d4:	4604      	mov	r4, r0
    http_state_eof(hs);
 80130d6:	f7fe ffdf 	bl	8012098 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80130da:	4620      	mov	r0, r4
}
 80130dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 80130e0:	f000 be6e 	b.w	8013dc0 <mem_free>
 80130e4:	4770      	bx	lr
 80130e6:	bf00      	nop

080130e8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80130e8:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 80130ea:	202e      	movs	r0, #46	; 0x2e
 80130ec:	f003 faa0 	bl	8016630 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80130f0:	4604      	mov	r4, r0
 80130f2:	b380      	cbz	r0, 8013156 <httpd_init+0x6e>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80130f4:	2101      	movs	r1, #1
 80130f6:	4620      	mov	r0, r4
 80130f8:	f002 fc48 	bl	801598c <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 80130fc:	2250      	movs	r2, #80	; 0x50
 80130fe:	491a      	ldr	r1, [pc, #104]	; (8013168 <httpd_init+0x80>)
 8013100:	4620      	mov	r0, r4
 8013102:	f002 fa5d 	bl	80155c0 <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8013106:	b958      	cbnz	r0, 8013120 <httpd_init+0x38>
  pcb = tcp_listen(pcb);
 8013108:	4620      	mov	r0, r4
 801310a:	21ff      	movs	r1, #255	; 0xff
 801310c:	f002 fb12 	bl	8015734 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8013110:	4604      	mov	r4, r0
 8013112:	b198      	cbz	r0, 801313c <httpd_init+0x54>
  tcp_accept(pcb, http_accept);
 8013114:	4620      	mov	r0, r4
 8013116:	4915      	ldr	r1, [pc, #84]	; (801316c <httpd_init+0x84>)
}
 8013118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 801311c:	f002 bcaa 	b.w	8015a74 <tcp_accept>
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8013120:	4b13      	ldr	r3, [pc, #76]	; (8013170 <httpd_init+0x88>)
 8013122:	f640 2215 	movw	r2, #2581	; 0xa15
 8013126:	4913      	ldr	r1, [pc, #76]	; (8013174 <httpd_init+0x8c>)
 8013128:	4813      	ldr	r0, [pc, #76]	; (8013178 <httpd_init+0x90>)
 801312a:	f00b f95d 	bl	801e3e8 <iprintf>
  pcb = tcp_listen(pcb);
 801312e:	4620      	mov	r0, r4
 8013130:	21ff      	movs	r1, #255	; 0xff
 8013132:	f002 faff 	bl	8015734 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8013136:	4604      	mov	r4, r0
 8013138:	2800      	cmp	r0, #0
 801313a:	d1eb      	bne.n	8013114 <httpd_init+0x2c>
 801313c:	490f      	ldr	r1, [pc, #60]	; (801317c <httpd_init+0x94>)
 801313e:	f640 2217 	movw	r2, #2583	; 0xa17
 8013142:	4b0b      	ldr	r3, [pc, #44]	; (8013170 <httpd_init+0x88>)
 8013144:	480c      	ldr	r0, [pc, #48]	; (8013178 <httpd_init+0x90>)
 8013146:	f00b f94f 	bl	801e3e8 <iprintf>
  tcp_accept(pcb, http_accept);
 801314a:	4620      	mov	r0, r4
 801314c:	4907      	ldr	r1, [pc, #28]	; (801316c <httpd_init+0x84>)
}
 801314e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 8013152:	f002 bc8f 	b.w	8015a74 <tcp_accept>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8013156:	4b06      	ldr	r3, [pc, #24]	; (8013170 <httpd_init+0x88>)
 8013158:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 801315c:	4908      	ldr	r1, [pc, #32]	; (8013180 <httpd_init+0x98>)
 801315e:	4806      	ldr	r0, [pc, #24]	; (8013178 <httpd_init+0x90>)
 8013160:	f00b f942 	bl	801e3e8 <iprintf>
 8013164:	e7c6      	b.n	80130f4 <httpd_init+0xc>
 8013166:	bf00      	nop
 8013168:	0803bb0c 	.word	0x0803bb0c
 801316c:	08012109 	.word	0x08012109
 8013170:	080397c0 	.word	0x080397c0
 8013174:	080399cc 	.word	0x080399cc
 8013178:	08023618 	.word	0x08023618
 801317c:	080399e8 	.word	0x080399e8
 8013180:	080399b0 	.word	0x080399b0

08013184 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8013184:	b570      	push	{r4, r5, r6, lr}
 8013186:	460d      	mov	r5, r1
 8013188:	4614      	mov	r4, r2
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801318a:	4606      	mov	r6, r0
 801318c:	b1c8      	cbz	r0, 80131c2 <http_set_ssi_handler+0x3e>
  g_pfnSSIHandler = ssi_handler;
 801318e:	4b11      	ldr	r3, [pc, #68]	; (80131d4 <http_set_ssi_handler+0x50>)
 8013190:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8013192:	b175      	cbz	r5, 80131b2 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8013194:	2c00      	cmp	r4, #0
 8013196:	dd04      	ble.n	80131a2 <http_set_ssi_handler+0x1e>

  g_ppcTags = tags;
 8013198:	4a0f      	ldr	r2, [pc, #60]	; (80131d8 <http_set_ssi_handler+0x54>)
  g_iNumTags = num_tags;
 801319a:	4b10      	ldr	r3, [pc, #64]	; (80131dc <http_set_ssi_handler+0x58>)
  g_ppcTags = tags;
 801319c:	6015      	str	r5, [r2, #0]
  g_iNumTags = num_tags;
 801319e:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 80131a0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80131a2:	4b0f      	ldr	r3, [pc, #60]	; (80131e0 <http_set_ssi_handler+0x5c>)
 80131a4:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 80131a8:	490e      	ldr	r1, [pc, #56]	; (80131e4 <http_set_ssi_handler+0x60>)
 80131aa:	480f      	ldr	r0, [pc, #60]	; (80131e8 <http_set_ssi_handler+0x64>)
 80131ac:	f00b f91c 	bl	801e3e8 <iprintf>
 80131b0:	e7f2      	b.n	8013198 <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 80131b2:	4b0b      	ldr	r3, [pc, #44]	; (80131e0 <http_set_ssi_handler+0x5c>)
 80131b4:	f640 222f 	movw	r2, #2607	; 0xa2f
 80131b8:	490c      	ldr	r1, [pc, #48]	; (80131ec <http_set_ssi_handler+0x68>)
 80131ba:	480b      	ldr	r0, [pc, #44]	; (80131e8 <http_set_ssi_handler+0x64>)
 80131bc:	f00b f914 	bl	801e3e8 <iprintf>
 80131c0:	e7e8      	b.n	8013194 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80131c2:	4b07      	ldr	r3, [pc, #28]	; (80131e0 <http_set_ssi_handler+0x5c>)
 80131c4:	f640 2228 	movw	r2, #2600	; 0xa28
 80131c8:	4909      	ldr	r1, [pc, #36]	; (80131f0 <http_set_ssi_handler+0x6c>)
 80131ca:	4807      	ldr	r0, [pc, #28]	; (80131e8 <http_set_ssi_handler+0x64>)
 80131cc:	f00b f90c 	bl	801e3e8 <iprintf>
 80131d0:	e7dd      	b.n	801318e <http_set_ssi_handler+0xa>
 80131d2:	bf00      	nop
 80131d4:	20025a68 	.word	0x20025a68
 80131d8:	20025a70 	.word	0x20025a70
 80131dc:	20025a6c 	.word	0x20025a6c
 80131e0:	080397c0 	.word	0x080397c0
 80131e4:	08039998 	.word	0x08039998
 80131e8:	08023618 	.word	0x08023618
 80131ec:	08039988 	.word	0x08039988
 80131f0:	08039970 	.word	0x08039970

080131f4 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 80131f4:	ba40      	rev16	r0, r0
}
 80131f6:	b280      	uxth	r0, r0
 80131f8:	4770      	bx	lr
 80131fa:	bf00      	nop

080131fc <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 80131fc:	ba00      	rev	r0, r0
 80131fe:	4770      	bx	lr

08013200 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8013200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013204:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 8013206:	4608      	mov	r0, r1
{
 8013208:	4688      	mov	r8, r1
 801320a:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 801320c:	f7ed f822 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8013210:	b1c0      	cbz	r0, 8013244 <lwip_strnstr+0x44>
 8013212:	4605      	mov	r5, r0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8013214:	7820      	ldrb	r0, [r4, #0]
 8013216:	b1b0      	cbz	r0, 8013246 <lwip_strnstr+0x46>
 8013218:	4426      	add	r6, r4
 801321a:	1963      	adds	r3, r4, r5
 801321c:	429e      	cmp	r6, r3
 801321e:	d314      	bcc.n	801324a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8013220:	f898 7000 	ldrb.w	r7, [r8]
 8013224:	e005      	b.n	8013232 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8013226:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801322a:	1963      	adds	r3, r4, r5
 801322c:	b158      	cbz	r0, 8013246 <lwip_strnstr+0x46>
 801322e:	429e      	cmp	r6, r3
 8013230:	d30b      	bcc.n	801324a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8013232:	4287      	cmp	r7, r0
 8013234:	d1f7      	bne.n	8013226 <lwip_strnstr+0x26>
 8013236:	462a      	mov	r2, r5
 8013238:	4641      	mov	r1, r8
 801323a:	4620      	mov	r0, r4
 801323c:	f00b faa5 	bl	801e78a <strncmp>
 8013240:	2800      	cmp	r0, #0
 8013242:	d1f0      	bne.n	8013226 <lwip_strnstr+0x26>
 8013244:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 8013246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 801324a:	2000      	movs	r0, #0
}
 801324c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013250 <lwip_stricmp>:
lwip_stricmp(const char* str1, const char* str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8013250:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8013254:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8013258:	4293      	cmp	r3, r2
 801325a:	d01c      	beq.n	8013296 <lwip_stricmp+0x46>
{
 801325c:	b430      	push	{r4, r5}
 801325e:	f043 0420 	orr.w	r4, r3, #32
 8013262:	f042 0520 	orr.w	r5, r2, #32
 8013266:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801326a:	2a19      	cmp	r2, #25
 801326c:	d810      	bhi.n	8013290 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801326e:	42ac      	cmp	r4, r5
 8013270:	d10e      	bne.n	8013290 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8013272:	b1a3      	cbz	r3, 801329e <lwip_stricmp+0x4e>
    c1 = *str1++;
 8013274:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8013278:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801327c:	4293      	cmp	r3, r2
 801327e:	d0f8      	beq.n	8013272 <lwip_stricmp+0x22>
 8013280:	f043 0420 	orr.w	r4, r3, #32
 8013284:	f042 0520 	orr.w	r5, r2, #32
 8013288:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801328c:	2a19      	cmp	r2, #25
 801328e:	d9ee      	bls.n	801326e <lwip_stricmp+0x1e>
        return 1;
 8013290:	2001      	movs	r0, #1
  return 0;
}
 8013292:	bc30      	pop	{r4, r5}
 8013294:	4770      	bx	lr
  } while (c1 != 0);
 8013296:	2b00      	cmp	r3, #0
 8013298:	d1da      	bne.n	8013250 <lwip_stricmp>
  return 0;
 801329a:	4618      	mov	r0, r3
}
 801329c:	4770      	bx	lr
  return 0;
 801329e:	4618      	mov	r0, r3
}
 80132a0:	bc30      	pop	{r4, r5}
 80132a2:	4770      	bx	lr

080132a4 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
 80132a4:	b470      	push	{r4, r5, r6}
  char c1, c2;

  do {
    c1 = *str1++;
 80132a6:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 80132aa:	f811 4b01 	ldrb.w	r4, [r1], #1
    if (c1 != c2) {
 80132ae:	42a3      	cmp	r3, r4
 80132b0:	d009      	beq.n	80132c6 <lwip_strnicmp+0x22>
 80132b2:	f043 0520 	orr.w	r5, r3, #32
 80132b6:	f044 0620 	orr.w	r6, r4, #32
 80132ba:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80132be:	2c19      	cmp	r4, #25
 80132c0:	d80d      	bhi.n	80132de <lwip_strnicmp+0x3a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80132c2:	42b5      	cmp	r5, r6
 80132c4:	d10b      	bne.n	80132de <lwip_strnicmp+0x3a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (len-- && c1 != 0);
 80132c6:	3300      	adds	r3, #0
 80132c8:	bf18      	it	ne
 80132ca:	2301      	movne	r3, #1
 80132cc:	2a00      	cmp	r2, #0
 80132ce:	bf08      	it	eq
 80132d0:	2300      	moveq	r3, #0
 80132d2:	3a01      	subs	r2, #1
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d1e6      	bne.n	80132a6 <lwip_strnicmp+0x2>
  return 0;
 80132d8:	4618      	mov	r0, r3
}
 80132da:	bc70      	pop	{r4, r5, r6}
 80132dc:	4770      	bx	lr
        return 1;
 80132de:	2001      	movs	r0, #1
}
 80132e0:	bc70      	pop	{r4, r5, r6}
 80132e2:	4770      	bx	lr

080132e4 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
 80132e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132e8:	0106      	lsls	r6, r0, #4
 80132ea:	4c24      	ldr	r4, [pc, #144]	; (801337c <dns_call_found+0x98>)
 80132ec:	4605      	mov	r5, r0
 80132ee:	468a      	mov	sl, r1
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80132f0:	eb06 0800 	add.w	r8, r6, r0
 80132f4:	4f22      	ldr	r7, [pc, #136]	; (8013380 <dns_call_found+0x9c>)
 80132f6:	f104 0930 	add.w	r9, r4, #48	; 0x30
 80132fa:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80132fe:	f108 0810 	add.w	r8, r8, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8013302:	6823      	ldr	r3, [r4, #0]
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8013304:	4651      	mov	r1, sl
 8013306:	eb07 0008 	add.w	r0, r7, r8
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801330a:	b133      	cbz	r3, 801331a <dns_call_found+0x36>
 801330c:	7a22      	ldrb	r2, [r4, #8]
 801330e:	42aa      	cmp	r2, r5
 8013310:	d103      	bne.n	801331a <dns_call_found+0x36>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8013312:	6862      	ldr	r2, [r4, #4]
 8013314:	4798      	blx	r3
      /* flush this entry */
      dns_requests[i].found = NULL;
 8013316:	2300      	movs	r3, #0
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	340c      	adds	r4, #12
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801331c:	454c      	cmp	r4, r9
 801331e:	d1f0      	bne.n	8013302 <dns_call_found+0x1e>
 8013320:	1973      	adds	r3, r6, r5
 8013322:	2400      	movs	r4, #0
 8013324:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8013328:	4f15      	ldr	r7, [pc, #84]	; (8013380 <dns_call_found+0x9c>)
 801332a:	7bd9      	ldrb	r1, [r3, #15]
 801332c:	463a      	mov	r2, r7
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
 801332e:	b2e3      	uxtb	r3, r4
 8013330:	3401      	adds	r4, #1
 8013332:	42ab      	cmp	r3, r5
 8013334:	d002      	beq.n	801333c <dns_call_found+0x58>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8013336:	7a93      	ldrb	r3, [r2, #10]
 8013338:	2b02      	cmp	r3, #2
 801333a:	d015      	beq.n	8013368 <dns_call_found+0x84>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801333c:	2c04      	cmp	r4, #4
 801333e:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8013342:	d1f4      	bne.n	801332e <dns_call_found+0x4a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8013344:	2903      	cmp	r1, #3
 8013346:	d80d      	bhi.n	8013364 <dns_call_found+0x80>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8013348:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801334a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8013384 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801334e:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8013352:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8013356:	f006 fa41 	bl	80197dc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801335a:	2200      	movs	r2, #0
 801335c:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801335e:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8013360:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8013364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8013368:	7bd3      	ldrb	r3, [r2, #15]
 801336a:	428b      	cmp	r3, r1
 801336c:	d1e6      	bne.n	801333c <dns_call_found+0x58>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801336e:	4435      	add	r5, r6
 8013370:	2304      	movs	r3, #4
 8013372:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8013376:	73fb      	strb	r3, [r7, #15]
 8013378:	e7f4      	b.n	8013364 <dns_call_found+0x80>
 801337a:	bf00      	nop
 801337c:	20020ed0 	.word	0x20020ed0
 8013380:	20020f0c 	.word	0x20020f0c
 8013384:	20020ec0 	.word	0x20020ec0

08013388 <dns_send>:
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8013388:	0103      	lsls	r3, r0, #4
{
 801338a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801338e:	181c      	adds	r4, r3, r0
 8013390:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8013500 <dns_send+0x178>
{
 8013394:	b087      	sub	sp, #28
 8013396:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8013398:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	7ae3      	ldrb	r3, [r4, #11]
 80133a0:	2b01      	cmp	r3, #1
 80133a2:	d907      	bls.n	80133b4 <dns_send+0x2c>
 80133a4:	4b51      	ldr	r3, [pc, #324]	; (80134ec <dns_send+0x164>)
 80133a6:	f240 22ed 	movw	r2, #749	; 0x2ed
 80133aa:	4951      	ldr	r1, [pc, #324]	; (80134f0 <dns_send+0x168>)
 80133ac:	4851      	ldr	r0, [pc, #324]	; (80134f4 <dns_send+0x16c>)
 80133ae:	f00b f81b 	bl	801e3e8 <iprintf>
 80133b2:	7ae3      	ldrb	r3, [r4, #11]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80133b4:	4a50      	ldr	r2, [pc, #320]	; (80134f8 <dns_send+0x170>)
 80133b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80133ba:	2c00      	cmp	r4, #0
 80133bc:	f000 8083 	beq.w	80134c6 <dns_send+0x13e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80133c0:	9b01      	ldr	r3, [sp, #4]
 80133c2:	eb03 0509 	add.w	r5, r3, r9
 80133c6:	012d      	lsls	r5, r5, #4
 80133c8:	f105 0410 	add.w	r4, r5, #16
 80133cc:	4454      	add	r4, sl
 80133ce:	4620      	mov	r0, r4
 80133d0:	f7ec ff40 	bl	8000254 <strlen>
 80133d4:	2200      	movs	r2, #0
 80133d6:	f100 0112 	add.w	r1, r0, #18
 80133da:	4610      	mov	r0, r2
 80133dc:	b289      	uxth	r1, r1
 80133de:	f001 fb21 	bl	8014a24 <pbuf_alloc>
  if (p != NULL) {
 80133e2:	4680      	mov	r8, r0
 80133e4:	2800      	cmp	r0, #0
 80133e6:	d07d      	beq.n	80134e4 <dns_send+0x15c>
    hdr.id = lwip_htons(entry->txid);
 80133e8:	4455      	add	r5, sl
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80133ea:	2300      	movs	r3, #0
    --hostname;
 80133ec:	3c01      	subs	r4, #1
    hdr.id = lwip_htons(entry->txid);
 80133ee:	8928      	ldrh	r0, [r5, #8]
    query_idx = SIZEOF_DNS_HDR;
 80133f0:	250c      	movs	r5, #12
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80133f2:	9305      	str	r3, [sp, #20]
 80133f4:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 80133f8:	f7ff fefc 	bl	80131f4 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 80133fc:	2201      	movs	r2, #1
    hdr.numquestions = PP_HTONS(1);
 80133fe:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.id = lwip_htons(entry->txid);
 8013402:	f8ad 000c 	strh.w	r0, [sp, #12]
    hdr.flags1 = DNS_FLAG1_RD;
 8013406:	f88d 200e 	strb.w	r2, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801340a:	eb0d 0105 	add.w	r1, sp, r5
 801340e:	462a      	mov	r2, r5
 8013410:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 8013412:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8013416:	f001 fe17 	bl	8015048 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801341a:	7863      	ldrb	r3, [r4, #1]
      ++hostname;
 801341c:	1c67      	adds	r7, r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801341e:	2b2e      	cmp	r3, #46	; 0x2e
 8013420:	d04b      	beq.n	80134ba <dns_send+0x132>
 8013422:	2b00      	cmp	r3, #0
 8013424:	d049      	beq.n	80134ba <dns_send+0x132>
      ++hostname;
 8013426:	463c      	mov	r4, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8013428:	2200      	movs	r2, #0
 801342a:	e000      	b.n	801342e <dns_send+0xa6>
 801342c:	b12b      	cbz	r3, 801343a <dns_send+0xb2>
 801342e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
        ++n;
 8013432:	3201      	adds	r2, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8013434:	2b2e      	cmp	r3, #46	; 0x2e
        ++n;
 8013436:	b2d2      	uxtb	r2, r2
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8013438:	d1f8      	bne.n	801342c <dns_send+0xa4>
 801343a:	18ae      	adds	r6, r5, r2
 801343c:	eba4 0b07 	sub.w	fp, r4, r7
 8013440:	b2b6      	uxth	r6, r6
 8013442:	fa1f fb8b 	uxth.w	fp, fp
      pbuf_put_at(p, query_idx, n);
 8013446:	4629      	mov	r1, r5
 8013448:	4640      	mov	r0, r8
 801344a:	f001 feb3 	bl	80151b4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
 801344e:	1c6b      	adds	r3, r5, #1
 8013450:	465a      	mov	r2, fp
 8013452:	4639      	mov	r1, r7
 8013454:	b29b      	uxth	r3, r3
 8013456:	4640      	mov	r0, r8
 8013458:	f001 fe60 	bl	801511c <pbuf_take_at>
      query_idx += n + 1;
 801345c:	1c75      	adds	r5, r6, #1
    } while (*hostname != 0);
 801345e:	7822      	ldrb	r2, [r4, #0]
      query_idx += n + 1;
 8013460:	b2ad      	uxth	r5, r5
    } while (*hostname != 0);
 8013462:	2a00      	cmp	r2, #0
 8013464:	d1d9      	bne.n	801341a <dns_send+0x92>
    pbuf_put_at(p, query_idx, 0);
 8013466:	4629      	mov	r1, r5
 8013468:	4640      	mov	r0, r8
 801346a:	f001 fea3 	bl	80151b4 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801346e:	a906      	add	r1, sp, #24
 8013470:	f04f 2001 	mov.w	r0, #16777472	; 0x1000100
    query_idx++;
 8013474:	1cb3      	adds	r3, r6, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8013476:	2204      	movs	r2, #4
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8013478:	4d1f      	ldr	r5, [pc, #124]	; (80134f8 <dns_send+0x170>)
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801347a:	f841 0d10 	str.w	r0, [r1, #-16]!
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801347e:	b29b      	uxth	r3, r3
 8013480:	4640      	mov	r0, r8
 8013482:	f001 fe4b 	bl	801511c <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8013486:	9b01      	ldr	r3, [sp, #4]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8013488:	481c      	ldr	r0, [pc, #112]	; (80134fc <dns_send+0x174>)
 801348a:	4641      	mov	r1, r8
      dst = &dns_servers[entry->server_idx];
 801348c:	444b      	add	r3, r9
 801348e:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8013490:	2335      	movs	r3, #53	; 0x35
      dst = &dns_servers[entry->server_idx];
 8013492:	eb0a 1a09 	add.w	sl, sl, r9, lsl #4
 8013496:	f89a 200b 	ldrb.w	r2, [sl, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801349a:	f89a 400f 	ldrb.w	r4, [sl, #15]
 801349e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80134a2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80134a6:	f006 f945 	bl	8019734 <udp_sendto>
 80134aa:	4605      	mov	r5, r0
    pbuf_free(p);
 80134ac:	4640      	mov	r0, r8
 80134ae:	f001 fa4b 	bl	8014948 <pbuf_free>
}
 80134b2:	4628      	mov	r0, r5
 80134b4:	b007      	add	sp, #28
 80134b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80134ba:	f04f 0b00 	mov.w	fp, #0
 80134be:	462e      	mov	r6, r5
      ++hostname;
 80134c0:	463c      	mov	r4, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80134c2:	465a      	mov	r2, fp
 80134c4:	e7bf      	b.n	8013446 <dns_send+0xbe>
    dns_call_found(idx, NULL);
 80134c6:	4648      	mov	r0, r9
 80134c8:	4621      	mov	r1, r4
 80134ca:	f7ff ff0b 	bl	80132e4 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 80134ce:	9b01      	ldr	r3, [sp, #4]
    return ERR_OK;
 80134d0:	4625      	mov	r5, r4
    entry->state = DNS_STATE_UNUSED;
 80134d2:	444b      	add	r3, r9
}
 80134d4:	4628      	mov	r0, r5
    entry->state = DNS_STATE_UNUSED;
 80134d6:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
 80134da:	f88a 400a 	strb.w	r4, [sl, #10]
}
 80134de:	b007      	add	sp, #28
 80134e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ERR_MEM;
 80134e4:	f04f 35ff 	mov.w	r5, #4294967295
 80134e8:	e7e3      	b.n	80134b2 <dns_send+0x12a>
 80134ea:	bf00      	nop
 80134ec:	08039a9c 	.word	0x08039a9c
 80134f0:	08039acc 	.word	0x08039acc
 80134f4:	08023618 	.word	0x08023618
 80134f8:	20020f04 	.word	0x20020f04
 80134fc:	20020ec0 	.word	0x20020ec0
 8013500:	20020f0c 	.word	0x20020f0c

08013504 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8013504:	2803      	cmp	r0, #3
{
 8013506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801350a:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801350c:	d84a      	bhi.n	80135a4 <dns_check_entry+0xa0>

  switch (entry->state) {
 801350e:	0125      	lsls	r5, r4, #4
 8013510:	4e39      	ldr	r6, [pc, #228]	; (80135f8 <dns_check_entry+0xf4>)
 8013512:	192b      	adds	r3, r5, r4
 8013514:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8013518:	7a9b      	ldrb	r3, [r3, #10]
 801351a:	2b03      	cmp	r3, #3
 801351c:	d84e      	bhi.n	80135bc <dns_check_entry+0xb8>
 801351e:	e8df f003 	tbb	[pc, r3]
 8013522:	100e      	.short	0x100e
 8013524:	022c      	.short	0x022c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8013526:	192b      	adds	r3, r5, r4
 8013528:	011b      	lsls	r3, r3, #4
 801352a:	58f2      	ldr	r2, [r6, r3]
 801352c:	b112      	cbz	r2, 8013534 <dns_check_entry+0x30>
 801352e:	3a01      	subs	r2, #1
 8013530:	50f2      	str	r2, [r6, r3]
 8013532:	b922      	cbnz	r2, 801353e <dns_check_entry+0x3a>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8013534:	442c      	add	r4, r5
 8013536:	2300      	movs	r3, #0
 8013538:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801353c:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 801353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013542:	4f2e      	ldr	r7, [pc, #184]	; (80135fc <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 8013544:	f00a ffe0 	bl	801e508 <rand>
 8013548:	4b2b      	ldr	r3, [pc, #172]	; (80135f8 <dns_check_entry+0xf4>)
 801354a:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801354c:	7a9a      	ldrb	r2, [r3, #10]
 801354e:	2a02      	cmp	r2, #2
 8013550:	d030      	beq.n	80135b4 <dns_check_entry+0xb0>
 8013552:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013556:	42bb      	cmp	r3, r7
 8013558:	d1f8      	bne.n	801354c <dns_check_entry+0x48>
      entry->txid = dns_create_txid();
 801355a:	4425      	add	r5, r4
      err = dns_send(i);
 801355c:	4620      	mov	r0, r4
      entry->server_idx = 0;
 801355e:	2201      	movs	r2, #1
      entry->state = DNS_STATE_ASKING;
 8013560:	2402      	movs	r4, #2
      entry->txid = dns_create_txid();
 8013562:	012d      	lsls	r5, r5, #4
 8013564:	f105 0308 	add.w	r3, r5, #8
 8013568:	4435      	add	r5, r6
 801356a:	441e      	add	r6, r3
 801356c:	8129      	strh	r1, [r5, #8]
      entry->state = DNS_STATE_ASKING;
 801356e:	8074      	strh	r4, [r6, #2]
      entry->server_idx = 0;
 8013570:	80b2      	strh	r2, [r6, #4]
}
 8013572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8013576:	f7ff bf07 	b.w	8013388 <dns_send>
      if (--entry->tmr == 0) {
 801357a:	192a      	adds	r2, r5, r4
 801357c:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8013580:	7b13      	ldrb	r3, [r2, #12]
 8013582:	3b01      	subs	r3, #1
 8013584:	b2db      	uxtb	r3, r3
 8013586:	7313      	strb	r3, [r2, #12]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d1d8      	bne.n	801353e <dns_check_entry+0x3a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801358c:	7b53      	ldrb	r3, [r2, #13]
 801358e:	3301      	adds	r3, #1
 8013590:	b2db      	uxtb	r3, r3
 8013592:	2b04      	cmp	r3, #4
 8013594:	7353      	strb	r3, [r2, #13]
 8013596:	d01a      	beq.n	80135ce <dns_check_entry+0xca>
          entry->tmr = entry->retries;
 8013598:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801359a:	4620      	mov	r0, r4
}
 801359c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 80135a0:	f7ff bef2 	b.w	8013388 <dns_send>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80135a4:	4b16      	ldr	r3, [pc, #88]	; (8013600 <dns_check_entry+0xfc>)
 80135a6:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80135aa:	4916      	ldr	r1, [pc, #88]	; (8013604 <dns_check_entry+0x100>)
 80135ac:	4816      	ldr	r0, [pc, #88]	; (8013608 <dns_check_entry+0x104>)
 80135ae:	f00a ff1b 	bl	801e3e8 <iprintf>
 80135b2:	e7ac      	b.n	801350e <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80135b4:	891a      	ldrh	r2, [r3, #8]
 80135b6:	428a      	cmp	r2, r1
 80135b8:	d1cb      	bne.n	8013552 <dns_check_entry+0x4e>
 80135ba:	e7c3      	b.n	8013544 <dns_check_entry+0x40>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80135bc:	4b10      	ldr	r3, [pc, #64]	; (8013600 <dns_check_entry+0xfc>)
 80135be:	f240 4237 	movw	r2, #1079	; 0x437
 80135c2:	4912      	ldr	r1, [pc, #72]	; (801360c <dns_check_entry+0x108>)
 80135c4:	4810      	ldr	r0, [pc, #64]	; (8013608 <dns_check_entry+0x104>)
}
 80135c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80135ca:	f00a bf0d 	b.w	801e3e8 <iprintf>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
 80135ce:	7ad3      	ldrb	r3, [r2, #11]
 80135d0:	b93b      	cbnz	r3, 80135e2 <dns_check_entry+0xde>
 80135d2:	490f      	ldr	r1, [pc, #60]	; (8013610 <dns_check_entry+0x10c>)
 80135d4:	6849      	ldr	r1, [r1, #4]
 80135d6:	b121      	cbz	r1, 80135e2 <dns_check_entry+0xde>
            entry->server_idx++;
 80135d8:	2101      	movs	r1, #1
            entry->retries = 0;
 80135da:	7353      	strb	r3, [r2, #13]
            entry->server_idx++;
 80135dc:	72d1      	strb	r1, [r2, #11]
            entry->tmr = 1;
 80135de:	7311      	strb	r1, [r2, #12]
 80135e0:	e7db      	b.n	801359a <dns_check_entry+0x96>
            dns_call_found(i, NULL);
 80135e2:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 80135e4:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 80135e6:	2100      	movs	r1, #0
 80135e8:	f7ff fe7c 	bl	80132e4 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 80135ec:	2300      	movs	r3, #0
 80135ee:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80135f2:	72b3      	strb	r3, [r6, #10]
            break;
 80135f4:	e7a3      	b.n	801353e <dns_check_entry+0x3a>
 80135f6:	bf00      	nop
 80135f8:	20020f0c 	.word	0x20020f0c
 80135fc:	2002134c 	.word	0x2002134c
 8013600:	08039a9c 	.word	0x08039a9c
 8013604:	08039a60 	.word	0x08039a60
 8013608:	08023618 	.word	0x08023618
 801360c:	08039a7c 	.word	0x08039a7c
 8013610:	20020f04 	.word	0x20020f04

08013614 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013618:	461f      	mov	r7, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801361a:	8913      	ldrh	r3, [r2, #8]
{
 801361c:	b08b      	sub	sp, #44	; 0x2c
 801361e:	4614      	mov	r4, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8013620:	2b0f      	cmp	r3, #15
 8013622:	d908      	bls.n	8013636 <dns_recv+0x22>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8013624:	2300      	movs	r3, #0
 8013626:	220c      	movs	r2, #12
 8013628:	a904      	add	r1, sp, #16
 801362a:	4620      	mov	r0, r4
 801362c:	f001 fcb8 	bl	8014fa0 <pbuf_copy_partial>
 8013630:	280c      	cmp	r0, #12
 8013632:	4606      	mov	r6, r0
 8013634:	d005      	beq.n	8013642 <dns_recv+0x2e>
    }
  }

memerr:
  /* deallocate memory and return */
  pbuf_free(p);
 8013636:	4620      	mov	r0, r4
 8013638:	f001 f986 	bl	8014948 <pbuf_free>
  return;
}
 801363c:	b00b      	add	sp, #44	; 0x2c
 801363e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013642:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8013898 <dns_recv+0x284>
    txid = lwip_htons(hdr.id);
 8013646:	2500      	movs	r5, #0
 8013648:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801364c:	f7ff fdd2 	bl	80131f4 <lwip_htons>
 8013650:	464b      	mov	r3, r9
 8013652:	fa5f f885 	uxtb.w	r8, r5
      if ((entry->state == DNS_STATE_ASKING) &&
 8013656:	7a9a      	ldrb	r2, [r3, #10]
 8013658:	2a02      	cmp	r2, #2
 801365a:	d009      	beq.n	8013670 <dns_recv+0x5c>
 801365c:	3501      	adds	r5, #1
 801365e:	f503 7388 	add.w	r3, r3, #272	; 0x110
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013662:	2d04      	cmp	r5, #4
 8013664:	d0e7      	beq.n	8013636 <dns_recv+0x22>
      if ((entry->state == DNS_STATE_ASKING) &&
 8013666:	7a9a      	ldrb	r2, [r3, #10]
 8013668:	fa5f f885 	uxtb.w	r8, r5
 801366c:	2a02      	cmp	r2, #2
 801366e:	d1f5      	bne.n	801365c <dns_recv+0x48>
 8013670:	891a      	ldrh	r2, [r3, #8]
 8013672:	4282      	cmp	r2, r0
 8013674:	d1f2      	bne.n	801365c <dns_recv+0x48>
        nquestions = lwip_htons(hdr.numquestions);
 8013676:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 801367a:	f7ff fdbb 	bl	80131f4 <lwip_htons>
 801367e:	4683      	mov	fp, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8013680:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8013684:	f7ff fdb6 	bl	80131f4 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8013688:	f89d 3012 	ldrb.w	r3, [sp, #18]
        nanswers   = lwip_htons(hdr.numanswers);
 801368c:	4682      	mov	sl, r0
        if (nquestions != 1) {
 801368e:	09db      	lsrs	r3, r3, #7
 8013690:	d0d1      	beq.n	8013636 <dns_recv+0x22>
 8013692:	f1bb 0f01 	cmp.w	fp, #1
 8013696:	d1ce      	bne.n	8013636 <dns_recv+0x22>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8013698:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 801369c:	497c      	ldr	r1, [pc, #496]	; (8013890 <dns_recv+0x27c>)
 801369e:	683a      	ldr	r2, [r7, #0]
 80136a0:	eb09 1303 	add.w	r3, r9, r3, lsl #4
 80136a4:	7adb      	ldrb	r3, [r3, #11]
 80136a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d1c3      	bne.n	8013636 <dns_recv+0x22>
 80136ae:	f44f 7788 	mov.w	r7, #272	; 0x110
 80136b2:	fb07 f305 	mul.w	r3, r7, r5
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 80136b6:	f103 0210 	add.w	r2, r3, #16
 80136ba:	9301      	str	r3, [sp, #4]
 80136bc:	eb09 0b02 	add.w	fp, r9, r2
    n = pbuf_try_get_at(p, response_offset++);
 80136c0:	1c73      	adds	r3, r6, #1
 80136c2:	4631      	mov	r1, r6
 80136c4:	4620      	mov	r0, r4
 80136c6:	b29e      	uxth	r6, r3
 80136c8:	f001 fd60 	bl	801518c <pbuf_try_get_at>
    if (n < 0) {
 80136cc:	2800      	cmp	r0, #0
 80136ce:	dbb2      	blt.n	8013636 <dns_recv+0x22>
    if ((n & 0xc0) == 0xc0) {
 80136d0:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
 80136d4:	2bc0      	cmp	r3, #192	; 0xc0
 80136d6:	d0ae      	beq.n	8013636 <dns_recv+0x22>
      while (n > 0) {
 80136d8:	b1a8      	cbz	r0, 8013706 <dns_recv+0xf2>
 80136da:	465f      	mov	r7, fp
 80136dc:	183b      	adds	r3, r7, r0
 80136de:	9300      	str	r3, [sp, #0]
 80136e0:	e007      	b.n	80136f2 <dns_recv+0xde>
        if ((*query) != (u8_t)c) {
 80136e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80136e6:	4291      	cmp	r1, r2
        ++query;
 80136e8:	46bb      	mov	fp, r7
        if ((*query) != (u8_t)c) {
 80136ea:	d1a4      	bne.n	8013636 <dns_recv+0x22>
      while (n > 0) {
 80136ec:	9b00      	ldr	r3, [sp, #0]
 80136ee:	42bb      	cmp	r3, r7
 80136f0:	d009      	beq.n	8013706 <dns_recv+0xf2>
        int c = pbuf_try_get_at(p, response_offset);
 80136f2:	4631      	mov	r1, r6
 80136f4:	4620      	mov	r0, r4
 80136f6:	f001 fd49 	bl	801518c <pbuf_try_get_at>
        ++response_offset;
 80136fa:	3601      	adds	r6, #1
        if (c < 0) {
 80136fc:	1e02      	subs	r2, r0, #0
        ++response_offset;
 80136fe:	b2b6      	uxth	r6, r6
        if ((*query) != (u8_t)c) {
 8013700:	b2d2      	uxtb	r2, r2
        if (c < 0) {
 8013702:	daee      	bge.n	80136e2 <dns_recv+0xce>
 8013704:	e797      	b.n	8013636 <dns_recv+0x22>
    n = pbuf_try_get_at(p, response_offset);
 8013706:	4631      	mov	r1, r6
 8013708:	4620      	mov	r0, r4
 801370a:	f001 fd3f 	bl	801518c <pbuf_try_get_at>
    if (n < 0) {
 801370e:	2800      	cmp	r0, #0
      ++query;
 8013710:	f10b 0b01 	add.w	fp, fp, #1
    if (n < 0) {
 8013714:	db8f      	blt.n	8013636 <dns_recv+0x22>
  } while (n != 0);
 8013716:	d1d3      	bne.n	80136c0 <dns_recv+0xac>
  return response_offset + 1;
 8013718:	1c73      	adds	r3, r6, #1
        if (res_idx == 0xFFFF) {
 801371a:	f64f 7bff 	movw	fp, #65535	; 0xffff
  return response_offset + 1;
 801371e:	b29b      	uxth	r3, r3
        if (res_idx == 0xFFFF) {
 8013720:	455b      	cmp	r3, fp
 8013722:	d088      	beq.n	8013636 <dns_recv+0x22>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8013724:	2204      	movs	r2, #4
 8013726:	a902      	add	r1, sp, #8
 8013728:	4620      	mov	r0, r4
 801372a:	f001 fc39 	bl	8014fa0 <pbuf_copy_partial>
 801372e:	2804      	cmp	r0, #4
 8013730:	d181      	bne.n	8013636 <dns_recv+0x22>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8013732:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801373a:	f47f af7c 	bne.w	8013636 <dns_recv+0x22>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 801373e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013746:	f47f af76 	bne.w	8013636 <dns_recv+0x22>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 801374a:	f89d 3013 	ldrb.w	r3, [sp, #19]
        res_idx += SIZEOF_DNS_QUERY;
 801374e:	3605      	adds	r6, #5
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8013750:	071b      	lsls	r3, r3, #28
        res_idx += SIZEOF_DNS_QUERY;
 8013752:	b2b6      	uxth	r6, r6
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8013754:	d123      	bne.n	801379e <dns_recv+0x18a>
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8013756:	f1ba 0f00 	cmp.w	sl, #0
 801375a:	d020      	beq.n	801379e <dns_recv+0x18a>
 801375c:	8923      	ldrh	r3, [r4, #8]
 801375e:	42b3      	cmp	r3, r6
 8013760:	d80e      	bhi.n	8013780 <dns_recv+0x16c>
 8013762:	e01c      	b.n	801379e <dns_recv+0x18a>
      offset = (u16_t)(offset + n);
 8013764:	b29e      	uxth	r6, r3
    if ((n & 0xc0) == 0xc0) {
 8013766:	29c0      	cmp	r1, #192	; 0xc0
    n = pbuf_try_get_at(p, offset);
 8013768:	4631      	mov	r1, r6
    if ((n & 0xc0) == 0xc0) {
 801376a:	d026      	beq.n	80137ba <dns_recv+0x1a6>
      if (offset + n >= p->tot_len) {
 801376c:	8922      	ldrh	r2, [r4, #8]
 801376e:	4293      	cmp	r3, r2
 8013770:	f6bf af61 	bge.w	8013636 <dns_recv+0x22>
    n = pbuf_try_get_at(p, offset);
 8013774:	f001 fd0a 	bl	801518c <pbuf_try_get_at>
    if (n < 0) {
 8013778:	2800      	cmp	r0, #0
 801377a:	f6ff af5c 	blt.w	8013636 <dns_recv+0x22>
  } while (n != 0);
 801377e:	d01d      	beq.n	80137bc <dns_recv+0x1a8>
    n = pbuf_try_get_at(p, offset++);
 8013780:	1c72      	adds	r2, r6, #1
 8013782:	4631      	mov	r1, r6
 8013784:	4620      	mov	r0, r4
 8013786:	b292      	uxth	r2, r2
 8013788:	9200      	str	r2, [sp, #0]
 801378a:	f001 fcff 	bl	801518c <pbuf_try_get_at>
      if (offset + n >= p->tot_len) {
 801378e:	9a00      	ldr	r2, [sp, #0]
    if (n < 0) {
 8013790:	1e03      	subs	r3, r0, #0
    n = pbuf_try_get_at(p, offset);
 8013792:	4620      	mov	r0, r4
    if ((n & 0xc0) == 0xc0) {
 8013794:	f003 01c0 	and.w	r1, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8013798:	4413      	add	r3, r2
    if (n < 0) {
 801379a:	dae3      	bge.n	8013764 <dns_recv+0x150>
 801379c:	e74b      	b.n	8013636 <dns_recv+0x22>
        pbuf_free(p);
 801379e:	4620      	mov	r0, r4
 80137a0:	f001 f8d2 	bl	8014948 <pbuf_free>
        dns_call_found(i, NULL);
 80137a4:	4640      	mov	r0, r8
 80137a6:	2100      	movs	r1, #0
 80137a8:	f7ff fd9c 	bl	80132e4 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 80137ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80137b0:	2200      	movs	r2, #0
 80137b2:	fb03 9505 	mla	r5, r3, r5, r9
 80137b6:	72aa      	strb	r2, [r5, #10]
        return;
 80137b8:	e740      	b.n	801363c <dns_recv+0x28>
    n = pbuf_try_get_at(p, offset++);
 80137ba:	4616      	mov	r6, r2
  return offset + 1;
 80137bc:	1c73      	adds	r3, r6, #1
 80137be:	b29b      	uxth	r3, r3
            if (res_idx == 0xFFFF) {
 80137c0:	455b      	cmp	r3, fp
 80137c2:	f43f af38 	beq.w	8013636 <dns_recv+0x22>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 80137c6:	220a      	movs	r2, #10
 80137c8:	a907      	add	r1, sp, #28
 80137ca:	4620      	mov	r0, r4
 80137cc:	f001 fbe8 	bl	8014fa0 <pbuf_copy_partial>
 80137d0:	280a      	cmp	r0, #10
 80137d2:	f47f af30 	bne.w	8013636 <dns_recv+0x22>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80137d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
            res_idx += SIZEOF_DNS_ANSWER;
 80137da:	360b      	adds	r6, #11
 80137dc:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80137e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx += SIZEOF_DNS_ANSWER;
 80137e4:	b2b6      	uxth	r6, r6
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80137e6:	d104      	bne.n	80137f2 <dns_recv+0x1de>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 80137e8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80137ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137f0:	d011      	beq.n	8013816 <dns_recv+0x202>
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 80137f2:	f7ff fcff 	bl	80131f4 <lwip_htons>
 80137f6:	4430      	add	r0, r6
 80137f8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80137fc:	f6bf af1b 	bge.w	8013636 <dns_recv+0x22>
            res_idx += lwip_htons(ans.len);
 8013800:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
            --nanswers;
 8013804:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx += lwip_htons(ans.len);
 8013808:	f7ff fcf4 	bl	80131f4 <lwip_htons>
 801380c:	4406      	add	r6, r0
            --nanswers;
 801380e:	fa1f fa8a 	uxth.w	sl, sl
            res_idx += lwip_htons(ans.len);
 8013812:	b2b6      	uxth	r6, r6
 8013814:	e79f      	b.n	8013756 <dns_recv+0x142>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8013816:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801381a:	d1ea      	bne.n	80137f2 <dns_recv+0x1de>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 801381c:	4633      	mov	r3, r6
 801381e:	2204      	movs	r2, #4
 8013820:	a903      	add	r1, sp, #12
 8013822:	4620      	mov	r0, r4
 8013824:	f001 fbbc 	bl	8014fa0 <pbuf_copy_partial>
 8013828:	2804      	cmp	r0, #4
 801382a:	f47f af04 	bne.w	8013636 <dns_recv+0x22>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801382e:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 8013832:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8013834:	9a03      	ldr	r2, [sp, #12]
 8013836:	fb03 f405 	mul.w	r4, r3, r5
 801383a:	eb09 0604 	add.w	r6, r9, r4
 801383e:	6072      	str	r2, [r6, #4]
                  pbuf_free(p);
 8013840:	f001 f882 	bl	8014948 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8013844:	9808      	ldr	r0, [sp, #32]
 8013846:	f7ff fcd9 	bl	80131fc <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 801384a:	4b12      	ldr	r3, [pc, #72]	; (8013894 <dns_recv+0x280>)
  dns_call_found(idx, &entry->ipaddr);
 801384c:	9901      	ldr	r1, [sp, #4]
  entry->state = DNS_STATE_DONE;
 801384e:	2203      	movs	r2, #3
  if (entry->ttl > DNS_MAX_TTL) {
 8013850:	4298      	cmp	r0, r3
  entry->ttl = ttl;
 8013852:	f849 0004 	str.w	r0, [r9, r4]
  dns_call_found(idx, &entry->ipaddr);
 8013856:	f101 0104 	add.w	r1, r1, #4
  entry->state = DNS_STATE_DONE;
 801385a:	72b2      	strb	r2, [r6, #10]
    entry->ttl = DNS_MAX_TTL;
 801385c:	bf88      	it	hi
 801385e:	f849 3004 	strhi.w	r3, [r9, r4]
  dns_call_found(idx, &entry->ipaddr);
 8013862:	4640      	mov	r0, r8
 8013864:	4449      	add	r1, r9
 8013866:	f7ff fd3d 	bl	80132e4 <dns_call_found>
  if (entry->ttl == 0) {
 801386a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801386e:	fb03 f505 	mul.w	r5, r3, r5
 8013872:	f859 3005 	ldr.w	r3, [r9, r5]
 8013876:	44a9      	add	r9, r5
 8013878:	2b00      	cmp	r3, #0
 801387a:	f47f aedf 	bne.w	801363c <dns_recv+0x28>
    if (entry->state == DNS_STATE_DONE) {
 801387e:	f899 200a 	ldrb.w	r2, [r9, #10]
 8013882:	2a03      	cmp	r2, #3
 8013884:	f47f aeda 	bne.w	801363c <dns_recv+0x28>
      entry->state = DNS_STATE_UNUSED;
 8013888:	f889 300a 	strb.w	r3, [r9, #10]
 801388c:	e6d6      	b.n	801363c <dns_recv+0x28>
 801388e:	bf00      	nop
 8013890:	20020f04 	.word	0x20020f04
 8013894:	00093a80 	.word	0x00093a80
 8013898:	20020f0c 	.word	0x20020f0c

0801389c <dns_init>:
}
 801389c:	4770      	bx	lr
 801389e:	bf00      	nop

080138a0 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 80138a0:	2801      	cmp	r0, #1
 80138a2:	d900      	bls.n	80138a6 <dns_setserver+0x6>
}
 80138a4:	4770      	bx	lr
    if (dnsserver != NULL) {
 80138a6:	b121      	cbz	r1, 80138b2 <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 80138a8:	680a      	ldr	r2, [r1, #0]
 80138aa:	4b05      	ldr	r3, [pc, #20]	; (80138c0 <dns_setserver+0x20>)
 80138ac:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80138b0:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 80138b2:	4a04      	ldr	r2, [pc, #16]	; (80138c4 <dns_setserver+0x24>)
 80138b4:	4b02      	ldr	r3, [pc, #8]	; (80138c0 <dns_setserver+0x20>)
 80138b6:	6812      	ldr	r2, [r2, #0]
 80138b8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80138bc:	4770      	bx	lr
 80138be:	bf00      	nop
 80138c0:	20020f04 	.word	0x20020f04
 80138c4:	0803bb0c 	.word	0x0803bb0c

080138c8 <dns_tmr>:
{
 80138c8:	b508      	push	{r3, lr}
    dns_check_entry(i);
 80138ca:	2000      	movs	r0, #0
 80138cc:	f7ff fe1a 	bl	8013504 <dns_check_entry>
 80138d0:	2001      	movs	r0, #1
 80138d2:	f7ff fe17 	bl	8013504 <dns_check_entry>
 80138d6:	2002      	movs	r0, #2
 80138d8:	f7ff fe14 	bl	8013504 <dns_check_entry>
 80138dc:	2003      	movs	r0, #3
}
 80138de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80138e2:	f7ff be0f 	b.w	8013504 <dns_check_entry>
 80138e6:	bf00      	nop

080138e8 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80138e8:	2900      	cmp	r1, #0
 80138ea:	f000 8146 	beq.w	8013b7a <dns_gethostbyname_addrtype+0x292>
{
 80138ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 80138f2:	fab0 f580 	clz	r5, r0
{
 80138f6:	b083      	sub	sp, #12
 80138f8:	4604      	mov	r4, r0
  if ((addr == NULL) ||
 80138fa:	096d      	lsrs	r5, r5, #5
 80138fc:	2d00      	cmp	r5, #0
 80138fe:	f040 808c 	bne.w	8013a1a <dns_gethostbyname_addrtype+0x132>
      (!hostname) || (!hostname[0])) {
 8013902:	7806      	ldrb	r6, [r0, #0]
 8013904:	2e00      	cmp	r6, #0
 8013906:	f000 8088 	beq.w	8013a1a <dns_gethostbyname_addrtype+0x132>
 801390a:	468b      	mov	fp, r1
 801390c:	461f      	mov	r7, r3
 801390e:	4616      	mov	r6, r2
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8013910:	f7ec fca0 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8013914:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 8013916:	4680      	mov	r8, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8013918:	d87f      	bhi.n	8013a1a <dns_gethostbyname_addrtype+0x132>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 801391a:	4659      	mov	r1, fp
 801391c:	4620      	mov	r0, r4
 801391e:	f008 fba9 	bl	801c074 <ip4addr_aton>
 8013922:	b118      	cbz	r0, 801392c <dns_gethostbyname_addrtype+0x44>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8013924:	4628      	mov	r0, r5
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8013926:	b003      	add	sp, #12
 8013928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801392c:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8013b8c <dns_gethostbyname_addrtype+0x2a4>
  if (ipaddr_aton(hostname, addr)) {
 8013930:	4605      	mov	r5, r0
 8013932:	46d1      	mov	r9, sl
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8013934:	f899 300a 	ldrb.w	r3, [r9, #10]
 8013938:	2b03      	cmp	r3, #3
 801393a:	d03b      	beq.n	80139b4 <dns_gethostbyname_addrtype+0xcc>
 801393c:	3501      	adds	r5, #1
 801393e:	f509 7988 	add.w	r9, r9, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013942:	2d04      	cmp	r5, #4
 8013944:	d1f6      	bne.n	8013934 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 8013946:	4b8e      	ldr	r3, [pc, #568]	; (8013b80 <dns_gethostbyname_addrtype+0x298>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	f000 80fe 	beq.w	8013b4c <dns_gethostbyname_addrtype+0x264>
 8013950:	f8df b238 	ldr.w	fp, [pc, #568]	; 8013b8c <dns_gethostbyname_addrtype+0x2a4>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013954:	2500      	movs	r5, #0
 8013956:	4b8b      	ldr	r3, [pc, #556]	; (8013b84 <dns_gethostbyname_addrtype+0x29c>)
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8013958:	f89b 200a 	ldrb.w	r2, [fp, #10]
 801395c:	2a02      	cmp	r2, #2
 801395e:	d045      	beq.n	80139ec <dns_gethostbyname_addrtype+0x104>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013960:	3501      	adds	r5, #1
 8013962:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
 8013966:	b2ed      	uxtb	r5, r5
 8013968:	2d04      	cmp	r5, #4
 801396a:	d1f5      	bne.n	8013958 <dns_gethostbyname_addrtype+0x70>
      u8_t age = dns_seqno - entry->seqno;
 801396c:	2300      	movs	r3, #0
 801396e:	4a86      	ldr	r2, [pc, #536]	; (8013b88 <dns_gethostbyname_addrtype+0x2a0>)
  lseqi = DNS_TABLE_SIZE;
 8013970:	4629      	mov	r1, r5
      u8_t age = dns_seqno - entry->seqno;
 8013972:	7810      	ldrb	r0, [r2, #0]
  lseq = 0;
 8013974:	469c      	mov	ip, r3
    if (entry->state == DNS_STATE_UNUSED) {
 8013976:	f89a 200a 	ldrb.w	r2, [sl, #10]
 801397a:	fa5f fb83 	uxtb.w	fp, r3
 801397e:	2a00      	cmp	r2, #0
 8013980:	f000 80b1 	beq.w	8013ae6 <dns_gethostbyname_addrtype+0x1fe>
    if (entry->state == DNS_STATE_DONE) {
 8013984:	2a03      	cmp	r2, #3
 8013986:	f103 0301 	add.w	r3, r3, #1
 801398a:	d026      	beq.n	80139da <dns_gethostbyname_addrtype+0xf2>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801398c:	2b04      	cmp	r3, #4
 801398e:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 8013992:	d1f0      	bne.n	8013976 <dns_gethostbyname_addrtype+0x8e>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8013994:	2904      	cmp	r1, #4
 8013996:	d008      	beq.n	80139aa <dns_gethostbyname_addrtype+0xc2>
 8013998:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 801399c:	4a7b      	ldr	r2, [pc, #492]	; (8013b8c <dns_gethostbyname_addrtype+0x2a4>)
 801399e:	eb02 1903 	add.w	r9, r2, r3, lsl #4
 80139a2:	f899 300a 	ldrb.w	r3, [r9, #10]
 80139a6:	2b03      	cmp	r3, #3
 80139a8:	d03a      	beq.n	8013a20 <dns_gethostbyname_addrtype+0x138>
      return ERR_MEM;
 80139aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80139ae:	b003      	add	sp, #12
 80139b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 80139b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80139b8:	f109 0110 	add.w	r1, r9, #16
 80139bc:	4620      	mov	r0, r4
 80139be:	f7ff fc71 	bl	80132a4 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80139c2:	2800      	cmp	r0, #0
 80139c4:	d1ba      	bne.n	801393c <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 80139c6:	4b71      	ldr	r3, [pc, #452]	; (8013b8c <dns_gethostbyname_addrtype+0x2a4>)
 80139c8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80139cc:	eb03 1905 	add.w	r9, r3, r5, lsl #4
 80139d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80139d4:	f8cb 3000 	str.w	r3, [fp]
 80139d8:	e7a5      	b.n	8013926 <dns_gethostbyname_addrtype+0x3e>
      u8_t age = dns_seqno - entry->seqno;
 80139da:	f89a 200e 	ldrb.w	r2, [sl, #14]
 80139de:	1a82      	subs	r2, r0, r2
 80139e0:	b2d2      	uxtb	r2, r2
      if (age > lseq) {
 80139e2:	4562      	cmp	r2, ip
 80139e4:	d9d2      	bls.n	801398c <dns_gethostbyname_addrtype+0xa4>
 80139e6:	4659      	mov	r1, fp
 80139e8:	4694      	mov	ip, r2
 80139ea:	e7cf      	b.n	801398c <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 80139ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80139f0:	f10b 0110 	add.w	r1, fp, #16
 80139f4:	4620      	mov	r0, r4
 80139f6:	9300      	str	r3, [sp, #0]
 80139f8:	f7ff fc54 	bl	80132a4 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80139fc:	9b00      	ldr	r3, [sp, #0]
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d1ae      	bne.n	8013960 <dns_gethostbyname_addrtype+0x78>
        if (dns_requests[r].found == 0) {
 8013a02:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8013a06:	3001      	adds	r0, #1
 8013a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a0c:	0092      	lsls	r2, r2, #2
 8013a0e:	2900      	cmp	r1, #0
 8013a10:	f000 80a2 	beq.w	8013b58 <dns_gethostbyname_addrtype+0x270>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013a14:	2804      	cmp	r0, #4
 8013a16:	d1f4      	bne.n	8013a02 <dns_gethostbyname_addrtype+0x11a>
 8013a18:	e7a2      	b.n	8013960 <dns_gethostbyname_addrtype+0x78>
    return ERR_ARG;
 8013a1a:	f06f 000f 	mvn.w	r0, #15
 8013a1e:	e782      	b.n	8013926 <dns_gethostbyname_addrtype+0x3e>
      entry = &dns_table[i];
 8013a20:	468b      	mov	fp, r1
 8013a22:	f8cd 9000 	str.w	r9, [sp]
 8013a26:	f04f 0900 	mov.w	r9, #0
    if (dns_requests[r].found == NULL) {
 8013a2a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8013a2e:	4b55      	ldr	r3, [pc, #340]	; (8013b84 <dns_gethostbyname_addrtype+0x29c>)
 8013a30:	eb0a 0209 	add.w	r2, sl, r9
 8013a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a38:	0092      	lsls	r2, r2, #2
 8013a3a:	b12b      	cbz	r3, 8013a48 <dns_gethostbyname_addrtype+0x160>
 8013a3c:	f109 0901 	add.w	r9, r9, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013a40:	f1b9 0f04 	cmp.w	r9, #4
 8013a44:	d1f1      	bne.n	8013a2a <dns_gethostbyname_addrtype+0x142>
 8013a46:	e7b0      	b.n	80139aa <dns_gethostbyname_addrtype+0xc2>
 8013a48:	4611      	mov	r1, r2
  req->dns_table_idx = i;
 8013a4a:	4a4e      	ldr	r2, [pc, #312]	; (8013b84 <dns_gethostbyname_addrtype+0x29c>)
  entry->state = DNS_STATE_NEW;
 8013a4c:	f04f 0e01 	mov.w	lr, #1
  req->dns_table_idx = i;
 8013a50:	eb02 0c01 	add.w	ip, r2, r1
 8013a54:	9101      	str	r1, [sp, #4]
  MEMCPY(entry->name, name, namelen);
 8013a56:	4621      	mov	r1, r4
  entry->seqno = dns_seqno;
 8013a58:	9c00      	ldr	r4, [sp, #0]
  req->found = found;
 8013a5a:	4a4a      	ldr	r2, [pc, #296]	; (8013b84 <dns_gethostbyname_addrtype+0x29c>)
  entry->seqno = dns_seqno;
 8013a5c:	73a0      	strb	r0, [r4, #14]
  req->found = found;
 8013a5e:	9801      	ldr	r0, [sp, #4]
  req->arg   = callback_arg;
 8013a60:	f8cc 7004 	str.w	r7, [ip, #4]
  req->found = found;
 8013a64:	5016      	str	r6, [r2, r0]
  MEMCPY(entry->name, name, namelen);
 8013a66:	4626      	mov	r6, r4
 8013a68:	4620      	mov	r0, r4
 8013a6a:	4642      	mov	r2, r8
  entry->state = DNS_STATE_NEW;
 8013a6c:	4637      	mov	r7, r6
 8013a6e:	f886 e00a 	strb.w	lr, [r6, #10]
 8013a72:	4e47      	ldr	r6, [pc, #284]	; (8013b90 <dns_gethostbyname_addrtype+0x2a8>)
  MEMCPY(entry->name, name, namelen);
 8013a74:	3010      	adds	r0, #16
  req->dns_table_idx = i;
 8013a76:	f88c b008 	strb.w	fp, [ip, #8]
  entry->name[namelen] = 0;
 8013a7a:	461c      	mov	r4, r3
 8013a7c:	9301      	str	r3, [sp, #4]
 8013a7e:	44b8      	add	r8, r7
  MEMCPY(entry->name, name, namelen);
 8013a80:	f009 fd27 	bl	801d4d2 <memcpy>
  entry->name[namelen] = 0;
 8013a84:	9b01      	ldr	r3, [sp, #4]
 8013a86:	4632      	mov	r2, r6
 8013a88:	f888 3010 	strb.w	r3, [r8, #16]
    if (dns_pcbs[i] == NULL) {
 8013a8c:	f852 3b04 	ldr.w	r3, [r2], #4
 8013a90:	fa5f f884 	uxtb.w	r8, r4
 8013a94:	b373      	cbz	r3, 8013af4 <dns_gethostbyname_addrtype+0x20c>
 8013a96:	3401      	adds	r4, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8013a98:	2c04      	cmp	r4, #4
 8013a9a:	d1f7      	bne.n	8013a8c <dns_gethostbyname_addrtype+0x1a4>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8013a9c:	493d      	ldr	r1, [pc, #244]	; (8013b94 <dns_gethostbyname_addrtype+0x2ac>)
 8013a9e:	f891 8000 	ldrb.w	r8, [r1]
 8013aa2:	f108 0801 	add.w	r8, r8, #1
 8013aa6:	fa5f f888 	uxtb.w	r8, r8
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8013aaa:	f1b8 0f03 	cmp.w	r8, #3
 8013aae:	4643      	mov	r3, r8
 8013ab0:	d902      	bls.n	8013ab8 <dns_gethostbyname_addrtype+0x1d0>
 8013ab2:	f04f 0800 	mov.w	r8, #0
      idx = 0;
 8013ab6:	4643      	mov	r3, r8
    if (dns_pcbs[idx] != NULL) {
 8013ab8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8013abc:	f108 0201 	add.w	r2, r8, #1
 8013ac0:	3d01      	subs	r5, #1
    if (dns_pcbs[idx] != NULL) {
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d145      	bne.n	8013b52 <dns_gethostbyname_addrtype+0x26a>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8013ac6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8013aca:	fa5f f882 	uxtb.w	r8, r2
 8013ace:	d1ec      	bne.n	8013aaa <dns_gethostbyname_addrtype+0x1c2>
    entry->state = DNS_STATE_UNUSED;
 8013ad0:	9a00      	ldr	r2, [sp, #0]
    req->found = NULL;
 8013ad2:	44d1      	add	r9, sl
  entry->pcb_idx = dns_alloc_pcb();
 8013ad4:	2304      	movs	r3, #4
    req->found = NULL;
 8013ad6:	492b      	ldr	r1, [pc, #172]	; (8013b84 <dns_gethostbyname_addrtype+0x29c>)
    entry->state = DNS_STATE_UNUSED;
 8013ad8:	7295      	strb	r5, [r2, #10]
    return ERR_MEM;
 8013ada:	f04f 30ff 	mov.w	r0, #4294967295
    req->found = NULL;
 8013ade:	f841 5029 	str.w	r5, [r1, r9, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8013ae2:	73d3      	strb	r3, [r2, #15]
 8013ae4:	e71f      	b.n	8013926 <dns_gethostbyname_addrtype+0x3e>
    entry = &dns_table[i];
 8013ae6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8013aea:	4a28      	ldr	r2, [pc, #160]	; (8013b8c <dns_gethostbyname_addrtype+0x2a4>)
 8013aec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8013af0:	9300      	str	r3, [sp, #0]
 8013af2:	e798      	b.n	8013a26 <dns_gethostbyname_addrtype+0x13e>
  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
 8013af4:	202e      	movs	r0, #46	; 0x2e
 8013af6:	f005 fea1 	bl	801983c <udp_new_ip_type>
  if (ret == NULL) {
 8013afa:	4607      	mov	r7, r0
 8013afc:	2800      	cmp	r0, #0
 8013afe:	d039      	beq.n	8013b74 <dns_gethostbyname_addrtype+0x28c>
    u16_t port = (u16_t)DNS_RAND_TXID();
 8013b00:	f00a fd02 	bl	801e508 <rand>
    err = udp_bind(ret, IP_ANY_TYPE, port);
 8013b04:	4924      	ldr	r1, [pc, #144]	; (8013b98 <dns_gethostbyname_addrtype+0x2b0>)
    u16_t port = (u16_t)DNS_RAND_TXID();
 8013b06:	b283      	uxth	r3, r0
    err = udp_bind(ret, IP_ANY_TYPE, port);
 8013b08:	4638      	mov	r0, r7
    if (!DNS_PORT_ALLOWED(port)) {
 8013b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    err = udp_bind(ret, IP_ANY_TYPE, port);
 8013b0e:	461a      	mov	r2, r3
    if (!DNS_PORT_ALLOWED(port)) {
 8013b10:	d3f6      	bcc.n	8013b00 <dns_gethostbyname_addrtype+0x218>
    err = udp_bind(ret, IP_ANY_TYPE, port);
 8013b12:	f005 fd0b 	bl	801952c <udp_bind>
  } while (err == ERR_USE);
 8013b16:	f110 0f08 	cmn.w	r0, #8
 8013b1a:	d0f1      	beq.n	8013b00 <dns_gethostbyname_addrtype+0x218>
  if (err != ERR_OK) {
 8013b1c:	bb18      	cbnz	r0, 8013b66 <dns_gethostbyname_addrtype+0x27e>
  udp_recv(ret, dns_recv, NULL);
 8013b1e:	4602      	mov	r2, r0
 8013b20:	491e      	ldr	r1, [pc, #120]	; (8013b9c <dns_gethostbyname_addrtype+0x2b4>)
 8013b22:	4638      	mov	r0, r7
 8013b24:	f005 fe56 	bl	80197d4 <udp_recv>
      dns_last_pcb_idx = i;
 8013b28:	4b1a      	ldr	r3, [pc, #104]	; (8013b94 <dns_gethostbyname_addrtype+0x2ac>)
    dns_pcbs[i] = dns_alloc_random_port();
 8013b2a:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
      dns_last_pcb_idx = i;
 8013b2e:	f883 8000 	strb.w	r8, [r3]
  dns_seqno++;
 8013b32:	4a15      	ldr	r2, [pc, #84]	; (8013b88 <dns_gethostbyname_addrtype+0x2a0>)
  dns_check_entry(i);
 8013b34:	4658      	mov	r0, fp
  entry->pcb_idx = dns_alloc_pcb();
 8013b36:	9900      	ldr	r1, [sp, #0]
  dns_seqno++;
 8013b38:	7813      	ldrb	r3, [r2, #0]
  entry->pcb_idx = dns_alloc_pcb();
 8013b3a:	f881 800f 	strb.w	r8, [r1, #15]
  dns_seqno++;
 8013b3e:	3301      	adds	r3, #1
 8013b40:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8013b42:	f7ff fcdf 	bl	8013504 <dns_check_entry>
  return ERR_INPROGRESS;
 8013b46:	f06f 0004 	mvn.w	r0, #4
 8013b4a:	e6ec      	b.n	8013926 <dns_gethostbyname_addrtype+0x3e>
      return ERR_VAL;
 8013b4c:	f06f 0005 	mvn.w	r0, #5
 8013b50:	e6e9      	b.n	8013926 <dns_gethostbyname_addrtype+0x3e>
      dns_last_pcb_idx = idx;
 8013b52:	f881 8000 	strb.w	r8, [r1]
 8013b56:	e7ec      	b.n	8013b32 <dns_gethostbyname_addrtype+0x24a>
          dns_requests[r].found = found;
 8013b58:	1899      	adds	r1, r3, r2
 8013b5a:	509e      	str	r6, [r3, r2]
          return ERR_INPROGRESS;
 8013b5c:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 8013b60:	604f      	str	r7, [r1, #4]
          dns_requests[r].dns_table_idx = i;
 8013b62:	720d      	strb	r5, [r1, #8]
 8013b64:	e6df      	b.n	8013926 <dns_gethostbyname_addrtype+0x3e>
    udp_remove(ret);
 8013b66:	4638      	mov	r0, r7
 8013b68:	f005 fe38 	bl	80197dc <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8013b72:	e793      	b.n	8013a9c <dns_gethostbyname_addrtype+0x1b4>
 8013b74:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8013b78:	e790      	b.n	8013a9c <dns_gethostbyname_addrtype+0x1b4>
    return ERR_ARG;
 8013b7a:	f06f 000f 	mvn.w	r0, #15
}
 8013b7e:	4770      	bx	lr
 8013b80:	20020f04 	.word	0x20020f04
 8013b84:	20020ed0 	.word	0x20020ed0
 8013b88:	20020f00 	.word	0x20020f00
 8013b8c:	20020f0c 	.word	0x20020f0c
 8013b90:	20020ec0 	.word	0x20020ec0
 8013b94:	20020ebc 	.word	0x20020ebc
 8013b98:	0803bb0c 	.word	0x0803bb0c
 8013b9c:	08013615 	.word	0x08013615

08013ba0 <dns_gethostbyname>:
{
 8013ba0:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8013ba2:	2400      	movs	r4, #0
{
 8013ba4:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8013ba6:	9400      	str	r4, [sp, #0]
 8013ba8:	f7ff fe9e 	bl	80138e8 <dns_gethostbyname_addrtype>
}
 8013bac:	b002      	add	sp, #8
 8013bae:	bd10      	pop	{r4, pc}

08013bb0 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8013bb0:	2300      	movs	r3, #0
{
 8013bb2:	b470      	push	{r4, r5, r6}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8013bb4:	4299      	cmp	r1, r3
{
 8013bb6:	b083      	sub	sp, #12
  int odd = ((mem_ptr_t)pb & 1);
 8013bb8:	f000 0601 	and.w	r6, r0, #1
  u16_t t = 0;
 8013bbc:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8013bc0:	dd05      	ble.n	8013bce <lwip_standard_chksum+0x1e>
 8013bc2:	b126      	cbz	r6, 8013bce <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8013bc4:	7803      	ldrb	r3, [r0, #0]
    len--;
 8013bc6:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8013bc8:	3001      	adds	r0, #1
 8013bca:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8013bce:	2901      	cmp	r1, #1
 8013bd0:	dd26      	ble.n	8013c20 <lwip_standard_chksum+0x70>
 8013bd2:	3902      	subs	r1, #2
  u32_t sum = 0;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	084d      	lsrs	r5, r1, #1
 8013bd8:	1c6c      	adds	r4, r5, #1
 8013bda:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    sum += *ps++;
 8013bde:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8013be2:	4284      	cmp	r4, r0
    sum += *ps++;
 8013be4:	4413      	add	r3, r2
  while (len > 1) {
 8013be6:	d1fa      	bne.n	8013bde <lwip_standard_chksum+0x2e>
 8013be8:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8013bec:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8013bf0:	2901      	cmp	r1, #1
 8013bf2:	d102      	bne.n	8013bfa <lwip_standard_chksum+0x4a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013bf4:	7802      	ldrb	r2, [r0, #0]
 8013bf6:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8013bfa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013bfe:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8013c00:	b298      	uxth	r0, r3
 8013c02:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8013c06:	b298      	uxth	r0, r3
 8013c08:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8013c0c:	b126      	cbz	r6, 8013c18 <lwip_standard_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
 8013c0e:	0203      	lsls	r3, r0, #8
 8013c10:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8013c18:	b280      	uxth	r0, r0
 8013c1a:	b003      	add	sp, #12
 8013c1c:	bc70      	pop	{r4, r5, r6}
 8013c1e:	4770      	bx	lr
  u32_t sum = 0;
 8013c20:	2300      	movs	r3, #0
 8013c22:	e7e5      	b.n	8013bf0 <lwip_standard_chksum+0x40>

08013c24 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8013c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c28:	9d06      	ldr	r5, [sp, #24]
 8013c2a:	4617      	mov	r7, r2
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8013c2c:	681c      	ldr	r4, [r3, #0]
{
 8013c2e:	4688      	mov	r8, r1
  acc = (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
 8013c30:	682b      	ldr	r3, [r5, #0]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
 8013c32:	0c1a      	lsrs	r2, r3, #16
 8013c34:	fa12 f383 	uxtah	r3, r2, r3
 8013c38:	fa13 f384 	uxtah	r3, r3, r4
 8013c3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8013c40:	b29c      	uxth	r4, r3
 8013c42:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8013c46:	b29c      	uxth	r4, r3
 8013c48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  for (q = p; q != NULL; q = q->next) {
 8013c4c:	b300      	cbz	r0, 8013c90 <inet_chksum_pseudo+0x6c>
 8013c4e:	4605      	mov	r5, r0
  u8_t swapped = 0;
 8013c50:	2600      	movs	r6, #0
    acc += LWIP_CHKSUM(q->payload, q->len);
 8013c52:	8969      	ldrh	r1, [r5, #10]
 8013c54:	6868      	ldr	r0, [r5, #4]
 8013c56:	f7ff ffab 	bl	8013bb0 <lwip_standard_chksum>
 8013c5a:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 8013c5c:	896b      	ldrh	r3, [r5, #10]
      swapped = 1 - swapped;
 8013c5e:	f1c6 0201 	rsb	r2, r6, #1
    acc = FOLD_U32T(acc);
 8013c62:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8013c64:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8013c68:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8013c6c:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8013c70:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8013c74:	d003      	beq.n	8013c7e <inet_chksum_pseudo+0x5a>
      acc = SWAP_BYTES_IN_WORD(acc);
 8013c76:	b280      	uxth	r0, r0
      swapped = 1 - swapped;
 8013c78:	b2d6      	uxtb	r6, r2
      acc = SWAP_BYTES_IN_WORD(acc);
 8013c7a:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 8013c7e:	682d      	ldr	r5, [r5, #0]
 8013c80:	2d00      	cmp	r5, #0
 8013c82:	d1e6      	bne.n	8013c52 <inet_chksum_pseudo+0x2e>
  if (swapped) {
 8013c84:	b126      	cbz	r6, 8013c90 <inet_chksum_pseudo+0x6c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013c86:	0223      	lsls	r3, r4, #8
 8013c88:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 8013c90:	4640      	mov	r0, r8
 8013c92:	f7ff faaf 	bl	80131f4 <lwip_htons>
 8013c96:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8013c98:	4638      	mov	r0, r7
 8013c9a:	f7ff faab 	bl	80131f4 <lwip_htons>
 8013c9e:	4428      	add	r0, r5
 8013ca0:	4404      	add	r4, r0
  acc = FOLD_U32T(acc);
 8013ca2:	b2a0      	uxth	r0, r4
 8013ca4:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8013ca8:	b2a0      	uxth	r0, r4
 8013caa:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 8013cae:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
 8013cb0:	b280      	uxth	r0, r0
 8013cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb6:	bf00      	nop

08013cb8 <ip_chksum_pseudo>:
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8013cb8:	f7ff bfb4 	b.w	8013c24 <inet_chksum_pseudo>

08013cbc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8013cbc:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8013cbe:	f7ff ff77 	bl	8013bb0 <lwip_standard_chksum>
 8013cc2:	43c0      	mvns	r0, r0
}
 8013cc4:	b280      	uxth	r0, r0
 8013cc6:	bd08      	pop	{r3, pc}

08013cc8 <inet_chksum_pbuf>:
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
 8013cc8:	b328      	cbz	r0, 8013d16 <inet_chksum_pbuf+0x4e>
{
 8013cca:	b570      	push	{r4, r5, r6, lr}
  swapped = 0;
 8013ccc:	2600      	movs	r6, #0
 8013cce:	4605      	mov	r5, r0
  acc = 0;
 8013cd0:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 8013cd2:	8969      	ldrh	r1, [r5, #10]
 8013cd4:	6868      	ldr	r0, [r5, #4]
 8013cd6:	f7ff ff6b 	bl	8013bb0 <lwip_standard_chksum>
 8013cda:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8013cdc:	896b      	ldrh	r3, [r5, #10]
      swapped = 1 - swapped;
 8013cde:	f1c6 0201 	rsb	r2, r6, #1
    acc = FOLD_U32T(acc);
 8013ce2:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8013ce4:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8013ce8:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8013cec:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8013cf0:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8013cf4:	d003      	beq.n	8013cfe <inet_chksum_pbuf+0x36>
      acc = SWAP_BYTES_IN_WORD(acc);
 8013cf6:	b280      	uxth	r0, r0
      swapped = 1 - swapped;
 8013cf8:	b2d6      	uxtb	r6, r2
      acc = SWAP_BYTES_IN_WORD(acc);
 8013cfa:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 8013cfe:	682d      	ldr	r5, [r5, #0]
 8013d00:	2d00      	cmp	r5, #0
 8013d02:	d1e6      	bne.n	8013cd2 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8013d04:	b126      	cbz	r6, 8013d10 <inet_chksum_pbuf+0x48>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013d06:	0220      	lsls	r0, r4, #8
 8013d08:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013d0c:	b280      	uxth	r0, r0
 8013d0e:	4304      	orrs	r4, r0
 8013d10:	43e4      	mvns	r4, r4
 8013d12:	b2a0      	uxth	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
}
 8013d14:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8013d16:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8013d1a:	4770      	bx	lr

08013d1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013d1c:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8013d1e:	f001 fad5 	bl	80152cc <stats_init>
#if !NO_SYS
  sys_init();
 8013d22:	f008 ffc5 	bl	801ccb0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013d26:	f000 f80f 	bl	8013d48 <mem_init>
  memp_init();
 8013d2a:	f000 fbd5 	bl	80144d8 <memp_init>
  pbuf_init();
  netif_init();
 8013d2e:	f000 fc41 	bl	80145b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013d32:	f005 fb21 	bl	8019378 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013d36:	f001 fc41 	bl	80155bc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8013d3a:	f7ff fdaf 	bl	801389c <dns_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8013d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8013d42:	f005 ba91 	b.w	8019268 <sys_timeouts_init>
 8013d46:	bf00      	nop

08013d48 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013d48:	4b13      	ldr	r3, [pc, #76]	; (8013d98 <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8013d4a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8013d4e:	4813      	ldr	r0, [pc, #76]	; (8013d9c <mem_init+0x54>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013d50:	f642 61e4 	movw	r1, #12004	; 0x2ee4
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013d54:	f023 0303 	bic.w	r3, r3, #3
{
 8013d58:	b570      	push	{r4, r5, r6, lr}
  mem->prev = 0;
 8013d5a:	2600      	movs	r6, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013d5c:	4d10      	ldr	r5, [pc, #64]	; (8013da0 <mem_init+0x58>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013d5e:	2401      	movs	r4, #1
  mem->next = MEM_SIZE_ALIGNED;
 8013d60:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8013d62:	711e      	strb	r6, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013d64:	5098      	str	r0, [r3, r2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013d66:	480f      	ldr	r0, [pc, #60]	; (8013da4 <mem_init+0x5c>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013d68:	545c      	strb	r4, [r3, r1]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013d6a:	602b      	str	r3, [r5, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8013d6c:	189d      	adds	r5, r3, r2
 8013d6e:	4c0e      	ldr	r4, [pc, #56]	; (8013da8 <mem_init+0x60>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013d70:	490e      	ldr	r1, [pc, #56]	; (8013dac <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 8013d72:	6003      	str	r3, [r0, #0]

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013d74:	480e      	ldr	r0, [pc, #56]	; (8013db0 <mem_init+0x68>)
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8013d76:	6025      	str	r5, [r4, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013d78:	f8a1 20ae 	strh.w	r2, [r1, #174]	; 0xae
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013d7c:	f008 ffa4 	bl	801ccc8 <sys_mutex_new>
 8013d80:	b900      	cbnz	r0, 8013d84 <mem_init+0x3c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8013d82:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013d84:	4b0b      	ldr	r3, [pc, #44]	; (8013db4 <mem_init+0x6c>)
 8013d86:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8013d8a:	490b      	ldr	r1, [pc, #44]	; (8013db8 <mem_init+0x70>)
 8013d8c:	480b      	ldr	r0, [pc, #44]	; (8013dbc <mem_init+0x74>)
}
 8013d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013d92:	f00a bb29 	b.w	801e3e8 <iprintf>
 8013d96:	bf00      	nop
 8013d98:	20025a8f 	.word	0x20025a8f
 8013d9c:	2ee02ee0 	.word	0x2ee02ee0
 8013da0:	20021358 	.word	0x20021358
 8013da4:	2002134c 	.word	0x2002134c
 8013da8:	2002135c 	.word	0x2002135c
 8013dac:	20035384 	.word	0x20035384
 8013db0:	20021354 	.word	0x20021354
 8013db4:	08039bb0 	.word	0x08039bb0
 8013db8:	08039be0 	.word	0x08039be0
 8013dbc:	08023618 	.word	0x08023618

08013dc0 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	f000 8083 	beq.w	8013ecc <mem_free+0x10c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8013dc6:	0783      	lsls	r3, r0, #30
{
 8013dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dcc:	4604      	mov	r4, r0
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8013dce:	d171      	bne.n	8013eb4 <mem_free+0xf4>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013dd0:	4d5a      	ldr	r5, [pc, #360]	; (8013f3c <mem_free+0x17c>)
 8013dd2:	682b      	ldr	r3, [r5, #0]
 8013dd4:	42a3      	cmp	r3, r4
 8013dd6:	d85b      	bhi.n	8013e90 <mem_free+0xd0>
 8013dd8:	4f59      	ldr	r7, [pc, #356]	; (8013f40 <mem_free+0x180>)
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	42a3      	cmp	r3, r4
 8013dde:	d957      	bls.n	8013e90 <mem_free+0xd0>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8013de0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8013de4:	f1a4 0608 	sub.w	r6, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	f000 8087 	beq.w	8013efc <mem_free+0x13c>
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 8013dee:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8013f70 <mem_free+0x1b0>
  mem->used = 0;
 8013df2:	2200      	movs	r2, #0
    /* the newly freed struct is now the lowest */
    lfree = mem;
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013df4:	4853      	ldr	r0, [pc, #332]	; (8013f44 <mem_free+0x184>)
  if (mem < lfree) {
 8013df6:	f8d8 3000 	ldr.w	r3, [r8]
  mem->used = 0;
 8013dfa:	f804 2c04 	strb.w	r2, [r4, #-4]
  if (mem < lfree) {
 8013dfe:	42b3      	cmp	r3, r6
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013e00:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
 8013e04:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013e08:	6829      	ldr	r1, [r5, #0]
 8013e0a:	eba2 0203 	sub.w	r2, r2, r3
    lfree = mem;
 8013e0e:	bf88      	it	hi
 8013e10:	f8c8 6000 	strhi.w	r6, [r8]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013e14:	eba6 0c01 	sub.w	ip, r6, r1
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013e18:	42b1      	cmp	r1, r6
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013e1a:	4462      	add	r2, ip
 8013e1c:	f8a0 20b0 	strh.w	r2, [r0, #176]	; 0xb0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013e20:	d855      	bhi.n	8013ece <mem_free+0x10e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013e22:	683a      	ldr	r2, [r7, #0]
 8013e24:	4296      	cmp	r6, r2
 8013e26:	d271      	bcs.n	8013f0c <mem_free+0x14c>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013e28:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	d87a      	bhi.n	8013f26 <mem_free+0x166>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8013e30:	682a      	ldr	r2, [r5, #0]
 8013e32:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013e34:	429e      	cmp	r6, r3
 8013e36:	d012      	beq.n	8013e5e <mem_free+0x9e>
 8013e38:	7919      	ldrb	r1, [r3, #4]
 8013e3a:	b981      	cbnz	r1, 8013e5e <mem_free+0x9e>
 8013e3c:	6839      	ldr	r1, [r7, #0]
 8013e3e:	428b      	cmp	r3, r1
 8013e40:	d00d      	beq.n	8013e5e <mem_free+0x9e>
    if (lfree == nmem) {
 8013e42:	f8d8 1000 	ldr.w	r1, [r8]
    mem->next = nmem->next;
 8013e46:	8818      	ldrh	r0, [r3, #0]
    if (lfree == nmem) {
 8013e48:	428b      	cmp	r3, r1
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8013e4a:	eba6 0102 	sub.w	r1, r6, r2
    mem->next = nmem->next;
 8013e4e:	f824 0c08 	strh.w	r0, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8013e52:	881b      	ldrh	r3, [r3, #0]
      lfree = mem;
 8013e54:	bf08      	it	eq
 8013e56:	f8c8 6000 	streq.w	r6, [r8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8013e5a:	4413      	add	r3, r2
 8013e5c:	8059      	strh	r1, [r3, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8013e5e:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 8013e62:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8013e64:	429e      	cmp	r6, r3
 8013e66:	d00e      	beq.n	8013e86 <mem_free+0xc6>
 8013e68:	7918      	ldrb	r0, [r3, #4]
 8013e6a:	b960      	cbnz	r0, 8013e86 <mem_free+0xc6>
    if (lfree == mem) {
 8013e6c:	f8d8 0000 	ldr.w	r0, [r8]
 8013e70:	4286      	cmp	r6, r0
      lfree = pmem;
 8013e72:	bf08      	it	eq
 8013e74:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 8013e78:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013e7c:	5253      	strh	r3, [r2, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8013e7e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013e82:	441a      	add	r2, r3
 8013e84:	8051      	strh	r1, [r2, #2]

  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
 8013e86:	4b30      	ldr	r3, [pc, #192]	; (8013f48 <mem_free+0x188>)
 8013e88:	2201      	movs	r2, #1
 8013e8a:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8013e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013e90:	4b2e      	ldr	r3, [pc, #184]	; (8013f4c <mem_free+0x18c>)
 8013e92:	f240 12af 	movw	r2, #431	; 0x1af
 8013e96:	492e      	ldr	r1, [pc, #184]	; (8013f50 <mem_free+0x190>)
 8013e98:	482e      	ldr	r0, [pc, #184]	; (8013f54 <mem_free+0x194>)
 8013e9a:	f00a faa5 	bl	801e3e8 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013e9e:	682b      	ldr	r3, [r5, #0]
 8013ea0:	42a3      	cmp	r3, r4
 8013ea2:	d93b      	bls.n	8013f1c <mem_free+0x15c>
    MEM_STATS_INC(illegal);
 8013ea4:	4a27      	ldr	r2, [pc, #156]	; (8013f44 <mem_free+0x184>)
 8013ea6:	f8b2 30b4 	ldrh.w	r3, [r2, #180]	; 0xb4
 8013eaa:	3301      	adds	r3, #1
 8013eac:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
}
 8013eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013eb4:	4d21      	ldr	r5, [pc, #132]	; (8013f3c <mem_free+0x17c>)
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8013eb6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8013eba:	4b24      	ldr	r3, [pc, #144]	; (8013f4c <mem_free+0x18c>)
 8013ebc:	4926      	ldr	r1, [pc, #152]	; (8013f58 <mem_free+0x198>)
 8013ebe:	4825      	ldr	r0, [pc, #148]	; (8013f54 <mem_free+0x194>)
 8013ec0:	f00a fa92 	bl	801e3e8 <iprintf>
  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013ec4:	682b      	ldr	r3, [r5, #0]
 8013ec6:	42a3      	cmp	r3, r4
 8013ec8:	d986      	bls.n	8013dd8 <mem_free+0x18>
 8013eca:	e7e1      	b.n	8013e90 <mem_free+0xd0>
 8013ecc:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013ece:	4b1f      	ldr	r3, [pc, #124]	; (8013f4c <mem_free+0x18c>)
 8013ed0:	f240 125d 	movw	r2, #349	; 0x15d
 8013ed4:	4921      	ldr	r1, [pc, #132]	; (8013f5c <mem_free+0x19c>)
 8013ed6:	481f      	ldr	r0, [pc, #124]	; (8013f54 <mem_free+0x194>)
 8013ed8:	f00a fa86 	bl	801e3e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	429e      	cmp	r6, r3
 8013ee0:	d214      	bcs.n	8013f0c <mem_free+0x14c>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013ee2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8013ee6:	b133      	cbz	r3, 8013ef6 <mem_free+0x136>
 8013ee8:	4b18      	ldr	r3, [pc, #96]	; (8013f4c <mem_free+0x18c>)
 8013eea:	f240 125f 	movw	r2, #351	; 0x15f
 8013eee:	491c      	ldr	r1, [pc, #112]	; (8013f60 <mem_free+0x1a0>)
 8013ef0:	4818      	ldr	r0, [pc, #96]	; (8013f54 <mem_free+0x194>)
 8013ef2:	f00a fa79 	bl	801e3e8 <iprintf>
 8013ef6:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013efa:	e795      	b.n	8013e28 <mem_free+0x68>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8013efc:	4b13      	ldr	r3, [pc, #76]	; (8013f4c <mem_free+0x18c>)
 8013efe:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8013f02:	4918      	ldr	r1, [pc, #96]	; (8013f64 <mem_free+0x1a4>)
 8013f04:	4813      	ldr	r0, [pc, #76]	; (8013f54 <mem_free+0x194>)
 8013f06:	f00a fa6f 	bl	801e3e8 <iprintf>
 8013f0a:	e770      	b.n	8013dee <mem_free+0x2e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013f0c:	4b0f      	ldr	r3, [pc, #60]	; (8013f4c <mem_free+0x18c>)
 8013f0e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013f12:	4915      	ldr	r1, [pc, #84]	; (8013f68 <mem_free+0x1a8>)
 8013f14:	480f      	ldr	r0, [pc, #60]	; (8013f54 <mem_free+0x194>)
 8013f16:	f00a fa67 	bl	801e3e8 <iprintf>
 8013f1a:	e7e2      	b.n	8013ee2 <mem_free+0x122>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013f1c:	4f08      	ldr	r7, [pc, #32]	; (8013f40 <mem_free+0x180>)
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	429c      	cmp	r4, r3
 8013f22:	d2bf      	bcs.n	8013ea4 <mem_free+0xe4>
 8013f24:	e75c      	b.n	8013de0 <mem_free+0x20>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013f26:	4b09      	ldr	r3, [pc, #36]	; (8013f4c <mem_free+0x18c>)
 8013f28:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8013f2c:	490f      	ldr	r1, [pc, #60]	; (8013f6c <mem_free+0x1ac>)
 8013f2e:	4809      	ldr	r0, [pc, #36]	; (8013f54 <mem_free+0x194>)
 8013f30:	f00a fa5a 	bl	801e3e8 <iprintf>
 8013f34:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013f38:	e77a      	b.n	8013e30 <mem_free+0x70>
 8013f3a:	bf00      	nop
 8013f3c:	20021358 	.word	0x20021358
 8013f40:	2002135c 	.word	0x2002135c
 8013f44:	20035384 	.word	0x20035384
 8013f48:	20021350 	.word	0x20021350
 8013f4c:	08039bb0 	.word	0x08039bb0
 8013f50:	08039b08 	.word	0x08039b08
 8013f54:	08023618 	.word	0x08023618
 8013f58:	08039ae4 	.word	0x08039ae4
 8013f5c:	08039b34 	.word	0x08039b34
 8013f60:	08039b68 	.word	0x08039b68
 8013f64:	08039b20 	.word	0x08039b20
 8013f68:	08039b4c 	.word	0x08039b4c
 8013f6c:	08039b84 	.word	0x08039b84
 8013f70:	2002134c 	.word	0x2002134c

08013f74 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8013f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8013f78:	3103      	adds	r1, #3
 8013f7a:	f64f 74fc 	movw	r4, #65532	; 0xfffc
{
 8013f7e:	4605      	mov	r5, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8013f80:	400c      	ands	r4, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8013f82:	2c0b      	cmp	r4, #11
 8013f84:	d91f      	bls.n	8013fc6 <mem_trim+0x52>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8013f86:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8013f8a:	429c      	cmp	r4, r3
 8013f8c:	f200 808e 	bhi.w	80140ac <mem_trim+0x138>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013f90:	4e47      	ldr	r6, [pc, #284]	; (80140b0 <mem_trim+0x13c>)
 8013f92:	6833      	ldr	r3, [r6, #0]
 8013f94:	42ab      	cmp	r3, r5
 8013f96:	d803      	bhi.n	8013fa0 <mem_trim+0x2c>
 8013f98:	4a46      	ldr	r2, [pc, #280]	; (80140b4 <mem_trim+0x140>)
 8013f9a:	6812      	ldr	r2, [r2, #0]
 8013f9c:	42aa      	cmp	r2, r5
 8013f9e:	d818      	bhi.n	8013fd2 <mem_trim+0x5e>
 8013fa0:	4b45      	ldr	r3, [pc, #276]	; (80140b8 <mem_trim+0x144>)
 8013fa2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8013fa6:	4945      	ldr	r1, [pc, #276]	; (80140bc <mem_trim+0x148>)
 8013fa8:	4845      	ldr	r0, [pc, #276]	; (80140c0 <mem_trim+0x14c>)
 8013faa:	f00a fa1d 	bl	801e3e8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013fae:	6833      	ldr	r3, [r6, #0]
 8013fb0:	42ab      	cmp	r3, r5
 8013fb2:	d90a      	bls.n	8013fca <mem_trim+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8013fb4:	4a43      	ldr	r2, [pc, #268]	; (80140c4 <mem_trim+0x150>)
 8013fb6:	f8b2 30b4 	ldrh.w	r3, [r2, #180]	; 0xb4
 8013fba:	3301      	adds	r3, #1
 8013fbc:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    newsize = MIN_SIZE_ALIGNED;
 8013fc6:	240c      	movs	r4, #12
 8013fc8:	e7e2      	b.n	8013f90 <mem_trim+0x1c>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013fca:	4a3a      	ldr	r2, [pc, #232]	; (80140b4 <mem_trim+0x140>)
 8013fcc:	6812      	ldr	r2, [r2, #0]
 8013fce:	42aa      	cmp	r2, r5
 8013fd0:	d9f0      	bls.n	8013fb4 <mem_trim+0x40>
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8013fd2:	f1a5 0208 	sub.w	r2, r5, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8013fd6:	f835 0c08 	ldrh.w	r0, [r5, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8013fda:	1ad2      	subs	r2, r2, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8013fdc:	f1a0 0108 	sub.w	r1, r0, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8013fe0:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8013fe2:	1a89      	subs	r1, r1, r2
 8013fe4:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013fe6:	42a1      	cmp	r1, r4
 8013fe8:	d333      	bcc.n	8014052 <mem_trim+0xde>
  if (newsize == size) {
 8013fea:	d0e9      	beq.n	8013fc0 <mem_trim+0x4c>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8013fec:	eb03 0c00 	add.w	ip, r3, r0
  if (mem2->used == 0) {
 8013ff0:	f89c 6004 	ldrb.w	r6, [ip, #4]
 8013ff4:	bbb6      	cbnz	r6, 8014064 <mem_trim+0xf0>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8013ff6:	f104 0608 	add.w	r6, r4, #8
    next = mem2->next;
 8013ffa:	f833 8000 	ldrh.w	r8, [r3, r0]
    if (lfree == mem2) {
 8013ffe:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 80140d0 <mem_trim+0x15c>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8014002:	4630      	mov	r0, r6
    if (lfree == mem2) {
 8014004:	f8de 6000 	ldr.w	r6, [lr]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8014008:	4410      	add	r0, r2
    if (lfree == mem2) {
 801400a:	4566      	cmp	r6, ip
    mem2->used = 0;
 801400c:	f04f 0c00 	mov.w	ip, #0
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8014010:	b280      	uxth	r0, r0
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014012:	f642 66e0 	movw	r6, #12000	; 0x2ee0
 8014016:	eb03 0700 	add.w	r7, r3, r0
    mem2->next = next;
 801401a:	f8a7 8000 	strh.w	r8, [r7]
    mem2->prev = ptr;
 801401e:	807a      	strh	r2, [r7, #2]
    mem2->used = 0;
 8014020:	f887 c004 	strb.w	ip, [r7, #4]
    mem->next = ptr2;
 8014024:	f825 0c08 	strh.w	r0, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014028:	883a      	ldrh	r2, [r7, #0]
      lfree = (struct mem *)(void *)&ram[ptr2];
 801402a:	bf08      	it	eq
 801402c:	f8ce 7000 	streq.w	r7, [lr]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014030:	42b2      	cmp	r2, r6
 8014032:	d001      	beq.n	8014038 <mem_trim+0xc4>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8014034:	4413      	add	r3, r2
 8014036:	8058      	strh	r0, [r3, #2]
    MEM_STATS_DEC_USED(used, (size - newsize));
 8014038:	4a22      	ldr	r2, [pc, #136]	; (80140c4 <mem_trim+0x150>)
 801403a:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 801403e:	441c      	add	r4, r3
 8014040:	1a61      	subs	r1, r4, r1
 8014042:	f8a2 10b0 	strh.w	r1, [r2, #176]	; 0xb0
  mem_free_count = 1;
 8014046:	4b20      	ldr	r3, [pc, #128]	; (80140c8 <mem_trim+0x154>)
 8014048:	2201      	movs	r2, #1
}
 801404a:	4628      	mov	r0, r5
  mem_free_count = 1;
 801404c:	701a      	strb	r2, [r3, #0]
}
 801404e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014052:	4b19      	ldr	r3, [pc, #100]	; (80140b8 <mem_trim+0x144>)
 8014054:	f240 2206 	movw	r2, #518	; 0x206
 8014058:	491c      	ldr	r1, [pc, #112]	; (80140cc <mem_trim+0x158>)
    return NULL;
 801405a:	2500      	movs	r5, #0
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801405c:	4818      	ldr	r0, [pc, #96]	; (80140c0 <mem_trim+0x14c>)
 801405e:	f00a f9c3 	bl	801e3e8 <iprintf>
 8014062:	e7ad      	b.n	8013fc0 <mem_trim+0x4c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014064:	f104 0614 	add.w	r6, r4, #20
 8014068:	428e      	cmp	r6, r1
 801406a:	d8ec      	bhi.n	8014046 <mem_trim+0xd2>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801406c:	f104 0608 	add.w	r6, r4, #8
    if (mem2 < lfree) {
 8014070:	4f17      	ldr	r7, [pc, #92]	; (80140d0 <mem_trim+0x15c>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8014072:	4416      	add	r6, r2
 8014074:	fa1f fe86 	uxth.w	lr, r6
    if (mem2 < lfree) {
 8014078:	683e      	ldr	r6, [r7, #0]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801407a:	eb03 0c0e 	add.w	ip, r3, lr
    if (mem2 < lfree) {
 801407e:	4566      	cmp	r6, ip
    mem2->next = mem->next;
 8014080:	f8ac 0000 	strh.w	r0, [ip]
    mem2->prev = ptr;
 8014084:	f8ac 2002 	strh.w	r2, [ip, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014088:	f642 60e0 	movw	r0, #12000	; 0x2ee0
      lfree = mem2;
 801408c:	bf88      	it	hi
 801408e:	f8c7 c000 	strhi.w	ip, [r7]
    mem2->used = 0;
 8014092:	2700      	movs	r7, #0
 8014094:	f88c 7004 	strb.w	r7, [ip, #4]
    mem->next = ptr2;
 8014098:	f825 ec08 	strh.w	lr, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801409c:	f8bc 2000 	ldrh.w	r2, [ip]
 80140a0:	4282      	cmp	r2, r0
 80140a2:	d0c9      	beq.n	8014038 <mem_trim+0xc4>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80140a4:	4413      	add	r3, r2
 80140a6:	f8a3 e002 	strh.w	lr, [r3, #2]
 80140aa:	e7c5      	b.n	8014038 <mem_trim+0xc4>
    return NULL;
 80140ac:	2500      	movs	r5, #0
 80140ae:	e787      	b.n	8013fc0 <mem_trim+0x4c>
 80140b0:	20021358 	.word	0x20021358
 80140b4:	2002135c 	.word	0x2002135c
 80140b8:	08039bb0 	.word	0x08039bb0
 80140bc:	08039c80 	.word	0x08039c80
 80140c0:	08023618 	.word	0x08023618
 80140c4:	20035384 	.word	0x20035384
 80140c8:	20021350 	.word	0x20021350
 80140cc:	08039c98 	.word	0x08039c98
 80140d0:	2002134c 	.word	0x2002134c

080140d4 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80140d4:	2800      	cmp	r0, #0
 80140d6:	f000 80ca 	beq.w	801426e <mem_malloc+0x19a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80140da:	3003      	adds	r0, #3
{
 80140dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size = LWIP_MEM_ALIGN_SIZE(size);
 80140e0:	f64f 79fc 	movw	r9, #65532	; 0xfffc
{
 80140e4:	b083      	sub	sp, #12
  size = LWIP_MEM_ALIGN_SIZE(size);
 80140e6:	ea00 0909 	and.w	r9, r0, r9

  if (size < MIN_SIZE_ALIGNED) {
 80140ea:	f1b9 0f0b 	cmp.w	r9, #11
 80140ee:	f240 80ac 	bls.w	801424a <mem_malloc+0x176>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 80140f2:	f642 66e0 	movw	r6, #12000	; 0x2ee0
 80140f6:	45b1      	cmp	r9, r6
 80140f8:	d83b      	bhi.n	8014172 <mem_malloc+0x9e>
 80140fa:	eba6 0609 	sub.w	r6, r6, r9
 80140fe:	46c8      	mov	r8, r9
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014100:	485c      	ldr	r0, [pc, #368]	; (8014274 <mem_malloc+0x1a0>)
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
      mem_free_count = 0;
 8014102:	2700      	movs	r7, #0
  sys_mutex_lock(&mem_mutex);
 8014104:	f008 fe06 	bl	801cd14 <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014108:	4b5b      	ldr	r3, [pc, #364]	; (8014278 <mem_malloc+0x1a4>)
 801410a:	4a5c      	ldr	r2, [pc, #368]	; (801427c <mem_malloc+0x1a8>)
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801410c:	f06f 0e07 	mvn.w	lr, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014110:	681d      	ldr	r5, [r3, #0]
 8014112:	6812      	ldr	r2, [r2, #0]
      mem_free_count = 0;
 8014114:	495a      	ldr	r1, [pc, #360]	; (8014280 <mem_malloc+0x1ac>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014116:	eba2 0b05 	sub.w	fp, r2, r5
 801411a:	9201      	str	r2, [sp, #4]
 801411c:	fa1f fa8b 	uxth.w	sl, fp
      mem = (struct mem *)(void *)&ram[ptr];
 8014120:	eb05 030a 	add.w	r3, r5, sl
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014124:	46d3      	mov	fp, sl
      mem = (struct mem *)(void *)&ram[ptr];
 8014126:	9300      	str	r3, [sp, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014128:	4556      	cmp	r6, sl
 801412a:	d919      	bls.n	8014160 <mem_malloc+0x8c>
      mem_free_count = 0;
 801412c:	700f      	strb	r7, [r1, #0]
      if (mem_free_count != 0) {
 801412e:	780b      	ldrb	r3, [r1, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d1f9      	bne.n	8014128 <mem_malloc+0x54>
      mem = (struct mem *)(void *)&ram[ptr];
 8014134:	9c00      	ldr	r4, [sp, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014136:	46dc      	mov	ip, fp
      if (mem_free_count != 0) {
 8014138:	4653      	mov	r3, sl
 801413a:	e004      	b.n	8014146 <mem_malloc+0x72>
      mem_free_count = 0;
 801413c:	700f      	strb	r7, [r1, #0]
 801413e:	469c      	mov	ip, r3
      if (mem_free_count != 0) {
 8014140:	780a      	ldrb	r2, [r1, #0]
 8014142:	2a00      	cmp	r2, #0
 8014144:	d1f0      	bne.n	8014128 <mem_malloc+0x54>
      if ((!mem->used) &&
 8014146:	7920      	ldrb	r0, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014148:	ebae 0303 	sub.w	r3, lr, r3
 801414c:	8822      	ldrh	r2, [r4, #0]
      if ((!mem->used) &&
 801414e:	b910      	cbnz	r0, 8014156 <mem_malloc+0x82>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014150:	4413      	add	r3, r2
      if ((!mem->used) &&
 8014152:	4543      	cmp	r3, r8
 8014154:	d211      	bcs.n	801417a <mem_malloc+0xa6>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014156:	42b2      	cmp	r2, r6
 8014158:	4613      	mov	r3, r2
      mem = (struct mem *)(void *)&ram[ptr];
 801415a:	eb05 0402 	add.w	r4, r5, r2
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801415e:	d3ed      	bcc.n	801413c <mem_malloc+0x68>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 8014160:	4a48      	ldr	r2, [pc, #288]	; (8014284 <mem_malloc+0x1b0>)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014162:	4844      	ldr	r0, [pc, #272]	; (8014274 <mem_malloc+0x1a0>)
  MEM_STATS_INC(err);
 8014164:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 8014168:	3301      	adds	r3, #1
 801416a:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
  sys_mutex_unlock(&mem_mutex);
 801416e:	f008 fdd7 	bl	801cd20 <sys_mutex_unlock>
  return NULL;
 8014172:	2000      	movs	r0, #0
}
 8014174:	b003      	add	sp, #12
 8014176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801417a:	f108 0e14 	add.w	lr, r8, #20
 801417e:	4e41      	ldr	r6, [pc, #260]	; (8014284 <mem_malloc+0x1b0>)
 8014180:	4573      	cmp	r3, lr
 8014182:	f8b6 70b0 	ldrh.w	r7, [r6, #176]	; 0xb0
 8014186:	d244      	bcs.n	8014212 <mem_malloc+0x13e>
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8014188:	443a      	add	r2, r7
          mem->used = 1;
 801418a:	2301      	movs	r3, #1
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 801418c:	eba2 0c0c 	sub.w	ip, r2, ip
          mem->used = 1;
 8014190:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8014192:	f8a6 c0b0 	strh.w	ip, [r6, #176]	; 0xb0
          while (cur->used && cur != ram_end) {
 8014196:	4e3c      	ldr	r6, [pc, #240]	; (8014288 <mem_malloc+0x1b4>)
            mem_free_count = 0;
 8014198:	2700      	movs	r7, #0
          while (cur->used && cur != ram_end) {
 801419a:	f8dd c004 	ldr.w	ip, [sp, #4]
 801419e:	6830      	ldr	r0, [r6, #0]
        if (mem == lfree) {
 80141a0:	45a4      	cmp	ip, r4
 80141a2:	d118      	bne.n	80141d6 <mem_malloc+0x102>
          while (cur->used && cur != ram_end) {
 80141a4:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d061      	beq.n	8014270 <mem_malloc+0x19c>
 80141ac:	4584      	cmp	ip, r0
 80141ae:	d052      	beq.n	8014256 <mem_malloc+0x182>
            mem_free_count = 0;
 80141b0:	700f      	strb	r7, [r1, #0]
            if (mem_free_count != 0) {
 80141b2:	780b      	ldrb	r3, [r1, #0]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d1f3      	bne.n	80141a0 <mem_malloc+0xcc>
 80141b8:	4663      	mov	r3, ip
 80141ba:	e005      	b.n	80141c8 <mem_malloc+0xf4>
          while (cur->used && cur != ram_end) {
 80141bc:	4298      	cmp	r0, r3
 80141be:	d04b      	beq.n	8014258 <mem_malloc+0x184>
            mem_free_count = 0;
 80141c0:	700f      	strb	r7, [r1, #0]
            if (mem_free_count != 0) {
 80141c2:	780a      	ldrb	r2, [r1, #0]
 80141c4:	2a00      	cmp	r2, #0
 80141c6:	d1eb      	bne.n	80141a0 <mem_malloc+0xcc>
            cur = (struct mem *)(void *)&ram[cur->next];
 80141c8:	881b      	ldrh	r3, [r3, #0]
 80141ca:	442b      	add	r3, r5
          while (cur->used && cur != ram_end) {
 80141cc:	791a      	ldrb	r2, [r3, #4]
 80141ce:	2a00      	cmp	r2, #0
 80141d0:	d1f4      	bne.n	80141bc <mem_malloc+0xe8>
          lfree = cur;
 80141d2:	4a2a      	ldr	r2, [pc, #168]	; (801427c <mem_malloc+0x1a8>)
 80141d4:	6013      	str	r3, [r2, #0]
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80141d6:	f108 0808 	add.w	r8, r8, #8
        sys_mutex_unlock(&mem_mutex);
 80141da:	4826      	ldr	r0, [pc, #152]	; (8014274 <mem_malloc+0x1a0>)
 80141dc:	f008 fda0 	bl	801cd20 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80141e0:	6833      	ldr	r3, [r6, #0]
 80141e2:	44a0      	add	r8, r4
 80141e4:	4543      	cmp	r3, r8
 80141e6:	d33a      	bcc.n	801425e <mem_malloc+0x18a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80141e8:	07a3      	lsls	r3, r4, #30
 80141ea:	d00d      	beq.n	8014208 <mem_malloc+0x134>
 80141ec:	4b27      	ldr	r3, [pc, #156]	; (801428c <mem_malloc+0x1b8>)
 80141ee:	f240 22d6 	movw	r2, #726	; 0x2d6
 80141f2:	4927      	ldr	r1, [pc, #156]	; (8014290 <mem_malloc+0x1bc>)
 80141f4:	4827      	ldr	r0, [pc, #156]	; (8014294 <mem_malloc+0x1c0>)
 80141f6:	f00a f8f7 	bl	801e3e8 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80141fa:	4b24      	ldr	r3, [pc, #144]	; (801428c <mem_malloc+0x1b8>)
 80141fc:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8014200:	4925      	ldr	r1, [pc, #148]	; (8014298 <mem_malloc+0x1c4>)
 8014202:	4824      	ldr	r0, [pc, #144]	; (8014294 <mem_malloc+0x1c0>)
 8014204:	f00a f8f0 	bl	801e3e8 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8014208:	f104 0008 	add.w	r0, r4, #8
}
 801420c:	b003      	add	sp, #12
 801420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8014212:	f109 0308 	add.w	r3, r9, #8
          mem->used = 1;
 8014216:	f04f 0a01 	mov.w	sl, #1
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801421a:	f642 6be0 	movw	fp, #12000	; 0x2ee0
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801421e:	4463      	add	r3, ip
 8014220:	b29b      	uxth	r3, r3
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8014222:	eb05 0e03 	add.w	lr, r5, r3
          mem2->used = 0;
 8014226:	f88e 0004 	strb.w	r0, [lr, #4]
          mem2->next = mem->next;
 801422a:	52ea      	strh	r2, [r5, r3]
          mem2->prev = ptr;
 801422c:	f8ae c002 	strh.w	ip, [lr, #2]
          mem->next = ptr2;
 8014230:	8023      	strh	r3, [r4, #0]
          mem->used = 1;
 8014232:	f884 a004 	strb.w	sl, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014236:	5aea      	ldrh	r2, [r5, r3]
 8014238:	455a      	cmp	r2, fp
 801423a:	d001      	beq.n	8014240 <mem_malloc+0x16c>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801423c:	442a      	add	r2, r5
 801423e:	8053      	strh	r3, [r2, #2]
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8014240:	3708      	adds	r7, #8
 8014242:	44b9      	add	r9, r7
 8014244:	f8a6 90b0 	strh.w	r9, [r6, #176]	; 0xb0
 8014248:	e7a5      	b.n	8014196 <mem_malloc+0xc2>
 801424a:	f04f 080c 	mov.w	r8, #12
 801424e:	f642 66d4 	movw	r6, #11988	; 0x2ed4
    size = MIN_SIZE_ALIGNED;
 8014252:	46c1      	mov	r9, r8
 8014254:	e754      	b.n	8014100 <mem_malloc+0x2c>
          while (cur->used && cur != ram_end) {
 8014256:	4620      	mov	r0, r4
          lfree = cur;
 8014258:	4b08      	ldr	r3, [pc, #32]	; (801427c <mem_malloc+0x1a8>)
 801425a:	6018      	str	r0, [r3, #0]
 801425c:	e7bb      	b.n	80141d6 <mem_malloc+0x102>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801425e:	4b0b      	ldr	r3, [pc, #44]	; (801428c <mem_malloc+0x1b8>)
 8014260:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014264:	490d      	ldr	r1, [pc, #52]	; (801429c <mem_malloc+0x1c8>)
 8014266:	480b      	ldr	r0, [pc, #44]	; (8014294 <mem_malloc+0x1c0>)
 8014268:	f00a f8be 	bl	801e3e8 <iprintf>
 801426c:	e7bc      	b.n	80141e8 <mem_malloc+0x114>
}
 801426e:	4770      	bx	lr
          while (cur->used && cur != ram_end) {
 8014270:	4623      	mov	r3, r4
 8014272:	e7ae      	b.n	80141d2 <mem_malloc+0xfe>
 8014274:	20021354 	.word	0x20021354
 8014278:	20021358 	.word	0x20021358
 801427c:	2002134c 	.word	0x2002134c
 8014280:	20021350 	.word	0x20021350
 8014284:	20035384 	.word	0x20035384
 8014288:	2002135c 	.word	0x2002135c
 801428c:	08039bb0 	.word	0x08039bb0
 8014290:	08039c2c 	.word	0x08039c2c
 8014294:	08023618 	.word	0x08023618
 8014298:	08039c5c 	.word	0x08039c5c
 801429c:	08039bfc 	.word	0x08039bfc

080142a0 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 80142a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a4:	2208      	movs	r2, #8
 80142a6:	b0a1      	sub	sp, #132	; 0x84
 80142a8:	f8df a100 	ldr.w	sl, [pc, #256]	; 80143ac <memp_overflow_check_all+0x10c>
 80142ac:	4b3a      	ldr	r3, [pc, #232]	; (8014398 <memp_overflow_check_all+0xf8>)
 80142ae:	4d3b      	ldr	r5, [pc, #236]	; (801439c <memp_overflow_check_all+0xfc>)
      LWIP_ASSERT(errstr, 0);
 80142b0:	4f3b      	ldr	r7, [pc, #236]	; (80143a0 <memp_overflow_check_all+0x100>)
 80142b2:	4e3c      	ldr	r6, [pc, #240]	; (80143a4 <memp_overflow_check_all+0x104>)
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp*)LWIP_MEM_ALIGN(memp_pools[i]->base);
 80142b4:	f103 0903 	add.w	r9, r3, #3
 80142b8:	f029 0903 	bic.w	r9, r9, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80142bc:	2a00      	cmp	r2, #0
 80142be:	d05f      	beq.n	8014380 <memp_overflow_check_all+0xe0>
 80142c0:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80142c4:	f04f 0b00 	mov.w	fp, #0
 80142c8:	f108 041b 	add.w	r4, r8, #27
 80142cc:	44c8      	add	r8, r9
 80142ce:	444c      	add	r4, r9
 80142d0:	f108 082b 	add.w	r8, r8, #43	; 0x2b
    if (m[k] != 0xcd) {
 80142d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      char errstr[128] = "detected memp overflow in pool ";
 80142d8:	46ec      	mov	ip, sp
 80142da:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 80143b0 <memp_overflow_check_all+0x110>
    if (m[k] != 0xcd) {
 80142de:	2bcd      	cmp	r3, #205	; 0xcd
 80142e0:	d017      	beq.n	8014312 <memp_overflow_check_all+0x72>
      char errstr[128] = "detected memp overflow in pool ";
 80142e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80142e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142ea:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80142ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80142f2:	2260      	movs	r2, #96	; 0x60
 80142f4:	2100      	movs	r1, #0
 80142f6:	a808      	add	r0, sp, #32
 80142f8:	f009 f8f6 	bl	801d4e8 <memset>
      strcat(errstr, desc->desc);
 80142fc:	6829      	ldr	r1, [r5, #0]
 80142fe:	f10d 001f 	add.w	r0, sp, #31
 8014302:	f00a fa3a 	bl	801e77a <strcpy>
      LWIP_ASSERT(errstr, 0);
 8014306:	463b      	mov	r3, r7
 8014308:	4669      	mov	r1, sp
 801430a:	228a      	movs	r2, #138	; 0x8a
 801430c:	4630      	mov	r0, r6
 801430e:	f00a f86b 	bl	801e3e8 <iprintf>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
 8014312:	45a0      	cmp	r8, r4
 8014314:	d1de      	bne.n	80142d4 <memp_overflow_check_all+0x34>
 8014316:	f109 040b 	add.w	r4, r9, #11
 801431a:	f109 081b 	add.w	r8, r9, #27
    if (m[k] != 0xcd) {
 801431e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      char errstr[128] = "detected memp underflow in pool ";
 8014322:	46ec      	mov	ip, sp
 8014324:	f8df e08c 	ldr.w	lr, [pc, #140]	; 80143b4 <memp_overflow_check_all+0x114>
    if (m[k] != 0xcd) {
 8014328:	2bcd      	cmp	r3, #205	; 0xcd
 801432a:	d01b      	beq.n	8014364 <memp_overflow_check_all+0xc4>
      char errstr[128] = "detected memp underflow in pool ";
 801432c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014330:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014334:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014338:	f8de e000 	ldr.w	lr, [lr]
 801433c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014340:	225f      	movs	r2, #95	; 0x5f
 8014342:	2100      	movs	r1, #0
 8014344:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8014348:	f88c e000 	strb.w	lr, [ip]
 801434c:	f009 f8cc 	bl	801d4e8 <memset>
      strcat(errstr, desc->desc);
 8014350:	6829      	ldr	r1, [r5, #0]
 8014352:	a808      	add	r0, sp, #32
 8014354:	f00a fa11 	bl	801e77a <strcpy>
      LWIP_ASSERT(errstr, 0);
 8014358:	463b      	mov	r3, r7
 801435a:	4669      	mov	r1, sp
 801435c:	22a5      	movs	r2, #165	; 0xa5
 801435e:	4630      	mov	r0, r6
 8014360:	f00a f842 	bl	801e3e8 <iprintf>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8014364:	45a0      	cmp	r8, r4
 8014366:	d1da      	bne.n	801431e <memp_overflow_check_all+0x7e>
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8014368:	f10b 0b01 	add.w	fp, fp, #1
      memp_overflow_check_element_overflow(p, memp_pools[i]);
      memp_overflow_check_element_underflow(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp*, ((u8_t*)p + MEMP_SIZE + memp_pools[i]->size + MEMP_SANITY_REGION_AFTER_ALIGNED));
 801436c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8014370:	896b      	ldrh	r3, [r5, #10]
 8014372:	fa1f fb8b 	uxth.w	fp, fp
      p = LWIP_ALIGNMENT_CAST(struct memp*, ((u8_t*)p + MEMP_SIZE + memp_pools[i]->size + MEMP_SANITY_REGION_AFTER_ALIGNED));
 8014376:	f108 022c 	add.w	r2, r8, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801437a:	455b      	cmp	r3, fp
      p = LWIP_ALIGNMENT_CAST(struct memp*, ((u8_t*)p + MEMP_SIZE + memp_pools[i]->size + MEMP_SANITY_REGION_AFTER_ALIGNED));
 801437c:	4491      	add	r9, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801437e:	d8a3      	bhi.n	80142c8 <memp_overflow_check_all+0x28>
  for (i = 0; i < MEMP_MAX; ++i) {
 8014380:	4b09      	ldr	r3, [pc, #36]	; (80143a8 <memp_overflow_check_all+0x108>)
 8014382:	4553      	cmp	r3, sl
 8014384:	d004      	beq.n	8014390 <memp_overflow_check_all+0xf0>
 8014386:	f85a 5b04 	ldr.w	r5, [sl], #4
 801438a:	68eb      	ldr	r3, [r5, #12]
 801438c:	896a      	ldrh	r2, [r5, #10]
 801438e:	e791      	b.n	80142b4 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 8014390:	b021      	add	sp, #132	; 0x84
 8014392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014396:	bf00      	nop
 8014398:	20029360 	.word	0x20029360
 801439c:	08039d94 	.word	0x08039d94
 80143a0:	08039e84 	.word	0x08039e84
 80143a4:	08023618 	.word	0x08023618
 80143a8:	08039ef4 	.word	0x08039ef4
 80143ac:	08039eb8 	.word	0x08039eb8
 80143b0:	080217f4 	.word	0x080217f4
 80143b4:	08021874 	.word	0x08021874

080143b8 <do_memp_malloc_pool_fn.isra.4>:

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
 80143b8:	b570      	push	{r4, r5, r6, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80143ba:	680c      	ldr	r4, [r1, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80143bc:	b1e4      	cbz	r4, 80143f8 <do_memp_malloc_pool_fn.isra.4+0x40>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80143be:	6826      	ldr	r6, [r4, #0]
 80143c0:	4605      	mov	r5, r0
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 80143c2:	2000      	movs	r0, #0
    *desc->tab = memp->next;
 80143c4:	600e      	str	r6, [r1, #0]
    memp->next = NULL;
 80143c6:	6020      	str	r0, [r4, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 80143c8:	e9c4 2301 	strd	r2, r3, [r4, #4]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80143cc:	07a3      	lsls	r3, r4, #30
 80143ce:	d10b      	bne.n	80143e8 <do_memp_malloc_pool_fn.isra.4+0x30>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80143d0:	682a      	ldr	r2, [r5, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80143d2:	f104 001c 	add.w	r0, r4, #28
    desc->stats->used++;
 80143d6:	8913      	ldrh	r3, [r2, #8]
    if (desc->stats->used > desc->stats->max) {
 80143d8:	8951      	ldrh	r1, [r2, #10]
    desc->stats->used++;
 80143da:	3301      	adds	r3, #1
 80143dc:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 80143de:	4299      	cmp	r1, r3
    desc->stats->used++;
 80143e0:	8113      	strh	r3, [r2, #8]
      desc->stats->max = desc->stats->used;
 80143e2:	bf38      	it	cc
 80143e4:	8153      	strhcc	r3, [r2, #10]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 80143e6:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80143e8:	4b06      	ldr	r3, [pc, #24]	; (8014404 <do_memp_malloc_pool_fn.isra.4+0x4c>)
 80143ea:	f240 1249 	movw	r2, #329	; 0x149
 80143ee:	4906      	ldr	r1, [pc, #24]	; (8014408 <do_memp_malloc_pool_fn.isra.4+0x50>)
 80143f0:	4806      	ldr	r0, [pc, #24]	; (801440c <do_memp_malloc_pool_fn.isra.4+0x54>)
 80143f2:	f009 fff9 	bl	801e3e8 <iprintf>
 80143f6:	e7eb      	b.n	80143d0 <do_memp_malloc_pool_fn.isra.4+0x18>
    desc->stats->err++;
 80143f8:	6802      	ldr	r2, [r0, #0]
 80143fa:	4620      	mov	r0, r4
 80143fc:	8893      	ldrh	r3, [r2, #4]
 80143fe:	3301      	adds	r3, #1
 8014400:	8093      	strh	r3, [r2, #4]
}
 8014402:	bd70      	pop	{r4, r5, r6, pc}
 8014404:	08039e84 	.word	0x08039e84
 8014408:	08039ce4 	.word	0x08039ce4
 801440c:	08023618 	.word	0x08023618

08014410 <do_memp_free_pool.isra.6>:
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014410:	0793      	lsls	r3, r2, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8014412:	b570      	push	{r4, r5, r6, lr}
 8014414:	4614      	mov	r4, r2
 8014416:	4606      	mov	r6, r0
 8014418:	460d      	mov	r5, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 801441a:	d122      	bne.n	8014462 <do_memp_free_pool.isra.6+0x52>
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 801441c:	6830      	ldr	r0, [r6, #0]
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 801441e:	f1a4 021c 	sub.w	r2, r4, #28
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014422:	6829      	ldr	r1, [r5, #0]
  desc->stats->used--;
 8014424:	8903      	ldrh	r3, [r0, #8]
  memp->next = *desc->tab;
 8014426:	680d      	ldr	r5, [r1, #0]
  desc->stats->used--;
 8014428:	3b01      	subs	r3, #1
 801442a:	8103      	strh	r3, [r0, #8]
  memp->next = *desc->tab;
 801442c:	f844 5c1c 	str.w	r5, [r4, #-28]
  *desc->tab = memp;
 8014430:	600a      	str	r2, [r1, #0]
  if (t != NULL) {
 8014432:	b162      	cbz	r2, 801444e <do_memp_free_pool.isra.6+0x3e>
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8014434:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8014438:	b14a      	cbz	r2, 801444e <do_memp_free_pool.isra.6+0x3e>
 801443a:	b143      	cbz	r3, 801444e <do_memp_free_pool.isra.6+0x3e>
      if (t == h) {
 801443c:	429a      	cmp	r2, r3
 801443e:	d007      	beq.n	8014450 <do_memp_free_pool.isra.6+0x40>
      h = ((h->next != NULL) ? h->next->next : NULL)) {
 8014440:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8014442:	6812      	ldr	r2, [r2, #0]
      h = ((h->next != NULL) ? h->next->next : NULL)) {
 8014444:	2b00      	cmp	r3, #0
 8014446:	d0f7      	beq.n	8014438 <do_memp_free_pool.isra.6+0x28>
 8014448:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801444a:	2a00      	cmp	r2, #0
 801444c:	d1f5      	bne.n	801443a <do_memp_free_pool.isra.6+0x2a>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801444e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8014450:	4b08      	ldr	r3, [pc, #32]	; (8014474 <do_memp_free_pool.isra.6+0x64>)
 8014452:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014456:	4908      	ldr	r1, [pc, #32]	; (8014478 <do_memp_free_pool.isra.6+0x68>)
 8014458:	4808      	ldr	r0, [pc, #32]	; (801447c <do_memp_free_pool.isra.6+0x6c>)
}
 801445a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801445e:	f009 bfc3 	b.w	801e3e8 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8014462:	4b04      	ldr	r3, [pc, #16]	; (8014474 <do_memp_free_pool.isra.6+0x64>)
 8014464:	f240 129d 	movw	r2, #413	; 0x19d
 8014468:	4905      	ldr	r1, [pc, #20]	; (8014480 <do_memp_free_pool.isra.6+0x70>)
 801446a:	4804      	ldr	r0, [pc, #16]	; (801447c <do_memp_free_pool.isra.6+0x6c>)
 801446c:	f009 ffbc 	bl	801e3e8 <iprintf>
 8014470:	e7d4      	b.n	801441c <do_memp_free_pool.isra.6+0xc>
 8014472:	bf00      	nop
 8014474:	08039e84 	.word	0x08039e84
 8014478:	08039cd8 	.word	0x08039cd8
 801447c:	08023618 	.word	0x08023618
 8014480:	08039cb8 	.word	0x08039cb8

08014484 <memp_init_pool>:
{
 8014484:	b4f0      	push	{r4, r5, r6, r7}
  *desc->tab = NULL;
 8014486:	2600      	movs	r6, #0
  for (i = 0; i < desc->num; ++i) {
 8014488:	8947      	ldrh	r7, [r0, #10]
  *desc->tab = NULL;
 801448a:	e9d0 3403 	ldrd	r3, r4, [r0, #12]
 801448e:	6026      	str	r6, [r4, #0]
  for (i = 0; i < desc->num; ++i) {
 8014490:	b1e7      	cbz	r7, 80144cc <memp_init_pool+0x48>
 8014492:	3303      	adds	r3, #3
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
 8014494:	f04f 32cd 	mov.w	r2, #3452816845	; 0xcdcdcdcd
  for (i = 0; i < desc->num; ++i) {
 8014498:	4635      	mov	r5, r6
 801449a:	f023 0303 	bic.w	r3, r3, #3
 801449e:	e001      	b.n	80144a4 <memp_init_pool+0x20>
 80144a0:	6904      	ldr	r4, [r0, #16]
 80144a2:	6826      	ldr	r6, [r4, #0]
    memp->next = *desc->tab;
 80144a4:	601e      	str	r6, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 80144a6:	3501      	adds	r5, #1
    *desc->tab = memp;
 80144a8:	6023      	str	r3, [r4, #0]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
 80144aa:	60da      	str	r2, [r3, #12]
 80144ac:	611a      	str	r2, [r3, #16]
 80144ae:	615a      	str	r2, [r3, #20]
 80144b0:	619a      	str	r2, [r3, #24]
  m = (u8_t*)p + MEMP_SIZE + desc->size;
 80144b2:	8901      	ldrh	r1, [r0, #8]
 80144b4:	311c      	adds	r1, #28
 80144b6:	185c      	adds	r4, r3, r1
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
 80144b8:	505a      	str	r2, [r3, r1]
 80144ba:	6062      	str	r2, [r4, #4]
 80144bc:	60a2      	str	r2, [r4, #8]
 80144be:	60e2      	str	r2, [r4, #12]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80144c0:	8901      	ldrh	r1, [r0, #8]
  for (i = 0; i < desc->num; ++i) {
 80144c2:	8947      	ldrh	r7, [r0, #10]
      + MEMP_SANITY_REGION_AFTER_ALIGNED
 80144c4:	312c      	adds	r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 80144c6:	42af      	cmp	r7, r5
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80144c8:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 80144ca:	dce9      	bgt.n	80144a0 <memp_init_pool+0x1c>
  desc->stats->name  = desc->desc;
 80144cc:	e9d0 2300 	ldrd	r2, r3, [r0]
  desc->stats->avail = desc->num;
 80144d0:	80df      	strh	r7, [r3, #6]
  desc->stats->name  = desc->desc;
 80144d2:	601a      	str	r2, [r3, #0]
}
 80144d4:	bcf0      	pop	{r4, r5, r6, r7}
 80144d6:	4770      	bx	lr

080144d8 <memp_init>:
{
 80144d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144da:	4c0a      	ldr	r4, [pc, #40]	; (8014504 <memp_init+0x2c>)
 80144dc:	4e0a      	ldr	r6, [pc, #40]	; (8014508 <memp_init+0x30>)
 80144de:	f104 0740 	add.w	r7, r4, #64	; 0x40
 80144e2:	4d0a      	ldr	r5, [pc, #40]	; (801450c <memp_init+0x34>)
 80144e4:	e001      	b.n	80144ea <memp_init+0x12>
 80144e6:	f856 5b04 	ldr.w	r5, [r6], #4
    memp_init_pool(memp_pools[i]);
 80144ea:	4628      	mov	r0, r5
 80144ec:	f7ff ffca 	bl	8014484 <memp_init_pool>
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80144f0:	686b      	ldr	r3, [r5, #4]
 80144f2:	f844 3b04 	str.w	r3, [r4], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80144f6:	42bc      	cmp	r4, r7
 80144f8:	d1f5      	bne.n	80144e6 <memp_init+0xe>
}
 80144fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memp_overflow_check_all();
 80144fe:	f7ff becf 	b.w	80142a0 <memp_overflow_check_all>
 8014502:	bf00      	nop
 8014504:	2003543c 	.word	0x2003543c
 8014508:	08039eb8 	.word	0x08039eb8
 801450c:	08039d94 	.word	0x08039d94

08014510 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014510:	280f      	cmp	r0, #15
{
 8014512:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014514:	d80f      	bhi.n	8014536 <memp_malloc_fn+0x26>
 8014516:	460d      	mov	r5, r1
 8014518:	4616      	mov	r6, r2
 801451a:	4604      	mov	r4, r0
  memp_overflow_check_all();
 801451c:	f7ff fec0 	bl	80142a0 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8014520:	4909      	ldr	r1, [pc, #36]	; (8014548 <memp_malloc_fn+0x38>)
 8014522:	4633      	mov	r3, r6
 8014524:	462a      	mov	r2, r5
 8014526:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
}
 801452a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801452e:	6901      	ldr	r1, [r0, #16]
 8014530:	3004      	adds	r0, #4
 8014532:	f7ff bf41 	b.w	80143b8 <do_memp_malloc_pool_fn.isra.4>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014536:	4b05      	ldr	r3, [pc, #20]	; (801454c <memp_malloc_fn+0x3c>)
 8014538:	f240 1287 	movw	r2, #391	; 0x187
 801453c:	4904      	ldr	r1, [pc, #16]	; (8014550 <memp_malloc_fn+0x40>)
 801453e:	4805      	ldr	r0, [pc, #20]	; (8014554 <memp_malloc_fn+0x44>)
 8014540:	f009 ff52 	bl	801e3e8 <iprintf>
}
 8014544:	2000      	movs	r0, #0
 8014546:	bd70      	pop	{r4, r5, r6, pc}
 8014548:	08039eb4 	.word	0x08039eb4
 801454c:	08039e84 	.word	0x08039e84
 8014550:	08039e64 	.word	0x08039e64
 8014554:	08023618 	.word	0x08023618

08014558 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014558:	280f      	cmp	r0, #15
 801455a:	d811      	bhi.n	8014580 <memp_free+0x28>

  if (mem == NULL) {
 801455c:	b179      	cbz	r1, 801457e <memp_free+0x26>
{
 801455e:	b570      	push	{r4, r5, r6, lr}
 8014560:	460d      	mov	r5, r1
 8014562:	4604      	mov	r4, r0
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 8014564:	f7ff fe9c 	bl	80142a0 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014568:	4b09      	ldr	r3, [pc, #36]	; (8014590 <memp_free+0x38>)
 801456a:	462a      	mov	r2, r5
 801456c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8014574:	f100 0110 	add.w	r1, r0, #16
 8014578:	3004      	adds	r0, #4
 801457a:	f7ff bf49 	b.w	8014410 <do_memp_free_pool.isra.6>
 801457e:	4770      	bx	lr
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014580:	4b04      	ldr	r3, [pc, #16]	; (8014594 <memp_free+0x3c>)
 8014582:	f240 12db 	movw	r2, #475	; 0x1db
 8014586:	4904      	ldr	r1, [pc, #16]	; (8014598 <memp_free+0x40>)
 8014588:	4804      	ldr	r0, [pc, #16]	; (801459c <memp_free+0x44>)
 801458a:	f009 bf2d 	b.w	801e3e8 <iprintf>
 801458e:	bf00      	nop
 8014590:	08039eb4 	.word	0x08039eb4
 8014594:	08039e84 	.word	0x08039e84
 8014598:	08039e48 	.word	0x08039e48
 801459c:	08023618 	.word	0x08023618

080145a0 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80145a0:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
netif_issue_reports(struct netif* netif, u8_t report_type)
 80145a4:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80145a6:	071b      	lsls	r3, r3, #28
 80145a8:	d400      	bmi.n	80145ac <netif_issue_reports.part.0+0xc>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80145aa:	4770      	bx	lr
      etharp_gratuitous(netif);
 80145ac:	3104      	adds	r1, #4
 80145ae:	f007 b99d 	b.w	801b8ec <etharp_request>
 80145b2:	bf00      	nop

080145b4 <netif_init>:
}
 80145b4:	4770      	bx	lr
 80145b6:	bf00      	nop

080145b8 <netif_set_ipaddr>:
{
 80145b8:	b570      	push	{r4, r5, r6, lr}
 80145ba:	6842      	ldr	r2, [r0, #4]
 80145bc:	b082      	sub	sp, #8
 80145be:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80145c0:	460d      	mov	r5, r1
 80145c2:	b1e1      	cbz	r1, 80145fe <netif_set_ipaddr+0x46>
 80145c4:	680b      	ldr	r3, [r1, #0]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80145c6:	429a      	cmp	r2, r3
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80145c8:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80145ca:	d016      	beq.n	80145fa <netif_set_ipaddr+0x42>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80145cc:	1d06      	adds	r6, r0, #4
 80145ce:	a901      	add	r1, sp, #4
 80145d0:	4630      	mov	r0, r6
 80145d2:	f002 f84d 	bl	8016670 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80145d6:	a901      	add	r1, sp, #4
 80145d8:	4630      	mov	r0, r6
 80145da:	f005 f931 	bl	8019840 <udp_netif_ip_addr_changed>
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80145de:	a901      	add	r1, sp, #4
 80145e0:	4630      	mov	r0, r6
 80145e2:	f000 fe59 	bl	8015298 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80145e6:	682b      	ldr	r3, [r5, #0]
 80145e8:	6063      	str	r3, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80145ea:	b113      	cbz	r3, 80145f2 <netif_set_ipaddr+0x3a>
 80145ec:	4620      	mov	r0, r4
 80145ee:	f7ff ffd7 	bl	80145a0 <netif_issue_reports.part.0>
    NETIF_STATUS_CALLBACK(netif);
 80145f2:	69e3      	ldr	r3, [r4, #28]
 80145f4:	b10b      	cbz	r3, 80145fa <netif_set_ipaddr+0x42>
 80145f6:	4620      	mov	r0, r4
 80145f8:	4798      	blx	r3
}
 80145fa:	b002      	add	sp, #8
 80145fc:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80145fe:	4b0a      	ldr	r3, [pc, #40]	; (8014628 <netif_set_ipaddr+0x70>)
 8014600:	681b      	ldr	r3, [r3, #0]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8014602:	4293      	cmp	r3, r2
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8014604:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8014606:	d0f8      	beq.n	80145fa <netif_set_ipaddr+0x42>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8014608:	1d06      	adds	r6, r0, #4
 801460a:	a901      	add	r1, sp, #4
 801460c:	4630      	mov	r0, r6
 801460e:	f002 f82f 	bl	8016670 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8014612:	a901      	add	r1, sp, #4
 8014614:	4630      	mov	r0, r6
 8014616:	f005 f913 	bl	8019840 <udp_netif_ip_addr_changed>
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801461a:	a901      	add	r1, sp, #4
 801461c:	4630      	mov	r0, r6
 801461e:	f000 fe3b 	bl	8015298 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014622:	6065      	str	r5, [r4, #4]
 8014624:	e7e5      	b.n	80145f2 <netif_set_ipaddr+0x3a>
 8014626:	bf00      	nop
 8014628:	0803bb0c 	.word	0x0803bb0c

0801462c <netif_set_addr>:
{
 801462c:	b570      	push	{r4, r5, r6, lr}
  if (ip4_addr_isany(ipaddr)) {
 801462e:	b159      	cbz	r1, 8014648 <netif_set_addr+0x1c>
 8014630:	680c      	ldr	r4, [r1, #0]
 8014632:	b14c      	cbz	r4, 8014648 <netif_set_addr+0x1c>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014634:	b102      	cbz	r2, 8014638 <netif_set_addr+0xc>
 8014636:	6812      	ldr	r2, [r2, #0]
 8014638:	6082      	str	r2, [r0, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801463a:	b103      	cbz	r3, 801463e <netif_set_addr+0x12>
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	60c3      	str	r3, [r0, #12]
}
 8014640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8014644:	f7ff bfb8 	b.w	80145b8 <netif_set_ipaddr>
 8014648:	4615      	mov	r5, r2
 801464a:	461c      	mov	r4, r3
 801464c:	4606      	mov	r6, r0
    netif_set_ipaddr(netif, ipaddr);
 801464e:	f7ff ffb3 	bl	80145b8 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014652:	b105      	cbz	r5, 8014656 <netif_set_addr+0x2a>
 8014654:	682d      	ldr	r5, [r5, #0]
 8014656:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014658:	b104      	cbz	r4, 801465c <netif_set_addr+0x30>
 801465a:	6824      	ldr	r4, [r4, #0]
 801465c:	60f4      	str	r4, [r6, #12]
}
 801465e:	bd70      	pop	{r4, r5, r6, pc}

08014660 <netif_add>:
{
 8014660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014664:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014668:	4604      	mov	r4, r0
 801466a:	4689      	mov	r9, r1
 801466c:	4692      	mov	sl, r2
 801466e:	469b      	mov	fp, r3
 8014670:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014672:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  LWIP_ASSERT("No init function given", init != NULL);
 8014674:	f1b8 0f00 	cmp.w	r8, #0
 8014678:	d026      	beq.n	80146c8 <netif_add+0x68>
  netif->num = netif_num++;
 801467a:	f8df c070 	ldr.w	ip, [pc, #112]	; 80146ec <netif_add+0x8c>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801467e:	2500      	movs	r5, #0
  netif->state = state;
 8014680:	6267      	str	r7, [r4, #36]	; 0x24
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8014682:	2703      	movs	r7, #3
  netif->num = netif_num++;
 8014684:	f89c 0000 	ldrb.w	r0, [ip]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014688:	465b      	mov	r3, fp
  netif->input = input;
 801468a:	6126      	str	r6, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801468c:	4652      	mov	r2, sl
  netif->num = netif_num++;
 801468e:	1c46      	adds	r6, r0, #1
 8014690:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014694:	4649      	mov	r1, r9
 8014696:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014698:	6065      	str	r5, [r4, #4]
  netif->flags = 0;
 801469a:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801469e:	62a5      	str	r5, [r4, #40]	; 0x28
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80146a0:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
  netif->num = netif_num++;
 80146a4:	f88c 6000 	strb.w	r6, [ip]
  ip_addr_set_zero_ip4(&netif->gw);
 80146a8:	e9c4 5502 	strd	r5, r5, [r4, #8]
  netif->link_callback = NULL;
 80146ac:	e9c4 5507 	strd	r5, r5, [r4, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80146b0:	f7ff ffbc 	bl	801462c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80146b4:	4620      	mov	r0, r4
 80146b6:	47c0      	blx	r8
 80146b8:	b968      	cbnz	r0, 80146d6 <netif_add+0x76>
  netif->next = netif_list;
 80146ba:	4b08      	ldr	r3, [pc, #32]	; (80146dc <netif_add+0x7c>)
  return netif;
 80146bc:	4620      	mov	r0, r4
  netif->next = netif_list;
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80146c2:	601c      	str	r4, [r3, #0]
}
 80146c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 80146c8:	4b05      	ldr	r3, [pc, #20]	; (80146e0 <netif_add+0x80>)
 80146ca:	22fb      	movs	r2, #251	; 0xfb
 80146cc:	4905      	ldr	r1, [pc, #20]	; (80146e4 <netif_add+0x84>)
 80146ce:	4806      	ldr	r0, [pc, #24]	; (80146e8 <netif_add+0x88>)
 80146d0:	f009 fe8a 	bl	801e3e8 <iprintf>
 80146d4:	e7d1      	b.n	801467a <netif_add+0x1a>
    return NULL;
 80146d6:	4628      	mov	r0, r5
 80146d8:	e7f4      	b.n	80146c4 <netif_add+0x64>
 80146da:	bf00      	nop
 80146dc:	20035378 	.word	0x20035378
 80146e0:	08039fa8 	.word	0x08039fa8
 80146e4:	08039fdc 	.word	0x08039fdc
 80146e8:	08023618 	.word	0x08023618
 80146ec:	200214a0 	.word	0x200214a0

080146f0 <netif_set_default>:
  netif_default = netif;
 80146f0:	4b01      	ldr	r3, [pc, #4]	; (80146f8 <netif_set_default+0x8>)
 80146f2:	6018      	str	r0, [r3, #0]
}
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop
 80146f8:	2003537c 	.word	0x2003537c

080146fc <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80146fc:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 8014700:	07d1      	lsls	r1, r2, #31
 8014702:	d40f      	bmi.n	8014724 <netif_set_up+0x28>
    netif->flags |= NETIF_FLAG_UP;
 8014704:	f042 0201 	orr.w	r2, r2, #1
    NETIF_STATUS_CALLBACK(netif);
 8014708:	69c3      	ldr	r3, [r0, #28]
{
 801470a:	b510      	push	{r4, lr}
 801470c:	4604      	mov	r4, r0
    netif->flags |= NETIF_FLAG_UP;
 801470e:	f880 2037 	strb.w	r2, [r0, #55]	; 0x37
    NETIF_STATUS_CALLBACK(netif);
 8014712:	b113      	cbz	r3, 801471a <netif_set_up+0x1e>
 8014714:	4798      	blx	r3
 8014716:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 801471a:	0753      	lsls	r3, r2, #29
 801471c:	d501      	bpl.n	8014722 <netif_set_up+0x26>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801471e:	6863      	ldr	r3, [r4, #4]
 8014720:	b90b      	cbnz	r3, 8014726 <netif_set_up+0x2a>
}
 8014722:	bd10      	pop	{r4, pc}
 8014724:	4770      	bx	lr
 8014726:	4620      	mov	r0, r4
 8014728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801472c:	f7ff bf38 	b.w	80145a0 <netif_issue_reports.part.0>

08014730 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8014730:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 8014734:	07d1      	lsls	r1, r2, #31
 8014736:	d50e      	bpl.n	8014756 <netif_set_down+0x26>
    netif->flags &= ~NETIF_FLAG_UP;
 8014738:	f022 0301 	bic.w	r3, r2, #1
{
 801473c:	b510      	push	{r4, lr}
    netif->flags &= ~NETIF_FLAG_UP;
 801473e:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014742:	0713      	lsls	r3, r2, #28
 8014744:	4604      	mov	r4, r0
 8014746:	d407      	bmi.n	8014758 <netif_set_down+0x28>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 8014748:	69e3      	ldr	r3, [r4, #28]
 801474a:	b11b      	cbz	r3, 8014754 <netif_set_down+0x24>
 801474c:	4620      	mov	r0, r4
  }
}
 801474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 8014752:	4718      	bx	r3
}
 8014754:	bd10      	pop	{r4, pc}
 8014756:	4770      	bx	lr
      etharp_cleanup_netif(netif);
 8014758:	f006 fe2c 	bl	801b3b4 <etharp_cleanup_netif>
 801475c:	e7f4      	b.n	8014748 <netif_set_down+0x18>
 801475e:	bf00      	nop

08014760 <netif_set_status_callback>:
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  if (netif) {
 8014760:	b100      	cbz	r0, 8014764 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 8014762:	61c1      	str	r1, [r0, #28]
  }
}
 8014764:	4770      	bx	lr
 8014766:	bf00      	nop

08014768 <netif_set_link_up>:
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8014768:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 801476c:	0751      	lsls	r1, r2, #29
 801476e:	d500      	bpl.n	8014772 <netif_set_link_up+0xa>
 8014770:	4770      	bx	lr
    netif->flags |= NETIF_FLAG_LINK_UP;
 8014772:	f042 0204 	orr.w	r2, r2, #4
{
 8014776:	b510      	push	{r4, lr}
 8014778:	4604      	mov	r4, r0
    netif->flags |= NETIF_FLAG_LINK_UP;
 801477a:	f880 2037 	strb.w	r2, [r0, #55]	; 0x37

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801477e:	f006 f8e3 	bl	801a948 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8014782:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8014786:	07db      	lsls	r3, r3, #31
 8014788:	d504      	bpl.n	8014794 <netif_set_link_up+0x2c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801478a:	6863      	ldr	r3, [r4, #4]
 801478c:	b113      	cbz	r3, 8014794 <netif_set_link_up+0x2c>
 801478e:	4620      	mov	r0, r4
 8014790:	f7ff ff06 	bl	80145a0 <netif_issue_reports.part.0>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
    }
    NETIF_LINK_CALLBACK(netif);
 8014794:	6a23      	ldr	r3, [r4, #32]
 8014796:	b11b      	cbz	r3, 80147a0 <netif_set_link_up+0x38>
 8014798:	4620      	mov	r0, r4
  }
}
 801479a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801479e:	4718      	bx	r3
}
 80147a0:	bd10      	pop	{r4, pc}
 80147a2:	bf00      	nop

080147a4 <netif_set_link_down>:
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80147a4:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 80147a8:	0759      	lsls	r1, r3, #29
 80147aa:	d506      	bpl.n	80147ba <netif_set_link_down+0x16>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 80147ac:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 80147b0:	6a01      	ldr	r1, [r0, #32]
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 80147b2:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
    NETIF_LINK_CALLBACK(netif);
 80147b6:	b101      	cbz	r1, 80147ba <netif_set_link_down+0x16>
 80147b8:	4708      	bx	r1
  }
}
 80147ba:	4770      	bx	lr

080147bc <netif_set_link_callback>:
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  if (netif) {
 80147bc:	b100      	cbz	r0, 80147c0 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80147be:	6201      	str	r1, [r0, #32]
  }
}
 80147c0:	4770      	bx	lr
 80147c2:	bf00      	nop

080147c4 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80147c4:	4908      	ldr	r1, [pc, #32]	; (80147e8 <pbuf_free_ooseq_callback+0x24>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80147c6:	2200      	movs	r2, #0
 80147c8:	4b08      	ldr	r3, [pc, #32]	; (80147ec <pbuf_free_ooseq_callback+0x28>)
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80147ca:	b510      	push	{r4, lr}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80147cc:	680c      	ldr	r4, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80147ce:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80147d0:	b914      	cbnz	r4, 80147d8 <pbuf_free_ooseq_callback+0x14>
 80147d2:	e008      	b.n	80147e6 <pbuf_free_ooseq_callback+0x22>
 80147d4:	68e4      	ldr	r4, [r4, #12]
 80147d6:	b134      	cbz	r4, 80147e6 <pbuf_free_ooseq_callback+0x22>
    if (NULL != pcb->ooseq) {
 80147d8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80147da:	2800      	cmp	r0, #0
 80147dc:	d0fa      	beq.n	80147d4 <pbuf_free_ooseq_callback+0x10>
      tcp_segs_free(pcb->ooseq);
 80147de:	f001 f8cb 	bl	8015978 <tcp_segs_free>
      pcb->ooseq = NULL;
 80147e2:	2300      	movs	r3, #0
 80147e4:	6723      	str	r3, [r4, #112]	; 0x70
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 80147e6:	bd10      	pop	{r4, pc}
 80147e8:	20035494 	.word	0x20035494
 80147ec:	20035380 	.word	0x20035380

080147f0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80147f0:	b570      	push	{r4, r5, r6, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80147f2:	4604      	mov	r4, r0
 80147f4:	2800      	cmp	r0, #0
 80147f6:	d03e      	beq.n	8014876 <pbuf_header_impl+0x86>
  if ((header_size_increment == 0) || (p == NULL)) {
 80147f8:	2900      	cmp	r1, #0
 80147fa:	d018      	beq.n	801482e <pbuf_header_impl+0x3e>
 80147fc:	b28d      	uxth	r5, r1
    return 0;
  }

  if (header_size_increment < 0) {
 80147fe:	db20      	blt.n	8014842 <pbuf_header_impl+0x52>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8014800:	4628      	mov	r0, r5
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8014802:	7b23      	ldrb	r3, [r4, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8014804:	6866      	ldr	r6, [r4, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8014806:	b1a3      	cbz	r3, 8014832 <pbuf_header_impl+0x42>
 8014808:	2b03      	cmp	r3, #3
 801480a:	d012      	beq.n	8014832 <pbuf_header_impl+0x42>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801480c:	3b01      	subs	r3, #1
 801480e:	2b01      	cmp	r3, #1
 8014810:	d828      	bhi.n	8014864 <pbuf_header_impl+0x74>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8014812:	2900      	cmp	r1, #0
 8014814:	db3a      	blt.n	801488c <pbuf_header_impl+0x9c>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 8014816:	07d3      	lsls	r3, r2, #31
 8014818:	d536      	bpl.n	8014888 <pbuf_header_impl+0x98>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801481a:	1a71      	subs	r1, r6, r1
 801481c:	8963      	ldrh	r3, [r4, #10]
 801481e:	6061      	str	r1, [r4, #4]
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  p->tot_len += header_size_increment;
 8014820:	8922      	ldrh	r2, [r4, #8]
  p->len += header_size_increment;
 8014822:	442b      	add	r3, r5

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8014824:	2000      	movs	r0, #0
  p->tot_len += header_size_increment;
 8014826:	4415      	add	r5, r2
  p->len += header_size_increment;
 8014828:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 801482a:	8125      	strh	r5, [r4, #8]
}
 801482c:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 801482e:	4608      	mov	r0, r1
}
 8014830:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 8014832:	1a71      	subs	r1, r6, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014834:	f104 0310 	add.w	r3, r4, #16
 8014838:	4299      	cmp	r1, r3
    p->payload = (u8_t *)p->payload - header_size_increment;
 801483a:	6061      	str	r1, [r4, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801483c:	d30f      	bcc.n	801485e <pbuf_header_impl+0x6e>
 801483e:	8963      	ldrh	r3, [r4, #10]
 8014840:	e7ee      	b.n	8014820 <pbuf_header_impl+0x30>
    increment_magnitude = (u16_t)-header_size_increment;
 8014842:	4268      	negs	r0, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014844:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8014846:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014848:	4283      	cmp	r3, r0
 801484a:	d2da      	bcs.n	8014802 <pbuf_header_impl+0x12>
 801484c:	4b12      	ldr	r3, [pc, #72]	; (8014898 <pbuf_header_impl+0xa8>)
 801484e:	f240 2247 	movw	r2, #583	; 0x247
 8014852:	4912      	ldr	r1, [pc, #72]	; (801489c <pbuf_header_impl+0xac>)
 8014854:	4812      	ldr	r0, [pc, #72]	; (80148a0 <pbuf_header_impl+0xb0>)
 8014856:	f009 fdc7 	bl	801e3e8 <iprintf>
 801485a:	2001      	movs	r0, #1
}
 801485c:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 801485e:	6066      	str	r6, [r4, #4]
      return 1;
 8014860:	2001      	movs	r0, #1
}
 8014862:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("bad pbuf type", 0);
 8014864:	4b0c      	ldr	r3, [pc, #48]	; (8014898 <pbuf_header_impl+0xa8>)
 8014866:	f240 2277 	movw	r2, #631	; 0x277
 801486a:	490e      	ldr	r1, [pc, #56]	; (80148a4 <pbuf_header_impl+0xb4>)
 801486c:	480c      	ldr	r0, [pc, #48]	; (80148a0 <pbuf_header_impl+0xb0>)
 801486e:	f009 fdbb 	bl	801e3e8 <iprintf>
    return 1;
 8014872:	2001      	movs	r0, #1
}
 8014874:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8014876:	4b08      	ldr	r3, [pc, #32]	; (8014898 <pbuf_header_impl+0xa8>)
 8014878:	f240 223f 	movw	r2, #575	; 0x23f
 801487c:	490a      	ldr	r1, [pc, #40]	; (80148a8 <pbuf_header_impl+0xb8>)
 801487e:	4808      	ldr	r0, [pc, #32]	; (80148a0 <pbuf_header_impl+0xb0>)
 8014880:	f009 fdb2 	bl	801e3e8 <iprintf>
    return 0;
 8014884:	4620      	mov	r0, r4
}
 8014886:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8014888:	2001      	movs	r0, #1
}
 801488a:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801488c:	8963      	ldrh	r3, [r4, #10]
 801488e:	4283      	cmp	r3, r0
 8014890:	d3fa      	bcc.n	8014888 <pbuf_header_impl+0x98>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8014892:	1a71      	subs	r1, r6, r1
 8014894:	6061      	str	r1, [r4, #4]
 8014896:	e7c3      	b.n	8014820 <pbuf_header_impl+0x30>
 8014898:	0803a278 	.word	0x0803a278
 801489c:	0803a2a8 	.word	0x0803a2a8
 80148a0:	08023618 	.word	0x08023618
 80148a4:	0803a2c8 	.word	0x0803a2c8
 80148a8:	0803b3ac 	.word	0x0803b3ac

080148ac <pbuf_pool_is_empty.part.1>:
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80148ac:	2200      	movs	r2, #0
 80148ae:	4805      	ldr	r0, [pc, #20]	; (80148c4 <pbuf_pool_is_empty.part.1+0x18>)
pbuf_pool_is_empty(void)
 80148b0:	b508      	push	{r3, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80148b2:	4611      	mov	r1, r2
 80148b4:	f7fd fb0a 	bl	8011ecc <tcpip_callback_with_block>
 80148b8:	b110      	cbz	r0, 80148c0 <pbuf_pool_is_empty.part.1+0x14>
 80148ba:	4b03      	ldr	r3, [pc, #12]	; (80148c8 <pbuf_pool_is_empty.part.1+0x1c>)
 80148bc:	2200      	movs	r2, #0
 80148be:	701a      	strb	r2, [r3, #0]
}
 80148c0:	bd08      	pop	{r3, pc}
 80148c2:	bf00      	nop
 80148c4:	080147c5 	.word	0x080147c5
 80148c8:	20035380 	.word	0x20035380

080148cc <pbuf_alloced_custom>:
{
 80148cc:	b570      	push	{r4, r5, r6, lr}
 80148ce:	9c04      	ldr	r4, [sp, #16]
 80148d0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  switch (l) {
 80148d4:	2804      	cmp	r0, #4
 80148d6:	d81e      	bhi.n	8014916 <pbuf_alloced_custom+0x4a>
 80148d8:	e8df f000 	tbb	[pc, r0]
 80148dc:	0319151b 	.word	0x0319151b
 80148e0:	03          	.byte	0x03
 80148e1:	00          	.byte	0x00
    break;
 80148e2:	2000      	movs	r0, #0
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80148e4:	180e      	adds	r6, r1, r0
 80148e6:	42ae      	cmp	r6, r5
 80148e8:	d81e      	bhi.n	8014928 <pbuf_alloced_custom+0x5c>
  p->pbuf.next = NULL;
 80148ea:	2500      	movs	r5, #0
 80148ec:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 80148ee:	b164      	cbz	r4, 801490a <pbuf_alloced_custom+0x3e>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80148f0:	4404      	add	r4, r0
 80148f2:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80148f4:	2502      	movs	r5, #2
  p->pbuf.ref = 1;
 80148f6:	2401      	movs	r4, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 80148f8:	8119      	strh	r1, [r3, #8]
  return &p->pbuf;
 80148fa:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 80148fc:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 80148fe:	731a      	strb	r2, [r3, #12]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8014900:	735d      	strb	r5, [r3, #13]
  p->pbuf.ref = 1;
 8014902:	81dc      	strh	r4, [r3, #14]
}
 8014904:	bd70      	pop	{r4, r5, r6, pc}
  switch (l) {
 8014906:	2024      	movs	r0, #36	; 0x24
 8014908:	e7ec      	b.n	80148e4 <pbuf_alloced_custom+0x18>
    p->pbuf.payload = NULL;
 801490a:	605c      	str	r4, [r3, #4]
 801490c:	e7f2      	b.n	80148f4 <pbuf_alloced_custom+0x28>
  switch (l) {
 801490e:	2010      	movs	r0, #16
 8014910:	e7e8      	b.n	80148e4 <pbuf_alloced_custom+0x18>
 8014912:	2038      	movs	r0, #56	; 0x38
 8014914:	e7e6      	b.n	80148e4 <pbuf_alloced_custom+0x18>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8014916:	4b05      	ldr	r3, [pc, #20]	; (801492c <pbuf_alloced_custom+0x60>)
 8014918:	f240 12c5 	movw	r2, #453	; 0x1c5
 801491c:	4904      	ldr	r1, [pc, #16]	; (8014930 <pbuf_alloced_custom+0x64>)
 801491e:	4805      	ldr	r0, [pc, #20]	; (8014934 <pbuf_alloced_custom+0x68>)
 8014920:	f009 fd62 	bl	801e3e8 <iprintf>
    return NULL;
 8014924:	2000      	movs	r0, #0
}
 8014926:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8014928:	2000      	movs	r0, #0
}
 801492a:	bd70      	pop	{r4, r5, r6, pc}
 801492c:	0803a278 	.word	0x0803a278
 8014930:	0803a0a4 	.word	0x0803a0a4
 8014934:	08023618 	.word	0x08023618

08014938 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8014938:	2200      	movs	r2, #0
 801493a:	f7ff bf59 	b.w	80147f0 <pbuf_header_impl>
 801493e:	bf00      	nop

08014940 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8014940:	2201      	movs	r2, #1
 8014942:	f7ff bf55 	b.w	80147f0 <pbuf_header_impl>
 8014946:	bf00      	nop

08014948 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801494c:	4604      	mov	r4, r0
 801494e:	2800      	cmp	r0, #0
 8014950:	d051      	beq.n	80149f6 <pbuf_free+0xae>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8014952:	7b03      	ldrb	r3, [r0, #12]
 8014954:	2b03      	cmp	r3, #3
 8014956:	d846      	bhi.n	80149e6 <pbuf_free+0x9e>
{
 8014958:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801495a:	4f2c      	ldr	r7, [pc, #176]	; (8014a0c <pbuf_free+0xc4>)
 801495c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8014a20 <pbuf_free+0xd8>
 8014960:	4e2b      	ldr	r6, [pc, #172]	; (8014a10 <pbuf_free+0xc8>)
 8014962:	e008      	b.n	8014976 <pbuf_free+0x2e>
      type = p->type;
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014964:	6923      	ldr	r3, [r4, #16]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d034      	beq.n	80149d4 <pbuf_free+0x8c>
        pc->custom_free_function(p);
 801496a:	4620      	mov	r0, r4
 801496c:	4798      	blx	r3
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
        }
      }
      count++;
 801496e:	3501      	adds	r5, #1
  while (p != NULL) {
 8014970:	464c      	mov	r4, r9
      count++;
 8014972:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8014974:	b1c4      	cbz	r4, 80149a8 <pbuf_free+0x60>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014976:	89e3      	ldrh	r3, [r4, #14]
 8014978:	b1cb      	cbz	r3, 80149ae <pbuf_free+0x66>
    ref = --(p->ref);
 801497a:	3b01      	subs	r3, #1
 801497c:	b29b      	uxth	r3, r3
 801497e:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8014980:	b993      	cbnz	r3, 80149a8 <pbuf_free+0x60>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014982:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8014984:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014988:	079b      	lsls	r3, r3, #30
 801498a:	d4eb      	bmi.n	8014964 <pbuf_free+0x1c>
      type = p->type;
 801498c:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 801498e:	2b03      	cmp	r3, #3
 8014990:	d01b      	beq.n	80149ca <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8014992:	3b01      	subs	r3, #1
 8014994:	2b01      	cmp	r3, #1
 8014996:	d913      	bls.n	80149c0 <pbuf_free+0x78>
          mem_free(p);
 8014998:	4620      	mov	r0, r4
      count++;
 801499a:	3501      	adds	r5, #1
  while (p != NULL) {
 801499c:	464c      	mov	r4, r9
          mem_free(p);
 801499e:	f7ff fa0f 	bl	8013dc0 <mem_free>
      count++;
 80149a2:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80149a4:	2c00      	cmp	r4, #0
 80149a6:	d1e6      	bne.n	8014976 <pbuf_free+0x2e>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80149a8:	4628      	mov	r0, r5
 80149aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80149ae:	463b      	mov	r3, r7
 80149b0:	f240 22eb 	movw	r2, #747	; 0x2eb
 80149b4:	4641      	mov	r1, r8
 80149b6:	4630      	mov	r0, r6
 80149b8:	f009 fd16 	bl	801e3e8 <iprintf>
 80149bc:	89e3      	ldrh	r3, [r4, #14]
 80149be:	e7dc      	b.n	801497a <pbuf_free+0x32>
          memp_free(MEMP_PBUF, p);
 80149c0:	4621      	mov	r1, r4
 80149c2:	200e      	movs	r0, #14
 80149c4:	f7ff fdc8 	bl	8014558 <memp_free>
 80149c8:	e7d1      	b.n	801496e <pbuf_free+0x26>
          memp_free(MEMP_PBUF_POOL, p);
 80149ca:	4621      	mov	r1, r4
 80149cc:	200f      	movs	r0, #15
 80149ce:	f7ff fdc3 	bl	8014558 <memp_free>
 80149d2:	e7cc      	b.n	801496e <pbuf_free+0x26>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80149d4:	463b      	mov	r3, r7
 80149d6:	f240 22f9 	movw	r2, #761	; 0x2f9
 80149da:	490e      	ldr	r1, [pc, #56]	; (8014a14 <pbuf_free+0xcc>)
 80149dc:	4630      	mov	r0, r6
 80149de:	f009 fd03 	bl	801e3e8 <iprintf>
 80149e2:	6923      	ldr	r3, [r4, #16]
 80149e4:	e7c1      	b.n	801496a <pbuf_free+0x22>
  LWIP_ASSERT("pbuf_free: sane type",
 80149e6:	4b09      	ldr	r3, [pc, #36]	; (8014a0c <pbuf_free+0xc4>)
 80149e8:	f240 22de 	movw	r2, #734	; 0x2de
 80149ec:	490a      	ldr	r1, [pc, #40]	; (8014a18 <pbuf_free+0xd0>)
 80149ee:	4808      	ldr	r0, [pc, #32]	; (8014a10 <pbuf_free+0xc8>)
 80149f0:	f009 fcfa 	bl	801e3e8 <iprintf>
 80149f4:	e7b0      	b.n	8014958 <pbuf_free+0x10>
    return 0;
 80149f6:	4605      	mov	r5, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 80149f8:	4b04      	ldr	r3, [pc, #16]	; (8014a0c <pbuf_free+0xc4>)
 80149fa:	f240 22d2 	movw	r2, #722	; 0x2d2
 80149fe:	4907      	ldr	r1, [pc, #28]	; (8014a1c <pbuf_free+0xd4>)
 8014a00:	4803      	ldr	r0, [pc, #12]	; (8014a10 <pbuf_free+0xc8>)
 8014a02:	f009 fcf1 	bl	801e3e8 <iprintf>
}
 8014a06:	4628      	mov	r0, r5
 8014a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a0c:	0803a278 	.word	0x0803a278
 8014a10:	08023618 	.word	0x08023618
 8014a14:	0803a254 	.word	0x0803a254
 8014a18:	0803a224 	.word	0x0803a224
 8014a1c:	0803b3ac 	.word	0x0803b3ac
 8014a20:	0803a23c 	.word	0x0803a23c

08014a24 <pbuf_alloc>:
{
 8014a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a28:	4688      	mov	r8, r1
 8014a2a:	4617      	mov	r7, r2
  switch (layer) {
 8014a2c:	2804      	cmp	r0, #4
 8014a2e:	f200 80d2 	bhi.w	8014bd6 <pbuf_alloc+0x1b2>
 8014a32:	e8df f000 	tbb	[pc, r0]
 8014a36:	a8b7      	.short	0xa8b7
 8014a38:	03b5      	.short	0x03b5
 8014a3a:	03          	.byte	0x03
 8014a3b:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8014a3c:	2400      	movs	r4, #0
  switch (type) {
 8014a3e:	2f03      	cmp	r7, #3
 8014a40:	f200 80a3 	bhi.w	8014b8a <pbuf_alloc+0x166>
 8014a44:	e8df f007 	tbb	[pc, r7]
 8014a48:	026a6a82 	.word	0x026a6a82
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014a4c:	f240 121d 	movw	r2, #285	; 0x11d
 8014a50:	4973      	ldr	r1, [pc, #460]	; (8014c20 <pbuf_alloc+0x1fc>)
 8014a52:	200f      	movs	r0, #15
 8014a54:	f7ff fd5c 	bl	8014510 <memp_malloc_fn>
    if (p == NULL) {
 8014a58:	4605      	mov	r5, r0
 8014a5a:	2800      	cmp	r0, #0
 8014a5c:	f000 80a4 	beq.w	8014ba8 <pbuf_alloc+0x184>
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014a60:	1ce6      	adds	r6, r4, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8014a62:	4404      	add	r4, r0
    p->type = type;
 8014a64:	2303      	movs	r3, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014a66:	f500 7918 	add.w	r9, r0, #608	; 0x260
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014a6a:	f026 0603 	bic.w	r6, r6, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8014a6e:	3413      	adds	r4, #19
    p->type = type;
 8014a70:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8014a72:	2300      	movs	r3, #0
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014a74:	f5c6 7614 	rsb	r6, r6, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8014a78:	f024 0403 	bic.w	r4, r4, #3
    p->tot_len = length;
 8014a7c:	f8a0 8008 	strh.w	r8, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014a80:	4546      	cmp	r6, r8
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8014a82:	6044      	str	r4, [r0, #4]
    p->next = NULL;
 8014a84:	6003      	str	r3, [r0, #0]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014a86:	bf28      	it	cs
 8014a88:	4646      	movcs	r6, r8
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014a8a:	4434      	add	r4, r6
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014a8c:	b2b6      	uxth	r6, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014a8e:	45a1      	cmp	r9, r4
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014a90:	8146      	strh	r6, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014a92:	f0c0 80bb 	bcc.w	8014c0c <pbuf_alloc+0x1e8>
    rem_len = length - p->len;
 8014a96:	eba8 0606 	sub.w	r6, r8, r6
    p->ref = 1;
 8014a9a:	2301      	movs	r3, #1
    while (rem_len > 0) {
 8014a9c:	2e00      	cmp	r6, #0
    p->ref = 1;
 8014a9e:	81eb      	strh	r3, [r5, #14]
    while (rem_len > 0) {
 8014aa0:	dd4d      	ble.n	8014b3e <pbuf_alloc+0x11a>
 8014aa2:	46a8      	mov	r8, r5
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014aa4:	4f5e      	ldr	r7, [pc, #376]	; (8014c20 <pbuf_alloc+0x1fc>)
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8014aa6:	f8df b194 	ldr.w	fp, [pc, #404]	; 8014c3c <pbuf_alloc+0x218>
 8014aaa:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8014c28 <pbuf_alloc+0x204>
 8014aae:	e018      	b.n	8014ae2 <pbuf_alloc+0xbe>
      q->tot_len = (u16_t)rem_len;
 8014ab0:	b2b2      	uxth	r2, r6
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8014ab2:	f104 0310 	add.w	r3, r4, #16
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8014ab6:	f5b2 7f14 	cmp.w	r2, #592	; 0x250
 8014aba:	4611      	mov	r1, r2
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8014abc:	6063      	str	r3, [r4, #4]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8014abe:	bf28      	it	cs
 8014ac0:	f44f 7114 	movcs.w	r1, #592	; 0x250
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014ac4:	079b      	lsls	r3, r3, #30
      q->tot_len = (u16_t)rem_len;
 8014ac6:	8122      	strh	r2, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8014ac8:	8161      	strh	r1, [r4, #10]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014aca:	d17c      	bne.n	8014bc6 <pbuf_alloc+0x1a2>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014acc:	896a      	ldrh	r2, [r5, #10]
 8014ace:	686b      	ldr	r3, [r5, #4]
 8014ad0:	4413      	add	r3, r2
 8014ad2:	4599      	cmp	r9, r3
 8014ad4:	d36f      	bcc.n	8014bb6 <pbuf_alloc+0x192>
      rem_len -= q->len;
 8014ad6:	8962      	ldrh	r2, [r4, #10]
      q->ref = 1;
 8014ad8:	2301      	movs	r3, #1
      rem_len -= q->len;
 8014ada:	1ab6      	subs	r6, r6, r2
      q->ref = 1;
 8014adc:	81e3      	strh	r3, [r4, #14]
    while (rem_len > 0) {
 8014ade:	2e00      	cmp	r6, #0
 8014ae0:	dd2d      	ble.n	8014b3e <pbuf_alloc+0x11a>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014ae2:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8014ae6:	4639      	mov	r1, r7
 8014ae8:	200f      	movs	r0, #15
 8014aea:	f7ff fd11 	bl	8014510 <memp_malloc_fn>
      q->flags = 0;
 8014aee:	2300      	movs	r3, #0
      if (q == NULL) {
 8014af0:	4604      	mov	r4, r0
      q->type = type;
 8014af2:	2103      	movs	r1, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8014af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
      if (q == NULL) {
 8014af8:	2800      	cmp	r0, #0
 8014afa:	d077      	beq.n	8014bec <pbuf_alloc+0x1c8>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8014afc:	4296      	cmp	r6, r2
      q->type = type;
 8014afe:	7301      	strb	r1, [r0, #12]
      q->flags = 0;
 8014b00:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8014b02:	6003      	str	r3, [r0, #0]
      r->next = q;
 8014b04:	f8c8 0000 	str.w	r0, [r8]
 8014b08:	4680      	mov	r8, r0
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8014b0a:	d1d1      	bne.n	8014ab0 <pbuf_alloc+0x8c>
 8014b0c:	463b      	mov	r3, r7
 8014b0e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8014b12:	4659      	mov	r1, fp
 8014b14:	4650      	mov	r0, sl
 8014b16:	f009 fc67 	bl	801e3e8 <iprintf>
 8014b1a:	e7c9      	b.n	8014ab0 <pbuf_alloc+0x8c>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014b1c:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8014b20:	493f      	ldr	r1, [pc, #252]	; (8014c20 <pbuf_alloc+0x1fc>)
 8014b22:	200e      	movs	r0, #14
 8014b24:	f7ff fcf4 	bl	8014510 <memp_malloc_fn>
    if (p == NULL) {
 8014b28:	4605      	mov	r5, r0
 8014b2a:	2800      	cmp	r0, #0
 8014b2c:	d041      	beq.n	8014bb2 <pbuf_alloc+0x18e>
    p->payload = NULL;
 8014b2e:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8014b30:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014b34:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->type = type;
 8014b38:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 8014b3a:	e9c0 3300 	strd	r3, r3, [r0]
  p->ref = 1;
 8014b3e:	2201      	movs	r2, #1
  p->flags = 0;
 8014b40:	2300      	movs	r3, #0
  p->ref = 1;
 8014b42:	81ea      	strh	r2, [r5, #14]
  p->flags = 0;
 8014b44:	736b      	strb	r3, [r5, #13]
}
 8014b46:	4628      	mov	r0, r5
 8014b48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8014b4c:	f104 0013 	add.w	r0, r4, #19
 8014b50:	f108 0303 	add.w	r3, r8, #3
 8014b54:	f020 0003 	bic.w	r0, r0, #3
 8014b58:	f023 0303 	bic.w	r3, r3, #3
 8014b5c:	4418      	add	r0, r3
 8014b5e:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8014b60:	4298      	cmp	r0, r3
 8014b62:	d326      	bcc.n	8014bb2 <pbuf_alloc+0x18e>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8014b64:	f7ff fab6 	bl	80140d4 <mem_malloc>
    if (p == NULL) {
 8014b68:	4605      	mov	r5, r0
 8014b6a:	b310      	cbz	r0, 8014bb2 <pbuf_alloc+0x18e>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8014b6c:	4404      	add	r4, r0
    p->next = NULL;
 8014b6e:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8014b70:	f8a0 8008 	strh.w	r8, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8014b74:	3413      	adds	r4, #19
    p->len = p->tot_len = length;
 8014b76:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
 8014b7a:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8014b7c:	f024 0403 	bic.w	r4, r4, #3
    p->type = type;
 8014b80:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8014b82:	6044      	str	r4, [r0, #4]
 8014b84:	e7db      	b.n	8014b3e <pbuf_alloc+0x11a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8014b86:	2422      	movs	r4, #34	; 0x22
 8014b88:	e759      	b.n	8014a3e <pbuf_alloc+0x1a>
    return NULL;
 8014b8a:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014b8c:	4b24      	ldr	r3, [pc, #144]	; (8014c20 <pbuf_alloc+0x1fc>)
 8014b8e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8014b92:	4924      	ldr	r1, [pc, #144]	; (8014c24 <pbuf_alloc+0x200>)
 8014b94:	4824      	ldr	r0, [pc, #144]	; (8014c28 <pbuf_alloc+0x204>)
 8014b96:	f009 fc27 	bl	801e3e8 <iprintf>
}
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8014ba0:	240e      	movs	r4, #14
 8014ba2:	e74c      	b.n	8014a3e <pbuf_alloc+0x1a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8014ba4:	2436      	movs	r4, #54	; 0x36
 8014ba6:	e74a      	b.n	8014a3e <pbuf_alloc+0x1a>
  queued = pbuf_free_ooseq_pending;
 8014ba8:	4b20      	ldr	r3, [pc, #128]	; (8014c2c <pbuf_alloc+0x208>)
  pbuf_free_ooseq_pending = 1;
 8014baa:	2101      	movs	r1, #1
  queued = pbuf_free_ooseq_pending;
 8014bac:	781a      	ldrb	r2, [r3, #0]
  pbuf_free_ooseq_pending = 1;
 8014bae:	7019      	strb	r1, [r3, #0]
  if (!queued) {
 8014bb0:	b34a      	cbz	r2, 8014c06 <pbuf_alloc+0x1e2>
      return NULL;
 8014bb2:	2500      	movs	r5, #0
 8014bb4:	e7c7      	b.n	8014b46 <pbuf_alloc+0x122>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014bb6:	463b      	mov	r3, r7
 8014bb8:	f240 1255 	movw	r2, #341	; 0x155
 8014bbc:	491c      	ldr	r1, [pc, #112]	; (8014c30 <pbuf_alloc+0x20c>)
 8014bbe:	4650      	mov	r0, sl
 8014bc0:	f009 fc12 	bl	801e3e8 <iprintf>
 8014bc4:	e787      	b.n	8014ad6 <pbuf_alloc+0xb2>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014bc6:	463b      	mov	r3, r7
 8014bc8:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8014bcc:	4919      	ldr	r1, [pc, #100]	; (8014c34 <pbuf_alloc+0x210>)
 8014bce:	4650      	mov	r0, sl
 8014bd0:	f009 fc0a 	bl	801e3e8 <iprintf>
 8014bd4:	e77a      	b.n	8014acc <pbuf_alloc+0xa8>
    return NULL;
 8014bd6:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8014bd8:	4b11      	ldr	r3, [pc, #68]	; (8014c20 <pbuf_alloc+0x1fc>)
 8014bda:	f44f 728b 	mov.w	r2, #278	; 0x116
 8014bde:	4916      	ldr	r1, [pc, #88]	; (8014c38 <pbuf_alloc+0x214>)
 8014be0:	4811      	ldr	r0, [pc, #68]	; (8014c28 <pbuf_alloc+0x204>)
 8014be2:	f009 fc01 	bl	801e3e8 <iprintf>
}
 8014be6:	4628      	mov	r0, r5
 8014be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  queued = pbuf_free_ooseq_pending;
 8014bec:	4b0f      	ldr	r3, [pc, #60]	; (8014c2c <pbuf_alloc+0x208>)
  pbuf_free_ooseq_pending = 1;
 8014bee:	2101      	movs	r1, #1
  queued = pbuf_free_ooseq_pending;
 8014bf0:	781a      	ldrb	r2, [r3, #0]
  pbuf_free_ooseq_pending = 1;
 8014bf2:	7019      	strb	r1, [r3, #0]
  if (!queued) {
 8014bf4:	b122      	cbz	r2, 8014c00 <pbuf_alloc+0x1dc>
        pbuf_free(p);
 8014bf6:	4628      	mov	r0, r5
        return NULL;
 8014bf8:	2500      	movs	r5, #0
        pbuf_free(p);
 8014bfa:	f7ff fea5 	bl	8014948 <pbuf_free>
        return NULL;
 8014bfe:	e7a2      	b.n	8014b46 <pbuf_alloc+0x122>
 8014c00:	f7ff fe54 	bl	80148ac <pbuf_pool_is_empty.part.1>
 8014c04:	e7f7      	b.n	8014bf6 <pbuf_alloc+0x1d2>
 8014c06:	f7ff fe51 	bl	80148ac <pbuf_pool_is_empty.part.1>
 8014c0a:	e79c      	b.n	8014b46 <pbuf_alloc+0x122>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014c0c:	4b04      	ldr	r3, [pc, #16]	; (8014c20 <pbuf_alloc+0x1fc>)
 8014c0e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8014c12:	4907      	ldr	r1, [pc, #28]	; (8014c30 <pbuf_alloc+0x20c>)
 8014c14:	4804      	ldr	r0, [pc, #16]	; (8014c28 <pbuf_alloc+0x204>)
 8014c16:	f009 fbe7 	bl	801e3e8 <iprintf>
 8014c1a:	896e      	ldrh	r6, [r5, #10]
 8014c1c:	e73b      	b.n	8014a96 <pbuf_alloc+0x72>
 8014c1e:	bf00      	nop
 8014c20:	0803a278 	.word	0x0803a278
 8014c24:	0803a088 	.word	0x0803a088
 8014c28:	08023618 	.word	0x08023618
 8014c2c:	20035380 	.word	0x20035380
 8014c30:	0803a010 	.word	0x0803a010
 8014c34:	0803a058 	.word	0x0803a058
 8014c38:	08039ff4 	.word	0x08039ff4
 8014c3c:	0803a044 	.word	0x0803a044

08014c40 <pbuf_realloc>:
{
 8014c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c44:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014c46:	4604      	mov	r4, r0
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	d050      	beq.n	8014cee <pbuf_realloc+0xae>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8014c4c:	7b23      	ldrb	r3, [r4, #12]
 8014c4e:	2b03      	cmp	r3, #3
 8014c50:	d857      	bhi.n	8014d02 <pbuf_realloc+0xc2>
  if (new_len >= p->tot_len) {
 8014c52:	8926      	ldrh	r6, [r4, #8]
 8014c54:	42ae      	cmp	r6, r5
 8014c56:	d92a      	bls.n	8014cae <pbuf_realloc+0x6e>
  grow = new_len - p->tot_len;
 8014c58:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014c5a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8014d1c <pbuf_realloc+0xdc>
 8014c5e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8014d2c <pbuf_realloc+0xec>
 8014c62:	4f2c      	ldr	r7, [pc, #176]	; (8014d14 <pbuf_realloc+0xd4>)
  while (rem_len > q->len) {
 8014c64:	8963      	ldrh	r3, [r4, #10]
 8014c66:	42ab      	cmp	r3, r5
 8014c68:	d215      	bcs.n	8014c96 <pbuf_realloc+0x56>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014c6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    rem_len -= q->len;
 8014c6e:	1aeb      	subs	r3, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014c70:	4296      	cmp	r6, r2
    rem_len -= q->len;
 8014c72:	b29d      	uxth	r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014c74:	dc1d      	bgt.n	8014cb2 <pbuf_realloc+0x72>
    q->tot_len += (u16_t)grow;
 8014c76:	8923      	ldrh	r3, [r4, #8]
 8014c78:	4433      	add	r3, r6
 8014c7a:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8014c7c:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014c7e:	2c00      	cmp	r4, #0
 8014c80:	d1f0      	bne.n	8014c64 <pbuf_realloc+0x24>
 8014c82:	4643      	mov	r3, r8
 8014c84:	f240 220f 	movw	r2, #527	; 0x20f
 8014c88:	4923      	ldr	r1, [pc, #140]	; (8014d18 <pbuf_realloc+0xd8>)
 8014c8a:	4638      	mov	r0, r7
 8014c8c:	f009 fbac 	bl	801e3e8 <iprintf>
  while (rem_len > q->len) {
 8014c90:	8963      	ldrh	r3, [r4, #10]
 8014c92:	42ab      	cmp	r3, r5
 8014c94:	d3e9      	bcc.n	8014c6a <pbuf_realloc+0x2a>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8014c96:	7b22      	ldrb	r2, [r4, #12]
 8014c98:	b90a      	cbnz	r2, 8014c9e <pbuf_realloc+0x5e>
 8014c9a:	42ab      	cmp	r3, r5
 8014c9c:	d111      	bne.n	8014cc2 <pbuf_realloc+0x82>
  if (q->next != NULL) {
 8014c9e:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8014ca0:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8014ca2:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8014ca4:	b108      	cbz	r0, 8014caa <pbuf_realloc+0x6a>
    pbuf_free(q->next);
 8014ca6:	f7ff fe4f 	bl	8014948 <pbuf_free>
  q->next = NULL;
 8014caa:	2300      	movs	r3, #0
 8014cac:	6023      	str	r3, [r4, #0]
}
 8014cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014cb2:	4643      	mov	r3, r8
 8014cb4:	f240 220b 	movw	r2, #523	; 0x20b
 8014cb8:	4649      	mov	r1, r9
 8014cba:	4638      	mov	r0, r7
 8014cbc:	f009 fb94 	bl	801e3e8 <iprintf>
 8014cc0:	e7d9      	b.n	8014c76 <pbuf_realloc+0x36>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014cc2:	7b63      	ldrb	r3, [r4, #13]
 8014cc4:	079b      	lsls	r3, r3, #30
 8014cc6:	d4ea      	bmi.n	8014c9e <pbuf_realloc+0x5e>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8014cc8:	6863      	ldr	r3, [r4, #4]
 8014cca:	4620      	mov	r0, r4
 8014ccc:	1b1c      	subs	r4, r3, r4
 8014cce:	1929      	adds	r1, r5, r4
 8014cd0:	b289      	uxth	r1, r1
 8014cd2:	f7ff f94f 	bl	8013f74 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	2800      	cmp	r0, #0
 8014cda:	d1e0      	bne.n	8014c9e <pbuf_realloc+0x5e>
 8014cdc:	4b0f      	ldr	r3, [pc, #60]	; (8014d1c <pbuf_realloc+0xdc>)
 8014cde:	f240 221d 	movw	r2, #541	; 0x21d
 8014ce2:	490f      	ldr	r1, [pc, #60]	; (8014d20 <pbuf_realloc+0xe0>)
 8014ce4:	480b      	ldr	r0, [pc, #44]	; (8014d14 <pbuf_realloc+0xd4>)
 8014ce6:	f009 fb7f 	bl	801e3e8 <iprintf>
  q->len = rem_len;
 8014cea:	8164      	strh	r4, [r4, #10]
 8014cec:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014cee:	4b0b      	ldr	r3, [pc, #44]	; (8014d1c <pbuf_realloc+0xdc>)
 8014cf0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8014cf4:	490b      	ldr	r1, [pc, #44]	; (8014d24 <pbuf_realloc+0xe4>)
 8014cf6:	4807      	ldr	r0, [pc, #28]	; (8014d14 <pbuf_realloc+0xd4>)
 8014cf8:	f009 fb76 	bl	801e3e8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8014cfc:	7b23      	ldrb	r3, [r4, #12]
 8014cfe:	2b03      	cmp	r3, #3
 8014d00:	d9a7      	bls.n	8014c52 <pbuf_realloc+0x12>
 8014d02:	4b06      	ldr	r3, [pc, #24]	; (8014d1c <pbuf_realloc+0xdc>)
 8014d04:	f240 12f7 	movw	r2, #503	; 0x1f7
 8014d08:	4907      	ldr	r1, [pc, #28]	; (8014d28 <pbuf_realloc+0xe8>)
 8014d0a:	4802      	ldr	r0, [pc, #8]	; (8014d14 <pbuf_realloc+0xd4>)
 8014d0c:	f009 fb6c 	bl	801e3e8 <iprintf>
 8014d10:	e79f      	b.n	8014c52 <pbuf_realloc+0x12>
 8014d12:	bf00      	nop
 8014d14:	08023618 	.word	0x08023618
 8014d18:	0803a320 	.word	0x0803a320
 8014d1c:	0803a278 	.word	0x0803a278
 8014d20:	0803a338 	.word	0x0803a338
 8014d24:	0803a2d8 	.word	0x0803a2d8
 8014d28:	0803a2f0 	.word	0x0803a2f0
 8014d2c:	0803a30c 	.word	0x0803a30c

08014d30 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8014d30:	b138      	cbz	r0, 8014d42 <pbuf_clen+0x12>
  len = 0;
 8014d32:	2300      	movs	r3, #0
    ++len;
 8014d34:	3301      	adds	r3, #1
    p = p->next;
 8014d36:	6800      	ldr	r0, [r0, #0]
    ++len;
 8014d38:	b29b      	uxth	r3, r3
  while (p != NULL) {
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	d1fa      	bne.n	8014d34 <pbuf_clen+0x4>
  }
  return len;
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	4770      	bx	lr
  len = 0;
 8014d42:	4603      	mov	r3, r0
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	4770      	bx	lr

08014d48 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8014d48:	b120      	cbz	r0, 8014d54 <pbuf_ref+0xc>
    SYS_ARCH_INC(p->ref, 1);
 8014d4a:	89c3      	ldrh	r3, [r0, #14]
 8014d4c:	3301      	adds	r3, #1
 8014d4e:	b29b      	uxth	r3, r3
 8014d50:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014d52:	b103      	cbz	r3, 8014d56 <pbuf_ref+0xe>
  }
}
 8014d54:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014d56:	4b03      	ldr	r3, [pc, #12]	; (8014d64 <pbuf_ref+0x1c>)
 8014d58:	f240 3239 	movw	r2, #825	; 0x339
 8014d5c:	4902      	ldr	r1, [pc, #8]	; (8014d68 <pbuf_ref+0x20>)
 8014d5e:	4803      	ldr	r0, [pc, #12]	; (8014d6c <pbuf_ref+0x24>)
 8014d60:	f009 bb42 	b.w	801e3e8 <iprintf>
 8014d64:	0803a278 	.word	0x0803a278
 8014d68:	0803a354 	.word	0x0803a354
 8014d6c:	08023618 	.word	0x08023618

08014d70 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014d70:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014d72:	b338      	cbz	r0, 8014dc4 <pbuf_cat+0x54>
 8014d74:	460d      	mov	r5, r1
 8014d76:	b329      	cbz	r1, 8014dc4 <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014d78:	6804      	ldr	r4, [r0, #0]
 8014d7a:	b90c      	cbnz	r4, 8014d80 <pbuf_cat+0x10>
 8014d7c:	e02b      	b.n	8014dd6 <pbuf_cat+0x66>
 8014d7e:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8014d80:	8903      	ldrh	r3, [r0, #8]
 8014d82:	8929      	ldrh	r1, [r5, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014d84:	6822      	ldr	r2, [r4, #0]
    p->tot_len += t->tot_len;
 8014d86:	440b      	add	r3, r1
 8014d88:	8103      	strh	r3, [r0, #8]
 8014d8a:	4620      	mov	r0, r4
  for (p = h; p->next != NULL; p = p->next) {
 8014d8c:	2a00      	cmp	r2, #0
 8014d8e:	d1f6      	bne.n	8014d7e <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014d90:	8963      	ldrh	r3, [r4, #10]
 8014d92:	8922      	ldrh	r2, [r4, #8]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d010      	beq.n	8014dba <pbuf_cat+0x4a>
 8014d98:	4b12      	ldr	r3, [pc, #72]	; (8014de4 <pbuf_cat+0x74>)
 8014d9a:	f240 3255 	movw	r2, #853	; 0x355
 8014d9e:	4912      	ldr	r1, [pc, #72]	; (8014de8 <pbuf_cat+0x78>)
 8014da0:	4812      	ldr	r0, [pc, #72]	; (8014dec <pbuf_cat+0x7c>)
 8014da2:	f009 fb21 	bl	801e3e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014da6:	6823      	ldr	r3, [r4, #0]
 8014da8:	b133      	cbz	r3, 8014db8 <pbuf_cat+0x48>
 8014daa:	4b0e      	ldr	r3, [pc, #56]	; (8014de4 <pbuf_cat+0x74>)
 8014dac:	f240 3256 	movw	r2, #854	; 0x356
 8014db0:	490f      	ldr	r1, [pc, #60]	; (8014df0 <pbuf_cat+0x80>)
 8014db2:	480e      	ldr	r0, [pc, #56]	; (8014dec <pbuf_cat+0x7c>)
 8014db4:	f009 fb18 	bl	801e3e8 <iprintf>
 8014db8:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8014dba:	892a      	ldrh	r2, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014dbc:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8014dbe:	4413      	add	r3, r2
 8014dc0:	8123      	strh	r3, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014dc2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014dc4:	4b07      	ldr	r3, [pc, #28]	; (8014de4 <pbuf_cat+0x74>)
 8014dc6:	f240 324d 	movw	r2, #845	; 0x34d
 8014dca:	490a      	ldr	r1, [pc, #40]	; (8014df4 <pbuf_cat+0x84>)
 8014dcc:	4807      	ldr	r0, [pc, #28]	; (8014dec <pbuf_cat+0x7c>)
}
 8014dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014dd2:	f009 bb09 	b.w	801e3e8 <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 8014dd6:	4604      	mov	r4, r0
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014dd8:	8963      	ldrh	r3, [r4, #10]
 8014dda:	8922      	ldrh	r2, [r4, #8]
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d1db      	bne.n	8014d98 <pbuf_cat+0x28>
 8014de0:	e7eb      	b.n	8014dba <pbuf_cat+0x4a>
 8014de2:	bf00      	nop
 8014de4:	0803a278 	.word	0x0803a278
 8014de8:	0803a100 	.word	0x0803a100
 8014dec:	08023618 	.word	0x08023618
 8014df0:	0803a130 	.word	0x0803a130
 8014df4:	0803a0c8 	.word	0x0803a0c8

08014df8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014df8:	b510      	push	{r4, lr}
 8014dfa:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8014dfc:	f7ff ffb8 	bl	8014d70 <pbuf_cat>
  if (p != NULL) {
 8014e00:	b124      	cbz	r4, 8014e0c <pbuf_chain+0x14>
    SYS_ARCH_INC(p->ref, 1);
 8014e02:	89e3      	ldrh	r3, [r4, #14]
 8014e04:	3301      	adds	r3, #1
 8014e06:	b29b      	uxth	r3, r3
 8014e08:	81e3      	strh	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014e0a:	b103      	cbz	r3, 8014e0e <pbuf_chain+0x16>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014e0c:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014e0e:	4b04      	ldr	r3, [pc, #16]	; (8014e20 <pbuf_chain+0x28>)
 8014e10:	f240 3239 	movw	r2, #825	; 0x339
 8014e14:	4903      	ldr	r1, [pc, #12]	; (8014e24 <pbuf_chain+0x2c>)
 8014e16:	4804      	ldr	r0, [pc, #16]	; (8014e28 <pbuf_chain+0x30>)
}
 8014e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014e1c:	f009 bae4 	b.w	801e3e8 <iprintf>
 8014e20:	0803a278 	.word	0x0803a278
 8014e24:	0803a354 	.word	0x0803a354
 8014e28:	08023618 	.word	0x08023618

08014e2c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014e30:	2800      	cmp	r0, #0
 8014e32:	f000 809d 	beq.w	8014f70 <pbuf_copy+0x144>
 8014e36:	fab1 f781 	clz	r7, r1
 8014e3a:	4688      	mov	r8, r1
 8014e3c:	097f      	lsrs	r7, r7, #5
 8014e3e:	2f00      	cmp	r7, #0
 8014e40:	f040 8096 	bne.w	8014f70 <pbuf_copy+0x144>
 8014e44:	8902      	ldrh	r2, [r0, #8]
 8014e46:	4606      	mov	r6, r0
 8014e48:	890b      	ldrh	r3, [r1, #8]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	f0c0 8090 	bcc.w	8014f70 <pbuf_copy+0x144>
 8014e50:	8942      	ldrh	r2, [r0, #10]
  u16_t offset_to=0, offset_from=0, len;
 8014e52:	463d      	mov	r5, r7
 8014e54:	894c      	ldrh	r4, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014e56:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8014f84 <pbuf_copy+0x158>
 8014e5a:	f8df b140 	ldr.w	fp, [pc, #320]	; 8014f9c <pbuf_copy+0x170>
 8014e5e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8014f8c <pbuf_copy+0x160>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014e62:	1be3      	subs	r3, r4, r7
 8014e64:	1b52      	subs	r2, r2, r5
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8014e66:	6870      	ldr	r0, [r6, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014e68:	429a      	cmp	r2, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8014e6a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014e6e:	4428      	add	r0, r5
      len = p_from->len - offset_from;
 8014e70:	bfa8      	it	ge
 8014e72:	b29c      	uxthge	r4, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8014e74:	4439      	add	r1, r7
      len = p_to->len - offset_to;
 8014e76:	bfb8      	it	lt
 8014e78:	b294      	uxthlt	r4, r2
    offset_to += len;
 8014e7a:	4425      	add	r5, r4
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8014e7c:	4622      	mov	r2, r4
 8014e7e:	f008 fb28 	bl	801d4d2 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014e82:	8973      	ldrh	r3, [r6, #10]
    offset_to += len;
 8014e84:	b2ad      	uxth	r5, r5
    offset_from += len;
 8014e86:	4427      	add	r7, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014e88:	42ab      	cmp	r3, r5
    offset_from += len;
 8014e8a:	b2bf      	uxth	r7, r7
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014e8c:	d349      	bcc.n	8014f22 <pbuf_copy+0xf6>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014e8e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8014e92:	429f      	cmp	r7, r3
 8014e94:	d83b      	bhi.n	8014f0e <pbuf_copy+0xe2>
    if (offset_from >= p_from->len) {
 8014e96:	429f      	cmp	r7, r3
 8014e98:	d302      	bcc.n	8014ea0 <pbuf_copy+0x74>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 8014e9a:	f8d8 8000 	ldr.w	r8, [r8]
      offset_from = 0;
 8014e9e:	2700      	movs	r7, #0
    }
    if (offset_to == p_to->len) {
 8014ea0:	8973      	ldrh	r3, [r6, #10]
 8014ea2:	42ab      	cmp	r3, r5
 8014ea4:	d015      	beq.n	8014ed2 <pbuf_copy+0xa6>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014ea6:	f1b8 0f00 	cmp.w	r8, #0
 8014eaa:	d044      	beq.n	8014f36 <pbuf_copy+0x10a>
 8014eac:	f8b8 400a 	ldrh.w	r4, [r8, #10]
 8014eb0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8014eb4:	429c      	cmp	r4, r3
 8014eb6:	d01b      	beq.n	8014ef0 <pbuf_copy+0xc4>
 8014eb8:	8972      	ldrh	r2, [r6, #10]
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014eba:	8933      	ldrh	r3, [r6, #8]
 8014ebc:	4293      	cmp	r3, r2
 8014ebe:	d1d0      	bne.n	8014e62 <pbuf_copy+0x36>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014ec0:	6833      	ldr	r3, [r6, #0]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d13e      	bne.n	8014f44 <pbuf_copy+0x118>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014ec6:	f1b8 0f00 	cmp.w	r8, #0
 8014eca:	d1ca      	bne.n	8014e62 <pbuf_copy+0x36>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014ecc:	2000      	movs	r0, #0
}
 8014ece:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8014ed2:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8014ed4:	b916      	cbnz	r6, 8014edc <pbuf_copy+0xb0>
 8014ed6:	f1b8 0f00 	cmp.w	r8, #0
 8014eda:	d13e      	bne.n	8014f5a <pbuf_copy+0x12e>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014edc:	f1b8 0f00 	cmp.w	r8, #0
 8014ee0:	d027      	beq.n	8014f32 <pbuf_copy+0x106>
 8014ee2:	f8b8 400a 	ldrh.w	r4, [r8, #10]
      offset_to = 0;
 8014ee6:	2500      	movs	r5, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014ee8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8014eec:	429c      	cmp	r4, r3
 8014eee:	d1e3      	bne.n	8014eb8 <pbuf_copy+0x8c>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d0df      	beq.n	8014eb8 <pbuf_copy+0x8c>
 8014ef8:	4b22      	ldr	r3, [pc, #136]	; (8014f84 <pbuf_copy+0x158>)
 8014efa:	f240 32de 	movw	r2, #990	; 0x3de
 8014efe:	4922      	ldr	r1, [pc, #136]	; (8014f88 <pbuf_copy+0x15c>)
 8014f00:	4822      	ldr	r0, [pc, #136]	; (8014f8c <pbuf_copy+0x160>)
 8014f02:	f009 fa71 	bl	801e3e8 <iprintf>
 8014f06:	f06f 0005 	mvn.w	r0, #5
}
 8014f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014f0e:	4653      	mov	r3, sl
 8014f10:	f240 32ce 	movw	r2, #974	; 0x3ce
 8014f14:	491e      	ldr	r1, [pc, #120]	; (8014f90 <pbuf_copy+0x164>)
 8014f16:	4648      	mov	r0, r9
 8014f18:	f009 fa66 	bl	801e3e8 <iprintf>
 8014f1c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8014f20:	e7b9      	b.n	8014e96 <pbuf_copy+0x6a>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014f22:	4653      	mov	r3, sl
 8014f24:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014f28:	4659      	mov	r1, fp
 8014f2a:	4648      	mov	r0, r9
 8014f2c:	f009 fa5c 	bl	801e3e8 <iprintf>
 8014f30:	e7ad      	b.n	8014e8e <pbuf_copy+0x62>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014f32:	2e00      	cmp	r6, #0
 8014f34:	d0ca      	beq.n	8014ecc <pbuf_copy+0xa0>
 8014f36:	8932      	ldrh	r2, [r6, #8]
 8014f38:	8973      	ldrh	r3, [r6, #10]
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d1c6      	bne.n	8014ecc <pbuf_copy+0xa0>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014f3e:	6830      	ldr	r0, [r6, #0]
 8014f40:	2800      	cmp	r0, #0
 8014f42:	d0c4      	beq.n	8014ece <pbuf_copy+0xa2>
 8014f44:	4b0f      	ldr	r3, [pc, #60]	; (8014f84 <pbuf_copy+0x158>)
 8014f46:	f240 32e3 	movw	r2, #995	; 0x3e3
 8014f4a:	490f      	ldr	r1, [pc, #60]	; (8014f88 <pbuf_copy+0x15c>)
 8014f4c:	480f      	ldr	r0, [pc, #60]	; (8014f8c <pbuf_copy+0x160>)
 8014f4e:	f009 fa4b 	bl	801e3e8 <iprintf>
 8014f52:	f06f 0005 	mvn.w	r0, #5
}
 8014f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8014f5a:	4b0a      	ldr	r3, [pc, #40]	; (8014f84 <pbuf_copy+0x158>)
 8014f5c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014f60:	490c      	ldr	r1, [pc, #48]	; (8014f94 <pbuf_copy+0x168>)
 8014f62:	480a      	ldr	r0, [pc, #40]	; (8014f8c <pbuf_copy+0x160>)
 8014f64:	f009 fa40 	bl	801e3e8 <iprintf>
 8014f68:	f06f 000f 	mvn.w	r0, #15
}
 8014f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014f70:	4b04      	ldr	r3, [pc, #16]	; (8014f84 <pbuf_copy+0x158>)
 8014f72:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014f76:	4908      	ldr	r1, [pc, #32]	; (8014f98 <pbuf_copy+0x16c>)
 8014f78:	4804      	ldr	r0, [pc, #16]	; (8014f8c <pbuf_copy+0x160>)
 8014f7a:	f009 fa35 	bl	801e3e8 <iprintf>
 8014f7e:	f06f 000f 	mvn.w	r0, #15
 8014f82:	e7a4      	b.n	8014ece <pbuf_copy+0xa2>
 8014f84:	0803a278 	.word	0x0803a278
 8014f88:	0803a1b4 	.word	0x0803a1b4
 8014f8c:	08023618 	.word	0x08023618
 8014f90:	0803a188 	.word	0x0803a188
 8014f94:	0803a1a4 	.word	0x0803a1a4
 8014f98:	0803a140 	.word	0x0803a140
 8014f9c:	0803a170 	.word	0x0803a170

08014fa0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014fa4:	4605      	mov	r5, r0
 8014fa6:	b368      	cbz	r0, 8015004 <pbuf_copy_partial+0x64>
 8014fa8:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014faa:	2900      	cmp	r1, #0
 8014fac:	d035      	beq.n	801501a <pbuf_copy_partial+0x7a>
 8014fae:	4690      	mov	r8, r2
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014fb0:	2a00      	cmp	r2, #0
 8014fb2:	d03d      	beq.n	8015030 <pbuf_copy_partial+0x90>
  left = 0;
 8014fb4:	2600      	movs	r6, #0
 8014fb6:	e009      	b.n	8014fcc <pbuf_copy_partial+0x2c>
    if ((offset != 0) && (offset >= p->len)) {
 8014fb8:	429a      	cmp	r2, r3
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8014fba:	eba3 0102 	sub.w	r1, r3, r2
    if ((offset != 0) && (offset >= p->len)) {
 8014fbe:	d809      	bhi.n	8014fd4 <pbuf_copy_partial+0x34>
      offset -= p->len;
 8014fc0:	b28b      	uxth	r3, r1
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014fc2:	682d      	ldr	r5, [r5, #0]
 8014fc4:	f1b8 0f00 	cmp.w	r8, #0
 8014fc8:	d019      	beq.n	8014ffe <pbuf_copy_partial+0x5e>
 8014fca:	b1c5      	cbz	r5, 8014ffe <pbuf_copy_partial+0x5e>
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8014fcc:	19b8      	adds	r0, r7, r6
 8014fce:	896a      	ldrh	r2, [r5, #10]
    if ((offset != 0) && (offset >= p->len)) {
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d1f1      	bne.n	8014fb8 <pbuf_copy_partial+0x18>
      buf_copy_len = p->len - offset;
 8014fd4:	1ad4      	subs	r4, r2, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8014fd6:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = p->len - offset;
 8014fd8:	b2a4      	uxth	r4, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8014fda:	4419      	add	r1, r3
 8014fdc:	4544      	cmp	r4, r8
 8014fde:	bf28      	it	cs
 8014fe0:	4644      	movcs	r4, r8
 8014fe2:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 8014fe4:	4426      	add	r6, r4
      left += buf_copy_len;
      len -= buf_copy_len;
 8014fe6:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8014fea:	f008 fa72 	bl	801d4d2 <memcpy>
      copied_total += buf_copy_len;
 8014fee:	b2b6      	uxth	r6, r6
      offset = 0;
 8014ff0:	2300      	movs	r3, #0
      len -= buf_copy_len;
 8014ff2:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014ff6:	682d      	ldr	r5, [r5, #0]
 8014ff8:	f1b8 0f00 	cmp.w	r8, #0
 8014ffc:	d1e5      	bne.n	8014fca <pbuf_copy_partial+0x2a>
    }
  }
  return copied_total;
}
 8014ffe:	4630      	mov	r0, r6
 8015000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015004:	4606      	mov	r6, r0
 8015006:	4b0c      	ldr	r3, [pc, #48]	; (8015038 <pbuf_copy_partial+0x98>)
 8015008:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801500c:	490b      	ldr	r1, [pc, #44]	; (801503c <pbuf_copy_partial+0x9c>)
 801500e:	480c      	ldr	r0, [pc, #48]	; (8015040 <pbuf_copy_partial+0xa0>)
 8015010:	f009 f9ea 	bl	801e3e8 <iprintf>
}
 8015014:	4630      	mov	r0, r6
 8015016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801501a:	463e      	mov	r6, r7
 801501c:	4b06      	ldr	r3, [pc, #24]	; (8015038 <pbuf_copy_partial+0x98>)
 801501e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8015022:	4908      	ldr	r1, [pc, #32]	; (8015044 <pbuf_copy_partial+0xa4>)
 8015024:	4806      	ldr	r0, [pc, #24]	; (8015040 <pbuf_copy_partial+0xa0>)
 8015026:	f009 f9df 	bl	801e3e8 <iprintf>
}
 801502a:	4630      	mov	r0, r6
 801502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  left = 0;
 8015030:	4616      	mov	r6, r2
}
 8015032:	4630      	mov	r0, r6
 8015034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015038:	0803a278 	.word	0x0803a278
 801503c:	0803a1e0 	.word	0x0803a1e0
 8015040:	08023618 	.word	0x08023618
 8015044:	0803a200 	.word	0x0803a200

08015048 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8015048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801504c:	2800      	cmp	r0, #0
 801504e:	d04c      	beq.n	80150ea <pbuf_take+0xa2>
 8015050:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8015052:	2900      	cmp	r1, #0
 8015054:	d03f      	beq.n	80150d6 <pbuf_take+0x8e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8015056:	8903      	ldrh	r3, [r0, #8]
 8015058:	4690      	mov	r8, r2
 801505a:	4605      	mov	r5, r0
 801505c:	4293      	cmp	r3, r2
 801505e:	d330      	bcc.n	80150c2 <pbuf_take+0x7a>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8015060:	b312      	cbz	r2, 80150a8 <pbuf_take+0x60>
 8015062:	4614      	mov	r4, r2
  u16_t copied_total = 0;
 8015064:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8015066:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8015104 <pbuf_take+0xbc>
 801506a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015118 <pbuf_take+0xd0>
 801506e:	896b      	ldrh	r3, [r5, #10]
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8015070:	19b9      	adds	r1, r7, r6
 8015072:	6868      	ldr	r0, [r5, #4]
 8015074:	42a3      	cmp	r3, r4
 8015076:	bf28      	it	cs
 8015078:	4623      	movcs	r3, r4
 801507a:	4699      	mov	r9, r3
 801507c:	461a      	mov	r2, r3
 801507e:	f008 fa28 	bl	801d4d2 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 8015082:	682d      	ldr	r5, [r5, #0]
    total_copy_len -= buf_copy_len;
 8015084:	eba4 0409 	sub.w	r4, r4, r9
    copied_total += buf_copy_len;
 8015088:	444e      	add	r6, r9
    total_copy_len -= buf_copy_len;
 801508a:	b2a4      	uxth	r4, r4
    copied_total += buf_copy_len;
 801508c:	b2b6      	uxth	r6, r6
  for (p = buf; total_copy_len != 0; p = p->next) {
 801508e:	b14c      	cbz	r4, 80150a4 <pbuf_take+0x5c>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8015090:	2d00      	cmp	r5, #0
 8015092:	d1ec      	bne.n	801506e <pbuf_take+0x26>
 8015094:	465b      	mov	r3, fp
 8015096:	f240 428e 	movw	r2, #1166	; 0x48e
 801509a:	4651      	mov	r1, sl
 801509c:	4818      	ldr	r0, [pc, #96]	; (8015100 <pbuf_take+0xb8>)
 801509e:	f009 f9a3 	bl	801e3e8 <iprintf>
 80150a2:	e7e4      	b.n	801506e <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80150a4:	45b0      	cmp	r8, r6
 80150a6:	d102      	bne.n	80150ae <pbuf_take+0x66>
 80150a8:	2000      	movs	r0, #0
  return ERR_OK;
}
 80150aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80150ae:	4b15      	ldr	r3, [pc, #84]	; (8015104 <pbuf_take+0xbc>)
 80150b0:	f240 4299 	movw	r2, #1177	; 0x499
 80150b4:	4914      	ldr	r1, [pc, #80]	; (8015108 <pbuf_take+0xc0>)
 80150b6:	4812      	ldr	r0, [pc, #72]	; (8015100 <pbuf_take+0xb8>)
 80150b8:	f009 f996 	bl	801e3e8 <iprintf>
 80150bc:	4620      	mov	r0, r4
}
 80150be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80150c2:	4b10      	ldr	r3, [pc, #64]	; (8015104 <pbuf_take+0xbc>)
 80150c4:	f240 4286 	movw	r2, #1158	; 0x486
 80150c8:	4910      	ldr	r1, [pc, #64]	; (801510c <pbuf_take+0xc4>)
 80150ca:	480d      	ldr	r0, [pc, #52]	; (8015100 <pbuf_take+0xb8>)
 80150cc:	f009 f98c 	bl	801e3e8 <iprintf>
 80150d0:	f04f 30ff 	mov.w	r0, #4294967295
 80150d4:	e7e9      	b.n	80150aa <pbuf_take+0x62>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80150d6:	4b0b      	ldr	r3, [pc, #44]	; (8015104 <pbuf_take+0xbc>)
 80150d8:	f240 4285 	movw	r2, #1157	; 0x485
 80150dc:	490c      	ldr	r1, [pc, #48]	; (8015110 <pbuf_take+0xc8>)
 80150de:	4808      	ldr	r0, [pc, #32]	; (8015100 <pbuf_take+0xb8>)
 80150e0:	f009 f982 	bl	801e3e8 <iprintf>
 80150e4:	f06f 000f 	mvn.w	r0, #15
 80150e8:	e7df      	b.n	80150aa <pbuf_take+0x62>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80150ea:	4b06      	ldr	r3, [pc, #24]	; (8015104 <pbuf_take+0xbc>)
 80150ec:	f240 4284 	movw	r2, #1156	; 0x484
 80150f0:	4908      	ldr	r1, [pc, #32]	; (8015114 <pbuf_take+0xcc>)
 80150f2:	4803      	ldr	r0, [pc, #12]	; (8015100 <pbuf_take+0xb8>)
 80150f4:	f009 f978 	bl	801e3e8 <iprintf>
 80150f8:	f06f 000f 	mvn.w	r0, #15
 80150fc:	e7d5      	b.n	80150aa <pbuf_take+0x62>
 80150fe:	bf00      	nop
 8015100:	08023618 	.word	0x08023618
 8015104:	0803a278 	.word	0x0803a278
 8015108:	0803a3d4 	.word	0x0803a3d4
 801510c:	0803a39c 	.word	0x0803a39c
 8015110:	0803a380 	.word	0x0803a380
 8015114:	0803a368 	.word	0x0803a368
 8015118:	0803a3bc 	.word	0x0803a3bc

0801511c <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801511c:	b390      	cbz	r0, 8015184 <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801511e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015122:	4617      	mov	r7, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 8015124:	8942      	ldrh	r2, [r0, #10]
 8015126:	460e      	mov	r6, r1
 8015128:	4604      	mov	r4, r0
 801512a:	4293      	cmp	r3, r2
 801512c:	d203      	bcs.n	8015136 <pbuf_take_at+0x1a>
 801512e:	e00b      	b.n	8015148 <pbuf_take_at+0x2c>
 8015130:	8962      	ldrh	r2, [r4, #10]
 8015132:	429a      	cmp	r2, r3
 8015134:	d808      	bhi.n	8015148 <pbuf_take_at+0x2c>
    offset_left -= q->len;
 8015136:	1a9b      	subs	r3, r3, r2
    q = q->next;
 8015138:	6824      	ldr	r4, [r4, #0]
    offset_left -= q->len;
 801513a:	b29b      	uxth	r3, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801513c:	2c00      	cmp	r4, #0
 801513e:	d1f7      	bne.n	8015130 <pbuf_take_at+0x14>
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
  }
  return ERR_MEM;
 8015140:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8015148:	8921      	ldrh	r1, [r4, #8]
 801514a:	19da      	adds	r2, r3, r7
 801514c:	4291      	cmp	r1, r2
 801514e:	dbf7      	blt.n	8015140 <pbuf_take_at+0x24>
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 8015150:	8965      	ldrh	r5, [r4, #10]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 8015152:	4631      	mov	r1, r6
 8015154:	6860      	ldr	r0, [r4, #4]
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 8015156:	1aed      	subs	r5, r5, r3
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 8015158:	4418      	add	r0, r3
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 801515a:	42bd      	cmp	r5, r7
 801515c:	bfa8      	it	ge
 801515e:	463d      	movge	r5, r7
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 8015160:	fa1f f885 	uxth.w	r8, r5
 8015164:	4642      	mov	r2, r8
 8015166:	f008 f9b4 	bl	801d4d2 <memcpy>
    remaining_len -= first_copy_len;
 801516a:	1b7a      	subs	r2, r7, r5
 801516c:	b292      	uxth	r2, r2
    if (remaining_len > 0) {
 801516e:	b912      	cbnz	r2, 8015176 <pbuf_take_at+0x5a>
    return ERR_OK;
 8015170:	4610      	mov	r0, r2
}
 8015172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8015176:	eb06 0108 	add.w	r1, r6, r8
 801517a:	6820      	ldr	r0, [r4, #0]
}
 801517c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8015180:	f7ff bf62 	b.w	8015048 <pbuf_take>
  return ERR_MEM;
 8015184:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015188:	4770      	bx	lr
 801518a:	bf00      	nop

0801518c <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801518c:	b158      	cbz	r0, 80151a6 <pbuf_try_get_at+0x1a>
 801518e:	8943      	ldrh	r3, [r0, #10]
 8015190:	4299      	cmp	r1, r3
 8015192:	d203      	bcs.n	801519c <pbuf_try_get_at+0x10>
 8015194:	e00a      	b.n	80151ac <pbuf_try_get_at+0x20>
 8015196:	8943      	ldrh	r3, [r0, #10]
 8015198:	428b      	cmp	r3, r1
 801519a:	d807      	bhi.n	80151ac <pbuf_try_get_at+0x20>
    offset_left -= q->len;
 801519c:	1ac9      	subs	r1, r1, r3
    q = q->next;
 801519e:	6800      	ldr	r0, [r0, #0]
    offset_left -= q->len;
 80151a0:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 80151a2:	2800      	cmp	r0, #0
 80151a4:	d1f7      	bne.n	8015196 <pbuf_try_get_at+0xa>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t*)q->payload)[q_idx];
  }
  return -1;
 80151a6:	f04f 30ff 	mov.w	r0, #4294967295
 80151aa:	4770      	bx	lr
    return ((u8_t*)q->payload)[q_idx];
 80151ac:	6843      	ldr	r3, [r0, #4]
 80151ae:	5c58      	ldrb	r0, [r3, r1]
}
 80151b0:	4770      	bx	lr
 80151b2:	bf00      	nop

080151b4 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 80151b4:	b158      	cbz	r0, 80151ce <pbuf_put_at+0x1a>
 80151b6:	8943      	ldrh	r3, [r0, #10]
 80151b8:	4299      	cmp	r1, r3
 80151ba:	d203      	bcs.n	80151c4 <pbuf_put_at+0x10>
 80151bc:	e008      	b.n	80151d0 <pbuf_put_at+0x1c>
 80151be:	8943      	ldrh	r3, [r0, #10]
 80151c0:	428b      	cmp	r3, r1
 80151c2:	d805      	bhi.n	80151d0 <pbuf_put_at+0x1c>
    offset_left -= q->len;
 80151c4:	1ac9      	subs	r1, r1, r3
    q = q->next;
 80151c6:	6800      	ldr	r0, [r0, #0]
    offset_left -= q->len;
 80151c8:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 80151ca:	2800      	cmp	r0, #0
 80151cc:	d1f7      	bne.n	80151be <pbuf_put_at+0xa>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t*)q->payload)[q_idx] = data;
  }
}
 80151ce:	4770      	bx	lr
    ((u8_t*)q->payload)[q_idx] = data;
 80151d0:	6843      	ldr	r3, [r0, #4]
 80151d2:	545a      	strb	r2, [r3, r1]
}
 80151d4:	4770      	bx	lr
 80151d6:	bf00      	nop

080151d8 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80151d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80151dc:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8015290 <raw_input+0xb8>
{
 80151e0:	4607      	mov	r7, r0
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 80151e2:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8015294 <raw_input+0xbc>
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80151e6:	f8d8 1000 	ldr.w	r1, [r8]
 80151ea:	f8d8 0014 	ldr.w	r0, [r8, #20]
 80151ee:	f006 ff27 	bl	801c040 <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80151f2:	687b      	ldr	r3, [r7, #4]
  pcb = raw_pcbs;
 80151f4:	f8db 4000 	ldr.w	r4, [fp]
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80151f8:	7a5e      	ldrb	r6, [r3, #9]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 80151fa:	2c00      	cmp	r4, #0
 80151fc:	d032      	beq.n	8015264 <raw_input+0x8c>
 80151fe:	4682      	mov	sl, r0
  prev = NULL;
 8015200:	2500      	movs	r5, #0
 8015202:	46b9      	mov	r9, r7
 8015204:	e003      	b.n	801520e <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 8015206:	68e3      	ldr	r3, [r4, #12]
 8015208:	4625      	mov	r5, r4
  while ((eaten == 0) && (pcb != NULL)) {
 801520a:	b35b      	cbz	r3, 8015264 <raw_input+0x8c>
 801520c:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
 801520e:	7c23      	ldrb	r3, [r4, #16]
 8015210:	42b3      	cmp	r3, r6
 8015212:	d1f8      	bne.n	8015206 <raw_input+0x2e>
 8015214:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8015216:	f1ba 0f00 	cmp.w	sl, #0
 801521a:	d019      	beq.n	8015250 <raw_input+0x78>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801521c:	2b00      	cmp	r3, #0
 801521e:	d1f2      	bne.n	8015206 <raw_input+0x2e>
      if (pcb->recv != NULL) {
 8015220:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8015224:	f1bc 0f00 	cmp.w	ip, #0
 8015228:	d0ed      	beq.n	8015206 <raw_input+0x2e>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801522a:	4b15      	ldr	r3, [pc, #84]	; (8015280 <raw_input+0xa8>)
 801522c:	464a      	mov	r2, r9
 801522e:	4621      	mov	r1, r4
 8015230:	69a0      	ldr	r0, [r4, #24]
        void* old_payload = p->payload;
 8015232:	f8d9 7004 	ldr.w	r7, [r9, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8015236:	47e0      	blx	ip
        if (eaten != 0) {
 8015238:	b1b8      	cbz	r0, 801526a <raw_input+0x92>
          if (prev != NULL) {
 801523a:	b135      	cbz	r5, 801524a <raw_input+0x72>
            prev->next = pcb->next;
 801523c:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801523e:	f8db 3000 	ldr.w	r3, [fp]
            prev->next = pcb->next;
 8015242:	60ea      	str	r2, [r5, #12]
            raw_pcbs = pcb;
 8015244:	f8cb 4000 	str.w	r4, [fp]
            pcb->next = raw_pcbs;
 8015248:	60e3      	str	r3, [r4, #12]
  prev = NULL;
 801524a:	2001      	movs	r0, #1
  }
  return eaten;
}
 801524c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_addr_isany(&pcb->local_ip) ||
 8015250:	2b00      	cmp	r3, #0
 8015252:	d0e5      	beq.n	8015220 <raw_input+0x48>
 8015254:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8015258:	429a      	cmp	r2, r3
 801525a:	d0e1      	beq.n	8015220 <raw_input+0x48>
    pcb = pcb->next;
 801525c:	68e3      	ldr	r3, [r4, #12]
 801525e:	4625      	mov	r5, r4
  while ((eaten == 0) && (pcb != NULL)) {
 8015260:	2b00      	cmp	r3, #0
 8015262:	d1d3      	bne.n	801520c <raw_input+0x34>
  u8_t eaten = 0;
 8015264:	2000      	movs	r0, #0
}
 8015266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801526a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801526e:	42bb      	cmp	r3, r7
 8015270:	d0c9      	beq.n	8015206 <raw_input+0x2e>
 8015272:	4b04      	ldr	r3, [pc, #16]	; (8015284 <raw_input+0xac>)
 8015274:	22b6      	movs	r2, #182	; 0xb6
 8015276:	4904      	ldr	r1, [pc, #16]	; (8015288 <raw_input+0xb0>)
 8015278:	4804      	ldr	r0, [pc, #16]	; (801528c <raw_input+0xb4>)
 801527a:	f009 f8b5 	bl	801e3e8 <iprintf>
 801527e:	e7c2      	b.n	8015206 <raw_input+0x2e>
 8015280:	20025a84 	.word	0x20025a84
 8015284:	0803a3ec 	.word	0x0803a3ec
 8015288:	0803a41c 	.word	0x0803a41c
 801528c:	08023618 	.word	0x08023618
 8015290:	20025a74 	.word	0x20025a74
 8015294:	200214a4 	.word	0x200214a4

08015298 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015298:	b1a8      	cbz	r0, 80152c6 <raw_netif_ip_addr_changed+0x2e>
 801529a:	6802      	ldr	r2, [r0, #0]
 801529c:	b199      	cbz	r1, 80152c6 <raw_netif_ip_addr_changed+0x2e>
 801529e:	b192      	cbz	r2, 80152c6 <raw_netif_ip_addr_changed+0x2e>
 80152a0:	680b      	ldr	r3, [r1, #0]
 80152a2:	b183      	cbz	r3, 80152c6 <raw_netif_ip_addr_changed+0x2e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80152a4:	4b08      	ldr	r3, [pc, #32]	; (80152c8 <raw_netif_ip_addr_changed+0x30>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	b16b      	cbz	r3, 80152c6 <raw_netif_ip_addr_changed+0x2e>
{
 80152aa:	b410      	push	{r4}
 80152ac:	e000      	b.n	80152b0 <raw_netif_ip_addr_changed+0x18>
 80152ae:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 80152b0:	681c      	ldr	r4, [r3, #0]
 80152b2:	4294      	cmp	r4, r2
 80152b4:	d101      	bne.n	80152ba <raw_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 80152b6:	680a      	ldr	r2, [r1, #0]
 80152b8:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80152ba:	68db      	ldr	r3, [r3, #12]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d1f6      	bne.n	80152ae <raw_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 80152c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152c4:	4770      	bx	lr
 80152c6:	4770      	bx	lr
 80152c8:	200214a4 	.word	0x200214a4

080152cc <stats_init>:
void
stats_init(void)
{
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 80152cc:	4b02      	ldr	r3, [pc, #8]	; (80152d8 <stats_init+0xc>)
 80152ce:	4a03      	ldr	r2, [pc, #12]	; (80152dc <stats_init+0x10>)
 80152d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80152d4:	4770      	bx	lr
 80152d6:	bf00      	nop
 80152d8:	20035384 	.word	0x20035384
 80152dc:	08022fd4 	.word	0x08022fd4

080152e0 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
 80152e0:	b510      	push	{r4, lr}
 80152e2:	4604      	mov	r4, r0
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
 80152e4:	481a      	ldr	r0, [pc, #104]	; (8015350 <stats_display_proto+0x70>)
 80152e6:	f009 f87f 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
 80152ea:	481a      	ldr	r0, [pc, #104]	; (8015354 <stats_display_proto+0x74>)
 80152ec:	8821      	ldrh	r1, [r4, #0]
 80152ee:	f009 f87b 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
 80152f2:	8861      	ldrh	r1, [r4, #2]
 80152f4:	4818      	ldr	r0, [pc, #96]	; (8015358 <stats_display_proto+0x78>)
 80152f6:	f009 f877 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
 80152fa:	88a1      	ldrh	r1, [r4, #4]
 80152fc:	4817      	ldr	r0, [pc, #92]	; (801535c <stats_display_proto+0x7c>)
 80152fe:	f009 f873 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
 8015302:	88e1      	ldrh	r1, [r4, #6]
 8015304:	4816      	ldr	r0, [pc, #88]	; (8015360 <stats_display_proto+0x80>)
 8015306:	f009 f86f 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
 801530a:	8921      	ldrh	r1, [r4, #8]
 801530c:	4815      	ldr	r0, [pc, #84]	; (8015364 <stats_display_proto+0x84>)
 801530e:	f009 f86b 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
 8015312:	8961      	ldrh	r1, [r4, #10]
 8015314:	4814      	ldr	r0, [pc, #80]	; (8015368 <stats_display_proto+0x88>)
 8015316:	f009 f867 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
 801531a:	89a1      	ldrh	r1, [r4, #12]
 801531c:	4813      	ldr	r0, [pc, #76]	; (801536c <stats_display_proto+0x8c>)
 801531e:	f009 f863 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
 8015322:	89e1      	ldrh	r1, [r4, #14]
 8015324:	4812      	ldr	r0, [pc, #72]	; (8015370 <stats_display_proto+0x90>)
 8015326:	f009 f85f 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
 801532a:	8a21      	ldrh	r1, [r4, #16]
 801532c:	4811      	ldr	r0, [pc, #68]	; (8015374 <stats_display_proto+0x94>)
 801532e:	f009 f85b 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
 8015332:	8a61      	ldrh	r1, [r4, #18]
 8015334:	4810      	ldr	r0, [pc, #64]	; (8015378 <stats_display_proto+0x98>)
 8015336:	f009 f857 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
 801533a:	8aa1      	ldrh	r1, [r4, #20]
 801533c:	480f      	ldr	r0, [pc, #60]	; (801537c <stats_display_proto+0x9c>)
 801533e:	f009 f853 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
 8015342:	8ae1      	ldrh	r1, [r4, #22]
 8015344:	480e      	ldr	r0, [pc, #56]	; (8015380 <stats_display_proto+0xa0>)
}
 8015346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
 801534a:	f009 b84d 	b.w	801e3e8 <iprintf>
 801534e:	bf00      	nop
 8015350:	0803a4dc 	.word	0x0803a4dc
 8015354:	0803a4e4 	.word	0x0803a4e4
 8015358:	0803a4f0 	.word	0x0803a4f0
 801535c:	0803a4fc 	.word	0x0803a4fc
 8015360:	0803a508 	.word	0x0803a508
 8015364:	0803a514 	.word	0x0803a514
 8015368:	0803a524 	.word	0x0803a524
 801536c:	0803a534 	.word	0x0803a534
 8015370:	0803a544 	.word	0x0803a544
 8015374:	0803a554 	.word	0x0803a554
 8015378:	0803a564 	.word	0x0803a564
 801537c:	0803a558 	.word	0x0803a558
 8015380:	0803a574 	.word	0x0803a574

08015384 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
 8015384:	b510      	push	{r4, lr}
 8015386:	4604      	mov	r4, r0
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
 8015388:	480a      	ldr	r0, [pc, #40]	; (80153b4 <stats_display_mem+0x30>)
 801538a:	f009 f82d 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
 801538e:	480a      	ldr	r0, [pc, #40]	; (80153b8 <stats_display_mem+0x34>)
 8015390:	88e1      	ldrh	r1, [r4, #6]
 8015392:	f009 f829 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
 8015396:	8921      	ldrh	r1, [r4, #8]
 8015398:	4808      	ldr	r0, [pc, #32]	; (80153bc <stats_display_mem+0x38>)
 801539a:	f009 f825 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
 801539e:	8961      	ldrh	r1, [r4, #10]
 80153a0:	4807      	ldr	r0, [pc, #28]	; (80153c0 <stats_display_mem+0x3c>)
 80153a2:	f009 f821 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
 80153a6:	88a1      	ldrh	r1, [r4, #4]
 80153a8:	4806      	ldr	r0, [pc, #24]	; (80153c4 <stats_display_mem+0x40>)
}
 80153aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
 80153ae:	f009 b81b 	b.w	801e3e8 <iprintf>
 80153b2:	bf00      	nop
 80153b4:	0803a49c 	.word	0x0803a49c
 80153b8:	0803a4a8 	.word	0x0803a4a8
 80153bc:	0803a4b8 	.word	0x0803a4b8
 80153c0:	0803a4c4 	.word	0x0803a4c4
 80153c4:	0803a4d0 	.word	0x0803a4d0

080153c8 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
 80153c8:	b510      	push	{r4, lr}
 80153ca:	4604      	mov	r4, r0
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
 80153cc:	4814      	ldr	r0, [pc, #80]	; (8015420 <stats_display_sys+0x58>)
 80153ce:	f009 f80b 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
 80153d2:	4814      	ldr	r0, [pc, #80]	; (8015424 <stats_display_sys+0x5c>)
 80153d4:	8821      	ldrh	r1, [r4, #0]
 80153d6:	f009 f807 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
 80153da:	8861      	ldrh	r1, [r4, #2]
 80153dc:	4812      	ldr	r0, [pc, #72]	; (8015428 <stats_display_sys+0x60>)
 80153de:	f009 f803 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
 80153e2:	88a1      	ldrh	r1, [r4, #4]
 80153e4:	4811      	ldr	r0, [pc, #68]	; (801542c <stats_display_sys+0x64>)
 80153e6:	f008 ffff 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
 80153ea:	88e1      	ldrh	r1, [r4, #6]
 80153ec:	4810      	ldr	r0, [pc, #64]	; (8015430 <stats_display_sys+0x68>)
 80153ee:	f008 fffb 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
 80153f2:	8921      	ldrh	r1, [r4, #8]
 80153f4:	480f      	ldr	r0, [pc, #60]	; (8015434 <stats_display_sys+0x6c>)
 80153f6:	f008 fff7 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
 80153fa:	8961      	ldrh	r1, [r4, #10]
 80153fc:	480e      	ldr	r0, [pc, #56]	; (8015438 <stats_display_sys+0x70>)
 80153fe:	f008 fff3 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
 8015402:	89a1      	ldrh	r1, [r4, #12]
 8015404:	480d      	ldr	r0, [pc, #52]	; (801543c <stats_display_sys+0x74>)
 8015406:	f008 ffef 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
 801540a:	89e1      	ldrh	r1, [r4, #14]
 801540c:	480c      	ldr	r0, [pc, #48]	; (8015440 <stats_display_sys+0x78>)
 801540e:	f008 ffeb 	bl	801e3e8 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
 8015412:	8a21      	ldrh	r1, [r4, #16]
 8015414:	480b      	ldr	r0, [pc, #44]	; (8015444 <stats_display_sys+0x7c>)
}
 8015416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
 801541a:	f008 bfe5 	b.w	801e3e8 <iprintf>
 801541e:	bf00      	nop
 8015420:	0803a584 	.word	0x0803a584
 8015424:	0803a58c 	.word	0x0803a58c
 8015428:	0803a5a0 	.word	0x0803a5a0
 801542c:	0803a5b4 	.word	0x0803a5b4
 8015430:	0803a5c8 	.word	0x0803a5c8
 8015434:	0803a5dc 	.word	0x0803a5dc
 8015438:	0803a5f0 	.word	0x0803a5f0
 801543c:	0803a604 	.word	0x0803a604
 8015440:	0803a618 	.word	0x0803a618
 8015444:	0803a62c 	.word	0x0803a62c

08015448 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
 8015448:	b538      	push	{r3, r4, r5, lr}
  s16_t i;

  LINK_STATS_DISPLAY();
 801544a:	4919      	ldr	r1, [pc, #100]	; (80154b0 <stats_display+0x68>)
 801544c:	4819      	ldr	r0, [pc, #100]	; (80154b4 <stats_display+0x6c>)
 801544e:	f7ff ff47 	bl	80152e0 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
 8015452:	4919      	ldr	r1, [pc, #100]	; (80154b8 <stats_display+0x70>)
 8015454:	4819      	ldr	r0, [pc, #100]	; (80154bc <stats_display+0x74>)
 8015456:	4c1a      	ldr	r4, [pc, #104]	; (80154c0 <stats_display+0x78>)
 8015458:	f7ff ff42 	bl	80152e0 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
 801545c:	4919      	ldr	r1, [pc, #100]	; (80154c4 <stats_display+0x7c>)
 801545e:	481a      	ldr	r0, [pc, #104]	; (80154c8 <stats_display+0x80>)
 8015460:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8015464:	f7ff ff3c 	bl	80152e0 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
 8015468:	4918      	ldr	r1, [pc, #96]	; (80154cc <stats_display+0x84>)
 801546a:	4819      	ldr	r0, [pc, #100]	; (80154d0 <stats_display+0x88>)
 801546c:	f7ff ff38 	bl	80152e0 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
 8015470:	4918      	ldr	r1, [pc, #96]	; (80154d4 <stats_display+0x8c>)
 8015472:	f1a4 0058 	sub.w	r0, r4, #88	; 0x58
 8015476:	f7ff ff33 	bl	80152e0 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
 801547a:	4917      	ldr	r1, [pc, #92]	; (80154d8 <stats_display+0x90>)
 801547c:	f1a4 0040 	sub.w	r0, r4, #64	; 0x40
 8015480:	f7ff ff2e 	bl	80152e0 <stats_display_proto>
  TCP_STATS_DISPLAY();
 8015484:	4915      	ldr	r1, [pc, #84]	; (80154dc <stats_display+0x94>)
 8015486:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
 801548a:	f7ff ff29 	bl	80152e0 <stats_display_proto>
  MEM_STATS_DISPLAY();
 801548e:	4914      	ldr	r1, [pc, #80]	; (80154e0 <stats_display+0x98>)
 8015490:	f1a4 0010 	sub.w	r0, r4, #16
 8015494:	f7ff ff76 	bl	8015384 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
    MEMP_STATS_DISPLAY(i);
 8015498:	f854 0b04 	ldr.w	r0, [r4], #4
    stats_display_mem(mem, mem->name);
 801549c:	6801      	ldr	r1, [r0, #0]
 801549e:	f7ff ff71 	bl	8015384 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
 80154a2:	42ac      	cmp	r4, r5
 80154a4:	d1f8      	bne.n	8015498 <stats_display+0x50>
  }
  SYS_STATS_DISPLAY();
 80154a6:	480f      	ldr	r0, [pc, #60]	; (80154e4 <stats_display+0x9c>)
}
 80154a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_STATS_DISPLAY();
 80154ac:	f7ff bf8c 	b.w	80153c8 <stats_display_sys>
 80154b0:	0803a468 	.word	0x0803a468
 80154b4:	20035384 	.word	0x20035384
 80154b8:	0803a470 	.word	0x0803a470
 80154bc:	2003539c 	.word	0x2003539c
 80154c0:	2003543c 	.word	0x2003543c
 80154c4:	0803a478 	.word	0x0803a478
 80154c8:	200353b4 	.word	0x200353b4
 80154cc:	0803a480 	.word	0x0803a480
 80154d0:	200353cc 	.word	0x200353cc
 80154d4:	0803a484 	.word	0x0803a484
 80154d8:	0803a48c 	.word	0x0803a48c
 80154dc:	0803a490 	.word	0x0803a490
 80154e0:	0803a494 	.word	0x0803a494
 80154e4:	2003547c 	.word	0x2003547c

080154e8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80154e8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8015550 <tcp_new_port+0x68>
 80154ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80154f0:	b4f0      	push	{r4, r5, r6, r7}
 80154f2:	f8bc 0000 	ldrh.w	r0, [ip]
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80154f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80154fa:	4f12      	ldr	r7, [pc, #72]	; (8015544 <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80154fc:	4d12      	ldr	r5, [pc, #72]	; (8015548 <tcp_new_port+0x60>)
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80154fe:	42b0      	cmp	r0, r6
 8015500:	d01c      	beq.n	801553c <tcp_new_port+0x54>
 8015502:	3001      	adds	r0, #1
 8015504:	b280      	uxth	r0, r0
 8015506:	4c11      	ldr	r4, [pc, #68]	; (801554c <tcp_new_port+0x64>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015508:	462b      	mov	r3, r5
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	b913      	cbnz	r3, 8015514 <tcp_new_port+0x2c>
 801550e:	e00c      	b.n	801552a <tcp_new_port+0x42>
 8015510:	68db      	ldr	r3, [r3, #12]
 8015512:	b153      	cbz	r3, 801552a <tcp_new_port+0x42>
      if (pcb->local_port == tcp_port) {
 8015514:	8ada      	ldrh	r2, [r3, #22]
 8015516:	4282      	cmp	r2, r0
 8015518:	d1fa      	bne.n	8015510 <tcp_new_port+0x28>
 801551a:	3901      	subs	r1, #1
 801551c:	b289      	uxth	r1, r1
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801551e:	2900      	cmp	r1, #0
 8015520:	d1ed      	bne.n	80154fe <tcp_new_port+0x16>
 8015522:	f8ac 0000 	strh.w	r0, [ip]
          return 0;
 8015526:	4608      	mov	r0, r1
 8015528:	e006      	b.n	8015538 <tcp_new_port+0x50>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801552a:	42a7      	cmp	r7, r4
 801552c:	d002      	beq.n	8015534 <tcp_new_port+0x4c>
 801552e:	f854 3b04 	ldr.w	r3, [r4], #4
 8015532:	e7ea      	b.n	801550a <tcp_new_port+0x22>
 8015534:	f8ac 0000 	strh.w	r0, [ip]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8015538:	bcf0      	pop	{r4, r5, r6, r7}
 801553a:	4770      	bx	lr
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801553c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8015540:	e7e1      	b.n	8015506 <tcp_new_port+0x1e>
 8015542:	bf00      	nop
 8015544:	0803a790 	.word	0x0803a790
 8015548:	2003549c 	.word	0x2003549c
 801554c:	0803a784 	.word	0x0803a784
 8015550:	20000444 	.word	0x20000444

08015554 <tcp_close_shutdown_fin>:
{
 8015554:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015556:	4604      	mov	r4, r0
 8015558:	b310      	cbz	r0, 80155a0 <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801555a:	7d23      	ldrb	r3, [r4, #20]
 801555c:	2b04      	cmp	r3, #4
 801555e:	d005      	beq.n	801556c <tcp_close_shutdown_fin+0x18>
 8015560:	2b07      	cmp	r3, #7
 8015562:	d00e      	beq.n	8015582 <tcp_close_shutdown_fin+0x2e>
 8015564:	2b03      	cmp	r3, #3
 8015566:	d001      	beq.n	801556c <tcp_close_shutdown_fin+0x18>
    return ERR_OK;
 8015568:	2000      	movs	r0, #0
}
 801556a:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 801556c:	4620      	mov	r0, r4
 801556e:	f003 f9fd 	bl	801896c <tcp_send_fin>
    if (err == ERR_OK) {
 8015572:	b950      	cbnz	r0, 801558a <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8015574:	2305      	movs	r3, #5
 8015576:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8015578:	4620      	mov	r0, r4
 801557a:	f003 fa69 	bl	8018a50 <tcp_output>
 801557e:	2000      	movs	r0, #0
}
 8015580:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8015582:	4620      	mov	r0, r4
 8015584:	f003 f9f2 	bl	801896c <tcp_send_fin>
    if (err == ERR_OK) {
 8015588:	b138      	cbz	r0, 801559a <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801558a:	1c43      	adds	r3, r0, #1
 801558c:	d1ed      	bne.n	801556a <tcp_close_shutdown_fin+0x16>
    pcb->flags |= TF_CLOSEPEND;
 801558e:	7ea3      	ldrb	r3, [r4, #26]
    return ERR_OK;
 8015590:	2000      	movs	r0, #0
    pcb->flags |= TF_CLOSEPEND;
 8015592:	f043 0308 	orr.w	r3, r3, #8
 8015596:	76a3      	strb	r3, [r4, #26]
}
 8015598:	bd10      	pop	{r4, pc}
      pcb->state = LAST_ACK;
 801559a:	2309      	movs	r3, #9
 801559c:	7523      	strb	r3, [r4, #20]
 801559e:	e7eb      	b.n	8015578 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80155a0:	4b03      	ldr	r3, [pc, #12]	; (80155b0 <tcp_close_shutdown_fin+0x5c>)
 80155a2:	f240 124d 	movw	r2, #333	; 0x14d
 80155a6:	4903      	ldr	r1, [pc, #12]	; (80155b4 <tcp_close_shutdown_fin+0x60>)
 80155a8:	4803      	ldr	r0, [pc, #12]	; (80155b8 <tcp_close_shutdown_fin+0x64>)
 80155aa:	f008 ff1d 	bl	801e3e8 <iprintf>
 80155ae:	e7d4      	b.n	801555a <tcp_close_shutdown_fin+0x6>
 80155b0:	0803a6c8 	.word	0x0803a6c8
 80155b4:	0803a6f8 	.word	0x0803a6f8
 80155b8:	08023618 	.word	0x08023618

080155bc <tcp_init>:
}
 80155bc:	4770      	bx	lr
 80155be:	bf00      	nop

080155c0 <tcp_bind>:
{
 80155c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80155c2:	4d23      	ldr	r5, [pc, #140]	; (8015650 <tcp_bind+0x90>)
 80155c4:	2900      	cmp	r1, #0
 80155c6:	bf18      	it	ne
 80155c8:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80155ca:	2800      	cmp	r0, #0
 80155cc:	d032      	beq.n	8015634 <tcp_bind+0x74>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80155ce:	7d01      	ldrb	r1, [r0, #20]
 80155d0:	4606      	mov	r6, r0
 80155d2:	2900      	cmp	r1, #0
 80155d4:	d131      	bne.n	801563a <tcp_bind+0x7a>
  if (port == 0) {
 80155d6:	b312      	cbz	r2, 801561e <tcp_bind+0x5e>
 80155d8:	4b1e      	ldr	r3, [pc, #120]	; (8015654 <tcp_bind+0x94>)
 80155da:	4f1f      	ldr	r7, [pc, #124]	; (8015658 <tcp_bind+0x98>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	b913      	cbnz	r3, 80155e6 <tcp_bind+0x26>
 80155e0:	e00e      	b.n	8015600 <tcp_bind+0x40>
 80155e2:	68db      	ldr	r3, [r3, #12]
 80155e4:	b163      	cbz	r3, 8015600 <tcp_bind+0x40>
        if (cpcb->local_port == port) {
 80155e6:	8ad8      	ldrh	r0, [r3, #22]
 80155e8:	4290      	cmp	r0, r2
 80155ea:	d1fa      	bne.n	80155e2 <tcp_bind+0x22>
                (ip_addr_isany(&cpcb->local_ip) ||
 80155ec:	6818      	ldr	r0, [r3, #0]
 80155ee:	b120      	cbz	r0, 80155fa <tcp_bind+0x3a>
                ip_addr_isany(ipaddr) ||
 80155f0:	682c      	ldr	r4, [r5, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80155f2:	42a0      	cmp	r0, r4
 80155f4:	d001      	beq.n	80155fa <tcp_bind+0x3a>
 80155f6:	2c00      	cmp	r4, #0
 80155f8:	d1f3      	bne.n	80155e2 <tcp_bind+0x22>
              return ERR_USE;
 80155fa:	f06f 0007 	mvn.w	r0, #7
}
 80155fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8015600:	3101      	adds	r1, #1
 8015602:	2904      	cmp	r1, #4
 8015604:	d113      	bne.n	801562e <tcp_bind+0x6e>
  if (!ip_addr_isany(ipaddr)) {
 8015606:	682b      	ldr	r3, [r5, #0]
 8015608:	b103      	cbz	r3, 801560c <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801560a:	6033      	str	r3, [r6, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801560c:	4b13      	ldr	r3, [pc, #76]	; (801565c <tcp_bind+0x9c>)
  pcb->local_port = port;
 801560e:	82f2      	strh	r2, [r6, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015610:	681a      	ldr	r2, [r3, #0]
 8015612:	601e      	str	r6, [r3, #0]
 8015614:	60f2      	str	r2, [r6, #12]
 8015616:	f003 fded 	bl	80191f4 <tcp_timer_needed>
  return ERR_OK;
 801561a:	2000      	movs	r0, #0
}
 801561c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801561e:	f7ff ff63 	bl	80154e8 <tcp_new_port>
    if (port == 0) {
 8015622:	4602      	mov	r2, r0
 8015624:	2800      	cmp	r0, #0
 8015626:	d1ee      	bne.n	8015606 <tcp_bind+0x46>
      return ERR_BUF;
 8015628:	f06f 0001 	mvn.w	r0, #1
}
 801562c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801562e:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 8015632:	e7d3      	b.n	80155dc <tcp_bind+0x1c>
    return ERR_VAL;
 8015634:	f06f 0005 	mvn.w	r0, #5
}
 8015638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801563a:	4b09      	ldr	r3, [pc, #36]	; (8015660 <tcp_bind+0xa0>)
 801563c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8015640:	4908      	ldr	r1, [pc, #32]	; (8015664 <tcp_bind+0xa4>)
 8015642:	4809      	ldr	r0, [pc, #36]	; (8015668 <tcp_bind+0xa8>)
 8015644:	f008 fed0 	bl	801e3e8 <iprintf>
 8015648:	f06f 0005 	mvn.w	r0, #5
}
 801564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801564e:	bf00      	nop
 8015650:	0803bb0c 	.word	0x0803bb0c
 8015654:	2003549c 	.word	0x2003549c
 8015658:	0803a780 	.word	0x0803a780
 801565c:	200354a0 	.word	0x200354a0
 8015660:	0803a6c8 	.word	0x0803a6c8
 8015664:	0803a684 	.word	0x0803a684
 8015668:	08023618 	.word	0x08023618

0801566c <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801566c:	7d03      	ldrb	r3, [r0, #20]
{
 801566e:	b570      	push	{r4, r5, r6, lr}
 8015670:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015672:	2b00      	cmp	r3, #0
 8015674:	d146      	bne.n	8015704 <tcp_listen_with_backlog_and_err+0x98>
 8015676:	4605      	mov	r5, r0
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015678:	f44f 7233 	mov.w	r2, #716	; 0x2cc
 801567c:	4927      	ldr	r1, [pc, #156]	; (801571c <tcp_listen_with_backlog_and_err+0xb0>)
 801567e:	2003      	movs	r0, #3
 8015680:	f7fe ff46 	bl	8014510 <memp_malloc_fn>
  if (lpcb == NULL) {
 8015684:	4604      	mov	r4, r0
 8015686:	2800      	cmp	r0, #0
 8015688:	d033      	beq.n	80156f2 <tcp_listen_with_backlog_and_err+0x86>
  lpcb->callback_arg = pcb->callback_arg;
 801568a:	6929      	ldr	r1, [r5, #16]
  lpcb->state = LISTEN;
 801568c:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 801568e:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->callback_arg = pcb->callback_arg;
 8015690:	6101      	str	r1, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8015692:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8015694:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 8015696:	7d6a      	ldrb	r2, [r5, #21]
 8015698:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801569a:	7a2a      	ldrb	r2, [r5, #8]
 801569c:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 801569e:	7aaa      	ldrb	r2, [r5, #10]
 80156a0:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 80156a2:	7a6a      	ldrb	r2, [r5, #9]
 80156a4:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80156a6:	682a      	ldr	r2, [r5, #0]
 80156a8:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 80156aa:	b18b      	cbz	r3, 80156d0 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80156ac:	4b1c      	ldr	r3, [pc, #112]	; (8015720 <tcp_listen_with_backlog_and_err+0xb4>)
 80156ae:	681a      	ldr	r2, [r3, #0]
 80156b0:	42aa      	cmp	r2, r5
 80156b2:	d009      	beq.n	80156c8 <tcp_listen_with_backlog_and_err+0x5c>
 80156b4:	b152      	cbz	r2, 80156cc <tcp_listen_with_backlog_and_err+0x60>
 80156b6:	68d3      	ldr	r3, [r2, #12]
 80156b8:	429d      	cmp	r5, r3
 80156ba:	d01d      	beq.n	80156f8 <tcp_listen_with_backlog_and_err+0x8c>
 80156bc:	b133      	cbz	r3, 80156cc <tcp_listen_with_backlog_and_err+0x60>
 80156be:	68da      	ldr	r2, [r3, #12]
 80156c0:	42aa      	cmp	r2, r5
 80156c2:	d01a      	beq.n	80156fa <tcp_listen_with_backlog_and_err+0x8e>
 80156c4:	4613      	mov	r3, r2
 80156c6:	e7f9      	b.n	80156bc <tcp_listen_with_backlog_and_err+0x50>
 80156c8:	68ea      	ldr	r2, [r5, #12]
 80156ca:	601a      	str	r2, [r3, #0]
 80156cc:	2300      	movs	r3, #0
 80156ce:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 80156d0:	4629      	mov	r1, r5
 80156d2:	2002      	movs	r0, #2
 80156d4:	f7fe ff40 	bl	8014558 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80156d8:	4b12      	ldr	r3, [pc, #72]	; (8015724 <tcp_listen_with_backlog_and_err+0xb8>)
  lpcb->accept = tcp_accept_null;
 80156da:	4913      	ldr	r1, [pc, #76]	; (8015728 <tcp_listen_with_backlog_and_err+0xbc>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80156dc:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 80156de:	61a1      	str	r1, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80156e0:	60e2      	str	r2, [r4, #12]
 80156e2:	601c      	str	r4, [r3, #0]
 80156e4:	f003 fd86 	bl	80191f4 <tcp_timer_needed>
  res = ERR_OK;
 80156e8:	2300      	movs	r3, #0
  if (err != NULL) {
 80156ea:	b106      	cbz	r6, 80156ee <tcp_listen_with_backlog_and_err+0x82>
    *err = res;
 80156ec:	7033      	strb	r3, [r6, #0]
}
 80156ee:	4620      	mov	r0, r4
 80156f0:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 80156f2:	f04f 33ff 	mov.w	r3, #4294967295
 80156f6:	e7f8      	b.n	80156ea <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80156f8:	4613      	mov	r3, r2
 80156fa:	68ea      	ldr	r2, [r5, #12]
 80156fc:	60da      	str	r2, [r3, #12]
 80156fe:	2300      	movs	r3, #0
 8015700:	60eb      	str	r3, [r5, #12]
 8015702:	e7e5      	b.n	80156d0 <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015704:	4b05      	ldr	r3, [pc, #20]	; (801571c <tcp_listen_with_backlog_and_err+0xb0>)
 8015706:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 801570a:	4908      	ldr	r1, [pc, #32]	; (801572c <tcp_listen_with_backlog_and_err+0xc0>)
  struct tcp_pcb_listen *lpcb = NULL;
 801570c:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801570e:	4808      	ldr	r0, [pc, #32]	; (8015730 <tcp_listen_with_backlog_and_err+0xc4>)
 8015710:	f008 fe6a 	bl	801e3e8 <iprintf>
 8015714:	f06f 030e 	mvn.w	r3, #14
 8015718:	e7e7      	b.n	80156ea <tcp_listen_with_backlog_and_err+0x7e>
 801571a:	bf00      	nop
 801571c:	0803a6c8 	.word	0x0803a6c8
 8015720:	200354a0 	.word	0x200354a0
 8015724:	2003549c 	.word	0x2003549c
 8015728:	0801642d 	.word	0x0801642d
 801572c:	0803a75c 	.word	0x0803a75c
 8015730:	08023618 	.word	0x08023618

08015734 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8015734:	2200      	movs	r2, #0
 8015736:	f7ff bf99 	b.w	801566c <tcp_listen_with_backlog_and_err>
 801573a:	bf00      	nop

0801573c <tcp_update_rcv_ann_wnd>:
{
 801573c:	b538      	push	{r3, r4, r5, lr}
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801573e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
{
 8015740:	4603      	mov	r3, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015742:	8d04      	ldrh	r4, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015744:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015746:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015748:	1a60      	subs	r0, r4, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801574a:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801574e:	4428      	add	r0, r5
 8015750:	bf94      	ite	ls
 8015752:	1a82      	subls	r2, r0, r2
 8015754:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8015758:	2a00      	cmp	r2, #0
 801575a:	db01      	blt.n	8015760 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801575c:	855c      	strh	r4, [r3, #42]	; 0x2a
}
 801575e:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015760:	1a6a      	subs	r2, r5, r1
 8015762:	2a00      	cmp	r2, #0
 8015764:	dd02      	ble.n	801576c <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8015766:	2000      	movs	r0, #0
 8015768:	8558      	strh	r0, [r3, #42]	; 0x2a
}
 801576a:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801576c:	1b4d      	subs	r5, r1, r5
 801576e:	461c      	mov	r4, r3
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015770:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8015774:	d202      	bcs.n	801577c <tcp_update_rcv_ann_wnd+0x40>
    return 0;
 8015776:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015778:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801577a:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801577c:	4b03      	ldr	r3, [pc, #12]	; (801578c <tcp_update_rcv_ann_wnd+0x50>)
 801577e:	f44f 7242 	mov.w	r2, #776	; 0x308
 8015782:	4903      	ldr	r1, [pc, #12]	; (8015790 <tcp_update_rcv_ann_wnd+0x54>)
 8015784:	4803      	ldr	r0, [pc, #12]	; (8015794 <tcp_update_rcv_ann_wnd+0x58>)
 8015786:	f008 fe2f 	bl	801e3e8 <iprintf>
 801578a:	e7f4      	b.n	8015776 <tcp_update_rcv_ann_wnd+0x3a>
 801578c:	0803a6c8 	.word	0x0803a6c8
 8015790:	0803aa00 	.word	0x0803aa00
 8015794:	08023618 	.word	0x08023618

08015798 <tcp_recved>:
{
 8015798:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801579a:	7d03      	ldrb	r3, [r0, #20]
{
 801579c:	4605      	mov	r5, r0
 801579e:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d023      	beq.n	80157ec <tcp_recved+0x54>
  pcb->rcv_wnd += len;
 80157a4:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 80157a6:	4421      	add	r1, r4
 80157a8:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80157aa:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 80157ae:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80157b0:	d80a      	bhi.n	80157c8 <tcp_recved+0x30>
  } else if (pcb->rcv_wnd == 0) {
 80157b2:	b131      	cbz	r1, 80157c2 <tcp_recved+0x2a>
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80157b4:	4628      	mov	r0, r5
 80157b6:	f7ff ffc1 	bl	801573c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80157ba:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80157be:	da0c      	bge.n	80157da <tcp_recved+0x42>
}
 80157c0:	bd38      	pop	{r3, r4, r5, pc}
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80157c2:	7d2b      	ldrb	r3, [r5, #20]
 80157c4:	2b07      	cmp	r3, #7
 80157c6:	d119      	bne.n	80157fc <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80157c8:	f44f 6306 	mov.w	r3, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80157cc:	4628      	mov	r0, r5
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80157ce:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80157d0:	f7ff ffb4 	bl	801573c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80157d4:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80157d8:	dbf2      	blt.n	80157c0 <tcp_recved+0x28>
    tcp_ack_now(pcb);
 80157da:	7eab      	ldrb	r3, [r5, #26]
    tcp_output(pcb);
 80157dc:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 80157de:	f043 0302 	orr.w	r3, r3, #2
 80157e2:	76ab      	strb	r3, [r5, #26]
}
 80157e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 80157e8:	f003 b932 	b.w	8018a50 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80157ec:	4b08      	ldr	r3, [pc, #32]	; (8015810 <tcp_recved+0x78>)
 80157ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80157f2:	4908      	ldr	r1, [pc, #32]	; (8015814 <tcp_recved+0x7c>)
 80157f4:	4808      	ldr	r0, [pc, #32]	; (8015818 <tcp_recved+0x80>)
 80157f6:	f008 fdf7 	bl	801e3e8 <iprintf>
 80157fa:	e7d3      	b.n	80157a4 <tcp_recved+0xc>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80157fc:	2b09      	cmp	r3, #9
 80157fe:	d0e3      	beq.n	80157c8 <tcp_recved+0x30>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8015800:	4b03      	ldr	r3, [pc, #12]	; (8015810 <tcp_recved+0x78>)
 8015802:	f240 322d 	movw	r2, #813	; 0x32d
 8015806:	4905      	ldr	r1, [pc, #20]	; (801581c <tcp_recved+0x84>)
 8015808:	4803      	ldr	r0, [pc, #12]	; (8015818 <tcp_recved+0x80>)
 801580a:	f008 fded 	bl	801e3e8 <iprintf>
 801580e:	e7d1      	b.n	80157b4 <tcp_recved+0x1c>
 8015810:	0803a6c8 	.word	0x0803a6c8
 8015814:	0803a82c 	.word	0x0803a82c
 8015818:	08023618 	.word	0x08023618
 801581c:	0803a854 	.word	0x0803a854

08015820 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 8015820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8015822:	2800      	cmp	r0, #0
 8015824:	d07b      	beq.n	801591e <tcp_connect+0xfe>
 8015826:	2900      	cmp	r1, #0
 8015828:	d079      	beq.n	801591e <tcp_connect+0xfe>
 801582a:	461e      	mov	r6, r3
    return ERR_VAL;
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801582c:	7d03      	ldrb	r3, [r0, #20]
 801582e:	4604      	mov	r4, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d177      	bne.n	8015924 <tcp_connect+0x104>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8015834:	6809      	ldr	r1, [r1, #0]
  pcb->remote_port = port;

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015836:	6803      	ldr	r3, [r0, #0]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8015838:	6041      	str	r1, [r0, #4]
  pcb->remote_port = port;
 801583a:	8302      	strh	r2, [r0, #24]
  if (ip_addr_isany(&pcb->local_ip)) {
 801583c:	2b00      	cmp	r3, #0
 801583e:	d05d      	beq.n	80158fc <tcp_connect+0xdc>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  }

  old_local_port = pcb->local_port;
 8015840:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 8015842:	2f00      	cmp	r7, #0
 8015844:	d039      	beq.n	80158ba <tcp_connect+0x9a>
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015846:	493c      	ldr	r1, [pc, #240]	; (8015938 <tcp_connect+0x118>)
  pcb->rcv_nxt = 0;
 8015848:	2300      	movs	r3, #0
  iss += tcp_ticks;       /* XXX */
 801584a:	483c      	ldr	r0, [pc, #240]	; (801593c <tcp_connect+0x11c>)
 801584c:	680a      	ldr	r2, [r1, #0]
 801584e:	6800      	ldr	r0, [r0, #0]
  pcb->rcv_nxt = 0;
 8015850:	4d3b      	ldr	r5, [pc, #236]	; (8015940 <tcp_connect+0x120>)
  iss += tcp_ticks;       /* XXX */
 8015852:	4402      	add	r2, r0
  pcb->rcv_nxt = 0;
 8015854:	6263      	str	r3, [r4, #36]	; 0x24
  pcb->snd_wnd = TCP_WND;
 8015856:	f44f 6006 	mov.w	r0, #2144	; 0x860
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801585a:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->rcv_nxt = 0;
 801585c:	62a5      	str	r5, [r4, #40]	; 0x28
  pcb->lastack = iss - 1;
 801585e:	1e53      	subs	r3, r2, #1
  pcb->mss = INITIAL_MSS;
 8015860:	f44f 7506 	mov.w	r5, #536	; 0x218
  pcb->snd_wnd = TCP_WND;
 8015864:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
  pcb->snd_nxt = iss;
 8015868:	64e2      	str	r2, [r4, #76]	; 0x4c
{
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801586a:	1d20      	adds	r0, r4, #4
  pcb->lastack = iss - 1;
 801586c:	6463      	str	r3, [r4, #68]	; 0x44
  pcb->mss = INITIAL_MSS;
 801586e:	8665      	strh	r5, [r4, #50]	; 0x32
  iss += tcp_ticks;       /* XXX */
 8015870:	600a      	str	r2, [r1, #0]
  pcb->snd_lbb = iss - 1;
 8015872:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  outif = ip_route(src, dest);
 8015876:	f006 f9bd 	bl	801bbf4 <ip4_route>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801587a:	b108      	cbz	r0, 8015880 <tcp_connect+0x60>
      return sendmss;
    }
    mtu = outif->mtu;
 801587c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801587e:	bb23      	cbnz	r3, 80158ca <tcp_connect+0xaa>
  pcb->cwnd = 1;
 8015880:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015882:	8665      	strh	r5, [r4, #50]	; 0x32
  pcb->connected = connected;
 8015884:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8015888:	2102      	movs	r1, #2
  pcb->cwnd = 1;
 801588a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801588e:	4620      	mov	r0, r4
 8015890:	f002 ffb8 	bl	8018804 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8015894:	4605      	mov	r5, r0
 8015896:	b970      	cbnz	r0, 80158b6 <tcp_connect+0x96>
    pcb->state = SYN_SENT;
 8015898:	2302      	movs	r3, #2
 801589a:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801589c:	b9f7      	cbnz	r7, 80158dc <tcp_connect+0xbc>
    TCP_REG_ACTIVE(pcb);
 801589e:	4b29      	ldr	r3, [pc, #164]	; (8015944 <tcp_connect+0x124>)
 80158a0:	681a      	ldr	r2, [r3, #0]
 80158a2:	601c      	str	r4, [r3, #0]
 80158a4:	60e2      	str	r2, [r4, #12]
 80158a6:	f003 fca5 	bl	80191f4 <tcp_timer_needed>
 80158aa:	4b27      	ldr	r3, [pc, #156]	; (8015948 <tcp_connect+0x128>)
 80158ac:	2201      	movs	r2, #1
    tcp_output(pcb);
 80158ae:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 80158b0:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 80158b2:	f003 f8cd 	bl	8018a50 <tcp_output>
}
 80158b6:	4628      	mov	r0, r5
 80158b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->local_port = tcp_new_port();
 80158ba:	f7ff fe15 	bl	80154e8 <tcp_new_port>
 80158be:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d1c0      	bne.n	8015846 <tcp_connect+0x26>
      return ERR_BUF;
 80158c4:	f06f 0501 	mvn.w	r5, #1
 80158c8:	e7f5      	b.n	80158b6 <tcp_connect+0x96>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80158ca:	f1a3 0528 	sub.w	r5, r3, #40	; 0x28
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80158ce:	b2ad      	uxth	r5, r5
 80158d0:	f5b5 7f06 	cmp.w	r5, #536	; 0x218
 80158d4:	bf28      	it	cs
 80158d6:	f44f 7506 	movcs.w	r5, #536	; 0x218
 80158da:	e7d1      	b.n	8015880 <tcp_connect+0x60>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80158dc:	4b1b      	ldr	r3, [pc, #108]	; (801594c <tcp_connect+0x12c>)
 80158de:	681a      	ldr	r2, [r3, #0]
 80158e0:	42a2      	cmp	r2, r4
 80158e2:	d012      	beq.n	801590a <tcp_connect+0xea>
 80158e4:	2a00      	cmp	r2, #0
 80158e6:	d0da      	beq.n	801589e <tcp_connect+0x7e>
 80158e8:	68d3      	ldr	r3, [r2, #12]
 80158ea:	429c      	cmp	r4, r3
 80158ec:	d013      	beq.n	8015916 <tcp_connect+0xf6>
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d0d5      	beq.n	801589e <tcp_connect+0x7e>
 80158f2:	68da      	ldr	r2, [r3, #12]
 80158f4:	42a2      	cmp	r2, r4
 80158f6:	d00f      	beq.n	8015918 <tcp_connect+0xf8>
 80158f8:	4613      	mov	r3, r2
 80158fa:	e7f8      	b.n	80158ee <tcp_connect+0xce>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 80158fc:	3004      	adds	r0, #4
 80158fe:	f006 f979 	bl	801bbf4 <ip4_route>
 8015902:	b128      	cbz	r0, 8015910 <tcp_connect+0xf0>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015904:	6843      	ldr	r3, [r0, #4]
 8015906:	6023      	str	r3, [r4, #0]
 8015908:	e79a      	b.n	8015840 <tcp_connect+0x20>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801590a:	68e2      	ldr	r2, [r4, #12]
 801590c:	601a      	str	r2, [r3, #0]
 801590e:	e7c6      	b.n	801589e <tcp_connect+0x7e>
      return ERR_RTE;
 8015910:	f06f 0503 	mvn.w	r5, #3
 8015914:	e7cf      	b.n	80158b6 <tcp_connect+0x96>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8015916:	4613      	mov	r3, r2
 8015918:	68e2      	ldr	r2, [r4, #12]
 801591a:	60da      	str	r2, [r3, #12]
 801591c:	e7bf      	b.n	801589e <tcp_connect+0x7e>
    return ERR_VAL;
 801591e:	f06f 0505 	mvn.w	r5, #5
 8015922:	e7c8      	b.n	80158b6 <tcp_connect+0x96>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8015924:	4b0a      	ldr	r3, [pc, #40]	; (8015950 <tcp_connect+0x130>)
 8015926:	f44f 725e 	mov.w	r2, #888	; 0x378
 801592a:	490a      	ldr	r1, [pc, #40]	; (8015954 <tcp_connect+0x134>)
 801592c:	f06f 0509 	mvn.w	r5, #9
 8015930:	4809      	ldr	r0, [pc, #36]	; (8015958 <tcp_connect+0x138>)
 8015932:	f008 fd59 	bl	801e3e8 <iprintf>
 8015936:	e7be      	b.n	80158b6 <tcp_connect+0x96>
 8015938:	20000440 	.word	0x20000440
 801593c:	20035498 	.word	0x20035498
 8015940:	08600860 	.word	0x08600860
 8015944:	20035494 	.word	0x20035494
 8015948:	20035490 	.word	0x20035490
 801594c:	200354a0 	.word	0x200354a0
 8015950:	0803a6c8 	.word	0x0803a6c8
 8015954:	0803a704 	.word	0x0803a704
 8015958:	08023618 	.word	0x08023618

0801595c <tcp_seg_free>:
  if (seg != NULL) {
 801595c:	b158      	cbz	r0, 8015976 <tcp_seg_free+0x1a>
{
 801595e:	b510      	push	{r4, lr}
 8015960:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8015962:	6840      	ldr	r0, [r0, #4]
 8015964:	b108      	cbz	r0, 801596a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8015966:	f7fe ffef 	bl	8014948 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801596a:	4621      	mov	r1, r4
 801596c:	2004      	movs	r0, #4
}
 801596e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8015972:	f7fe bdf1 	b.w	8014558 <memp_free>
 8015976:	4770      	bx	lr

08015978 <tcp_segs_free>:
  while (seg != NULL) {
 8015978:	b138      	cbz	r0, 801598a <tcp_segs_free+0x12>
{
 801597a:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 801597c:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 801597e:	f7ff ffed 	bl	801595c <tcp_seg_free>
  while (seg != NULL) {
 8015982:	4620      	mov	r0, r4
 8015984:	2c00      	cmp	r4, #0
 8015986:	d1f9      	bne.n	801597c <tcp_segs_free+0x4>
}
 8015988:	bd10      	pop	{r4, pc}
 801598a:	4770      	bx	lr

0801598c <tcp_setprio>:
  pcb->prio = prio;
 801598c:	7541      	strb	r1, [r0, #21]
}
 801598e:	4770      	bx	lr

08015990 <tcp_seg_copy>:
{
 8015990:	b538      	push	{r3, r4, r5, lr}
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015992:	f240 5294 	movw	r2, #1428	; 0x594
{
 8015996:	4605      	mov	r5, r0
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015998:	490a      	ldr	r1, [pc, #40]	; (80159c4 <tcp_seg_copy+0x34>)
 801599a:	2004      	movs	r0, #4
 801599c:	f7fe fdb8 	bl	8014510 <memp_malloc_fn>
  if (cseg == NULL) {
 80159a0:	4604      	mov	r4, r0
 80159a2:	b160      	cbz	r0, 80159be <tcp_seg_copy+0x2e>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80159a4:	682b      	ldr	r3, [r5, #0]
 80159a6:	6868      	ldr	r0, [r5, #4]
 80159a8:	68a9      	ldr	r1, [r5, #8]
 80159aa:	68ea      	ldr	r2, [r5, #12]
 80159ac:	6060      	str	r0, [r4, #4]
 80159ae:	6023      	str	r3, [r4, #0]
 80159b0:	60a1      	str	r1, [r4, #8]
 80159b2:	60e2      	str	r2, [r4, #12]
 80159b4:	692b      	ldr	r3, [r5, #16]
  pbuf_ref(cseg->p);
 80159b6:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80159b8:	6123      	str	r3, [r4, #16]
  pbuf_ref(cseg->p);
 80159ba:	f7ff f9c5 	bl	8014d48 <pbuf_ref>
}
 80159be:	4620      	mov	r0, r4
 80159c0:	bd38      	pop	{r3, r4, r5, pc}
 80159c2:	bf00      	nop
 80159c4:	0803a6c8 	.word	0x0803a6c8

080159c8 <tcp_arg>:
  if (pcb != NULL) {
 80159c8:	b100      	cbz	r0, 80159cc <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80159ca:	6101      	str	r1, [r0, #16]
}
 80159cc:	4770      	bx	lr
 80159ce:	bf00      	nop

080159d0 <tcp_recv>:
  if (pcb != NULL) {
 80159d0:	b140      	cbz	r0, 80159e4 <tcp_recv+0x14>
{
 80159d2:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80159d4:	7d03      	ldrb	r3, [r0, #20]
 80159d6:	4604      	mov	r4, r0
 80159d8:	460d      	mov	r5, r1
 80159da:	2b01      	cmp	r3, #1
 80159dc:	d003      	beq.n	80159e6 <tcp_recv+0x16>
    pcb->recv = recv;
 80159de:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80159e2:	bd38      	pop	{r3, r4, r5, pc}
 80159e4:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80159e6:	4b05      	ldr	r3, [pc, #20]	; (80159fc <tcp_recv+0x2c>)
 80159e8:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80159ec:	4904      	ldr	r1, [pc, #16]	; (8015a00 <tcp_recv+0x30>)
 80159ee:	4805      	ldr	r0, [pc, #20]	; (8015a04 <tcp_recv+0x34>)
 80159f0:	f008 fcfa 	bl	801e3e8 <iprintf>
    pcb->recv = recv;
 80159f4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80159f8:	bd38      	pop	{r3, r4, r5, pc}
 80159fa:	bf00      	nop
 80159fc:	0803a6c8 	.word	0x0803a6c8
 8015a00:	0803a804 	.word	0x0803a804
 8015a04:	08023618 	.word	0x08023618

08015a08 <tcp_sent>:
  if (pcb != NULL) {
 8015a08:	b138      	cbz	r0, 8015a1a <tcp_sent+0x12>
{
 8015a0a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015a0c:	7d03      	ldrb	r3, [r0, #20]
 8015a0e:	4604      	mov	r4, r0
 8015a10:	460d      	mov	r5, r1
 8015a12:	2b01      	cmp	r3, #1
 8015a14:	d002      	beq.n	8015a1c <tcp_sent+0x14>
    pcb->sent = sent;
 8015a16:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 8015a18:	bd38      	pop	{r3, r4, r5, pc}
 8015a1a:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015a1c:	4b04      	ldr	r3, [pc, #16]	; (8015a30 <tcp_sent+0x28>)
 8015a1e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8015a22:	4904      	ldr	r1, [pc, #16]	; (8015a34 <tcp_sent+0x2c>)
 8015a24:	4804      	ldr	r0, [pc, #16]	; (8015a38 <tcp_sent+0x30>)
 8015a26:	f008 fcdf 	bl	801e3e8 <iprintf>
    pcb->sent = sent;
 8015a2a:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 8015a2c:	bd38      	pop	{r3, r4, r5, pc}
 8015a2e:	bf00      	nop
 8015a30:	0803a6c8 	.word	0x0803a6c8
 8015a34:	0803a878 	.word	0x0803a878
 8015a38:	08023618 	.word	0x08023618

08015a3c <tcp_err>:
  if (pcb != NULL) {
 8015a3c:	b140      	cbz	r0, 8015a50 <tcp_err+0x14>
{
 8015a3e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015a40:	7d03      	ldrb	r3, [r0, #20]
 8015a42:	4604      	mov	r4, r0
 8015a44:	460d      	mov	r5, r1
 8015a46:	2b01      	cmp	r3, #1
 8015a48:	d003      	beq.n	8015a52 <tcp_err+0x16>
    pcb->errf = err;
 8015a4a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8015a4e:	bd38      	pop	{r3, r4, r5, pc}
 8015a50:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015a52:	4b05      	ldr	r3, [pc, #20]	; (8015a68 <tcp_err+0x2c>)
 8015a54:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8015a58:	4904      	ldr	r1, [pc, #16]	; (8015a6c <tcp_err+0x30>)
 8015a5a:	4805      	ldr	r0, [pc, #20]	; (8015a70 <tcp_err+0x34>)
 8015a5c:	f008 fcc4 	bl	801e3e8 <iprintf>
    pcb->errf = err;
 8015a60:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8015a64:	bd38      	pop	{r3, r4, r5, pc}
 8015a66:	bf00      	nop
 8015a68:	0803a6c8 	.word	0x0803a6c8
 8015a6c:	0803a734 	.word	0x0803a734
 8015a70:	08023618 	.word	0x08023618

08015a74 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015a74:	b118      	cbz	r0, 8015a7e <tcp_accept+0xa>
 8015a76:	7d03      	ldrb	r3, [r0, #20]
 8015a78:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 8015a7a:	bf08      	it	eq
 8015a7c:	6181      	streq	r1, [r0, #24]
}
 8015a7e:	4770      	bx	lr

08015a80 <tcp_poll>:
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015a80:	7d03      	ldrb	r3, [r0, #20]
 8015a82:	2b01      	cmp	r3, #1
{
 8015a84:	b570      	push	{r4, r5, r6, lr}
 8015a86:	4604      	mov	r4, r0
 8015a88:	460e      	mov	r6, r1
 8015a8a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015a8c:	d003      	beq.n	8015a96 <tcp_poll+0x16>
  pcb->poll = poll;
 8015a8e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8015a92:	7725      	strb	r5, [r4, #28]
}
 8015a94:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015a96:	4b05      	ldr	r3, [pc, #20]	; (8015aac <tcp_poll+0x2c>)
 8015a98:	f240 7203 	movw	r2, #1795	; 0x703
 8015a9c:	4904      	ldr	r1, [pc, #16]	; (8015ab0 <tcp_poll+0x30>)
 8015a9e:	4805      	ldr	r0, [pc, #20]	; (8015ab4 <tcp_poll+0x34>)
 8015aa0:	f008 fca2 	bl	801e3e8 <iprintf>
  pcb->poll = poll;
 8015aa4:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8015aa8:	7725      	strb	r5, [r4, #28]
}
 8015aaa:	bd70      	pop	{r4, r5, r6, pc}
 8015aac:	0803a6c8 	.word	0x0803a6c8
 8015ab0:	0803a7e4 	.word	0x0803a7e4
 8015ab4:	08023618 	.word	0x08023618

08015ab8 <tcp_pcb_purge>:
{
 8015ab8:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8015aba:	7d03      	ldrb	r3, [r0, #20]
     pcb->state != TIME_WAIT &&
 8015abc:	2b0a      	cmp	r3, #10
 8015abe:	d02a      	beq.n	8015b16 <tcp_pcb_purge+0x5e>
 8015ac0:	2b01      	cmp	r3, #1
 8015ac2:	d928      	bls.n	8015b16 <tcp_pcb_purge+0x5e>
 8015ac4:	4604      	mov	r4, r0
    if (pcb->refused_data != NULL) {
 8015ac6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8015ac8:	b118      	cbz	r0, 8015ad2 <tcp_pcb_purge+0x1a>
      pbuf_free(pcb->refused_data);
 8015aca:	f7fe ff3d 	bl	8014948 <pbuf_free>
      pcb->refused_data = NULL;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	6763      	str	r3, [r4, #116]	; 0x74
    if (pcb->ooseq != NULL) {
 8015ad2:	6f20      	ldr	r0, [r4, #112]	; 0x70
  while (seg != NULL) {
 8015ad4:	b128      	cbz	r0, 8015ae2 <tcp_pcb_purge+0x2a>
    struct tcp_seg *next = seg->next;
 8015ad6:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 8015ad8:	f7ff ff40 	bl	801595c <tcp_seg_free>
  while (seg != NULL) {
 8015adc:	4628      	mov	r0, r5
 8015ade:	2d00      	cmp	r5, #0
 8015ae0:	d1f9      	bne.n	8015ad6 <tcp_pcb_purge+0x1e>
    pcb->ooseq = NULL;
 8015ae2:	2200      	movs	r2, #0
    pcb->rtime = -1;
 8015ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8015ae8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 8015aea:	6722      	str	r2, [r4, #112]	; 0x70
    pcb->rtime = -1;
 8015aec:	8623      	strh	r3, [r4, #48]	; 0x30
  while (seg != NULL) {
 8015aee:	b128      	cbz	r0, 8015afc <tcp_pcb_purge+0x44>
    struct tcp_seg *next = seg->next;
 8015af0:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 8015af2:	f7ff ff33 	bl	801595c <tcp_seg_free>
  while (seg != NULL) {
 8015af6:	4628      	mov	r0, r5
 8015af8:	2d00      	cmp	r5, #0
 8015afa:	d1f9      	bne.n	8015af0 <tcp_pcb_purge+0x38>
    tcp_segs_free(pcb->unacked);
 8015afc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  while (seg != NULL) {
 8015afe:	b128      	cbz	r0, 8015b0c <tcp_pcb_purge+0x54>
    struct tcp_seg *next = seg->next;
 8015b00:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 8015b02:	f7ff ff2b 	bl	801595c <tcp_seg_free>
  while (seg != NULL) {
 8015b06:	4628      	mov	r0, r5
 8015b08:	2d00      	cmp	r5, #0
 8015b0a:	d1f9      	bne.n	8015b00 <tcp_pcb_purge+0x48>
    pcb->unacked = pcb->unsent = NULL;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
    pcb->unsent_oversize = 0;
 8015b12:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
 8015b16:	bd38      	pop	{r3, r4, r5, pc}

08015b18 <tcp_slowtmr>:
{
 8015b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8015b1c:	4ebf      	ldr	r6, [pc, #764]	; (8015e1c <tcp_slowtmr+0x304>)
{
 8015b1e:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 8015b20:	4fbf      	ldr	r7, [pc, #764]	; (8015e20 <tcp_slowtmr+0x308>)
  ++tcp_ticks;
 8015b22:	6832      	ldr	r2, [r6, #0]
  ++tcp_timer_ctr;
 8015b24:	783b      	ldrb	r3, [r7, #0]
  ++tcp_ticks;
 8015b26:	3201      	adds	r2, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015b28:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8015e50 <tcp_slowtmr+0x338>
  ++tcp_timer_ctr;
 8015b2c:	3301      	adds	r3, #1
  ++tcp_ticks;
 8015b2e:	6032      	str	r2, [r6, #0]
  ++tcp_timer_ctr;
 8015b30:	703b      	strb	r3, [r7, #0]
  pcb = tcp_active_pcbs;
 8015b32:	4bbc      	ldr	r3, [pc, #752]	; (8015e24 <tcp_slowtmr+0x30c>)
 8015b34:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8015b36:	2c00      	cmp	r4, #0
 8015b38:	f000 8084 	beq.w	8015c44 <tcp_slowtmr+0x12c>
  prev = NULL;
 8015b3c:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015b40:	7d23      	ldrb	r3, [r4, #20]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	f000 8103 	beq.w	8015d4e <tcp_slowtmr+0x236>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015b48:	2b01      	cmp	r3, #1
 8015b4a:	f000 810b 	beq.w	8015d64 <tcp_slowtmr+0x24c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015b4e:	2b0a      	cmp	r3, #10
 8015b50:	f000 8113 	beq.w	8015d7a <tcp_slowtmr+0x262>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015b54:	783a      	ldrb	r2, [r7, #0]
 8015b56:	7f63      	ldrb	r3, [r4, #29]
 8015b58:	4293      	cmp	r3, r2
 8015b5a:	f000 811a 	beq.w	8015d92 <tcp_slowtmr+0x27a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015b5e:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8015b60:	7762      	strb	r2, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015b62:	2b02      	cmp	r3, #2
 8015b64:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8015b68:	f000 8118 	beq.w	8015d9c <tcp_slowtmr+0x284>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8015b6c:	2a0b      	cmp	r2, #11
 8015b6e:	f240 80ce 	bls.w	8015d0e <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 8015b72:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8015b74:	2b06      	cmp	r3, #6
 8015b76:	f000 80bd 	beq.w	8015cf4 <tcp_slowtmr+0x1dc>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015b7a:	f894 a008 	ldrb.w	sl, [r4, #8]
 8015b7e:	f01a 0a08 	ands.w	sl, sl, #8
 8015b82:	d01d      	beq.n	8015bc0 <tcp_slowtmr+0xa8>
 8015b84:	2b04      	cmp	r3, #4
 8015b86:	d007      	beq.n	8015b98 <tcp_slowtmr+0x80>
 8015b88:	f1a3 0307 	sub.w	r3, r3, #7
 8015b8c:	fab3 f383 	clz	r3, r3
 8015b90:	095b      	lsrs	r3, r3, #5
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	f000 80b8 	beq.w	8015d08 <tcp_slowtmr+0x1f0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015b98:	6832      	ldr	r2, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8015b9a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8015b9e:	4ba2      	ldr	r3, [pc, #648]	; (8015e28 <tcp_slowtmr+0x310>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ba0:	9203      	str	r2, [sp, #12]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8015ba2:	4403      	add	r3, r0
 8015ba4:	4aa1      	ldr	r2, [pc, #644]	; (8015e2c <tcp_slowtmr+0x314>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ba6:	6a21      	ldr	r1, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8015ba8:	fba2 2303 	umull	r2, r3, r2, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015bac:	9a03      	ldr	r2, [sp, #12]
 8015bae:	1a52      	subs	r2, r2, r1
 8015bb0:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8015bb4:	f240 8150 	bls.w	8015e58 <tcp_slowtmr+0x340>
        ++pcb_remove;
 8015bb8:	3501      	adds	r5, #1
        ++pcb_reset;
 8015bba:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 8015bbe:	b2ed      	uxtb	r5, r5
    if (pcb->ooseq != NULL &&
 8015bc0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8015bc2:	b148      	cbz	r0, 8015bd8 <tcp_slowtmr+0xc0>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8015bc4:	6833      	ldr	r3, [r6, #0]
 8015bc6:	6a22      	ldr	r2, [r4, #32]
 8015bc8:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8015bcc:	1a9b      	subs	r3, r3, r2
 8015bce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    if (pcb->ooseq != NULL &&
 8015bd2:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 8015bd6:	d256      	bcs.n	8015c86 <tcp_slowtmr+0x16e>
    if (pcb->state == SYN_RCVD) {
 8015bd8:	7d23      	ldrb	r3, [r4, #20]
 8015bda:	2b03      	cmp	r3, #3
 8015bdc:	d05f      	beq.n	8015c9e <tcp_slowtmr+0x186>
    if (pcb->state == LAST_ACK) {
 8015bde:	2b09      	cmp	r3, #9
 8015be0:	d162      	bne.n	8015ca8 <tcp_slowtmr+0x190>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015be2:	6833      	ldr	r3, [r6, #0]
 8015be4:	6a22      	ldr	r2, [r4, #32]
 8015be6:	1a9b      	subs	r3, r3, r2
 8015be8:	2bf0      	cmp	r3, #240	; 0xf0
 8015bea:	d95d      	bls.n	8015ca8 <tcp_slowtmr+0x190>
      tcp_pcb_purge(pcb);
 8015bec:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8015bee:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8015bf2:	f7ff ff61 	bl	8015ab8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015bf6:	4b8b      	ldr	r3, [pc, #556]	; (8015e24 <tcp_slowtmr+0x30c>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 8015bfa:	f1b8 0f00 	cmp.w	r8, #0
 8015bfe:	f000 8175 	beq.w	8015eec <tcp_slowtmr+0x3d4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015c02:	42a3      	cmp	r3, r4
 8015c04:	f000 817f 	beq.w	8015f06 <tcp_slowtmr+0x3ee>
        prev->next = pcb->next;
 8015c08:	68e3      	ldr	r3, [r4, #12]
 8015c0a:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8015c0e:	f1ba 0f00 	cmp.w	sl, #0
 8015c12:	f040 814e 	bne.w	8015eb2 <tcp_slowtmr+0x39a>
      memp_free(MEMP_TCP_PCB, pcb2);
 8015c16:	4621      	mov	r1, r4
 8015c18:	2002      	movs	r0, #2
      tcp_active_pcbs_changed = 0;
 8015c1a:	4d85      	ldr	r5, [pc, #532]	; (8015e30 <tcp_slowtmr+0x318>)
      pcb = pcb->next;
 8015c1c:	e9d4 4a03 	ldrd	r4, sl, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8015c20:	f7fe fc9a 	bl	8014558 <memp_free>
      tcp_active_pcbs_changed = 0;
 8015c24:	2300      	movs	r3, #0
 8015c26:	702b      	strb	r3, [r5, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015c28:	f1bb 0f00 	cmp.w	fp, #0
 8015c2c:	d007      	beq.n	8015c3e <tcp_slowtmr+0x126>
 8015c2e:	4650      	mov	r0, sl
 8015c30:	f06f 010c 	mvn.w	r1, #12
 8015c34:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8015c36:	782b      	ldrb	r3, [r5, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	f47f af7a 	bne.w	8015b32 <tcp_slowtmr+0x1a>
  while (pcb != NULL) {
 8015c3e:	2c00      	cmp	r4, #0
 8015c40:	f47f af7e 	bne.w	8015b40 <tcp_slowtmr+0x28>
  pcb = tcp_tw_pcbs;
 8015c44:	4f7b      	ldr	r7, [pc, #492]	; (8015e34 <tcp_slowtmr+0x31c>)
 8015c46:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8015c48:	b1d4      	cbz	r4, 8015c80 <tcp_slowtmr+0x168>
  prev = NULL;
 8015c4a:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015c4c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8015e50 <tcp_slowtmr+0x338>
 8015c50:	f8df a200 	ldr.w	sl, [pc, #512]	; 8015e54 <tcp_slowtmr+0x33c>
 8015c54:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8015e40 <tcp_slowtmr+0x328>
 8015c58:	7d23      	ldrb	r3, [r4, #20]
 8015c5a:	2b0a      	cmp	r3, #10
 8015c5c:	d006      	beq.n	8015c6c <tcp_slowtmr+0x154>
 8015c5e:	464b      	mov	r3, r9
 8015c60:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8015c64:	4651      	mov	r1, sl
 8015c66:	4640      	mov	r0, r8
 8015c68:	f008 fbbe 	bl	801e3e8 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015c6c:	6833      	ldr	r3, [r6, #0]
 8015c6e:	6a22      	ldr	r2, [r4, #32]
 8015c70:	1a9b      	subs	r3, r3, r2
 8015c72:	2bf0      	cmp	r3, #240	; 0xf0
 8015c74:	f200 8109 	bhi.w	8015e8a <tcp_slowtmr+0x372>
      pcb = pcb->next;
 8015c78:	4625      	mov	r5, r4
 8015c7a:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8015c7c:	2c00      	cmp	r4, #0
 8015c7e:	d1eb      	bne.n	8015c58 <tcp_slowtmr+0x140>
}
 8015c80:	b005      	add	sp, #20
 8015c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct tcp_seg *next = seg->next;
 8015c86:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8015c8a:	f7ff fe67 	bl	801595c <tcp_seg_free>
  while (seg != NULL) {
 8015c8e:	4658      	mov	r0, fp
 8015c90:	2800      	cmp	r0, #0
 8015c92:	d1f8      	bne.n	8015c86 <tcp_slowtmr+0x16e>
    if (pcb->state == SYN_RCVD) {
 8015c94:	7d23      	ldrb	r3, [r4, #20]
      pcb->ooseq = NULL;
 8015c96:	f8c4 b070 	str.w	fp, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8015c9a:	2b03      	cmp	r3, #3
 8015c9c:	d19f      	bne.n	8015bde <tcp_slowtmr+0xc6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015c9e:	6833      	ldr	r3, [r6, #0]
 8015ca0:	6a22      	ldr	r2, [r4, #32]
 8015ca2:	1a9b      	subs	r3, r3, r2
 8015ca4:	2b28      	cmp	r3, #40	; 0x28
 8015ca6:	d8a1      	bhi.n	8015bec <tcp_slowtmr+0xd4>
    if (pcb_remove) {
 8015ca8:	2d00      	cmp	r5, #0
 8015caa:	d19f      	bne.n	8015bec <tcp_slowtmr+0xd4>
      ++prev->polltmr;
 8015cac:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8015cae:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 8015cb0:	3301      	adds	r3, #1
      pcb = pcb->next;
 8015cb2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 8015cb6:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8015cb8:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8015cba:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8015cbc:	d814      	bhi.n	8015ce8 <tcp_slowtmr+0x1d0>
        tcp_active_pcbs_changed = 0;
 8015cbe:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8015e30 <tcp_slowtmr+0x318>
        TCP_EVENT_POLL(prev, err);
 8015cc2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8015cc6:	76e5      	strb	r5, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8015cc8:	f888 5000 	strb.w	r5, [r8]
        TCP_EVENT_POLL(prev, err);
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	f000 80fb 	beq.w	8015ec8 <tcp_slowtmr+0x3b0>
 8015cd2:	4621      	mov	r1, r4
 8015cd4:	6920      	ldr	r0, [r4, #16]
 8015cd6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8015cd8:	f898 3000 	ldrb.w	r3, [r8]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	f47f af28 	bne.w	8015b32 <tcp_slowtmr+0x1a>
        if (err == ERR_OK) {
 8015ce2:	2800      	cmp	r0, #0
 8015ce4:	f000 80f0 	beq.w	8015ec8 <tcp_slowtmr+0x3b0>
 8015ce8:	46a0      	mov	r8, r4
      pcb = pcb->next;
 8015cea:	4654      	mov	r4, sl
  while (pcb != NULL) {
 8015cec:	2c00      	cmp	r4, #0
 8015cee:	f47f af27 	bne.w	8015b40 <tcp_slowtmr+0x28>
 8015cf2:	e7a7      	b.n	8015c44 <tcp_slowtmr+0x12c>
      if (pcb->flags & TF_RXCLOSED) {
 8015cf4:	7ea3      	ldrb	r3, [r4, #26]
 8015cf6:	06db      	lsls	r3, r3, #27
 8015cf8:	d506      	bpl.n	8015d08 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015cfa:	6833      	ldr	r3, [r6, #0]
 8015cfc:	6a22      	ldr	r2, [r4, #32]
 8015cfe:	1a9b      	subs	r3, r3, r2
 8015d00:	2b28      	cmp	r3, #40	; 0x28
 8015d02:	d901      	bls.n	8015d08 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 8015d04:	3501      	adds	r5, #1
 8015d06:	b2ed      	uxtb	r5, r5
    pcb_reset = 0;
 8015d08:	f04f 0a00 	mov.w	sl, #0
 8015d0c:	e758      	b.n	8015bc0 <tcp_slowtmr+0xa8>
      if (pcb->persist_backoff > 0) {
 8015d0e:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 8015d12:	2d00      	cmp	r5, #0
 8015d14:	d048      	beq.n	8015da8 <tcp_slowtmr+0x290>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8015d16:	4848      	ldr	r0, [pc, #288]	; (8015e38 <tcp_slowtmr+0x320>)
        if (pcb->persist_cnt < backoff_cnt) {
 8015d18:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8015d1c:	4405      	add	r5, r0
 8015d1e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8015d22:	428a      	cmp	r2, r1
 8015d24:	f0c0 80d9 	bcc.w	8015eda <tcp_slowtmr+0x3c2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8015d28:	4620      	mov	r0, r4
 8015d2a:	f003 f987 	bl	801903c <tcp_zero_window_probe>
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	f040 80fd 	bne.w	8015f2e <tcp_slowtmr+0x416>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015d34:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8015d38:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015d3c:	2b06      	cmp	r3, #6
 8015d3e:	f200 80f8 	bhi.w	8015f32 <tcp_slowtmr+0x41a>
              pcb->persist_backoff++;
 8015d42:	1c5a      	adds	r2, r3, #1
    pcb_remove = 0;
 8015d44:	4605      	mov	r5, r0
 8015d46:	7d23      	ldrb	r3, [r4, #20]
              pcb->persist_backoff++;
 8015d48:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
 8015d4c:	e712      	b.n	8015b74 <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015d4e:	464b      	mov	r3, r9
 8015d50:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8015d54:	4939      	ldr	r1, [pc, #228]	; (8015e3c <tcp_slowtmr+0x324>)
 8015d56:	483a      	ldr	r0, [pc, #232]	; (8015e40 <tcp_slowtmr+0x328>)
 8015d58:	f008 fb46 	bl	801e3e8 <iprintf>
 8015d5c:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015d5e:	2b01      	cmp	r3, #1
 8015d60:	f47f aef5 	bne.w	8015b4e <tcp_slowtmr+0x36>
 8015d64:	464b      	mov	r3, r9
 8015d66:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015d6a:	4936      	ldr	r1, [pc, #216]	; (8015e44 <tcp_slowtmr+0x32c>)
 8015d6c:	4834      	ldr	r0, [pc, #208]	; (8015e40 <tcp_slowtmr+0x328>)
 8015d6e:	f008 fb3b 	bl	801e3e8 <iprintf>
 8015d72:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015d74:	2b0a      	cmp	r3, #10
 8015d76:	f47f aeed 	bne.w	8015b54 <tcp_slowtmr+0x3c>
 8015d7a:	464b      	mov	r3, r9
 8015d7c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8015d80:	4931      	ldr	r1, [pc, #196]	; (8015e48 <tcp_slowtmr+0x330>)
 8015d82:	482f      	ldr	r0, [pc, #188]	; (8015e40 <tcp_slowtmr+0x328>)
 8015d84:	f008 fb30 	bl	801e3e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015d88:	783a      	ldrb	r2, [r7, #0]
 8015d8a:	7f63      	ldrb	r3, [r4, #29]
 8015d8c:	4293      	cmp	r3, r2
 8015d8e:	f47f aee6 	bne.w	8015b5e <tcp_slowtmr+0x46>
      pcb = pcb->next;
 8015d92:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8015d94:	2c00      	cmp	r4, #0
 8015d96:	f47f aed3 	bne.w	8015b40 <tcp_slowtmr+0x28>
 8015d9a:	e753      	b.n	8015c44 <tcp_slowtmr+0x12c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015d9c:	2a05      	cmp	r2, #5
 8015d9e:	d9b6      	bls.n	8015d0e <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 8015da0:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 8015da4:	2501      	movs	r5, #1
 8015da6:	e70b      	b.n	8015bc0 <tcp_slowtmr+0xa8>
        if (pcb->rtime >= 0) {
 8015da8:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8015dac:	2900      	cmp	r1, #0
 8015dae:	db01      	blt.n	8015db4 <tcp_slowtmr+0x29c>
          ++pcb->rtime;
 8015db0:	3101      	adds	r1, #1
 8015db2:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8015db4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8015db6:	2900      	cmp	r1, #0
 8015db8:	f43f aedc 	beq.w	8015b74 <tcp_slowtmr+0x5c>
 8015dbc:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8015dc0:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8015dc4:	4288      	cmp	r0, r1
 8015dc6:	f6ff aed5 	blt.w	8015b74 <tcp_slowtmr+0x5c>
          if (pcb->state != SYN_SENT) {
 8015dca:	2b02      	cmp	r3, #2
 8015dcc:	d00a      	beq.n	8015de4 <tcp_slowtmr+0x2cc>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015dce:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8015dd2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8015dd6:	491d      	ldr	r1, [pc, #116]	; (8015e4c <tcp_slowtmr+0x334>)
 8015dd8:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8015ddc:	5c8a      	ldrb	r2, [r1, r2]
 8015dde:	4093      	lsls	r3, r2
 8015de0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015de4:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
          pcb->rtime = 0;
 8015de8:	2200      	movs	r2, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015dea:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015dee:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->ssthresh = eff_wnd >> 1;
 8015df0:	4283      	cmp	r3, r0
          pcb->rtime = 0;
 8015df2:	8622      	strh	r2, [r4, #48]	; 0x30
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015df4:	ea4f 0241 	mov.w	r2, r1, lsl #1
          pcb->cwnd = pcb->mss;
 8015df8:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8015dfc:	bf28      	it	cs
 8015dfe:	4603      	movcs	r3, r0
          tcp_rexmit_rto(pcb);
 8015e00:	4620      	mov	r0, r4
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015e02:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 8015e04:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015e06:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8015e08:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->ssthresh = (pcb->mss << 1);
 8015e0c:	bf38      	it	cc
 8015e0e:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8015e12:	f003 f85b 	bl	8018ecc <tcp_rexmit_rto>
 8015e16:	7d23      	ldrb	r3, [r4, #20]
 8015e18:	e6ac      	b.n	8015b74 <tcp_slowtmr+0x5c>
 8015e1a:	bf00      	nop
 8015e1c:	20035498 	.word	0x20035498
 8015e20:	200214a9 	.word	0x200214a9
 8015e24:	20035494 	.word	0x20035494
 8015e28:	000a4cb8 	.word	0x000a4cb8
 8015e2c:	10624dd3 	.word	0x10624dd3
 8015e30:	20035490 	.word	0x20035490
 8015e34:	200354a4 	.word	0x200354a4
 8015e38:	0803a7dc 	.word	0x0803a7dc
 8015e3c:	0803a8a0 	.word	0x0803a8a0
 8015e40:	08023618 	.word	0x08023618
 8015e44:	0803a8cc 	.word	0x0803a8cc
 8015e48:	0803a8f8 	.word	0x0803a8f8
 8015e4c:	0803a674 	.word	0x0803a674
 8015e50:	0803a6c8 	.word	0x0803a6c8
 8015e54:	0803a980 	.word	0x0803a980
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015e58:	493b      	ldr	r1, [pc, #236]	; (8015f48 <tcp_slowtmr+0x430>)
 8015e5a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8015e5e:	fb01 0303 	mla	r3, r1, r3, r0
                / TCP_SLOW_INTERVAL)
 8015e62:	493a      	ldr	r1, [pc, #232]	; (8015f4c <tcp_slowtmr+0x434>)
 8015e64:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015e68:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8015e6c:	f67f af4c 	bls.w	8015d08 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 8015e70:	4620      	mov	r0, r4
 8015e72:	f003 f89f 	bl	8018fb4 <tcp_keepalive>
        if (err == ERR_OK) {
 8015e76:	2800      	cmp	r0, #0
 8015e78:	f47f af46 	bne.w	8015d08 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 8015e7c:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8015e80:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 8015e82:	3301      	adds	r3, #1
 8015e84:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 8015e88:	e69a      	b.n	8015bc0 <tcp_slowtmr+0xa8>
      tcp_pcb_purge(pcb);
 8015e8a:	4620      	mov	r0, r4
 8015e8c:	f7ff fe14 	bl	8015ab8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015e90:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8015e92:	2d00      	cmp	r5, #0
 8015e94:	d03f      	beq.n	8015f16 <tcp_slowtmr+0x3fe>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015e96:	42a3      	cmp	r3, r4
 8015e98:	d04e      	beq.n	8015f38 <tcp_slowtmr+0x420>
        prev->next = pcb->next;
 8015e9a:	68e3      	ldr	r3, [r4, #12]
 8015e9c:	60eb      	str	r3, [r5, #12]
 8015e9e:	68e3      	ldr	r3, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8015ea0:	4621      	mov	r1, r4
      pcb = pcb->next;
 8015ea2:	461c      	mov	r4, r3
      memp_free(MEMP_TCP_PCB, pcb2);
 8015ea4:	2002      	movs	r0, #2
 8015ea6:	f7fe fb57 	bl	8014558 <memp_free>
  while (pcb != NULL) {
 8015eaa:	2c00      	cmp	r4, #0
 8015eac:	f47f aed4 	bne.w	8015c58 <tcp_slowtmr+0x140>
 8015eb0:	e6e6      	b.n	8015c80 <tcp_slowtmr+0x168>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015eb2:	8b25      	ldrh	r5, [r4, #24]
 8015eb4:	1d23      	adds	r3, r4, #4
 8015eb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015eb8:	4622      	mov	r2, r4
 8015eba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015ebc:	9501      	str	r5, [sp, #4]
 8015ebe:	8ae5      	ldrh	r5, [r4, #22]
 8015ec0:	9500      	str	r5, [sp, #0]
 8015ec2:	f002 ff93 	bl	8018dec <tcp_rst>
 8015ec6:	e6a6      	b.n	8015c16 <tcp_slowtmr+0xfe>
          tcp_output(prev);
 8015ec8:	4620      	mov	r0, r4
 8015eca:	46a0      	mov	r8, r4
      pcb = pcb->next;
 8015ecc:	4654      	mov	r4, sl
          tcp_output(prev);
 8015ece:	f002 fdbf 	bl	8018a50 <tcp_output>
  while (pcb != NULL) {
 8015ed2:	2c00      	cmp	r4, #0
 8015ed4:	f47f ae34 	bne.w	8015b40 <tcp_slowtmr+0x28>
 8015ed8:	e6b4      	b.n	8015c44 <tcp_slowtmr+0x12c>
          pcb->persist_cnt++;
 8015eda:	3201      	adds	r2, #1
 8015edc:	b2d2      	uxtb	r2, r2
        if (pcb->persist_cnt >= backoff_cnt) {
 8015ede:	428a      	cmp	r2, r1
          pcb->persist_cnt++;
 8015ee0:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8015ee4:	f4bf af20 	bcs.w	8015d28 <tcp_slowtmr+0x210>
    pcb_remove = 0;
 8015ee8:	2500      	movs	r5, #0
 8015eea:	e643      	b.n	8015b74 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015eec:	42a3      	cmp	r3, r4
 8015eee:	d006      	beq.n	8015efe <tcp_slowtmr+0x3e6>
 8015ef0:	464b      	mov	r3, r9
 8015ef2:	f240 428d 	movw	r2, #1165	; 0x48d
 8015ef6:	4916      	ldr	r1, [pc, #88]	; (8015f50 <tcp_slowtmr+0x438>)
 8015ef8:	4816      	ldr	r0, [pc, #88]	; (8015f54 <tcp_slowtmr+0x43c>)
 8015efa:	f008 fa75 	bl	801e3e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015efe:	68e3      	ldr	r3, [r4, #12]
 8015f00:	4a15      	ldr	r2, [pc, #84]	; (8015f58 <tcp_slowtmr+0x440>)
 8015f02:	6013      	str	r3, [r2, #0]
 8015f04:	e683      	b.n	8015c0e <tcp_slowtmr+0xf6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015f06:	464b      	mov	r3, r9
 8015f08:	f240 4289 	movw	r2, #1161	; 0x489
 8015f0c:	4913      	ldr	r1, [pc, #76]	; (8015f5c <tcp_slowtmr+0x444>)
 8015f0e:	4811      	ldr	r0, [pc, #68]	; (8015f54 <tcp_slowtmr+0x43c>)
 8015f10:	f008 fa6a 	bl	801e3e8 <iprintf>
 8015f14:	e678      	b.n	8015c08 <tcp_slowtmr+0xf0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015f16:	42a3      	cmp	r3, r4
 8015f18:	d006      	beq.n	8015f28 <tcp_slowtmr+0x410>
 8015f1a:	464b      	mov	r3, r9
 8015f1c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8015f20:	490f      	ldr	r1, [pc, #60]	; (8015f60 <tcp_slowtmr+0x448>)
 8015f22:	4640      	mov	r0, r8
 8015f24:	f008 fa60 	bl	801e3e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015f28:	68e3      	ldr	r3, [r4, #12]
 8015f2a:	603b      	str	r3, [r7, #0]
 8015f2c:	e7b8      	b.n	8015ea0 <tcp_slowtmr+0x388>
 8015f2e:	7d23      	ldrb	r3, [r4, #20]
 8015f30:	e7da      	b.n	8015ee8 <tcp_slowtmr+0x3d0>
    pcb_remove = 0;
 8015f32:	4605      	mov	r5, r0
 8015f34:	7d23      	ldrb	r3, [r4, #20]
 8015f36:	e61d      	b.n	8015b74 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015f38:	464b      	mov	r3, r9
 8015f3a:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8015f3e:	4909      	ldr	r1, [pc, #36]	; (8015f64 <tcp_slowtmr+0x44c>)
 8015f40:	4640      	mov	r0, r8
 8015f42:	f008 fa51 	bl	801e3e8 <iprintf>
 8015f46:	e7a8      	b.n	8015e9a <tcp_slowtmr+0x382>
 8015f48:	000124f8 	.word	0x000124f8
 8015f4c:	10624dd3 	.word	0x10624dd3
 8015f50:	0803a954 	.word	0x0803a954
 8015f54:	08023618 	.word	0x08023618
 8015f58:	20035494 	.word	0x20035494
 8015f5c:	0803a928 	.word	0x0803a928
 8015f60:	0803a9d8 	.word	0x0803a9d8
 8015f64:	0803a9b0 	.word	0x0803a9b0

08015f68 <tcp_pcb_remove>:
  TCP_RMV(pcblist, pcb);
 8015f68:	6802      	ldr	r2, [r0, #0]
 8015f6a:	428a      	cmp	r2, r1
{
 8015f6c:	b510      	push	{r4, lr}
 8015f6e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8015f70:	d047      	beq.n	8016002 <tcp_pcb_remove+0x9a>
 8015f72:	b14a      	cbz	r2, 8015f88 <tcp_pcb_remove+0x20>
 8015f74:	68d3      	ldr	r3, [r2, #12]
 8015f76:	4299      	cmp	r1, r3
 8015f78:	d03f      	beq.n	8015ffa <tcp_pcb_remove+0x92>
 8015f7a:	b12b      	cbz	r3, 8015f88 <tcp_pcb_remove+0x20>
 8015f7c:	68da      	ldr	r2, [r3, #12]
 8015f7e:	42a2      	cmp	r2, r4
 8015f80:	d03c      	beq.n	8015ffc <tcp_pcb_remove+0x94>
 8015f82:	4613      	mov	r3, r2
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d1f9      	bne.n	8015f7c <tcp_pcb_remove+0x14>
 8015f88:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8015f8a:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8015f8c:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8015f8e:	f7ff fd93 	bl	8015ab8 <tcp_pcb_purge>
  if (pcb->state != TIME_WAIT &&
 8015f92:	7d23      	ldrb	r3, [r4, #20]
 8015f94:	2b0a      	cmp	r3, #10
 8015f96:	d02a      	beq.n	8015fee <tcp_pcb_remove+0x86>
 8015f98:	2b01      	cmp	r3, #1
 8015f9a:	d028      	beq.n	8015fee <tcp_pcb_remove+0x86>
     pcb->flags & TF_ACK_DELAY) {
 8015f9c:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8015f9e:	07da      	lsls	r2, r3, #31
 8015fa0:	d41e      	bmi.n	8015fe0 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015fa2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015fa4:	b133      	cbz	r3, 8015fb4 <tcp_pcb_remove+0x4c>
 8015fa6:	4b18      	ldr	r3, [pc, #96]	; (8016008 <tcp_pcb_remove+0xa0>)
 8015fa8:	f240 7253 	movw	r2, #1875	; 0x753
 8015fac:	4917      	ldr	r1, [pc, #92]	; (801600c <tcp_pcb_remove+0xa4>)
 8015fae:	4818      	ldr	r0, [pc, #96]	; (8016010 <tcp_pcb_remove+0xa8>)
 8015fb0:	f008 fa1a 	bl	801e3e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015fb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015fb6:	b133      	cbz	r3, 8015fc6 <tcp_pcb_remove+0x5e>
 8015fb8:	4b13      	ldr	r3, [pc, #76]	; (8016008 <tcp_pcb_remove+0xa0>)
 8015fba:	f240 7254 	movw	r2, #1876	; 0x754
 8015fbe:	4915      	ldr	r1, [pc, #84]	; (8016014 <tcp_pcb_remove+0xac>)
 8015fc0:	4813      	ldr	r0, [pc, #76]	; (8016010 <tcp_pcb_remove+0xa8>)
 8015fc2:	f008 fa11 	bl	801e3e8 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015fc6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015fc8:	b133      	cbz	r3, 8015fd8 <tcp_pcb_remove+0x70>
 8015fca:	4b0f      	ldr	r3, [pc, #60]	; (8016008 <tcp_pcb_remove+0xa0>)
 8015fcc:	f240 7256 	movw	r2, #1878	; 0x756
 8015fd0:	4911      	ldr	r1, [pc, #68]	; (8016018 <tcp_pcb_remove+0xb0>)
 8015fd2:	480f      	ldr	r0, [pc, #60]	; (8016010 <tcp_pcb_remove+0xa8>)
 8015fd4:	f008 fa08 	bl	801e3e8 <iprintf>
  pcb->state = CLOSED;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8015fdc:	82e3      	strh	r3, [r4, #22]
}
 8015fde:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8015fe0:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8015fe4:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 8015fe6:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8015fe8:	f002 fd32 	bl	8018a50 <tcp_output>
 8015fec:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state != LISTEN) {
 8015fee:	2b01      	cmp	r3, #1
 8015ff0:	d0f2      	beq.n	8015fd8 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015ff2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d1d6      	bne.n	8015fa6 <tcp_pcb_remove+0x3e>
 8015ff8:	e7dc      	b.n	8015fb4 <tcp_pcb_remove+0x4c>
  TCP_RMV(pcblist, pcb);
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	68e2      	ldr	r2, [r4, #12]
 8015ffe:	60da      	str	r2, [r3, #12]
 8016000:	e7c2      	b.n	8015f88 <tcp_pcb_remove+0x20>
 8016002:	68cb      	ldr	r3, [r1, #12]
 8016004:	6003      	str	r3, [r0, #0]
 8016006:	e7bf      	b.n	8015f88 <tcp_pcb_remove+0x20>
 8016008:	0803a6c8 	.word	0x0803a6c8
 801600c:	0803a790 	.word	0x0803a790
 8016010:	08023618 	.word	0x08023618
 8016014:	0803a7a8 	.word	0x0803a7a8
 8016018:	0803a7c4 	.word	0x0803a7c4

0801601c <tcp_close_shutdown>:
{
 801601c:	b570      	push	{r4, r5, r6, lr}
 801601e:	4604      	mov	r4, r0
 8016020:	b082      	sub	sp, #8
 8016022:	7d05      	ldrb	r5, [r0, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016024:	b119      	cbz	r1, 801602e <tcp_close_shutdown+0x12>
 8016026:	2d04      	cmp	r5, #4
 8016028:	d014      	beq.n	8016054 <tcp_close_shutdown+0x38>
 801602a:	2d07      	cmp	r5, #7
 801602c:	d012      	beq.n	8016054 <tcp_close_shutdown+0x38>
  switch (pcb->state) {
 801602e:	2d01      	cmp	r5, #1
 8016030:	d06b      	beq.n	801610a <tcp_close_shutdown+0xee>
 8016032:	d330      	bcc.n	8016096 <tcp_close_shutdown+0x7a>
 8016034:	2d02      	cmp	r5, #2
 8016036:	d162      	bne.n	80160fe <tcp_close_shutdown+0xe2>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8016038:	4621      	mov	r1, r4
 801603a:	484f      	ldr	r0, [pc, #316]	; (8016178 <tcp_close_shutdown+0x15c>)
 801603c:	f7ff ff94 	bl	8015f68 <tcp_pcb_remove>
 8016040:	4b4e      	ldr	r3, [pc, #312]	; (801617c <tcp_close_shutdown+0x160>)
 8016042:	2201      	movs	r2, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8016044:	4621      	mov	r1, r4
 8016046:	4628      	mov	r0, r5
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8016048:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 801604a:	f7fe fa85 	bl	8014558 <memp_free>
}
 801604e:	2000      	movs	r0, #0
 8016050:	b002      	add	sp, #8
 8016052:	bd70      	pop	{r4, r5, r6, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8016054:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8016056:	2b00      	cmp	r3, #0
 8016058:	d02f      	beq.n	80160ba <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801605a:	7ea3      	ldrb	r3, [r4, #26]
 801605c:	06db      	lsls	r3, r3, #27
 801605e:	d531      	bpl.n	80160c4 <tcp_close_shutdown+0xa8>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016060:	8b26      	ldrh	r6, [r4, #24]
 8016062:	1d23      	adds	r3, r4, #4
 8016064:	8ae5      	ldrh	r5, [r4, #22]
 8016066:	4622      	mov	r2, r4
 8016068:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801606a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801606c:	e9cd 5600 	strd	r5, r6, [sp]
 8016070:	f002 febc 	bl	8018dec <tcp_rst>
      tcp_pcb_purge(pcb);
 8016074:	4620      	mov	r0, r4
 8016076:	f7ff fd1f 	bl	8015ab8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801607a:	4b3f      	ldr	r3, [pc, #252]	; (8016178 <tcp_close_shutdown+0x15c>)
 801607c:	681a      	ldr	r2, [r3, #0]
 801607e:	42a2      	cmp	r2, r4
 8016080:	d028      	beq.n	80160d4 <tcp_close_shutdown+0xb8>
 8016082:	b34a      	cbz	r2, 80160d8 <tcp_close_shutdown+0xbc>
 8016084:	68d3      	ldr	r3, [r2, #12]
 8016086:	429c      	cmp	r4, r3
 8016088:	d062      	beq.n	8016150 <tcp_close_shutdown+0x134>
 801608a:	b32b      	cbz	r3, 80160d8 <tcp_close_shutdown+0xbc>
 801608c:	68da      	ldr	r2, [r3, #12]
 801608e:	42a2      	cmp	r2, r4
 8016090:	d05f      	beq.n	8016152 <tcp_close_shutdown+0x136>
 8016092:	4613      	mov	r3, r2
 8016094:	e7f9      	b.n	801608a <tcp_close_shutdown+0x6e>
    if (pcb->local_port != 0) {
 8016096:	8ae3      	ldrh	r3, [r4, #22]
 8016098:	b353      	cbz	r3, 80160f0 <tcp_close_shutdown+0xd4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801609a:	4b39      	ldr	r3, [pc, #228]	; (8016180 <tcp_close_shutdown+0x164>)
 801609c:	681a      	ldr	r2, [r3, #0]
 801609e:	42a2      	cmp	r2, r4
 80160a0:	d066      	beq.n	8016170 <tcp_close_shutdown+0x154>
 80160a2:	2a00      	cmp	r2, #0
 80160a4:	d051      	beq.n	801614a <tcp_close_shutdown+0x12e>
 80160a6:	68d3      	ldr	r3, [r2, #12]
 80160a8:	429c      	cmp	r4, r3
 80160aa:	d04b      	beq.n	8016144 <tcp_close_shutdown+0x128>
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d04c      	beq.n	801614a <tcp_close_shutdown+0x12e>
 80160b0:	68da      	ldr	r2, [r3, #12]
 80160b2:	42a2      	cmp	r2, r4
 80160b4:	d047      	beq.n	8016146 <tcp_close_shutdown+0x12a>
 80160b6:	4613      	mov	r3, r2
 80160b8:	e7f8      	b.n	80160ac <tcp_close_shutdown+0x90>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80160ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80160bc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80160c0:	d1cb      	bne.n	801605a <tcp_close_shutdown+0x3e>
 80160c2:	e7b4      	b.n	801602e <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80160c4:	4b2f      	ldr	r3, [pc, #188]	; (8016184 <tcp_close_shutdown+0x168>)
 80160c6:	f240 120f 	movw	r2, #271	; 0x10f
 80160ca:	492f      	ldr	r1, [pc, #188]	; (8016188 <tcp_close_shutdown+0x16c>)
 80160cc:	482f      	ldr	r0, [pc, #188]	; (801618c <tcp_close_shutdown+0x170>)
 80160ce:	f008 f98b 	bl	801e3e8 <iprintf>
 80160d2:	e7c5      	b.n	8016060 <tcp_close_shutdown+0x44>
      TCP_RMV_ACTIVE(pcb);
 80160d4:	68e2      	ldr	r2, [r4, #12]
 80160d6:	601a      	str	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80160d8:	7d23      	ldrb	r3, [r4, #20]
      TCP_RMV_ACTIVE(pcb);
 80160da:	2000      	movs	r0, #0
 80160dc:	4a27      	ldr	r2, [pc, #156]	; (801617c <tcp_close_shutdown+0x160>)
 80160de:	2101      	movs	r1, #1
      if (pcb->state == ESTABLISHED) {
 80160e0:	2b04      	cmp	r3, #4
      TCP_RMV_ACTIVE(pcb);
 80160e2:	60e0      	str	r0, [r4, #12]
 80160e4:	7011      	strb	r1, [r2, #0]
      if (pcb->state == ESTABLISHED) {
 80160e6:	d03a      	beq.n	801615e <tcp_close_shutdown+0x142>
        if (tcp_input_pcb == pcb) {
 80160e8:	4b29      	ldr	r3, [pc, #164]	; (8016190 <tcp_close_shutdown+0x174>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	42a3      	cmp	r3, r4
 80160ee:	d033      	beq.n	8016158 <tcp_close_shutdown+0x13c>
          memp_free(MEMP_TCP_PCB, pcb);
 80160f0:	4621      	mov	r1, r4
 80160f2:	2002      	movs	r0, #2
 80160f4:	f7fe fa30 	bl	8014558 <memp_free>
}
 80160f8:	2000      	movs	r0, #0
 80160fa:	b002      	add	sp, #8
 80160fc:	bd70      	pop	{r4, r5, r6, pc}
    return tcp_close_shutdown_fin(pcb);
 80160fe:	4620      	mov	r0, r4
}
 8016100:	b002      	add	sp, #8
 8016102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return tcp_close_shutdown_fin(pcb);
 8016106:	f7ff ba25 	b.w	8015554 <tcp_close_shutdown_fin>
  switch (pcb->state) {
 801610a:	4b1d      	ldr	r3, [pc, #116]	; (8016180 <tcp_close_shutdown+0x164>)
         pcb->listener = NULL;
 801610c:	2100      	movs	r1, #0
 801610e:	4821      	ldr	r0, [pc, #132]	; (8016194 <tcp_close_shutdown+0x178>)
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8016110:	681b      	ldr	r3, [r3, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016112:	b133      	cbz	r3, 8016122 <tcp_close_shutdown+0x106>
      if (pcb->listener == lpcb) {
 8016114:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8016116:	4294      	cmp	r4, r2
         pcb->listener = NULL;
 8016118:	bf08      	it	eq
 801611a:	6799      	streq	r1, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801611c:	68db      	ldr	r3, [r3, #12]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d1f8      	bne.n	8016114 <tcp_close_shutdown+0xf8>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016122:	3501      	adds	r5, #1
 8016124:	2d04      	cmp	r5, #4
 8016126:	d002      	beq.n	801612e <tcp_close_shutdown+0x112>
 8016128:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 801612c:	e7f0      	b.n	8016110 <tcp_close_shutdown+0xf4>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801612e:	4621      	mov	r1, r4
 8016130:	4819      	ldr	r0, [pc, #100]	; (8016198 <tcp_close_shutdown+0x17c>)
 8016132:	f7ff ff19 	bl	8015f68 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016136:	4621      	mov	r1, r4
 8016138:	2003      	movs	r0, #3
 801613a:	f7fe fa0d 	bl	8014558 <memp_free>
}
 801613e:	2000      	movs	r0, #0
 8016140:	b002      	add	sp, #8
 8016142:	bd70      	pop	{r4, r5, r6, pc}
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016144:	4613      	mov	r3, r2
 8016146:	68e2      	ldr	r2, [r4, #12]
 8016148:	60da      	str	r2, [r3, #12]
 801614a:	2300      	movs	r3, #0
 801614c:	60e3      	str	r3, [r4, #12]
 801614e:	e7cf      	b.n	80160f0 <tcp_close_shutdown+0xd4>
      TCP_RMV_ACTIVE(pcb);
 8016150:	4613      	mov	r3, r2
 8016152:	68e2      	ldr	r2, [r4, #12]
 8016154:	60da      	str	r2, [r3, #12]
 8016156:	e7bf      	b.n	80160d8 <tcp_close_shutdown+0xbc>
          tcp_trigger_input_pcb_close();
 8016158:	f001 ff1e 	bl	8017f98 <tcp_trigger_input_pcb_close>
 801615c:	e777      	b.n	801604e <tcp_close_shutdown+0x32>
        TCP_REG(&tcp_tw_pcbs, pcb);
 801615e:	4b0f      	ldr	r3, [pc, #60]	; (801619c <tcp_close_shutdown+0x180>)
        pcb->state = TIME_WAIT;
 8016160:	210a      	movs	r1, #10
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016162:	681a      	ldr	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016164:	7521      	strb	r1, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016166:	60e2      	str	r2, [r4, #12]
 8016168:	601c      	str	r4, [r3, #0]
 801616a:	f003 f843 	bl	80191f4 <tcp_timer_needed>
 801616e:	e76e      	b.n	801604e <tcp_close_shutdown+0x32>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016170:	68e2      	ldr	r2, [r4, #12]
 8016172:	601a      	str	r2, [r3, #0]
 8016174:	e7e9      	b.n	801614a <tcp_close_shutdown+0x12e>
 8016176:	bf00      	nop
 8016178:	20035494 	.word	0x20035494
 801617c:	20035490 	.word	0x20035490
 8016180:	200354a0 	.word	0x200354a0
 8016184:	0803a6c8 	.word	0x0803a6c8
 8016188:	0803a6ac 	.word	0x0803a6ac
 801618c:	08023618 	.word	0x08023618
 8016190:	200354a8 	.word	0x200354a8
 8016194:	0803a780 	.word	0x0803a780
 8016198:	2003549c 	.word	0x2003549c
 801619c:	200354a4 	.word	0x200354a4

080161a0 <tcp_close>:
  if (pcb->state != LISTEN) {
 80161a0:	7d03      	ldrb	r3, [r0, #20]
 80161a2:	2b01      	cmp	r3, #1
 80161a4:	d003      	beq.n	80161ae <tcp_close+0xe>
    pcb->flags |= TF_RXCLOSED;
 80161a6:	7e83      	ldrb	r3, [r0, #26]
 80161a8:	f043 0310 	orr.w	r3, r3, #16
 80161ac:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80161ae:	2101      	movs	r1, #1
 80161b0:	f7ff bf34 	b.w	801601c <tcp_close_shutdown>

080161b4 <tcp_recv_null>:
  if (p != NULL) {
 80161b4:	b96a      	cbnz	r2, 80161d2 <tcp_recv_null+0x1e>
  } else if (err == ERR_OK) {
 80161b6:	b953      	cbnz	r3, 80161ce <tcp_recv_null+0x1a>
  if (pcb->state != LISTEN) {
 80161b8:	7d0b      	ldrb	r3, [r1, #20]
 80161ba:	2b01      	cmp	r3, #1
 80161bc:	d003      	beq.n	80161c6 <tcp_recv_null+0x12>
    pcb->flags |= TF_RXCLOSED;
 80161be:	7e8b      	ldrb	r3, [r1, #26]
 80161c0:	f043 0310 	orr.w	r3, r3, #16
 80161c4:	768b      	strb	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 80161c6:	4608      	mov	r0, r1
 80161c8:	2101      	movs	r1, #1
 80161ca:	f7ff bf27 	b.w	801601c <tcp_close_shutdown>
}
 80161ce:	2000      	movs	r0, #0
 80161d0:	4770      	bx	lr
{
 80161d2:	b510      	push	{r4, lr}
 80161d4:	4614      	mov	r4, r2
 80161d6:	4608      	mov	r0, r1
    tcp_recved(pcb, p->tot_len);
 80161d8:	8911      	ldrh	r1, [r2, #8]
 80161da:	f7ff fadd 	bl	8015798 <tcp_recved>
    pbuf_free(p);
 80161de:	4620      	mov	r0, r4
 80161e0:	f7fe fbb2 	bl	8014948 <pbuf_free>
}
 80161e4:	2000      	movs	r0, #0
 80161e6:	bd10      	pop	{r4, pc}

080161e8 <tcp_process_refused_data>:
{
 80161e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 80161ea:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 80161ec:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80161ee:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 80161f2:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80161f4:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80161f6:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80161f8:	b325      	cbz	r5, 8016244 <tcp_process_refused_data+0x5c>
 80161fa:	4601      	mov	r1, r0
 80161fc:	4632      	mov	r2, r6
 80161fe:	6900      	ldr	r0, [r0, #16]
 8016200:	47a8      	blx	r5
 8016202:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8016204:	b99d      	cbnz	r5, 801622e <tcp_process_refused_data+0x46>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8016206:	06bb      	lsls	r3, r7, #26
 8016208:	d50f      	bpl.n	801622a <tcp_process_refused_data+0x42>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801620a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801620c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016210:	d001      	beq.n	8016216 <tcp_process_refused_data+0x2e>
          pcb->rcv_wnd++;
 8016212:	3301      	adds	r3, #1
 8016214:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8016216:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 801621a:	b136      	cbz	r6, 801622a <tcp_process_refused_data+0x42>
 801621c:	2300      	movs	r3, #0
 801621e:	4621      	mov	r1, r4
 8016220:	6920      	ldr	r0, [r4, #16]
 8016222:	461a      	mov	r2, r3
 8016224:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8016226:	300d      	adds	r0, #13
 8016228:	d008      	beq.n	801623c <tcp_process_refused_data+0x54>
}
 801622a:	4628      	mov	r0, r5
 801622c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (err == ERR_ABRT) {
 801622e:	350d      	adds	r5, #13
 8016230:	d004      	beq.n	801623c <tcp_process_refused_data+0x54>
      return ERR_INPROGRESS;
 8016232:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8016236:	6766      	str	r6, [r4, #116]	; 0x74
}
 8016238:	4628      	mov	r0, r5
 801623a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801623c:	f06f 050c 	mvn.w	r5, #12
}
 8016240:	4628      	mov	r0, r5
 8016242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016244:	462b      	mov	r3, r5
 8016246:	4628      	mov	r0, r5
 8016248:	4632      	mov	r2, r6
 801624a:	4621      	mov	r1, r4
 801624c:	f7ff ffb2 	bl	80161b4 <tcp_recv_null>
 8016250:	4605      	mov	r5, r0
 8016252:	e7d7      	b.n	8016204 <tcp_process_refused_data+0x1c>

08016254 <tcp_fasttmr>:
{
 8016254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8016258:	4d1c      	ldr	r5, [pc, #112]	; (80162cc <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801625a:	2700      	movs	r7, #0
 801625c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80162d4 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 8016260:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8016262:	4e1b      	ldr	r6, [pc, #108]	; (80162d0 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8016264:	3301      	adds	r3, #1
 8016266:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8016268:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801626c:	b1bc      	cbz	r4, 801629e <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801626e:	782a      	ldrb	r2, [r5, #0]
 8016270:	7f63      	ldrb	r3, [r4, #29]
 8016272:	4293      	cmp	r3, r2
 8016274:	d015      	beq.n	80162a2 <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 8016276:	7ea3      	ldrb	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 8016278:	7762      	strb	r2, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 801627a:	07d9      	lsls	r1, r3, #31
 801627c:	d41a      	bmi.n	80162b4 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801627e:	071a      	lsls	r2, r3, #28
 8016280:	d411      	bmi.n	80162a6 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 8016282:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8016284:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8016288:	b133      	cbz	r3, 8016298 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801628a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801628c:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801628e:	f7ff ffab 	bl	80161e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016292:	7833      	ldrb	r3, [r6, #0]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d1e7      	bne.n	8016268 <tcp_fasttmr+0x14>
      pcb = next;
 8016298:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801629a:	2c00      	cmp	r4, #0
 801629c:	d1e7      	bne.n	801626e <tcp_fasttmr+0x1a>
}
 801629e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 80162a2:	68e4      	ldr	r4, [r4, #12]
 80162a4:	e7e2      	b.n	801626c <tcp_fasttmr+0x18>
        pcb->flags &= ~(TF_CLOSEPEND);
 80162a6:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 80162aa:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 80162ac:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80162ae:	f7ff f951 	bl	8015554 <tcp_close_shutdown_fin>
 80162b2:	e7e6      	b.n	8016282 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 80162b4:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 80162b8:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 80162ba:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 80162bc:	f002 fbc8 	bl	8018a50 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80162c0:	7ea3      	ldrb	r3, [r4, #26]
 80162c2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80162c6:	76a3      	strb	r3, [r4, #26]
 80162c8:	e7d9      	b.n	801627e <tcp_fasttmr+0x2a>
 80162ca:	bf00      	nop
 80162cc:	200214a9 	.word	0x200214a9
 80162d0:	20035490 	.word	0x20035490
 80162d4:	20035494 	.word	0x20035494

080162d8 <tcp_tmr>:
{
 80162d8:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80162da:	f7ff ffbb 	bl	8016254 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80162de:	4a06      	ldr	r2, [pc, #24]	; (80162f8 <tcp_tmr+0x20>)
 80162e0:	7813      	ldrb	r3, [r2, #0]
 80162e2:	3301      	adds	r3, #1
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	7013      	strb	r3, [r2, #0]
 80162e8:	07db      	lsls	r3, r3, #31
 80162ea:	d400      	bmi.n	80162ee <tcp_tmr+0x16>
}
 80162ec:	bd08      	pop	{r3, pc}
 80162ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80162f2:	f7ff bc11 	b.w	8015b18 <tcp_slowtmr>
 80162f6:	bf00      	nop
 80162f8:	200214a8 	.word	0x200214a8

080162fc <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80162fc:	7d03      	ldrb	r3, [r0, #20]
 80162fe:	2b01      	cmp	r3, #1
{
 8016300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016304:	4604      	mov	r4, r0
 8016306:	b083      	sub	sp, #12
 8016308:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801630a:	d059      	beq.n	80163c0 <tcp_abandon+0xc4>
  if (pcb->state == TIME_WAIT) {
 801630c:	2b0a      	cmp	r3, #10
 801630e:	d061      	beq.n	80163d4 <tcp_abandon+0xd8>
    seqno = pcb->snd_nxt;
 8016310:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8016314:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8016318:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 801631c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8016320:	8ae7      	ldrh	r7, [r4, #22]
    if (pcb->state == CLOSED) {
 8016322:	2b00      	cmp	r3, #0
 8016324:	d13a      	bne.n	801639c <tcp_abandon+0xa0>
      if (pcb->local_port != 0) {
 8016326:	bb57      	cbnz	r7, 801637e <tcp_abandon+0x82>
    int send_rst = 0;
 8016328:	461e      	mov	r6, r3
    if (pcb->unacked != NULL) {
 801632a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801632c:	b130      	cbz	r0, 801633c <tcp_abandon+0x40>
    struct tcp_seg *next = seg->next;
 801632e:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8016332:	f7ff fb13 	bl	801595c <tcp_seg_free>
  while (seg != NULL) {
 8016336:	4658      	mov	r0, fp
 8016338:	2800      	cmp	r0, #0
 801633a:	d1f8      	bne.n	801632e <tcp_abandon+0x32>
    if (pcb->unsent != NULL) {
 801633c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 801633e:	b130      	cbz	r0, 801634e <tcp_abandon+0x52>
    struct tcp_seg *next = seg->next;
 8016340:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8016344:	f7ff fb0a 	bl	801595c <tcp_seg_free>
  while (seg != NULL) {
 8016348:	4658      	mov	r0, fp
 801634a:	2800      	cmp	r0, #0
 801634c:	d1f8      	bne.n	8016340 <tcp_abandon+0x44>
    if (pcb->ooseq != NULL) {
 801634e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8016350:	b130      	cbz	r0, 8016360 <tcp_abandon+0x64>
    struct tcp_seg *next = seg->next;
 8016352:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8016356:	f7ff fb01 	bl	801595c <tcp_seg_free>
  while (seg != NULL) {
 801635a:	4658      	mov	r0, fp
 801635c:	2800      	cmp	r0, #0
 801635e:	d1f8      	bne.n	8016352 <tcp_abandon+0x56>
    if (send_rst) {
 8016360:	bb26      	cbnz	r6, 80163ac <tcp_abandon+0xb0>
    memp_free(MEMP_TCP_PCB, pcb);
 8016362:	4621      	mov	r1, r4
 8016364:	2002      	movs	r0, #2
 8016366:	f7fe f8f7 	bl	8014558 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801636a:	2d00      	cmp	r5, #0
 801636c:	d048      	beq.n	8016400 <tcp_abandon+0x104>
 801636e:	4640      	mov	r0, r8
 8016370:	f06f 010c 	mvn.w	r1, #12
 8016374:	462b      	mov	r3, r5
}
 8016376:	b003      	add	sp, #12
 8016378:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801637c:	4718      	bx	r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801637e:	4b22      	ldr	r3, [pc, #136]	; (8016408 <tcp_abandon+0x10c>)
 8016380:	681a      	ldr	r2, [r3, #0]
 8016382:	42a2      	cmp	r2, r4
 8016384:	d031      	beq.n	80163ea <tcp_abandon+0xee>
 8016386:	2a00      	cmp	r2, #0
 8016388:	d031      	beq.n	80163ee <tcp_abandon+0xf2>
 801638a:	68d3      	ldr	r3, [r2, #12]
 801638c:	429c      	cmp	r4, r3
 801638e:	d033      	beq.n	80163f8 <tcp_abandon+0xfc>
 8016390:	b36b      	cbz	r3, 80163ee <tcp_abandon+0xf2>
 8016392:	68da      	ldr	r2, [r3, #12]
 8016394:	42a2      	cmp	r2, r4
 8016396:	d030      	beq.n	80163fa <tcp_abandon+0xfe>
 8016398:	4613      	mov	r3, r2
 801639a:	e7f9      	b.n	8016390 <tcp_abandon+0x94>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801639c:	4621      	mov	r1, r4
 801639e:	481b      	ldr	r0, [pc, #108]	; (801640c <tcp_abandon+0x110>)
 80163a0:	f7ff fde2 	bl	8015f68 <tcp_pcb_remove>
 80163a4:	4b1a      	ldr	r3, [pc, #104]	; (8016410 <tcp_abandon+0x114>)
 80163a6:	2201      	movs	r2, #1
 80163a8:	701a      	strb	r2, [r3, #0]
 80163aa:	e7be      	b.n	801632a <tcp_abandon+0x2e>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80163ac:	8b23      	ldrh	r3, [r4, #24]
 80163ae:	4651      	mov	r1, sl
 80163b0:	9700      	str	r7, [sp, #0]
 80163b2:	4648      	mov	r0, r9
 80163b4:	9301      	str	r3, [sp, #4]
 80163b6:	4622      	mov	r2, r4
 80163b8:	1d23      	adds	r3, r4, #4
 80163ba:	f002 fd17 	bl	8018dec <tcp_rst>
 80163be:	e7d0      	b.n	8016362 <tcp_abandon+0x66>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80163c0:	4b14      	ldr	r3, [pc, #80]	; (8016414 <tcp_abandon+0x118>)
 80163c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80163c6:	4914      	ldr	r1, [pc, #80]	; (8016418 <tcp_abandon+0x11c>)
 80163c8:	4814      	ldr	r0, [pc, #80]	; (801641c <tcp_abandon+0x120>)
 80163ca:	f008 f80d 	bl	801e3e8 <iprintf>
 80163ce:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state == TIME_WAIT) {
 80163d0:	2b0a      	cmp	r3, #10
 80163d2:	d19d      	bne.n	8016310 <tcp_abandon+0x14>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80163d4:	4621      	mov	r1, r4
 80163d6:	4812      	ldr	r0, [pc, #72]	; (8016420 <tcp_abandon+0x124>)
 80163d8:	f7ff fdc6 	bl	8015f68 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80163dc:	4621      	mov	r1, r4
 80163de:	2002      	movs	r0, #2
}
 80163e0:	b003      	add	sp, #12
 80163e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80163e6:	f7fe b8b7 	b.w	8014558 <memp_free>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80163ea:	68e2      	ldr	r2, [r4, #12]
 80163ec:	601a      	str	r2, [r3, #0]
 80163ee:	2300      	movs	r3, #0
    u16_t local_port = 0;
 80163f0:	461f      	mov	r7, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80163f2:	60e3      	str	r3, [r4, #12]
    int send_rst = 0;
 80163f4:	461e      	mov	r6, r3
 80163f6:	e798      	b.n	801632a <tcp_abandon+0x2e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80163f8:	4613      	mov	r3, r2
 80163fa:	68e2      	ldr	r2, [r4, #12]
 80163fc:	60da      	str	r2, [r3, #12]
 80163fe:	e7f6      	b.n	80163ee <tcp_abandon+0xf2>
}
 8016400:	b003      	add	sp, #12
 8016402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016406:	bf00      	nop
 8016408:	200354a0 	.word	0x200354a0
 801640c:	20035494 	.word	0x20035494
 8016410:	20035490 	.word	0x20035490
 8016414:	0803a6c8 	.word	0x0803a6c8
 8016418:	0803a640 	.word	0x0803a640
 801641c:	08023618 	.word	0x08023618
 8016420:	200354a4 	.word	0x200354a4

08016424 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8016424:	2101      	movs	r1, #1
 8016426:	f7ff bf69 	b.w	80162fc <tcp_abandon>
 801642a:	bf00      	nop

0801642c <tcp_accept_null>:
{
 801642c:	4608      	mov	r0, r1
  tcp_abandon(pcb, 1);
 801642e:	2101      	movs	r1, #1
{
 8016430:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8016432:	f7ff ff63 	bl	80162fc <tcp_abandon>
}
 8016436:	f06f 000c 	mvn.w	r0, #12
 801643a:	bd08      	pop	{r3, pc}

0801643c <tcp_netif_ip_addr_changed_pcblist>:
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 801643c:	b189      	cbz	r1, 8016462 <tcp_netif_ip_addr_changed_pcblist+0x26>
{
 801643e:	b538      	push	{r3, r4, r5, lr}
 8016440:	4605      	mov	r5, r0
 8016442:	4608      	mov	r0, r1
 8016444:	e001      	b.n	801644a <tcp_netif_ip_addr_changed_pcblist+0xe>
  while (pcb != NULL) {
 8016446:	4620      	mov	r0, r4
 8016448:	b154      	cbz	r4, 8016460 <tcp_netif_ip_addr_changed_pcblist+0x24>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801644a:	6802      	ldr	r2, [r0, #0]
 801644c:	682b      	ldr	r3, [r5, #0]
 801644e:	68c4      	ldr	r4, [r0, #12]
 8016450:	429a      	cmp	r2, r3
 8016452:	d1f8      	bne.n	8016446 <tcp_netif_ip_addr_changed_pcblist+0xa>
  tcp_abandon(pcb, 1);
 8016454:	2101      	movs	r1, #1
 8016456:	f7ff ff51 	bl	80162fc <tcp_abandon>
  while (pcb != NULL) {
 801645a:	4620      	mov	r0, r4
 801645c:	2c00      	cmp	r4, #0
 801645e:	d1f4      	bne.n	801644a <tcp_netif_ip_addr_changed_pcblist+0xe>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8016460:	bd38      	pop	{r3, r4, r5, pc}
 8016462:	4770      	bx	lr

08016464 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016464:	4b0f      	ldr	r3, [pc, #60]	; (80164a4 <tcp_kill_state+0x40>)
 8016466:	6819      	ldr	r1, [r3, #0]
 8016468:	b1d1      	cbz	r1, 80164a0 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801646a:	4b0f      	ldr	r3, [pc, #60]	; (80164a8 <tcp_kill_state+0x44>)
  inactivity = 0;
 801646c:	2200      	movs	r2, #0
{
 801646e:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016470:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8016472:	4614      	mov	r4, r2
 8016474:	e001      	b.n	801647a <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016476:	68c9      	ldr	r1, [r1, #12]
 8016478:	b159      	cbz	r1, 8016492 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801647a:	7d0b      	ldrb	r3, [r1, #20]
 801647c:	4283      	cmp	r3, r0
 801647e:	d1fa      	bne.n	8016476 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016480:	6a0b      	ldr	r3, [r1, #32]
 8016482:	1aeb      	subs	r3, r5, r3
 8016484:	4293      	cmp	r3, r2
 8016486:	d3f6      	bcc.n	8016476 <tcp_kill_state+0x12>
 8016488:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801648a:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801648c:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801648e:	2900      	cmp	r1, #0
 8016490:	d1f3      	bne.n	801647a <tcp_kill_state+0x16>
  if (inactive != NULL) {
 8016492:	b11c      	cbz	r4, 801649c <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 8016494:	4620      	mov	r0, r4
}
 8016496:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8016498:	f7ff bf30 	b.w	80162fc <tcp_abandon>
}
 801649c:	bc30      	pop	{r4, r5}
 801649e:	4770      	bx	lr
 80164a0:	4770      	bx	lr
 80164a2:	bf00      	nop
 80164a4:	20035494 	.word	0x20035494
 80164a8:	20035498 	.word	0x20035498

080164ac <tcp_alloc>:
{
 80164ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80164ae:	f240 6217 	movw	r2, #1559	; 0x617
{
 80164b2:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80164b4:	4952      	ldr	r1, [pc, #328]	; (8016600 <tcp_alloc+0x154>)
 80164b6:	2002      	movs	r0, #2
 80164b8:	f7fe f82a 	bl	8014510 <memp_malloc_fn>
  if (pcb == NULL) {
 80164bc:	b340      	cbz	r0, 8016510 <tcp_alloc+0x64>
 80164be:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80164c0:	2298      	movs	r2, #152	; 0x98
 80164c2:	2100      	movs	r1, #0
 80164c4:	4618      	mov	r0, r3
    pcb->ttl = TCP_TTL;
 80164c6:	26ff      	movs	r6, #255	; 0xff
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80164c8:	f007 f80e 	bl	801d4e8 <memset>
    pcb->last_timer = tcp_timer_ctr;
 80164cc:	4a4d      	ldr	r2, [pc, #308]	; (8016604 <tcp_alloc+0x158>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80164ce:	4603      	mov	r3, r0
    pcb->tmr = tcp_ticks;
 80164d0:	484d      	ldr	r0, [pc, #308]	; (8016608 <tcp_alloc+0x15c>)
    pcb->snd_buf = TCP_SND_BUF;
 80164d2:	f44f 6186 	mov.w	r1, #1072	; 0x430
    pcb->tmr = tcp_ticks;
 80164d6:	6805      	ldr	r5, [r0, #0]
    pcb->last_timer = tcp_timer_ctr;
 80164d8:	7810      	ldrb	r0, [r2, #0]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80164da:	2206      	movs	r2, #6
    pcb->prio = prio;
 80164dc:	755c      	strb	r4, [r3, #21]
    pcb->cwnd = 1;
 80164de:	2401      	movs	r4, #1
    pcb->last_timer = tcp_timer_ctr;
 80164e0:	7758      	strb	r0, [r3, #29]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80164e2:	484a      	ldr	r0, [pc, #296]	; (801660c <tcp_alloc+0x160>)
    pcb->tmr = tcp_ticks;
 80164e4:	621d      	str	r5, [r3, #32]
    pcb->snd_buf = TCP_SND_BUF;
 80164e6:	f8a3 1060 	strh.w	r1, [r3, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 80164ea:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
    pcb->rtime = -1;
 80164ee:	4d48      	ldr	r5, [pc, #288]	; (8016610 <tcp_alloc+0x164>)
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80164f0:	6298      	str	r0, [r3, #40]	; 0x28
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80164f2:	4948      	ldr	r1, [pc, #288]	; (8016614 <tcp_alloc+0x168>)
    pcb->recv = tcp_recv_null;
 80164f4:	4848      	ldr	r0, [pc, #288]	; (8016618 <tcp_alloc+0x16c>)
    pcb->ttl = TCP_TTL;
 80164f6:	729e      	strb	r6, [r3, #10]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80164f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80164fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80164fe:	631d      	str	r5, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016500:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8016504:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016508:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
}
 801650c:	4618      	mov	r0, r3
 801650e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016510:	4b42      	ldr	r3, [pc, #264]	; (801661c <tcp_alloc+0x170>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	b193      	cbz	r3, 801653c <tcp_alloc+0x90>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016516:	4a3c      	ldr	r2, [pc, #240]	; (8016608 <tcp_alloc+0x15c>)
 8016518:	4618      	mov	r0, r3
 801651a:	6a19      	ldr	r1, [r3, #32]
 801651c:	6815      	ldr	r5, [r2, #0]
 801651e:	1a69      	subs	r1, r5, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016520:	68db      	ldr	r3, [r3, #12]
 8016522:	b143      	cbz	r3, 8016536 <tcp_alloc+0x8a>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016524:	6a1a      	ldr	r2, [r3, #32]
 8016526:	1aaa      	subs	r2, r5, r2
 8016528:	428a      	cmp	r2, r1
 801652a:	d3f9      	bcc.n	8016520 <tcp_alloc+0x74>
 801652c:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801652e:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016530:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016532:	2b00      	cmp	r3, #0
 8016534:	d1f6      	bne.n	8016524 <tcp_alloc+0x78>
  tcp_abandon(pcb, 1);
 8016536:	2101      	movs	r1, #1
 8016538:	f7ff fee0 	bl	80162fc <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801653c:	f240 621d 	movw	r2, #1565	; 0x61d
 8016540:	492f      	ldr	r1, [pc, #188]	; (8016600 <tcp_alloc+0x154>)
 8016542:	2002      	movs	r0, #2
 8016544:	f7fd ffe4 	bl	8014510 <memp_malloc_fn>
    if (pcb == NULL) {
 8016548:	4603      	mov	r3, r0
 801654a:	b130      	cbz	r0, 801655a <tcp_alloc+0xae>
 801654c:	4a34      	ldr	r2, [pc, #208]	; (8016620 <tcp_alloc+0x174>)
 801654e:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8016552:	888a      	ldrh	r2, [r1, #4]
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016554:	3a01      	subs	r2, #1
 8016556:	808a      	strh	r2, [r1, #4]
 8016558:	e7b2      	b.n	80164c0 <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801655a:	2009      	movs	r0, #9
 801655c:	f7ff ff82 	bl	8016464 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016560:	f240 6223 	movw	r2, #1571	; 0x623
 8016564:	4926      	ldr	r1, [pc, #152]	; (8016600 <tcp_alloc+0x154>)
 8016566:	2002      	movs	r0, #2
 8016568:	f7fd ffd2 	bl	8014510 <memp_malloc_fn>
      if (pcb == NULL) {
 801656c:	4603      	mov	r3, r0
 801656e:	b138      	cbz	r0, 8016580 <tcp_alloc+0xd4>
 8016570:	4a2b      	ldr	r2, [pc, #172]	; (8016620 <tcp_alloc+0x174>)
 8016572:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8016576:	888a      	ldrh	r2, [r1, #4]
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016578:	3a01      	subs	r2, #1
 801657a:	b292      	uxth	r2, r2
 801657c:	808a      	strh	r2, [r1, #4]
 801657e:	e7e9      	b.n	8016554 <tcp_alloc+0xa8>
        tcp_kill_state(CLOSING);
 8016580:	2008      	movs	r0, #8
 8016582:	f7ff ff6f 	bl	8016464 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016586:	f240 6229 	movw	r2, #1577	; 0x629
 801658a:	491d      	ldr	r1, [pc, #116]	; (8016600 <tcp_alloc+0x154>)
 801658c:	2002      	movs	r0, #2
 801658e:	f7fd ffbf 	bl	8014510 <memp_malloc_fn>
        if (pcb == NULL) {
 8016592:	4603      	mov	r3, r0
 8016594:	b138      	cbz	r0, 80165a6 <tcp_alloc+0xfa>
 8016596:	4a22      	ldr	r2, [pc, #136]	; (8016620 <tcp_alloc+0x174>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016598:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 801659c:	888a      	ldrh	r2, [r1, #4]
 801659e:	3a01      	subs	r2, #1
 80165a0:	b292      	uxth	r2, r2
 80165a2:	808a      	strh	r2, [r1, #4]
 80165a4:	e7e8      	b.n	8016578 <tcp_alloc+0xcc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80165a6:	4a1f      	ldr	r2, [pc, #124]	; (8016624 <tcp_alloc+0x178>)
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80165a8:	f014 0f80 	tst.w	r4, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80165ac:	6812      	ldr	r2, [r2, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80165ae:	bf0c      	ite	eq
 80165b0:	4625      	moveq	r5, r4
 80165b2:	257f      	movne	r5, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80165b4:	b1a2      	cbz	r2, 80165e0 <tcp_alloc+0x134>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80165b6:	4914      	ldr	r1, [pc, #80]	; (8016608 <tcp_alloc+0x15c>)
  inactivity = 0;
 80165b8:	4606      	mov	r6, r0
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80165ba:	680f      	ldr	r7, [r1, #0]
    if (pcb->prio <= mprio &&
 80165bc:	7d50      	ldrb	r0, [r2, #21]
 80165be:	4285      	cmp	r5, r0
 80165c0:	d306      	bcc.n	80165d0 <tcp_alloc+0x124>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80165c2:	6a11      	ldr	r1, [r2, #32]
 80165c4:	1a79      	subs	r1, r7, r1
    if (pcb->prio <= mprio &&
 80165c6:	428e      	cmp	r6, r1
 80165c8:	d802      	bhi.n	80165d0 <tcp_alloc+0x124>
 80165ca:	4605      	mov	r5, r0
 80165cc:	460e      	mov	r6, r1
 80165ce:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80165d0:	68d2      	ldr	r2, [r2, #12]
 80165d2:	2a00      	cmp	r2, #0
 80165d4:	d1f2      	bne.n	80165bc <tcp_alloc+0x110>
  if (inactive != NULL) {
 80165d6:	b11b      	cbz	r3, 80165e0 <tcp_alloc+0x134>
  tcp_abandon(pcb, 1);
 80165d8:	4618      	mov	r0, r3
 80165da:	2101      	movs	r1, #1
 80165dc:	f7ff fe8e 	bl	80162fc <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80165e0:	f240 622f 	movw	r2, #1583	; 0x62f
 80165e4:	4906      	ldr	r1, [pc, #24]	; (8016600 <tcp_alloc+0x154>)
 80165e6:	2002      	movs	r0, #2
 80165e8:	f7fd ff92 	bl	8014510 <memp_malloc_fn>
          if (pcb != NULL) {
 80165ec:	4603      	mov	r3, r0
 80165ee:	2800      	cmp	r0, #0
 80165f0:	d08c      	beq.n	801650c <tcp_alloc+0x60>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80165f2:	4a0b      	ldr	r2, [pc, #44]	; (8016620 <tcp_alloc+0x174>)
 80165f4:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 80165f8:	8881      	ldrh	r1, [r0, #4]
 80165fa:	3901      	subs	r1, #1
 80165fc:	8081      	strh	r1, [r0, #4]
 80165fe:	e7cb      	b.n	8016598 <tcp_alloc+0xec>
 8016600:	0803a6c8 	.word	0x0803a6c8
 8016604:	200214a9 	.word	0x200214a9
 8016608:	20035498 	.word	0x20035498
 801660c:	08600860 	.word	0x08600860
 8016610:	0218ffff 	.word	0x0218ffff
 8016614:	006ddd00 	.word	0x006ddd00
 8016618:	080161b5 	.word	0x080161b5
 801661c:	200354a4 	.word	0x200354a4
 8016620:	20035384 	.word	0x20035384
 8016624:	20035494 	.word	0x20035494

08016628 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8016628:	2040      	movs	r0, #64	; 0x40
 801662a:	f7ff bf3f 	b.w	80164ac <tcp_alloc>
 801662e:	bf00      	nop

08016630 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016630:	2040      	movs	r0, #64	; 0x40
 8016632:	f7ff bf3b 	b.w	80164ac <tcp_alloc>
 8016636:	bf00      	nop

08016638 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8016638:	4b03      	ldr	r3, [pc, #12]	; (8016648 <tcp_next_iss+0x10>)
 801663a:	4a04      	ldr	r2, [pc, #16]	; (801664c <tcp_next_iss+0x14>)
 801663c:	6818      	ldr	r0, [r3, #0]
 801663e:	6812      	ldr	r2, [r2, #0]
 8016640:	4410      	add	r0, r2
 8016642:	6018      	str	r0, [r3, #0]
}
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
 8016648:	20000440 	.word	0x20000440
 801664c:	20035498 	.word	0x20035498

08016650 <tcp_eff_send_mss_impl>:
{
 8016650:	b510      	push	{r4, lr}
 8016652:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8016654:	4608      	mov	r0, r1
 8016656:	f005 facd 	bl	801bbf4 <ip4_route>
    if (outif == NULL) {
 801665a:	b130      	cbz	r0, 801666a <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 801665c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  if (mtu != 0) {
 801665e:	b123      	cbz	r3, 801666a <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8016660:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016662:	b29b      	uxth	r3, r3
 8016664:	429c      	cmp	r4, r3
 8016666:	bf28      	it	cs
 8016668:	461c      	movcs	r4, r3
}
 801666a:	4620      	mov	r0, r4
 801666c:	bd10      	pop	{r4, pc}
 801666e:	bf00      	nop

08016670 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8016670:	b310      	cbz	r0, 80166b8 <tcp_netif_ip_addr_changed+0x48>
 8016672:	6802      	ldr	r2, [r0, #0]
{
 8016674:	b538      	push	{r3, r4, r5, lr}
 8016676:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8016678:	b902      	cbnz	r2, 801667c <tcp_netif_ip_addr_changed+0xc>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 801667a:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801667c:	4b0f      	ldr	r3, [pc, #60]	; (80166bc <tcp_netif_ip_addr_changed+0x4c>)
 801667e:	460d      	mov	r5, r1
 8016680:	6819      	ldr	r1, [r3, #0]
 8016682:	f7ff fedb 	bl	801643c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016686:	4b0e      	ldr	r3, [pc, #56]	; (80166c0 <tcp_netif_ip_addr_changed+0x50>)
 8016688:	4620      	mov	r0, r4
 801668a:	6819      	ldr	r1, [r3, #0]
 801668c:	f7ff fed6 	bl	801643c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8016690:	2d00      	cmp	r5, #0
 8016692:	d0f2      	beq.n	801667a <tcp_netif_ip_addr_changed+0xa>
 8016694:	682b      	ldr	r3, [r5, #0]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d0ef      	beq.n	801667a <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801669a:	4b0a      	ldr	r3, [pc, #40]	; (80166c4 <tcp_netif_ip_addr_changed+0x54>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d0eb      	beq.n	801667a <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80166a2:	6818      	ldr	r0, [r3, #0]
 80166a4:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 80166a6:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80166a8:	4288      	cmp	r0, r1
 80166aa:	d101      	bne.n	80166b0 <tcp_netif_ip_addr_changed+0x40>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80166ac:	6829      	ldr	r1, [r5, #0]
 80166ae:	6019      	str	r1, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80166b0:	4613      	mov	r3, r2
 80166b2:	2a00      	cmp	r2, #0
 80166b4:	d1f5      	bne.n	80166a2 <tcp_netif_ip_addr_changed+0x32>
}
 80166b6:	bd38      	pop	{r3, r4, r5, pc}
 80166b8:	4770      	bx	lr
 80166ba:	bf00      	nop
 80166bc:	20035494 	.word	0x20035494
 80166c0:	200354a0 	.word	0x200354a0
 80166c4:	2003549c 	.word	0x2003549c

080166c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80166c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80166ca:	6903      	ldr	r3, [r0, #16]
{
 80166cc:	4605      	mov	r5, r0
 80166ce:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80166d0:	8998      	ldrh	r0, [r3, #12]
 80166d2:	f7fc fd8f 	bl	80131f4 <lwip_htons>
 80166d6:	07c2      	lsls	r2, r0, #31
 80166d8:	d432      	bmi.n	8016740 <tcp_oos_insert_segment+0x78>
 80166da:	4e1c      	ldr	r6, [pc, #112]	; (801674c <tcp_oos_insert_segment+0x84>)
 80166dc:	e005      	b.n	80166ea <tcp_oos_insert_segment+0x22>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 80166de:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80166e0:	4620      	mov	r0, r4
 80166e2:	f7ff f93b 	bl	801595c <tcp_seg_free>
 80166e6:	463c      	mov	r4, r7
    while (next &&
 80166e8:	b1ef      	cbz	r7, 8016726 <tcp_oos_insert_segment+0x5e>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80166ea:	6921      	ldr	r1, [r4, #16]
 80166ec:	8923      	ldrh	r3, [r4, #8]
 80166ee:	6848      	ldr	r0, [r1, #4]
 80166f0:	6837      	ldr	r7, [r6, #0]
 80166f2:	892a      	ldrh	r2, [r5, #8]
 80166f4:	4403      	add	r3, r0
 80166f6:	443a      	add	r2, r7
 80166f8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	db15      	blt.n	801672a <tcp_oos_insert_segment+0x62>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80166fe:	8988      	ldrh	r0, [r1, #12]
 8016700:	f7fc fd78 	bl	80131f4 <lwip_htons>
 8016704:	07c3      	lsls	r3, r0, #31
 8016706:	d5ea      	bpl.n	80166de <tcp_oos_insert_segment+0x16>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016708:	692b      	ldr	r3, [r5, #16]
 801670a:	2001      	movs	r0, #1
 801670c:	899f      	ldrh	r7, [r3, #12]
 801670e:	f7fc fd71 	bl	80131f4 <lwip_htons>
 8016712:	692b      	ldr	r3, [r5, #16]
 8016714:	4338      	orrs	r0, r7
      next = next->next;
 8016716:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016718:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801671a:	4620      	mov	r0, r4
 801671c:	f7ff f91e 	bl	801595c <tcp_seg_free>
 8016720:	463c      	mov	r4, r7
    while (next &&
 8016722:	2f00      	cmp	r7, #0
 8016724:	d1e1      	bne.n	80166ea <tcp_oos_insert_segment+0x22>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 8016726:	602c      	str	r4, [r5, #0]
}
 8016728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801672a:	1a12      	subs	r2, r2, r0
    if (next &&
 801672c:	2a00      	cmp	r2, #0
 801672e:	ddfa      	ble.n	8016726 <tcp_oos_insert_segment+0x5e>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016730:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 8016732:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016734:	b289      	uxth	r1, r1
 8016736:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016738:	f7fe fa82 	bl	8014c40 <pbuf_realloc>
  cseg->next = next;
 801673c:	602c      	str	r4, [r5, #0]
}
 801673e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 8016740:	4620      	mov	r0, r4
    next = NULL;
 8016742:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8016744:	f7ff f918 	bl	8015978 <tcp_segs_free>
  cseg->next = next;
 8016748:	602c      	str	r4, [r5, #0]
}
 801674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801674c:	200214d4 	.word	0x200214d4

08016750 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016750:	7d03      	ldrb	r3, [r0, #20]
 8016752:	2b03      	cmp	r3, #3
{
 8016754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016758:	4604      	mov	r4, r0
 801675a:	b081      	sub	sp, #4
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801675c:	f240 80dd 	bls.w	801691a <tcp_receive+0x1ca>

  if (flags & TCP_ACK) {
 8016760:	4b85      	ldr	r3, [pc, #532]	; (8016978 <tcp_receive+0x228>)
 8016762:	f8df 8238 	ldr.w	r8, [pc, #568]	; 801699c <tcp_receive+0x24c>
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	f8d8 2000 	ldr.w	r2, [r8]
 801676c:	06db      	lsls	r3, r3, #27
 801676e:	d435      	bmi.n	80167dc <tcp_receive+0x8c>
 8016770:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80169a0 <tcp_receive+0x250>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016774:	f8b9 1000 	ldrh.w	r1, [r9]
 8016778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801677a:	b1f1      	cbz	r1, 80167ba <tcp_receive+0x6a>
 801677c:	7d20      	ldrb	r0, [r4, #20]
 801677e:	2806      	cmp	r0, #6
 8016780:	d81b      	bhi.n	80167ba <tcp_receive+0x6a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016782:	1a9d      	subs	r5, r3, r2
 8016784:	2d01      	cmp	r5, #1
 8016786:	d406      	bmi.n	8016796 <tcp_receive+0x46>
 8016788:	1a59      	subs	r1, r3, r1
 801678a:	f1c2 0001 	rsb	r0, r2, #1
 801678e:	4401      	add	r1, r0
 8016790:	2900      	cmp	r1, #0
 8016792:	f340 81ae 	ble.w	8016af2 <tcp_receive+0x3a2>
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016796:	1ad1      	subs	r1, r2, r3
 8016798:	2900      	cmp	r1, #0
 801679a:	f2c0 81a5 	blt.w	8016ae8 <tcp_receive+0x398>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801679e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80167a0:	f1c1 0101 	rsb	r1, r1, #1
 80167a4:	4411      	add	r1, r2
 80167a6:	1ac9      	subs	r1, r1, r3
 80167a8:	2900      	cmp	r1, #0
 80167aa:	f340 8251 	ble.w	8016c50 <tcp_receive+0x500>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80167ae:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 80167b0:	b001      	add	sp, #4
 80167b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 80167b6:	f002 b8fd 	b.w	80189b4 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80167ba:	1ad1      	subs	r1, r2, r3
 80167bc:	2900      	cmp	r1, #0
 80167be:	db06      	blt.n	80167ce <tcp_receive+0x7e>
 80167c0:	f1c3 0301 	rsb	r3, r3, #1
 80167c4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80167c6:	1a5b      	subs	r3, r3, r1
 80167c8:	4413      	add	r3, r2
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	dd03      	ble.n	80167d6 <tcp_receive+0x86>
      tcp_ack_now(pcb);
 80167ce:	7ea3      	ldrb	r3, [r4, #26]
 80167d0:	f043 0302 	orr.w	r3, r3, #2
 80167d4:	76a3      	strb	r3, [r4, #26]
}
 80167d6:	b001      	add	sp, #4
 80167d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80167dc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80167de:	4e67      	ldr	r6, [pc, #412]	; (801697c <tcp_receive+0x22c>)
 80167e0:	1a88      	subs	r0, r1, r2
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80167e2:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
 80167e6:	6833      	ldr	r3, [r6, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80167e8:	2800      	cmp	r0, #0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80167ea:	6d65      	ldr	r5, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80167ec:	db7d      	blt.n	80168ea <tcp_receive+0x19a>
 80167ee:	4291      	cmp	r1, r2
 80167f0:	d078      	beq.n	80168e4 <tcp_receive+0x194>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80167f2:	429d      	cmp	r5, r3
 80167f4:	f000 80b9 	beq.w	801696a <tcp_receive+0x21a>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80167f8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80167fa:	1a99      	subs	r1, r3, r2
 80167fc:	2900      	cmp	r1, #0
 80167fe:	f300 8094 	bgt.w	801692a <tcp_receive+0x1da>
      if (tcplen == 0) {
 8016802:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80169a0 <tcp_receive+0x250>
 8016806:	f8b9 1000 	ldrh.w	r1, [r9]
 801680a:	b939      	cbnz	r1, 801681c <tcp_receive+0xcc>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801680c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016810:	443d      	add	r5, r7
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016814:	4401      	add	r1, r0
 8016816:	42a9      	cmp	r1, r5
 8016818:	f000 830f 	beq.w	8016e3a <tcp_receive+0x6ea>
        pcb->dupacks = 0;
 801681c:	2200      	movs	r2, #0
 801681e:	4f58      	ldr	r7, [pc, #352]	; (8016980 <tcp_receive+0x230>)
 8016820:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016822:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    while (pcb->unsent != NULL &&
 8016826:	2b00      	cmp	r3, #0
 8016828:	d04b      	beq.n	80168c2 <tcp_receive+0x172>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801682a:	691b      	ldr	r3, [r3, #16]
 801682c:	6835      	ldr	r5, [r6, #0]
 801682e:	6858      	ldr	r0, [r3, #4]
 8016830:	f7fc fce4 	bl	80131fc <lwip_htonl>
 8016834:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016836:	4682      	mov	sl, r0
 8016838:	691a      	ldr	r2, [r3, #16]
 801683a:	f8b3 b008 	ldrh.w	fp, [r3, #8]
 801683e:	8990      	ldrh	r0, [r2, #12]
 8016840:	f7fc fcd8 	bl	80131f4 <lwip_htons>
 8016844:	eba5 050b 	sub.w	r5, r5, fp
 8016848:	f010 0003 	ands.w	r0, r0, #3
 801684c:	eba5 050a 	sub.w	r5, r5, sl
 8016850:	bf18      	it	ne
 8016852:	2001      	movne	r0, #1
 8016854:	1a2d      	subs	r5, r5, r0
    while (pcb->unsent != NULL &&
 8016856:	2d00      	cmp	r5, #0
 8016858:	db33      	blt.n	80168c2 <tcp_receive+0x172>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801685a:	6833      	ldr	r3, [r6, #0]
 801685c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801685e:	1a9b      	subs	r3, r3, r2
 8016860:	2b00      	cmp	r3, #0
 8016862:	dc2e      	bgt.n	80168c2 <tcp_receive+0x172>
      next = pcb->unsent;
 8016864:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8016866:	682b      	ldr	r3, [r5, #0]
 8016868:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 801686a:	2b00      	cmp	r3, #0
 801686c:	d073      	beq.n	8016956 <tcp_receive+0x206>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801686e:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
 8016872:	6868      	ldr	r0, [r5, #4]
 8016874:	f7fe fa5c 	bl	8014d30 <pbuf_clen>
 8016878:	4582      	cmp	sl, r0
 801687a:	d364      	bcc.n	8016946 <tcp_receive+0x1f6>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 801687c:	6868      	ldr	r0, [r5, #4]
 801687e:	f7fe fa57 	bl	8014d30 <pbuf_clen>
 8016882:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
      recv_acked += next->len;
 8016886:	892b      	ldrh	r3, [r5, #8]
 8016888:	8839      	ldrh	r1, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 801688a:	1a12      	subs	r2, r2, r0
      tcp_seg_free(next);
 801688c:	4628      	mov	r0, r5
      recv_acked += next->len;
 801688e:	440b      	add	r3, r1
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8016890:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      recv_acked += next->len;
 8016894:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8016896:	f7ff f861 	bl	801595c <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 801689a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d04f      	beq.n	8016942 <tcp_receive+0x1f2>
 80168a2:	e9d4 321a 	ldrd	r3, r2, [r4, #104]	; 0x68
        LWIP_ASSERT("tcp_receive: valid queue length",
 80168a6:	2a00      	cmp	r2, #0
 80168a8:	d1bd      	bne.n	8016826 <tcp_receive+0xd6>
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d1bb      	bne.n	8016826 <tcp_receive+0xd6>
 80168ae:	4b35      	ldr	r3, [pc, #212]	; (8016984 <tcp_receive+0x234>)
 80168b0:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80168b4:	4934      	ldr	r1, [pc, #208]	; (8016988 <tcp_receive+0x238>)
 80168b6:	4835      	ldr	r0, [pc, #212]	; (801698c <tcp_receive+0x23c>)
 80168b8:	f007 fd96 	bl	801e3e8 <iprintf>
 80168bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    while (pcb->unsent != NULL &&
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d1b3      	bne.n	801682a <tcp_receive+0xda>
    pcb->snd_buf += recv_acked;
 80168c2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80168c6:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80168c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 80168ca:	440b      	add	r3, r1
 80168cc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80168d0:	b12a      	cbz	r2, 80168de <tcp_receive+0x18e>
 80168d2:	6831      	ldr	r1, [r6, #0]
 80168d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80168d6:	1a5b      	subs	r3, r3, r1
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f2c0 80db 	blt.w	8016a94 <tcp_receive+0x344>
 80168de:	f8d8 2000 	ldr.w	r2, [r8]
 80168e2:	e747      	b.n	8016774 <tcp_receive+0x24>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80168e4:	1ae9      	subs	r1, r5, r3
 80168e6:	2900      	cmp	r1, #0
 80168e8:	da83      	bge.n	80167f2 <tcp_receive+0xa2>
 80168ea:	4929      	ldr	r1, [pc, #164]	; (8016990 <tcp_receive+0x240>)
 80168ec:	6809      	ldr	r1, [r1, #0]
 80168ee:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80168f0:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80168f4:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80168f8:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 80168fa:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
        pcb->snd_wnd_max = pcb->snd_wnd;
 80168fe:	bf38      	it	cc
 8016900:	f8a4 105e 	strhcc.w	r1, [r4, #94]	; 0x5e
 8016904:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8016908:	bb41      	cbnz	r1, 801695c <tcp_receive+0x20c>
        if (pcb->persist_backoff == 0) {
 801690a:	2a00      	cmp	r2, #0
 801690c:	f47f af74 	bne.w	80167f8 <tcp_receive+0xa8>
          pcb->persist_cnt = 0;
 8016910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016914:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 8016918:	e76e      	b.n	80167f8 <tcp_receive+0xa8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801691a:	4b1a      	ldr	r3, [pc, #104]	; (8016984 <tcp_receive+0x234>)
 801691c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8016920:	491c      	ldr	r1, [pc, #112]	; (8016994 <tcp_receive+0x244>)
 8016922:	481a      	ldr	r0, [pc, #104]	; (801698c <tcp_receive+0x23c>)
 8016924:	f007 fd60 	bl	801e3e8 <iprintf>
 8016928:	e71a      	b.n	8016760 <tcp_receive+0x10>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801692a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801692c:	1a9a      	subs	r2, r3, r2
 801692e:	2a00      	cmp	r2, #0
 8016930:	dd38      	ble.n	80169a4 <tcp_receive+0x254>
      tcp_send_empty_ack(pcb);
 8016932:	4620      	mov	r0, r4
 8016934:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80169a0 <tcp_receive+0x250>
 8016938:	f002 f83c 	bl	80189b4 <tcp_send_empty_ack>
 801693c:	4f10      	ldr	r7, [pc, #64]	; (8016980 <tcp_receive+0x230>)
 801693e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016940:	e771      	b.n	8016826 <tcp_receive+0xd6>
 8016942:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016944:	e76f      	b.n	8016826 <tcp_receive+0xd6>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8016946:	4b0f      	ldr	r3, [pc, #60]	; (8016984 <tcp_receive+0x234>)
 8016948:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801694c:	4912      	ldr	r1, [pc, #72]	; (8016998 <tcp_receive+0x248>)
 801694e:	480f      	ldr	r0, [pc, #60]	; (801698c <tcp_receive+0x23c>)
 8016950:	f007 fd4a 	bl	801e3e8 <iprintf>
 8016954:	e792      	b.n	801687c <tcp_receive+0x12c>
        pcb->unsent_oversize = 0;
 8016956:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 801695a:	e788      	b.n	801686e <tcp_receive+0x11e>
      } else if (pcb->persist_backoff > 0) {
 801695c:	2a00      	cmp	r2, #0
 801695e:	f43f af4b 	beq.w	80167f8 <tcp_receive+0xa8>
          pcb->persist_backoff = 0;
 8016962:	2200      	movs	r2, #0
 8016964:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
 8016968:	e746      	b.n	80167f8 <tcp_receive+0xa8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801696a:	4909      	ldr	r1, [pc, #36]	; (8016990 <tcp_receive+0x240>)
 801696c:	6809      	ldr	r1, [r1, #0]
 801696e:	89c9      	ldrh	r1, [r1, #14]
 8016970:	428f      	cmp	r7, r1
 8016972:	f4bf af41 	bcs.w	80167f8 <tcp_receive+0xa8>
 8016976:	e7bb      	b.n	80168f0 <tcp_receive+0x1a0>
 8016978:	200214b0 	.word	0x200214b0
 801697c:	200214ac 	.word	0x200214ac
 8016980:	200214c8 	.word	0x200214c8
 8016984:	0803abe4 	.word	0x0803abe4
 8016988:	0803ac5c 	.word	0x0803ac5c
 801698c:	08023618 	.word	0x08023618
 8016990:	200214dc 	.word	0x200214dc
 8016994:	0803ac18 	.word	0x0803ac18
 8016998:	0803ac34 	.word	0x0803ac34
 801699c:	200214d4 	.word	0x200214d4
 80169a0:	200214ea 	.word	0x200214ea
      if (pcb->flags & TF_INFR) {
 80169a4:	7ea2      	ldrb	r2, [r4, #26]
 80169a6:	0757      	lsls	r7, r2, #29
 80169a8:	d506      	bpl.n	80169b8 <tcp_receive+0x268>
        pcb->flags &= ~TF_INFR;
 80169aa:	f022 0204 	bic.w	r2, r2, #4
        pcb->cwnd = pcb->ssthresh;
 80169ae:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
        pcb->flags &= ~TF_INFR;
 80169b2:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80169b4:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80169b8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 80169ba:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80169bc:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 80169c0:	6463      	str	r3, [r4, #68]	; 0x44
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80169c2:	eb02 03e0 	add.w	r3, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 80169c6:	7d22      	ldrb	r2, [r4, #20]
      pcb->nrtx = 0;
 80169c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 80169cc:	2a03      	cmp	r2, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80169ce:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 80169d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 80169d6:	d90f      	bls.n	80169f8 <tcp_receive+0x2a8>
        if (pcb->cwnd < pcb->ssthresh) {
 80169d8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80169dc:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 80169e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80169e2:	4291      	cmp	r1, r2
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80169e4:	bf9c      	itt	ls
 80169e6:	435b      	mulls	r3, r3
 80169e8:	fb93 f3f2 	sdivls	r3, r3, r2
 80169ec:	4413      	add	r3, r2
 80169ee:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80169f0:	429a      	cmp	r2, r3
 80169f2:	d201      	bcs.n	80169f8 <tcp_receive+0x2a8>
            pcb->cwnd = new_cwnd;
 80169f4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80169f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80169fa:	4fb7      	ldr	r7, [pc, #732]	; (8016cd8 <tcp_receive+0x588>)
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80169fc:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 8016cec <tcp_receive+0x59c>
 8016a00:	4db6      	ldr	r5, [pc, #728]	; (8016cdc <tcp_receive+0x58c>)
      while (pcb->unacked != NULL &&
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	f000 8314 	beq.w	8017030 <tcp_receive+0x8e0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8016a08:	691b      	ldr	r3, [r3, #16]
 8016a0a:	6858      	ldr	r0, [r3, #4]
 8016a0c:	f7fc fbf6 	bl	80131fc <lwip_htonl>
 8016a10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016a12:	4683      	mov	fp, r0
 8016a14:	691a      	ldr	r2, [r3, #16]
 8016a16:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 8016a1a:	8990      	ldrh	r0, [r2, #12]
 8016a1c:	f7fc fbea 	bl	80131f4 <lwip_htons>
 8016a20:	6833      	ldr	r3, [r6, #0]
 8016a22:	f010 0003 	ands.w	r0, r0, #3
 8016a26:	ebaa 0a03 	sub.w	sl, sl, r3
 8016a2a:	bf18      	it	ne
 8016a2c:	2001      	movne	r0, #1
 8016a2e:	44da      	add	sl, fp
 8016a30:	4450      	add	r0, sl
      while (pcb->unacked != NULL &&
 8016a32:	2800      	cmp	r0, #0
 8016a34:	f300 82ae 	bgt.w	8016f94 <tcp_receive+0x844>
        next = pcb->unacked;
 8016a38:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8016a3c:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 8016a40:	e9da 3000 	ldrd	r3, r0, [sl]
        pcb->unacked = pcb->unacked->next;
 8016a44:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8016a46:	f7fe f973 	bl	8014d30 <pbuf_clen>
 8016a4a:	4583      	cmp	fp, r0
 8016a4c:	d344      	bcc.n	8016ad8 <tcp_receive+0x388>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8016a4e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8016a52:	f7fe f96d 	bl	8014d30 <pbuf_clen>
 8016a56:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
        recv_acked += next->len;
 8016a5a:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8016a5e:	8839      	ldrh	r1, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8016a60:	1a12      	subs	r2, r2, r0
        tcp_seg_free(next);
 8016a62:	4650      	mov	r0, sl
        recv_acked += next->len;
 8016a64:	440b      	add	r3, r1
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8016a66:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        recv_acked += next->len;
 8016a6a:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8016a6c:	f7fe ff76 	bl	801595c <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8016a70:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8016a74:	b373      	cbz	r3, 8016ad4 <tcp_receive+0x384>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8016a76:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d1c2      	bne.n	8016a02 <tcp_receive+0x2b2>
 8016a7c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	f000 829a 	beq.w	8016fb8 <tcp_receive+0x868>
        pcb->rtime = -1;
 8016a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a88:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8016cf0 <tcp_receive+0x5a0>
 8016a90:	76e2      	strb	r2, [r4, #27]
 8016a92:	e6c8      	b.n	8016826 <tcp_receive+0xd6>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016a94:	4b92      	ldr	r3, [pc, #584]	; (8016ce0 <tcp_receive+0x590>)
      m = m - (pcb->sa >> 3);
 8016a96:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	1a9b      	subs	r3, r3, r2
      m = m - (pcb->sa >> 3);
 8016a9e:	eba3 03e1 	sub.w	r3, r3, r1, asr #3
 8016aa2:	b29b      	uxth	r3, r3
      pcb->sa += m;
 8016aa4:	4419      	add	r1, r3
      m = m - (pcb->sa >> 3);
 8016aa6:	b218      	sxth	r0, r3
      pcb->sa += m;
 8016aa8:	b209      	sxth	r1, r1
      if (m < 0) {
 8016aaa:	2800      	cmp	r0, #0
      pcb->sa += m;
 8016aac:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8016aae:	da01      	bge.n	8016ab4 <tcp_receive+0x364>
        m = -m;
 8016ab0:	425b      	negs	r3, r3
 8016ab2:	b218      	sxth	r0, r3
      m = m - (pcb->sv >> 2);
 8016ab4:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 8016ab8:	2200      	movs	r2, #0
      pcb->sv += m;
 8016aba:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
      pcb->rttest = 0;
 8016abe:	6362      	str	r2, [r4, #52]	; 0x34
 8016ac0:	f8d8 2000 	ldr.w	r2, [r8]
      pcb->sv += m;
 8016ac4:	4403      	add	r3, r0
 8016ac6:	b29b      	uxth	r3, r3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8016ac8:	eb03 01e1 	add.w	r1, r3, r1, asr #3
      pcb->sv += m;
 8016acc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8016ace:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8016ad2:	e64f      	b.n	8016774 <tcp_receive+0x24>
 8016ad4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016ad6:	e794      	b.n	8016a02 <tcp_receive+0x2b2>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8016ad8:	464b      	mov	r3, r9
 8016ada:	f240 429e 	movw	r2, #1182	; 0x49e
 8016ade:	4981      	ldr	r1, [pc, #516]	; (8016ce4 <tcp_receive+0x594>)
 8016ae0:	4628      	mov	r0, r5
 8016ae2:	f007 fc81 	bl	801e3e8 <iprintf>
 8016ae6:	e7b2      	b.n	8016a4e <tcp_receive+0x2fe>
        tcp_ack_now(pcb);
 8016ae8:	7ea3      	ldrb	r3, [r4, #26]
 8016aea:	f043 0302 	orr.w	r3, r3, #2
 8016aee:	76a3      	strb	r3, [r4, #26]
 8016af0:	e65d      	b.n	80167ae <tcp_receive+0x5e>
      struct pbuf *p = inseg.p;
 8016af2:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8016ce8 <tcp_receive+0x598>
      off = pcb->rcv_nxt - seqno;
 8016af6:	462f      	mov	r7, r5
      struct pbuf *p = inseg.p;
 8016af8:	f8da 6004 	ldr.w	r6, [sl, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016afc:	2e00      	cmp	r6, #0
 8016afe:	f000 81cf 	beq.w	8016ea0 <tcp_receive+0x750>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8016b02:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8016b06:	429d      	cmp	r5, r3
 8016b08:	f300 81c2 	bgt.w	8016e90 <tcp_receive+0x740>
      if (inseg.p->len < off) {
 8016b0c:	f8da 0004 	ldr.w	r0, [sl, #4]
 8016b10:	fa1f fb85 	uxth.w	fp, r5
 8016b14:	8943      	ldrh	r3, [r0, #10]
 8016b16:	42ab      	cmp	r3, r5
 8016b18:	f280 81aa 	bge.w	8016e70 <tcp_receive+0x720>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016b1c:	8903      	ldrh	r3, [r0, #8]
 8016b1e:	42ab      	cmp	r3, r5
 8016b20:	f2c0 8257 	blt.w	8016fd2 <tcp_receive+0x882>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016b24:	eba3 020b 	sub.w	r2, r3, fp
        while (p->len < off) {
 8016b28:	8973      	ldrh	r3, [r6, #10]
 8016b2a:	429d      	cmp	r5, r3
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016b2c:	b292      	uxth	r2, r2
        while (p->len < off) {
 8016b2e:	dd07      	ble.n	8016b40 <tcp_receive+0x3f0>
          p->len = 0;
 8016b30:	2100      	movs	r1, #0
 8016b32:	8171      	strh	r1, [r6, #10]
          off -= p->len;
 8016b34:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 8016b36:	8132      	strh	r2, [r6, #8]
          p = p->next;
 8016b38:	6836      	ldr	r6, [r6, #0]
        while (p->len < off) {
 8016b3a:	8973      	ldrh	r3, [r6, #10]
 8016b3c:	42bb      	cmp	r3, r7
 8016b3e:	dbf8      	blt.n	8016b32 <tcp_receive+0x3e2>
        if (pbuf_header(p, (s16_t)-off)) {
 8016b40:	4279      	negs	r1, r7
 8016b42:	4630      	mov	r0, r6
 8016b44:	b209      	sxth	r1, r1
 8016b46:	f7fd fef7 	bl	8014938 <pbuf_header>
 8016b4a:	2800      	cmp	r0, #0
 8016b4c:	f040 8268 	bne.w	8017020 <tcp_receive+0x8d0>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8016b50:	f8ba 1008 	ldrh.w	r1, [sl, #8]
 8016b54:	f8d8 3000 	ldr.w	r3, [r8]
 8016b58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016b5a:	440b      	add	r3, r1
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016b5c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016b5e:	f8da 1010 	ldr.w	r1, [sl, #16]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8016b62:	1a9b      	subs	r3, r3, r2
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016b64:	f8c8 2000 	str.w	r2, [r8]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8016b68:	f8aa 3008 	strh.w	r3, [sl, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016b6c:	604a      	str	r2, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	f43f ae1d 	beq.w	80167ae <tcp_receive+0x5e>
        tcplen = TCP_TCPLEN(&inseg);
 8016b74:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016b78:	f8ba 5008 	ldrh.w	r5, [sl, #8]
 8016b7c:	8998      	ldrh	r0, [r3, #12]
 8016b7e:	f7fc fb39 	bl	80131f4 <lwip_htons>
 8016b82:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8016b86:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8016b88:	bf18      	it	ne
 8016b8a:	2301      	movne	r3, #1
 8016b8c:	442b      	add	r3, r5
 8016b8e:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8016b90:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8016b92:	f8a9 3000 	strh.w	r3, [r9]
        if (tcplen > pcb->rcv_wnd) {
 8016b96:	f0c0 824d 	bcc.w	8017034 <tcp_receive+0x8e4>
        if (pcb->ooseq != NULL) {
 8016b9a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	f000 80b0 	beq.w	8016d02 <tcp_receive+0x5b2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016ba2:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016ba6:	8998      	ldrh	r0, [r3, #12]
 8016ba8:	f7fc fb24 	bl	80131f4 <lwip_htons>
 8016bac:	07c2      	lsls	r2, r0, #31
 8016bae:	f100 80a5 	bmi.w	8016cfc <tcp_receive+0x5ac>
 8016bb2:	f8d8 7000 	ldr.w	r7, [r8]
 8016bb6:	f8b9 3000 	ldrh.w	r3, [r9]
            next = pcb->ooseq;
 8016bba:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016bbc:	19da      	adds	r2, r3, r7
            while (next &&
 8016bbe:	2e00      	cmp	r6, #0
 8016bc0:	f000 82ef 	beq.w	80171a2 <tcp_receive+0xa52>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016bc4:	6930      	ldr	r0, [r6, #16]
 8016bc6:	8931      	ldrh	r1, [r6, #8]
 8016bc8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8016bcc:	eba2 0e0c 	sub.w	lr, r2, ip
 8016bd0:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 8016bd4:	2900      	cmp	r1, #0
 8016bd6:	da18      	bge.n	8016c0a <tcp_receive+0x4ba>
 8016bd8:	e282      	b.n	80170e0 <tcp_receive+0x990>
              next = next->next;
 8016bda:	6835      	ldr	r5, [r6, #0]
              tcp_seg_free(prev);
 8016bdc:	4630      	mov	r0, r6
 8016bde:	f7fe febd 	bl	801595c <tcp_seg_free>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016be2:	f8b9 3000 	ldrh.w	r3, [r9]
 8016be6:	462e      	mov	r6, r5
            while (next &&
 8016be8:	2d00      	cmp	r5, #0
 8016bea:	f000 82b6 	beq.w	801715a <tcp_receive+0xa0a>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016bee:	f8d8 7000 	ldr.w	r7, [r8]
 8016bf2:	6928      	ldr	r0, [r5, #16]
 8016bf4:	19da      	adds	r2, r3, r7
 8016bf6:	8929      	ldrh	r1, [r5, #8]
 8016bf8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8016bfc:	eba2 0e0c 	sub.w	lr, r2, ip
 8016c00:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 8016c04:	2900      	cmp	r1, #0
 8016c06:	f2c0 826c 	blt.w	80170e2 <tcp_receive+0x992>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016c0a:	8980      	ldrh	r0, [r0, #12]
 8016c0c:	f7fc faf2 	bl	80131f4 <lwip_htons>
 8016c10:	07c3      	lsls	r3, r0, #31
 8016c12:	d5e2      	bpl.n	8016bda <tcp_receive+0x48a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016c14:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016c18:	8998      	ldrh	r0, [r3, #12]
 8016c1a:	f7fc faeb 	bl	80131f4 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016c1e:	0787      	lsls	r7, r0, #30
 8016c20:	d4db      	bmi.n	8016bda <tcp_receive+0x48a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016c22:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016c26:	2001      	movs	r0, #1
 8016c28:	899d      	ldrh	r5, [r3, #12]
 8016c2a:	f7fc fae3 	bl	80131f4 <lwip_htons>
 8016c2e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016c32:	4328      	orrs	r0, r5
                tcplen = TCP_TCPLEN(&inseg);
 8016c34:	f8ba 5008 	ldrh.w	r5, [sl, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016c38:	b280      	uxth	r0, r0
 8016c3a:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016c3c:	f7fc fada 	bl	80131f4 <lwip_htons>
 8016c40:	f010 0003 	ands.w	r0, r0, #3
 8016c44:	bf18      	it	ne
 8016c46:	2001      	movne	r0, #1
 8016c48:	4405      	add	r5, r0
 8016c4a:	f8a9 5000 	strh.w	r5, [r9]
 8016c4e:	e7c4      	b.n	8016bda <tcp_receive+0x48a>
      if (pcb->rcv_nxt == seqno) {
 8016c50:	429a      	cmp	r2, r3
 8016c52:	f000 824b 	beq.w	80170ec <tcp_receive+0x99c>
        tcp_send_empty_ack(pcb);
 8016c56:	4620      	mov	r0, r4
 8016c58:	f001 feac 	bl	80189b4 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8016c5c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8016c5e:	2d00      	cmp	r5, #0
 8016c60:	f000 8126 	beq.w	8016eb0 <tcp_receive+0x760>
            if (seqno == next->tcphdr->seqno) {
 8016c64:	6928      	ldr	r0, [r5, #16]
          prev = NULL;
 8016c66:	2600      	movs	r6, #0
            if (seqno == next->tcphdr->seqno) {
 8016c68:	f8d8 1000 	ldr.w	r1, [r8]
 8016c6c:	6843      	ldr	r3, [r0, #4]
 8016c6e:	1c4f      	adds	r7, r1, #1
 8016c70:	f101 3cff 	add.w	ip, r1, #4294967295
 8016c74:	428b      	cmp	r3, r1
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8016c76:	eba7 0e03 	sub.w	lr, r7, r3
            if (seqno == next->tcphdr->seqno) {
 8016c7a:	d018      	beq.n	8016cae <tcp_receive+0x55e>
              if (prev == NULL) {
 8016c7c:	2e00      	cmp	r6, #0
 8016c7e:	f000 811c 	beq.w	8016eba <tcp_receive+0x76a>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8016c82:	6932      	ldr	r2, [r6, #16]
 8016c84:	6852      	ldr	r2, [r2, #4]
 8016c86:	ebac 0202 	sub.w	r2, ip, r2
 8016c8a:	2a00      	cmp	r2, #0
 8016c8c:	db03      	blt.n	8016c96 <tcp_receive+0x546>
 8016c8e:	f1be 0f00 	cmp.w	lr, #0
 8016c92:	f340 820b 	ble.w	80170ac <tcp_receive+0x95c>
              if (next->next == NULL &&
 8016c96:	682a      	ldr	r2, [r5, #0]
 8016c98:	462e      	mov	r6, r5
 8016c9a:	2a00      	cmp	r2, #0
 8016c9c:	f000 8119 	beq.w	8016ed2 <tcp_receive+0x782>
 8016ca0:	4615      	mov	r5, r2
            if (seqno == next->tcphdr->seqno) {
 8016ca2:	6928      	ldr	r0, [r5, #16]
 8016ca4:	6843      	ldr	r3, [r0, #4]
 8016ca6:	428b      	cmp	r3, r1
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8016ca8:	eba7 0e03 	sub.w	lr, r7, r3
            if (seqno == next->tcphdr->seqno) {
 8016cac:	d1e6      	bne.n	8016c7c <tcp_receive+0x52c>
              if (inseg.len > next->len) {
 8016cae:	480e      	ldr	r0, [pc, #56]	; (8016ce8 <tcp_receive+0x598>)
 8016cb0:	892b      	ldrh	r3, [r5, #8]
 8016cb2:	8902      	ldrh	r2, [r0, #8]
 8016cb4:	429a      	cmp	r2, r3
 8016cb6:	f67f ad8e 	bls.w	80167d6 <tcp_receive+0x86>
                cseg = tcp_seg_copy(&inseg);
 8016cba:	f7fe fe69 	bl	8015990 <tcp_seg_copy>
                if (cseg != NULL) {
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	f43f ad89 	beq.w	80167d6 <tcp_receive+0x86>
                  if (prev != NULL) {
 8016cc4:	2e00      	cmp	r6, #0
 8016cc6:	f000 826a 	beq.w	801719e <tcp_receive+0xa4e>
                    prev->next = cseg;
 8016cca:	6030      	str	r0, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016ccc:	4629      	mov	r1, r5
}
 8016cce:	b001      	add	sp, #4
 8016cd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8016cd4:	f7ff bcf8 	b.w	80166c8 <tcp_oos_insert_segment>
 8016cd8:	200214c8 	.word	0x200214c8
 8016cdc:	08023618 	.word	0x08023618
 8016ce0:	20035498 	.word	0x20035498
 8016ce4:	0803ac34 	.word	0x0803ac34
 8016ce8:	200214b4 	.word	0x200214b4
 8016cec:	0803abe4 	.word	0x0803abe4
 8016cf0:	200214ea 	.word	0x200214ea
              pcb->ooseq = pcb->ooseq->next;
 8016cf4:	6803      	ldr	r3, [r0, #0]
 8016cf6:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8016cf8:	f7fe fe30 	bl	801595c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016cfc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	d1f8      	bne.n	8016cf4 <tcp_receive+0x5a4>
 8016d02:	f8b9 3000 	ldrh.w	r3, [r9]
 8016d06:	f8d8 2000 	ldr.w	r2, [r8]
 8016d0a:	441a      	add	r2, r3
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016d0c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8016d0e:	6262      	str	r2, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016d10:	4299      	cmp	r1, r3
 8016d12:	d209      	bcs.n	8016d28 <tcp_receive+0x5d8>
 8016d14:	4bb4      	ldr	r3, [pc, #720]	; (8016fe8 <tcp_receive+0x898>)
 8016d16:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016d1a:	49b4      	ldr	r1, [pc, #720]	; (8016fec <tcp_receive+0x89c>)
 8016d1c:	48b4      	ldr	r0, [pc, #720]	; (8016ff0 <tcp_receive+0x8a0>)
 8016d1e:	f007 fb63 	bl	801e3e8 <iprintf>
 8016d22:	f8b9 3000 	ldrh.w	r3, [r9]
 8016d26:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        pcb->rcv_wnd -= tcplen;
 8016d28:	1acb      	subs	r3, r1, r3
        tcp_update_rcv_ann_wnd(pcb);
 8016d2a:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8016d2c:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8016d2e:	f7fe fd05 	bl	801573c <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8016d32:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016d36:	891a      	ldrh	r2, [r3, #8]
 8016d38:	b122      	cbz	r2, 8016d44 <tcp_receive+0x5f4>
          recv_data = inseg.p;
 8016d3a:	49ae      	ldr	r1, [pc, #696]	; (8016ff4 <tcp_receive+0x8a4>)
          inseg.p = NULL;
 8016d3c:	2200      	movs	r2, #0
          recv_data = inseg.p;
 8016d3e:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 8016d40:	f8ca 2004 	str.w	r2, [sl, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016d44:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016d48:	8998      	ldrh	r0, [r3, #12]
 8016d4a:	f7fc fa53 	bl	80131f4 <lwip_htons>
 8016d4e:	07c5      	lsls	r5, r0, #31
 8016d50:	d504      	bpl.n	8016d5c <tcp_receive+0x60c>
          recv_flags |= TF_GOT_FIN;
 8016d52:	4aa9      	ldr	r2, [pc, #676]	; (8016ff8 <tcp_receive+0x8a8>)
 8016d54:	7813      	ldrb	r3, [r2, #0]
 8016d56:	f043 0320 	orr.w	r3, r3, #32
 8016d5a:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8016d5c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8016d5e:	2d00      	cmp	r5, #0
 8016d60:	f000 8121 	beq.w	8016fa6 <tcp_receive+0x856>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016d64:	692b      	ldr	r3, [r5, #16]
 8016d66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016d68:	6859      	ldr	r1, [r3, #4]
        while (pcb->ooseq != NULL &&
 8016d6a:	428a      	cmp	r2, r1
 8016d6c:	f040 811b 	bne.w	8016fa6 <tcp_receive+0x856>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016d70:	f8df a274 	ldr.w	sl, [pc, #628]	; 8016fe8 <tcp_receive+0x898>
 8016d74:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 801701c <tcp_receive+0x8cc>
 8016d78:	4f9d      	ldr	r7, [pc, #628]	; (8016ff0 <tcp_receive+0x8a0>)
 8016d7a:	e03a      	b.n	8016df2 <tcp_receive+0x6a2>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016d7c:	692b      	ldr	r3, [r5, #16]
 8016d7e:	892e      	ldrh	r6, [r5, #8]
 8016d80:	8998      	ldrh	r0, [r3, #12]
 8016d82:	f7fc fa37 	bl	80131f4 <lwip_htons>
 8016d86:	f010 0303 	ands.w	r3, r0, #3
 8016d8a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8016d8c:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016d8e:	bf18      	it	ne
 8016d90:	2301      	movne	r3, #1
 8016d92:	4433      	add	r3, r6
 8016d94:	1ad3      	subs	r3, r2, r3
 8016d96:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8016d98:	f7fe fcd0 	bl	801573c <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8016d9c:	6869      	ldr	r1, [r5, #4]
 8016d9e:	890b      	ldrh	r3, [r1, #8]
 8016da0:	b143      	cbz	r3, 8016db4 <tcp_receive+0x664>
            if (recv_data) {
 8016da2:	4b94      	ldr	r3, [pc, #592]	; (8016ff4 <tcp_receive+0x8a4>)
 8016da4:	6818      	ldr	r0, [r3, #0]
 8016da6:	2800      	cmp	r0, #0
 8016da8:	f000 80fb 	beq.w	8016fa2 <tcp_receive+0x852>
              pbuf_cat(recv_data, cseg->p);
 8016dac:	f7fd ffe0 	bl	8014d70 <pbuf_cat>
            cseg->p = NULL;
 8016db0:	2300      	movs	r3, #0
 8016db2:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016db4:	692b      	ldr	r3, [r5, #16]
 8016db6:	8998      	ldrh	r0, [r3, #12]
 8016db8:	f7fc fa1c 	bl	80131f4 <lwip_htons>
 8016dbc:	07c0      	lsls	r0, r0, #31
 8016dbe:	d509      	bpl.n	8016dd4 <tcp_receive+0x684>
            recv_flags |= TF_GOT_FIN;
 8016dc0:	4a8d      	ldr	r2, [pc, #564]	; (8016ff8 <tcp_receive+0x8a8>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016dc2:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 8016dc4:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016dc6:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 8016dc8:	f043 0320 	orr.w	r3, r3, #32
 8016dcc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016dce:	d101      	bne.n	8016dd4 <tcp_receive+0x684>
              pcb->state = CLOSE_WAIT;
 8016dd0:	2307      	movs	r3, #7
 8016dd2:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8016dd4:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8016dd6:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8016dd8:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8016dda:	f7fe fdbf 	bl	801595c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016dde:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8016de0:	2d00      	cmp	r5, #0
 8016de2:	f000 80e0 	beq.w	8016fa6 <tcp_receive+0x856>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016de6:	692b      	ldr	r3, [r5, #16]
        while (pcb->ooseq != NULL &&
 8016de8:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016dea:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
 8016dec:	428a      	cmp	r2, r1
 8016dee:	f040 80da 	bne.w	8016fa6 <tcp_receive+0x856>
          seqno = pcb->ooseq->tcphdr->seqno;
 8016df2:	f8c8 2000 	str.w	r2, [r8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016df6:	8998      	ldrh	r0, [r3, #12]
 8016df8:	892e      	ldrh	r6, [r5, #8]
 8016dfa:	f7fc f9fb 	bl	80131f4 <lwip_htons>
 8016dfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016e00:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016e04:	692b      	ldr	r3, [r5, #16]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016e06:	bf18      	it	ne
 8016e08:	2001      	movne	r0, #1
 8016e0a:	4416      	add	r6, r2
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016e0c:	f8b4 b028 	ldrh.w	fp, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016e10:	4430      	add	r0, r6
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016e12:	892e      	ldrh	r6, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016e14:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016e16:	8998      	ldrh	r0, [r3, #12]
 8016e18:	f7fc f9ec 	bl	80131f4 <lwip_htons>
 8016e1c:	f010 0003 	ands.w	r0, r0, #3
 8016e20:	bf18      	it	ne
 8016e22:	2001      	movne	r0, #1
 8016e24:	4430      	add	r0, r6
 8016e26:	4583      	cmp	fp, r0
 8016e28:	d2a8      	bcs.n	8016d7c <tcp_receive+0x62c>
 8016e2a:	4653      	mov	r3, sl
 8016e2c:	f240 52de 	movw	r2, #1502	; 0x5de
 8016e30:	4649      	mov	r1, r9
 8016e32:	4638      	mov	r0, r7
 8016e34:	f007 fad8 	bl	801e3e8 <iprintf>
 8016e38:	e7a0      	b.n	8016d7c <tcp_receive+0x62c>
          if (pcb->rtime >= 0) {
 8016e3a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 8016e3c:	0bc9      	lsrs	r1, r1, #15
 8016e3e:	f47f aced 	bne.w	801681c <tcp_receive+0xcc>
 8016e42:	429a      	cmp	r2, r3
 8016e44:	f47f acea 	bne.w	801681c <tcp_receive+0xcc>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016e48:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016e4c:	2bff      	cmp	r3, #255	; 0xff
 8016e4e:	f000 8188 	beq.w	8017162 <tcp_receive+0xa12>
                ++pcb->dupacks;
 8016e52:	3301      	adds	r3, #1
 8016e54:	b2db      	uxtb	r3, r3
              if (pcb->dupacks > 3) {
 8016e56:	2b03      	cmp	r3, #3
                ++pcb->dupacks;
 8016e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8016e5c:	f200 8181 	bhi.w	8017162 <tcp_receive+0xa12>
              } else if (pcb->dupacks == 3) {
 8016e60:	f47f ad6c 	bne.w	801693c <tcp_receive+0x1ec>
                tcp_rexmit_fast(pcb);
 8016e64:	4620      	mov	r0, r4
 8016e66:	4f65      	ldr	r7, [pc, #404]	; (8016ffc <tcp_receive+0x8ac>)
 8016e68:	f002 f87c 	bl	8018f64 <tcp_rexmit_fast>
 8016e6c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016e6e:	e4da      	b.n	8016826 <tcp_receive+0xd6>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8016e70:	f1cb 0100 	rsb	r1, fp, #0
 8016e74:	b209      	sxth	r1, r1
 8016e76:	f7fd fd5f 	bl	8014938 <pbuf_header>
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	f43f ae68 	beq.w	8016b50 <tcp_receive+0x400>
          LWIP_ASSERT("pbuf_header failed", 0);
 8016e80:	4b59      	ldr	r3, [pc, #356]	; (8016fe8 <tcp_receive+0x898>)
 8016e82:	f240 5251 	movw	r2, #1361	; 0x551
 8016e86:	495e      	ldr	r1, [pc, #376]	; (8017000 <tcp_receive+0x8b0>)
 8016e88:	4859      	ldr	r0, [pc, #356]	; (8016ff0 <tcp_receive+0x8a0>)
 8016e8a:	f007 faad 	bl	801e3e8 <iprintf>
 8016e8e:	e65f      	b.n	8016b50 <tcp_receive+0x400>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8016e90:	4b55      	ldr	r3, [pc, #340]	; (8016fe8 <tcp_receive+0x898>)
 8016e92:	f240 523d 	movw	r2, #1341	; 0x53d
 8016e96:	495b      	ldr	r1, [pc, #364]	; (8017004 <tcp_receive+0x8b4>)
 8016e98:	4855      	ldr	r0, [pc, #340]	; (8016ff0 <tcp_receive+0x8a0>)
 8016e9a:	f007 faa5 	bl	801e3e8 <iprintf>
 8016e9e:	e635      	b.n	8016b0c <tcp_receive+0x3bc>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016ea0:	4b51      	ldr	r3, [pc, #324]	; (8016fe8 <tcp_receive+0x898>)
 8016ea2:	f240 523c 	movw	r2, #1340	; 0x53c
 8016ea6:	4958      	ldr	r1, [pc, #352]	; (8017008 <tcp_receive+0x8b8>)
 8016ea8:	4851      	ldr	r0, [pc, #324]	; (8016ff0 <tcp_receive+0x8a0>)
 8016eaa:	f007 fa9d 	bl	801e3e8 <iprintf>
 8016eae:	e628      	b.n	8016b02 <tcp_receive+0x3b2>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016eb0:	4856      	ldr	r0, [pc, #344]	; (801700c <tcp_receive+0x8bc>)
 8016eb2:	f7fe fd6d 	bl	8015990 <tcp_seg_copy>
 8016eb6:	6720      	str	r0, [r4, #112]	; 0x70
 8016eb8:	e48d      	b.n	80167d6 <tcp_receive+0x86>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016eba:	1aca      	subs	r2, r1, r3
 8016ebc:	2a00      	cmp	r2, #0
 8016ebe:	f6bf aeea 	bge.w	8016c96 <tcp_receive+0x546>
                  cseg = tcp_seg_copy(&inseg);
 8016ec2:	4852      	ldr	r0, [pc, #328]	; (801700c <tcp_receive+0x8bc>)
 8016ec4:	f7fe fd64 	bl	8015990 <tcp_seg_copy>
                  if (cseg != NULL) {
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	f43f ac84 	beq.w	80167d6 <tcp_receive+0x86>
                    pcb->ooseq = cseg;
 8016ece:	6720      	str	r0, [r4, #112]	; 0x70
 8016ed0:	e6fc      	b.n	8016ccc <tcp_receive+0x57c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016ed2:	1acb      	subs	r3, r1, r3
              if (next->next == NULL &&
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	f77f ac7e 	ble.w	80167d6 <tcp_receive+0x86>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016eda:	8980      	ldrh	r0, [r0, #12]
 8016edc:	f7fc f98a 	bl	80131f4 <lwip_htons>
 8016ee0:	07c2      	lsls	r2, r0, #31
 8016ee2:	f53f ac78 	bmi.w	80167d6 <tcp_receive+0x86>
                next->next = tcp_seg_copy(&inseg);
 8016ee6:	4849      	ldr	r0, [pc, #292]	; (801700c <tcp_receive+0x8bc>)
 8016ee8:	f7fe fd52 	bl	8015990 <tcp_seg_copy>
 8016eec:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8016eee:	2800      	cmp	r0, #0
 8016ef0:	f43f ac71 	beq.w	80167d6 <tcp_receive+0x86>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016ef4:	692b      	ldr	r3, [r5, #16]
 8016ef6:	892a      	ldrh	r2, [r5, #8]
 8016ef8:	6859      	ldr	r1, [r3, #4]
 8016efa:	f8d8 3000 	ldr.w	r3, [r8]
 8016efe:	440a      	add	r2, r1
 8016f00:	1ad2      	subs	r2, r2, r3
 8016f02:	2a00      	cmp	r2, #0
 8016f04:	dd05      	ble.n	8016f12 <tcp_receive+0x7c2>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016f06:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 8016f08:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016f0a:	b299      	uxth	r1, r3
 8016f0c:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8016f0e:	f7fd fe97 	bl	8014c40 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016f12:	f8d8 2000 	ldr.w	r2, [r8]
 8016f16:	f8b9 3000 	ldrh.w	r3, [r9]
 8016f1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016f1c:	4413      	add	r3, r2
 8016f1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8016f20:	1a5b      	subs	r3, r3, r1
 8016f22:	1a9b      	subs	r3, r3, r2
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	f77f ac56 	ble.w	80167d6 <tcp_receive+0x86>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016f2a:	682b      	ldr	r3, [r5, #0]
 8016f2c:	691b      	ldr	r3, [r3, #16]
 8016f2e:	8998      	ldrh	r0, [r3, #12]
 8016f30:	f7fc f960 	bl	80131f4 <lwip_htons>
 8016f34:	07c3      	lsls	r3, r0, #31
 8016f36:	f100 8136 	bmi.w	80171a6 <tcp_receive+0xa56>
 8016f3a:	682a      	ldr	r2, [r5, #0]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016f3c:	f8d8 0000 	ldr.w	r0, [r8]
 8016f40:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8016f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f44:	1a09      	subs	r1, r1, r0
                    pbuf_realloc(next->next->p, next->next->len);
 8016f46:	6850      	ldr	r0, [r2, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016f48:	4419      	add	r1, r3
 8016f4a:	b289      	uxth	r1, r1
 8016f4c:	8111      	strh	r1, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016f4e:	f7fd fe77 	bl	8014c40 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016f52:	682b      	ldr	r3, [r5, #0]
 8016f54:	691a      	ldr	r2, [r3, #16]
 8016f56:	891d      	ldrh	r5, [r3, #8]
 8016f58:	8990      	ldrh	r0, [r2, #12]
 8016f5a:	f7fc f94b 	bl	80131f4 <lwip_htons>
 8016f5e:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016f62:	f8d8 1000 	ldr.w	r1, [r8]
                    tcplen = TCP_TCPLEN(next->next);
 8016f66:	bf18      	it	ne
 8016f68:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016f6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8016f6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8016f6e:	442b      	add	r3, r5
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016f70:	4402      	add	r2, r0
                    tcplen = TCP_TCPLEN(next->next);
 8016f72:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016f74:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 8016f76:	f8a9 3000 	strh.w	r3, [r9]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016f7a:	4291      	cmp	r1, r2
 8016f7c:	f43f ac2b 	beq.w	80167d6 <tcp_receive+0x86>
 8016f80:	4b19      	ldr	r3, [pc, #100]	; (8016fe8 <tcp_receive+0x898>)
 8016f82:	f240 627b 	movw	r2, #1659	; 0x67b
 8016f86:	4922      	ldr	r1, [pc, #136]	; (8017010 <tcp_receive+0x8c0>)
 8016f88:	4819      	ldr	r0, [pc, #100]	; (8016ff0 <tcp_receive+0x8a0>)
}
 8016f8a:	b001      	add	sp, #4
 8016f8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016f90:	f007 ba2a 	b.w	801e3e8 <iprintf>
      if (pcb->unacked == NULL) {
 8016f94:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d04a      	beq.n	8017030 <tcp_receive+0x8e0>
        pcb->rtime = 0;
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016f9e:	8622      	strh	r2, [r4, #48]	; 0x30
 8016fa0:	e573      	b.n	8016a8a <tcp_receive+0x33a>
              recv_data = cseg->p;
 8016fa2:	6019      	str	r1, [r3, #0]
 8016fa4:	e704      	b.n	8016db0 <tcp_receive+0x660>
        tcp_ack(pcb);
 8016fa6:	7ea3      	ldrb	r3, [r4, #26]
 8016fa8:	07d9      	lsls	r1, r3, #31
 8016faa:	d50e      	bpl.n	8016fca <tcp_receive+0x87a>
 8016fac:	f023 0301 	bic.w	r3, r3, #1
 8016fb0:	f043 0302 	orr.w	r3, r3, #2
 8016fb4:	76a3      	strb	r3, [r4, #26]
 8016fb6:	e40e      	b.n	80167d6 <tcp_receive+0x86>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8016fb8:	464b      	mov	r3, r9
 8016fba:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8016fbe:	4915      	ldr	r1, [pc, #84]	; (8017014 <tcp_receive+0x8c4>)
 8016fc0:	4628      	mov	r0, r5
 8016fc2:	f007 fa11 	bl	801e3e8 <iprintf>
 8016fc6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016fc8:	e51b      	b.n	8016a02 <tcp_receive+0x2b2>
        tcp_ack(pcb);
 8016fca:	f043 0301 	orr.w	r3, r3, #1
 8016fce:	76a3      	strb	r3, [r4, #26]
 8016fd0:	e401      	b.n	80167d6 <tcp_receive+0x86>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016fd2:	4b05      	ldr	r3, [pc, #20]	; (8016fe8 <tcp_receive+0x898>)
 8016fd4:	f240 523f 	movw	r2, #1343	; 0x53f
 8016fd8:	490f      	ldr	r1, [pc, #60]	; (8017018 <tcp_receive+0x8c8>)
 8016fda:	4805      	ldr	r0, [pc, #20]	; (8016ff0 <tcp_receive+0x8a0>)
 8016fdc:	f007 fa04 	bl	801e3e8 <iprintf>
 8016fe0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016fe4:	891b      	ldrh	r3, [r3, #8]
 8016fe6:	e59d      	b.n	8016b24 <tcp_receive+0x3d4>
 8016fe8:	0803abe4 	.word	0x0803abe4
 8016fec:	0803ad34 	.word	0x0803ad34
 8016ff0:	08023618 	.word	0x08023618
 8016ff4:	200214cc 	.word	0x200214cc
 8016ff8:	200214d0 	.word	0x200214d0
 8016ffc:	200214c8 	.word	0x200214c8
 8017000:	0803acac 	.word	0x0803acac
 8017004:	0803ac8c 	.word	0x0803ac8c
 8017008:	0803ac7c 	.word	0x0803ac7c
 801700c:	200214b4 	.word	0x200214b4
 8017010:	0803acc0 	.word	0x0803acc0
 8017014:	0803ac5c 	.word	0x0803ac5c
 8017018:	0803ac9c 	.word	0x0803ac9c
 801701c:	0803ad54 	.word	0x0803ad54
          LWIP_ASSERT("pbuf_header failed", 0);
 8017020:	4b69      	ldr	r3, [pc, #420]	; (80171c8 <tcp_receive+0xa78>)
 8017022:	f240 524c 	movw	r2, #1356	; 0x54c
 8017026:	4969      	ldr	r1, [pc, #420]	; (80171cc <tcp_receive+0xa7c>)
 8017028:	4869      	ldr	r0, [pc, #420]	; (80171d0 <tcp_receive+0xa80>)
 801702a:	f007 f9dd 	bl	801e3e8 <iprintf>
 801702e:	e58f      	b.n	8016b50 <tcp_receive+0x400>
 8017030:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8017032:	e527      	b.n	8016a84 <tcp_receive+0x334>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017034:	f8da 3010 	ldr.w	r3, [sl, #16]
 8017038:	8998      	ldrh	r0, [r3, #12]
 801703a:	f7fc f8db 	bl	80131f4 <lwip_htons>
 801703e:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017040:	f8da 3010 	ldr.w	r3, [sl, #16]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017044:	f100 809b 	bmi.w	801717e <tcp_receive+0xa2e>
 8017048:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801704a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801704c:	f8aa 3008 	strh.w	r3, [sl, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017050:	f7fc f8d0 	bl	80131f4 <lwip_htons>
 8017054:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8017056:	f8ba 1008 	ldrh.w	r1, [sl, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801705a:	d503      	bpl.n	8017064 <tcp_receive+0x914>
            inseg.len -= 1;
 801705c:	3901      	subs	r1, #1
 801705e:	b289      	uxth	r1, r1
 8017060:	f8aa 1008 	strh.w	r1, [sl, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8017064:	f8da 0004 	ldr.w	r0, [sl, #4]
 8017068:	f7fd fdea 	bl	8014c40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801706c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8017070:	f8ba 5008 	ldrh.w	r5, [sl, #8]
 8017074:	8998      	ldrh	r0, [r3, #12]
 8017076:	f7fc f8bd 	bl	80131f4 <lwip_htons>
 801707a:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801707e:	f8d8 2000 	ldr.w	r2, [r8]
          tcplen = TCP_TCPLEN(&inseg);
 8017082:	bf18      	it	ne
 8017084:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017086:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8017088:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801708a:	442b      	add	r3, r5
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801708c:	4431      	add	r1, r6
          tcplen = TCP_TCPLEN(&inseg);
 801708e:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017090:	441a      	add	r2, r3
          tcplen = TCP_TCPLEN(&inseg);
 8017092:	f8a9 3000 	strh.w	r3, [r9]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017096:	428a      	cmp	r2, r1
 8017098:	f43f ad7f 	beq.w	8016b9a <tcp_receive+0x44a>
 801709c:	4b4a      	ldr	r3, [pc, #296]	; (80171c8 <tcp_receive+0xa78>)
 801709e:	f240 527f 	movw	r2, #1407	; 0x57f
 80170a2:	494c      	ldr	r1, [pc, #304]	; (80171d4 <tcp_receive+0xa84>)
 80170a4:	484a      	ldr	r0, [pc, #296]	; (80171d0 <tcp_receive+0xa80>)
 80170a6:	f007 f99f 	bl	801e3e8 <iprintf>
 80170aa:	e576      	b.n	8016b9a <tcp_receive+0x44a>
                  cseg = tcp_seg_copy(&inseg);
 80170ac:	484a      	ldr	r0, [pc, #296]	; (80171d8 <tcp_receive+0xa88>)
 80170ae:	f7fe fc6f 	bl	8015990 <tcp_seg_copy>
                  if (cseg != NULL) {
 80170b2:	4604      	mov	r4, r0
 80170b4:	2800      	cmp	r0, #0
 80170b6:	f43f ab8e 	beq.w	80167d6 <tcp_receive+0x86>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80170ba:	6933      	ldr	r3, [r6, #16]
 80170bc:	8932      	ldrh	r2, [r6, #8]
 80170be:	6859      	ldr	r1, [r3, #4]
 80170c0:	f8d8 3000 	ldr.w	r3, [r8]
 80170c4:	440a      	add	r2, r1
 80170c6:	1ad2      	subs	r2, r2, r3
 80170c8:	2a00      	cmp	r2, #0
 80170ca:	dd05      	ble.n	80170d8 <tcp_receive+0x988>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80170cc:	1a5b      	subs	r3, r3, r1
                      pbuf_realloc(prev->p, prev->len);
 80170ce:	6870      	ldr	r0, [r6, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80170d0:	b299      	uxth	r1, r3
 80170d2:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 80170d4:	f7fd fdb4 	bl	8014c40 <pbuf_realloc>
                    prev->next = cseg;
 80170d8:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 80170da:	4629      	mov	r1, r5
 80170dc:	4620      	mov	r0, r4
 80170de:	e5f6      	b.n	8016cce <tcp_receive+0x57e>
            while (next &&
 80170e0:	4635      	mov	r5, r6
            if (next &&
 80170e2:	f1be 0f00 	cmp.w	lr, #0
 80170e6:	dc04      	bgt.n	80170f2 <tcp_receive+0x9a2>
            pcb->ooseq = next;
 80170e8:	6725      	str	r5, [r4, #112]	; 0x70
 80170ea:	e60f      	b.n	8016d0c <tcp_receive+0x5bc>
 80170ec:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80171d8 <tcp_receive+0xa88>
 80170f0:	e540      	b.n	8016b74 <tcp_receive+0x424>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80170f2:	ebac 0707 	sub.w	r7, ip, r7
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80170f6:	f8da 3010 	ldr.w	r3, [sl, #16]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80170fa:	f8aa 7008 	strh.w	r7, [sl, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80170fe:	8998      	ldrh	r0, [r3, #12]
 8017100:	f7fc f878 	bl	80131f4 <lwip_htons>
 8017104:	0786      	lsls	r6, r0, #30
                inseg.len -= 1;
 8017106:	f8ba 1008 	ldrh.w	r1, [sl, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801710a:	d503      	bpl.n	8017114 <tcp_receive+0x9c4>
                inseg.len -= 1;
 801710c:	3901      	subs	r1, #1
 801710e:	b289      	uxth	r1, r1
 8017110:	f8aa 1008 	strh.w	r1, [sl, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8017114:	f8da 0004 	ldr.w	r0, [sl, #4]
 8017118:	f7fd fd92 	bl	8014c40 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801711c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8017120:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 8017124:	8998      	ldrh	r0, [r3, #12]
 8017126:	f7fc f865 	bl	80131f4 <lwip_htons>
 801712a:	f010 0303 	ands.w	r3, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801712e:	f8d8 2000 	ldr.w	r2, [r8]
              tcplen = TCP_TCPLEN(&inseg);
 8017132:	bf18      	it	ne
 8017134:	2301      	movne	r3, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017136:	692e      	ldr	r6, [r5, #16]
              tcplen = TCP_TCPLEN(&inseg);
 8017138:	443b      	add	r3, r7
 801713a:	b29b      	uxth	r3, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801713c:	1899      	adds	r1, r3, r2
              tcplen = TCP_TCPLEN(&inseg);
 801713e:	f8a9 3000 	strh.w	r3, [r9]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017142:	6872      	ldr	r2, [r6, #4]
 8017144:	4291      	cmp	r1, r2
 8017146:	d0cf      	beq.n	80170e8 <tcp_receive+0x998>
 8017148:	4b1f      	ldr	r3, [pc, #124]	; (80171c8 <tcp_receive+0xa78>)
 801714a:	f240 52af 	movw	r2, #1455	; 0x5af
 801714e:	4923      	ldr	r1, [pc, #140]	; (80171dc <tcp_receive+0xa8c>)
 8017150:	481f      	ldr	r0, [pc, #124]	; (80171d0 <tcp_receive+0xa80>)
 8017152:	f007 f949 	bl	801e3e8 <iprintf>
 8017156:	f8b9 3000 	ldrh.w	r3, [r9]
 801715a:	f8d8 2000 	ldr.w	r2, [r8]
 801715e:	441a      	add	r2, r3
 8017160:	e7c2      	b.n	80170e8 <tcp_receive+0x998>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8017162:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8017166:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8017168:	4413      	add	r3, r2
 801716a:	b29b      	uxth	r3, r3
 801716c:	429a      	cmp	r2, r3
 801716e:	f4bf abe5 	bcs.w	801693c <tcp_receive+0x1ec>
                  pcb->cwnd += pcb->mss;
 8017172:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8017176:	4f1a      	ldr	r7, [pc, #104]	; (80171e0 <tcp_receive+0xa90>)
 8017178:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801717a:	f7ff bb54 	b.w	8016826 <tcp_receive+0xd6>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801717e:	899d      	ldrh	r5, [r3, #12]
 8017180:	4628      	mov	r0, r5
 8017182:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8017186:	f7fc f835 	bl	80131f4 <lwip_htons>
 801718a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801718e:	f7fc f831 	bl	80131f4 <lwip_htons>
 8017192:	4328      	orrs	r0, r5
 8017194:	f8da 3010 	ldr.w	r3, [sl, #16]
 8017198:	b280      	uxth	r0, r0
 801719a:	8198      	strh	r0, [r3, #12]
 801719c:	e755      	b.n	801704a <tcp_receive+0x8fa>
                    pcb->ooseq = cseg;
 801719e:	6720      	str	r0, [r4, #112]	; 0x70
 80171a0:	e594      	b.n	8016ccc <tcp_receive+0x57c>
            while (next &&
 80171a2:	4635      	mov	r5, r6
 80171a4:	e7a0      	b.n	80170e8 <tcp_receive+0x998>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80171a6:	682b      	ldr	r3, [r5, #0]
 80171a8:	691b      	ldr	r3, [r3, #16]
 80171aa:	899e      	ldrh	r6, [r3, #12]
 80171ac:	4630      	mov	r0, r6
 80171ae:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 80171b2:	f7fc f81f 	bl	80131f4 <lwip_htons>
 80171b6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80171ba:	f7fc f81b 	bl	80131f4 <lwip_htons>
 80171be:	682a      	ldr	r2, [r5, #0]
 80171c0:	4306      	orrs	r6, r0
 80171c2:	6913      	ldr	r3, [r2, #16]
 80171c4:	819e      	strh	r6, [r3, #12]
 80171c6:	e6b9      	b.n	8016f3c <tcp_receive+0x7ec>
 80171c8:	0803abe4 	.word	0x0803abe4
 80171cc:	0803acac 	.word	0x0803acac
 80171d0:	08023618 	.word	0x08023618
 80171d4:	0803acc0 	.word	0x0803acc0
 80171d8:	200214b4 	.word	0x200214b4
 80171dc:	0803acf8 	.word	0x0803acf8
 80171e0:	200214c8 	.word	0x200214c8

080171e4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80171e4:	490d      	ldr	r1, [pc, #52]	; (801721c <tcp_getoptbyte+0x38>)
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80171e6:	4a0e      	ldr	r2, [pc, #56]	; (8017220 <tcp_getoptbyte+0x3c>)
 80171e8:	880b      	ldrh	r3, [r1, #0]
 80171ea:	6810      	ldr	r0, [r2, #0]
 80171ec:	1c5a      	adds	r2, r3, #1
{
 80171ee:	b410      	push	{r4}
 80171f0:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80171f2:	b150      	cbz	r0, 801720a <tcp_getoptbyte+0x26>
 80171f4:	4c0b      	ldr	r4, [pc, #44]	; (8017224 <tcp_getoptbyte+0x40>)
 80171f6:	8824      	ldrh	r4, [r4, #0]
 80171f8:	429c      	cmp	r4, r3
 80171fa:	d806      	bhi.n	801720a <tcp_getoptbyte+0x26>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80171fc:	1b1b      	subs	r3, r3, r4
 80171fe:	800a      	strh	r2, [r1, #0]
    return tcphdr_opt2[idx];
  }
}
 8017200:	f85d 4b04 	ldr.w	r4, [sp], #4
    return tcphdr_opt2[idx];
 8017204:	b2db      	uxtb	r3, r3
 8017206:	5cc0      	ldrb	r0, [r0, r3]
}
 8017208:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801720a:	4807      	ldr	r0, [pc, #28]	; (8017228 <tcp_getoptbyte+0x44>)
    return opts[tcp_optidx++];
 801720c:	800a      	strh	r2, [r1, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801720e:	6802      	ldr	r2, [r0, #0]
}
 8017210:	f85d 4b04 	ldr.w	r4, [sp], #4
    return opts[tcp_optidx++];
 8017214:	4413      	add	r3, r2
 8017216:	7d18      	ldrb	r0, [r3, #20]
}
 8017218:	4770      	bx	lr
 801721a:	bf00      	nop
 801721c:	200214d8 	.word	0x200214d8
 8017220:	200214e4 	.word	0x200214e4
 8017224:	200214e0 	.word	0x200214e0
 8017228:	200214dc 	.word	0x200214dc

0801722c <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 801722c:	4a1b      	ldr	r2, [pc, #108]	; (801729c <tcp_parseopt.isra.1.part.2+0x70>)
 801722e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017230:	4c1b      	ldr	r4, [pc, #108]	; (80172a0 <tcp_parseopt.isra.1.part.2+0x74>)
 8017232:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8017234:	4605      	mov	r5, r0
 8017236:	8816      	ldrh	r6, [r2, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017238:	8023      	strh	r3, [r4, #0]
 801723a:	42b3      	cmp	r3, r6
 801723c:	d220      	bcs.n	8017280 <tcp_parseopt.isra.1.part.2+0x54>
      u8_t opt = tcp_getoptbyte();
 801723e:	f7ff ffd1 	bl	80171e4 <tcp_getoptbyte>
      switch (opt) {
 8017242:	2801      	cmp	r0, #1
 8017244:	d027      	beq.n	8017296 <tcp_parseopt.isra.1.part.2+0x6a>
 8017246:	d31b      	bcc.n	8017280 <tcp_parseopt.isra.1.part.2+0x54>
 8017248:	2802      	cmp	r0, #2
 801724a:	d11a      	bne.n	8017282 <tcp_parseopt.isra.1.part.2+0x56>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801724c:	f7ff ffca 	bl	80171e4 <tcp_getoptbyte>
 8017250:	2804      	cmp	r0, #4
 8017252:	d115      	bne.n	8017280 <tcp_parseopt.isra.1.part.2+0x54>
 8017254:	8823      	ldrh	r3, [r4, #0]
 8017256:	3301      	adds	r3, #1
 8017258:	42b3      	cmp	r3, r6
 801725a:	da11      	bge.n	8017280 <tcp_parseopt.isra.1.part.2+0x54>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801725c:	f7ff ffc2 	bl	80171e4 <tcp_getoptbyte>
 8017260:	0200      	lsls	r0, r0, #8
 8017262:	b287      	uxth	r7, r0
        mss |= tcp_getoptbyte();
 8017264:	f7ff ffbe 	bl	80171e4 <tcp_getoptbyte>
 8017268:	8823      	ldrh	r3, [r4, #0]
 801726a:	4338      	orrs	r0, r7
 801726c:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801726e:	1e42      	subs	r2, r0, #1
 8017270:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 8017274:	bf28      	it	cs
 8017276:	f44f 7006 	movcs.w	r0, #536	; 0x218
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801727a:	42b3      	cmp	r3, r6
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801727c:	8028      	strh	r0, [r5, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801727e:	d3de      	bcc.n	801723e <tcp_parseopt.isra.1.part.2+0x12>
           can skip past them. */
        tcp_optidx += data - 2;
      }
    }
  }
}
 8017280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data = tcp_getoptbyte();
 8017282:	f7ff ffaf 	bl	80171e4 <tcp_getoptbyte>
        if (data < 2) {
 8017286:	2801      	cmp	r0, #1
 8017288:	d9fa      	bls.n	8017280 <tcp_parseopt.isra.1.part.2+0x54>
        tcp_optidx += data - 2;
 801728a:	8823      	ldrh	r3, [r4, #0]
 801728c:	3b02      	subs	r3, #2
 801728e:	4403      	add	r3, r0
 8017290:	b29b      	uxth	r3, r3
 8017292:	8023      	strh	r3, [r4, #0]
 8017294:	e7d1      	b.n	801723a <tcp_parseopt.isra.1.part.2+0xe>
 8017296:	8823      	ldrh	r3, [r4, #0]
 8017298:	e7cf      	b.n	801723a <tcp_parseopt.isra.1.part.2+0xe>
 801729a:	bf00      	nop
 801729c:	200214e8 	.word	0x200214e8
 80172a0:	200214d8 	.word	0x200214d8

080172a4 <tcp_input_delayed_close.part.3>:
tcp_input_delayed_close(struct tcp_pcb *pcb)
 80172a4:	b510      	push	{r4, lr}
    if (!(pcb->flags & TF_RXCLOSED)) {
 80172a6:	7e83      	ldrb	r3, [r0, #26]
tcp_input_delayed_close(struct tcp_pcb *pcb)
 80172a8:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 80172aa:	06db      	lsls	r3, r3, #27
 80172ac:	d406      	bmi.n	80172bc <tcp_input_delayed_close.part.3+0x18>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80172ae:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80172b2:	b11b      	cbz	r3, 80172bc <tcp_input_delayed_close.part.3+0x18>
 80172b4:	f06f 010e 	mvn.w	r1, #14
 80172b8:	6900      	ldr	r0, [r0, #16]
 80172ba:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80172bc:	4621      	mov	r1, r4
 80172be:	4804      	ldr	r0, [pc, #16]	; (80172d0 <tcp_input_delayed_close.part.3+0x2c>)
 80172c0:	f7fe fe52 	bl	8015f68 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80172c4:	4621      	mov	r1, r4
 80172c6:	2002      	movs	r0, #2
 80172c8:	f7fd f946 	bl	8014558 <memp_free>
}
 80172cc:	2001      	movs	r0, #1
 80172ce:	bd10      	pop	{r4, pc}
 80172d0:	20035494 	.word	0x20035494

080172d4 <tcp_input>:
{
 80172d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TCP_STATS_INC(tcp.recv);
 80172d8:	4cc0      	ldr	r4, [pc, #768]	; (80175dc <tcp_input+0x308>)
{
 80172da:	b085      	sub	sp, #20
  if (p->len < TCP_HLEN) {
 80172dc:	8942      	ldrh	r2, [r0, #10]
{
 80172de:	4605      	mov	r5, r0
  TCP_STATS_INC(tcp.recv);
 80172e0:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
  tcphdr = (struct tcp_hdr *)p->payload;
 80172e4:	6841      	ldr	r1, [r0, #4]
  if (p->len < TCP_HLEN) {
 80172e6:	2a13      	cmp	r2, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 80172e8:	4ebd      	ldr	r6, [pc, #756]	; (80175e0 <tcp_input+0x30c>)
  TCP_STATS_INC(tcp.recv);
 80172ea:	f103 0301 	add.w	r3, r3, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 80172ee:	6031      	str	r1, [r6, #0]
  TCP_STATS_INC(tcp.recv);
 80172f0:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
  if (p->len < TCP_HLEN) {
 80172f4:	d80f      	bhi.n	8017316 <tcp_input+0x42>
      TCP_STATS_INC(tcp.lenerr);
 80172f6:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 80172fa:	3301      	adds	r3, #1
 80172fc:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 8017300:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
  pbuf_free(p);
 8017304:	4628      	mov	r0, r5
  TCP_STATS_INC(tcp.drop);
 8017306:	3301      	adds	r3, #1
 8017308:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
}
 801730c:	b005      	add	sp, #20
 801730e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8017312:	f7fd bb19 	b.w	8014948 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017316:	4fb3      	ldr	r7, [pc, #716]	; (80175e4 <tcp_input+0x310>)
 8017318:	6839      	ldr	r1, [r7, #0]
 801731a:	6978      	ldr	r0, [r7, #20]
 801731c:	f004 fe90 	bl	801c040 <ip4_addr_isbroadcast_u32>
 8017320:	b9b0      	cbnz	r0, 8017350 <tcp_input+0x7c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017328:	2be0      	cmp	r3, #224	; 0xe0
 801732a:	d011      	beq.n	8017350 <tcp_input+0x7c>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801732c:	f107 0014 	add.w	r0, r7, #20
 8017330:	892a      	ldrh	r2, [r5, #8]
 8017332:	f107 0310 	add.w	r3, r7, #16
 8017336:	2106      	movs	r1, #6
 8017338:	9000      	str	r0, [sp, #0]
 801733a:	4628      	mov	r0, r5
 801733c:	f7fc fcbc 	bl	8013cb8 <ip_chksum_pseudo>
    if (chksum != 0) {
 8017340:	4680      	mov	r8, r0
 8017342:	b158      	cbz	r0, 801735c <tcp_input+0x88>
      TCP_STATS_INC(tcp.chkerr);
 8017344:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8017348:	3301      	adds	r3, #1
 801734a:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
      goto dropped;
 801734e:	e7d7      	b.n	8017300 <tcp_input+0x2c>
    TCP_STATS_INC(tcp.proterr);
 8017350:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8017354:	3301      	adds	r3, #1
 8017356:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    goto dropped;
 801735a:	e7d1      	b.n	8017300 <tcp_input+0x2c>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801735c:	6833      	ldr	r3, [r6, #0]
 801735e:	8998      	ldrh	r0, [r3, #12]
 8017360:	f7fb ff48 	bl	80131f4 <lwip_htons>
 8017364:	0a80      	lsrs	r0, r0, #10
 8017366:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801736a:	2813      	cmp	r0, #19
 801736c:	d9c3      	bls.n	80172f6 <tcp_input+0x22>
 801736e:	b281      	uxth	r1, r0
 8017370:	892b      	ldrh	r3, [r5, #8]
 8017372:	428b      	cmp	r3, r1
 8017374:	d3bf      	bcc.n	80172f6 <tcp_input+0x22>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8017376:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 801737a:	896a      	ldrh	r2, [r5, #10]
  tcphdr_opt2 = NULL;
 801737c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8017628 <tcp_input+0x354>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8017380:	b29b      	uxth	r3, r3
 8017382:	4899      	ldr	r0, [pc, #612]	; (80175e8 <tcp_input+0x314>)
  if (p->len >= hdrlen_bytes) {
 8017384:	428a      	cmp	r2, r1
  tcphdr_opt2 = NULL;
 8017386:	f8c9 8000 	str.w	r8, [r9]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801738a:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801738c:	f080 81a0 	bcs.w	80176d0 <tcp_input+0x3fc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017390:	682b      	ldr	r3, [r5, #0]
 8017392:	2b00      	cmp	r3, #0
 8017394:	f000 8267 	beq.w	8017866 <tcp_input+0x592>
    pbuf_header(p, -TCP_HLEN);
 8017398:	f06f 0113 	mvn.w	r1, #19
 801739c:	4628      	mov	r0, r5
 801739e:	f7fd facb 	bl	8014938 <pbuf_header>
    tcphdr_opt1len = p->len;
 80173a2:	896b      	ldrh	r3, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80173a4:	4a90      	ldr	r2, [pc, #576]	; (80175e8 <tcp_input+0x314>)
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80173a6:	4628      	mov	r0, r5
 80173a8:	4259      	negs	r1, r3
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80173aa:	f8b2 8000 	ldrh.w	r8, [r2]
    tcphdr_opt1len = p->len;
 80173ae:	4a8f      	ldr	r2, [pc, #572]	; (80175ec <tcp_input+0x318>)
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80173b0:	b209      	sxth	r1, r1
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80173b2:	eba8 0803 	sub.w	r8, r8, r3
    tcphdr_opt1len = p->len;
 80173b6:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80173b8:	f7fd fabe 	bl	8014938 <pbuf_header>
    if (opt2len > p->next->len) {
 80173bc:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80173be:	fa1f f888 	uxth.w	r8, r8
    if (opt2len > p->next->len) {
 80173c2:	8943      	ldrh	r3, [r0, #10]
 80173c4:	4543      	cmp	r3, r8
 80173c6:	d396      	bcc.n	80172f6 <tcp_input+0x22>
    pbuf_header(p->next, -(s16_t)opt2len);
 80173c8:	f1c8 0100 	rsb	r1, r8, #0
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80173cc:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 80173ce:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80173d0:	f8c9 3000 	str.w	r3, [r9]
    pbuf_header(p->next, -(s16_t)opt2len);
 80173d4:	f7fd fab0 	bl	8014938 <pbuf_header>
    p->tot_len -= opt2len;
 80173d8:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80173da:	896a      	ldrh	r2, [r5, #10]
    p->tot_len -= opt2len;
 80173dc:	eba3 0308 	sub.w	r3, r3, r8
 80173e0:	b29b      	uxth	r3, r3
 80173e2:	812b      	strh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80173e4:	b132      	cbz	r2, 80173f4 <tcp_input+0x120>
 80173e6:	4b82      	ldr	r3, [pc, #520]	; (80175f0 <tcp_input+0x31c>)
 80173e8:	22cf      	movs	r2, #207	; 0xcf
 80173ea:	4982      	ldr	r1, [pc, #520]	; (80175f4 <tcp_input+0x320>)
 80173ec:	4882      	ldr	r0, [pc, #520]	; (80175f8 <tcp_input+0x324>)
 80173ee:	f006 fffb 	bl	801e3e8 <iprintf>
 80173f2:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80173f4:	682a      	ldr	r2, [r5, #0]
 80173f6:	8912      	ldrh	r2, [r2, #8]
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d005      	beq.n	8017408 <tcp_input+0x134>
 80173fc:	4b7c      	ldr	r3, [pc, #496]	; (80175f0 <tcp_input+0x31c>)
 80173fe:	22d0      	movs	r2, #208	; 0xd0
 8017400:	497e      	ldr	r1, [pc, #504]	; (80175fc <tcp_input+0x328>)
 8017402:	487d      	ldr	r0, [pc, #500]	; (80175f8 <tcp_input+0x324>)
 8017404:	f006 fff0 	bl	801e3e8 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017408:	f8d6 8000 	ldr.w	r8, [r6]
 801740c:	f8b8 0000 	ldrh.w	r0, [r8]
 8017410:	f7fb fef0 	bl	80131f4 <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017414:	f8d6 9000 	ldr.w	r9, [r6]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017418:	f8a8 0000 	strh.w	r0, [r8]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801741c:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8017420:	f7fb fee8 	bl	80131f4 <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017424:	f8d6 8000 	ldr.w	r8, [r6]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017428:	f8a9 0002 	strh.w	r0, [r9, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801742c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017430:	f7fb fee4 	bl	80131fc <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017434:	f8d6 9000 	ldr.w	r9, [r6]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017438:	4b71      	ldr	r3, [pc, #452]	; (8017600 <tcp_input+0x32c>)
 801743a:	f8c8 0004 	str.w	r0, [r8, #4]
 801743e:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017440:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8017444:	f7fb feda 	bl	80131fc <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017448:	f8d6 8000 	ldr.w	r8, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801744c:	4b6d      	ldr	r3, [pc, #436]	; (8017604 <tcp_input+0x330>)
 801744e:	f8c9 0008 	str.w	r0, [r9, #8]
 8017452:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017454:	f8b8 000e 	ldrh.w	r0, [r8, #14]
 8017458:	f7fb fecc 	bl	80131f4 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801745c:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801745e:	f8a8 000e 	strh.w	r0, [r8, #14]
  flags = TCPH_FLAGS(tcphdr);
 8017462:	8998      	ldrh	r0, [r3, #12]
 8017464:	f7fb fec6 	bl	80131f4 <lwip_htons>
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8017468:	892a      	ldrh	r2, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 801746a:	b2c0      	uxtb	r0, r0
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801746c:	f010 0303 	ands.w	r3, r0, #3
  flags = TCPH_FLAGS(tcphdr);
 8017470:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8017474:	bf18      	it	ne
 8017476:	2301      	movne	r3, #1
 8017478:	4413      	add	r3, r2
  flags = TCPH_FLAGS(tcphdr);
 801747a:	4a63      	ldr	r2, [pc, #396]	; (8017608 <tcp_input+0x334>)
 801747c:	7010      	strb	r0, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801747e:	4a63      	ldr	r2, [pc, #396]	; (801760c <tcp_input+0x338>)
 8017480:	f8d2 8000 	ldr.w	r8, [r2]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8017484:	4a62      	ldr	r2, [pc, #392]	; (8017610 <tcp_input+0x33c>)
 8017486:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017488:	f1b8 0f00 	cmp.w	r8, #0
 801748c:	f000 80d4 	beq.w	8017638 <tcp_input+0x364>
  prev = NULL;
 8017490:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017494:	f8df b158 	ldr.w	fp, [pc, #344]	; 80175f0 <tcp_input+0x31c>
 8017498:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80175f8 <tcp_input+0x324>
 801749c:	e006      	b.n	80174ac <tcp_input+0x1d8>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801749e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80174a2:	46c1      	mov	r9, r8
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	f000 80c7 	beq.w	8017638 <tcp_input+0x364>
 80174aa:	4698      	mov	r8, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80174ac:	f898 3014 	ldrb.w	r3, [r8, #20]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d07a      	beq.n	80175aa <tcp_input+0x2d6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80174b4:	2b0a      	cmp	r3, #10
 80174b6:	f000 8088 	beq.w	80175ca <tcp_input+0x2f6>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80174ba:	2b01      	cmp	r3, #1
 80174bc:	d07e      	beq.n	80175bc <tcp_input+0x2e8>
    if (pcb->remote_port == tcphdr->src &&
 80174be:	6833      	ldr	r3, [r6, #0]
 80174c0:	f8b8 1018 	ldrh.w	r1, [r8, #24]
 80174c4:	881a      	ldrh	r2, [r3, #0]
 80174c6:	4291      	cmp	r1, r2
 80174c8:	d1e9      	bne.n	801749e <tcp_input+0x1ca>
 80174ca:	885b      	ldrh	r3, [r3, #2]
 80174cc:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d1e4      	bne.n	801749e <tcp_input+0x1ca>
        pcb->local_port == tcphdr->dest &&
 80174d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80174d8:	693b      	ldr	r3, [r7, #16]
 80174da:	429a      	cmp	r2, r3
 80174dc:	d1df      	bne.n	801749e <tcp_input+0x1ca>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80174de:	f8d8 2000 	ldr.w	r2, [r8]
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d1da      	bne.n	801749e <tcp_input+0x1ca>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80174e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80174ec:	4543      	cmp	r3, r8
 80174ee:	f000 8497 	beq.w	8017e20 <tcp_input+0xb4c>
      if (prev != NULL) {
 80174f2:	f1b9 0f00 	cmp.w	r9, #0
 80174f6:	f000 848c 	beq.w	8017e12 <tcp_input+0xb3e>
        pcb->next = tcp_active_pcbs;
 80174fa:	4944      	ldr	r1, [pc, #272]	; (801760c <tcp_input+0x338>)
        prev->next = pcb->next;
 80174fc:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 8017500:	680a      	ldr	r2, [r1, #0]
        tcp_active_pcbs = pcb;
 8017502:	f8c1 8000 	str.w	r8, [r1]
 8017506:	4613      	mov	r3, r2
        pcb->next = tcp_active_pcbs;
 8017508:	f8c8 200c 	str.w	r2, [r8, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801750c:	4543      	cmp	r3, r8
 801750e:	f000 8478 	beq.w	8017e02 <tcp_input+0xb2e>
    inseg.next = NULL;
 8017512:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801762c <tcp_input+0x358>
 8017516:	2300      	movs	r3, #0
    inseg.tcphdr = tcphdr;
 8017518:	6832      	ldr	r2, [r6, #0]
    inseg.len = p->tot_len;
 801751a:	8929      	ldrh	r1, [r5, #8]
    inseg.tcphdr = tcphdr;
 801751c:	f8c9 2010 	str.w	r2, [r9, #16]
    if (flags & TCP_PSH) {
 8017520:	4a39      	ldr	r2, [pc, #228]	; (8017608 <tcp_input+0x334>)
    recv_data = NULL;
 8017522:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8017630 <tcp_input+0x35c>
    if (flags & TCP_PSH) {
 8017526:	7812      	ldrb	r2, [r2, #0]
    recv_flags = 0;
 8017528:	4f3a      	ldr	r7, [pc, #232]	; (8017614 <tcp_input+0x340>)
    recv_acked = 0;
 801752a:	f8df b108 	ldr.w	fp, [pc, #264]	; 8017634 <tcp_input+0x360>
    if (flags & TCP_PSH) {
 801752e:	0712      	lsls	r2, r2, #28
    inseg.p = p;
 8017530:	f8c9 5004 	str.w	r5, [r9, #4]
    inseg.len = p->tot_len;
 8017534:	f8a9 1008 	strh.w	r1, [r9, #8]
    inseg.next = NULL;
 8017538:	f8c9 3000 	str.w	r3, [r9]
    recv_data = NULL;
 801753c:	f8ca 3000 	str.w	r3, [sl]
    recv_flags = 0;
 8017540:	703b      	strb	r3, [r7, #0]
    recv_acked = 0;
 8017542:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 8017546:	d503      	bpl.n	8017550 <tcp_input+0x27c>
      p->flags |= PBUF_FLAG_PUSH;
 8017548:	7b6b      	ldrb	r3, [r5, #13]
 801754a:	f043 0301 	orr.w	r3, r3, #1
 801754e:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8017550:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 8017554:	2b00      	cmp	r3, #0
 8017556:	f000 80c2 	beq.w	80176de <tcp_input+0x40a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801755a:	4640      	mov	r0, r8
 801755c:	f7fe fe44 	bl	80161e8 <tcp_process_refused_data>
 8017560:	300d      	adds	r0, #13
 8017562:	d009      	beq.n	8017578 <tcp_input+0x2a4>
 8017564:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 8017568:	2b00      	cmp	r3, #0
 801756a:	f000 80b8 	beq.w	80176de <tcp_input+0x40a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801756e:	4b28      	ldr	r3, [pc, #160]	; (8017610 <tcp_input+0x33c>)
 8017570:	881b      	ldrh	r3, [r3, #0]
 8017572:	2b00      	cmp	r3, #0
 8017574:	f000 80b3 	beq.w	80176de <tcp_input+0x40a>
        if (pcb->rcv_ann_wnd == 0) {
 8017578:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 801757c:	2b00      	cmp	r3, #0
 801757e:	f000 830f 	beq.w	8017ba0 <tcp_input+0x8cc>
        TCP_STATS_INC(tcp.drop);
 8017582:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
 8017586:	4d24      	ldr	r5, [pc, #144]	; (8017618 <tcp_input+0x344>)
 8017588:	3301      	adds	r3, #1
 801758a:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
    tcp_input_pcb = NULL;
 801758e:	2400      	movs	r4, #0
    if (inseg.p != NULL)
 8017590:	f8d9 0004 	ldr.w	r0, [r9, #4]
    tcp_input_pcb = NULL;
 8017594:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 8017596:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 801759a:	b118      	cbz	r0, 80175a4 <tcp_input+0x2d0>
      pbuf_free(inseg.p);
 801759c:	f7fd f9d4 	bl	8014948 <pbuf_free>
      inseg.p = NULL;
 80175a0:	f8c9 4004 	str.w	r4, [r9, #4]
}
 80175a4:	b005      	add	sp, #20
 80175a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80175aa:	465b      	mov	r3, fp
 80175ac:	22e2      	movs	r2, #226	; 0xe2
 80175ae:	491b      	ldr	r1, [pc, #108]	; (801761c <tcp_input+0x348>)
 80175b0:	4650      	mov	r0, sl
 80175b2:	f006 ff19 	bl	801e3e8 <iprintf>
 80175b6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80175ba:	e77b      	b.n	80174b4 <tcp_input+0x1e0>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80175bc:	465b      	mov	r3, fp
 80175be:	22e4      	movs	r2, #228	; 0xe4
 80175c0:	4917      	ldr	r1, [pc, #92]	; (8017620 <tcp_input+0x34c>)
 80175c2:	4650      	mov	r0, sl
 80175c4:	f006 ff10 	bl	801e3e8 <iprintf>
 80175c8:	e779      	b.n	80174be <tcp_input+0x1ea>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80175ca:	465b      	mov	r3, fp
 80175cc:	22e3      	movs	r2, #227	; 0xe3
 80175ce:	4915      	ldr	r1, [pc, #84]	; (8017624 <tcp_input+0x350>)
 80175d0:	4650      	mov	r0, sl
 80175d2:	f006 ff09 	bl	801e3e8 <iprintf>
 80175d6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80175da:	e76e      	b.n	80174ba <tcp_input+0x1e6>
 80175dc:	20035384 	.word	0x20035384
 80175e0:	200214dc 	.word	0x200214dc
 80175e4:	20025a74 	.word	0x20025a74
 80175e8:	200214e8 	.word	0x200214e8
 80175ec:	200214e0 	.word	0x200214e0
 80175f0:	0803abe4 	.word	0x0803abe4
 80175f4:	0803aa2c 	.word	0x0803aa2c
 80175f8:	08023618 	.word	0x08023618
 80175fc:	0803aa38 	.word	0x0803aa38
 8017600:	200214d4 	.word	0x200214d4
 8017604:	200214ac 	.word	0x200214ac
 8017608:	200214b0 	.word	0x200214b0
 801760c:	20035494 	.word	0x20035494
 8017610:	200214ea 	.word	0x200214ea
 8017614:	200214d0 	.word	0x200214d0
 8017618:	200354a8 	.word	0x200354a8
 801761c:	0803aa58 	.word	0x0803aa58
 8017620:	0803aaac 	.word	0x0803aaac
 8017624:	0803aa80 	.word	0x0803aa80
 8017628:	200214e4 	.word	0x200214e4
 801762c:	200214b4 	.word	0x200214b4
 8017630:	200214cc 	.word	0x200214cc
 8017634:	200214c8 	.word	0x200214c8
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017638:	4ba7      	ldr	r3, [pc, #668]	; (80178d8 <tcp_input+0x604>)
 801763a:	f8d3 8000 	ldr.w	r8, [r3]
 801763e:	f1b8 0f00 	cmp.w	r8, #0
 8017642:	f000 82aa 	beq.w	8017b9a <tcp_input+0x8c6>
 8017646:	462b      	mov	r3, r5
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017648:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 80178fc <tcp_input+0x628>
 801764c:	4645      	mov	r5, r8
 801764e:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8017910 <tcp_input+0x63c>
 8017652:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8017904 <tcp_input+0x630>
 8017656:	4698      	mov	r8, r3
 8017658:	e002      	b.n	8017660 <tcp_input+0x38c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801765a:	68ed      	ldr	r5, [r5, #12]
 801765c:	2d00      	cmp	r5, #0
 801765e:	d06f      	beq.n	8017740 <tcp_input+0x46c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017660:	7d28      	ldrb	r0, [r5, #20]
 8017662:	4653      	mov	r3, sl
 8017664:	22fe      	movs	r2, #254	; 0xfe
 8017666:	4649      	mov	r1, r9
 8017668:	280a      	cmp	r0, #10
 801766a:	4658      	mov	r0, fp
 801766c:	d001      	beq.n	8017672 <tcp_input+0x39e>
 801766e:	f006 febb 	bl	801e3e8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8017672:	6833      	ldr	r3, [r6, #0]
 8017674:	8b29      	ldrh	r1, [r5, #24]
 8017676:	881a      	ldrh	r2, [r3, #0]
 8017678:	428a      	cmp	r2, r1
 801767a:	d1ee      	bne.n	801765a <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 801767c:	8ae9      	ldrh	r1, [r5, #22]
      if (pcb->remote_port == tcphdr->src &&
 801767e:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8017682:	458c      	cmp	ip, r1
 8017684:	d1e9      	bne.n	801765a <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8017686:	6938      	ldr	r0, [r7, #16]
 8017688:	6869      	ldr	r1, [r5, #4]
 801768a:	4281      	cmp	r1, r0
 801768c:	d1e5      	bne.n	801765a <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801768e:	6978      	ldr	r0, [r7, #20]
 8017690:	6829      	ldr	r1, [r5, #0]
 8017692:	4281      	cmp	r1, r0
 8017694:	d1e1      	bne.n	801765a <tcp_input+0x386>
 8017696:	4643      	mov	r3, r8
 8017698:	46a8      	mov	r8, r5
 801769a:	461d      	mov	r5, r3
  if (flags & TCP_RST) {
 801769c:	4b8f      	ldr	r3, [pc, #572]	; (80178dc <tcp_input+0x608>)
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	075f      	lsls	r7, r3, #29
 80176a2:	d413      	bmi.n	80176cc <tcp_input+0x3f8>
 80176a4:	498e      	ldr	r1, [pc, #568]	; (80178e0 <tcp_input+0x60c>)
  if (flags & TCP_SYN) {
 80176a6:	079e      	lsls	r6, r3, #30
 80176a8:	880c      	ldrh	r4, [r1, #0]
 80176aa:	f140 83e6 	bpl.w	8017e7a <tcp_input+0xba6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80176ae:	4b8d      	ldr	r3, [pc, #564]	; (80178e4 <tcp_input+0x610>)
 80176b0:	6819      	ldr	r1, [r3, #0]
 80176b2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80176b6:	1acb      	subs	r3, r1, r3
 80176b8:	d405      	bmi.n	80176c6 <tcp_input+0x3f2>
 80176ba:	f8b8 6028 	ldrh.w	r6, [r8, #40]	; 0x28
 80176be:	1b9b      	subs	r3, r3, r6
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	f340 83e2 	ble.w	8017e8a <tcp_input+0xbb6>
  if ((tcplen > 0)) {
 80176c6:	2c00      	cmp	r4, #0
 80176c8:	f040 83eb 	bne.w	8017ea2 <tcp_input+0xbce>
        pbuf_free(p);
 80176cc:	4628      	mov	r0, r5
 80176ce:	e61d      	b.n	801730c <tcp_input+0x38>
    tcphdr_opt1len = tcphdr_optlen;
 80176d0:	4a85      	ldr	r2, [pc, #532]	; (80178e8 <tcp_input+0x614>)
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80176d2:	4249      	negs	r1, r1
 80176d4:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 80176d6:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80176d8:	f7fd f92e 	bl	8014938 <pbuf_header>
 80176dc:	e694      	b.n	8017408 <tcp_input+0x134>
  if (flags & TCP_RST) {
 80176de:	4b7f      	ldr	r3, [pc, #508]	; (80178dc <tcp_input+0x608>)
    tcp_input_pcb = pcb;
 80176e0:	4d82      	ldr	r5, [pc, #520]	; (80178ec <tcp_input+0x618>)
  if (flags & TCP_RST) {
 80176e2:	781c      	ldrb	r4, [r3, #0]
    tcp_input_pcb = pcb;
 80176e4:	f8c5 8000 	str.w	r8, [r5]
  if (flags & TCP_RST) {
 80176e8:	0762      	lsls	r2, r4, #29
 80176ea:	f140 80e6 	bpl.w	80178ba <tcp_input+0x5e6>
    if (pcb->state == SYN_SENT) {
 80176ee:	f898 1014 	ldrb.w	r1, [r8, #20]
 80176f2:	2902      	cmp	r1, #2
 80176f4:	f000 8258 	beq.w	8017ba8 <tcp_input+0x8d4>
      if (seqno == pcb->rcv_nxt) {
 80176f8:	4b7a      	ldr	r3, [pc, #488]	; (80178e4 <tcp_input+0x610>)
 80176fa:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	429a      	cmp	r2, r3
 8017702:	f000 83af 	beq.w	8017e64 <tcp_input+0xb90>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017706:	1a9b      	subs	r3, r3, r2
 8017708:	d405      	bmi.n	8017716 <tcp_input+0x442>
 801770a:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 801770e:	1a9b      	subs	r3, r3, r2
 8017710:	2b00      	cmp	r3, #0
 8017712:	f340 82f7 	ble.w	8017d04 <tcp_input+0xa30>
      if (recv_flags & TF_RESET) {
 8017716:	783b      	ldrb	r3, [r7, #0]
 8017718:	071e      	lsls	r6, r3, #28
 801771a:	f140 80fd 	bpl.w	8017918 <tcp_input+0x644>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801771e:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 8017722:	b123      	cbz	r3, 801772e <tcp_input+0x45a>
 8017724:	f06f 010d 	mvn.w	r1, #13
 8017728:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801772c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801772e:	4641      	mov	r1, r8
 8017730:	486f      	ldr	r0, [pc, #444]	; (80178f0 <tcp_input+0x61c>)
 8017732:	f7fe fc19 	bl	8015f68 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8017736:	4641      	mov	r1, r8
 8017738:	2002      	movs	r0, #2
 801773a:	f7fc ff0d 	bl	8014558 <memp_free>
 801773e:	e726      	b.n	801758e <tcp_input+0x2ba>
 8017740:	469c      	mov	ip, r3
 8017742:	4645      	mov	r5, r8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017744:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8017914 <tcp_input+0x640>
 8017748:	f8d9 e000 	ldr.w	lr, [r9]
 801774c:	f1be 0f00 	cmp.w	lr, #0
 8017750:	f000 8090 	beq.w	8017874 <tcp_input+0x5a0>
      if (lpcb->local_port == tcphdr->dest) {
 8017754:	f8bc 1002 	ldrh.w	r1, [ip, #2]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017758:	46f0      	mov	r8, lr
 801775a:	6978      	ldr	r0, [r7, #20]
    prev = NULL;
 801775c:	2200      	movs	r2, #0
 801775e:	e006      	b.n	801776e <tcp_input+0x49a>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017760:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017764:	4642      	mov	r2, r8
 8017766:	4698      	mov	r8, r3
 8017768:	2b00      	cmp	r3, #0
 801776a:	f000 8083 	beq.w	8017874 <tcp_input+0x5a0>
      if (lpcb->local_port == tcphdr->dest) {
 801776e:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8017772:	428b      	cmp	r3, r1
 8017774:	d1f4      	bne.n	8017760 <tcp_input+0x48c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017776:	f8d8 3000 	ldr.w	r3, [r8]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801777a:	b10b      	cbz	r3, 8017780 <tcp_input+0x4ac>
 801777c:	4283      	cmp	r3, r0
 801777e:	d1ef      	bne.n	8017760 <tcp_input+0x48c>
      if (prev != NULL) {
 8017780:	2a00      	cmp	r2, #0
 8017782:	f000 8223 	beq.w	8017bcc <tcp_input+0x8f8>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017786:	f8d8 300c 	ldr.w	r3, [r8, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801778a:	f8c9 8000 	str.w	r8, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801778e:	60d3      	str	r3, [r2, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017790:	f8c8 e00c 	str.w	lr, [r8, #12]
  if (flags & TCP_RST) {
 8017794:	4b51      	ldr	r3, [pc, #324]	; (80178dc <tcp_input+0x608>)
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	075a      	lsls	r2, r3, #29
 801779a:	d497      	bmi.n	80176cc <tcp_input+0x3f8>
  if (flags & TCP_ACK) {
 801779c:	06d8      	lsls	r0, r3, #27
 801779e:	f100 8229 	bmi.w	8017bf4 <tcp_input+0x920>
  } else if (flags & TCP_SYN) {
 80177a2:	0799      	lsls	r1, r3, #30
 80177a4:	d592      	bpl.n	80176cc <tcp_input+0x3f8>
    npcb = tcp_alloc(pcb->prio);
 80177a6:	f898 0015 	ldrb.w	r0, [r8, #21]
 80177aa:	f7fe fe7f 	bl	80164ac <tcp_alloc>
    if (npcb == NULL) {
 80177ae:	4681      	mov	r9, r0
 80177b0:	2800      	cmp	r0, #0
 80177b2:	f000 838e 	beq.w	8017ed2 <tcp_input+0xbfe>
    npcb->remote_port = tcphdr->src;
 80177b6:	6832      	ldr	r2, [r6, #0]
    npcb->state = SYN_RCVD;
 80177b8:	2403      	movs	r4, #3
    npcb->rcv_nxt = seqno + 1;
 80177ba:	4b4a      	ldr	r3, [pc, #296]	; (80178e4 <tcp_input+0x610>)
    npcb->local_port = pcb->local_port;
 80177bc:	f8b8 c016 	ldrh.w	ip, [r8, #22]
    npcb->rcv_nxt = seqno + 1;
 80177c0:	6819      	ldr	r1, [r3, #0]
    npcb->remote_port = tcphdr->src;
 80177c2:	7813      	ldrb	r3, [r2, #0]
 80177c4:	7852      	ldrb	r2, [r2, #1]
    npcb->rcv_nxt = seqno + 1;
 80177c6:	3101      	adds	r1, #1
    npcb->remote_port = tcphdr->src;
 80177c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    npcb->rcv_nxt = seqno + 1;
 80177cc:	6241      	str	r1, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80177ce:	62c1      	str	r1, [r0, #44]	; 0x2c
    npcb->remote_port = tcphdr->src;
 80177d0:	8303      	strh	r3, [r0, #24]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80177d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 80177d6:	f8a0 c016 	strh.w	ip, [r0, #22]
    npcb->state = SYN_RCVD;
 80177da:	7504      	strb	r4, [r0, #20]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80177dc:	e9c0 3200 	strd	r3, r2, [r0]
    iss = tcp_next_iss(npcb);
 80177e0:	f7fe ff2a 	bl	8016638 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80177e4:	4b3f      	ldr	r3, [pc, #252]	; (80178e4 <tcp_input+0x610>)
    TCP_REG_ACTIVE(npcb);
 80177e6:	4942      	ldr	r1, [pc, #264]	; (80178f0 <tcp_input+0x61c>)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80177e8:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 80177ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80177ee:	3a01      	subs	r2, #1
    npcb->snd_wl2 = iss;
 80177f0:	f8c9 0054 	str.w	r0, [r9, #84]	; 0x54
    npcb->lastack = iss;
 80177f4:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_lbb = iss;
 80177f8:	f8c9 0058 	str.w	r0, [r9, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 80177fc:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->listener = pcb;
 8017800:	f8c9 8078 	str.w	r8, [r9, #120]	; 0x78
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017804:	e9c9 0213 	strd	r0, r2, [r9, #76]	; 0x4c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017808:	f898 3008 	ldrb.w	r3, [r8, #8]
    TCP_REG_ACTIVE(npcb);
 801780c:	680a      	ldr	r2, [r1, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801780e:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 8017812:	f8c1 9000 	str.w	r9, [r1]
 8017816:	f8c9 200c 	str.w	r2, [r9, #12]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801781a:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801781e:	f001 fce9 	bl	80191f4 <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 8017822:	4b34      	ldr	r3, [pc, #208]	; (80178f4 <tcp_input+0x620>)
    TCP_REG_ACTIVE(npcb);
 8017824:	4a34      	ldr	r2, [pc, #208]	; (80178f8 <tcp_input+0x624>)
 8017826:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 8017828:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801782a:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801782c:	2b00      	cmp	r3, #0
 801782e:	f040 834b 	bne.w	8017ec8 <tcp_input+0xbf4>
    npcb->snd_wnd = tcphdr->wnd;
 8017832:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017834:	f109 0104 	add.w	r1, r9, #4
 8017838:	f8b9 0032 	ldrh.w	r0, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801783c:	89db      	ldrh	r3, [r3, #14]
 801783e:	f8a9 305c 	strh.w	r3, [r9, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017842:	f8a9 305e 	strh.w	r3, [r9, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017846:	f7fe ff03 	bl	8016650 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801784a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801784c:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017850:	4648      	mov	r0, r9
 8017852:	f000 ffd7 	bl	8018804 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8017856:	2800      	cmp	r0, #0
 8017858:	f040 832f 	bne.w	8017eba <tcp_input+0xbe6>
    tcp_output(npcb);
 801785c:	4648      	mov	r0, r9
 801785e:	f001 f8f7 	bl	8018a50 <tcp_output>
        pbuf_free(p);
 8017862:	4628      	mov	r0, r5
 8017864:	e552      	b.n	801730c <tcp_input+0x38>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017866:	4b25      	ldr	r3, [pc, #148]	; (80178fc <tcp_input+0x628>)
 8017868:	22b2      	movs	r2, #178	; 0xb2
 801786a:	4925      	ldr	r1, [pc, #148]	; (8017900 <tcp_input+0x62c>)
 801786c:	4825      	ldr	r0, [pc, #148]	; (8017904 <tcp_input+0x630>)
 801786e:	f006 fdbb 	bl	801e3e8 <iprintf>
 8017872:	e591      	b.n	8017398 <tcp_input+0xc4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017874:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8017878:	f7fb fcbc 	bl	80131f4 <lwip_htons>
 801787c:	0743      	lsls	r3, r0, #29
 801787e:	f53f af25 	bmi.w	80176cc <tcp_input+0x3f8>
      TCP_STATS_INC(tcp.proterr);
 8017882:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017886:	6830      	ldr	r0, [r6, #0]
      TCP_STATS_INC(tcp.drop);
 8017888:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
      TCP_STATS_INC(tcp.proterr);
 801788c:	3201      	adds	r2, #1
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801788e:	4914      	ldr	r1, [pc, #80]	; (80178e0 <tcp_input+0x60c>)
      TCP_STATS_INC(tcp.proterr);
 8017890:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8017894:	3301      	adds	r3, #1
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017896:	880e      	ldrh	r6, [r1, #0]
 8017898:	8802      	ldrh	r2, [r0, #0]
 801789a:	4912      	ldr	r1, [pc, #72]	; (80178e4 <tcp_input+0x610>)
      TCP_STATS_INC(tcp.drop);
 801789c:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80178a0:	6809      	ldr	r1, [r1, #0]
 80178a2:	4b19      	ldr	r3, [pc, #100]	; (8017908 <tcp_input+0x634>)
 80178a4:	9201      	str	r2, [sp, #4]
 80178a6:	4431      	add	r1, r6
 80178a8:	8844      	ldrh	r4, [r0, #2]
 80178aa:	1d1a      	adds	r2, r3, #4
 80178ac:	4817      	ldr	r0, [pc, #92]	; (801790c <tcp_input+0x638>)
 80178ae:	6800      	ldr	r0, [r0, #0]
 80178b0:	9400      	str	r4, [sp, #0]
 80178b2:	f001 fa9b 	bl	8018dec <tcp_rst>
        pbuf_free(p);
 80178b6:	4628      	mov	r0, r5
 80178b8:	e528      	b.n	801730c <tcp_input+0x38>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80178ba:	f014 0202 	ands.w	r2, r4, #2
 80178be:	f898 301a 	ldrb.w	r3, [r8, #26]
 80178c2:	d07f      	beq.n	80179c4 <tcp_input+0x6f0>
 80178c4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80178c8:	3902      	subs	r1, #2
 80178ca:	2901      	cmp	r1, #1
 80178cc:	d97a      	bls.n	80179c4 <tcp_input+0x6f0>
      tcp_ack_now(pcb);
 80178ce:	f043 0302 	orr.w	r3, r3, #2
 80178d2:	f888 301a 	strb.w	r3, [r8, #26]
 80178d6:	e71e      	b.n	8017716 <tcp_input+0x442>
 80178d8:	200354a4 	.word	0x200354a4
 80178dc:	200214b0 	.word	0x200214b0
 80178e0:	200214ea 	.word	0x200214ea
 80178e4:	200214d4 	.word	0x200214d4
 80178e8:	200214e0 	.word	0x200214e0
 80178ec:	200354a8 	.word	0x200354a8
 80178f0:	20035494 	.word	0x20035494
 80178f4:	200214e8 	.word	0x200214e8
 80178f8:	20035490 	.word	0x20035490
 80178fc:	0803abe4 	.word	0x0803abe4
 8017900:	0803aa1c 	.word	0x0803aa1c
 8017904:	08023618 	.word	0x08023618
 8017908:	20025a84 	.word	0x20025a84
 801790c:	200214ac 	.word	0x200214ac
 8017910:	0803ab2c 	.word	0x0803ab2c
 8017914:	2003549c 	.word	0x2003549c
        if (recv_acked > 0) {
 8017918:	f8bb 2000 	ldrh.w	r2, [fp]
 801791c:	b162      	cbz	r2, 8017938 <tcp_input+0x664>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801791e:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 8017922:	b133      	cbz	r3, 8017932 <tcp_input+0x65e>
 8017924:	4641      	mov	r1, r8
 8017926:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801792a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801792c:	300d      	adds	r0, #13
 801792e:	f43f ae2e 	beq.w	801758e <tcp_input+0x2ba>
          recv_acked = 0;
 8017932:	2300      	movs	r3, #0
 8017934:	f8ab 3000 	strh.w	r3, [fp]
  if (recv_flags & TF_CLOSED) {
 8017938:	783b      	ldrb	r3, [r7, #0]
 801793a:	06dc      	lsls	r4, r3, #27
 801793c:	f100 8153 	bmi.w	8017be6 <tcp_input+0x912>
        if (recv_data != NULL) {
 8017940:	f8da 3000 	ldr.w	r3, [sl]
 8017944:	b31b      	cbz	r3, 801798e <tcp_input+0x6ba>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017946:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 801794a:	b133      	cbz	r3, 801795a <tcp_input+0x686>
 801794c:	4bb3      	ldr	r3, [pc, #716]	; (8017c1c <tcp_input+0x948>)
 801794e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8017952:	49b3      	ldr	r1, [pc, #716]	; (8017c20 <tcp_input+0x94c>)
 8017954:	48b3      	ldr	r0, [pc, #716]	; (8017c24 <tcp_input+0x950>)
 8017956:	f006 fd47 	bl	801e3e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801795a:	f898 301a 	ldrb.w	r3, [r8, #26]
 801795e:	f8da 2000 	ldr.w	r2, [sl]
 8017962:	f013 0310 	ands.w	r3, r3, #16
 8017966:	f040 8137 	bne.w	8017bd8 <tcp_input+0x904>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801796a:	f8d8 4080 	ldr.w	r4, [r8, #128]	; 0x80
 801796e:	2c00      	cmp	r4, #0
 8017970:	f000 8241 	beq.w	8017df6 <tcp_input+0xb22>
 8017974:	4641      	mov	r1, r8
 8017976:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801797a:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 801797c:	f110 0f0d 	cmn.w	r0, #13
 8017980:	f43f ae05 	beq.w	801758e <tcp_input+0x2ba>
          if (err != ERR_OK) {
 8017984:	b118      	cbz	r0, 801798e <tcp_input+0x6ba>
            pcb->refused_data = recv_data;
 8017986:	f8da 3000 	ldr.w	r3, [sl]
 801798a:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 801798e:	783b      	ldrb	r3, [r7, #0]
 8017990:	0698      	lsls	r0, r3, #26
 8017992:	d508      	bpl.n	80179a6 <tcp_input+0x6d2>
          if (pcb->refused_data != NULL) {
 8017994:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 8017998:	2b00      	cmp	r3, #0
 801799a:	f000 824b 	beq.w	8017e34 <tcp_input+0xb60>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801799e:	7b5a      	ldrb	r2, [r3, #13]
 80179a0:	f042 0220 	orr.w	r2, r2, #32
 80179a4:	735a      	strb	r2, [r3, #13]
  if (recv_flags & TF_CLOSED) {
 80179a6:	783b      	ldrb	r3, [r7, #0]
        tcp_input_pcb = NULL;
 80179a8:	2200      	movs	r2, #0
  if (recv_flags & TF_CLOSED) {
 80179aa:	06d9      	lsls	r1, r3, #27
        tcp_input_pcb = NULL;
 80179ac:	602a      	str	r2, [r5, #0]
  if (recv_flags & TF_CLOSED) {
 80179ae:	d505      	bpl.n	80179bc <tcp_input+0x6e8>
 80179b0:	4640      	mov	r0, r8
 80179b2:	f7ff fc77 	bl	80172a4 <tcp_input_delayed_close.part.3>
        if (tcp_input_delayed_close(pcb)) {
 80179b6:	2800      	cmp	r0, #0
 80179b8:	f47f ade9 	bne.w	801758e <tcp_input+0x2ba>
        tcp_output(pcb);
 80179bc:	4640      	mov	r0, r8
 80179be:	f001 f847 	bl	8018a50 <tcp_output>
 80179c2:	e5e4      	b.n	801758e <tcp_input+0x2ba>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80179c4:	06db      	lsls	r3, r3, #27
 80179c6:	d403      	bmi.n	80179d0 <tcp_input+0x6fc>
    pcb->tmr = tcp_ticks;
 80179c8:	4b97      	ldr	r3, [pc, #604]	; (8017c28 <tcp_input+0x954>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	f8c8 3020 	str.w	r3, [r8, #32]
  if (tcphdr_optlen != 0) {
 80179d0:	4b96      	ldr	r3, [pc, #600]	; (8017c2c <tcp_input+0x958>)
  pcb->keep_cnt_sent = 0;
 80179d2:	2100      	movs	r1, #0
  if (tcphdr_optlen != 0) {
 80179d4:	881b      	ldrh	r3, [r3, #0]
  pcb->keep_cnt_sent = 0;
 80179d6:	f888 1096 	strb.w	r1, [r8, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 80179da:	b12b      	cbz	r3, 80179e8 <tcp_input+0x714>
 80179dc:	f108 0032 	add.w	r0, r8, #50	; 0x32
 80179e0:	9203      	str	r2, [sp, #12]
 80179e2:	f7ff fc23 	bl	801722c <tcp_parseopt.isra.1.part.2>
 80179e6:	9a03      	ldr	r2, [sp, #12]
  switch (pcb->state) {
 80179e8:	f898 3014 	ldrb.w	r3, [r8, #20]
 80179ec:	3b02      	subs	r3, #2
 80179ee:	2b07      	cmp	r3, #7
 80179f0:	f63f ae91 	bhi.w	8017716 <tcp_input+0x442>
 80179f4:	e8df f003 	tbb	[pc, r3]
 80179f8:	60c07d9c 	.word	0x60c07d9c
 80179fc:	041dc042 	.word	0x041dc042
    tcp_receive(pcb);
 8017a00:	4640      	mov	r0, r8
 8017a02:	f7fe fea5 	bl	8016750 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017a06:	4b8a      	ldr	r3, [pc, #552]	; (8017c30 <tcp_input+0x95c>)
 8017a08:	781b      	ldrb	r3, [r3, #0]
 8017a0a:	06db      	lsls	r3, r3, #27
 8017a0c:	f57f ae83 	bpl.w	8017716 <tcp_input+0x442>
 8017a10:	4b88      	ldr	r3, [pc, #544]	; (8017c34 <tcp_input+0x960>)
 8017a12:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
 8017a16:	681a      	ldr	r2, [r3, #0]
 8017a18:	783b      	ldrb	r3, [r7, #0]
 8017a1a:	4291      	cmp	r1, r2
 8017a1c:	f47f ae7b 	bne.w	8017716 <tcp_input+0x442>
 8017a20:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 8017a24:	2a00      	cmp	r2, #0
 8017a26:	f47f ae76 	bne.w	8017716 <tcp_input+0x442>
      recv_flags |= TF_CLOSED;
 8017a2a:	f043 0310 	orr.w	r3, r3, #16
 8017a2e:	703b      	strb	r3, [r7, #0]
 8017a30:	e671      	b.n	8017716 <tcp_input+0x442>
    tcp_receive(pcb);
 8017a32:	4640      	mov	r0, r8
 8017a34:	f7fe fe8c 	bl	8016750 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017a38:	4b7d      	ldr	r3, [pc, #500]	; (8017c30 <tcp_input+0x95c>)
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	06da      	lsls	r2, r3, #27
 8017a3e:	f57f ae6a 	bpl.w	8017716 <tcp_input+0x442>
 8017a42:	4b7c      	ldr	r3, [pc, #496]	; (8017c34 <tcp_input+0x960>)
 8017a44:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	429a      	cmp	r2, r3
 8017a4c:	f47f ae63 	bne.w	8017716 <tcp_input+0x442>
 8017a50:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	f47f ae5e 	bne.w	8017716 <tcp_input+0x442>
      tcp_pcb_purge(pcb);
 8017a5a:	4640      	mov	r0, r8
 8017a5c:	f7fe f82c 	bl	8015ab8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017a60:	4b75      	ldr	r3, [pc, #468]	; (8017c38 <tcp_input+0x964>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	4543      	cmp	r3, r8
 8017a66:	f000 8247 	beq.w	8017ef8 <tcp_input+0xc24>
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	f000 8248 	beq.w	8017f00 <tcp_input+0xc2c>
 8017a70:	68da      	ldr	r2, [r3, #12]
 8017a72:	4542      	cmp	r2, r8
 8017a74:	f000 8254 	beq.w	8017f20 <tcp_input+0xc4c>
 8017a78:	4613      	mov	r3, r2
 8017a7a:	e7f6      	b.n	8017a6a <tcp_input+0x796>
    tcp_receive(pcb);
 8017a7c:	4640      	mov	r0, r8
 8017a7e:	f7fe fe67 	bl	8016750 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8017a82:	783b      	ldrb	r3, [r7, #0]
 8017a84:	0699      	lsls	r1, r3, #26
 8017a86:	f57f ae46 	bpl.w	8017716 <tcp_input+0x442>
      tcp_ack_now(pcb);
 8017a8a:	f898 301a 	ldrb.w	r3, [r8, #26]
      tcp_pcb_purge(pcb);
 8017a8e:	4640      	mov	r0, r8
      tcp_ack_now(pcb);
 8017a90:	f043 0302 	orr.w	r3, r3, #2
 8017a94:	f888 301a 	strb.w	r3, [r8, #26]
      tcp_pcb_purge(pcb);
 8017a98:	f7fe f80e 	bl	8015ab8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017a9c:	4b66      	ldr	r3, [pc, #408]	; (8017c38 <tcp_input+0x964>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	4543      	cmp	r3, r8
 8017aa2:	f000 8229 	beq.w	8017ef8 <tcp_input+0xc24>
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	f000 822a 	beq.w	8017f00 <tcp_input+0xc2c>
 8017aac:	68da      	ldr	r2, [r3, #12]
 8017aae:	4542      	cmp	r2, r8
 8017ab0:	f000 8236 	beq.w	8017f20 <tcp_input+0xc4c>
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	e7f6      	b.n	8017aa6 <tcp_input+0x7d2>
    tcp_receive(pcb);
 8017ab8:	4640      	mov	r0, r8
 8017aba:	f7fe fe49 	bl	8016750 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8017abe:	783b      	ldrb	r3, [r7, #0]
 8017ac0:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017ac4:	4b5a      	ldr	r3, [pc, #360]	; (8017c30 <tcp_input+0x95c>)
 8017ac6:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8017ac8:	f000 811f 	beq.w	8017d0a <tcp_input+0xa36>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017acc:	06dc      	lsls	r4, r3, #27
 8017ace:	d506      	bpl.n	8017ade <tcp_input+0x80a>
 8017ad0:	4b58      	ldr	r3, [pc, #352]	; (8017c34 <tcp_input+0x960>)
 8017ad2:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	f000 8225 	beq.w	8017f28 <tcp_input+0xc54>
        tcp_ack_now(pcb);
 8017ade:	f898 301a 	ldrb.w	r3, [r8, #26]
        pcb->state = CLOSING;
 8017ae2:	2208      	movs	r2, #8
        tcp_ack_now(pcb);
 8017ae4:	f043 0302 	orr.w	r3, r3, #2
        pcb->state = CLOSING;
 8017ae8:	f888 2014 	strb.w	r2, [r8, #20]
        tcp_ack_now(pcb);
 8017aec:	f888 301a 	strb.w	r3, [r8, #26]
 8017af0:	e611      	b.n	8017716 <tcp_input+0x442>
    if (flags & TCP_ACK) {
 8017af2:	06e1      	lsls	r1, r4, #27
 8017af4:	f140 811c 	bpl.w	8017d30 <tcp_input+0xa5c>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8017af8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8017afc:	4a4d      	ldr	r2, [pc, #308]	; (8017c34 <tcp_input+0x960>)
 8017afe:	43db      	mvns	r3, r3
 8017b00:	6810      	ldr	r0, [r2, #0]
 8017b02:	42c3      	cmn	r3, r0
 8017b04:	d405      	bmi.n	8017b12 <tcp_input+0x83e>
 8017b06:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8017b0a:	1ac3      	subs	r3, r0, r3
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	f340 811e 	ble.w	8017d4e <tcp_input+0xa7a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b12:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b14:	4a49      	ldr	r2, [pc, #292]	; (8017c3c <tcp_input+0x968>)
 8017b16:	494a      	ldr	r1, [pc, #296]	; (8017c40 <tcp_input+0x96c>)
 8017b18:	8814      	ldrh	r4, [r2, #0]
 8017b1a:	881a      	ldrh	r2, [r3, #0]
 8017b1c:	6809      	ldr	r1, [r1, #0]
 8017b1e:	9201      	str	r2, [sp, #4]
 8017b20:	885a      	ldrh	r2, [r3, #2]
 8017b22:	4421      	add	r1, r4
 8017b24:	4b47      	ldr	r3, [pc, #284]	; (8017c44 <tcp_input+0x970>)
 8017b26:	9200      	str	r2, [sp, #0]
 8017b28:	1d1a      	adds	r2, r3, #4
 8017b2a:	f001 f95f 	bl	8018dec <tcp_rst>
 8017b2e:	e5f2      	b.n	8017716 <tcp_input+0x442>
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017b30:	f004 0312 	and.w	r3, r4, #18
 8017b34:	2b12      	cmp	r3, #18
 8017b36:	f000 8087 	beq.w	8017c48 <tcp_input+0x974>
    else if (flags & TCP_ACK) {
 8017b3a:	06e0      	lsls	r0, r4, #27
 8017b3c:	f57f adeb 	bpl.w	8017716 <tcp_input+0x442>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b40:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b42:	4a3e      	ldr	r2, [pc, #248]	; (8017c3c <tcp_input+0x968>)
 8017b44:	493e      	ldr	r1, [pc, #248]	; (8017c40 <tcp_input+0x96c>)
 8017b46:	8810      	ldrh	r0, [r2, #0]
 8017b48:	6809      	ldr	r1, [r1, #0]
 8017b4a:	881a      	ldrh	r2, [r3, #0]
 8017b4c:	4401      	add	r1, r0
 8017b4e:	4839      	ldr	r0, [pc, #228]	; (8017c34 <tcp_input+0x960>)
 8017b50:	9201      	str	r2, [sp, #4]
 8017b52:	885a      	ldrh	r2, [r3, #2]
 8017b54:	4b3b      	ldr	r3, [pc, #236]	; (8017c44 <tcp_input+0x970>)
 8017b56:	6800      	ldr	r0, [r0, #0]
 8017b58:	9200      	str	r2, [sp, #0]
 8017b5a:	1d1a      	adds	r2, r3, #4
 8017b5c:	f001 f946 	bl	8018dec <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017b60:	f898 3042 	ldrb.w	r3, [r8, #66]	; 0x42
 8017b64:	2b05      	cmp	r3, #5
 8017b66:	f63f add6 	bhi.w	8017716 <tcp_input+0x442>
        pcb->rtime = 0;
 8017b6a:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 8017b6c:	4640      	mov	r0, r8
        pcb->rtime = 0;
 8017b6e:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8017b72:	f001 f9ab 	bl	8018ecc <tcp_rexmit_rto>
 8017b76:	e5ce      	b.n	8017716 <tcp_input+0x442>
    tcp_receive(pcb);
 8017b78:	4640      	mov	r0, r8
 8017b7a:	f7fe fde9 	bl	8016750 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017b7e:	783b      	ldrb	r3, [r7, #0]
 8017b80:	069e      	lsls	r6, r3, #26
 8017b82:	f57f adc8 	bpl.w	8017716 <tcp_input+0x442>
      tcp_ack_now(pcb);
 8017b86:	f898 301a 	ldrb.w	r3, [r8, #26]
      pcb->state = CLOSE_WAIT;
 8017b8a:	2207      	movs	r2, #7
      tcp_ack_now(pcb);
 8017b8c:	f043 0302 	orr.w	r3, r3, #2
      pcb->state = CLOSE_WAIT;
 8017b90:	f888 2014 	strb.w	r2, [r8, #20]
      tcp_ack_now(pcb);
 8017b94:	f888 301a 	strb.w	r3, [r8, #26]
 8017b98:	e5bd      	b.n	8017716 <tcp_input+0x442>
 8017b9a:	f8d6 c000 	ldr.w	ip, [r6]
 8017b9e:	e5d1      	b.n	8017744 <tcp_input+0x470>
          tcp_send_empty_ack(pcb);
 8017ba0:	4640      	mov	r0, r8
 8017ba2:	f000 ff07 	bl	80189b4 <tcp_send_empty_ack>
 8017ba6:	e4ec      	b.n	8017582 <tcp_input+0x2ae>
      if (ackno == pcb->snd_nxt) {
 8017ba8:	4b22      	ldr	r3, [pc, #136]	; (8017c34 <tcp_input+0x960>)
 8017baa:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	f47f adb0 	bne.w	8017716 <tcp_input+0x442>
      recv_flags |= TF_RESET;
 8017bb6:	783a      	ldrb	r2, [r7, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8017bb8:	f898 301a 	ldrb.w	r3, [r8, #26]
      recv_flags |= TF_RESET;
 8017bbc:	f042 0208 	orr.w	r2, r2, #8
      pcb->flags &= ~TF_ACK_DELAY;
 8017bc0:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 8017bc4:	703a      	strb	r2, [r7, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8017bc6:	f888 301a 	strb.w	r3, [r8, #26]
 8017bca:	e5a4      	b.n	8017716 <tcp_input+0x442>
        TCP_STATS_INC(tcp.cachehit);
 8017bcc:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8017bd6:	e5dd      	b.n	8017794 <tcp_input+0x4c0>
            pbuf_free(recv_data);
 8017bd8:	4610      	mov	r0, r2
 8017bda:	f7fc feb5 	bl	8014948 <pbuf_free>
            tcp_abort(pcb);
 8017bde:	4640      	mov	r0, r8
 8017be0:	f7fe fc20 	bl	8016424 <tcp_abort>
            goto aborted;
 8017be4:	e4d3      	b.n	801758e <tcp_input+0x2ba>
 8017be6:	4640      	mov	r0, r8
 8017be8:	f7ff fb5c 	bl	80172a4 <tcp_input_delayed_close.part.3>
        if (tcp_input_delayed_close(pcb)) {
 8017bec:	2800      	cmp	r0, #0
 8017bee:	f47f acce 	bne.w	801758e <tcp_input+0x2ba>
 8017bf2:	e6a5      	b.n	8017940 <tcp_input+0x66c>
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017bf4:	6833      	ldr	r3, [r6, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017bf6:	4a11      	ldr	r2, [pc, #68]	; (8017c3c <tcp_input+0x968>)
 8017bf8:	4911      	ldr	r1, [pc, #68]	; (8017c40 <tcp_input+0x96c>)
 8017bfa:	8810      	ldrh	r0, [r2, #0]
 8017bfc:	6809      	ldr	r1, [r1, #0]
 8017bfe:	881a      	ldrh	r2, [r3, #0]
 8017c00:	4401      	add	r1, r0
 8017c02:	480c      	ldr	r0, [pc, #48]	; (8017c34 <tcp_input+0x960>)
 8017c04:	9201      	str	r2, [sp, #4]
 8017c06:	885a      	ldrh	r2, [r3, #2]
 8017c08:	4b0e      	ldr	r3, [pc, #56]	; (8017c44 <tcp_input+0x970>)
 8017c0a:	6800      	ldr	r0, [r0, #0]
 8017c0c:	9200      	str	r2, [sp, #0]
 8017c0e:	1d1a      	adds	r2, r3, #4
 8017c10:	f001 f8ec 	bl	8018dec <tcp_rst>
        pbuf_free(p);
 8017c14:	4628      	mov	r0, r5
 8017c16:	f7ff bb79 	b.w	801730c <tcp_input+0x38>
 8017c1a:	bf00      	nop
 8017c1c:	0803abe4 	.word	0x0803abe4
 8017c20:	0803abc8 	.word	0x0803abc8
 8017c24:	08023618 	.word	0x08023618
 8017c28:	20035498 	.word	0x20035498
 8017c2c:	200214e8 	.word	0x200214e8
 8017c30:	200214b0 	.word	0x200214b0
 8017c34:	200214ac 	.word	0x200214ac
 8017c38:	20035494 	.word	0x20035494
 8017c3c:	200214ea 	.word	0x200214ea
 8017c40:	200214d4 	.word	0x200214d4
 8017c44:	20025a84 	.word	0x20025a84
        && (ackno == pcb->lastack + 1)) {
 8017c48:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8017c4c:	4bc3      	ldr	r3, [pc, #780]	; (8017f5c <tcp_input+0xc88>)
 8017c4e:	3201      	adds	r2, #1
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	429a      	cmp	r2, r3
 8017c54:	f47f af71 	bne.w	8017b3a <tcp_input+0x866>
      pcb->rcv_nxt = seqno + 1;
 8017c58:	4bc1      	ldr	r3, [pc, #772]	; (8017f60 <tcp_input+0xc8c>)
      pcb->state = ESTABLISHED;
 8017c5a:	2004      	movs	r0, #4
      pcb->lastack = ackno;
 8017c5c:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8017c60:	681b      	ldr	r3, [r3, #0]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017c62:	eb08 0100 	add.w	r1, r8, r0
      pcb->snd_wnd = tcphdr->wnd;
 8017c66:	6834      	ldr	r4, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8017c68:	1c5a      	adds	r2, r3, #1
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017c6a:	3b01      	subs	r3, #1
      pcb->rcv_nxt = seqno + 1;
 8017c6c:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017c70:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 8017c74:	89e2      	ldrh	r2, [r4, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017c76:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
      pcb->snd_wnd = tcphdr->wnd;
 8017c7a:	f8a8 205c 	strh.w	r2, [r8, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8017c7e:	f8a8 205e 	strh.w	r2, [r8, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8017c82:	f888 0014 	strb.w	r0, [r8, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017c86:	f8b8 0032 	ldrh.w	r0, [r8, #50]	; 0x32
 8017c8a:	f7fe fce1 	bl	8016650 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017c8e:	f241 111c 	movw	r1, #4380	; 0x111c
 8017c92:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017c94:	f8a8 0032 	strh.w	r0, [r8, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017c98:	0080      	lsls	r0, r0, #2
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017c9a:	f8b8 2062 	ldrh.w	r2, [r8, #98]	; 0x62
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017c9e:	428b      	cmp	r3, r1
 8017ca0:	bf38      	it	cc
 8017ca2:	460b      	movcc	r3, r1
 8017ca4:	4283      	cmp	r3, r0
 8017ca6:	bf28      	it	cs
 8017ca8:	4603      	movcs	r3, r0
 8017caa:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017cae:	b932      	cbnz	r2, 8017cbe <tcp_input+0x9ea>
 8017cb0:	4bac      	ldr	r3, [pc, #688]	; (8017f64 <tcp_input+0xc90>)
 8017cb2:	f240 321a 	movw	r2, #794	; 0x31a
 8017cb6:	49ac      	ldr	r1, [pc, #688]	; (8017f68 <tcp_input+0xc94>)
 8017cb8:	48ac      	ldr	r0, [pc, #688]	; (8017f6c <tcp_input+0xc98>)
 8017cba:	f006 fb95 	bl	801e3e8 <iprintf>
      --pcb->snd_queuelen;
 8017cbe:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
      rseg = pcb->unacked;
 8017cc2:	f8d8 406c 	ldr.w	r4, [r8, #108]	; 0x6c
      --pcb->snd_queuelen;
 8017cc6:	3b01      	subs	r3, #1
 8017cc8:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
      if (rseg == NULL) {
 8017ccc:	2c00      	cmp	r4, #0
 8017cce:	d058      	beq.n	8017d82 <tcp_input+0xaae>
        pcb->unacked = rseg->next;
 8017cd0:	6823      	ldr	r3, [r4, #0]
 8017cd2:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
      tcp_seg_free(rseg);
 8017cd6:	4620      	mov	r0, r4
 8017cd8:	f7fd fe40 	bl	801595c <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8017cdc:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d049      	beq.n	8017d78 <tcp_input+0xaa4>
        pcb->rtime = 0;
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
        pcb->nrtx = 0;
 8017cea:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017cee:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8017cf2:	b13b      	cbz	r3, 8017d04 <tcp_input+0xa30>
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	4641      	mov	r1, r8
 8017cf8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017cfc:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8017cfe:	300d      	adds	r0, #13
 8017d00:	f43f ac45 	beq.w	801758e <tcp_input+0x2ba>
      tcp_ack_now(pcb);
 8017d04:	f898 301a 	ldrb.w	r3, [r8, #26]
 8017d08:	e5e1      	b.n	80178ce <tcp_input+0x5fa>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017d0a:	06d8      	lsls	r0, r3, #27
 8017d0c:	f57f ad03 	bpl.w	8017716 <tcp_input+0x442>
 8017d10:	4b92      	ldr	r3, [pc, #584]	; (8017f5c <tcp_input+0xc88>)
 8017d12:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	f47f acfc 	bne.w	8017716 <tcp_input+0x442>
 8017d1e:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	f47f acf7 	bne.w	8017716 <tcp_input+0x442>
      pcb->state = FIN_WAIT_2;
 8017d28:	2306      	movs	r3, #6
 8017d2a:	f888 3014 	strb.w	r3, [r8, #20]
 8017d2e:	e4f2      	b.n	8017716 <tcp_input+0x442>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017d30:	2a00      	cmp	r2, #0
 8017d32:	f43f acf0 	beq.w	8017716 <tcp_input+0x442>
 8017d36:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8017d3a:	4a89      	ldr	r2, [pc, #548]	; (8017f60 <tcp_input+0xc8c>)
 8017d3c:	3b01      	subs	r3, #1
 8017d3e:	6812      	ldr	r2, [r2, #0]
 8017d40:	4293      	cmp	r3, r2
 8017d42:	f47f ace8 	bne.w	8017716 <tcp_input+0x442>
      tcp_rexmit(pcb);
 8017d46:	4640      	mov	r0, r8
 8017d48:	f001 f8e0 	bl	8018f0c <tcp_rexmit>
 8017d4c:	e4e3      	b.n	8017716 <tcp_input+0x442>
        pcb->state = ESTABLISHED;
 8017d4e:	2204      	movs	r2, #4
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8017d50:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
        pcb->state = ESTABLISHED;
 8017d54:	f888 2014 	strb.w	r2, [r8, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	f43f af40 	beq.w	8017bde <tcp_input+0x90a>
 8017d5e:	699b      	ldr	r3, [r3, #24]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d038      	beq.n	8017dd6 <tcp_input+0xb02>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017d64:	2200      	movs	r2, #0
 8017d66:	4641      	mov	r1, r8
 8017d68:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017d6c:	4798      	blx	r3
        if (err != ERR_OK) {
 8017d6e:	b1b0      	cbz	r0, 8017d9e <tcp_input+0xaca>
          if (err != ERR_ABRT) {
 8017d70:	300d      	adds	r0, #13
 8017d72:	f43f ac0c 	beq.w	801758e <tcp_input+0x2ba>
 8017d76:	e732      	b.n	8017bde <tcp_input+0x90a>
        pcb->rtime = -1;
 8017d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d7c:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
 8017d80:	e7b5      	b.n	8017cee <tcp_input+0xa1a>
        rseg = pcb->unsent;
 8017d82:	f8d8 4068 	ldr.w	r4, [r8, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8017d86:	b934      	cbnz	r4, 8017d96 <tcp_input+0xac2>
 8017d88:	4b76      	ldr	r3, [pc, #472]	; (8017f64 <tcp_input+0xc90>)
 8017d8a:	f240 3222 	movw	r2, #802	; 0x322
 8017d8e:	4978      	ldr	r1, [pc, #480]	; (8017f70 <tcp_input+0xc9c>)
 8017d90:	4876      	ldr	r0, [pc, #472]	; (8017f6c <tcp_input+0xc98>)
 8017d92:	f006 fb29 	bl	801e3e8 <iprintf>
        pcb->unsent = rseg->next;
 8017d96:	6823      	ldr	r3, [r4, #0]
 8017d98:	f8c8 3068 	str.w	r3, [r8, #104]	; 0x68
 8017d9c:	e79b      	b.n	8017cd6 <tcp_input+0xa02>
        tcp_receive(pcb);
 8017d9e:	4640      	mov	r0, r8
 8017da0:	f7fe fcd6 	bl	8016750 <tcp_receive>
        if (recv_acked != 0) {
 8017da4:	f8bb 3000 	ldrh.w	r3, [fp]
 8017da8:	b113      	cbz	r3, 8017db0 <tcp_input+0xadc>
          recv_acked--;
 8017daa:	3b01      	subs	r3, #1
 8017dac:	f8ab 3000 	strh.w	r3, [fp]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017db0:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
 8017db4:	f241 101c 	movw	r0, #4380	; 0x111c
        if (recv_flags & TF_GOT_FIN) {
 8017db8:	7839      	ldrb	r1, [r7, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017dba:	0053      	lsls	r3, r2, #1
 8017dbc:	0092      	lsls	r2, r2, #2
 8017dbe:	4283      	cmp	r3, r0
 8017dc0:	bf38      	it	cc
 8017dc2:	4603      	movcc	r3, r0
 8017dc4:	4293      	cmp	r3, r2
 8017dc6:	bf28      	it	cs
 8017dc8:	4613      	movcs	r3, r2
 8017dca:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 8017dce:	068b      	lsls	r3, r1, #26
 8017dd0:	f57f aca1 	bpl.w	8017716 <tcp_input+0x442>
 8017dd4:	e6d7      	b.n	8017b86 <tcp_input+0x8b2>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8017dd6:	4b63      	ldr	r3, [pc, #396]	; (8017f64 <tcp_input+0xc90>)
 8017dd8:	f240 3251 	movw	r2, #849	; 0x351
 8017ddc:	4965      	ldr	r1, [pc, #404]	; (8017f74 <tcp_input+0xca0>)
 8017dde:	4863      	ldr	r0, [pc, #396]	; (8017f6c <tcp_input+0xc98>)
 8017de0:	f006 fb02 	bl	801e3e8 <iprintf>
        if (pcb->listener == NULL) {
 8017de4:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	f43f aef8 	beq.w	8017bde <tcp_input+0x90a>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017dee:	699b      	ldr	r3, [r3, #24]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d1b7      	bne.n	8017d64 <tcp_input+0xa90>
 8017df4:	e6f3      	b.n	8017bde <tcp_input+0x90a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017df6:	4623      	mov	r3, r4
 8017df8:	4620      	mov	r0, r4
 8017dfa:	4641      	mov	r1, r8
 8017dfc:	f7fe f9da 	bl	80161b4 <tcp_recv_null>
 8017e00:	e5bc      	b.n	801797c <tcp_input+0x6a8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017e02:	4b58      	ldr	r3, [pc, #352]	; (8017f64 <tcp_input+0xc90>)
 8017e04:	22f4      	movs	r2, #244	; 0xf4
 8017e06:	495c      	ldr	r1, [pc, #368]	; (8017f78 <tcp_input+0xca4>)
 8017e08:	4858      	ldr	r0, [pc, #352]	; (8017f6c <tcp_input+0xc98>)
 8017e0a:	f006 faed 	bl	801e3e8 <iprintf>
 8017e0e:	f7ff bb80 	b.w	8017512 <tcp_input+0x23e>
        TCP_STATS_INC(tcp.cachehit);
 8017e12:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8017e16:	3201      	adds	r2, #1
 8017e18:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
 8017e1c:	f7ff bb76 	b.w	801750c <tcp_input+0x238>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017e20:	4b50      	ldr	r3, [pc, #320]	; (8017f64 <tcp_input+0xc90>)
 8017e22:	22ec      	movs	r2, #236	; 0xec
 8017e24:	4955      	ldr	r1, [pc, #340]	; (8017f7c <tcp_input+0xca8>)
 8017e26:	4851      	ldr	r0, [pc, #324]	; (8017f6c <tcp_input+0xc98>)
 8017e28:	f006 fade 	bl	801e3e8 <iprintf>
 8017e2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e30:	f7ff bb5f 	b.w	80174f2 <tcp_input+0x21e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017e34:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 8017e38:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017e3c:	d002      	beq.n	8017e44 <tcp_input+0xb70>
              pcb->rcv_wnd++;
 8017e3e:	3301      	adds	r3, #1
 8017e40:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8017e44:	f8d8 4080 	ldr.w	r4, [r8, #128]	; 0x80
 8017e48:	2c00      	cmp	r4, #0
 8017e4a:	f43f adac 	beq.w	80179a6 <tcp_input+0x6d2>
 8017e4e:	2300      	movs	r3, #0
 8017e50:	4641      	mov	r1, r8
 8017e52:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017e56:	461a      	mov	r2, r3
 8017e58:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 8017e5a:	300d      	adds	r0, #13
 8017e5c:	f47f ada3 	bne.w	80179a6 <tcp_input+0x6d2>
aborted:
 8017e60:	f7ff bb95 	b.w	801758e <tcp_input+0x2ba>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017e64:	2900      	cmp	r1, #0
 8017e66:	f47f aea6 	bne.w	8017bb6 <tcp_input+0x8e2>
 8017e6a:	4b3e      	ldr	r3, [pc, #248]	; (8017f64 <tcp_input+0xc90>)
 8017e6c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8017e70:	4943      	ldr	r1, [pc, #268]	; (8017f80 <tcp_input+0xcac>)
 8017e72:	483e      	ldr	r0, [pc, #248]	; (8017f6c <tcp_input+0xc98>)
 8017e74:	f006 fab8 	bl	801e3e8 <iprintf>
 8017e78:	e69d      	b.n	8017bb6 <tcp_input+0x8e2>
  } else if (flags & TCP_FIN) {
 8017e7a:	07d9      	lsls	r1, r3, #31
 8017e7c:	f57f ac23 	bpl.w	80176c6 <tcp_input+0x3f2>
    pcb->tmr = tcp_ticks;
 8017e80:	4b40      	ldr	r3, [pc, #256]	; (8017f84 <tcp_input+0xcb0>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	f8c8 3020 	str.w	r3, [r8, #32]
 8017e88:	e41d      	b.n	80176c6 <tcp_input+0x3f2>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e8a:	4b3f      	ldr	r3, [pc, #252]	; (8017f88 <tcp_input+0xcb4>)
 8017e8c:	4421      	add	r1, r4
 8017e8e:	4833      	ldr	r0, [pc, #204]	; (8017f5c <tcp_input+0xc88>)
 8017e90:	e9cd c200 	strd	ip, r2, [sp]
 8017e94:	1d1a      	adds	r2, r3, #4
 8017e96:	6800      	ldr	r0, [r0, #0]
 8017e98:	f000 ffa8 	bl	8018dec <tcp_rst>
        pbuf_free(p);
 8017e9c:	4628      	mov	r0, r5
 8017e9e:	f7ff ba35 	b.w	801730c <tcp_input+0x38>
    pcb->flags |= TF_ACK_NOW;
 8017ea2:	f898 301a 	ldrb.w	r3, [r8, #26]
    tcp_output(pcb);
 8017ea6:	4640      	mov	r0, r8
    pcb->flags |= TF_ACK_NOW;
 8017ea8:	f043 0302 	orr.w	r3, r3, #2
 8017eac:	f888 301a 	strb.w	r3, [r8, #26]
    tcp_output(pcb);
 8017eb0:	f000 fdce 	bl	8018a50 <tcp_output>
        pbuf_free(p);
 8017eb4:	4628      	mov	r0, r5
 8017eb6:	f7ff ba29 	b.w	801730c <tcp_input+0x38>
      tcp_abandon(npcb, 0);
 8017eba:	4648      	mov	r0, r9
 8017ebc:	2100      	movs	r1, #0
 8017ebe:	f7fe fa1d 	bl	80162fc <tcp_abandon>
        pbuf_free(p);
 8017ec2:	4628      	mov	r0, r5
 8017ec4:	f7ff ba22 	b.w	801730c <tcp_input+0x38>
 8017ec8:	f109 0032 	add.w	r0, r9, #50	; 0x32
 8017ecc:	f7ff f9ae 	bl	801722c <tcp_parseopt.isra.1.part.2>
 8017ed0:	e4af      	b.n	8017832 <tcp_input+0x55e>
      TCP_STATS_INC(tcp.memerr);
 8017ed2:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017ed6:	f8d8 6018 	ldr.w	r6, [r8, #24]
      TCP_STATS_INC(tcp.memerr);
 8017eda:	3301      	adds	r3, #1
 8017edc:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017ee0:	2e00      	cmp	r6, #0
 8017ee2:	f43f abf3 	beq.w	80176cc <tcp_input+0x3f8>
 8017ee6:	4601      	mov	r1, r0
 8017ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8017eec:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017ef0:	47b0      	blx	r6
        pbuf_free(p);
 8017ef2:	4628      	mov	r0, r5
 8017ef4:	f7ff ba0a 	b.w	801730c <tcp_input+0x38>
      TCP_RMV_ACTIVE(pcb);
 8017ef8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017efc:	4a23      	ldr	r2, [pc, #140]	; (8017f8c <tcp_input+0xcb8>)
 8017efe:	6013      	str	r3, [r2, #0]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017f00:	4b23      	ldr	r3, [pc, #140]	; (8017f90 <tcp_input+0xcbc>)
      pcb->state = TIME_WAIT;
 8017f02:	200a      	movs	r0, #10
      TCP_RMV_ACTIVE(pcb);
 8017f04:	2101      	movs	r1, #1
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017f06:	681a      	ldr	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8017f08:	f888 0014 	strb.w	r0, [r8, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017f0c:	f8c8 200c 	str.w	r2, [r8, #12]
      TCP_RMV_ACTIVE(pcb);
 8017f10:	4a20      	ldr	r2, [pc, #128]	; (8017f94 <tcp_input+0xcc0>)
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017f12:	f8c3 8000 	str.w	r8, [r3]
      TCP_RMV_ACTIVE(pcb);
 8017f16:	7011      	strb	r1, [r2, #0]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017f18:	f001 f96c 	bl	80191f4 <tcp_timer_needed>
 8017f1c:	f7ff bbfb 	b.w	8017716 <tcp_input+0x442>
      TCP_RMV_ACTIVE(pcb);
 8017f20:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8017f24:	60da      	str	r2, [r3, #12]
 8017f26:	e7eb      	b.n	8017f00 <tcp_input+0xc2c>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017f28:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	f47f add6 	bne.w	8017ade <tcp_input+0x80a>
        tcp_ack_now(pcb);
 8017f32:	f898 301a 	ldrb.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 8017f36:	4640      	mov	r0, r8
        tcp_ack_now(pcb);
 8017f38:	f043 0302 	orr.w	r3, r3, #2
 8017f3c:	f888 301a 	strb.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 8017f40:	f7fd fdba 	bl	8015ab8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017f44:	4b11      	ldr	r3, [pc, #68]	; (8017f8c <tcp_input+0xcb8>)
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	4543      	cmp	r3, r8
 8017f4a:	d0d5      	beq.n	8017ef8 <tcp_input+0xc24>
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d0d7      	beq.n	8017f00 <tcp_input+0xc2c>
 8017f50:	68da      	ldr	r2, [r3, #12]
 8017f52:	4542      	cmp	r2, r8
 8017f54:	d0e4      	beq.n	8017f20 <tcp_input+0xc4c>
 8017f56:	4613      	mov	r3, r2
 8017f58:	e7f8      	b.n	8017f4c <tcp_input+0xc78>
 8017f5a:	bf00      	nop
 8017f5c:	200214ac 	.word	0x200214ac
 8017f60:	200214d4 	.word	0x200214d4
 8017f64:	0803abe4 	.word	0x0803abe4
 8017f68:	0803ab7c 	.word	0x0803ab7c
 8017f6c:	08023618 	.word	0x08023618
 8017f70:	0803ab94 	.word	0x0803ab94
 8017f74:	0803aba8 	.word	0x0803aba8
 8017f78:	0803ab00 	.word	0x0803ab00
 8017f7c:	0803aad4 	.word	0x0803aad4
 8017f80:	0803ab5c 	.word	0x0803ab5c
 8017f84:	20035498 	.word	0x20035498
 8017f88:	20025a84 	.word	0x20025a84
 8017f8c:	20035494 	.word	0x20035494
 8017f90:	200354a4 	.word	0x200354a4
 8017f94:	20035490 	.word	0x20035490

08017f98 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8017f98:	4a02      	ldr	r2, [pc, #8]	; (8017fa4 <tcp_trigger_input_pcb_close+0xc>)
 8017f9a:	7813      	ldrb	r3, [r2, #0]
 8017f9c:	f043 0310 	orr.w	r3, r3, #16
 8017fa0:	7013      	strb	r3, [r2, #0]
}
 8017fa2:	4770      	bx	lr
 8017fa4:	200214d0 	.word	0x200214d0

08017fa8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017fa8:	b570      	push	{r4, r5, r6, lr}
 8017faa:	460d      	mov	r5, r1
 8017fac:	461e      	mov	r6, r3
 8017fae:	f89d 1018 	ldrb.w	r1, [sp, #24]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017fb2:	4295      	cmp	r5, r2
{
 8017fb4:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if (length < max_length) {
 8017fb8:	d20e      	bcs.n	8017fd8 <tcp_pbuf_prealloc+0x30>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017fba:	079c      	lsls	r4, r3, #30
 8017fbc:	d508      	bpl.n	8017fd0 <tcp_pbuf_prealloc+0x28>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017fbe:	f205 231b 	addw	r3, r5, #539	; 0x21b
 8017fc2:	f023 0103 	bic.w	r1, r3, #3
 8017fc6:	428a      	cmp	r2, r1
 8017fc8:	bf28      	it	cs
 8017fca:	460a      	movcs	r2, r1
 8017fcc:	b291      	uxth	r1, r2
 8017fce:	e004      	b.n	8017fda <tcp_pbuf_prealloc+0x32>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017fd0:	9b04      	ldr	r3, [sp, #16]
 8017fd2:	7e9b      	ldrb	r3, [r3, #26]
 8017fd4:	065b      	lsls	r3, r3, #25
 8017fd6:	d515      	bpl.n	8018004 <tcp_pbuf_prealloc+0x5c>
 8017fd8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017fda:	2200      	movs	r2, #0
 8017fdc:	f7fc fd22 	bl	8014a24 <pbuf_alloc>
  if (p == NULL) {
 8017fe0:	4604      	mov	r4, r0
 8017fe2:	b168      	cbz	r0, 8018000 <tcp_pbuf_prealloc+0x58>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017fe4:	6803      	ldr	r3, [r0, #0]
 8017fe6:	b133      	cbz	r3, 8017ff6 <tcp_pbuf_prealloc+0x4e>
 8017fe8:	4b0c      	ldr	r3, [pc, #48]	; (801801c <tcp_pbuf_prealloc+0x74>)
 8017fea:	f44f 7288 	mov.w	r2, #272	; 0x110
 8017fee:	490c      	ldr	r1, [pc, #48]	; (8018020 <tcp_pbuf_prealloc+0x78>)
 8017ff0:	480c      	ldr	r0, [pc, #48]	; (8018024 <tcp_pbuf_prealloc+0x7c>)
 8017ff2:	f006 f9f9 	bl	801e3e8 <iprintf>
  *oversize = p->len - length;
 8017ff6:	8963      	ldrh	r3, [r4, #10]
 8017ff8:	1b5b      	subs	r3, r3, r5
 8017ffa:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017ffc:	8125      	strh	r5, [r4, #8]
 8017ffe:	8165      	strh	r5, [r4, #10]
  return p;
}
 8018000:	4620      	mov	r0, r4
 8018002:	bd70      	pop	{r4, r5, r6, pc}
        (!(pcb->flags & TF_NODELAY) &&
 8018004:	2900      	cmp	r1, #0
 8018006:	d0da      	beq.n	8017fbe <tcp_pbuf_prealloc+0x16>
         (!first_seg ||
 8018008:	9b04      	ldr	r3, [sp, #16]
 801800a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801800c:	2b00      	cmp	r3, #0
 801800e:	d1d6      	bne.n	8017fbe <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 8018010:	9b04      	ldr	r3, [sp, #16]
 8018012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018014:	2b00      	cmp	r3, #0
 8018016:	d1d2      	bne.n	8017fbe <tcp_pbuf_prealloc+0x16>
 8018018:	e7de      	b.n	8017fd8 <tcp_pbuf_prealloc+0x30>
 801801a:	bf00      	nop
 801801c:	0803af04 	.word	0x0803af04
 8018020:	0803af38 	.word	0x0803af38
 8018024:	08023618 	.word	0x08023618

08018028 <tcp_create_segment.isra.0>:
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
 8018028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801802c:	4681      	mov	r9, r0
 801802e:	4688      	mov	r8, r1
 8018030:	4617      	mov	r7, r2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018032:	4934      	ldr	r1, [pc, #208]	; (8018104 <tcp_create_segment.isra.0+0xdc>)
 8018034:	22b2      	movs	r2, #178	; 0xb2
 8018036:	2004      	movs	r0, #4
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
 8018038:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
 801803c:	461e      	mov	r6, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801803e:	f7fc fa67 	bl	8014510 <memp_malloc_fn>
 8018042:	4604      	mov	r4, r0
 8018044:	2800      	cmp	r0, #0
 8018046:	d059      	beq.n	80180fc <tcp_create_segment.isra.0+0xd4>
 8018048:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
  seg->flags = optflags;
 801804c:	f880 b00c 	strb.w	fp, [r0, #12]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018050:	893b      	ldrh	r3, [r7, #8]
  seg->next = NULL;
 8018052:	2200      	movs	r2, #0
 8018054:	fa5f f58a 	uxtb.w	r5, sl
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018058:	fa1f fa8a 	uxth.w	sl, sl
 801805c:	4553      	cmp	r3, sl
  seg->next = NULL;
 801805e:	e9c0 2700 	strd	r2, r7, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018062:	d338      	bcc.n	80180d6 <tcp_create_segment.isra.0+0xae>
  seg->len = p->tot_len - optlen;
 8018064:	eba3 030a 	sub.w	r3, r3, sl
  seg->oversize_left = 0;
 8018068:	f04f 0a00 	mov.w	sl, #0
  if (pbuf_header(p, TCP_HLEN)) {
 801806c:	4638      	mov	r0, r7
 801806e:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8018070:	8123      	strh	r3, [r4, #8]
  seg->oversize_left = 0;
 8018072:	f8a4 a00a 	strh.w	sl, [r4, #10]
  if (pbuf_header(p, TCP_HLEN)) {
 8018076:	f7fc fc5f 	bl	8014938 <pbuf_header>
 801807a:	4607      	mov	r7, r0
 801807c:	bb98      	cbnz	r0, 80180e6 <tcp_create_segment.isra.0+0xbe>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801807e:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8018080:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018082:	f8b9 0000 	ldrh.w	r0, [r9]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018086:	f8d3 9004 	ldr.w	r9, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801808a:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801808e:	f8c4 9010 	str.w	r9, [r4, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018092:	f7fb f8af 	bl	80131f4 <lwip_htons>
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018096:	f8d4 a010 	ldr.w	sl, [r4, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801809a:	f8a9 0000 	strh.w	r0, [r9]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801809e:	f8b8 0000 	ldrh.w	r0, [r8]
 80180a2:	f7fb f8a7 	bl	80131f4 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80180a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80180aa:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80180ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80180b0:	f7fb f8a4 	bl	80131fc <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80180b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80180b8:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80180bc:	f405 4070 	and.w	r0, r5, #61440	; 0xf000
 80180c0:	4330      	orrs	r0, r6
 80180c2:	f7fb f897 	bl	80131f4 <lwip_htons>
  seg->tcphdr->urgp = 0;
 80180c6:	6923      	ldr	r3, [r4, #16]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80180c8:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 80180cc:	749f      	strb	r7, [r3, #18]
 80180ce:	74df      	strb	r7, [r3, #19]
}
 80180d0:	4620      	mov	r0, r4
 80180d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80180d6:	4b0b      	ldr	r3, [pc, #44]	; (8018104 <tcp_create_segment.isra.0+0xdc>)
 80180d8:	22ba      	movs	r2, #186	; 0xba
 80180da:	490b      	ldr	r1, [pc, #44]	; (8018108 <tcp_create_segment.isra.0+0xe0>)
 80180dc:	480b      	ldr	r0, [pc, #44]	; (801810c <tcp_create_segment.isra.0+0xe4>)
 80180de:	f006 f983 	bl	801e3e8 <iprintf>
 80180e2:	893b      	ldrh	r3, [r7, #8]
 80180e4:	e7be      	b.n	8018064 <tcp_create_segment.isra.0+0x3c>
    TCP_STATS_INC(tcp.err);
 80180e6:	4a0a      	ldr	r2, [pc, #40]	; (8018110 <tcp_create_segment.isra.0+0xe8>)
    tcp_seg_free(seg);
 80180e8:	4620      	mov	r0, r4
    return NULL;
 80180ea:	4654      	mov	r4, sl
    TCP_STATS_INC(tcp.err);
 80180ec:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 80180f0:	3301      	adds	r3, #1
 80180f2:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 80180f6:	f7fd fc31 	bl	801595c <tcp_seg_free>
 80180fa:	e7e9      	b.n	80180d0 <tcp_create_segment.isra.0+0xa8>
    pbuf_free(p);
 80180fc:	4638      	mov	r0, r7
 80180fe:	f7fc fc23 	bl	8014948 <pbuf_free>
 8018102:	e7e5      	b.n	80180d0 <tcp_create_segment.isra.0+0xa8>
 8018104:	0803af04 	.word	0x0803af04
 8018108:	0803ad7c 	.word	0x0803ad7c
 801810c:	08023618 	.word	0x08023618
 8018110:	20035384 	.word	0x20035384

08018114 <tcp_output_alloc_header.constprop.2>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018114:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8018116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018118:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801811a:	4605      	mov	r5, r0
 801811c:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801811e:	2001      	movs	r0, #1
 8018120:	2200      	movs	r2, #0
 8018122:	f7fc fc7f 	bl	8014a24 <pbuf_alloc>
  if (p != NULL) {
 8018126:	4606      	mov	r6, r0
 8018128:	b310      	cbz	r0, 8018170 <tcp_output_alloc_header.constprop.2+0x5c>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801812a:	8943      	ldrh	r3, [r0, #10]
 801812c:	2b13      	cmp	r3, #19
 801812e:	d921      	bls.n	8018174 <tcp_output_alloc_header.constprop.2+0x60>
    tcphdr = (struct tcp_hdr *)p->payload;
 8018130:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8018132:	8ae8      	ldrh	r0, [r5, #22]
 8018134:	f7fb f85e 	bl	80131f4 <lwip_htons>
 8018138:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801813a:	8b28      	ldrh	r0, [r5, #24]
 801813c:	f7fb f85a 	bl	80131f4 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8018140:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8018142:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018144:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8018146:	f7fb f859 	bl	80131fc <lwip_htonl>
 801814a:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801814c:	f245 0010 	movw	r0, #20496	; 0x5010
 8018150:	f7fb f850 	bl	80131f4 <lwip_htons>
 8018154:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018156:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8018158:	f7fb f84c 	bl	80131f4 <lwip_htons>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801815c:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
 801815e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    tcphdr->chksum = 0;
 8018160:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018162:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018164:	440a      	add	r2, r1
    tcphdr->chksum = 0;
 8018166:	7423      	strb	r3, [r4, #16]
 8018168:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801816a:	74a3      	strb	r3, [r4, #18]
 801816c:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801816e:	62ea      	str	r2, [r5, #44]	; 0x2c
}
 8018170:	4630      	mov	r0, r6
 8018172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018174:	4b03      	ldr	r3, [pc, #12]	; (8018184 <tcp_output_alloc_header.constprop.2+0x70>)
 8018176:	2273      	movs	r2, #115	; 0x73
 8018178:	4903      	ldr	r1, [pc, #12]	; (8018188 <tcp_output_alloc_header.constprop.2+0x74>)
 801817a:	4804      	ldr	r0, [pc, #16]	; (801818c <tcp_output_alloc_header.constprop.2+0x78>)
 801817c:	f006 f934 	bl	801e3e8 <iprintf>
 8018180:	e7d6      	b.n	8018130 <tcp_output_alloc_header.constprop.2+0x1c>
 8018182:	bf00      	nop
 8018184:	0803af04 	.word	0x0803af04
 8018188:	0803aed4 	.word	0x0803aed4
 801818c:	08023618 	.word	0x08023618

08018190 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018194:	b091      	sub	sp, #68	; 0x44
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8018196:	f8b0 a032 	ldrh.w	sl, [r0, #50]	; 0x32
{
 801819a:	4691      	mov	r9, r2
  u16_t oversize = 0;
 801819c:	2200      	movs	r2, #0
{
 801819e:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80181a0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
  u16_t oversize = 0;
 80181a4:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80181a8:	085b      	lsrs	r3, r3, #1
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80181aa:	9106      	str	r1, [sp, #24]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80181ac:	4553      	cmp	r3, sl
 80181ae:	bf28      	it	cs
 80181b0:	4653      	movcs	r3, sl
  mss_local = mss_local ? mss_local : pcb->mss;
 80181b2:	4293      	cmp	r3, r2
 80181b4:	bf18      	it	ne
 80181b6:	469a      	movne	sl, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80181b8:	2900      	cmp	r1, #0
 80181ba:	f000 82e9 	beq.w	8018790 <tcp_write+0x600>
  if ((pcb->state != ESTABLISHED) &&
 80181be:	7d03      	ldrb	r3, [r0, #20]
 80181c0:	4607      	mov	r7, r0
      (pcb->state != CLOSE_WAIT) &&
 80181c2:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 80181c4:	2a02      	cmp	r2, #2
 80181c6:	d902      	bls.n	80181ce <tcp_write+0x3e>
 80181c8:	2b07      	cmp	r3, #7
 80181ca:	f040 8275 	bne.w	80186b8 <tcp_write+0x528>
  } else if (len == 0) {
 80181ce:	f1b9 0f00 	cmp.w	r9, #0
 80181d2:	f000 8098 	beq.w	8018306 <tcp_write+0x176>
  if (len > pcb->snd_buf) {
 80181d6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80181da:	454b      	cmp	r3, r9
 80181dc:	f0c0 82c4 	bcc.w	8018768 <tcp_write+0x5d8>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80181e0:	f8b7 8062 	ldrh.w	r8, [r7, #98]	; 0x62
 80181e4:	f1b8 0f08 	cmp.w	r8, #8
 80181e8:	f200 82c5 	bhi.w	8018776 <tcp_write+0x5e6>
 80181ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 80181ee:	f1b8 0f00 	cmp.w	r8, #0
 80181f2:	d07e      	beq.n	80182f2 <tcp_write+0x162>
 80181f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80181f6:	9208      	str	r2, [sp, #32]
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	f040 8088 	bne.w	801830e <tcp_write+0x17e>
 80181fe:	2a00      	cmp	r2, #0
 8018200:	f000 8255 	beq.w	80186ae <tcp_write+0x51e>
 8018204:	9b08      	ldr	r3, [sp, #32]
 8018206:	e000      	b.n	801820a <tcp_write+0x7a>
 8018208:	4633      	mov	r3, r6
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801820a:	681e      	ldr	r6, [r3, #0]
 801820c:	2e00      	cmp	r6, #0
 801820e:	d1fb      	bne.n	8018208 <tcp_write+0x78>
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8018210:	7b1d      	ldrb	r5, [r3, #12]
 8018212:	9308      	str	r3, [sp, #32]
 8018214:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018216:	891b      	ldrh	r3, [r3, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8018218:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801821c:	195a      	adds	r2, r3, r5
 801821e:	4592      	cmp	sl, r2
 8018220:	f2c0 816a 	blt.w	80184f8 <tcp_write+0x368>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018224:	ebaa 0403 	sub.w	r4, sl, r3
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8018228:	9b08      	ldr	r3, [sp, #32]
 801822a:	895a      	ldrh	r2, [r3, #10]
    space = mss_local - (last_unsent->len + unsent_optlen);
 801822c:	1b64      	subs	r4, r4, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 801822e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018232:	920a      	str	r2, [sp, #40]	; 0x28
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018234:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8018236:	4293      	cmp	r3, r2
 8018238:	f040 80f2 	bne.w	8018420 <tcp_write+0x290>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801823c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801823e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 8018242:	b303      	cbz	r3, 8018286 <tcp_write+0xf6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018244:	429c      	cmp	r4, r3
 8018246:	f0c0 81ef 	bcc.w	8018628 <tcp_write+0x498>
      seg = last_unsent;
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801824a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801824c:	454b      	cmp	r3, r9
 801824e:	461a      	mov	r2, r3
 8018250:	bf28      	it	cs
 8018252:	464a      	movcs	r2, r9
 8018254:	42a2      	cmp	r2, r4
 8018256:	4610      	mov	r0, r2
 8018258:	bfa8      	it	ge
 801825a:	4620      	movge	r0, r4
      pos += oversize_used;
      oversize -= oversize_used;
 801825c:	1a1b      	subs	r3, r3, r0
      space -= oversize_used;
 801825e:	1a24      	subs	r4, r4, r0
      oversize -= oversize_used;
 8018260:	b29b      	uxth	r3, r3
      space -= oversize_used;
 8018262:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 8018264:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018268:	2b00      	cmp	r3, #0
 801826a:	f000 81da 	beq.w	8018622 <tcp_write+0x492>
 801826e:	4581      	cmp	r9, r0
 8018270:	f000 81d7 	beq.w	8018622 <tcp_write+0x492>
 8018274:	900a      	str	r0, [sp, #40]	; 0x28
 8018276:	f240 12e1 	movw	r2, #481	; 0x1e1
 801827a:	4ba4      	ldr	r3, [pc, #656]	; (801850c <tcp_write+0x37c>)
 801827c:	49a4      	ldr	r1, [pc, #656]	; (8018510 <tcp_write+0x380>)
 801827e:	48a5      	ldr	r0, [pc, #660]	; (8018514 <tcp_write+0x384>)
 8018280:	9e08      	ldr	r6, [sp, #32]
 8018282:	f006 f8b1 	bl	801e3e8 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018288:	4599      	cmp	r9, r3
 801828a:	f240 80da 	bls.w	8018442 <tcp_write+0x2b2>
 801828e:	2c00      	cmp	r4, #0
 8018290:	f000 80d7 	beq.w	8018442 <tcp_write+0x2b2>
 8018294:	9a08      	ldr	r2, [sp, #32]
 8018296:	8912      	ldrh	r2, [r2, #8]
 8018298:	920c      	str	r2, [sp, #48]	; 0x30
 801829a:	2a00      	cmp	r2, #0
 801829c:	f000 81b2 	beq.w	8018604 <tcp_write+0x474>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80182a0:	eba9 0503 	sub.w	r5, r9, r3
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80182a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 80182a6:	42a5      	cmp	r5, r4
 80182a8:	bfa8      	it	ge
 80182aa:	4625      	movge	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80182ac:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 80182ae:	b2ae      	uxth	r6, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80182b0:	f100 8228 	bmi.w	8018704 <tcp_write+0x574>
        queuelen += pbuf_clen(concat_p);
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80182b4:	9b08      	ldr	r3, [sp, #32]
 80182b6:	685b      	ldr	r3, [r3, #4]
 80182b8:	e000      	b.n	80182bc <tcp_write+0x12c>
 80182ba:	4613      	mov	r3, r2
 80182bc:	681a      	ldr	r2, [r3, #0]
 80182be:	2a00      	cmp	r2, #0
 80182c0:	d1fb      	bne.n	80182ba <tcp_write+0x12a>
 80182c2:	920b      	str	r2, [sp, #44]	; 0x2c
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80182c4:	7b1a      	ldrb	r2, [r3, #12]
 80182c6:	2a01      	cmp	r2, #1
 80182c8:	f040 80c1 	bne.w	801844e <tcp_write+0x2be>
 80182cc:	895a      	ldrh	r2, [r3, #10]
 80182ce:	685b      	ldr	r3, [r3, #4]
 80182d0:	4413      	add	r3, r2
 80182d2:	9a06      	ldr	r2, [sp, #24]
 80182d4:	429a      	cmp	r2, r3
 80182d6:	f040 80ba 	bne.w	801844e <tcp_write+0x2be>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80182da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182dc:	2b00      	cmp	r3, #0
 80182de:	f040 826b 	bne.w	80187b8 <tcp_write+0x628>
  u16_t oversize_add = 0;
 80182e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          extendlen = seglen;
 80182e4:	960d      	str	r6, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 80182e6:	930c      	str	r3, [sp, #48]	; 0x30
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80182e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182ea:	18f4      	adds	r4, r6, r3
 80182ec:	9e08      	ldr	r6, [sp, #32]
 80182ee:	b2a4      	uxth	r4, r4
 80182f0:	e01c      	b.n	801832c <tcp_write+0x19c>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80182f2:	b90b      	cbnz	r3, 80182f8 <tcp_write+0x168>
 80182f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80182f6:	b173      	cbz	r3, 8018316 <tcp_write+0x186>
 80182f8:	4b84      	ldr	r3, [pc, #528]	; (801850c <tcp_write+0x37c>)
 80182fa:	f240 1259 	movw	r2, #345	; 0x159
 80182fe:	4986      	ldr	r1, [pc, #536]	; (8018518 <tcp_write+0x388>)
 8018300:	4884      	ldr	r0, [pc, #528]	; (8018514 <tcp_write+0x384>)
 8018302:	f006 f871 	bl	801e3e8 <iprintf>
 8018306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018308:	f8b7 8062 	ldrh.w	r8, [r7, #98]	; 0x62
 801830c:	9308      	str	r3, [sp, #32]
  if (pcb->unsent != NULL) {
 801830e:	9b08      	ldr	r3, [sp, #32]
 8018310:	2b00      	cmp	r3, #0
 8018312:	f47f af77 	bne.w	8018204 <tcp_write+0x74>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018316:	f8b7 4064 	ldrh.w	r4, [r7, #100]	; 0x64
 801831a:	2c00      	cmp	r4, #0
 801831c:	f040 818f 	bne.w	801863e <tcp_write+0x4ae>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018320:	4626      	mov	r6, r4
  u16_t oversize_used = 0;
 8018322:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018324:	9408      	str	r4, [sp, #32]
  struct pbuf *concat_p = NULL;
 8018326:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_add = 0;
 8018328:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801832c:	2300      	movs	r3, #0
 801832e:	45a1      	cmp	r9, r4
 8018330:	9304      	str	r3, [sp, #16]
 8018332:	f240 80ff 	bls.w	8018534 <tcp_write+0x3a4>
 8018336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018338:	469b      	mov	fp, r3
 801833a:	f002 0201 	and.w	r2, r2, #1
 801833e:	9207      	str	r2, [sp, #28]
 8018340:	e048      	b.n	80183d4 <tcp_write+0x244>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018342:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018346:	2b00      	cmp	r3, #0
 8018348:	f040 8099 	bne.w	801847e <tcp_write+0x2ee>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801834c:	2201      	movs	r2, #1
 801834e:	4629      	mov	r1, r5
 8018350:	2000      	movs	r0, #0
 8018352:	f7fc fb67 	bl	8014a24 <pbuf_alloc>
 8018356:	2800      	cmp	r0, #0
 8018358:	f000 80ac 	beq.w	80184b4 <tcp_write+0x324>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801835c:	9a06      	ldr	r2, [sp, #24]
 801835e:	9005      	str	r0, [sp, #20]
 8018360:	1911      	adds	r1, r2, r4

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018362:	2200      	movs	r2, #0
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8018364:	6041      	str	r1, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018366:	4611      	mov	r1, r2
 8018368:	4610      	mov	r0, r2
 801836a:	f7fc fb5b 	bl	8014a24 <pbuf_alloc>
 801836e:	9b05      	ldr	r3, [sp, #20]
 8018370:	4606      	mov	r6, r0
 8018372:	2800      	cmp	r0, #0
 8018374:	f000 809b 	beq.w	80184ae <tcp_write+0x31e>
        pbuf_free(p2);
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8018378:	4619      	mov	r1, r3
 801837a:	f7fc fcf9 	bl	8014d70 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801837e:	4630      	mov	r0, r6
 8018380:	f7fc fcd6 	bl	8014d30 <pbuf_clen>
 8018384:	4480      	add	r8, r0
 8018386:	fa1f f888 	uxth.w	r8, r8

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801838a:	f1b8 0f09 	cmp.w	r8, #9
 801838e:	f200 8135 	bhi.w	80185fc <tcp_write+0x46c>
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8018392:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018394:	2300      	movs	r3, #0
 8018396:	4632      	mov	r2, r6
 8018398:	f107 0118 	add.w	r1, r7, #24
 801839c:	1826      	adds	r6, r4, r0
 801839e:	9301      	str	r3, [sp, #4]
 80183a0:	f107 0016 	add.w	r0, r7, #22
 80183a4:	9600      	str	r6, [sp, #0]
 80183a6:	f7ff fe3f 	bl	8018028 <tcp_create_segment.isra.0>
 80183aa:	4606      	mov	r6, r0
 80183ac:	2800      	cmp	r0, #0
 80183ae:	f000 8081 	beq.w	80184b4 <tcp_write+0x324>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 80183b2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80183b6:	8143      	strh	r3, [r0, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80183b8:	9b04      	ldr	r3, [sp, #16]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d05d      	beq.n	801847a <tcp_write+0x2ea>
      queue = seg;
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80183be:	f1bb 0f00 	cmp.w	fp, #0
 80183c2:	d064      	beq.n	801848e <tcp_write+0x2fe>
      prev_seg->next = seg;
 80183c4:	f8cb 6000 	str.w	r6, [fp]

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80183c8:	442c      	add	r4, r5
 80183ca:	46b3      	mov	fp, r6
 80183cc:	b2a4      	uxth	r4, r4
  while (pos < len) {
 80183ce:	45a1      	cmp	r9, r4
 80183d0:	f240 80b0 	bls.w	8018534 <tcp_write+0x3a4>
    u16_t left = len - pos;
 80183d4:	eba9 0504 	sub.w	r5, r9, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80183d8:	9b07      	ldr	r3, [sp, #28]
    u16_t seglen = LWIP_MIN(left, max_len);
 80183da:	b2ad      	uxth	r5, r5
 80183dc:	4555      	cmp	r5, sl
 80183de:	bf28      	it	cs
 80183e0:	4655      	movcs	r5, sl
 80183e2:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d0ac      	beq.n	8018342 <tcp_write+0x1b2>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80183e8:	9b04      	ldr	r3, [sp, #16]
 80183ea:	4652      	mov	r2, sl
 80183ec:	4629      	mov	r1, r5
 80183ee:	2000      	movs	r0, #0
 80183f0:	fab3 f683 	clz	r6, r3
 80183f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183f6:	0976      	lsrs	r6, r6, #5
 80183f8:	e9cd 7300 	strd	r7, r3, [sp]
 80183fc:	9602      	str	r6, [sp, #8]
 80183fe:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8018402:	f7ff fdd1 	bl	8017fa8 <tcp_pbuf_prealloc>
 8018406:	4606      	mov	r6, r0
 8018408:	2800      	cmp	r0, #0
 801840a:	d053      	beq.n	80184b4 <tcp_write+0x324>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801840c:	8943      	ldrh	r3, [r0, #10]
 801840e:	42ab      	cmp	r3, r5
 8018410:	d345      	bcc.n	801849e <tcp_write+0x30e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8018412:	9b06      	ldr	r3, [sp, #24]
 8018414:	462a      	mov	r2, r5
 8018416:	6870      	ldr	r0, [r6, #4]
 8018418:	1919      	adds	r1, r3, r4
 801841a:	f005 f85a 	bl	801d4d2 <memcpy>
 801841e:	e7ae      	b.n	801837e <tcp_write+0x1ee>
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8018420:	4b3a      	ldr	r3, [pc, #232]	; (801850c <tcp_write+0x37c>)
 8018422:	f240 12d5 	movw	r2, #469	; 0x1d5
 8018426:	493d      	ldr	r1, [pc, #244]	; (801851c <tcp_write+0x38c>)
 8018428:	483a      	ldr	r0, [pc, #232]	; (8018514 <tcp_write+0x384>)
 801842a:	f005 ffdd 	bl	801e3e8 <iprintf>
 801842e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018432:	930a      	str	r3, [sp, #40]	; 0x28
    oversize = pcb->unsent_oversize;
 8018434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018436:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801843a:	2b00      	cmp	r3, #0
 801843c:	f43f af23 	beq.w	8018286 <tcp_write+0xf6>
 8018440:	e700      	b.n	8018244 <tcp_write+0xb4>
  u16_t extendlen = 0;
 8018442:	2300      	movs	r3, #0
 8018444:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018446:	930d      	str	r3, [sp, #52]	; 0x34
  struct pbuf *concat_p = NULL;
 8018448:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 801844c:	e76e      	b.n	801832c <tcp_write+0x19c>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801844e:	2201      	movs	r2, #1
 8018450:	4631      	mov	r1, r6
 8018452:	2004      	movs	r0, #4
 8018454:	f7fc fae6 	bl	8014a24 <pbuf_alloc>
 8018458:	900b      	str	r0, [sp, #44]	; 0x2c
 801845a:	2800      	cmp	r0, #0
 801845c:	f000 80fe 	beq.w	801865c <tcp_write+0x4cc>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8018460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018462:	9b06      	ldr	r3, [sp, #24]
 8018464:	4413      	add	r3, r2
  u16_t extendlen = 0;
 8018466:	2200      	movs	r2, #0
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8018468:	6043      	str	r3, [r0, #4]
  u16_t extendlen = 0;
 801846a:	920d      	str	r2, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 801846c:	920c      	str	r2, [sp, #48]	; 0x30
          queuelen += pbuf_clen(concat_p);
 801846e:	f7fc fc5f 	bl	8014d30 <pbuf_clen>
 8018472:	4480      	add	r8, r0
 8018474:	fa1f f888 	uxth.w	r8, r8
 8018478:	e736      	b.n	80182e8 <tcp_write+0x158>
 801847a:	9004      	str	r0, [sp, #16]
 801847c:	e7a4      	b.n	80183c8 <tcp_write+0x238>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801847e:	4b23      	ldr	r3, [pc, #140]	; (801850c <tcp_write+0x37c>)
 8018480:	f240 224b 	movw	r2, #587	; 0x24b
 8018484:	4926      	ldr	r1, [pc, #152]	; (8018520 <tcp_write+0x390>)
 8018486:	4823      	ldr	r0, [pc, #140]	; (8018514 <tcp_write+0x384>)
 8018488:	f005 ffae 	bl	801e3e8 <iprintf>
 801848c:	e75e      	b.n	801834c <tcp_write+0x1bc>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801848e:	4b1f      	ldr	r3, [pc, #124]	; (801850c <tcp_write+0x37c>)
 8018490:	f240 2285 	movw	r2, #645	; 0x285
 8018494:	4923      	ldr	r1, [pc, #140]	; (8018524 <tcp_write+0x394>)
 8018496:	481f      	ldr	r0, [pc, #124]	; (8018514 <tcp_write+0x384>)
 8018498:	f005 ffa6 	bl	801e3e8 <iprintf>
 801849c:	e792      	b.n	80183c4 <tcp_write+0x234>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801849e:	4b1b      	ldr	r3, [pc, #108]	; (801850c <tcp_write+0x37c>)
 80184a0:	f240 2241 	movw	r2, #577	; 0x241
 80184a4:	4920      	ldr	r1, [pc, #128]	; (8018528 <tcp_write+0x398>)
 80184a6:	481b      	ldr	r0, [pc, #108]	; (8018514 <tcp_write+0x384>)
 80184a8:	f005 ff9e 	bl	801e3e8 <iprintf>
 80184ac:	e7b1      	b.n	8018412 <tcp_write+0x282>
        pbuf_free(p2);
 80184ae:	4618      	mov	r0, r3
 80184b0:	f7fc fa4a 	bl	8014948 <pbuf_free>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80184b4:	7ebb      	ldrb	r3, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 80184b6:	4a1d      	ldr	r2, [pc, #116]	; (801852c <tcp_write+0x39c>)
  pcb->flags |= TF_NAGLEMEMERR;
 80184b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80184bc:	76bb      	strb	r3, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 80184be:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 80184c2:	3301      	adds	r3, #1
 80184c4:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c

  if (concat_p != NULL) {
 80184c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184ca:	b113      	cbz	r3, 80184d2 <tcp_write+0x342>
    pbuf_free(concat_p);
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7fc fa3b 	bl	8014948 <pbuf_free>
  }
  if (queue != NULL) {
 80184d2:	9b04      	ldr	r3, [sp, #16]
 80184d4:	b113      	cbz	r3, 80184dc <tcp_write+0x34c>
    tcp_segs_free(queue);
 80184d6:	4618      	mov	r0, r3
 80184d8:	f7fd fa4e 	bl	8015978 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80184dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80184e0:	b12b      	cbz	r3, 80184ee <tcp_write+0x35e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80184e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80184e4:	b91b      	cbnz	r3, 80184ee <tcp_write+0x35e>
 80184e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	f000 8090 	beq.w	801860e <tcp_write+0x47e>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80184ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80184f2:	b011      	add	sp, #68	; 0x44
 80184f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80184f8:	4b04      	ldr	r3, [pc, #16]	; (801850c <tcp_write+0x37c>)
 80184fa:	f240 12c7 	movw	r2, #455	; 0x1c7
 80184fe:	490c      	ldr	r1, [pc, #48]	; (8018530 <tcp_write+0x3a0>)
 8018500:	4804      	ldr	r0, [pc, #16]	; (8018514 <tcp_write+0x384>)
 8018502:	f005 ff71 	bl	801e3e8 <iprintf>
 8018506:	9b08      	ldr	r3, [sp, #32]
 8018508:	891b      	ldrh	r3, [r3, #8]
 801850a:	e68b      	b.n	8018224 <tcp_write+0x94>
 801850c:	0803af04 	.word	0x0803af04
 8018510:	0803b058 	.word	0x0803b058
 8018514:	08023618 	.word	0x08023618
 8018518:	0803afbc 	.word	0x0803afbc
 801851c:	0803b008 	.word	0x0803b008
 8018520:	0803b114 	.word	0x0803b114
 8018524:	0803b124 	.word	0x0803b124
 8018528:	0803b0d4 	.word	0x0803b0d4
 801852c:	20035384 	.word	0x20035384
 8018530:	0803aff0 	.word	0x0803aff0
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8018534:	9a08      	ldr	r2, [sp, #32]
 8018536:	b122      	cbz	r2, 8018542 <tcp_write+0x3b2>
 8018538:	990c      	ldr	r1, [sp, #48]	; 0x30
 801853a:	b111      	cbz	r1, 8018542 <tcp_write+0x3b2>
    last_unsent->oversize_left += oversize_add;
 801853c:	8953      	ldrh	r3, [r2, #10]
 801853e:	4419      	add	r1, r3
 8018540:	8151      	strh	r1, [r2, #10]
  if (oversize_used > 0) {
 8018542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018544:	b32b      	cbz	r3, 8018592 <tcp_write+0x402>
    for (p = last_unsent->p; p; p = p->next) {
 8018546:	9b08      	ldr	r3, [sp, #32]
 8018548:	685c      	ldr	r4, [r3, #4]
 801854a:	b1b4      	cbz	r4, 801857a <tcp_write+0x3ea>
 801854c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8018550:	9d06      	ldr	r5, [sp, #24]
      p->tot_len += oversize_used;
 8018552:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 8018554:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 8018556:	4453      	add	r3, sl
 8018558:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801855a:	b10a      	cbz	r2, 8018560 <tcp_write+0x3d0>
  while (pos < len) {
 801855c:	4614      	mov	r4, r2
 801855e:	e7f8      	b.n	8018552 <tcp_write+0x3c2>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018560:	6863      	ldr	r3, [r4, #4]
 8018562:	4652      	mov	r2, sl
 8018564:	8960      	ldrh	r0, [r4, #10]
 8018566:	4629      	mov	r1, r5
 8018568:	4418      	add	r0, r3
 801856a:	f004 ffb2 	bl	801d4d2 <memcpy>
        p->len += oversize_used;
 801856e:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018570:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 8018572:	4453      	add	r3, sl
 8018574:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018576:	2a00      	cmp	r2, #0
 8018578:	d1f0      	bne.n	801855c <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 801857a:	9908      	ldr	r1, [sp, #32]
 801857c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801857e:	890a      	ldrh	r2, [r1, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8018580:	894b      	ldrh	r3, [r1, #10]
    last_unsent->len += oversize_used;
 8018582:	4402      	add	r2, r0
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8018584:	4283      	cmp	r3, r0
    last_unsent->len += oversize_used;
 8018586:	810a      	strh	r2, [r1, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8018588:	d37c      	bcc.n	8018684 <tcp_write+0x4f4>
    last_unsent->oversize_left -= oversize_used;
 801858a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801858c:	1a9b      	subs	r3, r3, r2
 801858e:	9a08      	ldr	r2, [sp, #32]
 8018590:	8153      	strh	r3, [r2, #10]
  pcb->unsent_oversize = oversize;
 8018592:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018596:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  if (concat_p != NULL) {
 801859a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801859c:	2b00      	cmp	r3, #0
 801859e:	f000 808e 	beq.w	80186be <tcp_write+0x52e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80185a2:	9b08      	ldr	r3, [sp, #32]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	f000 80d7 	beq.w	8018758 <tcp_write+0x5c8>
    pbuf_cat(last_unsent->p, concat_p);
 80185aa:	9c08      	ldr	r4, [sp, #32]
 80185ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80185ae:	6860      	ldr	r0, [r4, #4]
 80185b0:	4629      	mov	r1, r5
 80185b2:	f7fc fbdd 	bl	8014d70 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80185b6:	892a      	ldrh	r2, [r5, #8]
 80185b8:	8923      	ldrh	r3, [r4, #8]
 80185ba:	4413      	add	r3, r2
 80185bc:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 80185be:	9b08      	ldr	r3, [sp, #32]
 80185c0:	461a      	mov	r2, r3
 80185c2:	9b04      	ldr	r3, [sp, #16]
 80185c4:	6013      	str	r3, [r2, #0]
  pcb->snd_lbb += len;
 80185c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
  pcb->snd_buf -= len;
 80185c8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
  pcb->snd_lbb += len;
 80185cc:	444a      	add	r2, r9
  pcb->snd_queuelen = queuelen;
 80185ce:	f8a7 8062 	strh.w	r8, [r7, #98]	; 0x62
  pcb->snd_buf -= len;
 80185d2:	eba3 0909 	sub.w	r9, r3, r9
  pcb->snd_lbb += len;
 80185d6:	65ba      	str	r2, [r7, #88]	; 0x58
  pcb->snd_buf -= len;
 80185d8:	f8a7 9060 	strh.w	r9, [r7, #96]	; 0x60
  if (pcb->snd_queuelen != 0) {
 80185dc:	f1b8 0f00 	cmp.w	r8, #0
 80185e0:	d002      	beq.n	80185e8 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 80185e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d057      	beq.n	8018698 <tcp_write+0x508>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80185e8:	b136      	cbz	r6, 80185f8 <tcp_write+0x468>
 80185ea:	6930      	ldr	r0, [r6, #16]
 80185ec:	2800      	cmp	r0, #0
 80185ee:	d080      	beq.n	80184f2 <tcp_write+0x362>
 80185f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185f2:	f013 0402 	ands.w	r4, r3, #2
 80185f6:	d03c      	beq.n	8018672 <tcp_write+0x4e2>
  return ERR_OK;
 80185f8:	2000      	movs	r0, #0
 80185fa:	e77a      	b.n	80184f2 <tcp_write+0x362>
      pbuf_free(p);
 80185fc:	4630      	mov	r0, r6
 80185fe:	f7fc f9a3 	bl	8014948 <pbuf_free>
      goto memerr;
 8018602:	e757      	b.n	80184b4 <tcp_write+0x324>
  u16_t extendlen = 0;
 8018604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018606:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018608:	930d      	str	r3, [sp, #52]	; 0x34
  struct pbuf *concat_p = NULL;
 801860a:	930b      	str	r3, [sp, #44]	; 0x2c
 801860c:	e68e      	b.n	801832c <tcp_write+0x19c>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801860e:	4b71      	ldr	r3, [pc, #452]	; (80187d4 <tcp_write+0x644>)
 8018610:	f240 3202 	movw	r2, #770	; 0x302
 8018614:	4970      	ldr	r1, [pc, #448]	; (80187d8 <tcp_write+0x648>)
 8018616:	4871      	ldr	r0, [pc, #452]	; (80187dc <tcp_write+0x64c>)
 8018618:	f005 fee6 	bl	801e3e8 <iprintf>
  return ERR_MEM;
 801861c:	f04f 30ff 	mov.w	r0, #4294967295
 8018620:	e767      	b.n	80184f2 <tcp_write+0x362>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018622:	900a      	str	r0, [sp, #40]	; 0x28
 8018624:	9e08      	ldr	r6, [sp, #32]
 8018626:	e62e      	b.n	8018286 <tcp_write+0xf6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018628:	4b6a      	ldr	r3, [pc, #424]	; (80187d4 <tcp_write+0x644>)
 801862a:	f240 12d9 	movw	r2, #473	; 0x1d9
 801862e:	496c      	ldr	r1, [pc, #432]	; (80187e0 <tcp_write+0x650>)
 8018630:	486a      	ldr	r0, [pc, #424]	; (80187dc <tcp_write+0x64c>)
 8018632:	f005 fed9 	bl	801e3e8 <iprintf>
 8018636:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801863a:	930a      	str	r3, [sp, #40]	; 0x28
 801863c:	e605      	b.n	801824a <tcp_write+0xba>
  u16_t extendlen = 0;
 801863e:	2400      	movs	r4, #0
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018640:	4b64      	ldr	r3, [pc, #400]	; (80187d4 <tcp_write+0x644>)
 8018642:	f240 2225 	movw	r2, #549	; 0x225
 8018646:	4967      	ldr	r1, [pc, #412]	; (80187e4 <tcp_write+0x654>)
 8018648:	4864      	ldr	r0, [pc, #400]	; (80187dc <tcp_write+0x64c>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801864a:	4626      	mov	r6, r4
  u16_t extendlen = 0;
 801864c:	940d      	str	r4, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 801864e:	940c      	str	r4, [sp, #48]	; 0x30
  u16_t oversize_used = 0;
 8018650:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018652:	9408      	str	r4, [sp, #32]
  struct pbuf *concat_p = NULL;
 8018654:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018656:	f005 fec7 	bl	801e3e8 <iprintf>
 801865a:	e667      	b.n	801832c <tcp_write+0x19c>
  pcb->flags |= TF_NAGLEMEMERR;
 801865c:	7ebb      	ldrb	r3, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 801865e:	4a62      	ldr	r2, [pc, #392]	; (80187e8 <tcp_write+0x658>)
  pcb->flags |= TF_NAGLEMEMERR;
 8018660:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018664:	76bb      	strb	r3, [r7, #26]
  TCP_STATS_INC(tcp.memerr);
 8018666:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801866a:	3301      	adds	r3, #1
 801866c:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
 8018670:	e734      	b.n	80184dc <tcp_write+0x34c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8018672:	8985      	ldrh	r5, [r0, #12]
 8018674:	2008      	movs	r0, #8
 8018676:	f7fa fdbd 	bl	80131f4 <lwip_htons>
 801867a:	6933      	ldr	r3, [r6, #16]
 801867c:	4305      	orrs	r5, r0
  return ERR_OK;
 801867e:	4620      	mov	r0, r4
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8018680:	819d      	strh	r5, [r3, #12]
 8018682:	e736      	b.n	80184f2 <tcp_write+0x362>
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8018684:	4b53      	ldr	r3, [pc, #332]	; (80187d4 <tcp_write+0x644>)
 8018686:	f240 22ae 	movw	r2, #686	; 0x2ae
 801868a:	4958      	ldr	r1, [pc, #352]	; (80187ec <tcp_write+0x65c>)
 801868c:	4853      	ldr	r0, [pc, #332]	; (80187dc <tcp_write+0x64c>)
 801868e:	f005 feab 	bl	801e3e8 <iprintf>
 8018692:	9b08      	ldr	r3, [sp, #32]
 8018694:	895b      	ldrh	r3, [r3, #10]
 8018696:	e778      	b.n	801858a <tcp_write+0x3fa>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801869a:	2b00      	cmp	r3, #0
 801869c:	d1a4      	bne.n	80185e8 <tcp_write+0x458>
 801869e:	4b4d      	ldr	r3, [pc, #308]	; (80187d4 <tcp_write+0x644>)
 80186a0:	f240 22ed 	movw	r2, #749	; 0x2ed
 80186a4:	494c      	ldr	r1, [pc, #304]	; (80187d8 <tcp_write+0x648>)
 80186a6:	484d      	ldr	r0, [pc, #308]	; (80187dc <tcp_write+0x64c>)
 80186a8:	f005 fe9e 	bl	801e3e8 <iprintf>
 80186ac:	e79c      	b.n	80185e8 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80186ae:	4b49      	ldr	r3, [pc, #292]	; (80187d4 <tcp_write+0x644>)
 80186b0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80186b4:	494e      	ldr	r1, [pc, #312]	; (80187f0 <tcp_write+0x660>)
 80186b6:	e623      	b.n	8018300 <tcp_write+0x170>
    return ERR_CONN;
 80186b8:	f06f 000a 	mvn.w	r0, #10
 80186bc:	e719      	b.n	80184f2 <tcp_write+0x362>
  } else if (extendlen > 0) {
 80186be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d042      	beq.n	801874a <tcp_write+0x5ba>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80186c4:	9b08      	ldr	r3, [sp, #32]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d06c      	beq.n	80187a4 <tcp_write+0x614>
 80186ca:	6859      	ldr	r1, [r3, #4]
 80186cc:	2900      	cmp	r1, #0
 80186ce:	d069      	beq.n	80187a4 <tcp_write+0x614>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80186d0:	680a      	ldr	r2, [r1, #0]
 80186d2:	2a00      	cmp	r2, #0
 80186d4:	d07b      	beq.n	80187ce <tcp_write+0x63e>
 80186d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80186d8:	e000      	b.n	80186dc <tcp_write+0x54c>
 80186da:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 80186dc:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80186de:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 80186e0:	4423      	add	r3, r4
 80186e2:	810b      	strh	r3, [r1, #8]
 80186e4:	4611      	mov	r1, r2
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80186e6:	2800      	cmp	r0, #0
 80186e8:	d1f7      	bne.n	80186da <tcp_write+0x54a>
    p->tot_len += extendlen;
 80186ea:	8910      	ldrh	r0, [r2, #8]
    p->len += extendlen;
 80186ec:	8951      	ldrh	r1, [r2, #10]
    p->tot_len += extendlen;
 80186ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    last_unsent->len += extendlen;
 80186f0:	9b08      	ldr	r3, [sp, #32]
    p->tot_len += extendlen;
 80186f2:	4420      	add	r0, r4
    p->len += extendlen;
 80186f4:	4421      	add	r1, r4
    last_unsent->len += extendlen;
 80186f6:	891b      	ldrh	r3, [r3, #8]
    p->tot_len += extendlen;
 80186f8:	8110      	strh	r0, [r2, #8]
    last_unsent->len += extendlen;
 80186fa:	4423      	add	r3, r4
    p->len += extendlen;
 80186fc:	8151      	strh	r1, [r2, #10]
    last_unsent->len += extendlen;
 80186fe:	9a08      	ldr	r2, [sp, #32]
 8018700:	8113      	strh	r3, [r2, #8]
 8018702:	e75c      	b.n	80185be <tcp_write+0x42e>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018706:	2301      	movs	r3, #1
 8018708:	4631      	mov	r1, r6
 801870a:	2004      	movs	r0, #4
 801870c:	9302      	str	r3, [sp, #8]
 801870e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8018712:	e9cd 7200 	strd	r7, r2, [sp]
 8018716:	4622      	mov	r2, r4
 8018718:	f7ff fc46 	bl	8017fa8 <tcp_pbuf_prealloc>
 801871c:	4604      	mov	r4, r0
 801871e:	900b      	str	r0, [sp, #44]	; 0x2c
 8018720:	2800      	cmp	r0, #0
 8018722:	d09b      	beq.n	801865c <tcp_write+0x4cc>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018724:	9b06      	ldr	r3, [sp, #24]
 8018726:	4632      	mov	r2, r6
 8018728:	990a      	ldr	r1, [sp, #40]	; 0x28
 801872a:	6840      	ldr	r0, [r0, #4]
 801872c:	1859      	adds	r1, r3, r1
  u16_t extendlen = 0;
 801872e:	2300      	movs	r3, #0
 8018730:	930d      	str	r3, [sp, #52]	; 0x34
        oversize_add = oversize;
 8018732:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018736:	930c      	str	r3, [sp, #48]	; 0x30
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018738:	f004 fecb 	bl	801d4d2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801873c:	4620      	mov	r0, r4
 801873e:	f7fc faf7 	bl	8014d30 <pbuf_clen>
 8018742:	4480      	add	r8, r0
 8018744:	fa1f f888 	uxth.w	r8, r8
 8018748:	e5ce      	b.n	80182e8 <tcp_write+0x158>
  if (last_unsent == NULL) {
 801874a:	9b08      	ldr	r3, [sp, #32]
 801874c:	2b00      	cmp	r3, #0
 801874e:	f47f af36 	bne.w	80185be <tcp_write+0x42e>
    pcb->unsent = queue;
 8018752:	9b04      	ldr	r3, [sp, #16]
 8018754:	66bb      	str	r3, [r7, #104]	; 0x68
 8018756:	e736      	b.n	80185c6 <tcp_write+0x436>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018758:	4b1e      	ldr	r3, [pc, #120]	; (80187d4 <tcp_write+0x644>)
 801875a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801875e:	4925      	ldr	r1, [pc, #148]	; (80187f4 <tcp_write+0x664>)
 8018760:	481e      	ldr	r0, [pc, #120]	; (80187dc <tcp_write+0x64c>)
 8018762:	f005 fe41 	bl	801e3e8 <iprintf>
 8018766:	e720      	b.n	80185aa <tcp_write+0x41a>
    pcb->flags |= TF_NAGLEMEMERR;
 8018768:	7ebb      	ldrb	r3, [r7, #26]
    return ERR_MEM;
 801876a:	f04f 30ff 	mov.w	r0, #4294967295
    pcb->flags |= TF_NAGLEMEMERR;
 801876e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018772:	76bb      	strb	r3, [r7, #26]
 8018774:	e6bd      	b.n	80184f2 <tcp_write+0x362>
    TCP_STATS_INC(tcp.memerr);
 8018776:	4a1c      	ldr	r2, [pc, #112]	; (80187e8 <tcp_write+0x658>)
    return ERR_MEM;
 8018778:	f04f 30ff 	mov.w	r0, #4294967295
    TCP_STATS_INC(tcp.memerr);
 801877c:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 8018780:	3301      	adds	r3, #1
 8018782:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 8018786:	7ebb      	ldrb	r3, [r7, #26]
 8018788:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801878c:	76bb      	strb	r3, [r7, #26]
 801878e:	e6b0      	b.n	80184f2 <tcp_write+0x362>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018790:	4b10      	ldr	r3, [pc, #64]	; (80187d4 <tcp_write+0x644>)
 8018792:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8018796:	4918      	ldr	r1, [pc, #96]	; (80187f8 <tcp_write+0x668>)
 8018798:	4810      	ldr	r0, [pc, #64]	; (80187dc <tcp_write+0x64c>)
 801879a:	f005 fe25 	bl	801e3e8 <iprintf>
 801879e:	f06f 000f 	mvn.w	r0, #15
 80187a2:	e6a6      	b.n	80184f2 <tcp_write+0x362>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80187a4:	4b0b      	ldr	r3, [pc, #44]	; (80187d4 <tcp_write+0x644>)
 80187a6:	f240 22c1 	movw	r2, #705	; 0x2c1
 80187aa:	4914      	ldr	r1, [pc, #80]	; (80187fc <tcp_write+0x66c>)
 80187ac:	480b      	ldr	r0, [pc, #44]	; (80187dc <tcp_write+0x64c>)
 80187ae:	f005 fe1b 	bl	801e3e8 <iprintf>
 80187b2:	9b08      	ldr	r3, [sp, #32]
 80187b4:	6859      	ldr	r1, [r3, #4]
 80187b6:	e78b      	b.n	80186d0 <tcp_write+0x540>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80187b8:	4b06      	ldr	r3, [pc, #24]	; (80187d4 <tcp_write+0x644>)
 80187ba:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80187be:	4910      	ldr	r1, [pc, #64]	; (8018800 <tcp_write+0x670>)
 80187c0:	4806      	ldr	r0, [pc, #24]	; (80187dc <tcp_write+0x64c>)
          extendlen = seglen;
 80187c2:	960d      	str	r6, [sp, #52]	; 0x34
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80187c4:	f005 fe10 	bl	801e3e8 <iprintf>
  u16_t oversize_add = 0;
 80187c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187ca:	930c      	str	r3, [sp, #48]	; 0x30
 80187cc:	e58c      	b.n	80182e8 <tcp_write+0x158>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80187ce:	460a      	mov	r2, r1
 80187d0:	e78b      	b.n	80186ea <tcp_write+0x55a>
 80187d2:	bf00      	nop
 80187d4:	0803af04 	.word	0x0803af04
 80187d8:	0803b1d4 	.word	0x0803b1d4
 80187dc:	08023618 	.word	0x08023618
 80187e0:	0803b038 	.word	0x0803b038
 80187e4:	0803b0a4 	.word	0x0803b0a4
 80187e8:	20035384 	.word	0x20035384
 80187ec:	0803b138 	.word	0x0803b138
 80187f0:	0803af80 	.word	0x0803af80
 80187f4:	0803b164 	.word	0x0803b164
 80187f8:	0803af4c 	.word	0x0803af4c
 80187fc:	0803b19c 	.word	0x0803b19c
 8018800:	0803b078 	.word	0x0803b078

08018804 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018808:	f011 0803 	ands.w	r8, r1, #3
{
 801880c:	b083      	sub	sp, #12
 801880e:	460d      	mov	r5, r1
 8018810:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018812:	d050      	beq.n	80188b6 <tcp_enqueue_flags+0xb2>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8018814:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8018818:	2b08      	cmp	r3, #8
 801881a:	d901      	bls.n	8018820 <tcp_enqueue_flags+0x1c>
 801881c:	07e9      	lsls	r1, r5, #31
 801881e:	d57a      	bpl.n	8018916 <tcp_enqueue_flags+0x112>
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }

  if (flags & TCP_SYN) {
 8018820:	f3c5 0740 	ubfx	r7, r5, #1, #1
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018824:	2200      	movs	r2, #0
 8018826:	ea4f 0987 	mov.w	r9, r7, lsl #2
 801882a:	4610      	mov	r0, r2
 801882c:	4649      	mov	r1, r9
 801882e:	f7fc f8f9 	bl	8014a24 <pbuf_alloc>
 8018832:	4606      	mov	r6, r0
 8018834:	2800      	cmp	r0, #0
 8018836:	d07b      	beq.n	8018930 <tcp_enqueue_flags+0x12c>
    pcb->flags |= TF_NAGLEMEMERR;
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018838:	8943      	ldrh	r3, [r0, #10]
 801883a:	454b      	cmp	r3, r9
 801883c:	d343      	bcc.n	80188c6 <tcp_enqueue_flags+0xc2>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801883e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018840:	4632      	mov	r2, r6
 8018842:	9701      	str	r7, [sp, #4]
 8018844:	462b      	mov	r3, r5
 8018846:	9100      	str	r1, [sp, #0]
 8018848:	f104 0016 	add.w	r0, r4, #22
 801884c:	f104 0118 	add.w	r1, r4, #24
 8018850:	f7ff fbea 	bl	8018028 <tcp_create_segment.isra.0>
 8018854:	4606      	mov	r6, r0
 8018856:	2800      	cmp	r0, #0
 8018858:	d06a      	beq.n	8018930 <tcp_enqueue_flags+0x12c>
    pcb->flags |= TF_NAGLEMEMERR;
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801885a:	6903      	ldr	r3, [r0, #16]
 801885c:	079a      	lsls	r2, r3, #30
 801885e:	d146      	bne.n	80188ee <tcp_enqueue_flags+0xea>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018860:	8933      	ldrh	r3, [r6, #8]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d137      	bne.n	80188d6 <tcp_enqueue_flags+0xd2>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018866:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8018868:	b90a      	cbnz	r2, 801886e <tcp_enqueue_flags+0x6a>
 801886a:	e03e      	b.n	80188ea <tcp_enqueue_flags+0xe6>
 801886c:	461a      	mov	r2, r3
    pcb->unsent = seg;
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801886e:	6813      	ldr	r3, [r2, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d1fb      	bne.n	801886c <tcp_enqueue_flags+0x68>
    useg->next = seg;
 8018874:	6016      	str	r6, [r2, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018876:	2300      	movs	r3, #0
 8018878:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801887c:	f1b8 0f00 	cmp.w	r8, #0
 8018880:	d002      	beq.n	8018888 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 8018882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018884:	3301      	adds	r3, #1
 8018886:	65a3      	str	r3, [r4, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018888:	07eb      	lsls	r3, r5, #31
 801888a:	d40f      	bmi.n	80188ac <tcp_enqueue_flags+0xa8>
    pcb->flags |= TF_FIN;
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801888c:	6870      	ldr	r0, [r6, #4]
 801888e:	f7fc fa4f 	bl	8014d30 <pbuf_clen>
 8018892:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8018896:	4418      	add	r0, r3
 8018898:	b280      	uxth	r0, r0
 801889a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801889e:	b110      	cbz	r0, 80188a6 <tcp_enqueue_flags+0xa2>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80188a0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80188a2:	b360      	cbz	r0, 80188fe <tcp_enqueue_flags+0xfa>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80188a4:	2000      	movs	r0, #0
}
 80188a6:	b003      	add	sp, #12
 80188a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pcb->flags |= TF_FIN;
 80188ac:	7ea3      	ldrb	r3, [r4, #26]
 80188ae:	f043 0320 	orr.w	r3, r3, #32
 80188b2:	76a3      	strb	r3, [r4, #26]
 80188b4:	e7ea      	b.n	801888c <tcp_enqueue_flags+0x88>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80188b6:	4b25      	ldr	r3, [pc, #148]	; (801894c <tcp_enqueue_flags+0x148>)
 80188b8:	f240 321b 	movw	r2, #795	; 0x31b
 80188bc:	4924      	ldr	r1, [pc, #144]	; (8018950 <tcp_enqueue_flags+0x14c>)
 80188be:	4825      	ldr	r0, [pc, #148]	; (8018954 <tcp_enqueue_flags+0x150>)
 80188c0:	f005 fd92 	bl	801e3e8 <iprintf>
 80188c4:	e7a6      	b.n	8018814 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80188c6:	4b21      	ldr	r3, [pc, #132]	; (801894c <tcp_enqueue_flags+0x148>)
 80188c8:	f240 3241 	movw	r2, #833	; 0x341
 80188cc:	4922      	ldr	r1, [pc, #136]	; (8018958 <tcp_enqueue_flags+0x154>)
 80188ce:	4821      	ldr	r0, [pc, #132]	; (8018954 <tcp_enqueue_flags+0x150>)
 80188d0:	f005 fd8a 	bl	801e3e8 <iprintf>
 80188d4:	e7b3      	b.n	801883e <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80188d6:	f240 324a 	movw	r2, #842	; 0x34a
 80188da:	4b1c      	ldr	r3, [pc, #112]	; (801894c <tcp_enqueue_flags+0x148>)
 80188dc:	491f      	ldr	r1, [pc, #124]	; (801895c <tcp_enqueue_flags+0x158>)
 80188de:	481d      	ldr	r0, [pc, #116]	; (8018954 <tcp_enqueue_flags+0x150>)
 80188e0:	f005 fd82 	bl	801e3e8 <iprintf>
  if (pcb->unsent == NULL) {
 80188e4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80188e6:	2a00      	cmp	r2, #0
 80188e8:	d1c1      	bne.n	801886e <tcp_enqueue_flags+0x6a>
    pcb->unsent = seg;
 80188ea:	66a6      	str	r6, [r4, #104]	; 0x68
 80188ec:	e7c3      	b.n	8018876 <tcp_enqueue_flags+0x72>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80188ee:	4b17      	ldr	r3, [pc, #92]	; (801894c <tcp_enqueue_flags+0x148>)
 80188f0:	f240 3249 	movw	r2, #841	; 0x349
 80188f4:	491a      	ldr	r1, [pc, #104]	; (8018960 <tcp_enqueue_flags+0x15c>)
 80188f6:	4817      	ldr	r0, [pc, #92]	; (8018954 <tcp_enqueue_flags+0x150>)
 80188f8:	f005 fd76 	bl	801e3e8 <iprintf>
 80188fc:	e7b0      	b.n	8018860 <tcp_enqueue_flags+0x5c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80188fe:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8018900:	2c00      	cmp	r4, #0
 8018902:	d1d0      	bne.n	80188a6 <tcp_enqueue_flags+0xa2>
 8018904:	4b11      	ldr	r3, [pc, #68]	; (801894c <tcp_enqueue_flags+0x148>)
 8018906:	f240 326d 	movw	r2, #877	; 0x36d
 801890a:	4916      	ldr	r1, [pc, #88]	; (8018964 <tcp_enqueue_flags+0x160>)
 801890c:	4811      	ldr	r0, [pc, #68]	; (8018954 <tcp_enqueue_flags+0x150>)
 801890e:	f005 fd6b 	bl	801e3e8 <iprintf>
  return ERR_OK;
 8018912:	4620      	mov	r0, r4
 8018914:	e7c7      	b.n	80188a6 <tcp_enqueue_flags+0xa2>
    TCP_STATS_INC(tcp.memerr);
 8018916:	4a14      	ldr	r2, [pc, #80]	; (8018968 <tcp_enqueue_flags+0x164>)
    return ERR_MEM;
 8018918:	f04f 30ff 	mov.w	r0, #4294967295
    TCP_STATS_INC(tcp.memerr);
 801891c:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 8018920:	3301      	adds	r3, #1
 8018922:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 8018926:	7ea3      	ldrb	r3, [r4, #26]
 8018928:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801892c:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801892e:	e7ba      	b.n	80188a6 <tcp_enqueue_flags+0xa2>
    pcb->flags |= TF_NAGLEMEMERR;
 8018930:	7ea3      	ldrb	r3, [r4, #26]
    return ERR_MEM;
 8018932:	f04f 30ff 	mov.w	r0, #4294967295
    TCP_STATS_INC(tcp.memerr);
 8018936:	4a0c      	ldr	r2, [pc, #48]	; (8018968 <tcp_enqueue_flags+0x164>)
    pcb->flags |= TF_NAGLEMEMERR;
 8018938:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801893c:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801893e:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 8018942:	3301      	adds	r3, #1
 8018944:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    return ERR_MEM;
 8018948:	e7ad      	b.n	80188a6 <tcp_enqueue_flags+0xa2>
 801894a:	bf00      	nop
 801894c:	0803af04 	.word	0x0803af04
 8018950:	0803ad94 	.word	0x0803ad94
 8018954:	08023618 	.word	0x08023618
 8018958:	0803adec 	.word	0x0803adec
 801895c:	0803ae40 	.word	0x0803ae40
 8018960:	0803ae28 	.word	0x0803ae28
 8018964:	0803ae6c 	.word	0x0803ae6c
 8018968:	20035384 	.word	0x20035384

0801896c <tcp_send_fin>:
{
 801896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 801896e:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8018970:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8018972:	b90c      	cbnz	r4, 8018978 <tcp_send_fin+0xc>
 8018974:	e00a      	b.n	801898c <tcp_send_fin+0x20>
 8018976:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018978:	6823      	ldr	r3, [r4, #0]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d1fb      	bne.n	8018976 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801897e:	6923      	ldr	r3, [r4, #16]
 8018980:	8998      	ldrh	r0, [r3, #12]
 8018982:	f7fa fc37 	bl	80131f4 <lwip_htons>
 8018986:	f010 0607 	ands.w	r6, r0, #7
 801898a:	d005      	beq.n	8018998 <tcp_send_fin+0x2c>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801898c:	4628      	mov	r0, r5
 801898e:	2101      	movs	r1, #1
}
 8018990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018994:	f7ff bf36 	b.w	8018804 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018998:	6923      	ldr	r3, [r4, #16]
 801899a:	2001      	movs	r0, #1
 801899c:	899f      	ldrh	r7, [r3, #12]
 801899e:	f7fa fc29 	bl	80131f4 <lwip_htons>
 80189a2:	6923      	ldr	r3, [r4, #16]
 80189a4:	4338      	orrs	r0, r7
 80189a6:	8198      	strh	r0, [r3, #12]
}
 80189a8:	4630      	mov	r0, r6
      pcb->flags |= TF_FIN;
 80189aa:	7eab      	ldrb	r3, [r5, #26]
 80189ac:	f043 0320 	orr.w	r3, r3, #32
 80189b0:	76ab      	strb	r3, [r5, #26]
}
 80189b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080189b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80189b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189b8:	4604      	mov	r4, r0
 80189ba:	b084      	sub	sp, #16
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80189bc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80189be:	f7fa fc1d 	bl	80131fc <lwip_htonl>
 80189c2:	2100      	movs	r1, #0
 80189c4:	4602      	mov	r2, r0
 80189c6:	4620      	mov	r0, r4
 80189c8:	f7ff fba4 	bl	8018114 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 80189cc:	2800      	cmp	r0, #0
 80189ce:	d037      	beq.n	8018a40 <tcp_send_empty_ack+0x8c>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80189d0:	1d26      	adds	r6, r4, #4
  tcphdr = (struct tcp_hdr *)p->payload;
 80189d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80189d6:	4605      	mov	r5, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80189d8:	4630      	mov	r0, r6
 80189da:	f003 f90b 	bl	801bbf4 <ip4_route>
  if (netif == NULL) {
 80189de:	4607      	mov	r7, r0
 80189e0:	b308      	cbz	r0, 8018a26 <tcp_send_empty_ack+0x72>
    err = ERR_RTE;
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80189e2:	892a      	ldrh	r2, [r5, #8]
 80189e4:	4623      	mov	r3, r4
 80189e6:	9600      	str	r6, [sp, #0]
 80189e8:	2106      	movs	r1, #6
 80189ea:	4628      	mov	r0, r5
 80189ec:	f7fb f964 	bl	8013cb8 <ip_chksum_pseudo>
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80189f0:	f04f 0c06 	mov.w	ip, #6
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80189f4:	f8a8 0010 	strh.w	r0, [r8, #16]
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80189f8:	4632      	mov	r2, r6
 80189fa:	7a66      	ldrb	r6, [r4, #9]
 80189fc:	4621      	mov	r1, r4
 80189fe:	7aa3      	ldrb	r3, [r4, #10]
 8018a00:	4628      	mov	r0, r5
 8018a02:	9702      	str	r7, [sp, #8]
 8018a04:	e9cd 6c00 	strd	r6, ip, [sp]
 8018a08:	f003 fb08 	bl	801c01c <ip4_output_if>
 8018a0c:	4606      	mov	r6, r0
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8018a0e:	4628      	mov	r0, r5
 8018a10:	f7fb ff9a 	bl	8014948 <pbuf_free>

  if (err != ERR_OK) {
 8018a14:	b966      	cbnz	r6, 8018a30 <tcp_send_empty_ack+0x7c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8018a16:	7ea3      	ldrb	r3, [r4, #26]
 8018a18:	f023 0303 	bic.w	r3, r3, #3
 8018a1c:	76a3      	strb	r3, [r4, #26]
  }

  return err;
}
 8018a1e:	4630      	mov	r0, r6
 8018a20:	b004      	add	sp, #16
 8018a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  pbuf_free(p);
 8018a26:	4628      	mov	r0, r5
    err = ERR_RTE;
 8018a28:	f06f 0603 	mvn.w	r6, #3
  pbuf_free(p);
 8018a2c:	f7fb ff8c 	bl	8014948 <pbuf_free>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8018a30:	7ea3      	ldrb	r3, [r4, #26]
}
 8018a32:	4630      	mov	r0, r6
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8018a34:	f043 0303 	orr.w	r3, r3, #3
 8018a38:	76a3      	strb	r3, [r4, #26]
}
 8018a3a:	b004      	add	sp, #16
 8018a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8018a40:	7ea3      	ldrb	r3, [r4, #26]
    return ERR_BUF;
 8018a42:	f06f 0601 	mvn.w	r6, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8018a46:	f043 0303 	orr.w	r3, r3, #3
 8018a4a:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 8018a4c:	e7e7      	b.n	8018a1e <tcp_send_empty_ack+0x6a>
 8018a4e:	bf00      	nop

08018a50 <tcp_output>:
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018a50:	7d03      	ldrb	r3, [r0, #20]
 8018a52:	2b01      	cmp	r3, #1
{
 8018a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a58:	4605      	mov	r5, r0
 8018a5a:	b085      	sub	sp, #20
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018a5c:	f000 81a9 	beq.w	8018db2 <tcp_output+0x362>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018a60:	4bb4      	ldr	r3, [pc, #720]	; (8018d34 <tcp_output+0x2e4>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	42ab      	cmp	r3, r5
 8018a66:	f000 81a0 	beq.w	8018daa <tcp_output+0x35a>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018a6a:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
 8018a6e:	f8b5 2048 	ldrh.w	r2, [r5, #72]	; 0x48
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8018a72:	7eab      	ldrb	r3, [r5, #26]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018a74:	4297      	cmp	r7, r2
  seg = pcb->unsent;
 8018a76:	6eac      	ldr	r4, [r5, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018a78:	bf28      	it	cs
 8018a7a:	4617      	movcs	r7, r2
  if (pcb->flags & TF_ACK_NOW &&
 8018a7c:	0799      	lsls	r1, r3, #30
 8018a7e:	d50d      	bpl.n	8018a9c <tcp_output+0x4c>
 8018a80:	2c00      	cmp	r4, #0
 8018a82:	f000 80d7 	beq.w	8018c34 <tcp_output+0x1e4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8018a86:	6923      	ldr	r3, [r4, #16]
 8018a88:	6858      	ldr	r0, [r3, #4]
 8018a8a:	f7fa fbb7 	bl	80131fc <lwip_htonl>
 8018a8e:	8923      	ldrh	r3, [r4, #8]
 8018a90:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8018a92:	1a9b      	subs	r3, r3, r2
 8018a94:	4418      	add	r0, r3
     (seg == NULL ||
 8018a96:	42b8      	cmp	r0, r7
 8018a98:	f200 80cc 	bhi.w	8018c34 <tcp_output+0x1e4>
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018a9c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 8018a9e:	2e00      	cmp	r6, #0
 8018aa0:	d13a      	bne.n	8018b18 <tcp_output+0xc8>
    for (; useg->next != NULL; useg = useg->next);
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8018aa2:	f105 0904 	add.w	r9, r5, #4
 8018aa6:	4648      	mov	r0, r9
 8018aa8:	f003 f8a4 	bl	801bbf4 <ip4_route>
  if (netif == NULL) {
 8018aac:	4682      	mov	sl, r0
 8018aae:	2800      	cmp	r0, #0
 8018ab0:	f000 818e 	beq.w	8018dd0 <tcp_output+0x380>
    return ERR_RTE;
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018ab4:	682b      	ldr	r3, [r5, #0]
 8018ab6:	b90b      	cbnz	r3, 8018abc <tcp_output+0x6c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018ab8:	6843      	ldr	r3, [r0, #4]
 8018aba:	602b      	str	r3, [r5, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8018abc:	2c00      	cmp	r4, #0
 8018abe:	f000 80b0 	beq.w	8018c22 <tcp_output+0x1d2>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8018ac2:	6923      	ldr	r3, [r4, #16]
 8018ac4:	6858      	ldr	r0, [r3, #4]
 8018ac6:	f7fa fb99 	bl	80131fc <lwip_htonl>
 8018aca:	8923      	ldrh	r3, [r4, #8]
 8018acc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8018ace:	1a9b      	subs	r3, r3, r2
 8018ad0:	4418      	add	r0, r3
 8018ad2:	42b8      	cmp	r0, r7
 8018ad4:	f240 8094 	bls.w	8018c00 <tcp_output+0x1b0>
 8018ad8:	2f00      	cmp	r7, #0
 8018ada:	f000 8091 	beq.w	8018c00 <tcp_output+0x1b0>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8018ade:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8018ae2:	42bb      	cmp	r3, r7
 8018ae4:	f040 808c 	bne.w	8018c00 <tcp_output+0x1b0>
 8018ae8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	f040 8088 	bne.w	8018c00 <tcp_output+0x1b0>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8018af0:	f895 1095 	ldrb.w	r1, [r5, #149]	; 0x95
 8018af4:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8018af6:	7eab      	ldrb	r3, [r5, #26]
 8018af8:	b919      	cbnz	r1, 8018b02 <tcp_output+0xb2>
      pcb->persist_cnt = 0;
 8018afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018afe:	f8a5 1094 	strh.w	r1, [r5, #148]	; 0x94
    }
    seg = pcb->unsent;
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018b02:	2a00      	cmp	r2, #0
 8018b04:	f000 8092 	beq.w	8018c2c <tcp_output+0x1dc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8018b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  return ERR_OK;
 8018b0c:	2000      	movs	r0, #0
  pcb->flags &= ~TF_NAGLEMEMERR;
 8018b0e:	76ab      	strb	r3, [r5, #26]
}
 8018b10:	b005      	add	sp, #20
 8018b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b16:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8018b18:	6833      	ldr	r3, [r6, #0]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d1fb      	bne.n	8018b16 <tcp_output+0xc6>
 8018b1e:	e7c0      	b.n	8018aa2 <tcp_output+0x52>
    LWIP_ASSERT("RST not expected here!",
 8018b20:	4b85      	ldr	r3, [pc, #532]	; (8018d38 <tcp_output+0x2e8>)
 8018b22:	f240 4246 	movw	r2, #1094	; 0x446
 8018b26:	4985      	ldr	r1, [pc, #532]	; (8018d3c <tcp_output+0x2ec>)
 8018b28:	4885      	ldr	r0, [pc, #532]	; (8018d40 <tcp_output+0x2f0>)
 8018b2a:	f005 fc5d 	bl	801e3e8 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018b2e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8018b30:	b15b      	cbz	r3, 8018b4a <tcp_output+0xfa>
 8018b32:	7eab      	ldrb	r3, [r5, #26]
 8018b34:	f013 0f44 	tst.w	r3, #68	; 0x44
 8018b38:	d107      	bne.n	8018b4a <tcp_output+0xfa>
 8018b3a:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8018b3c:	2a00      	cmp	r2, #0
 8018b3e:	f000 80e4 	beq.w	8018d0a <tcp_output+0x2ba>
 8018b42:	6811      	ldr	r1, [r2, #0]
 8018b44:	2900      	cmp	r1, #0
 8018b46:	f000 80db 	beq.w	8018d00 <tcp_output+0x2b0>
    if (pcb->state != SYN_SENT) {
 8018b4a:	7d2b      	ldrb	r3, [r5, #20]
 8018b4c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8018b50:	2b02      	cmp	r3, #2
 8018b52:	d00a      	beq.n	8018b6a <tcp_output+0x11a>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018b54:	f8b8 b00c 	ldrh.w	fp, [r8, #12]
 8018b58:	2010      	movs	r0, #16
 8018b5a:	f7fa fb4b 	bl	80131f4 <lwip_htons>
 8018b5e:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8018b62:	ea4b 0000 	orr.w	r0, fp, r0
 8018b66:	f8a8 000c 	strh.w	r0, [r8, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8018b6a:	6863      	ldr	r3, [r4, #4]
    seg->oversize_left = 0;
 8018b6c:	2200      	movs	r2, #0
  if (seg->p->ref != 1) {
 8018b6e:	89db      	ldrh	r3, [r3, #14]
    seg->oversize_left = 0;
 8018b70:	8162      	strh	r2, [r4, #10]
  if (seg->p->ref != 1) {
 8018b72:	2b01      	cmp	r3, #1
 8018b74:	d06b      	beq.n	8018c4e <tcp_output+0x1fe>
    if (pcb->state != SYN_SENT) {
 8018b76:	7d2b      	ldrb	r3, [r5, #20]
    pcb->unsent = seg->next;
 8018b78:	6822      	ldr	r2, [r4, #0]
    if (pcb->state != SYN_SENT) {
 8018b7a:	2b02      	cmp	r3, #2
    pcb->unsent = seg->next;
 8018b7c:	66aa      	str	r2, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8018b7e:	d003      	beq.n	8018b88 <tcp_output+0x138>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8018b80:	7eab      	ldrb	r3, [r5, #26]
 8018b82:	f023 0303 	bic.w	r3, r3, #3
 8018b86:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018b88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018b8c:	f7fa fb36 	bl	80131fc <lwip_htonl>
 8018b90:	6923      	ldr	r3, [r4, #16]
 8018b92:	4680      	mov	r8, r0
 8018b94:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 8018b98:	8998      	ldrh	r0, [r3, #12]
 8018b9a:	f7fa fb2b 	bl	80131f4 <lwip_htons>
 8018b9e:	f010 0003 	ands.w	r0, r0, #3
 8018ba2:	44d8      	add	r8, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018ba4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018ba6:	bf18      	it	ne
 8018ba8:	2001      	movne	r0, #1
 8018baa:	4440      	add	r0, r8
    if (TCP_TCPLEN(seg) > 0) {
 8018bac:	f8b4 8008 	ldrh.w	r8, [r4, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018bb0:	1a1b      	subs	r3, r3, r0
 8018bb2:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 8018bb4:	6923      	ldr	r3, [r4, #16]
      pcb->snd_nxt = snd_nxt;
 8018bb6:	bfb8      	it	lt
 8018bb8:	64e8      	strlt	r0, [r5, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8018bba:	8998      	ldrh	r0, [r3, #12]
 8018bbc:	f7fa fb1a 	bl	80131f4 <lwip_htons>
 8018bc0:	f010 0003 	ands.w	r0, r0, #3
 8018bc4:	bf18      	it	ne
 8018bc6:	2001      	movne	r0, #1
 8018bc8:	eb10 0f08 	cmn.w	r0, r8
 8018bcc:	d038      	beq.n	8018c40 <tcp_output+0x1f0>
      seg->next = NULL;
 8018bce:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 8018bd0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      seg->next = NULL;
 8018bd2:	6022      	str	r2, [r4, #0]
      if (pcb->unacked == NULL) {
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d037      	beq.n	8018c48 <tcp_output+0x1f8>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018bd8:	6923      	ldr	r3, [r4, #16]
 8018bda:	6858      	ldr	r0, [r3, #4]
 8018bdc:	f7fa fb0e 	bl	80131fc <lwip_htonl>
 8018be0:	6933      	ldr	r3, [r6, #16]
 8018be2:	4680      	mov	r8, r0
 8018be4:	6858      	ldr	r0, [r3, #4]
 8018be6:	f7fa fb09 	bl	80131fc <lwip_htonl>
 8018bea:	eba8 0000 	sub.w	r0, r8, r0
 8018bee:	2800      	cmp	r0, #0
 8018bf0:	f2c0 809a 	blt.w	8018d28 <tcp_output+0x2d8>
          useg->next = seg;
 8018bf4:	6034      	str	r4, [r6, #0]
 8018bf6:	4626      	mov	r6, r4
    seg = pcb->unsent;
 8018bf8:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 8018bfa:	2c00      	cmp	r4, #0
 8018bfc:	f000 80eb 	beq.w	8018dd6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018c00:	6923      	ldr	r3, [r4, #16]
 8018c02:	6858      	ldr	r0, [r3, #4]
 8018c04:	f7fa fafa 	bl	80131fc <lwip_htonl>
 8018c08:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8018c0a:	8922      	ldrh	r2, [r4, #8]
 8018c0c:	1ac0      	subs	r0, r0, r3
 8018c0e:	4410      	add	r0, r2
  while (seg != NULL &&
 8018c10:	42b8      	cmp	r0, r7
 8018c12:	d806      	bhi.n	8018c22 <tcp_output+0x1d2>
    LWIP_ASSERT("RST not expected here!",
 8018c14:	6923      	ldr	r3, [r4, #16]
 8018c16:	8998      	ldrh	r0, [r3, #12]
 8018c18:	f7fa faec 	bl	80131f4 <lwip_htons>
 8018c1c:	0742      	lsls	r2, r0, #29
 8018c1e:	d586      	bpl.n	8018b2e <tcp_output+0xde>
 8018c20:	e77e      	b.n	8018b20 <tcp_output+0xd0>
 8018c22:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8018c24:	7eab      	ldrb	r3, [r5, #26]
  if (pcb->unsent == NULL) {
 8018c26:	2a00      	cmp	r2, #0
 8018c28:	f47f af6e 	bne.w	8018b08 <tcp_output+0xb8>
    pcb->unsent_oversize = 0;
 8018c2c:	2200      	movs	r2, #0
 8018c2e:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
 8018c32:	e769      	b.n	8018b08 <tcp_output+0xb8>
     return tcp_send_empty_ack(pcb);
 8018c34:	4628      	mov	r0, r5
}
 8018c36:	b005      	add	sp, #20
 8018c38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8018c3c:	f7ff beba 	b.w	80189b4 <tcp_send_empty_ack>
      tcp_seg_free(seg);
 8018c40:	4620      	mov	r0, r4
 8018c42:	f7fc fe8b 	bl	801595c <tcp_seg_free>
 8018c46:	e7d7      	b.n	8018bf8 <tcp_output+0x1a8>
        pcb->unacked = seg;
 8018c48:	66ec      	str	r4, [r5, #108]	; 0x6c
 8018c4a:	4626      	mov	r6, r4
 8018c4c:	e7d4      	b.n	8018bf8 <tcp_output+0x1a8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018c4e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8018c50:	f7fa fad4 	bl	80131fc <lwip_htonl>
 8018c54:	f8c8 0008 	str.w	r0, [r8, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018c58:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8018c5a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8018c5e:	f7fa fac9 	bl	80131f4 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018c62:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8018c64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018c66:	f8a8 000e 	strh.w	r0, [r8, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018c6a:	4413      	add	r3, r2

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018c6c:	f8d4 8010 	ldr.w	r8, [r4, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018c70:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018c72:	7b23      	ldrb	r3, [r4, #12]
 8018c74:	07db      	lsls	r3, r3, #31
 8018c76:	d47f      	bmi.n	8018d78 <tcp_output+0x328>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018c78:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	da01      	bge.n	8018c84 <tcp_output+0x234>
    pcb->rtime = 0;
 8018c80:	2300      	movs	r3, #0
 8018c82:	862b      	strh	r3, [r5, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018c84:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	f000 8084 	beq.w	8018d94 <tcp_output+0x344>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018c8c:	6861      	ldr	r1, [r4, #4]
  seg->p->len -= len;
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
 8018c8e:	f04f 0c00 	mov.w	ip, #0
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8018c92:	462b      	mov	r3, r5
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018c94:	684a      	ldr	r2, [r1, #4]
  seg->p->len -= len;
 8018c96:	8948      	ldrh	r0, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018c98:	eba8 0e02 	sub.w	lr, r8, r2
  seg->p->tot_len -= len;
 8018c9c:	890a      	ldrh	r2, [r1, #8]
  seg->p->payload = seg->tcphdr;
 8018c9e:	f8c1 8004 	str.w	r8, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018ca2:	fa1f fe8e 	uxth.w	lr, lr
  seg->p->tot_len -= len;
 8018ca6:	eba2 020e 	sub.w	r2, r2, lr
  seg->p->len -= len;
 8018caa:	eba0 000e 	sub.w	r0, r0, lr
  seg->p->tot_len -= len;
 8018cae:	b292      	uxth	r2, r2
  seg->p->len -= len;
 8018cb0:	8148      	strh	r0, [r1, #10]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8018cb2:	4608      	mov	r0, r1
  seg->p->tot_len -= len;
 8018cb4:	810a      	strh	r2, [r1, #8]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8018cb6:	2106      	movs	r1, #6
  seg->tcphdr->chksum = 0;
 8018cb8:	f888 c010 	strb.w	ip, [r8, #16]
 8018cbc:	f888 c011 	strb.w	ip, [r8, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8018cc0:	f8cd 9000 	str.w	r9, [sp]
 8018cc4:	f7fa fff8 	bl	8013cb8 <ip_chksum_pseudo>
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8018cc8:	f8df c078 	ldr.w	ip, [pc, #120]	; 8018d44 <tcp_output+0x2f4>

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018ccc:	f04f 0e06 	mov.w	lr, #6
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8018cd0:	f8a8 0010 	strh.w	r0, [r8, #16]
  TCP_STATS_INC(tcp.xmit);
 8018cd4:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018cd8:	464a      	mov	r2, r9
 8018cda:	6860      	ldr	r0, [r4, #4]
 8018cdc:	4629      	mov	r1, r5
  TCP_STATS_INC(tcp.xmit);
 8018cde:	3301      	adds	r3, #1
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018ce0:	e9cd ea01 	strd	lr, sl, [sp, #4]
  TCP_STATS_INC(tcp.xmit);
 8018ce4:	f8ac 3090 	strh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018ce8:	f895 c009 	ldrb.w	ip, [r5, #9]
 8018cec:	7aab      	ldrb	r3, [r5, #10]
 8018cee:	f8cd c000 	str.w	ip, [sp]
 8018cf2:	f003 f993 	bl	801c01c <ip4_output_if>
    if (err != ERR_OK) {
 8018cf6:	2800      	cmp	r0, #0
 8018cf8:	d163      	bne.n	8018dc2 <tcp_output+0x372>
 8018cfa:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8018cfe:	e73a      	b.n	8018b76 <tcp_output+0x126>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018d00:	8910      	ldrh	r0, [r2, #8]
 8018d02:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 8018d04:	4288      	cmp	r0, r1
 8018d06:	f4bf af20 	bcs.w	8018b4a <tcp_output+0xfa>
 8018d0a:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
 8018d0e:	2900      	cmp	r1, #0
 8018d10:	f43f af1b 	beq.w	8018b4a <tcp_output+0xfa>
 8018d14:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
 8018d18:	2908      	cmp	r1, #8
 8018d1a:	f63f af16 	bhi.w	8018b4a <tcp_output+0xfa>
 8018d1e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8018d22:	f47f af12 	bne.w	8018b4a <tcp_output+0xfa>
output_done:
 8018d26:	e6ec      	b.n	8018b02 <tcp_output+0xb2>
          while (*cur_seg &&
 8018d28:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018d2a:	f105 0b6c 	add.w	fp, r5, #108	; 0x6c
          while (*cur_seg &&
 8018d2e:	b983      	cbnz	r3, 8018d52 <tcp_output+0x302>
 8018d30:	e01e      	b.n	8018d70 <tcp_output+0x320>
 8018d32:	bf00      	nop
 8018d34:	200354a8 	.word	0x200354a8
 8018d38:	0803af04 	.word	0x0803af04
 8018d3c:	0803aebc 	.word	0x0803aebc
 8018d40:	08023618 	.word	0x08023618
 8018d44:	20035384 	.word	0x20035384
              cur_seg = &((*cur_seg)->next );
 8018d48:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 8018d4c:	f8db 3000 	ldr.w	r3, [fp]
 8018d50:	b173      	cbz	r3, 8018d70 <tcp_output+0x320>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018d52:	691b      	ldr	r3, [r3, #16]
 8018d54:	6858      	ldr	r0, [r3, #4]
 8018d56:	f7fa fa51 	bl	80131fc <lwip_htonl>
 8018d5a:	6923      	ldr	r3, [r4, #16]
 8018d5c:	4680      	mov	r8, r0
 8018d5e:	6858      	ldr	r0, [r3, #4]
 8018d60:	f7fa fa4c 	bl	80131fc <lwip_htonl>
 8018d64:	eba8 0000 	sub.w	r0, r8, r0
          while (*cur_seg &&
 8018d68:	2800      	cmp	r0, #0
 8018d6a:	dbed      	blt.n	8018d48 <tcp_output+0x2f8>
 8018d6c:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 8018d70:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 8018d72:	f8cb 4000 	str.w	r4, [fp]
 8018d76:	e73f      	b.n	8018bf8 <tcp_output+0x1a8>
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8018d78:	4649      	mov	r1, r9
 8018d7a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018d7e:	f7fd fc67 	bl	8016650 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018d82:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8018d86:	f7fa fa39 	bl	80131fc <lwip_htonl>
 8018d8a:	f8c8 0014 	str.w	r0, [r8, #20]
 8018d8e:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8018d92:	e771      	b.n	8018c78 <tcp_output+0x228>
    pcb->rttest = tcp_ticks;
 8018d94:	4b11      	ldr	r3, [pc, #68]	; (8018ddc <tcp_output+0x38c>)
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018d9a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018d9e:	f7fa fa2d 	bl	80131fc <lwip_htonl>
 8018da2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8018da6:	63a8      	str	r0, [r5, #56]	; 0x38
 8018da8:	e770      	b.n	8018c8c <tcp_output+0x23c>
    return ERR_OK;
 8018daa:	2000      	movs	r0, #0
}
 8018dac:	b005      	add	sp, #20
 8018dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018db2:	4b0b      	ldr	r3, [pc, #44]	; (8018de0 <tcp_output+0x390>)
 8018db4:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8018db8:	490a      	ldr	r1, [pc, #40]	; (8018de4 <tcp_output+0x394>)
 8018dba:	480b      	ldr	r0, [pc, #44]	; (8018de8 <tcp_output+0x398>)
 8018dbc:	f005 fb14 	bl	801e3e8 <iprintf>
 8018dc0:	e64e      	b.n	8018a60 <tcp_output+0x10>
      pcb->flags |= TF_NAGLEMEMERR;
 8018dc2:	7eab      	ldrb	r3, [r5, #26]
 8018dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018dc8:	76ab      	strb	r3, [r5, #26]
}
 8018dca:	b005      	add	sp, #20
 8018dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_RTE;
 8018dd0:	f06f 0003 	mvn.w	r0, #3
 8018dd4:	e69c      	b.n	8018b10 <tcp_output+0xc0>
 8018dd6:	7eab      	ldrb	r3, [r5, #26]
 8018dd8:	e728      	b.n	8018c2c <tcp_output+0x1dc>
 8018dda:	bf00      	nop
 8018ddc:	20035498 	.word	0x20035498
 8018de0:	0803af04 	.word	0x0803af04
 8018de4:	0803ae94 	.word	0x0803ae94
 8018de8:	08023618 	.word	0x08023618

08018dec <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8018dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df0:	b085      	sub	sp, #20
 8018df2:	4682      	mov	sl, r0
 8018df4:	4689      	mov	r9, r1
 8018df6:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8018df8:	2114      	movs	r1, #20
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	2001      	movs	r0, #1
{
 8018dfe:	461f      	mov	r7, r3
 8018e00:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018e04:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8018e08:	f7fb fe0c 	bl	8014a24 <pbuf_alloc>
  if (p == NULL) {
 8018e0c:	2800      	cmp	r0, #0
 8018e0e:	d052      	beq.n	8018eb6 <tcp_rst+0xca>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018e10:	8943      	ldrh	r3, [r0, #10]
 8018e12:	4605      	mov	r5, r0
 8018e14:	2b13      	cmp	r3, #19
 8018e16:	d946      	bls.n	8018ea6 <tcp_rst+0xba>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8018e18:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8018e1a:	4630      	mov	r0, r6
 8018e1c:	f7fa f9ea 	bl	80131f4 <lwip_htons>
  tcphdr->ackno = lwip_htonl(ackno);
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8018e20:	2600      	movs	r6, #0
  tcphdr->src = lwip_htons(local_port);
 8018e22:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8018e24:	4658      	mov	r0, fp
 8018e26:	f7fa f9e5 	bl	80131f4 <lwip_htons>
 8018e2a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8018e2c:	4650      	mov	r0, sl
 8018e2e:	f7fa f9e5 	bl	80131fc <lwip_htonl>
 8018e32:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8018e34:	4648      	mov	r0, r9
 8018e36:	f7fa f9e1 	bl	80131fc <lwip_htonl>
 8018e3a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8018e3c:	f245 0014 	movw	r0, #20500	; 0x5014
 8018e40:	f7fa f9d8 	bl	80131f4 <lwip_htons>
#endif
  tcphdr->chksum = 0;
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
 8018e44:	4a1d      	ldr	r2, [pc, #116]	; (8018ebc <tcp_rst+0xd0>)
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8018e46:	f04f 0c08 	mov.w	ip, #8
 8018e4a:	2160      	movs	r1, #96	; 0x60
  TCP_STATS_INC(tcp.xmit);
 8018e4c:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8018e50:	81a0      	strh	r0, [r4, #12]
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8018e52:	4638      	mov	r0, r7
  TCP_STATS_INC(tcp.xmit);
 8018e54:	3301      	adds	r3, #1
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8018e56:	f884 c00e 	strb.w	ip, [r4, #14]
 8018e5a:	73e1      	strb	r1, [r4, #15]
  tcphdr->chksum = 0;
 8018e5c:	7426      	strb	r6, [r4, #16]
 8018e5e:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8018e60:	74a6      	strb	r6, [r4, #18]
 8018e62:	74e6      	strb	r6, [r4, #19]
  TCP_STATS_INC(tcp.xmit);
 8018e64:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
  netif = ip_route(local_ip, remote_ip);
 8018e68:	f002 fec4 	bl	801bbf4 <ip4_route>
  if (netif != NULL) {
 8018e6c:	4681      	mov	r9, r0
 8018e6e:	b1a0      	cbz	r0, 8018e9a <tcp_rst+0xae>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018e70:	892a      	ldrh	r2, [r5, #8]
 8018e72:	4643      	mov	r3, r8
 8018e74:	2106      	movs	r1, #6
 8018e76:	9700      	str	r7, [sp, #0]
 8018e78:	4628      	mov	r0, r5
 8018e7a:	f7fa ff1d 	bl	8013cb8 <ip_chksum_pseudo>
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8018e7e:	f04f 0c06 	mov.w	ip, #6
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018e82:	8220      	strh	r0, [r4, #16]
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8018e84:	463a      	mov	r2, r7
 8018e86:	f8cd 9008 	str.w	r9, [sp, #8]
 8018e8a:	4641      	mov	r1, r8
 8018e8c:	9600      	str	r6, [sp, #0]
 8018e8e:	23ff      	movs	r3, #255	; 0xff
 8018e90:	f8cd c004 	str.w	ip, [sp, #4]
 8018e94:	4628      	mov	r0, r5
 8018e96:	f003 f8c1 	bl	801c01c <ip4_output_if>
  }
  pbuf_free(p);
 8018e9a:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018e9c:	b005      	add	sp, #20
 8018e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8018ea2:	f7fb bd51 	b.w	8014948 <pbuf_free>
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018ea6:	4b06      	ldr	r3, [pc, #24]	; (8018ec0 <tcp_rst+0xd4>)
 8018ea8:	f240 524d 	movw	r2, #1357	; 0x54d
 8018eac:	4905      	ldr	r1, [pc, #20]	; (8018ec4 <tcp_rst+0xd8>)
 8018eae:	4806      	ldr	r0, [pc, #24]	; (8018ec8 <tcp_rst+0xdc>)
 8018eb0:	f005 fa9a 	bl	801e3e8 <iprintf>
 8018eb4:	e7b0      	b.n	8018e18 <tcp_rst+0x2c>
}
 8018eb6:	b005      	add	sp, #20
 8018eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ebc:	20035384 	.word	0x20035384
 8018ec0:	0803af04 	.word	0x0803af04
 8018ec4:	0803aed4 	.word	0x0803aed4
 8018ec8:	08023618 	.word	0x08023618

08018ecc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018ecc:	4601      	mov	r1, r0
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8018ece:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8018ed0:	b1b8      	cbz	r0, 8018f02 <tcp_rexmit_rto+0x36>
 8018ed2:	4602      	mov	r2, r0
 8018ed4:	e000      	b.n	8018ed8 <tcp_rexmit_rto+0xc>
 8018ed6:	461a      	mov	r2, r3
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8018ed8:	6813      	ldr	r3, [r2, #0]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d1fb      	bne.n	8018ed6 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018ede:	6e8b      	ldr	r3, [r1, #104]	; 0x68
 8018ee0:	6013      	str	r3, [r2, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8018ee2:	b17b      	cbz	r3, 8018f04 <tcp_rexmit_rto+0x38>
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018ee4:	f891 3042 	ldrb.w	r3, [r1, #66]	; 0x42
  pcb->unacked = NULL;
 8018ee8:	2200      	movs	r2, #0
  if (pcb->nrtx < 0xFF) {
 8018eea:	2bff      	cmp	r3, #255	; 0xff
  pcb->unacked = NULL;
 8018eec:	e9c1 021a 	strd	r0, r2, [r1, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8018ef0:	d002      	beq.n	8018ef8 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 8018ef2:	3301      	adds	r3, #1
 8018ef4:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018ef8:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
 8018efa:	4608      	mov	r0, r1
  pcb->rttest = 0;
 8018efc:	634b      	str	r3, [r1, #52]	; 0x34
  tcp_output(pcb);
 8018efe:	f7ff bda7 	b.w	8018a50 <tcp_output>
}
 8018f02:	4770      	bx	lr
    pcb->unsent_oversize = seg->oversize_left;
 8018f04:	8953      	ldrh	r3, [r2, #10]
 8018f06:	f8a1 3064 	strh.w	r3, [r1, #100]	; 0x64
 8018f0a:	e7eb      	b.n	8018ee4 <tcp_rexmit_rto+0x18>

08018f0c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8018f0e:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 8018f10:	b326      	cbz	r6, 8018f5c <tcp_rexmit+0x50>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8018f12:	6832      	ldr	r2, [r6, #0]
 8018f14:	4607      	mov	r7, r0

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 8018f16:	6e83      	ldr	r3, [r0, #104]	; 0x68
  cur_seg = &(pcb->unsent);
 8018f18:	f100 0568 	add.w	r5, r0, #104	; 0x68
  pcb->unacked = seg->next;
 8018f1c:	66c2      	str	r2, [r0, #108]	; 0x6c
  while (*cur_seg &&
 8018f1e:	b91b      	cbnz	r3, 8018f28 <tcp_rexmit+0x1c>
 8018f20:	e00f      	b.n	8018f42 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8018f22:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8018f24:	682b      	ldr	r3, [r5, #0]
 8018f26:	b163      	cbz	r3, 8018f42 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018f28:	691b      	ldr	r3, [r3, #16]
 8018f2a:	6858      	ldr	r0, [r3, #4]
 8018f2c:	f7fa f966 	bl	80131fc <lwip_htonl>
 8018f30:	6933      	ldr	r3, [r6, #16]
 8018f32:	4604      	mov	r4, r0
 8018f34:	6858      	ldr	r0, [r3, #4]
 8018f36:	f7fa f961 	bl	80131fc <lwip_htonl>
 8018f3a:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 8018f3c:	2800      	cmp	r0, #0
 8018f3e:	dbf0      	blt.n	8018f22 <tcp_rexmit+0x16>
 8018f40:	682b      	ldr	r3, [r5, #0]
  }
  seg->next = *cur_seg;
 8018f42:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8018f44:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018f46:	6833      	ldr	r3, [r6, #0]
 8018f48:	b14b      	cbz	r3, 8018f5e <tcp_rexmit+0x52>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018f4a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8018f4e:	2bff      	cmp	r3, #255	; 0xff
 8018f50:	d002      	beq.n	8018f58 <tcp_rexmit+0x4c>
    ++pcb->nrtx;
 8018f52:	3301      	adds	r3, #1
 8018f54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018f58:	2300      	movs	r3, #0
 8018f5a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8018f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 8018f5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8018f62:	e7f2      	b.n	8018f4a <tcp_rexmit+0x3e>

08018f64 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018f64:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8018f66:	b322      	cbz	r2, 8018fb2 <tcp_rexmit_fast+0x4e>
{
 8018f68:	b510      	push	{r4, lr}
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018f6a:	7e82      	ldrb	r2, [r0, #26]
 8018f6c:	4604      	mov	r4, r0
 8018f6e:	0753      	lsls	r3, r2, #29
 8018f70:	d500      	bpl.n	8018f74 <tcp_rexmit_fast+0x10>
    pcb->flags |= TF_INFR;

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  }
}
 8018f72:	bd10      	pop	{r4, pc}
    tcp_rexmit(pcb);
 8018f74:	f7ff ffca 	bl	8018f0c <tcp_rexmit>
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018f78:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8018f7c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8018f80:	429a      	cmp	r2, r3
 8018f82:	bf38      	it	cc
 8018f84:	0853      	lsrcc	r3, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8018f86:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018f88:	bf28      	it	cs
 8018f8a:	085b      	lsrcs	r3, r3, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8018f8c:	0051      	lsls	r1, r2, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018f8e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8018f92:	428b      	cmp	r3, r1
 8018f94:	d202      	bcs.n	8018f9c <tcp_rexmit_fast+0x38>
      pcb->ssthresh = 2*pcb->mss;
 8018f96:	b28b      	uxth	r3, r1
 8018f98:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018f9c:	440a      	add	r2, r1
    pcb->flags |= TF_INFR;
 8018f9e:	7ea1      	ldrb	r1, [r4, #26]
    pcb->rtime = 0;
 8018fa0:	2000      	movs	r0, #0
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018fa2:	4413      	add	r3, r2
    pcb->flags |= TF_INFR;
 8018fa4:	f041 0204 	orr.w	r2, r1, #4
    pcb->rtime = 0;
 8018fa8:	8620      	strh	r0, [r4, #48]	; 0x30
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018faa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8018fae:	76a2      	strb	r2, [r4, #26]
}
 8018fb0:	bd10      	pop	{r4, pc}
 8018fb2:	4770      	bx	lr

08018fb4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fb8:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018fba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
 8018fbc:	b084      	sub	sp, #16
  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018fbe:	3801      	subs	r0, #1
 8018fc0:	f7fa f91c 	bl	80131fc <lwip_htonl>
 8018fc4:	2100      	movs	r1, #0
 8018fc6:	4602      	mov	r2, r0
 8018fc8:	4620      	mov	r0, r4
 8018fca:	f7ff f8a3 	bl	8018114 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 8018fce:	b380      	cbz	r0, 8019032 <tcp_keepalive+0x7e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8018fd0:	1d26      	adds	r6, r4, #4
 8018fd2:	4605      	mov	r5, r0
 8018fd4:	4630      	mov	r0, r6
 8018fd6:	f002 fe0d 	bl	801bbf4 <ip4_route>
  if (netif == NULL) {
 8018fda:	4607      	mov	r7, r0
 8018fdc:	b330      	cbz	r0, 801902c <tcp_keepalive+0x78>
    err = ERR_RTE;
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018fde:	892a      	ldrh	r2, [r5, #8]
 8018fe0:	4623      	mov	r3, r4
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8018fe2:	f8d5 8004 	ldr.w	r8, [r5, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018fe6:	2106      	movs	r1, #6
 8018fe8:	9600      	str	r6, [sp, #0]
 8018fea:	4628      	mov	r0, r5
 8018fec:	f7fa fe64 	bl	8013cb8 <ip_chksum_pseudo>
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 8018ff0:	f8df c044 	ldr.w	ip, [pc, #68]	; 8019038 <tcp_keepalive+0x84>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018ff4:	f8a8 0010 	strh.w	r0, [r8, #16]

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8018ff8:	f04f 0e00 	mov.w	lr, #0
    TCP_STATS_INC(tcp.xmit);
 8018ffc:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8019000:	2006      	movs	r0, #6
 8019002:	9702      	str	r7, [sp, #8]
 8019004:	4621      	mov	r1, r4
    TCP_STATS_INC(tcp.xmit);
 8019006:	3301      	adds	r3, #1
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8019008:	9001      	str	r0, [sp, #4]
 801900a:	4632      	mov	r2, r6
 801900c:	4628      	mov	r0, r5
    TCP_STATS_INC(tcp.xmit);
 801900e:	f8ac 3090 	strh.w	r3, [ip, #144]	; 0x90
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8019012:	7aa3      	ldrb	r3, [r4, #10]
 8019014:	f8cd e000 	str.w	lr, [sp]
 8019018:	f003 f800 	bl	801c01c <ip4_output_if>
 801901c:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801901e:	4628      	mov	r0, r5
 8019020:	f7fb fc92 	bl	8014948 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8019024:	4620      	mov	r0, r4
 8019026:	b004      	add	sp, #16
 8019028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ERR_RTE;
 801902c:	f06f 0403 	mvn.w	r4, #3
 8019030:	e7f5      	b.n	801901e <tcp_keepalive+0x6a>
    return ERR_MEM;
 8019032:	f04f 34ff 	mov.w	r4, #4294967295
 8019036:	e7f5      	b.n	8019024 <tcp_keepalive+0x70>
 8019038:	20035384 	.word	0x20035384

0801903c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8019040:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8019042:	b084      	sub	sp, #16

  if (seg == NULL) {
 8019044:	2c00      	cmp	r4, #0
 8019046:	d068      	beq.n	801911a <tcp_zero_window_probe+0xde>
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019048:	6923      	ldr	r3, [r4, #16]
 801904a:	4605      	mov	r5, r0
 801904c:	8998      	ldrh	r0, [r3, #12]
 801904e:	f7fa f8d1 	bl	80131f4 <lwip_htons>
 8019052:	07c2      	lsls	r2, r0, #31
 8019054:	6923      	ldr	r3, [r4, #16]
 8019056:	d449      	bmi.n	80190ec <tcp_zero_window_probe+0xb0>
 8019058:	685a      	ldr	r2, [r3, #4]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801905a:	2101      	movs	r1, #1
 801905c:	4628      	mov	r0, r5
 801905e:	f7ff f859 	bl	8018114 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 8019062:	4606      	mov	r6, r0
 8019064:	2800      	cmp	r0, #0
 8019066:	d062      	beq.n	801912e <tcp_zero_window_probe+0xf2>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019068:	6860      	ldr	r0, [r4, #4]
 801906a:	2201      	movs	r2, #1
 801906c:	8921      	ldrh	r1, [r4, #8]
 801906e:	8903      	ldrh	r3, [r0, #8]
  tcphdr = (struct tcp_hdr *)p->payload;
 8019070:	f8d6 8004 	ldr.w	r8, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019074:	1a5b      	subs	r3, r3, r1
 8019076:	f108 0114 	add.w	r1, r8, #20
 801907a:	b29b      	uxth	r3, r3
 801907c:	f7fb ff90 	bl	8014fa0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019080:	6923      	ldr	r3, [r4, #16]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019082:	1d2c      	adds	r4, r5, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019084:	6858      	ldr	r0, [r3, #4]
 8019086:	f7fa f8b9 	bl	80131fc <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801908a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801908c:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801908e:	1a1b      	subs	r3, r3, r0
 8019090:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8019092:	bfb8      	it	lt
 8019094:	64e8      	strlt	r0, [r5, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019096:	4620      	mov	r0, r4
 8019098:	f002 fdac 	bl	801bbf4 <ip4_route>
  if (netif == NULL) {
 801909c:	4607      	mov	r7, r0
 801909e:	2800      	cmp	r0, #0
 80190a0:	d042      	beq.n	8019128 <tcp_zero_window_probe+0xec>
    err = ERR_RTE;
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80190a2:	8932      	ldrh	r2, [r6, #8]
 80190a4:	462b      	mov	r3, r5
 80190a6:	9400      	str	r4, [sp, #0]
 80190a8:	2106      	movs	r1, #6
 80190aa:	4630      	mov	r0, r6
 80190ac:	f7fa fe04 	bl	8013cb8 <ip_chksum_pseudo>
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 80190b0:	f8df c088 	ldr.w	ip, [pc, #136]	; 801913c <tcp_zero_window_probe+0x100>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80190b4:	f8a8 0010 	strh.w	r0, [r8, #16]

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80190b8:	f04f 0e00 	mov.w	lr, #0
    TCP_STATS_INC(tcp.xmit);
 80190bc:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80190c0:	2006      	movs	r0, #6
 80190c2:	9702      	str	r7, [sp, #8]
 80190c4:	4622      	mov	r2, r4
    TCP_STATS_INC(tcp.xmit);
 80190c6:	3301      	adds	r3, #1
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80190c8:	9001      	str	r0, [sp, #4]
 80190ca:	4629      	mov	r1, r5
 80190cc:	4630      	mov	r0, r6
    TCP_STATS_INC(tcp.xmit);
 80190ce:	f8ac 3090 	strh.w	r3, [ip, #144]	; 0x90
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80190d2:	7aab      	ldrb	r3, [r5, #10]
 80190d4:	f8cd e000 	str.w	lr, [sp]
 80190d8:	f002 ffa0 	bl	801c01c <ip4_output_if>
 80190dc:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80190de:	4630      	mov	r0, r6
 80190e0:	f7fb fc32 	bl	8014948 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80190e4:	4620      	mov	r0, r4
 80190e6:	b004      	add	sp, #16
 80190e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80190ec:	8921      	ldrh	r1, [r4, #8]
 80190ee:	685a      	ldr	r2, [r3, #4]
 80190f0:	2900      	cmp	r1, #0
 80190f2:	d1b2      	bne.n	801905a <tcp_zero_window_probe+0x1e>
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80190f4:	4628      	mov	r0, r5
 80190f6:	f7ff f80d 	bl	8018114 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 80190fa:	4606      	mov	r6, r0
 80190fc:	b1b8      	cbz	r0, 801912e <tcp_zero_window_probe+0xf2>
  tcphdr = (struct tcp_hdr *)p->payload;
 80190fe:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019102:	2011      	movs	r0, #17
 8019104:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8019108:	f7fa f874 	bl	80131f4 <lwip_htons>
 801910c:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8019110:	b2bf      	uxth	r7, r7
 8019112:	4338      	orrs	r0, r7
 8019114:	f8a8 000c 	strh.w	r0, [r8, #12]
 8019118:	e7b2      	b.n	8019080 <tcp_zero_window_probe+0x44>
    seg = pcb->unsent;
 801911a:	6e84      	ldr	r4, [r0, #104]	; 0x68
  if (seg == NULL) {
 801911c:	2c00      	cmp	r4, #0
 801911e:	d193      	bne.n	8019048 <tcp_zero_window_probe+0xc>
}
 8019120:	4620      	mov	r0, r4
 8019122:	b004      	add	sp, #16
 8019124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ERR_RTE;
 8019128:	f06f 0403 	mvn.w	r4, #3
 801912c:	e7d7      	b.n	80190de <tcp_zero_window_probe+0xa2>
    return ERR_MEM;
 801912e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8019132:	4620      	mov	r0, r4
 8019134:	b004      	add	sp, #16
 8019136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801913a:	bf00      	nop
 801913c:	20035384 	.word	0x20035384

08019140 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019144:	4605      	mov	r5, r0
 8019146:	4688      	mov	r8, r1
 8019148:	4617      	mov	r7, r2
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801914a:	4925      	ldr	r1, [pc, #148]	; (80191e0 <sys_timeout+0xa0>)
 801914c:	22d2      	movs	r2, #210	; 0xd2
 801914e:	200c      	movs	r0, #12
 8019150:	f7fb f9de 	bl	8014510 <memp_malloc_fn>
  if (timeout == NULL) {
 8019154:	2800      	cmp	r0, #0
 8019156:	d02d      	beq.n	80191b4 <sys_timeout+0x74>
 8019158:	4604      	mov	r4, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  now = sys_now();
 801915a:	f7f5 fe23 	bl	800eda4 <sys_now>
  if (next_timeout == NULL) {
 801915e:	4a21      	ldr	r2, [pc, #132]	; (80191e4 <sys_timeout+0xa4>)
    diff = 0;
    timeouts_last_time = now;
 8019160:	4b21      	ldr	r3, [pc, #132]	; (80191e8 <sys_timeout+0xa8>)
  if (next_timeout == NULL) {
 8019162:	6816      	ldr	r6, [r2, #0]
 8019164:	2e00      	cmp	r6, #0
 8019166:	d02d      	beq.n	80191c4 <sys_timeout+0x84>
 8019168:	681b      	ldr	r3, [r3, #0]
  } else {
    diff = now - timeouts_last_time;
  }

  timeout->next = NULL;
 801916a:	2100      	movs	r1, #0
  timeout->h = handler;
 801916c:	f8c4 8008 	str.w	r8, [r4, #8]
 8019170:	1aeb      	subs	r3, r5, r3
  timeout->arg = arg;
 8019172:	60e7      	str	r7, [r4, #12]
  timeout->next = NULL;
 8019174:	6021      	str	r1, [r4, #0]
  timeout->time = msecs + diff;
 8019176:	4418      	add	r0, r3
 8019178:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
 801917a:	6873      	ldr	r3, [r6, #4]
 801917c:	42ab      	cmp	r3, r5
 801917e:	d813      	bhi.n	80191a8 <sys_timeout+0x68>
 8019180:	4631      	mov	r1, r6
 8019182:	e003      	b.n	801918c <sys_timeout+0x4c>
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
 8019184:	6853      	ldr	r3, [r2, #4]
 8019186:	4298      	cmp	r0, r3
 8019188:	d324      	bcc.n	80191d4 <sys_timeout+0x94>
 801918a:	4611      	mov	r1, r2
      timeout->time -= t->time;
 801918c:	1ac0      	subs	r0, r0, r3
      if (t->next == NULL || t->next->time > timeout->time) {
 801918e:	680a      	ldr	r2, [r1, #0]
      timeout->time -= t->time;
 8019190:	6060      	str	r0, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8019192:	2a00      	cmp	r2, #0
 8019194:	d1f6      	bne.n	8019184 <sys_timeout+0x44>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
        } else if (timeout->time > msecs) {
 8019196:	42a8      	cmp	r0, r5
 8019198:	d902      	bls.n	80191a0 <sys_timeout+0x60>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801919a:	6873      	ldr	r3, [r6, #4]
 801919c:	442b      	add	r3, r5
 801919e:	6063      	str	r3, [r4, #4]
        }
        timeout->next = t->next;
 80191a0:	6022      	str	r2, [r4, #0]
        t->next = timeout;
 80191a2:	600c      	str	r4, [r1, #0]
        break;
      }
    }
  }
}
 80191a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 80191a8:	1b5b      	subs	r3, r3, r5
    next_timeout = timeout;
 80191aa:	6014      	str	r4, [r2, #0]
    next_timeout->time -= msecs;
 80191ac:	6073      	str	r3, [r6, #4]
    timeout->next = next_timeout;
 80191ae:	6026      	str	r6, [r4, #0]
}
 80191b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80191b4:	4b0a      	ldr	r3, [pc, #40]	; (80191e0 <sys_timeout+0xa0>)
 80191b6:	22d4      	movs	r2, #212	; 0xd4
 80191b8:	490c      	ldr	r1, [pc, #48]	; (80191ec <sys_timeout+0xac>)
 80191ba:	480d      	ldr	r0, [pc, #52]	; (80191f0 <sys_timeout+0xb0>)
}
 80191bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80191c0:	f005 b912 	b.w	801e3e8 <iprintf>
  timeout->next = NULL;
 80191c4:	6026      	str	r6, [r4, #0]
  timeout->time = msecs + diff;
 80191c6:	6065      	str	r5, [r4, #4]
    next_timeout = timeout;
 80191c8:	6014      	str	r4, [r2, #0]
    timeouts_last_time = now;
 80191ca:	6018      	str	r0, [r3, #0]
  timeout->arg = arg;
 80191cc:	e9c4 8702 	strd	r8, r7, [r4, #8]
}
 80191d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          t->next->time -= timeout->time;
 80191d4:	1a18      	subs	r0, r3, r0
 80191d6:	6050      	str	r0, [r2, #4]
        timeout->next = t->next;
 80191d8:	6022      	str	r2, [r4, #0]
        t->next = timeout;
 80191da:	600c      	str	r4, [r1, #0]
 80191dc:	e7e2      	b.n	80191a4 <sys_timeout+0x64>
 80191de:	bf00      	nop
 80191e0:	0803b224 	.word	0x0803b224
 80191e4:	200214ec 	.word	0x200214ec
 80191e8:	200214f4 	.word	0x200214f4
 80191ec:	0803b258 	.word	0x0803b258
 80191f0:	08023618 	.word	0x08023618

080191f4 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80191f4:	4b0a      	ldr	r3, [pc, #40]	; (8019220 <tcp_timer_needed+0x2c>)
 80191f6:	681a      	ldr	r2, [r3, #0]
 80191f8:	b982      	cbnz	r2, 801921c <tcp_timer_needed+0x28>
 80191fa:	4a0a      	ldr	r2, [pc, #40]	; (8019224 <tcp_timer_needed+0x30>)
 80191fc:	6812      	ldr	r2, [r2, #0]
 80191fe:	b14a      	cbz	r2, 8019214 <tcp_timer_needed+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019200:	2200      	movs	r2, #0
 8019202:	4909      	ldr	r1, [pc, #36]	; (8019228 <tcp_timer_needed+0x34>)
 8019204:	20fa      	movs	r0, #250	; 0xfa
{
 8019206:	b410      	push	{r4}
    tcpip_tcp_timer_active = 1;
 8019208:	2401      	movs	r4, #1
 801920a:	601c      	str	r4, [r3, #0]
}
 801920c:	f85d 4b04 	ldr.w	r4, [sp], #4
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019210:	f7ff bf96 	b.w	8019140 <sys_timeout>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019214:	4a05      	ldr	r2, [pc, #20]	; (801922c <tcp_timer_needed+0x38>)
 8019216:	6812      	ldr	r2, [r2, #0]
 8019218:	2a00      	cmp	r2, #0
 801921a:	d1f1      	bne.n	8019200 <tcp_timer_needed+0xc>
 801921c:	4770      	bx	lr
 801921e:	bf00      	nop
 8019220:	200214f0 	.word	0x200214f0
 8019224:	20035494 	.word	0x20035494
 8019228:	08019231 	.word	0x08019231
 801922c:	200354a4 	.word	0x200354a4

08019230 <tcpip_tcp_timer>:
{
 8019230:	b508      	push	{r3, lr}
  tcp_tmr();
 8019232:	f7fd f851 	bl	80162d8 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019236:	4b08      	ldr	r3, [pc, #32]	; (8019258 <tcpip_tcp_timer+0x28>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	b913      	cbnz	r3, 8019242 <tcpip_tcp_timer+0x12>
 801923c:	4b07      	ldr	r3, [pc, #28]	; (801925c <tcpip_tcp_timer+0x2c>)
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	b133      	cbz	r3, 8019250 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019242:	2200      	movs	r2, #0
 8019244:	4906      	ldr	r1, [pc, #24]	; (8019260 <tcpip_tcp_timer+0x30>)
 8019246:	20fa      	movs	r0, #250	; 0xfa
}
 8019248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801924c:	f7ff bf78 	b.w	8019140 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8019250:	4a04      	ldr	r2, [pc, #16]	; (8019264 <tcpip_tcp_timer+0x34>)
 8019252:	6013      	str	r3, [r2, #0]
}
 8019254:	bd08      	pop	{r3, pc}
 8019256:	bf00      	nop
 8019258:	20035494 	.word	0x20035494
 801925c:	200354a4 	.word	0x200354a4
 8019260:	08019231 	.word	0x08019231
 8019264:	200214f0 	.word	0x200214f0

08019268 <sys_timeouts_init>:
{
 8019268:	b570      	push	{r4, r5, r6, lr}
 801926a:	4c0c      	ldr	r4, [pc, #48]	; (801929c <sys_timeouts_init+0x34>)
 801926c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8019270:	4e0b      	ldr	r6, [pc, #44]	; (80192a0 <sys_timeouts_init+0x38>)
 8019272:	f104 0520 	add.w	r5, r4, #32
 8019276:	4622      	mov	r2, r4
 8019278:	4631      	mov	r1, r6
 801927a:	f7ff ff61 	bl	8019140 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801927e:	42ac      	cmp	r4, r5
 8019280:	d007      	beq.n	8019292 <sys_timeouts_init+0x2a>
 8019282:	f854 0f08 	ldr.w	r0, [r4, #8]!
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8019286:	4631      	mov	r1, r6
 8019288:	4622      	mov	r2, r4
 801928a:	f7ff ff59 	bl	8019140 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801928e:	42ac      	cmp	r4, r5
 8019290:	d1f7      	bne.n	8019282 <sys_timeouts_init+0x1a>
  timeouts_last_time = sys_now();
 8019292:	f7f5 fd87 	bl	800eda4 <sys_now>
 8019296:	4b03      	ldr	r3, [pc, #12]	; (80192a4 <sys_timeouts_init+0x3c>)
 8019298:	6018      	str	r0, [r3, #0]
}
 801929a:	bd70      	pop	{r4, r5, r6, pc}
 801929c:	0803b1fc 	.word	0x0803b1fc
 80192a0:	080192a9 	.word	0x080192a9
 80192a4:	200214f4 	.word	0x200214f4

080192a8 <cyclic_timer>:
{
 80192a8:	b510      	push	{r4, lr}
 80192aa:	4604      	mov	r4, r0
  cyclic->handler();
 80192ac:	6843      	ldr	r3, [r0, #4]
 80192ae:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80192b0:	4903      	ldr	r1, [pc, #12]	; (80192c0 <cyclic_timer+0x18>)
 80192b2:	4622      	mov	r2, r4
 80192b4:	6820      	ldr	r0, [r4, #0]
}
 80192b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80192ba:	f7ff bf41 	b.w	8019140 <sys_timeout>
 80192be:	bf00      	nop
 80192c0:	080192a9 	.word	0x080192a9

080192c4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80192c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192c8:	4c28      	ldr	r4, [pc, #160]	; (801936c <sys_timeouts_mbox_fetch+0xa8>)
 80192ca:	b083      	sub	sp, #12
 80192cc:	4680      	mov	r8, r0
 80192ce:	4689      	mov	r9, r1
  diff = sys_now() - timeouts_last_time;
 80192d0:	4d27      	ldr	r5, [pc, #156]	; (8019370 <sys_timeouts_mbox_fetch+0xac>)
 80192d2:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 80192d4:	4f27      	ldr	r7, [pc, #156]	; (8019374 <sys_timeouts_mbox_fetch+0xb0>)
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80192d6:	b18b      	cbz	r3, 80192fc <sys_timeouts_mbox_fetch+0x38>
  diff = sys_now() - timeouts_last_time;
 80192d8:	f7f5 fd64 	bl	800eda4 <sys_now>
 80192dc:	682a      	ldr	r2, [r5, #0]
  if (diff > next_timeout->time) {
 80192de:	6823      	ldr	r3, [r4, #0]
  diff = sys_now() - timeouts_last_time;
 80192e0:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 80192e2:	685a      	ldr	r2, [r3, #4]
 80192e4:	4290      	cmp	r0, r2
 80192e6:	d811      	bhi.n	801930c <sys_timeouts_mbox_fetch+0x48>
    sys_arch_mbox_fetch(mbox, msg, 0);
    return;
  }

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80192e8:	1a12      	subs	r2, r2, r0
 80192ea:	d00f      	beq.n	801930c <sys_timeouts_mbox_fetch+0x48>
 80192ec:	4649      	mov	r1, r9
 80192ee:	4640      	mov	r0, r8
 80192f0:	f003 fcb6 	bl	801cc60 <sys_arch_mbox_fetch>
 80192f4:	3001      	adds	r0, #1
 80192f6:	d135      	bne.n	8019364 <sys_timeouts_mbox_fetch+0xa0>
  if (next_timeout) {
 80192f8:	6823      	ldr	r3, [r4, #0]
 80192fa:	b93b      	cbnz	r3, 801930c <sys_timeouts_mbox_fetch+0x48>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80192fc:	4649      	mov	r1, r9
 80192fe:	4640      	mov	r0, r8
 8019300:	2200      	movs	r2, #0
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 8019302:	b003      	add	sp, #12
 8019304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 8019308:	f003 bcaa 	b.w	801cc60 <sys_arch_mbox_fetch>
    now = sys_now();
 801930c:	f7f5 fd4a 	bl	800eda4 <sys_now>
    diff = now - timeouts_last_time;
 8019310:	682b      	ldr	r3, [r5, #0]
 8019312:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 8019316:	6823      	ldr	r3, [r4, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019318:	200c      	movs	r0, #12
 801931a:	4619      	mov	r1, r3
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801931c:	2b00      	cmp	r3, #0
 801931e:	d0ed      	beq.n	80192fc <sys_timeouts_mbox_fetch+0x38>
 8019320:	685a      	ldr	r2, [r3, #4]
 8019322:	455a      	cmp	r2, fp
        diff -= tmptimeout->time;
 8019324:	ebab 0b02 	sub.w	fp, fp, r2
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8019328:	d8d5      	bhi.n	80192d6 <sys_timeouts_mbox_fetch+0x12>
        next_timeout = tmptimeout->next;
 801932a:	681e      	ldr	r6, [r3, #0]
        handler = tmptimeout->h;
 801932c:	f8d3 a008 	ldr.w	sl, [r3, #8]
        next_timeout = tmptimeout->next;
 8019330:	9601      	str	r6, [sp, #4]
        timeouts_last_time += tmptimeout->time;
 8019332:	682e      	ldr	r6, [r5, #0]
 8019334:	4432      	add	r2, r6
        next_timeout = tmptimeout->next;
 8019336:	9e01      	ldr	r6, [sp, #4]
        timeouts_last_time += tmptimeout->time;
 8019338:	602a      	str	r2, [r5, #0]
        next_timeout = tmptimeout->next;
 801933a:	6026      	str	r6, [r4, #0]
        arg = tmptimeout->arg;
 801933c:	68de      	ldr	r6, [r3, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801933e:	f7fb f90b 	bl	8014558 <memp_free>
          LOCK_TCPIP_CORE();
 8019342:	4638      	mov	r0, r7
        if (handler != NULL) {
 8019344:	f1ba 0f00 	cmp.w	sl, #0
 8019348:	d0e5      	beq.n	8019316 <sys_timeouts_mbox_fetch+0x52>
          LOCK_TCPIP_CORE();
 801934a:	f003 fce3 	bl	801cd14 <sys_mutex_lock>
          handler(arg);
 801934e:	4630      	mov	r0, r6
 8019350:	47d0      	blx	sl
          UNLOCK_TCPIP_CORE();
 8019352:	4638      	mov	r0, r7
 8019354:	f003 fce4 	bl	801cd20 <sys_mutex_unlock>
      tmptimeout = next_timeout;
 8019358:	6823      	ldr	r3, [r4, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801935a:	200c      	movs	r0, #12
 801935c:	4619      	mov	r1, r3
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801935e:	2b00      	cmp	r3, #0
 8019360:	d1de      	bne.n	8019320 <sys_timeouts_mbox_fetch+0x5c>
 8019362:	e7cb      	b.n	80192fc <sys_timeouts_mbox_fetch+0x38>
}
 8019364:	b003      	add	sp, #12
 8019366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801936a:	bf00      	nop
 801936c:	200214ec 	.word	0x200214ec
 8019370:	200214f4 	.word	0x200214f4
 8019374:	200259e4 	.word	0x200259e4

08019378 <udp_init>:
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8019378:	4770      	bx	lr
 801937a:	bf00      	nop

0801937c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 8019380:	4d63      	ldr	r5, [pc, #396]	; (8019510 <udp_input+0x194>)
{
 8019382:	b085      	sub	sp, #20

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019384:	8942      	ldrh	r2, [r0, #10]
  UDP_STATS_INC(udp.recv);
 8019386:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801938a:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 801938c:	f103 0301 	add.w	r3, r3, #1
 8019390:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 8019394:	f240 8093 	bls.w	80194be <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019398:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8019528 <udp_input+0x1ac>
 801939c:	4606      	mov	r6, r0
  udphdr = (struct udp_hdr *)p->payload;
 801939e:	6844      	ldr	r4, [r0, #4]
 80193a0:	4688      	mov	r8, r1
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80193a2:	f8da 0014 	ldr.w	r0, [sl, #20]
 80193a6:	f8da 1000 	ldr.w	r1, [sl]
 80193aa:	f002 fe49 	bl	801c040 <ip4_addr_isbroadcast_u32>
 80193ae:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80193b0:	8820      	ldrh	r0, [r4, #0]
 80193b2:	f7f9 ff1f 	bl	80131f4 <lwip_htons>
 80193b6:	4681      	mov	r9, r0
  dest = lwip_ntohs(udphdr->dest);
 80193b8:	8860      	ldrh	r0, [r4, #2]
 80193ba:	f7f9 ff1b 	bl	80131f4 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80193be:	4b55      	ldr	r3, [pc, #340]	; (8019514 <udp_input+0x198>)
 80193c0:	f8d3 b000 	ldr.w	fp, [r3]
 80193c4:	f1bb 0f00 	cmp.w	fp, #0
 80193c8:	f000 809c 	beq.w	8019504 <udp_input+0x188>
  uncon_pcb = NULL;
 80193cc:	f04f 0c00 	mov.w	ip, #0
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80193d0:	465c      	mov	r4, fp
 80193d2:	e9da 3e04 	ldrd	r3, lr, [sl, #16]
 80193d6:	9303      	str	r3, [sp, #12]
  prev = NULL;
 80193d8:	4663      	mov	r3, ip
 80193da:	e004      	b.n	80193e6 <udp_input+0x6a>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80193dc:	68e2      	ldr	r2, [r4, #12]
 80193de:	4623      	mov	r3, r4
 80193e0:	2a00      	cmp	r2, #0
 80193e2:	d043      	beq.n	801946c <udp_input+0xf0>
 80193e4:	4614      	mov	r4, r2
    if ((pcb->local_port == dest) &&
 80193e6:	8a62      	ldrh	r2, [r4, #18]
 80193e8:	4282      	cmp	r2, r0
 80193ea:	d1f7      	bne.n	80193dc <udp_input+0x60>
 80193ec:	6821      	ldr	r1, [r4, #0]
    if (broadcast != 0) {
 80193ee:	2f00      	cmp	r7, #0
 80193f0:	d034      	beq.n	801945c <udp_input+0xe0>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80193f2:	b141      	cbz	r1, 8019406 <udp_input+0x8a>
 80193f4:	f1be 3fff 	cmp.w	lr, #4294967295
 80193f8:	d005      	beq.n	8019406 <udp_input+0x8a>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80193fa:	ea8e 0101 	eor.w	r1, lr, r1
 80193fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019402:	4211      	tst	r1, r2
 8019404:	d1ea      	bne.n	80193dc <udp_input+0x60>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8019406:	7c22      	ldrb	r2, [r4, #16]
 8019408:	0752      	lsls	r2, r2, #29
 801940a:	d403      	bmi.n	8019414 <udp_input+0x98>
 801940c:	f1bc 0f00 	cmp.w	ip, #0
 8019410:	bf08      	it	eq
 8019412:	46a4      	moveq	ip, r4
      if ((pcb->remote_port == src) &&
 8019414:	8aa2      	ldrh	r2, [r4, #20]
 8019416:	454a      	cmp	r2, r9
 8019418:	d1e0      	bne.n	80193dc <udp_input+0x60>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801941a:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801941c:	b112      	cbz	r2, 8019424 <udp_input+0xa8>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801941e:	9903      	ldr	r1, [sp, #12]
 8019420:	428a      	cmp	r2, r1
 8019422:	d1db      	bne.n	80193dc <udp_input+0x60>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019424:	2b00      	cmp	r3, #0
 8019426:	d067      	beq.n	80194f8 <udp_input+0x17c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019428:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 801942a:	493a      	ldr	r1, [pc, #232]	; (8019514 <udp_input+0x198>)
          prev->next = pcb->next;
 801942c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801942e:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 8019430:	f8c4 b00c 	str.w	fp, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8019434:	f06f 0107 	mvn.w	r1, #7
 8019438:	4630      	mov	r0, r6
 801943a:	f7fb fa7d 	bl	8014938 <pbuf_header>
 801943e:	2800      	cmp	r0, #0
 8019440:	d14e      	bne.n	80194e0 <udp_input+0x164>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019442:	69a5      	ldr	r5, [r4, #24]
 8019444:	2d00      	cmp	r5, #0
 8019446:	d049      	beq.n	80194dc <udp_input+0x160>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019448:	69e0      	ldr	r0, [r4, #28]
 801944a:	4632      	mov	r2, r6
 801944c:	4621      	mov	r1, r4
 801944e:	4b32      	ldr	r3, [pc, #200]	; (8019518 <udp_input+0x19c>)
 8019450:	f8cd 9000 	str.w	r9, [sp]
 8019454:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019456:	b005      	add	sp, #20
 8019458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801945c:	2900      	cmp	r1, #0
 801945e:	d0d2      	beq.n	8019406 <udp_input+0x8a>
 8019460:	458e      	cmp	lr, r1
 8019462:	d0d0      	beq.n	8019406 <udp_input+0x8a>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019464:	68e2      	ldr	r2, [r4, #12]
 8019466:	4623      	mov	r3, r4
 8019468:	2a00      	cmp	r2, #0
 801946a:	d1bb      	bne.n	80193e4 <udp_input+0x68>
  if (pcb != NULL) {
 801946c:	f1bc 0f00 	cmp.w	ip, #0
 8019470:	d14b      	bne.n	801950a <udp_input+0x18e>
  if (for_us) {
 8019472:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019476:	4573      	cmp	r3, lr
 8019478:	d130      	bne.n	80194dc <udp_input+0x160>
    if (pbuf_header(p, -UDP_HLEN)) {
 801947a:	f06f 0107 	mvn.w	r1, #7
 801947e:	4630      	mov	r0, r6
 8019480:	f7fb fa5a 	bl	8014938 <pbuf_header>
 8019484:	bb60      	cbnz	r0, 80194e0 <udp_input+0x164>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019486:	b987      	cbnz	r7, 80194aa <udp_input+0x12e>
 8019488:	f8da 3014 	ldr.w	r3, [sl, #20]
 801948c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019490:	2be0      	cmp	r3, #224	; 0xe0
 8019492:	d00a      	beq.n	80194aa <udp_input+0x12e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019494:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 8019498:	4630      	mov	r0, r6
 801949a:	3108      	adds	r1, #8
 801949c:	b209      	sxth	r1, r1
 801949e:	f7fb fa4f 	bl	8014940 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80194a2:	2103      	movs	r1, #3
 80194a4:	4630      	mov	r0, r6
 80194a6:	f002 fb99 	bl	801bbdc <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 80194aa:	f8b5 2088 	ldrh.w	r2, [r5, #136]	; 0x88
      pbuf_free(p);
 80194ae:	4630      	mov	r0, r6
      UDP_STATS_INC(udp.drop);
 80194b0:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
      UDP_STATS_INC(udp.proterr);
 80194b4:	3201      	adds	r2, #1
      UDP_STATS_INC(udp.drop);
 80194b6:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 80194b8:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
 80194bc:	e007      	b.n	80194ce <udp_input+0x152>
    UDP_STATS_INC(udp.lenerr);
 80194be:	f8b5 2082 	ldrh.w	r2, [r5, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 80194c2:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
    UDP_STATS_INC(udp.lenerr);
 80194c6:	3201      	adds	r2, #1
    UDP_STATS_INC(udp.drop);
 80194c8:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 80194ca:	f8a5 2082 	strh.w	r2, [r5, #130]	; 0x82
      UDP_STATS_INC(udp.drop);
 80194ce:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
}
 80194d2:	b005      	add	sp, #20
 80194d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80194d8:	f7fb ba36 	b.w	8014948 <pbuf_free>
        pbuf_free(p);
 80194dc:	4630      	mov	r0, r6
 80194de:	e7f8      	b.n	80194d2 <udp_input+0x156>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80194e0:	4b0e      	ldr	r3, [pc, #56]	; (801951c <udp_input+0x1a0>)
 80194e2:	f240 1255 	movw	r2, #341	; 0x155
 80194e6:	490e      	ldr	r1, [pc, #56]	; (8019520 <udp_input+0x1a4>)
 80194e8:	480e      	ldr	r0, [pc, #56]	; (8019524 <udp_input+0x1a8>)
 80194ea:	f004 ff7d 	bl	801e3e8 <iprintf>
      UDP_STATS_INC(udp.drop);
 80194ee:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
      pbuf_free(p);
 80194f2:	4630      	mov	r0, r6
      UDP_STATS_INC(udp.drop);
 80194f4:	3301      	adds	r3, #1
 80194f6:	e7ea      	b.n	80194ce <udp_input+0x152>
          UDP_STATS_INC(udp.cachehit);
 80194f8:	f8b5 308e 	ldrh.w	r3, [r5, #142]	; 0x8e
 80194fc:	3301      	adds	r3, #1
 80194fe:	f8a5 308e 	strh.w	r3, [r5, #142]	; 0x8e
 8019502:	e797      	b.n	8019434 <udp_input+0xb8>
 8019504:	f8da e014 	ldr.w	lr, [sl, #20]
 8019508:	e7b3      	b.n	8019472 <udp_input+0xf6>
 801950a:	4664      	mov	r4, ip
 801950c:	e792      	b.n	8019434 <udp_input+0xb8>
 801950e:	bf00      	nop
 8019510:	20035384 	.word	0x20035384
 8019514:	200354ac 	.word	0x200354ac
 8019518:	20025a84 	.word	0x20025a84
 801951c:	0803b298 	.word	0x0803b298
 8019520:	0803b2c8 	.word	0x0803b2c8
 8019524:	08023618 	.word	0x08023618
 8019528:	20025a74 	.word	0x20025a74

0801952c <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801952c:	4b34      	ldr	r3, [pc, #208]	; (8019600 <udp_bind+0xd4>)
 801952e:	2900      	cmp	r1, #0
 8019530:	bf08      	it	eq
 8019532:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8019534:	2800      	cmp	r0, #0
 8019536:	d05e      	beq.n	80195f6 <udp_bind+0xca>
{
 8019538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801953c:	4f31      	ldr	r7, [pc, #196]	; (8019604 <udp_bind+0xd8>)
 801953e:	683e      	ldr	r6, [r7, #0]
 8019540:	b1de      	cbz	r6, 801957a <udp_bind+0x4e>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019542:	42b0      	cmp	r0, r6
 8019544:	d044      	beq.n	80195d0 <udp_bind+0xa4>
 8019546:	4634      	mov	r4, r6
 8019548:	e001      	b.n	801954e <udp_bind+0x22>
 801954a:	42a0      	cmp	r0, r4
 801954c:	d040      	beq.n	80195d0 <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801954e:	68e4      	ldr	r4, [r4, #12]
 8019550:	2c00      	cmp	r4, #0
 8019552:	d1fa      	bne.n	801954a <udp_bind+0x1e>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8019554:	b1a2      	cbz	r2, 8019580 <udp_bind+0x54>
 8019556:	680d      	ldr	r5, [r1, #0]
 8019558:	4633      	mov	r3, r6
 801955a:	e001      	b.n	8019560 <udp_bind+0x34>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801955c:	68db      	ldr	r3, [r3, #12]
 801955e:	b353      	cbz	r3, 80195b6 <udp_bind+0x8a>
      if (pcb != ipcb) {
 8019560:	4298      	cmp	r0, r3
 8019562:	d0fb      	beq.n	801955c <udp_bind+0x30>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019564:	8a59      	ldrh	r1, [r3, #18]
 8019566:	4291      	cmp	r1, r2
 8019568:	d1f8      	bne.n	801955c <udp_bind+0x30>
 801956a:	6819      	ldr	r1, [r3, #0]
 801956c:	42a9      	cmp	r1, r5
 801956e:	d1f5      	bne.n	801955c <udp_bind+0x30>
      return ERR_USE;
 8019570:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 8019574:	4618      	mov	r0, r3
 8019576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801957a:	2a00      	cmp	r2, #0
 801957c:	d137      	bne.n	80195ee <udp_bind+0xc2>
  rebind = 0;
 801957e:	4634      	mov	r4, r6
 8019580:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8019608 <udp_bind+0xdc>
again:
 8019584:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019588:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801958c:	f8b8 2000 	ldrh.w	r2, [r8]
 8019590:	4572      	cmp	r2, lr
 8019592:	d029      	beq.n	80195e8 <udp_bind+0xbc>
 8019594:	3201      	adds	r2, #1
 8019596:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019598:	b156      	cbz	r6, 80195b0 <udp_bind+0x84>
    if (pcb->local_port == udp_port) {
 801959a:	8a73      	ldrh	r3, [r6, #18]
 801959c:	4293      	cmp	r3, r2
 801959e:	d019      	beq.n	80195d4 <udp_bind+0xa8>
 80195a0:	4633      	mov	r3, r6
 80195a2:	e002      	b.n	80195aa <udp_bind+0x7e>
 80195a4:	8a5d      	ldrh	r5, [r3, #18]
 80195a6:	4295      	cmp	r5, r2
 80195a8:	d014      	beq.n	80195d4 <udp_bind+0xa8>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80195aa:	68db      	ldr	r3, [r3, #12]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d1f9      	bne.n	80195a4 <udp_bind+0x78>
 80195b0:	680d      	ldr	r5, [r1, #0]
 80195b2:	f8a8 2000 	strh.w	r2, [r8]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80195b6:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 80195b8:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 80195ba:	b92c      	cbnz	r4, 80195c8 <udp_bind+0x9c>
  return ERR_OK;
 80195bc:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 80195be:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 80195c0:	6038      	str	r0, [r7, #0]
}
 80195c2:	4618      	mov	r0, r3
 80195c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_OK;
 80195c8:	2300      	movs	r3, #0
}
 80195ca:	4618      	mov	r0, r3
 80195cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 80195d0:	2401      	movs	r4, #1
 80195d2:	e7bf      	b.n	8019554 <udp_bind+0x28>
 80195d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80195d8:	fa1f fc8c 	uxth.w	ip, ip
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80195dc:	f1bc 0f00 	cmp.w	ip, #0
 80195e0:	d1d6      	bne.n	8019590 <udp_bind+0x64>
 80195e2:	f8a8 2000 	strh.w	r2, [r8]
 80195e6:	e7c3      	b.n	8019570 <udp_bind+0x44>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80195e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80195ec:	e7d4      	b.n	8019598 <udp_bind+0x6c>
 80195ee:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 80195f0:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80195f2:	6003      	str	r3, [r0, #0]
 80195f4:	e7e2      	b.n	80195bc <udp_bind+0x90>
    return ERR_VAL;
 80195f6:	f06f 0305 	mvn.w	r3, #5
}
 80195fa:	4618      	mov	r0, r3
 80195fc:	4770      	bx	lr
 80195fe:	bf00      	nop
 8019600:	0803bb0c 	.word	0x0803bb0c
 8019604:	200354ac 	.word	0x200354ac
 8019608:	20000446 	.word	0x20000446

0801960c <udp_sendto_if_src>:
{
 801960c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019610:	b085      	sub	sp, #20
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8019612:	2800      	cmp	r0, #0
 8019614:	d062      	beq.n	80196dc <udp_sendto_if_src+0xd0>
 8019616:	2a00      	cmp	r2, #0
 8019618:	d060      	beq.n	80196dc <udp_sendto_if_src+0xd0>
 801961a:	4690      	mov	r8, r2
  if (pcb->local_port == 0) {
 801961c:	8a42      	ldrh	r2, [r0, #18]
 801961e:	4604      	mov	r4, r0
 8019620:	4699      	mov	r9, r3
 8019622:	460d      	mov	r5, r1
 8019624:	2a00      	cmp	r2, #0
 8019626:	d037      	beq.n	8019698 <udp_sendto_if_src+0x8c>
  if (pbuf_header(p, UDP_HLEN)) {
 8019628:	2108      	movs	r1, #8
 801962a:	4628      	mov	r0, r5
 801962c:	f7fb f984 	bl	8014938 <pbuf_header>
 8019630:	2800      	cmp	r0, #0
 8019632:	d13d      	bne.n	80196b0 <udp_sendto_if_src+0xa4>
 8019634:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019636:	8973      	ldrh	r3, [r6, #10]
 8019638:	2b07      	cmp	r3, #7
 801963a:	d947      	bls.n	80196cc <udp_sendto_if_src+0xc0>
  udphdr = (struct udp_hdr *)q->payload;
 801963c:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801963e:	8a60      	ldrh	r0, [r4, #18]
 8019640:	f7f9 fdd8 	bl	80131f4 <lwip_htons>
 8019644:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019646:	4648      	mov	r0, r9
 8019648:	f7f9 fdd4 	bl	80131f4 <lwip_htons>
  udphdr->chksum = 0x0000;
 801964c:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801964e:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 8019650:	71bb      	strb	r3, [r7, #6]
 8019652:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8019654:	8930      	ldrh	r0, [r6, #8]
 8019656:	f7f9 fdcd 	bl	80131f4 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801965a:	f04f 0c11 	mov.w	ip, #17
    udphdr->len = lwip_htons(q->tot_len);
 801965e:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019660:	4642      	mov	r2, r8
 8019662:	7aa3      	ldrb	r3, [r4, #10]
 8019664:	f8cd c004 	str.w	ip, [sp, #4]
 8019668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801966c:	9002      	str	r0, [sp, #8]
 801966e:	4630      	mov	r0, r6
 8019670:	7a64      	ldrb	r4, [r4, #9]
 8019672:	9400      	str	r4, [sp, #0]
 8019674:	f002 fc26 	bl	801bec4 <ip4_output_if_src>
  if (q != p) {
 8019678:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801967a:	4607      	mov	r7, r0
  if (q != p) {
 801967c:	d002      	beq.n	8019684 <udp_sendto_if_src+0x78>
    pbuf_free(q);
 801967e:	4630      	mov	r0, r6
 8019680:	f7fb f962 	bl	8014948 <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 8019684:	4a18      	ldr	r2, [pc, #96]	; (80196e8 <udp_sendto_if_src+0xdc>)
 8019686:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 801968a:	3301      	adds	r3, #1
 801968c:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
}
 8019690:	4638      	mov	r0, r7
 8019692:	b005      	add	sp, #20
 8019694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019698:	4601      	mov	r1, r0
 801969a:	f7ff ff47 	bl	801952c <udp_bind>
    if (err != ERR_OK) {
 801969e:	4607      	mov	r7, r0
 80196a0:	2800      	cmp	r0, #0
 80196a2:	d1f5      	bne.n	8019690 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 80196a4:	2108      	movs	r1, #8
 80196a6:	4628      	mov	r0, r5
 80196a8:	f7fb f946 	bl	8014938 <pbuf_header>
 80196ac:	2800      	cmp	r0, #0
 80196ae:	d0c1      	beq.n	8019634 <udp_sendto_if_src+0x28>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80196b0:	2200      	movs	r2, #0
 80196b2:	2108      	movs	r1, #8
 80196b4:	2001      	movs	r0, #1
 80196b6:	f7fb f9b5 	bl	8014a24 <pbuf_alloc>
    if (q == NULL) {
 80196ba:	4606      	mov	r6, r0
 80196bc:	b188      	cbz	r0, 80196e2 <udp_sendto_if_src+0xd6>
    if (p->tot_len != 0) {
 80196be:	892b      	ldrh	r3, [r5, #8]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d0b8      	beq.n	8019636 <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 80196c4:	4629      	mov	r1, r5
 80196c6:	f7fb fb97 	bl	8014df8 <pbuf_chain>
 80196ca:	e7b4      	b.n	8019636 <udp_sendto_if_src+0x2a>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80196cc:	4b07      	ldr	r3, [pc, #28]	; (80196ec <udp_sendto_if_src+0xe0>)
 80196ce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80196d2:	4907      	ldr	r1, [pc, #28]	; (80196f0 <udp_sendto_if_src+0xe4>)
 80196d4:	4807      	ldr	r0, [pc, #28]	; (80196f4 <udp_sendto_if_src+0xe8>)
 80196d6:	f004 fe87 	bl	801e3e8 <iprintf>
 80196da:	e7af      	b.n	801963c <udp_sendto_if_src+0x30>
    return ERR_VAL;
 80196dc:	f06f 0705 	mvn.w	r7, #5
 80196e0:	e7d6      	b.n	8019690 <udp_sendto_if_src+0x84>
      return ERR_MEM;
 80196e2:	f04f 37ff 	mov.w	r7, #4294967295
 80196e6:	e7d3      	b.n	8019690 <udp_sendto_if_src+0x84>
 80196e8:	20035384 	.word	0x20035384
 80196ec:	0803b298 	.word	0x0803b298
 80196f0:	0803b2dc 	.word	0x0803b2dc
 80196f4:	08023618 	.word	0x08023618

080196f8 <udp_sendto_if>:
{
 80196f8:	b570      	push	{r4, r5, r6, lr}
 80196fa:	b082      	sub	sp, #8
 80196fc:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80196fe:	b190      	cbz	r0, 8019726 <udp_sendto_if+0x2e>
 8019700:	b18a      	cbz	r2, 8019726 <udp_sendto_if+0x2e>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019702:	6805      	ldr	r5, [r0, #0]
 8019704:	b935      	cbnz	r5, 8019714 <udp_sendto_if+0x1c>
    src_ip = netif_ip_addr4(netif);
 8019706:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019708:	e9cd 4500 	strd	r4, r5, [sp]
 801970c:	f7ff ff7e 	bl	801960c <udp_sendto_if_src>
}
 8019710:	b002      	add	sp, #8
 8019712:	bd70      	pop	{r4, r5, r6, pc}
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019714:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019718:	2ee0      	cmp	r6, #224	; 0xe0
 801971a:	d0f4      	beq.n	8019706 <udp_sendto_if+0xe>
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801971c:	6866      	ldr	r6, [r4, #4]
 801971e:	42b5      	cmp	r5, r6
 8019720:	d104      	bne.n	801972c <udp_sendto_if+0x34>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019722:	4605      	mov	r5, r0
 8019724:	e7f0      	b.n	8019708 <udp_sendto_if+0x10>
    return ERR_VAL;
 8019726:	f06f 0005 	mvn.w	r0, #5
 801972a:	e7f1      	b.n	8019710 <udp_sendto_if+0x18>
      return ERR_RTE;
 801972c:	f06f 0003 	mvn.w	r0, #3
 8019730:	e7ee      	b.n	8019710 <udp_sendto_if+0x18>
 8019732:	bf00      	nop

08019734 <udp_sendto>:
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8019734:	b198      	cbz	r0, 801975e <udp_sendto+0x2a>
 8019736:	b192      	cbz	r2, 801975e <udp_sendto+0x2a>
{
 8019738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801973a:	4605      	mov	r5, r0
 801973c:	b083      	sub	sp, #12
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 801973e:	4610      	mov	r0, r2
 8019740:	461f      	mov	r7, r3
 8019742:	4614      	mov	r4, r2
 8019744:	460e      	mov	r6, r1
 8019746:	f002 fa55 	bl	801bbf4 <ip4_route>
  if (netif == NULL) {
 801974a:	b158      	cbz	r0, 8019764 <udp_sendto+0x30>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801974c:	9000      	str	r0, [sp, #0]
 801974e:	463b      	mov	r3, r7
 8019750:	4622      	mov	r2, r4
 8019752:	4631      	mov	r1, r6
 8019754:	4628      	mov	r0, r5
 8019756:	f7ff ffcf 	bl	80196f8 <udp_sendto_if>
}
 801975a:	b003      	add	sp, #12
 801975c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 801975e:	f06f 0005 	mvn.w	r0, #5
}
 8019762:	4770      	bx	lr
    UDP_STATS_INC(udp.rterr);
 8019764:	4a04      	ldr	r2, [pc, #16]	; (8019778 <udp_sendto+0x44>)
 8019766:	f06f 0003 	mvn.w	r0, #3
 801976a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 801976e:	3301      	adds	r3, #1
 8019770:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 8019774:	e7f1      	b.n	801975a <udp_sendto+0x26>
 8019776:	bf00      	nop
 8019778:	20035384 	.word	0x20035384

0801977c <udp_connect>:
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801977c:	b328      	cbz	r0, 80197ca <udp_connect+0x4e>
 801977e:	b321      	cbz	r1, 80197ca <udp_connect+0x4e>
{
 8019780:	b570      	push	{r4, r5, r6, lr}
 8019782:	4616      	mov	r6, r2
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 8019784:	8a42      	ldrh	r2, [r0, #18]
 8019786:	4604      	mov	r4, r0
 8019788:	460d      	mov	r5, r1
 801978a:	b1c2      	cbz	r2, 80197be <udp_connect+0x42>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801978c:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801978e:	4910      	ldr	r1, [pc, #64]	; (80197d0 <udp_connect+0x54>)
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019790:	6828      	ldr	r0, [r5, #0]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019792:	f043 0304 	orr.w	r3, r3, #4
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019796:	680a      	ldr	r2, [r1, #0]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019798:	6060      	str	r0, [r4, #4]
  pcb->remote_port = port;
 801979a:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801979c:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801979e:	b142      	cbz	r2, 80197b2 <udp_connect+0x36>
    if (pcb == ipcb) {
 80197a0:	4294      	cmp	r4, r2
 80197a2:	d00a      	beq.n	80197ba <udp_connect+0x3e>
 80197a4:	4613      	mov	r3, r2
 80197a6:	e001      	b.n	80197ac <udp_connect+0x30>
 80197a8:	429c      	cmp	r4, r3
 80197aa:	d006      	beq.n	80197ba <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80197ac:	68db      	ldr	r3, [r3, #12]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d1fa      	bne.n	80197a8 <udp_connect+0x2c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80197b2:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
  return ERR_OK;
 80197b4:	2000      	movs	r0, #0
  udp_pcbs = pcb;
 80197b6:	600c      	str	r4, [r1, #0]
}
 80197b8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 80197ba:	2000      	movs	r0, #0
}
 80197bc:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80197be:	4601      	mov	r1, r0
 80197c0:	f7ff feb4 	bl	801952c <udp_bind>
    if (err != ERR_OK) {
 80197c4:	2800      	cmp	r0, #0
 80197c6:	d0e1      	beq.n	801978c <udp_connect+0x10>
}
 80197c8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80197ca:	f06f 0005 	mvn.w	r0, #5
}
 80197ce:	4770      	bx	lr
 80197d0:	200354ac 	.word	0x200354ac

080197d4 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 80197d4:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 80197d8:	4770      	bx	lr
 80197da:	bf00      	nop

080197dc <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80197dc:	4b0c      	ldr	r3, [pc, #48]	; (8019810 <udp_remove+0x34>)
{
 80197de:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 80197e0:	681a      	ldr	r2, [r3, #0]
 80197e2:	4282      	cmp	r2, r0
 80197e4:	d00a      	beq.n	80197fc <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80197e6:	b132      	cbz	r2, 80197f6 <udp_remove+0x1a>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80197e8:	68d3      	ldr	r3, [r2, #12]
 80197ea:	b123      	cbz	r3, 80197f6 <udp_remove+0x1a>
 80197ec:	4299      	cmp	r1, r3
 80197ee:	d00a      	beq.n	8019806 <udp_remove+0x2a>
 80197f0:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80197f2:	2a00      	cmp	r2, #0
 80197f4:	d1f8      	bne.n	80197e8 <udp_remove+0xc>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80197f6:	2001      	movs	r0, #1
 80197f8:	f7fa beae 	b.w	8014558 <memp_free>
    udp_pcbs = udp_pcbs->next;
 80197fc:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80197fe:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 8019800:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 8019802:	f7fa bea9 	b.w	8014558 <memp_free>
        pcb2->next = pcb->next;
 8019806:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 8019808:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801980a:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801980c:	f7fa bea4 	b.w	8014558 <memp_free>
 8019810:	200354ac 	.word	0x200354ac

08019814 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019814:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019816:	f240 4252 	movw	r2, #1106	; 0x452
 801981a:	4907      	ldr	r1, [pc, #28]	; (8019838 <udp_new+0x24>)
 801981c:	2001      	movs	r0, #1
 801981e:	f7fa fe77 	bl	8014510 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019822:	4604      	mov	r4, r0
 8019824:	b128      	cbz	r0, 8019832 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019826:	2220      	movs	r2, #32
 8019828:	2100      	movs	r1, #0
 801982a:	f003 fe5d 	bl	801d4e8 <memset>
    pcb->ttl = UDP_TTL;
 801982e:	23ff      	movs	r3, #255	; 0xff
 8019830:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8019832:	4620      	mov	r0, r4
 8019834:	bd10      	pop	{r4, pc}
 8019836:	bf00      	nop
 8019838:	0803b298 	.word	0x0803b298

0801983c <udp_new_ip_type>:
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  struct udp_pcb *pcb;
  pcb = udp_new();
 801983c:	f7ff bfea 	b.w	8019814 <udp_new>

08019840 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019840:	b1a8      	cbz	r0, 801986e <udp_netif_ip_addr_changed+0x2e>
 8019842:	6802      	ldr	r2, [r0, #0]
 8019844:	b199      	cbz	r1, 801986e <udp_netif_ip_addr_changed+0x2e>
 8019846:	b192      	cbz	r2, 801986e <udp_netif_ip_addr_changed+0x2e>
 8019848:	680b      	ldr	r3, [r1, #0]
 801984a:	b183      	cbz	r3, 801986e <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801984c:	4b08      	ldr	r3, [pc, #32]	; (8019870 <udp_netif_ip_addr_changed+0x30>)
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	b16b      	cbz	r3, 801986e <udp_netif_ip_addr_changed+0x2e>
{
 8019852:	b410      	push	{r4}
 8019854:	e000      	b.n	8019858 <udp_netif_ip_addr_changed+0x18>
 8019856:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019858:	681c      	ldr	r4, [r3, #0]
 801985a:	4294      	cmp	r4, r2
 801985c:	d101      	bne.n	8019862 <udp_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801985e:	680a      	ldr	r2, [r1, #0]
 8019860:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019862:	68db      	ldr	r3, [r3, #12]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d1f6      	bne.n	8019856 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 8019868:	f85d 4b04 	ldr.w	r4, [sp], #4
 801986c:	4770      	bx	lr
 801986e:	4770      	bx	lr
 8019870:	200354ac 	.word	0x200354ac

08019874 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8019874:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019876:	6a84      	ldr	r4, [r0, #40]	; 0x28
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8019878:	7a63      	ldrb	r3, [r4, #9]
 801987a:	2b08      	cmp	r3, #8
 801987c:	d004      	beq.n	8019888 <dhcp_check+0x14>
    dhcp->state = new_state;
    dhcp->tries = 0;
 801987e:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8019880:	2208      	movs	r2, #8
    dhcp->tries = 0;
 8019882:	72a3      	strb	r3, [r4, #10]
    dhcp->state = new_state;
 8019884:	7262      	strb	r2, [r4, #9]
    dhcp->request_timeout = 0;
 8019886:	82e3      	strh	r3, [r4, #22]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8019888:	2200      	movs	r2, #0
 801988a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801988e:	f001 fe7d 	bl	801b58c <etharp_query>
  if (dhcp->tries < 255) {
 8019892:	7aa3      	ldrb	r3, [r4, #10]
 8019894:	2bff      	cmp	r3, #255	; 0xff
 8019896:	d001      	beq.n	801989c <dhcp_check+0x28>
    dhcp->tries++;
 8019898:	3301      	adds	r3, #1
 801989a:	72a3      	strb	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801989c:	2301      	movs	r3, #1
 801989e:	82e3      	strh	r3, [r4, #22]
}
 80198a0:	bd10      	pop	{r4, pc}
 80198a2:	bf00      	nop

080198a4 <dhcp_bind>:
{
 80198a4:	b510      	push	{r4, lr}
 80198a6:	b082      	sub	sp, #8
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80198a8:	2800      	cmp	r0, #0
 80198aa:	d076      	beq.n	801999a <dhcp_bind+0xf6>
  dhcp = netif_dhcp_data(netif);
 80198ac:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80198ae:	2900      	cmp	r1, #0
 80198b0:	d07c      	beq.n	80199ac <dhcp_bind+0x108>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80198b2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  dhcp->lease_used = 0;
 80198b4:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80198b6:	1c5c      	adds	r4, r3, #1
  dhcp->lease_used = 0;
 80198b8:	840a      	strh	r2, [r1, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80198ba:	d00b      	beq.n	80198d4 <dhcp_bind+0x30>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80198bc:	331e      	adds	r3, #30
 80198be:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
 80198c2:	fba2 2303 	umull	r2, r3, r2, r3
 80198c6:	095b      	lsrs	r3, r3, #5
     if (timeout > 0xffff) {
 80198c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80198cc:	d25a      	bcs.n	8019984 <dhcp_bind+0xe0>
     if (dhcp->t0_timeout == 0) {
 80198ce:	b903      	cbnz	r3, 80198d2 <dhcp_bind+0x2e>
       dhcp->t0_timeout = 1;
 80198d0:	2301      	movs	r3, #1
 80198d2:	844b      	strh	r3, [r1, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80198d4:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80198d6:	1c53      	adds	r3, r2, #1
 80198d8:	d040      	beq.n	801995c <dhcp_bind+0xb8>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80198da:	321e      	adds	r2, #30
 80198dc:	4b3f      	ldr	r3, [pc, #252]	; (80199dc <dhcp_bind+0x138>)
 80198de:	fba3 3202 	umull	r3, r2, r3, r2
 80198e2:	0952      	lsrs	r2, r2, #5
    if (timeout > 0xffff) {
 80198e4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80198e8:	d248      	bcs.n	801997c <dhcp_bind+0xd8>
    if (dhcp->t1_timeout == 0) {
 80198ea:	2a00      	cmp	r2, #0
 80198ec:	d172      	bne.n	80199d4 <dhcp_bind+0x130>
      dhcp->t1_timeout = 1;
 80198ee:	2301      	movs	r3, #1
 80198f0:	461a      	mov	r2, r3
 80198f2:	830b      	strh	r3, [r1, #24]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80198f4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80198f6:	838a      	strh	r2, [r1, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80198f8:	1c5c      	adds	r4, r3, #1
 80198fa:	d033      	beq.n	8019964 <dhcp_bind+0xc0>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80198fc:	331e      	adds	r3, #30
 80198fe:	4c37      	ldr	r4, [pc, #220]	; (80199dc <dhcp_bind+0x138>)
 8019900:	fba4 4303 	umull	r4, r3, r4, r3
 8019904:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 8019906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801990a:	d242      	bcs.n	8019992 <dhcp_bind+0xee>
    if (dhcp->t2_timeout == 0) {
 801990c:	2b00      	cmp	r3, #0
 801990e:	d15e      	bne.n	80199ce <dhcp_bind+0x12a>
      dhcp->t2_timeout = 1;
 8019910:	2401      	movs	r4, #1
 8019912:	4623      	mov	r3, r4
 8019914:	834c      	strh	r4, [r1, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8019916:	2401      	movs	r4, #1
 8019918:	83cb      	strh	r3, [r1, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801991a:	4293      	cmp	r3, r2
 801991c:	d802      	bhi.n	8019924 <dhcp_bind+0x80>
 801991e:	b10c      	cbz	r4, 8019924 <dhcp_bind+0x80>
    dhcp->t1_timeout = 0;
 8019920:	2300      	movs	r3, #0
 8019922:	830b      	strh	r3, [r1, #24]
  if (dhcp->subnet_mask_given) {
 8019924:	7acb      	ldrb	r3, [r1, #11]
 8019926:	b313      	cbz	r3, 801996e <dhcp_bind+0xca>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8019928:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801992a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801992c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801992e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8019930:	b92b      	cbnz	r3, 801993e <dhcp_bind+0x9a>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8019932:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8019934:	9a00      	ldr	r2, [sp, #0]
 8019936:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8019938:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801993c:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801993e:	7a4b      	ldrb	r3, [r1, #9]
 8019940:	2b0a      	cmp	r3, #10
 8019942:	d004      	beq.n	801994e <dhcp_bind+0xaa>
    dhcp->tries = 0;
 8019944:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8019946:	220a      	movs	r2, #10
    dhcp->tries = 0;
 8019948:	728b      	strb	r3, [r1, #10]
    dhcp->state = new_state;
 801994a:	724a      	strb	r2, [r1, #9]
    dhcp->request_timeout = 0;
 801994c:	82cb      	strh	r3, [r1, #22]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801994e:	3128      	adds	r1, #40	; 0x28
 8019950:	ab01      	add	r3, sp, #4
 8019952:	466a      	mov	r2, sp
 8019954:	f7fa fe6a 	bl	801462c <netif_set_addr>
}
 8019958:	b002      	add	sp, #8
 801995a:	bd10      	pop	{r4, pc}
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801995c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801995e:	8b0a      	ldrh	r2, [r1, #24]
 8019960:	1c5c      	adds	r4, r3, #1
 8019962:	d1cb      	bne.n	80198fc <dhcp_bind+0x58>
 8019964:	8b4b      	ldrh	r3, [r1, #26]
 8019966:	1c1c      	adds	r4, r3, #0
 8019968:	bf18      	it	ne
 801996a:	2401      	movne	r4, #1
 801996c:	e7d5      	b.n	801991a <dhcp_bind+0x76>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801996e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    if (first_octet <= 127) {
 8019972:	061a      	lsls	r2, r3, #24
 8019974:	d423      	bmi.n	80199be <dhcp_bind+0x11a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8019976:	23ff      	movs	r3, #255	; 0xff
 8019978:	9300      	str	r3, [sp, #0]
 801997a:	e7d7      	b.n	801992c <dhcp_bind+0x88>
    dhcp->t1_timeout = (u16_t)timeout;
 801997c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019980:	830a      	strh	r2, [r1, #24]
 8019982:	e7b7      	b.n	80198f4 <dhcp_bind+0x50>
     dhcp->t0_timeout = (u16_t)timeout;
 8019984:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019988:	6b8a      	ldr	r2, [r1, #56]	; 0x38
     dhcp->t0_timeout = (u16_t)timeout;
 801998a:	844b      	strh	r3, [r1, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801998c:	1c53      	adds	r3, r2, #1
 801998e:	d1a4      	bne.n	80198da <dhcp_bind+0x36>
 8019990:	e7e4      	b.n	801995c <dhcp_bind+0xb8>
    dhcp->t2_timeout = (u16_t)timeout;
 8019992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019996:	834b      	strh	r3, [r1, #26]
 8019998:	e7bd      	b.n	8019916 <dhcp_bind+0x72>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801999a:	4b11      	ldr	r3, [pc, #68]	; (80199e0 <dhcp_bind+0x13c>)
 801999c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80199a0:	4910      	ldr	r1, [pc, #64]	; (80199e4 <dhcp_bind+0x140>)
 80199a2:	4811      	ldr	r0, [pc, #68]	; (80199e8 <dhcp_bind+0x144>)
 80199a4:	f004 fd20 	bl	801e3e8 <iprintf>
}
 80199a8:	b002      	add	sp, #8
 80199aa:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80199ac:	4b0c      	ldr	r3, [pc, #48]	; (80199e0 <dhcp_bind+0x13c>)
 80199ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80199b2:	490e      	ldr	r1, [pc, #56]	; (80199ec <dhcp_bind+0x148>)
 80199b4:	480c      	ldr	r0, [pc, #48]	; (80199e8 <dhcp_bind+0x144>)
 80199b6:	f004 fd17 	bl	801e3e8 <iprintf>
}
 80199ba:	b002      	add	sp, #8
 80199bc:	bd10      	pop	{r4, pc}
    } else if (first_octet >= 192) {
 80199be:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80199c0:	bf8c      	ite	hi
 80199c2:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80199c6:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80199ca:	9300      	str	r3, [sp, #0]
 80199cc:	e7ae      	b.n	801992c <dhcp_bind+0x88>
    dhcp->t2_timeout = (u16_t)timeout;
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	834b      	strh	r3, [r1, #26]
 80199d2:	e7a0      	b.n	8019916 <dhcp_bind+0x72>
    dhcp->t1_timeout = (u16_t)timeout;
 80199d4:	b292      	uxth	r2, r2
 80199d6:	830a      	strh	r2, [r1, #24]
 80199d8:	e78c      	b.n	80198f4 <dhcp_bind+0x50>
 80199da:	bf00      	nop
 80199dc:	88888889 	.word	0x88888889
 80199e0:	0803b30c 	.word	0x0803b30c
 80199e4:	0803b344 	.word	0x0803b344
 80199e8:	08023618 	.word	0x08023618
 80199ec:	0803b360 	.word	0x0803b360

080199f0 <dhcp_inc_pcb_refcount>:
{
 80199f0:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_pcb_refcount == 0) {
 80199f2:	4c15      	ldr	r4, [pc, #84]	; (8019a48 <dhcp_inc_pcb_refcount+0x58>)
 80199f4:	7823      	ldrb	r3, [r4, #0]
 80199f6:	b9fb      	cbnz	r3, 8019a38 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80199f8:	4d14      	ldr	r5, [pc, #80]	; (8019a4c <dhcp_inc_pcb_refcount+0x5c>)
 80199fa:	682b      	ldr	r3, [r5, #0]
 80199fc:	b12b      	cbz	r3, 8019a0a <dhcp_inc_pcb_refcount+0x1a>
 80199fe:	4b14      	ldr	r3, [pc, #80]	; (8019a50 <dhcp_inc_pcb_refcount+0x60>)
 8019a00:	22d9      	movs	r2, #217	; 0xd9
 8019a02:	4914      	ldr	r1, [pc, #80]	; (8019a54 <dhcp_inc_pcb_refcount+0x64>)
 8019a04:	4814      	ldr	r0, [pc, #80]	; (8019a58 <dhcp_inc_pcb_refcount+0x68>)
 8019a06:	f004 fcef 	bl	801e3e8 <iprintf>
    dhcp_pcb = udp_new();
 8019a0a:	f7ff ff03 	bl	8019814 <udp_new>
 8019a0e:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 8019a10:	b1b0      	cbz	r0, 8019a40 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8019a12:	7a06      	ldrb	r6, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8019a14:	2244      	movs	r2, #68	; 0x44
 8019a16:	4911      	ldr	r1, [pc, #68]	; (8019a5c <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8019a18:	f046 0620 	orr.w	r6, r6, #32
 8019a1c:	7206      	strb	r6, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8019a1e:	f7ff fd85 	bl	801952c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8019a22:	2243      	movs	r2, #67	; 0x43
 8019a24:	490d      	ldr	r1, [pc, #52]	; (8019a5c <dhcp_inc_pcb_refcount+0x6c>)
 8019a26:	6828      	ldr	r0, [r5, #0]
 8019a28:	f7ff fea8 	bl	801977c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8019a2c:	6828      	ldr	r0, [r5, #0]
 8019a2e:	2200      	movs	r2, #0
 8019a30:	490b      	ldr	r1, [pc, #44]	; (8019a60 <dhcp_inc_pcb_refcount+0x70>)
 8019a32:	f7ff fecf 	bl	80197d4 <udp_recv>
 8019a36:	7823      	ldrb	r3, [r4, #0]
  dhcp_pcb_refcount++;
 8019a38:	3301      	adds	r3, #1
  return ERR_OK;
 8019a3a:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8019a3c:	7023      	strb	r3, [r4, #0]
}
 8019a3e:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 8019a40:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019a44:	bd70      	pop	{r4, r5, r6, pc}
 8019a46:	bf00      	nop
 8019a48:	200214fc 	.word	0x200214fc
 8019a4c:	200214f8 	.word	0x200214f8
 8019a50:	0803b30c 	.word	0x0803b30c
 8019a54:	0803b51c 	.word	0x0803b51c
 8019a58:	08023618 	.word	0x08023618
 8019a5c:	0803bb0c 	.word	0x0803bb0c
 8019a60:	0801a305 	.word	0x0801a305

08019a64 <dhcp_option_short.isra.0>:
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019a64:	880b      	ldrh	r3, [r1, #0]
dhcp_option_short(struct dhcp *dhcp, u16_t value)
 8019a66:	b570      	push	{r4, r5, r6, lr}
 8019a68:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019a6a:	1c99      	adds	r1, r3, #2
dhcp_option_short(struct dhcp *dhcp, u16_t value)
 8019a6c:	4606      	mov	r6, r0
 8019a6e:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019a70:	2944      	cmp	r1, #68	; 0x44
 8019a72:	d908      	bls.n	8019a86 <dhcp_option_short.isra.0+0x22>
 8019a74:	4b0a      	ldr	r3, [pc, #40]	; (8019aa0 <dhcp_option_short.isra.0+0x3c>)
 8019a76:	f240 5282 	movw	r2, #1410	; 0x582
 8019a7a:	490a      	ldr	r1, [pc, #40]	; (8019aa4 <dhcp_option_short.isra.0+0x40>)
 8019a7c:	480a      	ldr	r0, [pc, #40]	; (8019aa8 <dhcp_option_short.isra.0+0x44>)
 8019a7e:	f004 fcb3 	bl	801e3e8 <iprintf>
 8019a82:	8823      	ldrh	r3, [r4, #0]
 8019a84:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8019a86:	6830      	ldr	r0, [r6, #0]
 8019a88:	1c5a      	adds	r2, r3, #1
 8019a8a:	0a2e      	lsrs	r6, r5, #8
 8019a8c:	4403      	add	r3, r0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8019a8e:	fa10 f282 	uxtah	r2, r0, r2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8019a92:	f883 60f0 	strb.w	r6, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8019a96:	8021      	strh	r1, [r4, #0]
 8019a98:	f882 50f0 	strb.w	r5, [r2, #240]	; 0xf0
}
 8019a9c:	bd70      	pop	{r4, r5, r6, pc}
 8019a9e:	bf00      	nop
 8019aa0:	0803b30c 	.word	0x0803b30c
 8019aa4:	0803b5cc 	.word	0x0803b5cc
 8019aa8:	08023618 	.word	0x08023618

08019aac <dhcp_option.isra.1>:
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
 8019aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aae:	461d      	mov	r5, r3
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019ab0:	880b      	ldrh	r3, [r1, #0]
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
 8019ab2:	460c      	mov	r4, r1
 8019ab4:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019ab6:	1c99      	adds	r1, r3, #2
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
 8019ab8:	4607      	mov	r7, r0
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019aba:	194a      	adds	r2, r1, r5
 8019abc:	2a44      	cmp	r2, #68	; 0x44
 8019abe:	d908      	bls.n	8019ad2 <dhcp_option.isra.1+0x26>
 8019ac0:	4b09      	ldr	r3, [pc, #36]	; (8019ae8 <dhcp_option.isra.1+0x3c>)
 8019ac2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8019ac6:	4909      	ldr	r1, [pc, #36]	; (8019aec <dhcp_option.isra.1+0x40>)
 8019ac8:	4809      	ldr	r0, [pc, #36]	; (8019af0 <dhcp_option.isra.1+0x44>)
 8019aca:	f004 fc8d 	bl	801e3e8 <iprintf>
 8019ace:	8823      	ldrh	r3, [r4, #0]
 8019ad0:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8019ad2:	6838      	ldr	r0, [r7, #0]
 8019ad4:	1c5a      	adds	r2, r3, #1
 8019ad6:	4403      	add	r3, r0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8019ad8:	fa10 f282 	uxtah	r2, r0, r2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8019adc:	f883 60f0 	strb.w	r6, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8019ae0:	8021      	strh	r1, [r4, #0]
 8019ae2:	f882 50f0 	strb.w	r5, [r2, #240]	; 0xf0
}
 8019ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ae8:	0803b30c 	.word	0x0803b30c
 8019aec:	0803b544 	.word	0x0803b544
 8019af0:	08023618 	.word	0x08023618

08019af4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8019af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019af8:	2800      	cmp	r0, #0
 8019afa:	f000 80e3 	beq.w	8019cc4 <dhcp_create_msg+0x1d0>
 8019afe:	460c      	mov	r4, r1
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019b00:	2900      	cmp	r1, #0
 8019b02:	f000 80e9 	beq.w	8019cd8 <dhcp_create_msg+0x1e4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8019b06:	68cb      	ldr	r3, [r1, #12]
 8019b08:	4615      	mov	r5, r2
 8019b0a:	4607      	mov	r7, r0
 8019b0c:	b133      	cbz	r3, 8019b1c <dhcp_create_msg+0x28>
 8019b0e:	4b77      	ldr	r3, [pc, #476]	; (8019cec <dhcp_create_msg+0x1f8>)
 8019b10:	f240 721f 	movw	r2, #1823	; 0x71f
 8019b14:	4976      	ldr	r1, [pc, #472]	; (8019cf0 <dhcp_create_msg+0x1fc>)
 8019b16:	4877      	ldr	r0, [pc, #476]	; (8019cf4 <dhcp_create_msg+0x200>)
 8019b18:	f004 fc66 	bl	801e3e8 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8019b1c:	6923      	ldr	r3, [r4, #16]
 8019b1e:	b133      	cbz	r3, 8019b2e <dhcp_create_msg+0x3a>
 8019b20:	4b72      	ldr	r3, [pc, #456]	; (8019cec <dhcp_create_msg+0x1f8>)
 8019b22:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8019b26:	4974      	ldr	r1, [pc, #464]	; (8019cf8 <dhcp_create_msg+0x204>)
 8019b28:	4872      	ldr	r0, [pc, #456]	; (8019cf4 <dhcp_create_msg+0x200>)
 8019b2a:	f004 fc5d 	bl	801e3e8 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8019b2e:	2200      	movs	r2, #0
 8019b30:	f44f 719a 	mov.w	r1, #308	; 0x134
 8019b34:	4610      	mov	r0, r2
 8019b36:	f7fa ff75 	bl	8014a24 <pbuf_alloc>
 8019b3a:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 8019b3c:	2800      	cmp	r0, #0
 8019b3e:	f000 80be 	beq.w	8019cbe <dhcp_create_msg+0x1ca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8019b42:	8943      	ldrh	r3, [r0, #10]
 8019b44:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8019b48:	f0c0 80a3 	bcc.w	8019c92 <dhcp_create_msg+0x19e>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8019b4c:	2d03      	cmp	r5, #3
 8019b4e:	f000 809a 	beq.w	8019c86 <dhcp_create_msg+0x192>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8019b52:	7aa3      	ldrb	r3, [r4, #10]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	f000 80ad 	beq.w	8019cb4 <dhcp_create_msg+0x1c0>
 8019b5a:	4b68      	ldr	r3, [pc, #416]	; (8019cfc <dhcp_create_msg+0x208>)
 8019b5c:	6818      	ldr	r0, [r3, #0]
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8019b5e:	6020      	str	r0, [r4, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8019b60:	68e2      	ldr	r2, [r4, #12]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8019b62:	2301      	movs	r3, #1
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
 8019b64:	f04f 0800 	mov.w	r8, #0
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8019b68:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8019b6c:	f8c4 9010 	str.w	r9, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8019b70:	f889 3000 	strb.w	r3, [r9]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8019b74:	f889 3001 	strb.w	r3, [r9, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8019b78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
  dhcp->msg_out->hops = 0;
 8019b7c:	f889 8003 	strb.w	r8, [r9, #3]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8019b80:	f889 3002 	strb.w	r3, [r9, #2]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8019b84:	f7f9 fb3a 	bl	80131fc <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019b88:	1feb      	subs	r3, r5, #7
  dhcp->msg_out->secs = 0;
 8019b8a:	6926      	ldr	r6, [r4, #16]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019b8c:	2b01      	cmp	r3, #1
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8019b8e:	f8c9 0004 	str.w	r0, [r9, #4]
  dhcp->msg_out->secs = 0;
 8019b92:	f886 8008 	strb.w	r8, [r6, #8]
 8019b96:	f886 8009 	strb.w	r8, [r6, #9]
  dhcp->msg_out->flags = 0;
 8019b9a:	f886 800a 	strb.w	r8, [r6, #10]
 8019b9e:	f886 800b 	strb.w	r8, [r6, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8019ba2:	f886 800c 	strb.w	r8, [r6, #12]
 8019ba6:	f886 800d 	strb.w	r8, [r6, #13]
 8019baa:	f886 800e 	strb.w	r8, [r6, #14]
 8019bae:	f886 800f 	strb.w	r8, [r6, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019bb2:	d901      	bls.n	8019bb8 <dhcp_create_msg+0xc4>
 8019bb4:	2d04      	cmp	r5, #4
 8019bb6:	d15f      	bne.n	8019c78 <dhcp_create_msg+0x184>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	60f3      	str	r3, [r6, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8019bbc:	2200      	movs	r2, #0
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8019bbe:	4631      	mov	r1, r6
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8019bc0:	7432      	strb	r2, [r6, #16]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8019bc2:	4613      	mov	r3, r2
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8019bc4:	7472      	strb	r2, [r6, #17]
 8019bc6:	74b2      	strb	r2, [r6, #18]
 8019bc8:	74f2      	strb	r2, [r6, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8019bca:	7532      	strb	r2, [r6, #20]
 8019bcc:	7572      	strb	r2, [r6, #21]
 8019bce:	75b2      	strb	r2, [r6, #22]
 8019bd0:	75f2      	strb	r2, [r6, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8019bd2:	7632      	strb	r2, [r6, #24]
 8019bd4:	7672      	strb	r2, [r6, #25]
 8019bd6:	76b2      	strb	r2, [r6, #26]
 8019bd8:	f801 2f1b 	strb.w	r2, [r1, #27]!
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8019bdc:	f897 c030 	ldrb.w	ip, [r7, #48]	; 0x30
 8019be0:	e004      	b.n	8019bec <dhcp_create_msg+0xf8>
 8019be2:	3301      	adds	r3, #1
 8019be4:	f801 0f01 	strb.w	r0, [r1, #1]!
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8019be8:	2b10      	cmp	r3, #16
 8019bea:	d00d      	beq.n	8019c08 <dhcp_create_msg+0x114>
 8019bec:	b29a      	uxth	r2, r3
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8019bee:	2000      	movs	r0, #0
 8019bf0:	2a05      	cmp	r2, #5
 8019bf2:	d8f6      	bhi.n	8019be2 <dhcp_create_msg+0xee>
 8019bf4:	4594      	cmp	ip, r2
 8019bf6:	d9f4      	bls.n	8019be2 <dhcp_create_msg+0xee>
 8019bf8:	18fa      	adds	r2, r7, r3
 8019bfa:	3301      	adds	r3, #1
 8019bfc:	f892 0031 	ldrb.w	r0, [r2, #49]	; 0x31
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8019c00:	2b10      	cmp	r3, #16
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8019c02:	f801 0f01 	strb.w	r0, [r1, #1]!
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8019c06:	d1f1      	bne.n	8019bec <dhcp_create_msg+0xf8>
 8019c08:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 8019c0c:	f106 036b 	add.w	r3, r6, #107	; 0x6b
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
 8019c10:	2100      	movs	r1, #0
 8019c12:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8019c16:	4293      	cmp	r3, r2
 8019c18:	d1fb      	bne.n	8019c12 <dhcp_create_msg+0x11e>
 8019c1a:	f106 02eb 	add.w	r2, r6, #235	; 0xeb
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
 8019c1e:	2100      	movs	r1, #0
 8019c20:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8019c24:	4293      	cmp	r3, r2
 8019c26:	d1fb      	bne.n	8019c20 <dhcp_create_msg+0x12c>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8019c28:	2063      	movs	r0, #99	; 0x63
 8019c2a:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
 8019c2e:	2753      	movs	r7, #83	; 0x53
 8019c30:	4632      	mov	r2, r6
  dhcp->options_out_len = 0;
 8019c32:	2300      	movs	r3, #0
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8019c34:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
 8019c38:	f886 c0ed 	strb.w	ip, [r6, #237]	; 0xed
 8019c3c:	f886 70ee 	strb.w	r7, [r6, #238]	; 0xee
 8019c40:	f802 0fef 	strb.w	r0, [r2, #239]!
  dhcp->options_out_len = 0;
 8019c44:	82a1      	strh	r1, [r4, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8019c46:	f802 3f01 	strb.w	r3, [r2, #1]!
 8019c4a:	3301      	adds	r3, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8019c4c:	2b44      	cmp	r3, #68	; 0x44
 8019c4e:	d1fa      	bne.n	8019c46 <dhcp_create_msg+0x152>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8019c50:	2301      	movs	r3, #1
 8019c52:	2235      	movs	r2, #53	; 0x35
 8019c54:	f104 0114 	add.w	r1, r4, #20
 8019c58:	f104 0010 	add.w	r0, r4, #16
 8019c5c:	f7ff ff26 	bl	8019aac <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019c60:	8aa3      	ldrh	r3, [r4, #20]
 8019c62:	2b43      	cmp	r3, #67	; 0x43
 8019c64:	d81d      	bhi.n	8019ca2 <dhcp_create_msg+0x1ae>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019c66:	6922      	ldr	r2, [r4, #16]
 8019c68:	1c59      	adds	r1, r3, #1
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
 8019c6a:	2000      	movs	r0, #0
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019c6c:	4413      	add	r3, r2
 8019c6e:	82a1      	strh	r1, [r4, #20]
 8019c70:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 8019c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019c78:	2d03      	cmp	r5, #3
 8019c7a:	d19f      	bne.n	8019bbc <dhcp_create_msg+0xc8>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8019c7c:	7a63      	ldrb	r3, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8019c7e:	3b04      	subs	r3, #4
 8019c80:	2b01      	cmp	r3, #1
 8019c82:	d89b      	bhi.n	8019bbc <dhcp_create_msg+0xc8>
 8019c84:	e798      	b.n	8019bb8 <dhcp_create_msg+0xc4>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8019c86:	7a63      	ldrb	r3, [r4, #9]
 8019c88:	2b03      	cmp	r3, #3
 8019c8a:	f43f af62 	beq.w	8019b52 <dhcp_create_msg+0x5e>
 8019c8e:	6820      	ldr	r0, [r4, #0]
 8019c90:	e766      	b.n	8019b60 <dhcp_create_msg+0x6c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8019c92:	4b16      	ldr	r3, [pc, #88]	; (8019cec <dhcp_create_msg+0x1f8>)
 8019c94:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8019c98:	4919      	ldr	r1, [pc, #100]	; (8019d00 <dhcp_create_msg+0x20c>)
 8019c9a:	4816      	ldr	r0, [pc, #88]	; (8019cf4 <dhcp_create_msg+0x200>)
 8019c9c:	f004 fba4 	bl	801e3e8 <iprintf>
 8019ca0:	e754      	b.n	8019b4c <dhcp_create_msg+0x58>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019ca2:	4b12      	ldr	r3, [pc, #72]	; (8019cec <dhcp_create_msg+0x1f8>)
 8019ca4:	f240 527b 	movw	r2, #1403	; 0x57b
 8019ca8:	4916      	ldr	r1, [pc, #88]	; (8019d04 <dhcp_create_msg+0x210>)
 8019caa:	4812      	ldr	r0, [pc, #72]	; (8019cf4 <dhcp_create_msg+0x200>)
 8019cac:	f004 fb9c 	bl	801e3e8 <iprintf>
 8019cb0:	8aa3      	ldrh	r3, [r4, #20]
 8019cb2:	e7d8      	b.n	8019c66 <dhcp_create_msg+0x172>
      xid = LWIP_RAND();
 8019cb4:	f004 fc28 	bl	801e508 <rand>
 8019cb8:	4b10      	ldr	r3, [pc, #64]	; (8019cfc <dhcp_create_msg+0x208>)
 8019cba:	6018      	str	r0, [r3, #0]
 8019cbc:	e74f      	b.n	8019b5e <dhcp_create_msg+0x6a>
    return ERR_MEM;
 8019cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8019cc2:	e7d7      	b.n	8019c74 <dhcp_create_msg+0x180>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019cc4:	4b09      	ldr	r3, [pc, #36]	; (8019cec <dhcp_create_msg+0x1f8>)
 8019cc6:	f240 721d 	movw	r2, #1821	; 0x71d
 8019cca:	490f      	ldr	r1, [pc, #60]	; (8019d08 <dhcp_create_msg+0x214>)
 8019ccc:	4809      	ldr	r0, [pc, #36]	; (8019cf4 <dhcp_create_msg+0x200>)
 8019cce:	f004 fb8b 	bl	801e3e8 <iprintf>
 8019cd2:	f06f 000f 	mvn.w	r0, #15
 8019cd6:	e7cd      	b.n	8019c74 <dhcp_create_msg+0x180>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019cd8:	4b04      	ldr	r3, [pc, #16]	; (8019cec <dhcp_create_msg+0x1f8>)
 8019cda:	f240 721e 	movw	r2, #1822	; 0x71e
 8019cde:	490b      	ldr	r1, [pc, #44]	; (8019d0c <dhcp_create_msg+0x218>)
 8019ce0:	4804      	ldr	r0, [pc, #16]	; (8019cf4 <dhcp_create_msg+0x200>)
 8019ce2:	f004 fb81 	bl	801e3e8 <iprintf>
 8019ce6:	f06f 0005 	mvn.w	r0, #5
 8019cea:	e7c3      	b.n	8019c74 <dhcp_create_msg+0x180>
 8019cec:	0803b30c 	.word	0x0803b30c
 8019cf0:	0803b3b8 	.word	0x0803b3b8
 8019cf4:	08023618 	.word	0x08023618
 8019cf8:	0803b3e0 	.word	0x0803b3e0
 8019cfc:	20021500 	.word	0x20021500
 8019d00:	0803b408 	.word	0x0803b408
 8019d04:	0803b448 	.word	0x0803b448
 8019d08:	0803b378 	.word	0x0803b378
 8019d0c:	0803b398 	.word	0x0803b398

08019d10 <dhcp_option_trailer>:
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8019d10:	b358      	cbz	r0, 8019d6a <dhcp_option_trailer+0x5a>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8019d12:	6903      	ldr	r3, [r0, #16]
{
 8019d14:	b570      	push	{r4, r5, r6, lr}
 8019d16:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8019d18:	b373      	cbz	r3, 8019d78 <dhcp_option_trailer+0x68>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019d1a:	8aa1      	ldrh	r1, [r4, #20]
 8019d1c:	2943      	cmp	r1, #67	; 0x43
 8019d1e:	d81b      	bhi.n	8019d58 <dhcp_option_trailer+0x48>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8019d20:	1c4a      	adds	r2, r1, #1
 8019d22:	6923      	ldr	r3, [r4, #16]
 8019d24:	25ff      	movs	r5, #255	; 0xff
 8019d26:	b292      	uxth	r2, r2
 8019d28:	1858      	adds	r0, r3, r1
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8019d2a:	2a43      	cmp	r2, #67	; 0x43
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8019d2c:	82a2      	strh	r2, [r4, #20]
 8019d2e:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8019d32:	d810      	bhi.n	8019d56 <dhcp_option_trailer+0x46>
 8019d34:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 8019d38:	f102 05f0 	add.w	r5, r2, #240	; 0xf0
 8019d3c:	f1c1 0142 	rsb	r1, r1, #66	; 0x42
 8019d40:	4402      	add	r2, r0
 8019d42:	442b      	add	r3, r5
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8019d44:	2000      	movs	r0, #0
 8019d46:	fa12 f281 	uxtah	r2, r2, r1
 8019d4a:	f803 0b01 	strb.w	r0, [r3], #1
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8019d4e:	4293      	cmp	r3, r2
 8019d50:	d1fb      	bne.n	8019d4a <dhcp_option_trailer+0x3a>
 8019d52:	2344      	movs	r3, #68	; 0x44
 8019d54:	82a3      	strh	r3, [r4, #20]
  }
}
 8019d56:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019d58:	490b      	ldr	r1, [pc, #44]	; (8019d88 <dhcp_option_trailer+0x78>)
 8019d5a:	f240 7284 	movw	r2, #1924	; 0x784
 8019d5e:	4b0b      	ldr	r3, [pc, #44]	; (8019d8c <dhcp_option_trailer+0x7c>)
 8019d60:	480b      	ldr	r0, [pc, #44]	; (8019d90 <dhcp_option_trailer+0x80>)
 8019d62:	f004 fb41 	bl	801e3e8 <iprintf>
 8019d66:	8aa1      	ldrh	r1, [r4, #20]
 8019d68:	e7da      	b.n	8019d20 <dhcp_option_trailer+0x10>
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8019d6a:	4b08      	ldr	r3, [pc, #32]	; (8019d8c <dhcp_option_trailer+0x7c>)
 8019d6c:	f240 7282 	movw	r2, #1922	; 0x782
 8019d70:	4908      	ldr	r1, [pc, #32]	; (8019d94 <dhcp_option_trailer+0x84>)
 8019d72:	4807      	ldr	r0, [pc, #28]	; (8019d90 <dhcp_option_trailer+0x80>)
 8019d74:	f004 bb38 	b.w	801e3e8 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8019d78:	4b04      	ldr	r3, [pc, #16]	; (8019d8c <dhcp_option_trailer+0x7c>)
 8019d7a:	f240 7283 	movw	r2, #1923	; 0x783
 8019d7e:	4906      	ldr	r1, [pc, #24]	; (8019d98 <dhcp_option_trailer+0x88>)
 8019d80:	4803      	ldr	r0, [pc, #12]	; (8019d90 <dhcp_option_trailer+0x80>)
 8019d82:	f004 fb31 	bl	801e3e8 <iprintf>
 8019d86:	e7c8      	b.n	8019d1a <dhcp_option_trailer+0xa>
 8019d88:	0803b660 	.word	0x0803b660
 8019d8c:	0803b30c 	.word	0x0803b30c
 8019d90:	08023618 	.word	0x08023618
 8019d94:	0803b610 	.word	0x0803b610
 8019d98:	0803b634 	.word	0x0803b634

08019d9c <dhcp_option_long.isra.4>:
dhcp_option_long(struct dhcp *dhcp, u32_t value)
 8019d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019d9e:	880b      	ldrh	r3, [r1, #0]
dhcp_option_long(struct dhcp *dhcp, u32_t value)
 8019da0:	460d      	mov	r5, r1
 8019da2:	4607      	mov	r7, r0
 8019da4:	4614      	mov	r4, r2
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019da6:	1d1e      	adds	r6, r3, #4
 8019da8:	2e44      	cmp	r6, #68	; 0x44
 8019daa:	d908      	bls.n	8019dbe <dhcp_option_long.isra.4+0x22>
 8019dac:	4b10      	ldr	r3, [pc, #64]	; (8019df0 <dhcp_option_long.isra.4+0x54>)
 8019dae:	f240 528a 	movw	r2, #1418	; 0x58a
 8019db2:	4910      	ldr	r1, [pc, #64]	; (8019df4 <dhcp_option_long.isra.4+0x58>)
 8019db4:	4810      	ldr	r0, [pc, #64]	; (8019df8 <dhcp_option_long.isra.4+0x5c>)
 8019db6:	f004 fb17 	bl	801e3e8 <iprintf>
 8019dba:	882b      	ldrh	r3, [r5, #0]
 8019dbc:	1d1e      	adds	r6, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019dbe:	683a      	ldr	r2, [r7, #0]
 8019dc0:	1c58      	adds	r0, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019dc2:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019dc4:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8019dc8:	18d7      	adds	r7, r2, r3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019dca:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019dcc:	fa12 f080 	uxtah	r0, r2, r0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019dd0:	fa12 f181 	uxtah	r1, r2, r1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019dd4:	f887 c0f0 	strb.w	ip, [r7, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8019dd8:	fa12 f383 	uxtah	r3, r2, r3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019ddc:	0c27      	lsrs	r7, r4, #16
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019dde:	0a22      	lsrs	r2, r4, #8
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019de0:	f880 70f0 	strb.w	r7, [r0, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019de4:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8019de8:	802e      	strh	r6, [r5, #0]
 8019dea:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
}
 8019dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019df0:	0803b30c 	.word	0x0803b30c
 8019df4:	0803b58c 	.word	0x0803b58c
 8019df8:	08023618 	.word	0x08023618

08019dfc <dhcp_delete_msg>:
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8019dfc:	b310      	cbz	r0, 8019e44 <dhcp_delete_msg+0x48>
{
 8019dfe:	b510      	push	{r4, lr}
 8019e00:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8019e02:	68c0      	ldr	r0, [r0, #12]
 8019e04:	b138      	cbz	r0, 8019e16 <dhcp_delete_msg+0x1a>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8019e06:	6923      	ldr	r3, [r4, #16]
 8019e08:	b173      	cbz	r3, 8019e28 <dhcp_delete_msg+0x2c>
    pbuf_free(dhcp->p_out);
 8019e0a:	f7fa fd9d 	bl	8014948 <pbuf_free>
  dhcp->p_out = NULL;
 8019e0e:	2300      	movs	r3, #0
  dhcp->msg_out = NULL;
 8019e10:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 8019e14:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8019e16:	4b0f      	ldr	r3, [pc, #60]	; (8019e54 <dhcp_delete_msg+0x58>)
 8019e18:	f240 726e 	movw	r2, #1902	; 0x76e
 8019e1c:	490e      	ldr	r1, [pc, #56]	; (8019e58 <dhcp_delete_msg+0x5c>)
 8019e1e:	480f      	ldr	r0, [pc, #60]	; (8019e5c <dhcp_delete_msg+0x60>)
 8019e20:	f004 fae2 	bl	801e3e8 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8019e24:	6923      	ldr	r3, [r4, #16]
 8019e26:	b933      	cbnz	r3, 8019e36 <dhcp_delete_msg+0x3a>
 8019e28:	4b0a      	ldr	r3, [pc, #40]	; (8019e54 <dhcp_delete_msg+0x58>)
 8019e2a:	f240 726f 	movw	r2, #1903	; 0x76f
 8019e2e:	490c      	ldr	r1, [pc, #48]	; (8019e60 <dhcp_delete_msg+0x64>)
 8019e30:	480a      	ldr	r0, [pc, #40]	; (8019e5c <dhcp_delete_msg+0x60>)
 8019e32:	f004 fad9 	bl	801e3e8 <iprintf>
  if (dhcp->p_out != NULL) {
 8019e36:	68e0      	ldr	r0, [r4, #12]
 8019e38:	2800      	cmp	r0, #0
 8019e3a:	d1e6      	bne.n	8019e0a <dhcp_delete_msg+0xe>
  dhcp->p_out = NULL;
 8019e3c:	2300      	movs	r3, #0
  dhcp->msg_out = NULL;
 8019e3e:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 8019e42:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8019e44:	4b03      	ldr	r3, [pc, #12]	; (8019e54 <dhcp_delete_msg+0x58>)
 8019e46:	f240 726d 	movw	r2, #1901	; 0x76d
 8019e4a:	4906      	ldr	r1, [pc, #24]	; (8019e64 <dhcp_delete_msg+0x68>)
 8019e4c:	4803      	ldr	r0, [pc, #12]	; (8019e5c <dhcp_delete_msg+0x60>)
 8019e4e:	f004 bacb 	b.w	801e3e8 <iprintf>
 8019e52:	bf00      	nop
 8019e54:	0803b30c 	.word	0x0803b30c
 8019e58:	0803b4c8 	.word	0x0803b4c8
 8019e5c:	08023618 	.word	0x08023618
 8019e60:	0803b4f0 	.word	0x0803b4f0
 8019e64:	0803b4a8 	.word	0x0803b4a8

08019e68 <dhcp_discover>:
{
 8019e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e6c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019e6e:	2300      	movs	r3, #0
{
 8019e70:	b083      	sub	sp, #12
 8019e72:	4606      	mov	r6, r0
  if (new_state != dhcp->state) {
 8019e74:	7a62      	ldrb	r2, [r4, #9]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019e76:	62a3      	str	r3, [r4, #40]	; 0x28
  if (new_state != dhcp->state) {
 8019e78:	2a06      	cmp	r2, #6
 8019e7a:	d003      	beq.n	8019e84 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 8019e7c:	2206      	movs	r2, #6
    dhcp->tries = 0;
 8019e7e:	72a3      	strb	r3, [r4, #10]
    dhcp->request_timeout = 0;
 8019e80:	82e3      	strh	r3, [r4, #22]
    dhcp->state = new_state;
 8019e82:	7262      	strb	r2, [r4, #9]
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8019e84:	2201      	movs	r2, #1
 8019e86:	4621      	mov	r1, r4
 8019e88:	4630      	mov	r0, r6
 8019e8a:	f7ff fe33 	bl	8019af4 <dhcp_create_msg>
  if (result == ERR_OK) {
 8019e8e:	4607      	mov	r7, r0
 8019e90:	b1e8      	cbz	r0, 8019ece <dhcp_discover+0x66>
  if (dhcp->tries < 255) {
 8019e92:	7aa3      	ldrb	r3, [r4, #10]
 8019e94:	2bff      	cmp	r3, #255	; 0xff
 8019e96:	d014      	beq.n	8019ec2 <dhcp_discover+0x5a>
    dhcp->tries++;
 8019e98:	3301      	adds	r3, #1
 8019e9a:	b2db      	uxtb	r3, r3
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019e9c:	2b05      	cmp	r3, #5
    dhcp->tries++;
 8019e9e:	72a3      	strb	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019ea0:	d80f      	bhi.n	8019ec2 <dhcp_discover+0x5a>
 8019ea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019ea6:	4931      	ldr	r1, [pc, #196]	; (8019f6c <dhcp_discover+0x104>)
}
 8019ea8:	4638      	mov	r0, r7
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8019eae:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019eb2:	fba1 2303 	umull	r2, r3, r1, r3
 8019eb6:	f3c3 134f 	ubfx	r3, r3, #5, #16
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019eba:	82e3      	strh	r3, [r4, #22]
}
 8019ebc:	b003      	add	sp, #12
 8019ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019ec2:	2378      	movs	r3, #120	; 0x78
}
 8019ec4:	4638      	mov	r0, r7
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019ec6:	82e3      	strh	r3, [r4, #22]
}
 8019ec8:	b003      	add	sp, #12
 8019eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ece:	f104 0a10 	add.w	sl, r4, #16
 8019ed2:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019ed6:	2302      	movs	r3, #2
 8019ed8:	2239      	movs	r2, #57	; 0x39
 8019eda:	4650      	mov	r0, sl
 8019edc:	4659      	mov	r1, fp
 8019ede:	f7ff fde5 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8019ee2:	4659      	mov	r1, fp
 8019ee4:	4650      	mov	r0, sl
 8019ee6:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
 8019ee8:	f7ff fdbc 	bl	8019a64 <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019eec:	4659      	mov	r1, fp
 8019eee:	4650      	mov	r0, sl
 8019ef0:	2304      	movs	r3, #4
 8019ef2:	2237      	movs	r2, #55	; 0x37
 8019ef4:	4d1e      	ldr	r5, [pc, #120]	; (8019f70 <dhcp_discover+0x108>)
 8019ef6:	f7ff fdd9 	bl	8019aac <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019efa:	8aa3      	ldrh	r3, [r4, #20]
 8019efc:	f105 0903 	add.w	r9, r5, #3
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019f00:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019f04:	2b43      	cmp	r3, #67	; 0x43
 8019f06:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8019f84 <dhcp_discover+0x11c>
 8019f0a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8019f88 <dhcp_discover+0x120>
 8019f0e:	d80c      	bhi.n	8019f2a <dhcp_discover+0xc2>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019f10:	6922      	ldr	r2, [r4, #16]
 8019f12:	1c59      	adds	r1, r3, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019f14:	45a9      	cmp	r9, r5
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019f16:	4413      	add	r3, r2
 8019f18:	82a1      	strh	r1, [r4, #20]
 8019f1a:	f883 80f0 	strb.w	r8, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019f1e:	d00d      	beq.n	8019f3c <dhcp_discover+0xd4>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019f20:	8aa3      	ldrh	r3, [r4, #20]
 8019f22:	f815 8b01 	ldrb.w	r8, [r5], #1
 8019f26:	2b43      	cmp	r3, #67	; 0x43
 8019f28:	d9f2      	bls.n	8019f10 <dhcp_discover+0xa8>
 8019f2a:	465b      	mov	r3, fp
 8019f2c:	f240 527b 	movw	r2, #1403	; 0x57b
 8019f30:	4651      	mov	r1, sl
 8019f32:	4810      	ldr	r0, [pc, #64]	; (8019f74 <dhcp_discover+0x10c>)
 8019f34:	f004 fa58 	bl	801e3e8 <iprintf>
 8019f38:	8aa3      	ldrh	r3, [r4, #20]
 8019f3a:	e7e9      	b.n	8019f10 <dhcp_discover+0xa8>
    dhcp_option_trailer(dhcp);
 8019f3c:	4620      	mov	r0, r4
 8019f3e:	f7ff fee7 	bl	8019d10 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8019f42:	8aa1      	ldrh	r1, [r4, #20]
 8019f44:	68e0      	ldr	r0, [r4, #12]
 8019f46:	31f0      	adds	r1, #240	; 0xf0
 8019f48:	b289      	uxth	r1, r1
 8019f4a:	f7fa fe79 	bl	8014c40 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8019f4e:	4a0a      	ldr	r2, [pc, #40]	; (8019f78 <dhcp_discover+0x110>)
 8019f50:	68e1      	ldr	r1, [r4, #12]
 8019f52:	2343      	movs	r3, #67	; 0x43
 8019f54:	6810      	ldr	r0, [r2, #0]
 8019f56:	4a09      	ldr	r2, [pc, #36]	; (8019f7c <dhcp_discover+0x114>)
 8019f58:	e9cd 6200 	strd	r6, r2, [sp]
 8019f5c:	4a08      	ldr	r2, [pc, #32]	; (8019f80 <dhcp_discover+0x118>)
 8019f5e:	f7ff fb55 	bl	801960c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8019f62:	4620      	mov	r0, r4
 8019f64:	f7ff ff4a 	bl	8019dfc <dhcp_delete_msg>
 8019f68:	e793      	b.n	8019e92 <dhcp_discover+0x2a>
 8019f6a:	bf00      	nop
 8019f6c:	10624dd3 	.word	0x10624dd3
 8019f70:	0803b519 	.word	0x0803b519
 8019f74:	08023618 	.word	0x08023618
 8019f78:	200214f8 	.word	0x200214f8
 8019f7c:	0803bb0c 	.word	0x0803bb0c
 8019f80:	0803bb10 	.word	0x0803bb10
 8019f84:	0803b30c 	.word	0x0803b30c
 8019f88:	0803b448 	.word	0x0803b448

08019f8c <dhcp_select>:
{
 8019f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019f90:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8019f92:	b083      	sub	sp, #12
 8019f94:	4606      	mov	r6, r0
  if (new_state != dhcp->state) {
 8019f96:	7a63      	ldrb	r3, [r4, #9]
 8019f98:	2b01      	cmp	r3, #1
 8019f9a:	d004      	beq.n	8019fa6 <dhcp_select+0x1a>
    dhcp->tries = 0;
 8019f9c:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8019f9e:	2201      	movs	r2, #1
    dhcp->tries = 0;
 8019fa0:	72a3      	strb	r3, [r4, #10]
    dhcp->state = new_state;
 8019fa2:	7262      	strb	r2, [r4, #9]
    dhcp->request_timeout = 0;
 8019fa4:	82e3      	strh	r3, [r4, #22]
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8019fa6:	2203      	movs	r2, #3
 8019fa8:	4621      	mov	r1, r4
 8019faa:	4630      	mov	r0, r6
 8019fac:	f7ff fda2 	bl	8019af4 <dhcp_create_msg>
  if (result == ERR_OK) {
 8019fb0:	4607      	mov	r7, r0
 8019fb2:	b1e8      	cbz	r0, 8019ff0 <dhcp_select+0x64>
  if (dhcp->tries < 255) {
 8019fb4:	7aa3      	ldrb	r3, [r4, #10]
 8019fb6:	2bff      	cmp	r3, #255	; 0xff
 8019fb8:	d014      	beq.n	8019fe4 <dhcp_select+0x58>
    dhcp->tries++;
 8019fba:	3301      	adds	r3, #1
 8019fbc:	b2db      	uxtb	r3, r3
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019fbe:	2b05      	cmp	r3, #5
    dhcp->tries++;
 8019fc0:	72a3      	strb	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019fc2:	d80f      	bhi.n	8019fe4 <dhcp_select+0x58>
 8019fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019fc8:	493e      	ldr	r1, [pc, #248]	; (801a0c4 <dhcp_select+0x138>)
}
 8019fca:	4638      	mov	r0, r7
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8019fd0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019fd4:	fba1 2303 	umull	r2, r3, r1, r3
 8019fd8:	f3c3 134f 	ubfx	r3, r3, #5, #16
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019fdc:	82e3      	strh	r3, [r4, #22]
}
 8019fde:	b003      	add	sp, #12
 8019fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019fe4:	2378      	movs	r3, #120	; 0x78
}
 8019fe6:	4638      	mov	r0, r7
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019fe8:	82e3      	strh	r3, [r4, #22]
}
 8019fea:	b003      	add	sp, #12
 8019fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ff0:	f104 0a10 	add.w	sl, r4, #16
 8019ff4:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019ff8:	2302      	movs	r3, #2
 8019ffa:	2239      	movs	r2, #57	; 0x39
 8019ffc:	4650      	mov	r0, sl
 8019ffe:	4659      	mov	r1, fp
 801a000:	f7ff fd54 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801a004:	4659      	mov	r1, fp
 801a006:	4650      	mov	r0, sl
 801a008:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
 801a00a:	f7ff fd2b 	bl	8019a64 <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801a00e:	4659      	mov	r1, fp
 801a010:	2304      	movs	r3, #4
 801a012:	4650      	mov	r0, sl
 801a014:	2232      	movs	r2, #50	; 0x32
 801a016:	4d2c      	ldr	r5, [pc, #176]	; (801a0c8 <dhcp_select+0x13c>)
 801a018:	f7ff fd48 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a01c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a01e:	f7f9 f8ed 	bl	80131fc <lwip_htonl>
 801a022:	4659      	mov	r1, fp
 801a024:	4602      	mov	r2, r0
 801a026:	4650      	mov	r0, sl
 801a028:	f7ff feb8 	bl	8019d9c <dhcp_option_long.isra.4>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801a02c:	4659      	mov	r1, fp
 801a02e:	2304      	movs	r3, #4
 801a030:	4650      	mov	r0, sl
 801a032:	2236      	movs	r2, #54	; 0x36
 801a034:	f105 0903 	add.w	r9, r5, #3
 801a038:	f7ff fd38 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801a03c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a03e:	f7f9 f8dd 	bl	80131fc <lwip_htonl>
 801a042:	4659      	mov	r1, fp
 801a044:	4602      	mov	r2, r0
 801a046:	4650      	mov	r0, sl
 801a048:	f7ff fea8 	bl	8019d9c <dhcp_option_long.isra.4>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a04c:	4659      	mov	r1, fp
 801a04e:	4650      	mov	r0, sl
 801a050:	2304      	movs	r3, #4
 801a052:	2237      	movs	r2, #55	; 0x37
 801a054:	f04f 0801 	mov.w	r8, #1
 801a058:	f7ff fd28 	bl	8019aac <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a05c:	8aa3      	ldrh	r3, [r4, #20]
 801a05e:	f8df b07c 	ldr.w	fp, [pc, #124]	; 801a0dc <dhcp_select+0x150>
 801a062:	2b43      	cmp	r3, #67	; 0x43
 801a064:	f8df a078 	ldr.w	sl, [pc, #120]	; 801a0e0 <dhcp_select+0x154>
 801a068:	d80c      	bhi.n	801a084 <dhcp_select+0xf8>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801a06a:	6922      	ldr	r2, [r4, #16]
 801a06c:	1c59      	adds	r1, r3, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a06e:	45a9      	cmp	r9, r5
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801a070:	4413      	add	r3, r2
 801a072:	82a1      	strh	r1, [r4, #20]
 801a074:	f883 80f0 	strb.w	r8, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a078:	d00d      	beq.n	801a096 <dhcp_select+0x10a>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a07a:	8aa3      	ldrh	r3, [r4, #20]
 801a07c:	f815 8b01 	ldrb.w	r8, [r5], #1
 801a080:	2b43      	cmp	r3, #67	; 0x43
 801a082:	d9f2      	bls.n	801a06a <dhcp_select+0xde>
 801a084:	465b      	mov	r3, fp
 801a086:	f240 527b 	movw	r2, #1403	; 0x57b
 801a08a:	4651      	mov	r1, sl
 801a08c:	480f      	ldr	r0, [pc, #60]	; (801a0cc <dhcp_select+0x140>)
 801a08e:	f004 f9ab 	bl	801e3e8 <iprintf>
 801a092:	8aa3      	ldrh	r3, [r4, #20]
 801a094:	e7e9      	b.n	801a06a <dhcp_select+0xde>
    dhcp_option_trailer(dhcp);
 801a096:	4620      	mov	r0, r4
 801a098:	f7ff fe3a 	bl	8019d10 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801a09c:	8aa1      	ldrh	r1, [r4, #20]
 801a09e:	68e0      	ldr	r0, [r4, #12]
 801a0a0:	31f0      	adds	r1, #240	; 0xf0
 801a0a2:	b289      	uxth	r1, r1
 801a0a4:	f7fa fdcc 	bl	8014c40 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801a0a8:	4a09      	ldr	r2, [pc, #36]	; (801a0d0 <dhcp_select+0x144>)
 801a0aa:	68e1      	ldr	r1, [r4, #12]
 801a0ac:	2343      	movs	r3, #67	; 0x43
 801a0ae:	6810      	ldr	r0, [r2, #0]
 801a0b0:	4a08      	ldr	r2, [pc, #32]	; (801a0d4 <dhcp_select+0x148>)
 801a0b2:	e9cd 6200 	strd	r6, r2, [sp]
 801a0b6:	4a08      	ldr	r2, [pc, #32]	; (801a0d8 <dhcp_select+0x14c>)
 801a0b8:	f7ff faa8 	bl	801960c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801a0bc:	4620      	mov	r0, r4
 801a0be:	f7ff fe9d 	bl	8019dfc <dhcp_delete_msg>
 801a0c2:	e777      	b.n	8019fb4 <dhcp_select+0x28>
 801a0c4:	10624dd3 	.word	0x10624dd3
 801a0c8:	0803b519 	.word	0x0803b519
 801a0cc:	08023618 	.word	0x08023618
 801a0d0:	200214f8 	.word	0x200214f8
 801a0d4:	0803bb0c 	.word	0x0803bb0c
 801a0d8:	0803bb10 	.word	0x0803bb10
 801a0dc:	0803b30c 	.word	0x0803b30c
 801a0e0:	0803b448 	.word	0x0803b448

0801a0e4 <dhcp_reboot>:
{
 801a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a0e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801a0ea:	b083      	sub	sp, #12
 801a0ec:	4606      	mov	r6, r0
  if (new_state != dhcp->state) {
 801a0ee:	7a63      	ldrb	r3, [r4, #9]
 801a0f0:	2b03      	cmp	r3, #3
 801a0f2:	d004      	beq.n	801a0fe <dhcp_reboot+0x1a>
    dhcp->tries = 0;
 801a0f4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801a0f6:	2203      	movs	r2, #3
    dhcp->tries = 0;
 801a0f8:	72a3      	strb	r3, [r4, #10]
    dhcp->state = new_state;
 801a0fa:	7262      	strb	r2, [r4, #9]
    dhcp->request_timeout = 0;
 801a0fc:	82e3      	strh	r3, [r4, #22]
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801a0fe:	2203      	movs	r2, #3
 801a100:	4621      	mov	r1, r4
 801a102:	4630      	mov	r0, r6
 801a104:	f7ff fcf6 	bl	8019af4 <dhcp_create_msg>
  if (result == ERR_OK) {
 801a108:	4607      	mov	r7, r0
 801a10a:	b1f0      	cbz	r0, 801a14a <dhcp_reboot+0x66>
  if (dhcp->tries < 255) {
 801a10c:	7aa3      	ldrb	r3, [r4, #10]
 801a10e:	2bff      	cmp	r3, #255	; 0xff
 801a110:	d015      	beq.n	801a13e <dhcp_reboot+0x5a>
    dhcp->tries++;
 801a112:	3301      	adds	r3, #1
 801a114:	b2db      	uxtb	r3, r3
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801a116:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801a118:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801a11a:	d810      	bhi.n	801a13e <dhcp_reboot+0x5a>
 801a11c:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801a120:	4a37      	ldr	r2, [pc, #220]	; (801a200 <dhcp_reboot+0x11c>)
}
 801a122:	4638      	mov	r0, r7
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801a124:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a128:	00db      	lsls	r3, r3, #3
 801a12a:	b29b      	uxth	r3, r3
 801a12c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a130:	fba2 2303 	umull	r2, r3, r2, r3
 801a134:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801a136:	82e3      	strh	r3, [r4, #22]
}
 801a138:	b003      	add	sp, #12
 801a13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a13e:	2314      	movs	r3, #20
}
 801a140:	4638      	mov	r0, r7
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801a142:	82e3      	strh	r3, [r4, #22]
}
 801a144:	b003      	add	sp, #12
 801a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a14a:	f104 0a10 	add.w	sl, r4, #16
 801a14e:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a152:	2302      	movs	r3, #2
 801a154:	2239      	movs	r2, #57	; 0x39
 801a156:	4650      	mov	r0, sl
 801a158:	4659      	mov	r1, fp
 801a15a:	f7ff fca7 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801a15e:	4659      	mov	r1, fp
 801a160:	4650      	mov	r0, sl
 801a162:	f44f 7210 	mov.w	r2, #576	; 0x240
 801a166:	f7ff fc7d 	bl	8019a64 <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801a16a:	4659      	mov	r1, fp
 801a16c:	2304      	movs	r3, #4
 801a16e:	4650      	mov	r0, sl
 801a170:	2232      	movs	r2, #50	; 0x32
 801a172:	4d24      	ldr	r5, [pc, #144]	; (801a204 <dhcp_reboot+0x120>)
 801a174:	f7ff fc9a 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a178:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a17a:	f7f9 f83f 	bl	80131fc <lwip_htonl>
 801a17e:	4659      	mov	r1, fp
 801a180:	4602      	mov	r2, r0
 801a182:	4650      	mov	r0, sl
 801a184:	f7ff fe0a 	bl	8019d9c <dhcp_option_long.isra.4>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a188:	4659      	mov	r1, fp
 801a18a:	4650      	mov	r0, sl
 801a18c:	2304      	movs	r3, #4
 801a18e:	2237      	movs	r2, #55	; 0x37
 801a190:	f105 0903 	add.w	r9, r5, #3
 801a194:	f7ff fc8a 	bl	8019aac <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a198:	8aa3      	ldrh	r3, [r4, #20]
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a19a:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a19e:	f8df b074 	ldr.w	fp, [pc, #116]	; 801a214 <dhcp_reboot+0x130>
 801a1a2:	2b43      	cmp	r3, #67	; 0x43
 801a1a4:	f8df a070 	ldr.w	sl, [pc, #112]	; 801a218 <dhcp_reboot+0x134>
 801a1a8:	d80c      	bhi.n	801a1c4 <dhcp_reboot+0xe0>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801a1aa:	6922      	ldr	r2, [r4, #16]
 801a1ac:	1c59      	adds	r1, r3, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a1ae:	45a9      	cmp	r9, r5
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801a1b0:	4413      	add	r3, r2
 801a1b2:	82a1      	strh	r1, [r4, #20]
 801a1b4:	f883 80f0 	strb.w	r8, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a1b8:	d00d      	beq.n	801a1d6 <dhcp_reboot+0xf2>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a1ba:	8aa3      	ldrh	r3, [r4, #20]
 801a1bc:	f815 8b01 	ldrb.w	r8, [r5], #1
 801a1c0:	2b43      	cmp	r3, #67	; 0x43
 801a1c2:	d9f2      	bls.n	801a1aa <dhcp_reboot+0xc6>
 801a1c4:	465b      	mov	r3, fp
 801a1c6:	f240 527b 	movw	r2, #1403	; 0x57b
 801a1ca:	4651      	mov	r1, sl
 801a1cc:	480e      	ldr	r0, [pc, #56]	; (801a208 <dhcp_reboot+0x124>)
 801a1ce:	f004 f90b 	bl	801e3e8 <iprintf>
 801a1d2:	8aa3      	ldrh	r3, [r4, #20]
 801a1d4:	e7e9      	b.n	801a1aa <dhcp_reboot+0xc6>
    dhcp_option_trailer(dhcp);
 801a1d6:	4620      	mov	r0, r4
 801a1d8:	f7ff fd9a 	bl	8019d10 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801a1dc:	8aa1      	ldrh	r1, [r4, #20]
 801a1de:	68e0      	ldr	r0, [r4, #12]
 801a1e0:	31f0      	adds	r1, #240	; 0xf0
 801a1e2:	b289      	uxth	r1, r1
 801a1e4:	f7fa fd2c 	bl	8014c40 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801a1e8:	4a08      	ldr	r2, [pc, #32]	; (801a20c <dhcp_reboot+0x128>)
 801a1ea:	68e1      	ldr	r1, [r4, #12]
 801a1ec:	2343      	movs	r3, #67	; 0x43
 801a1ee:	6810      	ldr	r0, [r2, #0]
 801a1f0:	9600      	str	r6, [sp, #0]
 801a1f2:	4a07      	ldr	r2, [pc, #28]	; (801a210 <dhcp_reboot+0x12c>)
 801a1f4:	f7ff fa80 	bl	80196f8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801a1f8:	4620      	mov	r0, r4
 801a1fa:	f7ff fdff 	bl	8019dfc <dhcp_delete_msg>
 801a1fe:	e785      	b.n	801a10c <dhcp_reboot+0x28>
 801a200:	10624dd3 	.word	0x10624dd3
 801a204:	0803b519 	.word	0x0803b519
 801a208:	08023618 	.word	0x08023618
 801a20c:	200214f8 	.word	0x200214f8
 801a210:	0803bb10 	.word	0x0803bb10
 801a214:	0803b30c 	.word	0x0803b30c
 801a218:	0803b448 	.word	0x0803b448

0801a21c <dhcp_dec_pcb_refcount>:
{
 801a21c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801a21e:	4d0b      	ldr	r5, [pc, #44]	; (801a24c <dhcp_dec_pcb_refcount+0x30>)
 801a220:	782c      	ldrb	r4, [r5, #0]
 801a222:	b154      	cbz	r4, 801a23a <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801a224:	3c01      	subs	r4, #1
 801a226:	b2e4      	uxtb	r4, r4
 801a228:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801a22a:	b104      	cbz	r4, 801a22e <dhcp_dec_pcb_refcount+0x12>
}
 801a22c:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801a22e:	4d08      	ldr	r5, [pc, #32]	; (801a250 <dhcp_dec_pcb_refcount+0x34>)
 801a230:	6828      	ldr	r0, [r5, #0]
 801a232:	f7ff fad3 	bl	80197dc <udp_remove>
    dhcp_pcb = NULL;
 801a236:	602c      	str	r4, [r5, #0]
}
 801a238:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801a23a:	4b06      	ldr	r3, [pc, #24]	; (801a254 <dhcp_dec_pcb_refcount+0x38>)
 801a23c:	22f3      	movs	r2, #243	; 0xf3
 801a23e:	4906      	ldr	r1, [pc, #24]	; (801a258 <dhcp_dec_pcb_refcount+0x3c>)
 801a240:	4806      	ldr	r0, [pc, #24]	; (801a25c <dhcp_dec_pcb_refcount+0x40>)
 801a242:	f004 f8d1 	bl	801e3e8 <iprintf>
 801a246:	782c      	ldrb	r4, [r5, #0]
 801a248:	e7ec      	b.n	801a224 <dhcp_dec_pcb_refcount+0x8>
 801a24a:	bf00      	nop
 801a24c:	200214fc 	.word	0x200214fc
 801a250:	200214f8 	.word	0x200214f8
 801a254:	0803b30c 	.word	0x0803b30c
 801a258:	0803b484 	.word	0x0803b484
 801a25c:	08023618 	.word	0x08023618

0801a260 <dhcp_handle_ack.isra.8>:
dhcp_handle_ack(struct netif *netif)
 801a260:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801a262:	4d26      	ldr	r5, [pc, #152]	; (801a2fc <dhcp_handle_ack.isra.8+0x9c>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a264:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif)
 801a266:	b082      	sub	sp, #8
 801a268:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801a26a:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a26c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801a270:	b112      	cbz	r2, 801a278 <dhcp_handle_ack.isra.8+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801a272:	4b23      	ldr	r3, [pc, #140]	; (801a300 <dhcp_handle_ack.isra.8+0xa0>)
 801a274:	68db      	ldr	r3, [r3, #12]
 801a276:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801a278:	792b      	ldrb	r3, [r5, #4]
 801a27a:	b11b      	cbz	r3, 801a284 <dhcp_handle_ack.isra.8+0x24>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801a27c:	4b20      	ldr	r3, [pc, #128]	; (801a300 <dhcp_handle_ack.isra.8+0xa0>)
 801a27e:	691b      	ldr	r3, [r3, #16]
 801a280:	63a3      	str	r3, [r4, #56]	; 0x38
 801a282:	e002      	b.n	801a28a <dhcp_handle_ack.isra.8+0x2a>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801a284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a286:	085b      	lsrs	r3, r3, #1
 801a288:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801a28a:	796b      	ldrb	r3, [r5, #5]
 801a28c:	b11b      	cbz	r3, 801a296 <dhcp_handle_ack.isra.8+0x36>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801a28e:	4b1c      	ldr	r3, [pc, #112]	; (801a300 <dhcp_handle_ack.isra.8+0xa0>)
 801a290:	695b      	ldr	r3, [r3, #20]
 801a292:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a294:	e004      	b.n	801a2a0 <dhcp_handle_ack.isra.8+0x40>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801a296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a298:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a29c:	08db      	lsrs	r3, r3, #3
 801a29e:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801a2a0:	6862      	ldr	r2, [r4, #4]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801a2a2:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801a2a4:	6912      	ldr	r2, [r2, #16]
 801a2a6:	62a2      	str	r2, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801a2a8:	b13b      	cbz	r3, 801a2ba <dhcp_handle_ack.isra.8+0x5a>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801a2aa:	4b15      	ldr	r3, [pc, #84]	; (801a300 <dhcp_handle_ack.isra.8+0xa0>)
 801a2ac:	6998      	ldr	r0, [r3, #24]
 801a2ae:	f7f8 ffa5 	bl	80131fc <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801a2b2:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801a2b4:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 801a2b6:	72e3      	strb	r3, [r4, #11]
 801a2b8:	e000      	b.n	801a2bc <dhcp_handle_ack.isra.8+0x5c>
    dhcp->subnet_mask_given = 0;
 801a2ba:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801a2bc:	79eb      	ldrb	r3, [r5, #7]
 801a2be:	b123      	cbz	r3, 801a2ca <dhcp_handle_ack.isra.8+0x6a>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801a2c0:	4b0f      	ldr	r3, [pc, #60]	; (801a300 <dhcp_handle_ack.isra.8+0xa0>)
 801a2c2:	69d8      	ldr	r0, [r3, #28]
 801a2c4:	f7f8 ff9a 	bl	80131fc <lwip_htonl>
 801a2c8:	6320      	str	r0, [r4, #48]	; 0x30
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801a2ca:	7a2b      	ldrb	r3, [r5, #8]
 801a2cc:	b1a3      	cbz	r3, 801a2f8 <dhcp_handle_ack.isra.8+0x98>
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801a2ce:	4e0c      	ldr	r6, [pc, #48]	; (801a300 <dhcp_handle_ack.isra.8+0xa0>)
 801a2d0:	ac02      	add	r4, sp, #8
 801a2d2:	6a30      	ldr	r0, [r6, #32]
 801a2d4:	f7f8 ff92 	bl	80131fc <lwip_htonl>
 801a2d8:	f844 0d04 	str.w	r0, [r4, #-4]!
    dns_setserver(n, &dns_addr);
 801a2dc:	2000      	movs	r0, #0
 801a2de:	4621      	mov	r1, r4
 801a2e0:	f7f9 fade 	bl	80138a0 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801a2e4:	7a6b      	ldrb	r3, [r5, #9]
 801a2e6:	b13b      	cbz	r3, 801a2f8 <dhcp_handle_ack.isra.8+0x98>
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801a2e8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801a2ea:	f7f8 ff87 	bl	80131fc <lwip_htonl>
    dns_setserver(n, &dns_addr);
 801a2ee:	4621      	mov	r1, r4
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801a2f0:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 801a2f2:	2001      	movs	r0, #1
 801a2f4:	f7f9 fad4 	bl	80138a0 <dns_setserver>
}
 801a2f8:	b002      	add	sp, #8
 801a2fa:	bd70      	pop	{r4, r5, r6, pc}
 801a2fc:	200354b0 	.word	0x200354b0
 801a300:	200354bc 	.word	0x200354bc

0801a304 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 801a304:	4b9e      	ldr	r3, [pc, #632]	; (801a580 <dhcp_recv+0x27c>)
{
 801a306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 801a30a:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 801a30e:	b08b      	sub	sp, #44	; 0x2c
 801a310:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a312:	f8da 7028 	ldr.w	r7, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801a316:	b11f      	cbz	r7, 801a320 <dhcp_recv+0x1c>
 801a318:	7a3b      	ldrb	r3, [r7, #8]
 801a31a:	b93b      	cbnz	r3, 801a32c <dhcp_recv+0x28>
    dhcp->msg_in = NULL;
 801a31c:	2300      	movs	r3, #0
 801a31e:	607b      	str	r3, [r7, #4]
  pbuf_free(p);
 801a320:	4658      	mov	r0, fp
 801a322:	f7fa fb11 	bl	8014948 <pbuf_free>
}
 801a326:	b00b      	add	sp, #44	; 0x2c
 801a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801a32c:	687b      	ldr	r3, [r7, #4]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801a32e:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801a330:	b133      	cbz	r3, 801a340 <dhcp_recv+0x3c>
 801a332:	4b94      	ldr	r3, [pc, #592]	; (801a584 <dhcp_recv+0x280>)
 801a334:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 801a338:	4993      	ldr	r1, [pc, #588]	; (801a588 <dhcp_recv+0x284>)
 801a33a:	4894      	ldr	r0, [pc, #592]	; (801a58c <dhcp_recv+0x288>)
 801a33c:	f004 f854 	bl	801e3e8 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 801a340:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801a344:	2b2b      	cmp	r3, #43	; 0x2b
 801a346:	d9e9      	bls.n	801a31c <dhcp_recv+0x18>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 801a348:	7823      	ldrb	r3, [r4, #0]
 801a34a:	2b02      	cmp	r3, #2
 801a34c:	d1e6      	bne.n	801a31c <dhcp_recv+0x18>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801a34e:	f89a 6030 	ldrb.w	r6, [sl, #48]	; 0x30
 801a352:	b1b6      	cbz	r6, 801a382 <dhcp_recv+0x7e>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a354:	f89a 2031 	ldrb.w	r2, [sl, #49]	; 0x31
 801a358:	7f23      	ldrb	r3, [r4, #28]
 801a35a:	429a      	cmp	r2, r3
 801a35c:	d1de      	bne.n	801a31c <dhcp_recv+0x18>
 801a35e:	f10a 0032 	add.w	r0, sl, #50	; 0x32
 801a362:	f104 011d 	add.w	r1, r4, #29
 801a366:	2301      	movs	r3, #1
 801a368:	b2da      	uxtb	r2, r3
 801a36a:	3301      	adds	r3, #1
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801a36c:	2a05      	cmp	r2, #5
 801a36e:	d808      	bhi.n	801a382 <dhcp_recv+0x7e>
 801a370:	4296      	cmp	r6, r2
 801a372:	d906      	bls.n	801a382 <dhcp_recv+0x7e>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a374:	f810 5b01 	ldrb.w	r5, [r0], #1
 801a378:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a37c:	4295      	cmp	r5, r2
 801a37e:	d0f3      	beq.n	801a368 <dhcp_recv+0x64>
 801a380:	e7cc      	b.n	801a31c <dhcp_recv+0x18>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801a382:	6860      	ldr	r0, [r4, #4]
 801a384:	f7f8 ff3a 	bl	80131fc <lwip_htonl>
 801a388:	683b      	ldr	r3, [r7, #0]
 801a38a:	4298      	cmp	r0, r3
 801a38c:	d1c6      	bne.n	801a31c <dhcp_recv+0x18>
  dhcp_clear_all_options(dhcp);
 801a38e:	2200      	movs	r2, #0
 801a390:	497f      	ldr	r1, [pc, #508]	; (801a590 <dhcp_recv+0x28c>)
 801a392:	604a      	str	r2, [r1, #4]
 801a394:	810a      	strh	r2, [r1, #8]
  if (p->len < DHCP_SNAME_OFS) {
 801a396:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  dhcp_clear_all_options(dhcp);
 801a39a:	600a      	str	r2, [r1, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801a39c:	2b2b      	cmp	r3, #43	; 0x2b
 801a39e:	d9bd      	bls.n	801a31c <dhcp_recv+0x18>
  int parse_sname_as_options = 0;
 801a3a0:	9206      	str	r2, [sp, #24]
  options_idx = DHCP_OPTIONS_OFS;
 801a3a2:	20f0      	movs	r0, #240	; 0xf0
  options_idx_max = p->tot_len;
 801a3a4:	f8bb 2008 	ldrh.w	r2, [fp, #8]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801a3a8:	f8db 1004 	ldr.w	r1, [fp, #4]
 801a3ac:	f8cd a01c 	str.w	sl, [sp, #28]
 801a3b0:	4692      	mov	sl, r2
  options_idx = DHCP_OPTIONS_OFS;
 801a3b2:	9003      	str	r0, [sp, #12]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801a3b4:	6079      	str	r1, [r7, #4]
 801a3b6:	9704      	str	r7, [sp, #16]
 801a3b8:	f8cd b008 	str.w	fp, [sp, #8]
 801a3bc:	e9dd 6202 	ldrd	r6, r2, [sp, #8]
 801a3c0:	e000      	b.n	801a3c4 <dhcp_recv+0xc0>
 801a3c2:	8973      	ldrh	r3, [r6, #10]
  while ((q != NULL) && (options_idx >= q->len)) {
 801a3c4:	4293      	cmp	r3, r2
    options_idx -= q->len;
 801a3c6:	eba2 0103 	sub.w	r1, r2, r3
    options_idx_max -= q->len;
 801a3ca:	ebaa 0303 	sub.w	r3, sl, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801a3ce:	d809      	bhi.n	801a3e4 <dhcp_recv+0xe0>
    q = q->next;
 801a3d0:	6836      	ldr	r6, [r6, #0]
    options_idx -= q->len;
 801a3d2:	b28a      	uxth	r2, r1
    options_idx_max -= q->len;
 801a3d4:	fa1f fa83 	uxth.w	sl, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801a3d8:	2e00      	cmp	r6, #0
 801a3da:	d1f2      	bne.n	801a3c2 <dhcp_recv+0xbe>
 801a3dc:	9f04      	ldr	r7, [sp, #16]
 801a3de:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a3e2:	e79b      	b.n	801a31c <dhcp_recv+0x18>
  options = (u8_t*)q->payload;
 801a3e4:	6873      	ldr	r3, [r6, #4]
 801a3e6:	4693      	mov	fp, r2
 801a3e8:	9203      	str	r2, [sp, #12]
 801a3ea:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a3ec:	45d3      	cmp	fp, sl
 801a3ee:	f080 81d4 	bcs.w	801a79a <dhcp_recv+0x496>
 801a3f2:	9b01      	ldr	r3, [sp, #4]
 801a3f4:	f813 200b 	ldrb.w	r2, [r3, fp]
 801a3f8:	2aff      	cmp	r2, #255	; 0xff
 801a3fa:	f000 81ce 	beq.w	801a79a <dhcp_recv+0x496>
    if ((offset + 1) < q->len) {
 801a3fe:	8973      	ldrh	r3, [r6, #10]
 801a400:	f10b 0101 	add.w	r1, fp, #1
    u16_t val_offset = offset + 2;
 801a404:	f10b 0502 	add.w	r5, fp, #2
    if ((offset + 1) < q->len) {
 801a408:	4299      	cmp	r1, r3
    u16_t val_offset = offset + 2;
 801a40a:	b2ad      	uxth	r5, r5
    if ((offset + 1) < q->len) {
 801a40c:	f280 80e8 	bge.w	801a5e0 <dhcp_recv+0x2dc>
      len = options[offset + 1];
 801a410:	9801      	ldr	r0, [sp, #4]
 801a412:	4458      	add	r0, fp
 801a414:	7844      	ldrb	r4, [r0, #1]
    switch(op) {
 801a416:	2a3b      	cmp	r2, #59	; 0x3b
 801a418:	f200 80d3 	bhi.w	801a5c2 <dhcp_recv+0x2be>
 801a41c:	e8df f002 	tbb	[pc, r2]
 801a420:	a5d11e73 	.word	0xa5d11e73
 801a424:	d180d1d1 	.word	0xd180d1d1
 801a428:	d1d1d1d1 	.word	0xd1d1d1d1
 801a42c:	d1d1d1d1 	.word	0xd1d1d1d1
 801a430:	d1d1d1d1 	.word	0xd1d1d1d1
 801a434:	d1d1d1d1 	.word	0xd1d1d1d1
 801a438:	d1d1d1d1 	.word	0xd1d1d1d1
 801a43c:	d1d1d1d1 	.word	0xd1d1d1d1
 801a440:	d1d1d1d1 	.word	0xd1d1d1d1
 801a444:	d1d1d1d1 	.word	0xd1d1d1d1
 801a448:	d1d1d1d1 	.word	0xd1d1d1d1
 801a44c:	d1d1d1d1 	.word	0xd1d1d1d1
 801a450:	cbd1d1d1 	.word	0xcbd1d1d1
 801a454:	d19398be 	.word	0xd19398be
 801a458:	767bd1d1 	.word	0x767bd1d1
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a45c:	2c04      	cmp	r4, #4
 801a45e:	f040 8178 	bne.w	801a752 <dhcp_recv+0x44e>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801a462:	2706      	movs	r7, #6
    offset += len + 2;
 801a464:	eb05 0b04 	add.w	fp, r5, r4
 801a468:	fa1f fb8b 	uxth.w	fp, fp
 801a46c:	4a48      	ldr	r2, [pc, #288]	; (801a590 <dhcp_recv+0x28c>)
      u32_t value = 0;
 801a46e:	ab0a      	add	r3, sp, #40	; 0x28
 801a470:	f8cd a014 	str.w	sl, [sp, #20]
 801a474:	eb02 0907 	add.w	r9, r2, r7
 801a478:	2200      	movs	r2, #0
 801a47a:	f843 2d04 	str.w	r2, [r3, #-4]!
 801a47e:	469a      	mov	sl, r3
 801a480:	e018      	b.n	801a4b4 <dhcp_recv+0x1b0>
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a482:	f7fa fd8d 	bl	8014fa0 <pbuf_copy_partial>
 801a486:	4580      	cmp	r8, r0
 801a488:	d1a8      	bne.n	801a3dc <dhcp_recv+0xd8>
        if (decode_len > 4) {
 801a48a:	2c04      	cmp	r4, #4
 801a48c:	f240 816c 	bls.w	801a768 <dhcp_recv+0x464>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a490:	07a2      	lsls	r2, r4, #30
 801a492:	f040 8177 	bne.w	801a784 <dhcp_recv+0x480>
          dhcp_got_option(dhcp, decode_idx);
 801a496:	f04f 0301 	mov.w	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a49a:	9809      	ldr	r0, [sp, #36]	; 0x24
          decode_len -= 4;
 801a49c:	3c04      	subs	r4, #4
          val_offset += 4;
 801a49e:	3504      	adds	r5, #4
          dhcp_got_option(dhcp, decode_idx);
 801a4a0:	f809 3b01 	strb.w	r3, [r9], #1
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a4a4:	f7f8 feaa 	bl	80131fc <lwip_htonl>
 801a4a8:	4b3a      	ldr	r3, [pc, #232]	; (801a594 <dhcp_recv+0x290>)
          decode_len -= 4;
 801a4aa:	b2e4      	uxtb	r4, r4
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a4ac:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
          val_offset += 4;
 801a4b0:	b2ad      	uxth	r5, r5
          decode_idx++;
 801a4b2:	3701      	adds	r7, #1
        copy_len = LWIP_MIN(decode_len, 4);
 801a4b4:	2c04      	cmp	r4, #4
 801a4b6:	46a0      	mov	r8, r4
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801a4b8:	f899 c000 	ldrb.w	ip, [r9]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a4bc:	462b      	mov	r3, r5
        copy_len = LWIP_MIN(decode_len, 4);
 801a4be:	bf28      	it	cs
 801a4c0:	f04f 0804 	movcs.w	r8, #4
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a4c4:	4651      	mov	r1, sl
 801a4c6:	4630      	mov	r0, r6
 801a4c8:	4642      	mov	r2, r8
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801a4ca:	f1bc 0f00 	cmp.w	ip, #0
 801a4ce:	d0d8      	beq.n	801a482 <dhcp_recv+0x17e>
 801a4d0:	f8dd a014 	ldr.w	sl, [sp, #20]
 801a4d4:	8973      	ldrh	r3, [r6, #10]
    if (offset >= q->len) {
 801a4d6:	459b      	cmp	fp, r3
 801a4d8:	d388      	bcc.n	801a3ec <dhcp_recv+0xe8>
      offset -= q->len;
 801a4da:	ebab 0b03 	sub.w	fp, fp, r3
      offset_max -= q->len;
 801a4de:	ebaa 0303 	sub.w	r3, sl, r3
      offset -= q->len;
 801a4e2:	fa1f fb8b 	uxth.w	fp, fp
      offset_max -= q->len;
 801a4e6:	fa1f fa83 	uxth.w	sl, r3
      if ((offset < offset_max) && offset_max) {
 801a4ea:	45d3      	cmp	fp, sl
 801a4ec:	f080 8155 	bcs.w	801a79a <dhcp_recv+0x496>
 801a4f0:	f1ba 0f00 	cmp.w	sl, #0
 801a4f4:	f000 8151 	beq.w	801a79a <dhcp_recv+0x496>
        q = q->next;
 801a4f8:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a4fa:	2e00      	cmp	r6, #0
 801a4fc:	f000 8172 	beq.w	801a7e4 <dhcp_recv+0x4e0>
        options = (u8_t*)q->payload;
 801a500:	6873      	ldr	r3, [r6, #4]
 801a502:	9301      	str	r3, [sp, #4]
 801a504:	e772      	b.n	801a3ec <dhcp_recv+0xe8>
    offset += len + 2;
 801a506:	fa1f fb81 	uxth.w	fp, r1
 801a50a:	e7e4      	b.n	801a4d6 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a50c:	2c04      	cmp	r4, #4
 801a50e:	f040 80f4 	bne.w	801a6fa <dhcp_recv+0x3f6>
        decode_idx = DHCP_OPTION_IDX_T2;
 801a512:	2705      	movs	r7, #5
 801a514:	e7a6      	b.n	801a464 <dhcp_recv+0x160>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a516:	2c04      	cmp	r4, #4
 801a518:	d157      	bne.n	801a5ca <dhcp_recv+0x2c6>
        decode_idx = DHCP_OPTION_IDX_T1;
 801a51a:	4627      	mov	r7, r4
 801a51c:	e7a2      	b.n	801a464 <dhcp_recv+0x160>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801a51e:	2400      	movs	r4, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801a520:	07a1      	lsls	r1, r4, #30
 801a522:	f040 818b 	bne.w	801a83c <dhcp_recv+0x538>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801a526:	2c08      	cmp	r4, #8
 801a528:	4622      	mov	r2, r4
 801a52a:	bf28      	it	cs
 801a52c:	2208      	movcs	r2, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a52e:	42a2      	cmp	r2, r4
 801a530:	f200 8179 	bhi.w	801a826 <dhcp_recv+0x522>
    offset += len + 2;
 801a534:	eb05 0b04 	add.w	fp, r5, r4
 801a538:	fa1f fb8b 	uxth.w	fp, fp
    if (decode_len > 0) {
 801a53c:	2c00      	cmp	r4, #0
 801a53e:	d0ca      	beq.n	801a4d6 <dhcp_recv+0x1d2>
 801a540:	4614      	mov	r4, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801a542:	2708      	movs	r7, #8
 801a544:	e792      	b.n	801a46c <dhcp_recv+0x168>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a546:	2c04      	cmp	r4, #4
 801a548:	f040 80e2 	bne.w	801a710 <dhcp_recv+0x40c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801a54c:	2702      	movs	r7, #2
 801a54e:	e789      	b.n	801a464 <dhcp_recv+0x160>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a550:	2c01      	cmp	r4, #1
 801a552:	d0e2      	beq.n	801a51a <dhcp_recv+0x216>
 801a554:	4b0b      	ldr	r3, [pc, #44]	; (801a584 <dhcp_recv+0x280>)
 801a556:	f240 621d 	movw	r2, #1565	; 0x61d
 801a55a:	490f      	ldr	r1, [pc, #60]	; (801a598 <dhcp_recv+0x294>)
 801a55c:	480b      	ldr	r0, [pc, #44]	; (801a58c <dhcp_recv+0x288>)
 801a55e:	9f04      	ldr	r7, [sp, #16]
 801a560:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a564:	f003 ff40 	bl	801e3e8 <iprintf>
 801a568:	e6d8      	b.n	801a31c <dhcp_recv+0x18>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a56a:	2c03      	cmp	r4, #3
 801a56c:	f240 80ba 	bls.w	801a6e4 <dhcp_recv+0x3e0>
    offset += len + 2;
 801a570:	eb05 0b04 	add.w	fp, r5, r4
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801a574:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 801a576:	2404      	movs	r4, #4
    offset += len + 2;
 801a578:	fa1f fb8b 	uxth.w	fp, fp
 801a57c:	e776      	b.n	801a46c <dhcp_recv+0x168>
 801a57e:	bf00      	nop
 801a580:	20025a74 	.word	0x20025a74
 801a584:	0803b30c 	.word	0x0803b30c
 801a588:	0803b6a0 	.word	0x0803b6a0
 801a58c:	08023618 	.word	0x08023618
 801a590:	200354b0 	.word	0x200354b0
 801a594:	200354bc 	.word	0x200354bc
 801a598:	0803b6e4 	.word	0x0803b6e4
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a59c:	2c01      	cmp	r4, #1
 801a59e:	f040 80c2 	bne.w	801a726 <dhcp_recv+0x422>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801a5a2:	9b03      	ldr	r3, [sp, #12]
 801a5a4:	2bf0      	cmp	r3, #240	; 0xf0
 801a5a6:	f040 8133 	bne.w	801a810 <dhcp_recv+0x50c>
    offset += len + 2;
 801a5aa:	f10b 0b03 	add.w	fp, fp, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801a5ae:	2700      	movs	r7, #0
    offset += len + 2;
 801a5b0:	fa1f fb8b 	uxth.w	fp, fp
 801a5b4:	e75a      	b.n	801a46c <dhcp_recv+0x168>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a5b6:	2c04      	cmp	r4, #4
 801a5b8:	f040 80c0 	bne.w	801a73c <dhcp_recv+0x438>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801a5bc:	2703      	movs	r7, #3
 801a5be:	e751      	b.n	801a464 <dhcp_recv+0x160>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801a5c0:	2400      	movs	r4, #0
    offset += len + 2;
 801a5c2:	442c      	add	r4, r5
 801a5c4:	fa1f fb84 	uxth.w	fp, r4
 801a5c8:	e785      	b.n	801a4d6 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a5ca:	4bb7      	ldr	r3, [pc, #732]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a5cc:	f240 6225 	movw	r2, #1573	; 0x625
 801a5d0:	49b6      	ldr	r1, [pc, #728]	; (801a8ac <dhcp_recv+0x5a8>)
 801a5d2:	48b7      	ldr	r0, [pc, #732]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a5d4:	9f04      	ldr	r7, [sp, #16]
 801a5d6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a5da:	f003 ff05 	bl	801e3e8 <iprintf>
 801a5de:	e69d      	b.n	801a31c <dhcp_recv+0x18>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801a5e0:	6830      	ldr	r0, [r6, #0]
 801a5e2:	b110      	cbz	r0, 801a5ea <dhcp_recv+0x2e6>
 801a5e4:	6840      	ldr	r0, [r0, #4]
 801a5e6:	7804      	ldrb	r4, [r0, #0]
 801a5e8:	e715      	b.n	801a416 <dhcp_recv+0x112>
    switch(op) {
 801a5ea:	2a3b      	cmp	r2, #59	; 0x3b
 801a5ec:	d8e8      	bhi.n	801a5c0 <dhcp_recv+0x2bc>
 801a5ee:	a001      	add	r0, pc, #4	; (adr r0, 801a5f4 <dhcp_recv+0x2f0>)
 801a5f0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 801a5f4:	0801a507 	.word	0x0801a507
 801a5f8:	0801a753 	.word	0x0801a753
 801a5fc:	0801a5c1 	.word	0x0801a5c1
 801a600:	0801a6e5 	.word	0x0801a6e5
 801a604:	0801a5c1 	.word	0x0801a5c1
 801a608:	0801a5c1 	.word	0x0801a5c1
 801a60c:	0801a51f 	.word	0x0801a51f
 801a610:	0801a5c1 	.word	0x0801a5c1
 801a614:	0801a5c1 	.word	0x0801a5c1
 801a618:	0801a5c1 	.word	0x0801a5c1
 801a61c:	0801a5c1 	.word	0x0801a5c1
 801a620:	0801a5c1 	.word	0x0801a5c1
 801a624:	0801a5c1 	.word	0x0801a5c1
 801a628:	0801a5c1 	.word	0x0801a5c1
 801a62c:	0801a5c1 	.word	0x0801a5c1
 801a630:	0801a5c1 	.word	0x0801a5c1
 801a634:	0801a5c1 	.word	0x0801a5c1
 801a638:	0801a5c1 	.word	0x0801a5c1
 801a63c:	0801a5c1 	.word	0x0801a5c1
 801a640:	0801a5c1 	.word	0x0801a5c1
 801a644:	0801a5c1 	.word	0x0801a5c1
 801a648:	0801a5c1 	.word	0x0801a5c1
 801a64c:	0801a5c1 	.word	0x0801a5c1
 801a650:	0801a5c1 	.word	0x0801a5c1
 801a654:	0801a5c1 	.word	0x0801a5c1
 801a658:	0801a5c1 	.word	0x0801a5c1
 801a65c:	0801a5c1 	.word	0x0801a5c1
 801a660:	0801a5c1 	.word	0x0801a5c1
 801a664:	0801a5c1 	.word	0x0801a5c1
 801a668:	0801a5c1 	.word	0x0801a5c1
 801a66c:	0801a5c1 	.word	0x0801a5c1
 801a670:	0801a5c1 	.word	0x0801a5c1
 801a674:	0801a5c1 	.word	0x0801a5c1
 801a678:	0801a5c1 	.word	0x0801a5c1
 801a67c:	0801a5c1 	.word	0x0801a5c1
 801a680:	0801a5c1 	.word	0x0801a5c1
 801a684:	0801a5c1 	.word	0x0801a5c1
 801a688:	0801a5c1 	.word	0x0801a5c1
 801a68c:	0801a5c1 	.word	0x0801a5c1
 801a690:	0801a5c1 	.word	0x0801a5c1
 801a694:	0801a5c1 	.word	0x0801a5c1
 801a698:	0801a5c1 	.word	0x0801a5c1
 801a69c:	0801a5c1 	.word	0x0801a5c1
 801a6a0:	0801a5c1 	.word	0x0801a5c1
 801a6a4:	0801a5c1 	.word	0x0801a5c1
 801a6a8:	0801a5c1 	.word	0x0801a5c1
 801a6ac:	0801a5c1 	.word	0x0801a5c1
 801a6b0:	0801a5c1 	.word	0x0801a5c1
 801a6b4:	0801a5c1 	.word	0x0801a5c1
 801a6b8:	0801a5c1 	.word	0x0801a5c1
 801a6bc:	0801a5c1 	.word	0x0801a5c1
 801a6c0:	0801a73d 	.word	0x0801a73d
 801a6c4:	0801a727 	.word	0x0801a727
 801a6c8:	0801a555 	.word	0x0801a555
 801a6cc:	0801a711 	.word	0x0801a711
 801a6d0:	0801a5c1 	.word	0x0801a5c1
 801a6d4:	0801a5c1 	.word	0x0801a5c1
 801a6d8:	0801a5c1 	.word	0x0801a5c1
 801a6dc:	0801a5cb 	.word	0x0801a5cb
 801a6e0:	0801a6fb 	.word	0x0801a6fb
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a6e4:	4b70      	ldr	r3, [pc, #448]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a6e6:	f240 52fb 	movw	r2, #1531	; 0x5fb
 801a6ea:	4972      	ldr	r1, [pc, #456]	; (801a8b4 <dhcp_recv+0x5b0>)
 801a6ec:	4870      	ldr	r0, [pc, #448]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a6ee:	9f04      	ldr	r7, [sp, #16]
 801a6f0:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a6f4:	f003 fe78 	bl	801e3e8 <iprintf>
 801a6f8:	e610      	b.n	801a31c <dhcp_recv+0x18>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a6fa:	4b6b      	ldr	r3, [pc, #428]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a6fc:	f240 6229 	movw	r2, #1577	; 0x629
 801a700:	496a      	ldr	r1, [pc, #424]	; (801a8ac <dhcp_recv+0x5a8>)
 801a702:	486b      	ldr	r0, [pc, #428]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a704:	9f04      	ldr	r7, [sp, #16]
 801a706:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a70a:	f003 fe6d 	bl	801e3e8 <iprintf>
 801a70e:	e605      	b.n	801a31c <dhcp_recv+0x18>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a710:	4b65      	ldr	r3, [pc, #404]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a712:	f240 6221 	movw	r2, #1569	; 0x621
 801a716:	4965      	ldr	r1, [pc, #404]	; (801a8ac <dhcp_recv+0x5a8>)
 801a718:	4865      	ldr	r0, [pc, #404]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a71a:	9f04      	ldr	r7, [sp, #16]
 801a71c:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a720:	f003 fe62 	bl	801e3e8 <iprintf>
 801a724:	e5fa      	b.n	801a31c <dhcp_recv+0x18>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a726:	4b60      	ldr	r3, [pc, #384]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a728:	f240 6217 	movw	r2, #1559	; 0x617
 801a72c:	4962      	ldr	r1, [pc, #392]	; (801a8b8 <dhcp_recv+0x5b4>)
 801a72e:	4860      	ldr	r0, [pc, #384]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a730:	9f04      	ldr	r7, [sp, #16]
 801a732:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a736:	f003 fe57 	bl	801e3e8 <iprintf>
 801a73a:	e5ef      	b.n	801a31c <dhcp_recv+0x18>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a73c:	4b5a      	ldr	r3, [pc, #360]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a73e:	f240 6209 	movw	r2, #1545	; 0x609
 801a742:	495a      	ldr	r1, [pc, #360]	; (801a8ac <dhcp_recv+0x5a8>)
 801a744:	485a      	ldr	r0, [pc, #360]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a746:	9f04      	ldr	r7, [sp, #16]
 801a748:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a74c:	f003 fe4c 	bl	801e3e8 <iprintf>
 801a750:	e5e4      	b.n	801a31c <dhcp_recv+0x18>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a752:	4b55      	ldr	r3, [pc, #340]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a754:	f240 52f6 	movw	r2, #1526	; 0x5f6
 801a758:	4954      	ldr	r1, [pc, #336]	; (801a8ac <dhcp_recv+0x5a8>)
 801a75a:	4855      	ldr	r0, [pc, #340]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a75c:	9f04      	ldr	r7, [sp, #16]
 801a75e:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a762:	f003 fe41 	bl	801e3e8 <iprintf>
 801a766:	e5d9      	b.n	801a31c <dhcp_recv+0x18>
 801a768:	f8dd a014 	ldr.w	sl, [sp, #20]
        } else if (decode_len == 4) {
 801a76c:	d02f      	beq.n	801a7ce <dhcp_recv+0x4ca>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a76e:	2c01      	cmp	r4, #1
 801a770:	d143      	bne.n	801a7fa <dhcp_recv+0x4f6>
          value = ((u8_t*)&value)[0];
 801a772:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
        dhcp_set_option_value(dhcp, decode_idx, value);
 801a776:	4a51      	ldr	r2, [pc, #324]	; (801a8bc <dhcp_recv+0x5b8>)
        dhcp_got_option(dhcp, decode_idx);
 801a778:	2301      	movs	r3, #1
        dhcp_set_option_value(dhcp, decode_idx, value);
 801a77a:	f842 0027 	str.w	r0, [r2, r7, lsl #2]
        dhcp_got_option(dhcp, decode_idx);
 801a77e:	4a50      	ldr	r2, [pc, #320]	; (801a8c0 <dhcp_recv+0x5bc>)
 801a780:	55d3      	strb	r3, [r2, r7]
 801a782:	e6a7      	b.n	801a4d4 <dhcp_recv+0x1d0>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a784:	4b48      	ldr	r3, [pc, #288]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a786:	f240 623e 	movw	r2, #1598	; 0x63e
 801a78a:	494e      	ldr	r1, [pc, #312]	; (801a8c4 <dhcp_recv+0x5c0>)
 801a78c:	4848      	ldr	r0, [pc, #288]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a78e:	9f04      	ldr	r7, [sp, #16]
 801a790:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a794:	f003 fe28 	bl	801e3e8 <iprintf>
 801a798:	e5c0      	b.n	801a31c <dhcp_recv+0x18>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801a79a:	4b49      	ldr	r3, [pc, #292]	; (801a8c0 <dhcp_recv+0x5bc>)
 801a79c:	781b      	ldrb	r3, [r3, #0]
 801a79e:	b153      	cbz	r3, 801a7b6 <dhcp_recv+0x4b2>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a7a0:	4b46      	ldr	r3, [pc, #280]	; (801a8bc <dhcp_recv+0x5b8>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	4946      	ldr	r1, [pc, #280]	; (801a8c0 <dhcp_recv+0x5bc>)
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a7a6:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a7a8:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801a7aa:	2b01      	cmp	r3, #1
 801a7ac:	d015      	beq.n	801a7da <dhcp_recv+0x4d6>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801a7ae:	2b02      	cmp	r3, #2
 801a7b0:	d004      	beq.n	801a7bc <dhcp_recv+0x4b8>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801a7b2:	2b03      	cmp	r3, #3
 801a7b4:	d00f      	beq.n	801a7d6 <dhcp_recv+0x4d2>
  } else if (parse_sname_as_options) {
 801a7b6:	9b06      	ldr	r3, [sp, #24]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d04a      	beq.n	801a852 <dhcp_recv+0x54e>
    parse_sname_as_options = 0;
 801a7bc:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801a7be:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    parse_sname_as_options = 0;
 801a7c2:	9306      	str	r3, [sp, #24]
    options_idx = DHCP_SNAME_OFS;
 801a7c4:	232c      	movs	r3, #44	; 0x2c
 801a7c6:	9303      	str	r3, [sp, #12]
 801a7c8:	9b02      	ldr	r3, [sp, #8]
 801a7ca:	895b      	ldrh	r3, [r3, #10]
 801a7cc:	e5f6      	b.n	801a3bc <dhcp_recv+0xb8>
          value = lwip_ntohl(value);
 801a7ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a7d0:	f7f8 fd14 	bl	80131fc <lwip_htonl>
 801a7d4:	e7cf      	b.n	801a776 <dhcp_recv+0x472>
      parse_sname_as_options = 1;
 801a7d6:	2301      	movs	r3, #1
 801a7d8:	9306      	str	r3, [sp, #24]
    options_idx = DHCP_FILE_OFS;
 801a7da:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801a7dc:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 801a7e0:	9303      	str	r3, [sp, #12]
 801a7e2:	e7f1      	b.n	801a7c8 <dhcp_recv+0x4c4>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a7e4:	4b30      	ldr	r3, [pc, #192]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a7e6:	f240 6254 	movw	r2, #1620	; 0x654
 801a7ea:	4937      	ldr	r1, [pc, #220]	; (801a8c8 <dhcp_recv+0x5c4>)
 801a7ec:	4830      	ldr	r0, [pc, #192]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a7ee:	9f04      	ldr	r7, [sp, #16]
 801a7f0:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a7f4:	f003 fdf8 	bl	801e3e8 <iprintf>
 801a7f8:	e590      	b.n	801a31c <dhcp_recv+0x18>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a7fa:	4b2b      	ldr	r3, [pc, #172]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a7fc:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 801a800:	4932      	ldr	r1, [pc, #200]	; (801a8cc <dhcp_recv+0x5c8>)
 801a802:	482b      	ldr	r0, [pc, #172]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a804:	9f04      	ldr	r7, [sp, #16]
 801a806:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a80a:	f003 fded 	bl	801e3e8 <iprintf>
 801a80e:	e585      	b.n	801a31c <dhcp_recv+0x18>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801a810:	4b25      	ldr	r3, [pc, #148]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a812:	f240 6219 	movw	r2, #1561	; 0x619
 801a816:	492e      	ldr	r1, [pc, #184]	; (801a8d0 <dhcp_recv+0x5cc>)
 801a818:	4825      	ldr	r0, [pc, #148]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a81a:	9f04      	ldr	r7, [sp, #16]
 801a81c:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a820:	f003 fde2 	bl	801e3e8 <iprintf>
 801a824:	e57a      	b.n	801a31c <dhcp_recv+0x18>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a826:	4b20      	ldr	r3, [pc, #128]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a828:	f240 6204 	movw	r2, #1540	; 0x604
 801a82c:	4921      	ldr	r1, [pc, #132]	; (801a8b4 <dhcp_recv+0x5b0>)
 801a82e:	4820      	ldr	r0, [pc, #128]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a830:	9f04      	ldr	r7, [sp, #16]
 801a832:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a836:	f003 fdd7 	bl	801e3e8 <iprintf>
 801a83a:	e56f      	b.n	801a31c <dhcp_recv+0x18>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801a83c:	4b1a      	ldr	r3, [pc, #104]	; (801a8a8 <dhcp_recv+0x5a4>)
 801a83e:	f240 6201 	movw	r2, #1537	; 0x601
 801a842:	4924      	ldr	r1, [pc, #144]	; (801a8d4 <dhcp_recv+0x5d0>)
 801a844:	481a      	ldr	r0, [pc, #104]	; (801a8b0 <dhcp_recv+0x5ac>)
 801a846:	9f04      	ldr	r7, [sp, #16]
 801a848:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a84c:	f003 fdcc 	bl	801e3e8 <iprintf>
 801a850:	e564      	b.n	801a31c <dhcp_recv+0x18>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801a852:	4b1b      	ldr	r3, [pc, #108]	; (801a8c0 <dhcp_recv+0x5bc>)
 801a854:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a858:	785b      	ldrb	r3, [r3, #1]
 801a85a:	9f04      	ldr	r7, [sp, #16]
 801a85c:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a860:	2b00      	cmp	r3, #0
 801a862:	f43f ad5b 	beq.w	801a31c <dhcp_recv+0x18>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801a866:	4a15      	ldr	r2, [pc, #84]	; (801a8bc <dhcp_recv+0x5b8>)
 801a868:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 801a86a:	2b05      	cmp	r3, #5
 801a86c:	d034      	beq.n	801a8d8 <dhcp_recv+0x5d4>
  else if ((msg_type == DHCP_NAK) &&
 801a86e:	2b06      	cmp	r3, #6
 801a870:	d041      	beq.n	801a8f6 <dhcp_recv+0x5f2>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801a872:	2b02      	cmp	r3, #2
 801a874:	f47f ad52 	bne.w	801a31c <dhcp_recv+0x18>
 801a878:	7a7b      	ldrb	r3, [r7, #9]
 801a87a:	2b06      	cmp	r3, #6
 801a87c:	f47f ad4e 	bne.w	801a31c <dhcp_recv+0x18>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a880:	4b0f      	ldr	r3, [pc, #60]	; (801a8c0 <dhcp_recv+0x5bc>)
    dhcp->request_timeout = 0;
 801a882:	9906      	ldr	r1, [sp, #24]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a884:	789b      	ldrb	r3, [r3, #2]
    dhcp->request_timeout = 0;
 801a886:	82f9      	strh	r1, [r7, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a888:	2b00      	cmp	r3, #0
 801a88a:	f43f ad47 	beq.w	801a31c <dhcp_recv+0x18>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a88e:	f8da 4028 	ldr.w	r4, [sl, #40]	; 0x28
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801a892:	6890      	ldr	r0, [r2, #8]
 801a894:	f7f8 fcb2 	bl	80131fc <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801a898:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801a89a:	6260      	str	r0, [r4, #36]	; 0x24
    dhcp_select(netif);
 801a89c:	4650      	mov	r0, sl
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801a89e:	691b      	ldr	r3, [r3, #16]
 801a8a0:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 801a8a2:	f7ff fb73 	bl	8019f8c <dhcp_select>
 801a8a6:	e539      	b.n	801a31c <dhcp_recv+0x18>
 801a8a8:	0803b30c 	.word	0x0803b30c
 801a8ac:	0803b6b4 	.word	0x0803b6b4
 801a8b0:	08023618 	.word	0x08023618
 801a8b4:	0803b6c0 	.word	0x0803b6c0
 801a8b8:	0803b6e4 	.word	0x0803b6e4
 801a8bc:	200354bc 	.word	0x200354bc
 801a8c0:	200354b0 	.word	0x200354b0
 801a8c4:	0803b708 	.word	0x0803b708
 801a8c8:	0803b734 	.word	0x0803b734
 801a8cc:	0803b720 	.word	0x0803b720
 801a8d0:	0803b6f0 	.word	0x0803b6f0
 801a8d4:	0803b6d4 	.word	0x0803b6d4
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a8d8:	7a7b      	ldrb	r3, [r7, #9]
 801a8da:	2b01      	cmp	r3, #1
 801a8dc:	d026      	beq.n	801a92c <dhcp_recv+0x628>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a8de:	3b03      	subs	r3, #3
 801a8e0:	2b02      	cmp	r3, #2
 801a8e2:	f63f ad1b 	bhi.w	801a31c <dhcp_recv+0x18>
      dhcp_handle_ack(netif);
 801a8e6:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801a8ea:	f7ff fcb9 	bl	801a260 <dhcp_handle_ack.isra.8>
      dhcp_bind(netif);
 801a8ee:	4650      	mov	r0, sl
 801a8f0:	f7fe ffd8 	bl	80198a4 <dhcp_bind>
 801a8f4:	e512      	b.n	801a31c <dhcp_recv+0x18>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a8f6:	7a7b      	ldrb	r3, [r7, #9]
 801a8f8:	1eda      	subs	r2, r3, #3
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a8fa:	2a02      	cmp	r2, #2
 801a8fc:	d902      	bls.n	801a904 <dhcp_recv+0x600>
 801a8fe:	2b01      	cmp	r3, #1
 801a900:	f47f ad0c 	bne.w	801a31c <dhcp_recv+0x18>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a904:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 801a908:	7a5a      	ldrb	r2, [r3, #9]
 801a90a:	2a0c      	cmp	r2, #12
 801a90c:	d004      	beq.n	801a918 <dhcp_recv+0x614>
    dhcp->tries = 0;
 801a90e:	2200      	movs	r2, #0
    dhcp->state = new_state;
 801a910:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801a912:	729a      	strb	r2, [r3, #10]
    dhcp->state = new_state;
 801a914:	7259      	strb	r1, [r3, #9]
    dhcp->request_timeout = 0;
 801a916:	82da      	strh	r2, [r3, #22]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a918:	4b0a      	ldr	r3, [pc, #40]	; (801a944 <dhcp_recv+0x640>)
 801a91a:	4650      	mov	r0, sl
 801a91c:	461a      	mov	r2, r3
 801a91e:	4619      	mov	r1, r3
 801a920:	f7f9 fe84 	bl	801462c <netif_set_addr>
  dhcp_discover(netif);
 801a924:	4650      	mov	r0, sl
 801a926:	f7ff fa9f 	bl	8019e68 <dhcp_discover>
 801a92a:	e4f7      	b.n	801a31c <dhcp_recv+0x18>
      dhcp_handle_ack(netif);
 801a92c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801a930:	f7ff fc96 	bl	801a260 <dhcp_handle_ack.isra.8>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a934:	f89a 3037 	ldrb.w	r3, [sl, #55]	; 0x37
        dhcp_check(netif);
 801a938:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a93a:	071b      	lsls	r3, r3, #28
 801a93c:	d5d8      	bpl.n	801a8f0 <dhcp_recv+0x5ec>
        dhcp_check(netif);
 801a93e:	f7fe ff99 	bl	8019874 <dhcp_check>
 801a942:	e4eb      	b.n	801a31c <dhcp_recv+0x18>
 801a944:	0803bb0c 	.word	0x0803bb0c

0801a948 <dhcp_network_changed>:
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a948:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (!dhcp)
 801a94a:	b153      	cbz	r3, 801a962 <dhcp_network_changed+0x1a>
  switch (dhcp->state) {
 801a94c:	7a5a      	ldrb	r2, [r3, #9]
 801a94e:	2a0a      	cmp	r2, #10
 801a950:	d80c      	bhi.n	801a96c <dhcp_network_changed+0x24>
 801a952:	e8df f002 	tbb	[pc, r2]
 801a956:	0b06      	.short	0x0b06
 801a958:	0707070b 	.word	0x0707070b
 801a95c:	0b0b0b0b 	.word	0x0b0b0b0b
 801a960:	07          	.byte	0x07
 801a961:	00          	.byte	0x00
}
 801a962:	4770      	bx	lr
    dhcp->tries = 0;
 801a964:	2200      	movs	r2, #0
 801a966:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 801a968:	f7ff bbbc 	b.w	801a0e4 <dhcp_reboot>
    dhcp->tries = 0;
 801a96c:	2200      	movs	r2, #0
 801a96e:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 801a970:	f7ff ba7a 	b.w	8019e68 <dhcp_discover>

0801a974 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a974:	b1f8      	cbz	r0, 801a9b6 <dhcp_arp_reply+0x42>
{
 801a976:	b5f0      	push	{r4, r5, r6, r7, lr}
  dhcp = netif_dhcp_data(netif);
 801a978:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801a97a:	b083      	sub	sp, #12
 801a97c:	4605      	mov	r5, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801a97e:	b114      	cbz	r4, 801a986 <dhcp_arp_reply+0x12>
 801a980:	7a62      	ldrb	r2, [r4, #9]
 801a982:	2a08      	cmp	r2, #8
 801a984:	d001      	beq.n	801a98a <dhcp_arp_reply+0x16>
}
 801a986:	b003      	add	sp, #12
 801a988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801a98a:	6809      	ldr	r1, [r1, #0]
 801a98c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a98e:	4291      	cmp	r1, r2
 801a990:	d1f9      	bne.n	801a986 <dhcp_arp_reply+0x12>
    dhcp->state = new_state;
 801a992:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801a994:	2300      	movs	r3, #0
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801a996:	2204      	movs	r2, #4
    dhcp->state = new_state;
 801a998:	7261      	strb	r1, [r4, #9]
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801a99a:	4621      	mov	r1, r4
    dhcp->tries = 0;
 801a99c:	72a3      	strb	r3, [r4, #10]
    dhcp->request_timeout = 0;
 801a99e:	82e3      	strh	r3, [r4, #22]
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801a9a0:	f7ff f8a8 	bl	8019af4 <dhcp_create_msg>
  if (result == ERR_OK) {
 801a9a4:	b170      	cbz	r0, 801a9c4 <dhcp_arp_reply+0x50>
  if (dhcp->tries < 255) {
 801a9a6:	7aa3      	ldrb	r3, [r4, #10]
 801a9a8:	2bff      	cmp	r3, #255	; 0xff
 801a9aa:	d001      	beq.n	801a9b0 <dhcp_arp_reply+0x3c>
    dhcp->tries++;
 801a9ac:	3301      	adds	r3, #1
 801a9ae:	72a3      	strb	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801a9b0:	2314      	movs	r3, #20
 801a9b2:	82e3      	strh	r3, [r4, #22]
 801a9b4:	e7e7      	b.n	801a986 <dhcp_arp_reply+0x12>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a9b6:	4b18      	ldr	r3, [pc, #96]	; (801aa18 <dhcp_arp_reply+0xa4>)
 801a9b8:	f240 327b 	movw	r2, #891	; 0x37b
 801a9bc:	4917      	ldr	r1, [pc, #92]	; (801aa1c <dhcp_arp_reply+0xa8>)
 801a9be:	4818      	ldr	r0, [pc, #96]	; (801aa20 <dhcp_arp_reply+0xac>)
 801a9c0:	f003 bd12 	b.w	801e3e8 <iprintf>
 801a9c4:	f104 0610 	add.w	r6, r4, #16
 801a9c8:	f104 0714 	add.w	r7, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801a9cc:	2304      	movs	r3, #4
 801a9ce:	2232      	movs	r2, #50	; 0x32
 801a9d0:	4639      	mov	r1, r7
 801a9d2:	4630      	mov	r0, r6
 801a9d4:	f7ff f86a 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a9d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a9da:	f7f8 fc0f 	bl	80131fc <lwip_htonl>
 801a9de:	4639      	mov	r1, r7
 801a9e0:	4602      	mov	r2, r0
 801a9e2:	4630      	mov	r0, r6
 801a9e4:	f7ff f9da 	bl	8019d9c <dhcp_option_long.isra.4>
    dhcp_option_trailer(dhcp);
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	f7ff f991 	bl	8019d10 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801a9ee:	8aa1      	ldrh	r1, [r4, #20]
 801a9f0:	68e0      	ldr	r0, [r4, #12]
 801a9f2:	31f0      	adds	r1, #240	; 0xf0
 801a9f4:	b289      	uxth	r1, r1
 801a9f6:	f7fa f923 	bl	8014c40 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801a9fa:	4a0a      	ldr	r2, [pc, #40]	; (801aa24 <dhcp_arp_reply+0xb0>)
 801a9fc:	68e1      	ldr	r1, [r4, #12]
 801a9fe:	2343      	movs	r3, #67	; 0x43
 801aa00:	6810      	ldr	r0, [r2, #0]
 801aa02:	4a09      	ldr	r2, [pc, #36]	; (801aa28 <dhcp_arp_reply+0xb4>)
 801aa04:	e9cd 5200 	strd	r5, r2, [sp]
 801aa08:	4a08      	ldr	r2, [pc, #32]	; (801aa2c <dhcp_arp_reply+0xb8>)
 801aa0a:	f7fe fdff 	bl	801960c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801aa0e:	4620      	mov	r0, r4
 801aa10:	f7ff f9f4 	bl	8019dfc <dhcp_delete_msg>
 801aa14:	e7c7      	b.n	801a9a6 <dhcp_arp_reply+0x32>
 801aa16:	bf00      	nop
 801aa18:	0803b30c 	.word	0x0803b30c
 801aa1c:	08023608 	.word	0x08023608
 801aa20:	08023618 	.word	0x08023618
 801aa24:	200214f8 	.word	0x200214f8
 801aa28:	0803bb0c 	.word	0x0803bb0c
 801aa2c:	0803bb10 	.word	0x0803bb10

0801aa30 <dhcp_renew>:
{
 801aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aa34:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801aa36:	b083      	sub	sp, #12
 801aa38:	4606      	mov	r6, r0
  if (new_state != dhcp->state) {
 801aa3a:	7a63      	ldrb	r3, [r4, #9]
 801aa3c:	2b05      	cmp	r3, #5
 801aa3e:	d004      	beq.n	801aa4a <dhcp_renew+0x1a>
    dhcp->tries = 0;
 801aa40:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801aa42:	2205      	movs	r2, #5
    dhcp->tries = 0;
 801aa44:	72a3      	strb	r3, [r4, #10]
    dhcp->state = new_state;
 801aa46:	7262      	strb	r2, [r4, #9]
    dhcp->request_timeout = 0;
 801aa48:	82e3      	strh	r3, [r4, #22]
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801aa4a:	2203      	movs	r2, #3
 801aa4c:	4621      	mov	r1, r4
 801aa4e:	4630      	mov	r0, r6
 801aa50:	f7ff f850 	bl	8019af4 <dhcp_create_msg>
  if (result == ERR_OK) {
 801aa54:	4607      	mov	r7, r0
 801aa56:	b1f0      	cbz	r0, 801aa96 <dhcp_renew+0x66>
  if (dhcp->tries < 255) {
 801aa58:	7aa3      	ldrb	r3, [r4, #10]
 801aa5a:	2bff      	cmp	r3, #255	; 0xff
 801aa5c:	d015      	beq.n	801aa8a <dhcp_renew+0x5a>
    dhcp->tries++;
 801aa5e:	3301      	adds	r3, #1
 801aa60:	b2db      	uxtb	r3, r3
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801aa62:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801aa64:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801aa66:	d810      	bhi.n	801aa8a <dhcp_renew+0x5a>
 801aa68:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801aa6c:	4a30      	ldr	r2, [pc, #192]	; (801ab30 <dhcp_renew+0x100>)
}
 801aa6e:	4638      	mov	r0, r7
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801aa70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801aa74:	011b      	lsls	r3, r3, #4
 801aa76:	b29b      	uxth	r3, r3
 801aa78:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801aa7c:	fba2 2303 	umull	r2, r3, r2, r3
 801aa80:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801aa82:	82e3      	strh	r3, [r4, #22]
}
 801aa84:	b003      	add	sp, #12
 801aa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801aa8a:	2328      	movs	r3, #40	; 0x28
}
 801aa8c:	4638      	mov	r0, r7
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801aa8e:	82e3      	strh	r3, [r4, #22]
}
 801aa90:	b003      	add	sp, #12
 801aa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa96:	f104 0a10 	add.w	sl, r4, #16
 801aa9a:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801aa9e:	2302      	movs	r3, #2
 801aaa0:	2239      	movs	r2, #57	; 0x39
 801aaa2:	4650      	mov	r0, sl
 801aaa4:	4659      	mov	r1, fp
 801aaa6:	f7ff f801 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801aaaa:	4659      	mov	r1, fp
 801aaac:	4650      	mov	r0, sl
 801aaae:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
 801aab0:	f7fe ffd8 	bl	8019a64 <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801aab4:	4659      	mov	r1, fp
 801aab6:	4650      	mov	r0, sl
 801aab8:	2304      	movs	r3, #4
 801aaba:	2237      	movs	r2, #55	; 0x37
 801aabc:	4d1d      	ldr	r5, [pc, #116]	; (801ab34 <dhcp_renew+0x104>)
 801aabe:	f7fe fff5 	bl	8019aac <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801aac2:	8aa3      	ldrh	r3, [r4, #20]
 801aac4:	f105 0903 	add.w	r9, r5, #3
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801aac8:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801aacc:	2b43      	cmp	r3, #67	; 0x43
 801aace:	f8df b070 	ldr.w	fp, [pc, #112]	; 801ab40 <dhcp_renew+0x110>
 801aad2:	f8df a070 	ldr.w	sl, [pc, #112]	; 801ab44 <dhcp_renew+0x114>
 801aad6:	d80c      	bhi.n	801aaf2 <dhcp_renew+0xc2>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801aad8:	6922      	ldr	r2, [r4, #16]
 801aada:	1c59      	adds	r1, r3, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aadc:	45a9      	cmp	r9, r5
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801aade:	4413      	add	r3, r2
 801aae0:	82a1      	strh	r1, [r4, #20]
 801aae2:	f883 80f0 	strb.w	r8, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aae6:	d00d      	beq.n	801ab04 <dhcp_renew+0xd4>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801aae8:	8aa3      	ldrh	r3, [r4, #20]
 801aaea:	f815 8b01 	ldrb.w	r8, [r5], #1
 801aaee:	2b43      	cmp	r3, #67	; 0x43
 801aaf0:	d9f2      	bls.n	801aad8 <dhcp_renew+0xa8>
 801aaf2:	465b      	mov	r3, fp
 801aaf4:	f240 527b 	movw	r2, #1403	; 0x57b
 801aaf8:	4651      	mov	r1, sl
 801aafa:	480f      	ldr	r0, [pc, #60]	; (801ab38 <dhcp_renew+0x108>)
 801aafc:	f003 fc74 	bl	801e3e8 <iprintf>
 801ab00:	8aa3      	ldrh	r3, [r4, #20]
 801ab02:	e7e9      	b.n	801aad8 <dhcp_renew+0xa8>
    dhcp_option_trailer(dhcp);
 801ab04:	4620      	mov	r0, r4
 801ab06:	f7ff f903 	bl	8019d10 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801ab0a:	8aa1      	ldrh	r1, [r4, #20]
 801ab0c:	68e0      	ldr	r0, [r4, #12]
 801ab0e:	31f0      	adds	r1, #240	; 0xf0
 801ab10:	b289      	uxth	r1, r1
 801ab12:	f7fa f895 	bl	8014c40 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801ab16:	4a09      	ldr	r2, [pc, #36]	; (801ab3c <dhcp_renew+0x10c>)
 801ab18:	68e1      	ldr	r1, [r4, #12]
 801ab1a:	2343      	movs	r3, #67	; 0x43
 801ab1c:	6810      	ldr	r0, [r2, #0]
 801ab1e:	f104 0224 	add.w	r2, r4, #36	; 0x24
 801ab22:	9600      	str	r6, [sp, #0]
 801ab24:	f7fe fde8 	bl	80196f8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801ab28:	4620      	mov	r0, r4
 801ab2a:	f7ff f967 	bl	8019dfc <dhcp_delete_msg>
 801ab2e:	e793      	b.n	801aa58 <dhcp_renew+0x28>
 801ab30:	10624dd3 	.word	0x10624dd3
 801ab34:	0803b519 	.word	0x0803b519
 801ab38:	08023618 	.word	0x08023618
 801ab3c:	200214f8 	.word	0x200214f8
 801ab40:	0803b30c 	.word	0x0803b30c
 801ab44:	0803b448 	.word	0x0803b448

0801ab48 <dhcp_release>:
{
 801ab48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ab4c:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801ab4e:	b085      	sub	sp, #20
  if (dhcp == NULL) {
 801ab50:	2c00      	cmp	r4, #0
 801ab52:	d058      	beq.n	801ac06 <dhcp_release+0xbe>
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ab54:	7a63      	ldrb	r3, [r4, #9]
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801ab56:	6a61      	ldr	r1, [r4, #36]	; 0x24
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ab58:	1f1a      	subs	r2, r3, #4
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801ab5a:	9103      	str	r1, [sp, #12]
 801ab5c:	2b0a      	cmp	r3, #10
 801ab5e:	bf18      	it	ne
 801ab60:	2a01      	cmpne	r2, #1
 801ab62:	bf94      	ite	ls
 801ab64:	2501      	movls	r5, #1
 801ab66:	2500      	movhi	r5, #0
  if (new_state != dhcp->state) {
 801ab68:	b973      	cbnz	r3, 801ab88 <dhcp_release+0x40>
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801ab70:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801ab74:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801ab78:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801ab7c:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (!is_dhcp_supplied_address) {
 801ab7e:	b945      	cbnz	r5, 801ab92 <dhcp_release+0x4a>
}
 801ab80:	4628      	mov	r0, r5
 801ab82:	b005      	add	sp, #20
 801ab84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dhcp->state = new_state;
 801ab88:	2300      	movs	r3, #0
 801ab8a:	7263      	strb	r3, [r4, #9]
    dhcp->tries = 0;
 801ab8c:	72a3      	strb	r3, [r4, #10]
    dhcp->request_timeout = 0;
 801ab8e:	82e3      	strh	r3, [r4, #22]
 801ab90:	e7eb      	b.n	801ab6a <dhcp_release+0x22>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801ab92:	2207      	movs	r2, #7
 801ab94:	4621      	mov	r1, r4
 801ab96:	4606      	mov	r6, r0
 801ab98:	f7fe ffac 	bl	8019af4 <dhcp_create_msg>
  if (result == ERR_OK) {
 801ab9c:	4605      	mov	r5, r0
 801ab9e:	b148      	cbz	r0, 801abb4 <dhcp_release+0x6c>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801aba0:	4b1a      	ldr	r3, [pc, #104]	; (801ac0c <dhcp_release+0xc4>)
 801aba2:	4630      	mov	r0, r6
 801aba4:	461a      	mov	r2, r3
 801aba6:	4619      	mov	r1, r3
 801aba8:	f7f9 fd40 	bl	801462c <netif_set_addr>
}
 801abac:	4628      	mov	r0, r5
 801abae:	b005      	add	sp, #20
 801abb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801abb4:	f104 0810 	add.w	r8, r4, #16
 801abb8:	f104 0914 	add.w	r9, r4, #20
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801abbc:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801abbe:	2304      	movs	r3, #4
 801abc0:	4649      	mov	r1, r9
 801abc2:	2236      	movs	r2, #54	; 0x36
 801abc4:	4640      	mov	r0, r8
 801abc6:	f7fe ff71 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801abca:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 801abce:	f7f8 fb15 	bl	80131fc <lwip_htonl>
 801abd2:	4649      	mov	r1, r9
 801abd4:	4602      	mov	r2, r0
 801abd6:	4640      	mov	r0, r8
 801abd8:	f7ff f8e0 	bl	8019d9c <dhcp_option_long.isra.4>
    dhcp_option_trailer(dhcp);
 801abdc:	4620      	mov	r0, r4
 801abde:	f7ff f897 	bl	8019d10 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801abe2:	8aa1      	ldrh	r1, [r4, #20]
 801abe4:	68e0      	ldr	r0, [r4, #12]
 801abe6:	31f0      	adds	r1, #240	; 0xf0
 801abe8:	b289      	uxth	r1, r1
 801abea:	f7fa f829 	bl	8014c40 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 801abee:	4b08      	ldr	r3, [pc, #32]	; (801ac10 <dhcp_release+0xc8>)
 801abf0:	68e1      	ldr	r1, [r4, #12]
 801abf2:	463a      	mov	r2, r7
 801abf4:	6818      	ldr	r0, [r3, #0]
 801abf6:	2343      	movs	r3, #67	; 0x43
 801abf8:	9600      	str	r6, [sp, #0]
 801abfa:	f7fe fd7d 	bl	80196f8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801abfe:	4620      	mov	r0, r4
 801ac00:	f7ff f8fc 	bl	8019dfc <dhcp_delete_msg>
 801ac04:	e7cc      	b.n	801aba0 <dhcp_release+0x58>
    return ERR_ARG;
 801ac06:	f06f 050f 	mvn.w	r5, #15
 801ac0a:	e7b9      	b.n	801ab80 <dhcp_release+0x38>
 801ac0c:	0803bb0c 	.word	0x0803bb0c
 801ac10:	200214f8 	.word	0x200214f8

0801ac14 <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 801ac14:	4b60      	ldr	r3, [pc, #384]	; (801ad98 <dhcp_coarse_tmr+0x184>)
{
 801ac16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = netif_list;
 801ac1a:	681d      	ldr	r5, [r3, #0]
{
 801ac1c:	b085      	sub	sp, #20
  while (netif != NULL) {
 801ac1e:	b1f5      	cbz	r5, 801ac5e <dhcp_coarse_tmr+0x4a>
 801ac20:	4e5e      	ldr	r6, [pc, #376]	; (801ad9c <dhcp_coarse_tmr+0x188>)
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801ac22:	f8df 818c 	ldr.w	r8, [pc, #396]	; 801adb0 <dhcp_coarse_tmr+0x19c>
 801ac26:	4f5e      	ldr	r7, [pc, #376]	; (801ada0 <dhcp_coarse_tmr+0x18c>)
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ac28:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801ac2a:	b1ac      	cbz	r4, 801ac58 <dhcp_coarse_tmr+0x44>
 801ac2c:	7a63      	ldrb	r3, [r4, #9]
 801ac2e:	b19b      	cbz	r3, 801ac58 <dhcp_coarse_tmr+0x44>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801ac30:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 801ac32:	b129      	cbz	r1, 801ac40 <dhcp_coarse_tmr+0x2c>
 801ac34:	8c22      	ldrh	r2, [r4, #32]
 801ac36:	3201      	adds	r2, #1
 801ac38:	b292      	uxth	r2, r2
 801ac3a:	4291      	cmp	r1, r2
 801ac3c:	8422      	strh	r2, [r4, #32]
 801ac3e:	d011      	beq.n	801ac64 <dhcp_coarse_tmr+0x50>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801ac40:	8be2      	ldrh	r2, [r4, #30]
 801ac42:	b11a      	cbz	r2, 801ac4c <dhcp_coarse_tmr+0x38>
 801ac44:	1e51      	subs	r1, r2, #1
 801ac46:	2a01      	cmp	r2, #1
 801ac48:	83e1      	strh	r1, [r4, #30]
 801ac4a:	d012      	beq.n	801ac72 <dhcp_coarse_tmr+0x5e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801ac4c:	8ba2      	ldrh	r2, [r4, #28]
 801ac4e:	b11a      	cbz	r2, 801ac58 <dhcp_coarse_tmr+0x44>
 801ac50:	1e51      	subs	r1, r2, #1
 801ac52:	2a01      	cmp	r2, #1
 801ac54:	83a1      	strh	r1, [r4, #28]
 801ac56:	d03f      	beq.n	801acd8 <dhcp_coarse_tmr+0xc4>
    netif = netif->next;
 801ac58:	682d      	ldr	r5, [r5, #0]
  while (netif != NULL) {
 801ac5a:	2d00      	cmp	r5, #0
 801ac5c:	d1e4      	bne.n	801ac28 <dhcp_coarse_tmr+0x14>
}
 801ac5e:	b005      	add	sp, #20
 801ac60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release(netif);
 801ac64:	4628      	mov	r0, r5
 801ac66:	f7ff ff6f 	bl	801ab48 <dhcp_release>
        dhcp_discover(netif);
 801ac6a:	4628      	mov	r0, r5
 801ac6c:	f7ff f8fc 	bl	8019e68 <dhcp_discover>
 801ac70:	e7f2      	b.n	801ac58 <dhcp_coarse_tmr+0x44>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ac72:	1e5a      	subs	r2, r3, #1
 801ac74:	b2d1      	uxtb	r1, r2
 801ac76:	2909      	cmp	r1, #9
 801ac78:	d8ee      	bhi.n	801ac58 <dhcp_coarse_tmr+0x44>
 801ac7a:	f240 2219 	movw	r2, #537	; 0x219
 801ac7e:	40ca      	lsrs	r2, r1
 801ac80:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801ac82:	f012 0201 	ands.w	r2, r2, #1
 801ac86:	d1e7      	bne.n	801ac58 <dhcp_coarse_tmr+0x44>
  if (new_state != dhcp->state) {
 801ac88:	2b04      	cmp	r3, #4
 801ac8a:	d003      	beq.n	801ac94 <dhcp_coarse_tmr+0x80>
    dhcp->state = new_state;
 801ac8c:	2304      	movs	r3, #4
    dhcp->tries = 0;
 801ac8e:	72a2      	strb	r2, [r4, #10]
    dhcp->request_timeout = 0;
 801ac90:	82e2      	strh	r2, [r4, #22]
    dhcp->state = new_state;
 801ac92:	7263      	strb	r3, [r4, #9]
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801ac94:	2203      	movs	r2, #3
 801ac96:	4621      	mov	r1, r4
 801ac98:	4628      	mov	r0, r5
 801ac9a:	f7fe ff2b 	bl	8019af4 <dhcp_create_msg>
  if (result == ERR_OK) {
 801ac9e:	b370      	cbz	r0, 801acfe <dhcp_coarse_tmr+0xea>
  if (dhcp->tries < 255) {
 801aca0:	7aa3      	ldrb	r3, [r4, #10]
 801aca2:	2bff      	cmp	r3, #255	; 0xff
 801aca4:	d029      	beq.n	801acfa <dhcp_coarse_tmr+0xe6>
    dhcp->tries++;
 801aca6:	3301      	adds	r3, #1
 801aca8:	b2db      	uxtb	r3, r3
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801acaa:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801acac:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801acae:	d824      	bhi.n	801acfa <dhcp_coarse_tmr+0xe6>
 801acb0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801acb4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801acb8:	00db      	lsls	r3, r3, #3
 801acba:	b29b      	uxth	r3, r3
 801acbc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801acc0:	fba6 2303 	umull	r2, r3, r6, r3
 801acc4:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801acc6:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801acc8:	8c21      	ldrh	r1, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801acca:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801accc:	1a53      	subs	r3, r2, r1
 801acce:	2b01      	cmp	r3, #1
 801acd0:	ddc2      	ble.n	801ac58 <dhcp_coarse_tmr+0x44>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801acd2:	105b      	asrs	r3, r3, #1
 801acd4:	83e3      	strh	r3, [r4, #30]
 801acd6:	e7bf      	b.n	801ac58 <dhcp_coarse_tmr+0x44>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801acd8:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 801acdc:	2a01      	cmp	r2, #1
 801acde:	d001      	beq.n	801ace4 <dhcp_coarse_tmr+0xd0>
 801ace0:	2b0a      	cmp	r3, #10
 801ace2:	d1b9      	bne.n	801ac58 <dhcp_coarse_tmr+0x44>
    dhcp_renew(netif);
 801ace4:	4628      	mov	r0, r5
 801ace6:	f7ff fea3 	bl	801aa30 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801acea:	8b63      	ldrh	r3, [r4, #26]
 801acec:	8c22      	ldrh	r2, [r4, #32]
 801acee:	1a9b      	subs	r3, r3, r2
 801acf0:	2b01      	cmp	r3, #1
 801acf2:	ddb1      	ble.n	801ac58 <dhcp_coarse_tmr+0x44>
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801acf4:	105b      	asrs	r3, r3, #1
 801acf6:	83a3      	strh	r3, [r4, #28]
 801acf8:	e7ae      	b.n	801ac58 <dhcp_coarse_tmr+0x44>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801acfa:	2314      	movs	r3, #20
 801acfc:	e7e3      	b.n	801acc6 <dhcp_coarse_tmr+0xb2>
 801acfe:	f104 0a10 	add.w	sl, r4, #16
 801ad02:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ad06:	2302      	movs	r3, #2
 801ad08:	2239      	movs	r2, #57	; 0x39
 801ad0a:	4650      	mov	r0, sl
 801ad0c:	4659      	mov	r1, fp
 801ad0e:	f7fe fecd 	bl	8019aac <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801ad12:	4659      	mov	r1, fp
 801ad14:	4650      	mov	r0, sl
 801ad16:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
 801ad18:	f8cd b00c 	str.w	fp, [sp, #12]
 801ad1c:	f7fe fea2 	bl	8019a64 <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ad20:	4650      	mov	r0, sl
 801ad22:	2304      	movs	r3, #4
 801ad24:	9903      	ldr	r1, [sp, #12]
 801ad26:	2237      	movs	r2, #55	; 0x37
 801ad28:	f7fe fec0 	bl	8019aac <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801ad2c:	8aa3      	ldrh	r3, [r4, #20]
 801ad2e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 801adb4 <dhcp_coarse_tmr+0x1a0>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ad32:	f04f 0b01 	mov.w	fp, #1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801ad36:	2b43      	cmp	r3, #67	; 0x43
 801ad38:	f8df a07c 	ldr.w	sl, [pc, #124]	; 801adb8 <dhcp_coarse_tmr+0x1a4>
 801ad3c:	d80d      	bhi.n	801ad5a <dhcp_coarse_tmr+0x146>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801ad3e:	6922      	ldr	r2, [r4, #16]
 801ad40:	1c59      	adds	r1, r3, #1
 801ad42:	4413      	add	r3, r2
 801ad44:	82a1      	strh	r1, [r4, #20]
 801ad46:	f883 b0f0 	strb.w	fp, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ad4a:	4b16      	ldr	r3, [pc, #88]	; (801ada4 <dhcp_coarse_tmr+0x190>)
 801ad4c:	4599      	cmp	r9, r3
 801ad4e:	d00d      	beq.n	801ad6c <dhcp_coarse_tmr+0x158>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801ad50:	8aa3      	ldrh	r3, [r4, #20]
 801ad52:	f819 bb01 	ldrb.w	fp, [r9], #1
 801ad56:	2b43      	cmp	r3, #67	; 0x43
 801ad58:	d9f1      	bls.n	801ad3e <dhcp_coarse_tmr+0x12a>
 801ad5a:	4643      	mov	r3, r8
 801ad5c:	f240 527b 	movw	r2, #1403	; 0x57b
 801ad60:	4639      	mov	r1, r7
 801ad62:	4650      	mov	r0, sl
 801ad64:	f003 fb40 	bl	801e3e8 <iprintf>
 801ad68:	8aa3      	ldrh	r3, [r4, #20]
 801ad6a:	e7e8      	b.n	801ad3e <dhcp_coarse_tmr+0x12a>
    dhcp_option_trailer(dhcp);
 801ad6c:	4620      	mov	r0, r4
 801ad6e:	f7fe ffcf 	bl	8019d10 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801ad72:	8aa1      	ldrh	r1, [r4, #20]
 801ad74:	68e0      	ldr	r0, [r4, #12]
 801ad76:	31f0      	adds	r1, #240	; 0xf0
 801ad78:	b289      	uxth	r1, r1
 801ad7a:	f7f9 ff61 	bl	8014c40 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801ad7e:	4a0a      	ldr	r2, [pc, #40]	; (801ada8 <dhcp_coarse_tmr+0x194>)
 801ad80:	68e1      	ldr	r1, [r4, #12]
 801ad82:	2343      	movs	r3, #67	; 0x43
 801ad84:	6810      	ldr	r0, [r2, #0]
 801ad86:	9500      	str	r5, [sp, #0]
 801ad88:	4a08      	ldr	r2, [pc, #32]	; (801adac <dhcp_coarse_tmr+0x198>)
 801ad8a:	f7fe fcb5 	bl	80196f8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801ad8e:	4620      	mov	r0, r4
 801ad90:	f7ff f834 	bl	8019dfc <dhcp_delete_msg>
 801ad94:	e784      	b.n	801aca0 <dhcp_coarse_tmr+0x8c>
 801ad96:	bf00      	nop
 801ad98:	20035378 	.word	0x20035378
 801ad9c:	10624dd3 	.word	0x10624dd3
 801ada0:	0803b448 	.word	0x0803b448
 801ada4:	0803b51c 	.word	0x0803b51c
 801ada8:	200214f8 	.word	0x200214f8
 801adac:	0803bb10 	.word	0x0803bb10
 801adb0:	0803b30c 	.word	0x0803b30c
 801adb4:	0803b519 	.word	0x0803b519
 801adb8:	08023618 	.word	0x08023618

0801adbc <dhcp_fine_tmr>:
{
 801adbc:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 801adbe:	4b1f      	ldr	r3, [pc, #124]	; (801ae3c <dhcp_fine_tmr+0x80>)
 801adc0:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 801adc2:	b1fc      	cbz	r4, 801ae04 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 801adc4:	2500      	movs	r5, #0
 801adc6:	e003      	b.n	801add0 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 801adc8:	3a01      	subs	r2, #1
 801adca:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 801adcc:	6824      	ldr	r4, [r4, #0]
  while (netif != NULL) {
 801adce:	b1cc      	cbz	r4, 801ae04 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801add0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 801add2:	2b00      	cmp	r3, #0
 801add4:	d0fa      	beq.n	801adcc <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 801add6:	8ada      	ldrh	r2, [r3, #22]
 801add8:	2a01      	cmp	r2, #1
 801adda:	d8f5      	bhi.n	801adc8 <dhcp_fine_tmr+0xc>
      else if (dhcp->request_timeout == 1) {
 801addc:	d1f6      	bne.n	801adcc <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801adde:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 801ade0:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801ade2:	2a0c      	cmp	r2, #12
 801ade4:	d018      	beq.n	801ae18 <dhcp_fine_tmr+0x5c>
 801ade6:	2a06      	cmp	r2, #6
 801ade8:	d016      	beq.n	801ae18 <dhcp_fine_tmr+0x5c>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801adea:	2a01      	cmp	r2, #1
 801adec:	d00b      	beq.n	801ae06 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801adee:	2a08      	cmp	r2, #8
 801adf0:	d016      	beq.n	801ae20 <dhcp_fine_tmr+0x64>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801adf2:	2a03      	cmp	r2, #3
 801adf4:	d1ea      	bne.n	801adcc <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 801adf6:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_reboot(netif);
 801adf8:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 801adfa:	2b01      	cmp	r3, #1
 801adfc:	d91a      	bls.n	801ae34 <dhcp_fine_tmr+0x78>
      dhcp_discover(netif);
 801adfe:	f7ff f833 	bl	8019e68 <dhcp_discover>
 801ae02:	e7e3      	b.n	801adcc <dhcp_fine_tmr+0x10>
}
 801ae04:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 5) {
 801ae06:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_select(netif);
 801ae08:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 801ae0a:	2b05      	cmp	r3, #5
 801ae0c:	d802      	bhi.n	801ae14 <dhcp_fine_tmr+0x58>
      dhcp_select(netif);
 801ae0e:	f7ff f8bd 	bl	8019f8c <dhcp_select>
 801ae12:	e7db      	b.n	801adcc <dhcp_fine_tmr+0x10>
      dhcp_release(netif);
 801ae14:	f7ff fe98 	bl	801ab48 <dhcp_release>
      dhcp_discover(netif);
 801ae18:	4620      	mov	r0, r4
 801ae1a:	f7ff f825 	bl	8019e68 <dhcp_discover>
 801ae1e:	e7d5      	b.n	801adcc <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 1) {
 801ae20:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_check(netif);
 801ae22:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 801ae24:	2b01      	cmp	r3, #1
 801ae26:	d902      	bls.n	801ae2e <dhcp_fine_tmr+0x72>
      dhcp_bind(netif);
 801ae28:	f7fe fd3c 	bl	80198a4 <dhcp_bind>
 801ae2c:	e7ce      	b.n	801adcc <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 801ae2e:	f7fe fd21 	bl	8019874 <dhcp_check>
 801ae32:	e7cb      	b.n	801adcc <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 801ae34:	f7ff f956 	bl	801a0e4 <dhcp_reboot>
 801ae38:	e7c8      	b.n	801adcc <dhcp_fine_tmr+0x10>
 801ae3a:	bf00      	nop
 801ae3c:	20035378 	.word	0x20035378

0801ae40 <dhcp_stop>:
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801ae40:	b1c8      	cbz	r0, 801ae76 <dhcp_stop+0x36>
{
 801ae42:	b510      	push	{r4, lr}
  dhcp = netif_dhcp_data(netif);
 801ae44:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (dhcp != NULL) {
 801ae46:	b184      	cbz	r4, 801ae6a <dhcp_stop+0x2a>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801ae48:	6863      	ldr	r3, [r4, #4]
 801ae4a:	b133      	cbz	r3, 801ae5a <dhcp_stop+0x1a>
 801ae4c:	4b0d      	ldr	r3, [pc, #52]	; (801ae84 <dhcp_stop+0x44>)
 801ae4e:	f240 524f 	movw	r2, #1359	; 0x54f
 801ae52:	490d      	ldr	r1, [pc, #52]	; (801ae88 <dhcp_stop+0x48>)
 801ae54:	480d      	ldr	r0, [pc, #52]	; (801ae8c <dhcp_stop+0x4c>)
 801ae56:	f003 fac7 	bl	801e3e8 <iprintf>
  if (new_state != dhcp->state) {
 801ae5a:	7a63      	ldrb	r3, [r4, #9]
 801ae5c:	b11b      	cbz	r3, 801ae66 <dhcp_stop+0x26>
    dhcp->state = new_state;
 801ae5e:	2300      	movs	r3, #0
 801ae60:	7263      	strb	r3, [r4, #9]
    dhcp->tries = 0;
 801ae62:	72a3      	strb	r3, [r4, #10]
    dhcp->request_timeout = 0;
 801ae64:	82e3      	strh	r3, [r4, #22]
    if (dhcp->pcb_allocated != 0) {
 801ae66:	7a23      	ldrb	r3, [r4, #8]
 801ae68:	b903      	cbnz	r3, 801ae6c <dhcp_stop+0x2c>
}
 801ae6a:	bd10      	pop	{r4, pc}
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801ae6c:	f7ff f9d6 	bl	801a21c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801ae70:	2300      	movs	r3, #0
 801ae72:	7223      	strb	r3, [r4, #8]
}
 801ae74:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801ae76:	4b03      	ldr	r3, [pc, #12]	; (801ae84 <dhcp_stop+0x44>)
 801ae78:	f240 5242 	movw	r2, #1346	; 0x542
 801ae7c:	4904      	ldr	r1, [pc, #16]	; (801ae90 <dhcp_stop+0x50>)
 801ae7e:	4803      	ldr	r0, [pc, #12]	; (801ae8c <dhcp_stop+0x4c>)
 801ae80:	f003 bab2 	b.w	801e3e8 <iprintf>
 801ae84:	0803b30c 	.word	0x0803b30c
 801ae88:	0803b6a0 	.word	0x0803b6a0
 801ae8c:	08023618 	.word	0x08023618
 801ae90:	0803b7b8 	.word	0x0803b7b8

0801ae94 <dhcp_start>:
{
 801ae94:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801ae96:	2800      	cmp	r0, #0
 801ae98:	d059      	beq.n	801af4e <dhcp_start+0xba>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801ae9a:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 801ae9e:	4605      	mov	r5, r0
 801aea0:	07da      	lsls	r2, r3, #31
 801aea2:	d54a      	bpl.n	801af3a <dhcp_start+0xa6>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801aea4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  dhcp = netif_dhcp_data(netif);
 801aea6:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801aea8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801aeac:	d342      	bcc.n	801af34 <dhcp_start+0xa0>
  if (dhcp == NULL) {
 801aeae:	2c00      	cmp	r4, #0
 801aeb0:	d039      	beq.n	801af26 <dhcp_start+0x92>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 801aeb2:	68e3      	ldr	r3, [r4, #12]
 801aeb4:	b133      	cbz	r3, 801aec4 <dhcp_start+0x30>
 801aeb6:	4b2b      	ldr	r3, [pc, #172]	; (801af64 <dhcp_start+0xd0>)
 801aeb8:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 801aebc:	492a      	ldr	r1, [pc, #168]	; (801af68 <dhcp_start+0xd4>)
 801aebe:	482b      	ldr	r0, [pc, #172]	; (801af6c <dhcp_start+0xd8>)
 801aec0:	f003 fa92 	bl	801e3e8 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801aec4:	6863      	ldr	r3, [r4, #4]
 801aec6:	b133      	cbz	r3, 801aed6 <dhcp_start+0x42>
 801aec8:	4b26      	ldr	r3, [pc, #152]	; (801af64 <dhcp_start+0xd0>)
 801aeca:	f240 22f1 	movw	r2, #753	; 0x2f1
 801aece:	4928      	ldr	r1, [pc, #160]	; (801af70 <dhcp_start+0xdc>)
 801aed0:	4826      	ldr	r0, [pc, #152]	; (801af6c <dhcp_start+0xd8>)
 801aed2:	f003 fa89 	bl	801e3e8 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 801aed6:	7a23      	ldrb	r3, [r4, #8]
 801aed8:	bb13      	cbnz	r3, 801af20 <dhcp_start+0x8c>
  memset(dhcp, 0, sizeof(struct dhcp));
 801aeda:	2240      	movs	r2, #64	; 0x40
 801aedc:	2100      	movs	r1, #0
 801aede:	4620      	mov	r0, r4
 801aee0:	f002 fb02 	bl	801d4e8 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801aee4:	f7fe fd84 	bl	80199f0 <dhcp_inc_pcb_refcount>
 801aee8:	4606      	mov	r6, r0
 801aeea:	bb18      	cbnz	r0, 801af34 <dhcp_start+0xa0>
  dhcp->pcb_allocated = 1;
 801aeec:	2301      	movs	r3, #1
 801aeee:	7223      	strb	r3, [r4, #8]
  if (!netif_is_link_up(netif)) {
 801aef0:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 801aef4:	075b      	lsls	r3, r3, #29
 801aef6:	d408      	bmi.n	801af0a <dhcp_start+0x76>
  if (new_state != dhcp->state) {
 801aef8:	7a63      	ldrb	r3, [r4, #9]
 801aefa:	2b02      	cmp	r3, #2
 801aefc:	d003      	beq.n	801af06 <dhcp_start+0x72>
    dhcp->state = new_state;
 801aefe:	2302      	movs	r3, #2
    dhcp->tries = 0;
 801af00:	72a0      	strb	r0, [r4, #10]
    dhcp->request_timeout = 0;
 801af02:	82e0      	strh	r0, [r4, #22]
    dhcp->state = new_state;
 801af04:	7263      	strb	r3, [r4, #9]
}
 801af06:	4630      	mov	r0, r6
 801af08:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 801af0a:	4628      	mov	r0, r5
 801af0c:	f7fe ffac 	bl	8019e68 <dhcp_discover>
  if (result != ERR_OK) {
 801af10:	2800      	cmp	r0, #0
 801af12:	d0f8      	beq.n	801af06 <dhcp_start+0x72>
    dhcp_stop(netif);
 801af14:	4628      	mov	r0, r5
    return ERR_MEM;
 801af16:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_stop(netif);
 801af1a:	f7ff ff91 	bl	801ae40 <dhcp_stop>
    return ERR_MEM;
 801af1e:	e7f2      	b.n	801af06 <dhcp_start+0x72>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801af20:	f7ff f97c 	bl	801a21c <dhcp_dec_pcb_refcount>
 801af24:	e7d9      	b.n	801aeda <dhcp_start+0x46>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801af26:	2040      	movs	r0, #64	; 0x40
 801af28:	f7f9 f8d4 	bl	80140d4 <mem_malloc>
    if (dhcp == NULL) {
 801af2c:	4604      	mov	r4, r0
 801af2e:	b108      	cbz	r0, 801af34 <dhcp_start+0xa0>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801af30:	62a8      	str	r0, [r5, #40]	; 0x28
 801af32:	e7d2      	b.n	801aeda <dhcp_start+0x46>
    return ERR_MEM;
 801af34:	f04f 36ff 	mov.w	r6, #4294967295
 801af38:	e7e5      	b.n	801af06 <dhcp_start+0x72>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801af3a:	4b0a      	ldr	r3, [pc, #40]	; (801af64 <dhcp_start+0xd0>)
 801af3c:	f240 22d7 	movw	r2, #727	; 0x2d7
 801af40:	490c      	ldr	r1, [pc, #48]	; (801af74 <dhcp_start+0xe0>)
 801af42:	f06f 060f 	mvn.w	r6, #15
 801af46:	4809      	ldr	r0, [pc, #36]	; (801af6c <dhcp_start+0xd8>)
 801af48:	f003 fa4e 	bl	801e3e8 <iprintf>
 801af4c:	e7db      	b.n	801af06 <dhcp_start+0x72>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801af4e:	4b05      	ldr	r3, [pc, #20]	; (801af64 <dhcp_start+0xd0>)
 801af50:	f240 22d6 	movw	r2, #726	; 0x2d6
 801af54:	4908      	ldr	r1, [pc, #32]	; (801af78 <dhcp_start+0xe4>)
 801af56:	f06f 060f 	mvn.w	r6, #15
 801af5a:	4804      	ldr	r0, [pc, #16]	; (801af6c <dhcp_start+0xd8>)
 801af5c:	f003 fa44 	bl	801e3e8 <iprintf>
 801af60:	e7d1      	b.n	801af06 <dhcp_start+0x72>
 801af62:	bf00      	nop
 801af64:	0803b30c 	.word	0x0803b30c
 801af68:	0803b7a0 	.word	0x0803b7a0
 801af6c:	08023618 	.word	0x08023618
 801af70:	0803b6a0 	.word	0x0803b6a0
 801af74:	0803b77c 	.word	0x0803b77c
 801af78:	08023608 	.word	0x08023608

0801af7c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801af7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801af80:	0047      	lsls	r7, r0, #1
 801af82:	4e1f      	ldr	r6, [pc, #124]	; (801b000 <etharp_free_entry+0x84>)
{
 801af84:	4680      	mov	r8, r0
  if (arp_table[i].q != NULL) {
 801af86:	183b      	adds	r3, r7, r0
 801af88:	f856 5033 	ldr.w	r5, [r6, r3, lsl #3]
 801af8c:	b1c5      	cbz	r5, 801afc0 <etharp_free_entry+0x44>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 801af8e:	6868      	ldr	r0, [r5, #4]
 801af90:	b368      	cbz	r0, 801afee <etharp_free_entry+0x72>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801af92:	f8df b074 	ldr.w	fp, [pc, #116]	; 801b008 <etharp_free_entry+0x8c>
 801af96:	f8df a07c 	ldr.w	sl, [pc, #124]	; 801b014 <etharp_free_entry+0x98>
 801af9a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 801b010 <etharp_free_entry+0x94>
 801af9e:	e000      	b.n	801afa2 <etharp_free_entry+0x26>
 801afa0:	6860      	ldr	r0, [r4, #4]
    q = q->next;
 801afa2:	682c      	ldr	r4, [r5, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801afa4:	b1d8      	cbz	r0, 801afde <etharp_free_entry+0x62>
    pbuf_free(r->p);
 801afa6:	f7f9 fccf 	bl	8014948 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801afaa:	4629      	mov	r1, r5
 801afac:	200b      	movs	r0, #11
 801afae:	4625      	mov	r5, r4
 801afb0:	f7f9 fad2 	bl	8014558 <memp_free>
  while (q) {
 801afb4:	2c00      	cmp	r4, #0
 801afb6:	d1f3      	bne.n	801afa0 <etharp_free_entry+0x24>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 801afb8:	eb07 0308 	add.w	r3, r7, r8
 801afbc:	f846 4033 	str.w	r4, [r6, r3, lsl #3]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
 801afc0:	4a10      	ldr	r2, [pc, #64]	; (801b004 <etharp_free_entry+0x88>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801afc2:	4447      	add	r7, r8
 801afc4:	2300      	movs	r3, #0
 801afc6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  arp_table[i].ethaddr = ethzero;
 801afca:	6810      	ldr	r0, [r2, #0]
 801afcc:	8892      	ldrh	r2, [r2, #4]
 801afce:	60f0      	str	r0, [r6, #12]
 801afd0:	8232      	strh	r2, [r6, #16]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801afd2:	7533      	strb	r3, [r6, #20]
  arp_table[i].ctime = 0;
 801afd4:	8273      	strh	r3, [r6, #18]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801afd6:	e9c6 3301 	strd	r3, r3, [r6, #4]
#endif /* LWIP_DEBUG */
}
 801afda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801afde:	465b      	mov	r3, fp
 801afe0:	229c      	movs	r2, #156	; 0x9c
 801afe2:	4651      	mov	r1, sl
 801afe4:	4648      	mov	r0, r9
 801afe6:	f003 f9ff 	bl	801e3e8 <iprintf>
 801afea:	6868      	ldr	r0, [r5, #4]
 801afec:	e7db      	b.n	801afa6 <etharp_free_entry+0x2a>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 801afee:	4b06      	ldr	r3, [pc, #24]	; (801b008 <etharp_free_entry+0x8c>)
 801aff0:	2298      	movs	r2, #152	; 0x98
 801aff2:	4906      	ldr	r1, [pc, #24]	; (801b00c <etharp_free_entry+0x90>)
 801aff4:	4806      	ldr	r0, [pc, #24]	; (801b010 <etharp_free_entry+0x94>)
 801aff6:	f003 f9f7 	bl	801e3e8 <iprintf>
 801affa:	6868      	ldr	r0, [r5, #4]
 801affc:	e7c9      	b.n	801af92 <etharp_free_entry+0x16>
 801affe:	bf00      	nop
 801b000:	20021504 	.word	0x20021504
 801b004:	0803bd00 	.word	0x0803bd00
 801b008:	0803b818 	.word	0x0803b818
 801b00c:	0803b850 	.word	0x0803b850
 801b010:	08023618 	.word	0x08023618
 801b014:	0803b860 	.word	0x0803b860

0801b018 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b01c:	b083      	sub	sp, #12
 801b01e:	4689      	mov	r9, r1
 801b020:	4692      	mov	sl, r2
 801b022:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b024:	4606      	mov	r6, r0
{
 801b026:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801b028:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b02c:	2800      	cmp	r0, #0
 801b02e:	d059      	beq.n	801b0e4 <etharp_raw+0xcc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b030:	2200      	movs	r2, #0
 801b032:	211c      	movs	r1, #28
 801b034:	2002      	movs	r0, #2
 801b036:	f7f9 fcf5 	bl	8014a24 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b03a:	4605      	mov	r5, r0
 801b03c:	2800      	cmp	r0, #0
 801b03e:	d059      	beq.n	801b0f4 <etharp_raw+0xdc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b040:	8943      	ldrh	r3, [r0, #10]
 801b042:	2b1b      	cmp	r3, #27
 801b044:	d946      	bls.n	801b0d4 <etharp_raw+0xbc>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b046:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b048:	4658      	mov	r0, fp
 801b04a:	f7f8 f8d3 	bl	80131f4 <lwip_htons>
 801b04e:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b050:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 801b054:	2b06      	cmp	r3, #6
 801b056:	d006      	beq.n	801b066 <etharp_raw+0x4e>
 801b058:	4b2a      	ldr	r3, [pc, #168]	; (801b104 <etharp_raw+0xec>)
 801b05a:	f240 426b 	movw	r2, #1131	; 0x46b
 801b05e:	492a      	ldr	r1, [pc, #168]	; (801b108 <etharp_raw+0xf0>)
 801b060:	482a      	ldr	r0, [pc, #168]	; (801b10c <etharp_raw+0xf4>)
 801b062:	f003 f9c1 	bl	801e3e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801b066:	f8d8 1000 	ldr.w	r1, [r8]
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b06a:	f04f 0e08 	mov.w	lr, #8
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  hdr->protolen = sizeof(ip4_addr_t);
 801b06e:	f04f 0c04 	mov.w	ip, #4
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b072:	4630      	mov	r0, r6
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801b074:	60a1      	str	r1, [r4, #8]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801b076:	2600      	movs	r6, #0
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801b078:	f8b8 1004 	ldrh.w	r1, [r8, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801b07c:	f04f 0801 	mov.w	r8, #1
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b080:	4653      	mov	r3, sl
 801b082:	464a      	mov	r2, r9
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801b084:	81a1      	strh	r1, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801b086:	6839      	ldr	r1, [r7, #0]
 801b088:	f8c4 1012 	str.w	r1, [r4, #18]
  hdr->hwlen = ETH_HWADDR_LEN;
 801b08c:	2106      	movs	r1, #6
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801b08e:	88bf      	ldrh	r7, [r7, #4]
 801b090:	82e7      	strh	r7, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801b092:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b094:	683f      	ldr	r7, [r7, #0]
 801b096:	f8c4 700e 	str.w	r7, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801b09a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801b09c:	683f      	ldr	r7, [r7, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b09e:	f884 e002 	strb.w	lr, [r4, #2]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801b0a2:	61a7      	str	r7, [r4, #24]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b0a4:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 801b0a8:	7121      	strb	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b0aa:	4629      	mov	r1, r5
  hdr->protolen = sizeof(ip4_addr_t);
 801b0ac:	f884 c005 	strb.w	ip, [r4, #5]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801b0b0:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b0b2:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801b0b4:	f884 8001 	strb.w	r8, [r4, #1]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b0b8:	9700      	str	r7, [sp, #0]
 801b0ba:	f001 fd55 	bl	801cb68 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801b0be:	4a14      	ldr	r2, [pc, #80]	; (801b110 <etharp_raw+0xf8>)
  /* free ARP query packet */
  pbuf_free(p);
 801b0c0:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 801b0c2:	8b13      	ldrh	r3, [r2, #24]
 801b0c4:	4443      	add	r3, r8
 801b0c6:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 801b0c8:	f7f9 fc3e 	bl	8014948 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801b0cc:	4630      	mov	r0, r6
}
 801b0ce:	b003      	add	sp, #12
 801b0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b0d4:	4b0b      	ldr	r3, [pc, #44]	; (801b104 <etharp_raw+0xec>)
 801b0d6:	f240 4264 	movw	r2, #1124	; 0x464
 801b0da:	490e      	ldr	r1, [pc, #56]	; (801b114 <etharp_raw+0xfc>)
 801b0dc:	480b      	ldr	r0, [pc, #44]	; (801b10c <etharp_raw+0xf4>)
 801b0de:	f003 f983 	bl	801e3e8 <iprintf>
 801b0e2:	e7b0      	b.n	801b046 <etharp_raw+0x2e>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b0e4:	4b07      	ldr	r3, [pc, #28]	; (801b104 <etharp_raw+0xec>)
 801b0e6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801b0ea:	490b      	ldr	r1, [pc, #44]	; (801b118 <etharp_raw+0x100>)
 801b0ec:	4807      	ldr	r0, [pc, #28]	; (801b10c <etharp_raw+0xf4>)
 801b0ee:	f003 f97b 	bl	801e3e8 <iprintf>
 801b0f2:	e79d      	b.n	801b030 <etharp_raw+0x18>
    ETHARP_STATS_INC(etharp.memerr);
 801b0f4:	4a06      	ldr	r2, [pc, #24]	; (801b110 <etharp_raw+0xf8>)
    return ERR_MEM;
 801b0f6:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 801b0fa:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801b0fc:	3301      	adds	r3, #1
 801b0fe:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 801b100:	e7e5      	b.n	801b0ce <etharp_raw+0xb6>
 801b102:	bf00      	nop
 801b104:	0803b818 	.word	0x0803b818
 801b108:	0803b940 	.word	0x0803b940
 801b10c:	08023618 	.word	0x08023618
 801b110:	20035384 	.word	0x20035384
 801b114:	0803b90c 	.word	0x0803b90c
 801b118:	08023608 	.word	0x08023608

0801b11c <etharp_output_to_arp_index>:
{
 801b11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b120:	0055      	lsls	r5, r2, #1
 801b122:	4e2f      	ldr	r6, [pc, #188]	; (801b1e0 <etharp_output_to_arp_index+0xc4>)
{
 801b124:	b084      	sub	sp, #16
 801b126:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b128:	eb05 0802 	add.w	r8, r5, r2
{
 801b12c:	4607      	mov	r7, r0
 801b12e:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b130:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 801b134:	f898 3014 	ldrb.w	r3, [r8, #20]
 801b138:	2b01      	cmp	r3, #1
 801b13a:	d934      	bls.n	801b1a6 <etharp_output_to_arp_index+0x8a>
 801b13c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b140:	2b02      	cmp	r3, #2
 801b142:	f107 0831 	add.w	r8, r7, #49	; 0x31
 801b146:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801b14a:	f101 0a0c 	add.w	sl, r1, #12
 801b14e:	44b2      	add	sl, r6
 801b150:	d00b      	beq.n	801b16a <etharp_output_to_arp_index+0x4e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b152:	f44f 6400 	mov.w	r4, #2048	; 0x800
 801b156:	4653      	mov	r3, sl
 801b158:	4642      	mov	r2, r8
 801b15a:	4649      	mov	r1, r9
 801b15c:	4638      	mov	r0, r7
 801b15e:	9400      	str	r4, [sp, #0]
 801b160:	f001 fd02 	bl	801cb68 <ethernet_output>
}
 801b164:	b004      	add	sp, #16
 801b166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b16a:	442c      	add	r4, r5
 801b16c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801b170:	8a63      	ldrh	r3, [r4, #18]
 801b172:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801b176:	d820      	bhi.n	801b1ba <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b178:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801b17c:	d3e9      	bcc.n	801b152 <etharp_output_to_arp_index+0x36>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b17e:	3104      	adds	r1, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b180:	2201      	movs	r2, #1
 801b182:	4b18      	ldr	r3, [pc, #96]	; (801b1e4 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b184:	1d38      	adds	r0, r7, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b186:	4431      	add	r1, r6
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b188:	9203      	str	r2, [sp, #12]
 801b18a:	9301      	str	r3, [sp, #4]
 801b18c:	4652      	mov	r2, sl
 801b18e:	9102      	str	r1, [sp, #8]
 801b190:	4643      	mov	r3, r8
 801b192:	9000      	str	r0, [sp, #0]
 801b194:	4641      	mov	r1, r8
 801b196:	4638      	mov	r0, r7
 801b198:	f7ff ff3e 	bl	801b018 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b19c:	2800      	cmp	r0, #0
 801b19e:	d1d8      	bne.n	801b152 <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b1a0:	2303      	movs	r3, #3
 801b1a2:	7523      	strb	r3, [r4, #20]
 801b1a4:	e7d5      	b.n	801b152 <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b1a6:	4b10      	ldr	r3, [pc, #64]	; (801b1e8 <etharp_output_to_arp_index+0xcc>)
 801b1a8:	f240 22ed 	movw	r2, #749	; 0x2ed
 801b1ac:	490f      	ldr	r1, [pc, #60]	; (801b1ec <etharp_output_to_arp_index+0xd0>)
 801b1ae:	4810      	ldr	r0, [pc, #64]	; (801b1f0 <etharp_output_to_arp_index+0xd4>)
 801b1b0:	f003 f91a 	bl	801e3e8 <iprintf>
 801b1b4:	f898 3014 	ldrb.w	r3, [r8, #20]
 801b1b8:	e7c0      	b.n	801b13c <etharp_output_to_arp_index+0x20>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b1ba:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b1bc:	2001      	movs	r0, #1
 801b1be:	4b09      	ldr	r3, [pc, #36]	; (801b1e4 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b1c0:	1d3a      	adds	r2, r7, #4
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b1c2:	440e      	add	r6, r1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b1c4:	9003      	str	r0, [sp, #12]
 801b1c6:	9301      	str	r3, [sp, #4]
 801b1c8:	4641      	mov	r1, r8
 801b1ca:	9200      	str	r2, [sp, #0]
 801b1cc:	4643      	mov	r3, r8
 801b1ce:	9602      	str	r6, [sp, #8]
 801b1d0:	4638      	mov	r0, r7
 801b1d2:	4a08      	ldr	r2, [pc, #32]	; (801b1f4 <etharp_output_to_arp_index+0xd8>)
 801b1d4:	f7ff ff20 	bl	801b018 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b1d8:	2800      	cmp	r0, #0
 801b1da:	d1ba      	bne.n	801b152 <etharp_output_to_arp_index+0x36>
 801b1dc:	e7e0      	b.n	801b1a0 <etharp_output_to_arp_index+0x84>
 801b1de:	bf00      	nop
 801b1e0:	20021504 	.word	0x20021504
 801b1e4:	0803bd00 	.word	0x0803bd00
 801b1e8:	0803b818 	.word	0x0803b818
 801b1ec:	0803b8c0 	.word	0x0803b8c0
 801b1f0:	08023618 	.word	0x08023618
 801b1f4:	0803bc8c 	.word	0x0803bc8c

0801b1f8 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 801b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1fc:	2300      	movs	r3, #0
  s8_t old_queue = ARP_TABLE_SIZE;
 801b1fe:	f04f 0c20 	mov.w	ip, #32
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 801b202:	b083      	sub	sp, #12
 801b204:	f8df 8114 	ldr.w	r8, [pc, #276]	; 801b31c <etharp_find_entry.isra.0+0x124>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b208:	461f      	mov	r7, r3
 801b20a:	469a      	mov	sl, r3
 801b20c:	4642      	mov	r2, r8
 801b20e:	4699      	mov	r9, r3
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b210:	46e6      	mov	lr, ip
 801b212:	46e3      	mov	fp, ip
  s8_t empty = ARP_TABLE_SIZE;
 801b214:	4664      	mov	r4, ip
 801b216:	9101      	str	r1, [sp, #4]
 801b218:	e005      	b.n	801b226 <etharp_find_entry.isra.0+0x2e>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b21a:	b93d      	cbnz	r5, 801b22c <etharp_find_entry.isra.0+0x34>
      empty = i;
 801b21c:	b25c      	sxtb	r4, r3
 801b21e:	3301      	adds	r3, #1
 801b220:	3218      	adds	r2, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b222:	2b20      	cmp	r3, #32
 801b224:	d015      	beq.n	801b252 <etharp_find_entry.isra.0+0x5a>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b226:	2c20      	cmp	r4, #32
    u8_t state = arp_table[i].state;
 801b228:	7d15      	ldrb	r5, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b22a:	d0f6      	beq.n	801b21a <etharp_find_entry.isra.0+0x22>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b22c:	2d00      	cmp	r5, #0
 801b22e:	d0f6      	beq.n	801b21e <etharp_find_entry.isra.0+0x26>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b230:	b118      	cbz	r0, 801b23a <etharp_find_entry.isra.0+0x42>
 801b232:	6806      	ldr	r6, [r0, #0]
 801b234:	6851      	ldr	r1, [r2, #4]
 801b236:	428e      	cmp	r6, r1
 801b238:	d04b      	beq.n	801b2d2 <etharp_find_entry.isra.0+0xda>
      if (state == ETHARP_STATE_PENDING) {
 801b23a:	2d01      	cmp	r5, #1
 801b23c:	8a56      	ldrh	r6, [r2, #18]
 801b23e:	d025      	beq.n	801b28c <etharp_find_entry.isra.0+0x94>
          if (arp_table[i].ctime >= age_stable) {
 801b240:	42be      	cmp	r6, r7
 801b242:	d3ec      	bcc.n	801b21e <etharp_find_entry.isra.0+0x26>
            old_stable = i;
 801b244:	fa4f fe83 	sxtb.w	lr, r3
 801b248:	3301      	adds	r3, #1
 801b24a:	4637      	mov	r7, r6
 801b24c:	3218      	adds	r2, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b24e:	2b20      	cmp	r3, #32
 801b250:	d1e9      	bne.n	801b226 <etharp_find_entry.isra.0+0x2e>
 801b252:	9901      	ldr	r1, [sp, #4]
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b254:	2901      	cmp	r1, #1
 801b256:	d156      	bne.n	801b306 <etharp_find_entry.isra.0+0x10e>
 801b258:	2c20      	cmp	r4, #32
 801b25a:	4607      	mov	r7, r0
 801b25c:	d024      	beq.n	801b2a8 <etharp_find_entry.isra.0+0xb0>
    i = empty;
 801b25e:	b2e5      	uxtb	r5, r4
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b260:	0066      	lsls	r6, r4, #1
 801b262:	1933      	adds	r3, r6, r4
 801b264:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801b268:	7d1b      	ldrb	r3, [r3, #20]
 801b26a:	bb53      	cbnz	r3, 801b2c2 <etharp_find_entry.isra.0+0xca>
  if (ipaddr != NULL) {
 801b26c:	b127      	cbz	r7, 801b278 <etharp_find_entry.isra.0+0x80>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b26e:	1933      	adds	r3, r6, r4
 801b270:	683a      	ldr	r2, [r7, #0]
 801b272:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801b276:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 801b278:	4434      	add	r4, r6
 801b27a:	2300      	movs	r3, #0
  return (err_t)i;
 801b27c:	b268      	sxtb	r0, r5
  arp_table[i].ctime = 0;
 801b27e:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 801b282:	f8a8 3012 	strh.w	r3, [r8, #18]
}
 801b286:	b003      	add	sp, #12
 801b288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 801b28c:	6815      	ldr	r5, [r2, #0]
 801b28e:	b12d      	cbz	r5, 801b29c <etharp_find_entry.isra.0+0xa4>
          if (arp_table[i].ctime >= age_queue) {
 801b290:	454e      	cmp	r6, r9
 801b292:	d3c4      	bcc.n	801b21e <etharp_find_entry.isra.0+0x26>
            old_queue = i;
 801b294:	46b1      	mov	r9, r6
 801b296:	fa4f fc83 	sxtb.w	ip, r3
 801b29a:	e7c0      	b.n	801b21e <etharp_find_entry.isra.0+0x26>
          if (arp_table[i].ctime >= age_pending) {
 801b29c:	4556      	cmp	r6, sl
 801b29e:	d3be      	bcc.n	801b21e <etharp_find_entry.isra.0+0x26>
            old_pending = i;
 801b2a0:	46b2      	mov	sl, r6
 801b2a2:	fa4f fb83 	sxtb.w	fp, r3
 801b2a6:	e7ba      	b.n	801b21e <etharp_find_entry.isra.0+0x26>
    if (old_stable < ARP_TABLE_SIZE) {
 801b2a8:	f1be 0f20 	cmp.w	lr, #32
 801b2ac:	d115      	bne.n	801b2da <etharp_find_entry.isra.0+0xe2>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b2ae:	f1bb 0f20 	cmp.w	fp, #32
 801b2b2:	d022      	beq.n	801b2fa <etharp_find_entry.isra.0+0x102>
      i = old_pending;
 801b2b4:	fa5f f58b 	uxtb.w	r5, fp
    etharp_free_entry(i);
 801b2b8:	4628      	mov	r0, r5
 801b2ba:	462c      	mov	r4, r5
 801b2bc:	f7ff fe5e 	bl	801af7c <etharp_free_entry>
 801b2c0:	e7ce      	b.n	801b260 <etharp_find_entry.isra.0+0x68>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b2c2:	4b12      	ldr	r3, [pc, #72]	; (801b30c <etharp_find_entry.isra.0+0x114>)
 801b2c4:	f240 1287 	movw	r2, #391	; 0x187
 801b2c8:	4911      	ldr	r1, [pc, #68]	; (801b310 <etharp_find_entry.isra.0+0x118>)
 801b2ca:	4812      	ldr	r0, [pc, #72]	; (801b314 <etharp_find_entry.isra.0+0x11c>)
 801b2cc:	f003 f88c 	bl	801e3e8 <iprintf>
 801b2d0:	e7cc      	b.n	801b26c <etharp_find_entry.isra.0+0x74>
        return i;
 801b2d2:	b258      	sxtb	r0, r3
}
 801b2d4:	b003      	add	sp, #12
 801b2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b2da:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
      i = old_stable;
 801b2de:	fa5f f58e 	uxtb.w	r5, lr
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b2e2:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d0e6      	beq.n	801b2b8 <etharp_find_entry.isra.0+0xc0>
 801b2ea:	4b08      	ldr	r3, [pc, #32]	; (801b30c <etharp_find_entry.isra.0+0x114>)
 801b2ec:	f240 126f 	movw	r2, #367	; 0x16f
 801b2f0:	4909      	ldr	r1, [pc, #36]	; (801b318 <etharp_find_entry.isra.0+0x120>)
 801b2f2:	4808      	ldr	r0, [pc, #32]	; (801b314 <etharp_find_entry.isra.0+0x11c>)
 801b2f4:	f003 f878 	bl	801e3e8 <iprintf>
 801b2f8:	e7de      	b.n	801b2b8 <etharp_find_entry.isra.0+0xc0>
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b2fa:	f1bc 0f20 	cmp.w	ip, #32
 801b2fe:	d002      	beq.n	801b306 <etharp_find_entry.isra.0+0x10e>
      i = old_queue;
 801b300:	fa5f f58c 	uxtb.w	r5, ip
 801b304:	e7d8      	b.n	801b2b8 <etharp_find_entry.isra.0+0xc0>
    return (s8_t)ERR_MEM;
 801b306:	f04f 30ff 	mov.w	r0, #4294967295
 801b30a:	e7bc      	b.n	801b286 <etharp_find_entry.isra.0+0x8e>
 801b30c:	0803b818 	.word	0x0803b818
 801b310:	0803b7ec 	.word	0x0803b7ec
 801b314:	08023618 	.word	0x08023618
 801b318:	0803b7d4 	.word	0x0803b7d4
 801b31c:	20021504 	.word	0x20021504

0801b320 <etharp_tmr>:
{
 801b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b324:	4c20      	ldr	r4, [pc, #128]	; (801b3a8 <etharp_tmr+0x88>)
 801b326:	b084      	sub	sp, #16
 801b328:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b32a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801b3b0 <etharp_tmr+0x90>
 801b32e:	1f27      	subs	r7, r4, #4
 801b330:	4e1e      	ldr	r6, [pc, #120]	; (801b3ac <etharp_tmr+0x8c>)
 801b332:	e00b      	b.n	801b34c <etharp_tmr+0x2c>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b334:	2a01      	cmp	r2, #1
 801b336:	d01d      	beq.n	801b374 <etharp_tmr+0x54>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b338:	2a03      	cmp	r2, #3
 801b33a:	d031      	beq.n	801b3a0 <etharp_tmr+0x80>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b33c:	2a04      	cmp	r2, #4
 801b33e:	d101      	bne.n	801b344 <etharp_tmr+0x24>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b340:	2302      	movs	r3, #2
 801b342:	7323      	strb	r3, [r4, #12]
 801b344:	3501      	adds	r5, #1
 801b346:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b348:	2d20      	cmp	r5, #32
 801b34a:	d010      	beq.n	801b36e <etharp_tmr+0x4e>
    u8_t state = arp_table[i].state;
 801b34c:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 801b34e:	2a00      	cmp	r2, #0
 801b350:	d0f8      	beq.n	801b344 <etharp_tmr+0x24>
      arp_table[i].ctime++;
 801b352:	8963      	ldrh	r3, [r4, #10]
 801b354:	3301      	adds	r3, #1
 801b356:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b358:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 801b35c:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b35e:	d3e9      	bcc.n	801b334 <etharp_tmr+0x14>
        etharp_free_entry(i);
 801b360:	4628      	mov	r0, r5
 801b362:	3501      	adds	r5, #1
 801b364:	f7ff fe0a 	bl	801af7c <etharp_free_entry>
 801b368:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b36a:	2d20      	cmp	r5, #32
 801b36c:	d1ee      	bne.n	801b34c <etharp_tmr+0x2c>
}
 801b36e:	b004      	add	sp, #16
 801b370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b374:	2b04      	cmp	r3, #4
 801b376:	d8f3      	bhi.n	801b360 <etharp_tmr+0x40>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b378:	6820      	ldr	r0, [r4, #0]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b37a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801b37e:	9203      	str	r2, [sp, #12]
 801b380:	f100 0331 	add.w	r3, r0, #49	; 0x31
 801b384:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b388:	f100 0c04 	add.w	ip, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b38c:	f8cd 8004 	str.w	r8, [sp, #4]
 801b390:	9202      	str	r2, [sp, #8]
 801b392:	4619      	mov	r1, r3
 801b394:	f8cd c000 	str.w	ip, [sp]
 801b398:	4632      	mov	r2, r6
 801b39a:	f7ff fe3d 	bl	801b018 <etharp_raw>
 801b39e:	e7d1      	b.n	801b344 <etharp_tmr+0x24>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b3a0:	2304      	movs	r3, #4
 801b3a2:	7323      	strb	r3, [r4, #12]
 801b3a4:	e7ce      	b.n	801b344 <etharp_tmr+0x24>
 801b3a6:	bf00      	nop
 801b3a8:	2002150c 	.word	0x2002150c
 801b3ac:	0803bc8c 	.word	0x0803bc8c
 801b3b0:	0803bd00 	.word	0x0803bd00

0801b3b4 <etharp_cleanup_netif>:
{
 801b3b4:	b570      	push	{r4, r5, r6, lr}
 801b3b6:	4606      	mov	r6, r0
 801b3b8:	4c0a      	ldr	r4, [pc, #40]	; (801b3e4 <etharp_cleanup_netif+0x30>)
 801b3ba:	2500      	movs	r5, #0
 801b3bc:	e003      	b.n	801b3c6 <etharp_cleanup_netif+0x12>
 801b3be:	3501      	adds	r5, #1
 801b3c0:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b3c2:	2d20      	cmp	r5, #32
 801b3c4:	d00c      	beq.n	801b3e0 <etharp_cleanup_netif+0x2c>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b3c6:	7d23      	ldrb	r3, [r4, #20]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d0f8      	beq.n	801b3be <etharp_cleanup_netif+0xa>
 801b3cc:	68a3      	ldr	r3, [r4, #8]
 801b3ce:	42b3      	cmp	r3, r6
 801b3d0:	d1f5      	bne.n	801b3be <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 801b3d2:	4628      	mov	r0, r5
 801b3d4:	3501      	adds	r5, #1
 801b3d6:	f7ff fdd1 	bl	801af7c <etharp_free_entry>
 801b3da:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b3dc:	2d20      	cmp	r5, #32
 801b3de:	d1f2      	bne.n	801b3c6 <etharp_cleanup_netif+0x12>
}
 801b3e0:	bd70      	pop	{r4, r5, r6, pc}
 801b3e2:	bf00      	nop
 801b3e4:	20021504 	.word	0x20021504

0801b3e8 <etharp_input>:
{
 801b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3ec:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b3ee:	2900      	cmp	r1, #0
 801b3f0:	f000 8096 	beq.w	801b520 <etharp_input+0x138>
  hdr = (struct etharp_hdr *)p->payload;
 801b3f4:	6845      	ldr	r5, [r0, #4]
 801b3f6:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801b3f8:	882b      	ldrh	r3, [r5, #0]
 801b3fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b3fe:	d102      	bne.n	801b406 <etharp_input+0x1e>
 801b400:	792b      	ldrb	r3, [r5, #4]
 801b402:	2b06      	cmp	r3, #6
 801b404:	d00c      	beq.n	801b420 <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 801b406:	4b5b      	ldr	r3, [pc, #364]	; (801b574 <etharp_input+0x18c>)
    pbuf_free(p);
 801b408:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 801b40a:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801b40c:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 801b40e:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 801b410:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 801b412:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801b414:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801b416:	f7f9 fa97 	bl	8014948 <pbuf_free>
}
 801b41a:	b009      	add	sp, #36	; 0x24
 801b41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b420:	796b      	ldrb	r3, [r5, #5]
 801b422:	2b04      	cmp	r3, #4
 801b424:	d1ef      	bne.n	801b406 <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b426:	886b      	ldrh	r3, [r5, #2]
 801b428:	2b08      	cmp	r3, #8
 801b42a:	d1ec      	bne.n	801b406 <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 801b42c:	f8df a144 	ldr.w	sl, [pc, #324]	; 801b574 <etharp_input+0x18c>
 801b430:	460e      	mov	r6, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b432:	684a      	ldr	r2, [r1, #4]
 801b434:	f105 0908 	add.w	r9, r5, #8
  ETHARP_STATS_INC(etharp.recv);
 801b438:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 801b43c:	3301      	adds	r3, #1
 801b43e:	f8aa 301a 	strh.w	r3, [sl, #26]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801b442:	f8d5 000e 	ldr.w	r0, [r5, #14]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801b446:	69ab      	ldr	r3, [r5, #24]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801b448:	9007      	str	r0, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b44a:	2a00      	cmp	r2, #0
 801b44c:	d072      	beq.n	801b534 <etharp_input+0x14c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b44e:	429a      	cmp	r2, r3
 801b450:	f000 808c 	beq.w	801b56c <etharp_input+0x184>
    for_us = 0;
 801b454:	2300      	movs	r3, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b456:	2702      	movs	r7, #2
    for_us = 0;
 801b458:	9305      	str	r3, [sp, #20]
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b45a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 801b45e:	2b06      	cmp	r3, #6
 801b460:	d007      	beq.n	801b472 <etharp_input+0x8a>
 801b462:	4b45      	ldr	r3, [pc, #276]	; (801b578 <etharp_input+0x190>)
 801b464:	f240 12ab 	movw	r2, #427	; 0x1ab
 801b468:	4944      	ldr	r1, [pc, #272]	; (801b57c <etharp_input+0x194>)
 801b46a:	4845      	ldr	r0, [pc, #276]	; (801b580 <etharp_input+0x198>)
 801b46c:	f002 ffbc 	bl	801e3e8 <iprintf>
 801b470:	9807      	ldr	r0, [sp, #28]
  if (ip4_addr_isany(ipaddr) ||
 801b472:	2800      	cmp	r0, #0
 801b474:	d045      	beq.n	801b502 <etharp_input+0x11a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b476:	4631      	mov	r1, r6
 801b478:	f000 fde2 	bl	801c040 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801b47c:	4683      	mov	fp, r0
 801b47e:	2800      	cmp	r0, #0
 801b480:	d13f      	bne.n	801b502 <etharp_input+0x11a>
      ip4_addr_ismulticast(ipaddr)) {
 801b482:	9b07      	ldr	r3, [sp, #28]
 801b484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b488:	2be0      	cmp	r3, #224	; 0xe0
 801b48a:	d03a      	beq.n	801b502 <etharp_input+0x11a>
  i = etharp_find_entry(ipaddr, flags, netif);
 801b48c:	4639      	mov	r1, r7
 801b48e:	a807      	add	r0, sp, #28
 801b490:	f7ff feb2 	bl	801b1f8 <etharp_find_entry.isra.0>
  if (i < 0) {
 801b494:	2800      	cmp	r0, #0
 801b496:	db34      	blt.n	801b502 <etharp_input+0x11a>
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b498:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801b49c:	4a39      	ldr	r2, [pc, #228]	; (801b584 <etharp_input+0x19c>)
 801b49e:	2702      	movs	r7, #2
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801b4a0:	2118      	movs	r1, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b4a2:	00db      	lsls	r3, r3, #3
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801b4a4:	f04f 0c0c 	mov.w	ip, #12
 801b4a8:	fb11 c100 	smlabb	r1, r1, r0, ip
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b4ac:	eb02 0803 	add.w	r8, r2, r3
 801b4b0:	f888 7014 	strb.w	r7, [r8, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801b4b4:	1857      	adds	r7, r2, r1
  arp_table[i].netif = netif;
 801b4b6:	f8c8 6008 	str.w	r6, [r8, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801b4ba:	f8d9 0000 	ldr.w	r0, [r9]
 801b4be:	5050      	str	r0, [r2, r1]
 801b4c0:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 801b4c4:	80b9      	strh	r1, [r7, #4]
  while (arp_table[i].q != NULL) {
 801b4c6:	58d3      	ldr	r3, [r2, r3]
  arp_table[i].ctime = 0;
 801b4c8:	f8a8 b012 	strh.w	fp, [r8, #18]
  while (arp_table[i].q != NULL) {
 801b4cc:	b1cb      	cbz	r3, 801b502 <etharp_input+0x11a>
 801b4ce:	f106 0b31 	add.w	fp, r6, #49	; 0x31
    arp_table[i].q = q->next;
 801b4d2:	681a      	ldr	r2, [r3, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 801b4d4:	4619      	mov	r1, r3
    p = q->p;
 801b4d6:	685f      	ldr	r7, [r3, #4]
    memp_free(MEMP_ARP_QUEUE, q);
 801b4d8:	200b      	movs	r0, #11
    arp_table[i].q = q->next;
 801b4da:	f8c8 2000 	str.w	r2, [r8]
    memp_free(MEMP_ARP_QUEUE, q);
 801b4de:	f7f9 f83b 	bl	8014558 <memp_free>
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b4e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801b4e6:	464b      	mov	r3, r9
 801b4e8:	4639      	mov	r1, r7
 801b4ea:	465a      	mov	r2, fp
 801b4ec:	9000      	str	r0, [sp, #0]
 801b4ee:	4630      	mov	r0, r6
 801b4f0:	f001 fb3a 	bl	801cb68 <ethernet_output>
    pbuf_free(p);
 801b4f4:	4638      	mov	r0, r7
 801b4f6:	f7f9 fa27 	bl	8014948 <pbuf_free>
  while (arp_table[i].q != NULL) {
 801b4fa:	f8d8 3000 	ldr.w	r3, [r8]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d1e7      	bne.n	801b4d2 <etharp_input+0xea>
  switch (hdr->opcode) {
 801b502:	88eb      	ldrh	r3, [r5, #6]
 801b504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b508:	d01d      	beq.n	801b546 <etharp_input+0x15e>
 801b50a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b50e:	d114      	bne.n	801b53a <etharp_input+0x152>
    dhcp_arp_reply(netif, &sipaddr);
 801b510:	4630      	mov	r0, r6
 801b512:	a907      	add	r1, sp, #28
 801b514:	f7ff fa2e 	bl	801a974 <dhcp_arp_reply>
  pbuf_free(p);
 801b518:	4620      	mov	r0, r4
 801b51a:	f7f9 fa15 	bl	8014948 <pbuf_free>
 801b51e:	e77c      	b.n	801b41a <etharp_input+0x32>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b520:	4b15      	ldr	r3, [pc, #84]	; (801b578 <etharp_input+0x190>)
 801b522:	f44f 7222 	mov.w	r2, #648	; 0x288
 801b526:	4918      	ldr	r1, [pc, #96]	; (801b588 <etharp_input+0x1a0>)
 801b528:	4815      	ldr	r0, [pc, #84]	; (801b580 <etharp_input+0x198>)
 801b52a:	f002 ff5d 	bl	801e3e8 <iprintf>
}
 801b52e:	b009      	add	sp, #36	; 0x24
 801b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for_us = 0;
 801b534:	9205      	str	r2, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b536:	2702      	movs	r7, #2
 801b538:	e78f      	b.n	801b45a <etharp_input+0x72>
    ETHARP_STATS_INC(etharp.err);
 801b53a:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 801b53e:	3301      	adds	r3, #1
 801b540:	f8aa 302c 	strh.w	r3, [sl, #44]	; 0x2c
    break;
 801b544:	e7e8      	b.n	801b518 <etharp_input+0x130>
    if (for_us) {
 801b546:	9b05      	ldr	r3, [sp, #20]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d0e5      	beq.n	801b518 <etharp_input+0x130>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b54c:	f106 0331 	add.w	r3, r6, #49	; 0x31
      etharp_raw(netif,
 801b550:	2002      	movs	r0, #2
 801b552:	af07      	add	r7, sp, #28
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b554:	1d35      	adds	r5, r6, #4
      etharp_raw(netif,
 801b556:	9003      	str	r0, [sp, #12]
 801b558:	464a      	mov	r2, r9
 801b55a:	f8cd 9004 	str.w	r9, [sp, #4]
 801b55e:	4619      	mov	r1, r3
 801b560:	4630      	mov	r0, r6
 801b562:	9702      	str	r7, [sp, #8]
 801b564:	9500      	str	r5, [sp, #0]
 801b566:	f7ff fd57 	bl	801b018 <etharp_raw>
 801b56a:	e7d5      	b.n	801b518 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b56c:	2301      	movs	r3, #1
 801b56e:	9305      	str	r3, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b570:	461f      	mov	r7, r3
 801b572:	e772      	b.n	801b45a <etharp_input+0x72>
 801b574:	20035384 	.word	0x20035384
 801b578:	0803b818 	.word	0x0803b818
 801b57c:	0803b890 	.word	0x0803b890
 801b580:	08023618 	.word	0x08023618
 801b584:	20021504 	.word	0x20021504
 801b588:	08023608 	.word	0x08023608

0801b58c <etharp_query>:
{
 801b58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b590:	460d      	mov	r5, r1
 801b592:	b085      	sub	sp, #20
 801b594:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b596:	4601      	mov	r1, r0
 801b598:	6828      	ldr	r0, [r5, #0]
{
 801b59a:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b59c:	f000 fd50 	bl	801c040 <ip4_addr_isbroadcast_u32>
 801b5a0:	2800      	cmp	r0, #0
 801b5a2:	f040 8096 	bne.w	801b6d2 <etharp_query+0x146>
      ip4_addr_ismulticast(ipaddr) ||
 801b5a6:	682b      	ldr	r3, [r5, #0]
 801b5a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 801b5ac:	2ae0      	cmp	r2, #224	; 0xe0
 801b5ae:	f000 8090 	beq.w	801b6d2 <etharp_query+0x146>
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	f000 808d 	beq.w	801b6d2 <etharp_query+0x146>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b5b8:	2101      	movs	r1, #1
 801b5ba:	4628      	mov	r0, r5
 801b5bc:	f7ff fe1c 	bl	801b1f8 <etharp_find_entry.isra.0>
  if (i < 0) {
 801b5c0:	1e04      	subs	r4, r0, #0
 801b5c2:	db36      	blt.n	801b632 <etharp_query+0xa6>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b5c4:	ea4f 0944 	mov.w	r9, r4, lsl #1
 801b5c8:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801b790 <etharp_query+0x204>
 801b5cc:	eb09 0204 	add.w	r2, r9, r4
 801b5d0:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 801b5d4:	7d13      	ldrb	r3, [r2, #20]
 801b5d6:	b19b      	cbz	r3, 801b600 <etharp_query+0x74>
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801b5d8:	f107 0a31 	add.w	sl, r7, #49	; 0x31
  if (is_new_entry || (q == NULL)) {
 801b5dc:	2e00      	cmp	r6, #0
 801b5de:	f000 80ab 	beq.w	801b738 <etharp_query+0x1ac>
  err_t result = ERR_MEM;
 801b5e2:	f04f 32ff 	mov.w	r2, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b5e6:	eb09 0304 	add.w	r3, r9, r4
 801b5ea:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801b5ee:	7d1b      	ldrb	r3, [r3, #20]
 801b5f0:	2b01      	cmp	r3, #1
 801b5f2:	d827      	bhi.n	801b644 <etharp_query+0xb8>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b5f4:	d03b      	beq.n	801b66e <etharp_query+0xe2>
 801b5f6:	4614      	mov	r4, r2
}
 801b5f8:	4620      	mov	r0, r4
 801b5fa:	b005      	add	sp, #20
 801b5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b600:	f04f 0c01 	mov.w	ip, #1
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801b604:	f107 0a31 	add.w	sl, r7, #49	; 0x31
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b608:	495b      	ldr	r1, [pc, #364]	; (801b778 <etharp_query+0x1ec>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b60a:	1d38      	adds	r0, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b60c:	9502      	str	r5, [sp, #8]
 801b60e:	4653      	mov	r3, sl
 801b610:	9101      	str	r1, [sp, #4]
 801b612:	4651      	mov	r1, sl
 801b614:	9000      	str	r0, [sp, #0]
 801b616:	4638      	mov	r0, r7
 801b618:	f8cd c00c 	str.w	ip, [sp, #12]
    arp_table[i].netif = netif;
 801b61c:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b61e:	f882 c014 	strb.w	ip, [r2, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b622:	4a56      	ldr	r2, [pc, #344]	; (801b77c <etharp_query+0x1f0>)
 801b624:	f7ff fcf8 	bl	801b018 <etharp_raw>
 801b628:	4602      	mov	r2, r0
    if (q == NULL) {
 801b62a:	2e00      	cmp	r6, #0
 801b62c:	d1db      	bne.n	801b5e6 <etharp_query+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b62e:	4604      	mov	r4, r0
 801b630:	e004      	b.n	801b63c <etharp_query+0xb0>
    if (q) {
 801b632:	b11e      	cbz	r6, 801b63c <etharp_query+0xb0>
      ETHARP_STATS_INC(etharp.memerr);
 801b634:	4a52      	ldr	r2, [pc, #328]	; (801b780 <etharp_query+0x1f4>)
 801b636:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801b638:	3301      	adds	r3, #1
 801b63a:	8493      	strh	r3, [r2, #36]	; 0x24
}
 801b63c:	4620      	mov	r0, r4
 801b63e:	b005      	add	sp, #20
 801b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b644:	210c      	movs	r1, #12
 801b646:	2318      	movs	r3, #24
 801b648:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    ETHARP_SET_HINT(netif, i);
 801b64c:	4d4d      	ldr	r5, [pc, #308]	; (801b784 <etharp_query+0x1f8>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b64e:	fb13 1304 	smlabb	r3, r3, r4, r1
 801b652:	4652      	mov	r2, sl
 801b654:	f8cd c000 	str.w	ip, [sp]
 801b658:	4631      	mov	r1, r6
    ETHARP_SET_HINT(netif, i);
 801b65a:	702c      	strb	r4, [r5, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b65c:	4638      	mov	r0, r7
 801b65e:	4443      	add	r3, r8
 801b660:	f001 fa82 	bl	801cb68 <ethernet_output>
 801b664:	4604      	mov	r4, r0
}
 801b666:	4620      	mov	r0, r4
 801b668:	b005      	add	sp, #20
 801b66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b66e:	4635      	mov	r5, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b670:	f8df b118 	ldr.w	fp, [pc, #280]	; 801b78c <etharp_query+0x200>
 801b674:	f8df a11c 	ldr.w	sl, [pc, #284]	; 801b794 <etharp_query+0x208>
 801b678:	e004      	b.n	801b684 <etharp_query+0xf8>
      if (p->type != PBUF_ROM) {
 801b67a:	7b2b      	ldrb	r3, [r5, #12]
 801b67c:	2b01      	cmp	r3, #1
 801b67e:	d177      	bne.n	801b770 <etharp_query+0x1e4>
      p = p->next;
 801b680:	682d      	ldr	r5, [r5, #0]
    while (p) {
 801b682:	b34d      	cbz	r5, 801b6d8 <etharp_query+0x14c>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b684:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 801b688:	896b      	ldrh	r3, [r5, #10]
 801b68a:	4563      	cmp	r3, ip
 801b68c:	d1f5      	bne.n	801b67a <etharp_query+0xee>
 801b68e:	682f      	ldr	r7, [r5, #0]
 801b690:	465b      	mov	r3, fp
 801b692:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801b696:	4651      	mov	r1, sl
 801b698:	483b      	ldr	r0, [pc, #236]	; (801b788 <etharp_query+0x1fc>)
 801b69a:	b117      	cbz	r7, 801b6a2 <etharp_query+0x116>
 801b69c:	f002 fea4 	bl	801e3e8 <iprintf>
 801b6a0:	e7eb      	b.n	801b67a <etharp_query+0xee>
      if (p->type != PBUF_ROM) {
 801b6a2:	7b2b      	ldrb	r3, [r5, #12]
 801b6a4:	2b01      	cmp	r3, #1
 801b6a6:	d017      	beq.n	801b6d8 <etharp_query+0x14c>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801b6a8:	4661      	mov	r1, ip
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	2002      	movs	r0, #2
 801b6ae:	f7f9 f9b9 	bl	8014a24 <pbuf_alloc>
      if (p != NULL) {
 801b6b2:	4605      	mov	r5, r0
 801b6b4:	b130      	cbz	r0, 801b6c4 <etharp_query+0x138>
        if (pbuf_copy(p, q) != ERR_OK) {
 801b6b6:	4631      	mov	r1, r6
 801b6b8:	f7f9 fbb8 	bl	8014e2c <pbuf_copy>
 801b6bc:	b180      	cbz	r0, 801b6e0 <etharp_query+0x154>
          pbuf_free(p);
 801b6be:	4628      	mov	r0, r5
 801b6c0:	f7f9 f942 	bl	8014948 <pbuf_free>
      ETHARP_STATS_INC(etharp.memerr);
 801b6c4:	4a2e      	ldr	r2, [pc, #184]	; (801b780 <etharp_query+0x1f4>)
      result = ERR_MEM;
 801b6c6:	f04f 34ff 	mov.w	r4, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 801b6ca:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801b6cc:	3301      	adds	r3, #1
 801b6ce:	8493      	strh	r3, [r2, #36]	; 0x24
 801b6d0:	e7b4      	b.n	801b63c <etharp_query+0xb0>
    return ERR_ARG;
 801b6d2:	f06f 040f 	mvn.w	r4, #15
 801b6d6:	e7b1      	b.n	801b63c <etharp_query+0xb0>
      pbuf_ref(p);
 801b6d8:	4630      	mov	r0, r6
 801b6da:	4635      	mov	r5, r6
 801b6dc:	f7f9 fb34 	bl	8014d48 <pbuf_ref>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 801b6e0:	f240 4207 	movw	r2, #1031	; 0x407
 801b6e4:	4929      	ldr	r1, [pc, #164]	; (801b78c <etharp_query+0x200>)
 801b6e6:	200b      	movs	r0, #11
 801b6e8:	f7f8 ff12 	bl	8014510 <memp_malloc_fn>
      if (new_entry != NULL) {
 801b6ec:	2800      	cmp	r0, #0
 801b6ee:	d039      	beq.n	801b764 <etharp_query+0x1d8>
        if (arp_table[i].q != NULL) {
 801b6f0:	eb09 0304 	add.w	r3, r9, r4
        new_entry->next = 0;
 801b6f4:	2200      	movs	r2, #0
        new_entry->p = p;
 801b6f6:	6045      	str	r5, [r0, #4]
        if (arp_table[i].q != NULL) {
 801b6f8:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 801b6fa:	6002      	str	r2, [r0, #0]
        if (arp_table[i].q != NULL) {
 801b6fc:	f858 6003 	ldr.w	r6, [r8, r3]
 801b700:	b34e      	cbz	r6, 801b756 <etharp_query+0x1ca>
          while (r->next != NULL) {
 801b702:	6832      	ldr	r2, [r6, #0]
 801b704:	b35a      	cbz	r2, 801b75e <etharp_query+0x1d2>
          qlen++;
 801b706:	2501      	movs	r5, #1
 801b708:	e000      	b.n	801b70c <etharp_query+0x180>
 801b70a:	461a      	mov	r2, r3
          while (r->next != NULL) {
 801b70c:	6813      	ldr	r3, [r2, #0]
            qlen++;
 801b70e:	3501      	adds	r5, #1
          while (r->next != NULL) {
 801b710:	2b00      	cmp	r3, #0
 801b712:	d1fa      	bne.n	801b70a <etharp_query+0x17e>
        if (qlen >= ARP_QUEUE_LEN) {
 801b714:	2d1f      	cmp	r5, #31
          r->next = new_entry;
 801b716:	6010      	str	r0, [r2, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 801b718:	d801      	bhi.n	801b71e <etharp_query+0x192>
        result = ERR_OK;
 801b71a:	461c      	mov	r4, r3
 801b71c:	e78e      	b.n	801b63c <etharp_query+0xb0>
          arp_table[i].q = arp_table[i].q->next;
 801b71e:	44a1      	add	r9, r4
        result = ERR_OK;
 801b720:	461c      	mov	r4, r3
          pbuf_free(old->p);
 801b722:	e9d6 2000 	ldrd	r2, r0, [r6]
          arp_table[i].q = arp_table[i].q->next;
 801b726:	f848 2039 	str.w	r2, [r8, r9, lsl #3]
          pbuf_free(old->p);
 801b72a:	f7f9 f90d 	bl	8014948 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 801b72e:	4631      	mov	r1, r6
 801b730:	200b      	movs	r0, #11
 801b732:	f7f8 ff11 	bl	8014558 <memp_free>
 801b736:	e781      	b.n	801b63c <etharp_query+0xb0>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b738:	2101      	movs	r1, #1
 801b73a:	4b0f      	ldr	r3, [pc, #60]	; (801b778 <etharp_query+0x1ec>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b73c:	1d3a      	adds	r2, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b73e:	4638      	mov	r0, r7
 801b740:	9301      	str	r3, [sp, #4]
 801b742:	4653      	mov	r3, sl
 801b744:	9200      	str	r2, [sp, #0]
 801b746:	4a0d      	ldr	r2, [pc, #52]	; (801b77c <etharp_query+0x1f0>)
 801b748:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801b74c:	4651      	mov	r1, sl
 801b74e:	f7ff fc63 	bl	801b018 <etharp_raw>
 801b752:	4604      	mov	r4, r0
 801b754:	e772      	b.n	801b63c <etharp_query+0xb0>
          arp_table[i].q = new_entry;
 801b756:	f848 0003 	str.w	r0, [r8, r3]
        result = ERR_OK;
 801b75a:	4634      	mov	r4, r6
 801b75c:	e76e      	b.n	801b63c <etharp_query+0xb0>
          r->next = new_entry;
 801b75e:	6030      	str	r0, [r6, #0]
        result = ERR_OK;
 801b760:	4614      	mov	r4, r2
 801b762:	e76b      	b.n	801b63c <etharp_query+0xb0>
        pbuf_free(p);
 801b764:	4628      	mov	r0, r5
        result = ERR_MEM;
 801b766:	f04f 34ff 	mov.w	r4, #4294967295
        pbuf_free(p);
 801b76a:	f7f9 f8ed 	bl	8014948 <pbuf_free>
 801b76e:	e765      	b.n	801b63c <etharp_query+0xb0>
 801b770:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 801b774:	e798      	b.n	801b6a8 <etharp_query+0x11c>
 801b776:	bf00      	nop
 801b778:	0803bd00 	.word	0x0803bd00
 801b77c:	0803bc8c 	.word	0x0803bc8c
 801b780:	20035384 	.word	0x20035384
 801b784:	20021804 	.word	0x20021804
 801b788:	08023618 	.word	0x08023618
 801b78c:	0803b818 	.word	0x0803b818
 801b790:	20021504 	.word	0x20021504
 801b794:	0803b8f0 	.word	0x0803b8f0

0801b798 <etharp_output>:
{
 801b798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b79a:	460e      	mov	r6, r1
 801b79c:	b085      	sub	sp, #20
 801b79e:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b7a0:	4605      	mov	r5, r0
 801b7a2:	2800      	cmp	r0, #0
 801b7a4:	d072      	beq.n	801b88c <etharp_output+0xf4>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b7a6:	2e00      	cmp	r6, #0
 801b7a8:	d05f      	beq.n	801b86a <etharp_output+0xd2>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b7aa:	2c00      	cmp	r4, #0
 801b7ac:	d066      	beq.n	801b87c <etharp_output+0xe4>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b7ae:	4629      	mov	r1, r5
 801b7b0:	6820      	ldr	r0, [r4, #0]
 801b7b2:	f000 fc45 	bl	801c040 <ip4_addr_isbroadcast_u32>
 801b7b6:	2800      	cmp	r0, #0
 801b7b8:	d155      	bne.n	801b866 <etharp_output+0xce>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b7ba:	6823      	ldr	r3, [r4, #0]
 801b7bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801b7c0:	2ae0      	cmp	r2, #224	; 0xe0
 801b7c2:	d033      	beq.n	801b82c <etharp_output+0x94>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b7c4:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 801b7c8:	405a      	eors	r2, r3
 801b7ca:	420a      	tst	r2, r1
 801b7cc:	d009      	beq.n	801b7e2 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 801b7ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b7d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801b7d4:	4293      	cmp	r3, r2
 801b7d6:	d004      	beq.n	801b7e2 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b7d8:	68eb      	ldr	r3, [r5, #12]
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d070      	beq.n	801b8c0 <etharp_output+0x128>
            dst_addr = netif_ip4_gw(netif);
 801b7de:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b7e2:	4f39      	ldr	r7, [pc, #228]	; (801b8c8 <etharp_output+0x130>)
 801b7e4:	4b39      	ldr	r3, [pc, #228]	; (801b8cc <etharp_output+0x134>)
 801b7e6:	783a      	ldrb	r2, [r7, #0]
 801b7e8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801b7ec:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801b7f0:	7d19      	ldrb	r1, [r3, #20]
 801b7f2:	2901      	cmp	r1, #1
 801b7f4:	d903      	bls.n	801b7fe <etharp_output+0x66>
 801b7f6:	685b      	ldr	r3, [r3, #4]
 801b7f8:	6821      	ldr	r1, [r4, #0]
 801b7fa:	4299      	cmp	r1, r3
 801b7fc:	d057      	beq.n	801b8ae <etharp_output+0x116>
 801b7fe:	4b33      	ldr	r3, [pc, #204]	; (801b8cc <etharp_output+0x134>)
{
 801b800:	2200      	movs	r2, #0
 801b802:	e003      	b.n	801b80c <etharp_output+0x74>
 801b804:	3201      	adds	r2, #1
 801b806:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b808:	2a20      	cmp	r2, #32
 801b80a:	d049      	beq.n	801b8a0 <etharp_output+0x108>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b80c:	7d19      	ldrb	r1, [r3, #20]
 801b80e:	2901      	cmp	r1, #1
 801b810:	d9f8      	bls.n	801b804 <etharp_output+0x6c>
 801b812:	6820      	ldr	r0, [r4, #0]
 801b814:	6859      	ldr	r1, [r3, #4]
 801b816:	4288      	cmp	r0, r1
 801b818:	d1f4      	bne.n	801b804 <etharp_output+0x6c>
        ETHARP_SET_HINT(netif, i);
 801b81a:	b2d3      	uxtb	r3, r2
        return etharp_output_to_arp_index(netif, q, i);
 801b81c:	4631      	mov	r1, r6
 801b81e:	4628      	mov	r0, r5
 801b820:	461a      	mov	r2, r3
        ETHARP_SET_HINT(netif, i);
 801b822:	703b      	strb	r3, [r7, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b824:	f7ff fc7a 	bl	801b11c <etharp_output_to_arp_index>
}
 801b828:	b005      	add	sp, #20
 801b82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b82c:	7863      	ldrb	r3, [r4, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b82e:	2701      	movs	r7, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b830:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b832:	78a1      	ldrb	r1, [r4, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b838:	78e2      	ldrb	r2, [r4, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b83a:	f8ad 7008 	strh.w	r7, [sp, #8]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b83e:	f88d 300b 	strb.w	r3, [sp, #11]
    dest = &mcastaddr;
 801b842:	ab02      	add	r3, sp, #8
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b844:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b848:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b84c:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801b850:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801b854:	4631      	mov	r1, r6
 801b856:	f105 0231 	add.w	r2, r5, #49	; 0x31
 801b85a:	9000      	str	r0, [sp, #0]
 801b85c:	4628      	mov	r0, r5
 801b85e:	f001 f983 	bl	801cb68 <ethernet_output>
}
 801b862:	b005      	add	sp, #20
 801b864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 801b866:	4b1a      	ldr	r3, [pc, #104]	; (801b8d0 <etharp_output+0x138>)
 801b868:	e7f2      	b.n	801b850 <etharp_output+0xb8>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b86a:	4b1a      	ldr	r3, [pc, #104]	; (801b8d4 <etharp_output+0x13c>)
 801b86c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801b870:	4919      	ldr	r1, [pc, #100]	; (801b8d8 <etharp_output+0x140>)
 801b872:	481a      	ldr	r0, [pc, #104]	; (801b8dc <etharp_output+0x144>)
 801b874:	f002 fdb8 	bl	801e3e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b878:	2c00      	cmp	r4, #0
 801b87a:	d198      	bne.n	801b7ae <etharp_output+0x16>
 801b87c:	4b15      	ldr	r3, [pc, #84]	; (801b8d4 <etharp_output+0x13c>)
 801b87e:	f240 321d 	movw	r2, #797	; 0x31d
 801b882:	4917      	ldr	r1, [pc, #92]	; (801b8e0 <etharp_output+0x148>)
 801b884:	4815      	ldr	r0, [pc, #84]	; (801b8dc <etharp_output+0x144>)
 801b886:	f002 fdaf 	bl	801e3e8 <iprintf>
 801b88a:	e790      	b.n	801b7ae <etharp_output+0x16>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b88c:	4b11      	ldr	r3, [pc, #68]	; (801b8d4 <etharp_output+0x13c>)
 801b88e:	f240 321b 	movw	r2, #795	; 0x31b
 801b892:	4914      	ldr	r1, [pc, #80]	; (801b8e4 <etharp_output+0x14c>)
 801b894:	4811      	ldr	r0, [pc, #68]	; (801b8dc <etharp_output+0x144>)
 801b896:	f002 fda7 	bl	801e3e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b89a:	2e00      	cmp	r6, #0
 801b89c:	d185      	bne.n	801b7aa <etharp_output+0x12>
 801b89e:	e7e4      	b.n	801b86a <etharp_output+0xd2>
    return etharp_query(netif, dst_addr, q);
 801b8a0:	4632      	mov	r2, r6
 801b8a2:	4621      	mov	r1, r4
 801b8a4:	4628      	mov	r0, r5
 801b8a6:	f7ff fe71 	bl	801b58c <etharp_query>
}
 801b8aa:	b005      	add	sp, #20
 801b8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ETHARP_STATS_INC(etharp.cachehit);
 801b8ae:	4c0e      	ldr	r4, [pc, #56]	; (801b8e8 <etharp_output+0x150>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b8b0:	4631      	mov	r1, r6
 801b8b2:	4628      	mov	r0, r5
          ETHARP_STATS_INC(etharp.cachehit);
 801b8b4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b8b6:	3301      	adds	r3, #1
 801b8b8:	85e3      	strh	r3, [r4, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b8ba:	f7ff fc2f 	bl	801b11c <etharp_output_to_arp_index>
 801b8be:	e7d0      	b.n	801b862 <etharp_output+0xca>
            return ERR_RTE;
 801b8c0:	f06f 0003 	mvn.w	r0, #3
 801b8c4:	e7cd      	b.n	801b862 <etharp_output+0xca>
 801b8c6:	bf00      	nop
 801b8c8:	20021804 	.word	0x20021804
 801b8cc:	20021504 	.word	0x20021504
 801b8d0:	0803bc8c 	.word	0x0803bc8c
 801b8d4:	0803b818 	.word	0x0803b818
 801b8d8:	0803b8b4 	.word	0x0803b8b4
 801b8dc:	08023618 	.word	0x08023618
 801b8e0:	0803b870 	.word	0x0803b870
 801b8e4:	08023608 	.word	0x08023608
 801b8e8:	20035384 	.word	0x20035384

0801b8ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b8ec:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b8ee:	f100 0331 	add.w	r3, r0, #49	; 0x31
{
 801b8f2:	b530      	push	{r4, r5, lr}
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b8f4:	3204      	adds	r2, #4
{
 801b8f6:	b085      	sub	sp, #20
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b8f8:	2501      	movs	r5, #1
 801b8fa:	4c05      	ldr	r4, [pc, #20]	; (801b910 <etharp_request+0x24>)
 801b8fc:	9102      	str	r1, [sp, #8]
 801b8fe:	4619      	mov	r1, r3
 801b900:	9200      	str	r2, [sp, #0]
 801b902:	4a04      	ldr	r2, [pc, #16]	; (801b914 <etharp_request+0x28>)
 801b904:	9503      	str	r5, [sp, #12]
 801b906:	9401      	str	r4, [sp, #4]
 801b908:	f7ff fb86 	bl	801b018 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 801b90c:	b005      	add	sp, #20
 801b90e:	bd30      	pop	{r4, r5, pc}
 801b910:	0803bd00 	.word	0x0803bd00
 801b914:	0803bc8c 	.word	0x0803bc8c

0801b918 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 801b918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b91c:	4604      	mov	r4, r0
 801b91e:	b087      	sub	sp, #28
 801b920:	4689      	mov	r9, r1
 801b922:	4690      	mov	r8, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b924:	2124      	movs	r1, #36	; 0x24
 801b926:	2200      	movs	r2, #0
 801b928:	2001      	movs	r0, #1
 801b92a:	f7f9 f87b 	bl	8014a24 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801b92e:	2800      	cmp	r0, #0
 801b930:	d047      	beq.n	801b9c2 <icmp_send_response.isra.0+0xaa>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b932:	8943      	ldrh	r3, [r0, #10]
 801b934:	4606      	mov	r6, r0
 801b936:	2b23      	cmp	r3, #35	; 0x23
 801b938:	d946      	bls.n	801b9c8 <icmp_send_response.isra.0+0xb0>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b93a:	6823      	ldr	r3, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 801b93c:	2500      	movs	r5, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b93e:	6874      	ldr	r4, [r6, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b940:	af06      	add	r7, sp, #24
  icmphdr->code = code;
 801b942:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->type = type;
 801b946:	f884 9000 	strb.w	r9, [r4]
  icmphdr->id = 0;
 801b94a:	7125      	strb	r5, [r4, #4]
 801b94c:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
 801b94e:	71a5      	strb	r5, [r4, #6]
 801b950:	71e5      	strb	r5, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b952:	f8d3 c000 	ldr.w	ip, [r3]
 801b956:	6858      	ldr	r0, [r3, #4]
 801b958:	689a      	ldr	r2, [r3, #8]
 801b95a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801b95e:	f8c4 c008 	str.w	ip, [r4, #8]
 801b962:	60e0      	str	r0, [r4, #12]
 801b964:	6122      	str	r2, [r4, #16]
 801b966:	f8c4 e014 	str.w	lr, [r4, #20]
 801b96a:	6958      	ldr	r0, [r3, #20]
 801b96c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 801b970:	699a      	ldr	r2, [r3, #24]
 801b972:	61e0      	str	r0, [r4, #28]
 801b974:	f8c4 c018 	str.w	ip, [r4, #24]
 801b978:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 801b97a:	68db      	ldr	r3, [r3, #12]
 801b97c:	f847 3d04 	str.w	r3, [r7, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b980:	4638      	mov	r0, r7
 801b982:	f000 f937 	bl	801bbf4 <ip4_route>
#endif
  if (netif != NULL) {
 801b986:	4680      	mov	r8, r0
 801b988:	b1c0      	cbz	r0, 801b9bc <icmp_send_response.isra.0+0xa4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b98a:	70a5      	strb	r5, [r4, #2]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b98c:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 801b98e:	70e5      	strb	r5, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b990:	8971      	ldrh	r1, [r6, #10]
 801b992:	f7f8 f993 	bl	8013cbc <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801b996:	f8df c04c 	ldr.w	ip, [pc, #76]	; 801b9e4 <icmp_send_response.isra.0+0xcc>
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b99a:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b99c:	2301      	movs	r3, #1
    ICMP_STATS_INC(icmp.xmit);
 801b99e:	f8bc 4060 	ldrh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b9a2:	463a      	mov	r2, r7
 801b9a4:	f8cd 8008 	str.w	r8, [sp, #8]
 801b9a8:	4629      	mov	r1, r5
    ICMP_STATS_INC(icmp.xmit);
 801b9aa:	441c      	add	r4, r3
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b9ac:	4630      	mov	r0, r6
 801b9ae:	e9cd 5300 	strd	r5, r3, [sp]
 801b9b2:	23ff      	movs	r3, #255	; 0xff
    ICMP_STATS_INC(icmp.xmit);
 801b9b4:	f8ac 4060 	strh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b9b8:	f000 fb30 	bl	801c01c <ip4_output_if>
  }
  pbuf_free(q);
 801b9bc:	4630      	mov	r0, r6
 801b9be:	f7f8 ffc3 	bl	8014948 <pbuf_free>
}
 801b9c2:	b007      	add	sp, #28
 801b9c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b9c8:	4b03      	ldr	r3, [pc, #12]	; (801b9d8 <icmp_send_response.isra.0+0xc0>)
 801b9ca:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801b9ce:	4903      	ldr	r1, [pc, #12]	; (801b9dc <icmp_send_response.isra.0+0xc4>)
 801b9d0:	4803      	ldr	r0, [pc, #12]	; (801b9e0 <icmp_send_response.isra.0+0xc8>)
 801b9d2:	f002 fd09 	bl	801e3e8 <iprintf>
 801b9d6:	e7b0      	b.n	801b93a <icmp_send_response.isra.0+0x22>
 801b9d8:	0803b9f0 	.word	0x0803b9f0
 801b9dc:	0803ba28 	.word	0x0803ba28
 801b9e0:	08023618 	.word	0x08023618
 801b9e4:	20035384 	.word	0x20035384

0801b9e8 <icmp_input>:
{
 801b9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ICMP_STATS_INC(icmp.recv);
 801b9ec:	4d74      	ldr	r5, [pc, #464]	; (801bbc0 <icmp_input+0x1d8>)
{
 801b9ee:	b084      	sub	sp, #16
  iphdr_in = ip4_current_header();
 801b9f0:	4f74      	ldr	r7, [pc, #464]	; (801bbc4 <icmp_input+0x1dc>)
{
 801b9f2:	4606      	mov	r6, r0
  ICMP_STATS_INC(icmp.recv);
 801b9f4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
  iphdr_in = ip4_current_header();
 801b9f8:	f8d7 9008 	ldr.w	r9, [r7, #8]
  ICMP_STATS_INC(icmp.recv);
 801b9fc:	3301      	adds	r3, #1
 801b9fe:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  hlen = IPH_HL(iphdr_in) * 4;
 801ba02:	f899 4000 	ldrb.w	r4, [r9]
 801ba06:	f004 040f 	and.w	r4, r4, #15
 801ba0a:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 801ba0c:	2c13      	cmp	r4, #19
 801ba0e:	d953      	bls.n	801bab8 <icmp_input+0xd0>
  if (p->len < sizeof(u16_t)*2) {
 801ba10:	8943      	ldrh	r3, [r0, #10]
 801ba12:	2b03      	cmp	r3, #3
 801ba14:	d950      	bls.n	801bab8 <icmp_input+0xd0>
  type = *((u8_t *)p->payload);
 801ba16:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 801ba18:	781b      	ldrb	r3, [r3, #0]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	f000 809a 	beq.w	801bb54 <icmp_input+0x16c>
 801ba20:	2b08      	cmp	r3, #8
 801ba22:	f040 809d 	bne.w	801bb60 <icmp_input+0x178>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ba26:	6978      	ldr	r0, [r7, #20]
 801ba28:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801ba2c:	2be0      	cmp	r3, #224	; 0xe0
 801ba2e:	d03a      	beq.n	801baa6 <icmp_input+0xbe>
 801ba30:	4688      	mov	r8, r1
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ba32:	6839      	ldr	r1, [r7, #0]
 801ba34:	f000 fb04 	bl	801c040 <ip4_addr_isbroadcast_u32>
 801ba38:	2800      	cmp	r0, #0
 801ba3a:	d134      	bne.n	801baa6 <icmp_input+0xbe>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ba3c:	8933      	ldrh	r3, [r6, #8]
 801ba3e:	2b07      	cmp	r3, #7
 801ba40:	d93a      	bls.n	801bab8 <icmp_input+0xd0>
      if (inet_chksum_pbuf(p) != 0) {
 801ba42:	4630      	mov	r0, r6
 801ba44:	f7f8 f940 	bl	8013cc8 <inet_chksum_pbuf>
 801ba48:	4682      	mov	sl, r0
 801ba4a:	2800      	cmp	r0, #0
 801ba4c:	f040 8098 	bne.w	801bb80 <icmp_input+0x198>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801ba50:	f104 010e 	add.w	r1, r4, #14
 801ba54:	4630      	mov	r0, r6
 801ba56:	f7f8 ff6f 	bl	8014938 <pbuf_header>
 801ba5a:	2800      	cmp	r0, #0
 801ba5c:	d037      	beq.n	801bace <icmp_input+0xe6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801ba5e:	8931      	ldrh	r1, [r6, #8]
 801ba60:	4652      	mov	r2, sl
 801ba62:	2002      	movs	r0, #2
 801ba64:	4421      	add	r1, r4
 801ba66:	b289      	uxth	r1, r1
 801ba68:	f7f8 ffdc 	bl	8014a24 <pbuf_alloc>
      if (r == NULL) {
 801ba6c:	4682      	mov	sl, r0
 801ba6e:	b1d0      	cbz	r0, 801baa6 <icmp_input+0xbe>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ba70:	8942      	ldrh	r2, [r0, #10]
 801ba72:	f104 0308 	add.w	r3, r4, #8
 801ba76:	429a      	cmp	r2, r3
 801ba78:	f0c0 808b 	bcc.w	801bb92 <icmp_input+0x1aa>
      MEMCPY(r->payload, iphdr_in, hlen);
 801ba7c:	4649      	mov	r1, r9
 801ba7e:	4622      	mov	r2, r4
 801ba80:	6840      	ldr	r0, [r0, #4]
 801ba82:	f001 fd26 	bl	801d4d2 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 801ba86:	4261      	negs	r1, r4
 801ba88:	4650      	mov	r0, sl
 801ba8a:	f7f8 ff55 	bl	8014938 <pbuf_header>
 801ba8e:	2800      	cmp	r0, #0
 801ba90:	f000 808a 	beq.w	801bba8 <icmp_input+0x1c0>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ba94:	4b4c      	ldr	r3, [pc, #304]	; (801bbc8 <icmp_input+0x1e0>)
 801ba96:	22af      	movs	r2, #175	; 0xaf
 801ba98:	494c      	ldr	r1, [pc, #304]	; (801bbcc <icmp_input+0x1e4>)
 801ba9a:	484d      	ldr	r0, [pc, #308]	; (801bbd0 <icmp_input+0x1e8>)
 801ba9c:	f002 fca4 	bl	801e3e8 <iprintf>
        pbuf_free(r);
 801baa0:	4650      	mov	r0, sl
 801baa2:	f7f8 ff51 	bl	8014948 <pbuf_free>
  pbuf_free(p);
 801baa6:	4630      	mov	r0, r6
 801baa8:	f7f8 ff4e 	bl	8014948 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801baac:	f8b5 3074 	ldrh.w	r3, [r5, #116]	; 0x74
 801bab0:	3301      	adds	r3, #1
 801bab2:	f8a5 3074 	strh.w	r3, [r5, #116]	; 0x74
  return;
 801bab6:	e007      	b.n	801bac8 <icmp_input+0xe0>
  pbuf_free(p);
 801bab8:	4630      	mov	r0, r6
 801baba:	f7f8 ff45 	bl	8014948 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801babe:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
 801bac2:	3301      	adds	r3, #1
 801bac4:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
}
 801bac8:	b004      	add	sp, #16
 801baca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801bace:	f64f 71f2 	movw	r1, #65522	; 0xfff2
 801bad2:	4630      	mov	r0, r6
 801bad4:	1b09      	subs	r1, r1, r4
 801bad6:	b209      	sxth	r1, r1
 801bad8:	f7f8 ff2e 	bl	8014938 <pbuf_header>
 801badc:	2800      	cmp	r0, #0
 801bade:	d15c      	bne.n	801bb9a <icmp_input+0x1b2>
    if (pbuf_header(p, (s16_t)hlen)) {
 801bae0:	4621      	mov	r1, r4
 801bae2:	4630      	mov	r0, r6
    iecho = (struct icmp_echo_hdr *)p->payload;
 801bae4:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 801bae8:	f7f8 ff26 	bl	8014938 <pbuf_header>
 801baec:	bb90      	cbnz	r0, 801bb54 <icmp_input+0x16c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801baee:	f8d6 9004 	ldr.w	r9, [r6, #4]
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801baf2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801baf6:	e9d7 3104 	ldrd	r3, r1, [r7, #16]
      IPH_CHKSUM_SET(iphdr, 0);
 801bafa:	2700      	movs	r7, #0
      ip4_addr_copy(iphdr->src, *src);
 801bafc:	f8c9 100c 	str.w	r1, [r9, #12]
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801bb00:	4621      	mov	r1, r4
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801bb02:	f8c9 3010 	str.w	r3, [r9, #16]
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801bb06:	f8ba 3002 	ldrh.w	r3, [sl, #2]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801bb0a:	f88a 0000 	strb.w	r0, [sl]
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801bb0e:	4648      	mov	r0, r9
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801bb10:	4293      	cmp	r3, r2
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 801bb12:	bf8c      	ite	hi
 801bb14:	3309      	addhi	r3, #9
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 801bb16:	3308      	addls	r3, #8
 801bb18:	f8aa 3002 	strh.w	r3, [sl, #2]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801bb1c:	f04f 0aff 	mov.w	sl, #255	; 0xff
      IPH_CHKSUM_SET(iphdr, 0);
 801bb20:	f889 700a 	strb.w	r7, [r9, #10]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801bb24:	f889 a008 	strb.w	sl, [r9, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801bb28:	f889 700b 	strb.w	r7, [r9, #11]
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801bb2c:	f7f8 f8c6 	bl	8013cbc <inet_chksum>
      ICMP_STATS_INC(icmp.xmit);
 801bb30:	f8b5 4060 	ldrh.w	r4, [r5, #96]	; 0x60
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801bb34:	2101      	movs	r1, #1
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801bb36:	f8a9 000a 	strh.w	r0, [r9, #10]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801bb3a:	4653      	mov	r3, sl
 801bb3c:	9700      	str	r7, [sp, #0]
      ICMP_STATS_INC(icmp.xmit);
 801bb3e:	440c      	add	r4, r1
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801bb40:	9101      	str	r1, [sp, #4]
 801bb42:	463a      	mov	r2, r7
 801bb44:	f8cd 8008 	str.w	r8, [sp, #8]
 801bb48:	4630      	mov	r0, r6
 801bb4a:	4922      	ldr	r1, [pc, #136]	; (801bbd4 <icmp_input+0x1ec>)
      ICMP_STATS_INC(icmp.xmit);
 801bb4c:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801bb50:	f000 fa64 	bl	801c01c <ip4_output_if>
  pbuf_free(p);
 801bb54:	4630      	mov	r0, r6
}
 801bb56:	b004      	add	sp, #16
 801bb58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 801bb5c:	f7f8 bef4 	b.w	8014948 <pbuf_free>
    ICMP_STATS_INC(icmp.proterr);
 801bb60:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
  pbuf_free(p);
 801bb64:	4630      	mov	r0, r6
    ICMP_STATS_INC(icmp.drop);
 801bb66:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    ICMP_STATS_INC(icmp.proterr);
 801bb6a:	3201      	adds	r2, #1
    ICMP_STATS_INC(icmp.drop);
 801bb6c:	3301      	adds	r3, #1
    ICMP_STATS_INC(icmp.proterr);
 801bb6e:	f8a5 2070 	strh.w	r2, [r5, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
 801bb72:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
}
 801bb76:	b004      	add	sp, #16
 801bb78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 801bb7c:	f7f8 bee4 	b.w	8014948 <pbuf_free>
        pbuf_free(p);
 801bb80:	4630      	mov	r0, r6
 801bb82:	f7f8 fee1 	bl	8014948 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
 801bb86:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801bb8a:	3301      	adds	r3, #1
 801bb8c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
        return;
 801bb90:	e79a      	b.n	801bac8 <icmp_input+0xe0>
        pbuf_free(r);
 801bb92:	4650      	mov	r0, sl
 801bb94:	f7f8 fed8 	bl	8014948 <pbuf_free>
        goto icmperr;
 801bb98:	e785      	b.n	801baa6 <icmp_input+0xbe>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801bb9a:	4b0b      	ldr	r3, [pc, #44]	; (801bbc8 <icmp_input+0x1e0>)
 801bb9c:	22c0      	movs	r2, #192	; 0xc0
 801bb9e:	490e      	ldr	r1, [pc, #56]	; (801bbd8 <icmp_input+0x1f0>)
 801bba0:	480b      	ldr	r0, [pc, #44]	; (801bbd0 <icmp_input+0x1e8>)
 801bba2:	f002 fc21 	bl	801e3e8 <iprintf>
        goto icmperr;
 801bba6:	e77e      	b.n	801baa6 <icmp_input+0xbe>
      if (pbuf_copy(r, p) != ERR_OK) {
 801bba8:	4631      	mov	r1, r6
 801bbaa:	4650      	mov	r0, sl
 801bbac:	f7f9 f93e 	bl	8014e2c <pbuf_copy>
 801bbb0:	2800      	cmp	r0, #0
 801bbb2:	d1ee      	bne.n	801bb92 <icmp_input+0x1aa>
      pbuf_free(p);
 801bbb4:	4630      	mov	r0, r6
 801bbb6:	4656      	mov	r6, sl
 801bbb8:	f7f8 fec6 	bl	8014948 <pbuf_free>
 801bbbc:	e790      	b.n	801bae0 <icmp_input+0xf8>
 801bbbe:	bf00      	nop
 801bbc0:	20035384 	.word	0x20035384
 801bbc4:	20025a74 	.word	0x20025a74
 801bbc8:	0803b9f0 	.word	0x0803b9f0
 801bbcc:	0803b984 	.word	0x0803b984
 801bbd0:	08023618 	.word	0x08023618
 801bbd4:	20025a88 	.word	0x20025a88
 801bbd8:	0803b9bc 	.word	0x0803b9bc

0801bbdc <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 801bbdc:	460a      	mov	r2, r1
 801bbde:	3004      	adds	r0, #4
 801bbe0:	2103      	movs	r1, #3
 801bbe2:	f7ff be99 	b.w	801b918 <icmp_send_response.isra.0>
 801bbe6:	bf00      	nop

0801bbe8 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 801bbe8:	460a      	mov	r2, r1
 801bbea:	3004      	adds	r0, #4
 801bbec:	210b      	movs	r1, #11
 801bbee:	f7ff be93 	b.w	801b918 <icmp_send_response.isra.0>
 801bbf2:	bf00      	nop

0801bbf4 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801bbf4:	4b17      	ldr	r3, [pc, #92]	; (801bc54 <ip4_route+0x60>)
{
 801bbf6:	b430      	push	{r4, r5}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	b1ab      	cbz	r3, 801bc28 <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bbfc:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801bc00:	07d4      	lsls	r4, r2, #31
 801bc02:	d5f9      	bpl.n	801bbf8 <ip4_route+0x4>
 801bc04:	0751      	lsls	r1, r2, #29
 801bc06:	d5f7      	bpl.n	801bbf8 <ip4_route+0x4>
 801bc08:	6859      	ldr	r1, [r3, #4]
 801bc0a:	2900      	cmp	r1, #0
 801bc0c:	d0f4      	beq.n	801bbf8 <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801bc0e:	6804      	ldr	r4, [r0, #0]
 801bc10:	689d      	ldr	r5, [r3, #8]
 801bc12:	4061      	eors	r1, r4
 801bc14:	4229      	tst	r1, r5
 801bc16:	d004      	beq.n	801bc22 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801bc18:	0792      	lsls	r2, r2, #30
 801bc1a:	d4ed      	bmi.n	801bbf8 <ip4_route+0x4>
 801bc1c:	68da      	ldr	r2, [r3, #12]
 801bc1e:	4294      	cmp	r4, r2
 801bc20:	d1ea      	bne.n	801bbf8 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 801bc22:	4618      	mov	r0, r3
 801bc24:	bc30      	pop	{r4, r5}
 801bc26:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bc28:	4b0b      	ldr	r3, [pc, #44]	; (801bc58 <ip4_route+0x64>)
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	b143      	cbz	r3, 801bc40 <ip4_route+0x4c>
 801bc2e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801bc32:	f002 0205 	and.w	r2, r2, #5
 801bc36:	2a05      	cmp	r2, #5
 801bc38:	d102      	bne.n	801bc40 <ip4_route+0x4c>
 801bc3a:	685a      	ldr	r2, [r3, #4]
 801bc3c:	2a00      	cmp	r2, #0
 801bc3e:	d1f0      	bne.n	801bc22 <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 801bc40:	4906      	ldr	r1, [pc, #24]	; (801bc5c <ip4_route+0x68>)
 801bc42:	2300      	movs	r3, #0
 801bc44:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
}
 801bc48:	4618      	mov	r0, r3
    IP_STATS_INC(ip.rterr);
 801bc4a:	3201      	adds	r2, #1
}
 801bc4c:	bc30      	pop	{r4, r5}
    IP_STATS_INC(ip.rterr);
 801bc4e:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
}
 801bc52:	4770      	bx	lr
 801bc54:	20035378 	.word	0x20035378
 801bc58:	2003537c 	.word	0x2003537c
 801bc5c:	20035384 	.word	0x20035384

0801bc60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 801bc64:	4c94      	ldr	r4, [pc, #592]	; (801beb8 <ip4_input+0x258>)
{
 801bc66:	b083      	sub	sp, #12
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bc68:	f8d0 8004 	ldr.w	r8, [r0, #4]
  IP_STATS_INC(ip.recv);
 801bc6c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801bc70:	3301      	adds	r3, #1
 801bc72:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 801bc76:	f898 3000 	ldrb.w	r3, [r8]
 801bc7a:	091a      	lsrs	r2, r3, #4
 801bc7c:	2a04      	cmp	r2, #4
 801bc7e:	d00f      	beq.n	801bca0 <ip4_input+0x40>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bc80:	f7f8 fe62 	bl	8014948 <pbuf_free>
    IP_STATS_INC(ip.err);
 801bc84:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801bc88:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    IP_STATS_INC(ip.err);
 801bc8c:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801bc8e:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 801bc90:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801bc94:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801bc98:	2000      	movs	r0, #0
 801bc9a:	b003      	add	sp, #12
 801bc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL(iphdr);
 801bca0:	f003 030f 	and.w	r3, r3, #15
 801bca4:	4607      	mov	r7, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bca6:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801bcaa:	4689      	mov	r9, r1
  iphdr_hlen *= 4;
 801bcac:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bcae:	f7f7 faa1 	bl	80131f4 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 801bcb2:	893b      	ldrh	r3, [r7, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bcb4:	4605      	mov	r5, r0
  if (iphdr_len < p->tot_len) {
 801bcb6:	4283      	cmp	r3, r0
 801bcb8:	d850      	bhi.n	801bd5c <ip4_input+0xfc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bcba:	897b      	ldrh	r3, [r7, #10]
 801bcbc:	42b3      	cmp	r3, r6
 801bcbe:	d33a      	bcc.n	801bd36 <ip4_input+0xd6>
 801bcc0:	893b      	ldrh	r3, [r7, #8]
 801bcc2:	42ab      	cmp	r3, r5
 801bcc4:	d337      	bcc.n	801bd36 <ip4_input+0xd6>
 801bcc6:	2e13      	cmp	r6, #19
 801bcc8:	d935      	bls.n	801bd36 <ip4_input+0xd6>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bcca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801bcce:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 801bec0 <ip4_input+0x260>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bcd2:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 801bcd6:	f899 3037 	ldrb.w	r3, [r9, #55]	; 0x37
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bcda:	f8cb 2014 	str.w	r2, [fp, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bcde:	29e0      	cmp	r1, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bce0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801bce4:	f8cb 0010 	str.w	r0, [fp, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bce8:	f000 808b 	beq.w	801be02 <ip4_input+0x1a2>
 801bcec:	464d      	mov	r5, r9
    int first = 1;
 801bcee:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 801bcf2:	4a72      	ldr	r2, [pc, #456]	; (801bebc <ip4_input+0x25c>)
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bcf4:	07db      	lsls	r3, r3, #31
 801bcf6:	d50c      	bpl.n	801bd12 <ip4_input+0xb2>
 801bcf8:	686b      	ldr	r3, [r5, #4]
 801bcfa:	b153      	cbz	r3, 801bd12 <ip4_input+0xb2>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bcfc:	f8db 0014 	ldr.w	r0, [fp, #20]
 801bd00:	4283      	cmp	r3, r0
 801bd02:	d079      	beq.n	801bdf8 <ip4_input+0x198>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bd04:	4629      	mov	r1, r5
 801bd06:	9201      	str	r2, [sp, #4]
 801bd08:	f000 f99a 	bl	801c040 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bd0c:	9a01      	ldr	r2, [sp, #4]
 801bd0e:	2800      	cmp	r0, #0
 801bd10:	d172      	bne.n	801bdf8 <ip4_input+0x198>
      if (first) {
 801bd12:	f1ba 0f00 	cmp.w	sl, #0
 801bd16:	d01f      	beq.n	801bd58 <ip4_input+0xf8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801bd18:	f89b 3014 	ldrb.w	r3, [fp, #20]
 801bd1c:	2b7f      	cmp	r3, #127	; 0x7f
 801bd1e:	d022      	beq.n	801bd66 <ip4_input+0x106>
        netif = netif_list;
 801bd20:	6815      	ldr	r5, [r2, #0]
      if (netif == inp) {
 801bd22:	45a9      	cmp	r9, r5
        netif = netif->next;
 801bd24:	bf08      	it	eq
 801bd26:	f8d9 5000 	ldreq.w	r5, [r9]
    } while (netif != NULL);
 801bd2a:	b1e5      	cbz	r5, 801bd66 <ip4_input+0x106>
 801bd2c:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 801bd30:	f04f 0a00 	mov.w	sl, #0
 801bd34:	e7de      	b.n	801bcf4 <ip4_input+0x94>
    pbuf_free(p);
 801bd36:	4638      	mov	r0, r7
 801bd38:	f7f8 fe06 	bl	8014948 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801bd3c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801bd40:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
}
 801bd44:	2000      	movs	r0, #0
    IP_STATS_INC(ip.lenerr);
 801bd46:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801bd48:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 801bd4a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801bd4e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
}
 801bd52:	b003      	add	sp, #12
 801bd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        netif = netif->next;
 801bd58:	682d      	ldr	r5, [r5, #0]
 801bd5a:	e7e2      	b.n	801bd22 <ip4_input+0xc2>
    pbuf_realloc(p, iphdr_len);
 801bd5c:	4601      	mov	r1, r0
 801bd5e:	4638      	mov	r0, r7
 801bd60:	f7f8 ff6e 	bl	8014c40 <pbuf_realloc>
 801bd64:	e7a9      	b.n	801bcba <ip4_input+0x5a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801bd66:	f898 3009 	ldrb.w	r3, [r8, #9]
 801bd6a:	2b11      	cmp	r3, #17
 801bd6c:	d03c      	beq.n	801bde8 <ip4_input+0x188>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801bd6e:	f8db 0010 	ldr.w	r0, [fp, #16]
 801bd72:	2800      	cmp	r0, #0
 801bd74:	f000 8088 	beq.w	801be88 <ip4_input+0x228>
 801bd78:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bd7a:	4649      	mov	r1, r9
 801bd7c:	f000 f960 	bl	801c040 <ip4_addr_isbroadcast_u32>
 801bd80:	2800      	cmp	r0, #0
 801bd82:	d178      	bne.n	801be76 <ip4_input+0x216>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801bd84:	f8db 3010 	ldr.w	r3, [fp, #16]
 801bd88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bd8c:	2be0      	cmp	r3, #224	; 0xe0
 801bd8e:	d072      	beq.n	801be76 <ip4_input+0x216>
  if (netif == NULL) {
 801bd90:	2d00      	cmp	r5, #0
 801bd92:	d079      	beq.n	801be88 <ip4_input+0x228>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bd94:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801bd98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801bd9c:	b143      	cbz	r3, 801bdb0 <ip4_input+0x150>
    p = ip4_reass(p);
 801bd9e:	4638      	mov	r0, r7
 801bda0:	f000 fb60 	bl	801c464 <ip4_reass>
    if (p == NULL) {
 801bda4:	4607      	mov	r7, r0
 801bda6:	2800      	cmp	r0, #0
 801bda8:	f43f af76 	beq.w	801bc98 <ip4_input+0x38>
    iphdr = (struct ip_hdr *)p->payload;
 801bdac:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 801bdb0:	f8cb 5000 	str.w	r5, [fp]
  if (raw_input(p, inp) == 0)
 801bdb4:	4649      	mov	r1, r9
  ip_data.current_input_netif = inp;
 801bdb6:	f8cb 9004 	str.w	r9, [fp, #4]
  if (raw_input(p, inp) == 0)
 801bdba:	4638      	mov	r0, r7
  ip_data.current_ip4_header = iphdr;
 801bdbc:	f8cb 8008 	str.w	r8, [fp, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801bdc0:	f898 3000 	ldrb.w	r3, [r8]
 801bdc4:	f003 030f 	and.w	r3, r3, #15
 801bdc8:	009b      	lsls	r3, r3, #2
 801bdca:	f8ab 300c 	strh.w	r3, [fp, #12]
  if (raw_input(p, inp) == 0)
 801bdce:	f7f9 fa03 	bl	80151d8 <raw_input>
 801bdd2:	b300      	cbz	r0, 801be16 <ip4_input+0x1b6>
  ip_data.current_netif = NULL;
 801bdd4:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 801bdd6:	e9cb 3300 	strd	r3, r3, [fp]
  ip_data.current_ip4_header = NULL;
 801bdda:	f8cb 3008 	str.w	r3, [fp, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bdde:	f8ab 300c 	strh.w	r3, [fp, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bde2:	e9cb 3304 	strd	r3, r3, [fp, #16]
  return ERR_OK;
 801bde6:	e757      	b.n	801bc98 <ip4_input+0x38>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801bde8:	eb08 0306 	add.w	r3, r8, r6
 801bdec:	885b      	ldrh	r3, [r3, #2]
 801bdee:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801bdf2:	d1bc      	bne.n	801bd6e <ip4_input+0x10e>
 801bdf4:	464d      	mov	r5, r9
 801bdf6:	e7cd      	b.n	801bd94 <ip4_input+0x134>
 801bdf8:	f8db 0010 	ldr.w	r0, [fp, #16]
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801bdfc:	2800      	cmp	r0, #0
 801bdfe:	d0c9      	beq.n	801bd94 <ip4_input+0x134>
 801be00:	e7bb      	b.n	801bd7a <ip4_input+0x11a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801be02:	07da      	lsls	r2, r3, #31
 801be04:	d5af      	bpl.n	801bd66 <ip4_input+0x106>
 801be06:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d0ab      	beq.n	801bd66 <ip4_input+0x106>
 801be0e:	464d      	mov	r5, r9
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801be10:	2800      	cmp	r0, #0
 801be12:	d0bf      	beq.n	801bd94 <ip4_input+0x134>
 801be14:	e7b1      	b.n	801bd7a <ip4_input+0x11a>
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801be16:	4271      	negs	r1, r6
 801be18:	4638      	mov	r0, r7
 801be1a:	f7f8 fd8d 	bl	8014938 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 801be1e:	f898 3009 	ldrb.w	r3, [r8, #9]
 801be22:	2b06      	cmp	r3, #6
 801be24:	d043      	beq.n	801beae <ip4_input+0x24e>
 801be26:	2b11      	cmp	r3, #17
 801be28:	d03c      	beq.n	801bea4 <ip4_input+0x244>
 801be2a:	2b01      	cmp	r3, #1
 801be2c:	d035      	beq.n	801be9a <ip4_input+0x23a>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801be2e:	4629      	mov	r1, r5
 801be30:	f8db 0014 	ldr.w	r0, [fp, #20]
 801be34:	f000 f904 	bl	801c040 <ip4_addr_isbroadcast_u32>
 801be38:	b978      	cbnz	r0, 801be5a <ip4_input+0x1fa>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801be3a:	f8db 3014 	ldr.w	r3, [fp, #20]
 801be3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801be42:	2be0      	cmp	r3, #224	; 0xe0
 801be44:	d009      	beq.n	801be5a <ip4_input+0x1fa>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801be46:	4631      	mov	r1, r6
 801be48:	4638      	mov	r0, r7
 801be4a:	f7f8 fd79 	bl	8014940 <pbuf_header_force>
        p->payload = iphdr;
 801be4e:	f8c7 8004 	str.w	r8, [r7, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801be52:	2102      	movs	r1, #2
 801be54:	4638      	mov	r0, r7
 801be56:	f7ff fec1 	bl	801bbdc <icmp_dest_unreach>
      pbuf_free(p);
 801be5a:	4638      	mov	r0, r7
 801be5c:	f7f8 fd74 	bl	8014948 <pbuf_free>
      IP_STATS_INC(ip.proterr);
 801be60:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
      IP_STATS_INC(ip.drop);
 801be64:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
      IP_STATS_INC(ip.proterr);
 801be68:	3201      	adds	r2, #1
      IP_STATS_INC(ip.drop);
 801be6a:	3301      	adds	r3, #1
      IP_STATS_INC(ip.proterr);
 801be6c:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
      IP_STATS_INC(ip.drop);
 801be70:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801be74:	e7ae      	b.n	801bdd4 <ip4_input+0x174>
      pbuf_free(p);
 801be76:	4638      	mov	r0, r7
 801be78:	f7f8 fd66 	bl	8014948 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801be7c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801be80:	3301      	adds	r3, #1
 801be82:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      return ERR_OK;
 801be86:	e707      	b.n	801bc98 <ip4_input+0x38>
      IP_STATS_INC(ip.drop);
 801be88:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801be8c:	4638      	mov	r0, r7
      IP_STATS_INC(ip.drop);
 801be8e:	3301      	adds	r3, #1
 801be90:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801be94:	f7f8 fd58 	bl	8014948 <pbuf_free>
    return ERR_OK;
 801be98:	e6fe      	b.n	801bc98 <ip4_input+0x38>
      icmp_input(p, inp);
 801be9a:	4649      	mov	r1, r9
 801be9c:	4638      	mov	r0, r7
 801be9e:	f7ff fda3 	bl	801b9e8 <icmp_input>
      break;
 801bea2:	e797      	b.n	801bdd4 <ip4_input+0x174>
      udp_input(p, inp);
 801bea4:	4649      	mov	r1, r9
 801bea6:	4638      	mov	r0, r7
 801bea8:	f7fd fa68 	bl	801937c <udp_input>
      break;
 801beac:	e792      	b.n	801bdd4 <ip4_input+0x174>
      tcp_input(p, inp);
 801beae:	4649      	mov	r1, r9
 801beb0:	4638      	mov	r0, r7
 801beb2:	f7fb fa0f 	bl	80172d4 <tcp_input>
      break;
 801beb6:	e78d      	b.n	801bdd4 <ip4_input+0x174>
 801beb8:	20035384 	.word	0x20035384
 801bebc:	20035378 	.word	0x20035378
 801bec0:	20025a74 	.word	0x20025a74

0801bec4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801bec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bec8:	4698      	mov	r8, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801beca:	89c3      	ldrh	r3, [r0, #14]
{
 801becc:	b085      	sub	sp, #20
 801bece:	4605      	mov	r5, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bed0:	2b01      	cmp	r3, #1
{
 801bed2:	468a      	mov	sl, r1
 801bed4:	4616      	mov	r6, r2
 801bed6:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801beda:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 801bede:	9f10      	ldr	r7, [sp, #64]	; 0x40
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bee0:	d161      	bne.n	801bfa6 <ip4_output_if_src+0xe2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801bee2:	2e00      	cmp	r6, #0
 801bee4:	d068      	beq.n	801bfb8 <ip4_output_if_src+0xf4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801bee6:	2114      	movs	r1, #20
 801bee8:	4628      	mov	r0, r5
 801beea:	f7f8 fd25 	bl	8014938 <pbuf_header>
 801beee:	2800      	cmp	r0, #0
 801bef0:	d17c      	bne.n	801bfec <ip4_output_if_src+0x128>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bef2:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 801bef4:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bef6:	2b13      	cmp	r3, #19
 801bef8:	d964      	bls.n	801bfc4 <ip4_output_if_src+0x100>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801befa:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801befe:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 801bf02:	f884 9009 	strb.w	r9, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bf06:	f04f 0c45 	mov.w	ip, #69	; 0x45
    ip4_addr_copy(iphdr->dest, *dest);
 801bf0a:	6832      	ldr	r2, [r6, #0]
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801bf0c:	ea4f 210b 	mov.w	r1, fp, lsl #8
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801bf10:	ea4f 2318 	mov.w	r3, r8, lsr #8
    IPH_TOS_SET(iphdr, tos);
 801bf14:	f884 b001 	strb.w	fp, [r4, #1]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801bf18:	0c10      	lsrs	r0, r2, #16
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801bf1a:	ea41 010c 	orr.w	r1, r1, ip
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801bf1e:	ea43 2809 	orr.w	r8, r3, r9, lsl #8
    ip4_addr_copy(iphdr->dest, *dest);
 801bf22:	6122      	str	r2, [r4, #16]
 801bf24:	fa10 f382 	uxtah	r3, r0, r2
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bf28:	f884 c000 	strb.w	ip, [r4]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bf2c:	8928      	ldrh	r0, [r5, #8]
 801bf2e:	eb03 0901 	add.w	r9, r3, r1
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bf32:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 801c018 <ip4_output_if_src+0x154>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bf36:	f7f7 f95d 	bl	80131f4 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 801bf3a:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bf3c:	4601      	mov	r1, r0
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bf3e:	f8bb 0000 	ldrh.w	r0, [fp]
    IPH_OFFSET_SET(iphdr, 0);
 801bf42:	71a3      	strb	r3, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bf44:	8061      	strh	r1, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 801bf46:	71e3      	strb	r3, [r4, #7]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bf48:	9101      	str	r1, [sp, #4]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bf4a:	f7f7 f953 	bl	80131f4 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bf4e:	f8bb 2000 	ldrh.w	r2, [fp]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bf52:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 801bf54:	3201      	adds	r2, #1

    if (src == NULL) {
 801bf56:	9901      	ldr	r1, [sp, #4]
    ++ip_id;
 801bf58:	f8ab 2000 	strh.w	r2, [fp]
    if (src == NULL) {
 801bf5c:	f1ba 0f00 	cmp.w	sl, #0
 801bf60:	d038      	beq.n	801bfd4 <ip4_output_if_src+0x110>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bf62:	f8da 2000 	ldr.w	r2, [sl]
 801bf66:	60e2      	str	r2, [r4, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801bf68:	eb08 0309 	add.w	r3, r8, r9
 801bf6c:	440b      	add	r3, r1
 801bf6e:	4418      	add	r0, r3
 801bf70:	fa10 f082 	uxtah	r0, r0, r2
 801bf74:	eb00 4012 	add.w	r0, r0, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801bf78:	b283      	uxth	r3, r0
 801bf7a:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 801bf7e:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801bf82:	43c0      	mvns	r0, r0
 801bf84:	8160      	strh	r0, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 801bf86:	4a1e      	ldr	r2, [pc, #120]	; (801c000 <ip4_output_if_src+0x13c>)
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bf88:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
  IP_STATS_INC(ip.xmit);
 801bf8a:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 801bf8e:	3301      	adds	r3, #1
 801bf90:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
    return ip4_frag(p, netif, dest);
 801bf94:	4632      	mov	r2, r6
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bf96:	bb09      	cbnz	r1, 801bfdc <ip4_output_if_src+0x118>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801bf98:	4629      	mov	r1, r5
 801bf9a:	697b      	ldr	r3, [r7, #20]
 801bf9c:	4638      	mov	r0, r7
 801bf9e:	4798      	blx	r3
}
 801bfa0:	b005      	add	sp, #20
 801bfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bfa6:	4b17      	ldr	r3, [pc, #92]	; (801c004 <ip4_output_if_src+0x140>)
 801bfa8:	f240 3233 	movw	r2, #819	; 0x333
 801bfac:	4916      	ldr	r1, [pc, #88]	; (801c008 <ip4_output_if_src+0x144>)
 801bfae:	4817      	ldr	r0, [pc, #92]	; (801c00c <ip4_output_if_src+0x148>)
 801bfb0:	f002 fa1a 	bl	801e3e8 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801bfb4:	2e00      	cmp	r6, #0
 801bfb6:	d196      	bne.n	801bee6 <ip4_output_if_src+0x22>
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bfb8:	686b      	ldr	r3, [r5, #4]
 801bfba:	ae04      	add	r6, sp, #16
 801bfbc:	691b      	ldr	r3, [r3, #16]
 801bfbe:	f846 3d04 	str.w	r3, [r6, #-4]!
 801bfc2:	e7e0      	b.n	801bf86 <ip4_output_if_src+0xc2>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bfc4:	4b0f      	ldr	r3, [pc, #60]	; (801c004 <ip4_output_if_src+0x140>)
 801bfc6:	f240 3261 	movw	r2, #865	; 0x361
 801bfca:	4911      	ldr	r1, [pc, #68]	; (801c010 <ip4_output_if_src+0x14c>)
 801bfcc:	480f      	ldr	r0, [pc, #60]	; (801c00c <ip4_output_if_src+0x148>)
 801bfce:	f002 fa0b 	bl	801e3e8 <iprintf>
 801bfd2:	e792      	b.n	801befa <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bfd4:	4b0f      	ldr	r3, [pc, #60]	; (801c014 <ip4_output_if_src+0x150>)
 801bfd6:	681a      	ldr	r2, [r3, #0]
 801bfd8:	60e2      	str	r2, [r4, #12]
 801bfda:	e7c5      	b.n	801bf68 <ip4_output_if_src+0xa4>
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bfdc:	892b      	ldrh	r3, [r5, #8]
 801bfde:	428b      	cmp	r3, r1
 801bfe0:	d9da      	bls.n	801bf98 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 801bfe2:	4639      	mov	r1, r7
 801bfe4:	4628      	mov	r0, r5
 801bfe6:	f000 fc5d 	bl	801c8a4 <ip4_frag>
 801bfea:	e7d9      	b.n	801bfa0 <ip4_output_if_src+0xdc>
      IP_STATS_INC(ip.err);
 801bfec:	4a04      	ldr	r2, [pc, #16]	; (801c000 <ip4_output_if_src+0x13c>)
      return ERR_BUF;
 801bfee:	f06f 0001 	mvn.w	r0, #1
      IP_STATS_INC(ip.err);
 801bff2:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 801bff6:	3301      	adds	r3, #1
 801bff8:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
      return ERR_BUF;
 801bffc:	e7d0      	b.n	801bfa0 <ip4_output_if_src+0xdc>
 801bffe:	bf00      	nop
 801c000:	20035384 	.word	0x20035384
 801c004:	0803ba54 	.word	0x0803ba54
 801c008:	0803ba88 	.word	0x0803ba88
 801c00c:	08023618 	.word	0x08023618
 801c010:	0803ba94 	.word	0x0803ba94
 801c014:	0803bb0c 	.word	0x0803bb0c
 801c018:	20021806 	.word	0x20021806

0801c01c <ip4_output_if>:
{
 801c01c:	b4f0      	push	{r4, r5, r6, r7}
 801c01e:	9c06      	ldr	r4, [sp, #24]
 801c020:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c024:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c028:	b11a      	cbz	r2, 801c032 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 801c02a:	b109      	cbz	r1, 801c030 <ip4_output_if+0x14>
 801c02c:	680f      	ldr	r7, [r1, #0]
 801c02e:	b907      	cbnz	r7, 801c032 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 801c030:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c032:	9504      	str	r5, [sp, #16]
 801c034:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 801c038:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c03a:	f7ff bf43 	b.w	801bec4 <ip4_output_if_src>
 801c03e:	bf00      	nop

0801c040 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c040:	1e43      	subs	r3, r0, #1
 801c042:	3303      	adds	r3, #3
 801c044:	d814      	bhi.n	801c070 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c046:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
 801c04a:	f013 0302 	ands.w	r3, r3, #2
 801c04e:	d00d      	beq.n	801c06c <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c050:	684b      	ldr	r3, [r1, #4]
 801c052:	4283      	cmp	r3, r0
 801c054:	d00a      	beq.n	801c06c <ip4_addr_isbroadcast_u32+0x2c>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c056:	688a      	ldr	r2, [r1, #8]
 801c058:	4043      	eors	r3, r0
 801c05a:	4213      	tst	r3, r2
 801c05c:	d106      	bne.n	801c06c <ip4_addr_isbroadcast_u32+0x2c>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c05e:	43d2      	mvns	r2, r2
 801c060:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
 801c064:	bf0c      	ite	eq
 801c066:	2001      	moveq	r0, #1
 801c068:	2000      	movne	r0, #0
 801c06a:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 801c06c:	2000      	movs	r0, #0
  }
}
 801c06e:	4770      	bx	lr
    return 1;
 801c070:	2001      	movs	r0, #1
 801c072:	4770      	bx	lr

0801c074 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801c074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 801c078:	7803      	ldrb	r3, [r0, #0]
{
 801c07a:	460d      	mov	r5, r1
 801c07c:	b084      	sub	sp, #16
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801c07e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c082:	b2d1      	uxtb	r1, r2
 801c084:	2909      	cmp	r1, #9
 801c086:	d841      	bhi.n	801c10c <ip4addr_aton+0x98>
  u32_t *pp = parts;
 801c088:	46ec      	mov	ip, sp
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801c08a:	f10d 0e0c 	add.w	lr, sp, #12
  u32_t *pp = parts;
 801c08e:	4667      	mov	r7, ip
    if (c == '0') {
 801c090:	2b30      	cmp	r3, #48	; 0x30
 801c092:	d040      	beq.n	801c116 <ip4addr_aton+0xa2>
    base = 10;
 801c094:	260a      	movs	r6, #10
        base = 8;
 801c096:	2400      	movs	r4, #0
 801c098:	e005      	b.n	801c0a6 <ip4addr_aton+0x32>
        val = (val * base) + (u32_t)(c - '0');
 801c09a:	f1a8 0430 	sub.w	r4, r8, #48	; 0x30
        c = *++cp;
 801c09e:	7843      	ldrb	r3, [r0, #1]
 801c0a0:	3001      	adds	r0, #1
 801c0a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
      if (isdigit(c)) {
 801c0a6:	b2d2      	uxtb	r2, r2
      } else if (base == 16 && isxdigit(c)) {
 801c0a8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
        val = (val * base) + (u32_t)(c - '0');
 801c0ac:	fb04 3806 	mla	r8, r4, r6, r3
      if (isdigit(c)) {
 801c0b0:	2a09      	cmp	r2, #9
      } else if (base == 16 && isxdigit(c)) {
 801c0b2:	b2c9      	uxtb	r1, r1
      if (isdigit(c)) {
 801c0b4:	d9f1      	bls.n	801c09a <ip4addr_aton+0x26>
      } else if (base == 16 && isxdigit(c)) {
 801c0b6:	2e10      	cmp	r6, #16
 801c0b8:	f1a3 0a41 	sub.w	sl, r3, #65	; 0x41
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801c0bc:	f103 020a 	add.w	r2, r3, #10
 801c0c0:	ea4f 1804 	mov.w	r8, r4, lsl #4
      } else if (base == 16 && isxdigit(c)) {
 801c0c4:	d115      	bne.n	801c0f2 <ip4addr_aton+0x7e>
 801c0c6:	2905      	cmp	r1, #5
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801c0c8:	f04f 0961 	mov.w	r9, #97	; 0x61
      } else if (base == 16 && isxdigit(c)) {
 801c0cc:	d90c      	bls.n	801c0e8 <ip4addr_aton+0x74>
 801c0ce:	f1ba 0f05 	cmp.w	sl, #5
 801c0d2:	d80e      	bhi.n	801c0f2 <ip4addr_aton+0x7e>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801c0d4:	291a      	cmp	r1, #26
 801c0d6:	bf28      	it	cs
 801c0d8:	f04f 0941 	movcs.w	r9, #65	; 0x41
 801c0dc:	eba2 0409 	sub.w	r4, r2, r9
        c = *++cp;
 801c0e0:	7843      	ldrb	r3, [r0, #1]
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801c0e2:	ea44 0408 	orr.w	r4, r4, r8
 801c0e6:	e7db      	b.n	801c0a0 <ip4addr_aton+0x2c>
 801c0e8:	ea4f 1804 	mov.w	r8, r4, lsl #4
 801c0ec:	f103 020a 	add.w	r2, r3, #10
 801c0f0:	e7f4      	b.n	801c0dc <ip4addr_aton+0x68>
    if (c == '.') {
 801c0f2:	2b2e      	cmp	r3, #46	; 0x2e
 801c0f4:	d11f      	bne.n	801c136 <ip4addr_aton+0xc2>
      if (pp >= parts + 3) {
 801c0f6:	4577      	cmp	r7, lr
 801c0f8:	d008      	beq.n	801c10c <ip4addr_aton+0x98>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 801c0fa:	7843      	ldrb	r3, [r0, #1]
 801c0fc:	3001      	adds	r0, #1
      *pp++ = val;
 801c0fe:	f847 4b04 	str.w	r4, [r7], #4
    if (!isdigit(c)) {
 801c102:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c106:	b2d1      	uxtb	r1, r2
 801c108:	2909      	cmp	r1, #9
 801c10a:	d9c1      	bls.n	801c090 <ip4addr_aton+0x1c>
      return 0;
 801c10c:	2300      	movs	r3, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 801c10e:	4618      	mov	r0, r3
 801c110:	b004      	add	sp, #16
 801c112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      c = *++cp;
 801c116:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 801c118:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 801c11c:	2a58      	cmp	r2, #88	; 0x58
 801c11e:	d004      	beq.n	801c12a <ip4addr_aton+0xb6>
      c = *++cp;
 801c120:	3001      	adds	r0, #1
        base = 8;
 801c122:	2608      	movs	r6, #8
 801c124:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c128:	e7b5      	b.n	801c096 <ip4addr_aton+0x22>
        c = *++cp;
 801c12a:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 801c12c:	2610      	movs	r6, #16
        c = *++cp;
 801c12e:	3002      	adds	r0, #2
 801c130:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801c134:	e7af      	b.n	801c096 <ip4addr_aton+0x22>
  if (c != '\0' && !isspace(c)) {
 801c136:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 801c13a:	d002      	beq.n	801c142 <ip4addr_aton+0xce>
 801c13c:	3b09      	subs	r3, #9
 801c13e:	2b04      	cmp	r3, #4
 801c140:	d8e4      	bhi.n	801c10c <ip4addr_aton+0x98>
  switch (pp - parts + 1) {
 801c142:	eba7 030c 	sub.w	r3, r7, ip
 801c146:	109b      	asrs	r3, r3, #2
 801c148:	3301      	adds	r3, #1
 801c14a:	2b04      	cmp	r3, #4
 801c14c:	d841      	bhi.n	801c1d2 <ip4addr_aton+0x15e>
 801c14e:	a201      	add	r2, pc, #4	; (adr r2, 801c154 <ip4addr_aton+0xe0>)
 801c150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c154:	0801c10f 	.word	0x0801c10f
 801c158:	0801c18b 	.word	0x0801c18b
 801c15c:	0801c1bd 	.word	0x0801c1bd
 801c160:	0801c19d 	.word	0x0801c19d
 801c164:	0801c169 	.word	0x0801c169
    if (val > 0xff) {
 801c168:	2cff      	cmp	r4, #255	; 0xff
 801c16a:	d8cf      	bhi.n	801c10c <ip4addr_aton+0x98>
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801c16c:	9900      	ldr	r1, [sp, #0]
 801c16e:	29ff      	cmp	r1, #255	; 0xff
 801c170:	d8cc      	bhi.n	801c10c <ip4addr_aton+0x98>
 801c172:	9b01      	ldr	r3, [sp, #4]
 801c174:	2bff      	cmp	r3, #255	; 0xff
 801c176:	d8c9      	bhi.n	801c10c <ip4addr_aton+0x98>
 801c178:	9a02      	ldr	r2, [sp, #8]
 801c17a:	2aff      	cmp	r2, #255	; 0xff
 801c17c:	d8c6      	bhi.n	801c10c <ip4addr_aton+0x98>
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801c17e:	041b      	lsls	r3, r3, #16
 801c180:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801c184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c188:	431c      	orrs	r4, r3
  if (addr) {
 801c18a:	b12d      	cbz	r5, 801c198 <ip4addr_aton+0x124>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801c18c:	4620      	mov	r0, r4
 801c18e:	f7f7 f835 	bl	80131fc <lwip_htonl>
  return 1;
 801c192:	2301      	movs	r3, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801c194:	6028      	str	r0, [r5, #0]
 801c196:	e7ba      	b.n	801c10e <ip4addr_aton+0x9a>
  return 1;
 801c198:	2301      	movs	r3, #1
 801c19a:	e7b8      	b.n	801c10e <ip4addr_aton+0x9a>
    if (val > 0xffff) {
 801c19c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 801c1a0:	d2b4      	bcs.n	801c10c <ip4addr_aton+0x98>
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801c1a2:	9a00      	ldr	r2, [sp, #0]
 801c1a4:	2aff      	cmp	r2, #255	; 0xff
 801c1a6:	d8b1      	bhi.n	801c10c <ip4addr_aton+0x98>
 801c1a8:	9b01      	ldr	r3, [sp, #4]
 801c1aa:	2bff      	cmp	r3, #255	; 0xff
 801c1ac:	d8ae      	bhi.n	801c10c <ip4addr_aton+0x98>
    val |= (parts[0] << 24) | (parts[1] << 16);
 801c1ae:	041b      	lsls	r3, r3, #16
 801c1b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c1b4:	431c      	orrs	r4, r3
  if (addr) {
 801c1b6:	2d00      	cmp	r5, #0
 801c1b8:	d1e8      	bne.n	801c18c <ip4addr_aton+0x118>
 801c1ba:	e7ed      	b.n	801c198 <ip4addr_aton+0x124>
    if (val > 0xffffffUL) {
 801c1bc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 801c1c0:	d2a4      	bcs.n	801c10c <ip4addr_aton+0x98>
    if (parts[0] > 0xff) {
 801c1c2:	9b00      	ldr	r3, [sp, #0]
 801c1c4:	2bff      	cmp	r3, #255	; 0xff
 801c1c6:	d8a1      	bhi.n	801c10c <ip4addr_aton+0x98>
    val |= parts[0] << 24;
 801c1c8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 801c1cc:	2d00      	cmp	r5, #0
 801c1ce:	d1dd      	bne.n	801c18c <ip4addr_aton+0x118>
 801c1d0:	e7e2      	b.n	801c198 <ip4addr_aton+0x124>
    LWIP_ASSERT("unhandled", 0);
 801c1d2:	4b05      	ldr	r3, [pc, #20]	; (801c1e8 <ip4addr_aton+0x174>)
 801c1d4:	f240 1203 	movw	r2, #259	; 0x103
 801c1d8:	4904      	ldr	r1, [pc, #16]	; (801c1ec <ip4addr_aton+0x178>)
 801c1da:	4805      	ldr	r0, [pc, #20]	; (801c1f0 <ip4addr_aton+0x17c>)
 801c1dc:	f002 f904 	bl	801e3e8 <iprintf>
  if (addr) {
 801c1e0:	2d00      	cmp	r5, #0
 801c1e2:	d1d3      	bne.n	801c18c <ip4addr_aton+0x118>
 801c1e4:	e7d8      	b.n	801c198 <ip4addr_aton+0x124>
 801c1e6:	bf00      	nop
 801c1e8:	0803bac4 	.word	0x0803bac4
 801c1ec:	0803bb00 	.word	0x0803bb00
 801c1f0:	08023618 	.word	0x08023618

0801c1f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c1f4:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c1f6:	4b0f      	ldr	r3, [pc, #60]	; (801c234 <ip_reass_dequeue_datagram+0x40>)
{
 801c1f8:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 801c1fa:	681a      	ldr	r2, [r3, #0]
 801c1fc:	4282      	cmp	r2, r0
 801c1fe:	d009      	beq.n	801c214 <ip_reass_dequeue_datagram+0x20>
 801c200:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c202:	b179      	cbz	r1, 801c224 <ip_reass_dequeue_datagram+0x30>
    prev->next = ipr->next;
 801c204:	6823      	ldr	r3, [r4, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c206:	4621      	mov	r1, r4
 801c208:	2005      	movs	r0, #5
    prev->next = ipr->next;
 801c20a:	602b      	str	r3, [r5, #0]
}
 801c20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801c210:	f7f8 b9a2 	b.w	8014558 <memp_free>
    reassdatagrams = ipr->next;
 801c214:	6802      	ldr	r2, [r0, #0]
  memp_free(MEMP_REASSDATA, ipr);
 801c216:	4621      	mov	r1, r4
 801c218:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 801c21a:	601a      	str	r2, [r3, #0]
}
 801c21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801c220:	f7f8 b99a 	b.w	8014558 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c224:	4b04      	ldr	r3, [pc, #16]	; (801c238 <ip_reass_dequeue_datagram+0x44>)
 801c226:	f240 1245 	movw	r2, #325	; 0x145
 801c22a:	4904      	ldr	r1, [pc, #16]	; (801c23c <ip_reass_dequeue_datagram+0x48>)
 801c22c:	4804      	ldr	r0, [pc, #16]	; (801c240 <ip_reass_dequeue_datagram+0x4c>)
 801c22e:	f002 f8db 	bl	801e3e8 <iprintf>
 801c232:	e7e7      	b.n	801c204 <ip_reass_dequeue_datagram+0x10>
 801c234:	2002180c 	.word	0x2002180c
 801c238:	0803bbcc 	.word	0x0803bbcc
 801c23c:	0803bc08 	.word	0x0803bc08
 801c240:	08023618 	.word	0x08023618

0801c244 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c244:	4281      	cmp	r1, r0
{
 801c246:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c24a:	4606      	mov	r6, r0
 801c24c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c24e:	d06b      	beq.n	801c328 <ip_reass_free_complete_datagram+0xe4>
  if (prev != NULL) {
 801c250:	b147      	cbz	r7, 801c264 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c252:	683b      	ldr	r3, [r7, #0]
 801c254:	42b3      	cmp	r3, r6
 801c256:	d005      	beq.n	801c264 <ip_reass_free_complete_datagram+0x20>
 801c258:	4b37      	ldr	r3, [pc, #220]	; (801c338 <ip_reass_free_complete_datagram+0xf4>)
 801c25a:	22ad      	movs	r2, #173	; 0xad
 801c25c:	4937      	ldr	r1, [pc, #220]	; (801c33c <ip_reass_free_complete_datagram+0xf8>)
 801c25e:	4838      	ldr	r0, [pc, #224]	; (801c340 <ip_reass_free_complete_datagram+0xfc>)
 801c260:	f002 f8c2 	bl	801e3e8 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c264:	6874      	ldr	r4, [r6, #4]
 801c266:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 801c268:	889a      	ldrh	r2, [r3, #4]
 801c26a:	2a00      	cmp	r2, #0
 801c26c:	d039      	beq.n	801c2e2 <ip_reass_free_complete_datagram+0x9e>
  u16_t pbufs_freed = 0;
 801c26e:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c272:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801c338 <ip_reass_free_complete_datagram+0xf4>
 801c276:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 801c350 <ip_reass_free_complete_datagram+0x10c>
 801c27a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801c340 <ip_reass_free_complete_datagram+0xfc>
 801c27e:	e004      	b.n	801c28a <ip_reass_free_complete_datagram+0x46>
    pbuf_free(pcur);
 801c280:	4620      	mov	r0, r4
  while (p != NULL) {
 801c282:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801c284:	f7f8 fb60 	bl	8014948 <pbuf_free>
  while (p != NULL) {
 801c288:	b1b5      	cbz	r5, 801c2b8 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 801c28a:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 801c28c:	4620      	mov	r0, r4
    p = iprh->next_pbuf;
 801c28e:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
 801c290:	f7f8 fd4e 	bl	8014d30 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c294:	4483      	add	fp, r0
 801c296:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
    pbufs_freed += clen;
 801c29a:	fa1f fb8b 	uxth.w	fp, fp
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c29e:	dbef      	blt.n	801c280 <ip_reass_free_complete_datagram+0x3c>
 801c2a0:	4653      	mov	r3, sl
 801c2a2:	22cc      	movs	r2, #204	; 0xcc
 801c2a4:	4649      	mov	r1, r9
 801c2a6:	4640      	mov	r0, r8
 801c2a8:	f002 f89e 	bl	801e3e8 <iprintf>
    pbuf_free(pcur);
 801c2ac:	4620      	mov	r0, r4
  while (p != NULL) {
 801c2ae:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801c2b0:	f7f8 fb4a 	bl	8014948 <pbuf_free>
  while (p != NULL) {
 801c2b4:	2d00      	cmp	r5, #0
 801c2b6:	d1e8      	bne.n	801c28a <ip_reass_free_complete_datagram+0x46>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801c2b8:	4c22      	ldr	r4, [pc, #136]	; (801c344 <ip_reass_free_complete_datagram+0x100>)
  ip_reass_dequeue_datagram(ipr, prev);
 801c2ba:	4639      	mov	r1, r7
 801c2bc:	4630      	mov	r0, r6
 801c2be:	f7ff ff99 	bl	801c1f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801c2c2:	8823      	ldrh	r3, [r4, #0]
 801c2c4:	455b      	cmp	r3, fp
 801c2c6:	d206      	bcs.n	801c2d6 <ip_reass_free_complete_datagram+0x92>
 801c2c8:	4b1b      	ldr	r3, [pc, #108]	; (801c338 <ip_reass_free_complete_datagram+0xf4>)
 801c2ca:	22d2      	movs	r2, #210	; 0xd2
 801c2cc:	491e      	ldr	r1, [pc, #120]	; (801c348 <ip_reass_free_complete_datagram+0x104>)
 801c2ce:	481c      	ldr	r0, [pc, #112]	; (801c340 <ip_reass_free_complete_datagram+0xfc>)
 801c2d0:	f002 f88a 	bl	801e3e8 <iprintf>
 801c2d4:	8823      	ldrh	r3, [r4, #0]
  ip_reass_pbufcount -= pbufs_freed;
 801c2d6:	eba3 030b 	sub.w	r3, r3, fp
}
 801c2da:	4658      	mov	r0, fp
  ip_reass_pbufcount -= pbufs_freed;
 801c2dc:	8023      	strh	r3, [r4, #0]
}
 801c2de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c2e2:	4632      	mov	r2, r6
    ipr->p = iprh->next_pbuf;
 801c2e4:	6818      	ldr	r0, [r3, #0]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c2e6:	2101      	movs	r1, #1
    ipr->p = iprh->next_pbuf;
 801c2e8:	6070      	str	r0, [r6, #4]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c2ea:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c2ec:	f852 5f08 	ldr.w	r5, [r2, #8]!
 801c2f0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801c2f4:	f8d2 e008 	ldr.w	lr, [r2, #8]
 801c2f8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 801c2fc:	601d      	str	r5, [r3, #0]
 801c2fe:	f8c3 8004 	str.w	r8, [r3, #4]
 801c302:	f8c3 e008 	str.w	lr, [r3, #8]
 801c306:	f8c3 c00c 	str.w	ip, [r3, #12]
 801c30a:	6915      	ldr	r5, [r2, #16]
 801c30c:	611d      	str	r5, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c30e:	f7ff fc6b 	bl	801bbe8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c312:	4620      	mov	r0, r4
 801c314:	f7f8 fd0c 	bl	8014d30 <pbuf_clen>
 801c318:	4683      	mov	fp, r0
    pbuf_free(p);
 801c31a:	4620      	mov	r0, r4
 801c31c:	f7f8 fb14 	bl	8014948 <pbuf_free>
 801c320:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 801c322:	2c00      	cmp	r4, #0
 801c324:	d1a5      	bne.n	801c272 <ip_reass_free_complete_datagram+0x2e>
 801c326:	e7c7      	b.n	801c2b8 <ip_reass_free_complete_datagram+0x74>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c328:	4b03      	ldr	r3, [pc, #12]	; (801c338 <ip_reass_free_complete_datagram+0xf4>)
 801c32a:	22ab      	movs	r2, #171	; 0xab
 801c32c:	4907      	ldr	r1, [pc, #28]	; (801c34c <ip_reass_free_complete_datagram+0x108>)
 801c32e:	4804      	ldr	r0, [pc, #16]	; (801c340 <ip_reass_free_complete_datagram+0xfc>)
 801c330:	f002 f85a 	bl	801e3e8 <iprintf>
 801c334:	e78c      	b.n	801c250 <ip_reass_free_complete_datagram+0xc>
 801c336:	bf00      	nop
 801c338:	0803bbcc 	.word	0x0803bbcc
 801c33c:	0803bc30 	.word	0x0803bc30
 801c340:	08023618 	.word	0x08023618
 801c344:	20021808 	.word	0x20021808
 801c348:	0803bc64 	.word	0x0803bc64
 801c34c:	0803bc24 	.word	0x0803bc24
 801c350:	0803bc44 	.word	0x0803bc44

0801c354 <ip_reass_remove_oldest_datagram>:
{
 801c354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c358:	4605      	mov	r5, r0
 801c35a:	460e      	mov	r6, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801c35c:	2700      	movs	r7, #0
 801c35e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801c3c4 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 801c362:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801c366:	b1f3      	cbz	r3, 801c3a6 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 801c368:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c36a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 801c36e:	4621      	mov	r1, r4
    prev = NULL;
 801c370:	46a4      	mov	ip, r4
    oldest = NULL;
 801c372:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c374:	695a      	ldr	r2, [r3, #20]
 801c376:	4572      	cmp	r2, lr
 801c378:	d018      	beq.n	801c3ac <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 801c37a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801c37c:	b120      	cbz	r0, 801c388 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 801c37e:	f893 901f 	ldrb.w	r9, [r3, #31]
 801c382:	7fc2      	ldrb	r2, [r0, #31]
 801c384:	4591      	cmp	r9, r2
 801c386:	d801      	bhi.n	801c38c <ip_reass_remove_oldest_datagram+0x38>
 801c388:	4661      	mov	r1, ip
 801c38a:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801c38c:	681a      	ldr	r2, [r3, #0]
 801c38e:	469c      	mov	ip, r3
 801c390:	4613      	mov	r3, r2
 801c392:	2a00      	cmp	r2, #0
 801c394:	d1ee      	bne.n	801c374 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 801c396:	b110      	cbz	r0, 801c39e <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c398:	f7ff ff54 	bl	801c244 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801c39c:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c39e:	42b7      	cmp	r7, r6
 801c3a0:	da01      	bge.n	801c3a6 <ip_reass_remove_oldest_datagram+0x52>
 801c3a2:	2c01      	cmp	r4, #1
 801c3a4:	dcdd      	bgt.n	801c362 <ip_reass_remove_oldest_datagram+0xe>
}
 801c3a6:	4638      	mov	r0, r7
 801c3a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c3ac:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801c3b0:	699a      	ldr	r2, [r3, #24]
 801c3b2:	454a      	cmp	r2, r9
 801c3b4:	d1e1      	bne.n	801c37a <ip_reass_remove_oldest_datagram+0x26>
 801c3b6:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801c3ba:	88aa      	ldrh	r2, [r5, #4]
 801c3bc:	4591      	cmp	r9, r2
 801c3be:	d1dc      	bne.n	801c37a <ip_reass_remove_oldest_datagram+0x26>
 801c3c0:	e7e4      	b.n	801c38c <ip_reass_remove_oldest_datagram+0x38>
 801c3c2:	bf00      	nop
 801c3c4:	2002180c 	.word	0x2002180c

0801c3c8 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801c3c8:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c3ca:	4604      	mov	r4, r0
 801c3cc:	b128      	cbz	r0, 801c3da <ip_frag_free_pbuf_custom_ref+0x12>
  memp_free(MEMP_FRAG_PBUF, p);
 801c3ce:	4621      	mov	r1, r4
 801c3d0:	2006      	movs	r0, #6
}
 801c3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801c3d6:	f7f8 b8bf 	b.w	8014558 <memp_free>
  LWIP_ASSERT("p != NULL", p != NULL);
 801c3da:	4906      	ldr	r1, [pc, #24]	; (801c3f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c3dc:	f240 22ae 	movw	r2, #686	; 0x2ae
 801c3e0:	4b05      	ldr	r3, [pc, #20]	; (801c3f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c3e2:	4806      	ldr	r0, [pc, #24]	; (801c3fc <ip_frag_free_pbuf_custom_ref+0x34>)
 801c3e4:	f002 f800 	bl	801e3e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c3e8:	4621      	mov	r1, r4
 801c3ea:	2006      	movs	r0, #6
}
 801c3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801c3f0:	f7f8 b8b2 	b.w	8014558 <memp_free>
 801c3f4:	0803b3ac 	.word	0x0803b3ac
 801c3f8:	0803bbcc 	.word	0x0803bbcc
 801c3fc:	08023618 	.word	0x08023618

0801c400 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c400:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c402:	4604      	mov	r4, r0
 801c404:	b140      	cbz	r0, 801c418 <ipfrag_free_pbuf_custom+0x18>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 801c406:	6960      	ldr	r0, [r4, #20]
 801c408:	b108      	cbz	r0, 801c40e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801c40a:	f7f8 fa9d 	bl	8014948 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c40e:	4620      	mov	r0, r4
}
 801c410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 801c414:	f7ff bfd8 	b.w	801c3c8 <ip_frag_free_pbuf_custom_ref>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c418:	4b03      	ldr	r3, [pc, #12]	; (801c428 <ipfrag_free_pbuf_custom+0x28>)
 801c41a:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801c41e:	4903      	ldr	r1, [pc, #12]	; (801c42c <ipfrag_free_pbuf_custom+0x2c>)
 801c420:	4803      	ldr	r0, [pc, #12]	; (801c430 <ipfrag_free_pbuf_custom+0x30>)
 801c422:	f001 ffe1 	bl	801e3e8 <iprintf>
 801c426:	e7ee      	b.n	801c406 <ipfrag_free_pbuf_custom+0x6>
 801c428:	0803bbcc 	.word	0x0803bbcc
 801c42c:	0803bc80 	.word	0x0803bc80
 801c430:	08023618 	.word	0x08023618

0801c434 <ip_reass_tmr>:
{
 801c434:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801c436:	4b0a      	ldr	r3, [pc, #40]	; (801c460 <ip_reass_tmr+0x2c>)
 801c438:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 801c43a:	b180      	cbz	r0, 801c45e <ip_reass_tmr+0x2a>
  struct ip_reassdata *r, *prev = NULL;
 801c43c:	2500      	movs	r5, #0
 801c43e:	e003      	b.n	801c448 <ip_reass_tmr+0x14>
 801c440:	4605      	mov	r5, r0
      r->timer--;
 801c442:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 801c444:	4620      	mov	r0, r4
 801c446:	b154      	cbz	r4, 801c45e <ip_reass_tmr+0x2a>
    if (r->timer > 0) {
 801c448:	7fc3      	ldrb	r3, [r0, #31]
 801c44a:	6804      	ldr	r4, [r0, #0]
      r->timer--;
 801c44c:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d1f6      	bne.n	801c440 <ip_reass_tmr+0xc>
      ip_reass_free_complete_datagram(tmp, prev);
 801c452:	4629      	mov	r1, r5
 801c454:	f7ff fef6 	bl	801c244 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c458:	4620      	mov	r0, r4
 801c45a:	2c00      	cmp	r4, #0
 801c45c:	d1f4      	bne.n	801c448 <ip_reass_tmr+0x14>
}
 801c45e:	bd38      	pop	{r3, r4, r5, pc}
 801c460:	2002180c 	.word	0x2002180c

0801c464 <ip4_reass>:
{
 801c464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 801c468:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 801c74c <ip4_reass+0x2e8>
{
 801c46c:	b085      	sub	sp, #20
  fraghdr = (struct ip_hdr*)p->payload;
 801c46e:	6845      	ldr	r5, [r0, #4]
{
 801c470:	4607      	mov	r7, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 801c472:	f8b8 3032 	ldrh.w	r3, [r8, #50]	; 0x32
 801c476:	3301      	adds	r3, #1
 801c478:	f8a8 3032 	strh.w	r3, [r8, #50]	; 0x32
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801c47c:	782b      	ldrb	r3, [r5, #0]
 801c47e:	f003 030f 	and.w	r3, r3, #15
 801c482:	2b05      	cmp	r3, #5
 801c484:	f040 80fd 	bne.w	801c682 <ip4_reass+0x21e>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c488:	88e8      	ldrh	r0, [r5, #6]
 801c48a:	f7f6 feb3 	bl	80131f4 <lwip_htons>
 801c48e:	f3c0 030c 	ubfx	r3, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c492:	8868      	ldrh	r0, [r5, #2]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c494:	00db      	lsls	r3, r3, #3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c496:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 801c750 <ip4_reass+0x2ec>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c49a:	9301      	str	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c49c:	f7f6 feaa 	bl	80131f4 <lwip_htons>
 801c4a0:	782b      	ldrb	r3, [r5, #0]
 801c4a2:	f003 030f 	and.w	r3, r3, #15
 801c4a6:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
  clen = pbuf_clen(p);
 801c4aa:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c4ac:	b29b      	uxth	r3, r3
 801c4ae:	9302      	str	r3, [sp, #8]
  clen = pbuf_clen(p);
 801c4b0:	f7f8 fc3e 	bl	8014d30 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c4b4:	f8ba 3000 	ldrh.w	r3, [sl]
  clen = pbuf_clen(p);
 801c4b8:	4683      	mov	fp, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c4ba:	4403      	add	r3, r0
 801c4bc:	2b0a      	cmp	r3, #10
 801c4be:	f300 80b7 	bgt.w	801c630 <ip4_reass+0x1cc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c4c2:	4ba0      	ldr	r3, [pc, #640]	; (801c744 <ip4_reass+0x2e0>)
 801c4c4:	681c      	ldr	r4, [r3, #0]
 801c4c6:	b354      	cbz	r4, 801c51e <ip4_reass+0xba>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c4c8:	68ea      	ldr	r2, [r5, #12]
 801c4ca:	e001      	b.n	801c4d0 <ip4_reass+0x6c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c4cc:	6824      	ldr	r4, [r4, #0]
 801c4ce:	b334      	cbz	r4, 801c51e <ip4_reass+0xba>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c4d0:	6963      	ldr	r3, [r4, #20]
 801c4d2:	4293      	cmp	r3, r2
 801c4d4:	d1fa      	bne.n	801c4cc <ip4_reass+0x68>
 801c4d6:	692b      	ldr	r3, [r5, #16]
 801c4d8:	69a1      	ldr	r1, [r4, #24]
 801c4da:	4299      	cmp	r1, r3
 801c4dc:	d1f6      	bne.n	801c4cc <ip4_reass+0x68>
 801c4de:	89a1      	ldrh	r1, [r4, #12]
 801c4e0:	88ab      	ldrh	r3, [r5, #4]
 801c4e2:	4299      	cmp	r1, r3
 801c4e4:	d1f2      	bne.n	801c4cc <ip4_reass+0x68>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801c4e6:	f8b8 3046 	ldrh.w	r3, [r8, #70]	; 0x46
 801c4ea:	3301      	adds	r3, #1
 801c4ec:	f8a8 3046 	strh.w	r3, [r8, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c4f0:	88e8      	ldrh	r0, [r5, #6]
 801c4f2:	f7f6 fe7f 	bl	80131f4 <lwip_htons>
 801c4f6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801c4fa:	bb98      	cbnz	r0, 801c564 <ip4_reass+0x100>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c4fc:	89e0      	ldrh	r0, [r4, #14]
 801c4fe:	f7f6 fe79 	bl	80131f4 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c502:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801c506:	b368      	cbz	r0, 801c564 <ip4_reass+0x100>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c508:	682a      	ldr	r2, [r5, #0]
 801c50a:	686e      	ldr	r6, [r5, #4]
 801c50c:	68a8      	ldr	r0, [r5, #8]
 801c50e:	68e9      	ldr	r1, [r5, #12]
 801c510:	60a2      	str	r2, [r4, #8]
 801c512:	60e6      	str	r6, [r4, #12]
 801c514:	6120      	str	r0, [r4, #16]
 801c516:	6161      	str	r1, [r4, #20]
 801c518:	692a      	ldr	r2, [r5, #16]
 801c51a:	61a2      	str	r2, [r4, #24]
 801c51c:	e022      	b.n	801c564 <ip4_reass+0x100>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c51e:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801c522:	4989      	ldr	r1, [pc, #548]	; (801c748 <ip4_reass+0x2e4>)
 801c524:	2005      	movs	r0, #5
 801c526:	f7f7 fff3 	bl	8014510 <memp_malloc_fn>
  if (ipr == NULL) {
 801c52a:	4604      	mov	r4, r0
 801c52c:	2800      	cmp	r0, #0
 801c52e:	f000 80ae 	beq.w	801c68e <ip4_reass+0x22a>
  ipr->next = reassdatagrams;
 801c532:	4984      	ldr	r1, [pc, #528]	; (801c744 <ip4_reass+0x2e0>)
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c534:	2200      	movs	r2, #0
  ipr->timer = IP_REASS_MAXAGE;
 801c536:	2603      	movs	r6, #3
  ipr->next = reassdatagrams;
 801c538:	6809      	ldr	r1, [r1, #0]
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c53a:	60a2      	str	r2, [r4, #8]
 801c53c:	60e2      	str	r2, [r4, #12]
 801c53e:	6122      	str	r2, [r4, #16]
 801c540:	6162      	str	r2, [r4, #20]
 801c542:	61a2      	str	r2, [r4, #24]
 801c544:	61e2      	str	r2, [r4, #28]
 801c546:	6062      	str	r2, [r4, #4]
  ipr->timer = IP_REASS_MAXAGE;
 801c548:	77e6      	strb	r6, [r4, #31]
  ipr->next = reassdatagrams;
 801c54a:	6021      	str	r1, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c54c:	682b      	ldr	r3, [r5, #0]
 801c54e:	68a9      	ldr	r1, [r5, #8]
 801c550:	686e      	ldr	r6, [r5, #4]
 801c552:	68ea      	ldr	r2, [r5, #12]
 801c554:	6121      	str	r1, [r4, #16]
 801c556:	60a3      	str	r3, [r4, #8]
 801c558:	60e6      	str	r6, [r4, #12]
 801c55a:	6162      	str	r2, [r4, #20]
  reassdatagrams = ipr;
 801c55c:	4979      	ldr	r1, [pc, #484]	; (801c744 <ip4_reass+0x2e0>)
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c55e:	692b      	ldr	r3, [r5, #16]
  reassdatagrams = ipr;
 801c560:	600c      	str	r4, [r1, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c562:	61a3      	str	r3, [r4, #24]
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c564:	88eb      	ldrh	r3, [r5, #6]
  if (is_last) {
 801c566:	f013 0320 	ands.w	r3, r3, #32
 801c56a:	9303      	str	r3, [sp, #12]
 801c56c:	d109      	bne.n	801c582 <ip4_reass+0x11e>
    u16_t datagram_len = (u16_t)(offset + len);
 801c56e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c572:	18d3      	adds	r3, r2, r3
 801c574:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c576:	429a      	cmp	r2, r3
 801c578:	d86a      	bhi.n	801c650 <ip4_reass+0x1ec>
 801c57a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801c57e:	4293      	cmp	r3, r2
 801c580:	d866      	bhi.n	801c650 <ip4_reass+0x1ec>
  fraghdr = (struct ip_hdr*)new_p->payload;
 801c582:	687e      	ldr	r6, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c584:	8870      	ldrh	r0, [r6, #2]
 801c586:	f7f6 fe35 	bl	80131f4 <lwip_htons>
 801c58a:	7835      	ldrb	r5, [r6, #0]
 801c58c:	f005 050f 	and.w	r5, r5, #15
 801c590:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c594:	88f0      	ldrh	r0, [r6, #6]
 801c596:	f7f6 fe2d 	bl	80131f4 <lwip_htons>
 801c59a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c59e:	b2ad      	uxth	r5, r5
  iprh = (struct ip_reass_helper*)new_p->payload;
 801c5a0:	f8d7 9004 	ldr.w	r9, [r7, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c5a4:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 801c5a6:	2300      	movs	r3, #0
  iprh->end = offset + len;
 801c5a8:	eb05 0c00 	add.w	ip, r5, r0
  iprh->next_pbuf = NULL;
 801c5ac:	f889 3000 	strb.w	r3, [r9]
 801c5b0:	f889 3001 	strb.w	r3, [r9, #1]
 801c5b4:	f889 3002 	strb.w	r3, [r9, #2]
  iprh->end = offset + len;
 801c5b8:	fa1f fc8c 	uxth.w	ip, ip
  iprh->next_pbuf = NULL;
 801c5bc:	f889 3003 	strb.w	r3, [r9, #3]
  for (q = ipr->p; q != NULL;) {
 801c5c0:	6863      	ldr	r3, [r4, #4]
  iprh->end = offset + len;
 801c5c2:	f8a9 c006 	strh.w	ip, [r9, #6]
  iprh->start = offset;
 801c5c6:	f8a9 0004 	strh.w	r0, [r9, #4]
  for (q = ipr->p; q != NULL;) {
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	f000 813c 	beq.w	801c848 <ip4_reass+0x3e4>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801c5d0:	685d      	ldr	r5, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
 801c5d2:	88aa      	ldrh	r2, [r5, #4]
 801c5d4:	4290      	cmp	r0, r2
 801c5d6:	d36b      	bcc.n	801c6b0 <ip4_reass+0x24c>
    } else if (iprh->start == iprh_tmp->start) {
 801c5d8:	d047      	beq.n	801c66a <ip4_reass+0x206>
    } else if (iprh->start < iprh_tmp->end) {
 801c5da:	88eb      	ldrh	r3, [r5, #6]
 801c5dc:	4283      	cmp	r3, r0
 801c5de:	d844      	bhi.n	801c66a <ip4_reass+0x206>
    q = iprh_tmp->next_pbuf;
 801c5e0:	682a      	ldr	r2, [r5, #0]
  int valid = 1;
 801c5e2:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 801c5e4:	b17a      	cbz	r2, 801c606 <ip4_reass+0x1a2>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801c5e6:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 801c5e8:	8899      	ldrh	r1, [r3, #4]
 801c5ea:	4288      	cmp	r0, r1
 801c5ec:	d371      	bcc.n	801c6d2 <ip4_reass+0x26e>
    } else if (iprh->start == iprh_tmp->start) {
 801c5ee:	d03c      	beq.n	801c66a <ip4_reass+0x206>
    } else if (iprh->start < iprh_tmp->end) {
 801c5f0:	88da      	ldrh	r2, [r3, #6]
 801c5f2:	4282      	cmp	r2, r0
 801c5f4:	d839      	bhi.n	801c66a <ip4_reass+0x206>
        if (iprh_prev->end != iprh_tmp->start) {
 801c5f6:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 801c5f8:	461d      	mov	r5, r3
 801c5fa:	428a      	cmp	r2, r1
 801c5fc:	bf18      	it	ne
 801c5fe:	2600      	movne	r6, #0
    q = iprh_tmp->next_pbuf;
 801c600:	682a      	ldr	r2, [r5, #0]
  for (q = ipr->p; q != NULL;) {
 801c602:	2a00      	cmp	r2, #0
 801c604:	d1ef      	bne.n	801c5e6 <ip4_reass+0x182>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c606:	88eb      	ldrh	r3, [r5, #6]
 801c608:	4298      	cmp	r0, r3
 801c60a:	f0c0 812a 	bcc.w	801c862 <ip4_reass+0x3fe>
      if (iprh_prev->end != iprh->start) {
 801c60e:	4298      	cmp	r0, r3
      iprh_prev->next_pbuf = new_p;
 801c610:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 801c612:	d067      	beq.n	801c6e4 <ip4_reass+0x280>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c614:	9b03      	ldr	r3, [sp, #12]
 801c616:	2b00      	cmp	r3, #0
 801c618:	f000 80fc 	beq.w	801c814 <ip4_reass+0x3b0>
 801c61c:	7fa3      	ldrb	r3, [r4, #30]
 801c61e:	07da      	lsls	r2, r3, #31
 801c620:	d550      	bpl.n	801c6c4 <ip4_reass+0x260>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c622:	f8ba 3000 	ldrh.w	r3, [sl]
 801c626:	449b      	add	fp, r3
 801c628:	f8aa b000 	strh.w	fp, [sl]
  return NULL;
 801c62c:	2600      	movs	r6, #0
 801c62e:	e018      	b.n	801c662 <ip4_reass+0x1fe>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c630:	4601      	mov	r1, r0
 801c632:	4628      	mov	r0, r5
 801c634:	f7ff fe8e 	bl	801c354 <ip_reass_remove_oldest_datagram>
 801c638:	b128      	cbz	r0, 801c646 <ip4_reass+0x1e2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c63a:	f8ba 3000 	ldrh.w	r3, [sl]
 801c63e:	445b      	add	r3, fp
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c640:	2b0a      	cmp	r3, #10
 801c642:	f77f af3e 	ble.w	801c4c2 <ip4_reass+0x5e>
      IPFRAG_STATS_INC(ip_frag.memerr);
 801c646:	f8b8 303c 	ldrh.w	r3, [r8, #60]	; 0x3c
 801c64a:	3301      	adds	r3, #1
 801c64c:	f8a8 303c 	strh.w	r3, [r8, #60]	; 0x3c
  IPFRAG_STATS_INC(ip_frag.drop);
 801c650:	f8b8 3036 	ldrh.w	r3, [r8, #54]	; 0x36
  pbuf_free(p);
 801c654:	4638      	mov	r0, r7
  return NULL;
 801c656:	2600      	movs	r6, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 801c658:	3301      	adds	r3, #1
 801c65a:	f8a8 3036 	strh.w	r3, [r8, #54]	; 0x36
  pbuf_free(p);
 801c65e:	f7f8 f973 	bl	8014948 <pbuf_free>
}
 801c662:	4630      	mov	r0, r6
 801c664:	b005      	add	sp, #20
 801c666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801c66a:	4638      	mov	r0, r7
 801c66c:	f7f8 fb60 	bl	8014d30 <pbuf_clen>
 801c670:	f8ba 3000 	ldrh.w	r3, [sl]
 801c674:	1a1b      	subs	r3, r3, r0
  pbuf_free(new_p);
 801c676:	4638      	mov	r0, r7
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801c678:	f8aa 3000 	strh.w	r3, [sl]
  pbuf_free(new_p);
 801c67c:	f7f8 f964 	bl	8014948 <pbuf_free>
 801c680:	e7e6      	b.n	801c650 <ip4_reass+0x1ec>
    IPFRAG_STATS_INC(ip_frag.err);
 801c682:	f8b8 3044 	ldrh.w	r3, [r8, #68]	; 0x44
 801c686:	3301      	adds	r3, #1
 801c688:	f8a8 3044 	strh.w	r3, [r8, #68]	; 0x44
    goto nullreturn;
 801c68c:	e7e0      	b.n	801c650 <ip4_reass+0x1ec>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c68e:	4659      	mov	r1, fp
 801c690:	4628      	mov	r0, r5
 801c692:	f7ff fe5f 	bl	801c354 <ip_reass_remove_oldest_datagram>
 801c696:	4583      	cmp	fp, r0
 801c698:	dcd5      	bgt.n	801c646 <ip4_reass+0x1e2>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c69a:	f44f 7291 	mov.w	r2, #290	; 0x122
 801c69e:	492a      	ldr	r1, [pc, #168]	; (801c748 <ip4_reass+0x2e4>)
 801c6a0:	2005      	movs	r0, #5
 801c6a2:	f7f7 ff35 	bl	8014510 <memp_malloc_fn>
    if (ipr == NULL)
 801c6a6:	4604      	mov	r4, r0
 801c6a8:	2800      	cmp	r0, #0
 801c6aa:	f47f af42 	bne.w	801c532 <ip4_reass+0xce>
 801c6ae:	e7ca      	b.n	801c646 <ip4_reass+0x1e2>
        if (iprh->end > iprh_tmp->start) {
 801c6b0:	4594      	cmp	ip, r2
      iprh->next_pbuf = q;
 801c6b2:	f8c9 3000 	str.w	r3, [r9]
        if (iprh->end > iprh_tmp->start) {
 801c6b6:	d8d8      	bhi.n	801c66a <ip4_reass+0x206>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c6b8:	9b03      	ldr	r3, [sp, #12]
        ipr->p = new_p;
 801c6ba:	6067      	str	r7, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c6bc:	b373      	cbz	r3, 801c71c <ip4_reass+0x2b8>
 801c6be:	7fa3      	ldrb	r3, [r4, #30]
 801c6c0:	07db      	lsls	r3, r3, #31
 801c6c2:	d416      	bmi.n	801c6f2 <ip4_reass+0x28e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c6c4:	f8ba 3000 	ldrh.w	r3, [sl]
  return NULL;
 801c6c8:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c6ca:	449b      	add	fp, r3
 801c6cc:	f8aa b000 	strh.w	fp, [sl]
 801c6d0:	e7c7      	b.n	801c662 <ip4_reass+0x1fe>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c6d2:	458c      	cmp	ip, r1
      iprh->next_pbuf = q;
 801c6d4:	f8c9 2000 	str.w	r2, [r9]
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c6d8:	88eb      	ldrh	r3, [r5, #6]
 801c6da:	d8c6      	bhi.n	801c66a <ip4_reass+0x206>
 801c6dc:	4298      	cmp	r0, r3
 801c6de:	d3c4      	bcc.n	801c66a <ip4_reass+0x206>
        iprh_prev->next_pbuf = new_p;
 801c6e0:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 801c6e2:	d197      	bne.n	801c614 <ip4_reass+0x1b0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c6e4:	9b03      	ldr	r3, [sp, #12]
 801c6e6:	b1bb      	cbz	r3, 801c718 <ip4_reass+0x2b4>
 801c6e8:	7fa3      	ldrb	r3, [r4, #30]
 801c6ea:	07d9      	lsls	r1, r3, #31
 801c6ec:	d5ea      	bpl.n	801c6c4 <ip4_reass+0x260>
    if (valid) {
 801c6ee:	2e00      	cmp	r6, #0
 801c6f0:	d097      	beq.n	801c622 <ip4_reass+0x1be>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801c6f2:	6867      	ldr	r7, [r4, #4]
 801c6f4:	b9af      	cbnz	r7, 801c722 <ip4_reass+0x2be>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c6f6:	f8ba 3000 	ldrh.w	r3, [sl]
 801c6fa:	449b      	add	fp, r3
  if (is_last) {
 801c6fc:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c6fe:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801c702:	2b00      	cmp	r3, #0
 801c704:	d192      	bne.n	801c62c <ip4_reass+0x1c8>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c706:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801c708:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c70c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 801c710:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c712:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 801c714:	83a2      	strh	r2, [r4, #28]
 801c716:	e789      	b.n	801c62c <ip4_reass+0x1c8>
    if (valid) {
 801c718:	2e00      	cmp	r6, #0
 801c71a:	d07b      	beq.n	801c814 <ip4_reass+0x3b0>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801c71c:	6867      	ldr	r7, [r4, #4]
 801c71e:	2f00      	cmp	r7, #0
 801c720:	d078      	beq.n	801c814 <ip4_reass+0x3b0>
 801c722:	6878      	ldr	r0, [r7, #4]
 801c724:	8883      	ldrh	r3, [r0, #4]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d1e5      	bne.n	801c6f6 <ip4_reass+0x292>
        q = iprh->next_pbuf;
 801c72a:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 801c72e:	2b00      	cmp	r3, #0
 801c730:	f000 8086 	beq.w	801c840 <ip4_reass+0x3dc>
          iprh = (struct ip_reass_helper*)q->payload;
 801c734:	685d      	ldr	r5, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801c736:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801c73a:	88ab      	ldrh	r3, [r5, #4]
 801c73c:	429a      	cmp	r2, r3
 801c73e:	d00f      	beq.n	801c760 <ip4_reass+0x2fc>
 801c740:	e7d9      	b.n	801c6f6 <ip4_reass+0x292>
 801c742:	bf00      	nop
 801c744:	2002180c 	.word	0x2002180c
 801c748:	0803bbcc 	.word	0x0803bbcc
 801c74c:	20035384 	.word	0x20035384
 801c750:	20021808 	.word	0x20021808
          iprh = (struct ip_reass_helper*)q->payload;
 801c754:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801c756:	88e9      	ldrh	r1, [r5, #6]
 801c758:	889a      	ldrh	r2, [r3, #4]
 801c75a:	461d      	mov	r5, r3
 801c75c:	4291      	cmp	r1, r2
 801c75e:	d1ca      	bne.n	801c6f6 <ip4_reass+0x292>
          q = iprh->next_pbuf;
 801c760:	682b      	ldr	r3, [r5, #0]
        while (q != NULL) {
 801c762:	2b00      	cmp	r3, #0
 801c764:	d1f6      	bne.n	801c754 <ip4_reass+0x2f0>
          LWIP_ASSERT("sanity check",
 801c766:	4285      	cmp	r5, r0
 801c768:	d10f      	bne.n	801c78a <ip4_reass+0x326>
 801c76a:	4b48      	ldr	r3, [pc, #288]	; (801c88c <ip4_reass+0x428>)
 801c76c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801c770:	4947      	ldr	r1, [pc, #284]	; (801c890 <ip4_reass+0x42c>)
 801c772:	4848      	ldr	r0, [pc, #288]	; (801c894 <ip4_reass+0x430>)
 801c774:	f001 fe38 	bl	801e3e8 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c778:	682b      	ldr	r3, [r5, #0]
 801c77a:	b133      	cbz	r3, 801c78a <ip4_reass+0x326>
 801c77c:	4b43      	ldr	r3, [pc, #268]	; (801c88c <ip4_reass+0x428>)
 801c77e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801c782:	4945      	ldr	r1, [pc, #276]	; (801c898 <ip4_reass+0x434>)
 801c784:	4843      	ldr	r0, [pc, #268]	; (801c894 <ip4_reass+0x430>)
 801c786:	f001 fe2f 	bl	801e3e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c78a:	f8ba 3000 	ldrh.w	r3, [sl]
 801c78e:	449b      	add	fp, r3
  if (is_last) {
 801c790:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c792:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801c796:	2b00      	cmp	r3, #0
 801c798:	d06e      	beq.n	801c878 <ip4_reass+0x414>
 801c79a:	8ba2      	ldrh	r2, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c79c:	4623      	mov	r3, r4
    ipr->datagram_len += IP_HLEN;
 801c79e:	3214      	adds	r2, #20
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801c7a0:	6861      	ldr	r1, [r4, #4]
    ipr->datagram_len += IP_HLEN;
 801c7a2:	83a2      	strh	r2, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c7a4:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801c7a8:	684f      	ldr	r7, [r1, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c7aa:	685d      	ldr	r5, [r3, #4]
 801c7ac:	6898      	ldr	r0, [r3, #8]
 801c7ae:	68d9      	ldr	r1, [r3, #12]
 801c7b0:	607d      	str	r5, [r7, #4]
 801c7b2:	60f9      	str	r1, [r7, #12]
 801c7b4:	60b8      	str	r0, [r7, #8]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801c7b6:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c7b8:	603a      	str	r2, [r7, #0]
 801c7ba:	691a      	ldr	r2, [r3, #16]
 801c7bc:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801c7be:	8ba0      	ldrh	r0, [r4, #28]
 801c7c0:	f7f6 fd18 	bl	80131f4 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 801c7c4:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801c7c6:	8078      	strh	r0, [r7, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801c7c8:	2114      	movs	r1, #20
    IPH_OFFSET_SET(fraghdr, 0);
 801c7ca:	71bb      	strb	r3, [r7, #6]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801c7cc:	4638      	mov	r0, r7
    IPH_OFFSET_SET(fraghdr, 0);
 801c7ce:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c7d0:	72bb      	strb	r3, [r7, #10]
 801c7d2:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801c7d4:	f7f7 fa72 	bl	8013cbc <inet_chksum>
    p = ipr->p;
 801c7d8:	6866      	ldr	r6, [r4, #4]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801c7da:	8178      	strh	r0, [r7, #10]
    while (r != NULL) {
 801c7dc:	b165      	cbz	r5, 801c7f8 <ip4_reass+0x394>
      iprh = (struct ip_reass_helper*)r->payload;
 801c7de:	686f      	ldr	r7, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 801c7e0:	f06f 0113 	mvn.w	r1, #19
 801c7e4:	4628      	mov	r0, r5
 801c7e6:	f7f8 f8a7 	bl	8014938 <pbuf_header>
      pbuf_cat(p, r);
 801c7ea:	4629      	mov	r1, r5
 801c7ec:	4630      	mov	r0, r6
 801c7ee:	f7f8 fabf 	bl	8014d70 <pbuf_cat>
      r = iprh->next_pbuf;
 801c7f2:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 801c7f4:	2d00      	cmp	r5, #0
 801c7f6:	d1f2      	bne.n	801c7de <ip4_reass+0x37a>
    if (ipr == reassdatagrams) {
 801c7f8:	4b28      	ldr	r3, [pc, #160]	; (801c89c <ip4_reass+0x438>)
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	429c      	cmp	r4, r3
 801c7fe:	d021      	beq.n	801c844 <ip4_reass+0x3e0>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c800:	b173      	cbz	r3, 801c820 <ip4_reass+0x3bc>
        if (ipr_prev->next == ipr) {
 801c802:	6819      	ldr	r1, [r3, #0]
 801c804:	428c      	cmp	r4, r1
 801c806:	d00b      	beq.n	801c820 <ip4_reass+0x3bc>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c808:	b159      	cbz	r1, 801c822 <ip4_reass+0x3be>
        if (ipr_prev->next == ipr) {
 801c80a:	680b      	ldr	r3, [r1, #0]
 801c80c:	429c      	cmp	r4, r3
 801c80e:	d008      	beq.n	801c822 <ip4_reass+0x3be>
 801c810:	4619      	mov	r1, r3
 801c812:	e7f9      	b.n	801c808 <ip4_reass+0x3a4>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c814:	f8ba 3000 	ldrh.w	r3, [sl]
 801c818:	449b      	add	fp, r3
 801c81a:	f8aa b000 	strh.w	fp, [sl]
 801c81e:	e772      	b.n	801c706 <ip4_reass+0x2a2>
        if (ipr_prev->next == ipr) {
 801c820:	4619      	mov	r1, r3
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c822:	4620      	mov	r0, r4
 801c824:	f7ff fce6 	bl	801c1f4 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 801c828:	4630      	mov	r0, r6
 801c82a:	f7f8 fa81 	bl	8014d30 <pbuf_clen>
 801c82e:	f8ba 3000 	ldrh.w	r3, [sl]
 801c832:	1a18      	subs	r0, r3, r0
 801c834:	f8aa 0000 	strh.w	r0, [sl]
}
 801c838:	4630      	mov	r0, r6
 801c83a:	b005      	add	sp, #20
 801c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (q != NULL) {
 801c840:	464d      	mov	r5, r9
 801c842:	e790      	b.n	801c766 <ip4_reass+0x302>
      ipr_prev = NULL;
 801c844:	2100      	movs	r1, #0
 801c846:	e7ec      	b.n	801c822 <ip4_reass+0x3be>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c848:	9b03      	ldr	r3, [sp, #12]
      ipr->p = new_p;
 801c84a:	6067      	str	r7, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	f43f af65 	beq.w	801c71c <ip4_reass+0x2b8>
 801c852:	7fa3      	ldrb	r3, [r4, #30]
 801c854:	07d8      	lsls	r0, r3, #31
 801c856:	f57f af35 	bpl.w	801c6c4 <ip4_reass+0x260>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801c85a:	2f00      	cmp	r7, #0
 801c85c:	f47f af61 	bne.w	801c722 <ip4_reass+0x2be>
 801c860:	e6df      	b.n	801c622 <ip4_reass+0x1be>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c862:	4b0a      	ldr	r3, [pc, #40]	; (801c88c <ip4_reass+0x428>)
 801c864:	f240 12ab 	movw	r2, #427	; 0x1ab
 801c868:	490d      	ldr	r1, [pc, #52]	; (801c8a0 <ip4_reass+0x43c>)
 801c86a:	480a      	ldr	r0, [pc, #40]	; (801c894 <ip4_reass+0x430>)
 801c86c:	f001 fdbc 	bl	801e3e8 <iprintf>
 801c870:	88eb      	ldrh	r3, [r5, #6]
 801c872:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 801c876:	e6ca      	b.n	801c60e <ip4_reass+0x1aa>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c878:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801c87a:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c87e:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 801c882:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c884:	77a3      	strb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801c886:	b292      	uxth	r2, r2
 801c888:	e788      	b.n	801c79c <ip4_reass+0x338>
 801c88a:	bf00      	nop
 801c88c:	0803bbcc 	.word	0x0803bbcc
 801c890:	0803bb98 	.word	0x0803bb98
 801c894:	08023618 	.word	0x08023618
 801c898:	0803bba8 	.word	0x0803bba8
 801c89c:	2002180c 	.word	0x2002180c
 801c8a0:	0803bb78 	.word	0x0803bb78

0801c8a4 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c8a4:	8dcb      	ldrh	r3, [r1, #46]	; 0x2e
{
 801c8a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c8aa:	f1b3 0614 	subs.w	r6, r3, #20
{
 801c8ae:	b08d      	sub	sp, #52	; 0x34
 801c8b0:	4605      	mov	r5, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c8b2:	bf48      	it	mi
 801c8b4:	f1a3 060d 	submi.w	r6, r3, #13
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c8b8:	6843      	ldr	r3, [r0, #4]
{
 801c8ba:	9106      	str	r1, [sp, #24]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801c8bc:	f893 8000 	ldrb.w	r8, [r3]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c8c0:	10f6      	asrs	r6, r6, #3
  original_iphdr = (struct ip_hdr *)p->payload;
 801c8c2:	9303      	str	r3, [sp, #12]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801c8c4:	f008 080f 	and.w	r8, r8, #15
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c8c8:	b2b3      	uxth	r3, r6
{
 801c8ca:	920b      	str	r2, [sp, #44]	; 0x2c
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801c8cc:	ea4f 0888 	mov.w	r8, r8, lsl #2
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c8d0:	930a      	str	r3, [sp, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801c8d2:	f1b8 0f14 	cmp.w	r8, #20
 801c8d6:	f040 80c7 	bne.w	801ca68 <ip4_frag+0x1c4>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c8da:	9b03      	ldr	r3, [sp, #12]
 801c8dc:	88d8      	ldrh	r0, [r3, #6]
 801c8de:	f7f6 fc89 	bl	80131f4 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 801c8e2:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801c8e6:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 801c8ea:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801c8ec:	f040 80c6 	bne.w	801ca7c <ip4_frag+0x1d8>

  left = p->tot_len - IP_HLEN;
 801c8f0:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801c8f4:	f1ab 0b14 	sub.w	fp, fp, #20
 801c8f8:	fa1f f38b 	uxth.w	r3, fp
 801c8fc:	9304      	str	r3, [sp, #16]

  while (left) {
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	f000 8096 	beq.w	801ca30 <ip4_frag+0x18c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801c904:	b2b6      	uxth	r6, r6
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c906:	f8df a198 	ldr.w	sl, [pc, #408]	; 801caa0 <ip4_frag+0x1fc>
    fragsize = LWIP_MIN(left, nfb * 8);
 801c90a:	00f3      	lsls	r3, r6, #3
 801c90c:	9308      	str	r3, [sp, #32]
 801c90e:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c910:	2114      	movs	r1, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 801c912:	9a04      	ldr	r2, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c914:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 801c916:	4293      	cmp	r3, r2
 801c918:	bfa8      	it	ge
 801c91a:	4613      	movge	r3, r2
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c91c:	2200      	movs	r2, #0
    fragsize = LWIP_MIN(left, nfb * 8);
 801c91e:	461e      	mov	r6, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c920:	f7f8 f880 	bl	8014a24 <pbuf_alloc>
    if (rambuf == NULL) {
 801c924:	4683      	mov	fp, r0
    fragsize = LWIP_MIN(left, nfb * 8);
 801c926:	b2b3      	uxth	r3, r6
 801c928:	9305      	str	r3, [sp, #20]
    if (rambuf == NULL) {
 801c92a:	2800      	cmp	r0, #0
 801c92c:	f000 8099 	beq.w	801ca62 <ip4_frag+0x1be>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c930:	896b      	ldrh	r3, [r5, #10]
 801c932:	2b13      	cmp	r3, #19
 801c934:	f240 808d 	bls.w	801ca52 <ip4_frag+0x1ae>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c938:	9903      	ldr	r1, [sp, #12]
 801c93a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801c93e:	680a      	ldr	r2, [r1, #0]
 801c940:	684f      	ldr	r7, [r1, #4]
 801c942:	6888      	ldr	r0, [r1, #8]
 801c944:	68c9      	ldr	r1, [r1, #12]
 801c946:	601a      	str	r2, [r3, #0]
 801c948:	60d9      	str	r1, [r3, #12]
 801c94a:	9903      	ldr	r1, [sp, #12]
 801c94c:	605f      	str	r7, [r3, #4]
 801c94e:	6098      	str	r0, [r3, #8]
 801c950:	690a      	ldr	r2, [r1, #16]
 801c952:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c954:	f8db 3004 	ldr.w	r3, [fp, #4]
 801c958:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 801c95a:	b37e      	cbz	r6, 801c9bc <ip4_frag+0x118>
 801c95c:	9e05      	ldr	r6, [sp, #20]
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801c95e:	896c      	ldrh	r4, [r5, #10]
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801c960:	4651      	mov	r1, sl
 801c962:	f240 22a7 	movw	r2, #679	; 0x2a7
 801c966:	2006      	movs	r0, #6
      u16_t plen = p->len - poff;
 801c968:	eba4 0408 	sub.w	r4, r4, r8
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c96c:	b2a4      	uxth	r4, r4
 801c96e:	42b4      	cmp	r4, r6
 801c970:	bf28      	it	cs
 801c972:	4634      	movcs	r4, r6
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c974:	2c00      	cmp	r4, #0
 801c976:	d05d      	beq.n	801ca34 <ip4_frag+0x190>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801c978:	f7f7 fdca 	bl	8014510 <memp_malloc_fn>
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c97c:	2202      	movs	r2, #2
      if (pcr == NULL) {
 801c97e:	4681      	mov	r9, r0
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c980:	4621      	mov	r1, r4
 801c982:	4603      	mov	r3, r0
      if (pcr == NULL) {
 801c984:	2800      	cmp	r0, #0
 801c986:	d05c      	beq.n	801ca42 <ip4_frag+0x19e>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c988:	9401      	str	r4, [sp, #4]
 801c98a:	2004      	movs	r0, #4
 801c98c:	686f      	ldr	r7, [r5, #4]
 801c98e:	4447      	add	r7, r8
 801c990:	9700      	str	r7, [sp, #0]
 801c992:	f7f7 ff9b 	bl	80148cc <pbuf_alloced_custom>
        (u8_t*)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 801c996:	4607      	mov	r7, r0
 801c998:	2800      	cmp	r0, #0
 801c99a:	d04f      	beq.n	801ca3c <ip4_frag+0x198>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801c99c:	4628      	mov	r0, r5

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy -= newpbuflen;
 801c99e:	1b36      	subs	r6, r6, r4
      pbuf_ref(p);
 801c9a0:	f7f8 f9d2 	bl	8014d48 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c9a4:	4b3a      	ldr	r3, [pc, #232]	; (801ca90 <ip4_frag+0x1ec>)
      left_to_copy -= newpbuflen;
 801c9a6:	b2b6      	uxth	r6, r6
      pcr->original = p;
 801c9a8:	f8c9 5014 	str.w	r5, [r9, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c9ac:	f8c9 3010 	str.w	r3, [r9, #16]
      pbuf_cat(rambuf, newpbuf);
 801c9b0:	4639      	mov	r1, r7
 801c9b2:	4658      	mov	r0, fp
 801c9b4:	f7f8 f9dc 	bl	8014d70 <pbuf_cat>
      if (left_to_copy) {
 801c9b8:	2e00      	cmp	r6, #0
 801c9ba:	d13b      	bne.n	801ca34 <ip4_frag+0x190>
    }
    poff += newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c9bc:	9b06      	ldr	r3, [sp, #24]
    poff += newpbuflen;
 801c9be:	44a0      	add	r8, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c9c0:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 801c9c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    poff += newpbuflen;
 801c9c4:	fa1f f888 	uxth.w	r8, r8
    tmp = (IP_OFFMASK & (ofo));
 801c9c8:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 801c9cc:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 801c9ce:	3b13      	subs	r3, #19
    if (!last) {
 801c9d0:	429a      	cmp	r2, r3
      tmp = tmp | IP_MF;
 801c9d2:	bfa8      	it	ge
 801c9d4:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c9d8:	f7f6 fc0c 	bl	80131f4 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801c9dc:	9f05      	ldr	r7, [sp, #20]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c9de:	9e09      	ldr	r6, [sp, #36]	; 0x24
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801c9e0:	463b      	mov	r3, r7
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c9e2:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801c9e4:	3314      	adds	r3, #20
 801c9e6:	b298      	uxth	r0, r3
 801c9e8:	f7f6 fc04 	bl	80131f4 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 801c9ec:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801c9ee:	8070      	strh	r0, [r6, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801c9f0:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 801c9f2:	72b3      	strb	r3, [r6, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801c9f4:	4630      	mov	r0, r6
    IPH_CHKSUM_SET(iphdr, 0);
 801c9f6:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801c9f8:	f7f7 f960 	bl	8013cbc <inet_chksum>
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c9fc:	9b06      	ldr	r3, [sp, #24]
 801c9fe:	4659      	mov	r1, fp
 801ca00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ca02:	695b      	ldr	r3, [r3, #20]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801ca04:	8170      	strh	r0, [r6, #10]
    netif->output(netif, rambuf, dest);
 801ca06:	9806      	ldr	r0, [sp, #24]
 801ca08:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801ca0a:	4a22      	ldr	r2, [pc, #136]	; (801ca94 <ip4_frag+0x1f0>)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ca0c:	4658      	mov	r0, fp
    IPFRAG_STATS_INC(ip_frag.xmit);
 801ca0e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 801ca10:	3301      	adds	r3, #1
 801ca12:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 801ca14:	f7f7 ff98 	bl	8014948 <pbuf_free>
    left -= fragsize;
 801ca18:	9b04      	ldr	r3, [sp, #16]
    ofo += nfb;
 801ca1a:	9a07      	ldr	r2, [sp, #28]
 801ca1c:	990a      	ldr	r1, [sp, #40]	; 0x28
    left -= fragsize;
 801ca1e:	1bdb      	subs	r3, r3, r7
    ofo += nfb;
 801ca20:	440a      	add	r2, r1
    left -= fragsize;
 801ca22:	b29b      	uxth	r3, r3
    ofo += nfb;
 801ca24:	b292      	uxth	r2, r2
    left -= fragsize;
 801ca26:	9304      	str	r3, [sp, #16]
    ofo += nfb;
 801ca28:	9207      	str	r2, [sp, #28]
  while (left) {
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	f47f af6f 	bne.w	801c90e <ip4_frag+0x6a>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ca30:	2000      	movs	r0, #0
 801ca32:	e00b      	b.n	801ca4c <ip4_frag+0x1a8>
        p = p->next;
 801ca34:	682d      	ldr	r5, [r5, #0]
 801ca36:	f04f 0800 	mov.w	r8, #0
 801ca3a:	e790      	b.n	801c95e <ip4_frag+0xba>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ca3c:	4648      	mov	r0, r9
 801ca3e:	f7ff fcc3 	bl	801c3c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ca42:	4658      	mov	r0, fp
 801ca44:	f7f7 ff80 	bl	8014948 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ca48:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ca4c:	b00d      	add	sp, #52	; 0x34
 801ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ca52:	4653      	mov	r3, sl
 801ca54:	f240 3209 	movw	r2, #777	; 0x309
 801ca58:	490f      	ldr	r1, [pc, #60]	; (801ca98 <ip4_frag+0x1f4>)
 801ca5a:	4810      	ldr	r0, [pc, #64]	; (801ca9c <ip4_frag+0x1f8>)
 801ca5c:	f001 fcc4 	bl	801e3e8 <iprintf>
 801ca60:	e76a      	b.n	801c938 <ip4_frag+0x94>
  return ERR_MEM;
 801ca62:	f04f 30ff 	mov.w	r0, #4294967295
 801ca66:	e7f1      	b.n	801ca4c <ip4_frag+0x1a8>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801ca68:	4b0d      	ldr	r3, [pc, #52]	; (801caa0 <ip4_frag+0x1fc>)
 801ca6a:	f240 22e1 	movw	r2, #737	; 0x2e1
 801ca6e:	490d      	ldr	r1, [pc, #52]	; (801caa4 <ip4_frag+0x200>)
 801ca70:	480a      	ldr	r0, [pc, #40]	; (801ca9c <ip4_frag+0x1f8>)
 801ca72:	f001 fcb9 	bl	801e3e8 <iprintf>
 801ca76:	f06f 0005 	mvn.w	r0, #5
 801ca7a:	e7e7      	b.n	801ca4c <ip4_frag+0x1a8>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801ca7c:	4b08      	ldr	r3, [pc, #32]	; (801caa0 <ip4_frag+0x1fc>)
 801ca7e:	f240 22e6 	movw	r2, #742	; 0x2e6
 801ca82:	4909      	ldr	r1, [pc, #36]	; (801caa8 <ip4_frag+0x204>)
 801ca84:	4805      	ldr	r0, [pc, #20]	; (801ca9c <ip4_frag+0x1f8>)
 801ca86:	f001 fcaf 	bl	801e3e8 <iprintf>
 801ca8a:	f06f 0005 	mvn.w	r0, #5
 801ca8e:	e7dd      	b.n	801ca4c <ip4_frag+0x1a8>
 801ca90:	0801c401 	.word	0x0801c401
 801ca94:	20035384 	.word	0x20035384
 801ca98:	0803bb58 	.word	0x0803bb58
 801ca9c:	08023618 	.word	0x08023618
 801caa0:	0803bbcc 	.word	0x0803bbcc
 801caa4:	0803bb14 	.word	0x0803bb14
 801caa8:	0803bb3c 	.word	0x0803bb3c

0801caac <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801caac:	8943      	ldrh	r3, [r0, #10]
 801caae:	2b0e      	cmp	r3, #14
{
 801cab0:	b570      	push	{r4, r5, r6, lr}
 801cab2:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 801cab4:	d915      	bls.n	801cae2 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801cab6:	6840      	ldr	r0, [r0, #4]
 801cab8:	460d      	mov	r5, r1

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801caba:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 801cabc:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801cabe:	07d9      	lsls	r1, r3, #31
 801cac0:	d50a      	bpl.n	801cad8 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801cac2:	2b01      	cmp	r3, #1
 801cac4:	d03b      	beq.n	801cb3e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801cac6:	2206      	movs	r2, #6
 801cac8:	4925      	ldr	r1, [pc, #148]	; (801cb60 <ethernet_input+0xb4>)
 801caca:	f000 fcf3 	bl	801d4b4 <memcmp>
 801cace:	b918      	cbnz	r0, 801cad8 <ethernet_input+0x2c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801cad0:	7b63      	ldrb	r3, [r4, #13]
 801cad2:	f043 0308 	orr.w	r3, r3, #8
 801cad6:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801cad8:	2e08      	cmp	r6, #8
 801cada:	d020      	beq.n	801cb1e <ethernet_input+0x72>
 801cadc:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801cae0:	d00b      	beq.n	801cafa <ethernet_input+0x4e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801cae2:	4b20      	ldr	r3, [pc, #128]	; (801cb64 <ethernet_input+0xb8>)
 801cae4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801cae6:	8bda      	ldrh	r2, [r3, #30]
      ETHARP_STATS_INC(etharp.proterr);
 801cae8:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 801caea:	3201      	adds	r2, #1
      ETHARP_STATS_INC(etharp.proterr);
 801caec:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801caee:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801caf0:	4620      	mov	r0, r4
 801caf2:	f7f7 ff29 	bl	8014948 <pbuf_free>
  return ERR_OK;
}
 801caf6:	2000      	movs	r0, #0
 801caf8:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cafa:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 801cafe:	071b      	lsls	r3, r3, #28
 801cb00:	d5f6      	bpl.n	801caf0 <ethernet_input+0x44>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801cb02:	f06f 010d 	mvn.w	r1, #13
 801cb06:	4620      	mov	r0, r4
 801cb08:	f7f7 ff16 	bl	8014938 <pbuf_header>
 801cb0c:	b310      	cbz	r0, 801cb54 <ethernet_input+0xa8>
        ETHARP_STATS_INC(etharp.lenerr);
 801cb0e:	4b15      	ldr	r3, [pc, #84]	; (801cb64 <ethernet_input+0xb8>)
 801cb10:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801cb12:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 801cb14:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 801cb16:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 801cb18:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801cb1a:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801cb1c:	e7e8      	b.n	801caf0 <ethernet_input+0x44>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cb1e:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 801cb22:	071a      	lsls	r2, r3, #28
 801cb24:	d5e4      	bpl.n	801caf0 <ethernet_input+0x44>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801cb26:	f06f 010d 	mvn.w	r1, #13
 801cb2a:	4620      	mov	r0, r4
 801cb2c:	f7f7 ff04 	bl	8014938 <pbuf_header>
 801cb30:	2800      	cmp	r0, #0
 801cb32:	d1dd      	bne.n	801caf0 <ethernet_input+0x44>
        ip4_input(p, netif);
 801cb34:	4629      	mov	r1, r5
 801cb36:	4620      	mov	r0, r4
 801cb38:	f7ff f892 	bl	801bc60 <ip4_input>
      break;
 801cb3c:	e7db      	b.n	801caf6 <ethernet_input+0x4a>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cb3e:	7843      	ldrb	r3, [r0, #1]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d1c9      	bne.n	801cad8 <ethernet_input+0x2c>
 801cb44:	7883      	ldrb	r3, [r0, #2]
 801cb46:	2b5e      	cmp	r3, #94	; 0x5e
 801cb48:	d1c6      	bne.n	801cad8 <ethernet_input+0x2c>
        p->flags |= PBUF_FLAG_LLMCAST;
 801cb4a:	7b63      	ldrb	r3, [r4, #13]
 801cb4c:	f043 0310 	orr.w	r3, r3, #16
 801cb50:	7363      	strb	r3, [r4, #13]
 801cb52:	e7c1      	b.n	801cad8 <ethernet_input+0x2c>
        etharp_input(p, netif);
 801cb54:	4629      	mov	r1, r5
 801cb56:	4620      	mov	r0, r4
 801cb58:	f7fe fc46 	bl	801b3e8 <etharp_input>
      break;
 801cb5c:	e7cb      	b.n	801caf6 <ethernet_input+0x4a>
 801cb5e:	bf00      	nop
 801cb60:	0803bc8c 	.word	0x0803bc8c
 801cb64:	20035384 	.word	0x20035384

0801cb68 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801cb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb6c:	460c      	mov	r4, r1
 801cb6e:	4605      	mov	r5, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cb70:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 801cb74:	4616      	mov	r6, r2
 801cb76:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801cb78:	f7f6 fb3c 	bl	80131f4 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801cb7c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 801cb7e:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801cb80:	4620      	mov	r0, r4
 801cb82:	f7f7 fed9 	bl	8014938 <pbuf_header>
 801cb86:	b9e0      	cbnz	r0, 801cbc2 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801cb88:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 801cb8a:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801cb8e:	683b      	ldr	r3, [r7, #0]
 801cb90:	600b      	str	r3, [r1, #0]
 801cb92:	88bb      	ldrh	r3, [r7, #4]
 801cb94:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 801cb96:	6833      	ldr	r3, [r6, #0]
 801cb98:	f8c1 3006 	str.w	r3, [r1, #6]
 801cb9c:	88b3      	ldrh	r3, [r6, #4]
 801cb9e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801cba0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 801cba4:	2b06      	cmp	r3, #6
 801cba6:	d006      	beq.n	801cbb6 <ethernet_output+0x4e>
 801cba8:	4b0a      	ldr	r3, [pc, #40]	; (801cbd4 <ethernet_output+0x6c>)
 801cbaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801cbae:	490a      	ldr	r1, [pc, #40]	; (801cbd8 <ethernet_output+0x70>)
 801cbb0:	480a      	ldr	r0, [pc, #40]	; (801cbdc <ethernet_output+0x74>)
 801cbb2:	f001 fc19 	bl	801e3e8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801cbb6:	4621      	mov	r1, r4
 801cbb8:	69ab      	ldr	r3, [r5, #24]
 801cbba:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801cbbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 801cbc0:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 801cbc2:	4a07      	ldr	r2, [pc, #28]	; (801cbe0 <ethernet_output+0x78>)
}
 801cbc4:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 801cbc8:	8953      	ldrh	r3, [r2, #10]
 801cbca:	3301      	adds	r3, #1
 801cbcc:	8153      	strh	r3, [r2, #10]
}
 801cbce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbd2:	bf00      	nop
 801cbd4:	0803bc94 	.word	0x0803bc94
 801cbd8:	0803bccc 	.word	0x0803bccc
 801cbdc:	08023618 	.word	0x08023618
 801cbe0:	20035384 	.word	0x20035384

0801cbe4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801cbe4:	b510      	push	{r4, lr}
 801cbe6:	b082      	sub	sp, #8
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801cbe8:	2304      	movs	r3, #4
{
 801cbea:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801cbec:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801cbee:	4668      	mov	r0, sp
 801cbf0:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 801cbf2:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801cbf4:	f7f3 f834 	bl	800fc60 <osMessageCreate>
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801cbf8:	4a09      	ldr	r2, [pc, #36]	; (801cc20 <sys_mbox_new+0x3c>)
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801cbfa:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801cbfc:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 801cc00:	f8b2 3104 	ldrh.w	r3, [r2, #260]	; 0x104
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801cc04:	f8b2 1106 	ldrh.w	r1, [r2, #262]	; 0x106
  if(*mbox == NULL)
 801cc08:	0940      	lsrs	r0, r0, #5
  ++lwip_stats.sys.mbox.used;
 801cc0a:	3301      	adds	r3, #1
    return ERR_MEM;

  return ERR_OK;
}
 801cc0c:	4240      	negs	r0, r0
  ++lwip_stats.sys.mbox.used;
 801cc0e:	b29b      	uxth	r3, r3
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801cc10:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 801cc12:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801cc16:	bf38      	it	cc
 801cc18:	f8a2 3106 	strhcc.w	r3, [r2, #262]	; 0x106
}
 801cc1c:	b002      	add	sp, #8
 801cc1e:	bd10      	pop	{r4, pc}
 801cc20:	20035384 	.word	0x20035384

0801cc24 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801cc24:	b538      	push	{r3, r4, r5, lr}
 801cc26:	4605      	mov	r5, r0
 801cc28:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801cc2a:	f04f 32ff 	mov.w	r2, #4294967295
 801cc2e:	4621      	mov	r1, r4
 801cc30:	6828      	ldr	r0, [r5, #0]
 801cc32:	f7f3 f81b 	bl	800fc6c <osMessagePut>
 801cc36:	2800      	cmp	r0, #0
 801cc38:	d1f7      	bne.n	801cc2a <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801cc3a:	bd38      	pop	{r3, r4, r5, pc}

0801cc3c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801cc3c:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801cc3e:	6800      	ldr	r0, [r0, #0]
 801cc40:	2200      	movs	r2, #0
 801cc42:	f7f3 f813 	bl	800fc6c <osMessagePut>
 801cc46:	b900      	cbnz	r0, 801cc4a <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 801cc48:	bd08      	pop	{r3, pc}
    lwip_stats.sys.mbox.err++;
 801cc4a:	4a04      	ldr	r2, [pc, #16]	; (801cc5c <sys_mbox_trypost+0x20>)
    result = ERR_MEM;
 801cc4c:	f04f 30ff 	mov.w	r0, #4294967295
    lwip_stats.sys.mbox.err++;
 801cc50:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 801cc54:	3301      	adds	r3, #1
 801cc56:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
}
 801cc5a:	bd08      	pop	{r3, pc}
 801cc5c:	20035384 	.word	0x20035384

0801cc60 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801cc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc62:	4615      	mov	r5, r2
 801cc64:	b085      	sub	sp, #20
 801cc66:	4606      	mov	r6, r0
 801cc68:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801cc6a:	f7f2 ff25 	bl	800fab8 <osKernelSysTick>
 801cc6e:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801cc70:	b15d      	cbz	r5, 801cc8a <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801cc72:	462a      	mov	r2, r5
 801cc74:	6831      	ldr	r1, [r6, #0]
 801cc76:	a801      	add	r0, sp, #4
 801cc78:	f7f3 f824 	bl	800fcc4 <osMessageGet>

    if(event.status == osEventMessage)
 801cc7c:	9b01      	ldr	r3, [sp, #4]
 801cc7e:	2b10      	cmp	r3, #16
 801cc80:	d009      	beq.n	801cc96 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cc82:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801cc86:	b005      	add	sp, #20
 801cc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 801cc8a:	6831      	ldr	r1, [r6, #0]
 801cc8c:	f04f 32ff 	mov.w	r2, #4294967295
 801cc90:	a801      	add	r0, sp, #4
 801cc92:	f7f3 f817 	bl	800fcc4 <osMessageGet>
    *msg = (void *)event.value.v;
 801cc96:	9b02      	ldr	r3, [sp, #8]
 801cc98:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 801cc9a:	f7f2 ff0d 	bl	800fab8 <osKernelSysTick>
 801cc9e:	1b00      	subs	r0, r0, r4
}
 801cca0:	b005      	add	sp, #20
 801cca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cca4 <sys_mbox_valid>:
 801cca4:	6800      	ldr	r0, [r0, #0]
 801cca6:	3000      	adds	r0, #0
 801cca8:	bf18      	it	ne
 801ccaa:	2001      	movne	r0, #1
 801ccac:	4770      	bx	lr
 801ccae:	bf00      	nop

0801ccb0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ccb0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ccb2:	4803      	ldr	r0, [pc, #12]	; (801ccc0 <sys_init+0x10>)
 801ccb4:	f7f2 ff3a 	bl	800fb2c <osMutexCreate>
 801ccb8:	4b02      	ldr	r3, [pc, #8]	; (801ccc4 <sys_init+0x14>)
 801ccba:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801ccbc:	bd08      	pop	{r3, pc}
 801ccbe:	bf00      	nop
 801ccc0:	0803bd08 	.word	0x0803bd08
 801ccc4:	200354e8 	.word	0x200354e8

0801ccc8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ccc8:	b530      	push	{r4, r5, lr}
 801ccca:	b083      	sub	sp, #12

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801cccc:	2400      	movs	r4, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ccce:	4605      	mov	r5, r0
  osMutexDef(MUTEX);
 801ccd0:	ab02      	add	r3, sp, #8
 801ccd2:	f843 4d04 	str.w	r4, [r3, #-4]!
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ccd6:	4618      	mov	r0, r3
 801ccd8:	f7f2 ff28 	bl	800fb2c <osMutexCreate>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801ccdc:	4a0c      	ldr	r2, [pc, #48]	; (801cd10 <sys_mutex_new+0x48>)
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ccde:	6028      	str	r0, [r5, #0]
  if(*mutex == NULL)
 801cce0:	b170      	cbz	r0, 801cd00 <sys_mutex_new+0x38>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801cce2:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801cce6:	4620      	mov	r0, r4
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801cce8:	f8b2 1100 	ldrh.w	r1, [r2, #256]	; 0x100
  ++lwip_stats.sys.mutex.used;
 801ccec:	3301      	adds	r3, #1
 801ccee:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801ccf0:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 801ccf2:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801ccf6:	bf38      	it	cc
 801ccf8:	f8a2 3100 	strhcc.w	r3, [r2, #256]	; 0x100
}
 801ccfc:	b003      	add	sp, #12
 801ccfe:	bd30      	pop	{r4, r5, pc}
    ++lwip_stats.sys.mutex.err;
 801cd00:	f8b2 3102 	ldrh.w	r3, [r2, #258]	; 0x102
    return ERR_MEM;
 801cd04:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 801cd08:	3301      	adds	r3, #1
 801cd0a:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
    return ERR_MEM;
 801cd0e:	e7f5      	b.n	801ccfc <sys_mutex_new+0x34>
 801cd10:	20035384 	.word	0x20035384

0801cd14 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801cd14:	6800      	ldr	r0, [r0, #0]
 801cd16:	f04f 31ff 	mov.w	r1, #4294967295
 801cd1a:	f7f2 bf0b 	b.w	800fb34 <osMutexWait>
 801cd1e:	bf00      	nop

0801cd20 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 801cd20:	6800      	ldr	r0, [r0, #0]
 801cd22:	f7f2 bf33 	b.w	800fb8c <osMutexRelease>
 801cd26:	bf00      	nop

0801cd28 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cd28:	b530      	push	{r4, r5, lr}
 801cd2a:	b087      	sub	sp, #28
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801cd2c:	2400      	movs	r4, #0
{
 801cd2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801cd30:	9102      	str	r1, [sp, #8]
  return osThreadCreate(&os_thread_def, arg);
 801cd32:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801cd34:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 801cd36:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801cd38:	9305      	str	r3, [sp, #20]
 801cd3a:	f8ad 500c 	strh.w	r5, [sp, #12]
 801cd3e:	9404      	str	r4, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 801cd40:	f7f2 fec2 	bl	800fac8 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801cd44:	b007      	add	sp, #28
 801cd46:	bd30      	pop	{r4, r5, pc}

0801cd48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cd48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	4910      	ldr	r1, [pc, #64]	; (801cd90 <MX_USB_DEVICE_Init+0x48>)
 801cd4e:	4811      	ldr	r0, [pc, #68]	; (801cd94 <MX_USB_DEVICE_Init+0x4c>)
 801cd50:	f7f2 fa3e 	bl	800f1d0 <USBD_Init>
 801cd54:	b9c0      	cbnz	r0, 801cd88 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cd56:	4910      	ldr	r1, [pc, #64]	; (801cd98 <MX_USB_DEVICE_Init+0x50>)
 801cd58:	480e      	ldr	r0, [pc, #56]	; (801cd94 <MX_USB_DEVICE_Init+0x4c>)
 801cd5a:	f7f2 fa4f 	bl	800f1fc <USBD_RegisterClass>
 801cd5e:	b980      	cbnz	r0, 801cd82 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cd60:	490e      	ldr	r1, [pc, #56]	; (801cd9c <MX_USB_DEVICE_Init+0x54>)
 801cd62:	480c      	ldr	r0, [pc, #48]	; (801cd94 <MX_USB_DEVICE_Init+0x4c>)
 801cd64:	f7f2 fa06 	bl	800f174 <USBD_CDC_RegisterInterface>
 801cd68:	b940      	cbnz	r0, 801cd7c <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cd6a:	480a      	ldr	r0, [pc, #40]	; (801cd94 <MX_USB_DEVICE_Init+0x4c>)
 801cd6c:	f7f2 fa4e 	bl	800f20c <USBD_Start>
 801cd70:	b900      	cbnz	r0, 801cd74 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cd72:	bd08      	pop	{r3, pc}
 801cd74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801cd78:	f7e4 bcc8 	b.w	800170c <Error_Handler>
    Error_Handler();
 801cd7c:	f7e4 fcc6 	bl	800170c <Error_Handler>
 801cd80:	e7f3      	b.n	801cd6a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 801cd82:	f7e4 fcc3 	bl	800170c <Error_Handler>
 801cd86:	e7eb      	b.n	801cd60 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801cd88:	f7e4 fcc0 	bl	800170c <Error_Handler>
 801cd8c:	e7e3      	b.n	801cd56 <MX_USB_DEVICE_Init+0xe>
 801cd8e:	bf00      	nop
 801cd90:	20000458 	.word	0x20000458
 801cd94:	200354ec 	.word	0x200354ec
 801cd98:	2000032c 	.word	0x2000032c
 801cd9c:	20000448 	.word	0x20000448

0801cda0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 801cda0:	2000      	movs	r0, #0
 801cda2:	4770      	bx	lr

0801cda4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 801cda4:	2000      	movs	r0, #0
 801cda6:	4770      	bx	lr

0801cda8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801cda8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801cdaa:	4c05      	ldr	r4, [pc, #20]	; (801cdc0 <CDC_Receive_FS+0x18>)
 801cdac:	4601      	mov	r1, r0
 801cdae:	4620      	mov	r0, r4
 801cdb0:	f7f2 f9f0 	bl	800f194 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cdb4:	4620      	mov	r0, r4
 801cdb6:	f7f2 f9f3 	bl	800f1a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 801cdba:	2000      	movs	r0, #0
 801cdbc:	bd10      	pop	{r4, pc}
 801cdbe:	bf00      	nop
 801cdc0:	200354ec 	.word	0x200354ec

0801cdc4 <CDC_Init_FS>:
{
 801cdc4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cdc6:	4c06      	ldr	r4, [pc, #24]	; (801cde0 <CDC_Init_FS+0x1c>)
 801cdc8:	2200      	movs	r2, #0
 801cdca:	4906      	ldr	r1, [pc, #24]	; (801cde4 <CDC_Init_FS+0x20>)
 801cdcc:	4620      	mov	r0, r4
 801cdce:	f7f2 f9d9 	bl	800f184 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cdd2:	4620      	mov	r0, r4
 801cdd4:	4904      	ldr	r1, [pc, #16]	; (801cde8 <CDC_Init_FS+0x24>)
 801cdd6:	f7f2 f9dd 	bl	800f194 <USBD_CDC_SetRxBuffer>
}
 801cdda:	2000      	movs	r0, #0
 801cddc:	bd10      	pop	{r4, pc}
 801cdde:	bf00      	nop
 801cde0:	200354ec 	.word	0x200354ec
 801cde4:	20035f88 	.word	0x20035f88
 801cde8:	20035788 	.word	0x20035788

0801cdec <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cdec:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 801cdee:	4801      	ldr	r0, [pc, #4]	; (801cdf4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 801cdf0:	800b      	strh	r3, [r1, #0]
}
 801cdf2:	4770      	bx	lr
 801cdf4:	20000484 	.word	0x20000484

0801cdf8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cdf8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801cdfa:	4801      	ldr	r0, [pc, #4]	; (801ce00 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 801cdfc:	800b      	strh	r3, [r1, #0]
}
 801cdfe:	4770      	bx	lr
 801ce00:	20000498 	.word	0x20000498

0801ce04 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801ce04:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 801ce06:	4801      	ldr	r0, [pc, #4]	; (801ce0c <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 801ce08:	800b      	strh	r3, [r1, #0]
}
 801ce0a:	4770      	bx	lr
 801ce0c:	20000478 	.word	0x20000478

0801ce10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ce10:	3a01      	subs	r2, #1
 801ce12:	b430      	push	{r4, r5}
 801ce14:	b2d2      	uxtb	r2, r2
 801ce16:	1c8c      	adds	r4, r1, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 801ce18:	2500      	movs	r5, #0
 801ce1a:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    if (((value >> 28)) < 0xA)
 801ce1e:	0f02      	lsrs	r2, r0, #28
    pbuf[2 * idx + 1] = 0;
 801ce20:	704d      	strb	r5, [r1, #1]
 801ce22:	3102      	adds	r1, #2
    value = value << 4;
 801ce24:	0100      	lsls	r0, r0, #4
 801ce26:	b2d3      	uxtb	r3, r2
    if (((value >> 28)) < 0xA)
 801ce28:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801ce2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ce2e:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801ce32:	bf94      	ite	ls
 801ce34:	f801 2c02 	strbls.w	r2, [r1, #-2]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ce38:	f801 3c02 	strbhi.w	r3, [r1, #-2]
  for (idx = 0; idx < len; idx++)
 801ce3c:	428c      	cmp	r4, r1
 801ce3e:	d1ee      	bne.n	801ce1e <IntToUnicode+0xe>
  }
}
 801ce40:	bc30      	pop	{r4, r5}
 801ce42:	4770      	bx	lr

0801ce44 <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ce44:	480b      	ldr	r0, [pc, #44]	; (801ce74 <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 801ce46:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ce48:	4b0b      	ldr	r3, [pc, #44]	; (801ce78 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ce4a:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 801ce4c:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 801ce4e:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 801ce50:	18c0      	adds	r0, r0, r3
 801ce52:	d101      	bne.n	801ce58 <USBD_FS_SerialStrDescriptor+0x14>
}
 801ce54:	4809      	ldr	r0, [pc, #36]	; (801ce7c <USBD_FS_SerialStrDescriptor+0x38>)
 801ce56:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ce58:	4b09      	ldr	r3, [pc, #36]	; (801ce80 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ce5a:	2208      	movs	r2, #8
 801ce5c:	4909      	ldr	r1, [pc, #36]	; (801ce84 <USBD_FS_SerialStrDescriptor+0x40>)
{
 801ce5e:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ce60:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ce62:	f7ff ffd5 	bl	801ce10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ce66:	2204      	movs	r2, #4
 801ce68:	4907      	ldr	r1, [pc, #28]	; (801ce88 <USBD_FS_SerialStrDescriptor+0x44>)
 801ce6a:	4620      	mov	r0, r4
 801ce6c:	f7ff ffd0 	bl	801ce10 <IntToUnicode>
}
 801ce70:	4802      	ldr	r0, [pc, #8]	; (801ce7c <USBD_FS_SerialStrDescriptor+0x38>)
 801ce72:	bd10      	pop	{r4, pc}
 801ce74:	1ff0f420 	.word	0x1ff0f420
 801ce78:	1ff0f428 	.word	0x1ff0f428
 801ce7c:	2000049c 	.word	0x2000049c
 801ce80:	1ff0f424 	.word	0x1ff0f424
 801ce84:	2000049e 	.word	0x2000049e
 801ce88:	200004ae 	.word	0x200004ae

0801ce8c <USBD_FS_ManufacturerStrDescriptor>:
{
 801ce8c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ce8e:	4c04      	ldr	r4, [pc, #16]	; (801cea0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 801ce90:	460a      	mov	r2, r1
 801ce92:	4804      	ldr	r0, [pc, #16]	; (801cea4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801ce94:	4621      	mov	r1, r4
 801ce96:	f7f2 fd77 	bl	800f988 <USBD_GetString>
}
 801ce9a:	4620      	mov	r0, r4
 801ce9c:	bd10      	pop	{r4, pc}
 801ce9e:	bf00      	nop
 801cea0:	20036788 	.word	0x20036788
 801cea4:	0803bd28 	.word	0x0803bd28

0801cea8 <USBD_FS_ProductStrDescriptor>:
{
 801cea8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ceaa:	4c04      	ldr	r4, [pc, #16]	; (801cebc <USBD_FS_ProductStrDescriptor+0x14>)
 801ceac:	460a      	mov	r2, r1
 801ceae:	4804      	ldr	r0, [pc, #16]	; (801cec0 <USBD_FS_ProductStrDescriptor+0x18>)
 801ceb0:	4621      	mov	r1, r4
 801ceb2:	f7f2 fd69 	bl	800f988 <USBD_GetString>
}
 801ceb6:	4620      	mov	r0, r4
 801ceb8:	bd10      	pop	{r4, pc}
 801ceba:	bf00      	nop
 801cebc:	20036788 	.word	0x20036788
 801cec0:	0803bd3c 	.word	0x0803bd3c

0801cec4 <USBD_FS_ConfigStrDescriptor>:
{
 801cec4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cec6:	4c04      	ldr	r4, [pc, #16]	; (801ced8 <USBD_FS_ConfigStrDescriptor+0x14>)
 801cec8:	460a      	mov	r2, r1
 801ceca:	4804      	ldr	r0, [pc, #16]	; (801cedc <USBD_FS_ConfigStrDescriptor+0x18>)
 801cecc:	4621      	mov	r1, r4
 801cece:	f7f2 fd5b 	bl	800f988 <USBD_GetString>
}
 801ced2:	4620      	mov	r0, r4
 801ced4:	bd10      	pop	{r4, pc}
 801ced6:	bf00      	nop
 801ced8:	20036788 	.word	0x20036788
 801cedc:	0803bd0c 	.word	0x0803bd0c

0801cee0 <USBD_FS_InterfaceStrDescriptor>:
{
 801cee0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cee2:	4c04      	ldr	r4, [pc, #16]	; (801cef4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 801cee4:	460a      	mov	r2, r1
 801cee6:	4804      	ldr	r0, [pc, #16]	; (801cef8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 801cee8:	4621      	mov	r1, r4
 801ceea:	f7f2 fd4d 	bl	800f988 <USBD_GetString>
}
 801ceee:	4620      	mov	r0, r4
 801cef0:	bd10      	pop	{r4, pc}
 801cef2:	bf00      	nop
 801cef4:	20036788 	.word	0x20036788
 801cef8:	0803bd18 	.word	0x0803bd18

0801cefc <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 801cefc:	6803      	ldr	r3, [r0, #0]
{
 801cefe:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 801cf00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801cf04:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cf06:	f04f 0400 	mov.w	r4, #0
 801cf0a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801cf0e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801cf12:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 801cf14:	d001      	beq.n	801cf1a <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801cf16:	b009      	add	sp, #36	; 0x24
 801cf18:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cf1a:	4d1e      	ldr	r5, [pc, #120]	; (801cf94 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cf1c:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801cf1e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cf22:	2103      	movs	r1, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cf24:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cf26:	f043 0301 	orr.w	r3, r3, #1
 801cf2a:	632b      	str	r3, [r5, #48]	; 0x30
 801cf2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cf2e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801cf30:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cf32:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801cf36:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cf38:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cf3a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cf3c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cf3e:	4816      	ldr	r0, [pc, #88]	; (801cf98 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801cf40:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cf42:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cf44:	f7ea fb1a 	bl	800757c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801cf48:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801cf4c:	a903      	add	r1, sp, #12
 801cf4e:	4812      	ldr	r0, [pc, #72]	; (801cf98 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801cf50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cf52:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801cf56:	f7ea fb11 	bl	800757c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801cf5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801cf5c:	4622      	mov	r2, r4
 801cf5e:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801cf60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801cf64:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801cf66:	636b      	str	r3, [r5, #52]	; 0x34
 801cf68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801cf6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cf6e:	9301      	str	r3, [sp, #4]
 801cf70:	9b01      	ldr	r3, [sp, #4]
 801cf72:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801cf74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801cf78:	646b      	str	r3, [r5, #68]	; 0x44
 801cf7a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801cf7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cf80:	9302      	str	r3, [sp, #8]
 801cf82:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801cf84:	f7e8 f966 	bl	8005254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801cf88:	2043      	movs	r0, #67	; 0x43
 801cf8a:	f7e8 f9a9 	bl	80052e0 <HAL_NVIC_EnableIRQ>
}
 801cf8e:	b009      	add	sp, #36	; 0x24
 801cf90:	bd30      	pop	{r4, r5, pc}
 801cf92:	bf00      	nop
 801cf94:	40023800 	.word	0x40023800
 801cf98:	40020000 	.word	0x40020000

0801cf9c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801cf9c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 801cfa0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cfa4:	f7f2 b94a 	b.w	800f23c <USBD_LL_SetupStage>

0801cfa8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cfa8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801cfac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801cfb0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cfb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801cfb8:	f7f2 b970 	b.w	800f29c <USBD_LL_DataOutStage>

0801cfbc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801cfbc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801cfc0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801cfc4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cfc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801cfca:	f7f2 b9a7 	b.w	800f31c <USBD_LL_DataInStage>
 801cfce:	bf00      	nop

0801cfd0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cfd0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cfd4:	f7f2 ba3a 	b.w	800f44c <USBD_LL_SOF>

0801cfd8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cfd8:	68c1      	ldr	r1, [r0, #12]
{
 801cfda:	b510      	push	{r4, lr}
 801cfdc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cfde:	b121      	cbz	r1, 801cfea <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801cfe0:	2902      	cmp	r1, #2
 801cfe2:	d00c      	beq.n	801cffe <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 801cfe4:	f7e4 fb92 	bl	800170c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cfe8:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cfea:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 801cfee:	f7f2 fa17 	bl	800f420 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cff2:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 801cff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cffa:	f7f2 b9e9 	b.w	800f3d0 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 801cffe:	2101      	movs	r1, #1
 801d000:	e7f3      	b.n	801cfea <HAL_PCD_ResetCallback+0x12>
 801d002:	bf00      	nop

0801d004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d004:	b510      	push	{r4, lr}
 801d006:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d008:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801d00c:	f7f2 fa0c 	bl	800f428 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d010:	6822      	ldr	r2, [r4, #0]
 801d012:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801d016:	f043 0301 	orr.w	r3, r3, #1
 801d01a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d01e:	6a23      	ldr	r3, [r4, #32]
 801d020:	b123      	cbz	r3, 801d02c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d022:	4a03      	ldr	r2, [pc, #12]	; (801d030 <HAL_PCD_SuspendCallback+0x2c>)
 801d024:	6913      	ldr	r3, [r2, #16]
 801d026:	f043 0306 	orr.w	r3, r3, #6
 801d02a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d02c:	bd10      	pop	{r4, pc}
 801d02e:	bf00      	nop
 801d030:	e000ed00 	.word	0xe000ed00

0801d034 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d034:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801d038:	f7f2 ba00 	b.w	800f43c <USBD_LL_Resume>

0801d03c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d03c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801d040:	f7f2 ba14 	b.w	800f46c <USBD_LL_IsoOUTIncomplete>

0801d044 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d044:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801d048:	f7f2 ba0e 	b.w	800f468 <USBD_LL_IsoINIncomplete>

0801d04c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d04c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801d050:	f7f2 ba0e 	b.w	800f470 <USBD_LL_DevConnected>

0801d054 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d054:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801d058:	f7f2 ba0c 	b.w	800f474 <USBD_LL_DevDisconnected>

0801d05c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d05c:	7802      	ldrb	r2, [r0, #0]
 801d05e:	b10a      	cbz	r2, 801d064 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 801d060:	2000      	movs	r0, #0
 801d062:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 801d064:	4b15      	ldr	r3, [pc, #84]	; (801d0bc <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801d066:	2101      	movs	r1, #1
{
 801d068:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d06a:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d06c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801d070:	2506      	movs	r5, #6
  hpcd_USB_OTG_FS.pData = pdev;
 801d072:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801d076:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d07a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d07c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d07e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d080:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801d082:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d084:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801d088:	e9c3 6500 	strd	r6, r5, [r3]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801d08c:	e9c3 4106 	strd	r4, r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d090:	f7eb f97a 	bl	8008388 <HAL_PCD_Init>
 801d094:	b978      	cbnz	r0, 801d0b6 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d096:	2180      	movs	r1, #128	; 0x80
 801d098:	4808      	ldr	r0, [pc, #32]	; (801d0bc <USBD_LL_Init+0x60>)
 801d09a:	f7eb ff35 	bl	8008f08 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d09e:	2240      	movs	r2, #64	; 0x40
 801d0a0:	2100      	movs	r1, #0
 801d0a2:	4806      	ldr	r0, [pc, #24]	; (801d0bc <USBD_LL_Init+0x60>)
 801d0a4:	f7eb ff0c 	bl	8008ec0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d0a8:	2280      	movs	r2, #128	; 0x80
 801d0aa:	2101      	movs	r1, #1
 801d0ac:	4803      	ldr	r0, [pc, #12]	; (801d0bc <USBD_LL_Init+0x60>)
 801d0ae:	f7eb ff07 	bl	8008ec0 <HAL_PCDEx_SetTxFiFo>
}
 801d0b2:	2000      	movs	r0, #0
 801d0b4:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 801d0b6:	f7e4 fb29 	bl	800170c <Error_Handler>
 801d0ba:	e7ec      	b.n	801d096 <USBD_LL_Init+0x3a>
 801d0bc:	20036988 	.word	0x20036988

0801d0c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d0c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 801d0c2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801d0c6:	f7eb fa03 	bl	80084d0 <HAL_PCD_Start>
 801d0ca:	2803      	cmp	r0, #3
 801d0cc:	d802      	bhi.n	801d0d4 <USBD_LL_Start+0x14>
 801d0ce:	4b02      	ldr	r3, [pc, #8]	; (801d0d8 <USBD_LL_Start+0x18>)
 801d0d0:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801d0d2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 801d0d4:	2002      	movs	r0, #2
}
 801d0d6:	bd08      	pop	{r3, pc}
 801d0d8:	0803bd54 	.word	0x0803bd54

0801d0dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d0dc:	b510      	push	{r4, lr}
 801d0de:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d0e0:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801d0e4:	4613      	mov	r3, r2
 801d0e6:	4622      	mov	r2, r4
 801d0e8:	f7eb fda6 	bl	8008c38 <HAL_PCD_EP_Open>
 801d0ec:	2803      	cmp	r0, #3
 801d0ee:	d802      	bhi.n	801d0f6 <USBD_LL_OpenEP+0x1a>
 801d0f0:	4b02      	ldr	r3, [pc, #8]	; (801d0fc <USBD_LL_OpenEP+0x20>)
 801d0f2:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801d0f4:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d0f6:	2002      	movs	r0, #2
}
 801d0f8:	bd10      	pop	{r4, pc}
 801d0fa:	bf00      	nop
 801d0fc:	0803bd54 	.word	0x0803bd54

0801d100 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d100:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d102:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801d106:	f7eb fdd1 	bl	8008cac <HAL_PCD_EP_Close>
 801d10a:	2803      	cmp	r0, #3
 801d10c:	d802      	bhi.n	801d114 <USBD_LL_CloseEP+0x14>
 801d10e:	4b02      	ldr	r3, [pc, #8]	; (801d118 <USBD_LL_CloseEP+0x18>)
 801d110:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801d112:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d114:	2002      	movs	r0, #2
}
 801d116:	bd08      	pop	{r3, pc}
 801d118:	0803bd54 	.word	0x0803bd54

0801d11c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d11c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d11e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801d122:	f7eb fe4d 	bl	8008dc0 <HAL_PCD_EP_SetStall>
 801d126:	2803      	cmp	r0, #3
 801d128:	d802      	bhi.n	801d130 <USBD_LL_StallEP+0x14>
 801d12a:	4b02      	ldr	r3, [pc, #8]	; (801d134 <USBD_LL_StallEP+0x18>)
 801d12c:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801d12e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d130:	2002      	movs	r0, #2
}
 801d132:	bd08      	pop	{r3, pc}
 801d134:	0803bd54 	.word	0x0803bd54

0801d138 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d138:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d13a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801d13e:	f7eb fe83 	bl	8008e48 <HAL_PCD_EP_ClrStall>
 801d142:	2803      	cmp	r0, #3
 801d144:	d802      	bhi.n	801d14c <USBD_LL_ClearStallEP+0x14>
 801d146:	4b02      	ldr	r3, [pc, #8]	; (801d150 <USBD_LL_ClearStallEP+0x18>)
 801d148:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801d14a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d14c:	2002      	movs	r0, #2
}
 801d14e:	bd08      	pop	{r3, pc}
 801d150:	0803bd54 	.word	0x0803bd54

0801d154 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 801d154:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d156:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 801d15a:	d406      	bmi.n	801d16a <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d15c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801d160:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801d164:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 801d168:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d16a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801d16e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801d172:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801d176:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 801d17a:	4770      	bx	lr

0801d17c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d17c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d17e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801d182:	f7eb fd45 	bl	8008c10 <HAL_PCD_SetAddress>
 801d186:	2803      	cmp	r0, #3
 801d188:	d802      	bhi.n	801d190 <USBD_LL_SetUSBAddress+0x14>
 801d18a:	4b02      	ldr	r3, [pc, #8]	; (801d194 <USBD_LL_SetUSBAddress+0x18>)
 801d18c:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801d18e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d190:	2002      	movs	r0, #2
}
 801d192:	bd08      	pop	{r3, pc}
 801d194:	0803bd54 	.word	0x0803bd54

0801d198 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d198:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d19a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801d19e:	f7eb fdeb 	bl	8008d78 <HAL_PCD_EP_Transmit>
 801d1a2:	2803      	cmp	r0, #3
 801d1a4:	d802      	bhi.n	801d1ac <USBD_LL_Transmit+0x14>
 801d1a6:	4b02      	ldr	r3, [pc, #8]	; (801d1b0 <USBD_LL_Transmit+0x18>)
 801d1a8:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801d1aa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d1ac:	2002      	movs	r0, #2
}
 801d1ae:	bd08      	pop	{r3, pc}
 801d1b0:	0803bd54 	.word	0x0803bd54

0801d1b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d1b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d1b6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801d1ba:	f7eb fdab 	bl	8008d14 <HAL_PCD_EP_Receive>
 801d1be:	2803      	cmp	r0, #3
 801d1c0:	d802      	bhi.n	801d1c8 <USBD_LL_PrepareReceive+0x14>
 801d1c2:	4b02      	ldr	r3, [pc, #8]	; (801d1cc <USBD_LL_PrepareReceive+0x18>)
 801d1c4:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801d1c6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d1c8:	2002      	movs	r0, #2
}
 801d1ca:	bd08      	pop	{r3, pc}
 801d1cc:	0803bd54 	.word	0x0803bd54

0801d1d0 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d1d0:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801d1d4:	f7eb bdc6 	b.w	8008d64 <HAL_PCD_EP_GetRxCount>

0801d1d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801d1d8:	b510      	push	{r4, lr}
 801d1da:	4604      	mov	r4, r0
  switch (msg)
 801d1dc:	b1a1      	cbz	r1, 801d208 <HAL_PCDEx_LPM_Callback+0x30>
 801d1de:	2901      	cmp	r1, #1
 801d1e0:	d111      	bne.n	801d206 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
    USBD_LL_Resume(hpcd->pData);
    break;

  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d1e2:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 801d1e4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d1e8:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801d1ec:	f043 0301 	orr.w	r3, r3, #1
 801d1f0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 801d1f4:	f7f2 f918 	bl	800f428 <USBD_LL_Suspend>

    /* Enter in STOP mode. */
    if (hpcd->Init.low_power_enable)
 801d1f8:	6a23      	ldr	r3, [r4, #32]
 801d1fa:	b123      	cbz	r3, 801d206 <HAL_PCDEx_LPM_Callback+0x2e>
    {
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d1fc:	4a0d      	ldr	r2, [pc, #52]	; (801d234 <HAL_PCDEx_LPM_Callback+0x5c>)
 801d1fe:	6913      	ldr	r3, [r2, #16]
 801d200:	f043 0306 	orr.w	r3, r3, #6
 801d204:	6113      	str	r3, [r2, #16]
    }
    break;
  }
}
 801d206:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 801d208:	6a03      	ldr	r3, [r0, #32]
 801d20a:	b133      	cbz	r3, 801d21a <HAL_PCDEx_LPM_Callback+0x42>
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 801d20c:	f7e4 fa86 	bl	800171c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d210:	4a08      	ldr	r2, [pc, #32]	; (801d234 <HAL_PCDEx_LPM_Callback+0x5c>)
 801d212:	6913      	ldr	r3, [r2, #16]
 801d214:	f023 0306 	bic.w	r3, r3, #6
 801d218:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801d21a:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 801d21c:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801d220:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801d224:	f023 0301 	bic.w	r3, r3, #1
}
 801d228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801d22c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 801d230:	f7f2 b904 	b.w	800f43c <USBD_LL_Resume>
 801d234:	e000ed00 	.word	0xe000ed00

0801d238 <atoi>:
 801d238:	220a      	movs	r2, #10
 801d23a:	2100      	movs	r1, #0
 801d23c:	f001 bb5a 	b.w	801e8f4 <strtol>

0801d240 <ctime>:
 801d240:	b508      	push	{r3, lr}
 801d242:	f000 f829 	bl	801d298 <localtime>
 801d246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d24a:	f001 be69 	b.w	801ef20 <asctime>
	...

0801d250 <__libc_init_array>:
 801d250:	b570      	push	{r4, r5, r6, lr}
 801d252:	4e0d      	ldr	r6, [pc, #52]	; (801d288 <__libc_init_array+0x38>)
 801d254:	4c0d      	ldr	r4, [pc, #52]	; (801d28c <__libc_init_array+0x3c>)
 801d256:	1ba4      	subs	r4, r4, r6
 801d258:	10a4      	asrs	r4, r4, #2
 801d25a:	2500      	movs	r5, #0
 801d25c:	42a5      	cmp	r5, r4
 801d25e:	d109      	bne.n	801d274 <__libc_init_array+0x24>
 801d260:	4e0b      	ldr	r6, [pc, #44]	; (801d290 <__libc_init_array+0x40>)
 801d262:	4c0c      	ldr	r4, [pc, #48]	; (801d294 <__libc_init_array+0x44>)
 801d264:	f004 f9fc 	bl	8021660 <_init>
 801d268:	1ba4      	subs	r4, r4, r6
 801d26a:	10a4      	asrs	r4, r4, #2
 801d26c:	2500      	movs	r5, #0
 801d26e:	42a5      	cmp	r5, r4
 801d270:	d105      	bne.n	801d27e <__libc_init_array+0x2e>
 801d272:	bd70      	pop	{r4, r5, r6, pc}
 801d274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d278:	4798      	blx	r3
 801d27a:	3501      	adds	r5, #1
 801d27c:	e7ee      	b.n	801d25c <__libc_init_array+0xc>
 801d27e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d282:	4798      	blx	r3
 801d284:	3501      	adds	r5, #1
 801d286:	e7f2      	b.n	801d26e <__libc_init_array+0x1e>
 801d288:	0803c194 	.word	0x0803c194
 801d28c:	0803c194 	.word	0x0803c194
 801d290:	0803c194 	.word	0x0803c194
 801d294:	0803c198 	.word	0x0803c198

0801d298 <localtime>:
 801d298:	b538      	push	{r3, r4, r5, lr}
 801d29a:	4b07      	ldr	r3, [pc, #28]	; (801d2b8 <localtime+0x20>)
 801d29c:	681c      	ldr	r4, [r3, #0]
 801d29e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d2a0:	4605      	mov	r5, r0
 801d2a2:	b91b      	cbnz	r3, 801d2ac <localtime+0x14>
 801d2a4:	2024      	movs	r0, #36	; 0x24
 801d2a6:	f000 f8f5 	bl	801d494 <malloc>
 801d2aa:	63e0      	str	r0, [r4, #60]	; 0x3c
 801d2ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801d2ae:	4628      	mov	r0, r5
 801d2b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d2b4:	f000 b802 	b.w	801d2bc <localtime_r>
 801d2b8:	200004b8 	.word	0x200004b8

0801d2bc <localtime_r>:
 801d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2c0:	460c      	mov	r4, r1
 801d2c2:	4680      	mov	r8, r0
 801d2c4:	f002 fe22 	bl	801ff0c <__gettzinfo>
 801d2c8:	4621      	mov	r1, r4
 801d2ca:	4607      	mov	r7, r0
 801d2cc:	4640      	mov	r0, r8
 801d2ce:	f002 fe21 	bl	801ff14 <gmtime_r>
 801d2d2:	6946      	ldr	r6, [r0, #20]
 801d2d4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801d2d8:	07b2      	lsls	r2, r6, #30
 801d2da:	4604      	mov	r4, r0
 801d2dc:	d105      	bne.n	801d2ea <localtime_r+0x2e>
 801d2de:	2264      	movs	r2, #100	; 0x64
 801d2e0:	fb96 f3f2 	sdiv	r3, r6, r2
 801d2e4:	fb02 6313 	mls	r3, r2, r3, r6
 801d2e8:	bb13      	cbnz	r3, 801d330 <localtime_r+0x74>
 801d2ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801d2ee:	fb96 f5f3 	sdiv	r5, r6, r3
 801d2f2:	fb03 6515 	mls	r5, r3, r5, r6
 801d2f6:	fab5 f585 	clz	r5, r5
 801d2fa:	096d      	lsrs	r5, r5, #5
 801d2fc:	4b63      	ldr	r3, [pc, #396]	; (801d48c <localtime_r+0x1d0>)
 801d2fe:	2230      	movs	r2, #48	; 0x30
 801d300:	fb02 3505 	mla	r5, r2, r5, r3
 801d304:	f001 fbb4 	bl	801ea70 <__tz_lock>
 801d308:	f001 fbb4 	bl	801ea74 <_tzset_unlocked>
 801d30c:	4b60      	ldr	r3, [pc, #384]	; (801d490 <localtime_r+0x1d4>)
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	b323      	cbz	r3, 801d35c <localtime_r+0xa0>
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	42b3      	cmp	r3, r6
 801d316:	d10d      	bne.n	801d334 <localtime_r+0x78>
 801d318:	683e      	ldr	r6, [r7, #0]
 801d31a:	e9d8 0100 	ldrd	r0, r1, [r8]
 801d31e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d322:	b97e      	cbnz	r6, 801d344 <localtime_r+0x88>
 801d324:	4290      	cmp	r0, r2
 801d326:	eb71 0303 	sbcs.w	r3, r1, r3
 801d32a:	db0f      	blt.n	801d34c <localtime_r+0x90>
 801d32c:	2301      	movs	r3, #1
 801d32e:	e015      	b.n	801d35c <localtime_r+0xa0>
 801d330:	2501      	movs	r5, #1
 801d332:	e7e3      	b.n	801d2fc <localtime_r+0x40>
 801d334:	4630      	mov	r0, r6
 801d336:	f001 faf3 	bl	801e920 <__tzcalc_limits>
 801d33a:	2800      	cmp	r0, #0
 801d33c:	d1ec      	bne.n	801d318 <localtime_r+0x5c>
 801d33e:	f04f 33ff 	mov.w	r3, #4294967295
 801d342:	e00b      	b.n	801d35c <localtime_r+0xa0>
 801d344:	4290      	cmp	r0, r2
 801d346:	eb71 0303 	sbcs.w	r3, r1, r3
 801d34a:	db58      	blt.n	801d3fe <localtime_r+0x142>
 801d34c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801d350:	4290      	cmp	r0, r2
 801d352:	eb71 0303 	sbcs.w	r3, r1, r3
 801d356:	bfb4      	ite	lt
 801d358:	2301      	movlt	r3, #1
 801d35a:	2300      	movge	r3, #0
 801d35c:	6223      	str	r3, [r4, #32]
 801d35e:	6a23      	ldr	r3, [r4, #32]
 801d360:	2b01      	cmp	r3, #1
 801d362:	bf0c      	ite	eq
 801d364:	6d39      	ldreq	r1, [r7, #80]	; 0x50
 801d366:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
 801d368:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801d36c:	203c      	movs	r0, #60	; 0x3c
 801d36e:	fb91 f6f3 	sdiv	r6, r1, r3
 801d372:	fb03 1316 	mls	r3, r3, r6, r1
 801d376:	6861      	ldr	r1, [r4, #4]
 801d378:	fb93 f2f0 	sdiv	r2, r3, r0
 801d37c:	fb00 3012 	mls	r0, r0, r2, r3
 801d380:	6823      	ldr	r3, [r4, #0]
 801d382:	1a89      	subs	r1, r1, r2
 801d384:	68a2      	ldr	r2, [r4, #8]
 801d386:	6061      	str	r1, [r4, #4]
 801d388:	1a1b      	subs	r3, r3, r0
 801d38a:	1b92      	subs	r2, r2, r6
 801d38c:	2b3b      	cmp	r3, #59	; 0x3b
 801d38e:	6023      	str	r3, [r4, #0]
 801d390:	60a2      	str	r2, [r4, #8]
 801d392:	dd36      	ble.n	801d402 <localtime_r+0x146>
 801d394:	3101      	adds	r1, #1
 801d396:	6061      	str	r1, [r4, #4]
 801d398:	3b3c      	subs	r3, #60	; 0x3c
 801d39a:	6023      	str	r3, [r4, #0]
 801d39c:	6863      	ldr	r3, [r4, #4]
 801d39e:	2b3b      	cmp	r3, #59	; 0x3b
 801d3a0:	dd35      	ble.n	801d40e <localtime_r+0x152>
 801d3a2:	3201      	adds	r2, #1
 801d3a4:	60a2      	str	r2, [r4, #8]
 801d3a6:	3b3c      	subs	r3, #60	; 0x3c
 801d3a8:	6063      	str	r3, [r4, #4]
 801d3aa:	68a3      	ldr	r3, [r4, #8]
 801d3ac:	2b17      	cmp	r3, #23
 801d3ae:	dd34      	ble.n	801d41a <localtime_r+0x15e>
 801d3b0:	69e2      	ldr	r2, [r4, #28]
 801d3b2:	3201      	adds	r2, #1
 801d3b4:	61e2      	str	r2, [r4, #28]
 801d3b6:	69a2      	ldr	r2, [r4, #24]
 801d3b8:	3201      	adds	r2, #1
 801d3ba:	2a06      	cmp	r2, #6
 801d3bc:	bfc8      	it	gt
 801d3be:	2200      	movgt	r2, #0
 801d3c0:	61a2      	str	r2, [r4, #24]
 801d3c2:	68e2      	ldr	r2, [r4, #12]
 801d3c4:	3b18      	subs	r3, #24
 801d3c6:	3201      	adds	r2, #1
 801d3c8:	60a3      	str	r3, [r4, #8]
 801d3ca:	6923      	ldr	r3, [r4, #16]
 801d3cc:	60e2      	str	r2, [r4, #12]
 801d3ce:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801d3d2:	428a      	cmp	r2, r1
 801d3d4:	dd0e      	ble.n	801d3f4 <localtime_r+0x138>
 801d3d6:	3301      	adds	r3, #1
 801d3d8:	2b0c      	cmp	r3, #12
 801d3da:	bf0c      	ite	eq
 801d3dc:	6963      	ldreq	r3, [r4, #20]
 801d3de:	6123      	strne	r3, [r4, #16]
 801d3e0:	eba2 0201 	sub.w	r2, r2, r1
 801d3e4:	60e2      	str	r2, [r4, #12]
 801d3e6:	bf01      	itttt	eq
 801d3e8:	3301      	addeq	r3, #1
 801d3ea:	2200      	moveq	r2, #0
 801d3ec:	6122      	streq	r2, [r4, #16]
 801d3ee:	6163      	streq	r3, [r4, #20]
 801d3f0:	bf08      	it	eq
 801d3f2:	61e2      	streq	r2, [r4, #28]
 801d3f4:	f001 fb3d 	bl	801ea72 <__tz_unlock>
 801d3f8:	4620      	mov	r0, r4
 801d3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3fe:	2300      	movs	r3, #0
 801d400:	e7ac      	b.n	801d35c <localtime_r+0xa0>
 801d402:	2b00      	cmp	r3, #0
 801d404:	daca      	bge.n	801d39c <localtime_r+0xe0>
 801d406:	3901      	subs	r1, #1
 801d408:	6061      	str	r1, [r4, #4]
 801d40a:	333c      	adds	r3, #60	; 0x3c
 801d40c:	e7c5      	b.n	801d39a <localtime_r+0xde>
 801d40e:	2b00      	cmp	r3, #0
 801d410:	dacb      	bge.n	801d3aa <localtime_r+0xee>
 801d412:	3a01      	subs	r2, #1
 801d414:	60a2      	str	r2, [r4, #8]
 801d416:	333c      	adds	r3, #60	; 0x3c
 801d418:	e7c6      	b.n	801d3a8 <localtime_r+0xec>
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	daea      	bge.n	801d3f4 <localtime_r+0x138>
 801d41e:	69e2      	ldr	r2, [r4, #28]
 801d420:	3a01      	subs	r2, #1
 801d422:	61e2      	str	r2, [r4, #28]
 801d424:	69a2      	ldr	r2, [r4, #24]
 801d426:	3a01      	subs	r2, #1
 801d428:	bf48      	it	mi
 801d42a:	2206      	movmi	r2, #6
 801d42c:	61a2      	str	r2, [r4, #24]
 801d42e:	68e2      	ldr	r2, [r4, #12]
 801d430:	3318      	adds	r3, #24
 801d432:	3a01      	subs	r2, #1
 801d434:	60e2      	str	r2, [r4, #12]
 801d436:	60a3      	str	r3, [r4, #8]
 801d438:	2a00      	cmp	r2, #0
 801d43a:	d1db      	bne.n	801d3f4 <localtime_r+0x138>
 801d43c:	6923      	ldr	r3, [r4, #16]
 801d43e:	3b01      	subs	r3, #1
 801d440:	d405      	bmi.n	801d44e <localtime_r+0x192>
 801d442:	6123      	str	r3, [r4, #16]
 801d444:	6923      	ldr	r3, [r4, #16]
 801d446:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801d44a:	60e3      	str	r3, [r4, #12]
 801d44c:	e7d2      	b.n	801d3f4 <localtime_r+0x138>
 801d44e:	6962      	ldr	r2, [r4, #20]
 801d450:	230b      	movs	r3, #11
 801d452:	1e51      	subs	r1, r2, #1
 801d454:	6123      	str	r3, [r4, #16]
 801d456:	078b      	lsls	r3, r1, #30
 801d458:	6161      	str	r1, [r4, #20]
 801d45a:	f202 726b 	addw	r2, r2, #1899	; 0x76b
 801d45e:	d105      	bne.n	801d46c <localtime_r+0x1b0>
 801d460:	2164      	movs	r1, #100	; 0x64
 801d462:	fb92 f3f1 	sdiv	r3, r2, r1
 801d466:	fb01 2313 	mls	r3, r1, r3, r2
 801d46a:	b963      	cbnz	r3, 801d486 <localtime_r+0x1ca>
 801d46c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801d470:	fb92 f3f1 	sdiv	r3, r2, r1
 801d474:	fb01 2313 	mls	r3, r1, r3, r2
 801d478:	fab3 f383 	clz	r3, r3
 801d47c:	095b      	lsrs	r3, r3, #5
 801d47e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801d482:	61e3      	str	r3, [r4, #28]
 801d484:	e7de      	b.n	801d444 <localtime_r+0x188>
 801d486:	2301      	movs	r3, #1
 801d488:	e7f9      	b.n	801d47e <localtime_r+0x1c2>
 801d48a:	bf00      	nop
 801d48c:	0803bdbc 	.word	0x0803bdbc
 801d490:	20021834 	.word	0x20021834

0801d494 <malloc>:
 801d494:	4b02      	ldr	r3, [pc, #8]	; (801d4a0 <malloc+0xc>)
 801d496:	4601      	mov	r1, r0
 801d498:	6818      	ldr	r0, [r3, #0]
 801d49a:	f000 bb0f 	b.w	801dabc <_malloc_r>
 801d49e:	bf00      	nop
 801d4a0:	200004b8 	.word	0x200004b8

0801d4a4 <free>:
 801d4a4:	4b02      	ldr	r3, [pc, #8]	; (801d4b0 <free+0xc>)
 801d4a6:	4601      	mov	r1, r0
 801d4a8:	6818      	ldr	r0, [r3, #0]
 801d4aa:	f000 bab9 	b.w	801da20 <_free_r>
 801d4ae:	bf00      	nop
 801d4b0:	200004b8 	.word	0x200004b8

0801d4b4 <memcmp>:
 801d4b4:	b530      	push	{r4, r5, lr}
 801d4b6:	2400      	movs	r4, #0
 801d4b8:	42a2      	cmp	r2, r4
 801d4ba:	d101      	bne.n	801d4c0 <memcmp+0xc>
 801d4bc:	2000      	movs	r0, #0
 801d4be:	e007      	b.n	801d4d0 <memcmp+0x1c>
 801d4c0:	5d03      	ldrb	r3, [r0, r4]
 801d4c2:	3401      	adds	r4, #1
 801d4c4:	190d      	adds	r5, r1, r4
 801d4c6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801d4ca:	42ab      	cmp	r3, r5
 801d4cc:	d0f4      	beq.n	801d4b8 <memcmp+0x4>
 801d4ce:	1b58      	subs	r0, r3, r5
 801d4d0:	bd30      	pop	{r4, r5, pc}

0801d4d2 <memcpy>:
 801d4d2:	b510      	push	{r4, lr}
 801d4d4:	1e43      	subs	r3, r0, #1
 801d4d6:	440a      	add	r2, r1
 801d4d8:	4291      	cmp	r1, r2
 801d4da:	d100      	bne.n	801d4de <memcpy+0xc>
 801d4dc:	bd10      	pop	{r4, pc}
 801d4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d4e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d4e6:	e7f7      	b.n	801d4d8 <memcpy+0x6>

0801d4e8 <memset>:
 801d4e8:	4402      	add	r2, r0
 801d4ea:	4603      	mov	r3, r0
 801d4ec:	4293      	cmp	r3, r2
 801d4ee:	d100      	bne.n	801d4f2 <memset+0xa>
 801d4f0:	4770      	bx	lr
 801d4f2:	f803 1b01 	strb.w	r1, [r3], #1
 801d4f6:	e7f9      	b.n	801d4ec <memset+0x4>

0801d4f8 <validate_structure>:
 801d4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d4fa:	6801      	ldr	r1, [r0, #0]
 801d4fc:	293b      	cmp	r1, #59	; 0x3b
 801d4fe:	4604      	mov	r4, r0
 801d500:	d911      	bls.n	801d526 <validate_structure+0x2e>
 801d502:	223c      	movs	r2, #60	; 0x3c
 801d504:	4668      	mov	r0, sp
 801d506:	f001 fd57 	bl	801efb8 <div>
 801d50a:	9a01      	ldr	r2, [sp, #4]
 801d50c:	6863      	ldr	r3, [r4, #4]
 801d50e:	9900      	ldr	r1, [sp, #0]
 801d510:	2a00      	cmp	r2, #0
 801d512:	440b      	add	r3, r1
 801d514:	6063      	str	r3, [r4, #4]
 801d516:	bfbb      	ittet	lt
 801d518:	323c      	addlt	r2, #60	; 0x3c
 801d51a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801d51e:	6022      	strge	r2, [r4, #0]
 801d520:	6022      	strlt	r2, [r4, #0]
 801d522:	bfb8      	it	lt
 801d524:	6063      	strlt	r3, [r4, #4]
 801d526:	6861      	ldr	r1, [r4, #4]
 801d528:	293b      	cmp	r1, #59	; 0x3b
 801d52a:	d911      	bls.n	801d550 <validate_structure+0x58>
 801d52c:	223c      	movs	r2, #60	; 0x3c
 801d52e:	4668      	mov	r0, sp
 801d530:	f001 fd42 	bl	801efb8 <div>
 801d534:	9a01      	ldr	r2, [sp, #4]
 801d536:	68a3      	ldr	r3, [r4, #8]
 801d538:	9900      	ldr	r1, [sp, #0]
 801d53a:	2a00      	cmp	r2, #0
 801d53c:	440b      	add	r3, r1
 801d53e:	60a3      	str	r3, [r4, #8]
 801d540:	bfbb      	ittet	lt
 801d542:	323c      	addlt	r2, #60	; 0x3c
 801d544:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801d548:	6062      	strge	r2, [r4, #4]
 801d54a:	6062      	strlt	r2, [r4, #4]
 801d54c:	bfb8      	it	lt
 801d54e:	60a3      	strlt	r3, [r4, #8]
 801d550:	68a1      	ldr	r1, [r4, #8]
 801d552:	2917      	cmp	r1, #23
 801d554:	d911      	bls.n	801d57a <validate_structure+0x82>
 801d556:	2218      	movs	r2, #24
 801d558:	4668      	mov	r0, sp
 801d55a:	f001 fd2d 	bl	801efb8 <div>
 801d55e:	9a01      	ldr	r2, [sp, #4]
 801d560:	68e3      	ldr	r3, [r4, #12]
 801d562:	9900      	ldr	r1, [sp, #0]
 801d564:	2a00      	cmp	r2, #0
 801d566:	440b      	add	r3, r1
 801d568:	60e3      	str	r3, [r4, #12]
 801d56a:	bfbb      	ittet	lt
 801d56c:	3218      	addlt	r2, #24
 801d56e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801d572:	60a2      	strge	r2, [r4, #8]
 801d574:	60a2      	strlt	r2, [r4, #8]
 801d576:	bfb8      	it	lt
 801d578:	60e3      	strlt	r3, [r4, #12]
 801d57a:	6921      	ldr	r1, [r4, #16]
 801d57c:	290b      	cmp	r1, #11
 801d57e:	d911      	bls.n	801d5a4 <validate_structure+0xac>
 801d580:	220c      	movs	r2, #12
 801d582:	4668      	mov	r0, sp
 801d584:	f001 fd18 	bl	801efb8 <div>
 801d588:	9a01      	ldr	r2, [sp, #4]
 801d58a:	6963      	ldr	r3, [r4, #20]
 801d58c:	9900      	ldr	r1, [sp, #0]
 801d58e:	2a00      	cmp	r2, #0
 801d590:	440b      	add	r3, r1
 801d592:	6163      	str	r3, [r4, #20]
 801d594:	bfbb      	ittet	lt
 801d596:	320c      	addlt	r2, #12
 801d598:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801d59c:	6122      	strge	r2, [r4, #16]
 801d59e:	6122      	strlt	r2, [r4, #16]
 801d5a0:	bfb8      	it	lt
 801d5a2:	6163      	strlt	r3, [r4, #20]
 801d5a4:	6963      	ldr	r3, [r4, #20]
 801d5a6:	0799      	lsls	r1, r3, #30
 801d5a8:	d120      	bne.n	801d5ec <validate_structure+0xf4>
 801d5aa:	2164      	movs	r1, #100	; 0x64
 801d5ac:	fb93 f2f1 	sdiv	r2, r3, r1
 801d5b0:	fb01 3212 	mls	r2, r1, r2, r3
 801d5b4:	b9e2      	cbnz	r2, 801d5f0 <validate_structure+0xf8>
 801d5b6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801d5ba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801d5be:	fb93 f2f1 	sdiv	r2, r3, r1
 801d5c2:	fb01 3312 	mls	r3, r1, r2, r3
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	bf14      	ite	ne
 801d5ca:	231c      	movne	r3, #28
 801d5cc:	231d      	moveq	r3, #29
 801d5ce:	68e2      	ldr	r2, [r4, #12]
 801d5d0:	2a00      	cmp	r2, #0
 801d5d2:	dc0f      	bgt.n	801d5f4 <validate_structure+0xfc>
 801d5d4:	4f34      	ldr	r7, [pc, #208]	; (801d6a8 <validate_structure+0x1b0>)
 801d5d6:	260b      	movs	r6, #11
 801d5d8:	2064      	movs	r0, #100	; 0x64
 801d5da:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801d5de:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801d5e2:	f1bc 0f00 	cmp.w	ip, #0
 801d5e6:	dd14      	ble.n	801d612 <validate_structure+0x11a>
 801d5e8:	b003      	add	sp, #12
 801d5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d5ec:	231c      	movs	r3, #28
 801d5ee:	e7ee      	b.n	801d5ce <validate_structure+0xd6>
 801d5f0:	231d      	movs	r3, #29
 801d5f2:	e7ec      	b.n	801d5ce <validate_structure+0xd6>
 801d5f4:	4f2c      	ldr	r7, [pc, #176]	; (801d6a8 <validate_structure+0x1b0>)
 801d5f6:	f04f 0c00 	mov.w	ip, #0
 801d5fa:	2564      	movs	r5, #100	; 0x64
 801d5fc:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801d600:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801d604:	2a01      	cmp	r2, #1
 801d606:	d02f      	beq.n	801d668 <validate_structure+0x170>
 801d608:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 801d60c:	4281      	cmp	r1, r0
 801d60e:	dc2e      	bgt.n	801d66e <validate_structure+0x176>
 801d610:	e7ea      	b.n	801d5e8 <validate_structure+0xf0>
 801d612:	6921      	ldr	r1, [r4, #16]
 801d614:	3901      	subs	r1, #1
 801d616:	6121      	str	r1, [r4, #16]
 801d618:	3101      	adds	r1, #1
 801d61a:	d114      	bne.n	801d646 <validate_structure+0x14e>
 801d61c:	6963      	ldr	r3, [r4, #20]
 801d61e:	1e59      	subs	r1, r3, #1
 801d620:	078a      	lsls	r2, r1, #30
 801d622:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801d626:	d117      	bne.n	801d658 <validate_structure+0x160>
 801d628:	fb91 f2f0 	sdiv	r2, r1, r0
 801d62c:	fb00 1112 	mls	r1, r0, r2, r1
 801d630:	b9a1      	cbnz	r1, 801d65c <validate_structure+0x164>
 801d632:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801d636:	fb93 f2f5 	sdiv	r2, r3, r5
 801d63a:	fb05 3312 	mls	r3, r5, r2, r3
 801d63e:	2b00      	cmp	r3, #0
 801d640:	bf14      	ite	ne
 801d642:	231c      	movne	r3, #28
 801d644:	231d      	moveq	r3, #29
 801d646:	6922      	ldr	r2, [r4, #16]
 801d648:	2a01      	cmp	r2, #1
 801d64a:	bf14      	ite	ne
 801d64c:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801d650:	461a      	moveq	r2, r3
 801d652:	4462      	add	r2, ip
 801d654:	60e2      	str	r2, [r4, #12]
 801d656:	e7c2      	b.n	801d5de <validate_structure+0xe6>
 801d658:	231c      	movs	r3, #28
 801d65a:	e7f4      	b.n	801d646 <validate_structure+0x14e>
 801d65c:	231d      	movs	r3, #29
 801d65e:	e7f2      	b.n	801d646 <validate_structure+0x14e>
 801d660:	231c      	movs	r3, #28
 801d662:	e7cd      	b.n	801d600 <validate_structure+0x108>
 801d664:	231d      	movs	r3, #29
 801d666:	e7cb      	b.n	801d600 <validate_structure+0x108>
 801d668:	428b      	cmp	r3, r1
 801d66a:	dabd      	bge.n	801d5e8 <validate_structure+0xf0>
 801d66c:	4618      	mov	r0, r3
 801d66e:	3201      	adds	r2, #1
 801d670:	1a09      	subs	r1, r1, r0
 801d672:	2a0c      	cmp	r2, #12
 801d674:	60e1      	str	r1, [r4, #12]
 801d676:	6122      	str	r2, [r4, #16]
 801d678:	d1c2      	bne.n	801d600 <validate_structure+0x108>
 801d67a:	6963      	ldr	r3, [r4, #20]
 801d67c:	1c5a      	adds	r2, r3, #1
 801d67e:	0791      	lsls	r1, r2, #30
 801d680:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801d684:	d1ec      	bne.n	801d660 <validate_structure+0x168>
 801d686:	fb92 f1f5 	sdiv	r1, r2, r5
 801d68a:	fb05 2211 	mls	r2, r5, r1, r2
 801d68e:	2a00      	cmp	r2, #0
 801d690:	d1e8      	bne.n	801d664 <validate_structure+0x16c>
 801d692:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801d696:	fb93 f2f6 	sdiv	r2, r3, r6
 801d69a:	fb06 3312 	mls	r3, r6, r2, r3
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	bf14      	ite	ne
 801d6a2:	231c      	movne	r3, #28
 801d6a4:	231d      	moveq	r3, #29
 801d6a6:	e7ab      	b.n	801d600 <validate_structure+0x108>
 801d6a8:	0803bd5c 	.word	0x0803bd5c

0801d6ac <mktime>:
 801d6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6b0:	b089      	sub	sp, #36	; 0x24
 801d6b2:	4606      	mov	r6, r0
 801d6b4:	f002 fc2a 	bl	801ff0c <__gettzinfo>
 801d6b8:	4680      	mov	r8, r0
 801d6ba:	4630      	mov	r0, r6
 801d6bc:	f7ff ff1c 	bl	801d4f8 <validate_structure>
 801d6c0:	e9d6 3000 	ldrd	r3, r0, [r6]
 801d6c4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801d6c8:	fb0a 3a00 	mla	sl, sl, r0, r3
 801d6cc:	68b0      	ldr	r0, [r6, #8]
 801d6ce:	4abe      	ldr	r2, [pc, #760]	; (801d9c8 <mktime+0x31c>)
 801d6d0:	6975      	ldr	r5, [r6, #20]
 801d6d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801d6d6:	fb03 aa00 	mla	sl, r3, r0, sl
 801d6da:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 801d6de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801d6e2:	3c01      	subs	r4, #1
 801d6e4:	2b01      	cmp	r3, #1
 801d6e6:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801d6ea:	4414      	add	r4, r2
 801d6ec:	dd11      	ble.n	801d712 <mktime+0x66>
 801d6ee:	07a9      	lsls	r1, r5, #30
 801d6f0:	d10f      	bne.n	801d712 <mktime+0x66>
 801d6f2:	2264      	movs	r2, #100	; 0x64
 801d6f4:	fb95 f3f2 	sdiv	r3, r5, r2
 801d6f8:	fb02 5313 	mls	r3, r2, r3, r5
 801d6fc:	b943      	cbnz	r3, 801d710 <mktime+0x64>
 801d6fe:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801d702:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d706:	fb91 f3f2 	sdiv	r3, r1, r2
 801d70a:	fb02 1313 	mls	r3, r2, r3, r1
 801d70e:	b903      	cbnz	r3, 801d712 <mktime+0x66>
 801d710:	3401      	adds	r4, #1
 801d712:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 801d716:	3310      	adds	r3, #16
 801d718:	f644 6220 	movw	r2, #20000	; 0x4e20
 801d71c:	4293      	cmp	r3, r2
 801d71e:	61f4      	str	r4, [r6, #28]
 801d720:	f200 8179 	bhi.w	801da16 <mktime+0x36a>
 801d724:	2d46      	cmp	r5, #70	; 0x46
 801d726:	f340 8084 	ble.w	801d832 <mktime+0x186>
 801d72a:	2346      	movs	r3, #70	; 0x46
 801d72c:	f240 176d 	movw	r7, #365	; 0x16d
 801d730:	2164      	movs	r1, #100	; 0x64
 801d732:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801d736:	079a      	lsls	r2, r3, #30
 801d738:	d175      	bne.n	801d826 <mktime+0x17a>
 801d73a:	fb93 f2f1 	sdiv	r2, r3, r1
 801d73e:	fb01 3212 	mls	r2, r1, r2, r3
 801d742:	2a00      	cmp	r2, #0
 801d744:	d172      	bne.n	801d82c <mktime+0x180>
 801d746:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801d74a:	fb9c f2f0 	sdiv	r2, ip, r0
 801d74e:	fb00 c212 	mls	r2, r0, r2, ip
 801d752:	2a00      	cmp	r2, #0
 801d754:	bf14      	ite	ne
 801d756:	463a      	movne	r2, r7
 801d758:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801d75c:	3301      	adds	r3, #1
 801d75e:	429d      	cmp	r5, r3
 801d760:	4414      	add	r4, r2
 801d762:	d1e8      	bne.n	801d736 <mktime+0x8a>
 801d764:	4b99      	ldr	r3, [pc, #612]	; (801d9cc <mktime+0x320>)
 801d766:	4363      	muls	r3, r4
 801d768:	eb1a 0103 	adds.w	r1, sl, r3
 801d76c:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 801d770:	e9cd 1200 	strd	r1, r2, [sp]
 801d774:	f001 f97c 	bl	801ea70 <__tz_lock>
 801d778:	f001 f97c 	bl	801ea74 <_tzset_unlocked>
 801d77c:	4b94      	ldr	r3, [pc, #592]	; (801d9d0 <mktime+0x324>)
 801d77e:	f8d3 9000 	ldr.w	r9, [r3]
 801d782:	f1b9 0f00 	cmp.w	r9, #0
 801d786:	d045      	beq.n	801d814 <mktime+0x168>
 801d788:	f8d6 9020 	ldr.w	r9, [r6, #32]
 801d78c:	6970      	ldr	r0, [r6, #20]
 801d78e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d792:	464f      	mov	r7, r9
 801d794:	2f01      	cmp	r7, #1
 801d796:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801d79a:	bfa8      	it	ge
 801d79c:	2701      	movge	r7, #1
 801d79e:	4283      	cmp	r3, r0
 801d7a0:	f040 8089 	bne.w	801d8b6 <mktime+0x20a>
 801d7a4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801d7a8:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 801d7ac:	460a      	mov	r2, r1
 801d7ae:	17cb      	asrs	r3, r1, #31
 801d7b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d7b4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801d7b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d7bc:	1a12      	subs	r2, r2, r0
 801d7be:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 801d7c2:	4692      	mov	sl, r2
 801d7c4:	469b      	mov	fp, r3
 801d7c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d7ca:	4552      	cmp	r2, sl
 801d7cc:	eb73 0c0b 	sbcs.w	ip, r3, fp
 801d7d0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 801d7d4:	da76      	bge.n	801d8c4 <mktime+0x218>
 801d7d6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801d7da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801d7de:	ebb2 0a0a 	subs.w	sl, r2, sl
 801d7e2:	eb63 0b0b 	sbc.w	fp, r3, fp
 801d7e6:	f8d8 3000 	ldr.w	r3, [r8]
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	d079      	beq.n	801d8e2 <mktime+0x236>
 801d7ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d7f2:	4552      	cmp	r2, sl
 801d7f4:	eb73 030b 	sbcs.w	r3, r3, fp
 801d7f8:	db07      	blt.n	801d80a <mktime+0x15e>
 801d7fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d7fe:	e9dd ab00 	ldrd	sl, fp, [sp]
 801d802:	4592      	cmp	sl, r2
 801d804:	eb7b 0303 	sbcs.w	r3, fp, r3
 801d808:	db71      	blt.n	801d8ee <mktime+0x242>
 801d80a:	f1b9 0f00 	cmp.w	r9, #0
 801d80e:	f04f 0900 	mov.w	r9, #0
 801d812:	da71      	bge.n	801d8f8 <mktime+0x24c>
 801d814:	e9dd ab00 	ldrd	sl, fp, [sp]
 801d818:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801d81c:	eb1a 0a03 	adds.w	sl, sl, r3
 801d820:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801d824:	e0b4      	b.n	801d990 <mktime+0x2e4>
 801d826:	f240 126d 	movw	r2, #365	; 0x16d
 801d82a:	e797      	b.n	801d75c <mktime+0xb0>
 801d82c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801d830:	e794      	b.n	801d75c <mktime+0xb0>
 801d832:	d097      	beq.n	801d764 <mktime+0xb8>
 801d834:	2345      	movs	r3, #69	; 0x45
 801d836:	f240 176d 	movw	r7, #365	; 0x16d
 801d83a:	2164      	movs	r1, #100	; 0x64
 801d83c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801d840:	e012      	b.n	801d868 <mktime+0x1bc>
 801d842:	bb62      	cbnz	r2, 801d89e <mktime+0x1f2>
 801d844:	fb93 f2f1 	sdiv	r2, r3, r1
 801d848:	fb01 3212 	mls	r2, r1, r2, r3
 801d84c:	bb52      	cbnz	r2, 801d8a4 <mktime+0x1f8>
 801d84e:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801d852:	fb9c f2f0 	sdiv	r2, ip, r0
 801d856:	fb00 c212 	mls	r2, r0, r2, ip
 801d85a:	2a00      	cmp	r2, #0
 801d85c:	bf14      	ite	ne
 801d85e:	463a      	movne	r2, r7
 801d860:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801d864:	1aa4      	subs	r4, r4, r2
 801d866:	3b01      	subs	r3, #1
 801d868:	429d      	cmp	r5, r3
 801d86a:	f003 0203 	and.w	r2, r3, #3
 801d86e:	dbe8      	blt.n	801d842 <mktime+0x196>
 801d870:	b9da      	cbnz	r2, 801d8aa <mktime+0x1fe>
 801d872:	2264      	movs	r2, #100	; 0x64
 801d874:	fb95 f3f2 	sdiv	r3, r5, r2
 801d878:	fb02 5313 	mls	r3, r2, r3, r5
 801d87c:	b9c3      	cbnz	r3, 801d8b0 <mktime+0x204>
 801d87e:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801d882:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d886:	fb91 f3f2 	sdiv	r3, r1, r2
 801d88a:	fb02 1313 	mls	r3, r2, r3, r1
 801d88e:	2b00      	cmp	r3, #0
 801d890:	f240 136d 	movw	r3, #365	; 0x16d
 801d894:	bf08      	it	eq
 801d896:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801d89a:	1ae4      	subs	r4, r4, r3
 801d89c:	e762      	b.n	801d764 <mktime+0xb8>
 801d89e:	f240 126d 	movw	r2, #365	; 0x16d
 801d8a2:	e7df      	b.n	801d864 <mktime+0x1b8>
 801d8a4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801d8a8:	e7dc      	b.n	801d864 <mktime+0x1b8>
 801d8aa:	f240 136d 	movw	r3, #365	; 0x16d
 801d8ae:	e7f4      	b.n	801d89a <mktime+0x1ee>
 801d8b0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801d8b4:	e7f1      	b.n	801d89a <mktime+0x1ee>
 801d8b6:	f001 f833 	bl	801e920 <__tzcalc_limits>
 801d8ba:	2800      	cmp	r0, #0
 801d8bc:	f47f af72 	bne.w	801d7a4 <mktime+0xf8>
 801d8c0:	46b9      	mov	r9, r7
 801d8c2:	e057      	b.n	801d974 <mktime+0x2c8>
 801d8c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801d8c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d8cc:	ebb2 020a 	subs.w	r2, r2, sl
 801d8d0:	eb63 030b 	sbc.w	r3, r3, fp
 801d8d4:	e9dd ab00 	ldrd	sl, fp, [sp]
 801d8d8:	4592      	cmp	sl, r2
 801d8da:	eb7b 0303 	sbcs.w	r3, fp, r3
 801d8de:	dbef      	blt.n	801d8c0 <mktime+0x214>
 801d8e0:	e779      	b.n	801d7d6 <mktime+0x12a>
 801d8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d8e6:	4552      	cmp	r2, sl
 801d8e8:	eb73 030b 	sbcs.w	r3, r3, fp
 801d8ec:	db85      	blt.n	801d7fa <mktime+0x14e>
 801d8ee:	f1b9 0f00 	cmp.w	r9, #0
 801d8f2:	db43      	blt.n	801d97c <mktime+0x2d0>
 801d8f4:	f04f 0901 	mov.w	r9, #1
 801d8f8:	ea87 0709 	eor.w	r7, r7, r9
 801d8fc:	2f01      	cmp	r7, #1
 801d8fe:	d139      	bne.n	801d974 <mktime+0x2c8>
 801d900:	1a40      	subs	r0, r0, r1
 801d902:	f1b9 0f00 	cmp.w	r9, #0
 801d906:	d100      	bne.n	801d90a <mktime+0x25e>
 801d908:	4240      	negs	r0, r0
 801d90a:	6833      	ldr	r3, [r6, #0]
 801d90c:	4403      	add	r3, r0
 801d90e:	6033      	str	r3, [r6, #0]
 801d910:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d914:	1812      	adds	r2, r2, r0
 801d916:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 801d91a:	e9cd 2300 	strd	r2, r3, [sp]
 801d91e:	4630      	mov	r0, r6
 801d920:	68f2      	ldr	r2, [r6, #12]
 801d922:	9202      	str	r2, [sp, #8]
 801d924:	f7ff fde8 	bl	801d4f8 <validate_structure>
 801d928:	68f3      	ldr	r3, [r6, #12]
 801d92a:	9a02      	ldr	r2, [sp, #8]
 801d92c:	1a9b      	subs	r3, r3, r2
 801d92e:	d021      	beq.n	801d974 <mktime+0x2c8>
 801d930:	2b01      	cmp	r3, #1
 801d932:	dc40      	bgt.n	801d9b6 <mktime+0x30a>
 801d934:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d938:	bfa8      	it	ge
 801d93a:	461f      	movge	r7, r3
 801d93c:	69f3      	ldr	r3, [r6, #28]
 801d93e:	443c      	add	r4, r7
 801d940:	18ff      	adds	r7, r7, r3
 801d942:	d547      	bpl.n	801d9d4 <mktime+0x328>
 801d944:	1e6a      	subs	r2, r5, #1
 801d946:	0791      	lsls	r1, r2, #30
 801d948:	d138      	bne.n	801d9bc <mktime+0x310>
 801d94a:	2164      	movs	r1, #100	; 0x64
 801d94c:	fb92 f3f1 	sdiv	r3, r2, r1
 801d950:	fb01 2313 	mls	r3, r1, r3, r2
 801d954:	bbab      	cbnz	r3, 801d9c2 <mktime+0x316>
 801d956:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 801d95a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d95e:	fb95 f3f2 	sdiv	r3, r5, r2
 801d962:	fb02 5513 	mls	r5, r2, r3, r5
 801d966:	2d00      	cmp	r5, #0
 801d968:	f240 136d 	movw	r3, #365	; 0x16d
 801d96c:	bf18      	it	ne
 801d96e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801d972:	61f3      	str	r3, [r6, #28]
 801d974:	f1b9 0f01 	cmp.w	r9, #1
 801d978:	f47f af4c 	bne.w	801d814 <mktime+0x168>
 801d97c:	e9dd ab00 	ldrd	sl, fp, [sp]
 801d980:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 801d984:	eb1a 0a03 	adds.w	sl, sl, r3
 801d988:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801d98c:	f04f 0901 	mov.w	r9, #1
 801d990:	f001 f86f 	bl	801ea72 <__tz_unlock>
 801d994:	3404      	adds	r4, #4
 801d996:	2307      	movs	r3, #7
 801d998:	fb94 f3f3 	sdiv	r3, r4, r3
 801d99c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801d9a0:	1ae4      	subs	r4, r4, r3
 801d9a2:	bf48      	it	mi
 801d9a4:	3407      	addmi	r4, #7
 801d9a6:	f8c6 9020 	str.w	r9, [r6, #32]
 801d9aa:	61b4      	str	r4, [r6, #24]
 801d9ac:	4650      	mov	r0, sl
 801d9ae:	4659      	mov	r1, fp
 801d9b0:	b009      	add	sp, #36	; 0x24
 801d9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9b6:	f04f 37ff 	mov.w	r7, #4294967295
 801d9ba:	e7bf      	b.n	801d93c <mktime+0x290>
 801d9bc:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801d9c0:	e7d7      	b.n	801d972 <mktime+0x2c6>
 801d9c2:	f240 136d 	movw	r3, #365	; 0x16d
 801d9c6:	e7d4      	b.n	801d972 <mktime+0x2c6>
 801d9c8:	0803bd8c 	.word	0x0803bd8c
 801d9cc:	00015180 	.word	0x00015180
 801d9d0:	20021834 	.word	0x20021834
 801d9d4:	07ab      	lsls	r3, r5, #30
 801d9d6:	d118      	bne.n	801da0a <mktime+0x35e>
 801d9d8:	2264      	movs	r2, #100	; 0x64
 801d9da:	fb95 f3f2 	sdiv	r3, r5, r2
 801d9de:	fb02 5313 	mls	r3, r2, r3, r5
 801d9e2:	b9ab      	cbnz	r3, 801da10 <mktime+0x364>
 801d9e4:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 801d9e8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d9ec:	fb95 f3f2 	sdiv	r3, r5, r2
 801d9f0:	fb02 5513 	mls	r5, r2, r3, r5
 801d9f4:	2d00      	cmp	r5, #0
 801d9f6:	f240 136d 	movw	r3, #365	; 0x16d
 801d9fa:	bf08      	it	eq
 801d9fc:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801da00:	429f      	cmp	r7, r3
 801da02:	bfa8      	it	ge
 801da04:	1aff      	subge	r7, r7, r3
 801da06:	61f7      	str	r7, [r6, #28]
 801da08:	e7b4      	b.n	801d974 <mktime+0x2c8>
 801da0a:	f240 136d 	movw	r3, #365	; 0x16d
 801da0e:	e7f7      	b.n	801da00 <mktime+0x354>
 801da10:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801da14:	e7f4      	b.n	801da00 <mktime+0x354>
 801da16:	f04f 3aff 	mov.w	sl, #4294967295
 801da1a:	f04f 3bff 	mov.w	fp, #4294967295
 801da1e:	e7c5      	b.n	801d9ac <mktime+0x300>

0801da20 <_free_r>:
 801da20:	b538      	push	{r3, r4, r5, lr}
 801da22:	4605      	mov	r5, r0
 801da24:	2900      	cmp	r1, #0
 801da26:	d045      	beq.n	801dab4 <_free_r+0x94>
 801da28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801da2c:	1f0c      	subs	r4, r1, #4
 801da2e:	2b00      	cmp	r3, #0
 801da30:	bfb8      	it	lt
 801da32:	18e4      	addlt	r4, r4, r3
 801da34:	f002 fbc4 	bl	80201c0 <__malloc_lock>
 801da38:	4a1f      	ldr	r2, [pc, #124]	; (801dab8 <_free_r+0x98>)
 801da3a:	6813      	ldr	r3, [r2, #0]
 801da3c:	4610      	mov	r0, r2
 801da3e:	b933      	cbnz	r3, 801da4e <_free_r+0x2e>
 801da40:	6063      	str	r3, [r4, #4]
 801da42:	6014      	str	r4, [r2, #0]
 801da44:	4628      	mov	r0, r5
 801da46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da4a:	f002 bbba 	b.w	80201c2 <__malloc_unlock>
 801da4e:	42a3      	cmp	r3, r4
 801da50:	d90c      	bls.n	801da6c <_free_r+0x4c>
 801da52:	6821      	ldr	r1, [r4, #0]
 801da54:	1862      	adds	r2, r4, r1
 801da56:	4293      	cmp	r3, r2
 801da58:	bf04      	itt	eq
 801da5a:	681a      	ldreq	r2, [r3, #0]
 801da5c:	685b      	ldreq	r3, [r3, #4]
 801da5e:	6063      	str	r3, [r4, #4]
 801da60:	bf04      	itt	eq
 801da62:	1852      	addeq	r2, r2, r1
 801da64:	6022      	streq	r2, [r4, #0]
 801da66:	6004      	str	r4, [r0, #0]
 801da68:	e7ec      	b.n	801da44 <_free_r+0x24>
 801da6a:	4613      	mov	r3, r2
 801da6c:	685a      	ldr	r2, [r3, #4]
 801da6e:	b10a      	cbz	r2, 801da74 <_free_r+0x54>
 801da70:	42a2      	cmp	r2, r4
 801da72:	d9fa      	bls.n	801da6a <_free_r+0x4a>
 801da74:	6819      	ldr	r1, [r3, #0]
 801da76:	1858      	adds	r0, r3, r1
 801da78:	42a0      	cmp	r0, r4
 801da7a:	d10b      	bne.n	801da94 <_free_r+0x74>
 801da7c:	6820      	ldr	r0, [r4, #0]
 801da7e:	4401      	add	r1, r0
 801da80:	1858      	adds	r0, r3, r1
 801da82:	4282      	cmp	r2, r0
 801da84:	6019      	str	r1, [r3, #0]
 801da86:	d1dd      	bne.n	801da44 <_free_r+0x24>
 801da88:	6810      	ldr	r0, [r2, #0]
 801da8a:	6852      	ldr	r2, [r2, #4]
 801da8c:	605a      	str	r2, [r3, #4]
 801da8e:	4401      	add	r1, r0
 801da90:	6019      	str	r1, [r3, #0]
 801da92:	e7d7      	b.n	801da44 <_free_r+0x24>
 801da94:	d902      	bls.n	801da9c <_free_r+0x7c>
 801da96:	230c      	movs	r3, #12
 801da98:	602b      	str	r3, [r5, #0]
 801da9a:	e7d3      	b.n	801da44 <_free_r+0x24>
 801da9c:	6820      	ldr	r0, [r4, #0]
 801da9e:	1821      	adds	r1, r4, r0
 801daa0:	428a      	cmp	r2, r1
 801daa2:	bf04      	itt	eq
 801daa4:	6811      	ldreq	r1, [r2, #0]
 801daa6:	6852      	ldreq	r2, [r2, #4]
 801daa8:	6062      	str	r2, [r4, #4]
 801daaa:	bf04      	itt	eq
 801daac:	1809      	addeq	r1, r1, r0
 801daae:	6021      	streq	r1, [r4, #0]
 801dab0:	605c      	str	r4, [r3, #4]
 801dab2:	e7c7      	b.n	801da44 <_free_r+0x24>
 801dab4:	bd38      	pop	{r3, r4, r5, pc}
 801dab6:	bf00      	nop
 801dab8:	20021810 	.word	0x20021810

0801dabc <_malloc_r>:
 801dabc:	b570      	push	{r4, r5, r6, lr}
 801dabe:	1ccd      	adds	r5, r1, #3
 801dac0:	f025 0503 	bic.w	r5, r5, #3
 801dac4:	3508      	adds	r5, #8
 801dac6:	2d0c      	cmp	r5, #12
 801dac8:	bf38      	it	cc
 801daca:	250c      	movcc	r5, #12
 801dacc:	2d00      	cmp	r5, #0
 801dace:	4606      	mov	r6, r0
 801dad0:	db01      	blt.n	801dad6 <_malloc_r+0x1a>
 801dad2:	42a9      	cmp	r1, r5
 801dad4:	d903      	bls.n	801dade <_malloc_r+0x22>
 801dad6:	230c      	movs	r3, #12
 801dad8:	6033      	str	r3, [r6, #0]
 801dada:	2000      	movs	r0, #0
 801dadc:	bd70      	pop	{r4, r5, r6, pc}
 801dade:	f002 fb6f 	bl	80201c0 <__malloc_lock>
 801dae2:	4a21      	ldr	r2, [pc, #132]	; (801db68 <_malloc_r+0xac>)
 801dae4:	6814      	ldr	r4, [r2, #0]
 801dae6:	4621      	mov	r1, r4
 801dae8:	b991      	cbnz	r1, 801db10 <_malloc_r+0x54>
 801daea:	4c20      	ldr	r4, [pc, #128]	; (801db6c <_malloc_r+0xb0>)
 801daec:	6823      	ldr	r3, [r4, #0]
 801daee:	b91b      	cbnz	r3, 801daf8 <_malloc_r+0x3c>
 801daf0:	4630      	mov	r0, r6
 801daf2:	f000 fd8d 	bl	801e610 <_sbrk_r>
 801daf6:	6020      	str	r0, [r4, #0]
 801daf8:	4629      	mov	r1, r5
 801dafa:	4630      	mov	r0, r6
 801dafc:	f000 fd88 	bl	801e610 <_sbrk_r>
 801db00:	1c43      	adds	r3, r0, #1
 801db02:	d124      	bne.n	801db4e <_malloc_r+0x92>
 801db04:	230c      	movs	r3, #12
 801db06:	6033      	str	r3, [r6, #0]
 801db08:	4630      	mov	r0, r6
 801db0a:	f002 fb5a 	bl	80201c2 <__malloc_unlock>
 801db0e:	e7e4      	b.n	801dada <_malloc_r+0x1e>
 801db10:	680b      	ldr	r3, [r1, #0]
 801db12:	1b5b      	subs	r3, r3, r5
 801db14:	d418      	bmi.n	801db48 <_malloc_r+0x8c>
 801db16:	2b0b      	cmp	r3, #11
 801db18:	d90f      	bls.n	801db3a <_malloc_r+0x7e>
 801db1a:	600b      	str	r3, [r1, #0]
 801db1c:	50cd      	str	r5, [r1, r3]
 801db1e:	18cc      	adds	r4, r1, r3
 801db20:	4630      	mov	r0, r6
 801db22:	f002 fb4e 	bl	80201c2 <__malloc_unlock>
 801db26:	f104 000b 	add.w	r0, r4, #11
 801db2a:	1d23      	adds	r3, r4, #4
 801db2c:	f020 0007 	bic.w	r0, r0, #7
 801db30:	1ac3      	subs	r3, r0, r3
 801db32:	d0d3      	beq.n	801dadc <_malloc_r+0x20>
 801db34:	425a      	negs	r2, r3
 801db36:	50e2      	str	r2, [r4, r3]
 801db38:	e7d0      	b.n	801dadc <_malloc_r+0x20>
 801db3a:	428c      	cmp	r4, r1
 801db3c:	684b      	ldr	r3, [r1, #4]
 801db3e:	bf16      	itet	ne
 801db40:	6063      	strne	r3, [r4, #4]
 801db42:	6013      	streq	r3, [r2, #0]
 801db44:	460c      	movne	r4, r1
 801db46:	e7eb      	b.n	801db20 <_malloc_r+0x64>
 801db48:	460c      	mov	r4, r1
 801db4a:	6849      	ldr	r1, [r1, #4]
 801db4c:	e7cc      	b.n	801dae8 <_malloc_r+0x2c>
 801db4e:	1cc4      	adds	r4, r0, #3
 801db50:	f024 0403 	bic.w	r4, r4, #3
 801db54:	42a0      	cmp	r0, r4
 801db56:	d005      	beq.n	801db64 <_malloc_r+0xa8>
 801db58:	1a21      	subs	r1, r4, r0
 801db5a:	4630      	mov	r0, r6
 801db5c:	f000 fd58 	bl	801e610 <_sbrk_r>
 801db60:	3001      	adds	r0, #1
 801db62:	d0cf      	beq.n	801db04 <_malloc_r+0x48>
 801db64:	6025      	str	r5, [r4, #0]
 801db66:	e7db      	b.n	801db20 <_malloc_r+0x64>
 801db68:	20021810 	.word	0x20021810
 801db6c:	20021814 	.word	0x20021814

0801db70 <__cvt>:
 801db70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db72:	ed2d 8b02 	vpush	{d8}
 801db76:	eeb0 8b40 	vmov.f64	d8, d0
 801db7a:	b085      	sub	sp, #20
 801db7c:	4617      	mov	r7, r2
 801db7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801db80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801db82:	ee18 2a90 	vmov	r2, s17
 801db86:	f025 0520 	bic.w	r5, r5, #32
 801db8a:	2a00      	cmp	r2, #0
 801db8c:	bfb6      	itet	lt
 801db8e:	222d      	movlt	r2, #45	; 0x2d
 801db90:	2200      	movge	r2, #0
 801db92:	eeb1 8b40 	vneglt.f64	d8, d0
 801db96:	2d46      	cmp	r5, #70	; 0x46
 801db98:	460c      	mov	r4, r1
 801db9a:	701a      	strb	r2, [r3, #0]
 801db9c:	d004      	beq.n	801dba8 <__cvt+0x38>
 801db9e:	2d45      	cmp	r5, #69	; 0x45
 801dba0:	d100      	bne.n	801dba4 <__cvt+0x34>
 801dba2:	3401      	adds	r4, #1
 801dba4:	2102      	movs	r1, #2
 801dba6:	e000      	b.n	801dbaa <__cvt+0x3a>
 801dba8:	2103      	movs	r1, #3
 801dbaa:	ab03      	add	r3, sp, #12
 801dbac:	9301      	str	r3, [sp, #4]
 801dbae:	ab02      	add	r3, sp, #8
 801dbb0:	9300      	str	r3, [sp, #0]
 801dbb2:	4622      	mov	r2, r4
 801dbb4:	4633      	mov	r3, r6
 801dbb6:	eeb0 0b48 	vmov.f64	d0, d8
 801dbba:	f001 fa9d 	bl	801f0f8 <_dtoa_r>
 801dbbe:	2d47      	cmp	r5, #71	; 0x47
 801dbc0:	d101      	bne.n	801dbc6 <__cvt+0x56>
 801dbc2:	07fb      	lsls	r3, r7, #31
 801dbc4:	d51e      	bpl.n	801dc04 <__cvt+0x94>
 801dbc6:	2d46      	cmp	r5, #70	; 0x46
 801dbc8:	eb00 0304 	add.w	r3, r0, r4
 801dbcc:	d10c      	bne.n	801dbe8 <__cvt+0x78>
 801dbce:	7802      	ldrb	r2, [r0, #0]
 801dbd0:	2a30      	cmp	r2, #48	; 0x30
 801dbd2:	d107      	bne.n	801dbe4 <__cvt+0x74>
 801dbd4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801dbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbdc:	bf1c      	itt	ne
 801dbde:	f1c4 0401 	rsbne	r4, r4, #1
 801dbe2:	6034      	strne	r4, [r6, #0]
 801dbe4:	6832      	ldr	r2, [r6, #0]
 801dbe6:	4413      	add	r3, r2
 801dbe8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801dbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbf0:	d007      	beq.n	801dc02 <__cvt+0x92>
 801dbf2:	2130      	movs	r1, #48	; 0x30
 801dbf4:	9a03      	ldr	r2, [sp, #12]
 801dbf6:	429a      	cmp	r2, r3
 801dbf8:	d204      	bcs.n	801dc04 <__cvt+0x94>
 801dbfa:	1c54      	adds	r4, r2, #1
 801dbfc:	9403      	str	r4, [sp, #12]
 801dbfe:	7011      	strb	r1, [r2, #0]
 801dc00:	e7f8      	b.n	801dbf4 <__cvt+0x84>
 801dc02:	9303      	str	r3, [sp, #12]
 801dc04:	9b03      	ldr	r3, [sp, #12]
 801dc06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dc08:	1a1b      	subs	r3, r3, r0
 801dc0a:	6013      	str	r3, [r2, #0]
 801dc0c:	b005      	add	sp, #20
 801dc0e:	ecbd 8b02 	vpop	{d8}
 801dc12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dc14 <__exponent>:
 801dc14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc16:	2900      	cmp	r1, #0
 801dc18:	4604      	mov	r4, r0
 801dc1a:	bfba      	itte	lt
 801dc1c:	4249      	neglt	r1, r1
 801dc1e:	232d      	movlt	r3, #45	; 0x2d
 801dc20:	232b      	movge	r3, #43	; 0x2b
 801dc22:	2909      	cmp	r1, #9
 801dc24:	f804 2b02 	strb.w	r2, [r4], #2
 801dc28:	7043      	strb	r3, [r0, #1]
 801dc2a:	dd20      	ble.n	801dc6e <__exponent+0x5a>
 801dc2c:	f10d 0307 	add.w	r3, sp, #7
 801dc30:	461f      	mov	r7, r3
 801dc32:	260a      	movs	r6, #10
 801dc34:	fb91 f5f6 	sdiv	r5, r1, r6
 801dc38:	fb06 1115 	mls	r1, r6, r5, r1
 801dc3c:	3130      	adds	r1, #48	; 0x30
 801dc3e:	2d09      	cmp	r5, #9
 801dc40:	f803 1c01 	strb.w	r1, [r3, #-1]
 801dc44:	f103 32ff 	add.w	r2, r3, #4294967295
 801dc48:	4629      	mov	r1, r5
 801dc4a:	dc09      	bgt.n	801dc60 <__exponent+0x4c>
 801dc4c:	3130      	adds	r1, #48	; 0x30
 801dc4e:	3b02      	subs	r3, #2
 801dc50:	f802 1c01 	strb.w	r1, [r2, #-1]
 801dc54:	42bb      	cmp	r3, r7
 801dc56:	4622      	mov	r2, r4
 801dc58:	d304      	bcc.n	801dc64 <__exponent+0x50>
 801dc5a:	1a10      	subs	r0, r2, r0
 801dc5c:	b003      	add	sp, #12
 801dc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc60:	4613      	mov	r3, r2
 801dc62:	e7e7      	b.n	801dc34 <__exponent+0x20>
 801dc64:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dc68:	f804 2b01 	strb.w	r2, [r4], #1
 801dc6c:	e7f2      	b.n	801dc54 <__exponent+0x40>
 801dc6e:	2330      	movs	r3, #48	; 0x30
 801dc70:	4419      	add	r1, r3
 801dc72:	7083      	strb	r3, [r0, #2]
 801dc74:	1d02      	adds	r2, r0, #4
 801dc76:	70c1      	strb	r1, [r0, #3]
 801dc78:	e7ef      	b.n	801dc5a <__exponent+0x46>
 801dc7a:	0000      	movs	r0, r0
 801dc7c:	0000      	movs	r0, r0
	...

0801dc80 <_printf_float>:
 801dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc84:	b08d      	sub	sp, #52	; 0x34
 801dc86:	460c      	mov	r4, r1
 801dc88:	4616      	mov	r6, r2
 801dc8a:	461f      	mov	r7, r3
 801dc8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801dc90:	4605      	mov	r5, r0
 801dc92:	f002 f9ff 	bl	8020094 <_localeconv_r>
 801dc96:	f8d0 b000 	ldr.w	fp, [r0]
 801dc9a:	4658      	mov	r0, fp
 801dc9c:	f7e2 fada 	bl	8000254 <strlen>
 801dca0:	2300      	movs	r3, #0
 801dca2:	930a      	str	r3, [sp, #40]	; 0x28
 801dca4:	f8d8 3000 	ldr.w	r3, [r8]
 801dca8:	9005      	str	r0, [sp, #20]
 801dcaa:	3307      	adds	r3, #7
 801dcac:	f023 0307 	bic.w	r3, r3, #7
 801dcb0:	f103 0108 	add.w	r1, r3, #8
 801dcb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 801dcb8:	6822      	ldr	r2, [r4, #0]
 801dcba:	f8c8 1000 	str.w	r1, [r8]
 801dcbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dcc2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801dcc6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801df50 <_printf_float+0x2d0>
 801dcca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801dcce:	eeb0 6bc0 	vabs.f64	d6, d0
 801dcd2:	eeb4 6b47 	vcmp.f64	d6, d7
 801dcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcda:	dd24      	ble.n	801dd26 <_printf_float+0xa6>
 801dcdc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801dce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dce4:	d502      	bpl.n	801dcec <_printf_float+0x6c>
 801dce6:	232d      	movs	r3, #45	; 0x2d
 801dce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dcec:	499a      	ldr	r1, [pc, #616]	; (801df58 <_printf_float+0x2d8>)
 801dcee:	4b9b      	ldr	r3, [pc, #620]	; (801df5c <_printf_float+0x2dc>)
 801dcf0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801dcf4:	bf8c      	ite	hi
 801dcf6:	4688      	movhi	r8, r1
 801dcf8:	4698      	movls	r8, r3
 801dcfa:	f022 0204 	bic.w	r2, r2, #4
 801dcfe:	2303      	movs	r3, #3
 801dd00:	6123      	str	r3, [r4, #16]
 801dd02:	6022      	str	r2, [r4, #0]
 801dd04:	f04f 0a00 	mov.w	sl, #0
 801dd08:	9700      	str	r7, [sp, #0]
 801dd0a:	4633      	mov	r3, r6
 801dd0c:	aa0b      	add	r2, sp, #44	; 0x2c
 801dd0e:	4621      	mov	r1, r4
 801dd10:	4628      	mov	r0, r5
 801dd12:	f000 f9e1 	bl	801e0d8 <_printf_common>
 801dd16:	3001      	adds	r0, #1
 801dd18:	f040 8089 	bne.w	801de2e <_printf_float+0x1ae>
 801dd1c:	f04f 30ff 	mov.w	r0, #4294967295
 801dd20:	b00d      	add	sp, #52	; 0x34
 801dd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd26:	eeb4 0b40 	vcmp.f64	d0, d0
 801dd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd2e:	d702      	bvc.n	801dd36 <_printf_float+0xb6>
 801dd30:	498b      	ldr	r1, [pc, #556]	; (801df60 <_printf_float+0x2e0>)
 801dd32:	4b8c      	ldr	r3, [pc, #560]	; (801df64 <_printf_float+0x2e4>)
 801dd34:	e7dc      	b.n	801dcf0 <_printf_float+0x70>
 801dd36:	6861      	ldr	r1, [r4, #4]
 801dd38:	1c4b      	adds	r3, r1, #1
 801dd3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dd3e:	ab0a      	add	r3, sp, #40	; 0x28
 801dd40:	a809      	add	r0, sp, #36	; 0x24
 801dd42:	d13b      	bne.n	801ddbc <_printf_float+0x13c>
 801dd44:	2106      	movs	r1, #6
 801dd46:	6061      	str	r1, [r4, #4]
 801dd48:	f04f 0c00 	mov.w	ip, #0
 801dd4c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801dd50:	e9cd 0900 	strd	r0, r9, [sp]
 801dd54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801dd58:	6022      	str	r2, [r4, #0]
 801dd5a:	6861      	ldr	r1, [r4, #4]
 801dd5c:	4628      	mov	r0, r5
 801dd5e:	f7ff ff07 	bl	801db70 <__cvt>
 801dd62:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801dd66:	2b47      	cmp	r3, #71	; 0x47
 801dd68:	4680      	mov	r8, r0
 801dd6a:	d109      	bne.n	801dd80 <_printf_float+0x100>
 801dd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd6e:	1cd8      	adds	r0, r3, #3
 801dd70:	db02      	blt.n	801dd78 <_printf_float+0xf8>
 801dd72:	6862      	ldr	r2, [r4, #4]
 801dd74:	4293      	cmp	r3, r2
 801dd76:	dd47      	ble.n	801de08 <_printf_float+0x188>
 801dd78:	f1a9 0902 	sub.w	r9, r9, #2
 801dd7c:	fa5f f989 	uxtb.w	r9, r9
 801dd80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801dd84:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dd86:	d824      	bhi.n	801ddd2 <_printf_float+0x152>
 801dd88:	3901      	subs	r1, #1
 801dd8a:	464a      	mov	r2, r9
 801dd8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801dd90:	9109      	str	r1, [sp, #36]	; 0x24
 801dd92:	f7ff ff3f 	bl	801dc14 <__exponent>
 801dd96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dd98:	1813      	adds	r3, r2, r0
 801dd9a:	2a01      	cmp	r2, #1
 801dd9c:	4682      	mov	sl, r0
 801dd9e:	6123      	str	r3, [r4, #16]
 801dda0:	dc02      	bgt.n	801dda8 <_printf_float+0x128>
 801dda2:	6822      	ldr	r2, [r4, #0]
 801dda4:	07d1      	lsls	r1, r2, #31
 801dda6:	d501      	bpl.n	801ddac <_printf_float+0x12c>
 801dda8:	3301      	adds	r3, #1
 801ddaa:	6123      	str	r3, [r4, #16]
 801ddac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d0a9      	beq.n	801dd08 <_printf_float+0x88>
 801ddb4:	232d      	movs	r3, #45	; 0x2d
 801ddb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ddba:	e7a5      	b.n	801dd08 <_printf_float+0x88>
 801ddbc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801ddc0:	f000 8178 	beq.w	801e0b4 <_printf_float+0x434>
 801ddc4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801ddc8:	d1be      	bne.n	801dd48 <_printf_float+0xc8>
 801ddca:	2900      	cmp	r1, #0
 801ddcc:	d1bc      	bne.n	801dd48 <_printf_float+0xc8>
 801ddce:	2101      	movs	r1, #1
 801ddd0:	e7b9      	b.n	801dd46 <_printf_float+0xc6>
 801ddd2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801ddd6:	d119      	bne.n	801de0c <_printf_float+0x18c>
 801ddd8:	2900      	cmp	r1, #0
 801ddda:	6863      	ldr	r3, [r4, #4]
 801dddc:	dd0c      	ble.n	801ddf8 <_printf_float+0x178>
 801ddde:	6121      	str	r1, [r4, #16]
 801dde0:	b913      	cbnz	r3, 801dde8 <_printf_float+0x168>
 801dde2:	6822      	ldr	r2, [r4, #0]
 801dde4:	07d2      	lsls	r2, r2, #31
 801dde6:	d502      	bpl.n	801ddee <_printf_float+0x16e>
 801dde8:	3301      	adds	r3, #1
 801ddea:	440b      	add	r3, r1
 801ddec:	6123      	str	r3, [r4, #16]
 801ddee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddf0:	65a3      	str	r3, [r4, #88]	; 0x58
 801ddf2:	f04f 0a00 	mov.w	sl, #0
 801ddf6:	e7d9      	b.n	801ddac <_printf_float+0x12c>
 801ddf8:	b913      	cbnz	r3, 801de00 <_printf_float+0x180>
 801ddfa:	6822      	ldr	r2, [r4, #0]
 801ddfc:	07d0      	lsls	r0, r2, #31
 801ddfe:	d501      	bpl.n	801de04 <_printf_float+0x184>
 801de00:	3302      	adds	r3, #2
 801de02:	e7f3      	b.n	801ddec <_printf_float+0x16c>
 801de04:	2301      	movs	r3, #1
 801de06:	e7f1      	b.n	801ddec <_printf_float+0x16c>
 801de08:	f04f 0967 	mov.w	r9, #103	; 0x67
 801de0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801de10:	4293      	cmp	r3, r2
 801de12:	db05      	blt.n	801de20 <_printf_float+0x1a0>
 801de14:	6822      	ldr	r2, [r4, #0]
 801de16:	6123      	str	r3, [r4, #16]
 801de18:	07d1      	lsls	r1, r2, #31
 801de1a:	d5e8      	bpl.n	801ddee <_printf_float+0x16e>
 801de1c:	3301      	adds	r3, #1
 801de1e:	e7e5      	b.n	801ddec <_printf_float+0x16c>
 801de20:	2b00      	cmp	r3, #0
 801de22:	bfd4      	ite	le
 801de24:	f1c3 0302 	rsble	r3, r3, #2
 801de28:	2301      	movgt	r3, #1
 801de2a:	4413      	add	r3, r2
 801de2c:	e7de      	b.n	801ddec <_printf_float+0x16c>
 801de2e:	6823      	ldr	r3, [r4, #0]
 801de30:	055a      	lsls	r2, r3, #21
 801de32:	d407      	bmi.n	801de44 <_printf_float+0x1c4>
 801de34:	6923      	ldr	r3, [r4, #16]
 801de36:	4642      	mov	r2, r8
 801de38:	4631      	mov	r1, r6
 801de3a:	4628      	mov	r0, r5
 801de3c:	47b8      	blx	r7
 801de3e:	3001      	adds	r0, #1
 801de40:	d12a      	bne.n	801de98 <_printf_float+0x218>
 801de42:	e76b      	b.n	801dd1c <_printf_float+0x9c>
 801de44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801de48:	f240 80de 	bls.w	801e008 <_printf_float+0x388>
 801de4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801de50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801de54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de58:	d133      	bne.n	801dec2 <_printf_float+0x242>
 801de5a:	2301      	movs	r3, #1
 801de5c:	4a42      	ldr	r2, [pc, #264]	; (801df68 <_printf_float+0x2e8>)
 801de5e:	4631      	mov	r1, r6
 801de60:	4628      	mov	r0, r5
 801de62:	47b8      	blx	r7
 801de64:	3001      	adds	r0, #1
 801de66:	f43f af59 	beq.w	801dd1c <_printf_float+0x9c>
 801de6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801de6e:	429a      	cmp	r2, r3
 801de70:	db02      	blt.n	801de78 <_printf_float+0x1f8>
 801de72:	6823      	ldr	r3, [r4, #0]
 801de74:	07d8      	lsls	r0, r3, #31
 801de76:	d50f      	bpl.n	801de98 <_printf_float+0x218>
 801de78:	9b05      	ldr	r3, [sp, #20]
 801de7a:	465a      	mov	r2, fp
 801de7c:	4631      	mov	r1, r6
 801de7e:	4628      	mov	r0, r5
 801de80:	47b8      	blx	r7
 801de82:	3001      	adds	r0, #1
 801de84:	f43f af4a 	beq.w	801dd1c <_printf_float+0x9c>
 801de88:	f04f 0800 	mov.w	r8, #0
 801de8c:	f104 091a 	add.w	r9, r4, #26
 801de90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de92:	3b01      	subs	r3, #1
 801de94:	4543      	cmp	r3, r8
 801de96:	dc09      	bgt.n	801deac <_printf_float+0x22c>
 801de98:	6823      	ldr	r3, [r4, #0]
 801de9a:	079b      	lsls	r3, r3, #30
 801de9c:	f100 8105 	bmi.w	801e0aa <_printf_float+0x42a>
 801dea0:	68e0      	ldr	r0, [r4, #12]
 801dea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dea4:	4298      	cmp	r0, r3
 801dea6:	bfb8      	it	lt
 801dea8:	4618      	movlt	r0, r3
 801deaa:	e739      	b.n	801dd20 <_printf_float+0xa0>
 801deac:	2301      	movs	r3, #1
 801deae:	464a      	mov	r2, r9
 801deb0:	4631      	mov	r1, r6
 801deb2:	4628      	mov	r0, r5
 801deb4:	47b8      	blx	r7
 801deb6:	3001      	adds	r0, #1
 801deb8:	f43f af30 	beq.w	801dd1c <_printf_float+0x9c>
 801debc:	f108 0801 	add.w	r8, r8, #1
 801dec0:	e7e6      	b.n	801de90 <_printf_float+0x210>
 801dec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	dc2b      	bgt.n	801df20 <_printf_float+0x2a0>
 801dec8:	2301      	movs	r3, #1
 801deca:	4a27      	ldr	r2, [pc, #156]	; (801df68 <_printf_float+0x2e8>)
 801decc:	4631      	mov	r1, r6
 801dece:	4628      	mov	r0, r5
 801ded0:	47b8      	blx	r7
 801ded2:	3001      	adds	r0, #1
 801ded4:	f43f af22 	beq.w	801dd1c <_printf_float+0x9c>
 801ded8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801deda:	b923      	cbnz	r3, 801dee6 <_printf_float+0x266>
 801dedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dede:	b913      	cbnz	r3, 801dee6 <_printf_float+0x266>
 801dee0:	6823      	ldr	r3, [r4, #0]
 801dee2:	07d9      	lsls	r1, r3, #31
 801dee4:	d5d8      	bpl.n	801de98 <_printf_float+0x218>
 801dee6:	9b05      	ldr	r3, [sp, #20]
 801dee8:	465a      	mov	r2, fp
 801deea:	4631      	mov	r1, r6
 801deec:	4628      	mov	r0, r5
 801deee:	47b8      	blx	r7
 801def0:	3001      	adds	r0, #1
 801def2:	f43f af13 	beq.w	801dd1c <_printf_float+0x9c>
 801def6:	f04f 0900 	mov.w	r9, #0
 801defa:	f104 0a1a 	add.w	sl, r4, #26
 801defe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df00:	425b      	negs	r3, r3
 801df02:	454b      	cmp	r3, r9
 801df04:	dc01      	bgt.n	801df0a <_printf_float+0x28a>
 801df06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df08:	e795      	b.n	801de36 <_printf_float+0x1b6>
 801df0a:	2301      	movs	r3, #1
 801df0c:	4652      	mov	r2, sl
 801df0e:	4631      	mov	r1, r6
 801df10:	4628      	mov	r0, r5
 801df12:	47b8      	blx	r7
 801df14:	3001      	adds	r0, #1
 801df16:	f43f af01 	beq.w	801dd1c <_printf_float+0x9c>
 801df1a:	f109 0901 	add.w	r9, r9, #1
 801df1e:	e7ee      	b.n	801defe <_printf_float+0x27e>
 801df20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801df24:	429a      	cmp	r2, r3
 801df26:	bfa8      	it	ge
 801df28:	461a      	movge	r2, r3
 801df2a:	2a00      	cmp	r2, #0
 801df2c:	4691      	mov	r9, r2
 801df2e:	dd07      	ble.n	801df40 <_printf_float+0x2c0>
 801df30:	4613      	mov	r3, r2
 801df32:	4631      	mov	r1, r6
 801df34:	4642      	mov	r2, r8
 801df36:	4628      	mov	r0, r5
 801df38:	47b8      	blx	r7
 801df3a:	3001      	adds	r0, #1
 801df3c:	f43f aeee 	beq.w	801dd1c <_printf_float+0x9c>
 801df40:	f104 031a 	add.w	r3, r4, #26
 801df44:	f04f 0a00 	mov.w	sl, #0
 801df48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801df4c:	9307      	str	r3, [sp, #28]
 801df4e:	e017      	b.n	801df80 <_printf_float+0x300>
 801df50:	ffffffff 	.word	0xffffffff
 801df54:	7fefffff 	.word	0x7fefffff
 801df58:	0803be20 	.word	0x0803be20
 801df5c:	0803be1c 	.word	0x0803be1c
 801df60:	0803be28 	.word	0x0803be28
 801df64:	0803be24 	.word	0x0803be24
 801df68:	0803c083 	.word	0x0803c083
 801df6c:	2301      	movs	r3, #1
 801df6e:	9a07      	ldr	r2, [sp, #28]
 801df70:	4631      	mov	r1, r6
 801df72:	4628      	mov	r0, r5
 801df74:	47b8      	blx	r7
 801df76:	3001      	adds	r0, #1
 801df78:	f43f aed0 	beq.w	801dd1c <_printf_float+0x9c>
 801df7c:	f10a 0a01 	add.w	sl, sl, #1
 801df80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801df82:	9306      	str	r3, [sp, #24]
 801df84:	eba3 0309 	sub.w	r3, r3, r9
 801df88:	4553      	cmp	r3, sl
 801df8a:	dcef      	bgt.n	801df6c <_printf_float+0x2ec>
 801df8c:	9b06      	ldr	r3, [sp, #24]
 801df8e:	4498      	add	r8, r3
 801df90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801df94:	429a      	cmp	r2, r3
 801df96:	db15      	blt.n	801dfc4 <_printf_float+0x344>
 801df98:	6823      	ldr	r3, [r4, #0]
 801df9a:	07da      	lsls	r2, r3, #31
 801df9c:	d412      	bmi.n	801dfc4 <_printf_float+0x344>
 801df9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfa0:	9a06      	ldr	r2, [sp, #24]
 801dfa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dfa4:	1a9a      	subs	r2, r3, r2
 801dfa6:	eba3 0a01 	sub.w	sl, r3, r1
 801dfaa:	4592      	cmp	sl, r2
 801dfac:	bfa8      	it	ge
 801dfae:	4692      	movge	sl, r2
 801dfb0:	f1ba 0f00 	cmp.w	sl, #0
 801dfb4:	dc0e      	bgt.n	801dfd4 <_printf_float+0x354>
 801dfb6:	f04f 0800 	mov.w	r8, #0
 801dfba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dfbe:	f104 091a 	add.w	r9, r4, #26
 801dfc2:	e019      	b.n	801dff8 <_printf_float+0x378>
 801dfc4:	9b05      	ldr	r3, [sp, #20]
 801dfc6:	465a      	mov	r2, fp
 801dfc8:	4631      	mov	r1, r6
 801dfca:	4628      	mov	r0, r5
 801dfcc:	47b8      	blx	r7
 801dfce:	3001      	adds	r0, #1
 801dfd0:	d1e5      	bne.n	801df9e <_printf_float+0x31e>
 801dfd2:	e6a3      	b.n	801dd1c <_printf_float+0x9c>
 801dfd4:	4653      	mov	r3, sl
 801dfd6:	4642      	mov	r2, r8
 801dfd8:	4631      	mov	r1, r6
 801dfda:	4628      	mov	r0, r5
 801dfdc:	47b8      	blx	r7
 801dfde:	3001      	adds	r0, #1
 801dfe0:	d1e9      	bne.n	801dfb6 <_printf_float+0x336>
 801dfe2:	e69b      	b.n	801dd1c <_printf_float+0x9c>
 801dfe4:	2301      	movs	r3, #1
 801dfe6:	464a      	mov	r2, r9
 801dfe8:	4631      	mov	r1, r6
 801dfea:	4628      	mov	r0, r5
 801dfec:	47b8      	blx	r7
 801dfee:	3001      	adds	r0, #1
 801dff0:	f43f ae94 	beq.w	801dd1c <_printf_float+0x9c>
 801dff4:	f108 0801 	add.w	r8, r8, #1
 801dff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801dffc:	1a9b      	subs	r3, r3, r2
 801dffe:	eba3 030a 	sub.w	r3, r3, sl
 801e002:	4543      	cmp	r3, r8
 801e004:	dcee      	bgt.n	801dfe4 <_printf_float+0x364>
 801e006:	e747      	b.n	801de98 <_printf_float+0x218>
 801e008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e00a:	2a01      	cmp	r2, #1
 801e00c:	dc01      	bgt.n	801e012 <_printf_float+0x392>
 801e00e:	07db      	lsls	r3, r3, #31
 801e010:	d539      	bpl.n	801e086 <_printf_float+0x406>
 801e012:	2301      	movs	r3, #1
 801e014:	4642      	mov	r2, r8
 801e016:	4631      	mov	r1, r6
 801e018:	4628      	mov	r0, r5
 801e01a:	47b8      	blx	r7
 801e01c:	3001      	adds	r0, #1
 801e01e:	f43f ae7d 	beq.w	801dd1c <_printf_float+0x9c>
 801e022:	9b05      	ldr	r3, [sp, #20]
 801e024:	465a      	mov	r2, fp
 801e026:	4631      	mov	r1, r6
 801e028:	4628      	mov	r0, r5
 801e02a:	47b8      	blx	r7
 801e02c:	3001      	adds	r0, #1
 801e02e:	f108 0801 	add.w	r8, r8, #1
 801e032:	f43f ae73 	beq.w	801dd1c <_printf_float+0x9c>
 801e036:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e03c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e044:	f103 33ff 	add.w	r3, r3, #4294967295
 801e048:	d018      	beq.n	801e07c <_printf_float+0x3fc>
 801e04a:	4642      	mov	r2, r8
 801e04c:	4631      	mov	r1, r6
 801e04e:	4628      	mov	r0, r5
 801e050:	47b8      	blx	r7
 801e052:	3001      	adds	r0, #1
 801e054:	d10e      	bne.n	801e074 <_printf_float+0x3f4>
 801e056:	e661      	b.n	801dd1c <_printf_float+0x9c>
 801e058:	2301      	movs	r3, #1
 801e05a:	464a      	mov	r2, r9
 801e05c:	4631      	mov	r1, r6
 801e05e:	4628      	mov	r0, r5
 801e060:	47b8      	blx	r7
 801e062:	3001      	adds	r0, #1
 801e064:	f43f ae5a 	beq.w	801dd1c <_printf_float+0x9c>
 801e068:	f108 0801 	add.w	r8, r8, #1
 801e06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e06e:	3b01      	subs	r3, #1
 801e070:	4543      	cmp	r3, r8
 801e072:	dcf1      	bgt.n	801e058 <_printf_float+0x3d8>
 801e074:	4653      	mov	r3, sl
 801e076:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e07a:	e6dd      	b.n	801de38 <_printf_float+0x1b8>
 801e07c:	f04f 0800 	mov.w	r8, #0
 801e080:	f104 091a 	add.w	r9, r4, #26
 801e084:	e7f2      	b.n	801e06c <_printf_float+0x3ec>
 801e086:	2301      	movs	r3, #1
 801e088:	e7df      	b.n	801e04a <_printf_float+0x3ca>
 801e08a:	2301      	movs	r3, #1
 801e08c:	464a      	mov	r2, r9
 801e08e:	4631      	mov	r1, r6
 801e090:	4628      	mov	r0, r5
 801e092:	47b8      	blx	r7
 801e094:	3001      	adds	r0, #1
 801e096:	f43f ae41 	beq.w	801dd1c <_printf_float+0x9c>
 801e09a:	f108 0801 	add.w	r8, r8, #1
 801e09e:	68e3      	ldr	r3, [r4, #12]
 801e0a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e0a2:	1a9b      	subs	r3, r3, r2
 801e0a4:	4543      	cmp	r3, r8
 801e0a6:	dcf0      	bgt.n	801e08a <_printf_float+0x40a>
 801e0a8:	e6fa      	b.n	801dea0 <_printf_float+0x220>
 801e0aa:	f04f 0800 	mov.w	r8, #0
 801e0ae:	f104 0919 	add.w	r9, r4, #25
 801e0b2:	e7f4      	b.n	801e09e <_printf_float+0x41e>
 801e0b4:	2900      	cmp	r1, #0
 801e0b6:	f43f ae8a 	beq.w	801ddce <_printf_float+0x14e>
 801e0ba:	f04f 0c00 	mov.w	ip, #0
 801e0be:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e0c2:	e9cd 0900 	strd	r0, r9, [sp]
 801e0c6:	6022      	str	r2, [r4, #0]
 801e0c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e0cc:	4628      	mov	r0, r5
 801e0ce:	f7ff fd4f 	bl	801db70 <__cvt>
 801e0d2:	4680      	mov	r8, r0
 801e0d4:	e64a      	b.n	801dd6c <_printf_float+0xec>
 801e0d6:	bf00      	nop

0801e0d8 <_printf_common>:
 801e0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0dc:	4691      	mov	r9, r2
 801e0de:	461f      	mov	r7, r3
 801e0e0:	688a      	ldr	r2, [r1, #8]
 801e0e2:	690b      	ldr	r3, [r1, #16]
 801e0e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e0e8:	4293      	cmp	r3, r2
 801e0ea:	bfb8      	it	lt
 801e0ec:	4613      	movlt	r3, r2
 801e0ee:	f8c9 3000 	str.w	r3, [r9]
 801e0f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e0f6:	4606      	mov	r6, r0
 801e0f8:	460c      	mov	r4, r1
 801e0fa:	b112      	cbz	r2, 801e102 <_printf_common+0x2a>
 801e0fc:	3301      	adds	r3, #1
 801e0fe:	f8c9 3000 	str.w	r3, [r9]
 801e102:	6823      	ldr	r3, [r4, #0]
 801e104:	0699      	lsls	r1, r3, #26
 801e106:	bf42      	ittt	mi
 801e108:	f8d9 3000 	ldrmi.w	r3, [r9]
 801e10c:	3302      	addmi	r3, #2
 801e10e:	f8c9 3000 	strmi.w	r3, [r9]
 801e112:	6825      	ldr	r5, [r4, #0]
 801e114:	f015 0506 	ands.w	r5, r5, #6
 801e118:	d107      	bne.n	801e12a <_printf_common+0x52>
 801e11a:	f104 0a19 	add.w	sl, r4, #25
 801e11e:	68e3      	ldr	r3, [r4, #12]
 801e120:	f8d9 2000 	ldr.w	r2, [r9]
 801e124:	1a9b      	subs	r3, r3, r2
 801e126:	42ab      	cmp	r3, r5
 801e128:	dc28      	bgt.n	801e17c <_printf_common+0xa4>
 801e12a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801e12e:	6822      	ldr	r2, [r4, #0]
 801e130:	3300      	adds	r3, #0
 801e132:	bf18      	it	ne
 801e134:	2301      	movne	r3, #1
 801e136:	0692      	lsls	r2, r2, #26
 801e138:	d42d      	bmi.n	801e196 <_printf_common+0xbe>
 801e13a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e13e:	4639      	mov	r1, r7
 801e140:	4630      	mov	r0, r6
 801e142:	47c0      	blx	r8
 801e144:	3001      	adds	r0, #1
 801e146:	d020      	beq.n	801e18a <_printf_common+0xb2>
 801e148:	6823      	ldr	r3, [r4, #0]
 801e14a:	68e5      	ldr	r5, [r4, #12]
 801e14c:	f8d9 2000 	ldr.w	r2, [r9]
 801e150:	f003 0306 	and.w	r3, r3, #6
 801e154:	2b04      	cmp	r3, #4
 801e156:	bf08      	it	eq
 801e158:	1aad      	subeq	r5, r5, r2
 801e15a:	68a3      	ldr	r3, [r4, #8]
 801e15c:	6922      	ldr	r2, [r4, #16]
 801e15e:	bf0c      	ite	eq
 801e160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e164:	2500      	movne	r5, #0
 801e166:	4293      	cmp	r3, r2
 801e168:	bfc4      	itt	gt
 801e16a:	1a9b      	subgt	r3, r3, r2
 801e16c:	18ed      	addgt	r5, r5, r3
 801e16e:	f04f 0900 	mov.w	r9, #0
 801e172:	341a      	adds	r4, #26
 801e174:	454d      	cmp	r5, r9
 801e176:	d11a      	bne.n	801e1ae <_printf_common+0xd6>
 801e178:	2000      	movs	r0, #0
 801e17a:	e008      	b.n	801e18e <_printf_common+0xb6>
 801e17c:	2301      	movs	r3, #1
 801e17e:	4652      	mov	r2, sl
 801e180:	4639      	mov	r1, r7
 801e182:	4630      	mov	r0, r6
 801e184:	47c0      	blx	r8
 801e186:	3001      	adds	r0, #1
 801e188:	d103      	bne.n	801e192 <_printf_common+0xba>
 801e18a:	f04f 30ff 	mov.w	r0, #4294967295
 801e18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e192:	3501      	adds	r5, #1
 801e194:	e7c3      	b.n	801e11e <_printf_common+0x46>
 801e196:	18e1      	adds	r1, r4, r3
 801e198:	1c5a      	adds	r2, r3, #1
 801e19a:	2030      	movs	r0, #48	; 0x30
 801e19c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e1a0:	4422      	add	r2, r4
 801e1a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e1a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e1aa:	3302      	adds	r3, #2
 801e1ac:	e7c5      	b.n	801e13a <_printf_common+0x62>
 801e1ae:	2301      	movs	r3, #1
 801e1b0:	4622      	mov	r2, r4
 801e1b2:	4639      	mov	r1, r7
 801e1b4:	4630      	mov	r0, r6
 801e1b6:	47c0      	blx	r8
 801e1b8:	3001      	adds	r0, #1
 801e1ba:	d0e6      	beq.n	801e18a <_printf_common+0xb2>
 801e1bc:	f109 0901 	add.w	r9, r9, #1
 801e1c0:	e7d8      	b.n	801e174 <_printf_common+0x9c>
	...

0801e1c4 <_printf_i>:
 801e1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e1c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801e1cc:	460c      	mov	r4, r1
 801e1ce:	7e09      	ldrb	r1, [r1, #24]
 801e1d0:	b085      	sub	sp, #20
 801e1d2:	296e      	cmp	r1, #110	; 0x6e
 801e1d4:	4617      	mov	r7, r2
 801e1d6:	4606      	mov	r6, r0
 801e1d8:	4698      	mov	r8, r3
 801e1da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e1dc:	f000 80b3 	beq.w	801e346 <_printf_i+0x182>
 801e1e0:	d822      	bhi.n	801e228 <_printf_i+0x64>
 801e1e2:	2963      	cmp	r1, #99	; 0x63
 801e1e4:	d036      	beq.n	801e254 <_printf_i+0x90>
 801e1e6:	d80a      	bhi.n	801e1fe <_printf_i+0x3a>
 801e1e8:	2900      	cmp	r1, #0
 801e1ea:	f000 80b9 	beq.w	801e360 <_printf_i+0x19c>
 801e1ee:	2958      	cmp	r1, #88	; 0x58
 801e1f0:	f000 8083 	beq.w	801e2fa <_printf_i+0x136>
 801e1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e1f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801e1fc:	e032      	b.n	801e264 <_printf_i+0xa0>
 801e1fe:	2964      	cmp	r1, #100	; 0x64
 801e200:	d001      	beq.n	801e206 <_printf_i+0x42>
 801e202:	2969      	cmp	r1, #105	; 0x69
 801e204:	d1f6      	bne.n	801e1f4 <_printf_i+0x30>
 801e206:	6820      	ldr	r0, [r4, #0]
 801e208:	6813      	ldr	r3, [r2, #0]
 801e20a:	0605      	lsls	r5, r0, #24
 801e20c:	f103 0104 	add.w	r1, r3, #4
 801e210:	d52a      	bpl.n	801e268 <_printf_i+0xa4>
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	6011      	str	r1, [r2, #0]
 801e216:	2b00      	cmp	r3, #0
 801e218:	da03      	bge.n	801e222 <_printf_i+0x5e>
 801e21a:	222d      	movs	r2, #45	; 0x2d
 801e21c:	425b      	negs	r3, r3
 801e21e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e222:	486f      	ldr	r0, [pc, #444]	; (801e3e0 <_printf_i+0x21c>)
 801e224:	220a      	movs	r2, #10
 801e226:	e039      	b.n	801e29c <_printf_i+0xd8>
 801e228:	2973      	cmp	r1, #115	; 0x73
 801e22a:	f000 809d 	beq.w	801e368 <_printf_i+0x1a4>
 801e22e:	d808      	bhi.n	801e242 <_printf_i+0x7e>
 801e230:	296f      	cmp	r1, #111	; 0x6f
 801e232:	d020      	beq.n	801e276 <_printf_i+0xb2>
 801e234:	2970      	cmp	r1, #112	; 0x70
 801e236:	d1dd      	bne.n	801e1f4 <_printf_i+0x30>
 801e238:	6823      	ldr	r3, [r4, #0]
 801e23a:	f043 0320 	orr.w	r3, r3, #32
 801e23e:	6023      	str	r3, [r4, #0]
 801e240:	e003      	b.n	801e24a <_printf_i+0x86>
 801e242:	2975      	cmp	r1, #117	; 0x75
 801e244:	d017      	beq.n	801e276 <_printf_i+0xb2>
 801e246:	2978      	cmp	r1, #120	; 0x78
 801e248:	d1d4      	bne.n	801e1f4 <_printf_i+0x30>
 801e24a:	2378      	movs	r3, #120	; 0x78
 801e24c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e250:	4864      	ldr	r0, [pc, #400]	; (801e3e4 <_printf_i+0x220>)
 801e252:	e055      	b.n	801e300 <_printf_i+0x13c>
 801e254:	6813      	ldr	r3, [r2, #0]
 801e256:	1d19      	adds	r1, r3, #4
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	6011      	str	r1, [r2, #0]
 801e25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e264:	2301      	movs	r3, #1
 801e266:	e08c      	b.n	801e382 <_printf_i+0x1be>
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	6011      	str	r1, [r2, #0]
 801e26c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e270:	bf18      	it	ne
 801e272:	b21b      	sxthne	r3, r3
 801e274:	e7cf      	b.n	801e216 <_printf_i+0x52>
 801e276:	6813      	ldr	r3, [r2, #0]
 801e278:	6825      	ldr	r5, [r4, #0]
 801e27a:	1d18      	adds	r0, r3, #4
 801e27c:	6010      	str	r0, [r2, #0]
 801e27e:	0628      	lsls	r0, r5, #24
 801e280:	d501      	bpl.n	801e286 <_printf_i+0xc2>
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	e002      	b.n	801e28c <_printf_i+0xc8>
 801e286:	0668      	lsls	r0, r5, #25
 801e288:	d5fb      	bpl.n	801e282 <_printf_i+0xbe>
 801e28a:	881b      	ldrh	r3, [r3, #0]
 801e28c:	4854      	ldr	r0, [pc, #336]	; (801e3e0 <_printf_i+0x21c>)
 801e28e:	296f      	cmp	r1, #111	; 0x6f
 801e290:	bf14      	ite	ne
 801e292:	220a      	movne	r2, #10
 801e294:	2208      	moveq	r2, #8
 801e296:	2100      	movs	r1, #0
 801e298:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e29c:	6865      	ldr	r5, [r4, #4]
 801e29e:	60a5      	str	r5, [r4, #8]
 801e2a0:	2d00      	cmp	r5, #0
 801e2a2:	f2c0 8095 	blt.w	801e3d0 <_printf_i+0x20c>
 801e2a6:	6821      	ldr	r1, [r4, #0]
 801e2a8:	f021 0104 	bic.w	r1, r1, #4
 801e2ac:	6021      	str	r1, [r4, #0]
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d13d      	bne.n	801e32e <_printf_i+0x16a>
 801e2b2:	2d00      	cmp	r5, #0
 801e2b4:	f040 808e 	bne.w	801e3d4 <_printf_i+0x210>
 801e2b8:	4665      	mov	r5, ip
 801e2ba:	2a08      	cmp	r2, #8
 801e2bc:	d10b      	bne.n	801e2d6 <_printf_i+0x112>
 801e2be:	6823      	ldr	r3, [r4, #0]
 801e2c0:	07db      	lsls	r3, r3, #31
 801e2c2:	d508      	bpl.n	801e2d6 <_printf_i+0x112>
 801e2c4:	6923      	ldr	r3, [r4, #16]
 801e2c6:	6862      	ldr	r2, [r4, #4]
 801e2c8:	429a      	cmp	r2, r3
 801e2ca:	bfde      	ittt	le
 801e2cc:	2330      	movle	r3, #48	; 0x30
 801e2ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e2d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e2d6:	ebac 0305 	sub.w	r3, ip, r5
 801e2da:	6123      	str	r3, [r4, #16]
 801e2dc:	f8cd 8000 	str.w	r8, [sp]
 801e2e0:	463b      	mov	r3, r7
 801e2e2:	aa03      	add	r2, sp, #12
 801e2e4:	4621      	mov	r1, r4
 801e2e6:	4630      	mov	r0, r6
 801e2e8:	f7ff fef6 	bl	801e0d8 <_printf_common>
 801e2ec:	3001      	adds	r0, #1
 801e2ee:	d14d      	bne.n	801e38c <_printf_i+0x1c8>
 801e2f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e2f4:	b005      	add	sp, #20
 801e2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e2fa:	4839      	ldr	r0, [pc, #228]	; (801e3e0 <_printf_i+0x21c>)
 801e2fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801e300:	6813      	ldr	r3, [r2, #0]
 801e302:	6821      	ldr	r1, [r4, #0]
 801e304:	1d1d      	adds	r5, r3, #4
 801e306:	681b      	ldr	r3, [r3, #0]
 801e308:	6015      	str	r5, [r2, #0]
 801e30a:	060a      	lsls	r2, r1, #24
 801e30c:	d50b      	bpl.n	801e326 <_printf_i+0x162>
 801e30e:	07ca      	lsls	r2, r1, #31
 801e310:	bf44      	itt	mi
 801e312:	f041 0120 	orrmi.w	r1, r1, #32
 801e316:	6021      	strmi	r1, [r4, #0]
 801e318:	b91b      	cbnz	r3, 801e322 <_printf_i+0x15e>
 801e31a:	6822      	ldr	r2, [r4, #0]
 801e31c:	f022 0220 	bic.w	r2, r2, #32
 801e320:	6022      	str	r2, [r4, #0]
 801e322:	2210      	movs	r2, #16
 801e324:	e7b7      	b.n	801e296 <_printf_i+0xd2>
 801e326:	064d      	lsls	r5, r1, #25
 801e328:	bf48      	it	mi
 801e32a:	b29b      	uxthmi	r3, r3
 801e32c:	e7ef      	b.n	801e30e <_printf_i+0x14a>
 801e32e:	4665      	mov	r5, ip
 801e330:	fbb3 f1f2 	udiv	r1, r3, r2
 801e334:	fb02 3311 	mls	r3, r2, r1, r3
 801e338:	5cc3      	ldrb	r3, [r0, r3]
 801e33a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801e33e:	460b      	mov	r3, r1
 801e340:	2900      	cmp	r1, #0
 801e342:	d1f5      	bne.n	801e330 <_printf_i+0x16c>
 801e344:	e7b9      	b.n	801e2ba <_printf_i+0xf6>
 801e346:	6813      	ldr	r3, [r2, #0]
 801e348:	6825      	ldr	r5, [r4, #0]
 801e34a:	6961      	ldr	r1, [r4, #20]
 801e34c:	1d18      	adds	r0, r3, #4
 801e34e:	6010      	str	r0, [r2, #0]
 801e350:	0628      	lsls	r0, r5, #24
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	d501      	bpl.n	801e35a <_printf_i+0x196>
 801e356:	6019      	str	r1, [r3, #0]
 801e358:	e002      	b.n	801e360 <_printf_i+0x19c>
 801e35a:	066a      	lsls	r2, r5, #25
 801e35c:	d5fb      	bpl.n	801e356 <_printf_i+0x192>
 801e35e:	8019      	strh	r1, [r3, #0]
 801e360:	2300      	movs	r3, #0
 801e362:	6123      	str	r3, [r4, #16]
 801e364:	4665      	mov	r5, ip
 801e366:	e7b9      	b.n	801e2dc <_printf_i+0x118>
 801e368:	6813      	ldr	r3, [r2, #0]
 801e36a:	1d19      	adds	r1, r3, #4
 801e36c:	6011      	str	r1, [r2, #0]
 801e36e:	681d      	ldr	r5, [r3, #0]
 801e370:	6862      	ldr	r2, [r4, #4]
 801e372:	2100      	movs	r1, #0
 801e374:	4628      	mov	r0, r5
 801e376:	f7e1 ff7b 	bl	8000270 <memchr>
 801e37a:	b108      	cbz	r0, 801e380 <_printf_i+0x1bc>
 801e37c:	1b40      	subs	r0, r0, r5
 801e37e:	6060      	str	r0, [r4, #4]
 801e380:	6863      	ldr	r3, [r4, #4]
 801e382:	6123      	str	r3, [r4, #16]
 801e384:	2300      	movs	r3, #0
 801e386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e38a:	e7a7      	b.n	801e2dc <_printf_i+0x118>
 801e38c:	6923      	ldr	r3, [r4, #16]
 801e38e:	462a      	mov	r2, r5
 801e390:	4639      	mov	r1, r7
 801e392:	4630      	mov	r0, r6
 801e394:	47c0      	blx	r8
 801e396:	3001      	adds	r0, #1
 801e398:	d0aa      	beq.n	801e2f0 <_printf_i+0x12c>
 801e39a:	6823      	ldr	r3, [r4, #0]
 801e39c:	079b      	lsls	r3, r3, #30
 801e39e:	d413      	bmi.n	801e3c8 <_printf_i+0x204>
 801e3a0:	68e0      	ldr	r0, [r4, #12]
 801e3a2:	9b03      	ldr	r3, [sp, #12]
 801e3a4:	4298      	cmp	r0, r3
 801e3a6:	bfb8      	it	lt
 801e3a8:	4618      	movlt	r0, r3
 801e3aa:	e7a3      	b.n	801e2f4 <_printf_i+0x130>
 801e3ac:	2301      	movs	r3, #1
 801e3ae:	464a      	mov	r2, r9
 801e3b0:	4639      	mov	r1, r7
 801e3b2:	4630      	mov	r0, r6
 801e3b4:	47c0      	blx	r8
 801e3b6:	3001      	adds	r0, #1
 801e3b8:	d09a      	beq.n	801e2f0 <_printf_i+0x12c>
 801e3ba:	3501      	adds	r5, #1
 801e3bc:	68e3      	ldr	r3, [r4, #12]
 801e3be:	9a03      	ldr	r2, [sp, #12]
 801e3c0:	1a9b      	subs	r3, r3, r2
 801e3c2:	42ab      	cmp	r3, r5
 801e3c4:	dcf2      	bgt.n	801e3ac <_printf_i+0x1e8>
 801e3c6:	e7eb      	b.n	801e3a0 <_printf_i+0x1dc>
 801e3c8:	2500      	movs	r5, #0
 801e3ca:	f104 0919 	add.w	r9, r4, #25
 801e3ce:	e7f5      	b.n	801e3bc <_printf_i+0x1f8>
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d1ac      	bne.n	801e32e <_printf_i+0x16a>
 801e3d4:	7803      	ldrb	r3, [r0, #0]
 801e3d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e3da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e3de:	e76c      	b.n	801e2ba <_printf_i+0xf6>
 801e3e0:	0803be2c 	.word	0x0803be2c
 801e3e4:	0803be3d 	.word	0x0803be3d

0801e3e8 <iprintf>:
 801e3e8:	b40f      	push	{r0, r1, r2, r3}
 801e3ea:	4b0a      	ldr	r3, [pc, #40]	; (801e414 <iprintf+0x2c>)
 801e3ec:	b513      	push	{r0, r1, r4, lr}
 801e3ee:	681c      	ldr	r4, [r3, #0]
 801e3f0:	b124      	cbz	r4, 801e3fc <iprintf+0x14>
 801e3f2:	69a3      	ldr	r3, [r4, #24]
 801e3f4:	b913      	cbnz	r3, 801e3fc <iprintf+0x14>
 801e3f6:	4620      	mov	r0, r4
 801e3f8:	f001 fcba 	bl	801fd70 <__sinit>
 801e3fc:	ab05      	add	r3, sp, #20
 801e3fe:	9a04      	ldr	r2, [sp, #16]
 801e400:	68a1      	ldr	r1, [r4, #8]
 801e402:	9301      	str	r3, [sp, #4]
 801e404:	4620      	mov	r0, r4
 801e406:	f002 fd13 	bl	8020e30 <_vfiprintf_r>
 801e40a:	b002      	add	sp, #8
 801e40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e410:	b004      	add	sp, #16
 801e412:	4770      	bx	lr
 801e414:	200004b8 	.word	0x200004b8

0801e418 <putchar>:
 801e418:	b538      	push	{r3, r4, r5, lr}
 801e41a:	4b08      	ldr	r3, [pc, #32]	; (801e43c <putchar+0x24>)
 801e41c:	681c      	ldr	r4, [r3, #0]
 801e41e:	4605      	mov	r5, r0
 801e420:	b124      	cbz	r4, 801e42c <putchar+0x14>
 801e422:	69a3      	ldr	r3, [r4, #24]
 801e424:	b913      	cbnz	r3, 801e42c <putchar+0x14>
 801e426:	4620      	mov	r0, r4
 801e428:	f001 fca2 	bl	801fd70 <__sinit>
 801e42c:	68a2      	ldr	r2, [r4, #8]
 801e42e:	4629      	mov	r1, r5
 801e430:	4620      	mov	r0, r4
 801e432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e436:	f002 bf69 	b.w	802130c <_putc_r>
 801e43a:	bf00      	nop
 801e43c:	200004b8 	.word	0x200004b8

0801e440 <_puts_r>:
 801e440:	b570      	push	{r4, r5, r6, lr}
 801e442:	460e      	mov	r6, r1
 801e444:	4605      	mov	r5, r0
 801e446:	b118      	cbz	r0, 801e450 <_puts_r+0x10>
 801e448:	6983      	ldr	r3, [r0, #24]
 801e44a:	b90b      	cbnz	r3, 801e450 <_puts_r+0x10>
 801e44c:	f001 fc90 	bl	801fd70 <__sinit>
 801e450:	69ab      	ldr	r3, [r5, #24]
 801e452:	68ac      	ldr	r4, [r5, #8]
 801e454:	b913      	cbnz	r3, 801e45c <_puts_r+0x1c>
 801e456:	4628      	mov	r0, r5
 801e458:	f001 fc8a 	bl	801fd70 <__sinit>
 801e45c:	4b23      	ldr	r3, [pc, #140]	; (801e4ec <_puts_r+0xac>)
 801e45e:	429c      	cmp	r4, r3
 801e460:	d117      	bne.n	801e492 <_puts_r+0x52>
 801e462:	686c      	ldr	r4, [r5, #4]
 801e464:	89a3      	ldrh	r3, [r4, #12]
 801e466:	071b      	lsls	r3, r3, #28
 801e468:	d51d      	bpl.n	801e4a6 <_puts_r+0x66>
 801e46a:	6923      	ldr	r3, [r4, #16]
 801e46c:	b1db      	cbz	r3, 801e4a6 <_puts_r+0x66>
 801e46e:	3e01      	subs	r6, #1
 801e470:	68a3      	ldr	r3, [r4, #8]
 801e472:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e476:	3b01      	subs	r3, #1
 801e478:	60a3      	str	r3, [r4, #8]
 801e47a:	b9e9      	cbnz	r1, 801e4b8 <_puts_r+0x78>
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	da2e      	bge.n	801e4de <_puts_r+0x9e>
 801e480:	4622      	mov	r2, r4
 801e482:	210a      	movs	r1, #10
 801e484:	4628      	mov	r0, r5
 801e486:	f000 fc79 	bl	801ed7c <__swbuf_r>
 801e48a:	3001      	adds	r0, #1
 801e48c:	d011      	beq.n	801e4b2 <_puts_r+0x72>
 801e48e:	200a      	movs	r0, #10
 801e490:	e011      	b.n	801e4b6 <_puts_r+0x76>
 801e492:	4b17      	ldr	r3, [pc, #92]	; (801e4f0 <_puts_r+0xb0>)
 801e494:	429c      	cmp	r4, r3
 801e496:	d101      	bne.n	801e49c <_puts_r+0x5c>
 801e498:	68ac      	ldr	r4, [r5, #8]
 801e49a:	e7e3      	b.n	801e464 <_puts_r+0x24>
 801e49c:	4b15      	ldr	r3, [pc, #84]	; (801e4f4 <_puts_r+0xb4>)
 801e49e:	429c      	cmp	r4, r3
 801e4a0:	bf08      	it	eq
 801e4a2:	68ec      	ldreq	r4, [r5, #12]
 801e4a4:	e7de      	b.n	801e464 <_puts_r+0x24>
 801e4a6:	4621      	mov	r1, r4
 801e4a8:	4628      	mov	r0, r5
 801e4aa:	f000 fccb 	bl	801ee44 <__swsetup_r>
 801e4ae:	2800      	cmp	r0, #0
 801e4b0:	d0dd      	beq.n	801e46e <_puts_r+0x2e>
 801e4b2:	f04f 30ff 	mov.w	r0, #4294967295
 801e4b6:	bd70      	pop	{r4, r5, r6, pc}
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	da04      	bge.n	801e4c6 <_puts_r+0x86>
 801e4bc:	69a2      	ldr	r2, [r4, #24]
 801e4be:	429a      	cmp	r2, r3
 801e4c0:	dc06      	bgt.n	801e4d0 <_puts_r+0x90>
 801e4c2:	290a      	cmp	r1, #10
 801e4c4:	d004      	beq.n	801e4d0 <_puts_r+0x90>
 801e4c6:	6823      	ldr	r3, [r4, #0]
 801e4c8:	1c5a      	adds	r2, r3, #1
 801e4ca:	6022      	str	r2, [r4, #0]
 801e4cc:	7019      	strb	r1, [r3, #0]
 801e4ce:	e7cf      	b.n	801e470 <_puts_r+0x30>
 801e4d0:	4622      	mov	r2, r4
 801e4d2:	4628      	mov	r0, r5
 801e4d4:	f000 fc52 	bl	801ed7c <__swbuf_r>
 801e4d8:	3001      	adds	r0, #1
 801e4da:	d1c9      	bne.n	801e470 <_puts_r+0x30>
 801e4dc:	e7e9      	b.n	801e4b2 <_puts_r+0x72>
 801e4de:	6823      	ldr	r3, [r4, #0]
 801e4e0:	200a      	movs	r0, #10
 801e4e2:	1c5a      	adds	r2, r3, #1
 801e4e4:	6022      	str	r2, [r4, #0]
 801e4e6:	7018      	strb	r0, [r3, #0]
 801e4e8:	e7e5      	b.n	801e4b6 <_puts_r+0x76>
 801e4ea:	bf00      	nop
 801e4ec:	0803bf10 	.word	0x0803bf10
 801e4f0:	0803bf30 	.word	0x0803bf30
 801e4f4:	0803bef0 	.word	0x0803bef0

0801e4f8 <puts>:
 801e4f8:	4b02      	ldr	r3, [pc, #8]	; (801e504 <puts+0xc>)
 801e4fa:	4601      	mov	r1, r0
 801e4fc:	6818      	ldr	r0, [r3, #0]
 801e4fe:	f7ff bf9f 	b.w	801e440 <_puts_r>
 801e502:	bf00      	nop
 801e504:	200004b8 	.word	0x200004b8

0801e508 <rand>:
 801e508:	b538      	push	{r3, r4, r5, lr}
 801e50a:	4b13      	ldr	r3, [pc, #76]	; (801e558 <rand+0x50>)
 801e50c:	681c      	ldr	r4, [r3, #0]
 801e50e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e510:	b97b      	cbnz	r3, 801e532 <rand+0x2a>
 801e512:	2018      	movs	r0, #24
 801e514:	f7fe ffbe 	bl	801d494 <malloc>
 801e518:	4a10      	ldr	r2, [pc, #64]	; (801e55c <rand+0x54>)
 801e51a:	4b11      	ldr	r3, [pc, #68]	; (801e560 <rand+0x58>)
 801e51c:	63a0      	str	r0, [r4, #56]	; 0x38
 801e51e:	e9c0 2300 	strd	r2, r3, [r0]
 801e522:	4b10      	ldr	r3, [pc, #64]	; (801e564 <rand+0x5c>)
 801e524:	6083      	str	r3, [r0, #8]
 801e526:	230b      	movs	r3, #11
 801e528:	8183      	strh	r3, [r0, #12]
 801e52a:	2201      	movs	r2, #1
 801e52c:	2300      	movs	r3, #0
 801e52e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e532:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e534:	480c      	ldr	r0, [pc, #48]	; (801e568 <rand+0x60>)
 801e536:	690a      	ldr	r2, [r1, #16]
 801e538:	694b      	ldr	r3, [r1, #20]
 801e53a:	4c0c      	ldr	r4, [pc, #48]	; (801e56c <rand+0x64>)
 801e53c:	4350      	muls	r0, r2
 801e53e:	fb04 0003 	mla	r0, r4, r3, r0
 801e542:	fba2 2304 	umull	r2, r3, r2, r4
 801e546:	4403      	add	r3, r0
 801e548:	1c54      	adds	r4, r2, #1
 801e54a:	f143 0500 	adc.w	r5, r3, #0
 801e54e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801e552:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801e556:	bd38      	pop	{r3, r4, r5, pc}
 801e558:	200004b8 	.word	0x200004b8
 801e55c:	abcd330e 	.word	0xabcd330e
 801e560:	e66d1234 	.word	0xe66d1234
 801e564:	0005deec 	.word	0x0005deec
 801e568:	5851f42d 	.word	0x5851f42d
 801e56c:	4c957f2d 	.word	0x4c957f2d

0801e570 <realloc>:
 801e570:	4b02      	ldr	r3, [pc, #8]	; (801e57c <realloc+0xc>)
 801e572:	460a      	mov	r2, r1
 801e574:	4601      	mov	r1, r0
 801e576:	6818      	ldr	r0, [r3, #0]
 801e578:	f002 b90e 	b.w	8020798 <_realloc_r>
 801e57c:	200004b8 	.word	0x200004b8

0801e580 <modf>:
 801e580:	ee10 1a90 	vmov	r1, s1
 801e584:	b570      	push	{r4, r5, r6, lr}
 801e586:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801e58a:	f2a5 33ff 	subw	r3, r5, #1023	; 0x3ff
 801e58e:	2b13      	cmp	r3, #19
 801e590:	ee10 4a10 	vmov	r4, s0
 801e594:	dc1f      	bgt.n	801e5d6 <modf+0x56>
 801e596:	2b00      	cmp	r3, #0
 801e598:	da05      	bge.n	801e5a6 <modf+0x26>
 801e59a:	2200      	movs	r2, #0
 801e59c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801e5a0:	e9c0 2300 	strd	r2, r3, [r0]
 801e5a4:	bd70      	pop	{r4, r5, r6, pc}
 801e5a6:	4d19      	ldr	r5, [pc, #100]	; (801e60c <modf+0x8c>)
 801e5a8:	411d      	asrs	r5, r3
 801e5aa:	ea01 0305 	and.w	r3, r1, r5
 801e5ae:	431c      	orrs	r4, r3
 801e5b0:	d107      	bne.n	801e5c2 <modf+0x42>
 801e5b2:	ed80 0b00 	vstr	d0, [r0]
 801e5b6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801e5ba:	4622      	mov	r2, r4
 801e5bc:	ec43 2b10 	vmov	d0, r2, r3
 801e5c0:	e7f0      	b.n	801e5a4 <modf+0x24>
 801e5c2:	2200      	movs	r2, #0
 801e5c4:	ea21 0305 	bic.w	r3, r1, r5
 801e5c8:	ec43 2b17 	vmov	d7, r2, r3
 801e5cc:	e9c0 2300 	strd	r2, r3, [r0]
 801e5d0:	ee30 0b47 	vsub.f64	d0, d0, d7
 801e5d4:	e7e6      	b.n	801e5a4 <modf+0x24>
 801e5d6:	2b33      	cmp	r3, #51	; 0x33
 801e5d8:	dd05      	ble.n	801e5e6 <modf+0x66>
 801e5da:	ed80 0b00 	vstr	d0, [r0]
 801e5de:	2200      	movs	r2, #0
 801e5e0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801e5e4:	e7ea      	b.n	801e5bc <modf+0x3c>
 801e5e6:	f2a5 4313 	subw	r3, r5, #1043	; 0x413
 801e5ea:	f04f 35ff 	mov.w	r5, #4294967295
 801e5ee:	40dd      	lsrs	r5, r3
 801e5f0:	ea15 0604 	ands.w	r6, r5, r4
 801e5f4:	d105      	bne.n	801e602 <modf+0x82>
 801e5f6:	ed80 0b00 	vstr	d0, [r0]
 801e5fa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801e5fe:	4632      	mov	r2, r6
 801e600:	e7dc      	b.n	801e5bc <modf+0x3c>
 801e602:	ee10 3a90 	vmov	r3, s1
 801e606:	ea24 0205 	bic.w	r2, r4, r5
 801e60a:	e7dd      	b.n	801e5c8 <modf+0x48>
 801e60c:	000fffff 	.word	0x000fffff

0801e610 <_sbrk_r>:
 801e610:	b538      	push	{r3, r4, r5, lr}
 801e612:	4c06      	ldr	r4, [pc, #24]	; (801e62c <_sbrk_r+0x1c>)
 801e614:	2300      	movs	r3, #0
 801e616:	4605      	mov	r5, r0
 801e618:	4608      	mov	r0, r1
 801e61a:	6023      	str	r3, [r4, #0]
 801e61c:	f7e5 fc48 	bl	8003eb0 <_sbrk>
 801e620:	1c43      	adds	r3, r0, #1
 801e622:	d102      	bne.n	801e62a <_sbrk_r+0x1a>
 801e624:	6823      	ldr	r3, [r4, #0]
 801e626:	b103      	cbz	r3, 801e62a <_sbrk_r+0x1a>
 801e628:	602b      	str	r3, [r5, #0]
 801e62a:	bd38      	pop	{r3, r4, r5, pc}
 801e62c:	200354e4 	.word	0x200354e4

0801e630 <siprintf>:
 801e630:	b40e      	push	{r1, r2, r3}
 801e632:	b500      	push	{lr}
 801e634:	b09c      	sub	sp, #112	; 0x70
 801e636:	ab1d      	add	r3, sp, #116	; 0x74
 801e638:	9002      	str	r0, [sp, #8]
 801e63a:	9006      	str	r0, [sp, #24]
 801e63c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e640:	4809      	ldr	r0, [pc, #36]	; (801e668 <siprintf+0x38>)
 801e642:	9107      	str	r1, [sp, #28]
 801e644:	9104      	str	r1, [sp, #16]
 801e646:	4909      	ldr	r1, [pc, #36]	; (801e66c <siprintf+0x3c>)
 801e648:	f853 2b04 	ldr.w	r2, [r3], #4
 801e64c:	9105      	str	r1, [sp, #20]
 801e64e:	6800      	ldr	r0, [r0, #0]
 801e650:	9301      	str	r3, [sp, #4]
 801e652:	a902      	add	r1, sp, #8
 801e654:	f002 f920 	bl	8020898 <_svfiprintf_r>
 801e658:	9b02      	ldr	r3, [sp, #8]
 801e65a:	2200      	movs	r2, #0
 801e65c:	701a      	strb	r2, [r3, #0]
 801e65e:	b01c      	add	sp, #112	; 0x70
 801e660:	f85d eb04 	ldr.w	lr, [sp], #4
 801e664:	b003      	add	sp, #12
 801e666:	4770      	bx	lr
 801e668:	200004b8 	.word	0x200004b8
 801e66c:	ffff0208 	.word	0xffff0208

0801e670 <siscanf>:
 801e670:	b40e      	push	{r1, r2, r3}
 801e672:	b530      	push	{r4, r5, lr}
 801e674:	b09c      	sub	sp, #112	; 0x70
 801e676:	ac1f      	add	r4, sp, #124	; 0x7c
 801e678:	f44f 7201 	mov.w	r2, #516	; 0x204
 801e67c:	f854 5b04 	ldr.w	r5, [r4], #4
 801e680:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e684:	9002      	str	r0, [sp, #8]
 801e686:	9006      	str	r0, [sp, #24]
 801e688:	f7e1 fde4 	bl	8000254 <strlen>
 801e68c:	4b0b      	ldr	r3, [pc, #44]	; (801e6bc <siscanf+0x4c>)
 801e68e:	9003      	str	r0, [sp, #12]
 801e690:	9007      	str	r0, [sp, #28]
 801e692:	930b      	str	r3, [sp, #44]	; 0x2c
 801e694:	480a      	ldr	r0, [pc, #40]	; (801e6c0 <siscanf+0x50>)
 801e696:	9401      	str	r4, [sp, #4]
 801e698:	2300      	movs	r3, #0
 801e69a:	930f      	str	r3, [sp, #60]	; 0x3c
 801e69c:	9314      	str	r3, [sp, #80]	; 0x50
 801e69e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e6a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e6a6:	462a      	mov	r2, r5
 801e6a8:	4623      	mov	r3, r4
 801e6aa:	a902      	add	r1, sp, #8
 801e6ac:	6800      	ldr	r0, [r0, #0]
 801e6ae:	f002 fa45 	bl	8020b3c <__ssvfiscanf_r>
 801e6b2:	b01c      	add	sp, #112	; 0x70
 801e6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e6b8:	b003      	add	sp, #12
 801e6ba:	4770      	bx	lr
 801e6bc:	0801e6e7 	.word	0x0801e6e7
 801e6c0:	200004b8 	.word	0x200004b8

0801e6c4 <__sread>:
 801e6c4:	b510      	push	{r4, lr}
 801e6c6:	460c      	mov	r4, r1
 801e6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6cc:	f002 fe54 	bl	8021378 <_read_r>
 801e6d0:	2800      	cmp	r0, #0
 801e6d2:	bfab      	itete	ge
 801e6d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e6d6:	89a3      	ldrhlt	r3, [r4, #12]
 801e6d8:	181b      	addge	r3, r3, r0
 801e6da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e6de:	bfac      	ite	ge
 801e6e0:	6563      	strge	r3, [r4, #84]	; 0x54
 801e6e2:	81a3      	strhlt	r3, [r4, #12]
 801e6e4:	bd10      	pop	{r4, pc}

0801e6e6 <__seofread>:
 801e6e6:	2000      	movs	r0, #0
 801e6e8:	4770      	bx	lr

0801e6ea <__swrite>:
 801e6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6ee:	461f      	mov	r7, r3
 801e6f0:	898b      	ldrh	r3, [r1, #12]
 801e6f2:	05db      	lsls	r3, r3, #23
 801e6f4:	4605      	mov	r5, r0
 801e6f6:	460c      	mov	r4, r1
 801e6f8:	4616      	mov	r6, r2
 801e6fa:	d505      	bpl.n	801e708 <__swrite+0x1e>
 801e6fc:	2302      	movs	r3, #2
 801e6fe:	2200      	movs	r2, #0
 801e700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e704:	f001 fcd4 	bl	80200b0 <_lseek_r>
 801e708:	89a3      	ldrh	r3, [r4, #12]
 801e70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e70e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e712:	81a3      	strh	r3, [r4, #12]
 801e714:	4632      	mov	r2, r6
 801e716:	463b      	mov	r3, r7
 801e718:	4628      	mov	r0, r5
 801e71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e71e:	f000 bb7f 	b.w	801ee20 <_write_r>

0801e722 <__sseek>:
 801e722:	b510      	push	{r4, lr}
 801e724:	460c      	mov	r4, r1
 801e726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e72a:	f001 fcc1 	bl	80200b0 <_lseek_r>
 801e72e:	1c43      	adds	r3, r0, #1
 801e730:	89a3      	ldrh	r3, [r4, #12]
 801e732:	bf15      	itete	ne
 801e734:	6560      	strne	r0, [r4, #84]	; 0x54
 801e736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e73a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e73e:	81a3      	strheq	r3, [r4, #12]
 801e740:	bf18      	it	ne
 801e742:	81a3      	strhne	r3, [r4, #12]
 801e744:	bd10      	pop	{r4, pc}

0801e746 <__sclose>:
 801e746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e74a:	f000 bc25 	b.w	801ef98 <_close_r>

0801e74e <stpcpy>:
 801e74e:	4603      	mov	r3, r0
 801e750:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e754:	4618      	mov	r0, r3
 801e756:	f803 2b01 	strb.w	r2, [r3], #1
 801e75a:	2a00      	cmp	r2, #0
 801e75c:	d1f8      	bne.n	801e750 <stpcpy+0x2>
 801e75e:	4770      	bx	lr

0801e760 <strchr>:
 801e760:	b2c9      	uxtb	r1, r1
 801e762:	4603      	mov	r3, r0
 801e764:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e768:	b11a      	cbz	r2, 801e772 <strchr+0x12>
 801e76a:	428a      	cmp	r2, r1
 801e76c:	d1f9      	bne.n	801e762 <strchr+0x2>
 801e76e:	4618      	mov	r0, r3
 801e770:	4770      	bx	lr
 801e772:	2900      	cmp	r1, #0
 801e774:	bf18      	it	ne
 801e776:	2300      	movne	r3, #0
 801e778:	e7f9      	b.n	801e76e <strchr+0xe>

0801e77a <strcpy>:
 801e77a:	4603      	mov	r3, r0
 801e77c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e780:	f803 2b01 	strb.w	r2, [r3], #1
 801e784:	2a00      	cmp	r2, #0
 801e786:	d1f9      	bne.n	801e77c <strcpy+0x2>
 801e788:	4770      	bx	lr

0801e78a <strncmp>:
 801e78a:	b510      	push	{r4, lr}
 801e78c:	b16a      	cbz	r2, 801e7aa <strncmp+0x20>
 801e78e:	3901      	subs	r1, #1
 801e790:	1884      	adds	r4, r0, r2
 801e792:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e796:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e79a:	4293      	cmp	r3, r2
 801e79c:	d103      	bne.n	801e7a6 <strncmp+0x1c>
 801e79e:	42a0      	cmp	r0, r4
 801e7a0:	d001      	beq.n	801e7a6 <strncmp+0x1c>
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d1f5      	bne.n	801e792 <strncmp+0x8>
 801e7a6:	1a98      	subs	r0, r3, r2
 801e7a8:	bd10      	pop	{r4, pc}
 801e7aa:	4610      	mov	r0, r2
 801e7ac:	e7fc      	b.n	801e7a8 <strncmp+0x1e>

0801e7ae <strncpy>:
 801e7ae:	b570      	push	{r4, r5, r6, lr}
 801e7b0:	3901      	subs	r1, #1
 801e7b2:	4604      	mov	r4, r0
 801e7b4:	b902      	cbnz	r2, 801e7b8 <strncpy+0xa>
 801e7b6:	bd70      	pop	{r4, r5, r6, pc}
 801e7b8:	4623      	mov	r3, r4
 801e7ba:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801e7be:	f803 5b01 	strb.w	r5, [r3], #1
 801e7c2:	1e56      	subs	r6, r2, #1
 801e7c4:	b92d      	cbnz	r5, 801e7d2 <strncpy+0x24>
 801e7c6:	4414      	add	r4, r2
 801e7c8:	42a3      	cmp	r3, r4
 801e7ca:	d0f4      	beq.n	801e7b6 <strncpy+0x8>
 801e7cc:	f803 5b01 	strb.w	r5, [r3], #1
 801e7d0:	e7fa      	b.n	801e7c8 <strncpy+0x1a>
 801e7d2:	461c      	mov	r4, r3
 801e7d4:	4632      	mov	r2, r6
 801e7d6:	e7ed      	b.n	801e7b4 <strncpy+0x6>

0801e7d8 <_strtol_l.isra.0>:
 801e7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7dc:	4680      	mov	r8, r0
 801e7de:	4689      	mov	r9, r1
 801e7e0:	4692      	mov	sl, r2
 801e7e2:	461e      	mov	r6, r3
 801e7e4:	460f      	mov	r7, r1
 801e7e6:	463d      	mov	r5, r7
 801e7e8:	9808      	ldr	r0, [sp, #32]
 801e7ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e7ee:	f001 fc3f 	bl	8020070 <__locale_ctype_ptr_l>
 801e7f2:	4420      	add	r0, r4
 801e7f4:	7843      	ldrb	r3, [r0, #1]
 801e7f6:	f013 0308 	ands.w	r3, r3, #8
 801e7fa:	d132      	bne.n	801e862 <_strtol_l.isra.0+0x8a>
 801e7fc:	2c2d      	cmp	r4, #45	; 0x2d
 801e7fe:	d132      	bne.n	801e866 <_strtol_l.isra.0+0x8e>
 801e800:	787c      	ldrb	r4, [r7, #1]
 801e802:	1cbd      	adds	r5, r7, #2
 801e804:	2201      	movs	r2, #1
 801e806:	2e00      	cmp	r6, #0
 801e808:	d05d      	beq.n	801e8c6 <_strtol_l.isra.0+0xee>
 801e80a:	2e10      	cmp	r6, #16
 801e80c:	d109      	bne.n	801e822 <_strtol_l.isra.0+0x4a>
 801e80e:	2c30      	cmp	r4, #48	; 0x30
 801e810:	d107      	bne.n	801e822 <_strtol_l.isra.0+0x4a>
 801e812:	782b      	ldrb	r3, [r5, #0]
 801e814:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e818:	2b58      	cmp	r3, #88	; 0x58
 801e81a:	d14f      	bne.n	801e8bc <_strtol_l.isra.0+0xe4>
 801e81c:	786c      	ldrb	r4, [r5, #1]
 801e81e:	2610      	movs	r6, #16
 801e820:	3502      	adds	r5, #2
 801e822:	2a00      	cmp	r2, #0
 801e824:	bf14      	ite	ne
 801e826:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801e82a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801e82e:	2700      	movs	r7, #0
 801e830:	fbb1 fcf6 	udiv	ip, r1, r6
 801e834:	4638      	mov	r0, r7
 801e836:	fb06 1e1c 	mls	lr, r6, ip, r1
 801e83a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801e83e:	2b09      	cmp	r3, #9
 801e840:	d817      	bhi.n	801e872 <_strtol_l.isra.0+0x9a>
 801e842:	461c      	mov	r4, r3
 801e844:	42a6      	cmp	r6, r4
 801e846:	dd23      	ble.n	801e890 <_strtol_l.isra.0+0xb8>
 801e848:	1c7b      	adds	r3, r7, #1
 801e84a:	d007      	beq.n	801e85c <_strtol_l.isra.0+0x84>
 801e84c:	4584      	cmp	ip, r0
 801e84e:	d31c      	bcc.n	801e88a <_strtol_l.isra.0+0xb2>
 801e850:	d101      	bne.n	801e856 <_strtol_l.isra.0+0x7e>
 801e852:	45a6      	cmp	lr, r4
 801e854:	db19      	blt.n	801e88a <_strtol_l.isra.0+0xb2>
 801e856:	fb00 4006 	mla	r0, r0, r6, r4
 801e85a:	2701      	movs	r7, #1
 801e85c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e860:	e7eb      	b.n	801e83a <_strtol_l.isra.0+0x62>
 801e862:	462f      	mov	r7, r5
 801e864:	e7bf      	b.n	801e7e6 <_strtol_l.isra.0+0xe>
 801e866:	2c2b      	cmp	r4, #43	; 0x2b
 801e868:	bf04      	itt	eq
 801e86a:	1cbd      	addeq	r5, r7, #2
 801e86c:	787c      	ldrbeq	r4, [r7, #1]
 801e86e:	461a      	mov	r2, r3
 801e870:	e7c9      	b.n	801e806 <_strtol_l.isra.0+0x2e>
 801e872:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801e876:	2b19      	cmp	r3, #25
 801e878:	d801      	bhi.n	801e87e <_strtol_l.isra.0+0xa6>
 801e87a:	3c37      	subs	r4, #55	; 0x37
 801e87c:	e7e2      	b.n	801e844 <_strtol_l.isra.0+0x6c>
 801e87e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801e882:	2b19      	cmp	r3, #25
 801e884:	d804      	bhi.n	801e890 <_strtol_l.isra.0+0xb8>
 801e886:	3c57      	subs	r4, #87	; 0x57
 801e888:	e7dc      	b.n	801e844 <_strtol_l.isra.0+0x6c>
 801e88a:	f04f 37ff 	mov.w	r7, #4294967295
 801e88e:	e7e5      	b.n	801e85c <_strtol_l.isra.0+0x84>
 801e890:	1c7b      	adds	r3, r7, #1
 801e892:	d108      	bne.n	801e8a6 <_strtol_l.isra.0+0xce>
 801e894:	2322      	movs	r3, #34	; 0x22
 801e896:	f8c8 3000 	str.w	r3, [r8]
 801e89a:	4608      	mov	r0, r1
 801e89c:	f1ba 0f00 	cmp.w	sl, #0
 801e8a0:	d107      	bne.n	801e8b2 <_strtol_l.isra.0+0xda>
 801e8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8a6:	b102      	cbz	r2, 801e8aa <_strtol_l.isra.0+0xd2>
 801e8a8:	4240      	negs	r0, r0
 801e8aa:	f1ba 0f00 	cmp.w	sl, #0
 801e8ae:	d0f8      	beq.n	801e8a2 <_strtol_l.isra.0+0xca>
 801e8b0:	b10f      	cbz	r7, 801e8b6 <_strtol_l.isra.0+0xde>
 801e8b2:	f105 39ff 	add.w	r9, r5, #4294967295
 801e8b6:	f8ca 9000 	str.w	r9, [sl]
 801e8ba:	e7f2      	b.n	801e8a2 <_strtol_l.isra.0+0xca>
 801e8bc:	2430      	movs	r4, #48	; 0x30
 801e8be:	2e00      	cmp	r6, #0
 801e8c0:	d1af      	bne.n	801e822 <_strtol_l.isra.0+0x4a>
 801e8c2:	2608      	movs	r6, #8
 801e8c4:	e7ad      	b.n	801e822 <_strtol_l.isra.0+0x4a>
 801e8c6:	2c30      	cmp	r4, #48	; 0x30
 801e8c8:	d0a3      	beq.n	801e812 <_strtol_l.isra.0+0x3a>
 801e8ca:	260a      	movs	r6, #10
 801e8cc:	e7a9      	b.n	801e822 <_strtol_l.isra.0+0x4a>
	...

0801e8d0 <_strtol_r>:
 801e8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e8d2:	4c06      	ldr	r4, [pc, #24]	; (801e8ec <_strtol_r+0x1c>)
 801e8d4:	4d06      	ldr	r5, [pc, #24]	; (801e8f0 <_strtol_r+0x20>)
 801e8d6:	6824      	ldr	r4, [r4, #0]
 801e8d8:	6a24      	ldr	r4, [r4, #32]
 801e8da:	2c00      	cmp	r4, #0
 801e8dc:	bf08      	it	eq
 801e8de:	462c      	moveq	r4, r5
 801e8e0:	9400      	str	r4, [sp, #0]
 801e8e2:	f7ff ff79 	bl	801e7d8 <_strtol_l.isra.0>
 801e8e6:	b003      	add	sp, #12
 801e8e8:	bd30      	pop	{r4, r5, pc}
 801e8ea:	bf00      	nop
 801e8ec:	200004b8 	.word	0x200004b8
 801e8f0:	20000580 	.word	0x20000580

0801e8f4 <strtol>:
 801e8f4:	4b08      	ldr	r3, [pc, #32]	; (801e918 <strtol+0x24>)
 801e8f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e8f8:	681c      	ldr	r4, [r3, #0]
 801e8fa:	4d08      	ldr	r5, [pc, #32]	; (801e91c <strtol+0x28>)
 801e8fc:	6a23      	ldr	r3, [r4, #32]
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	bf08      	it	eq
 801e902:	462b      	moveq	r3, r5
 801e904:	9300      	str	r3, [sp, #0]
 801e906:	4613      	mov	r3, r2
 801e908:	460a      	mov	r2, r1
 801e90a:	4601      	mov	r1, r0
 801e90c:	4620      	mov	r0, r4
 801e90e:	f7ff ff63 	bl	801e7d8 <_strtol_l.isra.0>
 801e912:	b003      	add	sp, #12
 801e914:	bd30      	pop	{r4, r5, pc}
 801e916:	bf00      	nop
 801e918:	200004b8 	.word	0x200004b8
 801e91c:	20000580 	.word	0x20000580

0801e920 <__tzcalc_limits>:
 801e920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e924:	4680      	mov	r8, r0
 801e926:	f001 faf1 	bl	801ff0c <__gettzinfo>
 801e92a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801e92e:	4598      	cmp	r8, r3
 801e930:	f340 8098 	ble.w	801ea64 <__tzcalc_limits+0x144>
 801e934:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801e938:	4443      	add	r3, r8
 801e93a:	109b      	asrs	r3, r3, #2
 801e93c:	f240 126d 	movw	r2, #365	; 0x16d
 801e940:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801e944:	fb02 3505 	mla	r5, r2, r5, r3
 801e948:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801e94c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801e950:	fb93 f3f2 	sdiv	r3, r3, r2
 801e954:	441d      	add	r5, r3
 801e956:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e95a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801e95e:	fb98 f7f3 	sdiv	r7, r8, r3
 801e962:	fb03 8717 	mls	r7, r3, r7, r8
 801e966:	4442      	add	r2, r8
 801e968:	fab7 fc87 	clz	ip, r7
 801e96c:	fb92 f2f3 	sdiv	r2, r2, r3
 801e970:	f008 0303 	and.w	r3, r8, #3
 801e974:	4415      	add	r5, r2
 801e976:	2264      	movs	r2, #100	; 0x64
 801e978:	f8c0 8004 	str.w	r8, [r0, #4]
 801e97c:	fb98 f6f2 	sdiv	r6, r8, r2
 801e980:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e984:	fb02 8616 	mls	r6, r2, r6, r8
 801e988:	4604      	mov	r4, r0
 801e98a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801e98e:	9300      	str	r3, [sp, #0]
 801e990:	f04f 0e07 	mov.w	lr, #7
 801e994:	7a22      	ldrb	r2, [r4, #8]
 801e996:	6963      	ldr	r3, [r4, #20]
 801e998:	2a4a      	cmp	r2, #74	; 0x4a
 801e99a:	d128      	bne.n	801e9ee <__tzcalc_limits+0xce>
 801e99c:	9900      	ldr	r1, [sp, #0]
 801e99e:	18ea      	adds	r2, r5, r3
 801e9a0:	b901      	cbnz	r1, 801e9a4 <__tzcalc_limits+0x84>
 801e9a2:	b906      	cbnz	r6, 801e9a6 <__tzcalc_limits+0x86>
 801e9a4:	bb0f      	cbnz	r7, 801e9ea <__tzcalc_limits+0xca>
 801e9a6:	2b3b      	cmp	r3, #59	; 0x3b
 801e9a8:	bfd4      	ite	le
 801e9aa:	2300      	movle	r3, #0
 801e9ac:	2301      	movgt	r3, #1
 801e9ae:	4413      	add	r3, r2
 801e9b0:	1e5a      	subs	r2, r3, #1
 801e9b2:	69a3      	ldr	r3, [r4, #24]
 801e9b4:	492c      	ldr	r1, [pc, #176]	; (801ea68 <__tzcalc_limits+0x148>)
 801e9b6:	fb01 3202 	mla	r2, r1, r2, r3
 801e9ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e9bc:	4413      	add	r3, r2
 801e9be:	461a      	mov	r2, r3
 801e9c0:	17db      	asrs	r3, r3, #31
 801e9c2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801e9c6:	3428      	adds	r4, #40	; 0x28
 801e9c8:	45a3      	cmp	fp, r4
 801e9ca:	d1e3      	bne.n	801e994 <__tzcalc_limits+0x74>
 801e9cc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801e9d0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801e9d4:	4294      	cmp	r4, r2
 801e9d6:	eb75 0303 	sbcs.w	r3, r5, r3
 801e9da:	bfb4      	ite	lt
 801e9dc:	2301      	movlt	r3, #1
 801e9de:	2300      	movge	r3, #0
 801e9e0:	6003      	str	r3, [r0, #0]
 801e9e2:	2001      	movs	r0, #1
 801e9e4:	b003      	add	sp, #12
 801e9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9ea:	2300      	movs	r3, #0
 801e9ec:	e7df      	b.n	801e9ae <__tzcalc_limits+0x8e>
 801e9ee:	2a44      	cmp	r2, #68	; 0x44
 801e9f0:	d101      	bne.n	801e9f6 <__tzcalc_limits+0xd6>
 801e9f2:	18ea      	adds	r2, r5, r3
 801e9f4:	e7dd      	b.n	801e9b2 <__tzcalc_limits+0x92>
 801e9f6:	9a00      	ldr	r2, [sp, #0]
 801e9f8:	bb72      	cbnz	r2, 801ea58 <__tzcalc_limits+0x138>
 801e9fa:	2e00      	cmp	r6, #0
 801e9fc:	bf0c      	ite	eq
 801e9fe:	46e1      	moveq	r9, ip
 801ea00:	f04f 0901 	movne.w	r9, #1
 801ea04:	2230      	movs	r2, #48	; 0x30
 801ea06:	fb02 f909 	mul.w	r9, r2, r9
 801ea0a:	68e2      	ldr	r2, [r4, #12]
 801ea0c:	9201      	str	r2, [sp, #4]
 801ea0e:	f04f 0800 	mov.w	r8, #0
 801ea12:	462a      	mov	r2, r5
 801ea14:	f108 0801 	add.w	r8, r8, #1
 801ea18:	4914      	ldr	r1, [pc, #80]	; (801ea6c <__tzcalc_limits+0x14c>)
 801ea1a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 801ea1e:	448a      	add	sl, r1
 801ea20:	9901      	ldr	r1, [sp, #4]
 801ea22:	f85a ac04 	ldr.w	sl, [sl, #-4]
 801ea26:	4541      	cmp	r1, r8
 801ea28:	dc18      	bgt.n	801ea5c <__tzcalc_limits+0x13c>
 801ea2a:	f102 0804 	add.w	r8, r2, #4
 801ea2e:	fb98 f9fe 	sdiv	r9, r8, lr
 801ea32:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801ea36:	eba8 0909 	sub.w	r9, r8, r9
 801ea3a:	ebb3 0909 	subs.w	r9, r3, r9
 801ea3e:	6923      	ldr	r3, [r4, #16]
 801ea40:	f103 33ff 	add.w	r3, r3, #4294967295
 801ea44:	bf48      	it	mi
 801ea46:	f109 0907 	addmi.w	r9, r9, #7
 801ea4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801ea4e:	444b      	add	r3, r9
 801ea50:	4553      	cmp	r3, sl
 801ea52:	da05      	bge.n	801ea60 <__tzcalc_limits+0x140>
 801ea54:	441a      	add	r2, r3
 801ea56:	e7ac      	b.n	801e9b2 <__tzcalc_limits+0x92>
 801ea58:	46e1      	mov	r9, ip
 801ea5a:	e7d3      	b.n	801ea04 <__tzcalc_limits+0xe4>
 801ea5c:	4452      	add	r2, sl
 801ea5e:	e7d9      	b.n	801ea14 <__tzcalc_limits+0xf4>
 801ea60:	3b07      	subs	r3, #7
 801ea62:	e7f5      	b.n	801ea50 <__tzcalc_limits+0x130>
 801ea64:	2000      	movs	r0, #0
 801ea66:	e7bd      	b.n	801e9e4 <__tzcalc_limits+0xc4>
 801ea68:	00015180 	.word	0x00015180
 801ea6c:	0803bdbc 	.word	0x0803bdbc

0801ea70 <__tz_lock>:
 801ea70:	4770      	bx	lr

0801ea72 <__tz_unlock>:
 801ea72:	4770      	bx	lr

0801ea74 <_tzset_unlocked>:
 801ea74:	4b01      	ldr	r3, [pc, #4]	; (801ea7c <_tzset_unlocked+0x8>)
 801ea76:	6818      	ldr	r0, [r3, #0]
 801ea78:	f000 b802 	b.w	801ea80 <_tzset_unlocked_r>
 801ea7c:	200004b8 	.word	0x200004b8

0801ea80 <_tzset_unlocked_r>:
 801ea80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea84:	b08d      	sub	sp, #52	; 0x34
 801ea86:	4607      	mov	r7, r0
 801ea88:	f001 fa40 	bl	801ff0c <__gettzinfo>
 801ea8c:	49af      	ldr	r1, [pc, #700]	; (801ed4c <_tzset_unlocked_r+0x2cc>)
 801ea8e:	4eb0      	ldr	r6, [pc, #704]	; (801ed50 <_tzset_unlocked_r+0x2d0>)
 801ea90:	4605      	mov	r5, r0
 801ea92:	4638      	mov	r0, r7
 801ea94:	f001 fa32 	bl	801fefc <_getenv_r>
 801ea98:	4604      	mov	r4, r0
 801ea9a:	b970      	cbnz	r0, 801eaba <_tzset_unlocked_r+0x3a>
 801ea9c:	4bad      	ldr	r3, [pc, #692]	; (801ed54 <_tzset_unlocked_r+0x2d4>)
 801ea9e:	4aae      	ldr	r2, [pc, #696]	; (801ed58 <_tzset_unlocked_r+0x2d8>)
 801eaa0:	6018      	str	r0, [r3, #0]
 801eaa2:	4bae      	ldr	r3, [pc, #696]	; (801ed5c <_tzset_unlocked_r+0x2dc>)
 801eaa4:	6018      	str	r0, [r3, #0]
 801eaa6:	4bae      	ldr	r3, [pc, #696]	; (801ed60 <_tzset_unlocked_r+0x2e0>)
 801eaa8:	6830      	ldr	r0, [r6, #0]
 801eaaa:	e9c3 2200 	strd	r2, r2, [r3]
 801eaae:	f7fe fcf9 	bl	801d4a4 <free>
 801eab2:	6034      	str	r4, [r6, #0]
 801eab4:	b00d      	add	sp, #52	; 0x34
 801eab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaba:	6831      	ldr	r1, [r6, #0]
 801eabc:	2900      	cmp	r1, #0
 801eabe:	d15f      	bne.n	801eb80 <_tzset_unlocked_r+0x100>
 801eac0:	6830      	ldr	r0, [r6, #0]
 801eac2:	f7fe fcef 	bl	801d4a4 <free>
 801eac6:	4620      	mov	r0, r4
 801eac8:	f7e1 fbc4 	bl	8000254 <strlen>
 801eacc:	1c41      	adds	r1, r0, #1
 801eace:	4638      	mov	r0, r7
 801ead0:	f7fe fff4 	bl	801dabc <_malloc_r>
 801ead4:	6030      	str	r0, [r6, #0]
 801ead6:	2800      	cmp	r0, #0
 801ead8:	d157      	bne.n	801eb8a <_tzset_unlocked_r+0x10a>
 801eada:	7823      	ldrb	r3, [r4, #0]
 801eadc:	4aa1      	ldr	r2, [pc, #644]	; (801ed64 <_tzset_unlocked_r+0x2e4>)
 801eade:	49a2      	ldr	r1, [pc, #648]	; (801ed68 <_tzset_unlocked_r+0x2e8>)
 801eae0:	2b3a      	cmp	r3, #58	; 0x3a
 801eae2:	bf08      	it	eq
 801eae4:	3401      	addeq	r4, #1
 801eae6:	ae0a      	add	r6, sp, #40	; 0x28
 801eae8:	4633      	mov	r3, r6
 801eaea:	4620      	mov	r0, r4
 801eaec:	f7ff fdc0 	bl	801e670 <siscanf>
 801eaf0:	2800      	cmp	r0, #0
 801eaf2:	dddf      	ble.n	801eab4 <_tzset_unlocked_r+0x34>
 801eaf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eaf6:	18e7      	adds	r7, r4, r3
 801eaf8:	5ce3      	ldrb	r3, [r4, r3]
 801eafa:	2b2d      	cmp	r3, #45	; 0x2d
 801eafc:	d149      	bne.n	801eb92 <_tzset_unlocked_r+0x112>
 801eafe:	3701      	adds	r7, #1
 801eb00:	f04f 34ff 	mov.w	r4, #4294967295
 801eb04:	f10d 0a20 	add.w	sl, sp, #32
 801eb08:	f10d 0b1e 	add.w	fp, sp, #30
 801eb0c:	f04f 0800 	mov.w	r8, #0
 801eb10:	9603      	str	r6, [sp, #12]
 801eb12:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801eb16:	f8cd b000 	str.w	fp, [sp]
 801eb1a:	4633      	mov	r3, r6
 801eb1c:	aa07      	add	r2, sp, #28
 801eb1e:	4993      	ldr	r1, [pc, #588]	; (801ed6c <_tzset_unlocked_r+0x2ec>)
 801eb20:	f8ad 801e 	strh.w	r8, [sp, #30]
 801eb24:	4638      	mov	r0, r7
 801eb26:	f8ad 8020 	strh.w	r8, [sp, #32]
 801eb2a:	f7ff fda1 	bl	801e670 <siscanf>
 801eb2e:	4540      	cmp	r0, r8
 801eb30:	ddc0      	ble.n	801eab4 <_tzset_unlocked_r+0x34>
 801eb32:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801eb36:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801eb3a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 801ed78 <_tzset_unlocked_r+0x2f8>
 801eb3e:	213c      	movs	r1, #60	; 0x3c
 801eb40:	fb01 2203 	mla	r2, r1, r3, r2
 801eb44:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801eb48:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801eb4c:	fb01 2303 	mla	r3, r1, r3, r2
 801eb50:	435c      	muls	r4, r3
 801eb52:	62ac      	str	r4, [r5, #40]	; 0x28
 801eb54:	4c82      	ldr	r4, [pc, #520]	; (801ed60 <_tzset_unlocked_r+0x2e0>)
 801eb56:	4b83      	ldr	r3, [pc, #524]	; (801ed64 <_tzset_unlocked_r+0x2e4>)
 801eb58:	6023      	str	r3, [r4, #0]
 801eb5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb5c:	4982      	ldr	r1, [pc, #520]	; (801ed68 <_tzset_unlocked_r+0x2e8>)
 801eb5e:	441f      	add	r7, r3
 801eb60:	464a      	mov	r2, r9
 801eb62:	4633      	mov	r3, r6
 801eb64:	4638      	mov	r0, r7
 801eb66:	f7ff fd83 	bl	801e670 <siscanf>
 801eb6a:	4540      	cmp	r0, r8
 801eb6c:	dc16      	bgt.n	801eb9c <_tzset_unlocked_r+0x11c>
 801eb6e:	6823      	ldr	r3, [r4, #0]
 801eb70:	6063      	str	r3, [r4, #4]
 801eb72:	4b78      	ldr	r3, [pc, #480]	; (801ed54 <_tzset_unlocked_r+0x2d4>)
 801eb74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801eb76:	601a      	str	r2, [r3, #0]
 801eb78:	4b78      	ldr	r3, [pc, #480]	; (801ed5c <_tzset_unlocked_r+0x2dc>)
 801eb7a:	f8c3 8000 	str.w	r8, [r3]
 801eb7e:	e799      	b.n	801eab4 <_tzset_unlocked_r+0x34>
 801eb80:	f7e1 fb5e 	bl	8000240 <strcmp>
 801eb84:	2800      	cmp	r0, #0
 801eb86:	d095      	beq.n	801eab4 <_tzset_unlocked_r+0x34>
 801eb88:	e79a      	b.n	801eac0 <_tzset_unlocked_r+0x40>
 801eb8a:	4621      	mov	r1, r4
 801eb8c:	f7ff fdf5 	bl	801e77a <strcpy>
 801eb90:	e7a3      	b.n	801eada <_tzset_unlocked_r+0x5a>
 801eb92:	2b2b      	cmp	r3, #43	; 0x2b
 801eb94:	bf08      	it	eq
 801eb96:	3701      	addeq	r7, #1
 801eb98:	2401      	movs	r4, #1
 801eb9a:	e7b3      	b.n	801eb04 <_tzset_unlocked_r+0x84>
 801eb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb9e:	f8c4 9004 	str.w	r9, [r4, #4]
 801eba2:	18fc      	adds	r4, r7, r3
 801eba4:	5cfb      	ldrb	r3, [r7, r3]
 801eba6:	2b2d      	cmp	r3, #45	; 0x2d
 801eba8:	f040 808b 	bne.w	801ecc2 <_tzset_unlocked_r+0x242>
 801ebac:	3401      	adds	r4, #1
 801ebae:	f04f 37ff 	mov.w	r7, #4294967295
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ebb8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ebbc:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ebc0:	930a      	str	r3, [sp, #40]	; 0x28
 801ebc2:	e9cd a602 	strd	sl, r6, [sp, #8]
 801ebc6:	e9cd b600 	strd	fp, r6, [sp]
 801ebca:	4633      	mov	r3, r6
 801ebcc:	aa07      	add	r2, sp, #28
 801ebce:	4967      	ldr	r1, [pc, #412]	; (801ed6c <_tzset_unlocked_r+0x2ec>)
 801ebd0:	4620      	mov	r0, r4
 801ebd2:	f7ff fd4d 	bl	801e670 <siscanf>
 801ebd6:	2800      	cmp	r0, #0
 801ebd8:	dc78      	bgt.n	801eccc <_tzset_unlocked_r+0x24c>
 801ebda:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801ebdc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801ebe0:	652b      	str	r3, [r5, #80]	; 0x50
 801ebe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ebe4:	462f      	mov	r7, r5
 801ebe6:	441c      	add	r4, r3
 801ebe8:	f04f 0900 	mov.w	r9, #0
 801ebec:	7823      	ldrb	r3, [r4, #0]
 801ebee:	2b2c      	cmp	r3, #44	; 0x2c
 801ebf0:	bf08      	it	eq
 801ebf2:	3401      	addeq	r4, #1
 801ebf4:	f894 8000 	ldrb.w	r8, [r4]
 801ebf8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801ebfc:	d179      	bne.n	801ecf2 <_tzset_unlocked_r+0x272>
 801ebfe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801ec02:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801ec06:	ab09      	add	r3, sp, #36	; 0x24
 801ec08:	9300      	str	r3, [sp, #0]
 801ec0a:	9603      	str	r6, [sp, #12]
 801ec0c:	4633      	mov	r3, r6
 801ec0e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801ec12:	4957      	ldr	r1, [pc, #348]	; (801ed70 <_tzset_unlocked_r+0x2f0>)
 801ec14:	4620      	mov	r0, r4
 801ec16:	f7ff fd2b 	bl	801e670 <siscanf>
 801ec1a:	2803      	cmp	r0, #3
 801ec1c:	f47f af4a 	bne.w	801eab4 <_tzset_unlocked_r+0x34>
 801ec20:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ec24:	1e4b      	subs	r3, r1, #1
 801ec26:	2b0b      	cmp	r3, #11
 801ec28:	f63f af44 	bhi.w	801eab4 <_tzset_unlocked_r+0x34>
 801ec2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ec30:	1e53      	subs	r3, r2, #1
 801ec32:	2b04      	cmp	r3, #4
 801ec34:	f63f af3e 	bhi.w	801eab4 <_tzset_unlocked_r+0x34>
 801ec38:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801ec3c:	2b06      	cmp	r3, #6
 801ec3e:	f63f af39 	bhi.w	801eab4 <_tzset_unlocked_r+0x34>
 801ec42:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801ec46:	f887 8008 	strb.w	r8, [r7, #8]
 801ec4a:	617b      	str	r3, [r7, #20]
 801ec4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec4e:	eb04 0803 	add.w	r8, r4, r3
 801ec52:	2302      	movs	r3, #2
 801ec54:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ec58:	2300      	movs	r3, #0
 801ec5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ec5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ec62:	930a      	str	r3, [sp, #40]	; 0x28
 801ec64:	f898 3000 	ldrb.w	r3, [r8]
 801ec68:	2b2f      	cmp	r3, #47	; 0x2f
 801ec6a:	d109      	bne.n	801ec80 <_tzset_unlocked_r+0x200>
 801ec6c:	e9cd a602 	strd	sl, r6, [sp, #8]
 801ec70:	e9cd b600 	strd	fp, r6, [sp]
 801ec74:	4633      	mov	r3, r6
 801ec76:	aa07      	add	r2, sp, #28
 801ec78:	493e      	ldr	r1, [pc, #248]	; (801ed74 <_tzset_unlocked_r+0x2f4>)
 801ec7a:	4640      	mov	r0, r8
 801ec7c:	f7ff fcf8 	bl	801e670 <siscanf>
 801ec80:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ec84:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ec88:	213c      	movs	r1, #60	; 0x3c
 801ec8a:	fb01 2203 	mla	r2, r1, r3, r2
 801ec8e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ec92:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ec96:	fb01 2303 	mla	r3, r1, r3, r2
 801ec9a:	61bb      	str	r3, [r7, #24]
 801ec9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ec9e:	3728      	adds	r7, #40	; 0x28
 801eca0:	4444      	add	r4, r8
 801eca2:	f1b9 0f00 	cmp.w	r9, #0
 801eca6:	d021      	beq.n	801ecec <_tzset_unlocked_r+0x26c>
 801eca8:	6868      	ldr	r0, [r5, #4]
 801ecaa:	f7ff fe39 	bl	801e920 <__tzcalc_limits>
 801ecae:	4b29      	ldr	r3, [pc, #164]	; (801ed54 <_tzset_unlocked_r+0x2d4>)
 801ecb0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ecb2:	601a      	str	r2, [r3, #0]
 801ecb4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801ecb6:	1a9b      	subs	r3, r3, r2
 801ecb8:	4a28      	ldr	r2, [pc, #160]	; (801ed5c <_tzset_unlocked_r+0x2dc>)
 801ecba:	bf18      	it	ne
 801ecbc:	2301      	movne	r3, #1
 801ecbe:	6013      	str	r3, [r2, #0]
 801ecc0:	e6f8      	b.n	801eab4 <_tzset_unlocked_r+0x34>
 801ecc2:	2b2b      	cmp	r3, #43	; 0x2b
 801ecc4:	bf08      	it	eq
 801ecc6:	3401      	addeq	r4, #1
 801ecc8:	2701      	movs	r7, #1
 801ecca:	e772      	b.n	801ebb2 <_tzset_unlocked_r+0x132>
 801eccc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ecd0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ecd4:	213c      	movs	r1, #60	; 0x3c
 801ecd6:	fb01 2203 	mla	r2, r1, r3, r2
 801ecda:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ecde:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ece2:	fb01 2303 	mla	r3, r1, r3, r2
 801ece6:	435f      	muls	r7, r3
 801ece8:	652f      	str	r7, [r5, #80]	; 0x50
 801ecea:	e77a      	b.n	801ebe2 <_tzset_unlocked_r+0x162>
 801ecec:	f04f 0901 	mov.w	r9, #1
 801ecf0:	e77c      	b.n	801ebec <_tzset_unlocked_r+0x16c>
 801ecf2:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801ecf6:	bf06      	itte	eq
 801ecf8:	3401      	addeq	r4, #1
 801ecfa:	4643      	moveq	r3, r8
 801ecfc:	2344      	movne	r3, #68	; 0x44
 801ecfe:	220a      	movs	r2, #10
 801ed00:	a90b      	add	r1, sp, #44	; 0x2c
 801ed02:	4620      	mov	r0, r4
 801ed04:	9305      	str	r3, [sp, #20]
 801ed06:	f002 fc07 	bl	8021518 <strtoul>
 801ed0a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801ed0e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801ed12:	45a0      	cmp	r8, r4
 801ed14:	9b05      	ldr	r3, [sp, #20]
 801ed16:	d114      	bne.n	801ed42 <_tzset_unlocked_r+0x2c2>
 801ed18:	234d      	movs	r3, #77	; 0x4d
 801ed1a:	f1b9 0f00 	cmp.w	r9, #0
 801ed1e:	d107      	bne.n	801ed30 <_tzset_unlocked_r+0x2b0>
 801ed20:	722b      	strb	r3, [r5, #8]
 801ed22:	2103      	movs	r1, #3
 801ed24:	2302      	movs	r3, #2
 801ed26:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801ed2a:	f8c5 9014 	str.w	r9, [r5, #20]
 801ed2e:	e790      	b.n	801ec52 <_tzset_unlocked_r+0x1d2>
 801ed30:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801ed34:	220b      	movs	r2, #11
 801ed36:	2301      	movs	r3, #1
 801ed38:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801ed3c:	2300      	movs	r3, #0
 801ed3e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ed40:	e787      	b.n	801ec52 <_tzset_unlocked_r+0x1d2>
 801ed42:	b280      	uxth	r0, r0
 801ed44:	723b      	strb	r3, [r7, #8]
 801ed46:	6178      	str	r0, [r7, #20]
 801ed48:	e783      	b.n	801ec52 <_tzset_unlocked_r+0x1d2>
 801ed4a:	bf00      	nop
 801ed4c:	0803be4e 	.word	0x0803be4e
 801ed50:	20021830 	.word	0x20021830
 801ed54:	20021838 	.word	0x20021838
 801ed58:	0803be51 	.word	0x0803be51
 801ed5c:	20021834 	.word	0x20021834
 801ed60:	2000051c 	.word	0x2000051c
 801ed64:	20021823 	.word	0x20021823
 801ed68:	0803be55 	.word	0x0803be55
 801ed6c:	0803be78 	.word	0x0803be78
 801ed70:	0803be64 	.word	0x0803be64
 801ed74:	0803be77 	.word	0x0803be77
 801ed78:	20021818 	.word	0x20021818

0801ed7c <__swbuf_r>:
 801ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed7e:	460e      	mov	r6, r1
 801ed80:	4614      	mov	r4, r2
 801ed82:	4605      	mov	r5, r0
 801ed84:	b118      	cbz	r0, 801ed8e <__swbuf_r+0x12>
 801ed86:	6983      	ldr	r3, [r0, #24]
 801ed88:	b90b      	cbnz	r3, 801ed8e <__swbuf_r+0x12>
 801ed8a:	f000 fff1 	bl	801fd70 <__sinit>
 801ed8e:	4b21      	ldr	r3, [pc, #132]	; (801ee14 <__swbuf_r+0x98>)
 801ed90:	429c      	cmp	r4, r3
 801ed92:	d12a      	bne.n	801edea <__swbuf_r+0x6e>
 801ed94:	686c      	ldr	r4, [r5, #4]
 801ed96:	69a3      	ldr	r3, [r4, #24]
 801ed98:	60a3      	str	r3, [r4, #8]
 801ed9a:	89a3      	ldrh	r3, [r4, #12]
 801ed9c:	071a      	lsls	r2, r3, #28
 801ed9e:	d52e      	bpl.n	801edfe <__swbuf_r+0x82>
 801eda0:	6923      	ldr	r3, [r4, #16]
 801eda2:	b363      	cbz	r3, 801edfe <__swbuf_r+0x82>
 801eda4:	6923      	ldr	r3, [r4, #16]
 801eda6:	6820      	ldr	r0, [r4, #0]
 801eda8:	1ac0      	subs	r0, r0, r3
 801edaa:	6963      	ldr	r3, [r4, #20]
 801edac:	b2f6      	uxtb	r6, r6
 801edae:	4283      	cmp	r3, r0
 801edb0:	4637      	mov	r7, r6
 801edb2:	dc04      	bgt.n	801edbe <__swbuf_r+0x42>
 801edb4:	4621      	mov	r1, r4
 801edb6:	4628      	mov	r0, r5
 801edb8:	f000 ff70 	bl	801fc9c <_fflush_r>
 801edbc:	bb28      	cbnz	r0, 801ee0a <__swbuf_r+0x8e>
 801edbe:	68a3      	ldr	r3, [r4, #8]
 801edc0:	3b01      	subs	r3, #1
 801edc2:	60a3      	str	r3, [r4, #8]
 801edc4:	6823      	ldr	r3, [r4, #0]
 801edc6:	1c5a      	adds	r2, r3, #1
 801edc8:	6022      	str	r2, [r4, #0]
 801edca:	701e      	strb	r6, [r3, #0]
 801edcc:	6963      	ldr	r3, [r4, #20]
 801edce:	3001      	adds	r0, #1
 801edd0:	4283      	cmp	r3, r0
 801edd2:	d004      	beq.n	801edde <__swbuf_r+0x62>
 801edd4:	89a3      	ldrh	r3, [r4, #12]
 801edd6:	07db      	lsls	r3, r3, #31
 801edd8:	d519      	bpl.n	801ee0e <__swbuf_r+0x92>
 801edda:	2e0a      	cmp	r6, #10
 801eddc:	d117      	bne.n	801ee0e <__swbuf_r+0x92>
 801edde:	4621      	mov	r1, r4
 801ede0:	4628      	mov	r0, r5
 801ede2:	f000 ff5b 	bl	801fc9c <_fflush_r>
 801ede6:	b190      	cbz	r0, 801ee0e <__swbuf_r+0x92>
 801ede8:	e00f      	b.n	801ee0a <__swbuf_r+0x8e>
 801edea:	4b0b      	ldr	r3, [pc, #44]	; (801ee18 <__swbuf_r+0x9c>)
 801edec:	429c      	cmp	r4, r3
 801edee:	d101      	bne.n	801edf4 <__swbuf_r+0x78>
 801edf0:	68ac      	ldr	r4, [r5, #8]
 801edf2:	e7d0      	b.n	801ed96 <__swbuf_r+0x1a>
 801edf4:	4b09      	ldr	r3, [pc, #36]	; (801ee1c <__swbuf_r+0xa0>)
 801edf6:	429c      	cmp	r4, r3
 801edf8:	bf08      	it	eq
 801edfa:	68ec      	ldreq	r4, [r5, #12]
 801edfc:	e7cb      	b.n	801ed96 <__swbuf_r+0x1a>
 801edfe:	4621      	mov	r1, r4
 801ee00:	4628      	mov	r0, r5
 801ee02:	f000 f81f 	bl	801ee44 <__swsetup_r>
 801ee06:	2800      	cmp	r0, #0
 801ee08:	d0cc      	beq.n	801eda4 <__swbuf_r+0x28>
 801ee0a:	f04f 37ff 	mov.w	r7, #4294967295
 801ee0e:	4638      	mov	r0, r7
 801ee10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee12:	bf00      	nop
 801ee14:	0803bf10 	.word	0x0803bf10
 801ee18:	0803bf30 	.word	0x0803bf30
 801ee1c:	0803bef0 	.word	0x0803bef0

0801ee20 <_write_r>:
 801ee20:	b538      	push	{r3, r4, r5, lr}
 801ee22:	4c07      	ldr	r4, [pc, #28]	; (801ee40 <_write_r+0x20>)
 801ee24:	4605      	mov	r5, r0
 801ee26:	4608      	mov	r0, r1
 801ee28:	4611      	mov	r1, r2
 801ee2a:	2200      	movs	r2, #0
 801ee2c:	6022      	str	r2, [r4, #0]
 801ee2e:	461a      	mov	r2, r3
 801ee30:	f7e2 f8cc 	bl	8000fcc <_write>
 801ee34:	1c43      	adds	r3, r0, #1
 801ee36:	d102      	bne.n	801ee3e <_write_r+0x1e>
 801ee38:	6823      	ldr	r3, [r4, #0]
 801ee3a:	b103      	cbz	r3, 801ee3e <_write_r+0x1e>
 801ee3c:	602b      	str	r3, [r5, #0]
 801ee3e:	bd38      	pop	{r3, r4, r5, pc}
 801ee40:	200354e4 	.word	0x200354e4

0801ee44 <__swsetup_r>:
 801ee44:	4b32      	ldr	r3, [pc, #200]	; (801ef10 <__swsetup_r+0xcc>)
 801ee46:	b570      	push	{r4, r5, r6, lr}
 801ee48:	681d      	ldr	r5, [r3, #0]
 801ee4a:	4606      	mov	r6, r0
 801ee4c:	460c      	mov	r4, r1
 801ee4e:	b125      	cbz	r5, 801ee5a <__swsetup_r+0x16>
 801ee50:	69ab      	ldr	r3, [r5, #24]
 801ee52:	b913      	cbnz	r3, 801ee5a <__swsetup_r+0x16>
 801ee54:	4628      	mov	r0, r5
 801ee56:	f000 ff8b 	bl	801fd70 <__sinit>
 801ee5a:	4b2e      	ldr	r3, [pc, #184]	; (801ef14 <__swsetup_r+0xd0>)
 801ee5c:	429c      	cmp	r4, r3
 801ee5e:	d10f      	bne.n	801ee80 <__swsetup_r+0x3c>
 801ee60:	686c      	ldr	r4, [r5, #4]
 801ee62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee66:	b29a      	uxth	r2, r3
 801ee68:	0715      	lsls	r5, r2, #28
 801ee6a:	d42c      	bmi.n	801eec6 <__swsetup_r+0x82>
 801ee6c:	06d0      	lsls	r0, r2, #27
 801ee6e:	d411      	bmi.n	801ee94 <__swsetup_r+0x50>
 801ee70:	2209      	movs	r2, #9
 801ee72:	6032      	str	r2, [r6, #0]
 801ee74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee78:	81a3      	strh	r3, [r4, #12]
 801ee7a:	f04f 30ff 	mov.w	r0, #4294967295
 801ee7e:	e03e      	b.n	801eefe <__swsetup_r+0xba>
 801ee80:	4b25      	ldr	r3, [pc, #148]	; (801ef18 <__swsetup_r+0xd4>)
 801ee82:	429c      	cmp	r4, r3
 801ee84:	d101      	bne.n	801ee8a <__swsetup_r+0x46>
 801ee86:	68ac      	ldr	r4, [r5, #8]
 801ee88:	e7eb      	b.n	801ee62 <__swsetup_r+0x1e>
 801ee8a:	4b24      	ldr	r3, [pc, #144]	; (801ef1c <__swsetup_r+0xd8>)
 801ee8c:	429c      	cmp	r4, r3
 801ee8e:	bf08      	it	eq
 801ee90:	68ec      	ldreq	r4, [r5, #12]
 801ee92:	e7e6      	b.n	801ee62 <__swsetup_r+0x1e>
 801ee94:	0751      	lsls	r1, r2, #29
 801ee96:	d512      	bpl.n	801eebe <__swsetup_r+0x7a>
 801ee98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ee9a:	b141      	cbz	r1, 801eeae <__swsetup_r+0x6a>
 801ee9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eea0:	4299      	cmp	r1, r3
 801eea2:	d002      	beq.n	801eeaa <__swsetup_r+0x66>
 801eea4:	4630      	mov	r0, r6
 801eea6:	f7fe fdbb 	bl	801da20 <_free_r>
 801eeaa:	2300      	movs	r3, #0
 801eeac:	6363      	str	r3, [r4, #52]	; 0x34
 801eeae:	89a3      	ldrh	r3, [r4, #12]
 801eeb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801eeb4:	81a3      	strh	r3, [r4, #12]
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	6063      	str	r3, [r4, #4]
 801eeba:	6923      	ldr	r3, [r4, #16]
 801eebc:	6023      	str	r3, [r4, #0]
 801eebe:	89a3      	ldrh	r3, [r4, #12]
 801eec0:	f043 0308 	orr.w	r3, r3, #8
 801eec4:	81a3      	strh	r3, [r4, #12]
 801eec6:	6923      	ldr	r3, [r4, #16]
 801eec8:	b94b      	cbnz	r3, 801eede <__swsetup_r+0x9a>
 801eeca:	89a3      	ldrh	r3, [r4, #12]
 801eecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801eed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eed4:	d003      	beq.n	801eede <__swsetup_r+0x9a>
 801eed6:	4621      	mov	r1, r4
 801eed8:	4630      	mov	r0, r6
 801eeda:	f001 f91f 	bl	802011c <__smakebuf_r>
 801eede:	89a2      	ldrh	r2, [r4, #12]
 801eee0:	f012 0301 	ands.w	r3, r2, #1
 801eee4:	d00c      	beq.n	801ef00 <__swsetup_r+0xbc>
 801eee6:	2300      	movs	r3, #0
 801eee8:	60a3      	str	r3, [r4, #8]
 801eeea:	6963      	ldr	r3, [r4, #20]
 801eeec:	425b      	negs	r3, r3
 801eeee:	61a3      	str	r3, [r4, #24]
 801eef0:	6923      	ldr	r3, [r4, #16]
 801eef2:	b953      	cbnz	r3, 801ef0a <__swsetup_r+0xc6>
 801eef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eef8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801eefc:	d1ba      	bne.n	801ee74 <__swsetup_r+0x30>
 801eefe:	bd70      	pop	{r4, r5, r6, pc}
 801ef00:	0792      	lsls	r2, r2, #30
 801ef02:	bf58      	it	pl
 801ef04:	6963      	ldrpl	r3, [r4, #20]
 801ef06:	60a3      	str	r3, [r4, #8]
 801ef08:	e7f2      	b.n	801eef0 <__swsetup_r+0xac>
 801ef0a:	2000      	movs	r0, #0
 801ef0c:	e7f7      	b.n	801eefe <__swsetup_r+0xba>
 801ef0e:	bf00      	nop
 801ef10:	200004b8 	.word	0x200004b8
 801ef14:	0803bf10 	.word	0x0803bf10
 801ef18:	0803bf30 	.word	0x0803bf30
 801ef1c:	0803bef0 	.word	0x0803bef0

0801ef20 <asctime>:
 801ef20:	4b09      	ldr	r3, [pc, #36]	; (801ef48 <asctime+0x28>)
 801ef22:	b570      	push	{r4, r5, r6, lr}
 801ef24:	681c      	ldr	r4, [r3, #0]
 801ef26:	6c25      	ldr	r5, [r4, #64]	; 0x40
 801ef28:	4606      	mov	r6, r0
 801ef2a:	b93d      	cbnz	r5, 801ef3c <asctime+0x1c>
 801ef2c:	201a      	movs	r0, #26
 801ef2e:	f7fe fab1 	bl	801d494 <malloc>
 801ef32:	221a      	movs	r2, #26
 801ef34:	6420      	str	r0, [r4, #64]	; 0x40
 801ef36:	4629      	mov	r1, r5
 801ef38:	f7fe fad6 	bl	801d4e8 <memset>
 801ef3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ef3e:	4630      	mov	r0, r6
 801ef40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ef44:	f000 b802 	b.w	801ef4c <asctime_r>
 801ef48:	200004b8 	.word	0x200004b8

0801ef4c <asctime_r>:
 801ef4c:	b510      	push	{r4, lr}
 801ef4e:	460c      	mov	r4, r1
 801ef50:	6941      	ldr	r1, [r0, #20]
 801ef52:	6903      	ldr	r3, [r0, #16]
 801ef54:	6982      	ldr	r2, [r0, #24]
 801ef56:	b086      	sub	sp, #24
 801ef58:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 801ef5c:	9104      	str	r1, [sp, #16]
 801ef5e:	6801      	ldr	r1, [r0, #0]
 801ef60:	9103      	str	r1, [sp, #12]
 801ef62:	6841      	ldr	r1, [r0, #4]
 801ef64:	9102      	str	r1, [sp, #8]
 801ef66:	6881      	ldr	r1, [r0, #8]
 801ef68:	9101      	str	r1, [sp, #4]
 801ef6a:	68c1      	ldr	r1, [r0, #12]
 801ef6c:	9100      	str	r1, [sp, #0]
 801ef6e:	4907      	ldr	r1, [pc, #28]	; (801ef8c <asctime_r+0x40>)
 801ef70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef74:	440b      	add	r3, r1
 801ef76:	4906      	ldr	r1, [pc, #24]	; (801ef90 <asctime_r+0x44>)
 801ef78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef7c:	440a      	add	r2, r1
 801ef7e:	4620      	mov	r0, r4
 801ef80:	4904      	ldr	r1, [pc, #16]	; (801ef94 <asctime_r+0x48>)
 801ef82:	f7ff fb55 	bl	801e630 <siprintf>
 801ef86:	4620      	mov	r0, r4
 801ef88:	b006      	add	sp, #24
 801ef8a:	bd10      	pop	{r4, pc}
 801ef8c:	0803bebf 	.word	0x0803bebf
 801ef90:	0803beaa 	.word	0x0803beaa
 801ef94:	0803be8a 	.word	0x0803be8a

0801ef98 <_close_r>:
 801ef98:	b538      	push	{r3, r4, r5, lr}
 801ef9a:	4c06      	ldr	r4, [pc, #24]	; (801efb4 <_close_r+0x1c>)
 801ef9c:	2300      	movs	r3, #0
 801ef9e:	4605      	mov	r5, r0
 801efa0:	4608      	mov	r0, r1
 801efa2:	6023      	str	r3, [r4, #0]
 801efa4:	f7e4 ff76 	bl	8003e94 <_close>
 801efa8:	1c43      	adds	r3, r0, #1
 801efaa:	d102      	bne.n	801efb2 <_close_r+0x1a>
 801efac:	6823      	ldr	r3, [r4, #0]
 801efae:	b103      	cbz	r3, 801efb2 <_close_r+0x1a>
 801efb0:	602b      	str	r3, [r5, #0]
 801efb2:	bd38      	pop	{r3, r4, r5, pc}
 801efb4:	200354e4 	.word	0x200354e4

0801efb8 <div>:
 801efb8:	2900      	cmp	r1, #0
 801efba:	b510      	push	{r4, lr}
 801efbc:	fb91 f4f2 	sdiv	r4, r1, r2
 801efc0:	fb02 1314 	mls	r3, r2, r4, r1
 801efc4:	db06      	blt.n	801efd4 <div+0x1c>
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	da01      	bge.n	801efce <div+0x16>
 801efca:	3401      	adds	r4, #1
 801efcc:	1a9b      	subs	r3, r3, r2
 801efce:	e9c0 4300 	strd	r4, r3, [r0]
 801efd2:	bd10      	pop	{r4, pc}
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	bfc4      	itt	gt
 801efd8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801efdc:	189b      	addgt	r3, r3, r2
 801efde:	e7f6      	b.n	801efce <div+0x16>

0801efe0 <quorem>:
 801efe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe4:	6903      	ldr	r3, [r0, #16]
 801efe6:	690c      	ldr	r4, [r1, #16]
 801efe8:	42a3      	cmp	r3, r4
 801efea:	4680      	mov	r8, r0
 801efec:	f2c0 8082 	blt.w	801f0f4 <quorem+0x114>
 801eff0:	3c01      	subs	r4, #1
 801eff2:	f101 0714 	add.w	r7, r1, #20
 801eff6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801effa:	f100 0614 	add.w	r6, r0, #20
 801effe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801f002:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801f006:	eb06 030c 	add.w	r3, r6, ip
 801f00a:	3501      	adds	r5, #1
 801f00c:	eb07 090c 	add.w	r9, r7, ip
 801f010:	9301      	str	r3, [sp, #4]
 801f012:	fbb0 f5f5 	udiv	r5, r0, r5
 801f016:	b395      	cbz	r5, 801f07e <quorem+0x9e>
 801f018:	f04f 0a00 	mov.w	sl, #0
 801f01c:	4638      	mov	r0, r7
 801f01e:	46b6      	mov	lr, r6
 801f020:	46d3      	mov	fp, sl
 801f022:	f850 2b04 	ldr.w	r2, [r0], #4
 801f026:	b293      	uxth	r3, r2
 801f028:	fb05 a303 	mla	r3, r5, r3, sl
 801f02c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f030:	b29b      	uxth	r3, r3
 801f032:	ebab 0303 	sub.w	r3, fp, r3
 801f036:	0c12      	lsrs	r2, r2, #16
 801f038:	f8de b000 	ldr.w	fp, [lr]
 801f03c:	fb05 a202 	mla	r2, r5, r2, sl
 801f040:	fa13 f38b 	uxtah	r3, r3, fp
 801f044:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801f048:	fa1f fb82 	uxth.w	fp, r2
 801f04c:	f8de 2000 	ldr.w	r2, [lr]
 801f050:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801f054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801f058:	b29b      	uxth	r3, r3
 801f05a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f05e:	4581      	cmp	r9, r0
 801f060:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801f064:	f84e 3b04 	str.w	r3, [lr], #4
 801f068:	d2db      	bcs.n	801f022 <quorem+0x42>
 801f06a:	f856 300c 	ldr.w	r3, [r6, ip]
 801f06e:	b933      	cbnz	r3, 801f07e <quorem+0x9e>
 801f070:	9b01      	ldr	r3, [sp, #4]
 801f072:	3b04      	subs	r3, #4
 801f074:	429e      	cmp	r6, r3
 801f076:	461a      	mov	r2, r3
 801f078:	d330      	bcc.n	801f0dc <quorem+0xfc>
 801f07a:	f8c8 4010 	str.w	r4, [r8, #16]
 801f07e:	4640      	mov	r0, r8
 801f080:	f001 fab6 	bl	80205f0 <__mcmp>
 801f084:	2800      	cmp	r0, #0
 801f086:	db25      	blt.n	801f0d4 <quorem+0xf4>
 801f088:	3501      	adds	r5, #1
 801f08a:	4630      	mov	r0, r6
 801f08c:	f04f 0c00 	mov.w	ip, #0
 801f090:	f857 2b04 	ldr.w	r2, [r7], #4
 801f094:	f8d0 e000 	ldr.w	lr, [r0]
 801f098:	b293      	uxth	r3, r2
 801f09a:	ebac 0303 	sub.w	r3, ip, r3
 801f09e:	0c12      	lsrs	r2, r2, #16
 801f0a0:	fa13 f38e 	uxtah	r3, r3, lr
 801f0a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801f0a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801f0ac:	b29b      	uxth	r3, r3
 801f0ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f0b2:	45b9      	cmp	r9, r7
 801f0b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f0b8:	f840 3b04 	str.w	r3, [r0], #4
 801f0bc:	d2e8      	bcs.n	801f090 <quorem+0xb0>
 801f0be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801f0c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801f0c6:	b92a      	cbnz	r2, 801f0d4 <quorem+0xf4>
 801f0c8:	3b04      	subs	r3, #4
 801f0ca:	429e      	cmp	r6, r3
 801f0cc:	461a      	mov	r2, r3
 801f0ce:	d30b      	bcc.n	801f0e8 <quorem+0x108>
 801f0d0:	f8c8 4010 	str.w	r4, [r8, #16]
 801f0d4:	4628      	mov	r0, r5
 801f0d6:	b003      	add	sp, #12
 801f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0dc:	6812      	ldr	r2, [r2, #0]
 801f0de:	3b04      	subs	r3, #4
 801f0e0:	2a00      	cmp	r2, #0
 801f0e2:	d1ca      	bne.n	801f07a <quorem+0x9a>
 801f0e4:	3c01      	subs	r4, #1
 801f0e6:	e7c5      	b.n	801f074 <quorem+0x94>
 801f0e8:	6812      	ldr	r2, [r2, #0]
 801f0ea:	3b04      	subs	r3, #4
 801f0ec:	2a00      	cmp	r2, #0
 801f0ee:	d1ef      	bne.n	801f0d0 <quorem+0xf0>
 801f0f0:	3c01      	subs	r4, #1
 801f0f2:	e7ea      	b.n	801f0ca <quorem+0xea>
 801f0f4:	2000      	movs	r0, #0
 801f0f6:	e7ee      	b.n	801f0d6 <quorem+0xf6>

0801f0f8 <_dtoa_r>:
 801f0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fc:	ec57 6b10 	vmov	r6, r7, d0
 801f100:	b095      	sub	sp, #84	; 0x54
 801f102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801f104:	9108      	str	r1, [sp, #32]
 801f106:	4604      	mov	r4, r0
 801f108:	920a      	str	r2, [sp, #40]	; 0x28
 801f10a:	9311      	str	r3, [sp, #68]	; 0x44
 801f10c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801f110:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801f114:	b93d      	cbnz	r5, 801f126 <_dtoa_r+0x2e>
 801f116:	2010      	movs	r0, #16
 801f118:	f7fe f9bc 	bl	801d494 <malloc>
 801f11c:	6260      	str	r0, [r4, #36]	; 0x24
 801f11e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801f122:	6005      	str	r5, [r0, #0]
 801f124:	60c5      	str	r5, [r0, #12]
 801f126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f128:	6819      	ldr	r1, [r3, #0]
 801f12a:	b151      	cbz	r1, 801f142 <_dtoa_r+0x4a>
 801f12c:	685a      	ldr	r2, [r3, #4]
 801f12e:	604a      	str	r2, [r1, #4]
 801f130:	2301      	movs	r3, #1
 801f132:	4093      	lsls	r3, r2
 801f134:	608b      	str	r3, [r1, #8]
 801f136:	4620      	mov	r0, r4
 801f138:	f001 f878 	bl	802022c <_Bfree>
 801f13c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f13e:	2200      	movs	r2, #0
 801f140:	601a      	str	r2, [r3, #0]
 801f142:	1e3b      	subs	r3, r7, #0
 801f144:	bfb9      	ittee	lt
 801f146:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801f14a:	9303      	strlt	r3, [sp, #12]
 801f14c:	2300      	movge	r3, #0
 801f14e:	f8c8 3000 	strge.w	r3, [r8]
 801f152:	9d03      	ldr	r5, [sp, #12]
 801f154:	4bac      	ldr	r3, [pc, #688]	; (801f408 <_dtoa_r+0x310>)
 801f156:	bfbc      	itt	lt
 801f158:	2201      	movlt	r2, #1
 801f15a:	f8c8 2000 	strlt.w	r2, [r8]
 801f15e:	43ab      	bics	r3, r5
 801f160:	d11b      	bne.n	801f19a <_dtoa_r+0xa2>
 801f162:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f164:	f242 730f 	movw	r3, #9999	; 0x270f
 801f168:	6013      	str	r3, [r2, #0]
 801f16a:	9b02      	ldr	r3, [sp, #8]
 801f16c:	b923      	cbnz	r3, 801f178 <_dtoa_r+0x80>
 801f16e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801f172:	2d00      	cmp	r5, #0
 801f174:	f000 84dd 	beq.w	801fb32 <_dtoa_r+0xa3a>
 801f178:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f17a:	b953      	cbnz	r3, 801f192 <_dtoa_r+0x9a>
 801f17c:	4ba3      	ldr	r3, [pc, #652]	; (801f40c <_dtoa_r+0x314>)
 801f17e:	e020      	b.n	801f1c2 <_dtoa_r+0xca>
 801f180:	4ba3      	ldr	r3, [pc, #652]	; (801f410 <_dtoa_r+0x318>)
 801f182:	9304      	str	r3, [sp, #16]
 801f184:	3308      	adds	r3, #8
 801f186:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f188:	6013      	str	r3, [r2, #0]
 801f18a:	9804      	ldr	r0, [sp, #16]
 801f18c:	b015      	add	sp, #84	; 0x54
 801f18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f192:	4b9e      	ldr	r3, [pc, #632]	; (801f40c <_dtoa_r+0x314>)
 801f194:	9304      	str	r3, [sp, #16]
 801f196:	3303      	adds	r3, #3
 801f198:	e7f5      	b.n	801f186 <_dtoa_r+0x8e>
 801f19a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f19e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1a6:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f1aa:	d10c      	bne.n	801f1c6 <_dtoa_r+0xce>
 801f1ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f1ae:	2301      	movs	r3, #1
 801f1b0:	6013      	str	r3, [r2, #0]
 801f1b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	f000 84b9 	beq.w	801fb2c <_dtoa_r+0xa34>
 801f1ba:	4b96      	ldr	r3, [pc, #600]	; (801f414 <_dtoa_r+0x31c>)
 801f1bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f1be:	6013      	str	r3, [r2, #0]
 801f1c0:	3b01      	subs	r3, #1
 801f1c2:	9304      	str	r3, [sp, #16]
 801f1c4:	e7e1      	b.n	801f18a <_dtoa_r+0x92>
 801f1c6:	a913      	add	r1, sp, #76	; 0x4c
 801f1c8:	aa12      	add	r2, sp, #72	; 0x48
 801f1ca:	ed9d 0b04 	vldr	d0, [sp, #16]
 801f1ce:	4620      	mov	r0, r4
 801f1d0:	f001 fa85 	bl	80206de <__d2b>
 801f1d4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801f1d8:	9001      	str	r0, [sp, #4]
 801f1da:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f1dc:	2e00      	cmp	r6, #0
 801f1de:	d046      	beq.n	801f26e <_dtoa_r+0x176>
 801f1e0:	9805      	ldr	r0, [sp, #20]
 801f1e2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801f1e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f1ea:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801f1ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f1f2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801f1f6:	2700      	movs	r7, #0
 801f1f8:	ee07 aa90 	vmov	s15, sl
 801f1fc:	ec43 2b16 	vmov	d6, r2, r3
 801f200:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801f204:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801f3f0 <_dtoa_r+0x2f8>
 801f208:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801f20c:	ee36 7b47 	vsub.f64	d7, d6, d7
 801f210:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801f3f8 <_dtoa_r+0x300>
 801f214:	eea7 6b04 	vfma.f64	d6, d7, d4
 801f218:	eeb0 7b46 	vmov.f64	d7, d6
 801f21c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801f400 <_dtoa_r+0x308>
 801f220:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f224:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801f228:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801f22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f230:	ee16 ba90 	vmov	fp, s13
 801f234:	d508      	bpl.n	801f248 <_dtoa_r+0x150>
 801f236:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801f23a:	eeb4 6b47 	vcmp.f64	d6, d7
 801f23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f242:	bf18      	it	ne
 801f244:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801f248:	f1bb 0f16 	cmp.w	fp, #22
 801f24c:	d834      	bhi.n	801f2b8 <_dtoa_r+0x1c0>
 801f24e:	4b72      	ldr	r3, [pc, #456]	; (801f418 <_dtoa_r+0x320>)
 801f250:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f254:	ed93 7b00 	vldr	d7, [r3]
 801f258:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f25c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f264:	dd01      	ble.n	801f26a <_dtoa_r+0x172>
 801f266:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f26a:	2300      	movs	r3, #0
 801f26c:	e025      	b.n	801f2ba <_dtoa_r+0x1c2>
 801f26e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f270:	eb01 0a03 	add.w	sl, r1, r3
 801f274:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801f278:	2b20      	cmp	r3, #32
 801f27a:	dd17      	ble.n	801f2ac <_dtoa_r+0x1b4>
 801f27c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801f280:	9a02      	ldr	r2, [sp, #8]
 801f282:	409d      	lsls	r5, r3
 801f284:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801f288:	fa22 f303 	lsr.w	r3, r2, r3
 801f28c:	432b      	orrs	r3, r5
 801f28e:	ee07 3a90 	vmov	s15, r3
 801f292:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801f296:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f29a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f29e:	9805      	ldr	r0, [sp, #20]
 801f2a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f2a4:	2701      	movs	r7, #1
 801f2a6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801f2aa:	e7a5      	b.n	801f1f8 <_dtoa_r+0x100>
 801f2ac:	9a02      	ldr	r2, [sp, #8]
 801f2ae:	f1c3 0320 	rsb	r3, r3, #32
 801f2b2:	fa02 f303 	lsl.w	r3, r2, r3
 801f2b6:	e7ea      	b.n	801f28e <_dtoa_r+0x196>
 801f2b8:	2301      	movs	r3, #1
 801f2ba:	eba1 0a0a 	sub.w	sl, r1, sl
 801f2be:	9310      	str	r3, [sp, #64]	; 0x40
 801f2c0:	f1ba 0301 	subs.w	r3, sl, #1
 801f2c4:	9307      	str	r3, [sp, #28]
 801f2c6:	bf43      	ittte	mi
 801f2c8:	2300      	movmi	r3, #0
 801f2ca:	f1ca 0a01 	rsbmi	sl, sl, #1
 801f2ce:	9307      	strmi	r3, [sp, #28]
 801f2d0:	f04f 0a00 	movpl.w	sl, #0
 801f2d4:	f1bb 0f00 	cmp.w	fp, #0
 801f2d8:	db19      	blt.n	801f30e <_dtoa_r+0x216>
 801f2da:	9b07      	ldr	r3, [sp, #28]
 801f2dc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801f2e0:	445b      	add	r3, fp
 801f2e2:	9307      	str	r3, [sp, #28]
 801f2e4:	f04f 0800 	mov.w	r8, #0
 801f2e8:	9b08      	ldr	r3, [sp, #32]
 801f2ea:	2b09      	cmp	r3, #9
 801f2ec:	d866      	bhi.n	801f3bc <_dtoa_r+0x2c4>
 801f2ee:	2b05      	cmp	r3, #5
 801f2f0:	bfc4      	itt	gt
 801f2f2:	3b04      	subgt	r3, #4
 801f2f4:	9308      	strgt	r3, [sp, #32]
 801f2f6:	9b08      	ldr	r3, [sp, #32]
 801f2f8:	f1a3 0302 	sub.w	r3, r3, #2
 801f2fc:	bfcc      	ite	gt
 801f2fe:	2500      	movgt	r5, #0
 801f300:	2501      	movle	r5, #1
 801f302:	2b03      	cmp	r3, #3
 801f304:	d866      	bhi.n	801f3d4 <_dtoa_r+0x2dc>
 801f306:	e8df f003 	tbb	[pc, r3]
 801f30a:	5755      	.short	0x5755
 801f30c:	4909      	.short	0x4909
 801f30e:	2300      	movs	r3, #0
 801f310:	ebaa 0a0b 	sub.w	sl, sl, fp
 801f314:	f1cb 0800 	rsb	r8, fp, #0
 801f318:	930b      	str	r3, [sp, #44]	; 0x2c
 801f31a:	e7e5      	b.n	801f2e8 <_dtoa_r+0x1f0>
 801f31c:	2301      	movs	r3, #1
 801f31e:	9309      	str	r3, [sp, #36]	; 0x24
 801f320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f322:	2b00      	cmp	r3, #0
 801f324:	dd59      	ble.n	801f3da <_dtoa_r+0x2e2>
 801f326:	9306      	str	r3, [sp, #24]
 801f328:	4699      	mov	r9, r3
 801f32a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f32c:	2200      	movs	r2, #0
 801f32e:	6072      	str	r2, [r6, #4]
 801f330:	2204      	movs	r2, #4
 801f332:	f102 0014 	add.w	r0, r2, #20
 801f336:	4298      	cmp	r0, r3
 801f338:	6871      	ldr	r1, [r6, #4]
 801f33a:	d953      	bls.n	801f3e4 <_dtoa_r+0x2ec>
 801f33c:	4620      	mov	r0, r4
 801f33e:	f000 ff41 	bl	80201c4 <_Balloc>
 801f342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f344:	6030      	str	r0, [r6, #0]
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	9304      	str	r3, [sp, #16]
 801f34a:	f1b9 0f0e 	cmp.w	r9, #14
 801f34e:	f200 80c2 	bhi.w	801f4d6 <_dtoa_r+0x3de>
 801f352:	2d00      	cmp	r5, #0
 801f354:	f000 80bf 	beq.w	801f4d6 <_dtoa_r+0x3de>
 801f358:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f35c:	f1bb 0f00 	cmp.w	fp, #0
 801f360:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801f364:	f340 80e6 	ble.w	801f534 <_dtoa_r+0x43c>
 801f368:	4a2b      	ldr	r2, [pc, #172]	; (801f418 <_dtoa_r+0x320>)
 801f36a:	f00b 030f 	and.w	r3, fp, #15
 801f36e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f372:	ed93 7b00 	vldr	d7, [r3]
 801f376:	ea4f 132b 	mov.w	r3, fp, asr #4
 801f37a:	06da      	lsls	r2, r3, #27
 801f37c:	f140 80d8 	bpl.w	801f530 <_dtoa_r+0x438>
 801f380:	4a26      	ldr	r2, [pc, #152]	; (801f41c <_dtoa_r+0x324>)
 801f382:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801f386:	ed92 6b08 	vldr	d6, [r2, #32]
 801f38a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801f38e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801f392:	f003 030f 	and.w	r3, r3, #15
 801f396:	2203      	movs	r2, #3
 801f398:	4920      	ldr	r1, [pc, #128]	; (801f41c <_dtoa_r+0x324>)
 801f39a:	e04a      	b.n	801f432 <_dtoa_r+0x33a>
 801f39c:	2301      	movs	r3, #1
 801f39e:	9309      	str	r3, [sp, #36]	; 0x24
 801f3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3a2:	445b      	add	r3, fp
 801f3a4:	f103 0901 	add.w	r9, r3, #1
 801f3a8:	9306      	str	r3, [sp, #24]
 801f3aa:	464b      	mov	r3, r9
 801f3ac:	2b01      	cmp	r3, #1
 801f3ae:	bfb8      	it	lt
 801f3b0:	2301      	movlt	r3, #1
 801f3b2:	e7ba      	b.n	801f32a <_dtoa_r+0x232>
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	e7b2      	b.n	801f31e <_dtoa_r+0x226>
 801f3b8:	2300      	movs	r3, #0
 801f3ba:	e7f0      	b.n	801f39e <_dtoa_r+0x2a6>
 801f3bc:	2501      	movs	r5, #1
 801f3be:	2300      	movs	r3, #0
 801f3c0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801f3c4:	f04f 33ff 	mov.w	r3, #4294967295
 801f3c8:	9306      	str	r3, [sp, #24]
 801f3ca:	4699      	mov	r9, r3
 801f3cc:	2200      	movs	r2, #0
 801f3ce:	2312      	movs	r3, #18
 801f3d0:	920a      	str	r2, [sp, #40]	; 0x28
 801f3d2:	e7aa      	b.n	801f32a <_dtoa_r+0x232>
 801f3d4:	2301      	movs	r3, #1
 801f3d6:	9309      	str	r3, [sp, #36]	; 0x24
 801f3d8:	e7f4      	b.n	801f3c4 <_dtoa_r+0x2cc>
 801f3da:	2301      	movs	r3, #1
 801f3dc:	9306      	str	r3, [sp, #24]
 801f3de:	4699      	mov	r9, r3
 801f3e0:	461a      	mov	r2, r3
 801f3e2:	e7f5      	b.n	801f3d0 <_dtoa_r+0x2d8>
 801f3e4:	3101      	adds	r1, #1
 801f3e6:	6071      	str	r1, [r6, #4]
 801f3e8:	0052      	lsls	r2, r2, #1
 801f3ea:	e7a2      	b.n	801f332 <_dtoa_r+0x23a>
 801f3ec:	f3af 8000 	nop.w
 801f3f0:	636f4361 	.word	0x636f4361
 801f3f4:	3fd287a7 	.word	0x3fd287a7
 801f3f8:	8b60c8b3 	.word	0x8b60c8b3
 801f3fc:	3fc68a28 	.word	0x3fc68a28
 801f400:	509f79fb 	.word	0x509f79fb
 801f404:	3fd34413 	.word	0x3fd34413
 801f408:	7ff00000 	.word	0x7ff00000
 801f40c:	0803beec 	.word	0x0803beec
 801f410:	0803bee3 	.word	0x0803bee3
 801f414:	0803c084 	.word	0x0803c084
 801f418:	0803bf88 	.word	0x0803bf88
 801f41c:	0803bf60 	.word	0x0803bf60
 801f420:	07de      	lsls	r6, r3, #31
 801f422:	d504      	bpl.n	801f42e <_dtoa_r+0x336>
 801f424:	ed91 6b00 	vldr	d6, [r1]
 801f428:	3201      	adds	r2, #1
 801f42a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f42e:	105b      	asrs	r3, r3, #1
 801f430:	3108      	adds	r1, #8
 801f432:	2b00      	cmp	r3, #0
 801f434:	d1f4      	bne.n	801f420 <_dtoa_r+0x328>
 801f436:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f43a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801f43e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f444:	2b00      	cmp	r3, #0
 801f446:	f000 80a7 	beq.w	801f598 <_dtoa_r+0x4a0>
 801f44a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801f44e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f452:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f45a:	f140 809d 	bpl.w	801f598 <_dtoa_r+0x4a0>
 801f45e:	f1b9 0f00 	cmp.w	r9, #0
 801f462:	f000 8099 	beq.w	801f598 <_dtoa_r+0x4a0>
 801f466:	9b06      	ldr	r3, [sp, #24]
 801f468:	2b00      	cmp	r3, #0
 801f46a:	dd30      	ble.n	801f4ce <_dtoa_r+0x3d6>
 801f46c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801f470:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f474:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f478:	9d06      	ldr	r5, [sp, #24]
 801f47a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801f47e:	3201      	adds	r2, #1
 801f480:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f484:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801f488:	ee07 2a90 	vmov	s15, r2
 801f48c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f490:	eea7 5b06 	vfma.f64	d5, d7, d6
 801f494:	ed8d 5b02 	vstr	d5, [sp, #8]
 801f498:	9a03      	ldr	r2, [sp, #12]
 801f49a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f49e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801f4a2:	2d00      	cmp	r5, #0
 801f4a4:	d17b      	bne.n	801f59e <_dtoa_r+0x4a6>
 801f4a6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f4aa:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f4ae:	ec41 0b17 	vmov	d7, r0, r1
 801f4b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4ba:	f300 8253 	bgt.w	801f964 <_dtoa_r+0x86c>
 801f4be:	eeb1 7b47 	vneg.f64	d7, d7
 801f4c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4ca:	f100 8249 	bmi.w	801f960 <_dtoa_r+0x868>
 801f4ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801f4d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f4d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f4d8:	2b00      	cmp	r3, #0
 801f4da:	f2c0 8119 	blt.w	801f710 <_dtoa_r+0x618>
 801f4de:	f1bb 0f0e 	cmp.w	fp, #14
 801f4e2:	f300 8115 	bgt.w	801f710 <_dtoa_r+0x618>
 801f4e6:	4bc3      	ldr	r3, [pc, #780]	; (801f7f4 <_dtoa_r+0x6fc>)
 801f4e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f4ec:	ed93 6b00 	vldr	d6, [r3]
 801f4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	f280 80ba 	bge.w	801f66c <_dtoa_r+0x574>
 801f4f8:	f1b9 0f00 	cmp.w	r9, #0
 801f4fc:	f300 80b6 	bgt.w	801f66c <_dtoa_r+0x574>
 801f500:	f040 822d 	bne.w	801f95e <_dtoa_r+0x866>
 801f504:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f508:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f50c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f510:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f518:	464d      	mov	r5, r9
 801f51a:	464f      	mov	r7, r9
 801f51c:	f280 8204 	bge.w	801f928 <_dtoa_r+0x830>
 801f520:	9b04      	ldr	r3, [sp, #16]
 801f522:	9a04      	ldr	r2, [sp, #16]
 801f524:	1c5e      	adds	r6, r3, #1
 801f526:	2331      	movs	r3, #49	; 0x31
 801f528:	7013      	strb	r3, [r2, #0]
 801f52a:	f10b 0b01 	add.w	fp, fp, #1
 801f52e:	e1ff      	b.n	801f930 <_dtoa_r+0x838>
 801f530:	2202      	movs	r2, #2
 801f532:	e731      	b.n	801f398 <_dtoa_r+0x2a0>
 801f534:	d02e      	beq.n	801f594 <_dtoa_r+0x49c>
 801f536:	f1cb 0300 	rsb	r3, fp, #0
 801f53a:	4aae      	ldr	r2, [pc, #696]	; (801f7f4 <_dtoa_r+0x6fc>)
 801f53c:	f003 010f 	and.w	r1, r3, #15
 801f540:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801f544:	ed92 7b00 	vldr	d7, [r2]
 801f548:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801f54c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f550:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f554:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f558:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f55c:	49a6      	ldr	r1, [pc, #664]	; (801f7f8 <_dtoa_r+0x700>)
 801f55e:	111b      	asrs	r3, r3, #4
 801f560:	2000      	movs	r0, #0
 801f562:	2202      	movs	r2, #2
 801f564:	b93b      	cbnz	r3, 801f576 <_dtoa_r+0x47e>
 801f566:	2800      	cmp	r0, #0
 801f568:	f43f af6b 	beq.w	801f442 <_dtoa_r+0x34a>
 801f56c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f574:	e765      	b.n	801f442 <_dtoa_r+0x34a>
 801f576:	07dd      	lsls	r5, r3, #31
 801f578:	d509      	bpl.n	801f58e <_dtoa_r+0x496>
 801f57a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801f57e:	ed91 7b00 	vldr	d7, [r1]
 801f582:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f586:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f58a:	3201      	adds	r2, #1
 801f58c:	2001      	movs	r0, #1
 801f58e:	105b      	asrs	r3, r3, #1
 801f590:	3108      	adds	r1, #8
 801f592:	e7e7      	b.n	801f564 <_dtoa_r+0x46c>
 801f594:	2202      	movs	r2, #2
 801f596:	e754      	b.n	801f442 <_dtoa_r+0x34a>
 801f598:	465b      	mov	r3, fp
 801f59a:	464d      	mov	r5, r9
 801f59c:	e770      	b.n	801f480 <_dtoa_r+0x388>
 801f59e:	4a95      	ldr	r2, [pc, #596]	; (801f7f4 <_dtoa_r+0x6fc>)
 801f5a0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801f5a4:	ed12 4b02 	vldr	d4, [r2, #-8]
 801f5a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f5aa:	ec41 0b17 	vmov	d7, r0, r1
 801f5ae:	b35a      	cbz	r2, 801f608 <_dtoa_r+0x510>
 801f5b0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801f5b4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801f5b8:	9e04      	ldr	r6, [sp, #16]
 801f5ba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801f5be:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f5c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f5c6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f5ca:	ee14 2a90 	vmov	r2, s9
 801f5ce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f5d2:	3230      	adds	r2, #48	; 0x30
 801f5d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f5d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5e0:	f806 2b01 	strb.w	r2, [r6], #1
 801f5e4:	d43b      	bmi.n	801f65e <_dtoa_r+0x566>
 801f5e6:	ee32 5b46 	vsub.f64	d5, d2, d6
 801f5ea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801f5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5f2:	d472      	bmi.n	801f6da <_dtoa_r+0x5e2>
 801f5f4:	9a04      	ldr	r2, [sp, #16]
 801f5f6:	1ab2      	subs	r2, r6, r2
 801f5f8:	4295      	cmp	r5, r2
 801f5fa:	f77f af68 	ble.w	801f4ce <_dtoa_r+0x3d6>
 801f5fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 801f602:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f606:	e7de      	b.n	801f5c6 <_dtoa_r+0x4ce>
 801f608:	9a04      	ldr	r2, [sp, #16]
 801f60a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801f60e:	1956      	adds	r6, r2, r5
 801f610:	4611      	mov	r1, r2
 801f612:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f616:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f61a:	ee14 2a90 	vmov	r2, s9
 801f61e:	3230      	adds	r2, #48	; 0x30
 801f620:	f801 2b01 	strb.w	r2, [r1], #1
 801f624:	42b1      	cmp	r1, r6
 801f626:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f62a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f62e:	d11a      	bne.n	801f666 <_dtoa_r+0x56e>
 801f630:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801f634:	ee37 4b05 	vadd.f64	d4, d7, d5
 801f638:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801f63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f640:	dc4b      	bgt.n	801f6da <_dtoa_r+0x5e2>
 801f642:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f646:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f64e:	f57f af3e 	bpl.w	801f4ce <_dtoa_r+0x3d6>
 801f652:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f656:	2a30      	cmp	r2, #48	; 0x30
 801f658:	f106 31ff 	add.w	r1, r6, #4294967295
 801f65c:	d001      	beq.n	801f662 <_dtoa_r+0x56a>
 801f65e:	469b      	mov	fp, r3
 801f660:	e02a      	b.n	801f6b8 <_dtoa_r+0x5c0>
 801f662:	460e      	mov	r6, r1
 801f664:	e7f5      	b.n	801f652 <_dtoa_r+0x55a>
 801f666:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f66a:	e7d4      	b.n	801f616 <_dtoa_r+0x51e>
 801f66c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f670:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801f674:	9e04      	ldr	r6, [sp, #16]
 801f676:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801f67a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801f67e:	ee15 3a10 	vmov	r3, s10
 801f682:	3330      	adds	r3, #48	; 0x30
 801f684:	f806 3b01 	strb.w	r3, [r6], #1
 801f688:	9b04      	ldr	r3, [sp, #16]
 801f68a:	1af3      	subs	r3, r6, r3
 801f68c:	4599      	cmp	r9, r3
 801f68e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801f692:	eea3 7b46 	vfms.f64	d7, d3, d6
 801f696:	d133      	bne.n	801f700 <_dtoa_r+0x608>
 801f698:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f69c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6a4:	dc18      	bgt.n	801f6d8 <_dtoa_r+0x5e0>
 801f6a6:	eeb4 7b46 	vcmp.f64	d7, d6
 801f6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6ae:	d103      	bne.n	801f6b8 <_dtoa_r+0x5c0>
 801f6b0:	ee15 3a10 	vmov	r3, s10
 801f6b4:	07db      	lsls	r3, r3, #31
 801f6b6:	d40f      	bmi.n	801f6d8 <_dtoa_r+0x5e0>
 801f6b8:	9901      	ldr	r1, [sp, #4]
 801f6ba:	4620      	mov	r0, r4
 801f6bc:	f000 fdb6 	bl	802022c <_Bfree>
 801f6c0:	2300      	movs	r3, #0
 801f6c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f6c4:	7033      	strb	r3, [r6, #0]
 801f6c6:	f10b 0301 	add.w	r3, fp, #1
 801f6ca:	6013      	str	r3, [r2, #0]
 801f6cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	f43f ad5b 	beq.w	801f18a <_dtoa_r+0x92>
 801f6d4:	601e      	str	r6, [r3, #0]
 801f6d6:	e558      	b.n	801f18a <_dtoa_r+0x92>
 801f6d8:	465b      	mov	r3, fp
 801f6da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f6de:	2939      	cmp	r1, #57	; 0x39
 801f6e0:	f106 32ff 	add.w	r2, r6, #4294967295
 801f6e4:	d106      	bne.n	801f6f4 <_dtoa_r+0x5fc>
 801f6e6:	9904      	ldr	r1, [sp, #16]
 801f6e8:	4291      	cmp	r1, r2
 801f6ea:	d107      	bne.n	801f6fc <_dtoa_r+0x604>
 801f6ec:	2230      	movs	r2, #48	; 0x30
 801f6ee:	700a      	strb	r2, [r1, #0]
 801f6f0:	3301      	adds	r3, #1
 801f6f2:	460a      	mov	r2, r1
 801f6f4:	7811      	ldrb	r1, [r2, #0]
 801f6f6:	3101      	adds	r1, #1
 801f6f8:	7011      	strb	r1, [r2, #0]
 801f6fa:	e7b0      	b.n	801f65e <_dtoa_r+0x566>
 801f6fc:	4616      	mov	r6, r2
 801f6fe:	e7ec      	b.n	801f6da <_dtoa_r+0x5e2>
 801f700:	ee27 7b04 	vmul.f64	d7, d7, d4
 801f704:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f70c:	d1b3      	bne.n	801f676 <_dtoa_r+0x57e>
 801f70e:	e7d3      	b.n	801f6b8 <_dtoa_r+0x5c0>
 801f710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f712:	2a00      	cmp	r2, #0
 801f714:	f000 808d 	beq.w	801f832 <_dtoa_r+0x73a>
 801f718:	9a08      	ldr	r2, [sp, #32]
 801f71a:	2a01      	cmp	r2, #1
 801f71c:	dc72      	bgt.n	801f804 <_dtoa_r+0x70c>
 801f71e:	2f00      	cmp	r7, #0
 801f720:	d06c      	beq.n	801f7fc <_dtoa_r+0x704>
 801f722:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f726:	4645      	mov	r5, r8
 801f728:	4656      	mov	r6, sl
 801f72a:	9a07      	ldr	r2, [sp, #28]
 801f72c:	2101      	movs	r1, #1
 801f72e:	441a      	add	r2, r3
 801f730:	4620      	mov	r0, r4
 801f732:	449a      	add	sl, r3
 801f734:	9207      	str	r2, [sp, #28]
 801f736:	f000 fe19 	bl	802036c <__i2b>
 801f73a:	4607      	mov	r7, r0
 801f73c:	2e00      	cmp	r6, #0
 801f73e:	dd0b      	ble.n	801f758 <_dtoa_r+0x660>
 801f740:	9b07      	ldr	r3, [sp, #28]
 801f742:	2b00      	cmp	r3, #0
 801f744:	dd08      	ble.n	801f758 <_dtoa_r+0x660>
 801f746:	42b3      	cmp	r3, r6
 801f748:	9a07      	ldr	r2, [sp, #28]
 801f74a:	bfa8      	it	ge
 801f74c:	4633      	movge	r3, r6
 801f74e:	ebaa 0a03 	sub.w	sl, sl, r3
 801f752:	1af6      	subs	r6, r6, r3
 801f754:	1ad3      	subs	r3, r2, r3
 801f756:	9307      	str	r3, [sp, #28]
 801f758:	f1b8 0f00 	cmp.w	r8, #0
 801f75c:	d01d      	beq.n	801f79a <_dtoa_r+0x6a2>
 801f75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f760:	2b00      	cmp	r3, #0
 801f762:	d06a      	beq.n	801f83a <_dtoa_r+0x742>
 801f764:	b18d      	cbz	r5, 801f78a <_dtoa_r+0x692>
 801f766:	4639      	mov	r1, r7
 801f768:	462a      	mov	r2, r5
 801f76a:	4620      	mov	r0, r4
 801f76c:	f000 fe9e 	bl	80204ac <__pow5mult>
 801f770:	9a01      	ldr	r2, [sp, #4]
 801f772:	4601      	mov	r1, r0
 801f774:	4607      	mov	r7, r0
 801f776:	4620      	mov	r0, r4
 801f778:	f000 fe01 	bl	802037e <__multiply>
 801f77c:	9901      	ldr	r1, [sp, #4]
 801f77e:	900c      	str	r0, [sp, #48]	; 0x30
 801f780:	4620      	mov	r0, r4
 801f782:	f000 fd53 	bl	802022c <_Bfree>
 801f786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f788:	9301      	str	r3, [sp, #4]
 801f78a:	ebb8 0205 	subs.w	r2, r8, r5
 801f78e:	d004      	beq.n	801f79a <_dtoa_r+0x6a2>
 801f790:	9901      	ldr	r1, [sp, #4]
 801f792:	4620      	mov	r0, r4
 801f794:	f000 fe8a 	bl	80204ac <__pow5mult>
 801f798:	9001      	str	r0, [sp, #4]
 801f79a:	2101      	movs	r1, #1
 801f79c:	4620      	mov	r0, r4
 801f79e:	f000 fde5 	bl	802036c <__i2b>
 801f7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7a4:	4605      	mov	r5, r0
 801f7a6:	2b00      	cmp	r3, #0
 801f7a8:	f000 81ca 	beq.w	801fb40 <_dtoa_r+0xa48>
 801f7ac:	461a      	mov	r2, r3
 801f7ae:	4601      	mov	r1, r0
 801f7b0:	4620      	mov	r0, r4
 801f7b2:	f000 fe7b 	bl	80204ac <__pow5mult>
 801f7b6:	9b08      	ldr	r3, [sp, #32]
 801f7b8:	2b01      	cmp	r3, #1
 801f7ba:	4605      	mov	r5, r0
 801f7bc:	dc44      	bgt.n	801f848 <_dtoa_r+0x750>
 801f7be:	9b02      	ldr	r3, [sp, #8]
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	d13c      	bne.n	801f83e <_dtoa_r+0x746>
 801f7c4:	9b03      	ldr	r3, [sp, #12]
 801f7c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f7ca:	2b00      	cmp	r3, #0
 801f7cc:	d137      	bne.n	801f83e <_dtoa_r+0x746>
 801f7ce:	9b03      	ldr	r3, [sp, #12]
 801f7d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f7d4:	0d1b      	lsrs	r3, r3, #20
 801f7d6:	051b      	lsls	r3, r3, #20
 801f7d8:	2b00      	cmp	r3, #0
 801f7da:	d033      	beq.n	801f844 <_dtoa_r+0x74c>
 801f7dc:	9b07      	ldr	r3, [sp, #28]
 801f7de:	3301      	adds	r3, #1
 801f7e0:	f10a 0a01 	add.w	sl, sl, #1
 801f7e4:	9307      	str	r3, [sp, #28]
 801f7e6:	f04f 0801 	mov.w	r8, #1
 801f7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7ec:	bb73      	cbnz	r3, 801f84c <_dtoa_r+0x754>
 801f7ee:	2001      	movs	r0, #1
 801f7f0:	e034      	b.n	801f85c <_dtoa_r+0x764>
 801f7f2:	bf00      	nop
 801f7f4:	0803bf88 	.word	0x0803bf88
 801f7f8:	0803bf60 	.word	0x0803bf60
 801f7fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f7fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f802:	e790      	b.n	801f726 <_dtoa_r+0x62e>
 801f804:	f109 35ff 	add.w	r5, r9, #4294967295
 801f808:	45a8      	cmp	r8, r5
 801f80a:	bfbf      	itttt	lt
 801f80c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801f80e:	eba5 0808 	sublt.w	r8, r5, r8
 801f812:	4443      	addlt	r3, r8
 801f814:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801f816:	bfb6      	itet	lt
 801f818:	46a8      	movlt	r8, r5
 801f81a:	eba8 0505 	subge.w	r5, r8, r5
 801f81e:	2500      	movlt	r5, #0
 801f820:	f1b9 0f00 	cmp.w	r9, #0
 801f824:	bfb9      	ittee	lt
 801f826:	ebaa 0609 	sublt.w	r6, sl, r9
 801f82a:	2300      	movlt	r3, #0
 801f82c:	4656      	movge	r6, sl
 801f82e:	464b      	movge	r3, r9
 801f830:	e77b      	b.n	801f72a <_dtoa_r+0x632>
 801f832:	4645      	mov	r5, r8
 801f834:	4656      	mov	r6, sl
 801f836:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f838:	e780      	b.n	801f73c <_dtoa_r+0x644>
 801f83a:	4642      	mov	r2, r8
 801f83c:	e7a8      	b.n	801f790 <_dtoa_r+0x698>
 801f83e:	f04f 0800 	mov.w	r8, #0
 801f842:	e7d2      	b.n	801f7ea <_dtoa_r+0x6f2>
 801f844:	4698      	mov	r8, r3
 801f846:	e7d0      	b.n	801f7ea <_dtoa_r+0x6f2>
 801f848:	f04f 0800 	mov.w	r8, #0
 801f84c:	692b      	ldr	r3, [r5, #16]
 801f84e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801f852:	6918      	ldr	r0, [r3, #16]
 801f854:	f000 fd3c 	bl	80202d0 <__hi0bits>
 801f858:	f1c0 0020 	rsb	r0, r0, #32
 801f85c:	9b07      	ldr	r3, [sp, #28]
 801f85e:	4418      	add	r0, r3
 801f860:	f010 001f 	ands.w	r0, r0, #31
 801f864:	d047      	beq.n	801f8f6 <_dtoa_r+0x7fe>
 801f866:	f1c0 0320 	rsb	r3, r0, #32
 801f86a:	2b04      	cmp	r3, #4
 801f86c:	dd3b      	ble.n	801f8e6 <_dtoa_r+0x7ee>
 801f86e:	9b07      	ldr	r3, [sp, #28]
 801f870:	f1c0 001c 	rsb	r0, r0, #28
 801f874:	4482      	add	sl, r0
 801f876:	4406      	add	r6, r0
 801f878:	4403      	add	r3, r0
 801f87a:	9307      	str	r3, [sp, #28]
 801f87c:	f1ba 0f00 	cmp.w	sl, #0
 801f880:	dd05      	ble.n	801f88e <_dtoa_r+0x796>
 801f882:	4652      	mov	r2, sl
 801f884:	9901      	ldr	r1, [sp, #4]
 801f886:	4620      	mov	r0, r4
 801f888:	f000 fe5e 	bl	8020548 <__lshift>
 801f88c:	9001      	str	r0, [sp, #4]
 801f88e:	9b07      	ldr	r3, [sp, #28]
 801f890:	2b00      	cmp	r3, #0
 801f892:	dd05      	ble.n	801f8a0 <_dtoa_r+0x7a8>
 801f894:	4629      	mov	r1, r5
 801f896:	461a      	mov	r2, r3
 801f898:	4620      	mov	r0, r4
 801f89a:	f000 fe55 	bl	8020548 <__lshift>
 801f89e:	4605      	mov	r5, r0
 801f8a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8a2:	b353      	cbz	r3, 801f8fa <_dtoa_r+0x802>
 801f8a4:	4629      	mov	r1, r5
 801f8a6:	9801      	ldr	r0, [sp, #4]
 801f8a8:	f000 fea2 	bl	80205f0 <__mcmp>
 801f8ac:	2800      	cmp	r0, #0
 801f8ae:	da24      	bge.n	801f8fa <_dtoa_r+0x802>
 801f8b0:	2300      	movs	r3, #0
 801f8b2:	220a      	movs	r2, #10
 801f8b4:	9901      	ldr	r1, [sp, #4]
 801f8b6:	4620      	mov	r0, r4
 801f8b8:	f000 fccf 	bl	802025a <__multadd>
 801f8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8be:	9001      	str	r0, [sp, #4]
 801f8c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	f000 8142 	beq.w	801fb4e <_dtoa_r+0xa56>
 801f8ca:	2300      	movs	r3, #0
 801f8cc:	4639      	mov	r1, r7
 801f8ce:	220a      	movs	r2, #10
 801f8d0:	4620      	mov	r0, r4
 801f8d2:	f000 fcc2 	bl	802025a <__multadd>
 801f8d6:	9b06      	ldr	r3, [sp, #24]
 801f8d8:	2b00      	cmp	r3, #0
 801f8da:	4607      	mov	r7, r0
 801f8dc:	dc4b      	bgt.n	801f976 <_dtoa_r+0x87e>
 801f8de:	9b08      	ldr	r3, [sp, #32]
 801f8e0:	2b02      	cmp	r3, #2
 801f8e2:	dd48      	ble.n	801f976 <_dtoa_r+0x87e>
 801f8e4:	e011      	b.n	801f90a <_dtoa_r+0x812>
 801f8e6:	d0c9      	beq.n	801f87c <_dtoa_r+0x784>
 801f8e8:	9a07      	ldr	r2, [sp, #28]
 801f8ea:	331c      	adds	r3, #28
 801f8ec:	441a      	add	r2, r3
 801f8ee:	449a      	add	sl, r3
 801f8f0:	441e      	add	r6, r3
 801f8f2:	4613      	mov	r3, r2
 801f8f4:	e7c1      	b.n	801f87a <_dtoa_r+0x782>
 801f8f6:	4603      	mov	r3, r0
 801f8f8:	e7f6      	b.n	801f8e8 <_dtoa_r+0x7f0>
 801f8fa:	f1b9 0f00 	cmp.w	r9, #0
 801f8fe:	dc34      	bgt.n	801f96a <_dtoa_r+0x872>
 801f900:	9b08      	ldr	r3, [sp, #32]
 801f902:	2b02      	cmp	r3, #2
 801f904:	dd31      	ble.n	801f96a <_dtoa_r+0x872>
 801f906:	f8cd 9018 	str.w	r9, [sp, #24]
 801f90a:	9b06      	ldr	r3, [sp, #24]
 801f90c:	b963      	cbnz	r3, 801f928 <_dtoa_r+0x830>
 801f90e:	4629      	mov	r1, r5
 801f910:	2205      	movs	r2, #5
 801f912:	4620      	mov	r0, r4
 801f914:	f000 fca1 	bl	802025a <__multadd>
 801f918:	4601      	mov	r1, r0
 801f91a:	4605      	mov	r5, r0
 801f91c:	9801      	ldr	r0, [sp, #4]
 801f91e:	f000 fe67 	bl	80205f0 <__mcmp>
 801f922:	2800      	cmp	r0, #0
 801f924:	f73f adfc 	bgt.w	801f520 <_dtoa_r+0x428>
 801f928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f92a:	9e04      	ldr	r6, [sp, #16]
 801f92c:	ea6f 0b03 	mvn.w	fp, r3
 801f930:	f04f 0900 	mov.w	r9, #0
 801f934:	4629      	mov	r1, r5
 801f936:	4620      	mov	r0, r4
 801f938:	f000 fc78 	bl	802022c <_Bfree>
 801f93c:	2f00      	cmp	r7, #0
 801f93e:	f43f aebb 	beq.w	801f6b8 <_dtoa_r+0x5c0>
 801f942:	f1b9 0f00 	cmp.w	r9, #0
 801f946:	d005      	beq.n	801f954 <_dtoa_r+0x85c>
 801f948:	45b9      	cmp	r9, r7
 801f94a:	d003      	beq.n	801f954 <_dtoa_r+0x85c>
 801f94c:	4649      	mov	r1, r9
 801f94e:	4620      	mov	r0, r4
 801f950:	f000 fc6c 	bl	802022c <_Bfree>
 801f954:	4639      	mov	r1, r7
 801f956:	4620      	mov	r0, r4
 801f958:	f000 fc68 	bl	802022c <_Bfree>
 801f95c:	e6ac      	b.n	801f6b8 <_dtoa_r+0x5c0>
 801f95e:	2500      	movs	r5, #0
 801f960:	462f      	mov	r7, r5
 801f962:	e7e1      	b.n	801f928 <_dtoa_r+0x830>
 801f964:	469b      	mov	fp, r3
 801f966:	462f      	mov	r7, r5
 801f968:	e5da      	b.n	801f520 <_dtoa_r+0x428>
 801f96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f96c:	f8cd 9018 	str.w	r9, [sp, #24]
 801f970:	2b00      	cmp	r3, #0
 801f972:	f000 80f3 	beq.w	801fb5c <_dtoa_r+0xa64>
 801f976:	2e00      	cmp	r6, #0
 801f978:	dd05      	ble.n	801f986 <_dtoa_r+0x88e>
 801f97a:	4639      	mov	r1, r7
 801f97c:	4632      	mov	r2, r6
 801f97e:	4620      	mov	r0, r4
 801f980:	f000 fde2 	bl	8020548 <__lshift>
 801f984:	4607      	mov	r7, r0
 801f986:	f1b8 0f00 	cmp.w	r8, #0
 801f98a:	d04c      	beq.n	801fa26 <_dtoa_r+0x92e>
 801f98c:	6879      	ldr	r1, [r7, #4]
 801f98e:	4620      	mov	r0, r4
 801f990:	f000 fc18 	bl	80201c4 <_Balloc>
 801f994:	693a      	ldr	r2, [r7, #16]
 801f996:	3202      	adds	r2, #2
 801f998:	4606      	mov	r6, r0
 801f99a:	0092      	lsls	r2, r2, #2
 801f99c:	f107 010c 	add.w	r1, r7, #12
 801f9a0:	300c      	adds	r0, #12
 801f9a2:	f7fd fd96 	bl	801d4d2 <memcpy>
 801f9a6:	2201      	movs	r2, #1
 801f9a8:	4631      	mov	r1, r6
 801f9aa:	4620      	mov	r0, r4
 801f9ac:	f000 fdcc 	bl	8020548 <__lshift>
 801f9b0:	9b02      	ldr	r3, [sp, #8]
 801f9b2:	f8dd a010 	ldr.w	sl, [sp, #16]
 801f9b6:	f003 0301 	and.w	r3, r3, #1
 801f9ba:	46b9      	mov	r9, r7
 801f9bc:	9307      	str	r3, [sp, #28]
 801f9be:	4607      	mov	r7, r0
 801f9c0:	4629      	mov	r1, r5
 801f9c2:	9801      	ldr	r0, [sp, #4]
 801f9c4:	f7ff fb0c 	bl	801efe0 <quorem>
 801f9c8:	4649      	mov	r1, r9
 801f9ca:	4606      	mov	r6, r0
 801f9cc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801f9d0:	9801      	ldr	r0, [sp, #4]
 801f9d2:	f000 fe0d 	bl	80205f0 <__mcmp>
 801f9d6:	463a      	mov	r2, r7
 801f9d8:	9002      	str	r0, [sp, #8]
 801f9da:	4629      	mov	r1, r5
 801f9dc:	4620      	mov	r0, r4
 801f9de:	f000 fe21 	bl	8020624 <__mdiff>
 801f9e2:	68c3      	ldr	r3, [r0, #12]
 801f9e4:	4602      	mov	r2, r0
 801f9e6:	bb03      	cbnz	r3, 801fa2a <_dtoa_r+0x932>
 801f9e8:	4601      	mov	r1, r0
 801f9ea:	9009      	str	r0, [sp, #36]	; 0x24
 801f9ec:	9801      	ldr	r0, [sp, #4]
 801f9ee:	f000 fdff 	bl	80205f0 <__mcmp>
 801f9f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f9f4:	4603      	mov	r3, r0
 801f9f6:	4611      	mov	r1, r2
 801f9f8:	4620      	mov	r0, r4
 801f9fa:	9309      	str	r3, [sp, #36]	; 0x24
 801f9fc:	f000 fc16 	bl	802022c <_Bfree>
 801fa00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa02:	b9a3      	cbnz	r3, 801fa2e <_dtoa_r+0x936>
 801fa04:	9a08      	ldr	r2, [sp, #32]
 801fa06:	b992      	cbnz	r2, 801fa2e <_dtoa_r+0x936>
 801fa08:	9a07      	ldr	r2, [sp, #28]
 801fa0a:	b982      	cbnz	r2, 801fa2e <_dtoa_r+0x936>
 801fa0c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801fa10:	d029      	beq.n	801fa66 <_dtoa_r+0x96e>
 801fa12:	9b02      	ldr	r3, [sp, #8]
 801fa14:	2b00      	cmp	r3, #0
 801fa16:	dd01      	ble.n	801fa1c <_dtoa_r+0x924>
 801fa18:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801fa1c:	f10a 0601 	add.w	r6, sl, #1
 801fa20:	f88a 8000 	strb.w	r8, [sl]
 801fa24:	e786      	b.n	801f934 <_dtoa_r+0x83c>
 801fa26:	4638      	mov	r0, r7
 801fa28:	e7c2      	b.n	801f9b0 <_dtoa_r+0x8b8>
 801fa2a:	2301      	movs	r3, #1
 801fa2c:	e7e3      	b.n	801f9f6 <_dtoa_r+0x8fe>
 801fa2e:	9a02      	ldr	r2, [sp, #8]
 801fa30:	2a00      	cmp	r2, #0
 801fa32:	db04      	blt.n	801fa3e <_dtoa_r+0x946>
 801fa34:	d124      	bne.n	801fa80 <_dtoa_r+0x988>
 801fa36:	9a08      	ldr	r2, [sp, #32]
 801fa38:	bb12      	cbnz	r2, 801fa80 <_dtoa_r+0x988>
 801fa3a:	9a07      	ldr	r2, [sp, #28]
 801fa3c:	bb02      	cbnz	r2, 801fa80 <_dtoa_r+0x988>
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	ddec      	ble.n	801fa1c <_dtoa_r+0x924>
 801fa42:	2201      	movs	r2, #1
 801fa44:	9901      	ldr	r1, [sp, #4]
 801fa46:	4620      	mov	r0, r4
 801fa48:	f000 fd7e 	bl	8020548 <__lshift>
 801fa4c:	4629      	mov	r1, r5
 801fa4e:	9001      	str	r0, [sp, #4]
 801fa50:	f000 fdce 	bl	80205f0 <__mcmp>
 801fa54:	2800      	cmp	r0, #0
 801fa56:	dc03      	bgt.n	801fa60 <_dtoa_r+0x968>
 801fa58:	d1e0      	bne.n	801fa1c <_dtoa_r+0x924>
 801fa5a:	f018 0f01 	tst.w	r8, #1
 801fa5e:	d0dd      	beq.n	801fa1c <_dtoa_r+0x924>
 801fa60:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801fa64:	d1d8      	bne.n	801fa18 <_dtoa_r+0x920>
 801fa66:	2339      	movs	r3, #57	; 0x39
 801fa68:	f10a 0601 	add.w	r6, sl, #1
 801fa6c:	f88a 3000 	strb.w	r3, [sl]
 801fa70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fa74:	2b39      	cmp	r3, #57	; 0x39
 801fa76:	f106 32ff 	add.w	r2, r6, #4294967295
 801fa7a:	d04c      	beq.n	801fb16 <_dtoa_r+0xa1e>
 801fa7c:	3301      	adds	r3, #1
 801fa7e:	e051      	b.n	801fb24 <_dtoa_r+0xa2c>
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	f10a 0601 	add.w	r6, sl, #1
 801fa86:	dd05      	ble.n	801fa94 <_dtoa_r+0x99c>
 801fa88:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801fa8c:	d0eb      	beq.n	801fa66 <_dtoa_r+0x96e>
 801fa8e:	f108 0801 	add.w	r8, r8, #1
 801fa92:	e7c5      	b.n	801fa20 <_dtoa_r+0x928>
 801fa94:	9b04      	ldr	r3, [sp, #16]
 801fa96:	9a06      	ldr	r2, [sp, #24]
 801fa98:	f806 8c01 	strb.w	r8, [r6, #-1]
 801fa9c:	1af3      	subs	r3, r6, r3
 801fa9e:	4293      	cmp	r3, r2
 801faa0:	d021      	beq.n	801fae6 <_dtoa_r+0x9ee>
 801faa2:	2300      	movs	r3, #0
 801faa4:	220a      	movs	r2, #10
 801faa6:	9901      	ldr	r1, [sp, #4]
 801faa8:	4620      	mov	r0, r4
 801faaa:	f000 fbd6 	bl	802025a <__multadd>
 801faae:	45b9      	cmp	r9, r7
 801fab0:	9001      	str	r0, [sp, #4]
 801fab2:	f04f 0300 	mov.w	r3, #0
 801fab6:	f04f 020a 	mov.w	r2, #10
 801faba:	4649      	mov	r1, r9
 801fabc:	4620      	mov	r0, r4
 801fabe:	d105      	bne.n	801facc <_dtoa_r+0x9d4>
 801fac0:	f000 fbcb 	bl	802025a <__multadd>
 801fac4:	4681      	mov	r9, r0
 801fac6:	4607      	mov	r7, r0
 801fac8:	46b2      	mov	sl, r6
 801faca:	e779      	b.n	801f9c0 <_dtoa_r+0x8c8>
 801facc:	f000 fbc5 	bl	802025a <__multadd>
 801fad0:	4639      	mov	r1, r7
 801fad2:	4681      	mov	r9, r0
 801fad4:	2300      	movs	r3, #0
 801fad6:	220a      	movs	r2, #10
 801fad8:	4620      	mov	r0, r4
 801fada:	f000 fbbe 	bl	802025a <__multadd>
 801fade:	4607      	mov	r7, r0
 801fae0:	e7f2      	b.n	801fac8 <_dtoa_r+0x9d0>
 801fae2:	f04f 0900 	mov.w	r9, #0
 801fae6:	2201      	movs	r2, #1
 801fae8:	9901      	ldr	r1, [sp, #4]
 801faea:	4620      	mov	r0, r4
 801faec:	f000 fd2c 	bl	8020548 <__lshift>
 801faf0:	4629      	mov	r1, r5
 801faf2:	9001      	str	r0, [sp, #4]
 801faf4:	f000 fd7c 	bl	80205f0 <__mcmp>
 801faf8:	2800      	cmp	r0, #0
 801fafa:	dcb9      	bgt.n	801fa70 <_dtoa_r+0x978>
 801fafc:	d102      	bne.n	801fb04 <_dtoa_r+0xa0c>
 801fafe:	f018 0f01 	tst.w	r8, #1
 801fb02:	d1b5      	bne.n	801fa70 <_dtoa_r+0x978>
 801fb04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fb08:	2b30      	cmp	r3, #48	; 0x30
 801fb0a:	f106 32ff 	add.w	r2, r6, #4294967295
 801fb0e:	f47f af11 	bne.w	801f934 <_dtoa_r+0x83c>
 801fb12:	4616      	mov	r6, r2
 801fb14:	e7f6      	b.n	801fb04 <_dtoa_r+0xa0c>
 801fb16:	9b04      	ldr	r3, [sp, #16]
 801fb18:	4293      	cmp	r3, r2
 801fb1a:	d105      	bne.n	801fb28 <_dtoa_r+0xa30>
 801fb1c:	9a04      	ldr	r2, [sp, #16]
 801fb1e:	f10b 0b01 	add.w	fp, fp, #1
 801fb22:	2331      	movs	r3, #49	; 0x31
 801fb24:	7013      	strb	r3, [r2, #0]
 801fb26:	e705      	b.n	801f934 <_dtoa_r+0x83c>
 801fb28:	4616      	mov	r6, r2
 801fb2a:	e7a1      	b.n	801fa70 <_dtoa_r+0x978>
 801fb2c:	4b16      	ldr	r3, [pc, #88]	; (801fb88 <_dtoa_r+0xa90>)
 801fb2e:	f7ff bb48 	b.w	801f1c2 <_dtoa_r+0xca>
 801fb32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	f47f ab23 	bne.w	801f180 <_dtoa_r+0x88>
 801fb3a:	4b14      	ldr	r3, [pc, #80]	; (801fb8c <_dtoa_r+0xa94>)
 801fb3c:	f7ff bb41 	b.w	801f1c2 <_dtoa_r+0xca>
 801fb40:	9b08      	ldr	r3, [sp, #32]
 801fb42:	2b01      	cmp	r3, #1
 801fb44:	f77f ae3b 	ble.w	801f7be <_dtoa_r+0x6c6>
 801fb48:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801fb4c:	e64f      	b.n	801f7ee <_dtoa_r+0x6f6>
 801fb4e:	9b06      	ldr	r3, [sp, #24]
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	dc03      	bgt.n	801fb5c <_dtoa_r+0xa64>
 801fb54:	9b08      	ldr	r3, [sp, #32]
 801fb56:	2b02      	cmp	r3, #2
 801fb58:	f73f aed7 	bgt.w	801f90a <_dtoa_r+0x812>
 801fb5c:	9e04      	ldr	r6, [sp, #16]
 801fb5e:	9801      	ldr	r0, [sp, #4]
 801fb60:	4629      	mov	r1, r5
 801fb62:	f7ff fa3d 	bl	801efe0 <quorem>
 801fb66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801fb6a:	f806 8b01 	strb.w	r8, [r6], #1
 801fb6e:	9b04      	ldr	r3, [sp, #16]
 801fb70:	9a06      	ldr	r2, [sp, #24]
 801fb72:	1af3      	subs	r3, r6, r3
 801fb74:	429a      	cmp	r2, r3
 801fb76:	ddb4      	ble.n	801fae2 <_dtoa_r+0x9ea>
 801fb78:	2300      	movs	r3, #0
 801fb7a:	220a      	movs	r2, #10
 801fb7c:	9901      	ldr	r1, [sp, #4]
 801fb7e:	4620      	mov	r0, r4
 801fb80:	f000 fb6b 	bl	802025a <__multadd>
 801fb84:	9001      	str	r0, [sp, #4]
 801fb86:	e7ea      	b.n	801fb5e <_dtoa_r+0xa66>
 801fb88:	0803c083 	.word	0x0803c083
 801fb8c:	0803bee3 	.word	0x0803bee3

0801fb90 <__sflush_r>:
 801fb90:	898a      	ldrh	r2, [r1, #12]
 801fb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb96:	4605      	mov	r5, r0
 801fb98:	0710      	lsls	r0, r2, #28
 801fb9a:	460c      	mov	r4, r1
 801fb9c:	d458      	bmi.n	801fc50 <__sflush_r+0xc0>
 801fb9e:	684b      	ldr	r3, [r1, #4]
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	dc05      	bgt.n	801fbb0 <__sflush_r+0x20>
 801fba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	dc02      	bgt.n	801fbb0 <__sflush_r+0x20>
 801fbaa:	2000      	movs	r0, #0
 801fbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fbb2:	2e00      	cmp	r6, #0
 801fbb4:	d0f9      	beq.n	801fbaa <__sflush_r+0x1a>
 801fbb6:	2300      	movs	r3, #0
 801fbb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fbbc:	682f      	ldr	r7, [r5, #0]
 801fbbe:	6a21      	ldr	r1, [r4, #32]
 801fbc0:	602b      	str	r3, [r5, #0]
 801fbc2:	d032      	beq.n	801fc2a <__sflush_r+0x9a>
 801fbc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fbc6:	89a3      	ldrh	r3, [r4, #12]
 801fbc8:	075a      	lsls	r2, r3, #29
 801fbca:	d505      	bpl.n	801fbd8 <__sflush_r+0x48>
 801fbcc:	6863      	ldr	r3, [r4, #4]
 801fbce:	1ac0      	subs	r0, r0, r3
 801fbd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fbd2:	b10b      	cbz	r3, 801fbd8 <__sflush_r+0x48>
 801fbd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fbd6:	1ac0      	subs	r0, r0, r3
 801fbd8:	2300      	movs	r3, #0
 801fbda:	4602      	mov	r2, r0
 801fbdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fbde:	6a21      	ldr	r1, [r4, #32]
 801fbe0:	4628      	mov	r0, r5
 801fbe2:	47b0      	blx	r6
 801fbe4:	1c43      	adds	r3, r0, #1
 801fbe6:	89a3      	ldrh	r3, [r4, #12]
 801fbe8:	d106      	bne.n	801fbf8 <__sflush_r+0x68>
 801fbea:	6829      	ldr	r1, [r5, #0]
 801fbec:	291d      	cmp	r1, #29
 801fbee:	d848      	bhi.n	801fc82 <__sflush_r+0xf2>
 801fbf0:	4a29      	ldr	r2, [pc, #164]	; (801fc98 <__sflush_r+0x108>)
 801fbf2:	40ca      	lsrs	r2, r1
 801fbf4:	07d6      	lsls	r6, r2, #31
 801fbf6:	d544      	bpl.n	801fc82 <__sflush_r+0xf2>
 801fbf8:	2200      	movs	r2, #0
 801fbfa:	6062      	str	r2, [r4, #4]
 801fbfc:	04d9      	lsls	r1, r3, #19
 801fbfe:	6922      	ldr	r2, [r4, #16]
 801fc00:	6022      	str	r2, [r4, #0]
 801fc02:	d504      	bpl.n	801fc0e <__sflush_r+0x7e>
 801fc04:	1c42      	adds	r2, r0, #1
 801fc06:	d101      	bne.n	801fc0c <__sflush_r+0x7c>
 801fc08:	682b      	ldr	r3, [r5, #0]
 801fc0a:	b903      	cbnz	r3, 801fc0e <__sflush_r+0x7e>
 801fc0c:	6560      	str	r0, [r4, #84]	; 0x54
 801fc0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc10:	602f      	str	r7, [r5, #0]
 801fc12:	2900      	cmp	r1, #0
 801fc14:	d0c9      	beq.n	801fbaa <__sflush_r+0x1a>
 801fc16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fc1a:	4299      	cmp	r1, r3
 801fc1c:	d002      	beq.n	801fc24 <__sflush_r+0x94>
 801fc1e:	4628      	mov	r0, r5
 801fc20:	f7fd fefe 	bl	801da20 <_free_r>
 801fc24:	2000      	movs	r0, #0
 801fc26:	6360      	str	r0, [r4, #52]	; 0x34
 801fc28:	e7c0      	b.n	801fbac <__sflush_r+0x1c>
 801fc2a:	2301      	movs	r3, #1
 801fc2c:	4628      	mov	r0, r5
 801fc2e:	47b0      	blx	r6
 801fc30:	1c41      	adds	r1, r0, #1
 801fc32:	d1c8      	bne.n	801fbc6 <__sflush_r+0x36>
 801fc34:	682b      	ldr	r3, [r5, #0]
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	d0c5      	beq.n	801fbc6 <__sflush_r+0x36>
 801fc3a:	2b1d      	cmp	r3, #29
 801fc3c:	d001      	beq.n	801fc42 <__sflush_r+0xb2>
 801fc3e:	2b16      	cmp	r3, #22
 801fc40:	d101      	bne.n	801fc46 <__sflush_r+0xb6>
 801fc42:	602f      	str	r7, [r5, #0]
 801fc44:	e7b1      	b.n	801fbaa <__sflush_r+0x1a>
 801fc46:	89a3      	ldrh	r3, [r4, #12]
 801fc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc4c:	81a3      	strh	r3, [r4, #12]
 801fc4e:	e7ad      	b.n	801fbac <__sflush_r+0x1c>
 801fc50:	690f      	ldr	r7, [r1, #16]
 801fc52:	2f00      	cmp	r7, #0
 801fc54:	d0a9      	beq.n	801fbaa <__sflush_r+0x1a>
 801fc56:	0793      	lsls	r3, r2, #30
 801fc58:	680e      	ldr	r6, [r1, #0]
 801fc5a:	bf08      	it	eq
 801fc5c:	694b      	ldreq	r3, [r1, #20]
 801fc5e:	600f      	str	r7, [r1, #0]
 801fc60:	bf18      	it	ne
 801fc62:	2300      	movne	r3, #0
 801fc64:	eba6 0807 	sub.w	r8, r6, r7
 801fc68:	608b      	str	r3, [r1, #8]
 801fc6a:	f1b8 0f00 	cmp.w	r8, #0
 801fc6e:	dd9c      	ble.n	801fbaa <__sflush_r+0x1a>
 801fc70:	4643      	mov	r3, r8
 801fc72:	463a      	mov	r2, r7
 801fc74:	6a21      	ldr	r1, [r4, #32]
 801fc76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fc78:	4628      	mov	r0, r5
 801fc7a:	47b0      	blx	r6
 801fc7c:	2800      	cmp	r0, #0
 801fc7e:	dc06      	bgt.n	801fc8e <__sflush_r+0xfe>
 801fc80:	89a3      	ldrh	r3, [r4, #12]
 801fc82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc86:	81a3      	strh	r3, [r4, #12]
 801fc88:	f04f 30ff 	mov.w	r0, #4294967295
 801fc8c:	e78e      	b.n	801fbac <__sflush_r+0x1c>
 801fc8e:	4407      	add	r7, r0
 801fc90:	eba8 0800 	sub.w	r8, r8, r0
 801fc94:	e7e9      	b.n	801fc6a <__sflush_r+0xda>
 801fc96:	bf00      	nop
 801fc98:	20400001 	.word	0x20400001

0801fc9c <_fflush_r>:
 801fc9c:	b538      	push	{r3, r4, r5, lr}
 801fc9e:	690b      	ldr	r3, [r1, #16]
 801fca0:	4605      	mov	r5, r0
 801fca2:	460c      	mov	r4, r1
 801fca4:	b1db      	cbz	r3, 801fcde <_fflush_r+0x42>
 801fca6:	b118      	cbz	r0, 801fcb0 <_fflush_r+0x14>
 801fca8:	6983      	ldr	r3, [r0, #24]
 801fcaa:	b90b      	cbnz	r3, 801fcb0 <_fflush_r+0x14>
 801fcac:	f000 f860 	bl	801fd70 <__sinit>
 801fcb0:	4b0c      	ldr	r3, [pc, #48]	; (801fce4 <_fflush_r+0x48>)
 801fcb2:	429c      	cmp	r4, r3
 801fcb4:	d109      	bne.n	801fcca <_fflush_r+0x2e>
 801fcb6:	686c      	ldr	r4, [r5, #4]
 801fcb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fcbc:	b17b      	cbz	r3, 801fcde <_fflush_r+0x42>
 801fcbe:	4621      	mov	r1, r4
 801fcc0:	4628      	mov	r0, r5
 801fcc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fcc6:	f7ff bf63 	b.w	801fb90 <__sflush_r>
 801fcca:	4b07      	ldr	r3, [pc, #28]	; (801fce8 <_fflush_r+0x4c>)
 801fccc:	429c      	cmp	r4, r3
 801fcce:	d101      	bne.n	801fcd4 <_fflush_r+0x38>
 801fcd0:	68ac      	ldr	r4, [r5, #8]
 801fcd2:	e7f1      	b.n	801fcb8 <_fflush_r+0x1c>
 801fcd4:	4b05      	ldr	r3, [pc, #20]	; (801fcec <_fflush_r+0x50>)
 801fcd6:	429c      	cmp	r4, r3
 801fcd8:	bf08      	it	eq
 801fcda:	68ec      	ldreq	r4, [r5, #12]
 801fcdc:	e7ec      	b.n	801fcb8 <_fflush_r+0x1c>
 801fcde:	2000      	movs	r0, #0
 801fce0:	bd38      	pop	{r3, r4, r5, pc}
 801fce2:	bf00      	nop
 801fce4:	0803bf10 	.word	0x0803bf10
 801fce8:	0803bf30 	.word	0x0803bf30
 801fcec:	0803bef0 	.word	0x0803bef0

0801fcf0 <std>:
 801fcf0:	2300      	movs	r3, #0
 801fcf2:	b510      	push	{r4, lr}
 801fcf4:	4604      	mov	r4, r0
 801fcf6:	e9c0 3300 	strd	r3, r3, [r0]
 801fcfa:	6083      	str	r3, [r0, #8]
 801fcfc:	8181      	strh	r1, [r0, #12]
 801fcfe:	6643      	str	r3, [r0, #100]	; 0x64
 801fd00:	81c2      	strh	r2, [r0, #14]
 801fd02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fd06:	6183      	str	r3, [r0, #24]
 801fd08:	4619      	mov	r1, r3
 801fd0a:	2208      	movs	r2, #8
 801fd0c:	305c      	adds	r0, #92	; 0x5c
 801fd0e:	f7fd fbeb 	bl	801d4e8 <memset>
 801fd12:	4b05      	ldr	r3, [pc, #20]	; (801fd28 <std+0x38>)
 801fd14:	6263      	str	r3, [r4, #36]	; 0x24
 801fd16:	4b05      	ldr	r3, [pc, #20]	; (801fd2c <std+0x3c>)
 801fd18:	62a3      	str	r3, [r4, #40]	; 0x28
 801fd1a:	4b05      	ldr	r3, [pc, #20]	; (801fd30 <std+0x40>)
 801fd1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fd1e:	4b05      	ldr	r3, [pc, #20]	; (801fd34 <std+0x44>)
 801fd20:	6224      	str	r4, [r4, #32]
 801fd22:	6323      	str	r3, [r4, #48]	; 0x30
 801fd24:	bd10      	pop	{r4, pc}
 801fd26:	bf00      	nop
 801fd28:	0801e6c5 	.word	0x0801e6c5
 801fd2c:	0801e6eb 	.word	0x0801e6eb
 801fd30:	0801e723 	.word	0x0801e723
 801fd34:	0801e747 	.word	0x0801e747

0801fd38 <_cleanup_r>:
 801fd38:	4901      	ldr	r1, [pc, #4]	; (801fd40 <_cleanup_r+0x8>)
 801fd3a:	f000 b885 	b.w	801fe48 <_fwalk_reent>
 801fd3e:	bf00      	nop
 801fd40:	0801fc9d 	.word	0x0801fc9d

0801fd44 <__sfmoreglue>:
 801fd44:	b570      	push	{r4, r5, r6, lr}
 801fd46:	1e4a      	subs	r2, r1, #1
 801fd48:	2568      	movs	r5, #104	; 0x68
 801fd4a:	4355      	muls	r5, r2
 801fd4c:	460e      	mov	r6, r1
 801fd4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fd52:	f7fd feb3 	bl	801dabc <_malloc_r>
 801fd56:	4604      	mov	r4, r0
 801fd58:	b140      	cbz	r0, 801fd6c <__sfmoreglue+0x28>
 801fd5a:	2100      	movs	r1, #0
 801fd5c:	e9c0 1600 	strd	r1, r6, [r0]
 801fd60:	300c      	adds	r0, #12
 801fd62:	60a0      	str	r0, [r4, #8]
 801fd64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fd68:	f7fd fbbe 	bl	801d4e8 <memset>
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	bd70      	pop	{r4, r5, r6, pc}

0801fd70 <__sinit>:
 801fd70:	6983      	ldr	r3, [r0, #24]
 801fd72:	b510      	push	{r4, lr}
 801fd74:	4604      	mov	r4, r0
 801fd76:	bb33      	cbnz	r3, 801fdc6 <__sinit+0x56>
 801fd78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801fd7c:	6503      	str	r3, [r0, #80]	; 0x50
 801fd7e:	4b12      	ldr	r3, [pc, #72]	; (801fdc8 <__sinit+0x58>)
 801fd80:	4a12      	ldr	r2, [pc, #72]	; (801fdcc <__sinit+0x5c>)
 801fd82:	681b      	ldr	r3, [r3, #0]
 801fd84:	6282      	str	r2, [r0, #40]	; 0x28
 801fd86:	4298      	cmp	r0, r3
 801fd88:	bf04      	itt	eq
 801fd8a:	2301      	moveq	r3, #1
 801fd8c:	6183      	streq	r3, [r0, #24]
 801fd8e:	f000 f81f 	bl	801fdd0 <__sfp>
 801fd92:	6060      	str	r0, [r4, #4]
 801fd94:	4620      	mov	r0, r4
 801fd96:	f000 f81b 	bl	801fdd0 <__sfp>
 801fd9a:	60a0      	str	r0, [r4, #8]
 801fd9c:	4620      	mov	r0, r4
 801fd9e:	f000 f817 	bl	801fdd0 <__sfp>
 801fda2:	2200      	movs	r2, #0
 801fda4:	60e0      	str	r0, [r4, #12]
 801fda6:	2104      	movs	r1, #4
 801fda8:	6860      	ldr	r0, [r4, #4]
 801fdaa:	f7ff ffa1 	bl	801fcf0 <std>
 801fdae:	2201      	movs	r2, #1
 801fdb0:	2109      	movs	r1, #9
 801fdb2:	68a0      	ldr	r0, [r4, #8]
 801fdb4:	f7ff ff9c 	bl	801fcf0 <std>
 801fdb8:	2202      	movs	r2, #2
 801fdba:	2112      	movs	r1, #18
 801fdbc:	68e0      	ldr	r0, [r4, #12]
 801fdbe:	f7ff ff97 	bl	801fcf0 <std>
 801fdc2:	2301      	movs	r3, #1
 801fdc4:	61a3      	str	r3, [r4, #24]
 801fdc6:	bd10      	pop	{r4, pc}
 801fdc8:	0803bd58 	.word	0x0803bd58
 801fdcc:	0801fd39 	.word	0x0801fd39

0801fdd0 <__sfp>:
 801fdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fdd2:	4b1b      	ldr	r3, [pc, #108]	; (801fe40 <__sfp+0x70>)
 801fdd4:	681e      	ldr	r6, [r3, #0]
 801fdd6:	69b3      	ldr	r3, [r6, #24]
 801fdd8:	4607      	mov	r7, r0
 801fdda:	b913      	cbnz	r3, 801fde2 <__sfp+0x12>
 801fddc:	4630      	mov	r0, r6
 801fdde:	f7ff ffc7 	bl	801fd70 <__sinit>
 801fde2:	3648      	adds	r6, #72	; 0x48
 801fde4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fde8:	3b01      	subs	r3, #1
 801fdea:	d503      	bpl.n	801fdf4 <__sfp+0x24>
 801fdec:	6833      	ldr	r3, [r6, #0]
 801fdee:	b133      	cbz	r3, 801fdfe <__sfp+0x2e>
 801fdf0:	6836      	ldr	r6, [r6, #0]
 801fdf2:	e7f7      	b.n	801fde4 <__sfp+0x14>
 801fdf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fdf8:	b16d      	cbz	r5, 801fe16 <__sfp+0x46>
 801fdfa:	3468      	adds	r4, #104	; 0x68
 801fdfc:	e7f4      	b.n	801fde8 <__sfp+0x18>
 801fdfe:	2104      	movs	r1, #4
 801fe00:	4638      	mov	r0, r7
 801fe02:	f7ff ff9f 	bl	801fd44 <__sfmoreglue>
 801fe06:	6030      	str	r0, [r6, #0]
 801fe08:	2800      	cmp	r0, #0
 801fe0a:	d1f1      	bne.n	801fdf0 <__sfp+0x20>
 801fe0c:	230c      	movs	r3, #12
 801fe0e:	603b      	str	r3, [r7, #0]
 801fe10:	4604      	mov	r4, r0
 801fe12:	4620      	mov	r0, r4
 801fe14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe16:	4b0b      	ldr	r3, [pc, #44]	; (801fe44 <__sfp+0x74>)
 801fe18:	6665      	str	r5, [r4, #100]	; 0x64
 801fe1a:	e9c4 5500 	strd	r5, r5, [r4]
 801fe1e:	60a5      	str	r5, [r4, #8]
 801fe20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801fe24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801fe28:	2208      	movs	r2, #8
 801fe2a:	4629      	mov	r1, r5
 801fe2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fe30:	f7fd fb5a 	bl	801d4e8 <memset>
 801fe34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fe38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fe3c:	e7e9      	b.n	801fe12 <__sfp+0x42>
 801fe3e:	bf00      	nop
 801fe40:	0803bd58 	.word	0x0803bd58
 801fe44:	ffff0001 	.word	0xffff0001

0801fe48 <_fwalk_reent>:
 801fe48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe4c:	4680      	mov	r8, r0
 801fe4e:	4689      	mov	r9, r1
 801fe50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fe54:	2600      	movs	r6, #0
 801fe56:	b914      	cbnz	r4, 801fe5e <_fwalk_reent+0x16>
 801fe58:	4630      	mov	r0, r6
 801fe5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801fe62:	3f01      	subs	r7, #1
 801fe64:	d501      	bpl.n	801fe6a <_fwalk_reent+0x22>
 801fe66:	6824      	ldr	r4, [r4, #0]
 801fe68:	e7f5      	b.n	801fe56 <_fwalk_reent+0xe>
 801fe6a:	89ab      	ldrh	r3, [r5, #12]
 801fe6c:	2b01      	cmp	r3, #1
 801fe6e:	d907      	bls.n	801fe80 <_fwalk_reent+0x38>
 801fe70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fe74:	3301      	adds	r3, #1
 801fe76:	d003      	beq.n	801fe80 <_fwalk_reent+0x38>
 801fe78:	4629      	mov	r1, r5
 801fe7a:	4640      	mov	r0, r8
 801fe7c:	47c8      	blx	r9
 801fe7e:	4306      	orrs	r6, r0
 801fe80:	3568      	adds	r5, #104	; 0x68
 801fe82:	e7ee      	b.n	801fe62 <_fwalk_reent+0x1a>

0801fe84 <_findenv_r>:
 801fe84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe88:	4607      	mov	r7, r0
 801fe8a:	468b      	mov	fp, r1
 801fe8c:	4690      	mov	r8, r2
 801fe8e:	f001 fba0 	bl	80215d2 <__env_lock>
 801fe92:	4b19      	ldr	r3, [pc, #100]	; (801fef8 <_findenv_r+0x74>)
 801fe94:	681d      	ldr	r5, [r3, #0]
 801fe96:	469a      	mov	sl, r3
 801fe98:	b13d      	cbz	r5, 801feaa <_findenv_r+0x26>
 801fe9a:	465c      	mov	r4, fp
 801fe9c:	4623      	mov	r3, r4
 801fe9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fea2:	b32a      	cbz	r2, 801fef0 <_findenv_r+0x6c>
 801fea4:	2a3d      	cmp	r2, #61	; 0x3d
 801fea6:	461c      	mov	r4, r3
 801fea8:	d1f8      	bne.n	801fe9c <_findenv_r+0x18>
 801feaa:	4638      	mov	r0, r7
 801feac:	f001 fb92 	bl	80215d4 <__env_unlock>
 801feb0:	2000      	movs	r0, #0
 801feb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feb6:	464d      	mov	r5, r9
 801feb8:	46a9      	mov	r9, r5
 801feba:	f859 0b04 	ldr.w	r0, [r9], #4
 801febe:	2800      	cmp	r0, #0
 801fec0:	d0f3      	beq.n	801feaa <_findenv_r+0x26>
 801fec2:	4622      	mov	r2, r4
 801fec4:	4659      	mov	r1, fp
 801fec6:	f7fe fc60 	bl	801e78a <strncmp>
 801feca:	2800      	cmp	r0, #0
 801fecc:	d1f3      	bne.n	801feb6 <_findenv_r+0x32>
 801fece:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801fed2:	191e      	adds	r6, r3, r4
 801fed4:	5d1b      	ldrb	r3, [r3, r4]
 801fed6:	2b3d      	cmp	r3, #61	; 0x3d
 801fed8:	d1ed      	bne.n	801feb6 <_findenv_r+0x32>
 801feda:	f8da 3000 	ldr.w	r3, [sl]
 801fede:	1aed      	subs	r5, r5, r3
 801fee0:	10ad      	asrs	r5, r5, #2
 801fee2:	4638      	mov	r0, r7
 801fee4:	f8c8 5000 	str.w	r5, [r8]
 801fee8:	f001 fb74 	bl	80215d4 <__env_unlock>
 801feec:	1c70      	adds	r0, r6, #1
 801feee:	e7e0      	b.n	801feb2 <_findenv_r+0x2e>
 801fef0:	eba4 040b 	sub.w	r4, r4, fp
 801fef4:	e7e0      	b.n	801feb8 <_findenv_r+0x34>
 801fef6:	bf00      	nop
 801fef8:	200002b4 	.word	0x200002b4

0801fefc <_getenv_r>:
 801fefc:	b507      	push	{r0, r1, r2, lr}
 801fefe:	aa01      	add	r2, sp, #4
 801ff00:	f7ff ffc0 	bl	801fe84 <_findenv_r>
 801ff04:	b003      	add	sp, #12
 801ff06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ff0c <__gettzinfo>:
 801ff0c:	4800      	ldr	r0, [pc, #0]	; (801ff10 <__gettzinfo+0x4>)
 801ff0e:	4770      	bx	lr
 801ff10:	20000528 	.word	0x20000528

0801ff14 <gmtime_r>:
 801ff14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ff18:	e9d0 8900 	ldrd	r8, r9, [r0]
 801ff1c:	460c      	mov	r4, r1
 801ff1e:	4a50      	ldr	r2, [pc, #320]	; (8020060 <gmtime_r+0x14c>)
 801ff20:	2300      	movs	r3, #0
 801ff22:	4640      	mov	r0, r8
 801ff24:	4649      	mov	r1, r9
 801ff26:	f7e0 f9f3 	bl	8000310 <__aeabi_ldivmod>
 801ff2a:	4a4d      	ldr	r2, [pc, #308]	; (8020060 <gmtime_r+0x14c>)
 801ff2c:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 801ff30:	2300      	movs	r3, #0
 801ff32:	4640      	mov	r0, r8
 801ff34:	4649      	mov	r1, r9
 801ff36:	f7e0 f9eb 	bl	8000310 <__aeabi_ldivmod>
 801ff3a:	2a00      	cmp	r2, #0
 801ff3c:	bfbc      	itt	lt
 801ff3e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801ff42:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801ff46:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ff4a:	fb92 f3f1 	sdiv	r3, r2, r1
 801ff4e:	fb01 2213 	mls	r2, r1, r3, r2
 801ff52:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801ff56:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 801ff5a:	60a3      	str	r3, [r4, #8]
 801ff5c:	bfb8      	it	lt
 801ff5e:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 801ff62:	fb92 f3f1 	sdiv	r3, r2, r1
 801ff66:	fb01 2213 	mls	r2, r1, r3, r2
 801ff6a:	6063      	str	r3, [r4, #4]
 801ff6c:	6022      	str	r2, [r4, #0]
 801ff6e:	1ceb      	adds	r3, r5, #3
 801ff70:	2207      	movs	r2, #7
 801ff72:	fb93 f2f2 	sdiv	r2, r3, r2
 801ff76:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801ff7a:	1a9b      	subs	r3, r3, r2
 801ff7c:	bf48      	it	mi
 801ff7e:	3307      	addmi	r3, #7
 801ff80:	2d00      	cmp	r5, #0
 801ff82:	61a3      	str	r3, [r4, #24]
 801ff84:	bfb8      	it	lt
 801ff86:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 801ff8a:	4836      	ldr	r0, [pc, #216]	; (8020064 <gmtime_r+0x150>)
 801ff8c:	bfae      	itee	ge
 801ff8e:	fb95 f0f0 	sdivge	r0, r5, r0
 801ff92:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801ff96:	fb93 f0f0 	sdivlt	r0, r3, r0
 801ff9a:	4b33      	ldr	r3, [pc, #204]	; (8020068 <gmtime_r+0x154>)
 801ff9c:	fb03 5300 	mla	r3, r3, r0, r5
 801ffa0:	f648 61ac 	movw	r1, #36524	; 0x8eac
 801ffa4:	fbb3 f1f1 	udiv	r1, r3, r1
 801ffa8:	4419      	add	r1, r3
 801ffaa:	f240 57b4 	movw	r7, #1460	; 0x5b4
 801ffae:	fbb3 f2f7 	udiv	r2, r3, r7
 801ffb2:	1a89      	subs	r1, r1, r2
 801ffb4:	4a2d      	ldr	r2, [pc, #180]	; (802006c <gmtime_r+0x158>)
 801ffb6:	fbb3 f2f2 	udiv	r2, r3, r2
 801ffba:	1a8a      	subs	r2, r1, r2
 801ffbc:	f648 6194 	movw	r1, #36500	; 0x8e94
 801ffc0:	fbb2 f1f1 	udiv	r1, r2, r1
 801ffc4:	440b      	add	r3, r1
 801ffc6:	f240 166d 	movw	r6, #365	; 0x16d
 801ffca:	fbb2 f5f6 	udiv	r5, r2, r6
 801ffce:	fbb2 f2f7 	udiv	r2, r2, r7
 801ffd2:	1a9a      	subs	r2, r3, r2
 801ffd4:	fb06 2315 	mls	r3, r6, r5, r2
 801ffd8:	2199      	movs	r1, #153	; 0x99
 801ffda:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801ffde:	1c5e      	adds	r6, r3, #1
 801ffe0:	3202      	adds	r2, #2
 801ffe2:	fbb2 f2f1 	udiv	r2, r2, r1
 801ffe6:	2a0a      	cmp	r2, #10
 801ffe8:	fb01 f102 	mul.w	r1, r1, r2
 801ffec:	f101 0102 	add.w	r1, r1, #2
 801fff0:	f04f 0705 	mov.w	r7, #5
 801fff4:	fbb1 f1f7 	udiv	r1, r1, r7
 801fff8:	eba6 0101 	sub.w	r1, r6, r1
 801fffc:	bf34      	ite	cc
 801fffe:	2602      	movcc	r6, #2
 8020000:	f06f 0609 	mvncs.w	r6, #9
 8020004:	4416      	add	r6, r2
 8020006:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802000a:	fb02 5000 	mla	r0, r2, r0, r5
 802000e:	2e01      	cmp	r6, #1
 8020010:	bf98      	it	ls
 8020012:	3001      	addls	r0, #1
 8020014:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8020018:	d30c      	bcc.n	8020034 <gmtime_r+0x120>
 802001a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 802001e:	61e3      	str	r3, [r4, #28]
 8020020:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8020024:	2300      	movs	r3, #0
 8020026:	e9c4 6004 	strd	r6, r0, [r4, #16]
 802002a:	60e1      	str	r1, [r4, #12]
 802002c:	6223      	str	r3, [r4, #32]
 802002e:	4620      	mov	r0, r4
 8020030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020034:	07aa      	lsls	r2, r5, #30
 8020036:	d105      	bne.n	8020044 <gmtime_r+0x130>
 8020038:	2764      	movs	r7, #100	; 0x64
 802003a:	fbb5 f2f7 	udiv	r2, r5, r7
 802003e:	fb07 5212 	mls	r2, r7, r2, r5
 8020042:	b95a      	cbnz	r2, 802005c <gmtime_r+0x148>
 8020044:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8020048:	fbb5 f2f7 	udiv	r2, r5, r7
 802004c:	fb07 5212 	mls	r2, r7, r2, r5
 8020050:	fab2 f282 	clz	r2, r2
 8020054:	0952      	lsrs	r2, r2, #5
 8020056:	333b      	adds	r3, #59	; 0x3b
 8020058:	4413      	add	r3, r2
 802005a:	e7e0      	b.n	802001e <gmtime_r+0x10a>
 802005c:	2201      	movs	r2, #1
 802005e:	e7fa      	b.n	8020056 <gmtime_r+0x142>
 8020060:	00015180 	.word	0x00015180
 8020064:	00023ab1 	.word	0x00023ab1
 8020068:	fffdc54f 	.word	0xfffdc54f
 802006c:	00023ab0 	.word	0x00023ab0

08020070 <__locale_ctype_ptr_l>:
 8020070:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8020074:	4770      	bx	lr
	...

08020078 <__locale_ctype_ptr>:
 8020078:	4b04      	ldr	r3, [pc, #16]	; (802008c <__locale_ctype_ptr+0x14>)
 802007a:	4a05      	ldr	r2, [pc, #20]	; (8020090 <__locale_ctype_ptr+0x18>)
 802007c:	681b      	ldr	r3, [r3, #0]
 802007e:	6a1b      	ldr	r3, [r3, #32]
 8020080:	2b00      	cmp	r3, #0
 8020082:	bf08      	it	eq
 8020084:	4613      	moveq	r3, r2
 8020086:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 802008a:	4770      	bx	lr
 802008c:	200004b8 	.word	0x200004b8
 8020090:	20000580 	.word	0x20000580

08020094 <_localeconv_r>:
 8020094:	4b04      	ldr	r3, [pc, #16]	; (80200a8 <_localeconv_r+0x14>)
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	6a18      	ldr	r0, [r3, #32]
 802009a:	4b04      	ldr	r3, [pc, #16]	; (80200ac <_localeconv_r+0x18>)
 802009c:	2800      	cmp	r0, #0
 802009e:	bf08      	it	eq
 80200a0:	4618      	moveq	r0, r3
 80200a2:	30f0      	adds	r0, #240	; 0xf0
 80200a4:	4770      	bx	lr
 80200a6:	bf00      	nop
 80200a8:	200004b8 	.word	0x200004b8
 80200ac:	20000580 	.word	0x20000580

080200b0 <_lseek_r>:
 80200b0:	b538      	push	{r3, r4, r5, lr}
 80200b2:	4c07      	ldr	r4, [pc, #28]	; (80200d0 <_lseek_r+0x20>)
 80200b4:	4605      	mov	r5, r0
 80200b6:	4608      	mov	r0, r1
 80200b8:	4611      	mov	r1, r2
 80200ba:	2200      	movs	r2, #0
 80200bc:	6022      	str	r2, [r4, #0]
 80200be:	461a      	mov	r2, r3
 80200c0:	f7e3 fef4 	bl	8003eac <_lseek>
 80200c4:	1c43      	adds	r3, r0, #1
 80200c6:	d102      	bne.n	80200ce <_lseek_r+0x1e>
 80200c8:	6823      	ldr	r3, [r4, #0]
 80200ca:	b103      	cbz	r3, 80200ce <_lseek_r+0x1e>
 80200cc:	602b      	str	r3, [r5, #0]
 80200ce:	bd38      	pop	{r3, r4, r5, pc}
 80200d0:	200354e4 	.word	0x200354e4

080200d4 <__swhatbuf_r>:
 80200d4:	b570      	push	{r4, r5, r6, lr}
 80200d6:	460e      	mov	r6, r1
 80200d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80200dc:	2900      	cmp	r1, #0
 80200de:	b096      	sub	sp, #88	; 0x58
 80200e0:	4614      	mov	r4, r2
 80200e2:	461d      	mov	r5, r3
 80200e4:	da07      	bge.n	80200f6 <__swhatbuf_r+0x22>
 80200e6:	2300      	movs	r3, #0
 80200e8:	602b      	str	r3, [r5, #0]
 80200ea:	89b3      	ldrh	r3, [r6, #12]
 80200ec:	061a      	lsls	r2, r3, #24
 80200ee:	d410      	bmi.n	8020112 <__swhatbuf_r+0x3e>
 80200f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80200f4:	e00e      	b.n	8020114 <__swhatbuf_r+0x40>
 80200f6:	466a      	mov	r2, sp
 80200f8:	f001 fa6e 	bl	80215d8 <_fstat_r>
 80200fc:	2800      	cmp	r0, #0
 80200fe:	dbf2      	blt.n	80200e6 <__swhatbuf_r+0x12>
 8020100:	9a01      	ldr	r2, [sp, #4]
 8020102:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020106:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802010a:	425a      	negs	r2, r3
 802010c:	415a      	adcs	r2, r3
 802010e:	602a      	str	r2, [r5, #0]
 8020110:	e7ee      	b.n	80200f0 <__swhatbuf_r+0x1c>
 8020112:	2340      	movs	r3, #64	; 0x40
 8020114:	2000      	movs	r0, #0
 8020116:	6023      	str	r3, [r4, #0]
 8020118:	b016      	add	sp, #88	; 0x58
 802011a:	bd70      	pop	{r4, r5, r6, pc}

0802011c <__smakebuf_r>:
 802011c:	898b      	ldrh	r3, [r1, #12]
 802011e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020120:	079d      	lsls	r5, r3, #30
 8020122:	4606      	mov	r6, r0
 8020124:	460c      	mov	r4, r1
 8020126:	d507      	bpl.n	8020138 <__smakebuf_r+0x1c>
 8020128:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802012c:	6023      	str	r3, [r4, #0]
 802012e:	6123      	str	r3, [r4, #16]
 8020130:	2301      	movs	r3, #1
 8020132:	6163      	str	r3, [r4, #20]
 8020134:	b002      	add	sp, #8
 8020136:	bd70      	pop	{r4, r5, r6, pc}
 8020138:	ab01      	add	r3, sp, #4
 802013a:	466a      	mov	r2, sp
 802013c:	f7ff ffca 	bl	80200d4 <__swhatbuf_r>
 8020140:	9900      	ldr	r1, [sp, #0]
 8020142:	4605      	mov	r5, r0
 8020144:	4630      	mov	r0, r6
 8020146:	f7fd fcb9 	bl	801dabc <_malloc_r>
 802014a:	b948      	cbnz	r0, 8020160 <__smakebuf_r+0x44>
 802014c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020150:	059a      	lsls	r2, r3, #22
 8020152:	d4ef      	bmi.n	8020134 <__smakebuf_r+0x18>
 8020154:	f023 0303 	bic.w	r3, r3, #3
 8020158:	f043 0302 	orr.w	r3, r3, #2
 802015c:	81a3      	strh	r3, [r4, #12]
 802015e:	e7e3      	b.n	8020128 <__smakebuf_r+0xc>
 8020160:	4b0d      	ldr	r3, [pc, #52]	; (8020198 <__smakebuf_r+0x7c>)
 8020162:	62b3      	str	r3, [r6, #40]	; 0x28
 8020164:	89a3      	ldrh	r3, [r4, #12]
 8020166:	6020      	str	r0, [r4, #0]
 8020168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802016c:	81a3      	strh	r3, [r4, #12]
 802016e:	9b00      	ldr	r3, [sp, #0]
 8020170:	6163      	str	r3, [r4, #20]
 8020172:	9b01      	ldr	r3, [sp, #4]
 8020174:	6120      	str	r0, [r4, #16]
 8020176:	b15b      	cbz	r3, 8020190 <__smakebuf_r+0x74>
 8020178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802017c:	4630      	mov	r0, r6
 802017e:	f001 fa3d 	bl	80215fc <_isatty_r>
 8020182:	b128      	cbz	r0, 8020190 <__smakebuf_r+0x74>
 8020184:	89a3      	ldrh	r3, [r4, #12]
 8020186:	f023 0303 	bic.w	r3, r3, #3
 802018a:	f043 0301 	orr.w	r3, r3, #1
 802018e:	81a3      	strh	r3, [r4, #12]
 8020190:	89a3      	ldrh	r3, [r4, #12]
 8020192:	431d      	orrs	r5, r3
 8020194:	81a5      	strh	r5, [r4, #12]
 8020196:	e7cd      	b.n	8020134 <__smakebuf_r+0x18>
 8020198:	0801fd39 	.word	0x0801fd39

0802019c <__ascii_mbtowc>:
 802019c:	b082      	sub	sp, #8
 802019e:	b901      	cbnz	r1, 80201a2 <__ascii_mbtowc+0x6>
 80201a0:	a901      	add	r1, sp, #4
 80201a2:	b142      	cbz	r2, 80201b6 <__ascii_mbtowc+0x1a>
 80201a4:	b14b      	cbz	r3, 80201ba <__ascii_mbtowc+0x1e>
 80201a6:	7813      	ldrb	r3, [r2, #0]
 80201a8:	600b      	str	r3, [r1, #0]
 80201aa:	7812      	ldrb	r2, [r2, #0]
 80201ac:	1c10      	adds	r0, r2, #0
 80201ae:	bf18      	it	ne
 80201b0:	2001      	movne	r0, #1
 80201b2:	b002      	add	sp, #8
 80201b4:	4770      	bx	lr
 80201b6:	4610      	mov	r0, r2
 80201b8:	e7fb      	b.n	80201b2 <__ascii_mbtowc+0x16>
 80201ba:	f06f 0001 	mvn.w	r0, #1
 80201be:	e7f8      	b.n	80201b2 <__ascii_mbtowc+0x16>

080201c0 <__malloc_lock>:
 80201c0:	4770      	bx	lr

080201c2 <__malloc_unlock>:
 80201c2:	4770      	bx	lr

080201c4 <_Balloc>:
 80201c4:	b570      	push	{r4, r5, r6, lr}
 80201c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80201c8:	4604      	mov	r4, r0
 80201ca:	460e      	mov	r6, r1
 80201cc:	b93d      	cbnz	r5, 80201de <_Balloc+0x1a>
 80201ce:	2010      	movs	r0, #16
 80201d0:	f7fd f960 	bl	801d494 <malloc>
 80201d4:	6260      	str	r0, [r4, #36]	; 0x24
 80201d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80201da:	6005      	str	r5, [r0, #0]
 80201dc:	60c5      	str	r5, [r0, #12]
 80201de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80201e0:	68eb      	ldr	r3, [r5, #12]
 80201e2:	b183      	cbz	r3, 8020206 <_Balloc+0x42>
 80201e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80201e6:	68db      	ldr	r3, [r3, #12]
 80201e8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80201ec:	b9b8      	cbnz	r0, 802021e <_Balloc+0x5a>
 80201ee:	2101      	movs	r1, #1
 80201f0:	fa01 f506 	lsl.w	r5, r1, r6
 80201f4:	1d6a      	adds	r2, r5, #5
 80201f6:	0092      	lsls	r2, r2, #2
 80201f8:	4620      	mov	r0, r4
 80201fa:	f000 fabf 	bl	802077c <_calloc_r>
 80201fe:	b160      	cbz	r0, 802021a <_Balloc+0x56>
 8020200:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8020204:	e00e      	b.n	8020224 <_Balloc+0x60>
 8020206:	2221      	movs	r2, #33	; 0x21
 8020208:	2104      	movs	r1, #4
 802020a:	4620      	mov	r0, r4
 802020c:	f000 fab6 	bl	802077c <_calloc_r>
 8020210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020212:	60e8      	str	r0, [r5, #12]
 8020214:	68db      	ldr	r3, [r3, #12]
 8020216:	2b00      	cmp	r3, #0
 8020218:	d1e4      	bne.n	80201e4 <_Balloc+0x20>
 802021a:	2000      	movs	r0, #0
 802021c:	bd70      	pop	{r4, r5, r6, pc}
 802021e:	6802      	ldr	r2, [r0, #0]
 8020220:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8020224:	2300      	movs	r3, #0
 8020226:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802022a:	e7f7      	b.n	802021c <_Balloc+0x58>

0802022c <_Bfree>:
 802022c:	b570      	push	{r4, r5, r6, lr}
 802022e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8020230:	4606      	mov	r6, r0
 8020232:	460d      	mov	r5, r1
 8020234:	b93c      	cbnz	r4, 8020246 <_Bfree+0x1a>
 8020236:	2010      	movs	r0, #16
 8020238:	f7fd f92c 	bl	801d494 <malloc>
 802023c:	6270      	str	r0, [r6, #36]	; 0x24
 802023e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020242:	6004      	str	r4, [r0, #0]
 8020244:	60c4      	str	r4, [r0, #12]
 8020246:	b13d      	cbz	r5, 8020258 <_Bfree+0x2c>
 8020248:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802024a:	686a      	ldr	r2, [r5, #4]
 802024c:	68db      	ldr	r3, [r3, #12]
 802024e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020252:	6029      	str	r1, [r5, #0]
 8020254:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8020258:	bd70      	pop	{r4, r5, r6, pc}

0802025a <__multadd>:
 802025a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802025e:	690d      	ldr	r5, [r1, #16]
 8020260:	461f      	mov	r7, r3
 8020262:	4606      	mov	r6, r0
 8020264:	460c      	mov	r4, r1
 8020266:	f101 0c14 	add.w	ip, r1, #20
 802026a:	2300      	movs	r3, #0
 802026c:	f8dc 0000 	ldr.w	r0, [ip]
 8020270:	b281      	uxth	r1, r0
 8020272:	fb02 7101 	mla	r1, r2, r1, r7
 8020276:	0c0f      	lsrs	r7, r1, #16
 8020278:	0c00      	lsrs	r0, r0, #16
 802027a:	fb02 7000 	mla	r0, r2, r0, r7
 802027e:	b289      	uxth	r1, r1
 8020280:	3301      	adds	r3, #1
 8020282:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8020286:	429d      	cmp	r5, r3
 8020288:	ea4f 4710 	mov.w	r7, r0, lsr #16
 802028c:	f84c 1b04 	str.w	r1, [ip], #4
 8020290:	dcec      	bgt.n	802026c <__multadd+0x12>
 8020292:	b1d7      	cbz	r7, 80202ca <__multadd+0x70>
 8020294:	68a3      	ldr	r3, [r4, #8]
 8020296:	42ab      	cmp	r3, r5
 8020298:	dc12      	bgt.n	80202c0 <__multadd+0x66>
 802029a:	6861      	ldr	r1, [r4, #4]
 802029c:	4630      	mov	r0, r6
 802029e:	3101      	adds	r1, #1
 80202a0:	f7ff ff90 	bl	80201c4 <_Balloc>
 80202a4:	6922      	ldr	r2, [r4, #16]
 80202a6:	3202      	adds	r2, #2
 80202a8:	f104 010c 	add.w	r1, r4, #12
 80202ac:	4680      	mov	r8, r0
 80202ae:	0092      	lsls	r2, r2, #2
 80202b0:	300c      	adds	r0, #12
 80202b2:	f7fd f90e 	bl	801d4d2 <memcpy>
 80202b6:	4621      	mov	r1, r4
 80202b8:	4630      	mov	r0, r6
 80202ba:	f7ff ffb7 	bl	802022c <_Bfree>
 80202be:	4644      	mov	r4, r8
 80202c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80202c4:	3501      	adds	r5, #1
 80202c6:	615f      	str	r7, [r3, #20]
 80202c8:	6125      	str	r5, [r4, #16]
 80202ca:	4620      	mov	r0, r4
 80202cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080202d0 <__hi0bits>:
 80202d0:	0c02      	lsrs	r2, r0, #16
 80202d2:	0412      	lsls	r2, r2, #16
 80202d4:	4603      	mov	r3, r0
 80202d6:	b9b2      	cbnz	r2, 8020306 <__hi0bits+0x36>
 80202d8:	0403      	lsls	r3, r0, #16
 80202da:	2010      	movs	r0, #16
 80202dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80202e0:	bf04      	itt	eq
 80202e2:	021b      	lsleq	r3, r3, #8
 80202e4:	3008      	addeq	r0, #8
 80202e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80202ea:	bf04      	itt	eq
 80202ec:	011b      	lsleq	r3, r3, #4
 80202ee:	3004      	addeq	r0, #4
 80202f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80202f4:	bf04      	itt	eq
 80202f6:	009b      	lsleq	r3, r3, #2
 80202f8:	3002      	addeq	r0, #2
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	db06      	blt.n	802030c <__hi0bits+0x3c>
 80202fe:	005b      	lsls	r3, r3, #1
 8020300:	d503      	bpl.n	802030a <__hi0bits+0x3a>
 8020302:	3001      	adds	r0, #1
 8020304:	4770      	bx	lr
 8020306:	2000      	movs	r0, #0
 8020308:	e7e8      	b.n	80202dc <__hi0bits+0xc>
 802030a:	2020      	movs	r0, #32
 802030c:	4770      	bx	lr

0802030e <__lo0bits>:
 802030e:	6803      	ldr	r3, [r0, #0]
 8020310:	f013 0207 	ands.w	r2, r3, #7
 8020314:	4601      	mov	r1, r0
 8020316:	d00b      	beq.n	8020330 <__lo0bits+0x22>
 8020318:	07da      	lsls	r2, r3, #31
 802031a:	d423      	bmi.n	8020364 <__lo0bits+0x56>
 802031c:	0798      	lsls	r0, r3, #30
 802031e:	bf49      	itett	mi
 8020320:	085b      	lsrmi	r3, r3, #1
 8020322:	089b      	lsrpl	r3, r3, #2
 8020324:	2001      	movmi	r0, #1
 8020326:	600b      	strmi	r3, [r1, #0]
 8020328:	bf5c      	itt	pl
 802032a:	600b      	strpl	r3, [r1, #0]
 802032c:	2002      	movpl	r0, #2
 802032e:	4770      	bx	lr
 8020330:	b298      	uxth	r0, r3
 8020332:	b9a8      	cbnz	r0, 8020360 <__lo0bits+0x52>
 8020334:	0c1b      	lsrs	r3, r3, #16
 8020336:	2010      	movs	r0, #16
 8020338:	f013 0fff 	tst.w	r3, #255	; 0xff
 802033c:	bf04      	itt	eq
 802033e:	0a1b      	lsreq	r3, r3, #8
 8020340:	3008      	addeq	r0, #8
 8020342:	071a      	lsls	r2, r3, #28
 8020344:	bf04      	itt	eq
 8020346:	091b      	lsreq	r3, r3, #4
 8020348:	3004      	addeq	r0, #4
 802034a:	079a      	lsls	r2, r3, #30
 802034c:	bf04      	itt	eq
 802034e:	089b      	lsreq	r3, r3, #2
 8020350:	3002      	addeq	r0, #2
 8020352:	07da      	lsls	r2, r3, #31
 8020354:	d402      	bmi.n	802035c <__lo0bits+0x4e>
 8020356:	085b      	lsrs	r3, r3, #1
 8020358:	d006      	beq.n	8020368 <__lo0bits+0x5a>
 802035a:	3001      	adds	r0, #1
 802035c:	600b      	str	r3, [r1, #0]
 802035e:	4770      	bx	lr
 8020360:	4610      	mov	r0, r2
 8020362:	e7e9      	b.n	8020338 <__lo0bits+0x2a>
 8020364:	2000      	movs	r0, #0
 8020366:	4770      	bx	lr
 8020368:	2020      	movs	r0, #32
 802036a:	4770      	bx	lr

0802036c <__i2b>:
 802036c:	b510      	push	{r4, lr}
 802036e:	460c      	mov	r4, r1
 8020370:	2101      	movs	r1, #1
 8020372:	f7ff ff27 	bl	80201c4 <_Balloc>
 8020376:	2201      	movs	r2, #1
 8020378:	6144      	str	r4, [r0, #20]
 802037a:	6102      	str	r2, [r0, #16]
 802037c:	bd10      	pop	{r4, pc}

0802037e <__multiply>:
 802037e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020382:	4614      	mov	r4, r2
 8020384:	690a      	ldr	r2, [r1, #16]
 8020386:	6923      	ldr	r3, [r4, #16]
 8020388:	429a      	cmp	r2, r3
 802038a:	bfb8      	it	lt
 802038c:	460b      	movlt	r3, r1
 802038e:	4688      	mov	r8, r1
 8020390:	bfbc      	itt	lt
 8020392:	46a0      	movlt	r8, r4
 8020394:	461c      	movlt	r4, r3
 8020396:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802039a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802039e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80203a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80203a6:	eb07 0609 	add.w	r6, r7, r9
 80203aa:	42b3      	cmp	r3, r6
 80203ac:	bfb8      	it	lt
 80203ae:	3101      	addlt	r1, #1
 80203b0:	f7ff ff08 	bl	80201c4 <_Balloc>
 80203b4:	f100 0514 	add.w	r5, r0, #20
 80203b8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80203bc:	462b      	mov	r3, r5
 80203be:	2200      	movs	r2, #0
 80203c0:	4573      	cmp	r3, lr
 80203c2:	d316      	bcc.n	80203f2 <__multiply+0x74>
 80203c4:	f104 0214 	add.w	r2, r4, #20
 80203c8:	f108 0114 	add.w	r1, r8, #20
 80203cc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80203d0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80203d4:	9300      	str	r3, [sp, #0]
 80203d6:	9b00      	ldr	r3, [sp, #0]
 80203d8:	9201      	str	r2, [sp, #4]
 80203da:	4293      	cmp	r3, r2
 80203dc:	d80c      	bhi.n	80203f8 <__multiply+0x7a>
 80203de:	2e00      	cmp	r6, #0
 80203e0:	dd03      	ble.n	80203ea <__multiply+0x6c>
 80203e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	d05d      	beq.n	80204a6 <__multiply+0x128>
 80203ea:	6106      	str	r6, [r0, #16]
 80203ec:	b003      	add	sp, #12
 80203ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203f2:	f843 2b04 	str.w	r2, [r3], #4
 80203f6:	e7e3      	b.n	80203c0 <__multiply+0x42>
 80203f8:	f8b2 b000 	ldrh.w	fp, [r2]
 80203fc:	f1bb 0f00 	cmp.w	fp, #0
 8020400:	d023      	beq.n	802044a <__multiply+0xcc>
 8020402:	4689      	mov	r9, r1
 8020404:	46ac      	mov	ip, r5
 8020406:	f04f 0800 	mov.w	r8, #0
 802040a:	f859 4b04 	ldr.w	r4, [r9], #4
 802040e:	f8dc a000 	ldr.w	sl, [ip]
 8020412:	b2a3      	uxth	r3, r4
 8020414:	fa1f fa8a 	uxth.w	sl, sl
 8020418:	fb0b a303 	mla	r3, fp, r3, sl
 802041c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8020420:	f8dc 4000 	ldr.w	r4, [ip]
 8020424:	4443      	add	r3, r8
 8020426:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802042a:	fb0b 840a 	mla	r4, fp, sl, r8
 802042e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8020432:	46e2      	mov	sl, ip
 8020434:	b29b      	uxth	r3, r3
 8020436:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802043a:	454f      	cmp	r7, r9
 802043c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8020440:	f84a 3b04 	str.w	r3, [sl], #4
 8020444:	d82b      	bhi.n	802049e <__multiply+0x120>
 8020446:	f8cc 8004 	str.w	r8, [ip, #4]
 802044a:	9b01      	ldr	r3, [sp, #4]
 802044c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8020450:	3204      	adds	r2, #4
 8020452:	f1ba 0f00 	cmp.w	sl, #0
 8020456:	d020      	beq.n	802049a <__multiply+0x11c>
 8020458:	682b      	ldr	r3, [r5, #0]
 802045a:	4689      	mov	r9, r1
 802045c:	46a8      	mov	r8, r5
 802045e:	f04f 0b00 	mov.w	fp, #0
 8020462:	f8b9 c000 	ldrh.w	ip, [r9]
 8020466:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802046a:	fb0a 440c 	mla	r4, sl, ip, r4
 802046e:	445c      	add	r4, fp
 8020470:	46c4      	mov	ip, r8
 8020472:	b29b      	uxth	r3, r3
 8020474:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8020478:	f84c 3b04 	str.w	r3, [ip], #4
 802047c:	f859 3b04 	ldr.w	r3, [r9], #4
 8020480:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8020484:	0c1b      	lsrs	r3, r3, #16
 8020486:	fb0a b303 	mla	r3, sl, r3, fp
 802048a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802048e:	454f      	cmp	r7, r9
 8020490:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8020494:	d805      	bhi.n	80204a2 <__multiply+0x124>
 8020496:	f8c8 3004 	str.w	r3, [r8, #4]
 802049a:	3504      	adds	r5, #4
 802049c:	e79b      	b.n	80203d6 <__multiply+0x58>
 802049e:	46d4      	mov	ip, sl
 80204a0:	e7b3      	b.n	802040a <__multiply+0x8c>
 80204a2:	46e0      	mov	r8, ip
 80204a4:	e7dd      	b.n	8020462 <__multiply+0xe4>
 80204a6:	3e01      	subs	r6, #1
 80204a8:	e799      	b.n	80203de <__multiply+0x60>
	...

080204ac <__pow5mult>:
 80204ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204b0:	4615      	mov	r5, r2
 80204b2:	f012 0203 	ands.w	r2, r2, #3
 80204b6:	4606      	mov	r6, r0
 80204b8:	460f      	mov	r7, r1
 80204ba:	d007      	beq.n	80204cc <__pow5mult+0x20>
 80204bc:	3a01      	subs	r2, #1
 80204be:	4c21      	ldr	r4, [pc, #132]	; (8020544 <__pow5mult+0x98>)
 80204c0:	2300      	movs	r3, #0
 80204c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80204c6:	f7ff fec8 	bl	802025a <__multadd>
 80204ca:	4607      	mov	r7, r0
 80204cc:	10ad      	asrs	r5, r5, #2
 80204ce:	d035      	beq.n	802053c <__pow5mult+0x90>
 80204d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80204d2:	b93c      	cbnz	r4, 80204e4 <__pow5mult+0x38>
 80204d4:	2010      	movs	r0, #16
 80204d6:	f7fc ffdd 	bl	801d494 <malloc>
 80204da:	6270      	str	r0, [r6, #36]	; 0x24
 80204dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80204e0:	6004      	str	r4, [r0, #0]
 80204e2:	60c4      	str	r4, [r0, #12]
 80204e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80204e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80204ec:	b94c      	cbnz	r4, 8020502 <__pow5mult+0x56>
 80204ee:	f240 2171 	movw	r1, #625	; 0x271
 80204f2:	4630      	mov	r0, r6
 80204f4:	f7ff ff3a 	bl	802036c <__i2b>
 80204f8:	2300      	movs	r3, #0
 80204fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80204fe:	4604      	mov	r4, r0
 8020500:	6003      	str	r3, [r0, #0]
 8020502:	f04f 0800 	mov.w	r8, #0
 8020506:	07eb      	lsls	r3, r5, #31
 8020508:	d50a      	bpl.n	8020520 <__pow5mult+0x74>
 802050a:	4639      	mov	r1, r7
 802050c:	4622      	mov	r2, r4
 802050e:	4630      	mov	r0, r6
 8020510:	f7ff ff35 	bl	802037e <__multiply>
 8020514:	4639      	mov	r1, r7
 8020516:	4681      	mov	r9, r0
 8020518:	4630      	mov	r0, r6
 802051a:	f7ff fe87 	bl	802022c <_Bfree>
 802051e:	464f      	mov	r7, r9
 8020520:	106d      	asrs	r5, r5, #1
 8020522:	d00b      	beq.n	802053c <__pow5mult+0x90>
 8020524:	6820      	ldr	r0, [r4, #0]
 8020526:	b938      	cbnz	r0, 8020538 <__pow5mult+0x8c>
 8020528:	4622      	mov	r2, r4
 802052a:	4621      	mov	r1, r4
 802052c:	4630      	mov	r0, r6
 802052e:	f7ff ff26 	bl	802037e <__multiply>
 8020532:	6020      	str	r0, [r4, #0]
 8020534:	f8c0 8000 	str.w	r8, [r0]
 8020538:	4604      	mov	r4, r0
 802053a:	e7e4      	b.n	8020506 <__pow5mult+0x5a>
 802053c:	4638      	mov	r0, r7
 802053e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020542:	bf00      	nop
 8020544:	0803c050 	.word	0x0803c050

08020548 <__lshift>:
 8020548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802054c:	460c      	mov	r4, r1
 802054e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020552:	6923      	ldr	r3, [r4, #16]
 8020554:	6849      	ldr	r1, [r1, #4]
 8020556:	eb0a 0903 	add.w	r9, sl, r3
 802055a:	68a3      	ldr	r3, [r4, #8]
 802055c:	4607      	mov	r7, r0
 802055e:	4616      	mov	r6, r2
 8020560:	f109 0501 	add.w	r5, r9, #1
 8020564:	42ab      	cmp	r3, r5
 8020566:	db32      	blt.n	80205ce <__lshift+0x86>
 8020568:	4638      	mov	r0, r7
 802056a:	f7ff fe2b 	bl	80201c4 <_Balloc>
 802056e:	2300      	movs	r3, #0
 8020570:	4680      	mov	r8, r0
 8020572:	f100 0114 	add.w	r1, r0, #20
 8020576:	461a      	mov	r2, r3
 8020578:	4553      	cmp	r3, sl
 802057a:	db2b      	blt.n	80205d4 <__lshift+0x8c>
 802057c:	6920      	ldr	r0, [r4, #16]
 802057e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020582:	f104 0314 	add.w	r3, r4, #20
 8020586:	f016 021f 	ands.w	r2, r6, #31
 802058a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802058e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020592:	d025      	beq.n	80205e0 <__lshift+0x98>
 8020594:	f1c2 0e20 	rsb	lr, r2, #32
 8020598:	2000      	movs	r0, #0
 802059a:	681e      	ldr	r6, [r3, #0]
 802059c:	468a      	mov	sl, r1
 802059e:	4096      	lsls	r6, r2
 80205a0:	4330      	orrs	r0, r6
 80205a2:	f84a 0b04 	str.w	r0, [sl], #4
 80205a6:	f853 0b04 	ldr.w	r0, [r3], #4
 80205aa:	459c      	cmp	ip, r3
 80205ac:	fa20 f00e 	lsr.w	r0, r0, lr
 80205b0:	d814      	bhi.n	80205dc <__lshift+0x94>
 80205b2:	6048      	str	r0, [r1, #4]
 80205b4:	b108      	cbz	r0, 80205ba <__lshift+0x72>
 80205b6:	f109 0502 	add.w	r5, r9, #2
 80205ba:	3d01      	subs	r5, #1
 80205bc:	4638      	mov	r0, r7
 80205be:	f8c8 5010 	str.w	r5, [r8, #16]
 80205c2:	4621      	mov	r1, r4
 80205c4:	f7ff fe32 	bl	802022c <_Bfree>
 80205c8:	4640      	mov	r0, r8
 80205ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ce:	3101      	adds	r1, #1
 80205d0:	005b      	lsls	r3, r3, #1
 80205d2:	e7c7      	b.n	8020564 <__lshift+0x1c>
 80205d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80205d8:	3301      	adds	r3, #1
 80205da:	e7cd      	b.n	8020578 <__lshift+0x30>
 80205dc:	4651      	mov	r1, sl
 80205de:	e7dc      	b.n	802059a <__lshift+0x52>
 80205e0:	3904      	subs	r1, #4
 80205e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80205e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80205ea:	459c      	cmp	ip, r3
 80205ec:	d8f9      	bhi.n	80205e2 <__lshift+0x9a>
 80205ee:	e7e4      	b.n	80205ba <__lshift+0x72>

080205f0 <__mcmp>:
 80205f0:	6903      	ldr	r3, [r0, #16]
 80205f2:	690a      	ldr	r2, [r1, #16]
 80205f4:	1a9b      	subs	r3, r3, r2
 80205f6:	b530      	push	{r4, r5, lr}
 80205f8:	d10c      	bne.n	8020614 <__mcmp+0x24>
 80205fa:	0092      	lsls	r2, r2, #2
 80205fc:	3014      	adds	r0, #20
 80205fe:	3114      	adds	r1, #20
 8020600:	1884      	adds	r4, r0, r2
 8020602:	4411      	add	r1, r2
 8020604:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020608:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802060c:	4295      	cmp	r5, r2
 802060e:	d003      	beq.n	8020618 <__mcmp+0x28>
 8020610:	d305      	bcc.n	802061e <__mcmp+0x2e>
 8020612:	2301      	movs	r3, #1
 8020614:	4618      	mov	r0, r3
 8020616:	bd30      	pop	{r4, r5, pc}
 8020618:	42a0      	cmp	r0, r4
 802061a:	d3f3      	bcc.n	8020604 <__mcmp+0x14>
 802061c:	e7fa      	b.n	8020614 <__mcmp+0x24>
 802061e:	f04f 33ff 	mov.w	r3, #4294967295
 8020622:	e7f7      	b.n	8020614 <__mcmp+0x24>

08020624 <__mdiff>:
 8020624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020628:	460d      	mov	r5, r1
 802062a:	4607      	mov	r7, r0
 802062c:	4611      	mov	r1, r2
 802062e:	4628      	mov	r0, r5
 8020630:	4614      	mov	r4, r2
 8020632:	f7ff ffdd 	bl	80205f0 <__mcmp>
 8020636:	1e06      	subs	r6, r0, #0
 8020638:	d108      	bne.n	802064c <__mdiff+0x28>
 802063a:	4631      	mov	r1, r6
 802063c:	4638      	mov	r0, r7
 802063e:	f7ff fdc1 	bl	80201c4 <_Balloc>
 8020642:	2301      	movs	r3, #1
 8020644:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8020648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802064c:	bfa4      	itt	ge
 802064e:	4623      	movge	r3, r4
 8020650:	462c      	movge	r4, r5
 8020652:	4638      	mov	r0, r7
 8020654:	6861      	ldr	r1, [r4, #4]
 8020656:	bfa6      	itte	ge
 8020658:	461d      	movge	r5, r3
 802065a:	2600      	movge	r6, #0
 802065c:	2601      	movlt	r6, #1
 802065e:	f7ff fdb1 	bl	80201c4 <_Balloc>
 8020662:	692b      	ldr	r3, [r5, #16]
 8020664:	60c6      	str	r6, [r0, #12]
 8020666:	6926      	ldr	r6, [r4, #16]
 8020668:	f105 0914 	add.w	r9, r5, #20
 802066c:	f104 0214 	add.w	r2, r4, #20
 8020670:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8020674:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8020678:	f100 0514 	add.w	r5, r0, #20
 802067c:	f04f 0e00 	mov.w	lr, #0
 8020680:	f852 ab04 	ldr.w	sl, [r2], #4
 8020684:	f859 4b04 	ldr.w	r4, [r9], #4
 8020688:	fa1e f18a 	uxtah	r1, lr, sl
 802068c:	b2a3      	uxth	r3, r4
 802068e:	1ac9      	subs	r1, r1, r3
 8020690:	0c23      	lsrs	r3, r4, #16
 8020692:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8020696:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802069a:	b289      	uxth	r1, r1
 802069c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80206a0:	45c8      	cmp	r8, r9
 80206a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80206a6:	4694      	mov	ip, r2
 80206a8:	f845 3b04 	str.w	r3, [r5], #4
 80206ac:	d8e8      	bhi.n	8020680 <__mdiff+0x5c>
 80206ae:	45bc      	cmp	ip, r7
 80206b0:	d304      	bcc.n	80206bc <__mdiff+0x98>
 80206b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80206b6:	b183      	cbz	r3, 80206da <__mdiff+0xb6>
 80206b8:	6106      	str	r6, [r0, #16]
 80206ba:	e7c5      	b.n	8020648 <__mdiff+0x24>
 80206bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80206c0:	fa1e f381 	uxtah	r3, lr, r1
 80206c4:	141a      	asrs	r2, r3, #16
 80206c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80206ca:	b29b      	uxth	r3, r3
 80206cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80206d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80206d4:	f845 3b04 	str.w	r3, [r5], #4
 80206d8:	e7e9      	b.n	80206ae <__mdiff+0x8a>
 80206da:	3e01      	subs	r6, #1
 80206dc:	e7e9      	b.n	80206b2 <__mdiff+0x8e>

080206de <__d2b>:
 80206de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80206e2:	460e      	mov	r6, r1
 80206e4:	2101      	movs	r1, #1
 80206e6:	ec59 8b10 	vmov	r8, r9, d0
 80206ea:	4615      	mov	r5, r2
 80206ec:	f7ff fd6a 	bl	80201c4 <_Balloc>
 80206f0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80206f4:	4607      	mov	r7, r0
 80206f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80206fa:	bb34      	cbnz	r4, 802074a <__d2b+0x6c>
 80206fc:	9301      	str	r3, [sp, #4]
 80206fe:	f1b8 0300 	subs.w	r3, r8, #0
 8020702:	d027      	beq.n	8020754 <__d2b+0x76>
 8020704:	a802      	add	r0, sp, #8
 8020706:	f840 3d08 	str.w	r3, [r0, #-8]!
 802070a:	f7ff fe00 	bl	802030e <__lo0bits>
 802070e:	9900      	ldr	r1, [sp, #0]
 8020710:	b1f0      	cbz	r0, 8020750 <__d2b+0x72>
 8020712:	9a01      	ldr	r2, [sp, #4]
 8020714:	f1c0 0320 	rsb	r3, r0, #32
 8020718:	fa02 f303 	lsl.w	r3, r2, r3
 802071c:	430b      	orrs	r3, r1
 802071e:	40c2      	lsrs	r2, r0
 8020720:	617b      	str	r3, [r7, #20]
 8020722:	9201      	str	r2, [sp, #4]
 8020724:	9b01      	ldr	r3, [sp, #4]
 8020726:	61bb      	str	r3, [r7, #24]
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2102      	movne	r1, #2
 802072e:	2101      	moveq	r1, #1
 8020730:	6139      	str	r1, [r7, #16]
 8020732:	b1c4      	cbz	r4, 8020766 <__d2b+0x88>
 8020734:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8020738:	4404      	add	r4, r0
 802073a:	6034      	str	r4, [r6, #0]
 802073c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020740:	6028      	str	r0, [r5, #0]
 8020742:	4638      	mov	r0, r7
 8020744:	b003      	add	sp, #12
 8020746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802074a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802074e:	e7d5      	b.n	80206fc <__d2b+0x1e>
 8020750:	6179      	str	r1, [r7, #20]
 8020752:	e7e7      	b.n	8020724 <__d2b+0x46>
 8020754:	a801      	add	r0, sp, #4
 8020756:	f7ff fdda 	bl	802030e <__lo0bits>
 802075a:	9b01      	ldr	r3, [sp, #4]
 802075c:	617b      	str	r3, [r7, #20]
 802075e:	2101      	movs	r1, #1
 8020760:	6139      	str	r1, [r7, #16]
 8020762:	3020      	adds	r0, #32
 8020764:	e7e5      	b.n	8020732 <__d2b+0x54>
 8020766:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802076a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802076e:	6030      	str	r0, [r6, #0]
 8020770:	6918      	ldr	r0, [r3, #16]
 8020772:	f7ff fdad 	bl	80202d0 <__hi0bits>
 8020776:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802077a:	e7e1      	b.n	8020740 <__d2b+0x62>

0802077c <_calloc_r>:
 802077c:	b538      	push	{r3, r4, r5, lr}
 802077e:	fb02 f401 	mul.w	r4, r2, r1
 8020782:	4621      	mov	r1, r4
 8020784:	f7fd f99a 	bl	801dabc <_malloc_r>
 8020788:	4605      	mov	r5, r0
 802078a:	b118      	cbz	r0, 8020794 <_calloc_r+0x18>
 802078c:	4622      	mov	r2, r4
 802078e:	2100      	movs	r1, #0
 8020790:	f7fc feaa 	bl	801d4e8 <memset>
 8020794:	4628      	mov	r0, r5
 8020796:	bd38      	pop	{r3, r4, r5, pc}

08020798 <_realloc_r>:
 8020798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802079a:	4607      	mov	r7, r0
 802079c:	4614      	mov	r4, r2
 802079e:	460e      	mov	r6, r1
 80207a0:	b921      	cbnz	r1, 80207ac <_realloc_r+0x14>
 80207a2:	4611      	mov	r1, r2
 80207a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80207a8:	f7fd b988 	b.w	801dabc <_malloc_r>
 80207ac:	b922      	cbnz	r2, 80207b8 <_realloc_r+0x20>
 80207ae:	f7fd f937 	bl	801da20 <_free_r>
 80207b2:	4625      	mov	r5, r4
 80207b4:	4628      	mov	r0, r5
 80207b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80207b8:	f000 ff49 	bl	802164e <_malloc_usable_size_r>
 80207bc:	42a0      	cmp	r0, r4
 80207be:	d20f      	bcs.n	80207e0 <_realloc_r+0x48>
 80207c0:	4621      	mov	r1, r4
 80207c2:	4638      	mov	r0, r7
 80207c4:	f7fd f97a 	bl	801dabc <_malloc_r>
 80207c8:	4605      	mov	r5, r0
 80207ca:	2800      	cmp	r0, #0
 80207cc:	d0f2      	beq.n	80207b4 <_realloc_r+0x1c>
 80207ce:	4631      	mov	r1, r6
 80207d0:	4622      	mov	r2, r4
 80207d2:	f7fc fe7e 	bl	801d4d2 <memcpy>
 80207d6:	4631      	mov	r1, r6
 80207d8:	4638      	mov	r0, r7
 80207da:	f7fd f921 	bl	801da20 <_free_r>
 80207de:	e7e9      	b.n	80207b4 <_realloc_r+0x1c>
 80207e0:	4635      	mov	r5, r6
 80207e2:	e7e7      	b.n	80207b4 <_realloc_r+0x1c>

080207e4 <__ssputs_r>:
 80207e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207e8:	688e      	ldr	r6, [r1, #8]
 80207ea:	429e      	cmp	r6, r3
 80207ec:	4682      	mov	sl, r0
 80207ee:	460c      	mov	r4, r1
 80207f0:	4690      	mov	r8, r2
 80207f2:	4699      	mov	r9, r3
 80207f4:	d837      	bhi.n	8020866 <__ssputs_r+0x82>
 80207f6:	898a      	ldrh	r2, [r1, #12]
 80207f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80207fc:	d031      	beq.n	8020862 <__ssputs_r+0x7e>
 80207fe:	6825      	ldr	r5, [r4, #0]
 8020800:	6909      	ldr	r1, [r1, #16]
 8020802:	1a6f      	subs	r7, r5, r1
 8020804:	6965      	ldr	r5, [r4, #20]
 8020806:	2302      	movs	r3, #2
 8020808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802080c:	fb95 f5f3 	sdiv	r5, r5, r3
 8020810:	f109 0301 	add.w	r3, r9, #1
 8020814:	443b      	add	r3, r7
 8020816:	429d      	cmp	r5, r3
 8020818:	bf38      	it	cc
 802081a:	461d      	movcc	r5, r3
 802081c:	0553      	lsls	r3, r2, #21
 802081e:	d530      	bpl.n	8020882 <__ssputs_r+0x9e>
 8020820:	4629      	mov	r1, r5
 8020822:	f7fd f94b 	bl	801dabc <_malloc_r>
 8020826:	4606      	mov	r6, r0
 8020828:	b950      	cbnz	r0, 8020840 <__ssputs_r+0x5c>
 802082a:	230c      	movs	r3, #12
 802082c:	f8ca 3000 	str.w	r3, [sl]
 8020830:	89a3      	ldrh	r3, [r4, #12]
 8020832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020836:	81a3      	strh	r3, [r4, #12]
 8020838:	f04f 30ff 	mov.w	r0, #4294967295
 802083c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020840:	463a      	mov	r2, r7
 8020842:	6921      	ldr	r1, [r4, #16]
 8020844:	f7fc fe45 	bl	801d4d2 <memcpy>
 8020848:	89a3      	ldrh	r3, [r4, #12]
 802084a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802084e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020852:	81a3      	strh	r3, [r4, #12]
 8020854:	6126      	str	r6, [r4, #16]
 8020856:	6165      	str	r5, [r4, #20]
 8020858:	443e      	add	r6, r7
 802085a:	1bed      	subs	r5, r5, r7
 802085c:	6026      	str	r6, [r4, #0]
 802085e:	60a5      	str	r5, [r4, #8]
 8020860:	464e      	mov	r6, r9
 8020862:	454e      	cmp	r6, r9
 8020864:	d900      	bls.n	8020868 <__ssputs_r+0x84>
 8020866:	464e      	mov	r6, r9
 8020868:	4632      	mov	r2, r6
 802086a:	4641      	mov	r1, r8
 802086c:	6820      	ldr	r0, [r4, #0]
 802086e:	f000 fed5 	bl	802161c <memmove>
 8020872:	68a3      	ldr	r3, [r4, #8]
 8020874:	1b9b      	subs	r3, r3, r6
 8020876:	60a3      	str	r3, [r4, #8]
 8020878:	6823      	ldr	r3, [r4, #0]
 802087a:	441e      	add	r6, r3
 802087c:	6026      	str	r6, [r4, #0]
 802087e:	2000      	movs	r0, #0
 8020880:	e7dc      	b.n	802083c <__ssputs_r+0x58>
 8020882:	462a      	mov	r2, r5
 8020884:	f7ff ff88 	bl	8020798 <_realloc_r>
 8020888:	4606      	mov	r6, r0
 802088a:	2800      	cmp	r0, #0
 802088c:	d1e2      	bne.n	8020854 <__ssputs_r+0x70>
 802088e:	6921      	ldr	r1, [r4, #16]
 8020890:	4650      	mov	r0, sl
 8020892:	f7fd f8c5 	bl	801da20 <_free_r>
 8020896:	e7c8      	b.n	802082a <__ssputs_r+0x46>

08020898 <_svfiprintf_r>:
 8020898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802089c:	461d      	mov	r5, r3
 802089e:	898b      	ldrh	r3, [r1, #12]
 80208a0:	061f      	lsls	r7, r3, #24
 80208a2:	b09d      	sub	sp, #116	; 0x74
 80208a4:	4680      	mov	r8, r0
 80208a6:	460c      	mov	r4, r1
 80208a8:	4616      	mov	r6, r2
 80208aa:	d50f      	bpl.n	80208cc <_svfiprintf_r+0x34>
 80208ac:	690b      	ldr	r3, [r1, #16]
 80208ae:	b96b      	cbnz	r3, 80208cc <_svfiprintf_r+0x34>
 80208b0:	2140      	movs	r1, #64	; 0x40
 80208b2:	f7fd f903 	bl	801dabc <_malloc_r>
 80208b6:	6020      	str	r0, [r4, #0]
 80208b8:	6120      	str	r0, [r4, #16]
 80208ba:	b928      	cbnz	r0, 80208c8 <_svfiprintf_r+0x30>
 80208bc:	230c      	movs	r3, #12
 80208be:	f8c8 3000 	str.w	r3, [r8]
 80208c2:	f04f 30ff 	mov.w	r0, #4294967295
 80208c6:	e0c8      	b.n	8020a5a <_svfiprintf_r+0x1c2>
 80208c8:	2340      	movs	r3, #64	; 0x40
 80208ca:	6163      	str	r3, [r4, #20]
 80208cc:	2300      	movs	r3, #0
 80208ce:	9309      	str	r3, [sp, #36]	; 0x24
 80208d0:	2320      	movs	r3, #32
 80208d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80208d6:	2330      	movs	r3, #48	; 0x30
 80208d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80208dc:	9503      	str	r5, [sp, #12]
 80208de:	f04f 0b01 	mov.w	fp, #1
 80208e2:	4637      	mov	r7, r6
 80208e4:	463d      	mov	r5, r7
 80208e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80208ea:	b10b      	cbz	r3, 80208f0 <_svfiprintf_r+0x58>
 80208ec:	2b25      	cmp	r3, #37	; 0x25
 80208ee:	d13e      	bne.n	802096e <_svfiprintf_r+0xd6>
 80208f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80208f4:	d00b      	beq.n	802090e <_svfiprintf_r+0x76>
 80208f6:	4653      	mov	r3, sl
 80208f8:	4632      	mov	r2, r6
 80208fa:	4621      	mov	r1, r4
 80208fc:	4640      	mov	r0, r8
 80208fe:	f7ff ff71 	bl	80207e4 <__ssputs_r>
 8020902:	3001      	adds	r0, #1
 8020904:	f000 80a4 	beq.w	8020a50 <_svfiprintf_r+0x1b8>
 8020908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802090a:	4453      	add	r3, sl
 802090c:	9309      	str	r3, [sp, #36]	; 0x24
 802090e:	783b      	ldrb	r3, [r7, #0]
 8020910:	2b00      	cmp	r3, #0
 8020912:	f000 809d 	beq.w	8020a50 <_svfiprintf_r+0x1b8>
 8020916:	2300      	movs	r3, #0
 8020918:	f04f 32ff 	mov.w	r2, #4294967295
 802091c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020920:	9304      	str	r3, [sp, #16]
 8020922:	9307      	str	r3, [sp, #28]
 8020924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020928:	931a      	str	r3, [sp, #104]	; 0x68
 802092a:	462f      	mov	r7, r5
 802092c:	2205      	movs	r2, #5
 802092e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8020932:	4850      	ldr	r0, [pc, #320]	; (8020a74 <_svfiprintf_r+0x1dc>)
 8020934:	f7df fc9c 	bl	8000270 <memchr>
 8020938:	9b04      	ldr	r3, [sp, #16]
 802093a:	b9d0      	cbnz	r0, 8020972 <_svfiprintf_r+0xda>
 802093c:	06d9      	lsls	r1, r3, #27
 802093e:	bf44      	itt	mi
 8020940:	2220      	movmi	r2, #32
 8020942:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020946:	071a      	lsls	r2, r3, #28
 8020948:	bf44      	itt	mi
 802094a:	222b      	movmi	r2, #43	; 0x2b
 802094c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020950:	782a      	ldrb	r2, [r5, #0]
 8020952:	2a2a      	cmp	r2, #42	; 0x2a
 8020954:	d015      	beq.n	8020982 <_svfiprintf_r+0xea>
 8020956:	9a07      	ldr	r2, [sp, #28]
 8020958:	462f      	mov	r7, r5
 802095a:	2000      	movs	r0, #0
 802095c:	250a      	movs	r5, #10
 802095e:	4639      	mov	r1, r7
 8020960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020964:	3b30      	subs	r3, #48	; 0x30
 8020966:	2b09      	cmp	r3, #9
 8020968:	d94d      	bls.n	8020a06 <_svfiprintf_r+0x16e>
 802096a:	b1b8      	cbz	r0, 802099c <_svfiprintf_r+0x104>
 802096c:	e00f      	b.n	802098e <_svfiprintf_r+0xf6>
 802096e:	462f      	mov	r7, r5
 8020970:	e7b8      	b.n	80208e4 <_svfiprintf_r+0x4c>
 8020972:	4a40      	ldr	r2, [pc, #256]	; (8020a74 <_svfiprintf_r+0x1dc>)
 8020974:	1a80      	subs	r0, r0, r2
 8020976:	fa0b f000 	lsl.w	r0, fp, r0
 802097a:	4318      	orrs	r0, r3
 802097c:	9004      	str	r0, [sp, #16]
 802097e:	463d      	mov	r5, r7
 8020980:	e7d3      	b.n	802092a <_svfiprintf_r+0x92>
 8020982:	9a03      	ldr	r2, [sp, #12]
 8020984:	1d11      	adds	r1, r2, #4
 8020986:	6812      	ldr	r2, [r2, #0]
 8020988:	9103      	str	r1, [sp, #12]
 802098a:	2a00      	cmp	r2, #0
 802098c:	db01      	blt.n	8020992 <_svfiprintf_r+0xfa>
 802098e:	9207      	str	r2, [sp, #28]
 8020990:	e004      	b.n	802099c <_svfiprintf_r+0x104>
 8020992:	4252      	negs	r2, r2
 8020994:	f043 0302 	orr.w	r3, r3, #2
 8020998:	9207      	str	r2, [sp, #28]
 802099a:	9304      	str	r3, [sp, #16]
 802099c:	783b      	ldrb	r3, [r7, #0]
 802099e:	2b2e      	cmp	r3, #46	; 0x2e
 80209a0:	d10c      	bne.n	80209bc <_svfiprintf_r+0x124>
 80209a2:	787b      	ldrb	r3, [r7, #1]
 80209a4:	2b2a      	cmp	r3, #42	; 0x2a
 80209a6:	d133      	bne.n	8020a10 <_svfiprintf_r+0x178>
 80209a8:	9b03      	ldr	r3, [sp, #12]
 80209aa:	1d1a      	adds	r2, r3, #4
 80209ac:	681b      	ldr	r3, [r3, #0]
 80209ae:	9203      	str	r2, [sp, #12]
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	bfb8      	it	lt
 80209b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80209b8:	3702      	adds	r7, #2
 80209ba:	9305      	str	r3, [sp, #20]
 80209bc:	4d2e      	ldr	r5, [pc, #184]	; (8020a78 <_svfiprintf_r+0x1e0>)
 80209be:	7839      	ldrb	r1, [r7, #0]
 80209c0:	2203      	movs	r2, #3
 80209c2:	4628      	mov	r0, r5
 80209c4:	f7df fc54 	bl	8000270 <memchr>
 80209c8:	b138      	cbz	r0, 80209da <_svfiprintf_r+0x142>
 80209ca:	2340      	movs	r3, #64	; 0x40
 80209cc:	1b40      	subs	r0, r0, r5
 80209ce:	fa03 f000 	lsl.w	r0, r3, r0
 80209d2:	9b04      	ldr	r3, [sp, #16]
 80209d4:	4303      	orrs	r3, r0
 80209d6:	3701      	adds	r7, #1
 80209d8:	9304      	str	r3, [sp, #16]
 80209da:	7839      	ldrb	r1, [r7, #0]
 80209dc:	4827      	ldr	r0, [pc, #156]	; (8020a7c <_svfiprintf_r+0x1e4>)
 80209de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80209e2:	2206      	movs	r2, #6
 80209e4:	1c7e      	adds	r6, r7, #1
 80209e6:	f7df fc43 	bl	8000270 <memchr>
 80209ea:	2800      	cmp	r0, #0
 80209ec:	d038      	beq.n	8020a60 <_svfiprintf_r+0x1c8>
 80209ee:	4b24      	ldr	r3, [pc, #144]	; (8020a80 <_svfiprintf_r+0x1e8>)
 80209f0:	bb13      	cbnz	r3, 8020a38 <_svfiprintf_r+0x1a0>
 80209f2:	9b03      	ldr	r3, [sp, #12]
 80209f4:	3307      	adds	r3, #7
 80209f6:	f023 0307 	bic.w	r3, r3, #7
 80209fa:	3308      	adds	r3, #8
 80209fc:	9303      	str	r3, [sp, #12]
 80209fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a00:	444b      	add	r3, r9
 8020a02:	9309      	str	r3, [sp, #36]	; 0x24
 8020a04:	e76d      	b.n	80208e2 <_svfiprintf_r+0x4a>
 8020a06:	fb05 3202 	mla	r2, r5, r2, r3
 8020a0a:	2001      	movs	r0, #1
 8020a0c:	460f      	mov	r7, r1
 8020a0e:	e7a6      	b.n	802095e <_svfiprintf_r+0xc6>
 8020a10:	2300      	movs	r3, #0
 8020a12:	3701      	adds	r7, #1
 8020a14:	9305      	str	r3, [sp, #20]
 8020a16:	4619      	mov	r1, r3
 8020a18:	250a      	movs	r5, #10
 8020a1a:	4638      	mov	r0, r7
 8020a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020a20:	3a30      	subs	r2, #48	; 0x30
 8020a22:	2a09      	cmp	r2, #9
 8020a24:	d903      	bls.n	8020a2e <_svfiprintf_r+0x196>
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	d0c8      	beq.n	80209bc <_svfiprintf_r+0x124>
 8020a2a:	9105      	str	r1, [sp, #20]
 8020a2c:	e7c6      	b.n	80209bc <_svfiprintf_r+0x124>
 8020a2e:	fb05 2101 	mla	r1, r5, r1, r2
 8020a32:	2301      	movs	r3, #1
 8020a34:	4607      	mov	r7, r0
 8020a36:	e7f0      	b.n	8020a1a <_svfiprintf_r+0x182>
 8020a38:	ab03      	add	r3, sp, #12
 8020a3a:	9300      	str	r3, [sp, #0]
 8020a3c:	4622      	mov	r2, r4
 8020a3e:	4b11      	ldr	r3, [pc, #68]	; (8020a84 <_svfiprintf_r+0x1ec>)
 8020a40:	a904      	add	r1, sp, #16
 8020a42:	4640      	mov	r0, r8
 8020a44:	f7fd f91c 	bl	801dc80 <_printf_float>
 8020a48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8020a4c:	4681      	mov	r9, r0
 8020a4e:	d1d6      	bne.n	80209fe <_svfiprintf_r+0x166>
 8020a50:	89a3      	ldrh	r3, [r4, #12]
 8020a52:	065b      	lsls	r3, r3, #25
 8020a54:	f53f af35 	bmi.w	80208c2 <_svfiprintf_r+0x2a>
 8020a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020a5a:	b01d      	add	sp, #116	; 0x74
 8020a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a60:	ab03      	add	r3, sp, #12
 8020a62:	9300      	str	r3, [sp, #0]
 8020a64:	4622      	mov	r2, r4
 8020a66:	4b07      	ldr	r3, [pc, #28]	; (8020a84 <_svfiprintf_r+0x1ec>)
 8020a68:	a904      	add	r1, sp, #16
 8020a6a:	4640      	mov	r0, r8
 8020a6c:	f7fd fbaa 	bl	801e1c4 <_printf_i>
 8020a70:	e7ea      	b.n	8020a48 <_svfiprintf_r+0x1b0>
 8020a72:	bf00      	nop
 8020a74:	0803c05c 	.word	0x0803c05c
 8020a78:	0803c062 	.word	0x0803c062
 8020a7c:	0803c066 	.word	0x0803c066
 8020a80:	0801dc81 	.word	0x0801dc81
 8020a84:	080207e5 	.word	0x080207e5

08020a88 <_sungetc_r>:
 8020a88:	b538      	push	{r3, r4, r5, lr}
 8020a8a:	1c4b      	adds	r3, r1, #1
 8020a8c:	4614      	mov	r4, r2
 8020a8e:	d103      	bne.n	8020a98 <_sungetc_r+0x10>
 8020a90:	f04f 35ff 	mov.w	r5, #4294967295
 8020a94:	4628      	mov	r0, r5
 8020a96:	bd38      	pop	{r3, r4, r5, pc}
 8020a98:	8993      	ldrh	r3, [r2, #12]
 8020a9a:	f023 0320 	bic.w	r3, r3, #32
 8020a9e:	8193      	strh	r3, [r2, #12]
 8020aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020aa2:	6852      	ldr	r2, [r2, #4]
 8020aa4:	b2cd      	uxtb	r5, r1
 8020aa6:	b18b      	cbz	r3, 8020acc <_sungetc_r+0x44>
 8020aa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020aaa:	4293      	cmp	r3, r2
 8020aac:	dd08      	ble.n	8020ac0 <_sungetc_r+0x38>
 8020aae:	6823      	ldr	r3, [r4, #0]
 8020ab0:	1e5a      	subs	r2, r3, #1
 8020ab2:	6022      	str	r2, [r4, #0]
 8020ab4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020ab8:	6863      	ldr	r3, [r4, #4]
 8020aba:	3301      	adds	r3, #1
 8020abc:	6063      	str	r3, [r4, #4]
 8020abe:	e7e9      	b.n	8020a94 <_sungetc_r+0xc>
 8020ac0:	4621      	mov	r1, r4
 8020ac2:	f000 fd3f 	bl	8021544 <__submore>
 8020ac6:	2800      	cmp	r0, #0
 8020ac8:	d0f1      	beq.n	8020aae <_sungetc_r+0x26>
 8020aca:	e7e1      	b.n	8020a90 <_sungetc_r+0x8>
 8020acc:	6921      	ldr	r1, [r4, #16]
 8020ace:	6823      	ldr	r3, [r4, #0]
 8020ad0:	b151      	cbz	r1, 8020ae8 <_sungetc_r+0x60>
 8020ad2:	4299      	cmp	r1, r3
 8020ad4:	d208      	bcs.n	8020ae8 <_sungetc_r+0x60>
 8020ad6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020ada:	42a9      	cmp	r1, r5
 8020adc:	d104      	bne.n	8020ae8 <_sungetc_r+0x60>
 8020ade:	3b01      	subs	r3, #1
 8020ae0:	3201      	adds	r2, #1
 8020ae2:	6023      	str	r3, [r4, #0]
 8020ae4:	6062      	str	r2, [r4, #4]
 8020ae6:	e7d5      	b.n	8020a94 <_sungetc_r+0xc>
 8020ae8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020af0:	6363      	str	r3, [r4, #52]	; 0x34
 8020af2:	2303      	movs	r3, #3
 8020af4:	63a3      	str	r3, [r4, #56]	; 0x38
 8020af6:	4623      	mov	r3, r4
 8020af8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020afc:	6023      	str	r3, [r4, #0]
 8020afe:	2301      	movs	r3, #1
 8020b00:	e7dc      	b.n	8020abc <_sungetc_r+0x34>

08020b02 <__ssrefill_r>:
 8020b02:	b510      	push	{r4, lr}
 8020b04:	460c      	mov	r4, r1
 8020b06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020b08:	b169      	cbz	r1, 8020b26 <__ssrefill_r+0x24>
 8020b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020b0e:	4299      	cmp	r1, r3
 8020b10:	d001      	beq.n	8020b16 <__ssrefill_r+0x14>
 8020b12:	f7fc ff85 	bl	801da20 <_free_r>
 8020b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020b18:	6063      	str	r3, [r4, #4]
 8020b1a:	2000      	movs	r0, #0
 8020b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8020b1e:	b113      	cbz	r3, 8020b26 <__ssrefill_r+0x24>
 8020b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020b22:	6023      	str	r3, [r4, #0]
 8020b24:	bd10      	pop	{r4, pc}
 8020b26:	6923      	ldr	r3, [r4, #16]
 8020b28:	6023      	str	r3, [r4, #0]
 8020b2a:	2300      	movs	r3, #0
 8020b2c:	6063      	str	r3, [r4, #4]
 8020b2e:	89a3      	ldrh	r3, [r4, #12]
 8020b30:	f043 0320 	orr.w	r3, r3, #32
 8020b34:	81a3      	strh	r3, [r4, #12]
 8020b36:	f04f 30ff 	mov.w	r0, #4294967295
 8020b3a:	e7f3      	b.n	8020b24 <__ssrefill_r+0x22>

08020b3c <__ssvfiscanf_r>:
 8020b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b40:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8020b44:	460c      	mov	r4, r1
 8020b46:	2100      	movs	r1, #0
 8020b48:	9144      	str	r1, [sp, #272]	; 0x110
 8020b4a:	9145      	str	r1, [sp, #276]	; 0x114
 8020b4c:	499f      	ldr	r1, [pc, #636]	; (8020dcc <__ssvfiscanf_r+0x290>)
 8020b4e:	91a0      	str	r1, [sp, #640]	; 0x280
 8020b50:	f10d 0804 	add.w	r8, sp, #4
 8020b54:	499e      	ldr	r1, [pc, #632]	; (8020dd0 <__ssvfiscanf_r+0x294>)
 8020b56:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8020dd4 <__ssvfiscanf_r+0x298>
 8020b5a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020b5e:	4606      	mov	r6, r0
 8020b60:	4692      	mov	sl, r2
 8020b62:	91a1      	str	r1, [sp, #644]	; 0x284
 8020b64:	9300      	str	r3, [sp, #0]
 8020b66:	270a      	movs	r7, #10
 8020b68:	f89a 3000 	ldrb.w	r3, [sl]
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	f000 812a 	beq.w	8020dc6 <__ssvfiscanf_r+0x28a>
 8020b72:	4655      	mov	r5, sl
 8020b74:	f7ff fa80 	bl	8020078 <__locale_ctype_ptr>
 8020b78:	f815 bb01 	ldrb.w	fp, [r5], #1
 8020b7c:	4458      	add	r0, fp
 8020b7e:	7843      	ldrb	r3, [r0, #1]
 8020b80:	f013 0308 	ands.w	r3, r3, #8
 8020b84:	d01c      	beq.n	8020bc0 <__ssvfiscanf_r+0x84>
 8020b86:	6863      	ldr	r3, [r4, #4]
 8020b88:	2b00      	cmp	r3, #0
 8020b8a:	dd12      	ble.n	8020bb2 <__ssvfiscanf_r+0x76>
 8020b8c:	f7ff fa74 	bl	8020078 <__locale_ctype_ptr>
 8020b90:	6823      	ldr	r3, [r4, #0]
 8020b92:	781a      	ldrb	r2, [r3, #0]
 8020b94:	4410      	add	r0, r2
 8020b96:	7842      	ldrb	r2, [r0, #1]
 8020b98:	0712      	lsls	r2, r2, #28
 8020b9a:	d401      	bmi.n	8020ba0 <__ssvfiscanf_r+0x64>
 8020b9c:	46aa      	mov	sl, r5
 8020b9e:	e7e3      	b.n	8020b68 <__ssvfiscanf_r+0x2c>
 8020ba0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020ba2:	3201      	adds	r2, #1
 8020ba4:	9245      	str	r2, [sp, #276]	; 0x114
 8020ba6:	6862      	ldr	r2, [r4, #4]
 8020ba8:	3301      	adds	r3, #1
 8020baa:	3a01      	subs	r2, #1
 8020bac:	6062      	str	r2, [r4, #4]
 8020bae:	6023      	str	r3, [r4, #0]
 8020bb0:	e7e9      	b.n	8020b86 <__ssvfiscanf_r+0x4a>
 8020bb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020bb4:	4621      	mov	r1, r4
 8020bb6:	4630      	mov	r0, r6
 8020bb8:	4798      	blx	r3
 8020bba:	2800      	cmp	r0, #0
 8020bbc:	d0e6      	beq.n	8020b8c <__ssvfiscanf_r+0x50>
 8020bbe:	e7ed      	b.n	8020b9c <__ssvfiscanf_r+0x60>
 8020bc0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8020bc4:	f040 8082 	bne.w	8020ccc <__ssvfiscanf_r+0x190>
 8020bc8:	9343      	str	r3, [sp, #268]	; 0x10c
 8020bca:	9341      	str	r3, [sp, #260]	; 0x104
 8020bcc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8020bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8020bd2:	d103      	bne.n	8020bdc <__ssvfiscanf_r+0xa0>
 8020bd4:	2310      	movs	r3, #16
 8020bd6:	9341      	str	r3, [sp, #260]	; 0x104
 8020bd8:	f10a 0502 	add.w	r5, sl, #2
 8020bdc:	46aa      	mov	sl, r5
 8020bde:	f815 1b01 	ldrb.w	r1, [r5], #1
 8020be2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8020be6:	2a09      	cmp	r2, #9
 8020be8:	d922      	bls.n	8020c30 <__ssvfiscanf_r+0xf4>
 8020bea:	2203      	movs	r2, #3
 8020bec:	4879      	ldr	r0, [pc, #484]	; (8020dd4 <__ssvfiscanf_r+0x298>)
 8020bee:	f7df fb3f 	bl	8000270 <memchr>
 8020bf2:	b138      	cbz	r0, 8020c04 <__ssvfiscanf_r+0xc8>
 8020bf4:	eba0 0309 	sub.w	r3, r0, r9
 8020bf8:	2001      	movs	r0, #1
 8020bfa:	4098      	lsls	r0, r3
 8020bfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020bfe:	4318      	orrs	r0, r3
 8020c00:	9041      	str	r0, [sp, #260]	; 0x104
 8020c02:	46aa      	mov	sl, r5
 8020c04:	f89a 3000 	ldrb.w	r3, [sl]
 8020c08:	2b67      	cmp	r3, #103	; 0x67
 8020c0a:	f10a 0501 	add.w	r5, sl, #1
 8020c0e:	d82b      	bhi.n	8020c68 <__ssvfiscanf_r+0x12c>
 8020c10:	2b65      	cmp	r3, #101	; 0x65
 8020c12:	f080 809f 	bcs.w	8020d54 <__ssvfiscanf_r+0x218>
 8020c16:	2b47      	cmp	r3, #71	; 0x47
 8020c18:	d810      	bhi.n	8020c3c <__ssvfiscanf_r+0x100>
 8020c1a:	2b45      	cmp	r3, #69	; 0x45
 8020c1c:	f080 809a 	bcs.w	8020d54 <__ssvfiscanf_r+0x218>
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	d06c      	beq.n	8020cfe <__ssvfiscanf_r+0x1c2>
 8020c24:	2b25      	cmp	r3, #37	; 0x25
 8020c26:	d051      	beq.n	8020ccc <__ssvfiscanf_r+0x190>
 8020c28:	2303      	movs	r3, #3
 8020c2a:	9347      	str	r3, [sp, #284]	; 0x11c
 8020c2c:	9742      	str	r7, [sp, #264]	; 0x108
 8020c2e:	e027      	b.n	8020c80 <__ssvfiscanf_r+0x144>
 8020c30:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020c32:	fb07 1303 	mla	r3, r7, r3, r1
 8020c36:	3b30      	subs	r3, #48	; 0x30
 8020c38:	9343      	str	r3, [sp, #268]	; 0x10c
 8020c3a:	e7cf      	b.n	8020bdc <__ssvfiscanf_r+0xa0>
 8020c3c:	2b5b      	cmp	r3, #91	; 0x5b
 8020c3e:	d06a      	beq.n	8020d16 <__ssvfiscanf_r+0x1da>
 8020c40:	d80c      	bhi.n	8020c5c <__ssvfiscanf_r+0x120>
 8020c42:	2b58      	cmp	r3, #88	; 0x58
 8020c44:	d1f0      	bne.n	8020c28 <__ssvfiscanf_r+0xec>
 8020c46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020c4c:	9241      	str	r2, [sp, #260]	; 0x104
 8020c4e:	2210      	movs	r2, #16
 8020c50:	9242      	str	r2, [sp, #264]	; 0x108
 8020c52:	2b6e      	cmp	r3, #110	; 0x6e
 8020c54:	bf8c      	ite	hi
 8020c56:	2304      	movhi	r3, #4
 8020c58:	2303      	movls	r3, #3
 8020c5a:	e010      	b.n	8020c7e <__ssvfiscanf_r+0x142>
 8020c5c:	2b63      	cmp	r3, #99	; 0x63
 8020c5e:	d065      	beq.n	8020d2c <__ssvfiscanf_r+0x1f0>
 8020c60:	2b64      	cmp	r3, #100	; 0x64
 8020c62:	d1e1      	bne.n	8020c28 <__ssvfiscanf_r+0xec>
 8020c64:	9742      	str	r7, [sp, #264]	; 0x108
 8020c66:	e7f4      	b.n	8020c52 <__ssvfiscanf_r+0x116>
 8020c68:	2b70      	cmp	r3, #112	; 0x70
 8020c6a:	d04b      	beq.n	8020d04 <__ssvfiscanf_r+0x1c8>
 8020c6c:	d826      	bhi.n	8020cbc <__ssvfiscanf_r+0x180>
 8020c6e:	2b6e      	cmp	r3, #110	; 0x6e
 8020c70:	d062      	beq.n	8020d38 <__ssvfiscanf_r+0x1fc>
 8020c72:	d84c      	bhi.n	8020d0e <__ssvfiscanf_r+0x1d2>
 8020c74:	2b69      	cmp	r3, #105	; 0x69
 8020c76:	d1d7      	bne.n	8020c28 <__ssvfiscanf_r+0xec>
 8020c78:	2300      	movs	r3, #0
 8020c7a:	9342      	str	r3, [sp, #264]	; 0x108
 8020c7c:	2303      	movs	r3, #3
 8020c7e:	9347      	str	r3, [sp, #284]	; 0x11c
 8020c80:	6863      	ldr	r3, [r4, #4]
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	dd68      	ble.n	8020d58 <__ssvfiscanf_r+0x21c>
 8020c86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020c88:	0659      	lsls	r1, r3, #25
 8020c8a:	d407      	bmi.n	8020c9c <__ssvfiscanf_r+0x160>
 8020c8c:	f7ff f9f4 	bl	8020078 <__locale_ctype_ptr>
 8020c90:	6823      	ldr	r3, [r4, #0]
 8020c92:	781a      	ldrb	r2, [r3, #0]
 8020c94:	4410      	add	r0, r2
 8020c96:	7842      	ldrb	r2, [r0, #1]
 8020c98:	0712      	lsls	r2, r2, #28
 8020c9a:	d464      	bmi.n	8020d66 <__ssvfiscanf_r+0x22a>
 8020c9c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020c9e:	2b02      	cmp	r3, #2
 8020ca0:	dc73      	bgt.n	8020d8a <__ssvfiscanf_r+0x24e>
 8020ca2:	466b      	mov	r3, sp
 8020ca4:	4622      	mov	r2, r4
 8020ca6:	a941      	add	r1, sp, #260	; 0x104
 8020ca8:	4630      	mov	r0, r6
 8020caa:	f000 f9d7 	bl	802105c <_scanf_chars>
 8020cae:	2801      	cmp	r0, #1
 8020cb0:	f000 8089 	beq.w	8020dc6 <__ssvfiscanf_r+0x28a>
 8020cb4:	2802      	cmp	r0, #2
 8020cb6:	f47f af71 	bne.w	8020b9c <__ssvfiscanf_r+0x60>
 8020cba:	e01d      	b.n	8020cf8 <__ssvfiscanf_r+0x1bc>
 8020cbc:	2b75      	cmp	r3, #117	; 0x75
 8020cbe:	d0d1      	beq.n	8020c64 <__ssvfiscanf_r+0x128>
 8020cc0:	2b78      	cmp	r3, #120	; 0x78
 8020cc2:	d0c0      	beq.n	8020c46 <__ssvfiscanf_r+0x10a>
 8020cc4:	2b73      	cmp	r3, #115	; 0x73
 8020cc6:	d1af      	bne.n	8020c28 <__ssvfiscanf_r+0xec>
 8020cc8:	2302      	movs	r3, #2
 8020cca:	e7d8      	b.n	8020c7e <__ssvfiscanf_r+0x142>
 8020ccc:	6863      	ldr	r3, [r4, #4]
 8020cce:	2b00      	cmp	r3, #0
 8020cd0:	dd0c      	ble.n	8020cec <__ssvfiscanf_r+0x1b0>
 8020cd2:	6823      	ldr	r3, [r4, #0]
 8020cd4:	781a      	ldrb	r2, [r3, #0]
 8020cd6:	455a      	cmp	r2, fp
 8020cd8:	d175      	bne.n	8020dc6 <__ssvfiscanf_r+0x28a>
 8020cda:	3301      	adds	r3, #1
 8020cdc:	6862      	ldr	r2, [r4, #4]
 8020cde:	6023      	str	r3, [r4, #0]
 8020ce0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020ce2:	3a01      	subs	r2, #1
 8020ce4:	3301      	adds	r3, #1
 8020ce6:	6062      	str	r2, [r4, #4]
 8020ce8:	9345      	str	r3, [sp, #276]	; 0x114
 8020cea:	e757      	b.n	8020b9c <__ssvfiscanf_r+0x60>
 8020cec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020cee:	4621      	mov	r1, r4
 8020cf0:	4630      	mov	r0, r6
 8020cf2:	4798      	blx	r3
 8020cf4:	2800      	cmp	r0, #0
 8020cf6:	d0ec      	beq.n	8020cd2 <__ssvfiscanf_r+0x196>
 8020cf8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020cfa:	2800      	cmp	r0, #0
 8020cfc:	d159      	bne.n	8020db2 <__ssvfiscanf_r+0x276>
 8020cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8020d02:	e05c      	b.n	8020dbe <__ssvfiscanf_r+0x282>
 8020d04:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020d06:	f042 0220 	orr.w	r2, r2, #32
 8020d0a:	9241      	str	r2, [sp, #260]	; 0x104
 8020d0c:	e79b      	b.n	8020c46 <__ssvfiscanf_r+0x10a>
 8020d0e:	2308      	movs	r3, #8
 8020d10:	9342      	str	r3, [sp, #264]	; 0x108
 8020d12:	2304      	movs	r3, #4
 8020d14:	e7b3      	b.n	8020c7e <__ssvfiscanf_r+0x142>
 8020d16:	4629      	mov	r1, r5
 8020d18:	4640      	mov	r0, r8
 8020d1a:	f000 fb3f 	bl	802139c <__sccl>
 8020d1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d24:	9341      	str	r3, [sp, #260]	; 0x104
 8020d26:	4605      	mov	r5, r0
 8020d28:	2301      	movs	r3, #1
 8020d2a:	e7a8      	b.n	8020c7e <__ssvfiscanf_r+0x142>
 8020d2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d32:	9341      	str	r3, [sp, #260]	; 0x104
 8020d34:	2300      	movs	r3, #0
 8020d36:	e7a2      	b.n	8020c7e <__ssvfiscanf_r+0x142>
 8020d38:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020d3a:	06c3      	lsls	r3, r0, #27
 8020d3c:	f53f af2e 	bmi.w	8020b9c <__ssvfiscanf_r+0x60>
 8020d40:	9b00      	ldr	r3, [sp, #0]
 8020d42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020d44:	1d19      	adds	r1, r3, #4
 8020d46:	9100      	str	r1, [sp, #0]
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	07c0      	lsls	r0, r0, #31
 8020d4c:	bf4c      	ite	mi
 8020d4e:	801a      	strhmi	r2, [r3, #0]
 8020d50:	601a      	strpl	r2, [r3, #0]
 8020d52:	e723      	b.n	8020b9c <__ssvfiscanf_r+0x60>
 8020d54:	2305      	movs	r3, #5
 8020d56:	e792      	b.n	8020c7e <__ssvfiscanf_r+0x142>
 8020d58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020d5a:	4621      	mov	r1, r4
 8020d5c:	4630      	mov	r0, r6
 8020d5e:	4798      	blx	r3
 8020d60:	2800      	cmp	r0, #0
 8020d62:	d090      	beq.n	8020c86 <__ssvfiscanf_r+0x14a>
 8020d64:	e7c8      	b.n	8020cf8 <__ssvfiscanf_r+0x1bc>
 8020d66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020d68:	3201      	adds	r2, #1
 8020d6a:	9245      	str	r2, [sp, #276]	; 0x114
 8020d6c:	6862      	ldr	r2, [r4, #4]
 8020d6e:	3a01      	subs	r2, #1
 8020d70:	2a00      	cmp	r2, #0
 8020d72:	6062      	str	r2, [r4, #4]
 8020d74:	dd02      	ble.n	8020d7c <__ssvfiscanf_r+0x240>
 8020d76:	3301      	adds	r3, #1
 8020d78:	6023      	str	r3, [r4, #0]
 8020d7a:	e787      	b.n	8020c8c <__ssvfiscanf_r+0x150>
 8020d7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020d7e:	4621      	mov	r1, r4
 8020d80:	4630      	mov	r0, r6
 8020d82:	4798      	blx	r3
 8020d84:	2800      	cmp	r0, #0
 8020d86:	d081      	beq.n	8020c8c <__ssvfiscanf_r+0x150>
 8020d88:	e7b6      	b.n	8020cf8 <__ssvfiscanf_r+0x1bc>
 8020d8a:	2b04      	cmp	r3, #4
 8020d8c:	dc06      	bgt.n	8020d9c <__ssvfiscanf_r+0x260>
 8020d8e:	466b      	mov	r3, sp
 8020d90:	4622      	mov	r2, r4
 8020d92:	a941      	add	r1, sp, #260	; 0x104
 8020d94:	4630      	mov	r0, r6
 8020d96:	f000 f9c5 	bl	8021124 <_scanf_i>
 8020d9a:	e788      	b.n	8020cae <__ssvfiscanf_r+0x172>
 8020d9c:	4b0e      	ldr	r3, [pc, #56]	; (8020dd8 <__ssvfiscanf_r+0x29c>)
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	f43f aefc 	beq.w	8020b9c <__ssvfiscanf_r+0x60>
 8020da4:	466b      	mov	r3, sp
 8020da6:	4622      	mov	r2, r4
 8020da8:	a941      	add	r1, sp, #260	; 0x104
 8020daa:	4630      	mov	r0, r6
 8020dac:	f3af 8000 	nop.w
 8020db0:	e77d      	b.n	8020cae <__ssvfiscanf_r+0x172>
 8020db2:	89a3      	ldrh	r3, [r4, #12]
 8020db4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020db8:	bf18      	it	ne
 8020dba:	f04f 30ff 	movne.w	r0, #4294967295
 8020dbe:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8020dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dc6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020dc8:	e7f9      	b.n	8020dbe <__ssvfiscanf_r+0x282>
 8020dca:	bf00      	nop
 8020dcc:	08020a89 	.word	0x08020a89
 8020dd0:	08020b03 	.word	0x08020b03
 8020dd4:	0803c062 	.word	0x0803c062
 8020dd8:	00000000 	.word	0x00000000

08020ddc <__sfputc_r>:
 8020ddc:	6893      	ldr	r3, [r2, #8]
 8020dde:	3b01      	subs	r3, #1
 8020de0:	2b00      	cmp	r3, #0
 8020de2:	b410      	push	{r4}
 8020de4:	6093      	str	r3, [r2, #8]
 8020de6:	da08      	bge.n	8020dfa <__sfputc_r+0x1e>
 8020de8:	6994      	ldr	r4, [r2, #24]
 8020dea:	42a3      	cmp	r3, r4
 8020dec:	db01      	blt.n	8020df2 <__sfputc_r+0x16>
 8020dee:	290a      	cmp	r1, #10
 8020df0:	d103      	bne.n	8020dfa <__sfputc_r+0x1e>
 8020df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020df6:	f7fd bfc1 	b.w	801ed7c <__swbuf_r>
 8020dfa:	6813      	ldr	r3, [r2, #0]
 8020dfc:	1c58      	adds	r0, r3, #1
 8020dfe:	6010      	str	r0, [r2, #0]
 8020e00:	7019      	strb	r1, [r3, #0]
 8020e02:	4608      	mov	r0, r1
 8020e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020e08:	4770      	bx	lr

08020e0a <__sfputs_r>:
 8020e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e0c:	4606      	mov	r6, r0
 8020e0e:	460f      	mov	r7, r1
 8020e10:	4614      	mov	r4, r2
 8020e12:	18d5      	adds	r5, r2, r3
 8020e14:	42ac      	cmp	r4, r5
 8020e16:	d101      	bne.n	8020e1c <__sfputs_r+0x12>
 8020e18:	2000      	movs	r0, #0
 8020e1a:	e007      	b.n	8020e2c <__sfputs_r+0x22>
 8020e1c:	463a      	mov	r2, r7
 8020e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e22:	4630      	mov	r0, r6
 8020e24:	f7ff ffda 	bl	8020ddc <__sfputc_r>
 8020e28:	1c43      	adds	r3, r0, #1
 8020e2a:	d1f3      	bne.n	8020e14 <__sfputs_r+0xa>
 8020e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020e30 <_vfiprintf_r>:
 8020e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e34:	460c      	mov	r4, r1
 8020e36:	b09d      	sub	sp, #116	; 0x74
 8020e38:	4617      	mov	r7, r2
 8020e3a:	461d      	mov	r5, r3
 8020e3c:	4606      	mov	r6, r0
 8020e3e:	b118      	cbz	r0, 8020e48 <_vfiprintf_r+0x18>
 8020e40:	6983      	ldr	r3, [r0, #24]
 8020e42:	b90b      	cbnz	r3, 8020e48 <_vfiprintf_r+0x18>
 8020e44:	f7fe ff94 	bl	801fd70 <__sinit>
 8020e48:	4b7c      	ldr	r3, [pc, #496]	; (802103c <_vfiprintf_r+0x20c>)
 8020e4a:	429c      	cmp	r4, r3
 8020e4c:	d158      	bne.n	8020f00 <_vfiprintf_r+0xd0>
 8020e4e:	6874      	ldr	r4, [r6, #4]
 8020e50:	89a3      	ldrh	r3, [r4, #12]
 8020e52:	0718      	lsls	r0, r3, #28
 8020e54:	d55e      	bpl.n	8020f14 <_vfiprintf_r+0xe4>
 8020e56:	6923      	ldr	r3, [r4, #16]
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	d05b      	beq.n	8020f14 <_vfiprintf_r+0xe4>
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8020e60:	2320      	movs	r3, #32
 8020e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020e66:	2330      	movs	r3, #48	; 0x30
 8020e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020e6c:	9503      	str	r5, [sp, #12]
 8020e6e:	f04f 0b01 	mov.w	fp, #1
 8020e72:	46b8      	mov	r8, r7
 8020e74:	4645      	mov	r5, r8
 8020e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020e7a:	b10b      	cbz	r3, 8020e80 <_vfiprintf_r+0x50>
 8020e7c:	2b25      	cmp	r3, #37	; 0x25
 8020e7e:	d154      	bne.n	8020f2a <_vfiprintf_r+0xfa>
 8020e80:	ebb8 0a07 	subs.w	sl, r8, r7
 8020e84:	d00b      	beq.n	8020e9e <_vfiprintf_r+0x6e>
 8020e86:	4653      	mov	r3, sl
 8020e88:	463a      	mov	r2, r7
 8020e8a:	4621      	mov	r1, r4
 8020e8c:	4630      	mov	r0, r6
 8020e8e:	f7ff ffbc 	bl	8020e0a <__sfputs_r>
 8020e92:	3001      	adds	r0, #1
 8020e94:	f000 80c2 	beq.w	802101c <_vfiprintf_r+0x1ec>
 8020e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e9a:	4453      	add	r3, sl
 8020e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8020e9e:	f898 3000 	ldrb.w	r3, [r8]
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	f000 80ba 	beq.w	802101c <_vfiprintf_r+0x1ec>
 8020ea8:	2300      	movs	r3, #0
 8020eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8020eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020eb2:	9304      	str	r3, [sp, #16]
 8020eb4:	9307      	str	r3, [sp, #28]
 8020eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020eba:	931a      	str	r3, [sp, #104]	; 0x68
 8020ebc:	46a8      	mov	r8, r5
 8020ebe:	2205      	movs	r2, #5
 8020ec0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8020ec4:	485e      	ldr	r0, [pc, #376]	; (8021040 <_vfiprintf_r+0x210>)
 8020ec6:	f7df f9d3 	bl	8000270 <memchr>
 8020eca:	9b04      	ldr	r3, [sp, #16]
 8020ecc:	bb78      	cbnz	r0, 8020f2e <_vfiprintf_r+0xfe>
 8020ece:	06d9      	lsls	r1, r3, #27
 8020ed0:	bf44      	itt	mi
 8020ed2:	2220      	movmi	r2, #32
 8020ed4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020ed8:	071a      	lsls	r2, r3, #28
 8020eda:	bf44      	itt	mi
 8020edc:	222b      	movmi	r2, #43	; 0x2b
 8020ede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020ee2:	782a      	ldrb	r2, [r5, #0]
 8020ee4:	2a2a      	cmp	r2, #42	; 0x2a
 8020ee6:	d02a      	beq.n	8020f3e <_vfiprintf_r+0x10e>
 8020ee8:	9a07      	ldr	r2, [sp, #28]
 8020eea:	46a8      	mov	r8, r5
 8020eec:	2000      	movs	r0, #0
 8020eee:	250a      	movs	r5, #10
 8020ef0:	4641      	mov	r1, r8
 8020ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020ef6:	3b30      	subs	r3, #48	; 0x30
 8020ef8:	2b09      	cmp	r3, #9
 8020efa:	d969      	bls.n	8020fd0 <_vfiprintf_r+0x1a0>
 8020efc:	b360      	cbz	r0, 8020f58 <_vfiprintf_r+0x128>
 8020efe:	e024      	b.n	8020f4a <_vfiprintf_r+0x11a>
 8020f00:	4b50      	ldr	r3, [pc, #320]	; (8021044 <_vfiprintf_r+0x214>)
 8020f02:	429c      	cmp	r4, r3
 8020f04:	d101      	bne.n	8020f0a <_vfiprintf_r+0xda>
 8020f06:	68b4      	ldr	r4, [r6, #8]
 8020f08:	e7a2      	b.n	8020e50 <_vfiprintf_r+0x20>
 8020f0a:	4b4f      	ldr	r3, [pc, #316]	; (8021048 <_vfiprintf_r+0x218>)
 8020f0c:	429c      	cmp	r4, r3
 8020f0e:	bf08      	it	eq
 8020f10:	68f4      	ldreq	r4, [r6, #12]
 8020f12:	e79d      	b.n	8020e50 <_vfiprintf_r+0x20>
 8020f14:	4621      	mov	r1, r4
 8020f16:	4630      	mov	r0, r6
 8020f18:	f7fd ff94 	bl	801ee44 <__swsetup_r>
 8020f1c:	2800      	cmp	r0, #0
 8020f1e:	d09d      	beq.n	8020e5c <_vfiprintf_r+0x2c>
 8020f20:	f04f 30ff 	mov.w	r0, #4294967295
 8020f24:	b01d      	add	sp, #116	; 0x74
 8020f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f2a:	46a8      	mov	r8, r5
 8020f2c:	e7a2      	b.n	8020e74 <_vfiprintf_r+0x44>
 8020f2e:	4a44      	ldr	r2, [pc, #272]	; (8021040 <_vfiprintf_r+0x210>)
 8020f30:	1a80      	subs	r0, r0, r2
 8020f32:	fa0b f000 	lsl.w	r0, fp, r0
 8020f36:	4318      	orrs	r0, r3
 8020f38:	9004      	str	r0, [sp, #16]
 8020f3a:	4645      	mov	r5, r8
 8020f3c:	e7be      	b.n	8020ebc <_vfiprintf_r+0x8c>
 8020f3e:	9a03      	ldr	r2, [sp, #12]
 8020f40:	1d11      	adds	r1, r2, #4
 8020f42:	6812      	ldr	r2, [r2, #0]
 8020f44:	9103      	str	r1, [sp, #12]
 8020f46:	2a00      	cmp	r2, #0
 8020f48:	db01      	blt.n	8020f4e <_vfiprintf_r+0x11e>
 8020f4a:	9207      	str	r2, [sp, #28]
 8020f4c:	e004      	b.n	8020f58 <_vfiprintf_r+0x128>
 8020f4e:	4252      	negs	r2, r2
 8020f50:	f043 0302 	orr.w	r3, r3, #2
 8020f54:	9207      	str	r2, [sp, #28]
 8020f56:	9304      	str	r3, [sp, #16]
 8020f58:	f898 3000 	ldrb.w	r3, [r8]
 8020f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8020f5e:	d10e      	bne.n	8020f7e <_vfiprintf_r+0x14e>
 8020f60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8020f64:	2b2a      	cmp	r3, #42	; 0x2a
 8020f66:	d138      	bne.n	8020fda <_vfiprintf_r+0x1aa>
 8020f68:	9b03      	ldr	r3, [sp, #12]
 8020f6a:	1d1a      	adds	r2, r3, #4
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	9203      	str	r2, [sp, #12]
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	bfb8      	it	lt
 8020f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8020f78:	f108 0802 	add.w	r8, r8, #2
 8020f7c:	9305      	str	r3, [sp, #20]
 8020f7e:	4d33      	ldr	r5, [pc, #204]	; (802104c <_vfiprintf_r+0x21c>)
 8020f80:	f898 1000 	ldrb.w	r1, [r8]
 8020f84:	2203      	movs	r2, #3
 8020f86:	4628      	mov	r0, r5
 8020f88:	f7df f972 	bl	8000270 <memchr>
 8020f8c:	b140      	cbz	r0, 8020fa0 <_vfiprintf_r+0x170>
 8020f8e:	2340      	movs	r3, #64	; 0x40
 8020f90:	1b40      	subs	r0, r0, r5
 8020f92:	fa03 f000 	lsl.w	r0, r3, r0
 8020f96:	9b04      	ldr	r3, [sp, #16]
 8020f98:	4303      	orrs	r3, r0
 8020f9a:	f108 0801 	add.w	r8, r8, #1
 8020f9e:	9304      	str	r3, [sp, #16]
 8020fa0:	f898 1000 	ldrb.w	r1, [r8]
 8020fa4:	482a      	ldr	r0, [pc, #168]	; (8021050 <_vfiprintf_r+0x220>)
 8020fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020faa:	2206      	movs	r2, #6
 8020fac:	f108 0701 	add.w	r7, r8, #1
 8020fb0:	f7df f95e 	bl	8000270 <memchr>
 8020fb4:	2800      	cmp	r0, #0
 8020fb6:	d037      	beq.n	8021028 <_vfiprintf_r+0x1f8>
 8020fb8:	4b26      	ldr	r3, [pc, #152]	; (8021054 <_vfiprintf_r+0x224>)
 8020fba:	bb1b      	cbnz	r3, 8021004 <_vfiprintf_r+0x1d4>
 8020fbc:	9b03      	ldr	r3, [sp, #12]
 8020fbe:	3307      	adds	r3, #7
 8020fc0:	f023 0307 	bic.w	r3, r3, #7
 8020fc4:	3308      	adds	r3, #8
 8020fc6:	9303      	str	r3, [sp, #12]
 8020fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fca:	444b      	add	r3, r9
 8020fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8020fce:	e750      	b.n	8020e72 <_vfiprintf_r+0x42>
 8020fd0:	fb05 3202 	mla	r2, r5, r2, r3
 8020fd4:	2001      	movs	r0, #1
 8020fd6:	4688      	mov	r8, r1
 8020fd8:	e78a      	b.n	8020ef0 <_vfiprintf_r+0xc0>
 8020fda:	2300      	movs	r3, #0
 8020fdc:	f108 0801 	add.w	r8, r8, #1
 8020fe0:	9305      	str	r3, [sp, #20]
 8020fe2:	4619      	mov	r1, r3
 8020fe4:	250a      	movs	r5, #10
 8020fe6:	4640      	mov	r0, r8
 8020fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020fec:	3a30      	subs	r2, #48	; 0x30
 8020fee:	2a09      	cmp	r2, #9
 8020ff0:	d903      	bls.n	8020ffa <_vfiprintf_r+0x1ca>
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d0c3      	beq.n	8020f7e <_vfiprintf_r+0x14e>
 8020ff6:	9105      	str	r1, [sp, #20]
 8020ff8:	e7c1      	b.n	8020f7e <_vfiprintf_r+0x14e>
 8020ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8020ffe:	2301      	movs	r3, #1
 8021000:	4680      	mov	r8, r0
 8021002:	e7f0      	b.n	8020fe6 <_vfiprintf_r+0x1b6>
 8021004:	ab03      	add	r3, sp, #12
 8021006:	9300      	str	r3, [sp, #0]
 8021008:	4622      	mov	r2, r4
 802100a:	4b13      	ldr	r3, [pc, #76]	; (8021058 <_vfiprintf_r+0x228>)
 802100c:	a904      	add	r1, sp, #16
 802100e:	4630      	mov	r0, r6
 8021010:	f7fc fe36 	bl	801dc80 <_printf_float>
 8021014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8021018:	4681      	mov	r9, r0
 802101a:	d1d5      	bne.n	8020fc8 <_vfiprintf_r+0x198>
 802101c:	89a3      	ldrh	r3, [r4, #12]
 802101e:	065b      	lsls	r3, r3, #25
 8021020:	f53f af7e 	bmi.w	8020f20 <_vfiprintf_r+0xf0>
 8021024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021026:	e77d      	b.n	8020f24 <_vfiprintf_r+0xf4>
 8021028:	ab03      	add	r3, sp, #12
 802102a:	9300      	str	r3, [sp, #0]
 802102c:	4622      	mov	r2, r4
 802102e:	4b0a      	ldr	r3, [pc, #40]	; (8021058 <_vfiprintf_r+0x228>)
 8021030:	a904      	add	r1, sp, #16
 8021032:	4630      	mov	r0, r6
 8021034:	f7fd f8c6 	bl	801e1c4 <_printf_i>
 8021038:	e7ec      	b.n	8021014 <_vfiprintf_r+0x1e4>
 802103a:	bf00      	nop
 802103c:	0803bf10 	.word	0x0803bf10
 8021040:	0803c05c 	.word	0x0803c05c
 8021044:	0803bf30 	.word	0x0803bf30
 8021048:	0803bef0 	.word	0x0803bef0
 802104c:	0803c062 	.word	0x0803c062
 8021050:	0803c066 	.word	0x0803c066
 8021054:	0801dc81 	.word	0x0801dc81
 8021058:	08020e0b 	.word	0x08020e0b

0802105c <_scanf_chars>:
 802105c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021060:	4615      	mov	r5, r2
 8021062:	688a      	ldr	r2, [r1, #8]
 8021064:	4680      	mov	r8, r0
 8021066:	460c      	mov	r4, r1
 8021068:	b932      	cbnz	r2, 8021078 <_scanf_chars+0x1c>
 802106a:	698a      	ldr	r2, [r1, #24]
 802106c:	2a00      	cmp	r2, #0
 802106e:	bf14      	ite	ne
 8021070:	f04f 32ff 	movne.w	r2, #4294967295
 8021074:	2201      	moveq	r2, #1
 8021076:	608a      	str	r2, [r1, #8]
 8021078:	6822      	ldr	r2, [r4, #0]
 802107a:	06d1      	lsls	r1, r2, #27
 802107c:	bf5f      	itttt	pl
 802107e:	681a      	ldrpl	r2, [r3, #0]
 8021080:	1d11      	addpl	r1, r2, #4
 8021082:	6019      	strpl	r1, [r3, #0]
 8021084:	6817      	ldrpl	r7, [r2, #0]
 8021086:	2600      	movs	r6, #0
 8021088:	69a3      	ldr	r3, [r4, #24]
 802108a:	b1db      	cbz	r3, 80210c4 <_scanf_chars+0x68>
 802108c:	2b01      	cmp	r3, #1
 802108e:	d107      	bne.n	80210a0 <_scanf_chars+0x44>
 8021090:	682b      	ldr	r3, [r5, #0]
 8021092:	6962      	ldr	r2, [r4, #20]
 8021094:	781b      	ldrb	r3, [r3, #0]
 8021096:	5cd3      	ldrb	r3, [r2, r3]
 8021098:	b9a3      	cbnz	r3, 80210c4 <_scanf_chars+0x68>
 802109a:	2e00      	cmp	r6, #0
 802109c:	d132      	bne.n	8021104 <_scanf_chars+0xa8>
 802109e:	e006      	b.n	80210ae <_scanf_chars+0x52>
 80210a0:	2b02      	cmp	r3, #2
 80210a2:	d007      	beq.n	80210b4 <_scanf_chars+0x58>
 80210a4:	2e00      	cmp	r6, #0
 80210a6:	d12d      	bne.n	8021104 <_scanf_chars+0xa8>
 80210a8:	69a3      	ldr	r3, [r4, #24]
 80210aa:	2b01      	cmp	r3, #1
 80210ac:	d12a      	bne.n	8021104 <_scanf_chars+0xa8>
 80210ae:	2001      	movs	r0, #1
 80210b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210b4:	f7fe ffe0 	bl	8020078 <__locale_ctype_ptr>
 80210b8:	682b      	ldr	r3, [r5, #0]
 80210ba:	781b      	ldrb	r3, [r3, #0]
 80210bc:	4418      	add	r0, r3
 80210be:	7843      	ldrb	r3, [r0, #1]
 80210c0:	071b      	lsls	r3, r3, #28
 80210c2:	d4ef      	bmi.n	80210a4 <_scanf_chars+0x48>
 80210c4:	6823      	ldr	r3, [r4, #0]
 80210c6:	06da      	lsls	r2, r3, #27
 80210c8:	bf5e      	ittt	pl
 80210ca:	682b      	ldrpl	r3, [r5, #0]
 80210cc:	781b      	ldrbpl	r3, [r3, #0]
 80210ce:	703b      	strbpl	r3, [r7, #0]
 80210d0:	682a      	ldr	r2, [r5, #0]
 80210d2:	686b      	ldr	r3, [r5, #4]
 80210d4:	f102 0201 	add.w	r2, r2, #1
 80210d8:	602a      	str	r2, [r5, #0]
 80210da:	68a2      	ldr	r2, [r4, #8]
 80210dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80210e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80210e4:	606b      	str	r3, [r5, #4]
 80210e6:	f106 0601 	add.w	r6, r6, #1
 80210ea:	bf58      	it	pl
 80210ec:	3701      	addpl	r7, #1
 80210ee:	60a2      	str	r2, [r4, #8]
 80210f0:	b142      	cbz	r2, 8021104 <_scanf_chars+0xa8>
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	dcc8      	bgt.n	8021088 <_scanf_chars+0x2c>
 80210f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80210fa:	4629      	mov	r1, r5
 80210fc:	4640      	mov	r0, r8
 80210fe:	4798      	blx	r3
 8021100:	2800      	cmp	r0, #0
 8021102:	d0c1      	beq.n	8021088 <_scanf_chars+0x2c>
 8021104:	6823      	ldr	r3, [r4, #0]
 8021106:	f013 0310 	ands.w	r3, r3, #16
 802110a:	d105      	bne.n	8021118 <_scanf_chars+0xbc>
 802110c:	68e2      	ldr	r2, [r4, #12]
 802110e:	3201      	adds	r2, #1
 8021110:	60e2      	str	r2, [r4, #12]
 8021112:	69a2      	ldr	r2, [r4, #24]
 8021114:	b102      	cbz	r2, 8021118 <_scanf_chars+0xbc>
 8021116:	703b      	strb	r3, [r7, #0]
 8021118:	6923      	ldr	r3, [r4, #16]
 802111a:	441e      	add	r6, r3
 802111c:	6126      	str	r6, [r4, #16]
 802111e:	2000      	movs	r0, #0
 8021120:	e7c6      	b.n	80210b0 <_scanf_chars+0x54>
	...

08021124 <_scanf_i>:
 8021124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021128:	469a      	mov	sl, r3
 802112a:	4b74      	ldr	r3, [pc, #464]	; (80212fc <_scanf_i+0x1d8>)
 802112c:	460c      	mov	r4, r1
 802112e:	4683      	mov	fp, r0
 8021130:	4616      	mov	r6, r2
 8021132:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021136:	b087      	sub	sp, #28
 8021138:	ab03      	add	r3, sp, #12
 802113a:	68a7      	ldr	r7, [r4, #8]
 802113c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021140:	4b6f      	ldr	r3, [pc, #444]	; (8021300 <_scanf_i+0x1dc>)
 8021142:	69a1      	ldr	r1, [r4, #24]
 8021144:	4a6f      	ldr	r2, [pc, #444]	; (8021304 <_scanf_i+0x1e0>)
 8021146:	2903      	cmp	r1, #3
 8021148:	bf08      	it	eq
 802114a:	461a      	moveq	r2, r3
 802114c:	1e7b      	subs	r3, r7, #1
 802114e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8021152:	bf84      	itt	hi
 8021154:	f240 135d 	movwhi	r3, #349	; 0x15d
 8021158:	60a3      	strhi	r3, [r4, #8]
 802115a:	6823      	ldr	r3, [r4, #0]
 802115c:	9200      	str	r2, [sp, #0]
 802115e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8021162:	bf88      	it	hi
 8021164:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8021168:	f104 091c 	add.w	r9, r4, #28
 802116c:	6023      	str	r3, [r4, #0]
 802116e:	bf8c      	ite	hi
 8021170:	197f      	addhi	r7, r7, r5
 8021172:	2700      	movls	r7, #0
 8021174:	464b      	mov	r3, r9
 8021176:	f04f 0800 	mov.w	r8, #0
 802117a:	9301      	str	r3, [sp, #4]
 802117c:	6831      	ldr	r1, [r6, #0]
 802117e:	ab03      	add	r3, sp, #12
 8021180:	2202      	movs	r2, #2
 8021182:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8021186:	7809      	ldrb	r1, [r1, #0]
 8021188:	f7df f872 	bl	8000270 <memchr>
 802118c:	9b01      	ldr	r3, [sp, #4]
 802118e:	b330      	cbz	r0, 80211de <_scanf_i+0xba>
 8021190:	f1b8 0f01 	cmp.w	r8, #1
 8021194:	d15a      	bne.n	802124c <_scanf_i+0x128>
 8021196:	6862      	ldr	r2, [r4, #4]
 8021198:	b92a      	cbnz	r2, 80211a6 <_scanf_i+0x82>
 802119a:	6822      	ldr	r2, [r4, #0]
 802119c:	2108      	movs	r1, #8
 802119e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80211a2:	6061      	str	r1, [r4, #4]
 80211a4:	6022      	str	r2, [r4, #0]
 80211a6:	6822      	ldr	r2, [r4, #0]
 80211a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80211ac:	6022      	str	r2, [r4, #0]
 80211ae:	68a2      	ldr	r2, [r4, #8]
 80211b0:	1e51      	subs	r1, r2, #1
 80211b2:	60a1      	str	r1, [r4, #8]
 80211b4:	b19a      	cbz	r2, 80211de <_scanf_i+0xba>
 80211b6:	6832      	ldr	r2, [r6, #0]
 80211b8:	1c51      	adds	r1, r2, #1
 80211ba:	6031      	str	r1, [r6, #0]
 80211bc:	7812      	ldrb	r2, [r2, #0]
 80211be:	701a      	strb	r2, [r3, #0]
 80211c0:	1c5d      	adds	r5, r3, #1
 80211c2:	6873      	ldr	r3, [r6, #4]
 80211c4:	3b01      	subs	r3, #1
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	6073      	str	r3, [r6, #4]
 80211ca:	dc07      	bgt.n	80211dc <_scanf_i+0xb8>
 80211cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80211d0:	4631      	mov	r1, r6
 80211d2:	4658      	mov	r0, fp
 80211d4:	4798      	blx	r3
 80211d6:	2800      	cmp	r0, #0
 80211d8:	f040 8086 	bne.w	80212e8 <_scanf_i+0x1c4>
 80211dc:	462b      	mov	r3, r5
 80211de:	f108 0801 	add.w	r8, r8, #1
 80211e2:	f1b8 0f03 	cmp.w	r8, #3
 80211e6:	d1c8      	bne.n	802117a <_scanf_i+0x56>
 80211e8:	6862      	ldr	r2, [r4, #4]
 80211ea:	b90a      	cbnz	r2, 80211f0 <_scanf_i+0xcc>
 80211ec:	220a      	movs	r2, #10
 80211ee:	6062      	str	r2, [r4, #4]
 80211f0:	6862      	ldr	r2, [r4, #4]
 80211f2:	4945      	ldr	r1, [pc, #276]	; (8021308 <_scanf_i+0x1e4>)
 80211f4:	6960      	ldr	r0, [r4, #20]
 80211f6:	9301      	str	r3, [sp, #4]
 80211f8:	1a89      	subs	r1, r1, r2
 80211fa:	f000 f8cf 	bl	802139c <__sccl>
 80211fe:	9b01      	ldr	r3, [sp, #4]
 8021200:	f04f 0800 	mov.w	r8, #0
 8021204:	461d      	mov	r5, r3
 8021206:	68a3      	ldr	r3, [r4, #8]
 8021208:	6822      	ldr	r2, [r4, #0]
 802120a:	2b00      	cmp	r3, #0
 802120c:	d03a      	beq.n	8021284 <_scanf_i+0x160>
 802120e:	6831      	ldr	r1, [r6, #0]
 8021210:	6960      	ldr	r0, [r4, #20]
 8021212:	f891 c000 	ldrb.w	ip, [r1]
 8021216:	f810 000c 	ldrb.w	r0, [r0, ip]
 802121a:	2800      	cmp	r0, #0
 802121c:	d032      	beq.n	8021284 <_scanf_i+0x160>
 802121e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8021222:	d121      	bne.n	8021268 <_scanf_i+0x144>
 8021224:	0510      	lsls	r0, r2, #20
 8021226:	d51f      	bpl.n	8021268 <_scanf_i+0x144>
 8021228:	f108 0801 	add.w	r8, r8, #1
 802122c:	b117      	cbz	r7, 8021234 <_scanf_i+0x110>
 802122e:	3301      	adds	r3, #1
 8021230:	3f01      	subs	r7, #1
 8021232:	60a3      	str	r3, [r4, #8]
 8021234:	6873      	ldr	r3, [r6, #4]
 8021236:	3b01      	subs	r3, #1
 8021238:	2b00      	cmp	r3, #0
 802123a:	6073      	str	r3, [r6, #4]
 802123c:	dd1b      	ble.n	8021276 <_scanf_i+0x152>
 802123e:	6833      	ldr	r3, [r6, #0]
 8021240:	3301      	adds	r3, #1
 8021242:	6033      	str	r3, [r6, #0]
 8021244:	68a3      	ldr	r3, [r4, #8]
 8021246:	3b01      	subs	r3, #1
 8021248:	60a3      	str	r3, [r4, #8]
 802124a:	e7dc      	b.n	8021206 <_scanf_i+0xe2>
 802124c:	f1b8 0f02 	cmp.w	r8, #2
 8021250:	d1ad      	bne.n	80211ae <_scanf_i+0x8a>
 8021252:	6822      	ldr	r2, [r4, #0]
 8021254:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8021258:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802125c:	d1bf      	bne.n	80211de <_scanf_i+0xba>
 802125e:	2110      	movs	r1, #16
 8021260:	6061      	str	r1, [r4, #4]
 8021262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021266:	e7a1      	b.n	80211ac <_scanf_i+0x88>
 8021268:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802126c:	6022      	str	r2, [r4, #0]
 802126e:	780b      	ldrb	r3, [r1, #0]
 8021270:	702b      	strb	r3, [r5, #0]
 8021272:	3501      	adds	r5, #1
 8021274:	e7de      	b.n	8021234 <_scanf_i+0x110>
 8021276:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802127a:	4631      	mov	r1, r6
 802127c:	4658      	mov	r0, fp
 802127e:	4798      	blx	r3
 8021280:	2800      	cmp	r0, #0
 8021282:	d0df      	beq.n	8021244 <_scanf_i+0x120>
 8021284:	6823      	ldr	r3, [r4, #0]
 8021286:	05d9      	lsls	r1, r3, #23
 8021288:	d50c      	bpl.n	80212a4 <_scanf_i+0x180>
 802128a:	454d      	cmp	r5, r9
 802128c:	d908      	bls.n	80212a0 <_scanf_i+0x17c>
 802128e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8021292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021296:	4632      	mov	r2, r6
 8021298:	4658      	mov	r0, fp
 802129a:	4798      	blx	r3
 802129c:	1e6f      	subs	r7, r5, #1
 802129e:	463d      	mov	r5, r7
 80212a0:	454d      	cmp	r5, r9
 80212a2:	d029      	beq.n	80212f8 <_scanf_i+0x1d4>
 80212a4:	6822      	ldr	r2, [r4, #0]
 80212a6:	f012 0210 	ands.w	r2, r2, #16
 80212aa:	d113      	bne.n	80212d4 <_scanf_i+0x1b0>
 80212ac:	702a      	strb	r2, [r5, #0]
 80212ae:	6863      	ldr	r3, [r4, #4]
 80212b0:	9e00      	ldr	r6, [sp, #0]
 80212b2:	4649      	mov	r1, r9
 80212b4:	4658      	mov	r0, fp
 80212b6:	47b0      	blx	r6
 80212b8:	f8da 3000 	ldr.w	r3, [sl]
 80212bc:	6821      	ldr	r1, [r4, #0]
 80212be:	1d1a      	adds	r2, r3, #4
 80212c0:	f8ca 2000 	str.w	r2, [sl]
 80212c4:	f011 0f20 	tst.w	r1, #32
 80212c8:	681b      	ldr	r3, [r3, #0]
 80212ca:	d010      	beq.n	80212ee <_scanf_i+0x1ca>
 80212cc:	6018      	str	r0, [r3, #0]
 80212ce:	68e3      	ldr	r3, [r4, #12]
 80212d0:	3301      	adds	r3, #1
 80212d2:	60e3      	str	r3, [r4, #12]
 80212d4:	eba5 0509 	sub.w	r5, r5, r9
 80212d8:	44a8      	add	r8, r5
 80212da:	6925      	ldr	r5, [r4, #16]
 80212dc:	4445      	add	r5, r8
 80212de:	6125      	str	r5, [r4, #16]
 80212e0:	2000      	movs	r0, #0
 80212e2:	b007      	add	sp, #28
 80212e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212e8:	f04f 0800 	mov.w	r8, #0
 80212ec:	e7ca      	b.n	8021284 <_scanf_i+0x160>
 80212ee:	07ca      	lsls	r2, r1, #31
 80212f0:	bf4c      	ite	mi
 80212f2:	8018      	strhmi	r0, [r3, #0]
 80212f4:	6018      	strpl	r0, [r3, #0]
 80212f6:	e7ea      	b.n	80212ce <_scanf_i+0x1aa>
 80212f8:	2001      	movs	r0, #1
 80212fa:	e7f2      	b.n	80212e2 <_scanf_i+0x1be>
 80212fc:	080218f4 	.word	0x080218f4
 8021300:	0801e8d1 	.word	0x0801e8d1
 8021304:	080214f5 	.word	0x080214f5
 8021308:	0803c07d 	.word	0x0803c07d

0802130c <_putc_r>:
 802130c:	b570      	push	{r4, r5, r6, lr}
 802130e:	460d      	mov	r5, r1
 8021310:	4614      	mov	r4, r2
 8021312:	4606      	mov	r6, r0
 8021314:	b118      	cbz	r0, 802131e <_putc_r+0x12>
 8021316:	6983      	ldr	r3, [r0, #24]
 8021318:	b90b      	cbnz	r3, 802131e <_putc_r+0x12>
 802131a:	f7fe fd29 	bl	801fd70 <__sinit>
 802131e:	4b13      	ldr	r3, [pc, #76]	; (802136c <_putc_r+0x60>)
 8021320:	429c      	cmp	r4, r3
 8021322:	d112      	bne.n	802134a <_putc_r+0x3e>
 8021324:	6874      	ldr	r4, [r6, #4]
 8021326:	68a3      	ldr	r3, [r4, #8]
 8021328:	3b01      	subs	r3, #1
 802132a:	2b00      	cmp	r3, #0
 802132c:	60a3      	str	r3, [r4, #8]
 802132e:	da16      	bge.n	802135e <_putc_r+0x52>
 8021330:	69a2      	ldr	r2, [r4, #24]
 8021332:	4293      	cmp	r3, r2
 8021334:	db02      	blt.n	802133c <_putc_r+0x30>
 8021336:	b2eb      	uxtb	r3, r5
 8021338:	2b0a      	cmp	r3, #10
 802133a:	d110      	bne.n	802135e <_putc_r+0x52>
 802133c:	4622      	mov	r2, r4
 802133e:	4629      	mov	r1, r5
 8021340:	4630      	mov	r0, r6
 8021342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021346:	f7fd bd19 	b.w	801ed7c <__swbuf_r>
 802134a:	4b09      	ldr	r3, [pc, #36]	; (8021370 <_putc_r+0x64>)
 802134c:	429c      	cmp	r4, r3
 802134e:	d101      	bne.n	8021354 <_putc_r+0x48>
 8021350:	68b4      	ldr	r4, [r6, #8]
 8021352:	e7e8      	b.n	8021326 <_putc_r+0x1a>
 8021354:	4b07      	ldr	r3, [pc, #28]	; (8021374 <_putc_r+0x68>)
 8021356:	429c      	cmp	r4, r3
 8021358:	bf08      	it	eq
 802135a:	68f4      	ldreq	r4, [r6, #12]
 802135c:	e7e3      	b.n	8021326 <_putc_r+0x1a>
 802135e:	6823      	ldr	r3, [r4, #0]
 8021360:	1c5a      	adds	r2, r3, #1
 8021362:	6022      	str	r2, [r4, #0]
 8021364:	701d      	strb	r5, [r3, #0]
 8021366:	b2e8      	uxtb	r0, r5
 8021368:	bd70      	pop	{r4, r5, r6, pc}
 802136a:	bf00      	nop
 802136c:	0803bf10 	.word	0x0803bf10
 8021370:	0803bf30 	.word	0x0803bf30
 8021374:	0803bef0 	.word	0x0803bef0

08021378 <_read_r>:
 8021378:	b538      	push	{r3, r4, r5, lr}
 802137a:	4c07      	ldr	r4, [pc, #28]	; (8021398 <_read_r+0x20>)
 802137c:	4605      	mov	r5, r0
 802137e:	4608      	mov	r0, r1
 8021380:	4611      	mov	r1, r2
 8021382:	2200      	movs	r2, #0
 8021384:	6022      	str	r2, [r4, #0]
 8021386:	461a      	mov	r2, r3
 8021388:	f7e2 fd76 	bl	8003e78 <_read>
 802138c:	1c43      	adds	r3, r0, #1
 802138e:	d102      	bne.n	8021396 <_read_r+0x1e>
 8021390:	6823      	ldr	r3, [r4, #0]
 8021392:	b103      	cbz	r3, 8021396 <_read_r+0x1e>
 8021394:	602b      	str	r3, [r5, #0]
 8021396:	bd38      	pop	{r3, r4, r5, pc}
 8021398:	200354e4 	.word	0x200354e4

0802139c <__sccl>:
 802139c:	b570      	push	{r4, r5, r6, lr}
 802139e:	780b      	ldrb	r3, [r1, #0]
 80213a0:	2b5e      	cmp	r3, #94	; 0x5e
 80213a2:	bf13      	iteet	ne
 80213a4:	1c4a      	addne	r2, r1, #1
 80213a6:	1c8a      	addeq	r2, r1, #2
 80213a8:	784b      	ldrbeq	r3, [r1, #1]
 80213aa:	2100      	movne	r1, #0
 80213ac:	bf08      	it	eq
 80213ae:	2101      	moveq	r1, #1
 80213b0:	1e44      	subs	r4, r0, #1
 80213b2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80213b6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80213ba:	42ac      	cmp	r4, r5
 80213bc:	d1fb      	bne.n	80213b6 <__sccl+0x1a>
 80213be:	b913      	cbnz	r3, 80213c6 <__sccl+0x2a>
 80213c0:	3a01      	subs	r2, #1
 80213c2:	4610      	mov	r0, r2
 80213c4:	bd70      	pop	{r4, r5, r6, pc}
 80213c6:	f081 0401 	eor.w	r4, r1, #1
 80213ca:	54c4      	strb	r4, [r0, r3]
 80213cc:	1c51      	adds	r1, r2, #1
 80213ce:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80213d2:	2d2d      	cmp	r5, #45	; 0x2d
 80213d4:	f101 36ff 	add.w	r6, r1, #4294967295
 80213d8:	460a      	mov	r2, r1
 80213da:	d006      	beq.n	80213ea <__sccl+0x4e>
 80213dc:	2d5d      	cmp	r5, #93	; 0x5d
 80213de:	d0f0      	beq.n	80213c2 <__sccl+0x26>
 80213e0:	b90d      	cbnz	r5, 80213e6 <__sccl+0x4a>
 80213e2:	4632      	mov	r2, r6
 80213e4:	e7ed      	b.n	80213c2 <__sccl+0x26>
 80213e6:	462b      	mov	r3, r5
 80213e8:	e7ef      	b.n	80213ca <__sccl+0x2e>
 80213ea:	780e      	ldrb	r6, [r1, #0]
 80213ec:	2e5d      	cmp	r6, #93	; 0x5d
 80213ee:	d0fa      	beq.n	80213e6 <__sccl+0x4a>
 80213f0:	42b3      	cmp	r3, r6
 80213f2:	dcf8      	bgt.n	80213e6 <__sccl+0x4a>
 80213f4:	3301      	adds	r3, #1
 80213f6:	429e      	cmp	r6, r3
 80213f8:	54c4      	strb	r4, [r0, r3]
 80213fa:	dcfb      	bgt.n	80213f4 <__sccl+0x58>
 80213fc:	3102      	adds	r1, #2
 80213fe:	e7e6      	b.n	80213ce <__sccl+0x32>

08021400 <_strtoul_l.isra.0>:
 8021400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021404:	4680      	mov	r8, r0
 8021406:	4689      	mov	r9, r1
 8021408:	4692      	mov	sl, r2
 802140a:	461e      	mov	r6, r3
 802140c:	460f      	mov	r7, r1
 802140e:	463d      	mov	r5, r7
 8021410:	9808      	ldr	r0, [sp, #32]
 8021412:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021416:	f7fe fe2b 	bl	8020070 <__locale_ctype_ptr_l>
 802141a:	4420      	add	r0, r4
 802141c:	7843      	ldrb	r3, [r0, #1]
 802141e:	f013 0308 	ands.w	r3, r3, #8
 8021422:	d130      	bne.n	8021486 <_strtoul_l.isra.0+0x86>
 8021424:	2c2d      	cmp	r4, #45	; 0x2d
 8021426:	d130      	bne.n	802148a <_strtoul_l.isra.0+0x8a>
 8021428:	787c      	ldrb	r4, [r7, #1]
 802142a:	1cbd      	adds	r5, r7, #2
 802142c:	2101      	movs	r1, #1
 802142e:	2e00      	cmp	r6, #0
 8021430:	d05c      	beq.n	80214ec <_strtoul_l.isra.0+0xec>
 8021432:	2e10      	cmp	r6, #16
 8021434:	d109      	bne.n	802144a <_strtoul_l.isra.0+0x4a>
 8021436:	2c30      	cmp	r4, #48	; 0x30
 8021438:	d107      	bne.n	802144a <_strtoul_l.isra.0+0x4a>
 802143a:	782b      	ldrb	r3, [r5, #0]
 802143c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021440:	2b58      	cmp	r3, #88	; 0x58
 8021442:	d14e      	bne.n	80214e2 <_strtoul_l.isra.0+0xe2>
 8021444:	786c      	ldrb	r4, [r5, #1]
 8021446:	2610      	movs	r6, #16
 8021448:	3502      	adds	r5, #2
 802144a:	f04f 32ff 	mov.w	r2, #4294967295
 802144e:	2300      	movs	r3, #0
 8021450:	fbb2 f2f6 	udiv	r2, r2, r6
 8021454:	fb06 fc02 	mul.w	ip, r6, r2
 8021458:	ea6f 0c0c 	mvn.w	ip, ip
 802145c:	4618      	mov	r0, r3
 802145e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021462:	2f09      	cmp	r7, #9
 8021464:	d817      	bhi.n	8021496 <_strtoul_l.isra.0+0x96>
 8021466:	463c      	mov	r4, r7
 8021468:	42a6      	cmp	r6, r4
 802146a:	dd23      	ble.n	80214b4 <_strtoul_l.isra.0+0xb4>
 802146c:	2b00      	cmp	r3, #0
 802146e:	db1e      	blt.n	80214ae <_strtoul_l.isra.0+0xae>
 8021470:	4282      	cmp	r2, r0
 8021472:	d31c      	bcc.n	80214ae <_strtoul_l.isra.0+0xae>
 8021474:	d101      	bne.n	802147a <_strtoul_l.isra.0+0x7a>
 8021476:	45a4      	cmp	ip, r4
 8021478:	db19      	blt.n	80214ae <_strtoul_l.isra.0+0xae>
 802147a:	fb00 4006 	mla	r0, r0, r6, r4
 802147e:	2301      	movs	r3, #1
 8021480:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021484:	e7eb      	b.n	802145e <_strtoul_l.isra.0+0x5e>
 8021486:	462f      	mov	r7, r5
 8021488:	e7c1      	b.n	802140e <_strtoul_l.isra.0+0xe>
 802148a:	2c2b      	cmp	r4, #43	; 0x2b
 802148c:	bf04      	itt	eq
 802148e:	1cbd      	addeq	r5, r7, #2
 8021490:	787c      	ldrbeq	r4, [r7, #1]
 8021492:	4619      	mov	r1, r3
 8021494:	e7cb      	b.n	802142e <_strtoul_l.isra.0+0x2e>
 8021496:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802149a:	2f19      	cmp	r7, #25
 802149c:	d801      	bhi.n	80214a2 <_strtoul_l.isra.0+0xa2>
 802149e:	3c37      	subs	r4, #55	; 0x37
 80214a0:	e7e2      	b.n	8021468 <_strtoul_l.isra.0+0x68>
 80214a2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80214a6:	2f19      	cmp	r7, #25
 80214a8:	d804      	bhi.n	80214b4 <_strtoul_l.isra.0+0xb4>
 80214aa:	3c57      	subs	r4, #87	; 0x57
 80214ac:	e7dc      	b.n	8021468 <_strtoul_l.isra.0+0x68>
 80214ae:	f04f 33ff 	mov.w	r3, #4294967295
 80214b2:	e7e5      	b.n	8021480 <_strtoul_l.isra.0+0x80>
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	da09      	bge.n	80214cc <_strtoul_l.isra.0+0xcc>
 80214b8:	2322      	movs	r3, #34	; 0x22
 80214ba:	f8c8 3000 	str.w	r3, [r8]
 80214be:	f04f 30ff 	mov.w	r0, #4294967295
 80214c2:	f1ba 0f00 	cmp.w	sl, #0
 80214c6:	d107      	bne.n	80214d8 <_strtoul_l.isra.0+0xd8>
 80214c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214cc:	b101      	cbz	r1, 80214d0 <_strtoul_l.isra.0+0xd0>
 80214ce:	4240      	negs	r0, r0
 80214d0:	f1ba 0f00 	cmp.w	sl, #0
 80214d4:	d0f8      	beq.n	80214c8 <_strtoul_l.isra.0+0xc8>
 80214d6:	b10b      	cbz	r3, 80214dc <_strtoul_l.isra.0+0xdc>
 80214d8:	f105 39ff 	add.w	r9, r5, #4294967295
 80214dc:	f8ca 9000 	str.w	r9, [sl]
 80214e0:	e7f2      	b.n	80214c8 <_strtoul_l.isra.0+0xc8>
 80214e2:	2430      	movs	r4, #48	; 0x30
 80214e4:	2e00      	cmp	r6, #0
 80214e6:	d1b0      	bne.n	802144a <_strtoul_l.isra.0+0x4a>
 80214e8:	2608      	movs	r6, #8
 80214ea:	e7ae      	b.n	802144a <_strtoul_l.isra.0+0x4a>
 80214ec:	2c30      	cmp	r4, #48	; 0x30
 80214ee:	d0a4      	beq.n	802143a <_strtoul_l.isra.0+0x3a>
 80214f0:	260a      	movs	r6, #10
 80214f2:	e7aa      	b.n	802144a <_strtoul_l.isra.0+0x4a>

080214f4 <_strtoul_r>:
 80214f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80214f6:	4c06      	ldr	r4, [pc, #24]	; (8021510 <_strtoul_r+0x1c>)
 80214f8:	4d06      	ldr	r5, [pc, #24]	; (8021514 <_strtoul_r+0x20>)
 80214fa:	6824      	ldr	r4, [r4, #0]
 80214fc:	6a24      	ldr	r4, [r4, #32]
 80214fe:	2c00      	cmp	r4, #0
 8021500:	bf08      	it	eq
 8021502:	462c      	moveq	r4, r5
 8021504:	9400      	str	r4, [sp, #0]
 8021506:	f7ff ff7b 	bl	8021400 <_strtoul_l.isra.0>
 802150a:	b003      	add	sp, #12
 802150c:	bd30      	pop	{r4, r5, pc}
 802150e:	bf00      	nop
 8021510:	200004b8 	.word	0x200004b8
 8021514:	20000580 	.word	0x20000580

08021518 <strtoul>:
 8021518:	4b08      	ldr	r3, [pc, #32]	; (802153c <strtoul+0x24>)
 802151a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802151c:	681c      	ldr	r4, [r3, #0]
 802151e:	4d08      	ldr	r5, [pc, #32]	; (8021540 <strtoul+0x28>)
 8021520:	6a23      	ldr	r3, [r4, #32]
 8021522:	2b00      	cmp	r3, #0
 8021524:	bf08      	it	eq
 8021526:	462b      	moveq	r3, r5
 8021528:	9300      	str	r3, [sp, #0]
 802152a:	4613      	mov	r3, r2
 802152c:	460a      	mov	r2, r1
 802152e:	4601      	mov	r1, r0
 8021530:	4620      	mov	r0, r4
 8021532:	f7ff ff65 	bl	8021400 <_strtoul_l.isra.0>
 8021536:	b003      	add	sp, #12
 8021538:	bd30      	pop	{r4, r5, pc}
 802153a:	bf00      	nop
 802153c:	200004b8 	.word	0x200004b8
 8021540:	20000580 	.word	0x20000580

08021544 <__submore>:
 8021544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021548:	460c      	mov	r4, r1
 802154a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802154c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021550:	4299      	cmp	r1, r3
 8021552:	d11d      	bne.n	8021590 <__submore+0x4c>
 8021554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021558:	f7fc fab0 	bl	801dabc <_malloc_r>
 802155c:	b918      	cbnz	r0, 8021566 <__submore+0x22>
 802155e:	f04f 30ff 	mov.w	r0, #4294967295
 8021562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802156a:	63a3      	str	r3, [r4, #56]	; 0x38
 802156c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021570:	6360      	str	r0, [r4, #52]	; 0x34
 8021572:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021576:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802157a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802157e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8021582:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8021586:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802158a:	6020      	str	r0, [r4, #0]
 802158c:	2000      	movs	r0, #0
 802158e:	e7e8      	b.n	8021562 <__submore+0x1e>
 8021590:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8021592:	0077      	lsls	r7, r6, #1
 8021594:	463a      	mov	r2, r7
 8021596:	f7ff f8ff 	bl	8020798 <_realloc_r>
 802159a:	4605      	mov	r5, r0
 802159c:	2800      	cmp	r0, #0
 802159e:	d0de      	beq.n	802155e <__submore+0x1a>
 80215a0:	eb00 0806 	add.w	r8, r0, r6
 80215a4:	4601      	mov	r1, r0
 80215a6:	4632      	mov	r2, r6
 80215a8:	4640      	mov	r0, r8
 80215aa:	f7fb ff92 	bl	801d4d2 <memcpy>
 80215ae:	f8c4 8000 	str.w	r8, [r4]
 80215b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80215b6:	e7e9      	b.n	802158c <__submore+0x48>

080215b8 <__ascii_wctomb>:
 80215b8:	b149      	cbz	r1, 80215ce <__ascii_wctomb+0x16>
 80215ba:	2aff      	cmp	r2, #255	; 0xff
 80215bc:	bf85      	ittet	hi
 80215be:	238a      	movhi	r3, #138	; 0x8a
 80215c0:	6003      	strhi	r3, [r0, #0]
 80215c2:	700a      	strbls	r2, [r1, #0]
 80215c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80215c8:	bf98      	it	ls
 80215ca:	2001      	movls	r0, #1
 80215cc:	4770      	bx	lr
 80215ce:	4608      	mov	r0, r1
 80215d0:	4770      	bx	lr

080215d2 <__env_lock>:
 80215d2:	4770      	bx	lr

080215d4 <__env_unlock>:
 80215d4:	4770      	bx	lr
	...

080215d8 <_fstat_r>:
 80215d8:	b538      	push	{r3, r4, r5, lr}
 80215da:	4c07      	ldr	r4, [pc, #28]	; (80215f8 <_fstat_r+0x20>)
 80215dc:	2300      	movs	r3, #0
 80215de:	4605      	mov	r5, r0
 80215e0:	4608      	mov	r0, r1
 80215e2:	4611      	mov	r1, r2
 80215e4:	6023      	str	r3, [r4, #0]
 80215e6:	f7e2 fc59 	bl	8003e9c <_fstat>
 80215ea:	1c43      	adds	r3, r0, #1
 80215ec:	d102      	bne.n	80215f4 <_fstat_r+0x1c>
 80215ee:	6823      	ldr	r3, [r4, #0]
 80215f0:	b103      	cbz	r3, 80215f4 <_fstat_r+0x1c>
 80215f2:	602b      	str	r3, [r5, #0]
 80215f4:	bd38      	pop	{r3, r4, r5, pc}
 80215f6:	bf00      	nop
 80215f8:	200354e4 	.word	0x200354e4

080215fc <_isatty_r>:
 80215fc:	b538      	push	{r3, r4, r5, lr}
 80215fe:	4c06      	ldr	r4, [pc, #24]	; (8021618 <_isatty_r+0x1c>)
 8021600:	2300      	movs	r3, #0
 8021602:	4605      	mov	r5, r0
 8021604:	4608      	mov	r0, r1
 8021606:	6023      	str	r3, [r4, #0]
 8021608:	f7e2 fc4e 	bl	8003ea8 <_isatty>
 802160c:	1c43      	adds	r3, r0, #1
 802160e:	d102      	bne.n	8021616 <_isatty_r+0x1a>
 8021610:	6823      	ldr	r3, [r4, #0]
 8021612:	b103      	cbz	r3, 8021616 <_isatty_r+0x1a>
 8021614:	602b      	str	r3, [r5, #0]
 8021616:	bd38      	pop	{r3, r4, r5, pc}
 8021618:	200354e4 	.word	0x200354e4

0802161c <memmove>:
 802161c:	4288      	cmp	r0, r1
 802161e:	b510      	push	{r4, lr}
 8021620:	eb01 0302 	add.w	r3, r1, r2
 8021624:	d807      	bhi.n	8021636 <memmove+0x1a>
 8021626:	1e42      	subs	r2, r0, #1
 8021628:	4299      	cmp	r1, r3
 802162a:	d00a      	beq.n	8021642 <memmove+0x26>
 802162c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021630:	f802 4f01 	strb.w	r4, [r2, #1]!
 8021634:	e7f8      	b.n	8021628 <memmove+0xc>
 8021636:	4283      	cmp	r3, r0
 8021638:	d9f5      	bls.n	8021626 <memmove+0xa>
 802163a:	1881      	adds	r1, r0, r2
 802163c:	1ad2      	subs	r2, r2, r3
 802163e:	42d3      	cmn	r3, r2
 8021640:	d100      	bne.n	8021644 <memmove+0x28>
 8021642:	bd10      	pop	{r4, pc}
 8021644:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021648:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802164c:	e7f7      	b.n	802163e <memmove+0x22>

0802164e <_malloc_usable_size_r>:
 802164e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021652:	1f18      	subs	r0, r3, #4
 8021654:	2b00      	cmp	r3, #0
 8021656:	bfbc      	itt	lt
 8021658:	580b      	ldrlt	r3, [r1, r0]
 802165a:	18c0      	addlt	r0, r0, r3
 802165c:	4770      	bx	lr
	...

08021660 <_init>:
 8021660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021662:	bf00      	nop
 8021664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021666:	bc08      	pop	{r3}
 8021668:	469e      	mov	lr, r3
 802166a:	4770      	bx	lr

0802166c <_fini>:
 802166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802166e:	bf00      	nop
 8021670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021672:	bc08      	pop	{r3}
 8021674:	469e      	mov	lr, r3
 8021676:	4770      	bx	lr
